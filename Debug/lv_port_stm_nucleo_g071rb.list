
lv_port_stm_nucleo_g071rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b494  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d2c  0801b550  0801b550  0002b550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f27c  0801f27c  00030094  2**0
                  CONTENTS
  4 .ARM          00000000  0801f27c  0801f27c  00030094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801f27c  0801f27c  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f27c  0801f27c  0002f27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f280  0801f280  0002f280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801f284  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007c7c  20000094  0801f318  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20007d10  0801f318  00037d10  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .ExtFlashSection 00000000  90000000  90000000  000300bc  2**0
                  CONTENTS
 13 .debug_info   000ba083  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0001396c  00000000  00000000  000ea13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002f10  00000000  00000000  000fdab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 0000e8b8  00000000  00000000  001009c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033a22  00000000  00000000  0010f278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000be9d2  00000000  00000000  00142c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000abdb6  00000000  00000000  0020166c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002ad422  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008490  00000000  00000000  002ad474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000630d9  00000000  00000000  002b5904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000094 	.word	0x20000094
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801b538 	.word	0x0801b538

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000098 	.word	0x20000098
 8000100:	0801b538 	.word	0x0801b538

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__clzsi2>:
 8000414:	211c      	movs	r1, #28
 8000416:	2301      	movs	r3, #1
 8000418:	041b      	lsls	r3, r3, #16
 800041a:	4298      	cmp	r0, r3
 800041c:	d301      	bcc.n	8000422 <__clzsi2+0xe>
 800041e:	0c00      	lsrs	r0, r0, #16
 8000420:	3910      	subs	r1, #16
 8000422:	0a1b      	lsrs	r3, r3, #8
 8000424:	4298      	cmp	r0, r3
 8000426:	d301      	bcc.n	800042c <__clzsi2+0x18>
 8000428:	0a00      	lsrs	r0, r0, #8
 800042a:	3908      	subs	r1, #8
 800042c:	091b      	lsrs	r3, r3, #4
 800042e:	4298      	cmp	r0, r3
 8000430:	d301      	bcc.n	8000436 <__clzsi2+0x22>
 8000432:	0900      	lsrs	r0, r0, #4
 8000434:	3904      	subs	r1, #4
 8000436:	a202      	add	r2, pc, #8	; (adr r2, 8000440 <__clzsi2+0x2c>)
 8000438:	5c10      	ldrb	r0, [r2, r0]
 800043a:	1840      	adds	r0, r0, r1
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	02020304 	.word	0x02020304
 8000444:	01010101 	.word	0x01010101
	...

08000450 <__ffssi2>:
 8000450:	b510      	push	{r4, lr}
 8000452:	2800      	cmp	r0, #0
 8000454:	d003      	beq.n	800045e <__ffssi2+0xe>
 8000456:	f000 f805 	bl	8000464 <__ctzsi2>
 800045a:	3001      	adds	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2000      	movs	r0, #0
 8000460:	e7fc      	b.n	800045c <__ffssi2+0xc>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__ctzsi2>:
 8000464:	4241      	negs	r1, r0
 8000466:	4008      	ands	r0, r1
 8000468:	211c      	movs	r1, #28
 800046a:	2301      	movs	r3, #1
 800046c:	041b      	lsls	r3, r3, #16
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__ctzsi2+0x12>
 8000472:	0c00      	lsrs	r0, r0, #16
 8000474:	3910      	subs	r1, #16
 8000476:	0a1b      	lsrs	r3, r3, #8
 8000478:	4298      	cmp	r0, r3
 800047a:	d301      	bcc.n	8000480 <__ctzsi2+0x1c>
 800047c:	0a00      	lsrs	r0, r0, #8
 800047e:	3908      	subs	r1, #8
 8000480:	091b      	lsrs	r3, r3, #4
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__ctzsi2+0x26>
 8000486:	0900      	lsrs	r0, r0, #4
 8000488:	3904      	subs	r1, #4
 800048a:	a202      	add	r2, pc, #8	; (adr r2, 8000494 <__ctzsi2+0x30>)
 800048c:	5c10      	ldrb	r0, [r2, r0]
 800048e:	1a40      	subs	r0, r0, r1
 8000490:	4770      	bx	lr
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	1d1d1c1b 	.word	0x1d1d1c1b
 8000498:	1e1e1e1e 	.word	0x1e1e1e1e
 800049c:	1f1f1f1f 	.word	0x1f1f1f1f
 80004a0:	1f1f1f1f 	.word	0x1f1f1f1f

080004a4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80004a4:	b500      	push	{lr}
 80004a6:	b093      	sub	sp, #76	; 0x4c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a8:	2238      	movs	r2, #56	; 0x38
 80004aa:	2100      	movs	r1, #0
 80004ac:	a804      	add	r0, sp, #16
 80004ae:	f01b f833 	bl	801b518 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b2:	2210      	movs	r2, #16
 80004b4:	2100      	movs	r1, #0
 80004b6:	4668      	mov	r0, sp
 80004b8:	f01b f82e 	bl	801b518 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004bc:	2080      	movs	r0, #128	; 0x80
 80004be:	0080      	lsls	r0, r0, #2
 80004c0:	f002 f8de 	bl	8002680 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c4:	2302      	movs	r3, #2
 80004c6:	9304      	str	r3, [sp, #16]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c8:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004ca:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
	RCC_OscInitStruct.PLL.PLLN = 16;
 80004cc:	330e      	adds	r3, #14
 80004ce:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	029b      	lsls	r3, r3, #10
 80004d4:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004d6:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d8:	2280      	movs	r2, #128	; 0x80
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004da:	049b      	lsls	r3, r3, #18
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004dc:	0052      	lsls	r2, r2, #1
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004de:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80004e0:	23c0      	movs	r3, #192	; 0xc0
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e2:	2140      	movs	r1, #64	; 0x40
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e4:	9207      	str	r2, [sp, #28]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004e6:	2200      	movs	r2, #0
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80004e8:	05db      	lsls	r3, r3, #23
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ea:	a804      	add	r0, sp, #16
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004ec:	9208      	str	r2, [sp, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ee:	9109      	str	r1, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004f0:	920d      	str	r2, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80004f2:	9311      	str	r3, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f4:	f002 f8f4 	bl	80026e0 <HAL_RCC_OscConfig>
 80004f8:	2800      	cmp	r0, #0
 80004fa:	d001      	beq.n	8000500 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80004fe:	e7fe      	b.n	80004fe <SystemClock_Config+0x5a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000500:	2207      	movs	r2, #7
 8000502:	2302      	movs	r3, #2
 8000504:	9200      	str	r2, [sp, #0]
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800050c:	2102      	movs	r1, #2
 800050e:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000510:	9202      	str	r2, [sp, #8]
 8000512:	9303      	str	r3, [sp, #12]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000514:	f002 fba2 	bl	8002c5c <HAL_RCC_ClockConfig>
 8000518:	2800      	cmp	r0, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x7c>
 800051c:	b672      	cpsid	i
	while (1)
 800051e:	e7fe      	b.n	800051e <SystemClock_Config+0x7a>
}
 8000520:	b013      	add	sp, #76	; 0x4c
 8000522:	bd00      	pop	{pc}

08000524 <main>:
{
 8000524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000526:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 8000528:	f001 fc1e 	bl	8001d68 <HAL_Init>
	SystemClock_Config();
 800052c:	f7ff ffba 	bl	80004a4 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	2214      	movs	r2, #20
 8000532:	2100      	movs	r1, #0
 8000534:	a804      	add	r0, sp, #16
 8000536:	f01a ffef 	bl	801b518 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	2304      	movs	r3, #4
 800053c:	4c63      	ldr	r4, [pc, #396]	; (80006cc <main+0x1a8>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	2501      	movs	r5, #1
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000540:	6b62      	ldr	r2, [r4, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOA, DISP_NRESET_Pin|SPIB_NCS_Pin|SPIA_NCS_Pin, GPIO_PIN_SET);
 8000542:	20a0      	movs	r0, #160	; 0xa0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000544:	431a      	orrs	r2, r3
 8000546:	6362      	str	r2, [r4, #52]	; 0x34
 8000548:	6b62      	ldr	r2, [r4, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOA, DISP_NRESET_Pin|SPIB_NCS_Pin|SPIA_NCS_Pin, GPIO_PIN_SET);
 800054a:	4961      	ldr	r1, [pc, #388]	; (80006d0 <main+0x1ac>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800054c:	4013      	ands	r3, r2
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	9b00      	ldr	r3, [sp, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000552:	2320      	movs	r3, #32
 8000554:	6b62      	ldr	r2, [r4, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOA, DISP_NRESET_Pin|SPIB_NCS_Pin|SPIA_NCS_Pin, GPIO_PIN_SET);
 8000556:	05c0      	lsls	r0, r0, #23
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000558:	431a      	orrs	r2, r3
 800055a:	6362      	str	r2, [r4, #52]	; 0x34
 800055c:	6b62      	ldr	r2, [r4, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2600      	movs	r6, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000560:	4013      	ands	r3, r2
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	6b63      	ldr	r3, [r4, #52]	; 0x34
	GPIO_InitStruct.Pin = SPIA_DCX_Pin;
 8000568:	2702      	movs	r7, #2
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	432b      	orrs	r3, r5
 800056c:	6363      	str	r3, [r4, #52]	; 0x34
 800056e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000570:	402b      	ands	r3, r5
 8000572:	9302      	str	r3, [sp, #8]
 8000574:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	2302      	movs	r3, #2
 8000578:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800057a:	431a      	orrs	r2, r3
 800057c:	6362      	str	r2, [r4, #52]	; 0x34
 800057e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000580:	4013      	ands	r3, r2
 8000582:	9303      	str	r3, [sp, #12]
	HAL_GPIO_WritePin(GPIOA, DISP_NRESET_Pin|SPIB_NCS_Pin|SPIA_NCS_Pin, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(GPIOA, DISP_NRESET_Pin|SPIB_NCS_Pin|SPIA_NCS_Pin, GPIO_PIN_SET);
 8000588:	f002 f874 	bl	8002674 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPIA_DCX_GPIO_Port, SPIA_DCX_Pin, GPIO_PIN_SET);
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	2201      	movs	r2, #1
 8000590:	4850      	ldr	r0, [pc, #320]	; (80006d4 <main+0x1b0>)
 8000592:	01c9      	lsls	r1, r1, #7
 8000594:	f002 f86e 	bl	8002674 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = BUTTON_USER_Pin|KEY_CENTER_Pin;
 8000598:	2282      	movs	r2, #130	; 0x82
 800059a:	2300      	movs	r3, #0
 800059c:	0192      	lsls	r2, r2, #6
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059e:	484e      	ldr	r0, [pc, #312]	; (80006d8 <main+0x1b4>)
 80005a0:	a904      	add	r1, sp, #16
	GPIO_InitStruct.Pin = BUTTON_USER_Pin|KEY_CENTER_Pin;
 80005a2:	9204      	str	r2, [sp, #16]
 80005a4:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a8:	f001 fec6 	bl	8002338 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DISP_TE_Pin;
 80005ac:	23c4      	movs	r3, #196	; 0xc4
	HAL_GPIO_Init(DISP_TE_GPIO_Port, &GPIO_InitStruct);
 80005ae:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = DISP_TE_Pin;
 80005b0:	2201      	movs	r2, #1
 80005b2:	039b      	lsls	r3, r3, #14
	HAL_GPIO_Init(DISP_TE_GPIO_Port, &GPIO_InitStruct);
 80005b4:	a904      	add	r1, sp, #16
 80005b6:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = DISP_TE_Pin;
 80005b8:	9204      	str	r2, [sp, #16]
 80005ba:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(DISP_TE_GPIO_Port, &GPIO_InitStruct);
 80005be:	f001 febb 	bl	8002338 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = DISP_NRESET_Pin;
 80005c2:	2202      	movs	r2, #2
 80005c4:	2301      	movs	r3, #1
	HAL_GPIO_Init(DISP_NRESET_GPIO_Port, &GPIO_InitStruct);
 80005c6:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = DISP_NRESET_Pin;
 80005c8:	9204      	str	r2, [sp, #16]
 80005ca:	9305      	str	r3, [sp, #20]
 80005cc:	2201      	movs	r2, #1
 80005ce:	2302      	movs	r3, #2
	HAL_GPIO_Init(DISP_NRESET_GPIO_Port, &GPIO_InitStruct);
 80005d0:	a904      	add	r1, sp, #16
 80005d2:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = DISP_NRESET_Pin;
 80005d4:	9206      	str	r2, [sp, #24]
 80005d6:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(DISP_NRESET_GPIO_Port, &GPIO_InitStruct);
 80005d8:	f001 feae 	bl	8002338 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = KEY_LEFT_Pin|KEY_RIGHT_Pin|KEY_UP_Pin|KEY_DOWN_Pin;
 80005dc:	2300      	movs	r3, #0
 80005de:	4a3f      	ldr	r2, [pc, #252]	; (80006dc <main+0x1b8>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e0:	483c      	ldr	r0, [pc, #240]	; (80006d4 <main+0x1b0>)
 80005e2:	a904      	add	r1, sp, #16
	GPIO_InitStruct.Pin = KEY_LEFT_Pin|KEY_RIGHT_Pin|KEY_UP_Pin|KEY_DOWN_Pin;
 80005e4:	9204      	str	r2, [sp, #16]
 80005e6:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	f001 fea5 	bl	8002338 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SPIA_DCX_Pin;
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	2301      	movs	r3, #1
 80005f2:	2600      	movs	r6, #0
 80005f4:	01d2      	lsls	r2, r2, #7
	HAL_GPIO_Init(SPIA_DCX_GPIO_Port, &GPIO_InitStruct);
 80005f6:	4837      	ldr	r0, [pc, #220]	; (80006d4 <main+0x1b0>)
 80005f8:	a904      	add	r1, sp, #16
	GPIO_InitStruct.Pin = SPIA_DCX_Pin;
 80005fa:	9204      	str	r2, [sp, #16]
 80005fc:	9305      	str	r3, [sp, #20]
 80005fe:	9606      	str	r6, [sp, #24]
 8000600:	9707      	str	r7, [sp, #28]
	HAL_GPIO_Init(SPIA_DCX_GPIO_Port, &GPIO_InitStruct);
 8000602:	f001 fe99 	bl	8002338 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SPIB_NCS_Pin|SPIA_NCS_Pin;
 8000606:	22c0      	movs	r2, #192	; 0xc0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000608:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = SPIB_NCS_Pin|SPIA_NCS_Pin;
 800060a:	2301      	movs	r3, #1
 800060c:	0092      	lsls	r2, r2, #2
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	a904      	add	r1, sp, #16
 8000610:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = SPIB_NCS_Pin|SPIA_NCS_Pin;
 8000612:	9204      	str	r2, [sp, #16]
 8000614:	9305      	str	r3, [sp, #20]
 8000616:	9606      	str	r6, [sp, #24]
 8000618:	9707      	str	r7, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	f001 fe8d 	bl	8002338 <HAL_GPIO_Init>
	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 800061e:	2380      	movs	r3, #128	; 0x80
 8000620:	4a2f      	ldr	r2, [pc, #188]	; (80006e0 <main+0x1bc>)
 8000622:	03db      	lsls	r3, r3, #15
 8000624:	6811      	ldr	r1, [r2, #0]
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000626:	2005      	movs	r0, #5
	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 8000628:	430b      	orrs	r3, r1
 800062a:	6013      	str	r3, [r2, #0]
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 800062c:	2103      	movs	r1, #3
 800062e:	2200      	movs	r2, #0
 8000630:	f001 fbde 	bl	8001df0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000634:	2005      	movs	r0, #5
 8000636:	f001 fc0d 	bl	8001e54 <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE();
 800063a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800063c:	2200      	movs	r2, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 800063e:	432b      	orrs	r3, r5
 8000640:	63a3      	str	r3, [r4, #56]	; 0x38
 8000642:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000644:	2102      	movs	r1, #2
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000646:	401d      	ands	r5, r3
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000648:	2009      	movs	r0, #9
	__HAL_RCC_DMA1_CLK_ENABLE();
 800064a:	9504      	str	r5, [sp, #16]
 800064c:	9b04      	ldr	r3, [sp, #16]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800064e:	f001 fbcf 	bl	8001df0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000652:	2009      	movs	r0, #9
 8000654:	f001 fbfe 	bl	8001e54 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2101      	movs	r1, #1
 800065c:	200a      	movs	r0, #10
 800065e:	f001 fbc7 	bl	8001df0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000662:	200a      	movs	r0, #10
 8000664:	f001 fbf6 	bl	8001e54 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000668:	2100      	movs	r1, #0
 800066a:	2200      	movs	r2, #0
 800066c:	200b      	movs	r0, #11
 800066e:	f001 fbbf 	bl	8001df0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000672:	200b      	movs	r0, #11
 8000674:	f001 fbee 	bl	8001e54 <HAL_NVIC_EnableIRQ>
	if(BSP_LCD_Init(0, LCD_ORIENTATION_PORTRAIT) != BSP_ERROR_NONE) {
 8000678:	2100      	movs	r1, #0
 800067a:	2000      	movs	r0, #0
 800067c:	f000 fc64 	bl	8000f48 <BSP_LCD_Init>
 8000680:	2800      	cmp	r0, #0
 8000682:	d001      	beq.n	8000688 <main+0x164>
 8000684:	b672      	cpsid	i
	while (1)
 8000686:	e7fe      	b.n	8000686 <main+0x162>
	if(BSP_MEM_Init(0) != BSP_ERROR_NONE) {
 8000688:	2000      	movs	r0, #0
 800068a:	f001 fa55 	bl	8001b38 <BSP_MEM_Init>
 800068e:	2800      	cmp	r0, #0
 8000690:	d001      	beq.n	8000696 <main+0x172>
 8000692:	b672      	cpsid	i
	while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x170>
	if(BSP_KEY_Init(0, KEY_ORIENTATION_PORTRAIT) != BSP_ERROR_NONE) {
 8000696:	0001      	movs	r1, r0
 8000698:	f000 fb46 	bl	8000d28 <BSP_KEY_Init>
 800069c:	2800      	cmp	r0, #0
 800069e:	d001      	beq.n	80006a4 <main+0x180>
 80006a0:	b672      	cpsid	i
	while (1)
 80006a2:	e7fe      	b.n	80006a2 <main+0x17e>
	if(BSP_LCD_DisplayOn(0) != BSP_ERROR_NONE) {
 80006a4:	f000 fcf2 	bl	800108c <BSP_LCD_DisplayOn>
 80006a8:	2800      	cmp	r0, #0
 80006aa:	d001      	beq.n	80006b0 <main+0x18c>
 80006ac:	b672      	cpsid	i
	while (1)
 80006ae:	e7fe      	b.n	80006ae <main+0x18a>
	lv_init();
 80006b0:	f007 fb68 	bl	8007d84 <lv_init>
	disp_init();
 80006b4:	f019 fd32 	bl	801a11c <disp_init>
	indev_init();
 80006b8:	f019 fd8a 	bl	801a1d0 <indev_init>
	ui_init();
 80006bc:	f01a fa88 	bl	801abd0 <ui_init>
		lv_timer_handler();
 80006c0:	f015 fa48 	bl	8015b54 <lv_timer_handler>
		HAL_Delay(2);
 80006c4:	2002      	movs	r0, #2
 80006c6:	f001 fb75 	bl	8001db4 <HAL_Delay>
	while (1)
 80006ca:	e7f9      	b.n	80006c0 <main+0x19c>
 80006cc:	40021000 	.word	0x40021000
 80006d0:	00000302 	.word	0x00000302
 80006d4:	50000400 	.word	0x50000400
 80006d8:	50000800 	.word	0x50000800
 80006dc:	00001013 	.word	0x00001013
 80006e0:	40010000 	.word	0x40010000

080006e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e4:	2201      	movs	r2, #1
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x34>)
{
 80006e8:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	6c19      	ldr	r1, [r3, #64]	; 0x40

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80006ec:	20c0      	movs	r0, #192	; 0xc0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	4311      	orrs	r1, r2
 80006f0:	6419      	str	r1, [r3, #64]	; 0x40
 80006f2:	6c19      	ldr	r1, [r3, #64]	; 0x40
{
 80006f4:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	9200      	str	r2, [sp, #0]
 80006fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000700:	0549      	lsls	r1, r1, #21
 8000702:	430a      	orrs	r2, r1
 8000704:	63da      	str	r2, [r3, #60]	; 0x3c
 8000706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000708:	00c0      	lsls	r0, r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	400b      	ands	r3, r1
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000710:	f001 fb62 	bl	8001dd8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000714:	b003      	add	sp, #12
 8000716:	bd00      	pop	{pc}
 8000718:	40021000 	.word	0x40021000

0800071c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler>
 800071e:	46c0      	nop			; (mov r8, r8)

08000720 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <HardFault_Handler>
 8000722:	46c0      	nop			; (mov r8, r8)

08000724 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000724:	4770      	bx	lr
 8000726:	46c0      	nop			; (mov r8, r8)

08000728 <PendSV_Handler>:
 8000728:	4770      	bx	lr
 800072a:	46c0      	nop			; (mov r8, r8)

0800072c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072e:	f001 fb2f 	bl	8001d90 <HAL_IncTick>
  lv_tick_inc(1);
 8000732:	2001      	movs	r0, #1
 8000734:	f013 fa3c 	bl	8013bb0 <lv_tick_inc>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000738:	bd10      	pop	{r4, pc}
 800073a:	46c0      	nop			; (mov r8, r8)

0800073c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800073c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800073e:	4802      	ldr	r0, [pc, #8]	; (8000748 <EXTI0_1_IRQHandler+0xc>)
 8000740:	f001 fdbc 	bl	80022bc <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000744:	bd10      	pop	{r4, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	200003d4 	.word	0x200003d4

0800074c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800074c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800074e:	4802      	ldr	r0, [pc, #8]	; (8000758 <DMA1_Channel1_IRQHandler+0xc>)
 8000750:	f001 fd3c 	bl	80021cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000754:	bd10      	pop	{r4, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	2000011c 	.word	0x2000011c

0800075c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800075c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800075e:	4803      	ldr	r0, [pc, #12]	; (800076c <DMA1_Channel2_3_IRQHandler+0x10>)
 8000760:	f001 fd34 	bl	80021cc <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000766:	f001 fd31 	bl	80021cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800076a:	bd10      	pop	{r4, pc}
 800076c:	200000c0 	.word	0x200000c0
 8000770:	200001d4 	.word	0x200001d4

08000774 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8000774:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000776:	4802      	ldr	r0, [pc, #8]	; (8000780 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0xc>)
 8000778:	f001 fd28 	bl	80021cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 800077c:	bd10      	pop	{r4, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	20000178 	.word	0x20000178

08000784 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000784:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000786:	4802      	ldr	r0, [pc, #8]	; (8000790 <SPI1_IRQHandler+0xc>)
 8000788:	f003 fe08 	bl	800439c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800078c:	bd10      	pop	{r4, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	20000230 	.word	0x20000230

08000794 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000794:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000796:	4802      	ldr	r0, [pc, #8]	; (80007a0 <SPI2_IRQHandler+0xc>)
 8000798:	f003 fe00 	bl	800439c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800079c:	bd10      	pop	{r4, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	200002bc 	.word	0x200002bc

080007a4 <SPI1_MspDeInit>:

  /* USER CODE END SPI1_MspInit 1 */
}

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80007a4:	b570      	push	{r4, r5, r6, lr}
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 80007a6:	25a0      	movs	r5, #160	; 0xa0
{
 80007a8:	0004      	movs	r4, r0
    __HAL_RCC_SPI1_CLK_DISABLE();
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <SPI1_MspDeInit+0x40>)
 80007ac:	490e      	ldr	r1, [pc, #56]	; (80007e8 <SPI1_MspDeInit+0x44>)
 80007ae:	6c13      	ldr	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 80007b0:	05ed      	lsls	r5, r5, #23
    __HAL_RCC_SPI1_CLK_DISABLE();
 80007b2:	400b      	ands	r3, r1
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 80007b6:	0028      	movs	r0, r5
 80007b8:	2120      	movs	r1, #32
 80007ba:	f001 fec9 	bl	8002550 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 80007be:	0028      	movs	r0, r5
 80007c0:	2140      	movs	r1, #64	; 0x40
 80007c2:	f001 fec5 	bl	8002550 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	0028      	movs	r0, r5
 80007ca:	f001 fec1 	bl	8002550 <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(spiHandle->hdmatx);
 80007ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80007d0:	f001 fbee 	bl	8001fb0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmarx);
 80007d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007d6:	f001 fbeb 	bl	8001fb0 <HAL_DMA_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80007da:	2019      	movs	r0, #25
 80007dc:	f001 fb46 	bl	8001e6c <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	40021000 	.word	0x40021000
 80007e8:	ffffefff 	.word	0xffffefff

080007ec <SPI2_MspDeInit>:
{
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80007ec:	4a0f      	ldr	r2, [pc, #60]	; (800082c <SPI2_MspDeInit+0x40>)
 80007ee:	4910      	ldr	r1, [pc, #64]	; (8000830 <SPI2_MspDeInit+0x44>)
 80007f0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
{
 80007f2:	b570      	push	{r4, r5, r6, lr}
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(BUS_SPI2_MISO_GPIO_PORT, BUS_SPI2_MISO_GPIO_PIN);
 80007f4:	4d0f      	ldr	r5, [pc, #60]	; (8000834 <SPI2_MspDeInit+0x48>)
    __HAL_RCC_SPI2_CLK_DISABLE();
 80007f6:	400b      	ands	r3, r1
 80007f8:	63d3      	str	r3, [r2, #60]	; 0x3c
{
 80007fa:	0004      	movs	r4, r0
    HAL_GPIO_DeInit(BUS_SPI2_MISO_GPIO_PORT, BUS_SPI2_MISO_GPIO_PIN);
 80007fc:	0028      	movs	r0, r5
 80007fe:	2104      	movs	r1, #4
 8000800:	f001 fea6 	bl	8002550 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_MOSI_GPIO_PORT, BUS_SPI2_MOSI_GPIO_PIN);
 8000804:	0028      	movs	r0, r5
 8000806:	2108      	movs	r1, #8
 8000808:	f001 fea2 	bl	8002550 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_SCK_GPIO_PORT, BUS_SPI2_SCK_GPIO_PIN);
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	480a      	ldr	r0, [pc, #40]	; (8000838 <SPI2_MspDeInit+0x4c>)
 8000810:	0189      	lsls	r1, r1, #6
 8000812:	f001 fe9d 	bl	8002550 <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(spiHandle->hdmatx);
 8000816:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000818:	f001 fbca 	bl	8001fb0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmarx);
 800081c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800081e:	f001 fbc7 	bl	8001fb0 <HAL_DMA_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8000822:	201a      	movs	r0, #26
 8000824:	f001 fb22 	bl	8001e6c <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
}
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	40021000 	.word	0x40021000
 8000830:	ffffbfff 	.word	0xffffbfff
 8000834:	50000800 	.word	0x50000800
 8000838:	50000400 	.word	0x50000400

0800083c <SPI1_MspInit>:
{
 800083c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083e:	46d6      	mov	lr, sl
 8000840:	464f      	mov	r7, r9
 8000842:	4646      	mov	r6, r8
 8000844:	4680      	mov	r8, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000846:	2080      	movs	r0, #128	; 0x80
 8000848:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <SPI1_MspInit+0xf8>)
{
 800084a:	b5c0      	push	{r6, r7, lr}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800084c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800084e:	0140      	lsls	r0, r0, #5
 8000850:	4301      	orrs	r1, r0
 8000852:	6419      	str	r1, [r3, #64]	; 0x40
 8000854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8000856:	b088      	sub	sp, #32
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000858:	4002      	ands	r2, r0
 800085a:	9200      	str	r2, [sp, #0]
 800085c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2201      	movs	r2, #1
 8000860:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000862:	24a0      	movs	r4, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	4311      	orrs	r1, r2
 8000866:	6359      	str	r1, [r3, #52]	; 0x34
 8000868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800086a:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	401a      	ands	r2, r3
 800086e:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000870:	2602      	movs	r6, #2
 8000872:	2703      	movs	r7, #3
 8000874:	2220      	movs	r2, #32
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000878:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800087a:	05e4      	lsls	r4, r4, #23
 800087c:	0020      	movs	r0, r4
 800087e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000880:	9202      	str	r2, [sp, #8]
 8000882:	9303      	str	r3, [sp, #12]
 8000884:	9604      	str	r6, [sp, #16]
 8000886:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000888:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800088a:	f001 fd55 	bl	8002338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800088e:	2240      	movs	r2, #64	; 0x40
 8000890:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000892:	0020      	movs	r0, r4
 8000894:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000896:	9202      	str	r2, [sp, #8]
 8000898:	9303      	str	r3, [sp, #12]
 800089a:	9604      	str	r6, [sp, #16]
 800089c:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 800089e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80008a0:	f001 fd4a 	bl	8002338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80008a8:	a902      	add	r1, sp, #8
 80008aa:	0020      	movs	r0, r4
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80008ac:	9202      	str	r2, [sp, #8]
 80008ae:	9303      	str	r3, [sp, #12]
 80008b0:	9604      	str	r6, [sp, #16]
 80008b2:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80008b4:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80008b6:	f001 fd3f 	bl	8002338 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80008ba:	4c1f      	ldr	r4, [pc, #124]	; (8000938 <SPI1_MspInit+0xfc>)
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <SPI1_MspInit+0x100>)
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008be:	2780      	movs	r7, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80008c0:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80008c2:	2311      	movs	r3, #17
 80008c4:	6063      	str	r3, [r4, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008c6:	3b01      	subs	r3, #1
 80008c8:	469a      	mov	sl, r3
 80008ca:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008cc:	3370      	adds	r3, #112	; 0x70
 80008ce:	4699      	mov	r9, r3
 80008d0:	6123      	str	r3, [r4, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008d2:	2680      	movs	r6, #128	; 0x80
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80008d4:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008d6:	007f      	lsls	r7, r7, #1
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008d8:	00f6      	lsls	r6, r6, #3
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80008da:	019b      	lsls	r3, r3, #6
    HAL_DMA_Init(&hdma_spi1_tx);
 80008dc:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008de:	60e5      	str	r5, [r4, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008e0:	6167      	str	r7, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008e2:	61a6      	str	r6, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80008e4:	61e5      	str	r5, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80008e6:	6223      	str	r3, [r4, #32]
    HAL_DMA_Init(&hdma_spi1_tx);
 80008e8:	f001 faea 	bl	8001ec0 <HAL_DMA_Init>
  __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80008ec:	4643      	mov	r3, r8
 80008ee:	655c      	str	r4, [r3, #84]	; 0x54
 80008f0:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80008f2:	4c13      	ldr	r4, [pc, #76]	; (8000940 <SPI1_MspInit+0x104>)
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <SPI1_MspInit+0x108>)
    HAL_DMA_Init(&hdma_spi1_rx);
 80008f6:	0020      	movs	r0, r4
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80008f8:	6023      	str	r3, [r4, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80008fa:	4653      	mov	r3, sl
 80008fc:	6063      	str	r3, [r4, #4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008fe:	464b      	mov	r3, r9
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000900:	60a5      	str	r5, [r4, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000902:	6123      	str	r3, [r4, #16]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000904:	60e5      	str	r5, [r4, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000906:	6167      	str	r7, [r4, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000908:	61a6      	str	r6, [r4, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800090a:	61e5      	str	r5, [r4, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800090c:	6225      	str	r5, [r4, #32]
    HAL_DMA_Init(&hdma_spi1_rx);
 800090e:	f001 fad7 	bl	8001ec0 <HAL_DMA_Init>
  __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000912:	4643      	mov	r3, r8
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2102      	movs	r1, #2
  __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000918:	659c      	str	r4, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800091a:	2019      	movs	r0, #25
  __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800091c:	62a3      	str	r3, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800091e:	f001 fa67 	bl	8001df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000922:	2019      	movs	r0, #25
 8000924:	f001 fa96 	bl	8001e54 <HAL_NVIC_EnableIRQ>
}
 8000928:	b008      	add	sp, #32
 800092a:	bce0      	pop	{r5, r6, r7}
 800092c:	46ba      	mov	sl, r7
 800092e:	46b1      	mov	r9, r6
 8000930:	46a8      	mov	r8, r5
 8000932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000934:	40021000 	.word	0x40021000
 8000938:	2000011c 	.word	0x2000011c
 800093c:	40020008 	.word	0x40020008
 8000940:	200000c0 	.word	0x200000c0
 8000944:	4002001c 	.word	0x4002001c

08000948 <SPI2_MspInit>:
{
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	46ce      	mov	lr, r9
 800094c:	4647      	mov	r7, r8
 800094e:	0006      	movs	r6, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000950:	2080      	movs	r0, #128	; 0x80
 8000952:	4b3f      	ldr	r3, [pc, #252]	; (8000a50 <SPI2_MspInit+0x108>)
{
 8000954:	b580      	push	{r7, lr}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000956:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000958:	01c0      	lsls	r0, r0, #7
 800095a:	4301      	orrs	r1, r0
 800095c:	63d9      	str	r1, [r3, #60]	; 0x3c
 800095e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
{
 8000960:	b08b      	sub	sp, #44	; 0x2c
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000962:	4002      	ands	r2, r0
 8000964:	9201      	str	r2, [sp, #4]
 8000966:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000968:	2204      	movs	r2, #4
 800096a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 800096c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4311      	orrs	r1, r2
 8000970:	6359      	str	r1, [r3, #52]	; 0x34
 8000972:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8000974:	2503      	movs	r5, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	400a      	ands	r2, r1
 8000978:	9202      	str	r2, [sp, #8]
 800097a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097c:	2202      	movs	r2, #2
 800097e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000980:	4f34      	ldr	r7, [pc, #208]	; (8000a54 <SPI2_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4311      	orrs	r1, r2
 8000984:	6359      	str	r1, [r3, #52]	; 0x34
 8000986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000988:	0038      	movs	r0, r7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	401a      	ands	r2, r3
 800098c:	9203      	str	r2, [sp, #12]
 800098e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8000990:	2204      	movs	r2, #4
 8000992:	2302      	movs	r3, #2
 8000994:	9204      	str	r2, [sp, #16]
 8000996:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8000998:	2301      	movs	r3, #1
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 800099a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 800099c:	4698      	mov	r8, r3
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 800099e:	9406      	str	r4, [sp, #24]
 80009a0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 80009a2:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 80009a4:	f001 fcc8 	bl	8002338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 80009a8:	2208      	movs	r2, #8
 80009aa:	2302      	movs	r3, #2
 80009ac:	9204      	str	r2, [sp, #16]
 80009ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 80009b0:	4643      	mov	r3, r8
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80009b2:	0038      	movs	r0, r7
 80009b4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 80009b6:	9406      	str	r4, [sp, #24]
 80009b8:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 80009ba:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80009bc:	f001 fcbc 	bl	8002338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	9406      	str	r4, [sp, #24]
 80009c4:	9507      	str	r5, [sp, #28]
 80009c6:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 80009c8:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 80009ca:	0192      	lsls	r2, r2, #6
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 80009cc:	a904      	add	r1, sp, #16
 80009ce:	4822      	ldr	r0, [pc, #136]	; (8000a58 <SPI2_MspInit+0x110>)
    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 80009d0:	9204      	str	r2, [sp, #16]
 80009d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 80009d4:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 80009d6:	f001 fcaf 	bl	8002338 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel3;
 80009da:	4c20      	ldr	r4, [pc, #128]	; (8000a5c <SPI2_MspInit+0x114>)
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <SPI2_MspInit+0x118>)
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009de:	2780      	movs	r7, #128	; 0x80
    hdma_spi2_tx.Instance = DMA1_Channel3;
 80009e0:	6023      	str	r3, [r4, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80009e2:	2313      	movs	r3, #19
 80009e4:	6063      	str	r3, [r4, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009e6:	3b03      	subs	r3, #3
 80009e8:	60a3      	str	r3, [r4, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009ea:	3370      	adds	r3, #112	; 0x70
 80009ec:	4699      	mov	r9, r3
 80009ee:	6123      	str	r3, [r4, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009f0:	00ff      	lsls	r7, r7, #3
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009f2:	3380      	adds	r3, #128	; 0x80
    HAL_DMA_Init(&hdma_spi2_tx);
 80009f4:	0020      	movs	r0, r4
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009f6:	4698      	mov	r8, r3
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f8:	60e5      	str	r5, [r4, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009fa:	6163      	str	r3, [r4, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009fc:	61a7      	str	r7, [r4, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80009fe:	61e5      	str	r5, [r4, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a00:	6225      	str	r5, [r4, #32]
    HAL_DMA_Init(&hdma_spi2_tx);
 8000a02:	f001 fa5d 	bl	8001ec0 <HAL_DMA_Init>
  __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000a06:	6574      	str	r4, [r6, #84]	; 0x54
 8000a08:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <SPI2_MspInit+0x11c>)
 8000a0c:	4c16      	ldr	r4, [pc, #88]	; (8000a68 <SPI2_MspInit+0x120>)
 8000a0e:	6023      	str	r3, [r4, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8000a10:	2312      	movs	r3, #18
 8000a12:	6063      	str	r3, [r4, #4]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a14:	464b      	mov	r3, r9
 8000a16:	6123      	str	r3, [r4, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a18:	4643      	mov	r3, r8
 8000a1a:	6163      	str	r3, [r4, #20]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a1c:	2380      	movs	r3, #128	; 0x80
    HAL_DMA_Init(&hdma_spi2_rx);
 8000a1e:	0020      	movs	r0, r4
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a20:	015b      	lsls	r3, r3, #5
 8000a22:	6223      	str	r3, [r4, #32]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a24:	60a5      	str	r5, [r4, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a26:	60e5      	str	r5, [r4, #12]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a28:	61a7      	str	r7, [r4, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000a2a:	61e5      	str	r5, [r4, #28]
    HAL_DMA_Init(&hdma_spi2_rx);
 8000a2c:	f001 fa48 	bl	8001ec0 <HAL_DMA_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2101      	movs	r1, #1
 8000a34:	201a      	movs	r0, #26
  __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000a36:	65b4      	str	r4, [r6, #88]	; 0x58
 8000a38:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8000a3a:	f001 f9d9 	bl	8001df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000a3e:	201a      	movs	r0, #26
 8000a40:	f001 fa08 	bl	8001e54 <HAL_NVIC_EnableIRQ>
}
 8000a44:	b00b      	add	sp, #44	; 0x2c
 8000a46:	bcc0      	pop	{r6, r7}
 8000a48:	46b9      	mov	r9, r7
 8000a4a:	46b0      	mov	r8, r6
 8000a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40021000 	.word	0x40021000
 8000a54:	50000800 	.word	0x50000800
 8000a58:	50000400 	.word	0x50000400
 8000a5c:	200001d4 	.word	0x200001d4
 8000a60:	40020030 	.word	0x40020030
 8000a64:	40020044 	.word	0x40020044
 8000a68:	20000178 	.word	0x20000178

08000a6c <BSP_SPI1_DeInit>:
  if (SPI1InitCounter > 0)
 8000a6c:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <BSP_SPI1_DeInit+0x24>)
{
 8000a6e:	b510      	push	{r4, lr}
  if (SPI1InitCounter > 0)
 8000a70:	6813      	ldr	r3, [r2, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d009      	beq.n	8000a8a <BSP_SPI1_DeInit+0x1e>
    if (--SPI1InitCounter == 0)
 8000a76:	3b01      	subs	r3, #1
 8000a78:	6013      	str	r3, [r2, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d105      	bne.n	8000a8a <BSP_SPI1_DeInit+0x1e>
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <BSP_SPI1_DeInit+0x28>)
 8000a80:	f002 fda8 	bl	80035d4 <HAL_SPI_DeInit>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	d100      	bne.n	8000a8a <BSP_SPI1_DeInit+0x1e>
}
 8000a88:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8000a8a:	2008      	movs	r0, #8
 8000a8c:	4240      	negs	r0, r0
 8000a8e:	e7fb      	b.n	8000a88 <BSP_SPI1_DeInit+0x1c>
 8000a90:	200000b8 	.word	0x200000b8
 8000a94:	20000230 	.word	0x20000230

08000a98 <BSP_SPI1_Send>:
  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000a98:	2380      	movs	r3, #128	; 0x80
{
 8000a9a:	000a      	movs	r2, r1
  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000a9c:	015b      	lsls	r3, r3, #5
 8000a9e:	0001      	movs	r1, r0
{
 8000aa0:	b510      	push	{r4, lr}
  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <BSP_SPI1_Send+0x20>)
 8000aa4:	f002 fe12 	bl	80036cc <HAL_SPI_Transmit>
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000aa8:	4243      	negs	r3, r0
 8000aaa:	4158      	adcs	r0, r3
 8000aac:	4243      	negs	r3, r0
 8000aae:	2006      	movs	r0, #6
 8000ab0:	4018      	ands	r0, r3
 8000ab2:	3806      	subs	r0, #6
}
 8000ab4:	bd10      	pop	{r4, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	20000230 	.word	0x20000230

08000abc <BSP_SPI1_Recv>:
  if(HAL_SPI_Receive(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000abc:	2380      	movs	r3, #128	; 0x80
{
 8000abe:	000a      	movs	r2, r1
  if(HAL_SPI_Receive(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000ac0:	015b      	lsls	r3, r3, #5
 8000ac2:	0001      	movs	r1, r0
{
 8000ac4:	b510      	push	{r4, lr}
  if(HAL_SPI_Receive(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <BSP_SPI1_Recv+0x20>)
 8000ac8:	f003 f880 	bl	8003bcc <HAL_SPI_Receive>
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000acc:	4243      	negs	r3, r0
 8000ace:	4158      	adcs	r0, r3
 8000ad0:	4243      	negs	r3, r0
 8000ad2:	2006      	movs	r0, #6
 8000ad4:	4018      	ands	r0, r3
 8000ad6:	3806      	subs	r0, #6
}
 8000ad8:	bd10      	pop	{r4, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	20000230 	.word	0x20000230

08000ae0 <BSP_SPI1_Send_DMA>:
{
 8000ae0:	000a      	movs	r2, r1
 8000ae2:	b510      	push	{r4, lr}
  if(HAL_SPI_Transmit_DMA(&hspi1, pData, Length) != HAL_OK)
 8000ae4:	0001      	movs	r1, r0
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <BSP_SPI1_Send_DMA+0x1c>)
 8000ae8:	f003 fa30 	bl	8003f4c <HAL_SPI_Transmit_DMA>
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000aec:	4243      	negs	r3, r0
 8000aee:	4158      	adcs	r0, r3
 8000af0:	4243      	negs	r3, r0
 8000af2:	2006      	movs	r0, #6
 8000af4:	4018      	ands	r0, r3
 8000af6:	3806      	subs	r0, #6
}
 8000af8:	bd10      	pop	{r4, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	20000230 	.word	0x20000230

08000b00 <BSP_SPI2_DeInit>:
  if (SPI2InitCounter > 0)
 8000b00:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <BSP_SPI2_DeInit+0x24>)
{
 8000b02:	b510      	push	{r4, lr}
  if (SPI2InitCounter > 0)
 8000b04:	6813      	ldr	r3, [r2, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d009      	beq.n	8000b1e <BSP_SPI2_DeInit+0x1e>
    if (--SPI2InitCounter == 0)
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d105      	bne.n	8000b1e <BSP_SPI2_DeInit+0x1e>
      if (HAL_SPI_DeInit(&hspi2) == HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <BSP_SPI2_DeInit+0x28>)
 8000b14:	f002 fd5e 	bl	80035d4 <HAL_SPI_DeInit>
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	d100      	bne.n	8000b1e <BSP_SPI2_DeInit+0x1e>
}
 8000b1c:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8000b1e:	2008      	movs	r0, #8
 8000b20:	4240      	negs	r0, r0
 8000b22:	e7fb      	b.n	8000b1c <BSP_SPI2_DeInit+0x1c>
 8000b24:	200000bc 	.word	0x200000bc
 8000b28:	200002bc 	.word	0x200002bc

08000b2c <BSP_SPI2_Send>:
  if(HAL_SPI_Transmit(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000b2c:	2380      	movs	r3, #128	; 0x80
{
 8000b2e:	000a      	movs	r2, r1
  if(HAL_SPI_Transmit(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000b30:	015b      	lsls	r3, r3, #5
 8000b32:	0001      	movs	r1, r0
{
 8000b34:	b510      	push	{r4, lr}
  if(HAL_SPI_Transmit(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <BSP_SPI2_Send+0x20>)
 8000b38:	f002 fdc8 	bl	80036cc <HAL_SPI_Transmit>
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000b3c:	4243      	negs	r3, r0
 8000b3e:	4158      	adcs	r0, r3
 8000b40:	4243      	negs	r3, r0
 8000b42:	2006      	movs	r0, #6
 8000b44:	4018      	ands	r0, r3
 8000b46:	3806      	subs	r0, #6
}
 8000b48:	bd10      	pop	{r4, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	200002bc 	.word	0x200002bc

08000b50 <BSP_SPI2_Recv>:
  if(HAL_SPI_Receive(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000b50:	2380      	movs	r3, #128	; 0x80
{
 8000b52:	000a      	movs	r2, r1
  if(HAL_SPI_Receive(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000b54:	015b      	lsls	r3, r3, #5
 8000b56:	0001      	movs	r1, r0
{
 8000b58:	b510      	push	{r4, lr}
  if(HAL_SPI_Receive(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <BSP_SPI2_Recv+0x20>)
 8000b5c:	f003 f836 	bl	8003bcc <HAL_SPI_Receive>
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000b60:	4243      	negs	r3, r0
 8000b62:	4158      	adcs	r0, r3
 8000b64:	4243      	negs	r3, r0
 8000b66:	2006      	movs	r0, #6
 8000b68:	4018      	ands	r0, r3
 8000b6a:	3806      	subs	r0, #6
}
 8000b6c:	bd10      	pop	{r4, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	200002bc 	.word	0x200002bc

08000b74 <BSP_SPI2_Recv_DMA>:
{
 8000b74:	000a      	movs	r2, r1
 8000b76:	b510      	push	{r4, lr}
  if(HAL_SPI_Receive_DMA(&hspi2, pData, Length) != HAL_OK)
 8000b78:	0001      	movs	r1, r0
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <BSP_SPI2_Recv_DMA+0x1c>)
 8000b7c:	f003 fb58 	bl	8004230 <HAL_SPI_Receive_DMA>
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000b80:	4243      	negs	r3, r0
 8000b82:	4158      	adcs	r0, r3
 8000b84:	4243      	negs	r3, r0
 8000b86:	2006      	movs	r0, #6
 8000b88:	4018      	ands	r0, r3
 8000b8a:	3806      	subs	r0, #6
}
 8000b8c:	bd10      	pop	{r4, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	200002bc 	.word	0x200002bc

08000b94 <MX_SPI1_Init>:
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000b94:	22e0      	movs	r2, #224	; 0xe0
  hspi->Instance = SPI1;
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_SPI1_Init+0x40>)
{
 8000b98:	b510      	push	{r4, lr}
  hspi->Instance = SPI1;
 8000b9a:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000b9c:	2382      	movs	r3, #130	; 0x82
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000b9e:	00d2      	lsls	r2, r2, #3
 8000ba0:	60c2      	str	r2, [r0, #12]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000ba2:	2280      	movs	r2, #128	; 0x80
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	6043      	str	r3, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000ba8:	2300      	movs	r3, #0
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000baa:	0092      	lsls	r2, r2, #2
 8000bac:	6182      	str	r2, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bae:	3af9      	subs	r2, #249	; 0xf9
 8000bb0:	3aff      	subs	r2, #255	; 0xff
 8000bb2:	61c2      	str	r2, [r0, #28]
  hspi->Init.CRCPolynomial = 7;
 8000bb4:	3a01      	subs	r2, #1
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000bb6:	6083      	str	r3, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb8:	6103      	str	r3, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bba:	6143      	str	r3, [r0, #20]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bbc:	6203      	str	r3, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000bbe:	6243      	str	r3, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bc2:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bc4:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->Init.CRCPolynomial = 7;
 8000bc6:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000bc8:	f002 fc40 	bl	800344c <HAL_SPI_Init>
 8000bcc:	1e43      	subs	r3, r0, #1
 8000bce:	4198      	sbcs	r0, r3
  return ret;
 8000bd0:	b2c0      	uxtb	r0, r0
}
 8000bd2:	bd10      	pop	{r4, pc}
 8000bd4:	40013000 	.word	0x40013000

08000bd8 <BSP_SPI1_Init>:
{
 8000bd8:	b570      	push	{r4, r5, r6, lr}
  hspi1.Instance  = SPI1;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <BSP_SPI1_Init+0x6c>)
  if(SPI1InitCounter++ == 0)
 8000bdc:	4a1a      	ldr	r2, [pc, #104]	; (8000c48 <BSP_SPI1_Init+0x70>)
  hspi1.Instance  = SPI1;
 8000bde:	4c1b      	ldr	r4, [pc, #108]	; (8000c4c <BSP_SPI1_Init+0x74>)
 8000be0:	6023      	str	r3, [r4, #0]
  if(SPI1InitCounter++ == 0)
 8000be2:	6813      	ldr	r3, [r2, #0]
 8000be4:	1c59      	adds	r1, r3, #1
 8000be6:	6011      	str	r1, [r2, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <BSP_SPI1_Init+0x18>
  int32_t ret = BSP_ERROR_NONE;
 8000bec:	2000      	movs	r0, #0
}
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000bf0:	0020      	movs	r0, r4
 8000bf2:	f003 fc81 	bl	80044f8 <HAL_SPI_GetState>
 8000bf6:	2800      	cmp	r0, #0
 8000bf8:	d1f8      	bne.n	8000bec <BSP_SPI1_Init+0x14>
        if(IsSPI1MspCbValid == 0U)
 8000bfa:	4d15      	ldr	r5, [pc, #84]	; (8000c50 <BSP_SPI1_Init+0x78>)
 8000bfc:	682b      	ldr	r3, [r5, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d115      	bne.n	8000c2e <BSP_SPI1_Init+0x56>
  __HAL_SPI_RESET_HANDLE_STATE(&hspi1);
 8000c02:	225d      	movs	r2, #93	; 0x5d
 8000c04:	54a3      	strb	r3, [r4, r2]
 8000c06:	3227      	adds	r2, #39	; 0x27
 8000c08:	50a3      	str	r3, [r4, r2]
 8000c0a:	3204      	adds	r2, #4
 8000c0c:	50a3      	str	r3, [r4, r2]
  if (HAL_SPI_RegisterCallback(&hspi1, HAL_SPI_MSPINIT_CB_ID, SPI1_MspInit)  != HAL_OK)
 8000c0e:	2108      	movs	r1, #8
 8000c10:	0020      	movs	r0, r4
 8000c12:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <BSP_SPI1_Init+0x7c>)
 8000c14:	f002 fcfe 	bl	8003614 <HAL_SPI_RegisterCallback>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d110      	bne.n	8000c3e <BSP_SPI1_Init+0x66>
  if (HAL_SPI_RegisterCallback(&hspi1, HAL_SPI_MSPDEINIT_CB_ID, SPI1_MspDeInit) != HAL_OK)
 8000c1c:	2109      	movs	r1, #9
 8000c1e:	0020      	movs	r0, r4
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <BSP_SPI1_Init+0x80>)
 8000c22:	f002 fcf7 	bl	8003614 <HAL_SPI_RegisterCallback>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	d109      	bne.n	8000c3e <BSP_SPI1_Init+0x66>
  IsSPI1MspCbValid = 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	602b      	str	r3, [r5, #0]
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000c2e:	0020      	movs	r0, r4
 8000c30:	f7ff ffb0 	bl	8000b94 <MX_SPI1_Init>
 8000c34:	2800      	cmp	r0, #0
 8000c36:	d0d9      	beq.n	8000bec <BSP_SPI1_Init+0x14>
                ret = BSP_ERROR_BUS_FAILURE;
 8000c38:	2008      	movs	r0, #8
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	e7d7      	b.n	8000bee <BSP_SPI1_Init+0x16>
                return BSP_ERROR_MSP_FAILURE;
 8000c3e:	200a      	movs	r0, #10
 8000c40:	4240      	negs	r0, r0
 8000c42:	e7d4      	b.n	8000bee <BSP_SPI1_Init+0x16>
 8000c44:	40013000 	.word	0x40013000
 8000c48:	200000b8 	.word	0x200000b8
 8000c4c:	20000230 	.word	0x20000230
 8000c50:	200000b0 	.word	0x200000b0
 8000c54:	0800083d 	.word	0x0800083d
 8000c58:	080007a5 	.word	0x080007a5

08000c5c <MX_SPI2_Init>:
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000c5c:	22e0      	movs	r2, #224	; 0xe0
  hspi->Instance = SPI2;
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_SPI2_Init+0x40>)
{
 8000c60:	b510      	push	{r4, lr}
  hspi->Instance = SPI2;
 8000c62:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000c64:	2382      	movs	r3, #130	; 0x82
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000c66:	00d2      	lsls	r2, r2, #3
 8000c68:	60c2      	str	r2, [r0, #12]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000c6a:	2280      	movs	r2, #128	; 0x80
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	6043      	str	r3, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000c70:	2300      	movs	r3, #0
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	6182      	str	r2, [r0, #24]
  hspi->Init.CRCPolynomial = 7;
 8000c76:	3afa      	subs	r2, #250	; 0xfa
 8000c78:	3aff      	subs	r2, #255	; 0xff
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000c7a:	6083      	str	r3, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7c:	6103      	str	r3, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c7e:	6143      	str	r3, [r0, #20]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c80:	61c3      	str	r3, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c82:	6203      	str	r3, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000c84:	6243      	str	r3, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c86:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c88:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c8a:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->Init.CRCPolynomial = 7;
 8000c8c:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000c8e:	f002 fbdd 	bl	800344c <HAL_SPI_Init>
 8000c92:	1e43      	subs	r3, r0, #1
 8000c94:	4198      	sbcs	r0, r3
  return ret;
 8000c96:	b2c0      	uxtb	r0, r0
}
 8000c98:	bd10      	pop	{r4, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	40003800 	.word	0x40003800

08000ca0 <BSP_SPI2_Init>:
{
 8000ca0:	b570      	push	{r4, r5, r6, lr}
  hspi2.Instance  = SPI2;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <BSP_SPI2_Init+0x6c>)
  if(SPI2InitCounter++ == 0)
 8000ca4:	4a1a      	ldr	r2, [pc, #104]	; (8000d10 <BSP_SPI2_Init+0x70>)
  hspi2.Instance  = SPI2;
 8000ca6:	4c1b      	ldr	r4, [pc, #108]	; (8000d14 <BSP_SPI2_Init+0x74>)
 8000ca8:	6023      	str	r3, [r4, #0]
  if(SPI2InitCounter++ == 0)
 8000caa:	6813      	ldr	r3, [r2, #0]
 8000cac:	1c59      	adds	r1, r3, #1
 8000cae:	6011      	str	r1, [r2, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <BSP_SPI2_Init+0x18>
  int32_t ret = BSP_ERROR_NONE;
 8000cb4:	2000      	movs	r0, #0
}
 8000cb6:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8000cb8:	0020      	movs	r0, r4
 8000cba:	f003 fc1d 	bl	80044f8 <HAL_SPI_GetState>
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	d1f8      	bne.n	8000cb4 <BSP_SPI2_Init+0x14>
        if(IsSPI2MspCbValid == 0U)
 8000cc2:	4d15      	ldr	r5, [pc, #84]	; (8000d18 <BSP_SPI2_Init+0x78>)
 8000cc4:	682b      	ldr	r3, [r5, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d115      	bne.n	8000cf6 <BSP_SPI2_Init+0x56>
  __HAL_SPI_RESET_HANDLE_STATE(&hspi2);
 8000cca:	225d      	movs	r2, #93	; 0x5d
 8000ccc:	54a3      	strb	r3, [r4, r2]
 8000cce:	3227      	adds	r2, #39	; 0x27
 8000cd0:	50a3      	str	r3, [r4, r2]
 8000cd2:	3204      	adds	r2, #4
 8000cd4:	50a3      	str	r3, [r4, r2]
  if (HAL_SPI_RegisterCallback(&hspi2, HAL_SPI_MSPINIT_CB_ID, SPI2_MspInit)  != HAL_OK)
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	0020      	movs	r0, r4
 8000cda:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <BSP_SPI2_Init+0x7c>)
 8000cdc:	f002 fc9a 	bl	8003614 <HAL_SPI_RegisterCallback>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d110      	bne.n	8000d06 <BSP_SPI2_Init+0x66>
  if (HAL_SPI_RegisterCallback(&hspi2, HAL_SPI_MSPDEINIT_CB_ID, SPI2_MspDeInit) != HAL_OK)
 8000ce4:	2109      	movs	r1, #9
 8000ce6:	0020      	movs	r0, r4
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <BSP_SPI2_Init+0x80>)
 8000cea:	f002 fc93 	bl	8003614 <HAL_SPI_RegisterCallback>
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	d109      	bne.n	8000d06 <BSP_SPI2_Init+0x66>
  IsSPI2MspCbValid = 1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	602b      	str	r3, [r5, #0]
            if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8000cf6:	0020      	movs	r0, r4
 8000cf8:	f7ff ffb0 	bl	8000c5c <MX_SPI2_Init>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d0d9      	beq.n	8000cb4 <BSP_SPI2_Init+0x14>
                ret = BSP_ERROR_BUS_FAILURE;
 8000d00:	2008      	movs	r0, #8
 8000d02:	4240      	negs	r0, r0
 8000d04:	e7d7      	b.n	8000cb6 <BSP_SPI2_Init+0x16>
                return BSP_ERROR_MSP_FAILURE;
 8000d06:	200a      	movs	r0, #10
 8000d08:	4240      	negs	r0, r0
 8000d0a:	e7d4      	b.n	8000cb6 <BSP_SPI2_Init+0x16>
 8000d0c:	40003800 	.word	0x40003800
 8000d10:	200000bc 	.word	0x200000bc
 8000d14:	200002bc 	.word	0x200002bc
 8000d18:	200000b4 	.word	0x200000b4
 8000d1c:	08000949 	.word	0x08000949
 8000d20:	080007ed 	.word	0x080007ed

08000d24 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d24:	4770      	bx	lr
 8000d26:	46c0      	nop			; (mov r8, r8)

08000d28 <BSP_KEY_Init>:
{
  int32_t ret = BSP_ERROR_NONE;

  BSP_KEY_CHECK_PARAMS(Instance);

  KeyCtx[Instance].Orientation = Orientation;
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <BSP_KEY_Init+0xc>)
 8000d2a:	0080      	lsls	r0, r0, #2
 8000d2c:	5019      	str	r1, [r3, r0]

  return ret;
}
 8000d2e:	2000      	movs	r0, #0
 8000d30:	4770      	bx	lr
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	20000348 	.word	0x20000348

08000d38 <BSP_KEY_GetState>:
  */
int32_t BSP_KEY_GetState(uint32_t Instance, uint8_t *State)
{
  BSP_KEY_CHECK_PARAMS(Instance);

  *State = BSP_KEY_INVALID;
 8000d38:	2300      	movs	r3, #0
{
 8000d3a:	b570      	push	{r4, r5, r6, lr}
 8000d3c:	0005      	movs	r5, r0
 8000d3e:	000c      	movs	r4, r1
  *State = BSP_KEY_INVALID;
 8000d40:	700b      	strb	r3, [r1, #0]

#if defined(KEY_CENTER_GPIO_PIN)
  if (HAL_GPIO_ReadPin(KEY_CENTER_GPIO_PORT, KEY_CENTER_GPIO_PIN) == KEY_PRESSED_STATE)
 8000d42:	482f      	ldr	r0, [pc, #188]	; (8000e00 <BSP_KEY_GetState+0xc8>)
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	f001 fc8f 	bl	8002668 <HAL_GPIO_ReadPin>
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d102      	bne.n	8000d54 <BSP_KEY_GetState+0x1c>
    *State = BSP_KEY_CENTER;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	7023      	strb	r3, [r4, #0]
  {
    return BSP_ERROR_PERIPH_FAILURE;
  }

  return BSP_ERROR_NONE;
}
 8000d52:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_GPIO_ReadPin(KEY_UP_GPIO_PORT, KEY_UP_GPIO_PIN) == KEY_PRESSED_STATE)
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	482b      	ldr	r0, [pc, #172]	; (8000e04 <BSP_KEY_GetState+0xcc>)
 8000d58:	0149      	lsls	r1, r1, #5
 8000d5a:	f001 fc85 	bl	8002668 <HAL_GPIO_ReadPin>
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	d121      	bne.n	8000da6 <BSP_KEY_GetState+0x6e>
    *State =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT         ? BSP_KEY_UP :
 8000d62:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <BSP_KEY_GetState+0xd0>)
 8000d64:	00ad      	lsls	r5, r5, #2
 8000d66:	58eb      	ldr	r3, [r5, r3]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d018      	beq.n	8000d9e <BSP_KEY_GetState+0x66>
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d03e      	beq.n	8000dee <BSP_KEY_GetState+0xb6>
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d029      	beq.n	8000dc8 <BSP_KEY_GetState+0x90>
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d113      	bne.n	8000da0 <BSP_KEY_GetState+0x68>
    *State =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT         ? BSP_KEY_RIGHT :
 8000d78:	2004      	movs	r0, #4
 8000d7a:	e011      	b.n	8000da0 <BSP_KEY_GetState+0x68>
  if (HAL_GPIO_ReadPin(KEY_LEFT_GPIO_PORT, KEY_LEFT_GPIO_PIN) == KEY_PRESSED_STATE)
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	4821      	ldr	r0, [pc, #132]	; (8000e04 <BSP_KEY_GetState+0xcc>)
 8000d80:	f001 fc72 	bl	8002668 <HAL_GPIO_ReadPin>
 8000d84:	2800      	cmp	r0, #0
 8000d86:	d121      	bne.n	8000dcc <BSP_KEY_GetState+0x94>
    *State =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT         ? BSP_KEY_LEFT :
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <BSP_KEY_GetState+0xd0>)
 8000d8a:	00ad      	lsls	r5, r5, #2
 8000d8c:	58eb      	ldr	r3, [r5, r3]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0f2      	beq.n	8000d78 <BSP_KEY_GetState+0x40>
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d018      	beq.n	8000dc8 <BSP_KEY_GetState+0x90>
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d029      	beq.n	8000dee <BSP_KEY_GetState+0xb6>
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d100      	bne.n	8000da0 <BSP_KEY_GetState+0x68>
    *State =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT         ? BSP_KEY_RIGHT :
 8000d9e:	2002      	movs	r0, #2
 8000da0:	7020      	strb	r0, [r4, #0]
  return BSP_ERROR_NONE;
 8000da2:	2000      	movs	r0, #0
 8000da4:	e7d5      	b.n	8000d52 <BSP_KEY_GetState+0x1a>
  if (HAL_GPIO_ReadPin(KEY_DOWN_GPIO_PORT, KEY_DOWN_GPIO_PIN) == KEY_PRESSED_STATE)
 8000da6:	2110      	movs	r1, #16
 8000da8:	4816      	ldr	r0, [pc, #88]	; (8000e04 <BSP_KEY_GetState+0xcc>)
 8000daa:	f001 fc5d 	bl	8002668 <HAL_GPIO_ReadPin>
 8000dae:	2800      	cmp	r0, #0
 8000db0:	d1e4      	bne.n	8000d7c <BSP_KEY_GetState+0x44>
    *State =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT         ? BSP_KEY_DOWN :
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <BSP_KEY_GetState+0xd0>)
 8000db4:	00ad      	lsls	r5, r5, #2
 8000db6:	58eb      	ldr	r3, [r5, r3]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d018      	beq.n	8000dee <BSP_KEY_GetState+0xb6>
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d0ee      	beq.n	8000d9e <BSP_KEY_GetState+0x66>
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d0d9      	beq.n	8000d78 <BSP_KEY_GetState+0x40>
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d1eb      	bne.n	8000da0 <BSP_KEY_GetState+0x68>
    *State =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT         ? BSP_KEY_RIGHT :
 8000dc8:	2005      	movs	r0, #5
 8000dca:	e7e9      	b.n	8000da0 <BSP_KEY_GetState+0x68>
  if (HAL_GPIO_ReadPin(KEY_RIGHT_GPIO_PORT, KEY_RIGHT_GPIO_PIN) == KEY_PRESSED_STATE)
 8000dcc:	2102      	movs	r1, #2
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <BSP_KEY_GetState+0xcc>)
 8000dd0:	f001 fc4a 	bl	8002668 <HAL_GPIO_ReadPin>
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	d10c      	bne.n	8000df2 <BSP_KEY_GetState+0xba>
    *State =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT         ? BSP_KEY_RIGHT :
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <BSP_KEY_GetState+0xd0>)
 8000dda:	00ad      	lsls	r5, r5, #2
 8000ddc:	58eb      	ldr	r3, [r5, r3]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f2      	beq.n	8000dc8 <BSP_KEY_GetState+0x90>
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d0c8      	beq.n	8000d78 <BSP_KEY_GetState+0x40>
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d0d9      	beq.n	8000d9e <BSP_KEY_GetState+0x66>
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d1d8      	bne.n	8000da0 <BSP_KEY_GetState+0x68>
 8000dee:	2003      	movs	r0, #3
 8000df0:	e7d6      	b.n	8000da0 <BSP_KEY_GetState+0x68>
  if(*State == BSP_KEY_INVALID)
 8000df2:	7820      	ldrb	r0, [r4, #0]
    return BSP_ERROR_PERIPH_FAILURE;
 8000df4:	1e43      	subs	r3, r0, #1
 8000df6:	4198      	sbcs	r0, r3
 8000df8:	0080      	lsls	r0, r0, #2
 8000dfa:	3804      	subs	r0, #4
 8000dfc:	e7a9      	b.n	8000d52 <BSP_KEY_GetState+0x1a>
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	50000800 	.word	0x50000800
 8000e04:	50000400 	.word	0x50000400
 8000e08:	20000348 	.word	0x20000348

08000e0c <LCD_IO_ReadReg>:
  * @param  Length length of data be read from the LCD GRAM
  * @retval BSP status
  */
static int32_t LCD_IO_ReadReg(uint8_t *Reg, uint32_t Length)
{
  return BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8000e0c:	200b      	movs	r0, #11
}
 8000e0e:	4240      	negs	r0, r0
 8000e10:	4770      	bx	lr
 8000e12:	46c0      	nop			; (mov r8, r8)

08000e14 <LCD_IO_Delay>:
{
 8000e14:	b510      	push	{r4, lr}
  HAL_Delay(Delay);
 8000e16:	f000 ffcd 	bl	8001db4 <HAL_Delay>
}
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	bd10      	pop	{r4, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)

08000e20 <LCD_IO_GetTick>:
{
 8000e20:	b510      	push	{r4, lr}
  ret = HAL_GetTick();
 8000e22:	f000 ffc1 	bl	8001da8 <HAL_GetTick>
}
 8000e26:	bd10      	pop	{r4, pc}

08000e28 <LCD_IO_SendData>:
  * @param  pData  pointer to data to write to LCD GRAM.
  * @param  Length length of data to write to LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_SendData(uint8_t *pData, uint32_t Length)
{
 8000e28:	b570      	push	{r4, r5, r6, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Select : Chip Select low */
  LCD_CS_LOW();
 8000e2a:	24a0      	movs	r4, #160	; 0xa0
 8000e2c:	2580      	movs	r5, #128	; 0x80
 8000e2e:	05e4      	lsls	r4, r4, #23
 8000e30:	00ad      	lsls	r5, r5, #2
 8000e32:	62a5      	str	r5, [r4, #40]	; 0x28

  /* Send Data */
  ret = LCD_SPI_Send(pData, Length);
 8000e34:	b289      	uxth	r1, r1
 8000e36:	f7ff fe2f 	bl	8000a98 <BSP_SPI1_Send>

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 8000e3a:	61a5      	str	r5, [r4, #24]

  return ret;
}
 8000e3c:	bd70      	pop	{r4, r5, r6, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)

08000e40 <LCD_IO_WriteReg>:
{
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LCD_CS_LOW();
 8000e42:	24a0      	movs	r4, #160	; 0xa0
 8000e44:	2580      	movs	r5, #128	; 0x80
  LCD_DC_HIGH();
 8000e46:	2780      	movs	r7, #128	; 0x80
 8000e48:	4e05      	ldr	r6, [pc, #20]	; (8000e60 <LCD_IO_WriteReg+0x20>)
  LCD_CS_LOW();
 8000e4a:	00ad      	lsls	r5, r5, #2
  LCD_DC_HIGH();
 8000e4c:	01ff      	lsls	r7, r7, #7
  LCD_CS_LOW();
 8000e4e:	05e4      	lsls	r4, r4, #23
 8000e50:	62a5      	str	r5, [r4, #40]	; 0x28
  ret = LCD_SPI_Send(Reg, Length);
 8000e52:	b289      	uxth	r1, r1
  LCD_DC_HIGH();
 8000e54:	62b7      	str	r7, [r6, #40]	; 0x28
  ret = LCD_SPI_Send(Reg, Length);
 8000e56:	f7ff fe1f 	bl	8000a98 <BSP_SPI1_Send>
  LCD_DC_LOW();
 8000e5a:	61b7      	str	r7, [r6, #24]
  LCD_CS_HIGH();
 8000e5c:	61a5      	str	r5, [r4, #24]
}
 8000e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e60:	50000400 	.word	0x50000400

08000e64 <LCD_IO_RecvData>:
  * @param  pData  pointer to data to read to from selected LCD GRAM.
  * @param  Length length of data to read from selected LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_RecvData(uint8_t *pData, uint32_t Length)
{
 8000e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Select : Chip Select low */
  LCD_CS_LOW();

  LCD_DC_HIGH();
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <LCD_IO_RecvData+0x44>)
{
 8000e68:	4647      	mov	r7, r8
  LCD_DC_HIGH();
 8000e6a:	4698      	mov	r8, r3
 8000e6c:	2380      	movs	r3, #128	; 0x80
{
 8000e6e:	46ce      	mov	lr, r9
  LCD_DC_HIGH();
 8000e70:	01db      	lsls	r3, r3, #7
 8000e72:	4699      	mov	r9, r3
{
 8000e74:	b580      	push	{r7, lr}
  LCD_CS_LOW();
 8000e76:	26a0      	movs	r6, #160	; 0xa0
 8000e78:	2780      	movs	r7, #128	; 0x80
  LCD_DC_HIGH();
 8000e7a:	4643      	mov	r3, r8
 8000e7c:	464a      	mov	r2, r9
  LCD_CS_LOW();
 8000e7e:	05f6      	lsls	r6, r6, #23
 8000e80:	00bf      	lsls	r7, r7, #2
 8000e82:	62b7      	str	r7, [r6, #40]	; 0x28
{
 8000e84:	000c      	movs	r4, r1
  LCD_DC_HIGH();
 8000e86:	629a      	str	r2, [r3, #40]	; 0x28

  /* Write Register to read */
  ret = LCD_SPI_Send(pData, 1);
 8000e88:	2101      	movs	r1, #1
{
 8000e8a:	0005      	movs	r5, r0
  ret = LCD_SPI_Send(pData, 1);
 8000e8c:	f7ff fe04 	bl	8000a98 <BSP_SPI1_Send>

  LCD_DC_LOW();
 8000e90:	4643      	mov	r3, r8
 8000e92:	464a      	mov	r2, r9

  /* Receive the Data */
  ret = LCD_SPI_Recv(pData, Length);
 8000e94:	0028      	movs	r0, r5
  LCD_DC_LOW();
 8000e96:	619a      	str	r2, [r3, #24]
  ret = LCD_SPI_Recv(pData, Length);
 8000e98:	b2a1      	uxth	r1, r4
 8000e9a:	f7ff fe0f 	bl	8000abc <BSP_SPI1_Recv>

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 8000e9e:	61b7      	str	r7, [r6, #24]

  return ret;
}
 8000ea0:	bcc0      	pop	{r6, r7}
 8000ea2:	46b9      	mov	r9, r7
 8000ea4:	46b0      	mov	r8, r6
 8000ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ea8:	50000400 	.word	0x50000400

08000eac <LCD_IO_SendDataDMA>:
  LCD_CS_LOW();
 8000eac:	23a0      	movs	r3, #160	; 0xa0
 8000eae:	2280      	movs	r2, #128	; 0x80
{
 8000eb0:	b510      	push	{r4, lr}
  LCD_CS_LOW();
 8000eb2:	05db      	lsls	r3, r3, #23
 8000eb4:	0092      	lsls	r2, r2, #2
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
  ret = LCD_SPI_Send_DMA(pData, Length);
 8000eb8:	b289      	uxth	r1, r1
 8000eba:	f7ff fe11 	bl	8000ae0 <BSP_SPI1_Send_DMA>
}
 8000ebe:	bd10      	pop	{r4, pc}

08000ec0 <LCD_IO_DeInit>:
{
 8000ec0:	b510      	push	{r4, lr}
  ret = LCD_SPI_DeInit();
 8000ec2:	f7ff fdd3 	bl	8000a6c <BSP_SPI1_DeInit>
}
 8000ec6:	bd10      	pop	{r4, pc}

08000ec8 <LCD_IO_Init>:
{
 8000ec8:	b570      	push	{r4, r5, r6, lr}
  LCD_RST_LOW();
 8000eca:	24a0      	movs	r4, #160	; 0xa0
 8000ecc:	2502      	movs	r5, #2
 8000ece:	05e4      	lsls	r4, r4, #23
  HAL_Delay(100);
 8000ed0:	2064      	movs	r0, #100	; 0x64
  LCD_RST_LOW();
 8000ed2:	62a5      	str	r5, [r4, #40]	; 0x28
  HAL_Delay(100);
 8000ed4:	f000 ff6e 	bl	8001db4 <HAL_Delay>
  HAL_Delay(100);
 8000ed8:	2064      	movs	r0, #100	; 0x64
  LCD_RST_HIGH();
 8000eda:	61a5      	str	r5, [r4, #24]
  HAL_Delay(100);
 8000edc:	f000 ff6a 	bl	8001db4 <HAL_Delay>
  LCD_CS_HIGH();
 8000ee0:	2380      	movs	r3, #128	; 0x80
  LCD_DC_HIGH();
 8000ee2:	2280      	movs	r2, #128	; 0x80
  LCD_CS_HIGH();
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	61a3      	str	r3, [r4, #24]
  LCD_DC_HIGH();
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <LCD_IO_Init+0x60>)
 8000eea:	01d2      	lsls	r2, r2, #7
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
  ret = LCD_SPI_Init();
 8000eee:	f7ff fe73 	bl	8000bd8 <BSP_SPI1_Init>
 8000ef2:	1e04      	subs	r4, r0, #0
  if(ret == BSP_ERROR_NONE)
 8000ef4:	d001      	beq.n	8000efa <LCD_IO_Init+0x32>
}
 8000ef6:	0020      	movs	r0, r4
 8000ef8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_EXTI_GetHandle(&hexti_lcd_te, LCD_TE_GPIO_LINE);
 8000efa:	21c0      	movs	r1, #192	; 0xc0
 8000efc:	4d0b      	ldr	r5, [pc, #44]	; (8000f2c <LCD_IO_Init+0x64>)
 8000efe:	04c9      	lsls	r1, r1, #19
 8000f00:	0028      	movs	r0, r5
 8000f02:	f001 f9d3 	bl	80022ac <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hexti_lcd_te, HAL_EXTI_RISING_CB_ID, LCD_TERisingCallback);
 8000f06:	2101      	movs	r1, #1
 8000f08:	0028      	movs	r0, r5
 8000f0a:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <LCD_IO_Init+0x68>)
 8000f0c:	f001 f9ba 	bl	8002284 <HAL_EXTI_RegisterCallback>
    HAL_EXTI_RegisterCallback(&hexti_lcd_te, HAL_EXTI_FALLING_CB_ID, LCD_TEFallingCallback);
 8000f10:	2102      	movs	r1, #2
 8000f12:	0028      	movs	r0, r5
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <LCD_IO_Init+0x6c>)
 8000f16:	f001 f9b5 	bl	8002284 <HAL_EXTI_RegisterCallback>
    HAL_SPI_RegisterCallback(&hLCDSPI, HAL_SPI_TX_COMPLETE_CB_ID, SPI_TxCpltCallback);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <LCD_IO_Init+0x70>)
 8000f1e:	4807      	ldr	r0, [pc, #28]	; (8000f3c <LCD_IO_Init+0x74>)
 8000f20:	f002 fb78 	bl	8003614 <HAL_SPI_RegisterCallback>
  return ret;
 8000f24:	e7e7      	b.n	8000ef6 <LCD_IO_Init+0x2e>
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	50000400 	.word	0x50000400
 8000f2c:	200003d4 	.word	0x200003d4
 8000f30:	08001225 	.word	0x08001225
 8000f34:	08001209 	.word	0x08001209
 8000f38:	080011d5 	.word	0x080011d5
 8000f3c:	20000230 	.word	0x20000230

08000f40 <LCD_IO_RecvDataDMA>:
 8000f40:	200b      	movs	r0, #11
 8000f42:	4240      	negs	r0, r0
 8000f44:	4770      	bx	lr
 8000f46:	46c0      	nop			; (mov r8, r8)

08000f48 <BSP_LCD_Init>:
{
 8000f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4a:	46ce      	mov	lr, r9
 8000f4c:	4647      	mov	r7, r8
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	000d      	movs	r5, r1
 8000f52:	b08f      	sub	sp, #60	; 0x3c
  if ((Instance >= LCD_INSTANCES_NBR ) || (Orientation > LCD_ORIENTATION_LANDSCAPE_ROT180))
 8000f54:	2800      	cmp	r0, #0
 8000f56:	d000      	beq.n	8000f5a <BSP_LCD_Init+0x12>
 8000f58:	e06d      	b.n	8001036 <BSP_LCD_Init+0xee>
 8000f5a:	2903      	cmp	r1, #3
 8000f5c:	d86b      	bhi.n	8001036 <BSP_LCD_Init+0xee>
    if(LCD_OS_Initialize(0) == LCD_OS_ERROR_NONE)
 8000f5e:	f000 f96f 	bl	8001240 <LCD_OS_Initialize>
  int32_t ret = BSP_ERROR_NONE;
 8000f62:	2400      	movs	r4, #0
    if(LCD_OS_Initialize(0) == LCD_OS_ERROR_NONE)
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d005      	beq.n	8000f74 <BSP_LCD_Init+0x2c>
}
 8000f68:	0020      	movs	r0, r4
 8000f6a:	b00f      	add	sp, #60	; 0x3c
 8000f6c:	bcc0      	pop	{r6, r7}
 8000f6e:	46b9      	mov	r9, r7
 8000f70:	46b0      	mov	r8, r6
 8000f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  IOCtx.Init             = LCD_IO_Init;
 8000f74:	4934      	ldr	r1, [pc, #208]	; (8001048 <BSP_LCD_Init+0x100>)
 8000f76:	4b35      	ldr	r3, [pc, #212]	; (800104c <BSP_LCD_Init+0x104>)
  if(ST7789V_RegisterBusIO(&ObjCtx, &IOCtx) != ST7789V_OK)
 8000f78:	4f35      	ldr	r7, [pc, #212]	; (8001050 <BSP_LCD_Init+0x108>)
  IOCtx.Init             = LCD_IO_Init;
 8000f7a:	600b      	str	r3, [r1, #0]
  IOCtx.DeInit           = LCD_IO_DeInit;
 8000f7c:	4b35      	ldr	r3, [pc, #212]	; (8001054 <BSP_LCD_Init+0x10c>)
  if(ST7789V_RegisterBusIO(&ObjCtx, &IOCtx) != ST7789V_OK)
 8000f7e:	0038      	movs	r0, r7
  IOCtx.DeInit           = LCD_IO_DeInit;
 8000f80:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg          = LCD_IO_ReadReg;
 8000f82:	4b35      	ldr	r3, [pc, #212]	; (8001058 <BSP_LCD_Init+0x110>)
  uint32_t id = 0;
 8000f84:	9401      	str	r4, [sp, #4]
  IOCtx.ReadReg          = LCD_IO_ReadReg;
 8000f86:	610b      	str	r3, [r1, #16]
  IOCtx.WriteReg         = LCD_IO_WriteReg;
 8000f88:	4b34      	ldr	r3, [pc, #208]	; (800105c <BSP_LCD_Init+0x114>)
 8000f8a:	60cb      	str	r3, [r1, #12]
  IOCtx.SendData         = LCD_IO_SendData;
 8000f8c:	4b34      	ldr	r3, [pc, #208]	; (8001060 <BSP_LCD_Init+0x118>)
 8000f8e:	614b      	str	r3, [r1, #20]
  IOCtx.SendDataDMA      = LCD_IO_SendDataDMA;
 8000f90:	4b34      	ldr	r3, [pc, #208]	; (8001064 <BSP_LCD_Init+0x11c>)
 8000f92:	618b      	str	r3, [r1, #24]
  IOCtx.RecvData         = LCD_IO_RecvData;
 8000f94:	4b34      	ldr	r3, [pc, #208]	; (8001068 <BSP_LCD_Init+0x120>)
 8000f96:	61cb      	str	r3, [r1, #28]
  IOCtx.RecvDataDMA      = LCD_IO_RecvDataDMA;
 8000f98:	4b34      	ldr	r3, [pc, #208]	; (800106c <BSP_LCD_Init+0x124>)
 8000f9a:	620b      	str	r3, [r1, #32]
  IOCtx.GetTick          = LCD_IO_GetTick;
 8000f9c:	4b34      	ldr	r3, [pc, #208]	; (8001070 <BSP_LCD_Init+0x128>)
 8000f9e:	624b      	str	r3, [r1, #36]	; 0x24
  IOCtx.Delay            = LCD_IO_Delay;
 8000fa0:	4b34      	ldr	r3, [pc, #208]	; (8001074 <BSP_LCD_Init+0x12c>)
 8000fa2:	628b      	str	r3, [r1, #40]	; 0x28
  if(ST7789V_RegisterBusIO(&ObjCtx, &IOCtx) != ST7789V_OK)
 8000fa4:	f000 fce0 	bl	8001968 <ST7789V_RegisterBusIO>
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	d147      	bne.n	800103c <BSP_LCD_Init+0xf4>
    LcdCompObj = &ObjCtx;
 8000fac:	4b32      	ldr	r3, [pc, #200]	; (8001078 <BSP_LCD_Init+0x130>)
  hLCDSPI.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000fae:	4e33      	ldr	r6, [pc, #204]	; (800107c <BSP_LCD_Init+0x134>)
    LcdCompObj = &ObjCtx;
 8000fb0:	4698      	mov	r8, r3
 8000fb2:	601f      	str	r7, [r3, #0]
  hLCDSPI.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000fb4:	2328      	movs	r3, #40	; 0x28
  if (HAL_SPI_Init(&hLCDSPI) != HAL_OK)
 8000fb6:	0030      	movs	r0, r6
  hLCDSPI.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000fb8:	61f3      	str	r3, [r6, #28]
  if (HAL_SPI_Init(&hLCDSPI) != HAL_OK)
 8000fba:	f002 fa47 	bl	800344c <HAL_SPI_Init>
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	d13f      	bne.n	8001042 <BSP_LCD_Init+0xfa>
      if((ST7789V_LCD_Driver.ReadID(LcdCompObj, &id) == ST7789V_OK) && (id == ST7789V_ID))
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <BSP_LCD_Init+0x138>)
 8000fc4:	a901      	add	r1, sp, #4
 8000fc6:	4699      	mov	r9, r3
 8000fc8:	4643      	mov	r3, r8
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	464b      	mov	r3, r9
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	4798      	blx	r3
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d132      	bne.n	800103c <BSP_LCD_Init+0xf4>
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <BSP_LCD_Init+0x13c>)
 8000fd8:	9a01      	ldr	r2, [sp, #4]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d12e      	bne.n	800103c <BSP_LCD_Init+0xf4>
  if (HAL_SPI_Init(&hLCDSPI) != HAL_OK)
 8000fde:	0030      	movs	r0, r6
  hLCDSPI.Init.BaudRatePrescaler = UserBaudRatePrescaler;
 8000fe0:	61f4      	str	r4, [r6, #28]
  if (HAL_SPI_Init(&hLCDSPI) != HAL_OK)
 8000fe2:	f002 fa33 	bl	800344c <HAL_SPI_Init>
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	d12b      	bne.n	8001042 <BSP_LCD_Init+0xfa>
          LcdDrv = (LCD_Drv_t *)&ST7789V_LCD_Driver;
 8000fea:	464a      	mov	r2, r9
 8000fec:	4b26      	ldr	r3, [pc, #152]	; (8001088 <BSP_LCD_Init+0x140>)
          ST7789V_InitParams.SwapRB         = 0;
 8000fee:	9403      	str	r4, [sp, #12]
          LcdDrv = (LCD_Drv_t *)&ST7789V_LCD_Driver;
 8000ff0:	601a      	str	r2, [r3, #0]
          ObjCtx.IsInitialized = 0;
 8000ff2:	2348      	movs	r3, #72	; 0x48
 8000ff4:	54fc      	strb	r4, [r7, r3]
          ST7789V_InitParams.Endian         = ST7789V_ENDIAN_BIG;
 8000ff6:	466b      	mov	r3, sp
 8000ff8:	721c      	strb	r4, [r3, #8]
          ST7789V_InitParams.ColorCoding    = ST7789V_FORMAT_DEFAULT;
 8000ffa:	2355      	movs	r3, #85	; 0x55
          ST7789V_InitParams.TEMode         = ST7789V_TE_MODE_1;
 8000ffc:	466a      	mov	r2, sp
          ST7789V_InitParams.ColorCoding    = ST7789V_FORMAT_DEFAULT;
 8000ffe:	9304      	str	r3, [sp, #16]
          ST7789V_InitParams.TEMode         = ST7789V_TE_MODE_1;
 8001000:	3b54      	subs	r3, #84	; 0x54
 8001002:	7713      	strb	r3, [r2, #28]
          ST7789V_InitParams.Timings.hsync  = ST7789V_HSYNC;
 8001004:	2209      	movs	r2, #9
 8001006:	231d      	movs	r3, #29
 8001008:	9208      	str	r2, [sp, #32]
 800100a:	9309      	str	r3, [sp, #36]	; 0x24
 800100c:	2202      	movs	r2, #2
 800100e:	2301      	movs	r3, #1
 8001010:	920a      	str	r2, [sp, #40]	; 0x28
 8001012:	930b      	str	r3, [sp, #44]	; 0x2c
 8001014:	2203      	movs	r2, #3
 8001016:	2302      	movs	r3, #2
 8001018:	920c      	str	r2, [sp, #48]	; 0x30
 800101a:	930d      	str	r3, [sp, #52]	; 0x34
          if(LcdDrv->Init(LcdCompObj, &ST7789V_InitParams) != ST7789V_OK)
 800101c:	4643      	mov	r3, r8
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	464b      	mov	r3, r9
          ST7789V_InitParams.TEScanline     = 0;
 8001022:	9406      	str	r4, [sp, #24]
          if(LcdDrv->Init(LcdCompObj, &ST7789V_InitParams) != ST7789V_OK)
 8001024:	681b      	ldr	r3, [r3, #0]
          ST7789V_InitParams.Orientation    = Orientation;
 8001026:	9505      	str	r5, [sp, #20]
          if(LcdDrv->Init(LcdCompObj, &ST7789V_InitParams) != ST7789V_OK)
 8001028:	a902      	add	r1, sp, #8
 800102a:	4798      	blx	r3
 800102c:	1e04      	subs	r4, r0, #0
 800102e:	d09b      	beq.n	8000f68 <BSP_LCD_Init+0x20>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8001030:	2405      	movs	r4, #5
 8001032:	4264      	negs	r4, r4
  return ret;
 8001034:	e798      	b.n	8000f68 <BSP_LCD_Init+0x20>
    ret = BSP_ERROR_WRONG_PARAM;
 8001036:	2402      	movs	r4, #2
 8001038:	4264      	negs	r4, r4
 800103a:	e795      	b.n	8000f68 <BSP_LCD_Init+0x20>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800103c:	2407      	movs	r4, #7
 800103e:	4264      	negs	r4, r4
 8001040:	e792      	b.n	8000f68 <BSP_LCD_Init+0x20>
    ret = BSP_ERROR_BUS_FAILURE;
 8001042:	2408      	movs	r4, #8
 8001044:	4264      	negs	r4, r4
 8001046:	e78f      	b.n	8000f68 <BSP_LCD_Init+0x20>
 8001048:	2000034c 	.word	0x2000034c
 800104c:	08000ec9 	.word	0x08000ec9
 8001050:	20000380 	.word	0x20000380
 8001054:	08000ec1 	.word	0x08000ec1
 8001058:	08000e0d 	.word	0x08000e0d
 800105c:	08000e41 	.word	0x08000e41
 8001060:	08000e29 	.word	0x08000e29
 8001064:	08000ead 	.word	0x08000ead
 8001068:	08000e65 	.word	0x08000e65
 800106c:	08000f41 	.word	0x08000f41
 8001070:	08000e21 	.word	0x08000e21
 8001074:	08000e15 	.word	0x08000e15
 8001078:	20000378 	.word	0x20000378
 800107c:	20000230 	.word	0x20000230
 8001080:	20000014 	.word	0x20000014
 8001084:	00858552 	.word	0x00858552
 8001088:	2000037c 	.word	0x2000037c

0800108c <BSP_LCD_DisplayOn>:
{
 800108c:	b570      	push	{r4, r5, r6, lr}
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 800108e:	2100      	movs	r1, #0
{
 8001090:	0005      	movs	r5, r0
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 8001092:	f000 f8ed 	bl	8001270 <LCD_OS_TryLock>
 8001096:	2800      	cmp	r0, #0
 8001098:	d111      	bne.n	80010be <BSP_LCD_DisplayOn+0x32>
  else if(LcdDrv->DisplayOn != NULL)
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <BSP_LCD_DisplayOn+0x40>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00f      	beq.n	80010c4 <BSP_LCD_DisplayOn+0x38>
    if(LcdDrv->DisplayOn(LcdCompObj) < 0)
 80010a4:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <BSP_LCD_DisplayOn+0x44>)
 80010a6:	6810      	ldr	r0, [r2, #0]
 80010a8:	4798      	blx	r3
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80010aa:	43c4      	mvns	r4, r0
 80010ac:	2305      	movs	r3, #5
 80010ae:	17e4      	asrs	r4, r4, #31
 80010b0:	401c      	ands	r4, r3
    LCD_OS_Unlock(Instance);
 80010b2:	0028      	movs	r0, r5
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80010b4:	3c05      	subs	r4, #5
    LCD_OS_Unlock(Instance);
 80010b6:	f000 f8cb 	bl	8001250 <LCD_OS_Unlock>
}
 80010ba:	0020      	movs	r0, r4
 80010bc:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_BUSY;
 80010be:	2403      	movs	r4, #3
 80010c0:	4264      	negs	r4, r4
 80010c2:	e7fa      	b.n	80010ba <BSP_LCD_DisplayOn+0x2e>
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80010c4:	240b      	movs	r4, #11
 80010c6:	4264      	negs	r4, r4
  return ret;
 80010c8:	e7f7      	b.n	80010ba <BSP_LCD_DisplayOn+0x2e>
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	2000037c 	.word	0x2000037c
 80010d0:	20000378 	.word	0x20000378

080010d4 <BSP_LCD_FillRGBRect>:
{
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	46c6      	mov	lr, r8
 80010d8:	000c      	movs	r4, r1
 80010da:	0019      	movs	r1, r3
  if(LcdDrv->SetDisplayWindow != NULL)
 80010dc:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <BSP_LCD_FillRGBRect+0xdc>)
{
 80010de:	b500      	push	{lr}
  if(LcdDrv->SetDisplayWindow != NULL)
 80010e0:	681b      	ldr	r3, [r3, #0]
{
 80010e2:	0005      	movs	r5, r0
  if(LcdDrv->SetDisplayWindow != NULL)
 80010e4:	695f      	ldr	r7, [r3, #20]
{
 80010e6:	0016      	movs	r6, r2
 80010e8:	b082      	sub	sp, #8
  if(LcdDrv->SetDisplayWindow != NULL)
 80010ea:	2f00      	cmp	r7, #0
 80010ec:	d056      	beq.n	800119c <BSP_LCD_FillRGBRect+0xc8>
    if (LcdDrv->SetDisplayWindow(LcdCompObj, Xpos, Ypos, Width, Height) < 0)
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <BSP_LCD_FillRGBRect+0xe0>)
 80010f0:	9a08      	ldr	r2, [sp, #32]
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010fa:	47b8      	blx	r7
 80010fc:	2800      	cmp	r0, #0
 80010fe:	db4d      	blt.n	800119c <BSP_LCD_FillRGBRect+0xc8>
    if(UseDMA)
 8001100:	2c00      	cmp	r4, #0
 8001102:	d12d      	bne.n	8001160 <BSP_LCD_FillRGBRect+0x8c>
      ret = BSP_LCD_WriteData(Instance, pData, (2*Width*Height));
 8001104:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001106:	9b09      	ldr	r3, [sp, #36]	; 0x24
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 8001108:	2100      	movs	r1, #0
      ret = BSP_LCD_WriteData(Instance, pData, (2*Width*Height));
 800110a:	435c      	muls	r4, r3
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 800110c:	0028      	movs	r0, r5
      ret = BSP_LCD_WriteData(Instance, pData, (2*Width*Height));
 800110e:	0064      	lsls	r4, r4, #1
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 8001110:	f000 f8ae 	bl	8001270 <LCD_OS_TryLock>
 8001114:	2800      	cmp	r0, #0
 8001116:	d144      	bne.n	80011a2 <BSP_LCD_FillRGBRect+0xce>
  else if(IOCtx.SendData)
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <BSP_LCD_FillRGBRect+0xe4>)
 800111a:	4698      	mov	r8, r3
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d042      	beq.n	80011a8 <BSP_LCD_FillRGBRect+0xd4>
    hLCDSPI.Init.DataSize = SPI_DATASIZE_16BIT;
 8001122:	23f0      	movs	r3, #240	; 0xf0
 8001124:	4f25      	ldr	r7, [pc, #148]	; (80011bc <BSP_LCD_FillRGBRect+0xe8>)
 8001126:	011b      	lsls	r3, r3, #4
    HAL_SPI_Init(&hLCDSPI);
 8001128:	0038      	movs	r0, r7
    hLCDSPI.Init.DataSize = SPI_DATASIZE_16BIT;
 800112a:	60fb      	str	r3, [r7, #12]
    HAL_SPI_Init(&hLCDSPI);
 800112c:	f002 f98e 	bl	800344c <HAL_SPI_Init>
    if(IOCtx.SendData(pData, (Length / 2)) < 0)
 8001130:	4643      	mov	r3, r8
 8001132:	0861      	lsrs	r1, r4, #1
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	0030      	movs	r0, r6
 8001138:	4798      	blx	r3
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800113a:	43c4      	mvns	r4, r0
 800113c:	2305      	movs	r3, #5
 800113e:	17e4      	asrs	r4, r4, #31
 8001140:	401c      	ands	r4, r3
    hLCDSPI.Init.DataSize = SPI_DATASIZE_8BIT;
 8001142:	23e0      	movs	r3, #224	; 0xe0
    HAL_SPI_Init(&hLCDSPI);
 8001144:	0038      	movs	r0, r7
    hLCDSPI.Init.DataSize = SPI_DATASIZE_8BIT;
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	60fb      	str	r3, [r7, #12]
    HAL_SPI_Init(&hLCDSPI);
 800114a:	f002 f97f 	bl	800344c <HAL_SPI_Init>
    LCD_OS_Unlock(Instance);
 800114e:	0028      	movs	r0, r5
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001150:	3c05      	subs	r4, #5
    LCD_OS_Unlock(Instance);
 8001152:	f000 f87d 	bl	8001250 <LCD_OS_Unlock>
}
 8001156:	0020      	movs	r0, r4
 8001158:	b002      	add	sp, #8
 800115a:	bc80      	pop	{r7}
 800115c:	46b8      	mov	r8, r7
 800115e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = BSP_LCD_WriteDataDMA(Instance, pData, (2*Width*Height));
 8001160:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001162:	9b09      	ldr	r3, [sp, #36]	; 0x24
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 8001164:	2100      	movs	r1, #0
      ret = BSP_LCD_WriteDataDMA(Instance, pData, (2*Width*Height));
 8001166:	435c      	muls	r4, r3
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 8001168:	0028      	movs	r0, r5
      ret = BSP_LCD_WriteDataDMA(Instance, pData, (2*Width*Height));
 800116a:	0064      	lsls	r4, r4, #1
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 800116c:	f000 f880 	bl	8001270 <LCD_OS_TryLock>
 8001170:	2800      	cmp	r0, #0
 8001172:	d116      	bne.n	80011a2 <BSP_LCD_FillRGBRect+0xce>
  else if(IOCtx.SendDataDMA)
 8001174:	4d10      	ldr	r5, [pc, #64]	; (80011b8 <BSP_LCD_FillRGBRect+0xe4>)
 8001176:	69ab      	ldr	r3, [r5, #24]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d015      	beq.n	80011a8 <BSP_LCD_FillRGBRect+0xd4>
    hLCDSPI.Init.DataSize = SPI_DATASIZE_16BIT;
 800117c:	23f0      	movs	r3, #240	; 0xf0
 800117e:	480f      	ldr	r0, [pc, #60]	; (80011bc <BSP_LCD_FillRGBRect+0xe8>)
 8001180:	011b      	lsls	r3, r3, #4
 8001182:	60c3      	str	r3, [r0, #12]
    HAL_SPI_Init(&hLCDSPI);
 8001184:	f002 f962 	bl	800344c <HAL_SPI_Init>
    if(IOCtx.SendDataDMA(pData, (Length / 2)) < 0)
 8001188:	69ab      	ldr	r3, [r5, #24]
 800118a:	0861      	lsrs	r1, r4, #1
 800118c:	0030      	movs	r0, r6
 800118e:	4798      	blx	r3
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001190:	43c4      	mvns	r4, r0
 8001192:	2305      	movs	r3, #5
 8001194:	17e4      	asrs	r4, r4, #31
 8001196:	401c      	ands	r4, r3
 8001198:	3c05      	subs	r4, #5
 800119a:	e7dc      	b.n	8001156 <BSP_LCD_FillRGBRect+0x82>
    ret = BSP_ERROR_BUS_FAILURE;
 800119c:	2408      	movs	r4, #8
 800119e:	4264      	negs	r4, r4
 80011a0:	e7d9      	b.n	8001156 <BSP_LCD_FillRGBRect+0x82>
    ret = BSP_ERROR_BUSY;
 80011a2:	2403      	movs	r4, #3
 80011a4:	4264      	negs	r4, r4
 80011a6:	e7d6      	b.n	8001156 <BSP_LCD_FillRGBRect+0x82>
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80011a8:	240b      	movs	r4, #11
 80011aa:	4264      	negs	r4, r4
 80011ac:	e7d3      	b.n	8001156 <BSP_LCD_FillRGBRect+0x82>
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	2000037c 	.word	0x2000037c
 80011b4:	20000378 	.word	0x20000378
 80011b8:	2000034c 	.word	0x2000034c
 80011bc:	20000230 	.word	0x20000230

080011c0 <BSP_LCD_WaitForTransferToBeDone>:
{
 80011c0:	b510      	push	{r4, lr}
  if (Instance < LCD_INSTANCES_NBR)
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d000      	beq.n	80011c8 <BSP_LCD_WaitForTransferToBeDone+0x8>
}
 80011c6:	bd10      	pop	{r4, pc}
    LCD_OS_WaitForTransferToBeDone(Instance);
 80011c8:	f000 f870 	bl	80012ac <LCD_OS_WaitForTransferToBeDone>
}
 80011cc:	e7fb      	b.n	80011c6 <BSP_LCD_WaitForTransferToBeDone+0x6>
 80011ce:	46c0      	nop			; (mov r8, r8)

080011d0 <BSP_LCD_SignalTransferDone>:
}
 80011d0:	4770      	bx	lr
 80011d2:	46c0      	nop			; (mov r8, r8)

080011d4 <SPI_TxCpltCallback>:
  if(hspi == &hLCDSPI)
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <SPI_TxCpltCallback+0x2c>)
{
 80011d6:	b510      	push	{r4, lr}
  if(hspi == &hLCDSPI)
 80011d8:	4298      	cmp	r0, r3
 80011da:	d000      	beq.n	80011de <SPI_TxCpltCallback+0xa>
}
 80011dc:	bd10      	pop	{r4, pc}
    LCD_CS_HIGH();
 80011de:	23a0      	movs	r3, #160	; 0xa0
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	05db      	lsls	r3, r3, #23
 80011e4:	0092      	lsls	r2, r2, #2
 80011e6:	619a      	str	r2, [r3, #24]
    hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80011e8:	23e0      	movs	r3, #224	; 0xe0
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	60c3      	str	r3, [r0, #12]
    HAL_SPI_Init(hspi);
 80011ee:	f002 f92d 	bl	800344c <HAL_SPI_Init>
    LCD_OS_UnlockFromISR(0);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 f834 	bl	8001260 <LCD_OS_UnlockFromISR>
    BSP_LCD_SignalTransferDone(0);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff ffe9 	bl	80011d0 <BSP_LCD_SignalTransferDone>
}
 80011fe:	e7ed      	b.n	80011dc <SPI_TxCpltCallback+0x8>
 8001200:	20000230 	.word	0x20000230

08001204 <BSP_LCD_SignalTearingEffectEvent>:
}
 8001204:	4770      	bx	lr
 8001206:	46c0      	nop			; (mov r8, r8)

08001208 <LCD_TEFallingCallback>:
{
 8001208:	b510      	push	{r4, lr}
  HAL_EXTI_ClearPending(&hexti_lcd_te, EXTI_TRIGGER_FALLING);
 800120a:	2102      	movs	r1, #2
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <LCD_TEFallingCallback+0x18>)
 800120e:	f001 f87b 	bl	8002308 <HAL_EXTI_ClearPending>
  BSP_LCD_SignalTearingEffectEvent(0, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff fff4 	bl	8001204 <BSP_LCD_SignalTearingEffectEvent>
}
 800121c:	bd10      	pop	{r4, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	200003d4 	.word	0x200003d4

08001224 <LCD_TERisingCallback>:
{
 8001224:	b510      	push	{r4, lr}
  HAL_EXTI_ClearPending(&hexti_lcd_te, EXTI_TRIGGER_RISING);
 8001226:	2101      	movs	r1, #1
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <LCD_TERisingCallback+0x18>)
 800122a:	f001 f86d 	bl	8002308 <HAL_EXTI_ClearPending>
  BSP_LCD_SignalTearingEffectEvent(0, 1, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2101      	movs	r1, #1
 8001232:	2000      	movs	r0, #0
 8001234:	f7ff ffe6 	bl	8001204 <BSP_LCD_SignalTearingEffectEvent>
}
 8001238:	bd10      	pop	{r4, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	200003d4 	.word	0x200003d4

08001240 <LCD_OS_Initialize>:
uint8_t LCD_OS_Initialize(uint32_t Instance)
{
  uint8_t i;
  for(i = 0; i < LCD_INSTANCES_NBR; i++)
  {
    lcd_sem[i] = 0;
 8001240:	2200      	movs	r2, #0
 8001242:	4b02      	ldr	r3, [pc, #8]	; (800124c <LCD_OS_Initialize+0xc>)
  }
  return LCD_OS_ERROR_NONE;
}
 8001244:	2000      	movs	r0, #0
    lcd_sem[i] = 0;
 8001246:	701a      	strb	r2, [r3, #0]
}
 8001248:	4770      	bx	lr
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	200003e0 	.word	0x200003e0

08001250 <LCD_OS_Unlock>:
  * @param  Instance LCD Instance
  * @retval LCD_OS_Error_t
  */
uint8_t LCD_OS_Unlock(uint32_t Instance)
{
  lcd_sem[Instance] = 0;
 8001250:	2200      	movs	r2, #0
 8001252:	4b02      	ldr	r3, [pc, #8]	; (800125c <LCD_OS_Unlock+0xc>)
 8001254:	541a      	strb	r2, [r3, r0]
  return LCD_OS_ERROR_NONE;
}
 8001256:	2000      	movs	r0, #0
 8001258:	4770      	bx	lr
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	200003e0 	.word	0x200003e0

08001260 <LCD_OS_UnlockFromISR>:
 8001260:	2200      	movs	r2, #0
 8001262:	4b02      	ldr	r3, [pc, #8]	; (800126c <LCD_OS_UnlockFromISR+0xc>)
 8001264:	541a      	strb	r2, [r3, r0]
 8001266:	2000      	movs	r0, #0
 8001268:	4770      	bx	lr
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	200003e0 	.word	0x200003e0

08001270 <LCD_OS_TryLock>:
  * @param  Instance LCD Instance
  * @param  Timeout timeout in ms
  * @retval LCD_OS_Error_t
  */
uint8_t LCD_OS_TryLock(uint32_t Instance, uint32_t Timeout)
{
 8001270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001272:	0004      	movs	r4, r0
 8001274:	000d      	movs	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8001276:	f000 fd97 	bl	8001da8 <HAL_GetTick>

  if(lcd_sem[Instance] == 0)
 800127a:	4f0b      	ldr	r7, [pc, #44]	; (80012a8 <LCD_OS_TryLock+0x38>)
  uint32_t tickstart = HAL_GetTick();
 800127c:	0006      	movs	r6, r0
  if(lcd_sem[Instance] == 0)
 800127e:	5d3b      	ldrb	r3, [r7, r4]
 8001280:	b2d8      	uxtb	r0, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <LCD_OS_TryLock+0x2e>
  {
    lcd_sem[Instance] = 1;
    return LCD_OS_ERROR_NONE;
  }
  else if(Timeout == 0)
 8001286:	2d00      	cmp	r5, #0
 8001288:	d105      	bne.n	8001296 <LCD_OS_TryLock+0x26>
 800128a:	e00b      	b.n	80012a4 <LCD_OS_TryLock+0x34>
      if(lcd_sem[Instance] == 0)
      {
        lcd_sem[Instance] = 1;
        return LCD_OS_ERROR_NONE;
      }
    } while ((HAL_GetTick() - tickstart) < Timeout);
 800128c:	f000 fd8c 	bl	8001da8 <HAL_GetTick>
 8001290:	1b80      	subs	r0, r0, r6
 8001292:	42a8      	cmp	r0, r5
 8001294:	d206      	bcs.n	80012a4 <LCD_OS_TryLock+0x34>
      if(lcd_sem[Instance] == 0)
 8001296:	5d3b      	ldrb	r3, [r7, r4]
 8001298:	b2d8      	uxtb	r0, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f6      	bne.n	800128c <LCD_OS_TryLock+0x1c>
        lcd_sem[Instance] = 1;
 800129e:	3301      	adds	r3, #1
 80012a0:	553b      	strb	r3, [r7, r4]
    return LCD_OS_ERROR_BUSY;
  }
}
 80012a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LCD_OS_ERROR_BUSY;
 80012a4:	2003      	movs	r0, #3
 80012a6:	e7fc      	b.n	80012a2 <LCD_OS_TryLock+0x32>
 80012a8:	200003e0 	.word	0x200003e0

080012ac <LCD_OS_WaitForTransferToBeDone>:
  * @param  Instance LCD Instance
  * @retval LCD_OS_Error_t
  */
uint8_t LCD_OS_WaitForTransferToBeDone(uint32_t Instance)
{
  while(lcd_sem[Instance]);
 80012ac:	4a02      	ldr	r2, [pc, #8]	; (80012b8 <LCD_OS_WaitForTransferToBeDone+0xc>)
 80012ae:	5c13      	ldrb	r3, [r2, r0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1fc      	bne.n	80012ae <LCD_OS_WaitForTransferToBeDone+0x2>
  return LCD_OS_ERROR_NONE;
}
 80012b4:	2000      	movs	r0, #0
 80012b6:	4770      	bx	lr
 80012b8:	200003e0 	.word	0x200003e0

080012bc <ST7789V_DeInit>:
  * @brief  De-Initialize the st7789v LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7789V_DeInit(ST7789V_Object_t *pObj)
{
 80012bc:	b510      	push	{r4, lr}
  return pObj->IO.DeInit();
 80012be:	6843      	ldr	r3, [r0, #4]
 80012c0:	4798      	blx	r3
}
 80012c2:	bd10      	pop	{r4, pc}

080012c4 <ST7789V_GetOrientation>:
  */
int32_t ST7789V_GetOrientation(ST7789V_Object_t *pObj, uint32_t *Orientation)
{
  (void)pObj;

  *Orientation = ST7789VCtx.Orientation;
 80012c4:	4b02      	ldr	r3, [pc, #8]	; (80012d0 <ST7789V_GetOrientation+0xc>)

  return ST7789V_OK;
}
 80012c6:	2000      	movs	r0, #0
  *Orientation = ST7789VCtx.Orientation;
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	600b      	str	r3, [r1, #0]
}
 80012cc:	4770      	bx	lr
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	200003e4 	.word	0x200003e4

080012d4 <ST7789V_GetXSize>:
  */
int32_t ST7789V_GetXSize(ST7789V_Object_t *pObj, uint32_t *XSize)
{
  (void)pObj;

  *XSize = ST7789VCtx.Width;
 80012d4:	4b02      	ldr	r3, [pc, #8]	; (80012e0 <ST7789V_GetXSize+0xc>)

  return ST7789V_OK;
}
 80012d6:	2000      	movs	r0, #0
  *XSize = ST7789VCtx.Width;
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	600b      	str	r3, [r1, #0]
}
 80012dc:	4770      	bx	lr
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	200003e4 	.word	0x200003e4

080012e4 <ST7789V_GetYSize>:
  */
int32_t ST7789V_GetYSize(ST7789V_Object_t *pObj, uint32_t *YSize)
{
  (void)pObj;

  *YSize = ST7789VCtx.Height;
 80012e4:	4b02      	ldr	r3, [pc, #8]	; (80012f0 <ST7789V_GetYSize+0xc>)

  return ST7789V_OK;
}
 80012e6:	2000      	movs	r0, #0
  *YSize = ST7789VCtx.Height;
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	600b      	str	r3, [r1, #0]
}
 80012ec:	4770      	bx	lr
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	200003e4 	.word	0x200003e4

080012f4 <ST7789V_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7789V_ReadRegWrap(void *Handle, uint8_t* Reg, uint32_t Length)
{
 80012f4:	0003      	movs	r3, r0
 80012f6:	b510      	push	{r4, lr}
 80012f8:	0008      	movs	r0, r1
 80012fa:	0011      	movs	r1, r2
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;

  return pObj->IO.ReadReg(Reg, Length);
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	4798      	blx	r3
}
 8001300:	bd10      	pop	{r4, pc}
 8001302:	46c0      	nop			; (mov r8, r8)

08001304 <ST7789V_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7789V_WriteRegWrap(void *Handle, uint8_t* Reg, uint32_t Length)
{
 8001304:	0003      	movs	r3, r0
 8001306:	b510      	push	{r4, lr}
 8001308:	0008      	movs	r0, r1
 800130a:	0011      	movs	r1, r2
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;

  return pObj->IO.WriteReg(Reg, Length);
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	4798      	blx	r3
}
 8001310:	bd10      	pop	{r4, pc}
 8001312:	46c0      	nop			; (mov r8, r8)

08001314 <ST7789V_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7789V_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8001314:	0003      	movs	r3, r0
 8001316:	b510      	push	{r4, lr}
 8001318:	0008      	movs	r0, r1
 800131a:	0011      	movs	r1, r2
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;

  return pObj->IO.SendData(pData, Length);
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	4798      	blx	r3
}
 8001320:	bd10      	pop	{r4, pc}
 8001322:	46c0      	nop			; (mov r8, r8)

08001324 <ST7789V_SendDataDMAWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7789V_SendDataDMAWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8001324:	0003      	movs	r3, r0
 8001326:	b510      	push	{r4, lr}
 8001328:	0008      	movs	r0, r1
 800132a:	0011      	movs	r1, r2
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;

  return pObj->IO.SendDataDMA(pData, Length);
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	4798      	blx	r3
}
 8001330:	bd10      	pop	{r4, pc}
 8001332:	46c0      	nop			; (mov r8, r8)

08001334 <ST7789V_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7789V_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8001334:	0003      	movs	r3, r0
 8001336:	b510      	push	{r4, lr}
 8001338:	0008      	movs	r0, r1
 800133a:	0011      	movs	r1, r2
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;

  return pObj->IO.RecvData(pData, Length);
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	4798      	blx	r3
}
 8001340:	bd10      	pop	{r4, pc}
 8001342:	46c0      	nop			; (mov r8, r8)

08001344 <ST7789V_RecvDataDMAWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7789V_RecvDataDMAWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8001344:	0003      	movs	r3, r0
 8001346:	b510      	push	{r4, lr}
 8001348:	0008      	movs	r0, r1
 800134a:	0011      	movs	r1, r2
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;

  return pObj->IO.RecvDataDMA(pData, Length);
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	4798      	blx	r3
}
 8001350:	bd10      	pop	{r4, pc}
 8001352:	46c0      	nop			; (mov r8, r8)

08001354 <ST7789V_DisplayOn>:
{
 8001354:	b500      	push	{lr}
 8001356:	b083      	sub	sp, #12
  uint8_t reg = ST7789V_DISPLAY_ON;
 8001358:	466b      	mov	r3, sp
 800135a:	1dd9      	adds	r1, r3, #7
 800135c:	2329      	movs	r3, #41	; 0x29
  return st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800135e:	2201      	movs	r2, #1
 8001360:	302c      	adds	r0, #44	; 0x2c
  uint8_t reg = ST7789V_DISPLAY_ON;
 8001362:	700b      	strb	r3, [r1, #0]
  return st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001364:	f000 fb38 	bl	80019d8 <st7789v_write_reg>
}
 8001368:	b003      	add	sp, #12
 800136a:	bd00      	pop	{pc}

0800136c <ST7789V_DisplayOff>:
{
 800136c:	b500      	push	{lr}
 800136e:	b083      	sub	sp, #12
  uint8_t reg = ST7789V_DISPLAY_OFF;
 8001370:	466b      	mov	r3, sp
 8001372:	1dd9      	adds	r1, r3, #7
 8001374:	2328      	movs	r3, #40	; 0x28
  return st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001376:	2201      	movs	r2, #1
 8001378:	302c      	adds	r0, #44	; 0x2c
  uint8_t reg = ST7789V_DISPLAY_OFF;
 800137a:	700b      	strb	r3, [r1, #0]
  return st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800137c:	f000 fb2c 	bl	80019d8 <st7789v_write_reg>
}
 8001380:	b003      	add	sp, #12
 8001382:	bd00      	pop	{pc}

08001384 <ST7789V_SetOrientation>:
{
 8001384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001386:	46c6      	mov	lr, r8
  parameter = (uint8_t)OrientationTab[Orientation];
 8001388:	2306      	movs	r3, #6
{
 800138a:	b500      	push	{lr}
 800138c:	b082      	sub	sp, #8
  parameter = (uint8_t)OrientationTab[Orientation];
 800138e:	446b      	add	r3, sp
 8001390:	4698      	mov	r8, r3
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <ST7789V_SetOrientation+0x70>)
 8001394:	008a      	lsls	r2, r1, #2
 8001396:	58d3      	ldr	r3, [r2, r3]
 8001398:	4642      	mov	r2, r8
 800139a:	7013      	strb	r3, [r2, #0]
  reg = ST7789V_MAC;
 800139c:	466b      	mov	r3, sp
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800139e:	0007      	movs	r7, r0
{
 80013a0:	000c      	movs	r4, r1
  reg = ST7789V_MAC;
 80013a2:	1dd9      	adds	r1, r3, #7
 80013a4:	2336      	movs	r3, #54	; 0x36
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80013a6:	372c      	adds	r7, #44	; 0x2c
 80013a8:	2201      	movs	r2, #1
{
 80013aa:	0006      	movs	r6, r0
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80013ac:	0038      	movs	r0, r7
  reg = ST7789V_MAC;
 80013ae:	700b      	strb	r3, [r1, #0]
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80013b0:	f000 fb12 	bl	80019d8 <st7789v_write_reg>
  ret += st7789v_send_data(&pObj->Ctx, &parameter, 1);
 80013b4:	2201      	movs	r2, #1
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80013b6:	0005      	movs	r5, r0
  ret += st7789v_send_data(&pObj->Ctx, &parameter, 1);
 80013b8:	4641      	mov	r1, r8
 80013ba:	0038      	movs	r0, r7
 80013bc:	f000 fb12 	bl	80019e4 <st7789v_send_data>
 80013c0:	1828      	adds	r0, r5, r0
  if(ret == ST7789V_OK)
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d112      	bne.n	80013ec <ST7789V_SetOrientation+0x68>
    ST7789VCtx.Orientation = Orientation;
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <ST7789V_SetOrientation+0x74>)
 80013c8:	609c      	str	r4, [r3, #8]
    switch (Orientation)
 80013ca:	3c02      	subs	r4, #2
 80013cc:	2c01      	cmp	r4, #1
 80013ce:	d909      	bls.n	80013e4 <ST7789V_SetOrientation+0x60>
        ST7789VCtx.Height = ST7789V_HEIGHT;
 80013d0:	22a0      	movs	r2, #160	; 0xa0
        ST7789VCtx.Width  = ST7789V_WIDTH;
 80013d2:	21f0      	movs	r1, #240	; 0xf0
        ST7789VCtx.Height = ST7789V_HEIGHT;
 80013d4:	0052      	lsls	r2, r2, #1
 80013d6:	c306      	stmia	r3!, {r1, r2}
    pObj->XSize = ST7789VCtx.Width;
 80013d8:	64f1      	str	r1, [r6, #76]	; 0x4c
    pObj->YSize = ST7789VCtx.Height;
 80013da:	6532      	str	r2, [r6, #80]	; 0x50
}
 80013dc:	b002      	add	sp, #8
 80013de:	bc80      	pop	{r7}
 80013e0:	46b8      	mov	r8, r7
 80013e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ST7789VCtx.Width  = ST7789V_HEIGHT;
 80013e4:	21a0      	movs	r1, #160	; 0xa0
        ST7789VCtx.Height = ST7789V_WIDTH;
 80013e6:	22f0      	movs	r2, #240	; 0xf0
        ST7789VCtx.Width  = ST7789V_HEIGHT;
 80013e8:	0049      	lsls	r1, r1, #1
 80013ea:	e7f4      	b.n	80013d6 <ST7789V_SetOrientation+0x52>
    ret = ST7789V_ERROR;
 80013ec:	2001      	movs	r0, #1
 80013ee:	4240      	negs	r0, r0
  return ret;
 80013f0:	e7f4      	b.n	80013dc <ST7789V_SetOrientation+0x58>
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	20000004 	.word	0x20000004
 80013f8:	200003e4 	.word	0x200003e4

080013fc <ST7789V_SetDisplayWindow>:
{
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	46ce      	mov	lr, r9
 8001400:	4647      	mov	r7, r8
 8001402:	b580      	push	{r7, lr}
 8001404:	b083      	sub	sp, #12
 8001406:	4690      	mov	r8, r2
 8001408:	4699      	mov	r9, r3
  uint8_t reg = ST7789V_CASET;
 800140a:	466a      	mov	r2, sp
 800140c:	232a      	movs	r3, #42	; 0x2a
 800140e:	70d3      	strb	r3, [r2, #3]
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001410:	466b      	mov	r3, sp
{
 8001412:	000e      	movs	r6, r1
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001414:	2201      	movs	r2, #1
 8001416:	1cd9      	adds	r1, r3, #3
 8001418:	302c      	adds	r0, #44	; 0x2c
  parameter [0] = (uint8_t)(Xpos >> 8U);
 800141a:	ad01      	add	r5, sp, #4
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800141c:	0007      	movs	r7, r0
 800141e:	f000 fadb 	bl	80019d8 <st7789v_write_reg>
  parameter [0] = (uint8_t)(Xpos >> 8U);
 8001422:	0a33      	lsrs	r3, r6, #8
 8001424:	702b      	strb	r3, [r5, #0]
  parameter [2] = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8001426:	464b      	mov	r3, r9
  parameter [1] = (uint8_t)(Xpos & 0xFFU);
 8001428:	b2f2      	uxtb	r2, r6
  parameter [2] = (uint8_t)((Xpos + Width - 1U) >> 8U);
 800142a:	3b01      	subs	r3, #1
  parameter [1] = (uint8_t)(Xpos & 0xFFU);
 800142c:	706a      	strb	r2, [r5, #1]
  parameter [2] = (uint8_t)((Xpos + Width - 1U) >> 8U);
 800142e:	199e      	adds	r6, r3, r6
  parameter [3] = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8001430:	18d2      	adds	r2, r2, r3
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 8001432:	0029      	movs	r1, r5
  parameter [3] = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8001434:	70ea      	strb	r2, [r5, #3]
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001436:	0004      	movs	r4, r0
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 8001438:	2204      	movs	r2, #4
 800143a:	0038      	movs	r0, r7
  parameter [2] = (uint8_t)((Xpos + Width - 1U) >> 8U);
 800143c:	0a36      	lsrs	r6, r6, #8
 800143e:	70ae      	strb	r6, [r5, #2]
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 8001440:	f000 fad0 	bl	80019e4 <st7789v_send_data>
  reg = ST7789V_RASET;
 8001444:	466a      	mov	r2, sp
 8001446:	232b      	movs	r3, #43	; 0x2b
 8001448:	70d3      	strb	r3, [r2, #3]
  ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800144a:	466b      	mov	r3, sp
 800144c:	2201      	movs	r2, #1
 800144e:	1cd9      	adds	r1, r3, #3
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 8001450:	1824      	adds	r4, r4, r0
  ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001452:	0038      	movs	r0, r7
 8001454:	f000 fac0 	bl	80019d8 <st7789v_write_reg>
  parameter [0] = (uint8_t)(Ypos >> 8U);
 8001458:	4643      	mov	r3, r8
  parameter [2] = (uint8_t)((Ypos + Height - 1U) >> 8U);
 800145a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  parameter [0] = (uint8_t)(Ypos >> 8U);
 800145c:	0a1b      	lsrs	r3, r3, #8
  parameter [2] = (uint8_t)((Ypos + Height - 1U) >> 8U);
 800145e:	1e51      	subs	r1, r2, #1
 8001460:	4642      	mov	r2, r8
  parameter [0] = (uint8_t)(Ypos >> 8U);
 8001462:	702b      	strb	r3, [r5, #0]
  parameter [1] = (uint8_t)(Ypos & 0xFFU);
 8001464:	4643      	mov	r3, r8
  parameter [2] = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8001466:	188a      	adds	r2, r1, r2
  parameter [1] = (uint8_t)(Ypos & 0xFFU);
 8001468:	b2db      	uxtb	r3, r3
  parameter [2] = (uint8_t)((Ypos + Height - 1U) >> 8U);
 800146a:	0a12      	lsrs	r2, r2, #8
  parameter [1] = (uint8_t)(Ypos & 0xFFU);
 800146c:	706b      	strb	r3, [r5, #1]
  parameter [2] = (uint8_t)((Ypos + Height - 1U) >> 8U);
 800146e:	70aa      	strb	r2, [r5, #2]
  parameter [3] = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8001470:	185b      	adds	r3, r3, r1
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 8001472:	2204      	movs	r2, #4
 8001474:	0029      	movs	r1, r5
  ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001476:	1824      	adds	r4, r4, r0
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 8001478:	0038      	movs	r0, r7
  parameter [3] = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 800147a:	70eb      	strb	r3, [r5, #3]
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 800147c:	f000 fab2 	bl	80019e4 <st7789v_send_data>
  reg = ST7789V_GRAM;
 8001480:	466a      	mov	r2, sp
 8001482:	232c      	movs	r3, #44	; 0x2c
 8001484:	70d3      	strb	r3, [r2, #3]
  ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001486:	466b      	mov	r3, sp
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 8001488:	1824      	adds	r4, r4, r0
  ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800148a:	1cd9      	adds	r1, r3, #3
 800148c:	2201      	movs	r2, #1
 800148e:	0038      	movs	r0, r7
 8001490:	f000 faa2 	bl	80019d8 <st7789v_write_reg>
 8001494:	1820      	adds	r0, r4, r0
  if(ret != ST7789V_OK)
 8001496:	1e43      	subs	r3, r0, #1
 8001498:	4198      	sbcs	r0, r3
 800149a:	4240      	negs	r0, r0
}
 800149c:	b003      	add	sp, #12
 800149e:	bcc0      	pop	{r6, r7}
 80014a0:	46b9      	mov	r9, r7
 80014a2:	46b0      	mov	r8, r6
 80014a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)

080014a8 <ST7789V_ReadID>:
  uint8_t data[4] = {ST7789V_READ_DISPLAY_ID, 0, 0, 0 };
 80014a8:	2304      	movs	r3, #4
{
 80014aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ac:	b083      	sub	sp, #12
  uint8_t data[4] = {ST7789V_READ_DISPLAY_ID, 0, 0, 0 };
 80014ae:	ac01      	add	r4, sp, #4
{
 80014b0:	000d      	movs	r5, r1
  if(st7789v_recv_data(&pObj->Ctx, data, 4) != ST7789V_OK)
 80014b2:	2204      	movs	r2, #4
 80014b4:	0021      	movs	r1, r4
 80014b6:	302c      	adds	r0, #44	; 0x2c
  uint8_t data[4] = {ST7789V_READ_DISPLAY_ID, 0, 0, 0 };
 80014b8:	9301      	str	r3, [sp, #4]
  if(st7789v_recv_data(&pObj->Ctx, data, 4) != ST7789V_OK)
 80014ba:	f000 fa99 	bl	80019f0 <st7789v_recv_data>
 80014be:	2800      	cmp	r0, #0
 80014c0:	d134      	bne.n	800152c <ST7789V_ReadID+0x84>
    *Id = ((data[1] << 16) | (data[2] << 8) | data[3]);
 80014c2:	7862      	ldrb	r2, [r4, #1]
 80014c4:	78a1      	ldrb	r1, [r4, #2]
 80014c6:	78e6      	ldrb	r6, [r4, #3]
 80014c8:	020f      	lsls	r7, r1, #8
 80014ca:	0413      	lsls	r3, r2, #16
 80014cc:	433b      	orrs	r3, r7
    if(*Id != ST7789V_ID)
 80014ce:	4f19      	ldr	r7, [pc, #100]	; (8001534 <ST7789V_ReadID+0x8c>)
    *Id = ((data[1] << 16) | (data[2] << 8) | data[3]);
 80014d0:	4333      	orrs	r3, r6
 80014d2:	602b      	str	r3, [r5, #0]
    if(*Id != ST7789V_ID)
 80014d4:	42bb      	cmp	r3, r7
 80014d6:	d014      	beq.n	8001502 <ST7789V_ReadID+0x5a>
      data[0] <<= 1;
 80014d8:	7823      	ldrb	r3, [r4, #0]
      if(data[1] & 0x80)
 80014da:	b254      	sxtb	r4, r2
      data[0] <<= 1;
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
      if(data[1] & 0x80)
 80014e0:	2c00      	cmp	r4, #0
 80014e2:	db1b      	blt.n	800151c <ST7789V_ReadID+0x74>
      data[1] <<= 1;
 80014e4:	0052      	lsls	r2, r2, #1
      if(data[2] & 0x80)
 80014e6:	b24c      	sxtb	r4, r1
      data[1] <<= 1;
 80014e8:	b2d2      	uxtb	r2, r2
      if(data[2] & 0x80)
 80014ea:	2c00      	cmp	r4, #0
 80014ec:	db0e      	blt.n	800150c <ST7789V_ReadID+0x64>
      data[2] <<= 1;
 80014ee:	0049      	lsls	r1, r1, #1
      if(data[3] & 0x80)
 80014f0:	b276      	sxtb	r6, r6
      data[2] <<= 1;
 80014f2:	b2c9      	uxtb	r1, r1
      if(data[3] & 0x80)
 80014f4:	2e00      	cmp	r6, #0
 80014f6:	db06      	blt.n	8001506 <ST7789V_ReadID+0x5e>
      *Id = ((data[0] << 16) | (data[1] << 8) | data[2]);
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	0212      	lsls	r2, r2, #8
 80014fc:	431a      	orrs	r2, r3
 80014fe:	4311      	orrs	r1, r2
 8001500:	6029      	str	r1, [r5, #0]
}
 8001502:	b003      	add	sp, #12
 8001504:	bdf0      	pop	{r4, r5, r6, r7, pc}
        data[2] |= 1;
 8001506:	2401      	movs	r4, #1
 8001508:	4321      	orrs	r1, r4
 800150a:	e7f5      	b.n	80014f8 <ST7789V_ReadID+0x50>
        data[1] |= 1;
 800150c:	2401      	movs	r4, #1
      data[2] <<= 1;
 800150e:	0049      	lsls	r1, r1, #1
      if(data[3] & 0x80)
 8001510:	b276      	sxtb	r6, r6
        data[1] |= 1;
 8001512:	4322      	orrs	r2, r4
      data[2] <<= 1;
 8001514:	b2c9      	uxtb	r1, r1
      if(data[3] & 0x80)
 8001516:	2e00      	cmp	r6, #0
 8001518:	daee      	bge.n	80014f8 <ST7789V_ReadID+0x50>
 800151a:	e7f4      	b.n	8001506 <ST7789V_ReadID+0x5e>
        data[0] |= 1;
 800151c:	2401      	movs	r4, #1
      data[1] <<= 1;
 800151e:	0052      	lsls	r2, r2, #1
        data[0] |= 1;
 8001520:	4323      	orrs	r3, r4
      if(data[2] & 0x80)
 8001522:	b24c      	sxtb	r4, r1
      data[1] <<= 1;
 8001524:	b2d2      	uxtb	r2, r2
      if(data[2] & 0x80)
 8001526:	2c00      	cmp	r4, #0
 8001528:	dae1      	bge.n	80014ee <ST7789V_ReadID+0x46>
 800152a:	e7ef      	b.n	800150c <ST7789V_ReadID+0x64>
    ret = ST7789V_ERROR;
 800152c:	2001      	movs	r0, #1
 800152e:	4240      	negs	r0, r0
  return ret;
 8001530:	e7e7      	b.n	8001502 <ST7789V_ReadID+0x5a>
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	00858552 	.word	0x00858552

08001538 <ST7789V_Init>:
{
 8001538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153a:	4645      	mov	r5, r8
 800153c:	46de      	mov	lr, fp
 800153e:	4657      	mov	r7, sl
 8001540:	464e      	mov	r6, r9
 8001542:	b5e0      	push	{r5, r6, r7, lr}
 8001544:	0004      	movs	r4, r0
 8001546:	4688      	mov	r8, r1
 8001548:	b08b      	sub	sp, #44	; 0x2c
  if((pObj == NULL) || (pInitParams->Orientation > ST7789V_ORIENTATION_LANDSCAPE_ROT180))
 800154a:	2800      	cmp	r0, #0
 800154c:	d100      	bne.n	8001550 <ST7789V_Init+0x18>
 800154e:	e1ea      	b.n	8001926 <ST7789V_Init+0x3ee>
 8001550:	68cb      	ldr	r3, [r1, #12]
 8001552:	2b03      	cmp	r3, #3
 8001554:	d900      	bls.n	8001558 <ST7789V_Init+0x20>
 8001556:	e1e6      	b.n	8001926 <ST7789V_Init+0x3ee>
  else if (pObj->IsInitialized == 0)
 8001558:	2348      	movs	r3, #72	; 0x48
 800155a:	5cc3      	ldrb	r3, [r0, r3]
  int32_t ret = ST7789V_OK;
 800155c:	2000      	movs	r0, #0
  else if (pObj->IsInitialized == 0)
 800155e:	2b00      	cmp	r3, #0
 8001560:	d006      	beq.n	8001570 <ST7789V_Init+0x38>
}
 8001562:	b00b      	add	sp, #44	; 0x2c
 8001564:	bcf0      	pop	{r4, r5, r6, r7}
 8001566:	46bb      	mov	fp, r7
 8001568:	46b2      	mov	sl, r6
 800156a:	46a9      	mov	r9, r5
 800156c:	46a0      	mov	r8, r4
 800156e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    reg = ST7789V_SPLIN;
 8001570:	ab02      	add	r3, sp, #8
 8001572:	469c      	mov	ip, r3
 8001574:	250d      	movs	r5, #13
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001576:	0026      	movs	r6, r4
    reg = ST7789V_SPLIN;
 8001578:	2310      	movs	r3, #16
 800157a:	4465      	add	r5, ip
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800157c:	362c      	adds	r6, #44	; 0x2c
 800157e:	2201      	movs	r2, #1
 8001580:	0029      	movs	r1, r5
 8001582:	0030      	movs	r0, r6
    reg = ST7789V_SPLIN;
 8001584:	702b      	strb	r3, [r5, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001586:	f000 fa27 	bl	80019d8 <st7789v_write_reg>
  * @retval Component error status
  */
static int32_t ST7789V_Delay(ST7789V_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800158a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800158c:	4681      	mov	r9, r0
  tickstart = pObj->IO.GetTick();
 800158e:	4798      	blx	r3
 8001590:	0007      	movs	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8001592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001594:	4798      	blx	r3
 8001596:	1bc0      	subs	r0, r0, r7
 8001598:	2809      	cmp	r0, #9
 800159a:	d9fa      	bls.n	8001592 <ST7789V_Init+0x5a>
    reg = ST7789V_SWRESET;
 800159c:	2301      	movs	r3, #1
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800159e:	2201      	movs	r2, #1
 80015a0:	0029      	movs	r1, r5
 80015a2:	0030      	movs	r0, r6
    reg = ST7789V_SWRESET;
 80015a4:	702b      	strb	r3, [r5, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80015a6:	f000 fa17 	bl	80019d8 <st7789v_write_reg>
  tickstart = pObj->IO.GetTick();
 80015aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80015ac:	4481      	add	r9, r0
  tickstart = pObj->IO.GetTick();
 80015ae:	4798      	blx	r3
 80015b0:	0007      	movs	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80015b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015b4:	4798      	blx	r3
 80015b6:	1bc0      	subs	r0, r0, r7
 80015b8:	28c7      	cmp	r0, #199	; 0xc7
 80015ba:	d9fa      	bls.n	80015b2 <ST7789V_Init+0x7a>
    reg = ST7789V_SLEEP_OUT;
 80015bc:	2311      	movs	r3, #17
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80015be:	2201      	movs	r2, #1
 80015c0:	0029      	movs	r1, r5
 80015c2:	0030      	movs	r0, r6
    reg = ST7789V_SLEEP_OUT;
 80015c4:	702b      	strb	r3, [r5, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80015c6:	f000 fa07 	bl	80019d8 <st7789v_write_reg>
  tickstart = pObj->IO.GetTick();
 80015ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80015cc:	4481      	add	r9, r0
  tickstart = pObj->IO.GetTick();
 80015ce:	4798      	blx	r3
 80015d0:	0007      	movs	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80015d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015d4:	4798      	blx	r3
 80015d6:	1bc0      	subs	r0, r0, r7
 80015d8:	2877      	cmp	r0, #119	; 0x77
 80015da:	d9fa      	bls.n	80015d2 <ST7789V_Init+0x9a>
    reg = ST7789V_NORMAL_MODE_ON;
 80015dc:	2313      	movs	r3, #19
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80015de:	2201      	movs	r2, #1
 80015e0:	0029      	movs	r1, r5
 80015e2:	0030      	movs	r0, r6
    reg = ST7789V_NORMAL_MODE_ON;
 80015e4:	702b      	strb	r3, [r5, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80015e6:	f000 f9f7 	bl	80019d8 <st7789v_write_reg>
  tickstart = pObj->IO.GetTick();
 80015ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80015ec:	4481      	add	r9, r0
  tickstart = pObj->IO.GetTick();
 80015ee:	4798      	blx	r3
 80015f0:	0007      	movs	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80015f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015f4:	4798      	blx	r3
 80015f6:	1bc0      	subs	r0, r0, r7
 80015f8:	2863      	cmp	r0, #99	; 0x63
 80015fa:	d9fa      	bls.n	80015f2 <ST7789V_Init+0xba>
    reg = ST7789V_RAM_CTRL;
 80015fc:	23b0      	movs	r3, #176	; 0xb0
 80015fe:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x00;
 8001600:	2300      	movs	r3, #0
 8001602:	af06      	add	r7, sp, #24
 8001604:	703b      	strb	r3, [r7, #0]
    if(pInitParams->Endian == ST7789V_ENDIAN_LITTLE)
 8001606:	4643      	mov	r3, r8
 8001608:	781b      	ldrb	r3, [r3, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800160a:	0029      	movs	r1, r5
      parameter[1] = 0xF0;
 800160c:	3b01      	subs	r3, #1
 800160e:	425a      	negs	r2, r3
 8001610:	4153      	adcs	r3, r2
 8001612:	2208      	movs	r2, #8
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	33f0      	adds	r3, #240	; 0xf0
 8001618:	707b      	strb	r3, [r7, #1]
 800161a:	4692      	mov	sl, r2
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800161c:	0030      	movs	r0, r6
 800161e:	3a07      	subs	r2, #7
 8001620:	f000 f9da 	bl	80019d8 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8001624:	2202      	movs	r2, #2
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001626:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8001628:	0039      	movs	r1, r7
 800162a:	0030      	movs	r0, r6
 800162c:	f000 f9da 	bl	80019e4 <st7789v_send_data>
 8001630:	0003      	movs	r3, r0
 8001632:	444b      	add	r3, r9
 8001634:	9303      	str	r3, [sp, #12]
    if(pInitParams->SwapRB)
 8001636:	4643      	mov	r3, r8
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d000      	beq.n	8001640 <ST7789V_Init+0x108>
 800163e:	e108      	b.n	8001852 <ST7789V_Init+0x31a>
 8001640:	4bbc      	ldr	r3, [pc, #752]	; (8001934 <ST7789V_Init+0x3fc>)
 8001642:	4699      	mov	r9, r3
    ret += ST7789V_SetOrientation(pObj, pInitParams->Orientation);
 8001644:	4643      	mov	r3, r8
 8001646:	68db      	ldr	r3, [r3, #12]
  parameter = (uint8_t)OrientationTab[Orientation];
 8001648:	aa02      	add	r2, sp, #8
 800164a:	4694      	mov	ip, r2
    ret += ST7789V_SetOrientation(pObj, pInitParams->Orientation);
 800164c:	469a      	mov	sl, r3
  parameter = (uint8_t)OrientationTab[Orientation];
 800164e:	230e      	movs	r3, #14
 8001650:	4463      	add	r3, ip
 8001652:	469b      	mov	fp, r3
 8001654:	4653      	mov	r3, sl
 8001656:	464a      	mov	r2, r9
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	58d3      	ldr	r3, [r2, r3]
 800165c:	465a      	mov	r2, fp
  reg = ST7789V_MAC;
 800165e:	210f      	movs	r1, #15
  parameter = (uint8_t)OrientationTab[Orientation];
 8001660:	7013      	strb	r3, [r2, #0]
  reg = ST7789V_MAC;
 8001662:	2336      	movs	r3, #54	; 0x36
 8001664:	4461      	add	r1, ip
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001666:	2201      	movs	r2, #1
 8001668:	0030      	movs	r0, r6
  reg = ST7789V_MAC;
 800166a:	700b      	strb	r3, [r1, #0]
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800166c:	f000 f9b4 	bl	80019d8 <st7789v_write_reg>
  ret += st7789v_send_data(&pObj->Ctx, &parameter, 1);
 8001670:	2201      	movs	r2, #1
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001672:	4681      	mov	r9, r0
  ret += st7789v_send_data(&pObj->Ctx, &parameter, 1);
 8001674:	4659      	mov	r1, fp
 8001676:	0030      	movs	r0, r6
 8001678:	f000 f9b4 	bl	80019e4 <st7789v_send_data>
 800167c:	4448      	add	r0, r9
  if(ret == ST7789V_OK)
 800167e:	2800      	cmp	r0, #0
 8001680:	d000      	beq.n	8001684 <ST7789V_Init+0x14c>
 8001682:	e153      	b.n	800192c <ST7789V_Init+0x3f4>
    ST7789VCtx.Orientation = Orientation;
 8001684:	4653      	mov	r3, sl
 8001686:	4aac      	ldr	r2, [pc, #688]	; (8001938 <ST7789V_Init+0x400>)
 8001688:	6093      	str	r3, [r2, #8]
    switch (Orientation)
 800168a:	3b02      	subs	r3, #2
 800168c:	2b01      	cmp	r3, #1
 800168e:	d800      	bhi.n	8001692 <ST7789V_Init+0x15a>
 8001690:	e10a      	b.n	80018a8 <ST7789V_Init+0x370>
        ST7789VCtx.Height = ST7789V_HEIGHT;
 8001692:	23a0      	movs	r3, #160	; 0xa0
        ST7789VCtx.Width  = ST7789V_WIDTH;
 8001694:	21f0      	movs	r1, #240	; 0xf0
        ST7789VCtx.Height = ST7789V_HEIGHT;
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	c20a      	stmia	r2!, {r1, r3}
    pObj->XSize = ST7789VCtx.Width;
 800169a:	64e1      	str	r1, [r4, #76]	; 0x4c
    pObj->YSize = ST7789VCtx.Height;
 800169c:	6523      	str	r3, [r4, #80]	; 0x50
    ret += ST7789V_SetDisplayWindow(pObj, 0U, 0U, ST7789V_WIDTH, ST7789V_HEIGHT);
 800169e:	23a0      	movs	r3, #160	; 0xa0
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	0020      	movs	r0, r4
 80016aa:	3b50      	subs	r3, #80	; 0x50
 80016ac:	f7ff fea6 	bl	80013fc <ST7789V_SetDisplayWindow>
 80016b0:	9b03      	ldr	r3, [sp, #12]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80016b2:	2201      	movs	r2, #1
    ret += ST7789V_SetDisplayWindow(pObj, 0U, 0U, ST7789V_WIDTH, ST7789V_HEIGHT);
 80016b4:	4699      	mov	r9, r3
    reg = ST7789V_PIXEL_FORMAT;
 80016b6:	233a      	movs	r3, #58	; 0x3a
 80016b8:	702b      	strb	r3, [r5, #0]
    parameter[0] = (uint8_t) pInitParams->ColorCoding;
 80016ba:	4643      	mov	r3, r8
 80016bc:	689b      	ldr	r3, [r3, #8]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80016be:	0029      	movs	r1, r5
    parameter[0] = (uint8_t) pInitParams->ColorCoding;
 80016c0:	703b      	strb	r3, [r7, #0]
    ret += ST7789V_SetDisplayWindow(pObj, 0U, 0U, ST7789V_WIDTH, ST7789V_HEIGHT);
 80016c2:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80016c4:	0030      	movs	r0, r6
 80016c6:	f000 f987 	bl	80019d8 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 80016ca:	2201      	movs	r2, #1
 80016cc:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80016ce:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 80016d0:	0030      	movs	r0, r6
 80016d2:	f000 f987 	bl	80019e4 <st7789v_send_data>
    reg = ST7789V_FRAME_RATE_CTRL2;
 80016d6:	23c6      	movs	r3, #198	; 0xc6
 80016d8:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x0F; /* Default is 60 Hz */
 80016da:	3bb7      	subs	r3, #183	; 0xb7
 80016dc:	703b      	strb	r3, [r7, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80016de:	2201      	movs	r2, #1
 80016e0:	0029      	movs	r1, r5
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 80016e2:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80016e4:	0030      	movs	r0, r6
 80016e6:	f000 f977 	bl	80019d8 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 80016ea:	2201      	movs	r2, #1
 80016ec:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80016ee:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 80016f0:	0030      	movs	r0, r6
 80016f2:	f000 f977 	bl	80019e4 <st7789v_send_data>
    reg = ST7789V_PORCH_CTRL;
 80016f6:	23b2      	movs	r3, #178	; 0xb2
 80016f8:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x0C;
 80016fa:	4b90      	ldr	r3, [pc, #576]	; (800193c <ST7789V_Init+0x404>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80016fc:	2201      	movs	r2, #1
    parameter[0] = 0x0C;
 80016fe:	9306      	str	r3, [sp, #24]
    parameter[4] = 0x33;
 8001700:	2333      	movs	r3, #51	; 0x33
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001702:	0029      	movs	r1, r5
    parameter[4] = 0x33;
 8001704:	713b      	strb	r3, [r7, #4]
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8001706:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001708:	0030      	movs	r0, r6
 800170a:	f000 f965 	bl	80019d8 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 5);
 800170e:	2205      	movs	r2, #5
 8001710:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001712:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 5);
 8001714:	0030      	movs	r0, r6
 8001716:	f000 f965 	bl	80019e4 <st7789v_send_data>
    reg = ST7789V_GATE_CTRL;
 800171a:	23b7      	movs	r3, #183	; 0xb7
 800171c:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x35;
 800171e:	3b82      	subs	r3, #130	; 0x82
 8001720:	703b      	strb	r3, [r7, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001722:	2201      	movs	r2, #1
 8001724:	0029      	movs	r1, r5
    ret += st7789v_send_data(&pObj->Ctx, parameter, 5);
 8001726:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001728:	0030      	movs	r0, r6
    parameter[0] = 0x35;
 800172a:	469a      	mov	sl, r3
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800172c:	f000 f954 	bl	80019d8 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8001730:	2201      	movs	r2, #1
 8001732:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001734:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8001736:	0030      	movs	r0, r6
 8001738:	f000 f954 	bl	80019e4 <st7789v_send_data>
    reg = ST7789V_VCOM_SET;
 800173c:	23bb      	movs	r3, #187	; 0xbb
 800173e:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x1F;
 8001740:	3b9c      	subs	r3, #156	; 0x9c
 8001742:	703b      	strb	r3, [r7, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001744:	2201      	movs	r2, #1
 8001746:	0029      	movs	r1, r5
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8001748:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800174a:	0030      	movs	r0, r6
 800174c:	f000 f944 	bl	80019d8 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8001750:	2201      	movs	r2, #1
 8001752:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001754:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8001756:	0030      	movs	r0, r6
 8001758:	f000 f944 	bl	80019e4 <st7789v_send_data>
    reg = ST7789V_LCM_CTRL;
 800175c:	23c0      	movs	r3, #192	; 0xc0
 800175e:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x2C;
 8001760:	3b94      	subs	r3, #148	; 0x94
 8001762:	703b      	strb	r3, [r7, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001764:	2201      	movs	r2, #1
 8001766:	0029      	movs	r1, r5
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8001768:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800176a:	0030      	movs	r0, r6
 800176c:	f000 f934 	bl	80019d8 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8001770:	2201      	movs	r2, #1
 8001772:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001774:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8001776:	0030      	movs	r0, r6
 8001778:	f000 f934 	bl	80019e4 <st7789v_send_data>
    reg = ST7789V_VDV_VRH_EN;
 800177c:	23c2      	movs	r3, #194	; 0xc2
 800177e:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x01;
 8001780:	4b6f      	ldr	r3, [pc, #444]	; (8001940 <ST7789V_Init+0x408>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001782:	2201      	movs	r2, #1
    parameter[0] = 0x01;
 8001784:	803b      	strh	r3, [r7, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001786:	0029      	movs	r1, r5
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8001788:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800178a:	0030      	movs	r0, r6
 800178c:	f000 f924 	bl	80019d8 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8001790:	2202      	movs	r2, #2
 8001792:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001794:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8001796:	0030      	movs	r0, r6
 8001798:	f000 f924 	bl	80019e4 <st7789v_send_data>
    reg = ST7789V_VDV_SET;
 800179c:	23c4      	movs	r3, #196	; 0xc4
 800179e:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x20;
 80017a0:	3ba4      	subs	r3, #164	; 0xa4
 80017a2:	703b      	strb	r3, [r7, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80017a4:	2201      	movs	r2, #1
 80017a6:	0029      	movs	r1, r5
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 80017a8:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80017aa:	0030      	movs	r0, r6
 80017ac:	f000 f914 	bl	80019d8 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 80017b0:	2201      	movs	r2, #1
 80017b2:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80017b4:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 80017b6:	0030      	movs	r0, r6
 80017b8:	f000 f914 	bl	80019e4 <st7789v_send_data>
    reg = ST7789V_POWER_CTRL;
 80017bc:	23d0      	movs	r3, #208	; 0xd0
 80017be:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0xA4;
 80017c0:	4b60      	ldr	r3, [pc, #384]	; (8001944 <ST7789V_Init+0x40c>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80017c2:	2201      	movs	r2, #1
    parameter[0] = 0xA4;
 80017c4:	803b      	strh	r3, [r7, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80017c6:	0029      	movs	r1, r5
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 80017c8:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80017ca:	0030      	movs	r0, r6
 80017cc:	f000 f904 	bl	80019d8 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 80017d0:	2202      	movs	r2, #2
 80017d2:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80017d4:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 80017d6:	0030      	movs	r0, r6
 80017d8:	f000 f904 	bl	80019e4 <st7789v_send_data>
    reg = ST7789V_PV_GAMMA_CTRL;
 80017dc:	23e0      	movs	r3, #224	; 0xe0
 80017de:	702b      	strb	r3, [r5, #0]
    parameter[0]  = 0xD0;
 80017e0:	4b59      	ldr	r3, [pc, #356]	; (8001948 <ST7789V_Init+0x410>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80017e2:	2201      	movs	r2, #1
    parameter[0]  = 0xD0;
 80017e4:	9306      	str	r3, [sp, #24]
 80017e6:	4b59      	ldr	r3, [pc, #356]	; (800194c <ST7789V_Init+0x414>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80017e8:	0029      	movs	r1, r5
    parameter[0]  = 0xD0;
 80017ea:	9307      	str	r3, [sp, #28]
 80017ec:	4b58      	ldr	r3, [pc, #352]	; (8001950 <ST7789V_Init+0x418>)
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 80017ee:	4481      	add	r9, r0
    parameter[0]  = 0xD0;
 80017f0:	9308      	str	r3, [sp, #32]
    parameter[12] = 0x29;
 80017f2:	4b58      	ldr	r3, [pc, #352]	; (8001954 <ST7789V_Init+0x41c>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80017f4:	0030      	movs	r0, r6
    parameter[12] = 0x29;
 80017f6:	81bb      	strh	r3, [r7, #12]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80017f8:	f000 f8ee 	bl	80019d8 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 14);
 80017fc:	220e      	movs	r2, #14
 80017fe:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001800:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 14);
 8001802:	0030      	movs	r0, r6
 8001804:	f000 f8ee 	bl	80019e4 <st7789v_send_data>
    reg = ST7789V_NV_GAMMA_CTRL;
 8001808:	23e1      	movs	r3, #225	; 0xe1
 800180a:	702b      	strb	r3, [r5, #0]
    parameter[0]  = 0xD0;
 800180c:	4b52      	ldr	r3, [pc, #328]	; (8001958 <ST7789V_Init+0x420>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800180e:	2201      	movs	r2, #1
    parameter[0]  = 0xD0;
 8001810:	9306      	str	r3, [sp, #24]
 8001812:	4b52      	ldr	r3, [pc, #328]	; (800195c <ST7789V_Init+0x424>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001814:	0029      	movs	r1, r5
    parameter[0]  = 0xD0;
 8001816:	9307      	str	r3, [sp, #28]
 8001818:	4b51      	ldr	r3, [pc, #324]	; (8001960 <ST7789V_Init+0x428>)
    ret += st7789v_send_data(&pObj->Ctx, parameter, 14);
 800181a:	4481      	add	r9, r0
    parameter[0]  = 0xD0;
 800181c:	9308      	str	r3, [sp, #32]
    parameter[12] = 0x2F;
 800181e:	4b51      	ldr	r3, [pc, #324]	; (8001964 <ST7789V_Init+0x42c>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001820:	0030      	movs	r0, r6
    parameter[12] = 0x2F;
 8001822:	81bb      	strh	r3, [r7, #12]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001824:	f000 f8d8 	bl	80019d8 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 14);
 8001828:	220e      	movs	r2, #14
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800182a:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 14);
 800182c:	0039      	movs	r1, r7
 800182e:	0030      	movs	r0, r6
 8001830:	f000 f8d8 	bl	80019e4 <st7789v_send_data>
    if(pInitParams->TEMode == ST7789V_TE_MODE_1)
 8001834:	4643      	mov	r3, r8
 8001836:	7d1b      	ldrb	r3, [r3, #20]
    ret += st7789v_send_data(&pObj->Ctx, parameter, 14);
 8001838:	4481      	add	r9, r0
    if(pInitParams->TEMode == ST7789V_TE_MODE_1)
 800183a:	2b01      	cmp	r3, #1
 800183c:	d038      	beq.n	80018b0 <ST7789V_Init+0x378>
    else if(pInitParams->TEMode == ST7789V_TE_MODE_2)
 800183e:	2b02      	cmp	r3, #2
 8001840:	d05d      	beq.n	80018fe <ST7789V_Init+0x3c6>
    pObj->IsInitialized = 1U;
 8001842:	2348      	movs	r3, #72	; 0x48
 8001844:	2201      	movs	r2, #1
  if(ret != ST7789V_OK)
 8001846:	4648      	mov	r0, r9
    pObj->IsInitialized = 1U;
 8001848:	54e2      	strb	r2, [r4, r3]
  if(ret != ST7789V_OK)
 800184a:	1e43      	subs	r3, r0, #1
 800184c:	4198      	sbcs	r0, r3
 800184e:	4240      	negs	r0, r0
  return ret;
 8001850:	e687      	b.n	8001562 <ST7789V_Init+0x2a>
        OrientationTab[i] |= 0x08;
 8001852:	4b38      	ldr	r3, [pc, #224]	; (8001934 <ST7789V_Init+0x3fc>)
 8001854:	4652      	mov	r2, sl
 8001856:	4699      	mov	r9, r3
 8001858:	681b      	ldr	r3, [r3, #0]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800185a:	0029      	movs	r1, r5
        OrientationTab[i] |= 0x08;
 800185c:	4313      	orrs	r3, r2
 800185e:	464a      	mov	r2, r9
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	6853      	ldr	r3, [r2, #4]
 8001864:	4652      	mov	r2, sl
 8001866:	4313      	orrs	r3, r2
 8001868:	464a      	mov	r2, r9
 800186a:	6053      	str	r3, [r2, #4]
 800186c:	6893      	ldr	r3, [r2, #8]
 800186e:	4652      	mov	r2, sl
 8001870:	4313      	orrs	r3, r2
 8001872:	464a      	mov	r2, r9
 8001874:	6093      	str	r3, [r2, #8]
 8001876:	4653      	mov	r3, sl
 8001878:	68d2      	ldr	r2, [r2, #12]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800187a:	0030      	movs	r0, r6
        OrientationTab[i] |= 0x08;
 800187c:	4313      	orrs	r3, r2
 800187e:	464a      	mov	r2, r9
 8001880:	60d3      	str	r3, [r2, #12]
      reg = ST7789V_LCM_CTRL;
 8001882:	23c0      	movs	r3, #192	; 0xc0
 8001884:	702b      	strb	r3, [r5, #0]
      parameter[0] = 0x0C;
 8001886:	3bb4      	subs	r3, #180	; 0xb4
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001888:	2201      	movs	r2, #1
      parameter[0] = 0x0C;
 800188a:	703b      	strb	r3, [r7, #0]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800188c:	f000 f8a4 	bl	80019d8 <st7789v_write_reg>
 8001890:	9b03      	ldr	r3, [sp, #12]
      ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8001892:	2201      	movs	r2, #1
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001894:	469a      	mov	sl, r3
      ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8001896:	0039      	movs	r1, r7
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001898:	4482      	add	sl, r0
      ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 800189a:	0030      	movs	r0, r6
 800189c:	f000 f8a2 	bl	80019e4 <st7789v_send_data>
 80018a0:	0003      	movs	r3, r0
 80018a2:	4453      	add	r3, sl
 80018a4:	9303      	str	r3, [sp, #12]
 80018a6:	e6cd      	b.n	8001644 <ST7789V_Init+0x10c>
        ST7789VCtx.Width  = ST7789V_HEIGHT;
 80018a8:	21a0      	movs	r1, #160	; 0xa0
        ST7789VCtx.Height = ST7789V_WIDTH;
 80018aa:	23f0      	movs	r3, #240	; 0xf0
        ST7789VCtx.Width  = ST7789V_HEIGHT;
 80018ac:	0049      	lsls	r1, r1, #1
 80018ae:	e6f3      	b.n	8001698 <ST7789V_Init+0x160>
      reg = ST7789V_SET_TEAR_SCANLINE;
 80018b0:	3343      	adds	r3, #67	; 0x43
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	0029      	movs	r1, r5
 80018b6:	0030      	movs	r0, r6
      reg = ST7789V_SET_TEAR_SCANLINE;
 80018b8:	702b      	strb	r3, [r5, #0]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80018ba:	f000 f88d 	bl	80019d8 <st7789v_write_reg>
      parameter[0] = (pInitParams->TEScanline & 0x100);
 80018be:	2300      	movs	r3, #0
 80018c0:	469b      	mov	fp, r3
 80018c2:	703b      	strb	r3, [r7, #0]
      parameter[1] = (pInitParams->TEScanline & 0x0FF);
 80018c4:	4643      	mov	r3, r8
 80018c6:	691b      	ldr	r3, [r3, #16]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80018c8:	4481      	add	r9, r0
      parameter[1] = (pInitParams->TEScanline & 0x0FF);
 80018ca:	707b      	strb	r3, [r7, #1]
      ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 80018cc:	2202      	movs	r2, #2
 80018ce:	0039      	movs	r1, r7
 80018d0:	0030      	movs	r0, r6
 80018d2:	f000 f887 	bl	80019e4 <st7789v_send_data>
      reg = ST7789V_TEON;
 80018d6:	4653      	mov	r3, sl
 80018d8:	702b      	strb	r3, [r5, #0]
      parameter[0] = 0x00; /* VSYNC Only */
 80018da:	465b      	mov	r3, fp
      ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 80018dc:	4481      	add	r9, r0
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80018de:	0029      	movs	r1, r5
 80018e0:	2201      	movs	r2, #1
      parameter[0] = 0x01; /* VSYNC + HSYNC */
 80018e2:	703b      	strb	r3, [r7, #0]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80018e4:	0030      	movs	r0, r6
 80018e6:	f000 f877 	bl	80019d8 <st7789v_write_reg>
 80018ea:	4448      	add	r0, r9
 80018ec:	0005      	movs	r5, r0
      ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 80018ee:	2201      	movs	r2, #1
 80018f0:	0039      	movs	r1, r7
 80018f2:	0030      	movs	r0, r6
 80018f4:	f000 f876 	bl	80019e4 <st7789v_send_data>
 80018f8:	46a9      	mov	r9, r5
 80018fa:	4481      	add	r9, r0
 80018fc:	e7a1      	b.n	8001842 <ST7789V_Init+0x30a>
      reg = ST7789V_SET_TEAR_SCANLINE;
 80018fe:	3342      	adds	r3, #66	; 0x42
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001900:	2201      	movs	r2, #1
 8001902:	0029      	movs	r1, r5
 8001904:	0030      	movs	r0, r6
      reg = ST7789V_SET_TEAR_SCANLINE;
 8001906:	702b      	strb	r3, [r5, #0]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8001908:	f000 f866 	bl	80019d8 <st7789v_write_reg>
      parameter[0] = 0;
 800190c:	2300      	movs	r3, #0
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800190e:	4481      	add	r9, r0
      parameter[0] = 0;
 8001910:	803b      	strh	r3, [r7, #0]
      ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8001912:	2202      	movs	r2, #2
 8001914:	0039      	movs	r1, r7
 8001916:	0030      	movs	r0, r6
 8001918:	f000 f864 	bl	80019e4 <st7789v_send_data>
      reg = ST7789V_TEON;
 800191c:	4653      	mov	r3, sl
      ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 800191e:	4481      	add	r9, r0
      reg = ST7789V_TEON;
 8001920:	702b      	strb	r3, [r5, #0]
      parameter[0] = 0x01; /* VSYNC + HSYNC */
 8001922:	2301      	movs	r3, #1
 8001924:	e7db      	b.n	80018de <ST7789V_Init+0x3a6>
    ret = ST7789V_ERROR;
 8001926:	2001      	movs	r0, #1
 8001928:	4240      	negs	r0, r0
 800192a:	e61a      	b.n	8001562 <ST7789V_Init+0x2a>
    ret += ST7789V_SetOrientation(pObj, pInitParams->Orientation);
 800192c:	9b03      	ldr	r3, [sp, #12]
 800192e:	3b01      	subs	r3, #1
 8001930:	9303      	str	r3, [sp, #12]
 8001932:	e6b4      	b.n	800169e <ST7789V_Init+0x166>
 8001934:	20000004 	.word	0x20000004
 8001938:	200003e4 	.word	0x200003e4
 800193c:	33000c0c 	.word	0x33000c0c
 8001940:	ffffc301 	.word	0xffffc301
 8001944:	ffffa1a4 	.word	0xffffa1a4
 8001948:	081108d0 	.word	0x081108d0
 800194c:	3339150c 	.word	0x3339150c
 8001950:	14133650 	.word	0x14133650
 8001954:	00002d29 	.word	0x00002d29
 8001958:	081008d0 	.word	0x081008d0
 800195c:	44390606 	.word	0x44390606
 8001960:	14160b51 	.word	0x14160b51
 8001964:	0000312f 	.word	0x0000312f

08001968 <ST7789V_RegisterBusIO>:
{
 8001968:	b510      	push	{r4, lr}
  if(pObj == NULL)
 800196a:	2800      	cmp	r0, #0
 800196c:	d024      	beq.n	80019b8 <ST7789V_RegisterBusIO+0x50>
    pObj->IO.Init         = pIO->Init;
 800196e:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit       = pIO->DeInit;
 8001970:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init         = pIO->Init;
 8001972:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit       = pIO->DeInit;
 8001974:	6042      	str	r2, [r0, #4]
    pObj->IO.Address      = pIO->Address;
 8001976:	890a      	ldrh	r2, [r1, #8]
 8001978:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg     = pIO->WriteReg;
 800197a:	68ca      	ldr	r2, [r1, #12]
 800197c:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg      = pIO->ReadReg;
 800197e:	690a      	ldr	r2, [r1, #16]
 8001980:	6102      	str	r2, [r0, #16]
    pObj->IO.SendData     = pIO->SendData;
 8001982:	694a      	ldr	r2, [r1, #20]
 8001984:	6142      	str	r2, [r0, #20]
    pObj->IO.SendDataDMA  = pIO->SendDataDMA;
 8001986:	698a      	ldr	r2, [r1, #24]
 8001988:	6182      	str	r2, [r0, #24]
    pObj->IO.RecvData     = pIO->RecvData;
 800198a:	69ca      	ldr	r2, [r1, #28]
 800198c:	61c2      	str	r2, [r0, #28]
    pObj->IO.RecvDataDMA  = pIO->RecvDataDMA;
 800198e:	6a0a      	ldr	r2, [r1, #32]
 8001990:	6202      	str	r2, [r0, #32]
    pObj->IO.GetTick      = pIO->GetTick;
 8001992:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001994:	6242      	str	r2, [r0, #36]	; 0x24
    pObj->Ctx.ReadReg     = ST7789V_ReadRegWrap;
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <ST7789V_RegisterBusIO+0x58>)
 8001998:	6302      	str	r2, [r0, #48]	; 0x30
    pObj->Ctx.WriteReg    = ST7789V_WriteRegWrap;
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <ST7789V_RegisterBusIO+0x5c>)
 800199c:	62c2      	str	r2, [r0, #44]	; 0x2c
    pObj->Ctx.SendData    = ST7789V_SendDataWrap;
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <ST7789V_RegisterBusIO+0x60>)
 80019a0:	6342      	str	r2, [r0, #52]	; 0x34
    pObj->Ctx.SendDataDMA = ST7789V_SendDataDMAWrap;
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <ST7789V_RegisterBusIO+0x64>)
 80019a4:	6382      	str	r2, [r0, #56]	; 0x38
    pObj->Ctx.RecvData    = ST7789V_RecvDataWrap;
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <ST7789V_RegisterBusIO+0x68>)
 80019a8:	63c2      	str	r2, [r0, #60]	; 0x3c
    pObj->Ctx.RecvDataDMA = ST7789V_RecvDataDMAWrap;
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <ST7789V_RegisterBusIO+0x6c>)
 80019ac:	6402      	str	r2, [r0, #64]	; 0x40
    pObj->Ctx.handle      = pObj;
 80019ae:	6440      	str	r0, [r0, #68]	; 0x44
    if(pObj->IO.Init != NULL)
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <ST7789V_RegisterBusIO+0x50>
      ret = pObj->IO.Init();
 80019b4:	4798      	blx	r3
}
 80019b6:	bd10      	pop	{r4, pc}
    ret = ST7789V_ERROR;
 80019b8:	2001      	movs	r0, #1
 80019ba:	4240      	negs	r0, r0
 80019bc:	e7fb      	b.n	80019b6 <ST7789V_RegisterBusIO+0x4e>
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	080012f5 	.word	0x080012f5
 80019c4:	08001305 	.word	0x08001305
 80019c8:	08001315 	.word	0x08001315
 80019cc:	08001325 	.word	0x08001325
 80019d0:	08001335 	.word	0x08001335
 80019d4:	08001345 	.word	0x08001345

080019d8 <st7789v_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write  
  * @retval Component status
  */
int32_t st7789v_write_reg(st7789v_ctx_t *ctx, uint8_t* reg, uint32_t length)
{
 80019d8:	0003      	movs	r3, r0
 80019da:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, reg, length);
 80019dc:	6980      	ldr	r0, [r0, #24]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4798      	blx	r3
}
 80019e2:	bd10      	pop	{r4, pc}

080019e4 <st7789v_send_data>:
  * @param  pdata  data to write
  * @param  Length Length of data to write
  * @retval Component status
  */
int32_t st7789v_send_data(st7789v_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 80019e4:	0003      	movs	r3, r0
 80019e6:	b510      	push	{r4, lr}
  return ctx->SendData(ctx->handle, pdata, length);
 80019e8:	6980      	ldr	r0, [r0, #24]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4798      	blx	r3
}
 80019ee:	bd10      	pop	{r4, pc}

080019f0 <st7789v_recv_data>:
  * @param  pdata  data to read
  * @param  Length Length of data to read
  * @retval Component status
  */
int32_t st7789v_recv_data(st7789v_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 80019f0:	0003      	movs	r3, r0
 80019f2:	b510      	push	{r4, lr}
  return ctx->RecvData(ctx->handle, pdata, length);
 80019f4:	6980      	ldr	r0, [r0, #24]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	4798      	blx	r3
}
 80019fa:	bd10      	pop	{r4, pc}

080019fc <MEM_IO_SendData>:
  * @param  Size length of data to write to the the specified address memory
  * @retval BSP status
  */
static int32_t MEM_IO_SendData(uint8_t *pData, uint32_t Address, uint32_t Size)
{
  return BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80019fc:	200b      	movs	r0, #11
}
 80019fe:	4240      	negs	r0, r0
 8001a00:	4770      	bx	lr
 8001a02:	46c0      	nop			; (mov r8, r8)

08001a04 <MEM_IO_RecvDataDMA>:
  * @retval BSP status
  */
static int32_t MEM_IO_RecvDataDMA(uint8_t *pData, uint32_t Address, uint32_t Size)
{
  int32_t ret = BSP_ERROR_NONE;
  uint8_t cmd[4] = { MEM_READ_CMD
 8001a04:	2303      	movs	r3, #3
{
 8001a06:	b530      	push	{r4, r5, lr}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	0005      	movs	r5, r0
  uint8_t cmd[4] = { MEM_READ_CMD
 8001a0c:	a801      	add	r0, sp, #4
 8001a0e:	7003      	strb	r3, [r0, #0]
                   , ((Address >> 16) & 0xFF)
 8001a10:	0c0b      	lsrs	r3, r1, #16
  uint8_t cmd[4] = { MEM_READ_CMD
 8001a12:	7043      	strb	r3, [r0, #1]
                   , ((Address >>  8) & 0xFF)
 8001a14:	0a0b      	lsrs	r3, r1, #8
  uint8_t cmd[4] = { MEM_READ_CMD
 8001a16:	7083      	strb	r3, [r0, #2]
{
 8001a18:	0014      	movs	r4, r2
                   , (Address & 0xFF)
                   };

  /* Reset the nCS pin */
  MEM_CS_LOW();
 8001a1a:	23a0      	movs	r3, #160	; 0xa0
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	05db      	lsls	r3, r3, #23
 8001a20:	0052      	lsls	r2, r2, #1
  uint8_t cmd[4] = { MEM_READ_CMD
 8001a22:	70c1      	strb	r1, [r0, #3]

  ret = MEM_SPI_Send(cmd, 4);
 8001a24:	2104      	movs	r1, #4
  MEM_CS_LOW();
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
  ret = MEM_SPI_Send(cmd, 4);
 8001a28:	f7ff f880 	bl	8000b2c <BSP_SPI2_Send>
  if(ret == BSP_ERROR_NONE)
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d001      	beq.n	8001a34 <MEM_IO_RecvDataDMA+0x30>
  {
    ret = MEM_SPI_Recv_DMA(pData, Size);
  }

  return ret;
}
 8001a30:	b003      	add	sp, #12
 8001a32:	bd30      	pop	{r4, r5, pc}
    ret = MEM_SPI_Recv_DMA(pData, Size);
 8001a34:	0028      	movs	r0, r5
 8001a36:	b2a1      	uxth	r1, r4
 8001a38:	f7ff f89c 	bl	8000b74 <BSP_SPI2_Recv_DMA>
  return ret;
 8001a3c:	e7f8      	b.n	8001a30 <MEM_IO_RecvDataDMA+0x2c>
 8001a3e:	46c0      	nop			; (mov r8, r8)

08001a40 <MEM_IO_RecvData>:
  uint8_t cmd[4] = { MEM_READ_CMD
 8001a40:	2303      	movs	r3, #3
{
 8001a42:	b530      	push	{r4, r5, lr}
 8001a44:	b083      	sub	sp, #12
 8001a46:	0005      	movs	r5, r0
  uint8_t cmd[4] = { MEM_READ_CMD
 8001a48:	a801      	add	r0, sp, #4
 8001a4a:	7003      	strb	r3, [r0, #0]
                   , ((Address >> 16) & 0xFF)
 8001a4c:	0c0b      	lsrs	r3, r1, #16
  uint8_t cmd[4] = { MEM_READ_CMD
 8001a4e:	7043      	strb	r3, [r0, #1]
                   , ((Address >>  8) & 0xFF)
 8001a50:	0a0b      	lsrs	r3, r1, #8
  uint8_t cmd[4] = { MEM_READ_CMD
 8001a52:	7083      	strb	r3, [r0, #2]
{
 8001a54:	0014      	movs	r4, r2
  MEM_CS_LOW();
 8001a56:	23a0      	movs	r3, #160	; 0xa0
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	05db      	lsls	r3, r3, #23
 8001a5c:	0052      	lsls	r2, r2, #1
  uint8_t cmd[4] = { MEM_READ_CMD
 8001a5e:	70c1      	strb	r1, [r0, #3]
  ret = MEM_SPI_Send(cmd, 4);
 8001a60:	2104      	movs	r1, #4
  MEM_CS_LOW();
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
  ret = MEM_SPI_Send(cmd, 4);
 8001a64:	f7ff f862 	bl	8000b2c <BSP_SPI2_Send>
  if(ret == BSP_ERROR_NONE)
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d006      	beq.n	8001a7a <MEM_IO_RecvData+0x3a>
  MEM_CS_HIGH();
 8001a6c:	23a0      	movs	r3, #160	; 0xa0
 8001a6e:	2280      	movs	r2, #128	; 0x80
 8001a70:	05db      	lsls	r3, r3, #23
 8001a72:	0052      	lsls	r2, r2, #1
 8001a74:	619a      	str	r2, [r3, #24]
}
 8001a76:	b003      	add	sp, #12
 8001a78:	bd30      	pop	{r4, r5, pc}
    ret = MEM_SPI_Recv(pData, Size);
 8001a7a:	0028      	movs	r0, r5
 8001a7c:	b2a1      	uxth	r1, r4
 8001a7e:	f7ff f867 	bl	8000b50 <BSP_SPI2_Recv>
 8001a82:	e7f3      	b.n	8001a6c <MEM_IO_RecvData+0x2c>

08001a84 <MEM_IO_DeInit>:
{
 8001a84:	b510      	push	{r4, lr}
  ret = MEM_SPI_DeInit();
 8001a86:	f7ff f83b 	bl	8000b00 <BSP_SPI2_DeInit>
}
 8001a8a:	bd10      	pop	{r4, pc}

08001a8c <MEM_IO_Init>:
{
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8e:	b085      	sub	sp, #20
  ret = MEM_SPI_Init();
 8001a90:	f7ff f906 	bl	8000ca0 <BSP_SPI2_Init>
 8001a94:	1e04      	subs	r4, r0, #0
  if(ret == BSP_ERROR_NONE)
 8001a96:	d002      	beq.n	8001a9e <MEM_IO_Init+0x12>
}
 8001a98:	0020      	movs	r0, r4
 8001a9a:	b005      	add	sp, #20
 8001a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MEM_CS_LOW();
 8001a9e:	25a0      	movs	r5, #160	; 0xa0
 8001aa0:	2680      	movs	r6, #128	; 0x80
  cmd = MX25L6433F_RESET_ENABLE_CMD;
 8001aa2:	2366      	movs	r3, #102	; 0x66
  MEM_CS_LOW();
 8001aa4:	05ed      	lsls	r5, r5, #23
 8001aa6:	0076      	lsls	r6, r6, #1
  cmd = MX25L6433F_RESET_ENABLE_CMD;
 8001aa8:	aa02      	add	r2, sp, #8
  MEM_CS_LOW();
 8001aaa:	62ae      	str	r6, [r5, #40]	; 0x28
  ret = MEM_SPI_Send( &cmd, 1 );
 8001aac:	2101      	movs	r1, #1
  cmd = MX25L6433F_RESET_ENABLE_CMD;
 8001aae:	7113      	strb	r3, [r2, #4]
  ret = MEM_SPI_Send( &cmd, 1 );
 8001ab0:	a803      	add	r0, sp, #12
 8001ab2:	f7ff f83b 	bl	8000b2c <BSP_SPI2_Send>
  MEM_CS_HIGH();
 8001ab6:	61ae      	str	r6, [r5, #24]
  ret = MEM_SPI_Send( &cmd, 1 );
 8001ab8:	1e04      	subs	r4, r0, #0
  if(ret == BSP_ERROR_NONE)
 8001aba:	d1ed      	bne.n	8001a98 <MEM_IO_Init+0xc>
    cmd = MX25L6433F_RESET_MEMORY_CMD;
 8001abc:	2399      	movs	r3, #153	; 0x99
 8001abe:	aa02      	add	r2, sp, #8
    MEM_CS_LOW();
 8001ac0:	62ae      	str	r6, [r5, #40]	; 0x28
    ret = MEM_SPI_Send( &cmd, 1 );
 8001ac2:	2101      	movs	r1, #1
    cmd = MX25L6433F_RESET_MEMORY_CMD;
 8001ac4:	7113      	strb	r3, [r2, #4]
    ret = MEM_SPI_Send( &cmd, 1 );
 8001ac6:	a803      	add	r0, sp, #12
 8001ac8:	f7ff f830 	bl	8000b2c <BSP_SPI2_Send>
    MEM_CS_HIGH();
 8001acc:	61ae      	str	r6, [r5, #24]
    ret = MEM_SPI_Send( &cmd, 1 );
 8001ace:	0004      	movs	r4, r0
    HAL_Delay(20);
 8001ad0:	2014      	movs	r0, #20
 8001ad2:	f000 f96f 	bl	8001db4 <HAL_Delay>
  if(ret == BSP_ERROR_NONE)
 8001ad6:	2c00      	cmp	r4, #0
 8001ad8:	d1de      	bne.n	8001a98 <MEM_IO_Init+0xc>
    MemCompObj = &ObjCtx;
 8001ada:	4f10      	ldr	r7, [pc, #64]	; (8001b1c <MEM_IO_Init+0x90>)
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <MEM_IO_Init+0x94>)
    MemDrv = (MEM_Drv_t *)&MX25L6433F_MEM_Driver;
 8001ade:	4a11      	ldr	r2, [pc, #68]	; (8001b24 <MEM_IO_Init+0x98>)
    MemCompObj = &ObjCtx;
 8001ae0:	601f      	str	r7, [r3, #0]
    MemDrv = (MEM_Drv_t *)&MX25L6433F_MEM_Driver;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MEM_IO_Init+0x9c>)
    if(MemDrv->Init(MemCompObj) < 0)
 8001ae4:	0038      	movs	r0, r7
    MemDrv = (MEM_Drv_t *)&MX25L6433F_MEM_Driver;
 8001ae6:	6013      	str	r3, [r2, #0]
    ObjCtx.IsInitialized = 0;
 8001ae8:	2220      	movs	r2, #32
    if(MemDrv->Init(MemCompObj) < 0)
 8001aea:	681b      	ldr	r3, [r3, #0]
    ObjCtx.IsInitialized = 0;
 8001aec:	54bc      	strb	r4, [r7, r2]
    if(MemDrv->Init(MemCompObj) < 0)
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	4798      	blx	r3
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001af2:	3c05      	subs	r4, #5
    if(MemDrv->Init(MemCompObj) < 0)
 8001af4:	2800      	cmp	r0, #0
 8001af6:	dbcf      	blt.n	8001a98 <MEM_IO_Init+0xc>
    HAL_SPI_RegisterCallback((SPI_HandleTypeDef *)ObjCtx.handle, HAL_SPI_RX_COMPLETE_CB_ID, SPI_RxCpltCallback);
 8001af8:	2101      	movs	r1, #1
 8001afa:	4a0c      	ldr	r2, [pc, #48]	; (8001b2c <MEM_IO_Init+0xa0>)
 8001afc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001afe:	f001 fd89 	bl	8003614 <HAL_SPI_RegisterCallback>
  uint8_t cmd[2] = { MEM_SET_BURST_LENGTH_CMD
 8001b02:	23f0      	movs	r3, #240	; 0xf0
 8001b04:	aa02      	add	r2, sp, #8
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	8093      	strh	r3, [r2, #4]
  ret = MEM_SPI_Send( cmd, 2 );
 8001b0a:	2102      	movs	r1, #2
  MEM_CS_LOW();
 8001b0c:	62ae      	str	r6, [r5, #40]	; 0x28
  ret = MEM_SPI_Send( cmd, 2 );
 8001b0e:	a803      	add	r0, sp, #12
 8001b10:	f7ff f80c 	bl	8000b2c <BSP_SPI2_Send>
  MEM_CS_HIGH();
 8001b14:	61ae      	str	r6, [r5, #24]
  ret = MEM_SPI_Send( cmd, 2 );
 8001b16:	0004      	movs	r4, r0
  return ret;
 8001b18:	e7be      	b.n	8001a98 <MEM_IO_Init+0xc>
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	20000418 	.word	0x20000418
 8001b20:	20000410 	.word	0x20000410
 8001b24:	20000414 	.word	0x20000414
 8001b28:	0801b5a0 	.word	0x0801b5a0
 8001b2c:	08001bb5 	.word	0x08001bb5

08001b30 <MEM_IO_SendDataDMA>:
 8001b30:	200b      	movs	r0, #11
 8001b32:	4240      	negs	r0, r0
 8001b34:	4770      	bx	lr
 8001b36:	46c0      	nop			; (mov r8, r8)

08001b38 <BSP_MEM_Init>:
{
 8001b38:	b510      	push	{r4, lr}
  if(MEM_OS_Initialize(0) == MEM_OS_ERROR_NONE)
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f000 f84e 	bl	8001bdc <MEM_OS_Initialize>
 8001b40:	2800      	cmp	r0, #0
 8001b42:	d001      	beq.n	8001b48 <BSP_MEM_Init+0x10>
  int32_t ret = BSP_ERROR_NONE;
 8001b44:	2000      	movs	r0, #0
}
 8001b46:	bd10      	pop	{r4, pc}
    MemCompObj = NULL;
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <BSP_MEM_Init+0x4c>)
static int32_t MEM_Probe(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the lcd driver : map to MEM_IO function*/
  IOCtx.Init              = MEM_IO_Init;
 8001b4a:	490f      	ldr	r1, [pc, #60]	; (8001b88 <BSP_MEM_Init+0x50>)
    MemCompObj = NULL;
 8001b4c:	6018      	str	r0, [r3, #0]
    MemDrv = NULL;
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <BSP_MEM_Init+0x54>)
 8001b50:	6018      	str	r0, [r3, #0]
  IOCtx.Init              = MEM_IO_Init;
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <BSP_MEM_Init+0x58>)

  /* Set Base Address */
  IOCtx.Address           = MEM_BASE_ADDRESS;

  /* Register OSPI handle */
  ObjCtx.handle           = &hMEMSPI;
 8001b54:	480f      	ldr	r0, [pc, #60]	; (8001b94 <BSP_MEM_Init+0x5c>)
  IOCtx.Init              = MEM_IO_Init;
 8001b56:	600b      	str	r3, [r1, #0]
  IOCtx.DeInit            = MEM_IO_DeInit;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <BSP_MEM_Init+0x60>)
 8001b5a:	604b      	str	r3, [r1, #4]
  IOCtx.SendData          = MEM_IO_SendData;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <BSP_MEM_Init+0x64>)
 8001b5e:	60cb      	str	r3, [r1, #12]
  IOCtx.SendDataDMA       = MEM_IO_SendDataDMA;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <BSP_MEM_Init+0x68>)
 8001b62:	610b      	str	r3, [r1, #16]
  IOCtx.RecvData          = MEM_IO_RecvData;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <BSP_MEM_Init+0x6c>)
 8001b66:	614b      	str	r3, [r1, #20]
  IOCtx.RecvDataDMA       = MEM_IO_RecvDataDMA;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <BSP_MEM_Init+0x70>)
 8001b6a:	618b      	str	r3, [r1, #24]
  IOCtx.Address           = MEM_BASE_ADDRESS;
 8001b6c:	2390      	movs	r3, #144	; 0x90
 8001b6e:	061b      	lsls	r3, r3, #24
 8001b70:	608b      	str	r3, [r1, #8]
  ObjCtx.handle           = &hMEMSPI;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <BSP_MEM_Init+0x74>)
 8001b74:	6243      	str	r3, [r0, #36]	; 0x24

  if(MX25L6433F_RegisterBusIO(&ObjCtx, &IOCtx) != MX25L6433F_OK)
 8001b76:	f000 f8b7 	bl	8001ce8 <MX25L6433F_RegisterBusIO>
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	d0e2      	beq.n	8001b44 <BSP_MEM_Init+0xc>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b7e:	2005      	movs	r0, #5
 8001b80:	4240      	negs	r0, r0
  return ret;
 8001b82:	e7e0      	b.n	8001b46 <BSP_MEM_Init+0xe>
 8001b84:	20000410 	.word	0x20000410
 8001b88:	200003f0 	.word	0x200003f0
 8001b8c:	20000414 	.word	0x20000414
 8001b90:	08001a8d 	.word	0x08001a8d
 8001b94:	20000418 	.word	0x20000418
 8001b98:	08001a85 	.word	0x08001a85
 8001b9c:	080019fd 	.word	0x080019fd
 8001ba0:	08001b31 	.word	0x08001b31
 8001ba4:	08001a41 	.word	0x08001a41
 8001ba8:	08001a05 	.word	0x08001a05
 8001bac:	200002bc 	.word	0x200002bc

08001bb0 <BSP_MEM_SignalTransferDone>:
}
 8001bb0:	4770      	bx	lr
 8001bb2:	46c0      	nop			; (mov r8, r8)

08001bb4 <SPI_RxCpltCallback>:
  if(hspi == ObjCtx.handle)
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <SPI_RxCpltCallback+0x24>)
{
 8001bb6:	b510      	push	{r4, lr}
  if(hspi == ObjCtx.handle)
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	4283      	cmp	r3, r0
 8001bbc:	d000      	beq.n	8001bc0 <SPI_RxCpltCallback+0xc>
}
 8001bbe:	bd10      	pop	{r4, pc}
    MEM_CS_HIGH();
 8001bc0:	23a0      	movs	r3, #160	; 0xa0
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	05db      	lsls	r3, r3, #23
 8001bc6:	0052      	lsls	r2, r2, #1
 8001bc8:	619a      	str	r2, [r3, #24]
    MEM_OS_UnlockFromISR(0);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 f80e 	bl	8001bec <MEM_OS_UnlockFromISR>
    BSP_MEM_SignalTransferDone(0);
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff ffed 	bl	8001bb0 <BSP_MEM_SignalTransferDone>
}
 8001bd6:	e7f2      	b.n	8001bbe <SPI_RxCpltCallback+0xa>
 8001bd8:	20000418 	.word	0x20000418

08001bdc <MEM_OS_Initialize>:
uint8_t MEM_OS_Initialize(uint32_t Instance)
{
  uint8_t i;
  for(i = 0; i < MEM_INSTANCES_NBR; i++)
  {
    mem_sem[i] = 0;
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4b02      	ldr	r3, [pc, #8]	; (8001be8 <MEM_OS_Initialize+0xc>)
  }
  return MEM_OS_ERROR_NONE;
}
 8001be0:	2000      	movs	r0, #0
    mem_sem[i] = 0;
 8001be2:	701a      	strb	r2, [r3, #0]
}
 8001be4:	4770      	bx	lr
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	20000440 	.word	0x20000440

08001bec <MEM_OS_UnlockFromISR>:
 8001bec:	2200      	movs	r2, #0
 8001bee:	4b02      	ldr	r3, [pc, #8]	; (8001bf8 <MEM_OS_UnlockFromISR+0xc>)
 8001bf0:	541a      	strb	r2, [r3, r0]
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	4770      	bx	lr
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	20000440 	.word	0x20000440

08001bfc <MX25L6433F_Init>:
  * @brief  Initialize the MX25L6433F device
  * @param  Ctx Component object pointer
  * @retval error status
  */
int32_t MX25L6433F_Init(MX25L6433F_Object_t *pObj)
{
 8001bfc:	1e03      	subs	r3, r0, #0
  int32_t ret = MX25L6433F_OK;

  if(pObj == NULL)
 8001bfe:	d007      	beq.n	8001c10 <MX25L6433F_Init+0x14>
  {
    ret = MX25L6433F_ERROR;
  }
  else if (pObj->IsInitialized == 0)
 8001c00:	2220      	movs	r2, #32
 8001c02:	5c81      	ldrb	r1, [r0, r2]
  int32_t ret = MX25L6433F_OK;
 8001c04:	2000      	movs	r0, #0
  else if (pObj->IsInitialized == 0)
 8001c06:	2900      	cmp	r1, #0
 8001c08:	d101      	bne.n	8001c0e <MX25L6433F_Init+0x12>
  {
    pObj->IsInitialized = 1;
 8001c0a:	3101      	adds	r1, #1
 8001c0c:	5499      	strb	r1, [r3, r2]
    
    /* Nothing to do in SPI mode */
  }

  return ret;
}
 8001c0e:	4770      	bx	lr
    ret = MX25L6433F_ERROR;
 8001c10:	2001      	movs	r0, #1
 8001c12:	4240      	negs	r0, r0
 8001c14:	e7fb      	b.n	8001c0e <MX25L6433F_Init+0x12>
 8001c16:	46c0      	nop			; (mov r8, r8)

08001c18 <MX25L6433F_DeInit>:
  * @brief  De-Initialize the ili9341 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t MX25L6433F_DeInit(MX25L6433F_Object_t *pObj)
{
 8001c18:	b510      	push	{r4, lr}
  return pObj->IO.DeInit();
 8001c1a:	6843      	ldr	r3, [r0, #4]
 8001c1c:	4798      	blx	r3
}
 8001c1e:	bd10      	pop	{r4, pc}

08001c20 <MX25L6433F_GetFlashInfo>:
  * @retval error status
  */
int32_t MX25L6433F_GetFlashInfo(MX25L6433F_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25L6433F_FLASH_SIZE;
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	041b      	lsls	r3, r3, #16
 8001c24:	6003      	str	r3, [r0, #0]
  pInfo->EraseBlockSize         = MX25L6433F_BLOCK_64K;
 8001c26:	2380      	movs	r3, #128	; 0x80
  pInfo->EraseBlocksNumber      = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_64K);
  pInfo->EraseSubBlockSize      = MX25L6433F_BLOCK_32K;
  pInfo->EraseSubBlocksNumber   = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_32K);
  pInfo->EraseSectorSize        = MX25L6433F_SECTOR_4K;
 8001c28:	2180      	movs	r1, #128	; 0x80
  pInfo->EraseBlockSize         = MX25L6433F_BLOCK_64K;
 8001c2a:	025b      	lsls	r3, r3, #9
 8001c2c:	6043      	str	r3, [r0, #4]
  pInfo->EraseBlocksNumber      = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_64K);
 8001c2e:	2380      	movs	r3, #128	; 0x80
  pInfo->EraseSectorSize        = MX25L6433F_SECTOR_4K;
 8001c30:	0149      	lsls	r1, r1, #5
  pInfo->EraseBlocksNumber      = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_64K);
 8001c32:	6083      	str	r3, [r0, #8]
  pInfo->EraseSectorSize        = MX25L6433F_SECTOR_4K;
 8001c34:	6141      	str	r1, [r0, #20]
  pInfo->EraseSubBlockSize      = MX25L6433F_BLOCK_32K;
 8001c36:	2380      	movs	r3, #128	; 0x80
  pInfo->EraseSubBlocksNumber   = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_32K);
 8001c38:	2280      	movs	r2, #128	; 0x80
  pInfo->EraseSectorsNumber     = (MX25L6433F_FLASH_SIZE/MX25L6433F_SECTOR_4K);
 8001c3a:	2180      	movs	r1, #128	; 0x80
  pInfo->EraseSubBlockSize      = MX25L6433F_BLOCK_32K;
 8001c3c:	021b      	lsls	r3, r3, #8
  pInfo->EraseSubBlocksNumber   = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_32K);
 8001c3e:	0052      	lsls	r2, r2, #1
  pInfo->EraseSectorsNumber     = (MX25L6433F_FLASH_SIZE/MX25L6433F_SECTOR_4K);
 8001c40:	0109      	lsls	r1, r1, #4
  pInfo->EraseSubBlockSize      = MX25L6433F_BLOCK_32K;
 8001c42:	60c3      	str	r3, [r0, #12]
  pInfo->EraseSubBlocksNumber   = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_32K);
 8001c44:	6102      	str	r2, [r0, #16]
  pInfo->EraseSectorsNumber     = (MX25L6433F_FLASH_SIZE/MX25L6433F_SECTOR_4K);
 8001c46:	6181      	str	r1, [r0, #24]
  pInfo->ProgPageSize           = MX25L6433F_PAGE_SIZE;
 8001c48:	61c2      	str	r2, [r0, #28]
  pInfo->ProgPagesNumber        = (MX25L6433F_FLASH_SIZE/MX25L6433F_PAGE_SIZE);
 8001c4a:	6203      	str	r3, [r0, #32]

  return MX25L6433F_OK;
};
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	4770      	bx	lr

08001c50 <MX25L6433F_Read>:
  * @param  ReadAddr Read start address
  * @param  Size Size of data to read
  * @retval QSPI memory status
  */
int32_t MX25L6433F_Read(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8001c50:	b510      	push	{r4, lr}
 8001c52:	0004      	movs	r4, r0
 8001c54:	0010      	movs	r0, r2
  int32_t ret = MX25L6433F_OK;

  switch(Mode)
 8001c56:	2900      	cmp	r1, #0
 8001c58:	d104      	bne.n	8001c64 <MX25L6433F_Read+0x14>
  {
    case MX25L6433F_SPI_MODE :
      ret = pObj->IO.RecvData(pData, ReadAddr, Size);
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	6964      	ldr	r4, [r4, #20]
 8001c5e:	9a02      	ldr	r2, [sp, #8]
 8001c60:	47a0      	blx	r4
    default :
      return MX25L6433F_ERROR;
  }

  return ret;
}
 8001c62:	bd10      	pop	{r4, pc}
      return MX25L6433F_ERROR;
 8001c64:	2001      	movs	r0, #1
 8001c66:	4240      	negs	r0, r0
 8001c68:	e7fb      	b.n	8001c62 <MX25L6433F_Read+0x12>
 8001c6a:	46c0      	nop			; (mov r8, r8)

08001c6c <MX25L6433F_ReadDMA>:
  * @param  ReadAddr Read start address
  * @param  Size Size of data to read
  * @retval QSPI memory status
  */
int32_t MX25L6433F_ReadDMA(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8001c6c:	b510      	push	{r4, lr}
 8001c6e:	0004      	movs	r4, r0
 8001c70:	0010      	movs	r0, r2
  int32_t ret = MX25L6433F_OK;

  switch(Mode)
 8001c72:	2900      	cmp	r1, #0
 8001c74:	d104      	bne.n	8001c80 <MX25L6433F_ReadDMA+0x14>
  {
    case MX25L6433F_SPI_MODE :
      ret = pObj->IO.RecvDataDMA(pData, ReadAddr, Size);
 8001c76:	0019      	movs	r1, r3
 8001c78:	69a4      	ldr	r4, [r4, #24]
 8001c7a:	9a02      	ldr	r2, [sp, #8]
 8001c7c:	47a0      	blx	r4
    default :
      return MX25L6433F_ERROR;
  }

  return ret;
}
 8001c7e:	bd10      	pop	{r4, pc}
      return MX25L6433F_ERROR;
 8001c80:	2001      	movs	r0, #1
 8001c82:	4240      	negs	r0, r0
 8001c84:	e7fb      	b.n	8001c7e <MX25L6433F_ReadDMA+0x12>
 8001c86:	46c0      	nop			; (mov r8, r8)

08001c88 <MX25L6433F_PageProgram>:
  * @note   Address size is forced to 3 Bytes when the 4 Bytes address size
  *         command is not available for the specified interface mode
  * @retval QSPI memory status
  */
int32_t MX25L6433F_PageProgram(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8001c88:	b510      	push	{r4, lr}
 8001c8a:	0004      	movs	r4, r0
 8001c8c:	0010      	movs	r0, r2
  int32_t ret = MX25L6433F_OK;

  switch(Mode)
 8001c8e:	2900      	cmp	r1, #0
 8001c90:	d104      	bne.n	8001c9c <MX25L6433F_PageProgram+0x14>
  {
    case MX25L6433F_SPI_MODE :
      ret = pObj->IO.SendData(pData, WriteAddr, Size);
 8001c92:	0019      	movs	r1, r3
 8001c94:	68e4      	ldr	r4, [r4, #12]
 8001c96:	9a02      	ldr	r2, [sp, #8]
 8001c98:	47a0      	blx	r4
    default :
      ret = MX25L6433F_ERROR;
  }

  return ret;
}
 8001c9a:	bd10      	pop	{r4, pc}
      ret = MX25L6433F_ERROR;
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	4240      	negs	r0, r0
  return ret;
 8001ca0:	e7fb      	b.n	8001c9a <MX25L6433F_PageProgram+0x12>
 8001ca2:	46c0      	nop			; (mov r8, r8)

08001ca4 <MX25L6433F_PageProgramDMA>:
  * @note   Address size is forced to 3 Bytes when the 4 Bytes address size
  *         command is not available for the specified interface mode
  * @retval QSPI memory status
  */
int32_t MX25L6433F_PageProgramDMA(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8001ca4:	b510      	push	{r4, lr}
 8001ca6:	0004      	movs	r4, r0
 8001ca8:	0010      	movs	r0, r2
  int32_t ret = MX25L6433F_OK;

  switch(Mode)
 8001caa:	2900      	cmp	r1, #0
 8001cac:	d104      	bne.n	8001cb8 <MX25L6433F_PageProgramDMA+0x14>
  {
    case MX25L6433F_SPI_MODE :
      ret = pObj->IO.SendDataDMA(pData, WriteAddr, Size);
 8001cae:	0019      	movs	r1, r3
 8001cb0:	6924      	ldr	r4, [r4, #16]
 8001cb2:	9a02      	ldr	r2, [sp, #8]
 8001cb4:	47a0      	blx	r4
    default :
      ret = MX25L6433F_ERROR;
  }

  return ret;
}
 8001cb6:	bd10      	pop	{r4, pc}
      ret = MX25L6433F_ERROR;
 8001cb8:	2001      	movs	r0, #1
 8001cba:	4240      	negs	r0, r0
  return ret;
 8001cbc:	e7fb      	b.n	8001cb6 <MX25L6433F_PageProgramDMA+0x12>
 8001cbe:	46c0      	nop			; (mov r8, r8)

08001cc0 <MX25L6433F_BlockErase>:
      // break;
    default :
      ret = MX25L6433F_ERROR;	  
  }

  return ret;
 8001cc0:	2001      	movs	r0, #1
}
 8001cc2:	4240      	negs	r0, r0
 8001cc4:	4770      	bx	lr
 8001cc6:	46c0      	nop			; (mov r8, r8)

08001cc8 <MX25L6433F_ChipErase>:
  int32_t ret = MX25L6433F_OK;
  
  /* Send the command MX25L6433F_CHIP_ERASE_CMD */
  ret = MX25L6433F_ERROR;

  return ret;
 8001cc8:	2001      	movs	r0, #1
}
 8001cca:	4240      	negs	r0, r0
 8001ccc:	4770      	bx	lr
 8001cce:	46c0      	nop			; (mov r8, r8)

08001cd0 <MX25L6433F_ReadID>:
  int32_t ret = MX25L6433F_OK;
  
  /* Send the command MX25L6433F_READ_ID_CMD */
  ret = MX25L6433F_ERROR;

  return ret;
 8001cd0:	2001      	movs	r0, #1
}
 8001cd2:	4240      	negs	r0, r0
 8001cd4:	4770      	bx	lr
 8001cd6:	46c0      	nop			; (mov r8, r8)

08001cd8 <MX25L6433F_ResetEnable>:
 8001cd8:	2001      	movs	r0, #1
 8001cda:	4240      	negs	r0, r0
 8001cdc:	4770      	bx	lr
 8001cde:	46c0      	nop			; (mov r8, r8)

08001ce0 <MX25L6433F_ResetMemory>:
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	4240      	negs	r0, r0
 8001ce4:	4770      	bx	lr
 8001ce6:	46c0      	nop			; (mov r8, r8)

08001ce8 <MX25L6433F_RegisterBusIO>:
{
 8001ce8:	b510      	push	{r4, lr}
  if(pObj == NULL)
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d013      	beq.n	8001d16 <MX25L6433F_RegisterBusIO+0x2e>
    pObj->IO.DeInit       = pIO->DeInit;
 8001cee:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init         = pIO->Init;
 8001cf0:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit       = pIO->DeInit;
 8001cf2:	6042      	str	r2, [r0, #4]
    pObj->IO.Address      = pIO->Address;
 8001cf4:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init         = pIO->Init;
 8001cf6:	6003      	str	r3, [r0, #0]
    pObj->IO.Address      = pIO->Address;
 8001cf8:	6082      	str	r2, [r0, #8]
    pObj->IO.SendData     = pIO->SendData;
 8001cfa:	68ca      	ldr	r2, [r1, #12]
 8001cfc:	60c2      	str	r2, [r0, #12]
    pObj->IO.SendDataDMA  = pIO->SendDataDMA;
 8001cfe:	690a      	ldr	r2, [r1, #16]
 8001d00:	6102      	str	r2, [r0, #16]
    pObj->IO.RecvData     = pIO->RecvData;
 8001d02:	694a      	ldr	r2, [r1, #20]
 8001d04:	6142      	str	r2, [r0, #20]
    pObj->IO.RecvDataDMA  = pIO->RecvDataDMA;
 8001d06:	698a      	ldr	r2, [r1, #24]
 8001d08:	6182      	str	r2, [r0, #24]
    pObj->IO.GetTick      = pIO->GetTick;
 8001d0a:	69ca      	ldr	r2, [r1, #28]
 8001d0c:	61c2      	str	r2, [r0, #28]
    if(pObj->IO.Init != NULL)
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX25L6433F_RegisterBusIO+0x2e>
      ret = pObj->IO.Init();
 8001d12:	4798      	blx	r3
}
 8001d14:	bd10      	pop	{r4, pc}
    ret = MX25L6433F_ERROR;
 8001d16:	2001      	movs	r0, #1
 8001d18:	4240      	negs	r0, r0
 8001d1a:	e7fb      	b.n	8001d14 <MX25L6433F_RegisterBusIO+0x2c>

08001d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <HAL_InitTick+0x40>)
{
 8001d20:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001d22:	7819      	ldrb	r1, [r3, #0]
 8001d24:	2900      	cmp	r1, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d28:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001d2a:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001d2c:	20fa      	movs	r0, #250	; 0xfa
 8001d2e:	0080      	lsls	r0, r0, #2
 8001d30:	f7fe f9fa 	bl	8000128 <__udivsi3>
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_InitTick+0x44>)
 8001d36:	0001      	movs	r1, r0
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	f7fe f9f5 	bl	8000128 <__udivsi3>
 8001d3e:	f000 f8a5 	bl	8001e8c <HAL_SYSTICK_Config>
 8001d42:	2800      	cmp	r0, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d46:	2c03      	cmp	r4, #3
 8001d48:	d8ee      	bhi.n	8001d28 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d4a:	3801      	subs	r0, #1
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	0021      	movs	r1, r4
 8001d50:	f000 f84e 	bl	8001df0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <HAL_InitTick+0x48>)
 8001d56:	2000      	movs	r0, #0
 8001d58:	601c      	str	r4, [r3, #0]
  return status;
 8001d5a:	e7e6      	b.n	8001d2a <HAL_InitTick+0xe>
 8001d5c:	20000064 	.word	0x20000064
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000068 	.word	0x20000068

08001d68 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <HAL_Init+0x24>)
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	6811      	ldr	r1, [r2, #0]
{
 8001d70:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d72:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d74:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d76:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d78:	f7ff ffd0 	bl	8001d1c <HAL_InitTick>
 8001d7c:	1e04      	subs	r4, r0, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8001d80:	2401      	movs	r4, #1
}
 8001d82:	0020      	movs	r0, r4
 8001d84:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8001d86:	f7fe fcad 	bl	80006e4 <HAL_MspInit>
 8001d8a:	e7fa      	b.n	8001d82 <HAL_Init+0x1a>
 8001d8c:	40022000 	.word	0x40022000

08001d90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001d90:	4a03      	ldr	r2, [pc, #12]	; (8001da0 <HAL_IncTick+0x10>)
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <HAL_IncTick+0x14>)
 8001d94:	6811      	ldr	r1, [r2, #0]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	185b      	adds	r3, r3, r1
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	4770      	bx	lr
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	20000444 	.word	0x20000444
 8001da4:	20000064 	.word	0x20000064

08001da8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001da8:	4b01      	ldr	r3, [pc, #4]	; (8001db0 <HAL_GetTick+0x8>)
 8001daa:	6818      	ldr	r0, [r3, #0]
}
 8001dac:	4770      	bx	lr
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	20000444 	.word	0x20000444

08001db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db4:	b570      	push	{r4, r5, r6, lr}
 8001db6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff fff6 	bl	8001da8 <HAL_GetTick>
 8001dbc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dbe:	1c63      	adds	r3, r4, #1
 8001dc0:	d002      	beq.n	8001dc8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <HAL_Delay+0x20>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dc8:	f7ff ffee 	bl	8001da8 <HAL_GetTick>
 8001dcc:	1b40      	subs	r0, r0, r5
 8001dce:	42a0      	cmp	r0, r4
 8001dd0:	d3fa      	bcc.n	8001dc8 <HAL_Delay+0x14>
  {
  }
}
 8001dd2:	bd70      	pop	{r4, r5, r6, pc}
 8001dd4:	20000064 	.word	0x20000064

08001dd8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001dd8:	4a03      	ldr	r2, [pc, #12]	; (8001de8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8001dda:	4904      	ldr	r1, [pc, #16]	; (8001dec <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8001ddc:	6813      	ldr	r3, [r2, #0]
 8001dde:	400b      	ands	r3, r1
 8001de0:	4303      	orrs	r3, r0
 8001de2:	6013      	str	r3, [r2, #0]
}
 8001de4:	4770      	bx	lr
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	40010000 	.word	0x40010000
 8001dec:	fffff9ff 	.word	0xfffff9ff

08001df0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df0:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001df2:	2800      	cmp	r0, #0
 8001df4:	db14      	blt.n	8001e20 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_NVIC_SetPriority+0x5c>)
 8001df8:	2203      	movs	r2, #3
 8001dfa:	469c      	mov	ip, r3
 8001dfc:	23ff      	movs	r3, #255	; 0xff
 8001dfe:	0884      	lsrs	r4, r0, #2
 8001e00:	4010      	ands	r0, r2
 8001e02:	001a      	movs	r2, r3
 8001e04:	26c0      	movs	r6, #192	; 0xc0
 8001e06:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e08:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e0a:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e0c:	400b      	ands	r3, r1
 8001e0e:	4083      	lsls	r3, r0
 8001e10:	00a4      	lsls	r4, r4, #2
 8001e12:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e14:	00b6      	lsls	r6, r6, #2
 8001e16:	59a5      	ldr	r5, [r4, r6]
 8001e18:	4395      	bics	r5, r2
 8001e1a:	432b      	orrs	r3, r5
 8001e1c:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001e1e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e20:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <HAL_NVIC_SetPriority+0x60>)
 8001e22:	230f      	movs	r3, #15
 8001e24:	4694      	mov	ip, r2
 8001e26:	2203      	movs	r2, #3
 8001e28:	4003      	ands	r3, r0
 8001e2a:	4010      	ands	r0, r2
 8001e2c:	32fc      	adds	r2, #252	; 0xfc
 8001e2e:	0015      	movs	r5, r2
 8001e30:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e32:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e34:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e36:	400a      	ands	r2, r1
 8001e38:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e3a:	3b08      	subs	r3, #8
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4463      	add	r3, ip
 8001e42:	69dc      	ldr	r4, [r3, #28]
 8001e44:	43ac      	bics	r4, r5
 8001e46:	4322      	orrs	r2, r4
 8001e48:	61da      	str	r2, [r3, #28]
 8001e4a:	e7e8      	b.n	8001e1e <HAL_NVIC_SetPriority+0x2e>
 8001e4c:	e000e100 	.word	0xe000e100
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e54:	2800      	cmp	r0, #0
 8001e56:	db05      	blt.n	8001e64 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e58:	231f      	movs	r3, #31
 8001e5a:	4018      	ands	r0, r3
 8001e5c:	3b1e      	subs	r3, #30
 8001e5e:	4083      	lsls	r3, r0
 8001e60:	4a01      	ldr	r2, [pc, #4]	; (8001e68 <HAL_NVIC_EnableIRQ+0x14>)
 8001e62:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e64:	4770      	bx	lr
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	e000e100 	.word	0xe000e100

08001e6c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	db0a      	blt.n	8001e86 <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e70:	231f      	movs	r3, #31
 8001e72:	4018      	ands	r0, r3
 8001e74:	3b1e      	subs	r3, #30
 8001e76:	4083      	lsls	r3, r0
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	4903      	ldr	r1, [pc, #12]	; (8001e88 <HAL_NVIC_DisableIRQ+0x1c>)
 8001e7c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001e82:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100

08001e8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e8c:	2280      	movs	r2, #128	; 0x80
 8001e8e:	1e43      	subs	r3, r0, #1
 8001e90:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e92:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d20e      	bcs.n	8001eb6 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e98:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9a:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e9c:	4807      	ldr	r0, [pc, #28]	; (8001ebc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ea0:	6a03      	ldr	r3, [r0, #32]
 8001ea2:	0609      	lsls	r1, r1, #24
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eac:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eae:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb2:	3307      	adds	r3, #7
 8001eb4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e010 	.word	0xe000e010
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec2:	46c6      	mov	lr, r8
 8001ec4:	0004      	movs	r4, r0
 8001ec6:	b500      	push	{lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	d062      	beq.n	8001f92 <HAL_DMA_Init+0xd2>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ecc:	6805      	ldr	r5, [r0, #0]
 8001ece:	4b32      	ldr	r3, [pc, #200]	; (8001f98 <HAL_DMA_Init+0xd8>)
 8001ed0:	2114      	movs	r1, #20
 8001ed2:	18e8      	adds	r0, r5, r3
 8001ed4:	f7fe f928 	bl	8000128 <__udivsi3>
 8001ed8:	0083      	lsls	r3, r0, #2
 8001eda:	6423      	str	r3, [r4, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001edc:	2202      	movs	r2, #2
 8001ede:	2325      	movs	r3, #37	; 0x25
 8001ee0:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ee2:	682b      	ldr	r3, [r5, #0]
 8001ee4:	4a2d      	ldr	r2, [pc, #180]	; (8001f9c <HAL_DMA_Init+0xdc>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001ee6:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ee8:	4013      	ands	r3, r2
 8001eea:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001eec:	68e3      	ldr	r3, [r4, #12]
 8001eee:	6921      	ldr	r1, [r4, #16]
 8001ef0:	4333      	orrs	r3, r6
 8001ef2:	430b      	orrs	r3, r1
 8001ef4:	6961      	ldr	r1, [r4, #20]
 8001ef6:	682a      	ldr	r2, [r5, #0]
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	69a1      	ldr	r1, [r4, #24]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	69e1      	ldr	r1, [r4, #28]
 8001f00:	430b      	orrs	r3, r1
 8001f02:	6a21      	ldr	r1, [r4, #32]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	4313      	orrs	r3, r2
 8001f08:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001f0a:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_DMA_Init+0xe0>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f0c:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001f0e:	469c      	mov	ip, r3
 8001f10:	4460      	add	r0, ip
 8001f12:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f14:	20ff      	movs	r0, #255	; 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f18:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f1a:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001f1c:	6467      	str	r7, [r4, #68]	; 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f1e:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f20:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f22:	f7fe f901 	bl	8000128 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f26:	231f      	movs	r3, #31
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4003      	ands	r3, r0
 8001f2c:	0010      	movs	r0, r2
 8001f2e:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f30:	2380      	movs	r3, #128	; 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f32:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f34:	01db      	lsls	r3, r3, #7
 8001f36:	429e      	cmp	r6, r3
 8001f38:	d021      	beq.n	8001f7e <HAL_DMA_Init+0xbe>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f3a:	233f      	movs	r3, #63	; 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f3c:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f3e:	6861      	ldr	r1, [r4, #4]
 8001f40:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001f42:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f44:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f46:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001f48:	2903      	cmp	r1, #3
 8001f4a:	d81d      	bhi.n	8001f88 <HAL_DMA_Init+0xc8>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f4c:	2003      	movs	r0, #3
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f4e:	4916      	ldr	r1, [pc, #88]	; (8001fa8 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f50:	4d16      	ldr	r5, [pc, #88]	; (8001fac <HAL_DMA_Init+0xec>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f52:	1859      	adds	r1, r3, r1
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f54:	3b01      	subs	r3, #1
 8001f56:	4003      	ands	r3, r0
 8001f58:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f5a:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f5c:	0089      	lsls	r1, r1, #2
 8001f5e:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f60:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f62:	65a2      	str	r2, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f64:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f66:	606a      	str	r2, [r5, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f68:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	2225      	movs	r2, #37	; 0x25
 8001f6c:	2101      	movs	r1, #1
  return HAL_OK;
 8001f6e:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f70:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8001f72:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8001f74:	3a01      	subs	r2, #1
 8001f76:	54a3      	strb	r3, [r4, r2]
}
 8001f78:	bc80      	pop	{r7}
 8001f7a:	46b8      	mov	r8, r7
 8001f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f82:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f84:	4643      	mov	r3, r8
 8001f86:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001f8c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f8e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f90:	e7ea      	b.n	8001f68 <HAL_DMA_Init+0xa8>
    return HAL_ERROR;
 8001f92:	2001      	movs	r0, #1
 8001f94:	e7f0      	b.n	8001f78 <HAL_DMA_Init+0xb8>
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	bffdfff8 	.word	0xbffdfff8
 8001f9c:	ffff800f 	.word	0xffff800f
 8001fa0:	10008200 	.word	0x10008200
 8001fa4:	40020880 	.word	0x40020880
 8001fa8:	1000823f 	.word	0x1000823f
 8001fac:	40020940 	.word	0x40020940

08001fb0 <HAL_DMA_DeInit>:
{
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb2:	46ce      	mov	lr, r9
 8001fb4:	4647      	mov	r7, r8
 8001fb6:	0004      	movs	r4, r0
 8001fb8:	b580      	push	{r7, lr}
  if (NULL == hdma)
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	d051      	beq.n	8002062 <HAL_DMA_DeInit+0xb2>
  __HAL_DMA_DISABLE(hdma);
 8001fbe:	6803      	ldr	r3, [r0, #0]
 8001fc0:	2601      	movs	r6, #1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	4642      	mov	r2, r8
 8001fc6:	681b      	ldr	r3, [r3, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fc8:	4827      	ldr	r0, [pc, #156]	; (8002068 <HAL_DMA_DeInit+0xb8>)
  __HAL_DMA_DISABLE(hdma);
 8001fca:	43b3      	bics	r3, r6
 8001fcc:	6013      	str	r3, [r2, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fce:	2114      	movs	r1, #20
 8001fd0:	4440      	add	r0, r8
 8001fd2:	f7fe f8a9 	bl	8000128 <__udivsi3>
  hdma->Instance->CCR = 0U;
 8001fd6:	2700      	movs	r7, #0
 8001fd8:	4643      	mov	r3, r8
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fda:	0085      	lsls	r5, r0, #2
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001fdc:	4923      	ldr	r1, [pc, #140]	; (800206c <HAL_DMA_DeInit+0xbc>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fde:	6425      	str	r5, [r4, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8001fe0:	601f      	str	r7, [r3, #0]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001fe2:	684b      	ldr	r3, [r1, #4]
 8001fe4:	221c      	movs	r2, #28
 8001fe6:	469c      	mov	ip, r3
 8001fe8:	0033      	movs	r3, r6
 8001fea:	402a      	ands	r2, r5
 8001fec:	4093      	lsls	r3, r2
 8001fee:	4662      	mov	r2, ip
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_DMA_DeInit+0xc0>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ff6:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ff8:	469c      	mov	ip, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_DMA_DeInit+0xc4>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ffc:	4460      	add	r0, ip
 8001ffe:	0085      	lsls	r5, r0, #2
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002000:	4699      	mov	r9, r3
 8002002:	64a3      	str	r3, [r4, #72]	; 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002004:	20ff      	movs	r0, #255	; 0xff
 8002006:	4643      	mov	r3, r8
 8002008:	4018      	ands	r0, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800200a:	6465      	str	r5, [r4, #68]	; 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800200c:	3808      	subs	r0, #8
 800200e:	f7fe f88b 	bl	8000128 <__udivsi3>
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002012:	231f      	movs	r3, #31
 8002014:	0032      	movs	r2, r6
 8002016:	4003      	ands	r3, r0
 8002018:	409a      	lsls	r2, r3
 800201a:	0013      	movs	r3, r2
 800201c:	64e2      	str	r2, [r4, #76]	; 0x4c
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800201e:	464a      	mov	r2, r9
  hdma->DMAmuxChannel->CCR = 0U;
 8002020:	602f      	str	r7, [r5, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002022:	6053      	str	r3, [r2, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002024:	6863      	ldr	r3, [r4, #4]
 8002026:	1e5a      	subs	r2, r3, #1
 8002028:	2a03      	cmp	r2, #3
 800202a:	d911      	bls.n	8002050 <HAL_DMA_DeInit+0xa0>
  hdma->DMAmuxRequestGen = 0U;
 800202c:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_RESET;
 800202e:	2225      	movs	r2, #37	; 0x25
  return HAL_OK;
 8002030:	2000      	movs	r0, #0
  hdma->DMAmuxRequestGen = 0U;
 8002032:	6523      	str	r3, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8002034:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002036:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->XferCpltCallback = NULL;
 8002038:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800203a:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800203c:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800203e:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002040:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8002042:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hdma);
 8002044:	3a01      	subs	r2, #1
 8002046:	54a3      	strb	r3, [r4, r2]
}
 8002048:	bcc0      	pop	{r6, r7}
 800204a:	46b9      	mov	r9, r7
 800204c:	46b0      	mov	r8, r6
 800204e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002050:	4909      	ldr	r1, [pc, #36]	; (8002078 <HAL_DMA_DeInit+0xc8>)
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002052:	4096      	lsls	r6, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002054:	468c      	mov	ip, r1
 8002056:	4463      	add	r3, ip
 8002058:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800205a:	601f      	str	r7, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800205c:	4b07      	ldr	r3, [pc, #28]	; (800207c <HAL_DMA_DeInit+0xcc>)
 800205e:	605e      	str	r6, [r3, #4]
 8002060:	e7e4      	b.n	800202c <HAL_DMA_DeInit+0x7c>
    return HAL_ERROR;
 8002062:	2001      	movs	r0, #1
 8002064:	e7f0      	b.n	8002048 <HAL_DMA_DeInit+0x98>
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	bffdfff8 	.word	0xbffdfff8
 800206c:	40020000 	.word	0x40020000
 8002070:	10008200 	.word	0x10008200
 8002074:	40020880 	.word	0x40020880
 8002078:	1000823f 	.word	0x1000823f
 800207c:	40020940 	.word	0x40020940

08002080 <HAL_DMA_Start_IT>:
{
 8002080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002082:	46c6      	mov	lr, r8
  __HAL_LOCK(hdma);
 8002084:	2424      	movs	r4, #36	; 0x24
{
 8002086:	b500      	push	{lr}
  __HAL_LOCK(hdma);
 8002088:	5d05      	ldrb	r5, [r0, r4]
 800208a:	2d01      	cmp	r5, #1
 800208c:	d04f      	beq.n	800212e <HAL_DMA_Start_IT+0xae>
 800208e:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 8002090:	2625      	movs	r6, #37	; 0x25
  __HAL_LOCK(hdma);
 8002092:	5505      	strb	r5, [r0, r4]
  if (hdma->State == HAL_DMA_STATE_READY)
 8002094:	5d85      	ldrb	r5, [r0, r6]
 8002096:	b2ef      	uxtb	r7, r5
 8002098:	2d01      	cmp	r5, #1
 800209a:	d007      	beq.n	80020ac <HAL_DMA_Start_IT+0x2c>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80020a0:	2300      	movs	r3, #0
 80020a2:	5503      	strb	r3, [r0, r4]
    status = HAL_ERROR;
 80020a4:	2001      	movs	r0, #1
}
 80020a6:	bc80      	pop	{r7}
 80020a8:	46b8      	mov	r8, r7
 80020aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80020ac:	3c22      	subs	r4, #34	; 0x22
 80020ae:	5584      	strb	r4, [r0, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b0:	2400      	movs	r4, #0
 80020b2:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80020b4:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020b6:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 80020b8:	6825      	ldr	r5, [r4, #0]
 80020ba:	43bd      	bics	r5, r7
 80020bc:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020be:	6c85      	ldr	r5, [r0, #72]	; 0x48
 80020c0:	606e      	str	r6, [r5, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 80020c2:	6d06      	ldr	r6, [r0, #80]	; 0x50
 80020c4:	2e00      	cmp	r6, #0
 80020c6:	d002      	beq.n	80020ce <HAL_DMA_Start_IT+0x4e>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020c8:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80020ca:	6d87      	ldr	r7, [r0, #88]	; 0x58
 80020cc:	606f      	str	r7, [r5, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80020ce:	271c      	movs	r7, #28
 80020d0:	4d1e      	ldr	r5, [pc, #120]	; (800214c <HAL_DMA_Start_IT+0xcc>)
 80020d2:	46ac      	mov	ip, r5
 80020d4:	686d      	ldr	r5, [r5, #4]
 80020d6:	46a8      	mov	r8, r5
 80020d8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80020da:	402f      	ands	r7, r5
 80020dc:	2501      	movs	r5, #1
 80020de:	40bd      	lsls	r5, r7
 80020e0:	4647      	mov	r7, r8
 80020e2:	433d      	orrs	r5, r7
 80020e4:	4667      	mov	r7, ip
 80020e6:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 80020e8:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ea:	6883      	ldr	r3, [r0, #8]
 80020ec:	2b10      	cmp	r3, #16
 80020ee:	d020      	beq.n	8002132 <HAL_DMA_Start_IT+0xb2>
    hdma->Instance->CPAR = SrcAddress;
 80020f0:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 80020f2:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80020f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d01e      	beq.n	8002138 <HAL_DMA_Start_IT+0xb8>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020fa:	220e      	movs	r2, #14
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	4313      	orrs	r3, r2
 8002100:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002102:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	03d2      	lsls	r2, r2, #15
 8002108:	d504      	bpl.n	8002114 <HAL_DMA_Start_IT+0x94>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800210a:	2280      	movs	r2, #128	; 0x80
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	0052      	lsls	r2, r2, #1
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002114:	2e00      	cmp	r6, #0
 8002116:	d004      	beq.n	8002122 <HAL_DMA_Start_IT+0xa2>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	6832      	ldr	r2, [r6, #0]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4313      	orrs	r3, r2
 8002120:	6033      	str	r3, [r6, #0]
    __HAL_DMA_ENABLE(hdma);
 8002122:	2201      	movs	r2, #1
 8002124:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002126:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002128:	4313      	orrs	r3, r2
 800212a:	6023      	str	r3, [r4, #0]
 800212c:	e7bb      	b.n	80020a6 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 800212e:	2002      	movs	r0, #2
 8002130:	e7b9      	b.n	80020a6 <HAL_DMA_Start_IT+0x26>
    hdma->Instance->CPAR = DstAddress;
 8002132:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002134:	60e1      	str	r1, [r4, #12]
 8002136:	e7dd      	b.n	80020f4 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002138:	2204      	movs	r2, #4
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	4393      	bics	r3, r2
 800213e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	3206      	adds	r2, #6
 8002144:	4313      	orrs	r3, r2
 8002146:	6023      	str	r3, [r4, #0]
 8002148:	e7db      	b.n	8002102 <HAL_DMA_Start_IT+0x82>
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	40020000 	.word	0x40020000

08002150 <HAL_DMA_Abort_IT>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002150:	2325      	movs	r3, #37	; 0x25
{
 8002152:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002154:	5cc3      	ldrb	r3, [r0, r3]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d003      	beq.n	8002162 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800215a:	2304      	movs	r3, #4
 800215c:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800215e:	2001      	movs	r0, #1
}
 8002160:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002162:	210e      	movs	r1, #14
 8002164:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002166:	4c17      	ldr	r4, [pc, #92]	; (80021c4 <HAL_DMA_Abort_IT+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002168:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800216a:	6c06      	ldr	r6, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800216c:	438b      	bics	r3, r1
 800216e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002170:	2301      	movs	r3, #1
 8002172:	6811      	ldr	r1, [r2, #0]
 8002174:	4399      	bics	r1, r3
 8002176:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002178:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800217a:	680a      	ldr	r2, [r1, #0]
 800217c:	4022      	ands	r2, r4
 800217e:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002180:	221c      	movs	r2, #28
 8002182:	4032      	ands	r2, r6
 8002184:	4093      	lsls	r3, r2
 8002186:	4910      	ldr	r1, [pc, #64]	; (80021c8 <HAL_DMA_Abort_IT+0x78>)
 8002188:	684d      	ldr	r5, [r1, #4]
 800218a:	432b      	orrs	r3, r5
 800218c:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800218e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002190:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002192:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002194:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4022      	ands	r2, r4
 800219e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021a0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80021a2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80021a4:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80021a6:	2325      	movs	r3, #37	; 0x25
 80021a8:	2201      	movs	r2, #1
 80021aa:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80021ac:	2200      	movs	r2, #0
 80021ae:	3b01      	subs	r3, #1
 80021b0:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 80021b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80021b8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80021ba:	2000      	movs	r0, #0
 80021bc:	e7d0      	b.n	8002160 <HAL_DMA_Abort_IT+0x10>
 80021be:	2000      	movs	r0, #0
 80021c0:	e7ce      	b.n	8002160 <HAL_DMA_Abort_IT+0x10>
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	fffffeff 	.word	0xfffffeff
 80021c8:	40020000 	.word	0x40020000

080021cc <HAL_DMA_IRQHandler>:
  uint32_t flag_it = DMA1->ISR;
 80021cc:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <HAL_DMA_IRQHandler+0xb4>)
{
 80021ce:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 80021d0:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021d2:	2504      	movs	r5, #4
 80021d4:	231c      	movs	r3, #28
 80021d6:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80021d8:	6801      	ldr	r1, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021da:	4023      	ands	r3, r4
 80021dc:	002c      	movs	r4, r5
 80021de:	409c      	lsls	r4, r3
  uint32_t source_it = hdma->Instance->CCR;
 80021e0:	680e      	ldr	r6, [r1, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021e2:	4222      	tst	r2, r4
 80021e4:	d010      	beq.n	8002208 <HAL_DMA_IRQHandler+0x3c>
 80021e6:	4235      	tst	r5, r6
 80021e8:	d00e      	beq.n	8002208 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ea:	680b      	ldr	r3, [r1, #0]
 80021ec:	069b      	lsls	r3, r3, #26
 80021ee:	d402      	bmi.n	80021f6 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021f0:	680b      	ldr	r3, [r1, #0]
 80021f2:	43ab      	bics	r3, r5
 80021f4:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80021f6:	4b22      	ldr	r3, [pc, #136]	; (8002280 <HAL_DMA_IRQHandler+0xb4>)
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	4314      	orrs	r4, r2
 80021fc:	605c      	str	r4, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80021fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002200:	2b00      	cmp	r3, #0
 8002202:	d000      	beq.n	8002206 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8002204:	4798      	blx	r3
}
 8002206:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002208:	2502      	movs	r5, #2
 800220a:	002c      	movs	r4, r5
 800220c:	409c      	lsls	r4, r3
 800220e:	4222      	tst	r2, r4
 8002210:	d017      	beq.n	8002242 <HAL_DMA_IRQHandler+0x76>
 8002212:	4235      	tst	r5, r6
 8002214:	d015      	beq.n	8002242 <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002216:	680b      	ldr	r3, [r1, #0]
 8002218:	069b      	lsls	r3, r3, #26
 800221a:	d406      	bmi.n	800222a <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800221c:	220a      	movs	r2, #10
 800221e:	680b      	ldr	r3, [r1, #0]
 8002220:	4393      	bics	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8002224:	2325      	movs	r3, #37	; 0x25
 8002226:	3a09      	subs	r2, #9
 8002228:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_DMA_IRQHandler+0xb4>)
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4314      	orrs	r4, r2
 8002230:	605c      	str	r4, [r3, #4]
      __HAL_UNLOCK(hdma);
 8002232:	2200      	movs	r2, #0
 8002234:	2324      	movs	r3, #36	; 0x24
 8002236:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8002238:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0e3      	beq.n	8002206 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 800223e:	4798      	blx	r3
  return;
 8002240:	e7e1      	b.n	8002206 <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002242:	2408      	movs	r4, #8
 8002244:	0025      	movs	r5, r4
 8002246:	409d      	lsls	r5, r3
 8002248:	422a      	tst	r2, r5
 800224a:	d0dc      	beq.n	8002206 <HAL_DMA_IRQHandler+0x3a>
 800224c:	4234      	tst	r4, r6
 800224e:	d0da      	beq.n	8002206 <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002250:	680a      	ldr	r2, [r1, #0]
 8002252:	3406      	adds	r4, #6
 8002254:	43a2      	bics	r2, r4
 8002256:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002258:	2201      	movs	r2, #1
 800225a:	0015      	movs	r5, r2
 800225c:	409d      	lsls	r5, r3
 800225e:	002b      	movs	r3, r5
 8002260:	4907      	ldr	r1, [pc, #28]	; (8002280 <HAL_DMA_IRQHandler+0xb4>)
 8002262:	684c      	ldr	r4, [r1, #4]
 8002264:	4323      	orrs	r3, r4
 8002266:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002268:	2325      	movs	r3, #37	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800226a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800226c:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800226e:	2200      	movs	r2, #0
 8002270:	3b01      	subs	r3, #1
 8002272:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8002274:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0c5      	beq.n	8002206 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 800227a:	4798      	blx	r3
  return;
 800227c:	e7c3      	b.n	8002206 <HAL_DMA_IRQHandler+0x3a>
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	40020000 	.word	0x40020000

08002284 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002284:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8002286:	2901      	cmp	r1, #1
 8002288:	d005      	beq.n	8002296 <HAL_EXTI_RegisterCallback+0x12>
 800228a:	2902      	cmp	r1, #2
 800228c:	d00a      	beq.n	80022a4 <HAL_EXTI_RegisterCallback+0x20>
 800228e:	2001      	movs	r0, #1
 8002290:	2900      	cmp	r1, #0
 8002292:	d003      	beq.n	800229c <HAL_EXTI_RegisterCallback+0x18>
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8002294:	4770      	bx	lr
      hexti->RisingCallback = pPendingCbfn;
 8002296:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002298:	2000      	movs	r0, #0
      break;
 800229a:	e7fb      	b.n	8002294 <HAL_EXTI_RegisterCallback+0x10>
  HAL_StatusTypeDef status = HAL_OK;
 800229c:	2000      	movs	r0, #0
      hexti->RisingCallback = pPendingCbfn;
 800229e:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80022a0:	609a      	str	r2, [r3, #8]
      break;
 80022a2:	e7f7      	b.n	8002294 <HAL_EXTI_RegisterCallback+0x10>
      hexti->FallingCallback = pPendingCbfn;
 80022a4:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80022a6:	2000      	movs	r0, #0
      break;
 80022a8:	e7f4      	b.n	8002294 <HAL_EXTI_RegisterCallback+0x10>
 80022aa:	46c0      	nop			; (mov r8, r8)

080022ac <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80022ac:	2800      	cmp	r0, #0
 80022ae:	d002      	beq.n	80022b6 <HAL_EXTI_GetHandle+0xa>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80022b0:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 80022b2:	2000      	movs	r0, #0
  }
}
 80022b4:	4770      	bx	lr
    return HAL_ERROR;
 80022b6:	2001      	movs	r0, #1
 80022b8:	e7fc      	b.n	80022b4 <HAL_EXTI_GetHandle+0x8>
 80022ba:	46c0      	nop			; (mov r8, r8)

080022bc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80022bc:	b570      	push	{r4, r5, r6, lr}
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80022be:	2401      	movs	r4, #1
 80022c0:	221f      	movs	r2, #31
 80022c2:	0026      	movs	r6, r4
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80022c4:	6803      	ldr	r3, [r0, #0]
{
 80022c6:	0005      	movs	r5, r0
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80022c8:	401a      	ands	r2, r3
 80022ca:	4096      	lsls	r6, r2
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80022cc:	0c1b      	lsrs	r3, r3, #16
 80022ce:	401c      	ands	r4, r3

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_EXTI_IRQHandler+0x44>)
 80022d2:	0164      	lsls	r4, r4, #5
 80022d4:	18e3      	adds	r3, r4, r3
  regval = (*regaddr & maskline);
 80022d6:	681a      	ldr	r2, [r3, #0]

  if (regval != 0x00u)
 80022d8:	4216      	tst	r6, r2
 80022da:	d004      	beq.n	80022e6 <HAL_EXTI_IRQHandler+0x2a>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80022dc:	601e      	str	r6, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80022de:	6843      	ldr	r3, [r0, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d000      	beq.n	80022e6 <HAL_EXTI_IRQHandler+0x2a>
    {
      hexti->RisingCallback();
 80022e4:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <HAL_EXTI_IRQHandler+0x48>)
 80022e8:	469c      	mov	ip, r3
 80022ea:	4464      	add	r4, ip
  regval = (*regaddr & maskline);
 80022ec:	6823      	ldr	r3, [r4, #0]

  if (regval != 0x00u)
 80022ee:	421e      	tst	r6, r3
 80022f0:	d004      	beq.n	80022fc <HAL_EXTI_IRQHandler+0x40>
  {
    /* Clear pending bit */
    *regaddr = maskline;

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80022f2:	68ab      	ldr	r3, [r5, #8]
    *regaddr = maskline;
 80022f4:	6026      	str	r6, [r4, #0]
    if (hexti->FallingCallback != NULL)
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d000      	beq.n	80022fc <HAL_EXTI_IRQHandler+0x40>
    {
      hexti->FallingCallback();
 80022fa:	4798      	blx	r3
    }
  }
}
 80022fc:	bd70      	pop	{r4, r5, r6, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	4002180c 	.word	0x4002180c
 8002304:	40021810 	.word	0x40021810

08002308 <HAL_EXTI_ClearPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002308:	2201      	movs	r2, #1
{
 800230a:	b510      	push	{r4, lr}
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800230c:	6804      	ldr	r4, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800230e:	201f      	movs	r0, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002310:	0c23      	lsrs	r3, r4, #16
 8002312:	4013      	ands	r3, r2
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002314:	4020      	ands	r0, r4
 8002316:	4082      	lsls	r2, r0

  if (Edge != EXTI_TRIGGER_RISING)
  {
    /* Get falling edge pending register address */
    regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002318:	015b      	lsls	r3, r3, #5
  if (Edge != EXTI_TRIGGER_RISING)
 800231a:	2901      	cmp	r1, #1
 800231c:	d004      	beq.n	8002328 <HAL_EXTI_ClearPending+0x20>
    regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800231e:	4904      	ldr	r1, [pc, #16]	; (8002330 <HAL_EXTI_ClearPending+0x28>)
 8002320:	468c      	mov	ip, r1
 8002322:	4463      	add	r3, ip
    /* Get falling edge pending register address */
    regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
  }

  /* Clear Pending bit */
  *regaddr =  maskline;
 8002324:	601a      	str	r2, [r3, #0]
}
 8002326:	bd10      	pop	{r4, pc}
    regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002328:	4902      	ldr	r1, [pc, #8]	; (8002334 <HAL_EXTI_ClearPending+0x2c>)
 800232a:	468c      	mov	ip, r1
 800232c:	4463      	add	r3, ip
 800232e:	e7f9      	b.n	8002324 <HAL_EXTI_ClearPending+0x1c>
 8002330:	40021810 	.word	0x40021810
 8002334:	4002180c 	.word	0x4002180c

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233a:	46de      	mov	lr, fp
 800233c:	4657      	mov	r7, sl
 800233e:	464e      	mov	r6, r9
 8002340:	4645      	mov	r5, r8
 8002342:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002344:	680c      	ldr	r4, [r1, #0]
{
 8002346:	468c      	mov	ip, r1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002348:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800234a:	2300      	movs	r3, #0
{
 800234c:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234e:	2c00      	cmp	r4, #0
 8002350:	d07e      	beq.n	8002450 <HAL_GPIO_Init+0x118>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002352:	497b      	ldr	r1, [pc, #492]	; (8002540 <HAL_GPIO_Init+0x208>)
 8002354:	468b      	mov	fp, r1
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002356:	4661      	mov	r1, ip
 8002358:	9101      	str	r1, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800235a:	2601      	movs	r6, #1
 800235c:	0021      	movs	r1, r4
 800235e:	409e      	lsls	r6, r3
 8002360:	4031      	ands	r1, r6
 8002362:	468a      	mov	sl, r1
    if (iocurrent != 0x00u)
 8002364:	4234      	tst	r4, r6
 8002366:	d06d      	beq.n	8002444 <HAL_GPIO_Init+0x10c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002368:	9d01      	ldr	r5, [sp, #4]
 800236a:	6869      	ldr	r1, [r5, #4]
 800236c:	2503      	movs	r5, #3
 800236e:	400d      	ands	r5, r1
 8002370:	46ac      	mov	ip, r5
 8002372:	3d01      	subs	r5, #1
 8002374:	2d01      	cmp	r5, #1
 8002376:	d800      	bhi.n	800237a <HAL_GPIO_Init+0x42>
 8002378:	e071      	b.n	800245e <HAL_GPIO_Init+0x126>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800237a:	4665      	mov	r5, ip
 800237c:	2d03      	cmp	r5, #3
 800237e:	d000      	beq.n	8002382 <HAL_GPIO_Init+0x4a>
 8002380:	e0b5      	b.n	80024ee <HAL_GPIO_Init+0x1b6>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002382:	4666      	mov	r6, ip
 8002384:	4096      	lsls	r6, r2
 8002386:	43f5      	mvns	r5, r6
 8002388:	9500      	str	r5, [sp, #0]
      temp = GPIOx->MODER;
 800238a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800238c:	9d00      	ldr	r5, [sp, #0]
 800238e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002390:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8002392:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002394:	25c0      	movs	r5, #192	; 0xc0
 8002396:	02ad      	lsls	r5, r5, #10
 8002398:	4229      	tst	r1, r5
 800239a:	d053      	beq.n	8002444 <HAL_GPIO_Init+0x10c>
        temp = EXTI->EXTICR[position >> 2u];
 800239c:	4e68      	ldr	r6, [pc, #416]	; (8002540 <HAL_GPIO_Init+0x208>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800239e:	2703      	movs	r7, #3
 80023a0:	46b4      	mov	ip, r6
        temp = EXTI->EXTICR[position >> 2u];
 80023a2:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80023a4:	401f      	ands	r7, r3
 80023a6:	00ff      	lsls	r7, r7, #3
 80023a8:	00ad      	lsls	r5, r5, #2
 80023aa:	4465      	add	r5, ip
 80023ac:	46bc      	mov	ip, r7
        temp = EXTI->EXTICR[position >> 2u];
 80023ae:	6e2e      	ldr	r6, [r5, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80023b0:	270f      	movs	r7, #15
        temp = EXTI->EXTICR[position >> 2u];
 80023b2:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80023b4:	4666      	mov	r6, ip
 80023b6:	40b7      	lsls	r7, r6
 80023b8:	003e      	movs	r6, r7
 80023ba:	464f      	mov	r7, r9
 80023bc:	43b7      	bics	r7, r6
 80023be:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80023c0:	27a0      	movs	r7, #160	; 0xa0
 80023c2:	05ff      	lsls	r7, r7, #23
 80023c4:	42b8      	cmp	r0, r7
 80023c6:	d012      	beq.n	80023ee <HAL_GPIO_Init+0xb6>
 80023c8:	4f5e      	ldr	r7, [pc, #376]	; (8002544 <HAL_GPIO_Init+0x20c>)
 80023ca:	42b8      	cmp	r0, r7
 80023cc:	d100      	bne.n	80023d0 <HAL_GPIO_Init+0x98>
 80023ce:	e0a7      	b.n	8002520 <HAL_GPIO_Init+0x1e8>
 80023d0:	4f5d      	ldr	r7, [pc, #372]	; (8002548 <HAL_GPIO_Init+0x210>)
 80023d2:	42b8      	cmp	r0, r7
 80023d4:	d100      	bne.n	80023d8 <HAL_GPIO_Init+0xa0>
 80023d6:	e0ab      	b.n	8002530 <HAL_GPIO_Init+0x1f8>
 80023d8:	4f5c      	ldr	r7, [pc, #368]	; (800254c <HAL_GPIO_Init+0x214>)
 80023da:	42b8      	cmp	r0, r7
 80023dc:	d100      	bne.n	80023e0 <HAL_GPIO_Init+0xa8>
 80023de:	e098      	b.n	8002512 <HAL_GPIO_Init+0x1da>
 80023e0:	4666      	mov	r6, ip
 80023e2:	2705      	movs	r7, #5
 80023e4:	40b7      	lsls	r7, r6
 80023e6:	003e      	movs	r6, r7
 80023e8:	464f      	mov	r7, r9
 80023ea:	4337      	orrs	r7, r6
 80023ec:	46b9      	mov	r9, r7
        EXTI->EXTICR[position >> 2u] = temp;
 80023ee:	464e      	mov	r6, r9
 80023f0:	662e      	str	r6, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 80023f2:	2680      	movs	r6, #128	; 0x80
 80023f4:	465d      	mov	r5, fp
 80023f6:	59ad      	ldr	r5, [r5, r6]
        temp &= ~(iocurrent);
 80023f8:	4656      	mov	r6, sl
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023fa:	2780      	movs	r7, #128	; 0x80
        temp &= ~(iocurrent);
 80023fc:	43f6      	mvns	r6, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023fe:	027f      	lsls	r7, r7, #9
        temp &= ~(iocurrent);
 8002400:	46b0      	mov	r8, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002402:	4239      	tst	r1, r7
 8002404:	d000      	beq.n	8002408 <HAL_GPIO_Init+0xd0>
 8002406:	e081      	b.n	800250c <HAL_GPIO_Init+0x1d4>
        temp &= ~(iocurrent);
 8002408:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800240a:	465f      	mov	r7, fp
 800240c:	2680      	movs	r6, #128	; 0x80
 800240e:	51bd      	str	r5, [r7, r6]

        temp = EXTI->EMR1;
 8002410:	2584      	movs	r5, #132	; 0x84
 8002412:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002414:	038e      	lsls	r6, r1, #14
 8002416:	d500      	bpl.n	800241a <HAL_GPIO_Init+0xe2>
 8002418:	e075      	b.n	8002506 <HAL_GPIO_Init+0x1ce>
        temp &= ~(iocurrent);
 800241a:	4646      	mov	r6, r8
 800241c:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 800241e:	2684      	movs	r6, #132	; 0x84
 8002420:	46b4      	mov	ip, r6
 8002422:	465e      	mov	r6, fp
 8002424:	4667      	mov	r7, ip
 8002426:	51f5      	str	r5, [r6, r7]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002428:	6835      	ldr	r5, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800242a:	02ce      	lsls	r6, r1, #11
 800242c:	d468      	bmi.n	8002500 <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 800242e:	4646      	mov	r6, r8
 8002430:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002432:	465e      	mov	r6, fp
 8002434:	6035      	str	r5, [r6, #0]

        temp = EXTI->FTSR1;
 8002436:	6875      	ldr	r5, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002438:	0289      	lsls	r1, r1, #10
 800243a:	d45d      	bmi.n	80024f8 <HAL_GPIO_Init+0x1c0>
        temp &= ~(iocurrent);
 800243c:	4641      	mov	r1, r8
 800243e:	400d      	ands	r5, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002440:	4659      	mov	r1, fp
 8002442:	604d      	str	r5, [r1, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002444:	0021      	movs	r1, r4
      }
    }

    position++;
 8002446:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002448:	40d9      	lsrs	r1, r3
 800244a:	3202      	adds	r2, #2
 800244c:	2900      	cmp	r1, #0
 800244e:	d184      	bne.n	800235a <HAL_GPIO_Init+0x22>
  }
}
 8002450:	b003      	add	sp, #12
 8002452:	bcf0      	pop	{r4, r5, r6, r7}
 8002454:	46bb      	mov	fp, r7
 8002456:	46b2      	mov	sl, r6
 8002458:	46a9      	mov	r9, r5
 800245a:	46a0      	mov	r8, r4
 800245c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 800245e:	6885      	ldr	r5, [r0, #8]
 8002460:	46a8      	mov	r8, r5
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002462:	2503      	movs	r5, #3
 8002464:	4095      	lsls	r5, r2
 8002466:	43ef      	mvns	r7, r5
 8002468:	9700      	str	r7, [sp, #0]
 800246a:	4647      	mov	r7, r8
 800246c:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800246e:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002470:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002472:	68ef      	ldr	r7, [r5, #12]
 8002474:	4097      	lsls	r7, r2
 8002476:	46b8      	mov	r8, r7
 8002478:	464f      	mov	r7, r9
 800247a:	4645      	mov	r5, r8
 800247c:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 800247e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002480:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002482:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002484:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002486:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002488:	090e      	lsrs	r6, r1, #4
 800248a:	402e      	ands	r6, r5
 800248c:	409e      	lsls	r6, r3
 800248e:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8002490:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002492:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002494:	9d00      	ldr	r5, [sp, #0]
 8002496:	402e      	ands	r6, r5
 8002498:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800249a:	9d01      	ldr	r5, [sp, #4]
 800249c:	4647      	mov	r7, r8
 800249e:	68ae      	ldr	r6, [r5, #8]
 80024a0:	4096      	lsls	r6, r2
 80024a2:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 80024a4:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a6:	4667      	mov	r7, ip
 80024a8:	4666      	mov	r6, ip
 80024aa:	4096      	lsls	r6, r2
 80024ac:	2f02      	cmp	r7, #2
 80024ae:	d000      	beq.n	80024b2 <HAL_GPIO_Init+0x17a>
 80024b0:	e76b      	b.n	800238a <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3u];
 80024b2:	08dd      	lsrs	r5, r3, #3
 80024b4:	00ad      	lsls	r5, r5, #2
 80024b6:	46ac      	mov	ip, r5
 80024b8:	4484      	add	ip, r0
 80024ba:	4665      	mov	r5, ip
 80024bc:	6a2d      	ldr	r5, [r5, #32]
 80024be:	46a9      	mov	r9, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024c0:	2507      	movs	r5, #7
 80024c2:	002f      	movs	r7, r5
 80024c4:	401f      	ands	r7, r3
 80024c6:	00bd      	lsls	r5, r7, #2
 80024c8:	270f      	movs	r7, #15
 80024ca:	46a8      	mov	r8, r5
 80024cc:	40af      	lsls	r7, r5
 80024ce:	464d      	mov	r5, r9
 80024d0:	43bd      	bics	r5, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024d2:	4647      	mov	r7, r8
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024d4:	46a9      	mov	r9, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024d6:	9d01      	ldr	r5, [sp, #4]
 80024d8:	692d      	ldr	r5, [r5, #16]
 80024da:	40bd      	lsls	r5, r7
 80024dc:	46a8      	mov	r8, r5
 80024de:	464d      	mov	r5, r9
 80024e0:	4647      	mov	r7, r8
 80024e2:	433d      	orrs	r5, r7
 80024e4:	46a9      	mov	r9, r5
        GPIOx->AFR[position >> 3u] = temp;
 80024e6:	4665      	mov	r5, ip
 80024e8:	464f      	mov	r7, r9
 80024ea:	622f      	str	r7, [r5, #32]
 80024ec:	e74d      	b.n	800238a <HAL_GPIO_Init+0x52>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ee:	2503      	movs	r5, #3
 80024f0:	4095      	lsls	r5, r2
 80024f2:	43ed      	mvns	r5, r5
 80024f4:	9500      	str	r5, [sp, #0]
 80024f6:	e7cc      	b.n	8002492 <HAL_GPIO_Init+0x15a>
          temp |= iocurrent;
 80024f8:	4651      	mov	r1, sl
 80024fa:	4329      	orrs	r1, r5
 80024fc:	000d      	movs	r5, r1
 80024fe:	e79f      	b.n	8002440 <HAL_GPIO_Init+0x108>
          temp |= iocurrent;
 8002500:	4656      	mov	r6, sl
 8002502:	4335      	orrs	r5, r6
 8002504:	e795      	b.n	8002432 <HAL_GPIO_Init+0xfa>
          temp |= iocurrent;
 8002506:	4656      	mov	r6, sl
 8002508:	4335      	orrs	r5, r6
 800250a:	e788      	b.n	800241e <HAL_GPIO_Init+0xe6>
          temp |= iocurrent;
 800250c:	4656      	mov	r6, sl
 800250e:	4335      	orrs	r5, r6
 8002510:	e77b      	b.n	800240a <HAL_GPIO_Init+0xd2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002512:	4667      	mov	r7, ip
 8002514:	2603      	movs	r6, #3
 8002516:	40be      	lsls	r6, r7
 8002518:	464f      	mov	r7, r9
 800251a:	4337      	orrs	r7, r6
 800251c:	46b9      	mov	r9, r7
 800251e:	e766      	b.n	80023ee <HAL_GPIO_Init+0xb6>
 8002520:	4666      	mov	r6, ip
 8002522:	2701      	movs	r7, #1
 8002524:	40b7      	lsls	r7, r6
 8002526:	003e      	movs	r6, r7
 8002528:	464f      	mov	r7, r9
 800252a:	4337      	orrs	r7, r6
 800252c:	46b9      	mov	r9, r7
 800252e:	e75e      	b.n	80023ee <HAL_GPIO_Init+0xb6>
 8002530:	4667      	mov	r7, ip
 8002532:	2602      	movs	r6, #2
 8002534:	40be      	lsls	r6, r7
 8002536:	464f      	mov	r7, r9
 8002538:	4337      	orrs	r7, r6
 800253a:	46b9      	mov	r9, r7
 800253c:	e757      	b.n	80023ee <HAL_GPIO_Init+0xb6>
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	40021800 	.word	0x40021800
 8002544:	50000400 	.word	0x50000400
 8002548:	50000800 	.word	0x50000800
 800254c:	50000c00 	.word	0x50000c00

08002550 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002552:	46de      	mov	lr, fp
 8002554:	4657      	mov	r7, sl
 8002556:	464e      	mov	r6, r9
 8002558:	4645      	mov	r5, r8
 800255a:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t position = 0x00u;
 800255c:	2300      	movs	r3, #0
{
 800255e:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002560:	2900      	cmp	r1, #0
 8002562:	d065      	beq.n	8002630 <HAL_GPIO_DeInit+0xe0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002564:	2201      	movs	r2, #1
 8002566:	4691      	mov	r9, r2
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8002568:	3202      	adds	r2, #2
 800256a:	4693      	mov	fp, r2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800256c:	4a3a      	ldr	r2, [pc, #232]	; (8002658 <HAL_GPIO_DeInit+0x108>)
 800256e:	4694      	mov	ip, r2
 8002570:	e044      	b.n	80025fc <HAL_GPIO_DeInit+0xac>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8002572:	4c3a      	ldr	r4, [pc, #232]	; (800265c <HAL_GPIO_DeInit+0x10c>)
 8002574:	42a0      	cmp	r0, r4
 8002576:	d062      	beq.n	800263e <HAL_GPIO_DeInit+0xee>
 8002578:	4c39      	ldr	r4, [pc, #228]	; (8002660 <HAL_GPIO_DeInit+0x110>)
 800257a:	42a0      	cmp	r0, r4
 800257c:	d063      	beq.n	8002646 <HAL_GPIO_DeInit+0xf6>
 800257e:	4c39      	ldr	r4, [pc, #228]	; (8002664 <HAL_GPIO_DeInit+0x114>)
 8002580:	42a0      	cmp	r0, r4
 8002582:	d064      	beq.n	800264e <HAL_GPIO_DeInit+0xfe>
 8002584:	2405      	movs	r4, #5
 8002586:	40ac      	lsls	r4, r5
 8002588:	0025      	movs	r5, r4
 800258a:	42ae      	cmp	r6, r5
 800258c:	d114      	bne.n	80025b8 <HAL_GPIO_DeInit+0x68>
        EXTI->IMR1 &= ~(iocurrent);
 800258e:	2480      	movs	r4, #128	; 0x80
 8002590:	4665      	mov	r5, ip
 8002592:	4666      	mov	r6, ip
 8002594:	592d      	ldr	r5, [r5, r4]
 8002596:	43bd      	bics	r5, r7
 8002598:	5135      	str	r5, [r6, r4]
        EXTI->EMR1 &= ~(iocurrent);
 800259a:	3404      	adds	r4, #4
 800259c:	5935      	ldr	r5, [r6, r4]
 800259e:	43bd      	bics	r5, r7
 80025a0:	5135      	str	r5, [r6, r4]
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
        EXTI->FTSR1 &= ~(iocurrent);

        tmp = 0x0FuL << (8u * (position & 0x03u));
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80025a2:	4644      	mov	r4, r8
        EXTI->RTSR1 &= ~(iocurrent);
 80025a4:	6835      	ldr	r5, [r6, #0]
 80025a6:	43bd      	bics	r5, r7
 80025a8:	6035      	str	r5, [r6, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80025aa:	6875      	ldr	r5, [r6, #4]
 80025ac:	43bd      	bics	r5, r7
 80025ae:	6075      	str	r5, [r6, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80025b0:	9e01      	ldr	r6, [sp, #4]
 80025b2:	6e35      	ldr	r5, [r6, #96]	; 0x60
 80025b4:	43a5      	bics	r5, r4
 80025b6:	6635      	str	r5, [r6, #96]	; 0x60
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80025b8:	465e      	mov	r6, fp
 80025ba:	005d      	lsls	r5, r3, #1
 80025bc:	40ae      	lsls	r6, r5
 80025be:	6804      	ldr	r4, [r0, #0]
 80025c0:	0035      	movs	r5, r6
 80025c2:	4334      	orrs	r4, r6
 80025c4:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80025c6:	08dc      	lsrs	r4, r3, #3
 80025c8:	00a4      	lsls	r4, r4, #2
 80025ca:	1904      	adds	r4, r0, r4
 80025cc:	6a26      	ldr	r6, [r4, #32]
 80025ce:	2707      	movs	r7, #7
 80025d0:	46b0      	mov	r8, r6
 80025d2:	260f      	movs	r6, #15
 80025d4:	401f      	ands	r7, r3
 80025d6:	00bf      	lsls	r7, r7, #2
 80025d8:	40be      	lsls	r6, r7
 80025da:	0037      	movs	r7, r6
 80025dc:	4646      	mov	r6, r8
 80025de:	43be      	bics	r6, r7
 80025e0:	6226      	str	r6, [r4, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025e2:	6884      	ldr	r4, [r0, #8]
 80025e4:	43ac      	bics	r4, r5
 80025e6:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80025e8:	6844      	ldr	r4, [r0, #4]
 80025ea:	4394      	bics	r4, r2
 80025ec:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025ee:	68c2      	ldr	r2, [r0, #12]
 80025f0:	43aa      	bics	r2, r5
 80025f2:	60c2      	str	r2, [r0, #12]
  while ((GPIO_Pin >> position) != 0x00u)
 80025f4:	000a      	movs	r2, r1
    }

    position++;
 80025f6:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80025f8:	40da      	lsrs	r2, r3
 80025fa:	d019      	beq.n	8002630 <HAL_GPIO_DeInit+0xe0>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80025fc:	464a      	mov	r2, r9
 80025fe:	000f      	movs	r7, r1
 8002600:	409a      	lsls	r2, r3
 8002602:	4017      	ands	r7, r2
    if (iocurrent != 0x00u)
 8002604:	4211      	tst	r1, r2
 8002606:	d0f5      	beq.n	80025f4 <HAL_GPIO_DeInit+0xa4>
      tmp = EXTI->EXTICR[position >> 2u];
 8002608:	4d13      	ldr	r5, [pc, #76]	; (8002658 <HAL_GPIO_DeInit+0x108>)
 800260a:	089c      	lsrs	r4, r3, #2
 800260c:	46a8      	mov	r8, r5
 800260e:	00a4      	lsls	r4, r4, #2
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8002610:	465d      	mov	r5, fp
 8002612:	4444      	add	r4, r8
      tmp = EXTI->EXTICR[position >> 2u];
 8002614:	6e26      	ldr	r6, [r4, #96]	; 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8002616:	9401      	str	r4, [sp, #4]
 8002618:	240f      	movs	r4, #15
 800261a:	401d      	ands	r5, r3
 800261c:	00ed      	lsls	r5, r5, #3
 800261e:	40ac      	lsls	r4, r5
 8002620:	46a0      	mov	r8, r4
 8002622:	4026      	ands	r6, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8002624:	24a0      	movs	r4, #160	; 0xa0
 8002626:	05e4      	lsls	r4, r4, #23
 8002628:	42a0      	cmp	r0, r4
 800262a:	d1a2      	bne.n	8002572 <HAL_GPIO_DeInit+0x22>
 800262c:	2500      	movs	r5, #0
 800262e:	e7ac      	b.n	800258a <HAL_GPIO_DeInit+0x3a>
  }
}
 8002630:	b003      	add	sp, #12
 8002632:	bcf0      	pop	{r4, r5, r6, r7}
 8002634:	46bb      	mov	fp, r7
 8002636:	46b2      	mov	sl, r6
 8002638:	46a9      	mov	r9, r5
 800263a:	46a0      	mov	r8, r4
 800263c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800263e:	464c      	mov	r4, r9
 8002640:	40ac      	lsls	r4, r5
 8002642:	0025      	movs	r5, r4
 8002644:	e7a1      	b.n	800258a <HAL_GPIO_DeInit+0x3a>
 8002646:	2402      	movs	r4, #2
 8002648:	40ac      	lsls	r4, r5
 800264a:	0025      	movs	r5, r4
 800264c:	e79d      	b.n	800258a <HAL_GPIO_DeInit+0x3a>
 800264e:	465c      	mov	r4, fp
 8002650:	40ac      	lsls	r4, r5
 8002652:	0025      	movs	r5, r4
 8002654:	e799      	b.n	800258a <HAL_GPIO_DeInit+0x3a>
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	40021800 	.word	0x40021800
 800265c:	50000400 	.word	0x50000400
 8002660:	50000800 	.word	0x50000800
 8002664:	50000c00 	.word	0x50000c00

08002668 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002668:	6900      	ldr	r0, [r0, #16]
 800266a:	4008      	ands	r0, r1
 800266c:	1e43      	subs	r3, r0, #1
 800266e:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002670:	b2c0      	uxtb	r0, r0
}
 8002672:	4770      	bx	lr

08002674 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002674:	2a00      	cmp	r2, #0
 8002676:	d001      	beq.n	800267c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002678:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800267a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800267c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800267e:	e7fc      	b.n	800267a <HAL_GPIO_WritePin+0x6>

08002680 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002680:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002682:	4c13      	ldr	r4, [pc, #76]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8002684:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8002686:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002688:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800268a:	4013      	ands	r3, r2
 800268c:	4303      	orrs	r3, r0
 800268e:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4298      	cmp	r0, r3
 8002696:	d001      	beq.n	800269c <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8002698:	0028      	movs	r0, r5
 800269a:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0x58>)
 800269e:	490f      	ldr	r1, [pc, #60]	; (80026dc <HAL_PWREx_ControlVoltageScaling+0x5c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	0058      	lsls	r0, r3, #1
 80026a4:	18c0      	adds	r0, r0, r3
 80026a6:	0040      	lsls	r0, r0, #1
 80026a8:	f7fd fd3e 	bl	8000128 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026ac:	2280      	movs	r2, #128	; 0x80
 80026ae:	6963      	ldr	r3, [r4, #20]
 80026b0:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80026b2:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026b4:	4213      	tst	r3, r2
 80026b6:	d102      	bne.n	80026be <HAL_PWREx_ControlVoltageScaling+0x3e>
 80026b8:	e7ee      	b.n	8002698 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d005      	beq.n	80026ca <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026be:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 80026c0:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026c2:	4213      	tst	r3, r2
 80026c4:	d1f9      	bne.n	80026ba <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 80026c6:	2500      	movs	r5, #0
 80026c8:	e7e6      	b.n	8002698 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 80026ca:	2503      	movs	r5, #3
 80026cc:	e7e4      	b.n	8002698 <HAL_PWREx_ControlVoltageScaling+0x18>
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	40007000 	.word	0x40007000
 80026d4:	fffff9ff 	.word	0xfffff9ff
 80026d8:	20000000 	.word	0x20000000
 80026dc:	000f4240 	.word	0x000f4240

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e2:	46ce      	mov	lr, r9
 80026e4:	4647      	mov	r7, r8
 80026e6:	b580      	push	{r7, lr}
 80026e8:	0004      	movs	r4, r0
 80026ea:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026ec:	2800      	cmp	r0, #0
 80026ee:	d100      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
 80026f0:	e0f9      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	6803      	ldr	r3, [r0, #0]
 80026f4:	07da      	lsls	r2, r3, #31
 80026f6:	d531      	bpl.n	800275c <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f8:	2238      	movs	r2, #56	; 0x38
 80026fa:	49c5      	ldr	r1, [pc, #788]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 80026fc:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026fe:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002700:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002702:	2a10      	cmp	r2, #16
 8002704:	d100      	bne.n	8002708 <HAL_RCC_OscConfig+0x28>
 8002706:	e0f4      	b.n	80028f2 <HAL_RCC_OscConfig+0x212>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002708:	2a08      	cmp	r2, #8
 800270a:	d100      	bne.n	800270e <HAL_RCC_OscConfig+0x2e>
 800270c:	e0f5      	b.n	80028fa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270e:	2280      	movs	r2, #128	; 0x80
 8002710:	6863      	ldr	r3, [r4, #4]
 8002712:	0252      	lsls	r2, r2, #9
 8002714:	4293      	cmp	r3, r2
 8002716:	d100      	bne.n	800271a <HAL_RCC_OscConfig+0x3a>
 8002718:	e102      	b.n	8002920 <HAL_RCC_OscConfig+0x240>
 800271a:	21a0      	movs	r1, #160	; 0xa0
 800271c:	02c9      	lsls	r1, r1, #11
 800271e:	428b      	cmp	r3, r1
 8002720:	d100      	bne.n	8002724 <HAL_RCC_OscConfig+0x44>
 8002722:	e1dd      	b.n	8002ae0 <HAL_RCC_OscConfig+0x400>
 8002724:	4dba      	ldr	r5, [pc, #744]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002726:	49bb      	ldr	r1, [pc, #748]	; (8002a14 <HAL_RCC_OscConfig+0x334>)
 8002728:	682a      	ldr	r2, [r5, #0]
 800272a:	400a      	ands	r2, r1
 800272c:	602a      	str	r2, [r5, #0]
 800272e:	682a      	ldr	r2, [r5, #0]
 8002730:	49b9      	ldr	r1, [pc, #740]	; (8002a18 <HAL_RCC_OscConfig+0x338>)
 8002732:	400a      	ands	r2, r1
 8002734:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002736:	2b00      	cmp	r3, #0
 8002738:	d000      	beq.n	800273c <HAL_RCC_OscConfig+0x5c>
 800273a:	e0f5      	b.n	8002928 <HAL_RCC_OscConfig+0x248>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7ff fb34 	bl	8001da8 <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002740:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002742:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002744:	02bf      	lsls	r7, r7, #10
 8002746:	e005      	b.n	8002754 <HAL_RCC_OscConfig+0x74>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002748:	f7ff fb2e 	bl	8001da8 <HAL_GetTick>
 800274c:	1b80      	subs	r0, r0, r6
 800274e:	2864      	cmp	r0, #100	; 0x64
 8002750:	d900      	bls.n	8002754 <HAL_RCC_OscConfig+0x74>
 8002752:	e13d      	b.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002754:	682b      	ldr	r3, [r5, #0]
 8002756:	423b      	tst	r3, r7
 8002758:	d1f6      	bne.n	8002748 <HAL_RCC_OscConfig+0x68>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275a:	6823      	ldr	r3, [r4, #0]
 800275c:	079a      	lsls	r2, r3, #30
 800275e:	d52c      	bpl.n	80027ba <HAL_RCC_OscConfig+0xda>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002760:	2338      	movs	r3, #56	; 0x38
 8002762:	4aab      	ldr	r2, [pc, #684]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002764:	6891      	ldr	r1, [r2, #8]
 8002766:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002768:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800276a:	2b10      	cmp	r3, #16
 800276c:	d100      	bne.n	8002770 <HAL_RCC_OscConfig+0x90>
 800276e:	e0ec      	b.n	800294a <HAL_RCC_OscConfig+0x26a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002770:	2b00      	cmp	r3, #0
 8002772:	d000      	beq.n	8002776 <HAL_RCC_OscConfig+0x96>
 8002774:	e0ee      	b.n	8002954 <HAL_RCC_OscConfig+0x274>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002776:	6813      	ldr	r3, [r2, #0]
 8002778:	055b      	lsls	r3, r3, #21
 800277a:	d500      	bpl.n	800277e <HAL_RCC_OscConfig+0x9e>
 800277c:	e0af      	b.n	80028de <HAL_RCC_OscConfig+0x1fe>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277e:	6851      	ldr	r1, [r2, #4]
 8002780:	6963      	ldr	r3, [r4, #20]
 8002782:	48a6      	ldr	r0, [pc, #664]	; (8002a1c <HAL_RCC_OscConfig+0x33c>)
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	4001      	ands	r1, r0
 8002788:	430b      	orrs	r3, r1
 800278a:	6053      	str	r3, [r2, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800278c:	4aa0      	ldr	r2, [pc, #640]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 800278e:	49a4      	ldr	r1, [pc, #656]	; (8002a20 <HAL_RCC_OscConfig+0x340>)
 8002790:	6813      	ldr	r3, [r2, #0]
 8002792:	400b      	ands	r3, r1
 8002794:	6921      	ldr	r1, [r4, #16]
 8002796:	430b      	orrs	r3, r1
 8002798:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800279a:	6813      	ldr	r3, [r2, #0]
 800279c:	4aa1      	ldr	r2, [pc, #644]	; (8002a24 <HAL_RCC_OscConfig+0x344>)
 800279e:	049b      	lsls	r3, r3, #18
 80027a0:	0f5b      	lsrs	r3, r3, #29
 80027a2:	40da      	lsrs	r2, r3
 80027a4:	0013      	movs	r3, r2
 80027a6:	4aa0      	ldr	r2, [pc, #640]	; (8002a28 <HAL_RCC_OscConfig+0x348>)
 80027a8:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027aa:	4ba0      	ldr	r3, [pc, #640]	; (8002a2c <HAL_RCC_OscConfig+0x34c>)
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	f7ff fab5 	bl	8001d1c <HAL_InitTick>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d000      	beq.n	80027b8 <HAL_RCC_OscConfig+0xd8>
 80027b6:	e096      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	071a      	lsls	r2, r3, #28
 80027bc:	d471      	bmi.n	80028a2 <HAL_RCC_OscConfig+0x1c2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027be:	075b      	lsls	r3, r3, #29
 80027c0:	d545      	bpl.n	800284e <HAL_RCC_OscConfig+0x16e>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80027c2:	2338      	movs	r3, #56	; 0x38
 80027c4:	4a92      	ldr	r2, [pc, #584]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 80027c6:	6891      	ldr	r1, [r2, #8]
 80027c8:	400b      	ands	r3, r1
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d100      	bne.n	80027d0 <HAL_RCC_OscConfig+0xf0>
 80027ce:	e0e7      	b.n	80029a0 <HAL_RCC_OscConfig+0x2c0>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027d0:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80027d2:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027d4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027d6:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80027d8:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027da:	4219      	tst	r1, r3
 80027dc:	d108      	bne.n	80027f0 <HAL_RCC_OscConfig+0x110>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027e0:	4319      	orrs	r1, r3
 80027e2:	63d1      	str	r1, [r2, #60]	; 0x3c
 80027e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027e6:	4013      	ands	r3, r2
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 80027ec:	2301      	movs	r3, #1
 80027ee:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f0:	2780      	movs	r7, #128	; 0x80
 80027f2:	4e8f      	ldr	r6, [pc, #572]	; (8002a30 <HAL_RCC_OscConfig+0x350>)
 80027f4:	007f      	lsls	r7, r7, #1
 80027f6:	6833      	ldr	r3, [r6, #0]
 80027f8:	423b      	tst	r3, r7
 80027fa:	d100      	bne.n	80027fe <HAL_RCC_OscConfig+0x11e>
 80027fc:	e0d9      	b.n	80029b2 <HAL_RCC_OscConfig+0x2d2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027fe:	68a3      	ldr	r3, [r4, #8]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d100      	bne.n	8002806 <HAL_RCC_OscConfig+0x126>
 8002804:	e128      	b.n	8002a58 <HAL_RCC_OscConfig+0x378>
 8002806:	2b05      	cmp	r3, #5
 8002808:	d100      	bne.n	800280c <HAL_RCC_OscConfig+0x12c>
 800280a:	e1c8      	b.n	8002b9e <HAL_RCC_OscConfig+0x4be>
 800280c:	2101      	movs	r1, #1
 800280e:	4e80      	ldr	r6, [pc, #512]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002810:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8002812:	438a      	bics	r2, r1
 8002814:	65f2      	str	r2, [r6, #92]	; 0x5c
 8002816:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8002818:	3103      	adds	r1, #3
 800281a:	438a      	bics	r2, r1
 800281c:	65f2      	str	r2, [r6, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800281e:	2b00      	cmp	r3, #0
 8002820:	d000      	beq.n	8002824 <HAL_RCC_OscConfig+0x144>
 8002822:	e11d      	b.n	8002a60 <HAL_RCC_OscConfig+0x380>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7ff fac0 	bl	8001da8 <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002828:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 800282a:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800282c:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	4d81      	ldr	r5, [pc, #516]	; (8002a34 <HAL_RCC_OscConfig+0x354>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002830:	e005      	b.n	800283e <HAL_RCC_OscConfig+0x15e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7ff fab9 	bl	8001da8 <HAL_GetTick>
 8002836:	1bc0      	subs	r0, r0, r7
 8002838:	42a8      	cmp	r0, r5
 800283a:	d900      	bls.n	800283e <HAL_RCC_OscConfig+0x15e>
 800283c:	e0c8      	b.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800283e:	4642      	mov	r2, r8
 8002840:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8002842:	421a      	tst	r2, r3
 8002844:	d1f5      	bne.n	8002832 <HAL_RCC_OscConfig+0x152>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002846:	464b      	mov	r3, r9
 8002848:	2b01      	cmp	r3, #1
 800284a:	d100      	bne.n	800284e <HAL_RCC_OscConfig+0x16e>
 800284c:	e161      	b.n	8002b12 <HAL_RCC_OscConfig+0x432>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800284e:	69e3      	ldr	r3, [r4, #28]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d024      	beq.n	800289e <HAL_RCC_OscConfig+0x1be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002854:	2238      	movs	r2, #56	; 0x38
 8002856:	4d6e      	ldr	r5, [pc, #440]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002858:	68a9      	ldr	r1, [r5, #8]
 800285a:	400a      	ands	r2, r1
 800285c:	2a10      	cmp	r2, #16
 800285e:	d100      	bne.n	8002862 <HAL_RCC_OscConfig+0x182>
 8002860:	e110      	b.n	8002a84 <HAL_RCC_OscConfig+0x3a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002862:	2b02      	cmp	r3, #2
 8002864:	d100      	bne.n	8002868 <HAL_RCC_OscConfig+0x188>
 8002866:	e15a      	b.n	8002b1e <HAL_RCC_OscConfig+0x43e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002868:	682b      	ldr	r3, [r5, #0]
 800286a:	4a73      	ldr	r2, [pc, #460]	; (8002a38 <HAL_RCC_OscConfig+0x358>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800286c:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800286e:	4013      	ands	r3, r2
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002870:	2203      	movs	r2, #3
        __HAL_RCC_PLL_DISABLE();
 8002872:	602b      	str	r3, [r5, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002874:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002876:	04b6      	lsls	r6, r6, #18
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002878:	4393      	bics	r3, r2
 800287a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800287c:	68eb      	ldr	r3, [r5, #12]
 800287e:	4a6f      	ldr	r2, [pc, #444]	; (8002a3c <HAL_RCC_OscConfig+0x35c>)
 8002880:	4013      	ands	r3, r2
 8002882:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002884:	f7ff fa90 	bl	8001da8 <HAL_GetTick>
 8002888:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800288a:	e005      	b.n	8002898 <HAL_RCC_OscConfig+0x1b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288c:	f7ff fa8c 	bl	8001da8 <HAL_GetTick>
 8002890:	1b00      	subs	r0, r0, r4
 8002892:	2802      	cmp	r0, #2
 8002894:	d900      	bls.n	8002898 <HAL_RCC_OscConfig+0x1b8>
 8002896:	e09b      	b.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	4233      	tst	r3, r6
 800289c:	d1f6      	bne.n	800288c <HAL_RCC_OscConfig+0x1ac>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800289e:	2000      	movs	r0, #0
 80028a0:	e022      	b.n	80028e8 <HAL_RCC_OscConfig+0x208>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80028a2:	2238      	movs	r2, #56	; 0x38
 80028a4:	4d5a      	ldr	r5, [pc, #360]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 80028a6:	68a9      	ldr	r1, [r5, #8]
 80028a8:	400a      	ands	r2, r1
 80028aa:	2a18      	cmp	r2, #24
 80028ac:	d02f      	beq.n	800290e <HAL_RCC_OscConfig+0x22e>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ae:	69a3      	ldr	r3, [r4, #24]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d100      	bne.n	80028b6 <HAL_RCC_OscConfig+0x1d6>
 80028b4:	e08e      	b.n	80029d4 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_LSI_ENABLE();
 80028b6:	2201      	movs	r2, #1
 80028b8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ba:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 80028bc:	4313      	orrs	r3, r2
 80028be:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80028c0:	f7ff fa72 	bl	8001da8 <HAL_GetTick>
 80028c4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c6:	e005      	b.n	80028d4 <HAL_RCC_OscConfig+0x1f4>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c8:	f7ff fa6e 	bl	8001da8 <HAL_GetTick>
 80028cc:	1b80      	subs	r0, r0, r6
 80028ce:	2802      	cmp	r0, #2
 80028d0:	d900      	bls.n	80028d4 <HAL_RCC_OscConfig+0x1f4>
 80028d2:	e07d      	b.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80028d6:	421f      	tst	r7, r3
 80028d8:	d0f6      	beq.n	80028c8 <HAL_RCC_OscConfig+0x1e8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	e76f      	b.n	80027be <HAL_RCC_OscConfig+0xde>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028de:	68e3      	ldr	r3, [r4, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d000      	beq.n	80028e6 <HAL_RCC_OscConfig+0x206>
 80028e4:	e74b      	b.n	800277e <HAL_RCC_OscConfig+0x9e>
    return HAL_ERROR;
 80028e6:	2001      	movs	r0, #1
}
 80028e8:	b003      	add	sp, #12
 80028ea:	bcc0      	pop	{r6, r7}
 80028ec:	46b9      	mov	r9, r7
 80028ee:	46b0      	mov	r8, r6
 80028f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f2:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80028f4:	078a      	lsls	r2, r1, #30
 80028f6:	d000      	beq.n	80028fa <HAL_RCC_OscConfig+0x21a>
 80028f8:	e709      	b.n	800270e <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fa:	4a45      	ldr	r2, [pc, #276]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	0392      	lsls	r2, r2, #14
 8002900:	d400      	bmi.n	8002904 <HAL_RCC_OscConfig+0x224>
 8002902:	e72b      	b.n	800275c <HAL_RCC_OscConfig+0x7c>
 8002904:	6862      	ldr	r2, [r4, #4]
 8002906:	2a00      	cmp	r2, #0
 8002908:	d000      	beq.n	800290c <HAL_RCC_OscConfig+0x22c>
 800290a:	e727      	b.n	800275c <HAL_RCC_OscConfig+0x7c>
 800290c:	e7eb      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800290e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002910:	0792      	lsls	r2, r2, #30
 8002912:	d400      	bmi.n	8002916 <HAL_RCC_OscConfig+0x236>
 8002914:	e753      	b.n	80027be <HAL_RCC_OscConfig+0xde>
 8002916:	69a2      	ldr	r2, [r4, #24]
 8002918:	2a00      	cmp	r2, #0
 800291a:	d000      	beq.n	800291e <HAL_RCC_OscConfig+0x23e>
 800291c:	e74f      	b.n	80027be <HAL_RCC_OscConfig+0xde>
 800291e:	e7e2      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002920:	4a3b      	ldr	r2, [pc, #236]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002922:	6811      	ldr	r1, [r2, #0]
 8002924:	430b      	orrs	r3, r1
 8002926:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002928:	f7ff fa3e 	bl	8001da8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800292c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800292e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002930:	4f37      	ldr	r7, [pc, #220]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002932:	02b6      	lsls	r6, r6, #10
 8002934:	e004      	b.n	8002940 <HAL_RCC_OscConfig+0x260>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002936:	f7ff fa37 	bl	8001da8 <HAL_GetTick>
 800293a:	1b40      	subs	r0, r0, r5
 800293c:	2864      	cmp	r0, #100	; 0x64
 800293e:	d847      	bhi.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4233      	tst	r3, r6
 8002944:	d0f7      	beq.n	8002936 <HAL_RCC_OscConfig+0x256>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	e708      	b.n	800275c <HAL_RCC_OscConfig+0x7c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800294a:	3b0d      	subs	r3, #13
 800294c:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800294e:	2b02      	cmp	r3, #2
 8002950:	d100      	bne.n	8002954 <HAL_RCC_OscConfig+0x274>
 8002952:	e0cf      	b.n	8002af4 <HAL_RCC_OscConfig+0x414>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002954:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002956:	4d2e      	ldr	r5, [pc, #184]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002958:	2b00      	cmp	r3, #0
 800295a:	d04e      	beq.n	80029fa <HAL_RCC_OscConfig+0x31a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800295c:	682b      	ldr	r3, [r5, #0]
 800295e:	4a30      	ldr	r2, [pc, #192]	; (8002a20 <HAL_RCC_OscConfig+0x340>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002960:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002962:	4013      	ands	r3, r2
 8002964:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002966:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002968:	4313      	orrs	r3, r2
 800296a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	682a      	ldr	r2, [r5, #0]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4313      	orrs	r3, r2
 8002974:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002976:	f7ff fa17 	bl	8001da8 <HAL_GetTick>
 800297a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800297c:	e004      	b.n	8002988 <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297e:	f7ff fa13 	bl	8001da8 <HAL_GetTick>
 8002982:	1b80      	subs	r0, r0, r6
 8002984:	2802      	cmp	r0, #2
 8002986:	d823      	bhi.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002988:	682b      	ldr	r3, [r5, #0]
 800298a:	423b      	tst	r3, r7
 800298c:	d0f7      	beq.n	800297e <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	686a      	ldr	r2, [r5, #4]
 8002990:	6963      	ldr	r3, [r4, #20]
 8002992:	4922      	ldr	r1, [pc, #136]	; (8002a1c <HAL_RCC_OscConfig+0x33c>)
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	400a      	ands	r2, r1
 8002998:	4313      	orrs	r3, r2
 800299a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	e70c      	b.n	80027ba <HAL_RCC_OscConfig+0xda>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80029a0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80029a2:	079b      	lsls	r3, r3, #30
 80029a4:	d400      	bmi.n	80029a8 <HAL_RCC_OscConfig+0x2c8>
 80029a6:	e752      	b.n	800284e <HAL_RCC_OscConfig+0x16e>
 80029a8:	68a3      	ldr	r3, [r4, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d000      	beq.n	80029b0 <HAL_RCC_OscConfig+0x2d0>
 80029ae:	e74e      	b.n	800284e <HAL_RCC_OscConfig+0x16e>
 80029b0:	e799      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029b2:	6833      	ldr	r3, [r6, #0]
 80029b4:	433b      	orrs	r3, r7
 80029b6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80029b8:	f7ff f9f6 	bl	8001da8 <HAL_GetTick>
 80029bc:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029be:	6833      	ldr	r3, [r6, #0]
 80029c0:	423b      	tst	r3, r7
 80029c2:	d000      	beq.n	80029c6 <HAL_RCC_OscConfig+0x2e6>
 80029c4:	e71b      	b.n	80027fe <HAL_RCC_OscConfig+0x11e>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c6:	f7ff f9ef 	bl	8001da8 <HAL_GetTick>
 80029ca:	1b40      	subs	r0, r0, r5
 80029cc:	2802      	cmp	r0, #2
 80029ce:	d9f6      	bls.n	80029be <HAL_RCC_OscConfig+0x2de>
            return HAL_TIMEOUT;
 80029d0:	2003      	movs	r0, #3
 80029d2:	e789      	b.n	80028e8 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_LSI_DISABLE();
 80029d4:	2201      	movs	r2, #1
 80029d6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d8:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 80029da:	4393      	bics	r3, r2
 80029dc:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80029de:	f7ff f9e3 	bl	8001da8 <HAL_GetTick>
 80029e2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029e4:	e004      	b.n	80029f0 <HAL_RCC_OscConfig+0x310>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e6:	f7ff f9df 	bl	8001da8 <HAL_GetTick>
 80029ea:	1b80      	subs	r0, r0, r6
 80029ec:	2802      	cmp	r0, #2
 80029ee:	d8ef      	bhi.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029f0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80029f2:	421f      	tst	r7, r3
 80029f4:	d1f7      	bne.n	80029e6 <HAL_RCC_OscConfig+0x306>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	e6e1      	b.n	80027be <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 80029fa:	682b      	ldr	r3, [r5, #0]
 80029fc:	4a10      	ldr	r2, [pc, #64]	; (8002a40 <HAL_RCC_OscConfig+0x360>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029fe:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8002a00:	4013      	ands	r3, r2
 8002a02:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a04:	f7ff f9d0 	bl	8001da8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a08:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8002a0a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a0c:	e01f      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	40021000 	.word	0x40021000
 8002a14:	fffeffff 	.word	0xfffeffff
 8002a18:	fffbffff 	.word	0xfffbffff
 8002a1c:	ffff80ff 	.word	0xffff80ff
 8002a20:	ffffc7ff 	.word	0xffffc7ff
 8002a24:	00f42400 	.word	0x00f42400
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	20000068 	.word	0x20000068
 8002a30:	40007000 	.word	0x40007000
 8002a34:	00001388 	.word	0x00001388
 8002a38:	feffffff 	.word	0xfeffffff
 8002a3c:	eefeffff 	.word	0xeefeffff
 8002a40:	fffffeff 	.word	0xfffffeff
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a44:	f7ff f9b0 	bl	8001da8 <HAL_GetTick>
 8002a48:	1b80      	subs	r0, r0, r6
 8002a4a:	2802      	cmp	r0, #2
 8002a4c:	d8c0      	bhi.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a4e:	682b      	ldr	r3, [r5, #0]
 8002a50:	423b      	tst	r3, r7
 8002a52:	d1f7      	bne.n	8002a44 <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	e6b0      	b.n	80027ba <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a58:	4956      	ldr	r1, [pc, #344]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002a5a:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	65cb      	str	r3, [r1, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8002a60:	f7ff f9a2 	bl	8001da8 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a64:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
        tickstart = HAL_GetTick();
 8002a66:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a68:	4698      	mov	r8, r3
 8002a6a:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6c:	4d52      	ldr	r5, [pc, #328]	; (8002bb8 <HAL_RCC_OscConfig+0x4d8>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a6e:	e004      	b.n	8002a7a <HAL_RCC_OscConfig+0x39a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a70:	f7ff f99a 	bl	8001da8 <HAL_GetTick>
 8002a74:	1b80      	subs	r0, r0, r6
 8002a76:	42a8      	cmp	r0, r5
 8002a78:	d8aa      	bhi.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a7a:	4643      	mov	r3, r8
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	421f      	tst	r7, r3
 8002a80:	d0f6      	beq.n	8002a70 <HAL_RCC_OscConfig+0x390>
 8002a82:	e6e0      	b.n	8002846 <HAL_RCC_OscConfig+0x166>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d100      	bne.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
 8002a88:	e72d      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	2303      	movs	r3, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8002a8c:	68ea      	ldr	r2, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	6a21      	ldr	r1, [r4, #32]
 8002a90:	4013      	ands	r3, r2
 8002a92:	428b      	cmp	r3, r1
 8002a94:	d000      	beq.n	8002a98 <HAL_RCC_OscConfig+0x3b8>
 8002a96:	e726      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a98:	2370      	movs	r3, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a9c:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	428b      	cmp	r3, r1
 8002aa0:	d000      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x3c4>
 8002aa2:	e720      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aa4:	21fe      	movs	r1, #254	; 0xfe
 8002aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002aa8:	01c9      	lsls	r1, r1, #7
 8002aaa:	4011      	ands	r1, r2
 8002aac:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aae:	4299      	cmp	r1, r3
 8002ab0:	d000      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x3d4>
 8002ab2:	e718      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ab4:	23f8      	movs	r3, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ab6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ab8:	039b      	lsls	r3, r3, #14
 8002aba:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002abc:	428b      	cmp	r3, r1
 8002abe:	d000      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x3e2>
 8002ac0:	e711      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ac2:	23e0      	movs	r3, #224	; 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ac4:	6b21      	ldr	r1, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ac6:	051b      	lsls	r3, r3, #20
 8002ac8:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002aca:	428b      	cmp	r3, r1
 8002acc:	d000      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x3f0>
 8002ace:	e70a      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ad0:	6b63      	ldr	r3, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ad2:	0f52      	lsrs	r2, r2, #29
 8002ad4:	0752      	lsls	r2, r2, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d000      	beq.n	8002adc <HAL_RCC_OscConfig+0x3fc>
 8002ada:	e704      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
  return HAL_OK;
 8002adc:	2000      	movs	r0, #0
 8002ade:	e703      	b.n	80028e8 <HAL_RCC_OscConfig+0x208>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae0:	2180      	movs	r1, #128	; 0x80
 8002ae2:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002ae4:	02c9      	lsls	r1, r1, #11
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	4301      	orrs	r1, r0
 8002aea:	6019      	str	r1, [r3, #0]
 8002aec:	6819      	ldr	r1, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af2:	e719      	b.n	8002928 <HAL_RCC_OscConfig+0x248>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af4:	6813      	ldr	r3, [r2, #0]
 8002af6:	055b      	lsls	r3, r3, #21
 8002af8:	d503      	bpl.n	8002b02 <HAL_RCC_OscConfig+0x422>
 8002afa:	68e3      	ldr	r3, [r4, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d100      	bne.n	8002b02 <HAL_RCC_OscConfig+0x422>
 8002b00:	e6f1      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b02:	6851      	ldr	r1, [r2, #4]
 8002b04:	6963      	ldr	r3, [r4, #20]
 8002b06:	482d      	ldr	r0, [pc, #180]	; (8002bbc <HAL_RCC_OscConfig+0x4dc>)
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	4001      	ands	r1, r0
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b10:	e64b      	b.n	80027aa <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b12:	4a28      	ldr	r2, [pc, #160]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002b14:	492a      	ldr	r1, [pc, #168]	; (8002bc0 <HAL_RCC_OscConfig+0x4e0>)
 8002b16:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002b18:	400b      	ands	r3, r1
 8002b1a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002b1c:	e697      	b.n	800284e <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	682b      	ldr	r3, [r5, #0]
 8002b20:	4a28      	ldr	r2, [pc, #160]	; (8002bc4 <HAL_RCC_OscConfig+0x4e4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b22:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002b24:	4013      	ands	r3, r2
 8002b26:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b28:	f7ff f93e 	bl	8001da8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b2c:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8002b2e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b30:	e005      	b.n	8002b3e <HAL_RCC_OscConfig+0x45e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b32:	f7ff f939 	bl	8001da8 <HAL_GetTick>
 8002b36:	1b80      	subs	r0, r0, r6
 8002b38:	2802      	cmp	r0, #2
 8002b3a:	d900      	bls.n	8002b3e <HAL_RCC_OscConfig+0x45e>
 8002b3c:	e748      	b.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b3e:	682b      	ldr	r3, [r5, #0]
 8002b40:	423b      	tst	r3, r7
 8002b42:	d1f6      	bne.n	8002b32 <HAL_RCC_OscConfig+0x452>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b46:	6a23      	ldr	r3, [r4, #32]
 8002b48:	68ea      	ldr	r2, [r5, #12]
 8002b4a:	430b      	orrs	r3, r1
 8002b4c:	491e      	ldr	r1, [pc, #120]	; (8002bc8 <HAL_RCC_OscConfig+0x4e8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4e:	4e19      	ldr	r6, [pc, #100]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b50:	400a      	ands	r2, r1
 8002b52:	4313      	orrs	r3, r2
 8002b54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b56:	4313      	orrs	r3, r2
 8002b58:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b62:	0212      	lsls	r2, r2, #8
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	682a      	ldr	r2, [r5, #0]
 8002b6c:	045b      	lsls	r3, r3, #17
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	68ea      	ldr	r2, [r5, #12]
 8002b76:	055b      	lsls	r3, r3, #21
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f914 	bl	8001da8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b80:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8002b82:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b84:	04ad      	lsls	r5, r5, #18
 8002b86:	e005      	b.n	8002b94 <HAL_RCC_OscConfig+0x4b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b88:	f7ff f90e 	bl	8001da8 <HAL_GetTick>
 8002b8c:	1b00      	subs	r0, r0, r4
 8002b8e:	2802      	cmp	r0, #2
 8002b90:	d900      	bls.n	8002b94 <HAL_RCC_OscConfig+0x4b4>
 8002b92:	e71d      	b.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b94:	6833      	ldr	r3, [r6, #0]
 8002b96:	422b      	tst	r3, r5
 8002b98:	d0f6      	beq.n	8002b88 <HAL_RCC_OscConfig+0x4a8>
  return HAL_OK;
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	e6a4      	b.n	80028e8 <HAL_RCC_OscConfig+0x208>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b9e:	2104      	movs	r1, #4
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <HAL_RCC_OscConfig+0x4d4>)
 8002ba2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ba8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002baa:	3903      	subs	r1, #3
 8002bac:	430a      	orrs	r2, r1
 8002bae:	65da      	str	r2, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bb0:	e756      	b.n	8002a60 <HAL_RCC_OscConfig+0x380>
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	00001388 	.word	0x00001388
 8002bbc:	ffff80ff 	.word	0xffff80ff
 8002bc0:	efffffff 	.word	0xefffffff
 8002bc4:	feffffff 	.word	0xfeffffff
 8002bc8:	11c1808c 	.word	0x11c1808c

08002bcc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bcc:	2338      	movs	r3, #56	; 0x38
 8002bce:	4a20      	ldr	r2, [pc, #128]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8002bd0:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bd2:	6891      	ldr	r1, [r2, #8]
 8002bd4:	420b      	tst	r3, r1
 8002bd6:	d105      	bne.n	8002be4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002bd8:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002bda:	481e      	ldr	r0, [pc, #120]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x88>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002bdc:	049b      	lsls	r3, r3, #18
 8002bde:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002be0:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8002be2:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002be4:	6891      	ldr	r1, [r2, #8]
 8002be6:	4019      	ands	r1, r3
 8002be8:	2908      	cmp	r1, #8
 8002bea:	d011      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bec:	6891      	ldr	r1, [r2, #8]
 8002bee:	4019      	ands	r1, r3
 8002bf0:	2910      	cmp	r1, #16
 8002bf2:	d00f      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002bf4:	6891      	ldr	r1, [r2, #8]
 8002bf6:	4019      	ands	r1, r3
 8002bf8:	2920      	cmp	r1, #32
 8002bfa:	d021      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bfc:	6890      	ldr	r0, [r2, #8]
 8002bfe:	4018      	ands	r0, r3
    sysclockfreq = 0U;
 8002c00:	3818      	subs	r0, #24
 8002c02:	4243      	negs	r3, r0
 8002c04:	4158      	adcs	r0, r3
 8002c06:	23fa      	movs	r3, #250	; 0xfa
 8002c08:	4240      	negs	r0, r0
 8002c0a:	01db      	lsls	r3, r3, #7
 8002c0c:	4018      	ands	r0, r3
 8002c0e:	e7e8      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8002c10:	4811      	ldr	r0, [pc, #68]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002c12:	e7e6      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c14:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c16:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c18:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002c1a:	68d0      	ldr	r0, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c1c:	0649      	lsls	r1, r1, #25
 8002c1e:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002c20:	0440      	lsls	r0, r0, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c22:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002c24:	0e44      	lsrs	r4, r0, #25
    switch (pllsource)
 8002c26:	079b      	lsls	r3, r3, #30
 8002c28:	d00d      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002c2a:	480a      	ldr	r0, [pc, #40]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x88>)
 8002c2c:	f7fd fa7c 	bl	8000128 <__udivsi3>
 8002c30:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x84>)
 8002c34:	68d9      	ldr	r1, [r3, #12]
 8002c36:	0f49      	lsrs	r1, r1, #29
 8002c38:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8002c3a:	f7fd fa75 	bl	8000128 <__udivsi3>
  return sysclockfreq;
 8002c3e:	e7d0      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8002c40:	2080      	movs	r0, #128	; 0x80
 8002c42:	0200      	lsls	r0, r0, #8
 8002c44:	e7cd      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c46:	4804      	ldr	r0, [pc, #16]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002c48:	f7fd fa6e 	bl	8000128 <__udivsi3>
 8002c4c:	4360      	muls	r0, r4
        break;
 8002c4e:	e7f0      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x66>
 8002c50:	40021000 	.word	0x40021000
 8002c54:	00f42400 	.word	0x00f42400
 8002c58:	007a1200 	.word	0x007a1200

08002c5c <HAL_RCC_ClockConfig>:
{
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	46ce      	mov	lr, r9
 8002c60:	4647      	mov	r7, r8
 8002c62:	0005      	movs	r5, r0
 8002c64:	000c      	movs	r4, r1
 8002c66:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	d026      	beq.n	8002cba <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c6c:	2207      	movs	r2, #7
 8002c6e:	4e57      	ldr	r6, [pc, #348]	; (8002dcc <HAL_RCC_ClockConfig+0x170>)
 8002c70:	6833      	ldr	r3, [r6, #0]
 8002c72:	4013      	ands	r3, r2
 8002c74:	428b      	cmp	r3, r1
 8002c76:	d35e      	bcc.n	8002d36 <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	682b      	ldr	r3, [r5, #0]
 8002c7a:	079a      	lsls	r2, r3, #30
 8002c7c:	d50e      	bpl.n	8002c9c <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7e:	075a      	lsls	r2, r3, #29
 8002c80:	d505      	bpl.n	8002c8e <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c82:	22e0      	movs	r2, #224	; 0xe0
 8002c84:	4952      	ldr	r1, [pc, #328]	; (8002dd0 <HAL_RCC_ClockConfig+0x174>)
 8002c86:	01d2      	lsls	r2, r2, #7
 8002c88:	6888      	ldr	r0, [r1, #8]
 8002c8a:	4302      	orrs	r2, r0
 8002c8c:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8e:	4950      	ldr	r1, [pc, #320]	; (8002dd0 <HAL_RCC_ClockConfig+0x174>)
 8002c90:	4850      	ldr	r0, [pc, #320]	; (8002dd4 <HAL_RCC_ClockConfig+0x178>)
 8002c92:	688a      	ldr	r2, [r1, #8]
 8002c94:	4002      	ands	r2, r0
 8002c96:	68a8      	ldr	r0, [r5, #8]
 8002c98:	4302      	orrs	r2, r0
 8002c9a:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9c:	07db      	lsls	r3, r3, #31
 8002c9e:	d52b      	bpl.n	8002cf8 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca0:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca2:	4a4b      	ldr	r2, [pc, #300]	; (8002dd0 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d100      	bne.n	8002caa <HAL_RCC_ClockConfig+0x4e>
 8002ca8:	e07c      	b.n	8002da4 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d007      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d000      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x58>
 8002cb2:	e07d      	b.n	8002db0 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	0552      	lsls	r2, r2, #21
 8002cb8:	d404      	bmi.n	8002cc4 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8002cba:	2001      	movs	r0, #1
 8002cbc:	e037      	b.n	8002d2e <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	0192      	lsls	r2, r2, #6
 8002cc2:	d5fa      	bpl.n	8002cba <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cc4:	2107      	movs	r1, #7
 8002cc6:	4e42      	ldr	r6, [pc, #264]	; (8002dd0 <HAL_RCC_ClockConfig+0x174>)
 8002cc8:	68b2      	ldr	r2, [r6, #8]
 8002cca:	438a      	bics	r2, r1
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002cd0:	f7ff f86a 	bl	8001da8 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd4:	2338      	movs	r3, #56	; 0x38
 8002cd6:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd8:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8002cda:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cdc:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	e004      	b.n	8002cea <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce0:	f7ff f862 	bl	8001da8 <HAL_GetTick>
 8002ce4:	1bc0      	subs	r0, r0, r7
 8002ce6:	4548      	cmp	r0, r9
 8002ce8:	d83b      	bhi.n	8002d62 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	4643      	mov	r3, r8
 8002cec:	68b2      	ldr	r2, [r6, #8]
 8002cee:	401a      	ands	r2, r3
 8002cf0:	686b      	ldr	r3, [r5, #4]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d1f3      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	4e34      	ldr	r6, [pc, #208]	; (8002dcc <HAL_RCC_ClockConfig+0x170>)
 8002cfc:	6833      	ldr	r3, [r6, #0]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	42a3      	cmp	r3, r4
 8002d02:	d838      	bhi.n	8002d76 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	682b      	ldr	r3, [r5, #0]
 8002d06:	075b      	lsls	r3, r3, #29
 8002d08:	d42d      	bmi.n	8002d66 <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d0a:	f7ff ff5f 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002d0e:	4b30      	ldr	r3, [pc, #192]	; (8002dd0 <HAL_RCC_ClockConfig+0x174>)
 8002d10:	4a32      	ldr	r2, [pc, #200]	; (8002ddc <HAL_RCC_ClockConfig+0x180>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	051b      	lsls	r3, r3, #20
 8002d16:	0f1b      	lsrs	r3, r3, #28
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	589b      	ldr	r3, [r3, r2]
 8002d1c:	221f      	movs	r2, #31
 8002d1e:	4013      	ands	r3, r2
 8002d20:	40d8      	lsrs	r0, r3
 8002d22:	4b2f      	ldr	r3, [pc, #188]	; (8002de0 <HAL_RCC_ClockConfig+0x184>)
 8002d24:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002d26:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <HAL_RCC_ClockConfig+0x188>)
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	f7fe fff7 	bl	8001d1c <HAL_InitTick>
}
 8002d2e:	bcc0      	pop	{r6, r7}
 8002d30:	46b9      	mov	r9, r7
 8002d32:	46b0      	mov	r8, r6
 8002d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	6833      	ldr	r3, [r6, #0]
 8002d38:	4393      	bics	r3, r2
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002d3e:	f7ff f833 	bl	8001da8 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d42:	2307      	movs	r3, #7
 8002d44:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8002d48:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4a:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	6833      	ldr	r3, [r6, #0]
 8002d50:	4013      	ands	r3, r2
 8002d52:	42a3      	cmp	r3, r4
 8002d54:	d100      	bne.n	8002d58 <HAL_RCC_ClockConfig+0xfc>
 8002d56:	e78f      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d58:	f7ff f826 	bl	8001da8 <HAL_GetTick>
 8002d5c:	1bc0      	subs	r0, r0, r7
 8002d5e:	4548      	cmp	r0, r9
 8002d60:	d9f4      	bls.n	8002d4c <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8002d62:	2003      	movs	r0, #3
 8002d64:	e7e3      	b.n	8002d2e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d66:	4a1a      	ldr	r2, [pc, #104]	; (8002dd0 <HAL_RCC_ClockConfig+0x174>)
 8002d68:	491f      	ldr	r1, [pc, #124]	; (8002de8 <HAL_RCC_ClockConfig+0x18c>)
 8002d6a:	6893      	ldr	r3, [r2, #8]
 8002d6c:	400b      	ands	r3, r1
 8002d6e:	68e9      	ldr	r1, [r5, #12]
 8002d70:	430b      	orrs	r3, r1
 8002d72:	6093      	str	r3, [r2, #8]
 8002d74:	e7c9      	b.n	8002d0a <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	6833      	ldr	r3, [r6, #0]
 8002d78:	4393      	bics	r3, r2
 8002d7a:	4323      	orrs	r3, r4
 8002d7c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002d7e:	f7ff f813 	bl	8001da8 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d82:	2307      	movs	r3, #7
 8002d84:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d86:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8002d88:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8a:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	6833      	ldr	r3, [r6, #0]
 8002d90:	4013      	ands	r3, r2
 8002d92:	42a3      	cmp	r3, r4
 8002d94:	d0b6      	beq.n	8002d04 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d96:	f7ff f807 	bl	8001da8 <HAL_GetTick>
 8002d9a:	1bc0      	subs	r0, r0, r7
 8002d9c:	4548      	cmp	r0, r9
 8002d9e:	d9f5      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8002da0:	2003      	movs	r0, #3
 8002da2:	e7c4      	b.n	8002d2e <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	0392      	lsls	r2, r2, #14
 8002da8:	d500      	bpl.n	8002dac <HAL_RCC_ClockConfig+0x150>
 8002daa:	e78b      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8002dac:	2001      	movs	r0, #1
 8002dae:	e7be      	b.n	8002d2e <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002db6:	0792      	lsls	r2, r2, #30
 8002db8:	d500      	bpl.n	8002dbc <HAL_RCC_ClockConfig+0x160>
 8002dba:	e783      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	e7b6      	b.n	8002d2e <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dc0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002dc2:	0792      	lsls	r2, r2, #30
 8002dc4:	d500      	bpl.n	8002dc8 <HAL_RCC_ClockConfig+0x16c>
 8002dc6:	e77d      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8002dc8:	2001      	movs	r0, #1
 8002dca:	e7b0      	b.n	8002d2e <HAL_RCC_ClockConfig+0xd2>
 8002dcc:	40022000 	.word	0x40022000
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	fffff0ff 	.word	0xfffff0ff
 8002dd8:	00001388 	.word	0x00001388
 8002ddc:	0801b560 	.word	0x0801b560
 8002de0:	20000000 	.word	0x20000000
 8002de4:	20000068 	.word	0x20000068
 8002de8:	ffff8fff 	.word	0xffff8fff

08002dec <HAL_SPI_MspInit>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002dec:	4770      	bx	lr
 8002dee:	46c0      	nop			; (mov r8, r8)

08002df0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002df0:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002df2:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
 8002df4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002df6:	4798      	blx	r3
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002df8:	bd10      	pop	{r4, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)

08002dfc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002dfe:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 8002e00:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002e02:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e04:	bd10      	pop	{r4, pc}
 8002e06:	46c0      	nop			; (mov r8, r8)

08002e08 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e08:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e0a:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 8002e0c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002e0e:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)

08002e14 <SPI_DMAError>:
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e14:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e16:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002e18:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e1a:	6802      	ldr	r2, [r0, #0]
 8002e1c:	6853      	ldr	r3, [r2, #4]
 8002e1e:	438b      	bics	r3, r1
 8002e20:	6053      	str	r3, [r2, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e22:	2210      	movs	r2, #16
 8002e24:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002e26:	4313      	orrs	r3, r2
 8002e28:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8002e2a:	235d      	movs	r3, #93	; 0x5d
 8002e2c:	3a0f      	subs	r2, #15
 8002e2e:	54c2      	strb	r2, [r0, r3]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8002e30:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002e32:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e34:	bd10      	pop	{r4, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)

08002e38 <SPI_DMAAbortOnError>:
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
  hspi->RxXferCount = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2246      	movs	r2, #70	; 0x46
{
 8002e3c:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e3e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8002e40:	5283      	strh	r3, [r0, r2]
  hspi->TxXferCount = 0U;
 8002e42:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8002e44:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002e46:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e48:	bd10      	pop	{r4, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)

08002e4c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4e:	46d6      	mov	lr, sl
 8002e50:	464f      	mov	r7, r9
 8002e52:	4646      	mov	r6, r8
 8002e54:	b5c0      	push	{r6, r7, lr}
 8002e56:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002e58:	466b      	mov	r3, sp
 8002e5a:	1cdc      	adds	r4, r3, #3
 8002e5c:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002e5e:	0016      	movs	r6, r2
 8002e60:	000f      	movs	r7, r1
  __IO uint8_t  tmpreg8 = 0;
 8002e62:	7023      	strb	r3, [r4, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002e64:	4680      	mov	r8, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e66:	f7fe ff9f 	bl	8001da8 <HAL_GetTick>
 8002e6a:	19f6      	adds	r6, r6, r7
 8002e6c:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8002e6e:	f7fe ff9b 	bl	8001da8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002e72:	4643      	mov	r3, r8
 8002e74:	681d      	ldr	r5, [r3, #0]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e76:	4b37      	ldr	r3, [pc, #220]	; (8002f54 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
  tmp_tickstart = HAL_GetTick();
 8002e78:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	0093      	lsls	r3, r2, #2
 8002e7e:	189a      	adds	r2, r3, r2
 8002e80:	00d3      	lsls	r3, r2, #3
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	0d1b      	lsrs	r3, r3, #20
 8002e86:	4373      	muls	r3, r6
 8002e88:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8002e8a:	23c0      	movs	r3, #192	; 0xc0
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	002a      	movs	r2, r5
 8002e90:	469a      	mov	sl, r3
 8002e92:	1c7b      	adds	r3, r7, #1
 8002e94:	d112      	bne.n	8002ebc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x70>
 8002e96:	21c0      	movs	r1, #192	; 0xc0
 8002e98:	6893      	ldr	r3, [r2, #8]
 8002e9a:	00c9      	lsls	r1, r1, #3
 8002e9c:	420b      	tst	r3, r1
 8002e9e:	d006      	beq.n	8002eae <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002ea0:	7b2b      	ldrb	r3, [r5, #12]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	7023      	strb	r3, [r4, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002ea6:	7823      	ldrb	r3, [r4, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002ea8:	6893      	ldr	r3, [r2, #8]
 8002eaa:	420b      	tst	r3, r1
 8002eac:	d1f8      	bne.n	8002ea0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      }      
      count--;
    }
  }

  return HAL_OK;
 8002eae:	2000      	movs	r0, #0
}
 8002eb0:	b002      	add	sp, #8
 8002eb2:	bce0      	pop	{r5, r6, r7}
 8002eb4:	46ba      	mov	sl, r7
 8002eb6:	46b1      	mov	r9, r6
 8002eb8:	46a8      	mov	r8, r5
 8002eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8002ebc:	6893      	ldr	r3, [r2, #8]
 8002ebe:	4652      	mov	r2, sl
 8002ec0:	4213      	tst	r3, r2
 8002ec2:	d0f4      	beq.n	8002eae <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
      tmpreg8 = *ptmpreg8;
 8002ec4:	7b2b      	ldrb	r3, [r5, #12]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	7023      	strb	r3, [r4, #0]
      UNUSED(tmpreg8);
 8002eca:	7823      	ldrb	r3, [r4, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ecc:	f7fe ff6c 	bl	8001da8 <HAL_GetTick>
 8002ed0:	464b      	mov	r3, r9
 8002ed2:	1ac0      	subs	r0, r0, r3
 8002ed4:	42b0      	cmp	r0, r6
 8002ed6:	d20a      	bcs.n	8002eee <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa2>
      if(count == 0U)
 8002ed8:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002eda:	1e5a      	subs	r2, r3, #1
 8002edc:	4193      	sbcs	r3, r2
 8002ede:	425b      	negs	r3, r3
 8002ee0:	401e      	ands	r6, r3
      count--;
 8002ee2:	9b01      	ldr	r3, [sp, #4]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8002ee8:	4643      	mov	r3, r8
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	e7d1      	b.n	8002e92 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eee:	4643      	mov	r3, r8
 8002ef0:	21e0      	movs	r1, #224	; 0xe0
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ef8:	4641      	mov	r1, r8
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002efa:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002efc:	2282      	movs	r2, #130	; 0x82
 8002efe:	6849      	ldr	r1, [r1, #4]
 8002f00:	0052      	lsls	r2, r2, #1
 8002f02:	4291      	cmp	r1, r2
 8002f04:	d016      	beq.n	8002f34 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f06:	4642      	mov	r2, r8
 8002f08:	2180      	movs	r1, #128	; 0x80
 8002f0a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002f0c:	0189      	lsls	r1, r1, #6
 8002f0e:	428a      	cmp	r2, r1
 8002f10:	d008      	beq.n	8002f24 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
        hspi->State = HAL_SPI_STATE_READY;
 8002f12:	235d      	movs	r3, #93	; 0x5d
 8002f14:	2201      	movs	r2, #1
 8002f16:	4641      	mov	r1, r8
 8002f18:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8002f1e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002f20:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8002f22:	e7c5      	b.n	8002eb0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x64>
          SPI_RESET_CRC(hspi);
 8002f24:	6819      	ldr	r1, [r3, #0]
 8002f26:	480c      	ldr	r0, [pc, #48]	; (8002f58 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10c>)
 8002f28:	4001      	ands	r1, r0
 8002f2a:	6019      	str	r1, [r3, #0]
 8002f2c:	6819      	ldr	r1, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	e7ee      	b.n	8002f12 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f34:	4642      	mov	r2, r8
 8002f36:	2180      	movs	r1, #128	; 0x80
 8002f38:	6892      	ldr	r2, [r2, #8]
 8002f3a:	0209      	lsls	r1, r1, #8
 8002f3c:	428a      	cmp	r2, r1
 8002f3e:	d003      	beq.n	8002f48 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f40:	2180      	movs	r1, #128	; 0x80
 8002f42:	00c9      	lsls	r1, r1, #3
 8002f44:	428a      	cmp	r2, r1
 8002f46:	d1de      	bne.n	8002f06 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
          __HAL_SPI_DISABLE(hspi);
 8002f48:	2140      	movs	r1, #64	; 0x40
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	438a      	bics	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	e7d9      	b.n	8002f06 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	20000000 	.word	0x20000000
 8002f58:	ffffdfff 	.word	0xffffdfff

08002f5c <HAL_SPI_AbortCpltCallback>:
 8002f5c:	4770      	bx	lr
 8002f5e:	46c0      	nop			; (mov r8, r8)

08002f60 <HAL_SPI_MspDeInit>:
 8002f60:	4770      	bx	lr
 8002f62:	46c0      	nop			; (mov r8, r8)

08002f64 <HAL_SPI_TxCpltCallback>:
 8002f64:	4770      	bx	lr
 8002f66:	46c0      	nop			; (mov r8, r8)

08002f68 <HAL_SPI_RxCpltCallback>:
 8002f68:	4770      	bx	lr
 8002f6a:	46c0      	nop			; (mov r8, r8)

08002f6c <HAL_SPI_TxRxCpltCallback>:
 8002f6c:	4770      	bx	lr
 8002f6e:	46c0      	nop			; (mov r8, r8)

08002f70 <HAL_SPI_TxHalfCpltCallback>:
 8002f70:	4770      	bx	lr
 8002f72:	46c0      	nop			; (mov r8, r8)

08002f74 <HAL_SPI_RxHalfCpltCallback>:
 8002f74:	4770      	bx	lr
 8002f76:	46c0      	nop			; (mov r8, r8)

08002f78 <HAL_SPI_TxRxHalfCpltCallback>:
 8002f78:	4770      	bx	lr
 8002f7a:	46c0      	nop			; (mov r8, r8)

08002f7c <HAL_SPI_ErrorCallback>:
 8002f7c:	4770      	bx	lr
 8002f7e:	46c0      	nop			; (mov r8, r8)

08002f80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f82:	46de      	mov	lr, fp
 8002f84:	4657      	mov	r7, sl
 8002f86:	464e      	mov	r6, r9
 8002f88:	4645      	mov	r5, r8
 8002f8a:	b5e0      	push	{r5, r6, r7, lr}
 8002f8c:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8002f8e:	466b      	mov	r3, sp
{
 8002f90:	0017      	movs	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8002f92:	2200      	movs	r2, #0
{
 8002f94:	000d      	movs	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 8002f96:	71da      	strb	r2, [r3, #7]
{
 8002f98:	0004      	movs	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f9a:	f7fe ff05 	bl	8001da8 <HAL_GetTick>
 8002f9e:	19eb      	adds	r3, r5, r7
 8002fa0:	1a1e      	subs	r6, r3, r0
 8002fa2:	469a      	mov	sl, r3
  tmp_tickstart = HAL_GetTick();
 8002fa4:	f7fe ff00 	bl	8001da8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002fa8:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <SPI_EndRxTxTransaction+0x148>)
  tmp_tickstart = HAL_GetTick();
 8002faa:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	4699      	mov	r9, r3
 8002fb0:	0093      	lsls	r3, r2, #2
 8002fb2:	189a      	adds	r2, r3, r2
 8002fb4:	00d3      	lsls	r3, r2, #3
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	0d1b      	lsrs	r3, r3, #20
 8002fba:	4373      	muls	r3, r6
 8002fbc:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8002fbe:	23c0      	movs	r3, #192	; 0xc0
 8002fc0:	015b      	lsls	r3, r3, #5
 8002fc2:	469b      	mov	fp, r3
 8002fc4:	6822      	ldr	r2, [r4, #0]
 8002fc6:	1c6b      	adds	r3, r5, #1
 8002fc8:	d14a      	bne.n	8003060 <SPI_EndRxTxTransaction+0xe0>
 8002fca:	21c0      	movs	r1, #192	; 0xc0
 8002fcc:	0149      	lsls	r1, r1, #5
 8002fce:	6893      	ldr	r3, [r2, #8]
 8002fd0:	420b      	tst	r3, r1
 8002fd2:	d1fc      	bne.n	8002fce <SPI_EndRxTxTransaction+0x4e>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fd4:	f7fe fee8 	bl	8001da8 <HAL_GetTick>
 8002fd8:	4653      	mov	r3, sl
 8002fda:	1a1e      	subs	r6, r3, r0
  tmp_tickstart = HAL_GetTick();
 8002fdc:	f7fe fee4 	bl	8001da8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fe0:	464b      	mov	r3, r9
 8002fe2:	681b      	ldr	r3, [r3, #0]
  tmp_tickstart = HAL_GetTick();
 8002fe4:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fe6:	015b      	lsls	r3, r3, #5
 8002fe8:	0d1b      	lsrs	r3, r3, #20
 8002fea:	4373      	muls	r3, r6
 8002fec:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	4699      	mov	r9, r3
 8002ff2:	6822      	ldr	r2, [r4, #0]
 8002ff4:	1c6b      	adds	r3, r5, #1
 8002ff6:	d146      	bne.n	8003086 <SPI_EndRxTxTransaction+0x106>
 8002ff8:	2180      	movs	r1, #128	; 0x80
 8002ffa:	6893      	ldr	r3, [r2, #8]
 8002ffc:	4219      	tst	r1, r3
 8002ffe:	d1fc      	bne.n	8002ffa <SPI_EndRxTxTransaction+0x7a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003000:	003a      	movs	r2, r7
 8003002:	0029      	movs	r1, r5
 8003004:	0020      	movs	r0, r4
 8003006:	f7ff ff21 	bl	8002e4c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800300a:	2800      	cmp	r0, #0
 800300c:	d122      	bne.n	8003054 <SPI_EndRxTxTransaction+0xd4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800300e:	b005      	add	sp, #20
 8003010:	bcf0      	pop	{r4, r5, r6, r7}
 8003012:	46bb      	mov	fp, r7
 8003014:	46b2      	mov	sl, r6
 8003016:	46a9      	mov	r9, r5
 8003018:	46a0      	mov	r8, r4
 800301a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800301c:	21e0      	movs	r1, #224	; 0xe0
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	438a      	bics	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003026:	2282      	movs	r2, #130	; 0x82
 8003028:	6861      	ldr	r1, [r4, #4]
 800302a:	0052      	lsls	r2, r2, #1
 800302c:	4291      	cmp	r1, r2
 800302e:	d03d      	beq.n	80030ac <SPI_EndRxTxTransaction+0x12c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003034:	0189      	lsls	r1, r1, #6
 8003036:	428a      	cmp	r2, r1
 8003038:	d106      	bne.n	8003048 <SPI_EndRxTxTransaction+0xc8>
          SPI_RESET_CRC(hspi);
 800303a:	6819      	ldr	r1, [r3, #0]
 800303c:	4823      	ldr	r0, [pc, #140]	; (80030cc <SPI_EndRxTxTransaction+0x14c>)
 800303e:	4001      	ands	r1, r0
 8003040:	6019      	str	r1, [r3, #0]
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003048:	235d      	movs	r3, #93	; 0x5d
 800304a:	2201      	movs	r2, #1
 800304c:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hspi);
 800304e:	2200      	movs	r2, #0
 8003050:	3b01      	subs	r3, #1
 8003052:	54e2      	strb	r2, [r4, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003054:	2220      	movs	r2, #32
 8003056:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003058:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800305a:	4313      	orrs	r3, r2
 800305c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800305e:	e7d6      	b.n	800300e <SPI_EndRxTxTransaction+0x8e>
  while ((hspi->Instance->SR & Fifo) != State)
 8003060:	6893      	ldr	r3, [r2, #8]
 8003062:	465a      	mov	r2, fp
 8003064:	4213      	tst	r3, r2
 8003066:	d0b5      	beq.n	8002fd4 <SPI_EndRxTxTransaction+0x54>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003068:	f7fe fe9e 	bl	8001da8 <HAL_GetTick>
 800306c:	4643      	mov	r3, r8
 800306e:	1ac0      	subs	r0, r0, r3
 8003070:	42b0      	cmp	r0, r6
 8003072:	d2d3      	bcs.n	800301c <SPI_EndRxTxTransaction+0x9c>
      if(count == 0U)
 8003074:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8003076:	1e5a      	subs	r2, r3, #1
 8003078:	4193      	sbcs	r3, r2
 800307a:	425b      	negs	r3, r3
 800307c:	401e      	ands	r6, r3
      count--;
 800307e:	9b02      	ldr	r3, [sp, #8]
 8003080:	3b01      	subs	r3, #1
 8003082:	9302      	str	r3, [sp, #8]
 8003084:	e79e      	b.n	8002fc4 <SPI_EndRxTxTransaction+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003086:	6893      	ldr	r3, [r2, #8]
 8003088:	464a      	mov	r2, r9
 800308a:	421a      	tst	r2, r3
 800308c:	d0b8      	beq.n	8003000 <SPI_EndRxTxTransaction+0x80>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800308e:	f7fe fe8b 	bl	8001da8 <HAL_GetTick>
 8003092:	4643      	mov	r3, r8
 8003094:	1ac0      	subs	r0, r0, r3
 8003096:	42b0      	cmp	r0, r6
 8003098:	d2c0      	bcs.n	800301c <SPI_EndRxTxTransaction+0x9c>
      if(count == 0U)
 800309a:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 800309c:	1e5a      	subs	r2, r3, #1
 800309e:	4193      	sbcs	r3, r2
 80030a0:	425b      	negs	r3, r3
 80030a2:	401e      	ands	r6, r3
      count--;
 80030a4:	9b03      	ldr	r3, [sp, #12]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	9303      	str	r3, [sp, #12]
 80030aa:	e7a2      	b.n	8002ff2 <SPI_EndRxTxTransaction+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ac:	2180      	movs	r1, #128	; 0x80
 80030ae:	68a2      	ldr	r2, [r4, #8]
 80030b0:	0209      	lsls	r1, r1, #8
 80030b2:	428a      	cmp	r2, r1
 80030b4:	d003      	beq.n	80030be <SPI_EndRxTxTransaction+0x13e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	00c9      	lsls	r1, r1, #3
 80030ba:	428a      	cmp	r2, r1
 80030bc:	d1b8      	bne.n	8003030 <SPI_EndRxTxTransaction+0xb0>
          __HAL_SPI_DISABLE(hspi);
 80030be:	2140      	movs	r1, #64	; 0x40
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	438a      	bics	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	e7b3      	b.n	8003030 <SPI_EndRxTxTransaction+0xb0>
 80030c8:	20000000 	.word	0x20000000
 80030cc:	ffffdfff 	.word	0xffffdfff

080030d0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80030d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d2:	000c      	movs	r4, r1
 80030d4:	b083      	sub	sp, #12
 80030d6:	0005      	movs	r5, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030d8:	f7fe fe66 	bl	8001da8 <HAL_GetTick>
 80030dc:	3464      	adds	r4, #100	; 0x64
 80030de:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80030e0:	f7fe fe62 	bl	8001da8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030e4:	4b29      	ldr	r3, [pc, #164]	; (800318c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
  tmp_tickstart = HAL_GetTick();
 80030e6:	0006      	movs	r6, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	015b      	lsls	r3, r3, #5
 80030ec:	0d1b      	lsrs	r3, r3, #20
 80030ee:	4363      	muls	r3, r4
 80030f0:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030f2:	682b      	ldr	r3, [r5, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	061b      	lsls	r3, r3, #24
 80030f8:	d52a      	bpl.n	8003150 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>
 80030fa:	2780      	movs	r7, #128	; 0x80
 80030fc:	e00b      	b.n	8003116 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x46>
      if(count == 0U)
 80030fe:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003100:	1e5a      	subs	r2, r3, #1
 8003102:	4193      	sbcs	r3, r2
 8003104:	425b      	negs	r3, r3
 8003106:	401c      	ands	r4, r3
      count--;
 8003108:	9b01      	ldr	r3, [sp, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800310e:	682b      	ldr	r3, [r5, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	421f      	tst	r7, r3
 8003114:	d01c      	beq.n	8003150 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003116:	f7fe fe47 	bl	8001da8 <HAL_GetTick>
 800311a:	1b80      	subs	r0, r0, r6
 800311c:	42a0      	cmp	r0, r4
 800311e:	d3ee      	bcc.n	80030fe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003120:	21e0      	movs	r1, #224	; 0xe0
 8003122:	682b      	ldr	r3, [r5, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	438a      	bics	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800312a:	2282      	movs	r2, #130	; 0x82
 800312c:	6869      	ldr	r1, [r5, #4]
 800312e:	0052      	lsls	r2, r2, #1
 8003130:	4291      	cmp	r1, r2
 8003132:	d017      	beq.n	8003164 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003138:	0189      	lsls	r1, r1, #6
 800313a:	428a      	cmp	r2, r1
 800313c:	d00a      	beq.n	8003154 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 800313e:	235d      	movs	r3, #93	; 0x5d
 8003140:	2201      	movs	r2, #1
 8003142:	54ea      	strb	r2, [r5, r3]
        __HAL_UNLOCK(hspi);
 8003144:	2200      	movs	r2, #0
 8003146:	2003      	movs	r0, #3
 8003148:	3b01      	subs	r3, #1
 800314a:	54ea      	strb	r2, [r5, r3]
}
 800314c:	b003      	add	sp, #12
 800314e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8003150:	2000      	movs	r0, #0
 8003152:	e7fb      	b.n	800314c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7c>
          SPI_RESET_CRC(hspi);
 8003154:	6819      	ldr	r1, [r3, #0]
 8003156:	480e      	ldr	r0, [pc, #56]	; (8003190 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc0>)
 8003158:	4001      	ands	r1, r0
 800315a:	6019      	str	r1, [r3, #0]
 800315c:	6819      	ldr	r1, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e7ec      	b.n	800313e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	68aa      	ldr	r2, [r5, #8]
 8003168:	0209      	lsls	r1, r1, #8
 800316a:	428a      	cmp	r2, r1
 800316c:	d003      	beq.n	8003176 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800316e:	2180      	movs	r1, #128	; 0x80
 8003170:	00c9      	lsls	r1, r1, #3
 8003172:	428a      	cmp	r2, r1
 8003174:	d1de      	bne.n	8003134 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
          __HAL_SPI_DISABLE(hspi);
 8003176:	2140      	movs	r1, #64	; 0x40
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	438a      	bics	r2, r1
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800317c:	2180      	movs	r1, #128	; 0x80
          __HAL_SPI_DISABLE(hspi);
 800317e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003180:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003182:	0189      	lsls	r1, r1, #6
 8003184:	428a      	cmp	r2, r1
 8003186:	d1da      	bne.n	800313e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6e>
 8003188:	e7e4      	b.n	8003154 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	20000000 	.word	0x20000000
 8003190:	ffffdfff 	.word	0xffffdfff

08003194 <SPI_EndRxTxTransaction.constprop.0>:
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 8003194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003196:	46c6      	mov	lr, r8
 8003198:	b500      	push	{lr}
 800319a:	4688      	mov	r8, r1
 800319c:	b082      	sub	sp, #8
  __IO uint8_t  tmpreg8 = 0;
 800319e:	466b      	mov	r3, sp
 80031a0:	2200      	movs	r2, #0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031a2:	4644      	mov	r4, r8
  __IO uint8_t  tmpreg8 = 0;
 80031a4:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 80031a6:	0005      	movs	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031a8:	f7fe fdfe 	bl	8001da8 <HAL_GetTick>
  while ((hspi->Instance->SR & Fifo) != State)
 80031ac:	27c0      	movs	r7, #192	; 0xc0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031ae:	3464      	adds	r4, #100	; 0x64
 80031b0:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80031b2:	f7fe fdf9 	bl	8001da8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031b6:	4b34      	ldr	r3, [pc, #208]	; (8003288 <SPI_EndRxTxTransaction.constprop.0+0xf4>)
  while ((hspi->Instance->SR & Fifo) != State)
 80031b8:	017f      	lsls	r7, r7, #5
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031ba:	681a      	ldr	r2, [r3, #0]
  tmp_tickstart = HAL_GetTick();
 80031bc:	0006      	movs	r6, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031be:	0093      	lsls	r3, r2, #2
 80031c0:	189a      	adds	r2, r3, r2
 80031c2:	00d3      	lsls	r3, r2, #3
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	0d1b      	lsrs	r3, r3, #20
 80031c8:	4363      	muls	r3, r4
 80031ca:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80031cc:	682b      	ldr	r3, [r5, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	423b      	tst	r3, r7
 80031d2:	d10c      	bne.n	80031ee <SPI_EndRxTxTransaction.constprop.0+0x5a>
 80031d4:	e02e      	b.n	8003234 <SPI_EndRxTxTransaction.constprop.0+0xa0>
      if(count == 0U)
 80031d6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80031d8:	1e5a      	subs	r2, r3, #1
 80031da:	4193      	sbcs	r3, r2
 80031dc:	425b      	negs	r3, r3
 80031de:	401c      	ands	r4, r3
      count--;
 80031e0:	9b01      	ldr	r3, [sp, #4]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80031e6:	682b      	ldr	r3, [r5, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	423b      	tst	r3, r7
 80031ec:	d022      	beq.n	8003234 <SPI_EndRxTxTransaction.constprop.0+0xa0>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031ee:	f7fe fddb 	bl	8001da8 <HAL_GetTick>
 80031f2:	1b80      	subs	r0, r0, r6
 80031f4:	4284      	cmp	r4, r0
 80031f6:	d8ee      	bhi.n	80031d6 <SPI_EndRxTxTransaction.constprop.0+0x42>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031f8:	21e0      	movs	r1, #224	; 0xe0
 80031fa:	682b      	ldr	r3, [r5, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	438a      	bics	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003202:	2282      	movs	r2, #130	; 0x82
 8003204:	6869      	ldr	r1, [r5, #4]
 8003206:	0052      	lsls	r2, r2, #1
 8003208:	4291      	cmp	r1, r2
 800320a:	d029      	beq.n	8003260 <SPI_EndRxTxTransaction.constprop.0+0xcc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800320c:	2180      	movs	r1, #128	; 0x80
 800320e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003210:	0189      	lsls	r1, r1, #6
 8003212:	428a      	cmp	r2, r1
 8003214:	d01c      	beq.n	8003250 <SPI_EndRxTxTransaction.constprop.0+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 8003216:	235d      	movs	r3, #93	; 0x5d
 8003218:	2201      	movs	r2, #1
 800321a:	54ea      	strb	r2, [r5, r3]
        __HAL_UNLOCK(hspi);
 800321c:	2200      	movs	r2, #0
 800321e:	3b01      	subs	r3, #1
 8003220:	54ea      	strb	r2, [r5, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003222:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 8003224:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003226:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003228:	4313      	orrs	r3, r2
 800322a:	662b      	str	r3, [r5, #96]	; 0x60
}
 800322c:	b002      	add	sp, #8
 800322e:	bc80      	pop	{r7}
 8003230:	46b8      	mov	r8, r7
 8003232:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003234:	4641      	mov	r1, r8
 8003236:	0028      	movs	r0, r5
 8003238:	f7ff ff4a 	bl	80030d0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800323c:	2800      	cmp	r0, #0
 800323e:	d1f0      	bne.n	8003222 <SPI_EndRxTxTransaction.constprop.0+0x8e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003240:	4642      	mov	r2, r8
 8003242:	2164      	movs	r1, #100	; 0x64
 8003244:	0028      	movs	r0, r5
 8003246:	f7ff fe01 	bl	8002e4c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800324a:	2800      	cmp	r0, #0
 800324c:	d0ee      	beq.n	800322c <SPI_EndRxTxTransaction.constprop.0+0x98>
 800324e:	e7e8      	b.n	8003222 <SPI_EndRxTxTransaction.constprop.0+0x8e>
          SPI_RESET_CRC(hspi);
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	480e      	ldr	r0, [pc, #56]	; (800328c <SPI_EndRxTxTransaction.constprop.0+0xf8>)
 8003254:	4001      	ands	r1, r0
 8003256:	6019      	str	r1, [r3, #0]
 8003258:	6819      	ldr	r1, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e7da      	b.n	8003216 <SPI_EndRxTxTransaction.constprop.0+0x82>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	68aa      	ldr	r2, [r5, #8]
 8003264:	0209      	lsls	r1, r1, #8
 8003266:	428a      	cmp	r2, r1
 8003268:	d003      	beq.n	8003272 <SPI_EndRxTxTransaction.constprop.0+0xde>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	00c9      	lsls	r1, r1, #3
 800326e:	428a      	cmp	r2, r1
 8003270:	d1cc      	bne.n	800320c <SPI_EndRxTxTransaction.constprop.0+0x78>
          __HAL_SPI_DISABLE(hspi);
 8003272:	2140      	movs	r1, #64	; 0x40
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	438a      	bics	r2, r1
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003278:	2180      	movs	r1, #128	; 0x80
          __HAL_SPI_DISABLE(hspi);
 800327a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800327c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800327e:	0189      	lsls	r1, r1, #6
 8003280:	428a      	cmp	r2, r1
 8003282:	d1c8      	bne.n	8003216 <SPI_EndRxTxTransaction.constprop.0+0x82>
 8003284:	e7e4      	b.n	8003250 <SPI_EndRxTxTransaction.constprop.0+0xbc>
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	20000000 	.word	0x20000000
 800328c:	ffffdfff 	.word	0xffffdfff

08003290 <SPI_DMATransmitCplt>:
{
 8003290:	b530      	push	{r4, r5, lr}
 8003292:	0005      	movs	r5, r0
 8003294:	b083      	sub	sp, #12
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003296:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8003298:	f7fe fd86 	bl	8001da8 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800329c:	682b      	ldr	r3, [r5, #0]
 800329e:	2520      	movs	r5, #32
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	421d      	tst	r5, r3
 80032a4:	d004      	beq.n	80032b0 <SPI_DMATransmitCplt+0x20>
  hspi->TxCpltCallback(hspi);
 80032a6:	0020      	movs	r0, r4
 80032a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032aa:	4798      	blx	r3
}
 80032ac:	b003      	add	sp, #12
 80032ae:	bd30      	pop	{r4, r5, pc}
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80032b0:	2102      	movs	r1, #2
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	43aa      	bics	r2, r5
 80032b8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	438a      	bics	r2, r1
 80032be:	605a      	str	r2, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80032c0:	0001      	movs	r1, r0
 80032c2:	0020      	movs	r0, r4
 80032c4:	f7ff ff66 	bl	8003194 <SPI_EndRxTxTransaction.constprop.0>
 80032c8:	2800      	cmp	r0, #0
 80032ca:	d002      	beq.n	80032d2 <SPI_DMATransmitCplt+0x42>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80032ce:	431d      	orrs	r5, r3
 80032d0:	6625      	str	r5, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032d2:	68a3      	ldr	r3, [r4, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <SPI_DMATransmitCplt+0x56>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	9201      	str	r2, [sp, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 80032e6:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 80032e8:	2201      	movs	r2, #1
    hspi->TxXferCount = 0U;
 80032ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80032ec:	335d      	adds	r3, #93	; 0x5d
 80032ee:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0d7      	beq.n	80032a6 <SPI_DMATransmitCplt+0x16>
      hspi->ErrorCallback(hspi);
 80032f6:	0020      	movs	r0, r4
 80032f8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80032fa:	4798      	blx	r3
      return;
 80032fc:	e7d6      	b.n	80032ac <SPI_DMATransmitCplt+0x1c>
 80032fe:	46c0      	nop			; (mov r8, r8)

08003300 <SPI_DMATransmitReceiveCplt>:
{
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003304:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8003306:	f7fe fd4f 	bl	8001da8 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800330a:	682b      	ldr	r3, [r5, #0]
 800330c:	2520      	movs	r5, #32
 800330e:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 8003310:	0001      	movs	r1, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003312:	421d      	tst	r5, r3
 8003314:	d003      	beq.n	800331e <SPI_DMATransmitReceiveCplt+0x1e>
  hspi->TxRxCpltCallback(hspi);
 8003316:	0020      	movs	r0, r4
 8003318:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800331a:	4798      	blx	r3
}
 800331c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800331e:	6822      	ldr	r2, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003320:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003322:	6853      	ldr	r3, [r2, #4]
 8003324:	43ab      	bics	r3, r5
 8003326:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003328:	f7ff ff34 	bl	8003194 <SPI_EndRxTxTransaction.constprop.0>
 800332c:	2800      	cmp	r0, #0
 800332e:	d002      	beq.n	8003336 <SPI_DMATransmitReceiveCplt+0x36>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003330:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003332:	431d      	orrs	r5, r3
 8003334:	6625      	str	r5, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003336:	2103      	movs	r1, #3
 8003338:	6822      	ldr	r2, [r4, #0]
 800333a:	6853      	ldr	r3, [r2, #4]
 800333c:	438b      	bics	r3, r1
 800333e:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8003340:	2300      	movs	r3, #0
    hspi->RxXferCount = 0U;
 8003342:	2246      	movs	r2, #70	; 0x46
    hspi->TxXferCount = 0U;
 8003344:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8003346:	52a3      	strh	r3, [r4, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8003348:	335d      	adds	r3, #93	; 0x5d
 800334a:	3a45      	subs	r2, #69	; 0x45
 800334c:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800334e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0e0      	beq.n	8003316 <SPI_DMATransmitReceiveCplt+0x16>
      hspi->ErrorCallback(hspi);
 8003354:	0020      	movs	r0, r4
 8003356:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003358:	4798      	blx	r3
      return;
 800335a:	e7df      	b.n	800331c <SPI_DMATransmitReceiveCplt+0x1c>

0800335c <SPI_EndRxTransaction.constprop.0>:
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800335c:	2382      	movs	r3, #130	; 0x82
 800335e:	6842      	ldr	r2, [r0, #4]
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
 8003360:	b570      	push	{r4, r5, r6, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003362:	005b      	lsls	r3, r3, #1
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
 8003364:	0004      	movs	r4, r0
 8003366:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003368:	429a      	cmp	r2, r3
 800336a:	d00c      	beq.n	8003386 <SPI_EndRxTransaction.constprop.0+0x2a>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800336c:	0031      	movs	r1, r6
 800336e:	0020      	movs	r0, r4
 8003370:	f7ff feae 	bl	80030d0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003374:	1e05      	subs	r5, r0, #0
 8003376:	d11a      	bne.n	80033ae <SPI_EndRxTransaction.constprop.0+0x52>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003378:	2382      	movs	r3, #130	; 0x82
 800337a:	6862      	ldr	r2, [r4, #4]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	429a      	cmp	r2, r3
 8003380:	d01b      	beq.n	80033ba <SPI_EndRxTransaction.constprop.0+0x5e>
}
 8003382:	0028      	movs	r0, r5
 8003384:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003386:	2280      	movs	r2, #128	; 0x80
 8003388:	6883      	ldr	r3, [r0, #8]
 800338a:	0212      	lsls	r2, r2, #8
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <SPI_EndRxTransaction.constprop.0+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003390:	2280      	movs	r2, #128	; 0x80
 8003392:	00d2      	lsls	r2, r2, #3
 8003394:	4293      	cmp	r3, r2
 8003396:	d1e9      	bne.n	800336c <SPI_EndRxTransaction.constprop.0+0x10>
    __HAL_SPI_DISABLE(hspi);
 8003398:	2140      	movs	r1, #64	; 0x40
 800339a:	6822      	ldr	r2, [r4, #0]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800339c:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE(hspi);
 800339e:	6813      	ldr	r3, [r2, #0]
 80033a0:	438b      	bics	r3, r1
 80033a2:	6013      	str	r3, [r2, #0]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033a4:	0031      	movs	r1, r6
 80033a6:	f7ff fe93 	bl	80030d0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80033aa:	1e05      	subs	r5, r0, #0
 80033ac:	d0e4      	beq.n	8003378 <SPI_EndRxTransaction.constprop.0+0x1c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ae:	2220      	movs	r2, #32
 80033b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80033b2:	2503      	movs	r5, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033b4:	4313      	orrs	r3, r2
 80033b6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80033b8:	e7e3      	b.n	8003382 <SPI_EndRxTransaction.constprop.0+0x26>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	68a3      	ldr	r3, [r4, #8]
 80033be:	0212      	lsls	r2, r2, #8
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <SPI_EndRxTransaction.constprop.0+0x70>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033c4:	2280      	movs	r2, #128	; 0x80
 80033c6:	00d2      	lsls	r2, r2, #3
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d1da      	bne.n	8003382 <SPI_EndRxTransaction.constprop.0+0x26>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033cc:	0032      	movs	r2, r6
 80033ce:	2164      	movs	r1, #100	; 0x64
 80033d0:	0020      	movs	r0, r4
 80033d2:	f7ff fd3b 	bl	8002e4c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80033d6:	2800      	cmp	r0, #0
 80033d8:	d0d3      	beq.n	8003382 <SPI_EndRxTransaction.constprop.0+0x26>
 80033da:	e7e8      	b.n	80033ae <SPI_EndRxTransaction.constprop.0+0x52>

080033dc <SPI_DMAReceiveCplt>:
{
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80033e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80033e2:	f7fe fce1 	bl	8001da8 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80033e6:	2220      	movs	r2, #32
 80033e8:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80033ea:	0001      	movs	r1, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	421a      	tst	r2, r3
 80033f0:	d11a      	bne.n	8003428 <SPI_DMAReceiveCplt+0x4c>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	685d      	ldr	r5, [r3, #4]
 80033f6:	4395      	bics	r5, r2
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80033f8:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80033fa:	605d      	str	r5, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80033fc:	2a00      	cmp	r2, #0
 80033fe:	d017      	beq.n	8003430 <SPI_DMAReceiveCplt+0x54>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003400:	2001      	movs	r0, #1
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	4382      	bics	r2, r0
 8003406:	605a      	str	r2, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003408:	0020      	movs	r0, r4
 800340a:	f7ff ffa7 	bl	800335c <SPI_EndRxTransaction.constprop.0>
 800340e:	2800      	cmp	r0, #0
 8003410:	d001      	beq.n	8003416 <SPI_DMAReceiveCplt+0x3a>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003412:	2320      	movs	r3, #32
 8003414:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 8003416:	2346      	movs	r3, #70	; 0x46
 8003418:	2200      	movs	r2, #0
 800341a:	52e2      	strh	r2, [r4, r3]
    hspi->State = HAL_SPI_STATE_READY;
 800341c:	3317      	adds	r3, #23
 800341e:	3201      	adds	r2, #1
 8003420:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003422:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10d      	bne.n	8003444 <SPI_DMAReceiveCplt+0x68>
  hspi->RxCpltCallback(hspi);
 8003428:	0020      	movs	r0, r4
 800342a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800342c:	4798      	blx	r3
}
 800342e:	bd70      	pop	{r4, r5, r6, pc}
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003430:	3205      	adds	r2, #5
 8003432:	6860      	ldr	r0, [r4, #4]
 8003434:	32ff      	adds	r2, #255	; 0xff
 8003436:	4290      	cmp	r0, r2
 8003438:	d1e2      	bne.n	8003400 <SPI_DMAReceiveCplt+0x24>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800343a:	2003      	movs	r0, #3
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	4382      	bics	r2, r0
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	e7e1      	b.n	8003408 <SPI_DMAReceiveCplt+0x2c>
      hspi->ErrorCallback(hspi);
 8003444:	0020      	movs	r0, r4
 8003446:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003448:	4798      	blx	r3
      return;
 800344a:	e7f0      	b.n	800342e <SPI_DMAReceiveCplt+0x52>

0800344c <HAL_SPI_Init>:
{
 800344c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344e:	46d6      	mov	lr, sl
 8003450:	464f      	mov	r7, r9
 8003452:	4646      	mov	r6, r8
 8003454:	0004      	movs	r4, r0
 8003456:	b5c0      	push	{r6, r7, lr}
  if (hspi == NULL)
 8003458:	2800      	cmp	r0, #0
 800345a:	d100      	bne.n	800345e <HAL_SPI_Init+0x12>
 800345c:	e09d      	b.n	800359a <HAL_SPI_Init+0x14e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800345e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003460:	2d00      	cmp	r5, #0
 8003462:	d100      	bne.n	8003466 <HAL_SPI_Init+0x1a>
 8003464:	e07f      	b.n	8003566 <HAL_SPI_Init+0x11a>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003466:	2300      	movs	r3, #0
 8003468:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800346a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346c:	2300      	movs	r3, #0
 800346e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003470:	335d      	adds	r3, #93	; 0x5d
 8003472:	5ce3      	ldrb	r3, [r4, r3]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d11a      	bne.n	80034b0 <HAL_SPI_Init+0x64>
    hspi->Lock = HAL_UNLOCKED;
 800347a:	335c      	adds	r3, #92	; 0x5c
 800347c:	54e2      	strb	r2, [r4, r3]
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800347e:	4b4b      	ldr	r3, [pc, #300]	; (80035ac <HAL_SPI_Init+0x160>)
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003480:	4a4b      	ldr	r2, [pc, #300]	; (80035b0 <HAL_SPI_Init+0x164>)
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8003482:	6663      	str	r3, [r4, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8003484:	4b4b      	ldr	r3, [pc, #300]	; (80035b4 <HAL_SPI_Init+0x168>)
 8003486:	66a3      	str	r3, [r4, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8003488:	4b4b      	ldr	r3, [pc, #300]	; (80035b8 <HAL_SPI_Init+0x16c>)
 800348a:	66e3      	str	r3, [r4, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800348c:	4b4b      	ldr	r3, [pc, #300]	; (80035bc <HAL_SPI_Init+0x170>)
 800348e:	6723      	str	r3, [r4, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8003490:	4b4b      	ldr	r3, [pc, #300]	; (80035c0 <HAL_SPI_Init+0x174>)
 8003492:	6763      	str	r3, [r4, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8003494:	4b4b      	ldr	r3, [pc, #300]	; (80035c4 <HAL_SPI_Init+0x178>)
 8003496:	67a3      	str	r3, [r4, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003498:	4b4b      	ldr	r3, [pc, #300]	; (80035c8 <HAL_SPI_Init+0x17c>)
 800349a:	67e3      	str	r3, [r4, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	50e2      	str	r2, [r4, r3]
    if (hspi->MspInitCallback == NULL)
 80034a0:	2284      	movs	r2, #132	; 0x84
 80034a2:	58a3      	ldr	r3, [r4, r2]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d100      	bne.n	80034aa <HAL_SPI_Init+0x5e>
 80034a8:	e07c      	b.n	80035a4 <HAL_SPI_Init+0x158>
    hspi->MspInitCallback(hspi);
 80034aa:	0020      	movs	r0, r4
 80034ac:	4798      	blx	r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hspi->State = HAL_SPI_STATE_BUSY;
 80034b0:	235d      	movs	r3, #93	; 0x5d
 80034b2:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 80034b4:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80034b6:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 80034b8:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034ba:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80034bc:	6813      	ldr	r3, [r2, #0]
 80034be:	438b      	bics	r3, r1
 80034c0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034c2:	23e0      	movs	r3, #224	; 0xe0
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4298      	cmp	r0, r3
 80034c8:	d955      	bls.n	8003576 <HAL_SPI_Init+0x12a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034ca:	23f0      	movs	r3, #240	; 0xf0
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	4298      	cmp	r0, r3
 80034d0:	d165      	bne.n	800359e <HAL_SPI_Init+0x152>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80034d6:	019b      	lsls	r3, r3, #6
 80034d8:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034da:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034dc:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034de:	469a      	mov	sl, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034e0:	2382      	movs	r3, #130	; 0x82
 80034e2:	6866      	ldr	r6, [r4, #4]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4033      	ands	r3, r6
 80034e8:	2684      	movs	r6, #132	; 0x84
 80034ea:	68a7      	ldr	r7, [r4, #8]
 80034ec:	0236      	lsls	r6, r6, #8
 80034ee:	403e      	ands	r6, r7
 80034f0:	4333      	orrs	r3, r6
 80034f2:	2602      	movs	r6, #2
 80034f4:	6927      	ldr	r7, [r4, #16]
 80034f6:	69a1      	ldr	r1, [r4, #24]
 80034f8:	403e      	ands	r6, r7
 80034fa:	4333      	orrs	r3, r6
 80034fc:	2601      	movs	r6, #1
 80034fe:	6967      	ldr	r7, [r4, #20]
 8003500:	46b1      	mov	r9, r6
 8003502:	4037      	ands	r7, r6
 8003504:	433b      	orrs	r3, r7
 8003506:	2780      	movs	r7, #128	; 0x80
 8003508:	00bf      	lsls	r7, r7, #2
 800350a:	400f      	ands	r7, r1
 800350c:	433b      	orrs	r3, r7
 800350e:	2738      	movs	r7, #56	; 0x38
 8003510:	69e6      	ldr	r6, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003512:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003514:	4037      	ands	r7, r6
 8003516:	2680      	movs	r6, #128	; 0x80
 8003518:	433b      	orrs	r3, r7
 800351a:	0037      	movs	r7, r6
 800351c:	6a26      	ldr	r6, [r4, #32]
 800351e:	4037      	ands	r7, r6
 8003520:	4666      	mov	r6, ip
 8003522:	433b      	orrs	r3, r7
 8003524:	4333      	orrs	r3, r6
 8003526:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003528:	2308      	movs	r3, #8
 800352a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800352c:	4657      	mov	r7, sl
 800352e:	4033      	ands	r3, r6
 8003530:	26f0      	movs	r6, #240	; 0xf0
 8003532:	0136      	lsls	r6, r6, #4
 8003534:	4030      	ands	r0, r6
 8003536:	4318      	orrs	r0, r3
 8003538:	2304      	movs	r3, #4
 800353a:	4019      	ands	r1, r3
 800353c:	4308      	orrs	r0, r1
 800353e:	2110      	movs	r1, #16
 8003540:	400d      	ands	r5, r1
 8003542:	4305      	orrs	r5, r0
 8003544:	432f      	orrs	r7, r5
 8003546:	6057      	str	r7, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003548:	69d3      	ldr	r3, [r2, #28]
 800354a:	4920      	ldr	r1, [pc, #128]	; (80035cc <HAL_SPI_Init+0x180>)
  return HAL_OK;
 800354c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800354e:	400b      	ands	r3, r1
 8003550:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003552:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003554:	464a      	mov	r2, r9
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003556:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003558:	335d      	adds	r3, #93	; 0x5d
 800355a:	54e2      	strb	r2, [r4, r3]
}
 800355c:	bce0      	pop	{r5, r6, r7}
 800355e:	46ba      	mov	sl, r7
 8003560:	46b1      	mov	r9, r6
 8003562:	46a8      	mov	r8, r5
 8003564:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003566:	2382      	movs	r3, #130	; 0x82
 8003568:	6842      	ldr	r2, [r0, #4]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	429a      	cmp	r2, r3
 800356e:	d100      	bne.n	8003572 <HAL_SPI_Init+0x126>
 8003570:	e77c      	b.n	800346c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003572:	61c5      	str	r5, [r0, #28]
 8003574:	e77a      	b.n	800346c <HAL_SPI_Init+0x20>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003576:	4298      	cmp	r0, r3
 8003578:	d006      	beq.n	8003588 <HAL_SPI_Init+0x13c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	015b      	lsls	r3, r3, #5
 800357e:	469a      	mov	sl, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003580:	2300      	movs	r3, #0
 8003582:	469c      	mov	ip, r3
 8003584:	62a3      	str	r3, [r4, #40]	; 0x28
 8003586:	e7ab      	b.n	80034e0 <HAL_SPI_Init+0x94>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800358c:	019b      	lsls	r3, r3, #6
 800358e:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003594:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003596:	469a      	mov	sl, r3
 8003598:	e7a2      	b.n	80034e0 <HAL_SPI_Init+0x94>
    return HAL_ERROR;
 800359a:	2001      	movs	r0, #1
 800359c:	e7de      	b.n	800355c <HAL_SPI_Init+0x110>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800359e:	2300      	movs	r3, #0
 80035a0:	469a      	mov	sl, r3
 80035a2:	e7ed      	b.n	8003580 <HAL_SPI_Init+0x134>
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80035a4:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <HAL_SPI_Init+0x184>)
 80035a6:	50a3      	str	r3, [r4, r2]
 80035a8:	e77f      	b.n	80034aa <HAL_SPI_Init+0x5e>
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	08002f65 	.word	0x08002f65
 80035b0:	08002f5d 	.word	0x08002f5d
 80035b4:	08002f69 	.word	0x08002f69
 80035b8:	08002f6d 	.word	0x08002f6d
 80035bc:	08002f71 	.word	0x08002f71
 80035c0:	08002f75 	.word	0x08002f75
 80035c4:	08002f79 	.word	0x08002f79
 80035c8:	08002f7d 	.word	0x08002f7d
 80035cc:	fffff7ff 	.word	0xfffff7ff
 80035d0:	08002ded 	.word	0x08002ded

080035d4 <HAL_SPI_DeInit>:
{
 80035d4:	b510      	push	{r4, lr}
 80035d6:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 80035d8:	d018      	beq.n	800360c <HAL_SPI_DeInit+0x38>
  hspi->State = HAL_SPI_STATE_BUSY;
 80035da:	235d      	movs	r3, #93	; 0x5d
 80035dc:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 80035de:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80035e0:	54c2      	strb	r2, [r0, r3]
  __HAL_SPI_DISABLE(hspi);
 80035e2:	6802      	ldr	r2, [r0, #0]
 80035e4:	6813      	ldr	r3, [r2, #0]
 80035e6:	438b      	bics	r3, r1
 80035e8:	6013      	str	r3, [r2, #0]
  if (hspi->MspDeInitCallback == NULL)
 80035ea:	2288      	movs	r2, #136	; 0x88
 80035ec:	5883      	ldr	r3, [r0, r2]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_SPI_DeInit+0x32>
  hspi->MspDeInitCallback(hspi);
 80035f2:	0020      	movs	r0, r4
 80035f4:	4798      	blx	r3
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035f6:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_RESET;
 80035f8:	225d      	movs	r2, #93	; 0x5d
  return HAL_OK;
 80035fa:	2000      	movs	r0, #0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035fc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80035fe:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hspi);
 8003600:	3a01      	subs	r2, #1
 8003602:	54a3      	strb	r3, [r4, r2]
}
 8003604:	bd10      	pop	{r4, pc}
    hspi->MspDeInitCallback = HAL_SPI_MspDeInit; /* Legacy weak MspDeInit  */
 8003606:	4b02      	ldr	r3, [pc, #8]	; (8003610 <HAL_SPI_DeInit+0x3c>)
 8003608:	5083      	str	r3, [r0, r2]
 800360a:	e7f2      	b.n	80035f2 <HAL_SPI_DeInit+0x1e>
    return HAL_ERROR;
 800360c:	2001      	movs	r0, #1
 800360e:	e7f9      	b.n	8003604 <HAL_SPI_DeInit+0x30>
 8003610:	08002f61 	.word	0x08002f61

08003614 <HAL_SPI_RegisterCallback>:
{
 8003614:	0003      	movs	r3, r0
 8003616:	b530      	push	{r4, r5, lr}
  if (pCallback == NULL)
 8003618:	2a00      	cmp	r2, #0
 800361a:	d02e      	beq.n	800367a <HAL_SPI_RegisterCallback+0x66>
  __HAL_LOCK(hspi);
 800361c:	205c      	movs	r0, #92	; 0x5c
 800361e:	5c1c      	ldrb	r4, [r3, r0]
 8003620:	2c01      	cmp	r4, #1
 8003622:	d030      	beq.n	8003686 <HAL_SPI_RegisterCallback+0x72>
 8003624:	2401      	movs	r4, #1
  if (HAL_SPI_STATE_READY == hspi->State)
 8003626:	255d      	movs	r5, #93	; 0x5d
  __HAL_LOCK(hspi);
 8003628:	541c      	strb	r4, [r3, r0]
  if (HAL_SPI_STATE_READY == hspi->State)
 800362a:	5d5c      	ldrb	r4, [r3, r5]
 800362c:	b2e0      	uxtb	r0, r4
 800362e:	2c01      	cmp	r4, #1
 8003630:	d00c      	beq.n	800364c <HAL_SPI_RegisterCallback+0x38>
  else if (HAL_SPI_STATE_RESET == hspi->State)
 8003632:	5d58      	ldrb	r0, [r3, r5]
 8003634:	2800      	cmp	r0, #0
 8003636:	d10f      	bne.n	8003658 <HAL_SPI_RegisterCallback+0x44>
    switch (CallbackID)
 8003638:	2908      	cmp	r1, #8
 800363a:	d01a      	beq.n	8003672 <HAL_SPI_RegisterCallback+0x5e>
 800363c:	2909      	cmp	r1, #9
 800363e:	d014      	beq.n	800366a <HAL_SPI_RegisterCallback+0x56>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8003640:	2180      	movs	r1, #128	; 0x80
 8003642:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        status =  HAL_ERROR;
 8003644:	3001      	adds	r0, #1
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8003646:	430a      	orrs	r2, r1
 8003648:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800364a:	e00a      	b.n	8003662 <HAL_SPI_RegisterCallback+0x4e>
    switch (CallbackID)
 800364c:	2909      	cmp	r1, #9
 800364e:	d835      	bhi.n	80036bc <HAL_SPI_RegisterCallback+0xa8>
 8003650:	4c1d      	ldr	r4, [pc, #116]	; (80036c8 <HAL_SPI_RegisterCallback+0xb4>)
 8003652:	0088      	lsls	r0, r1, #2
 8003654:	5820      	ldr	r0, [r4, r0]
 8003656:	4687      	mov	pc, r0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8003658:	2180      	movs	r1, #128	; 0x80
    status =  HAL_ERROR;
 800365a:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800365c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800365e:	430a      	orrs	r2, r1
 8003660:	661a      	str	r2, [r3, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 8003662:	225c      	movs	r2, #92	; 0x5c
 8003664:	2100      	movs	r1, #0
 8003666:	5499      	strb	r1, [r3, r2]
}
 8003668:	bd30      	pop	{r4, r5, pc}
        hspi->MspDeInitCallback = pCallback;
 800366a:	2188      	movs	r1, #136	; 0x88
  HAL_StatusTypeDef status = HAL_OK;
 800366c:	2000      	movs	r0, #0
        hspi->MspDeInitCallback = pCallback;
 800366e:	505a      	str	r2, [r3, r1]
        break;
 8003670:	e7f7      	b.n	8003662 <HAL_SPI_RegisterCallback+0x4e>
        hspi->MspInitCallback = pCallback;
 8003672:	2184      	movs	r1, #132	; 0x84
  HAL_StatusTypeDef status = HAL_OK;
 8003674:	2000      	movs	r0, #0
        hspi->MspInitCallback = pCallback;
 8003676:	505a      	str	r2, [r3, r1]
        break;
 8003678:	e7f3      	b.n	8003662 <HAL_SPI_RegisterCallback+0x4e>
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 800367a:	2180      	movs	r1, #128	; 0x80
 800367c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800367e:	430a      	orrs	r2, r1
 8003680:	6602      	str	r2, [r0, #96]	; 0x60
    return HAL_ERROR;
 8003682:	2001      	movs	r0, #1
 8003684:	e7f0      	b.n	8003668 <HAL_SPI_RegisterCallback+0x54>
  __HAL_LOCK(hspi);
 8003686:	2002      	movs	r0, #2
 8003688:	e7ee      	b.n	8003668 <HAL_SPI_RegisterCallback+0x54>
        hspi->AbortCpltCallback = pCallback;
 800368a:	2180      	movs	r1, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 800368c:	2000      	movs	r0, #0
        hspi->AbortCpltCallback = pCallback;
 800368e:	505a      	str	r2, [r3, r1]
        break;
 8003690:	e7e7      	b.n	8003662 <HAL_SPI_RegisterCallback+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 8003692:	0008      	movs	r0, r1
        hspi->TxCpltCallback = pCallback;
 8003694:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8003696:	e7e4      	b.n	8003662 <HAL_SPI_RegisterCallback+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 8003698:	2000      	movs	r0, #0
        hspi->RxCpltCallback = pCallback;
 800369a:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800369c:	e7e1      	b.n	8003662 <HAL_SPI_RegisterCallback+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 800369e:	2000      	movs	r0, #0
        hspi->TxRxCpltCallback = pCallback;
 80036a0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80036a2:	e7de      	b.n	8003662 <HAL_SPI_RegisterCallback+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 80036a4:	2000      	movs	r0, #0
        hspi->TxHalfCpltCallback = pCallback;
 80036a6:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80036a8:	e7db      	b.n	8003662 <HAL_SPI_RegisterCallback+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 80036aa:	2000      	movs	r0, #0
        hspi->RxHalfCpltCallback = pCallback;
 80036ac:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80036ae:	e7d8      	b.n	8003662 <HAL_SPI_RegisterCallback+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2000      	movs	r0, #0
        hspi->TxRxHalfCpltCallback = pCallback;
 80036b2:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80036b4:	e7d5      	b.n	8003662 <HAL_SPI_RegisterCallback+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 80036b6:	2000      	movs	r0, #0
        hspi->ErrorCallback = pCallback;
 80036b8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80036ba:	e7d2      	b.n	8003662 <HAL_SPI_RegisterCallback+0x4e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036c0:	430a      	orrs	r2, r1
 80036c2:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80036c4:	e7cd      	b.n	8003662 <HAL_SPI_RegisterCallback+0x4e>
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	0801b5d4 	.word	0x0801b5d4

080036cc <HAL_SPI_Transmit>:
{
 80036cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ce:	46c6      	mov	lr, r8
 80036d0:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80036d2:	235c      	movs	r3, #92	; 0x5c
{
 80036d4:	b500      	push	{lr}
 80036d6:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80036d8:	5cc2      	ldrb	r2, [r0, r3]
{
 80036da:	0004      	movs	r4, r0
 80036dc:	000d      	movs	r5, r1
 80036de:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80036e0:	2a01      	cmp	r2, #1
 80036e2:	d100      	bne.n	80036e6 <HAL_SPI_Transmit+0x1a>
 80036e4:	e07a      	b.n	80037dc <HAL_SPI_Transmit+0x110>
 80036e6:	2201      	movs	r2, #1
 80036e8:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80036ea:	f7fe fb5d 	bl	8001da8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80036ee:	225d      	movs	r2, #93	; 0x5d
 80036f0:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 80036f2:	0007      	movs	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80036f4:	b2d8      	uxtb	r0, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d00a      	beq.n	8003710 <HAL_SPI_Transmit+0x44>
    errorcode = HAL_BUSY;
 80036fa:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80036fc:	235d      	movs	r3, #93	; 0x5d
 80036fe:	2201      	movs	r2, #1
 8003700:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8003702:	2200      	movs	r2, #0
 8003704:	3b01      	subs	r3, #1
 8003706:	54e2      	strb	r2, [r4, r3]
}
 8003708:	b002      	add	sp, #8
 800370a:	bc80      	pop	{r7}
 800370c:	46b8      	mov	r8, r7
 800370e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8003710:	2d00      	cmp	r5, #0
 8003712:	d0f3      	beq.n	80036fc <HAL_SPI_Transmit+0x30>
 8003714:	4643      	mov	r3, r8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_SPI_Transmit+0x30>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800371a:	2303      	movs	r3, #3
 800371c:	54a3      	strb	r3, [r4, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800371e:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8003720:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003722:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferSize  = Size;
 8003724:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003726:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8003728:	2244      	movs	r2, #68	; 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800372a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800372c:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800372e:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8003730:	3202      	adds	r2, #2
 8003732:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 8003734:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003736:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003738:	2380      	movs	r3, #128	; 0x80
    __HAL_SPI_DISABLE(hspi);
 800373a:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800373c:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800373e:	0001      	movs	r1, r0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	429a      	cmp	r2, r3
 8003744:	d100      	bne.n	8003748 <HAL_SPI_Transmit+0x7c>
 8003746:	e07a      	b.n	800383e <HAL_SPI_Transmit+0x172>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003748:	2340      	movs	r3, #64	; 0x40
 800374a:	6802      	ldr	r2, [r0, #0]
 800374c:	4213      	tst	r3, r2
 800374e:	d102      	bne.n	8003756 <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 8003750:	6802      	ldr	r2, [r0, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003756:	23e0      	movs	r3, #224	; 0xe0
 8003758:	68e2      	ldr	r2, [r4, #12]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	429a      	cmp	r2, r3
 800375e:	d93f      	bls.n	80037e0 <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003760:	6863      	ldr	r3, [r4, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d100      	bne.n	8003768 <HAL_SPI_Transmit+0x9c>
 8003766:	e0ae      	b.n	80038c6 <HAL_SPI_Transmit+0x1fa>
 8003768:	4643      	mov	r3, r8
 800376a:	2b01      	cmp	r3, #1
 800376c:	d100      	bne.n	8003770 <HAL_SPI_Transmit+0xa4>
 800376e:	e0aa      	b.n	80038c6 <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 8003770:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01a      	beq.n	80037ac <HAL_SPI_Transmit+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003776:	2202      	movs	r2, #2
 8003778:	2e00      	cmp	r6, #0
 800377a:	d100      	bne.n	800377e <HAL_SPI_Transmit+0xb2>
 800377c:	e0c1      	b.n	8003902 <HAL_SPI_Transmit+0x236>
 800377e:	2502      	movs	r5, #2
 8003780:	1c73      	adds	r3, r6, #1
 8003782:	d000      	beq.n	8003786 <HAL_SPI_Transmit+0xba>
 8003784:	e08b      	b.n	800389e <HAL_SPI_Transmit+0x1d2>
 8003786:	2302      	movs	r3, #2
 8003788:	4698      	mov	r8, r3
 800378a:	4642      	mov	r2, r8
 800378c:	6883      	ldr	r3, [r0, #8]
 800378e:	421a      	tst	r2, r3
 8003790:	d100      	bne.n	8003794 <HAL_SPI_Transmit+0xc8>
 8003792:	e0a1      	b.n	80038d8 <HAL_SPI_Transmit+0x20c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003794:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003796:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003798:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800379a:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 800379c:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800379e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80037a0:	3d01      	subs	r5, #1
 80037a2:	b2ad      	uxth	r5, r5
 80037a4:	87e5      	strh	r5, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80037a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ee      	bne.n	800378a <HAL_SPI_Transmit+0xbe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ac:	003a      	movs	r2, r7
 80037ae:	0031      	movs	r1, r6
 80037b0:	0020      	movs	r0, r4
 80037b2:	f7ff fbe5 	bl	8002f80 <SPI_EndRxTxTransaction>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d001      	beq.n	80037be <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037ba:	2320      	movs	r3, #32
 80037bc:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037be:	68a3      	ldr	r3, [r4, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d106      	bne.n	80037d2 <HAL_SPI_Transmit+0x106>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	9201      	str	r2, [sp, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037d2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80037d4:	1e43      	subs	r3, r0, #1
 80037d6:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 80037d8:	b2c0      	uxtb	r0, r0
error:
 80037da:	e78f      	b.n	80036fc <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80037dc:	2002      	movs	r0, #2
 80037de:	e793      	b.n	8003708 <HAL_SPI_Transmit+0x3c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e0:	6863      	ldr	r3, [r4, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d065      	beq.n	80038b2 <HAL_SPI_Transmit+0x1e6>
 80037e6:	4643      	mov	r3, r8
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d062      	beq.n	80038b2 <HAL_SPI_Transmit+0x1e6>
    while (hspi->TxXferCount > 0U)
 80037ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0dc      	beq.n	80037ac <HAL_SPI_Transmit+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037f2:	2202      	movs	r2, #2
 80037f4:	2e00      	cmp	r6, #0
 80037f6:	d100      	bne.n	80037fa <HAL_SPI_Transmit+0x12e>
 80037f8:	e098      	b.n	800392c <HAL_SPI_Transmit+0x260>
 80037fa:	2502      	movs	r5, #2
 80037fc:	1c73      	adds	r3, r6, #1
 80037fe:	d135      	bne.n	800386c <HAL_SPI_Transmit+0x1a0>
 8003800:	2302      	movs	r3, #2
 8003802:	4698      	mov	r8, r3
 8003804:	4641      	mov	r1, r8
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	4211      	tst	r1, r2
 800380c:	d011      	beq.n	8003832 <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800380e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003810:	7812      	ldrb	r2, [r2, #0]
 8003812:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8003814:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003816:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003818:	3d01      	subs	r5, #1
 800381a:	b2ad      	uxth	r5, r5
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800381c:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 800381e:	87e5      	strh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003820:	63a3      	str	r3, [r4, #56]	; 0x38
    while (hspi->TxXferCount > 0U)
 8003822:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0c1      	beq.n	80037ac <HAL_SPI_Transmit+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003828:	4641      	mov	r1, r8
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	4211      	tst	r1, r2
 8003830:	d1ed      	bne.n	800380e <HAL_SPI_Transmit+0x142>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003832:	f7fe fab9 	bl	8001da8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8003836:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1e3      	bne.n	8003804 <HAL_SPI_Transmit+0x138>
 800383c:	e7b6      	b.n	80037ac <HAL_SPI_Transmit+0xe0>
    __HAL_SPI_DISABLE(hspi);
 800383e:	2240      	movs	r2, #64	; 0x40
 8003840:	6803      	ldr	r3, [r0, #0]
 8003842:	4393      	bics	r3, r2
 8003844:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	6802      	ldr	r2, [r0, #0]
 800384a:	01db      	lsls	r3, r3, #7
 800384c:	4313      	orrs	r3, r2
 800384e:	6003      	str	r3, [r0, #0]
 8003850:	e77a      	b.n	8003748 <HAL_SPI_Transmit+0x7c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003852:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003854:	7812      	ldrb	r2, [r2, #0]
 8003856:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003858:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800385a:	3301      	adds	r3, #1
 800385c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800385e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003860:	3b01      	subs	r3, #1
 8003862:	b29b      	uxth	r3, r3
 8003864:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003866:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003868:	2b00      	cmp	r3, #0
 800386a:	d09f      	beq.n	80037ac <HAL_SPI_Transmit+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	4215      	tst	r5, r2
 8003872:	d1ee      	bne.n	8003852 <HAL_SPI_Transmit+0x186>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003874:	f7fe fa98 	bl	8001da8 <HAL_GetTick>
 8003878:	1bc0      	subs	r0, r0, r7
 800387a:	4286      	cmp	r6, r0
 800387c:	d8f3      	bhi.n	8003866 <HAL_SPI_Transmit+0x19a>
          errorcode = HAL_TIMEOUT;
 800387e:	2003      	movs	r0, #3
 8003880:	e73c      	b.n	80036fc <HAL_SPI_Transmit+0x30>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003882:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003884:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003886:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003888:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800388a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800388c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800388e:	3b01      	subs	r3, #1
 8003890:	b29b      	uxth	r3, r3
 8003892:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003894:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003896:	2b00      	cmp	r3, #0
 8003898:	d100      	bne.n	800389c <HAL_SPI_Transmit+0x1d0>
 800389a:	e787      	b.n	80037ac <HAL_SPI_Transmit+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800389c:	6821      	ldr	r1, [r4, #0]
 800389e:	688b      	ldr	r3, [r1, #8]
 80038a0:	421d      	tst	r5, r3
 80038a2:	d1ee      	bne.n	8003882 <HAL_SPI_Transmit+0x1b6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038a4:	f7fe fa80 	bl	8001da8 <HAL_GetTick>
 80038a8:	1bc0      	subs	r0, r0, r7
 80038aa:	4286      	cmp	r6, r0
 80038ac:	d8f2      	bhi.n	8003894 <HAL_SPI_Transmit+0x1c8>
          errorcode = HAL_TIMEOUT;
 80038ae:	2003      	movs	r0, #3
 80038b0:	e724      	b.n	80036fc <HAL_SPI_Transmit+0x30>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038b2:	782b      	ldrb	r3, [r5, #0]
 80038b4:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038b8:	3301      	adds	r3, #1
 80038ba:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80038bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80038c4:	e792      	b.n	80037ec <HAL_SPI_Transmit+0x120>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c6:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038c8:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ca:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 80038cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ce:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80038d6:	e74b      	b.n	8003770 <HAL_SPI_Transmit+0xa4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038d8:	f7fe fa66 	bl	8001da8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80038dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d100      	bne.n	80038e4 <HAL_SPI_Transmit+0x218>
 80038e2:	e763      	b.n	80037ac <HAL_SPI_Transmit+0xe0>
 80038e4:	6820      	ldr	r0, [r4, #0]
 80038e6:	e750      	b.n	800378a <HAL_SPI_Transmit+0xbe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038ea:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ec:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ee:	60c1      	str	r1, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80038f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80038fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d100      	bne.n	8003902 <HAL_SPI_Transmit+0x236>
 8003900:	e754      	b.n	80037ac <HAL_SPI_Transmit+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003902:	6883      	ldr	r3, [r0, #8]
 8003904:	421a      	tst	r2, r3
 8003906:	d1ef      	bne.n	80038e8 <HAL_SPI_Transmit+0x21c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003908:	f7fe fa4e 	bl	8001da8 <HAL_GetTick>
          errorcode = HAL_TIMEOUT;
 800390c:	2003      	movs	r0, #3
 800390e:	e6f5      	b.n	80036fc <HAL_SPI_Transmit+0x30>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003910:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003912:	7809      	ldrb	r1, [r1, #0]
 8003914:	7319      	strb	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003916:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003918:	3301      	adds	r3, #1
 800391a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800391c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800391e:	3b01      	subs	r3, #1
 8003920:	b29b      	uxth	r3, r3
 8003922:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003924:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003926:	2b00      	cmp	r3, #0
 8003928:	d100      	bne.n	800392c <HAL_SPI_Transmit+0x260>
 800392a:	e73f      	b.n	80037ac <HAL_SPI_Transmit+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	6899      	ldr	r1, [r3, #8]
 8003930:	420a      	tst	r2, r1
 8003932:	d1ed      	bne.n	8003910 <HAL_SPI_Transmit+0x244>
 8003934:	e7e8      	b.n	8003908 <HAL_SPI_Transmit+0x23c>
 8003936:	46c0      	nop			; (mov r8, r8)

08003938 <HAL_SPI_TransmitReceive>:
{
 8003938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800393a:	46ce      	mov	lr, r9
 800393c:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 800393e:	235c      	movs	r3, #92	; 0x5c
{
 8003940:	b500      	push	{lr}
 8003942:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8003944:	5cc2      	ldrb	r2, [r0, r3]
{
 8003946:	0004      	movs	r4, r0
 8003948:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 800394a:	2a01      	cmp	r2, #1
 800394c:	d100      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x18>
 800394e:	e09a      	b.n	8003a86 <HAL_SPI_TransmitReceive+0x14e>
 8003950:	2201      	movs	r2, #1
 8003952:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8003954:	f7fe fa28 	bl	8001da8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8003958:	235d      	movs	r3, #93	; 0x5d
 800395a:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 800395c:	0007      	movs	r7, r0
  tmp_mode            = hspi->Init.Mode;
 800395e:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8003960:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003962:	2b01      	cmp	r3, #1
 8003964:	d012      	beq.n	800398c <HAL_SPI_TransmitReceive+0x54>
 8003966:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8003968:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	429a      	cmp	r2, r3
 800396e:	d008      	beq.n	8003982 <HAL_SPI_TransmitReceive+0x4a>
  hspi->State = HAL_SPI_STATE_READY;
 8003970:	235d      	movs	r3, #93	; 0x5d
 8003972:	2201      	movs	r2, #1
 8003974:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8003976:	2200      	movs	r2, #0
 8003978:	3b01      	subs	r3, #1
 800397a:	54e2      	strb	r2, [r4, r3]
}
 800397c:	bc80      	pop	{r7}
 800397e:	46b9      	mov	r9, r7
 8003980:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003982:	68a3      	ldr	r3, [r4, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f3      	bne.n	8003970 <HAL_SPI_TransmitReceive+0x38>
 8003988:	2904      	cmp	r1, #4
 800398a:	d1f1      	bne.n	8003970 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800398c:	2d00      	cmp	r5, #0
 800398e:	d100      	bne.n	8003992 <HAL_SPI_TransmitReceive+0x5a>
 8003990:	e07b      	b.n	8003a8a <HAL_SPI_TransmitReceive+0x152>
 8003992:	464b      	mov	r3, r9
 8003994:	2b00      	cmp	r3, #0
 8003996:	d100      	bne.n	800399a <HAL_SPI_TransmitReceive+0x62>
 8003998:	e077      	b.n	8003a8a <HAL_SPI_TransmitReceive+0x152>
 800399a:	2e00      	cmp	r6, #0
 800399c:	d075      	beq.n	8003a8a <HAL_SPI_TransmitReceive+0x152>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800399e:	235d      	movs	r3, #93	; 0x5d
 80039a0:	5ce1      	ldrb	r1, [r4, r3]
 80039a2:	2904      	cmp	r1, #4
 80039a4:	d001      	beq.n	80039aa <HAL_SPI_TransmitReceive+0x72>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039a6:	2105      	movs	r1, #5
 80039a8:	54e1      	strb	r1, [r4, r3]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039aa:	4649      	mov	r1, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ac:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039ae:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80039b0:	2146      	movs	r1, #70	; 0x46
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039b2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80039b4:	5266      	strh	r6, [r4, r1]
  hspi->RxXferSize  = Size;
 80039b6:	3902      	subs	r1, #2
 80039b8:	5266      	strh	r6, [r4, r1]
  hspi->RxISR       = NULL;
 80039ba:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80039bc:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039be:	23e0      	movs	r3, #224	; 0xe0
 80039c0:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039c2:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80039c4:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80039c6:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4299      	cmp	r1, r3
 80039cc:	d95f      	bls.n	8003a8e <HAL_SPI_TransmitReceive+0x156>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	487d      	ldr	r0, [pc, #500]	; (8003bc8 <HAL_SPI_TransmitReceive+0x290>)
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	4001      	ands	r1, r0
 80039d6:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039d8:	2140      	movs	r1, #64	; 0x40
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	4201      	tst	r1, r0
 80039de:	d102      	bne.n	80039e6 <HAL_SPI_TransmitReceive+0xae>
    __HAL_SPI_ENABLE(hspi);
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	4301      	orrs	r1, r0
 80039e4:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e6:	2a00      	cmp	r2, #0
 80039e8:	d000      	beq.n	80039ec <HAL_SPI_TransmitReceive+0xb4>
 80039ea:	e0ae      	b.n	8003b4a <HAL_SPI_TransmitReceive+0x212>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ec:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ee:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039f0:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80039f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f4:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80039fc:	9b06      	ldr	r3, [sp, #24]
 80039fe:	3301      	adds	r3, #1
 8003a00:	d000      	beq.n	8003a04 <HAL_SPI_TransmitReceive+0xcc>
 8003a02:	e0a6      	b.n	8003b52 <HAL_SPI_TransmitReceive+0x21a>
{
 8003a04:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a06:	2646      	movs	r6, #70	; 0x46
{
 8003a08:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a0a:	2502      	movs	r5, #2
 8003a0c:	e029      	b.n	8003a62 <HAL_SPI_TransmitReceive+0x12a>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	4215      	tst	r5, r2
 8003a14:	d010      	beq.n	8003a38 <HAL_SPI_TransmitReceive+0x100>
 8003a16:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003a18:	2a00      	cmp	r2, #0
 8003a1a:	d00d      	beq.n	8003a38 <HAL_SPI_TransmitReceive+0x100>
 8003a1c:	464a      	mov	r2, r9
 8003a1e:	2a01      	cmp	r2, #1
 8003a20:	d10a      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x100>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003a24:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a26:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a28:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a2a:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003a2c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003a2e:	3a01      	subs	r2, #1
 8003a30:	b292      	uxth	r2, r2
 8003a32:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003a34:	2200      	movs	r2, #0
 8003a36:	4691      	mov	r9, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a38:	2201      	movs	r2, #1
 8003a3a:	0010      	movs	r0, r2
 8003a3c:	6899      	ldr	r1, [r3, #8]
 8003a3e:	4008      	ands	r0, r1
 8003a40:	420a      	tst	r2, r1
 8003a42:	d00c      	beq.n	8003a5e <HAL_SPI_TransmitReceive+0x126>
 8003a44:	5ba2      	ldrh	r2, [r4, r6]
 8003a46:	2a00      	cmp	r2, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_SPI_TransmitReceive+0x126>
        txallowed = 1U;
 8003a4a:	4681      	mov	r9, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a52:	3302      	adds	r3, #2
 8003a54:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003a56:	5ba3      	ldrh	r3, [r4, r6]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	53a3      	strh	r3, [r4, r6]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a5e:	f7fe f9a3 	bl	8001da8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1d2      	bne.n	8003a0e <HAL_SPI_TransmitReceive+0xd6>
 8003a68:	5ba3      	ldrh	r3, [r4, r6]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1cf      	bne.n	8003a0e <HAL_SPI_TransmitReceive+0xd6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a6e:	003a      	movs	r2, r7
 8003a70:	0020      	movs	r0, r4
 8003a72:	9906      	ldr	r1, [sp, #24]
 8003a74:	f7ff fa84 	bl	8002f80 <SPI_EndRxTxTransaction>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d100      	bne.n	8003a7e <HAL_SPI_TransmitReceive+0x146>
 8003a7c:	e778      	b.n	8003970 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a7e:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8003a80:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a82:	6623      	str	r3, [r4, #96]	; 0x60
 8003a84:	e774      	b.n	8003970 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8003a86:	2002      	movs	r0, #2
 8003a88:	e778      	b.n	800397c <HAL_SPI_TransmitReceive+0x44>
    errorcode = HAL_ERROR;
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	e770      	b.n	8003970 <HAL_SPI_TransmitReceive+0x38>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a8e:	2180      	movs	r1, #128	; 0x80
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	0149      	lsls	r1, r1, #5
 8003a94:	6858      	ldr	r0, [r3, #4]
 8003a96:	4301      	orrs	r1, r0
 8003a98:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a9a:	2140      	movs	r1, #64	; 0x40
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	4201      	tst	r1, r0
 8003aa0:	d102      	bne.n	8003aa8 <HAL_SPI_TransmitReceive+0x170>
    __HAL_SPI_ENABLE(hspi);
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	4301      	orrs	r1, r0
 8003aa6:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aa8:	2a00      	cmp	r2, #0
 8003aaa:	d14b      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x20c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aac:	782a      	ldrb	r2, [r5, #0]
 8003aae:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ab0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003ab6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003abe:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ac0:	2646      	movs	r6, #70	; 0x46
        txallowed = 1U;
 8003ac2:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ac4:	2502      	movs	r5, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ac6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <HAL_SPI_TransmitReceive+0x19a>
 8003acc:	5ba3      	ldrh	r3, [r4, r6]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0cd      	beq.n	8003a6e <HAL_SPI_TransmitReceive+0x136>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	4215      	tst	r5, r2
 8003ad8:	d012      	beq.n	8003b00 <HAL_SPI_TransmitReceive+0x1c8>
 8003ada:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003adc:	2a00      	cmp	r2, #0
 8003ade:	d00f      	beq.n	8003b00 <HAL_SPI_TransmitReceive+0x1c8>
 8003ae0:	464a      	mov	r2, r9
 8003ae2:	2a01      	cmp	r2, #1
 8003ae4:	d10c      	bne.n	8003b00 <HAL_SPI_TransmitReceive+0x1c8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ae6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ae8:	7812      	ldrb	r2, [r2, #0]
 8003aea:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 8003aec:	2200      	movs	r2, #0
 8003aee:	4691      	mov	r9, r2
        hspi->pTxBuffPtr++;
 8003af0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003af2:	3301      	adds	r3, #1
 8003af4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003af6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	2101      	movs	r1, #1
 8003b02:	0008      	movs	r0, r1
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	4010      	ands	r0, r2
 8003b08:	4211      	tst	r1, r2
 8003b0a:	d00d      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x1f0>
 8003b0c:	5ba2      	ldrh	r2, [r4, r6]
 8003b0e:	2a00      	cmp	r2, #0
 8003b10:	d00a      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x1f0>
        txallowed = 1U;
 8003b12:	4681      	mov	r9, r0
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b14:	7b1b      	ldrb	r3, [r3, #12]
 8003b16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b18:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8003b1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003b20:	5ba3      	ldrh	r3, [r4, r6]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	53a3      	strh	r3, [r4, r6]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b28:	f7fe f93e 	bl	8001da8 <HAL_GetTick>
 8003b2c:	9b06      	ldr	r3, [sp, #24]
 8003b2e:	1bc0      	subs	r0, r0, r7
 8003b30:	4298      	cmp	r0, r3
 8003b32:	d303      	bcc.n	8003b3c <HAL_SPI_TransmitReceive+0x204>
 8003b34:	3301      	adds	r3, #1
 8003b36:	d0c6      	beq.n	8003ac6 <HAL_SPI_TransmitReceive+0x18e>
        errorcode = HAL_TIMEOUT;
 8003b38:	2003      	movs	r0, #3
 8003b3a:	e719      	b.n	8003970 <HAL_SPI_TransmitReceive+0x38>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1c2      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0x18e>
        errorcode = HAL_TIMEOUT;
 8003b40:	2003      	movs	r0, #3
 8003b42:	e715      	b.n	8003970 <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b44:	2e01      	cmp	r6, #1
 8003b46:	d1ba      	bne.n	8003abe <HAL_SPI_TransmitReceive+0x186>
 8003b48:	e7b0      	b.n	8003aac <HAL_SPI_TransmitReceive+0x174>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b4a:	2e01      	cmp	r6, #1
 8003b4c:	d000      	beq.n	8003b50 <HAL_SPI_TransmitReceive+0x218>
 8003b4e:	e755      	b.n	80039fc <HAL_SPI_TransmitReceive+0xc4>
 8003b50:	e74c      	b.n	80039ec <HAL_SPI_TransmitReceive+0xb4>
        txallowed = 1U;
 8003b52:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b54:	2646      	movs	r6, #70	; 0x46
        txallowed = 1U;
 8003b56:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b58:	2502      	movs	r5, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d103      	bne.n	8003b68 <HAL_SPI_TransmitReceive+0x230>
 8003b60:	5ba3      	ldrh	r3, [r4, r6]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d100      	bne.n	8003b68 <HAL_SPI_TransmitReceive+0x230>
 8003b66:	e782      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x136>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	4215      	tst	r5, r2
 8003b6e:	d010      	beq.n	8003b92 <HAL_SPI_TransmitReceive+0x25a>
 8003b70:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003b72:	2a00      	cmp	r2, #0
 8003b74:	d00d      	beq.n	8003b92 <HAL_SPI_TransmitReceive+0x25a>
 8003b76:	464a      	mov	r2, r9
 8003b78:	2a01      	cmp	r2, #1
 8003b7a:	d10a      	bne.n	8003b92 <HAL_SPI_TransmitReceive+0x25a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b7e:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b80:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b82:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b84:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003b86:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003b88:	3a01      	subs	r2, #1
 8003b8a:	b292      	uxth	r2, r2
 8003b8c:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003b8e:	2200      	movs	r2, #0
 8003b90:	4691      	mov	r9, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b92:	2101      	movs	r1, #1
 8003b94:	0008      	movs	r0, r1
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	4010      	ands	r0, r2
 8003b9a:	4211      	tst	r1, r2
 8003b9c:	d00c      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x280>
 8003b9e:	5ba2      	ldrh	r2, [r4, r6]
 8003ba0:	2a00      	cmp	r2, #0
 8003ba2:	d009      	beq.n	8003bb8 <HAL_SPI_TransmitReceive+0x280>
        txallowed = 1U;
 8003ba4:	4681      	mov	r9, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003baa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bac:	3302      	adds	r3, #2
 8003bae:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003bb0:	5ba3      	ldrh	r3, [r4, r6]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	53a3      	strh	r3, [r4, r6]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bb8:	f7fe f8f6 	bl	8001da8 <HAL_GetTick>
 8003bbc:	9b06      	ldr	r3, [sp, #24]
 8003bbe:	1bc0      	subs	r0, r0, r7
 8003bc0:	4298      	cmp	r0, r3
 8003bc2:	d3ca      	bcc.n	8003b5a <HAL_SPI_TransmitReceive+0x222>
        errorcode = HAL_TIMEOUT;
 8003bc4:	2003      	movs	r0, #3
 8003bc6:	e6d3      	b.n	8003970 <HAL_SPI_TransmitReceive+0x38>
 8003bc8:	ffffefff 	.word	0xffffefff

08003bcc <HAL_SPI_Receive>:
{
 8003bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bce:	4647      	mov	r7, r8
 8003bd0:	46ce      	mov	lr, r9
 8003bd2:	001d      	movs	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003bd4:	2382      	movs	r3, #130	; 0x82
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003bda:	6842      	ldr	r2, [r0, #4]
{
 8003bdc:	0004      	movs	r4, r0
 8003bde:	4688      	mov	r8, r1
 8003be0:	b085      	sub	sp, #20
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d100      	bne.n	8003bea <HAL_SPI_Receive+0x1e>
 8003be8:	e098      	b.n	8003d1c <HAL_SPI_Receive+0x150>
  __HAL_LOCK(hspi);
 8003bea:	235c      	movs	r3, #92	; 0x5c
 8003bec:	5ce2      	ldrb	r2, [r4, r3]
 8003bee:	2a01      	cmp	r2, #1
 8003bf0:	d100      	bne.n	8003bf4 <HAL_SPI_Receive+0x28>
 8003bf2:	e0a0      	b.n	8003d36 <HAL_SPI_Receive+0x16a>
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	54e2      	strb	r2, [r4, r3]
  tickstart = HAL_GetTick();
 8003bf8:	f7fe f8d6 	bl	8001da8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003bfc:	225d      	movs	r2, #93	; 0x5d
 8003bfe:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 8003c00:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003c02:	b2d8      	uxtb	r0, r3
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d00b      	beq.n	8003c20 <HAL_SPI_Receive+0x54>
    errorcode = HAL_BUSY;
 8003c08:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003c0a:	235d      	movs	r3, #93	; 0x5d
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8003c10:	2200      	movs	r2, #0
 8003c12:	3b01      	subs	r3, #1
 8003c14:	54e2      	strb	r2, [r4, r3]
}
 8003c16:	b005      	add	sp, #20
 8003c18:	bcc0      	pop	{r6, r7}
 8003c1a:	46b9      	mov	r9, r7
 8003c1c:	46b0      	mov	r8, r6
 8003c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8003c20:	4643      	mov	r3, r8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f1      	beq.n	8003c0a <HAL_SPI_Receive+0x3e>
 8003c26:	2f00      	cmp	r7, #0
 8003c28:	d0ef      	beq.n	8003c0a <HAL_SPI_Receive+0x3e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c2a:	2304      	movs	r3, #4
 8003c2c:	54a3      	strb	r3, [r4, r2]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c2e:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c30:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c32:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003c34:	2244      	movs	r2, #68	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c36:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferSize  = Size;
 8003c38:	52a7      	strh	r7, [r4, r2]
  hspi->RxXferCount = Size;
 8003c3a:	3202      	adds	r2, #2
 8003c3c:	52a7      	strh	r7, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c3e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003c40:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003c42:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003c44:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003c46:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c48:	23e0      	movs	r3, #224	; 0xe0
 8003c4a:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c4c:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4299      	cmp	r1, r3
 8003c52:	d800      	bhi.n	8003c56 <HAL_SPI_Receive+0x8a>
 8003c54:	e08c      	b.n	8003d70 <HAL_SPI_Receive+0x1a4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c56:	0013      	movs	r3, r2
 8003c58:	6850      	ldr	r0, [r2, #4]
 8003c5a:	4fb8      	ldr	r7, [pc, #736]	; (8003f3c <HAL_SPI_Receive+0x370>)
 8003c5c:	4038      	ands	r0, r7
 8003c5e:	6050      	str	r0, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c60:	2080      	movs	r0, #128	; 0x80
 8003c62:	68a7      	ldr	r7, [r4, #8]
 8003c64:	0200      	lsls	r0, r0, #8
 8003c66:	4287      	cmp	r7, r0
 8003c68:	d107      	bne.n	8003c7a <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 8003c6a:	2740      	movs	r7, #64	; 0x40
 8003c6c:	6810      	ldr	r0, [r2, #0]
 8003c6e:	43b8      	bics	r0, r7
 8003c70:	6010      	str	r0, [r2, #0]
    SPI_1LINE_RX(hspi);
 8003c72:	6810      	ldr	r0, [r2, #0]
 8003c74:	4fb2      	ldr	r7, [pc, #712]	; (8003f40 <HAL_SPI_Receive+0x374>)
 8003c76:	4038      	ands	r0, r7
 8003c78:	6010      	str	r0, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c7a:	2040      	movs	r0, #64	; 0x40
 8003c7c:	6817      	ldr	r7, [r2, #0]
 8003c7e:	4238      	tst	r0, r7
 8003c80:	d102      	bne.n	8003c88 <HAL_SPI_Receive+0xbc>
    __HAL_SPI_ENABLE(hspi);
 8003c82:	6817      	ldr	r7, [r2, #0]
 8003c84:	4338      	orrs	r0, r7
 8003c86:	6010      	str	r0, [r2, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003c88:	20e0      	movs	r0, #224	; 0xe0
 8003c8a:	00c0      	lsls	r0, r0, #3
 8003c8c:	4281      	cmp	r1, r0
 8003c8e:	d976      	bls.n	8003d7e <HAL_SPI_Receive+0x1b2>
    while (hspi->RxXferCount > 0U)
 8003c90:	2146      	movs	r1, #70	; 0x46
 8003c92:	5a61      	ldrh	r1, [r4, r1]
 8003c94:	2900      	cmp	r1, #0
 8003c96:	d01a      	beq.n	8003cce <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c98:	2001      	movs	r0, #1
        hspi->RxXferCount--;
 8003c9a:	2146      	movs	r1, #70	; 0x46
 8003c9c:	2d00      	cmp	r5, #0
 8003c9e:	d100      	bne.n	8003ca2 <HAL_SPI_Receive+0xd6>
 8003ca0:	e0d5      	b.n	8003e4e <HAL_SPI_Receive+0x282>
 8003ca2:	1c69      	adds	r1, r5, #1
 8003ca4:	d000      	beq.n	8003ca8 <HAL_SPI_Receive+0xdc>
 8003ca6:	e11d      	b.n	8003ee4 <HAL_SPI_Receive+0x318>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ca8:	2301      	movs	r3, #1
    while (hspi->RxXferCount > 0U)
 8003caa:	2746      	movs	r7, #70	; 0x46
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cac:	4698      	mov	r8, r3
 8003cae:	4641      	mov	r1, r8
 8003cb0:	6893      	ldr	r3, [r2, #8]
 8003cb2:	4219      	tst	r1, r3
 8003cb4:	d041      	beq.n	8003d3a <HAL_SPI_Receive+0x16e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cb6:	68d1      	ldr	r1, [r2, #12]
 8003cb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cba:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cbc:	3302      	adds	r3, #2
 8003cbe:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003cc0:	5be1      	ldrh	r1, [r4, r7]
 8003cc2:	3901      	subs	r1, #1
 8003cc4:	b289      	uxth	r1, r1
 8003cc6:	53e1      	strh	r1, [r4, r7]
    while (hspi->RxXferCount > 0U)
 8003cc8:	5be3      	ldrh	r3, [r4, r7]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1ef      	bne.n	8003cae <HAL_SPI_Receive+0xe2>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cce:	2382      	movs	r3, #130	; 0x82
 8003cd0:	6862      	ldr	r2, [r4, #4]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d100      	bne.n	8003cda <HAL_SPI_Receive+0x10e>
 8003cd8:	e0bd      	b.n	8003e56 <HAL_SPI_Receive+0x28a>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cda:	f7fe f865 	bl	8001da8 <HAL_GetTick>
 8003cde:	19af      	adds	r7, r5, r6
 8003ce0:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8003ce2:	f7fe f861 	bl	8001da8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ce6:	4b97      	ldr	r3, [pc, #604]	; (8003f44 <HAL_SPI_Receive+0x378>)
  tmp_tickstart = HAL_GetTick();
 8003ce8:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	015b      	lsls	r3, r3, #5
 8003cee:	0d1b      	lsrs	r3, r3, #20
 8003cf0:	437b      	muls	r3, r7
 8003cf2:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	4699      	mov	r9, r3
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	1c6b      	adds	r3, r5, #1
 8003cfc:	d124      	bne.n	8003d48 <HAL_SPI_Receive+0x17c>
 8003cfe:	2180      	movs	r1, #128	; 0x80
 8003d00:	6893      	ldr	r3, [r2, #8]
 8003d02:	4219      	tst	r1, r3
 8003d04:	d1fc      	bne.n	8003d00 <HAL_SPI_Receive+0x134>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d06:	2382      	movs	r3, #130	; 0x82
 8003d08:	6862      	ldr	r2, [r4, #4]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d100      	bne.n	8003d12 <HAL_SPI_Receive+0x146>
 8003d10:	e0b1      	b.n	8003e76 <HAL_SPI_Receive+0x2aa>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d12:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003d14:	1e43      	subs	r3, r0, #1
 8003d16:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 8003d18:	b2c0      	uxtb	r0, r0
error :
 8003d1a:	e776      	b.n	8003c0a <HAL_SPI_Receive+0x3e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d1c:	6883      	ldr	r3, [r0, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d000      	beq.n	8003d24 <HAL_SPI_Receive+0x158>
 8003d22:	e762      	b.n	8003bea <HAL_SPI_Receive+0x1e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d24:	2204      	movs	r2, #4
 8003d26:	335d      	adds	r3, #93	; 0x5d
 8003d28:	54c2      	strb	r2, [r0, r3]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d2a:	003b      	movs	r3, r7
 8003d2c:	000a      	movs	r2, r1
 8003d2e:	9500      	str	r5, [sp, #0]
 8003d30:	f7ff fe02 	bl	8003938 <HAL_SPI_TransmitReceive>
 8003d34:	e76f      	b.n	8003c16 <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 8003d36:	2002      	movs	r0, #2
 8003d38:	e76d      	b.n	8003c16 <HAL_SPI_Receive+0x4a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d3a:	f7fe f835 	bl	8001da8 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8003d3e:	5be3      	ldrh	r3, [r4, r7]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0c4      	beq.n	8003cce <HAL_SPI_Receive+0x102>
 8003d44:	6822      	ldr	r2, [r4, #0]
 8003d46:	e7b2      	b.n	8003cae <HAL_SPI_Receive+0xe2>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d48:	6893      	ldr	r3, [r2, #8]
 8003d4a:	464a      	mov	r2, r9
 8003d4c:	421a      	tst	r2, r3
 8003d4e:	d0da      	beq.n	8003d06 <HAL_SPI_Receive+0x13a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d50:	f7fe f82a 	bl	8001da8 <HAL_GetTick>
 8003d54:	4643      	mov	r3, r8
 8003d56:	1ac0      	subs	r0, r0, r3
 8003d58:	42b8      	cmp	r0, r7
 8003d5a:	d300      	bcc.n	8003d5e <HAL_SPI_Receive+0x192>
 8003d5c:	e0a4      	b.n	8003ea8 <HAL_SPI_Receive+0x2dc>
      if(count == 0U)
 8003d5e:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8003d60:	1e5a      	subs	r2, r3, #1
 8003d62:	4193      	sbcs	r3, r2
 8003d64:	425b      	negs	r3, r3
 8003d66:	401f      	ands	r7, r3
      count--;
 8003d68:	9b03      	ldr	r3, [sp, #12]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	9303      	str	r3, [sp, #12]
 8003d6e:	e7c3      	b.n	8003cf8 <HAL_SPI_Receive+0x12c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d70:	2080      	movs	r0, #128	; 0x80
 8003d72:	6857      	ldr	r7, [r2, #4]
 8003d74:	0140      	lsls	r0, r0, #5
 8003d76:	4338      	orrs	r0, r7
 8003d78:	0013      	movs	r3, r2
 8003d7a:	6050      	str	r0, [r2, #4]
 8003d7c:	e770      	b.n	8003c60 <HAL_SPI_Receive+0x94>
    while (hspi->RxXferCount > 0U)
 8003d7e:	2246      	movs	r2, #70	; 0x46
 8003d80:	5aa2      	ldrh	r2, [r4, r2]
 8003d82:	2a00      	cmp	r2, #0
 8003d84:	d0a3      	beq.n	8003cce <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d86:	2101      	movs	r1, #1
        hspi->RxXferCount--;
 8003d88:	2246      	movs	r2, #70	; 0x46
 8003d8a:	2d00      	cmp	r5, #0
 8003d8c:	d04b      	beq.n	8003e26 <HAL_SPI_Receive+0x25a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d8e:	2201      	movs	r2, #1
    while (hspi->RxXferCount > 0U)
 8003d90:	2746      	movs	r7, #70	; 0x46
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d92:	4690      	mov	r8, r2
 8003d94:	1c6a      	adds	r2, r5, #1
 8003d96:	d12c      	bne.n	8003df2 <HAL_SPI_Receive+0x226>
 8003d98:	4641      	mov	r1, r8
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	4211      	tst	r1, r2
 8003d9e:	d011      	beq.n	8003dc4 <HAL_SPI_Receive+0x1f8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003da0:	7b1b      	ldrb	r3, [r3, #12]
 8003da2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003da4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003da6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003da8:	3301      	adds	r3, #1
 8003daa:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003dac:	5be1      	ldrh	r1, [r4, r7]
 8003dae:	3901      	subs	r1, #1
 8003db0:	b289      	uxth	r1, r1
 8003db2:	53e1      	strh	r1, [r4, r7]
    while (hspi->RxXferCount > 0U)
 8003db4:	5be3      	ldrh	r3, [r4, r7]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d089      	beq.n	8003cce <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	4211      	tst	r1, r2
 8003dc2:	d1ed      	bne.n	8003da0 <HAL_SPI_Receive+0x1d4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dc4:	f7fd fff0 	bl	8001da8 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8003dc8:	5be3      	ldrh	r3, [r4, r7]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d100      	bne.n	8003dd0 <HAL_SPI_Receive+0x204>
 8003dce:	e77e      	b.n	8003cce <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	e7f3      	b.n	8003dbc <HAL_SPI_Receive+0x1f0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dd4:	7b1b      	ldrb	r3, [r3, #12]
 8003dd6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003dd8:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003dda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ddc:	3301      	adds	r3, #1
 8003dde:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003de0:	5be3      	ldrh	r3, [r4, r7]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	53e3      	strh	r3, [r4, r7]
    while (hspi->RxXferCount > 0U)
 8003de8:	5be3      	ldrh	r3, [r4, r7]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d100      	bne.n	8003df0 <HAL_SPI_Receive+0x224>
 8003dee:	e76e      	b.n	8003cce <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	4641      	mov	r1, r8
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	4211      	tst	r1, r2
 8003df8:	d1ec      	bne.n	8003dd4 <HAL_SPI_Receive+0x208>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dfa:	f7fd ffd5 	bl	8001da8 <HAL_GetTick>
 8003dfe:	1b80      	subs	r0, r0, r6
 8003e00:	4285      	cmp	r5, r0
 8003e02:	d8f1      	bhi.n	8003de8 <HAL_SPI_Receive+0x21c>
          errorcode = HAL_TIMEOUT;
 8003e04:	2003      	movs	r0, #3
 8003e06:	e700      	b.n	8003c0a <HAL_SPI_Receive+0x3e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e08:	7b1b      	ldrb	r3, [r3, #12]
 8003e0a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003e0c:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e10:	3301      	adds	r3, #1
 8003e12:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003e14:	5aa3      	ldrh	r3, [r4, r2]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	52a3      	strh	r3, [r4, r2]
    while (hspi->RxXferCount > 0U)
 8003e1c:	5aa3      	ldrh	r3, [r4, r2]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d100      	bne.n	8003e24 <HAL_SPI_Receive+0x258>
 8003e22:	e754      	b.n	8003cce <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	6898      	ldr	r0, [r3, #8]
 8003e28:	4201      	tst	r1, r0
 8003e2a:	d1ed      	bne.n	8003e08 <HAL_SPI_Receive+0x23c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e2c:	f7fd ffbc 	bl	8001da8 <HAL_GetTick>
          errorcode = HAL_TIMEOUT;
 8003e30:	2003      	movs	r0, #3
 8003e32:	e6ea      	b.n	8003c0a <HAL_SPI_Receive+0x3e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e34:	68d7      	ldr	r7, [r2, #12]
 8003e36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e38:	801f      	strh	r7, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003e3e:	5a63      	ldrh	r3, [r4, r1]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	5263      	strh	r3, [r4, r1]
    while (hspi->RxXferCount > 0U)
 8003e46:	5a63      	ldrh	r3, [r4, r1]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d100      	bne.n	8003e4e <HAL_SPI_Receive+0x282>
 8003e4c:	e73f      	b.n	8003cce <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e4e:	6893      	ldr	r3, [r2, #8]
 8003e50:	4218      	tst	r0, r3
 8003e52:	d1ef      	bne.n	8003e34 <HAL_SPI_Receive+0x268>
 8003e54:	e7ea      	b.n	8003e2c <HAL_SPI_Receive+0x260>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e56:	2280      	movs	r2, #128	; 0x80
 8003e58:	68a3      	ldr	r3, [r4, #8]
 8003e5a:	0212      	lsls	r2, r2, #8
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d004      	beq.n	8003e6a <HAL_SPI_Receive+0x29e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e60:	2280      	movs	r2, #128	; 0x80
 8003e62:	00d2      	lsls	r2, r2, #3
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d000      	beq.n	8003e6a <HAL_SPI_Receive+0x29e>
 8003e68:	e737      	b.n	8003cda <HAL_SPI_Receive+0x10e>
    __HAL_SPI_DISABLE(hspi);
 8003e6a:	2140      	movs	r1, #64	; 0x40
 8003e6c:	6822      	ldr	r2, [r4, #0]
 8003e6e:	6813      	ldr	r3, [r2, #0]
 8003e70:	438b      	bics	r3, r1
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	e731      	b.n	8003cda <HAL_SPI_Receive+0x10e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e76:	2280      	movs	r2, #128	; 0x80
 8003e78:	68a3      	ldr	r3, [r4, #8]
 8003e7a:	0212      	lsls	r2, r2, #8
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_SPI_Receive+0x2be>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e80:	2280      	movs	r2, #128	; 0x80
 8003e82:	00d2      	lsls	r2, r2, #3
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d000      	beq.n	8003e8a <HAL_SPI_Receive+0x2be>
 8003e88:	e743      	b.n	8003d12 <HAL_SPI_Receive+0x146>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e8a:	0032      	movs	r2, r6
 8003e8c:	0029      	movs	r1, r5
 8003e8e:	0020      	movs	r0, r4
 8003e90:	f7fe ffdc 	bl	8002e4c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	d100      	bne.n	8003e9a <HAL_SPI_Receive+0x2ce>
 8003e98:	e73b      	b.n	8003d12 <HAL_SPI_Receive+0x146>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ea2:	2320      	movs	r3, #32
 8003ea4:	6623      	str	r3, [r4, #96]	; 0x60
 8003ea6:	e734      	b.n	8003d12 <HAL_SPI_Receive+0x146>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ea8:	21e0      	movs	r1, #224	; 0xe0
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	438a      	bics	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eb2:	2282      	movs	r2, #130	; 0x82
 8003eb4:	6861      	ldr	r1, [r4, #4]
 8003eb6:	0052      	lsls	r2, r2, #1
 8003eb8:	4291      	cmp	r1, r2
 8003eba:	d030      	beq.n	8003f1e <HAL_SPI_Receive+0x352>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ebc:	2180      	movs	r1, #128	; 0x80
 8003ebe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003ec0:	0189      	lsls	r1, r1, #6
 8003ec2:	428a      	cmp	r2, r1
 8003ec4:	d106      	bne.n	8003ed4 <HAL_SPI_Receive+0x308>
          SPI_RESET_CRC(hspi);
 8003ec6:	6819      	ldr	r1, [r3, #0]
 8003ec8:	481f      	ldr	r0, [pc, #124]	; (8003f48 <HAL_SPI_Receive+0x37c>)
 8003eca:	4001      	ands	r1, r0
 8003ecc:	6019      	str	r1, [r3, #0]
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003ed4:	235d      	movs	r3, #93	; 0x5d
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	54e2      	strb	r2, [r4, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003edc:	321f      	adds	r2, #31
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ee2:	e7de      	b.n	8003ea2 <HAL_SPI_Receive+0x2d6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ee4:	2201      	movs	r2, #1
        hspi->RxXferCount--;
 8003ee6:	2746      	movs	r7, #70	; 0x46
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ee8:	4690      	mov	r8, r2
 8003eea:	e00d      	b.n	8003f08 <HAL_SPI_Receive+0x33c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ef0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ef2:	3302      	adds	r3, #2
 8003ef4:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003ef6:	5be3      	ldrh	r3, [r4, r7]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	53e3      	strh	r3, [r4, r7]
    while (hspi->RxXferCount > 0U)
 8003efe:	5be3      	ldrh	r3, [r4, r7]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d100      	bne.n	8003f06 <HAL_SPI_Receive+0x33a>
 8003f04:	e6e3      	b.n	8003cce <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	4641      	mov	r1, r8
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	4211      	tst	r1, r2
 8003f0e:	d1ed      	bne.n	8003eec <HAL_SPI_Receive+0x320>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f10:	f7fd ff4a 	bl	8001da8 <HAL_GetTick>
 8003f14:	1b80      	subs	r0, r0, r6
 8003f16:	4285      	cmp	r5, r0
 8003f18:	d8f1      	bhi.n	8003efe <HAL_SPI_Receive+0x332>
          errorcode = HAL_TIMEOUT;
 8003f1a:	2003      	movs	r0, #3
 8003f1c:	e675      	b.n	8003c0a <HAL_SPI_Receive+0x3e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f1e:	2180      	movs	r1, #128	; 0x80
 8003f20:	68a2      	ldr	r2, [r4, #8]
 8003f22:	0209      	lsls	r1, r1, #8
 8003f24:	428a      	cmp	r2, r1
 8003f26:	d003      	beq.n	8003f30 <HAL_SPI_Receive+0x364>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f28:	2180      	movs	r1, #128	; 0x80
 8003f2a:	00c9      	lsls	r1, r1, #3
 8003f2c:	428a      	cmp	r2, r1
 8003f2e:	d1c5      	bne.n	8003ebc <HAL_SPI_Receive+0x2f0>
          __HAL_SPI_DISABLE(hspi);
 8003f30:	2140      	movs	r1, #64	; 0x40
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	438a      	bics	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e7c0      	b.n	8003ebc <HAL_SPI_Receive+0x2f0>
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	ffffefff 	.word	0xffffefff
 8003f40:	ffffbfff 	.word	0xffffbfff
 8003f44:	20000000 	.word	0x20000000
 8003f48:	ffffdfff 	.word	0xffffdfff

08003f4c <HAL_SPI_Transmit_DMA>:
{
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8003f4e:	235c      	movs	r3, #92	; 0x5c
{
 8003f50:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8003f52:	5cc0      	ldrb	r0, [r0, r3]
 8003f54:	2801      	cmp	r0, #1
 8003f56:	d05f      	beq.n	8004018 <HAL_SPI_Transmit_DMA+0xcc>
 8003f58:	2001      	movs	r0, #1
 8003f5a:	54e0      	strb	r0, [r4, r3]
  if (hspi->State != HAL_SPI_STATE_READY)
 8003f5c:	305c      	adds	r0, #92	; 0x5c
 8003f5e:	5c23      	ldrb	r3, [r4, r0]
 8003f60:	b2dd      	uxtb	r5, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d005      	beq.n	8003f72 <HAL_SPI_Transmit_DMA+0x26>
    errorcode = HAL_BUSY;
 8003f66:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 8003f68:	235c      	movs	r3, #92	; 0x5c
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	54e2      	strb	r2, [r4, r3]
}
 8003f6e:	0028      	movs	r0, r5
 8003f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8003f72:	2900      	cmp	r1, #0
 8003f74:	d0f8      	beq.n	8003f68 <HAL_SPI_Transmit_DMA+0x1c>
 8003f76:	2a00      	cmp	r2, #0
 8003f78:	d0f6      	beq.n	8003f68 <HAL_SPI_Transmit_DMA+0x1c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	5423      	strb	r3, [r4, r0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f7e:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8003f80:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f82:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 8003f84:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8003f86:	2244      	movs	r2, #68	; 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f88:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f8a:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003f8c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f8e:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f90:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8003f92:	3202      	adds	r2, #2
 8003f94:	52a3      	strh	r3, [r4, r2]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	68a2      	ldr	r2, [r4, #8]
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d030      	beq.n	8004002 <HAL_SPI_Transmit_DMA+0xb6>
    __HAL_SPI_DISABLE(hspi);
 8003fa0:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003fa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fa4:	4b2b      	ldr	r3, [pc, #172]	; (8004054 <HAL_SPI_Transmit_DMA+0x108>)
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003fa6:	4e2c      	ldr	r6, [pc, #176]	; (8004058 <HAL_SPI_Transmit_DMA+0x10c>)
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003fa8:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003faa:	4b2c      	ldr	r3, [pc, #176]	; (800405c <HAL_SPI_Transmit_DMA+0x110>)
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003fac:	68e7      	ldr	r7, [r4, #12]
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003fae:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003fb0:	4b2b      	ldr	r3, [pc, #172]	; (8004060 <HAL_SPI_Transmit_DMA+0x114>)
 8003fb2:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	6383      	str	r3, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003fb8:	6853      	ldr	r3, [r2, #4]
 8003fba:	4033      	ands	r3, r6
 8003fbc:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003fbe:	23e0      	movs	r3, #224	; 0xe0
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	429f      	cmp	r7, r3
 8003fc4:	d804      	bhi.n	8003fd0 <HAL_SPI_Transmit_DMA+0x84>
 8003fc6:	2380      	movs	r3, #128	; 0x80
 8003fc8:	6987      	ldr	r7, [r0, #24]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	429f      	cmp	r7, r3
 8003fce:	d02d      	beq.n	800402c <HAL_SPI_Transmit_DMA+0xe0>
                                 hspi->TxXferCount))
 8003fd0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003fd2:	320c      	adds	r2, #12
                                 hspi->TxXferCount))
 8003fd4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003fd6:	f7fe f853 	bl	8002080 <HAL_DMA_Start_IT>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d11e      	bne.n	800401c <HAL_SPI_Transmit_DMA+0xd0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fde:	2240      	movs	r2, #64	; 0x40
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	6819      	ldr	r1, [r3, #0]
 8003fe4:	420a      	tst	r2, r1
 8003fe6:	d102      	bne.n	8003fee <HAL_SPI_Transmit_DMA+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8003fe8:	6819      	ldr	r1, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003fee:	2120      	movs	r1, #32
 8003ff0:	685a      	ldr	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ff2:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	391e      	subs	r1, #30
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	e7b2      	b.n	8003f68 <HAL_SPI_Transmit_DMA+0x1c>
    __HAL_SPI_DISABLE(hspi);
 8004002:	2040      	movs	r0, #64	; 0x40
 8004004:	6822      	ldr	r2, [r4, #0]
 8004006:	6813      	ldr	r3, [r2, #0]
 8004008:	4383      	bics	r3, r0
 800400a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800400c:	2380      	movs	r3, #128	; 0x80
 800400e:	6810      	ldr	r0, [r2, #0]
 8004010:	01db      	lsls	r3, r3, #7
 8004012:	4303      	orrs	r3, r0
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e7c4      	b.n	8003fa2 <HAL_SPI_Transmit_DMA+0x56>
  __HAL_LOCK(hspi);
 8004018:	2502      	movs	r5, #2
 800401a:	e7a8      	b.n	8003f6e <HAL_SPI_Transmit_DMA+0x22>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800401c:	2210      	movs	r2, #16
 800401e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004020:	4313      	orrs	r3, r2
 8004022:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8004024:	235d      	movs	r3, #93	; 0x5d
 8004026:	3a0f      	subs	r2, #15
 8004028:	54e2      	strb	r2, [r4, r3]
    goto error;
 800402a:	e79d      	b.n	8003f68 <HAL_SPI_Transmit_DMA+0x1c>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800402c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800402e:	07db      	lsls	r3, r3, #31
 8004030:	d406      	bmi.n	8004040 <HAL_SPI_Transmit_DMA+0xf4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004032:	6853      	ldr	r3, [r2, #4]
 8004034:	401e      	ands	r6, r3
 8004036:	6056      	str	r6, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004038:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800403e:	e7c7      	b.n	8003fd0 <HAL_SPI_Transmit_DMA+0x84>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	6856      	ldr	r6, [r2, #4]
 8004044:	01db      	lsls	r3, r3, #7
 8004046:	4333      	orrs	r3, r6
 8004048:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800404a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	3301      	adds	r3, #1
 8004050:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004052:	e7bd      	b.n	8003fd0 <HAL_SPI_Transmit_DMA+0x84>
 8004054:	08002df1 	.word	0x08002df1
 8004058:	ffffbfff 	.word	0xffffbfff
 800405c:	08003291 	.word	0x08003291
 8004060:	08002e15 	.word	0x08002e15

08004064 <HAL_SPI_TransmitReceive_DMA>:
{
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8004068:	205c      	movs	r0, #92	; 0x5c
 800406a:	5c25      	ldrb	r5, [r4, r0]
 800406c:	2d01      	cmp	r5, #1
 800406e:	d05b      	beq.n	8004128 <HAL_SPI_TransmitReceive_DMA+0xc4>
 8004070:	2501      	movs	r5, #1
 8004072:	5425      	strb	r5, [r4, r0]
  tmp_state           = hspi->State;
 8004074:	3001      	adds	r0, #1
 8004076:	5c20      	ldrb	r0, [r4, r0]
 8004078:	b2c6      	uxtb	r6, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800407a:	2801      	cmp	r0, #1
 800407c:	d00e      	beq.n	800409c <HAL_SPI_TransmitReceive_DMA+0x38>
 800407e:	3504      	adds	r5, #4
 8004080:	6867      	ldr	r7, [r4, #4]
 8004082:	35ff      	adds	r5, #255	; 0xff
    errorcode = HAL_BUSY;
 8004084:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004086:	42af      	cmp	r7, r5
 8004088:	d003      	beq.n	8004092 <HAL_SPI_TransmitReceive_DMA+0x2e>
  __HAL_UNLOCK(hspi);
 800408a:	235c      	movs	r3, #92	; 0x5c
 800408c:	2200      	movs	r2, #0
 800408e:	54e2      	strb	r2, [r4, r3]
}
 8004090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004092:	68a5      	ldr	r5, [r4, #8]
 8004094:	2d00      	cmp	r5, #0
 8004096:	d1f8      	bne.n	800408a <HAL_SPI_TransmitReceive_DMA+0x26>
 8004098:	2e04      	cmp	r6, #4
 800409a:	d1f6      	bne.n	800408a <HAL_SPI_TransmitReceive_DMA+0x26>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800409c:	2900      	cmp	r1, #0
 800409e:	d041      	beq.n	8004124 <HAL_SPI_TransmitReceive_DMA+0xc0>
 80040a0:	2a00      	cmp	r2, #0
 80040a2:	d03f      	beq.n	8004124 <HAL_SPI_TransmitReceive_DMA+0xc0>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d03d      	beq.n	8004124 <HAL_SPI_TransmitReceive_DMA+0xc0>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040a8:	205d      	movs	r0, #93	; 0x5d
 80040aa:	5c25      	ldrb	r5, [r4, r0]
 80040ac:	2d04      	cmp	r5, #4
 80040ae:	d001      	beq.n	80040b4 <HAL_SPI_TransmitReceive_DMA+0x50>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040b0:	2505      	movs	r5, #5
 80040b2:	5425      	strb	r5, [r4, r0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040b4:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040b6:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80040b8:	2144      	movs	r1, #68	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040ba:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->TxXferSize  = Size;
 80040bc:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80040be:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040c0:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80040c2:	5263      	strh	r3, [r4, r1]
  hspi->RxXferCount = Size;
 80040c4:	3102      	adds	r1, #2
 80040c6:	5263      	strh	r3, [r4, r1]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80040c8:	6821      	ldr	r1, [r4, #0]
 80040ca:	4d50      	ldr	r5, [pc, #320]	; (800420c <HAL_SPI_TransmitReceive_DMA+0x1a8>)
  hspi->RxISR       = NULL;
 80040cc:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040ce:	6520      	str	r0, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80040d0:	6848      	ldr	r0, [r1, #4]
 80040d2:	4028      	ands	r0, r5
 80040d4:	6048      	str	r0, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040d6:	20e0      	movs	r0, #224	; 0xe0
 80040d8:	68e5      	ldr	r5, [r4, #12]
 80040da:	00c0      	lsls	r0, r0, #3
 80040dc:	4285      	cmp	r5, r0
 80040de:	d925      	bls.n	800412c <HAL_SPI_TransmitReceive_DMA+0xc8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040e0:	684b      	ldr	r3, [r1, #4]
 80040e2:	484b      	ldr	r0, [pc, #300]	; (8004210 <HAL_SPI_TransmitReceive_DMA+0x1ac>)
 80040e4:	4003      	ands	r3, r0
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040e8:	604b      	str	r3, [r1, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80040ea:	235d      	movs	r3, #93	; 0x5d
 80040ec:	5ce3      	ldrb	r3, [r4, r3]
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d060      	beq.n	80041b4 <HAL_SPI_TransmitReceive_DMA+0x150>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80040f2:	4b48      	ldr	r3, [pc, #288]	; (8004214 <HAL_SPI_TransmitReceive_DMA+0x1b0>)
 80040f4:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80040f6:	4b48      	ldr	r3, [pc, #288]	; (8004218 <HAL_SPI_TransmitReceive_DMA+0x1b4>)
 80040f8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80040fa:	4b48      	ldr	r3, [pc, #288]	; (800421c <HAL_SPI_TransmitReceive_DMA+0x1b8>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80040fc:	310c      	adds	r1, #12
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80040fe:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->RxXferCount))
 8004104:	3346      	adds	r3, #70	; 0x46
 8004106:	5ae3      	ldrh	r3, [r4, r3]
 8004108:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800410a:	f7fd ffb9 	bl	8002080 <HAL_DMA_Start_IT>
 800410e:	1e03      	subs	r3, r0, #0
 8004110:	d02d      	beq.n	800416e <HAL_SPI_TransmitReceive_DMA+0x10a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004112:	2210      	movs	r2, #16
 8004114:	6e23      	ldr	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004116:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004118:	4313      	orrs	r3, r2
 800411a:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800411c:	235d      	movs	r3, #93	; 0x5d
 800411e:	3a0f      	subs	r2, #15
 8004120:	54e2      	strb	r2, [r4, r3]
    goto error;
 8004122:	e7b2      	b.n	800408a <HAL_SPI_TransmitReceive_DMA+0x26>
    errorcode = HAL_ERROR;
 8004124:	2001      	movs	r0, #1
 8004126:	e7b0      	b.n	800408a <HAL_SPI_TransmitReceive_DMA+0x26>
  __HAL_LOCK(hspi);
 8004128:	2002      	movs	r0, #2
 800412a:	e7b1      	b.n	8004090 <HAL_SPI_TransmitReceive_DMA+0x2c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800412c:	2080      	movs	r0, #128	; 0x80
 800412e:	684d      	ldr	r5, [r1, #4]
 8004130:	0140      	lsls	r0, r0, #5
 8004132:	4328      	orrs	r0, r5
 8004134:	6048      	str	r0, [r1, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004136:	2080      	movs	r0, #128	; 0x80
 8004138:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800413a:	00c0      	lsls	r0, r0, #3
 800413c:	69ad      	ldr	r5, [r5, #24]
 800413e:	4285      	cmp	r5, r0
 8004140:	d03d      	beq.n	80041be <HAL_SPI_TransmitReceive_DMA+0x15a>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	6985      	ldr	r5, [r0, #24]
 800414a:	429d      	cmp	r5, r3
 800414c:	d1cd      	bne.n	80040ea <HAL_SPI_TransmitReceive_DMA+0x86>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800414e:	684b      	ldr	r3, [r1, #4]
 8004150:	4d2f      	ldr	r5, [pc, #188]	; (8004210 <HAL_SPI_TransmitReceive_DMA+0x1ac>)
 8004152:	402b      	ands	r3, r5
 8004154:	604b      	str	r3, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004156:	2346      	movs	r3, #70	; 0x46
 8004158:	5ae5      	ldrh	r5, [r4, r3]
 800415a:	07ed      	lsls	r5, r5, #31
 800415c:	d441      	bmi.n	80041e2 <HAL_SPI_TransmitReceive_DMA+0x17e>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800415e:	684d      	ldr	r5, [r1, #4]
 8004160:	4e2f      	ldr	r6, [pc, #188]	; (8004220 <HAL_SPI_TransmitReceive_DMA+0x1bc>)
 8004162:	4035      	ands	r5, r6
 8004164:	604d      	str	r5, [r1, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004166:	5ae5      	ldrh	r5, [r4, r3]
 8004168:	086d      	lsrs	r5, r5, #1
 800416a:	52e5      	strh	r5, [r4, r3]
 800416c:	e7bd      	b.n	80040ea <HAL_SPI_TransmitReceive_DMA+0x86>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800416e:	2501      	movs	r5, #1
 8004170:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004172:	6d60      	ldr	r0, [r4, #84]	; 0x54
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004174:	6851      	ldr	r1, [r2, #4]
 8004176:	4329      	orrs	r1, r5
 8004178:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800417a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800417c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800417e:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004180:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->TxXferCount))
 8004182:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004184:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                                 hspi->TxXferCount))
 8004186:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004188:	320c      	adds	r2, #12
 800418a:	f7fd ff79 	bl	8002080 <HAL_DMA_Start_IT>
 800418e:	2800      	cmp	r0, #0
 8004190:	d11f      	bne.n	80041d2 <HAL_SPI_TransmitReceive_DMA+0x16e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004192:	2240      	movs	r2, #64	; 0x40
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	6819      	ldr	r1, [r3, #0]
 8004198:	420a      	tst	r2, r1
 800419a:	d102      	bne.n	80041a2 <HAL_SPI_TransmitReceive_DMA+0x13e>
    __HAL_SPI_ENABLE(hspi);
 800419c:	6819      	ldr	r1, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80041a2:	2120      	movs	r1, #32
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	391e      	subs	r1, #30
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	e76a      	b.n	800408a <HAL_SPI_TransmitReceive_DMA+0x26>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80041b4:	4b1b      	ldr	r3, [pc, #108]	; (8004224 <HAL_SPI_TransmitReceive_DMA+0x1c0>)
 80041b6:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80041b8:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <HAL_SPI_TransmitReceive_DMA+0x1c4>)
 80041ba:	62c3      	str	r3, [r0, #44]	; 0x2c
 80041bc:	e79d      	b.n	80040fa <HAL_SPI_TransmitReceive_DMA+0x96>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80041be:	07db      	lsls	r3, r3, #31
 80041c0:	d419      	bmi.n	80041f6 <HAL_SPI_TransmitReceive_DMA+0x192>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80041c2:	684b      	ldr	r3, [r1, #4]
 80041c4:	4819      	ldr	r0, [pc, #100]	; (800422c <HAL_SPI_TransmitReceive_DMA+0x1c8>)
 80041c6:	4003      	ands	r3, r0
 80041c8:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80041ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80041cc:	085b      	lsrs	r3, r3, #1
 80041ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80041d0:	e7b7      	b.n	8004142 <HAL_SPI_TransmitReceive_DMA+0xde>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041d2:	2210      	movs	r2, #16
 80041d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80041d6:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041d8:	4313      	orrs	r3, r2
 80041da:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 80041dc:	235d      	movs	r3, #93	; 0x5d
 80041de:	54e5      	strb	r5, [r4, r3]
    goto error;
 80041e0:	e753      	b.n	800408a <HAL_SPI_TransmitReceive_DMA+0x26>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80041e2:	2580      	movs	r5, #128	; 0x80
 80041e4:	684e      	ldr	r6, [r1, #4]
 80041e6:	01ad      	lsls	r5, r5, #6
 80041e8:	4335      	orrs	r5, r6
 80041ea:	604d      	str	r5, [r1, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80041ec:	5ae5      	ldrh	r5, [r4, r3]
 80041ee:	086d      	lsrs	r5, r5, #1
 80041f0:	3501      	adds	r5, #1
 80041f2:	52e5      	strh	r5, [r4, r3]
 80041f4:	e779      	b.n	80040ea <HAL_SPI_TransmitReceive_DMA+0x86>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	6848      	ldr	r0, [r1, #4]
 80041fa:	01db      	lsls	r3, r3, #7
 80041fc:	4303      	orrs	r3, r0
 80041fe:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004200:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	3301      	adds	r3, #1
 8004206:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004208:	e79b      	b.n	8004142 <HAL_SPI_TransmitReceive_DMA+0xde>
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	ffff9fff 	.word	0xffff9fff
 8004210:	ffffefff 	.word	0xffffefff
 8004214:	08002e09 	.word	0x08002e09
 8004218:	08003301 	.word	0x08003301
 800421c:	08002e15 	.word	0x08002e15
 8004220:	ffffdfff 	.word	0xffffdfff
 8004224:	08002dfd 	.word	0x08002dfd
 8004228:	080033dd 	.word	0x080033dd
 800422c:	ffffbfff 	.word	0xffffbfff

08004230 <HAL_SPI_Receive_DMA>:
{
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004232:	6883      	ldr	r3, [r0, #8]
{
 8004234:	0004      	movs	r4, r0
 8004236:	000f      	movs	r7, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004238:	2b00      	cmp	r3, #0
 800423a:	d105      	bne.n	8004248 <HAL_SPI_Receive_DMA+0x18>
 800423c:	2182      	movs	r1, #130	; 0x82
 800423e:	6840      	ldr	r0, [r0, #4]
 8004240:	0049      	lsls	r1, r1, #1
 8004242:	4288      	cmp	r0, r1
 8004244:	d100      	bne.n	8004248 <HAL_SPI_Receive_DMA+0x18>
 8004246:	e06e      	b.n	8004326 <HAL_SPI_Receive_DMA+0xf6>
  __HAL_LOCK(hspi);
 8004248:	205c      	movs	r0, #92	; 0x5c
 800424a:	5c21      	ldrb	r1, [r4, r0]
 800424c:	2901      	cmp	r1, #1
 800424e:	d100      	bne.n	8004252 <HAL_SPI_Receive_DMA+0x22>
 8004250:	e075      	b.n	800433e <HAL_SPI_Receive_DMA+0x10e>
 8004252:	2101      	movs	r1, #1
 8004254:	5421      	strb	r1, [r4, r0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8004256:	315c      	adds	r1, #92	; 0x5c
 8004258:	5c65      	ldrb	r5, [r4, r1]
 800425a:	b2ee      	uxtb	r6, r5
 800425c:	2d01      	cmp	r5, #1
 800425e:	d005      	beq.n	800426c <HAL_SPI_Receive_DMA+0x3c>
    errorcode = HAL_BUSY;
 8004260:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8004262:	235c      	movs	r3, #92	; 0x5c
 8004264:	2200      	movs	r2, #0
 8004266:	54e2      	strb	r2, [r4, r3]
}
 8004268:	0030      	movs	r0, r6
 800426a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 800426c:	2f00      	cmp	r7, #0
 800426e:	d0f8      	beq.n	8004262 <HAL_SPI_Receive_DMA+0x32>
 8004270:	2a00      	cmp	r2, #0
 8004272:	d0f6      	beq.n	8004262 <HAL_SPI_Receive_DMA+0x32>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004274:	3858      	subs	r0, #88	; 0x58
 8004276:	5460      	strb	r0, [r4, r1]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004278:	2100      	movs	r1, #0
  hspi->RxXferSize  = Size;
 800427a:	3040      	adds	r0, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800427c:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800427e:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004280:	5222      	strh	r2, [r4, r0]
  hspi->RxXferCount = Size;
 8004282:	3002      	adds	r0, #2
 8004284:	5222      	strh	r2, [r4, r0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004286:	2280      	movs	r2, #128	; 0x80
    __HAL_SPI_DISABLE(hspi);
 8004288:	6825      	ldr	r5, [r4, #0]
  hspi->RxISR       = NULL;
 800428a:	64e1      	str	r1, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800428c:	6521      	str	r1, [r4, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800428e:	87a1      	strh	r1, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004290:	87e1      	strh	r1, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004292:	0212      	lsls	r2, r2, #8
 8004294:	4293      	cmp	r3, r2
 8004296:	d03d      	beq.n	8004314 <HAL_SPI_Receive_DMA+0xe4>
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004298:	686b      	ldr	r3, [r5, #4]
 800429a:	4a3a      	ldr	r2, [pc, #232]	; (8004384 <HAL_SPI_Receive_DMA+0x154>)
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800429c:	68e1      	ldr	r1, [r4, #12]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800429e:	4013      	ands	r3, r2
 80042a0:	606b      	str	r3, [r5, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042a2:	23e0      	movs	r3, #224	; 0xe0
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	4299      	cmp	r1, r3
 80042a8:	d82e      	bhi.n	8004308 <HAL_SPI_Receive_DMA+0xd8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	6869      	ldr	r1, [r5, #4]
 80042ae:	015b      	lsls	r3, r3, #5
 80042b0:	430b      	orrs	r3, r1
 80042b2:	606b      	str	r3, [r5, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	6981      	ldr	r1, [r0, #24]
 80042bc:	4299      	cmp	r1, r3
 80042be:	d048      	beq.n	8004352 <HAL_SPI_Receive_DMA+0x122>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80042c0:	4b31      	ldr	r3, [pc, #196]	; (8004388 <HAL_SPI_Receive_DMA+0x158>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80042c2:	0029      	movs	r1, r5
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80042c4:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80042c6:	4b31      	ldr	r3, [pc, #196]	; (800438c <HAL_SPI_Receive_DMA+0x15c>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80042c8:	003a      	movs	r2, r7
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80042ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80042cc:	4b30      	ldr	r3, [pc, #192]	; (8004390 <HAL_SPI_Receive_DMA+0x160>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80042ce:	310c      	adds	r1, #12
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80042d0:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->RxXferCount))
 80042d6:	3346      	adds	r3, #70	; 0x46
 80042d8:	5ae3      	ldrh	r3, [r4, r3]
 80042da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80042dc:	f7fd fed0 	bl	8002080 <HAL_DMA_Start_IT>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	d12e      	bne.n	8004342 <HAL_SPI_Receive_DMA+0x112>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042e4:	2240      	movs	r2, #64	; 0x40
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	6819      	ldr	r1, [r3, #0]
 80042ea:	420a      	tst	r2, r1
 80042ec:	d102      	bne.n	80042f4 <HAL_SPI_Receive_DMA+0xc4>
    __HAL_SPI_ENABLE(hspi);
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80042f4:	2120      	movs	r1, #32
 80042f6:	685a      	ldr	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042f8:	2600      	movs	r6, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	391f      	subs	r1, #31
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	e7ac      	b.n	8004262 <HAL_SPI_Receive_DMA+0x32>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004308:	686b      	ldr	r3, [r5, #4]
 800430a:	4a22      	ldr	r2, [pc, #136]	; (8004394 <HAL_SPI_Receive_DMA+0x164>)
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800430c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800430e:	4013      	ands	r3, r2
 8004310:	606b      	str	r3, [r5, #4]
 8004312:	e7d5      	b.n	80042c0 <HAL_SPI_Receive_DMA+0x90>
    __HAL_SPI_DISABLE(hspi);
 8004314:	2240      	movs	r2, #64	; 0x40
 8004316:	682b      	ldr	r3, [r5, #0]
 8004318:	4393      	bics	r3, r2
 800431a:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	4a1e      	ldr	r2, [pc, #120]	; (8004398 <HAL_SPI_Receive_DMA+0x168>)
 8004320:	4013      	ands	r3, r2
 8004322:	602b      	str	r3, [r5, #0]
 8004324:	e7b8      	b.n	8004298 <HAL_SPI_Receive_DMA+0x68>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004326:	3901      	subs	r1, #1
 8004328:	335d      	adds	r3, #93	; 0x5d
 800432a:	39ff      	subs	r1, #255	; 0xff
 800432c:	54e1      	strb	r1, [r4, r3]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800432e:	0020      	movs	r0, r4
 8004330:	0013      	movs	r3, r2
 8004332:	0039      	movs	r1, r7
 8004334:	003a      	movs	r2, r7
 8004336:	f7ff fe95 	bl	8004064 <HAL_SPI_TransmitReceive_DMA>
 800433a:	0006      	movs	r6, r0
 800433c:	e794      	b.n	8004268 <HAL_SPI_Receive_DMA+0x38>
  __HAL_LOCK(hspi);
 800433e:	2602      	movs	r6, #2
 8004340:	e792      	b.n	8004268 <HAL_SPI_Receive_DMA+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004342:	2210      	movs	r2, #16
 8004344:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004346:	4313      	orrs	r3, r2
 8004348:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800434a:	235d      	movs	r3, #93	; 0x5d
 800434c:	3a0f      	subs	r2, #15
 800434e:	54e2      	strb	r2, [r4, r3]
    goto error;
 8004350:	e787      	b.n	8004262 <HAL_SPI_Receive_DMA+0x32>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004352:	686b      	ldr	r3, [r5, #4]
 8004354:	490f      	ldr	r1, [pc, #60]	; (8004394 <HAL_SPI_Receive_DMA+0x164>)
 8004356:	400b      	ands	r3, r1
 8004358:	606b      	str	r3, [r5, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800435a:	2346      	movs	r3, #70	; 0x46
 800435c:	5ae1      	ldrh	r1, [r4, r3]
 800435e:	07c9      	lsls	r1, r1, #31
 8004360:	d406      	bmi.n	8004370 <HAL_SPI_Receive_DMA+0x140>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004362:	6869      	ldr	r1, [r5, #4]
 8004364:	400a      	ands	r2, r1
 8004366:	606a      	str	r2, [r5, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004368:	5ae2      	ldrh	r2, [r4, r3]
 800436a:	0852      	lsrs	r2, r2, #1
 800436c:	52e2      	strh	r2, [r4, r3]
 800436e:	e7a7      	b.n	80042c0 <HAL_SPI_Receive_DMA+0x90>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004370:	2280      	movs	r2, #128	; 0x80
 8004372:	6869      	ldr	r1, [r5, #4]
 8004374:	0192      	lsls	r2, r2, #6
 8004376:	430a      	orrs	r2, r1
 8004378:	606a      	str	r2, [r5, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800437a:	5ae2      	ldrh	r2, [r4, r3]
 800437c:	0852      	lsrs	r2, r2, #1
 800437e:	3201      	adds	r2, #1
 8004380:	52e2      	strh	r2, [r4, r3]
 8004382:	e79d      	b.n	80042c0 <HAL_SPI_Receive_DMA+0x90>
 8004384:	ffffdfff 	.word	0xffffdfff
 8004388:	08002dfd 	.word	0x08002dfd
 800438c:	080033dd 	.word	0x080033dd
 8004390:	08002e15 	.word	0x08002e15
 8004394:	ffffefff 	.word	0xffffefff
 8004398:	ffffbfff 	.word	0xffffbfff

0800439c <HAL_SPI_IRQHandler>:
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800439c:	2101      	movs	r1, #1
{
 800439e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043a0:	000e      	movs	r6, r1
  uint32_t itsource = hspi->Instance->CR2;
 80043a2:	6802      	ldr	r2, [r0, #0]
{
 80043a4:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80043a6:	6855      	ldr	r5, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80043a8:	6893      	ldr	r3, [r2, #8]
{
 80043aa:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043ac:	0998      	lsrs	r0, r3, #6
 80043ae:	4006      	ands	r6, r0
 80043b0:	4201      	tst	r1, r0
 80043b2:	d105      	bne.n	80043c0 <HAL_SPI_IRQHandler+0x24>
 80043b4:	4219      	tst	r1, r3
 80043b6:	d003      	beq.n	80043c0 <HAL_SPI_IRQHandler+0x24>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043b8:	09a8      	lsrs	r0, r5, #6
 80043ba:	4201      	tst	r1, r0
 80043bc:	d000      	beq.n	80043c0 <HAL_SPI_IRQHandler+0x24>
 80043be:	e088      	b.n	80044d2 <HAL_SPI_IRQHandler+0x136>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043c0:	2101      	movs	r1, #1
 80043c2:	0798      	lsls	r0, r3, #30
 80043c4:	d503      	bpl.n	80043ce <HAL_SPI_IRQHandler+0x32>
 80043c6:	09e8      	lsrs	r0, r5, #7
 80043c8:	4201      	tst	r1, r0
 80043ca:	d000      	beq.n	80043ce <HAL_SPI_IRQHandler+0x32>
 80043cc:	e07d      	b.n	80044ca <HAL_SPI_IRQHandler+0x12e>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043ce:	2001      	movs	r0, #1
 80043d0:	0007      	movs	r7, r0
 80043d2:	0959      	lsrs	r1, r3, #5
 80043d4:	400f      	ands	r7, r1
 80043d6:	4208      	tst	r0, r1
 80043d8:	d051      	beq.n	800447e <HAL_SPI_IRQHandler+0xe2>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80043da:	0969      	lsrs	r1, r5, #5
 80043dc:	4208      	tst	r0, r1
 80043de:	d04c      	beq.n	800447a <HAL_SPI_IRQHandler+0xde>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043e0:	2e00      	cmp	r6, #0
 80043e2:	d00f      	beq.n	8004404 <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80043e4:	215d      	movs	r1, #93	; 0x5d
 80043e6:	5c61      	ldrb	r1, [r4, r1]
 80043e8:	2903      	cmp	r1, #3
 80043ea:	d100      	bne.n	80043ee <HAL_SPI_IRQHandler+0x52>
 80043ec:	e075      	b.n	80044da <HAL_SPI_IRQHandler+0x13e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80043ee:	2004      	movs	r0, #4
 80043f0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80043f2:	4301      	orrs	r1, r0
 80043f4:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043f6:	2100      	movs	r1, #0
 80043f8:	9100      	str	r1, [sp, #0]
 80043fa:	68d1      	ldr	r1, [r2, #12]
 80043fc:	9100      	str	r1, [sp, #0]
 80043fe:	6891      	ldr	r1, [r2, #8]
 8004400:	9100      	str	r1, [sp, #0]
 8004402:	9900      	ldr	r1, [sp, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004404:	2001      	movs	r0, #1
 8004406:	6e21      	ldr	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004408:	2640      	movs	r6, #64	; 0x40
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800440a:	4301      	orrs	r1, r0
 800440c:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800440e:	2100      	movs	r1, #0
 8004410:	9102      	str	r1, [sp, #8]
 8004412:	6891      	ldr	r1, [r2, #8]
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004414:	0a1b      	lsrs	r3, r3, #8
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004416:	9102      	str	r1, [sp, #8]
 8004418:	6811      	ldr	r1, [r2, #0]
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800441a:	4018      	ands	r0, r3
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800441c:	43b1      	bics	r1, r6
 800441e:	6011      	str	r1, [r2, #0]
 8004420:	9902      	ldr	r1, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004422:	2800      	cmp	r0, #0
 8004424:	d147      	bne.n	80044b6 <HAL_SPI_IRQHandler+0x11a>
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004426:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004428:	2b00      	cmp	r3, #0
 800442a:	d026      	beq.n	800447a <HAL_SPI_IRQHandler+0xde>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800442c:	21e0      	movs	r1, #224	; 0xe0
 800442e:	6853      	ldr	r3, [r2, #4]
 8004430:	438b      	bics	r3, r1
 8004432:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8004434:	235d      	movs	r3, #93	; 0x5d
 8004436:	39df      	subs	r1, #223	; 0xdf
 8004438:	54e1      	strb	r1, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800443a:	3b5a      	subs	r3, #90	; 0x5a
 800443c:	422b      	tst	r3, r5
 800443e:	d054      	beq.n	80044ea <HAL_SPI_IRQHandler+0x14e>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004440:	6851      	ldr	r1, [r2, #4]
        if (hspi->hdmarx != NULL)
 8004442:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004444:	4399      	bics	r1, r3
 8004446:	6051      	str	r1, [r2, #4]
        if (hspi->hdmarx != NULL)
 8004448:	2800      	cmp	r0, #0
 800444a:	d009      	beq.n	8004460 <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800444c:	4b29      	ldr	r3, [pc, #164]	; (80044f4 <HAL_SPI_IRQHandler+0x158>)
 800444e:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004450:	f7fd fe7e 	bl	8002150 <HAL_DMA_Abort_IT>
 8004454:	2800      	cmp	r0, #0
 8004456:	d003      	beq.n	8004460 <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004458:	2240      	movs	r2, #64	; 0x40
 800445a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800445c:	4313      	orrs	r3, r2
 800445e:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004460:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004462:	2800      	cmp	r0, #0
 8004464:	d009      	beq.n	800447a <HAL_SPI_IRQHandler+0xde>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004466:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <HAL_SPI_IRQHandler+0x158>)
 8004468:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800446a:	f7fd fe71 	bl	8002150 <HAL_DMA_Abort_IT>
 800446e:	2800      	cmp	r0, #0
 8004470:	d003      	beq.n	800447a <HAL_SPI_IRQHandler+0xde>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004472:	2240      	movs	r2, #64	; 0x40
 8004474:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004476:	4313      	orrs	r3, r2
 8004478:	6623      	str	r3, [r4, #96]	; 0x60
}
 800447a:	b005      	add	sp, #20
 800447c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800447e:	2e00      	cmp	r6, #0
 8004480:	d013      	beq.n	80044aa <HAL_SPI_IRQHandler+0x10e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004482:	0969      	lsrs	r1, r5, #5
 8004484:	4208      	tst	r0, r1
 8004486:	d0f8      	beq.n	800447a <HAL_SPI_IRQHandler+0xde>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004488:	215d      	movs	r1, #93	; 0x5d
 800448a:	5c61      	ldrb	r1, [r4, r1]
 800448c:	2903      	cmp	r1, #3
 800448e:	d024      	beq.n	80044da <HAL_SPI_IRQHandler+0x13e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004490:	2604      	movs	r6, #4
 8004492:	6e21      	ldr	r1, [r4, #96]	; 0x60
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004494:	0a1b      	lsrs	r3, r3, #8
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004496:	4331      	orrs	r1, r6
 8004498:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800449a:	9700      	str	r7, [sp, #0]
 800449c:	68d1      	ldr	r1, [r2, #12]
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800449e:	4018      	ands	r0, r3
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044a0:	9100      	str	r1, [sp, #0]
 80044a2:	6891      	ldr	r1, [r2, #8]
 80044a4:	9100      	str	r1, [sp, #0]
 80044a6:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80044a8:	e7bb      	b.n	8004422 <HAL_SPI_IRQHandler+0x86>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80044aa:	0a1b      	lsrs	r3, r3, #8
 80044ac:	4218      	tst	r0, r3
 80044ae:	d0e4      	beq.n	800447a <HAL_SPI_IRQHandler+0xde>
 80044b0:	096b      	lsrs	r3, r5, #5
 80044b2:	4218      	tst	r0, r3
 80044b4:	d0e1      	beq.n	800447a <HAL_SPI_IRQHandler+0xde>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044b6:	2108      	movs	r1, #8
 80044b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80044ba:	430b      	orrs	r3, r1
 80044bc:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044be:	2300      	movs	r3, #0
 80044c0:	9303      	str	r3, [sp, #12]
 80044c2:	6893      	ldr	r3, [r2, #8]
 80044c4:	9303      	str	r3, [sp, #12]
 80044c6:	9b03      	ldr	r3, [sp, #12]
 80044c8:	e7ad      	b.n	8004426 <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 80044ca:	0020      	movs	r0, r4
 80044cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80044ce:	4798      	blx	r3
    return;
 80044d0:	e7d3      	b.n	800447a <HAL_SPI_IRQHandler+0xde>
    hspi->RxISR(hspi);
 80044d2:	0020      	movs	r0, r4
 80044d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80044d6:	4798      	blx	r3
    return;
 80044d8:	e7cf      	b.n	800447a <HAL_SPI_IRQHandler+0xde>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044da:	2300      	movs	r3, #0
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	68d3      	ldr	r3, [r2, #12]
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	6893      	ldr	r3, [r2, #8]
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	9b01      	ldr	r3, [sp, #4]
        return;
 80044e8:	e7c7      	b.n	800447a <HAL_SPI_IRQHandler+0xde>
        hspi->ErrorCallback(hspi);
 80044ea:	0020      	movs	r0, r4
 80044ec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80044ee:	4798      	blx	r3
 80044f0:	e7c3      	b.n	800447a <HAL_SPI_IRQHandler+0xde>
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	08002e39 	.word	0x08002e39

080044f8 <HAL_SPI_GetState>:
  return hspi->State;
 80044f8:	235d      	movs	r3, #93	; 0x5d
 80044fa:	5cc0      	ldrb	r0, [r0, r3]
 80044fc:	b2c0      	uxtb	r0, r0
}
 80044fe:	4770      	bx	lr

08004500 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004500:	480d      	ldr	r0, [pc, #52]	; (8004538 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004502:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004504:	f7fc fc0e 	bl	8000d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004508:	480c      	ldr	r0, [pc, #48]	; (800453c <LoopForever+0x6>)
  ldr r1, =_edata
 800450a:	490d      	ldr	r1, [pc, #52]	; (8004540 <LoopForever+0xa>)
  ldr r2, =_sidata
 800450c:	4a0d      	ldr	r2, [pc, #52]	; (8004544 <LoopForever+0xe>)
  movs r3, #0
 800450e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004510:	e002      	b.n	8004518 <LoopCopyDataInit>

08004512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004516:	3304      	adds	r3, #4

08004518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800451a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800451c:	d3f9      	bcc.n	8004512 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004520:	4c0a      	ldr	r4, [pc, #40]	; (800454c <LoopForever+0x16>)
  movs r3, #0
 8004522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004524:	e001      	b.n	800452a <LoopFillZerobss>

08004526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004528:	3204      	adds	r2, #4

0800452a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800452a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800452c:	d3fb      	bcc.n	8004526 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800452e:	f016 ffb3 	bl	801b498 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004532:	f7fb fff7 	bl	8000524 <main>

08004536 <LoopForever>:

LoopForever:
  b LoopForever
 8004536:	e7fe      	b.n	8004536 <LoopForever>
  ldr   r0, =_estack
 8004538:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800453c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004540:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8004544:	0801f284 	.word	0x0801f284
  ldr r2, =_sbss
 8004548:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800454c:	20007d10 	.word	0x20007d10

08004550 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004550:	e7fe      	b.n	8004550 <ADC1_COMP_IRQHandler>
	...

08004554 <opa_scale_anim>:

    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOAD_START, NULL);
}

static void opa_scale_anim(void * obj, int32_t v)
{
 8004554:	b510      	push	{r4, lr}
    lv_obj_set_style_opa(obj, v, 0);
 8004556:	2200      	movs	r2, #0
 8004558:	b2c9      	uxtb	r1, r1
 800455a:	f009 f9e3 	bl	800d924 <lv_obj_set_style_opa>
}
 800455e:	bd10      	pop	{r4, pc}

08004560 <set_y_anim>:
{
    lv_obj_set_x(obj, v);
}

static void set_y_anim(void * obj, int32_t v)
{
 8004560:	b510      	push	{r4, lr}
    lv_obj_set_y(obj, v);
 8004562:	b209      	sxth	r1, r1
 8004564:	f004 faa2 	bl	8008aac <lv_obj_set_y>
}
 8004568:	bd10      	pop	{r4, pc}
 800456a:	46c0      	nop			; (mov r8, r8)

0800456c <set_x_anim>:
{
 800456c:	b510      	push	{r4, lr}
    lv_obj_set_x(obj, v);
 800456e:	b209      	sxth	r1, r1
 8004570:	f004 fa84 	bl	8008a7c <lv_obj_set_x>
}
 8004574:	bd10      	pop	{r4, pc}
 8004576:	46c0      	nop			; (mov r8, r8)

08004578 <scr_anim_ready>:

static void scr_anim_ready(lv_anim_t * a)
{
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	0005      	movs	r5, r0
    lv_disp_t * d = lv_obj_get_disp(a->var);
 800457c:	6800      	ldr	r0, [r0, #0]
 800457e:	f009 fc25 	bl	800ddcc <lv_obj_get_disp>
 8004582:	0004      	movs	r4, r0

    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOADED, NULL);
 8004584:	2200      	movs	r2, #0
 8004586:	2127      	movs	r1, #39	; 0x27
 8004588:	6900      	ldr	r0, [r0, #16]
 800458a:	f000 fb51 	bl	8004c30 <lv_event_send>
    lv_event_send(d->prev_scr, LV_EVENT_SCREEN_UNLOADED, NULL);
 800458e:	2200      	movs	r2, #0
 8004590:	2128      	movs	r1, #40	; 0x28
 8004592:	6960      	ldr	r0, [r4, #20]
 8004594:	f000 fb4c 	bl	8004c30 <lv_event_send>

    if(d->prev_scr && d->del_prev) lv_obj_del(d->prev_scr);
 8004598:	6960      	ldr	r0, [r4, #20]
 800459a:	2800      	cmp	r0, #0
 800459c:	d003      	beq.n	80045a6 <scr_anim_ready+0x2e>
 800459e:	2328      	movs	r3, #40	; 0x28
 80045a0:	5ce3      	ldrb	r3, [r4, r3]
 80045a2:	079b      	lsls	r3, r3, #30
 80045a4:	d40f      	bmi.n	80045c6 <scr_anim_ready+0x4e>
    d->prev_scr = NULL;
 80045a6:	2200      	movs	r2, #0
    d->draw_prev_over_act = false;
 80045a8:	2128      	movs	r1, #40	; 0x28
 80045aa:	2001      	movs	r0, #1
    d->prev_scr = NULL;
 80045ac:	6162      	str	r2, [r4, #20]
    d->draw_prev_over_act = false;
 80045ae:	5c63      	ldrb	r3, [r4, r1]
 80045b0:	4383      	bics	r3, r0
 80045b2:	5463      	strb	r3, [r4, r1]
    d->scr_to_load = NULL;
    lv_obj_remove_local_style_prop(a->var, LV_STYLE_OPA, 0);
 80045b4:	6828      	ldr	r0, [r5, #0]
    d->scr_to_load = NULL;
 80045b6:	61a2      	str	r2, [r4, #24]
    lv_obj_remove_local_style_prop(a->var, LV_STYLE_OPA, 0);
 80045b8:	3138      	adds	r1, #56	; 0x38
 80045ba:	f008 fe7f 	bl	800d2bc <lv_obj_remove_local_style_prop>
    lv_obj_invalidate(d->act_scr);
 80045be:	6920      	ldr	r0, [r4, #16]
 80045c0:	f004 ff28 	bl	8009414 <lv_obj_invalidate>
}
 80045c4:	bd70      	pop	{r4, r5, r6, pc}
    if(d->prev_scr && d->del_prev) lv_obj_del(d->prev_scr);
 80045c6:	f009 fa8b 	bl	800dae0 <lv_obj_del>
 80045ca:	e7ec      	b.n	80045a6 <scr_anim_ready+0x2e>

080045cc <scr_load_internal>:
{
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	0004      	movs	r4, r0
    lv_disp_t * d = lv_obj_get_disp(scr);
 80045d0:	f009 fbfc 	bl	800ddcc <lv_obj_get_disp>
 80045d4:	1e05      	subs	r5, r0, #0
    if(!d) return;  /*Shouldn't happen, just to be sure*/
 80045d6:	d022      	beq.n	800461e <scr_load_internal+0x52>
    lv_obj_t * old_scr = d->act_scr;
 80045d8:	6906      	ldr	r6, [r0, #16]
    if(d->act_scr) lv_event_send(old_scr, LV_EVENT_SCREEN_UNLOAD_START, NULL);
 80045da:	2e00      	cmp	r6, #0
 80045dc:	d00c      	beq.n	80045f8 <scr_load_internal+0x2c>
 80045de:	2200      	movs	r2, #0
 80045e0:	2125      	movs	r1, #37	; 0x25
 80045e2:	0030      	movs	r0, r6
 80045e4:	f000 fb24 	bl	8004c30 <lv_event_send>
    if(d->act_scr) lv_event_send(scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 80045e8:	692b      	ldr	r3, [r5, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d004      	beq.n	80045f8 <scr_load_internal+0x2c>
 80045ee:	2200      	movs	r2, #0
 80045f0:	2126      	movs	r1, #38	; 0x26
 80045f2:	0020      	movs	r0, r4
 80045f4:	f000 fb1c 	bl	8004c30 <lv_event_send>
    d->act_scr = scr;
 80045f8:	612c      	str	r4, [r5, #16]
    if(d->act_scr) lv_event_send(scr, LV_EVENT_SCREEN_LOADED, NULL);
 80045fa:	2c00      	cmp	r4, #0
 80045fc:	d00c      	beq.n	8004618 <scr_load_internal+0x4c>
 80045fe:	2200      	movs	r2, #0
 8004600:	2127      	movs	r1, #39	; 0x27
 8004602:	0020      	movs	r0, r4
 8004604:	f000 fb14 	bl	8004c30 <lv_event_send>
    if(d->act_scr) lv_event_send(old_scr, LV_EVENT_SCREEN_UNLOADED, NULL);
 8004608:	692b      	ldr	r3, [r5, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d004      	beq.n	8004618 <scr_load_internal+0x4c>
 800460e:	2200      	movs	r2, #0
 8004610:	2128      	movs	r1, #40	; 0x28
 8004612:	0030      	movs	r0, r6
 8004614:	f000 fb0c 	bl	8004c30 <lv_event_send>
    lv_obj_invalidate(scr);
 8004618:	0020      	movs	r0, r4
 800461a:	f004 fefb 	bl	8009414 <lv_obj_invalidate>
}
 800461e:	bd70      	pop	{r4, r5, r6, pc}

08004620 <scr_load_anim_start>:
{
 8004620:	b570      	push	{r4, r5, r6, lr}
 8004622:	0005      	movs	r5, r0
    lv_disp_t * d = lv_obj_get_disp(a->var);
 8004624:	6800      	ldr	r0, [r0, #0]
 8004626:	f009 fbd1 	bl	800ddcc <lv_obj_get_disp>
 800462a:	0004      	movs	r4, r0
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
 800462c:	f00f fa08 	bl	8013a40 <lv_disp_get_default>
    if(!disp) disp = lv_disp_get_default();
 8004630:	2800      	cmp	r0, #0
 8004632:	d008      	beq.n	8004646 <scr_load_anim_start+0x26>
    return disp->act_scr;
 8004634:	6900      	ldr	r0, [r0, #16]
    d->prev_scr = lv_scr_act();
 8004636:	6160      	str	r0, [r4, #20]
    d->act_scr = a->var;
 8004638:	6828      	ldr	r0, [r5, #0]
    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 800463a:	2200      	movs	r2, #0
 800463c:	2126      	movs	r1, #38	; 0x26
    d->act_scr = a->var;
 800463e:	6120      	str	r0, [r4, #16]
    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 8004640:	f000 faf6 	bl	8004c30 <lv_event_send>
}
 8004644:	bd70      	pop	{r4, r5, r6, pc}
    if(!disp) disp = lv_disp_get_default();
 8004646:	f00f f9fb 	bl	8013a40 <lv_disp_get_default>
    if(!disp) {
 800464a:	2800      	cmp	r0, #0
 800464c:	d1f2      	bne.n	8004634 <scr_load_anim_start+0x14>
 800464e:	e7f2      	b.n	8004636 <scr_load_anim_start+0x16>

08004650 <lv_disp_get_scr_act>:
{
 8004650:	0003      	movs	r3, r0
 8004652:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8004654:	2800      	cmp	r0, #0
 8004656:	d001      	beq.n	800465c <lv_disp_get_scr_act+0xc>
    return disp->act_scr;
 8004658:	6918      	ldr	r0, [r3, #16]
}
 800465a:	bd10      	pop	{r4, pc}
    if(!disp) disp = lv_disp_get_default();
 800465c:	f00f f9f0 	bl	8013a40 <lv_disp_get_default>
 8004660:	0003      	movs	r3, r0
        return NULL;
 8004662:	2000      	movs	r0, #0
    if(!disp) {
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f7      	bne.n	8004658 <lv_disp_get_scr_act+0x8>
 8004668:	e7f7      	b.n	800465a <lv_disp_get_scr_act+0xa>
 800466a:	46c0      	nop			; (mov r8, r8)

0800466c <lv_disp_get_scr_prev>:
{
 800466c:	0003      	movs	r3, r0
 800466e:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8004670:	2800      	cmp	r0, #0
 8004672:	d001      	beq.n	8004678 <lv_disp_get_scr_prev+0xc>
    return disp->prev_scr;
 8004674:	6958      	ldr	r0, [r3, #20]
}
 8004676:	bd10      	pop	{r4, pc}
    if(!disp) disp = lv_disp_get_default();
 8004678:	f00f f9e2 	bl	8013a40 <lv_disp_get_default>
 800467c:	0003      	movs	r3, r0
        return NULL;
 800467e:	2000      	movs	r0, #0
    if(!disp) {
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1f7      	bne.n	8004674 <lv_disp_get_scr_prev+0x8>
 8004684:	e7f7      	b.n	8004676 <lv_disp_get_scr_prev+0xa>
 8004686:	46c0      	nop			; (mov r8, r8)

08004688 <lv_disp_get_layer_top>:
{
 8004688:	0003      	movs	r3, r0
 800468a:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 800468c:	2800      	cmp	r0, #0
 800468e:	d001      	beq.n	8004694 <lv_disp_get_layer_top+0xc>
    return disp->top_layer;
 8004690:	69d8      	ldr	r0, [r3, #28]
}
 8004692:	bd10      	pop	{r4, pc}
    if(!disp) disp = lv_disp_get_default();
 8004694:	f00f f9d4 	bl	8013a40 <lv_disp_get_default>
 8004698:	0003      	movs	r3, r0
        return NULL;
 800469a:	2000      	movs	r0, #0
    if(!disp) {
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f7      	bne.n	8004690 <lv_disp_get_layer_top+0x8>
 80046a0:	e7f7      	b.n	8004692 <lv_disp_get_layer_top+0xa>
 80046a2:	46c0      	nop			; (mov r8, r8)

080046a4 <lv_disp_get_layer_sys>:
{
 80046a4:	0003      	movs	r3, r0
 80046a6:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 80046a8:	2800      	cmp	r0, #0
 80046aa:	d001      	beq.n	80046b0 <lv_disp_get_layer_sys+0xc>
    return disp->sys_layer;
 80046ac:	6a18      	ldr	r0, [r3, #32]
}
 80046ae:	bd10      	pop	{r4, pc}
    if(!disp) disp = lv_disp_get_default();
 80046b0:	f00f f9c6 	bl	8013a40 <lv_disp_get_default>
 80046b4:	0003      	movs	r3, r0
        return NULL;
 80046b6:	2000      	movs	r0, #0
    if(!disp) {
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f7      	bne.n	80046ac <lv_disp_get_layer_sys+0x8>
 80046bc:	e7f7      	b.n	80046ae <lv_disp_get_layer_sys+0xa>
 80046be:	46c0      	nop			; (mov r8, r8)

080046c0 <lv_disp_set_theme>:
{
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	0004      	movs	r4, r0
 80046c4:	000d      	movs	r5, r1
    if(!disp) disp = lv_disp_get_default();
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d004      	beq.n	80046d4 <lv_disp_set_theme+0x14>
    if(disp->screen_cnt == 3 &&
 80046ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    disp->theme = th;
 80046cc:	60a5      	str	r5, [r4, #8]
    if(disp->screen_cnt == 3 &&
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d005      	beq.n	80046de <lv_disp_set_theme+0x1e>
}
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
    if(!disp) disp = lv_disp_get_default();
 80046d4:	f00f f9b4 	bl	8013a40 <lv_disp_get_default>
 80046d8:	1e04      	subs	r4, r0, #0
    if(!disp) {
 80046da:	d0fa      	beq.n	80046d2 <lv_disp_set_theme+0x12>
 80046dc:	e7f5      	b.n	80046ca <lv_disp_set_theme+0xa>
       lv_obj_get_child_cnt(disp->screens[0]) == 0 &&
 80046de:	68e3      	ldr	r3, [r4, #12]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	f009 fbb1 	bl	800de48 <lv_obj_get_child_cnt>
    if(disp->screen_cnt == 3 &&
 80046e6:	2800      	cmp	r0, #0
 80046e8:	d1f3      	bne.n	80046d2 <lv_disp_set_theme+0x12>
       lv_obj_get_child_cnt(disp->screens[1]) == 0 &&
 80046ea:	68e3      	ldr	r3, [r4, #12]
 80046ec:	6858      	ldr	r0, [r3, #4]
 80046ee:	f009 fbab 	bl	800de48 <lv_obj_get_child_cnt>
       lv_obj_get_child_cnt(disp->screens[0]) == 0 &&
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d1ed      	bne.n	80046d2 <lv_disp_set_theme+0x12>
       lv_obj_get_child_cnt(disp->screens[2]) == 0) {
 80046f6:	68e3      	ldr	r3, [r4, #12]
 80046f8:	6898      	ldr	r0, [r3, #8]
 80046fa:	f009 fba5 	bl	800de48 <lv_obj_get_child_cnt>
       lv_obj_get_child_cnt(disp->screens[1]) == 0 &&
 80046fe:	2800      	cmp	r0, #0
 8004700:	d1e7      	bne.n	80046d2 <lv_disp_set_theme+0x12>
        lv_theme_apply(disp->screens[0]);
 8004702:	68e3      	ldr	r3, [r4, #12]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	f00a fda9 	bl	800f25c <lv_theme_apply>
 800470a:	e7e2      	b.n	80046d2 <lv_disp_set_theme+0x12>

0800470c <lv_disp_get_theme>:
{
 800470c:	b510      	push	{r4, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 800470e:	2800      	cmp	r0, #0
 8004710:	d001      	beq.n	8004716 <lv_disp_get_theme+0xa>
    return disp->theme;
 8004712:	6880      	ldr	r0, [r0, #8]
}
 8004714:	bd10      	pop	{r4, pc}
    if(disp == NULL) disp = lv_disp_get_default();
 8004716:	f00f f993 	bl	8013a40 <lv_disp_get_default>
 800471a:	e7fa      	b.n	8004712 <lv_disp_get_theme+0x6>

0800471c <lv_scr_load_anim>:
{
 800471c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471e:	46de      	mov	lr, fp
 8004720:	4657      	mov	r7, sl
 8004722:	464e      	mov	r6, r9
 8004724:	4645      	mov	r5, r8
 8004726:	b5e0      	push	{r5, r6, r7, lr}
 8004728:	b0a1      	sub	sp, #132	; 0x84
 800472a:	4699      	mov	r9, r3
 800472c:	ab2a      	add	r3, sp, #168	; 0xa8
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	4688      	mov	r8, r1
 8004732:	4692      	mov	sl, r2
 8004734:	469b      	mov	fp, r3
 8004736:	0006      	movs	r6, r0
    lv_disp_t * d = lv_obj_get_disp(new_scr);
 8004738:	f009 fb48 	bl	800ddcc <lv_obj_get_disp>
 800473c:	0004      	movs	r4, r0
 800473e:	f00f f97f 	bl	8013a40 <lv_disp_get_default>
 8004742:	1e07      	subs	r7, r0, #0
    if(!disp) disp = lv_disp_get_default();
 8004744:	d100      	bne.n	8004748 <lv_scr_load_anim+0x2c>
 8004746:	e087      	b.n	8004858 <lv_scr_load_anim+0x13c>
    if(d->scr_to_load && act_scr != d->scr_to_load) {
 8004748:	69a0      	ldr	r0, [r4, #24]
    return disp->act_scr;
 800474a:	693f      	ldr	r7, [r7, #16]
    if(d->scr_to_load && act_scr != d->scr_to_load) {
 800474c:	2800      	cmp	r0, #0
 800474e:	d002      	beq.n	8004756 <lv_scr_load_anim+0x3a>
 8004750:	42b8      	cmp	r0, r7
 8004752:	d000      	beq.n	8004756 <lv_scr_load_anim+0x3a>
 8004754:	e089      	b.n	800486a <lv_scr_load_anim+0x14e>
    if(d->prev_scr && d->del_prev) {
 8004756:	6960      	ldr	r0, [r4, #20]
    d->scr_to_load = new_scr;
 8004758:	61a6      	str	r6, [r4, #24]
    if(d->prev_scr && d->del_prev) {
 800475a:	2800      	cmp	r0, #0
 800475c:	d004      	beq.n	8004768 <lv_scr_load_anim+0x4c>
 800475e:	2328      	movs	r3, #40	; 0x28
 8004760:	5ce3      	ldrb	r3, [r4, r3]
 8004762:	079b      	lsls	r3, r3, #30
 8004764:	d500      	bpl.n	8004768 <lv_scr_load_anim+0x4c>
 8004766:	e096      	b.n	8004896 <lv_scr_load_anim+0x17a>
static bool is_out_anim(lv_scr_load_anim_t anim_type)
{
    return anim_type == LV_SCR_LOAD_ANIM_FADE_OUT  ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_LEFT  ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_RIGHT ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_TOP   ||
 8004768:	4642      	mov	r2, r8
 800476a:	2104      	movs	r1, #4
 800476c:	2500      	movs	r5, #0
 800476e:	3a0a      	subs	r2, #10
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	4291      	cmp	r1, r2
 8004774:	416d      	adcs	r5, r5
    d->draw_prev_over_act = is_out_anim(anim_type);
 8004776:	465a      	mov	r2, fp
 8004778:	2328      	movs	r3, #40	; 0x28
 800477a:	0052      	lsls	r2, r2, #1
 800477c:	4315      	orrs	r5, r2
 800477e:	5ce2      	ldrb	r2, [r4, r3]
 8004780:	3901      	subs	r1, #1
 8004782:	438a      	bics	r2, r1
 8004784:	400d      	ands	r5, r1
 8004786:	4315      	orrs	r5, r2
    lv_anim_del(new_scr, NULL);
 8004788:	2100      	movs	r1, #0
    d->draw_prev_over_act = is_out_anim(anim_type);
 800478a:	54e5      	strb	r5, [r4, r3]
    lv_anim_del(new_scr, NULL);
 800478c:	0030      	movs	r0, r6
 800478e:	f00f fb85 	bl	8013e9c <lv_anim_del>
 8004792:	f00f f955 	bl	8013a40 <lv_disp_get_default>
    if(!disp) disp = lv_disp_get_default();
 8004796:	2800      	cmp	r0, #0
 8004798:	d100      	bne.n	800479c <lv_scr_load_anim+0x80>
 800479a:	e085      	b.n	80048a8 <lv_scr_load_anim+0x18c>
    return disp->act_scr;
 800479c:	6900      	ldr	r0, [r0, #16]
    lv_anim_del(lv_scr_act(), NULL);
 800479e:	2100      	movs	r1, #0
 80047a0:	f00f fb7c 	bl	8013e9c <lv_anim_del>
    lv_obj_set_pos(new_scr, 0, 0);
 80047a4:	2200      	movs	r2, #0
 80047a6:	2100      	movs	r1, #0
 80047a8:	0030      	movs	r0, r6
 80047aa:	f004 f933 	bl	8008a14 <lv_obj_set_pos>
 80047ae:	f00f f947 	bl	8013a40 <lv_disp_get_default>
    if(!disp) disp = lv_disp_get_default();
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d100      	bne.n	80047b8 <lv_scr_load_anim+0x9c>
 80047b6:	e07d      	b.n	80048b4 <lv_scr_load_anim+0x198>
    return disp->act_scr;
 80047b8:	6900      	ldr	r0, [r0, #16]
    lv_obj_set_pos(lv_scr_act(), 0, 0);
 80047ba:	2200      	movs	r2, #0
 80047bc:	2100      	movs	r1, #0
 80047be:	f004 f929 	bl	8008a14 <lv_obj_set_pos>
    lv_obj_remove_local_style_prop(new_scr, LV_STYLE_OPA, 0);
 80047c2:	2200      	movs	r2, #0
 80047c4:	2160      	movs	r1, #96	; 0x60
 80047c6:	0030      	movs	r0, r6
 80047c8:	f008 fd78 	bl	800d2bc <lv_obj_remove_local_style_prop>
 80047cc:	f00f f938 	bl	8013a40 <lv_disp_get_default>
    if(!disp) disp = lv_disp_get_default();
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d100      	bne.n	80047d6 <lv_scr_load_anim+0xba>
 80047d4:	e074      	b.n	80048c0 <lv_scr_load_anim+0x1a4>
    return disp->act_scr;
 80047d6:	6900      	ldr	r0, [r0, #16]
    lv_obj_remove_local_style_prop(lv_scr_act(), LV_STYLE_OPA, 0);
 80047d8:	2200      	movs	r2, #0
 80047da:	2160      	movs	r1, #96	; 0x60
 80047dc:	f008 fd6e 	bl	800d2bc <lv_obj_remove_local_style_prop>
    if(time == 0 && delay == 0) {
 80047e0:	4653      	mov	r3, sl
 80047e2:	464a      	mov	r2, r9
 80047e4:	4313      	orrs	r3, r2
 80047e6:	d05b      	beq.n	80048a0 <lv_scr_load_anim+0x184>
    lv_anim_init(&a_new);
 80047e8:	4668      	mov	r0, sp
 80047ea:	f00f fb3f 	bl	8013e6c <lv_anim_init>
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start_cb  a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_start_cb_t start_cb)
{
    a->start_cb = start_cb;
 80047ee:	4b89      	ldr	r3, [pc, #548]	; (8004a14 <lv_scr_load_anim+0x2f8>)
    lv_anim_init(&a_old);
 80047f0:	a810      	add	r0, sp, #64	; 0x40
 80047f2:	9302      	str	r3, [sp, #8]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 80047f4:	4b88      	ldr	r3, [pc, #544]	; (8004a18 <lv_scr_load_anim+0x2fc>)
    a->var = var;
 80047f6:	9600      	str	r6, [sp, #0]
    a->ready_cb = ready_cb;
 80047f8:	9303      	str	r3, [sp, #12]
    a->time = duration;
 80047fa:	4653      	mov	r3, sl
 80047fc:	930a      	str	r3, [sp, #40]	; 0x28
    a->act_time = -(int32_t)(delay);
 80047fe:	464b      	mov	r3, r9
 8004800:	425d      	negs	r5, r3
 8004802:	950b      	str	r5, [sp, #44]	; 0x2c
 8004804:	f00f fb32 	bl	8013e6c <lv_anim_init>
    a->var = var;
 8004808:	6923      	ldr	r3, [r4, #16]
    a->act_time = -(int32_t)(delay);
 800480a:	951b      	str	r5, [sp, #108]	; 0x6c
    a->var = var;
 800480c:	9310      	str	r3, [sp, #64]	; 0x40
    a->time = duration;
 800480e:	4653      	mov	r3, sl
 8004810:	931a      	str	r3, [sp, #104]	; 0x68
    switch(anim_type) {
 8004812:	4643      	mov	r3, r8
 8004814:	2b0e      	cmp	r3, #14
 8004816:	d80d      	bhi.n	8004834 <lv_scr_load_anim+0x118>
 8004818:	0099      	lsls	r1, r3, #2
 800481a:	4b80      	ldr	r3, [pc, #512]	; (8004a1c <lv_scr_load_anim+0x300>)
 800481c:	585b      	ldr	r3, [r3, r1]
 800481e:	469f      	mov	pc, r3
    a->exec_cb = exec_cb;
 8004820:	4b7f      	ldr	r3, [pc, #508]	; (8004a20 <lv_scr_load_anim+0x304>)
            lv_anim_set_values(&a_old, 0, -lv_disp_get_hor_res(d));
 8004822:	0020      	movs	r0, r4
 8004824:	9311      	str	r3, [sp, #68]	; 0x44
 8004826:	f00f f911 	bl	8013a4c <lv_disp_get_hor_res>
    a->start_value = start;
 800482a:	2300      	movs	r3, #0
            lv_anim_set_values(&a_old, 0, -lv_disp_get_ver_res(d));
 800482c:	4240      	negs	r0, r0
 800482e:	9317      	str	r3, [sp, #92]	; 0x5c
    a->current_value = start;
 8004830:	9318      	str	r3, [sp, #96]	; 0x60
    a->end_value = end;
 8004832:	9019      	str	r0, [sp, #100]	; 0x64
    lv_event_send(act_scr, LV_EVENT_SCREEN_UNLOAD_START, NULL);
 8004834:	2200      	movs	r2, #0
 8004836:	2125      	movs	r1, #37	; 0x25
 8004838:	0038      	movs	r0, r7
 800483a:	f000 f9f9 	bl	8004c30 <lv_event_send>
    lv_anim_start(&a_new);
 800483e:	4668      	mov	r0, sp
 8004840:	f00f fc16 	bl	8014070 <lv_anim_start>
    lv_anim_start(&a_old);
 8004844:	a810      	add	r0, sp, #64	; 0x40
 8004846:	f00f fc13 	bl	8014070 <lv_anim_start>
}
 800484a:	b021      	add	sp, #132	; 0x84
 800484c:	bcf0      	pop	{r4, r5, r6, r7}
 800484e:	46bb      	mov	fp, r7
 8004850:	46b2      	mov	sl, r6
 8004852:	46a9      	mov	r9, r5
 8004854:	46a0      	mov	r8, r4
 8004856:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!disp) disp = lv_disp_get_default();
 8004858:	f00f f8f2 	bl	8013a40 <lv_disp_get_default>
 800485c:	1e07      	subs	r7, r0, #0
    if(!disp) {
 800485e:	d000      	beq.n	8004862 <lv_scr_load_anim+0x146>
 8004860:	e772      	b.n	8004748 <lv_scr_load_anim+0x2c>
    if(d->scr_to_load && act_scr != d->scr_to_load) {
 8004862:	69a0      	ldr	r0, [r4, #24]
 8004864:	2800      	cmp	r0, #0
 8004866:	d100      	bne.n	800486a <lv_scr_load_anim+0x14e>
 8004868:	e775      	b.n	8004756 <lv_scr_load_anim+0x3a>
        scr_load_internal(d->scr_to_load);
 800486a:	f7ff feaf 	bl	80045cc <scr_load_internal>
        lv_anim_del(d->scr_to_load, NULL);
 800486e:	2100      	movs	r1, #0
 8004870:	69a0      	ldr	r0, [r4, #24]
 8004872:	f00f fb13 	bl	8013e9c <lv_anim_del>
        lv_obj_set_pos(d->scr_to_load, 0, 0);
 8004876:	2200      	movs	r2, #0
 8004878:	2100      	movs	r1, #0
 800487a:	69a0      	ldr	r0, [r4, #24]
 800487c:	f004 f8ca 	bl	8008a14 <lv_obj_set_pos>
        lv_obj_remove_local_style_prop(d->scr_to_load, LV_STYLE_OPA, 0);
 8004880:	2200      	movs	r2, #0
 8004882:	2160      	movs	r1, #96	; 0x60
 8004884:	69a0      	ldr	r0, [r4, #24]
 8004886:	f008 fd19 	bl	800d2bc <lv_obj_remove_local_style_prop>
        if(d->del_prev) {
 800488a:	2328      	movs	r3, #40	; 0x28
 800488c:	5ce3      	ldrb	r3, [r4, r3]
 800488e:	079b      	lsls	r3, r3, #30
 8004890:	d41c      	bmi.n	80048cc <lv_scr_load_anim+0x1b0>
        act_scr = d->scr_to_load;
 8004892:	69a7      	ldr	r7, [r4, #24]
 8004894:	e75f      	b.n	8004756 <lv_scr_load_anim+0x3a>
        lv_obj_del(d->prev_scr);
 8004896:	f009 f923 	bl	800dae0 <lv_obj_del>
        d->prev_scr = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	6163      	str	r3, [r4, #20]
 800489e:	e763      	b.n	8004768 <lv_scr_load_anim+0x4c>
        scr_load_internal(new_scr);
 80048a0:	0030      	movs	r0, r6
 80048a2:	f7ff fe93 	bl	80045cc <scr_load_internal>
        return;
 80048a6:	e7d0      	b.n	800484a <lv_scr_load_anim+0x12e>
    if(!disp) disp = lv_disp_get_default();
 80048a8:	f00f f8ca 	bl	8013a40 <lv_disp_get_default>
    if(!disp) {
 80048ac:	2800      	cmp	r0, #0
 80048ae:	d000      	beq.n	80048b2 <lv_scr_load_anim+0x196>
 80048b0:	e774      	b.n	800479c <lv_scr_load_anim+0x80>
 80048b2:	e774      	b.n	800479e <lv_scr_load_anim+0x82>
    if(!disp) disp = lv_disp_get_default();
 80048b4:	f00f f8c4 	bl	8013a40 <lv_disp_get_default>
    if(!disp) {
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d000      	beq.n	80048be <lv_scr_load_anim+0x1a2>
 80048bc:	e77c      	b.n	80047b8 <lv_scr_load_anim+0x9c>
 80048be:	e77c      	b.n	80047ba <lv_scr_load_anim+0x9e>
    if(!disp) disp = lv_disp_get_default();
 80048c0:	f00f f8be 	bl	8013a40 <lv_disp_get_default>
    if(!disp) {
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d000      	beq.n	80048ca <lv_scr_load_anim+0x1ae>
 80048c8:	e785      	b.n	80047d6 <lv_scr_load_anim+0xba>
 80048ca:	e785      	b.n	80047d8 <lv_scr_load_anim+0xbc>
            lv_obj_del(act_scr);
 80048cc:	0038      	movs	r0, r7
 80048ce:	f009 f907 	bl	800dae0 <lv_obj_del>
        act_scr = d->scr_to_load;
 80048d2:	69a7      	ldr	r7, [r4, #24]
 80048d4:	e73f      	b.n	8004756 <lv_scr_load_anim+0x3a>
    a->exec_cb = exec_cb;
 80048d6:	4b52      	ldr	r3, [pc, #328]	; (8004a20 <lv_scr_load_anim+0x304>)
            lv_anim_set_values(&a_new, -lv_disp_get_hor_res(d), 0);
 80048d8:	0020      	movs	r0, r4
 80048da:	9301      	str	r3, [sp, #4]
 80048dc:	f00f f8b6 	bl	8013a4c <lv_disp_get_hor_res>
    a->end_value = end;
 80048e0:	2300      	movs	r3, #0
            lv_anim_set_values(&a_new, -lv_disp_get_ver_res(d), 0);
 80048e2:	4240      	negs	r0, r0
    a->start_value = start;
 80048e4:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 80048e6:	9008      	str	r0, [sp, #32]
    a->end_value = end;
 80048e8:	9309      	str	r3, [sp, #36]	; 0x24
}
 80048ea:	e7a3      	b.n	8004834 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 80048ec:	4b4d      	ldr	r3, [pc, #308]	; (8004a24 <lv_scr_load_anim+0x308>)
            lv_anim_set_values(&a_old, 0, lv_disp_get_ver_res(d));
 80048ee:	0020      	movs	r0, r4
 80048f0:	9311      	str	r3, [sp, #68]	; 0x44
 80048f2:	f00f f8bf 	bl	8013a74 <lv_disp_get_ver_res>
    a->start_value = start;
 80048f6:	2300      	movs	r3, #0
 80048f8:	9019      	str	r0, [sp, #100]	; 0x64
 80048fa:	9317      	str	r3, [sp, #92]	; 0x5c
    a->current_value = start;
 80048fc:	9318      	str	r3, [sp, #96]	; 0x60
}
 80048fe:	e799      	b.n	8004834 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 8004900:	4b49      	ldr	r3, [pc, #292]	; (8004a28 <lv_scr_load_anim+0x30c>)
 8004902:	9301      	str	r3, [sp, #4]
    a->start_value = start;
 8004904:	2300      	movs	r3, #0
 8004906:	9307      	str	r3, [sp, #28]
    a->current_value = start;
 8004908:	9308      	str	r3, [sp, #32]
    a->end_value = end;
 800490a:	33ff      	adds	r3, #255	; 0xff
 800490c:	9309      	str	r3, [sp, #36]	; 0x24
}
 800490e:	e791      	b.n	8004834 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 8004910:	4e44      	ldr	r6, [pc, #272]	; (8004a24 <lv_scr_load_anim+0x308>)
            lv_anim_set_values(&a_new, -lv_disp_get_ver_res(d), 0);
 8004912:	0020      	movs	r0, r4
 8004914:	9601      	str	r6, [sp, #4]
 8004916:	f00f f8ad 	bl	8013a74 <lv_disp_get_ver_res>
    a->end_value = end;
 800491a:	2500      	movs	r5, #0
 800491c:	4240      	negs	r0, r0
    a->start_value = start;
 800491e:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 8004920:	9008      	str	r0, [sp, #32]
            lv_anim_set_values(&a_old, 0, lv_disp_get_ver_res(d));
 8004922:	0020      	movs	r0, r4
    a->end_value = end;
 8004924:	9509      	str	r5, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8004926:	9611      	str	r6, [sp, #68]	; 0x44
 8004928:	f00f f8a4 	bl	8013a74 <lv_disp_get_ver_res>
    a->start_value = start;
 800492c:	9517      	str	r5, [sp, #92]	; 0x5c
    a->current_value = start;
 800492e:	9518      	str	r5, [sp, #96]	; 0x60
 8004930:	9019      	str	r0, [sp, #100]	; 0x64
}
 8004932:	e77f      	b.n	8004834 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 8004934:	4e3b      	ldr	r6, [pc, #236]	; (8004a24 <lv_scr_load_anim+0x308>)
            lv_anim_set_values(&a_new, lv_disp_get_ver_res(d), 0);
 8004936:	0020      	movs	r0, r4
 8004938:	9601      	str	r6, [sp, #4]
 800493a:	f00f f89b 	bl	8013a74 <lv_disp_get_ver_res>
    a->end_value = end;
 800493e:	2500      	movs	r5, #0
    a->start_value = start;
 8004940:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 8004942:	9008      	str	r0, [sp, #32]
            lv_anim_set_values(&a_old, 0, -lv_disp_get_ver_res(d));
 8004944:	0020      	movs	r0, r4
    a->end_value = end;
 8004946:	9509      	str	r5, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8004948:	9611      	str	r6, [sp, #68]	; 0x44
 800494a:	f00f f893 	bl	8013a74 <lv_disp_get_ver_res>
 800494e:	4240      	negs	r0, r0
    a->start_value = start;
 8004950:	9517      	str	r5, [sp, #92]	; 0x5c
    a->current_value = start;
 8004952:	9518      	str	r5, [sp, #96]	; 0x60
    a->end_value = end;
 8004954:	9019      	str	r0, [sp, #100]	; 0x64
}
 8004956:	e76d      	b.n	8004834 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 8004958:	4e31      	ldr	r6, [pc, #196]	; (8004a20 <lv_scr_load_anim+0x304>)
            lv_anim_set_values(&a_new, -lv_disp_get_hor_res(d), 0);
 800495a:	0020      	movs	r0, r4
 800495c:	9601      	str	r6, [sp, #4]
 800495e:	f00f f875 	bl	8013a4c <lv_disp_get_hor_res>
    a->end_value = end;
 8004962:	2500      	movs	r5, #0
 8004964:	4240      	negs	r0, r0
    a->start_value = start;
 8004966:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 8004968:	9008      	str	r0, [sp, #32]
            lv_anim_set_values(&a_old, 0, lv_disp_get_hor_res(d));
 800496a:	0020      	movs	r0, r4
    a->end_value = end;
 800496c:	9509      	str	r5, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 800496e:	9611      	str	r6, [sp, #68]	; 0x44
 8004970:	f00f f86c 	bl	8013a4c <lv_disp_get_hor_res>
    a->start_value = start;
 8004974:	9517      	str	r5, [sp, #92]	; 0x5c
    a->current_value = start;
 8004976:	9518      	str	r5, [sp, #96]	; 0x60
 8004978:	9019      	str	r0, [sp, #100]	; 0x64
}
 800497a:	e75b      	b.n	8004834 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 800497c:	4e28      	ldr	r6, [pc, #160]	; (8004a20 <lv_scr_load_anim+0x304>)
            lv_anim_set_values(&a_new, lv_disp_get_hor_res(d), 0);
 800497e:	0020      	movs	r0, r4
 8004980:	9601      	str	r6, [sp, #4]
 8004982:	f00f f863 	bl	8013a4c <lv_disp_get_hor_res>
    a->end_value = end;
 8004986:	2500      	movs	r5, #0
    a->start_value = start;
 8004988:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 800498a:	9008      	str	r0, [sp, #32]
            lv_anim_set_values(&a_old, 0, -lv_disp_get_hor_res(d));
 800498c:	0020      	movs	r0, r4
    a->end_value = end;
 800498e:	9509      	str	r5, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8004990:	9611      	str	r6, [sp, #68]	; 0x44
 8004992:	f00f f85b 	bl	8013a4c <lv_disp_get_hor_res>
 8004996:	4240      	negs	r0, r0
    a->start_value = start;
 8004998:	9517      	str	r5, [sp, #92]	; 0x5c
    a->current_value = start;
 800499a:	9518      	str	r5, [sp, #96]	; 0x60
    a->end_value = end;
 800499c:	9019      	str	r0, [sp, #100]	; 0x64
}
 800499e:	e749      	b.n	8004834 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 80049a0:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <lv_scr_load_anim+0x308>)
            lv_anim_set_values(&a_new, -lv_disp_get_ver_res(d), 0);
 80049a2:	0020      	movs	r0, r4
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	f00f f865 	bl	8013a74 <lv_disp_get_ver_res>
 80049aa:	e799      	b.n	80048e0 <lv_scr_load_anim+0x1c4>
 80049ac:	4b1d      	ldr	r3, [pc, #116]	; (8004a24 <lv_scr_load_anim+0x308>)
            lv_anim_set_values(&a_new, lv_disp_get_ver_res(d), 0);
 80049ae:	0020      	movs	r0, r4
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	f00f f85f 	bl	8013a74 <lv_disp_get_ver_res>
    a->end_value = end;
 80049b6:	2300      	movs	r3, #0
    a->start_value = start;
 80049b8:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 80049ba:	9008      	str	r0, [sp, #32]
    a->end_value = end;
 80049bc:	9309      	str	r3, [sp, #36]	; 0x24
}
 80049be:	e739      	b.n	8004834 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 80049c0:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <lv_scr_load_anim+0x30c>)
 80049c2:	9311      	str	r3, [sp, #68]	; 0x44
    a->start_value = start;
 80049c4:	23ff      	movs	r3, #255	; 0xff
 80049c6:	9317      	str	r3, [sp, #92]	; 0x5c
    a->current_value = start;
 80049c8:	9318      	str	r3, [sp, #96]	; 0x60
    a->end_value = end;
 80049ca:	2300      	movs	r3, #0
 80049cc:	9319      	str	r3, [sp, #100]	; 0x64
}
 80049ce:	e731      	b.n	8004834 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 80049d0:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <lv_scr_load_anim+0x304>)
            lv_anim_set_values(&a_new, lv_disp_get_hor_res(d), 0);
 80049d2:	0020      	movs	r0, r4
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	f00f f839 	bl	8013a4c <lv_disp_get_hor_res>
    a->end_value = end;
 80049da:	2300      	movs	r3, #0
    a->start_value = start;
 80049dc:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 80049de:	9008      	str	r0, [sp, #32]
    a->end_value = end;
 80049e0:	9309      	str	r3, [sp, #36]	; 0x24
}
 80049e2:	e727      	b.n	8004834 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 80049e4:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <lv_scr_load_anim+0x304>)
 80049e6:	9301      	str	r3, [sp, #4]
    a->start_value = start;
 80049e8:	2300      	movs	r3, #0
 80049ea:	9307      	str	r3, [sp, #28]
    a->current_value = start;
 80049ec:	9308      	str	r3, [sp, #32]
    a->end_value = end;
 80049ee:	9309      	str	r3, [sp, #36]	; 0x24
}
 80049f0:	e720      	b.n	8004834 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <lv_scr_load_anim+0x308>)
            lv_anim_set_values(&a_old, 0, -lv_disp_get_ver_res(d));
 80049f4:	0020      	movs	r0, r4
 80049f6:	9311      	str	r3, [sp, #68]	; 0x44
 80049f8:	f00f f83c 	bl	8013a74 <lv_disp_get_ver_res>
 80049fc:	e715      	b.n	800482a <lv_scr_load_anim+0x10e>
 80049fe:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <lv_scr_load_anim+0x304>)
            lv_anim_set_values(&a_old, 0, lv_disp_get_hor_res(d));
 8004a00:	0020      	movs	r0, r4
 8004a02:	9311      	str	r3, [sp, #68]	; 0x44
 8004a04:	f00f f822 	bl	8013a4c <lv_disp_get_hor_res>
    a->start_value = start;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	9019      	str	r0, [sp, #100]	; 0x64
 8004a0c:	9317      	str	r3, [sp, #92]	; 0x5c
    a->current_value = start;
 8004a0e:	9318      	str	r3, [sp, #96]	; 0x60
}
 8004a10:	e710      	b.n	8004834 <lv_scr_load_anim+0x118>
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	08004621 	.word	0x08004621
 8004a18:	08004579 	.word	0x08004579
 8004a1c:	0801b5fc 	.word	0x0801b5fc
 8004a20:	0800456d 	.word	0x0800456d
 8004a24:	08004561 	.word	0x08004561
 8004a28:	08004555 	.word	0x08004555

08004a2c <lv_disp_load_scr>:
    lv_scr_load_anim(scr, LV_SCR_LOAD_ANIM_NONE, 0, 0, false);
 8004a2c:	2300      	movs	r3, #0
{
 8004a2e:	b500      	push	{lr}
 8004a30:	b083      	sub	sp, #12
    lv_scr_load_anim(scr, LV_SCR_LOAD_ANIM_NONE, 0, 0, false);
 8004a32:	2200      	movs	r2, #0
 8004a34:	2100      	movs	r1, #0
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	f7ff fe70 	bl	800471c <lv_scr_load_anim>
}
 8004a3c:	b003      	add	sp, #12
 8004a3e:	bd00      	pop	{pc}

08004a40 <lv_disp_is_invalidation_enabled>:
{
 8004a40:	0003      	movs	r3, r0
 8004a42:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d006      	beq.n	8004a56 <lv_disp_is_invalidation_enabled+0x16>
    return (disp->inv_en_cnt > 0);
 8004a48:	22aa      	movs	r2, #170	; 0xaa
 8004a4a:	0052      	lsls	r2, r2, #1
 8004a4c:	589b      	ldr	r3, [r3, r2]
 8004a4e:	17d8      	asrs	r0, r3, #31
 8004a50:	1ac0      	subs	r0, r0, r3
 8004a52:	0fc0      	lsrs	r0, r0, #31
}
 8004a54:	bd10      	pop	{r4, pc}
    if(!disp) disp = lv_disp_get_default();
 8004a56:	f00e fff3 	bl	8013a40 <lv_disp_get_default>
 8004a5a:	0003      	movs	r3, r0
        return false;
 8004a5c:	2000      	movs	r0, #0
    if(!disp) {
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f8      	beq.n	8004a54 <lv_disp_is_invalidation_enabled+0x14>
 8004a62:	e7f1      	b.n	8004a48 <lv_disp_is_invalidation_enabled+0x8>

08004a64 <event_send_core>:

    return &obj->spec_attr->event_dsc[id];
}

static lv_res_t event_send_core(lv_event_t * e)
{
 8004a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a66:	4645      	mov	r5, r8
 8004a68:	46de      	mov	lr, fp
 8004a6a:	4657      	mov	r7, sl
 8004a6c:	464e      	mov	r6, r9
 8004a6e:	b5e0      	push	{r5, r6, r7, lr}
 8004a70:	b083      	sub	sp, #12
 8004a72:	0005      	movs	r5, r0
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, (void *)e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8004a74:	f000 fdfa 	bl	800566c <lv_indev_get_act>
    if(indev_act) {
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	d00a      	beq.n	8004a92 <event_send_core+0x2e>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8004a7c:	6800      	ldr	r0, [r0, #0]
 8004a7e:	6883      	ldr	r3, [r0, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <event_send_core+0x24>
 8004a84:	7a29      	ldrb	r1, [r5, #8]
 8004a86:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 8004a88:	7e2b      	ldrb	r3, [r5, #24]
 8004a8a:	079a      	lsls	r2, r3, #30
 8004a8c:	d46a      	bmi.n	8004b64 <event_send_core+0x100>
        if(e->deleted) return LV_RES_INV;
 8004a8e:	07db      	lsls	r3, r3, #31
 8004a90:	d466      	bmi.n	8004b60 <event_send_core+0xfc>
    }

    lv_res_t res = LV_RES_OK;
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8004a92:	686b      	ldr	r3, [r5, #4]
    if(!obj->spec_attr) return NULL;
 8004a94:	6899      	ldr	r1, [r3, #8]
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8004a96:	001a      	movs	r2, r3
 8004a98:	9301      	str	r3, [sp, #4]
    if(!obj->spec_attr) return NULL;
 8004a9a:	2900      	cmp	r1, #0
 8004a9c:	d03b      	beq.n	8004b16 <event_send_core+0xb2>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8004a9e:	7e8b      	ldrb	r3, [r1, #26]
 8004aa0:	069b      	lsls	r3, r3, #26
 8004aa2:	d038      	beq.n	8004b16 <event_send_core+0xb2>
    return &obj->spec_attr->event_dsc[id];
 8004aa4:	68cb      	ldr	r3, [r1, #12]

    uint32_t i = 0;
    while(event_dsc && res == LV_RES_OK) {
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d100      	bne.n	8004aac <event_send_core+0x48>
 8004aaa:	e0b9      	b.n	8004c20 <event_send_core+0x1bc>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
            e->user_data = event_dsc->user_data;
            event_dsc->cb(e);

            if(e->stop_processing) return LV_RES_OK;
 8004aac:	2002      	movs	r0, #2
 8004aae:	4681      	mov	r9, r0
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 8004ab0:	3801      	subs	r0, #1
 8004ab2:	4680      	mov	r8, r0
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8004ab4:	307f      	adds	r0, #127	; 0x7f
    while(event_dsc && res == LV_RES_OK) {
 8004ab6:	2400      	movs	r4, #0
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8004ab8:	4683      	mov	fp, r0
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 8004aba:	681f      	ldr	r7, [r3, #0]
 8004abc:	2f00      	cmp	r7, #0
 8004abe:	d004      	beq.n	8004aca <event_send_core+0x66>
 8004ac0:	2008      	movs	r0, #8
 8004ac2:	5618      	ldrsb	r0, [r3, r0]
 8004ac4:	7a1e      	ldrb	r6, [r3, #8]
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	db0c      	blt.n	8004ae4 <event_send_core+0x80>
        }

        i++;
 8004aca:	3401      	adds	r4, #1
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8004acc:	7e8b      	ldrb	r3, [r1, #26]
 8004ace:	069b      	lsls	r3, r3, #26
 8004ad0:	0e9b      	lsrs	r3, r3, #26
 8004ad2:	42a3      	cmp	r3, r4
 8004ad4:	d94e      	bls.n	8004b74 <event_send_core+0x110>
    return &obj->spec_attr->event_dsc[id];
 8004ad6:	68ce      	ldr	r6, [r1, #12]
 8004ad8:	0063      	lsls	r3, r4, #1
 8004ada:	46b4      	mov	ip, r6
 8004adc:	191b      	adds	r3, r3, r4
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4463      	add	r3, ip
    while(event_dsc && res == LV_RES_OK) {
 8004ae2:	e7ea      	b.n	8004aba <event_send_core+0x56>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8004ae4:	2e80      	cmp	r6, #128	; 0x80
 8004ae6:	d004      	beq.n	8004af2 <event_send_core+0x8e>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8004ae8:	4658      	mov	r0, fp
 8004aea:	4386      	bics	r6, r0
 8004aec:	7a28      	ldrb	r0, [r5, #8]
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8004aee:	4286      	cmp	r6, r0
 8004af0:	d1eb      	bne.n	8004aca <event_send_core+0x66>
            e->user_data = event_dsc->user_data;
 8004af2:	685b      	ldr	r3, [r3, #4]
            event_dsc->cb(e);
 8004af4:	0028      	movs	r0, r5
            e->user_data = event_dsc->user_data;
 8004af6:	60eb      	str	r3, [r5, #12]
            event_dsc->cb(e);
 8004af8:	47b8      	blx	r7
            if(e->stop_processing) return LV_RES_OK;
 8004afa:	464a      	mov	r2, r9
 8004afc:	7e2b      	ldrb	r3, [r5, #24]
 8004afe:	421a      	tst	r2, r3
 8004b00:	d130      	bne.n	8004b64 <event_send_core+0x100>
            if(e->deleted) return LV_RES_INV;
 8004b02:	4642      	mov	r2, r8
 8004b04:	421a      	tst	r2, r3
 8004b06:	d12b      	bne.n	8004b60 <event_send_core+0xfc>
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8004b08:	686b      	ldr	r3, [r5, #4]
        i++;
 8004b0a:	3401      	adds	r4, #1
    if(!obj->spec_attr) return NULL;
 8004b0c:	6899      	ldr	r1, [r3, #8]
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8004b0e:	001a      	movs	r2, r3
 8004b10:	9301      	str	r3, [sp, #4]
    if(!obj->spec_attr) return NULL;
 8004b12:	2900      	cmp	r1, #0
 8004b14:	d1da      	bne.n	8004acc <event_send_core+0x68>
    if(class_p == NULL) base = e->current_target->class_p;
 8004b16:	9b01      	ldr	r3, [sp, #4]
 8004b18:	681c      	ldr	r4, [r3, #0]
    while(base && base->event_cb == NULL) base = base->base_class;
 8004b1a:	2c00      	cmp	r4, #0
 8004b1c:	d115      	bne.n	8004b4a <event_send_core+0xe6>

        i++;
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
    }

    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8004b1e:	6853      	ldr	r3, [r2, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01f      	beq.n	8004b64 <event_send_core+0x100>
    return res;
}

static bool event_is_bubbled(lv_event_t * e)
{
    if(e->stop_bubbling) return false;
 8004b24:	7e29      	ldrb	r1, [r5, #24]
 8004b26:	0749      	lsls	r1, r1, #29
 8004b28:	d41c      	bmi.n	8004b64 <event_send_core+0x100>

    /*Event codes that always bubble*/
    switch(e->code) {
 8004b2a:	7a29      	ldrb	r1, [r5, #8]
 8004b2c:	3923      	subs	r1, #35	; 0x23
 8004b2e:	2901      	cmp	r1, #1
 8004b30:	d863      	bhi.n	8004bfa <event_send_core+0x196>
        e->current_target = e->current_target->parent;
 8004b32:	606b      	str	r3, [r5, #4]
        res = event_send_core(e);
 8004b34:	0028      	movs	r0, r5
 8004b36:	f7ff ff95 	bl	8004a64 <event_send_core>
        if(res != LV_RES_OK) return LV_RES_INV;
 8004b3a:	3801      	subs	r0, #1
 8004b3c:	4243      	negs	r3, r0
 8004b3e:	4158      	adcs	r0, r3
        if(e->stop_processing) return LV_RES_OK;
 8004b40:	b2c0      	uxtb	r0, r0
 8004b42:	e010      	b.n	8004b66 <event_send_core+0x102>
    while(base && base->event_cb == NULL) base = base->base_class;
 8004b44:	6824      	ldr	r4, [r4, #0]
 8004b46:	2c00      	cmp	r4, #0
 8004b48:	d042      	beq.n	8004bd0 <event_send_core+0x16c>
 8004b4a:	68e3      	ldr	r3, [r4, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f9      	beq.n	8004b44 <event_send_core+0xe0>
    e->user_data = NULL;
 8004b50:	2200      	movs	r2, #0
    base->event_cb(base, e);
 8004b52:	0029      	movs	r1, r5
 8004b54:	0020      	movs	r0, r4
    e->user_data = NULL;
 8004b56:	60ea      	str	r2, [r5, #12]
    base->event_cb(base, e);
 8004b58:	4798      	blx	r3
    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 8004b5a:	7e2b      	ldrb	r3, [r5, #24]
 8004b5c:	07db      	lsls	r3, r3, #31
 8004b5e:	d535      	bpl.n	8004bcc <event_send_core+0x168>
        if(e->deleted) return LV_RES_INV;
 8004b60:	2000      	movs	r0, #0
 8004b62:	e000      	b.n	8004b66 <event_send_core+0x102>
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;

    switch(e->code) {
 8004b64:	2001      	movs	r0, #1
}
 8004b66:	b003      	add	sp, #12
 8004b68:	bcf0      	pop	{r4, r5, r6, r7}
 8004b6a:	46bb      	mov	fp, r7
 8004b6c:	46b2      	mov	sl, r6
 8004b6e:	46a9      	mov	r9, r5
 8004b70:	46a0      	mov	r8, r4
 8004b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(class_p == NULL) base = e->current_target->class_p;
 8004b74:	9801      	ldr	r0, [sp, #4]
 8004b76:	6804      	ldr	r4, [r0, #0]
    while(base && base->event_cb == NULL) base = base->base_class;
 8004b78:	2c00      	cmp	r4, #0
 8004b7a:	d1e6      	bne.n	8004b4a <event_send_core+0xe6>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ce      	beq.n	8004b1e <event_send_core+0xba>
    return &obj->spec_attr->event_dsc[id];
 8004b80:	68cb      	ldr	r3, [r1, #12]
    while(event_dsc && res == LV_RES_OK) {
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0cb      	beq.n	8004b1e <event_send_core+0xba>
            if(e->deleted) return LV_RES_INV;
 8004b86:	2101      	movs	r1, #1
 8004b88:	4688      	mov	r8, r1
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8004b8a:	6819      	ldr	r1, [r3, #0]
    while(event_dsc && res == LV_RES_OK) {
 8004b8c:	2400      	movs	r4, #0
            if(e->stop_processing) return LV_RES_OK;
 8004b8e:	2602      	movs	r6, #2
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8004b90:	2900      	cmp	r1, #0
 8004b92:	d009      	beq.n	8004ba8 <event_send_core+0x144>
 8004b94:	2008      	movs	r0, #8
 8004b96:	5618      	ldrsb	r0, [r3, r0]
 8004b98:	7a1f      	ldrb	r7, [r3, #8]
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	db04      	blt.n	8004ba8 <event_send_core+0x144>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8004b9e:	2f00      	cmp	r7, #0
 8004ba0:	d01f      	beq.n	8004be2 <event_send_core+0x17e>
 8004ba2:	7a28      	ldrb	r0, [r5, #8]
 8004ba4:	42b8      	cmp	r0, r7
 8004ba6:	d01c      	beq.n	8004be2 <event_send_core+0x17e>
    if(!obj->spec_attr) return NULL;
 8004ba8:	6890      	ldr	r0, [r2, #8]
        i++;
 8004baa:	3401      	adds	r4, #1
    if(!obj->spec_attr) return NULL;
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d0b6      	beq.n	8004b1e <event_send_core+0xba>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8004bb0:	7e83      	ldrb	r3, [r0, #26]
 8004bb2:	069b      	lsls	r3, r3, #26
 8004bb4:	0e9b      	lsrs	r3, r3, #26
 8004bb6:	429c      	cmp	r4, r3
 8004bb8:	d2b1      	bcs.n	8004b1e <event_send_core+0xba>
    return &obj->spec_attr->event_dsc[id];
 8004bba:	0063      	lsls	r3, r4, #1
 8004bbc:	191b      	adds	r3, r3, r4
 8004bbe:	0099      	lsls	r1, r3, #2
 8004bc0:	68c3      	ldr	r3, [r0, #12]
 8004bc2:	185b      	adds	r3, r3, r1
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8004bc4:	6819      	ldr	r1, [r3, #0]
 8004bc6:	2900      	cmp	r1, #0
 8004bc8:	d1e4      	bne.n	8004b94 <event_send_core+0x130>
 8004bca:	e7ed      	b.n	8004ba8 <event_send_core+0x144>
 8004bcc:	686b      	ldr	r3, [r5, #4]
 8004bce:	9301      	str	r3, [sp, #4]
    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 8004bd0:	9a01      	ldr	r2, [sp, #4]
    if(!obj->spec_attr) return NULL;
 8004bd2:	6891      	ldr	r1, [r2, #8]
 8004bd4:	2900      	cmp	r1, #0
 8004bd6:	d0a2      	beq.n	8004b1e <event_send_core+0xba>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8004bd8:	7e8b      	ldrb	r3, [r1, #26]
 8004bda:	069b      	lsls	r3, r3, #26
 8004bdc:	0e9b      	lsrs	r3, r3, #26
 8004bde:	d1cf      	bne.n	8004b80 <event_send_core+0x11c>
 8004be0:	e79d      	b.n	8004b1e <event_send_core+0xba>
            e->user_data = event_dsc->user_data;
 8004be2:	685b      	ldr	r3, [r3, #4]
            event_dsc->cb(e);
 8004be4:	0028      	movs	r0, r5
            e->user_data = event_dsc->user_data;
 8004be6:	60eb      	str	r3, [r5, #12]
            event_dsc->cb(e);
 8004be8:	4788      	blx	r1
            if(e->stop_processing) return LV_RES_OK;
 8004bea:	7e2b      	ldrb	r3, [r5, #24]
 8004bec:	421e      	tst	r6, r3
 8004bee:	d1b9      	bne.n	8004b64 <event_send_core+0x100>
            if(e->deleted) return LV_RES_INV;
 8004bf0:	4642      	mov	r2, r8
 8004bf2:	421a      	tst	r2, r3
 8004bf4:	d1b4      	bne.n	8004b60 <event_send_core+0xfc>
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8004bf6:	686a      	ldr	r2, [r5, #4]
 8004bf8:	e7d6      	b.n	8004ba8 <event_send_core+0x144>
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 8004bfa:	2180      	movs	r1, #128	; 0x80
 8004bfc:	0010      	movs	r0, r2
 8004bfe:	01c9      	lsls	r1, r1, #7
 8004c00:	f003 f988 	bl	8007f14 <lv_obj_has_flag>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d0ad      	beq.n	8004b64 <event_send_core+0x100>
    switch(e->code) {
 8004c08:	7a2b      	ldrb	r3, [r5, #8]
 8004c0a:	3b11      	subs	r3, #17
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b1b      	cmp	r3, #27
 8004c10:	d803      	bhi.n	8004c1a <event_send_core+0x1b6>
 8004c12:	4a06      	ldr	r2, [pc, #24]	; (8004c2c <event_send_core+0x1c8>)
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	58d3      	ldr	r3, [r2, r3]
 8004c18:	469f      	mov	pc, r3
        e->current_target = e->current_target->parent;
 8004c1a:	686b      	ldr	r3, [r5, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	e788      	b.n	8004b32 <event_send_core+0xce>
    if(class_p == NULL) base = e->current_target->class_p;
 8004c20:	9b01      	ldr	r3, [sp, #4]
 8004c22:	681c      	ldr	r4, [r3, #0]
    while(base && base->event_cb == NULL) base = base->base_class;
 8004c24:	2c00      	cmp	r4, #0
 8004c26:	d000      	beq.n	8004c2a <event_send_core+0x1c6>
 8004c28:	e78f      	b.n	8004b4a <event_send_core+0xe6>
 8004c2a:	e7a9      	b.n	8004b80 <event_send_core+0x11c>
 8004c2c:	0801b638 	.word	0x0801b638

08004c30 <lv_event_send>:
{
 8004c30:	b510      	push	{r4, lr}
 8004c32:	b088      	sub	sp, #32
    if(obj == NULL) return LV_RES_OK;
 8004c34:	2800      	cmp	r0, #0
 8004c36:	d017      	beq.n	8004c68 <lv_event_send+0x38>
    e.code = event_code;
 8004c38:	466b      	mov	r3, sp
    e.target = obj;
 8004c3a:	9001      	str	r0, [sp, #4]
    e.code = event_code;
 8004c3c:	7219      	strb	r1, [r3, #8]
    e.user_data = NULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	9303      	str	r3, [sp, #12]
    e.deleted = 0;
 8004c42:	466b      	mov	r3, sp
    e.param = param;
 8004c44:	9204      	str	r2, [sp, #16]
    e.deleted = 0;
 8004c46:	2207      	movs	r2, #7
 8004c48:	7e1b      	ldrb	r3, [r3, #24]
    e.prev = event_head;
 8004c4a:	4c08      	ldr	r4, [pc, #32]	; (8004c6c <lv_event_send+0x3c>)
    e.deleted = 0;
 8004c4c:	4393      	bics	r3, r2
 8004c4e:	466a      	mov	r2, sp
 8004c50:	7613      	strb	r3, [r2, #24]
    e.prev = event_head;
 8004c52:	6823      	ldr	r3, [r4, #0]
    e.target = obj;
 8004c54:	9000      	str	r0, [sp, #0]
    lv_res_t res = event_send_core(&e);
 8004c56:	4668      	mov	r0, sp
    e.prev = event_head;
 8004c58:	9305      	str	r3, [sp, #20]
    event_head = &e;
 8004c5a:	6022      	str	r2, [r4, #0]
    lv_res_t res = event_send_core(&e);
 8004c5c:	f7ff ff02 	bl	8004a64 <event_send_core>
    event_head = e.prev;
 8004c60:	9b05      	ldr	r3, [sp, #20]
 8004c62:	6023      	str	r3, [r4, #0]
}
 8004c64:	b008      	add	sp, #32
 8004c66:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
 8004c68:	2001      	movs	r0, #1
 8004c6a:	e7fb      	b.n	8004c64 <lv_event_send+0x34>
 8004c6c:	20000448 	.word	0x20000448

08004c70 <lv_obj_event_base>:
{
 8004c70:	b510      	push	{r4, lr}
 8004c72:	000c      	movs	r4, r1
    if(class_p == NULL) base = e->current_target->class_p;
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d00f      	beq.n	8004c98 <lv_obj_event_base+0x28>
    else base = class_p->base_class;
 8004c78:	6800      	ldr	r0, [r0, #0]
    while(base && base->event_cb == NULL) base = base->base_class;
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	d00a      	beq.n	8004c94 <lv_obj_event_base+0x24>
 8004c7e:	68c3      	ldr	r3, [r0, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f9      	beq.n	8004c78 <lv_obj_event_base+0x8>
    e->user_data = NULL;
 8004c84:	2200      	movs	r2, #0
    base->event_cb(base, e);
 8004c86:	0021      	movs	r1, r4
    e->user_data = NULL;
 8004c88:	60e2      	str	r2, [r4, #12]
    base->event_cb(base, e);
 8004c8a:	4798      	blx	r3
    if(e->deleted) res = LV_RES_INV;
 8004c8c:	2001      	movs	r0, #1
 8004c8e:	7e23      	ldrb	r3, [r4, #24]
 8004c90:	4398      	bics	r0, r3
}
 8004c92:	bd10      	pop	{r4, pc}
    if(base == NULL) return LV_RES_OK;
 8004c94:	2001      	movs	r0, #1
 8004c96:	e7fc      	b.n	8004c92 <lv_obj_event_base+0x22>
    if(class_p == NULL) base = e->current_target->class_p;
 8004c98:	684b      	ldr	r3, [r1, #4]
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	e7ed      	b.n	8004c7a <lv_obj_event_base+0xa>
 8004c9e:	46c0      	nop			; (mov r8, r8)

08004ca0 <lv_event_get_target>:
    return e->target;
 8004ca0:	6800      	ldr	r0, [r0, #0]
}
 8004ca2:	4770      	bx	lr

08004ca4 <lv_event_get_current_target>:
    return e->current_target;
 8004ca4:	6840      	ldr	r0, [r0, #4]
}
 8004ca6:	4770      	bx	lr

08004ca8 <lv_event_get_code>:
    return e->code & ~LV_EVENT_PREPROCESS;
 8004ca8:	7a03      	ldrb	r3, [r0, #8]
 8004caa:	207f      	movs	r0, #127	; 0x7f
 8004cac:	4018      	ands	r0, r3
}
 8004cae:	4770      	bx	lr

08004cb0 <lv_event_get_param>:
    return e->param;
 8004cb0:	6900      	ldr	r0, [r0, #16]
}
 8004cb2:	4770      	bx	lr

08004cb4 <lv_event_get_user_data>:
    return e->user_data;
 8004cb4:	68c0      	ldr	r0, [r0, #12]
}
 8004cb6:	4770      	bx	lr

08004cb8 <lv_event_register_id>:
    last_id ++;
 8004cb8:	4b02      	ldr	r3, [pc, #8]	; (8004cc4 <lv_event_register_id+0xc>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	1c50      	adds	r0, r2, #1
 8004cbe:	6018      	str	r0, [r3, #0]
}
 8004cc0:	4770      	bx	lr
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	2000006c 	.word	0x2000006c

08004cc8 <_lv_event_mark_deleted>:
    lv_event_t * e = event_head;
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <_lv_event_mark_deleted+0x2c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
    while(e) {
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d010      	beq.n	8004cf2 <_lv_event_mark_deleted+0x2a>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	e005      	b.n	8004ce0 <_lv_event_mark_deleted+0x18>
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4282      	cmp	r2, r0
 8004cd8:	d005      	beq.n	8004ce6 <_lv_event_mark_deleted+0x1e>
        e = e->prev;
 8004cda:	695b      	ldr	r3, [r3, #20]
    while(e) {
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <_lv_event_mark_deleted+0x2a>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	4282      	cmp	r2, r0
 8004ce4:	d1f6      	bne.n	8004cd4 <_lv_event_mark_deleted+0xc>
 8004ce6:	7e1a      	ldrb	r2, [r3, #24]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	761a      	strb	r2, [r3, #24]
        e = e->prev;
 8004cec:	695b      	ldr	r3, [r3, #20]
    while(e) {
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f6      	bne.n	8004ce0 <_lv_event_mark_deleted+0x18>
}
 8004cf2:	4770      	bx	lr
 8004cf4:	20000448 	.word	0x20000448

08004cf8 <lv_obj_add_event_cb>:
{
 8004cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cfa:	46c6      	mov	lr, r8
 8004cfc:	b500      	push	{lr}
 8004cfe:	0007      	movs	r7, r0
 8004d00:	000e      	movs	r6, r1
 8004d02:	0015      	movs	r5, r2
 8004d04:	4698      	mov	r8, r3
    lv_obj_allocate_spec_attr(obj);
 8004d06:	f003 f921 	bl	8007f4c <lv_obj_allocate_spec_attr>
    obj->spec_attr->event_dsc_cnt++;
 8004d0a:	203f      	movs	r0, #63	; 0x3f
 8004d0c:	0001      	movs	r1, r0
 8004d0e:	68bc      	ldr	r4, [r7, #8]
 8004d10:	7ea2      	ldrb	r2, [r4, #26]
 8004d12:	0693      	lsls	r3, r2, #26
 8004d14:	0e9b      	lsrs	r3, r3, #26
 8004d16:	3301      	adds	r3, #1
 8004d18:	4019      	ands	r1, r3
 8004d1a:	468c      	mov	ip, r1
 8004d1c:	000b      	movs	r3, r1
 8004d1e:	4382      	bics	r2, r0
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 8004d20:	0049      	lsls	r1, r1, #1
    obj->spec_attr->event_dsc_cnt++;
 8004d22:	4313      	orrs	r3, r2
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 8004d24:	4461      	add	r1, ip
    obj->spec_attr->event_dsc_cnt++;
 8004d26:	76a3      	strb	r3, [r4, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 8004d28:	68e0      	ldr	r0, [r4, #12]
 8004d2a:	0089      	lsls	r1, r1, #2
 8004d2c:	f010 f8e6 	bl	8014efc <lv_mem_realloc>
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 8004d30:	68bb      	ldr	r3, [r7, #8]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 8004d32:	60e0      	str	r0, [r4, #12]
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	2a00      	cmp	r2, #0
 8004d38:	d00e      	beq.n	8004d58 <lv_obj_add_event_cb+0x60>
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].cb = event_cb;
 8004d3a:	7e98      	ldrb	r0, [r3, #26]
 8004d3c:	0680      	lsls	r0, r0, #26
 8004d3e:	0e83      	lsrs	r3, r0, #26
 8004d40:	0e40      	lsrs	r0, r0, #25
 8004d42:	18c0      	adds	r0, r0, r3
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].user_data = user_data;
 8004d44:	4643      	mov	r3, r8
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].cb = event_cb;
 8004d46:	0080      	lsls	r0, r0, #2
 8004d48:	380c      	subs	r0, #12
 8004d4a:	1810      	adds	r0, r2, r0
 8004d4c:	6006      	str	r6, [r0, #0]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].filter = filter;
 8004d4e:	7205      	strb	r5, [r0, #8]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].user_data = user_data;
 8004d50:	6043      	str	r3, [r0, #4]
}
 8004d52:	bc80      	pop	{r7}
 8004d54:	46b8      	mov	r8, r7
 8004d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 8004d58:	e7fe      	b.n	8004d58 <lv_obj_add_event_cb+0x60>
 8004d5a:	46c0      	nop			; (mov r8, r8)

08004d5c <lv_event_get_indev>:
       e->code == LV_EVENT_DEFOCUSED ||
 8004d5c:	7a03      	ldrb	r3, [r0, #8]
    if(e->code == LV_EVENT_PRESSED ||
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	2b0f      	cmp	r3, #15
 8004d62:	d801      	bhi.n	8004d68 <lv_event_get_indev+0xc>
    return e->param;
 8004d64:	6900      	ldr	r0, [r0, #16]
}
 8004d66:	4770      	bx	lr
        return NULL;
 8004d68:	2000      	movs	r0, #0
 8004d6a:	e7fc      	b.n	8004d66 <lv_event_get_indev+0xa>

08004d6c <lv_event_get_draw_ctx>:
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8004d6c:	7a02      	ldrb	r2, [r0, #8]
{
 8004d6e:	0003      	movs	r3, r0
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8004d70:	3a14      	subs	r2, #20
        return NULL;
 8004d72:	2000      	movs	r0, #0
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8004d74:	2a05      	cmp	r2, #5
 8004d76:	d800      	bhi.n	8004d7a <lv_event_get_draw_ctx+0xe>
    return e->param;
 8004d78:	6918      	ldr	r0, [r3, #16]
}
 8004d7a:	4770      	bx	lr

08004d7c <lv_event_set_ext_draw_size>:
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8004d7c:	7a03      	ldrb	r3, [r0, #8]
 8004d7e:	2b13      	cmp	r3, #19
 8004d80:	d000      	beq.n	8004d84 <lv_event_set_ext_draw_size+0x8>
}
 8004d82:	4770      	bx	lr
    return e->param;
 8004d84:	6902      	ldr	r2, [r0, #16]
        *cur_size = LV_MAX(*cur_size, size);
 8004d86:	8813      	ldrh	r3, [r2, #0]
 8004d88:	1c18      	adds	r0, r3, #0
 8004d8a:	b21b      	sxth	r3, r3
 8004d8c:	428b      	cmp	r3, r1
 8004d8e:	db01      	blt.n	8004d94 <lv_event_set_ext_draw_size+0x18>
 8004d90:	8010      	strh	r0, [r2, #0]
}
 8004d92:	e7f6      	b.n	8004d82 <lv_event_set_ext_draw_size+0x6>
        *cur_size = LV_MAX(*cur_size, size);
 8004d94:	1c08      	adds	r0, r1, #0
 8004d96:	8010      	strh	r0, [r2, #0]
        LV_LOG_WARN("Not interpreted with this event code");
 8004d98:	e7f3      	b.n	8004d82 <lv_event_set_ext_draw_size+0x6>
 8004d9a:	46c0      	nop			; (mov r8, r8)

08004d9c <focus_next_core.part.0>:
        lv_group_focus_prev(g);
    /*Restore wrap property*/
    g->wrap = temp_wrap;
}

static bool focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(group->frozen) return focus_changed;

    lv_obj_t ** obj_next     = group->obj_focus;
    lv_obj_t ** obj_sentinel = NULL;
    bool can_move            = true;
    bool can_begin           = true;
 8004d9e:	2301      	movs	r3, #1
static bool focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8004da0:	4657      	mov	r7, sl
 8004da2:	464e      	mov	r6, r9
 8004da4:	4645      	mov	r5, r8
 8004da6:	46de      	mov	lr, fp
    bool can_begin           = true;
 8004da8:	469b      	mov	fp, r3
        }

        can_move = true;

        if(obj_next == NULL) continue;
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8004daa:	337f      	adds	r3, #127	; 0x7f
static bool focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8004dac:	b5e0      	push	{r5, r6, r7, lr}
 8004dae:	4689      	mov	r9, r1
 8004db0:	0006      	movs	r6, r0
 8004db2:	4690      	mov	r8, r2
    lv_obj_t ** obj_sentinel = NULL;
 8004db4:	2700      	movs	r7, #0
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8004db6:	469a      	mov	sl, r3
    lv_obj_t ** obj_next     = group->obj_focus;
 8004db8:	68c5      	ldr	r5, [r0, #12]
        if(obj_next == NULL) {
 8004dba:	2d00      	cmp	r5, #0
 8004dbc:	d05e      	beq.n	8004e7c <focus_next_core.part.0+0xe0>
        if(obj_sentinel == NULL) {
 8004dbe:	2f00      	cmp	r7, #0
 8004dc0:	d100      	bne.n	8004dc4 <focus_next_core.part.0+0x28>
 8004dc2:	e06d      	b.n	8004ea0 <focus_next_core.part.0+0x104>
            obj_next = move(&group->obj_ll, obj_next);
 8004dc4:	0029      	movs	r1, r5
 8004dc6:	0030      	movs	r0, r6
 8004dc8:	47c0      	blx	r8
 8004dca:	0005      	movs	r5, r0
            if(obj_next == obj_sentinel) return focus_changed;
 8004dcc:	42b8      	cmp	r0, r7
 8004dce:	d04e      	beq.n	8004e6e <focus_next_core.part.0+0xd2>
        if(obj_next == NULL) continue;
 8004dd0:	2d00      	cmp	r5, #0
 8004dd2:	d053      	beq.n	8004e7c <focus_next_core.part.0+0xe0>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8004dd4:	6828      	ldr	r0, [r5, #0]
 8004dd6:	f003 f8ab 	bl	8007f30 <lv_obj_get_state>
 8004dda:	4653      	mov	r3, sl
 8004ddc:	4203      	tst	r3, r0
 8004dde:	d1ec      	bne.n	8004dba <focus_next_core.part.0+0x1e>

        /*Hidden objects don't receive focus.
         *If any parent is hidden, the object is also hidden)*/
        lv_obj_t * parent = *obj_next;
 8004de0:	682c      	ldr	r4, [r5, #0]
        while(parent) {
 8004de2:	2c00      	cmp	r4, #0
 8004de4:	d105      	bne.n	8004df2 <focus_next_core.part.0+0x56>
 8004de6:	e010      	b.n	8004e0a <focus_next_core.part.0+0x6e>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
            parent = lv_obj_get_parent(parent);
 8004de8:	0020      	movs	r0, r4
 8004dea:	f009 f817 	bl	800de1c <lv_obj_get_parent>
 8004dee:	1e04      	subs	r4, r0, #0
        while(parent) {
 8004df0:	d00b      	beq.n	8004e0a <focus_next_core.part.0+0x6e>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 8004df2:	2101      	movs	r1, #1
 8004df4:	0020      	movs	r0, r4
 8004df6:	f003 f88d 	bl	8007f14 <lv_obj_has_flag>
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d0f4      	beq.n	8004de8 <focus_next_core.part.0+0x4c>
        }

        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 8004dfe:	2101      	movs	r1, #1
 8004e00:	0020      	movs	r0, r4
 8004e02:	f003 f887 	bl	8007f14 <lv_obj_has_flag>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	d1d7      	bne.n	8004dba <focus_next_core.part.0+0x1e>

        /*If we got her a good candidate is found*/
        break;
    }

    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 8004e0a:	68f3      	ldr	r3, [r6, #12]
 8004e0c:	42ab      	cmp	r3, r5
 8004e0e:	d02e      	beq.n	8004e6e <focus_next_core.part.0+0xd2>

    if(group->obj_focus) {
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d058      	beq.n	8004ec6 <focus_next_core.part.0+0x12a>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8004e14:	681b      	ldr	r3, [r3, #0]
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
    lv_indev_t * indev_encoder = NULL;
    lv_indev_t * indev_group = NULL;
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8004e16:	2000      	movs	r0, #0
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8004e18:	4698      	mov	r8, r3
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8004e1a:	f00e fe9d 	bl	8013b58 <lv_indev_get_next>
 8004e1e:	1e04      	subs	r4, r0, #0
    while(indev) {
 8004e20:	d100      	bne.n	8004e24 <focus_next_core.part.0+0x88>
 8004e22:	e095      	b.n	8004f50 <focus_next_core.part.0+0x1b4>
    lv_indev_t * indev_encoder = NULL;
 8004e24:	2300      	movs	r3, #0
    lv_indev_t * indev_group = NULL;
 8004e26:	2700      	movs	r7, #0
    lv_indev_t * indev_encoder = NULL;
 8004e28:	4699      	mov	r9, r3
 8004e2a:	e004      	b.n	8004e36 <focus_next_core.part.0+0x9a>
            /*Prefer KEYPAD*/
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
            indev_group = indev;
        }
        indev = lv_indev_get_next(indev);
 8004e2c:	0020      	movs	r0, r4
 8004e2e:	f00e fe93 	bl	8013b58 <lv_indev_get_next>
 8004e32:	1e04      	subs	r4, r0, #0
    while(indev) {
 8004e34:	d011      	beq.n	8004e5a <focus_next_core.part.0+0xbe>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8004e36:	0020      	movs	r0, r4
 8004e38:	f000 fc1e 	bl	8005678 <lv_indev_get_type>
        if(indev->group == g) {
 8004e3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004e3e:	429e      	cmp	r6, r3
 8004e40:	d1f4      	bne.n	8004e2c <focus_next_core.part.0+0x90>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8004e42:	2802      	cmp	r0, #2
 8004e44:	d100      	bne.n	8004e48 <focus_next_core.part.0+0xac>
 8004e46:	e088      	b.n	8004f5a <focus_next_core.part.0+0x1be>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8004e48:	0027      	movs	r7, r4
 8004e4a:	2804      	cmp	r0, #4
 8004e4c:	d1ee      	bne.n	8004e2c <focus_next_core.part.0+0x90>
        indev = lv_indev_get_next(indev);
 8004e4e:	0020      	movs	r0, r4
 8004e50:	f00e fe82 	bl	8013b58 <lv_indev_get_next>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8004e54:	46a1      	mov	r9, r4
        indev = lv_indev_get_next(indev);
 8004e56:	1e04      	subs	r4, r0, #0
    while(indev) {
 8004e58:	d1ed      	bne.n	8004e36 <focus_next_core.part.0+0x9a>
    }

    if(indev_encoder) return indev_encoder;
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d068      	beq.n	8004f32 <focus_next_core.part.0+0x196>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8004e60:	464a      	mov	r2, r9
 8004e62:	210f      	movs	r1, #15
 8004e64:	4640      	mov	r0, r8
 8004e66:	f7ff fee3 	bl	8004c30 <lv_event_send>
        if(res != LV_RES_OK) return focus_changed;
 8004e6a:	2801      	cmp	r0, #1
 8004e6c:	d027      	beq.n	8004ebe <focus_next_core.part.0+0x122>
                return focus_changed;
 8004e6e:	2000      	movs	r0, #0
}
 8004e70:	bcf0      	pop	{r4, r5, r6, r7}
 8004e72:	46bb      	mov	fp, r7
 8004e74:	46b2      	mov	sl, r6
 8004e76:	46a9      	mov	r9, r5
 8004e78:	46a0      	mov	r8, r4
 8004e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(group->wrap || obj_sentinel == NULL) {
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	7e33      	ldrb	r3, [r6, #24]
 8004e80:	421a      	tst	r2, r3
 8004e82:	d10f      	bne.n	8004ea4 <focus_next_core.part.0+0x108>
 8004e84:	2f00      	cmp	r7, #0
 8004e86:	d1f2      	bne.n	8004e6e <focus_next_core.part.0+0xd2>
                if(!can_begin) return focus_changed;
 8004e88:	465b      	mov	r3, fp
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0ef      	beq.n	8004e6e <focus_next_core.part.0+0xd2>
                obj_next  = begin(&group->obj_ll);
 8004e8e:	0030      	movs	r0, r6
 8004e90:	47c8      	blx	r9
 8004e92:	0007      	movs	r7, r0
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 8004e94:	2f00      	cmp	r7, #0
 8004e96:	d0ea      	beq.n	8004e6e <focus_next_core.part.0+0xd2>
                can_begin = false;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	003d      	movs	r5, r7
 8004e9c:	469b      	mov	fp, r3
 8004e9e:	e799      	b.n	8004dd4 <focus_next_core.part.0+0x38>
        if(obj_sentinel == NULL) {
 8004ea0:	002f      	movs	r7, r5
 8004ea2:	e78f      	b.n	8004dc4 <focus_next_core.part.0+0x28>
                if(!can_begin) return focus_changed;
 8004ea4:	465b      	mov	r3, fp
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0e1      	beq.n	8004e6e <focus_next_core.part.0+0xd2>
                obj_next  = begin(&group->obj_ll);
 8004eaa:	0030      	movs	r0, r6
 8004eac:	47c8      	blx	r9
                can_begin = false;
 8004eae:	2300      	movs	r3, #0
                obj_next  = begin(&group->obj_ll);
 8004eb0:	0005      	movs	r5, r0
                can_begin = false;
 8004eb2:	469b      	mov	fp, r3
        if(obj_sentinel == NULL) {
 8004eb4:	2f00      	cmp	r7, #0
 8004eb6:	d000      	beq.n	8004eba <focus_next_core.part.0+0x11e>
 8004eb8:	e78a      	b.n	8004dd0 <focus_next_core.part.0+0x34>
                obj_next  = begin(&group->obj_ll);
 8004eba:	0007      	movs	r7, r0
 8004ebc:	e7ea      	b.n	8004e94 <focus_next_core.part.0+0xf8>
        lv_obj_invalidate(*group->obj_focus);
 8004ebe:	68f3      	ldr	r3, [r6, #12]
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	f004 faa7 	bl	8009414 <lv_obj_invalidate>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8004ec6:	2000      	movs	r0, #0
    group->obj_focus = obj_next;
 8004ec8:	60f5      	str	r5, [r6, #12]
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8004eca:	682f      	ldr	r7, [r5, #0]
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8004ecc:	f00e fe44 	bl	8013b58 <lv_indev_get_next>
 8004ed0:	1e04      	subs	r4, r0, #0
    while(indev) {
 8004ed2:	d056      	beq.n	8004f82 <focus_next_core.part.0+0x1e6>
    lv_indev_t * indev_encoder = NULL;
 8004ed4:	2300      	movs	r3, #0
    lv_indev_t * indev_group = NULL;
 8004ed6:	2500      	movs	r5, #0
    lv_indev_t * indev_encoder = NULL;
 8004ed8:	4698      	mov	r8, r3
 8004eda:	e004      	b.n	8004ee6 <focus_next_core.part.0+0x14a>
        indev = lv_indev_get_next(indev);
 8004edc:	0020      	movs	r0, r4
 8004ede:	f00e fe3b 	bl	8013b58 <lv_indev_get_next>
 8004ee2:	1e04      	subs	r4, r0, #0
    while(indev) {
 8004ee4:	d010      	beq.n	8004f08 <focus_next_core.part.0+0x16c>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8004ee6:	0020      	movs	r0, r4
 8004ee8:	f000 fbc6 	bl	8005678 <lv_indev_get_type>
        if(indev->group == g) {
 8004eec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004eee:	429e      	cmp	r6, r3
 8004ef0:	d1f4      	bne.n	8004edc <focus_next_core.part.0+0x140>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8004ef2:	2802      	cmp	r0, #2
 8004ef4:	d03b      	beq.n	8004f6e <focus_next_core.part.0+0x1d2>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8004ef6:	0025      	movs	r5, r4
 8004ef8:	2804      	cmp	r0, #4
 8004efa:	d1ef      	bne.n	8004edc <focus_next_core.part.0+0x140>
        indev = lv_indev_get_next(indev);
 8004efc:	0020      	movs	r0, r4
 8004efe:	f00e fe2b 	bl	8013b58 <lv_indev_get_next>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8004f02:	46a0      	mov	r8, r4
        indev = lv_indev_get_next(indev);
 8004f04:	1e04      	subs	r4, r0, #0
    while(indev) {
 8004f06:	d1ee      	bne.n	8004ee6 <focus_next_core.part.0+0x14a>
    if(indev_encoder) return indev_encoder;
 8004f08:	4643      	mov	r3, r8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d01c      	beq.n	8004f48 <focus_next_core.part.0+0x1ac>
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8004f0e:	4642      	mov	r2, r8
 8004f10:	210e      	movs	r1, #14
 8004f12:	0038      	movs	r0, r7
 8004f14:	f7ff fe8c 	bl	8004c30 <lv_event_send>
    if(res != LV_RES_OK) return focus_changed;
 8004f18:	2801      	cmp	r0, #1
 8004f1a:	d1a8      	bne.n	8004e6e <focus_next_core.part.0+0xd2>
    lv_obj_invalidate(*group->obj_focus);
 8004f1c:	68f3      	ldr	r3, [r6, #12]
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	f004 fa78 	bl	8009414 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8004f24:	6933      	ldr	r3, [r6, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d030      	beq.n	8004f8c <focus_next_core.part.0+0x1f0>
 8004f2a:	0030      	movs	r0, r6
 8004f2c:	4798      	blx	r3
    return focus_changed;
 8004f2e:	2001      	movs	r0, #1
 8004f30:	e79e      	b.n	8004e70 <focus_next_core.part.0+0xd4>
    if(indev_group) return indev_group;
 8004f32:	2f00      	cmp	r7, #0
 8004f34:	d00c      	beq.n	8004f50 <focus_next_core.part.0+0x1b4>
 8004f36:	46b9      	mov	r9, r7
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8004f38:	210f      	movs	r1, #15
 8004f3a:	464a      	mov	r2, r9
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	f7ff fe77 	bl	8004c30 <lv_event_send>
        if(res != LV_RES_OK) return focus_changed;
 8004f42:	2801      	cmp	r0, #1
 8004f44:	d193      	bne.n	8004e6e <focus_next_core.part.0+0xd2>
 8004f46:	e7ba      	b.n	8004ebe <focus_next_core.part.0+0x122>
    if(indev_group) return indev_group;
 8004f48:	2d00      	cmp	r5, #0
 8004f4a:	d01a      	beq.n	8004f82 <focus_next_core.part.0+0x1e6>
 8004f4c:	46a8      	mov	r8, r5
 8004f4e:	e7de      	b.n	8004f0e <focus_next_core.part.0+0x172>

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
 8004f50:	2000      	movs	r0, #0
 8004f52:	f00e fe01 	bl	8013b58 <lv_indev_get_next>
 8004f56:	4681      	mov	r9, r0
 8004f58:	e782      	b.n	8004e60 <focus_next_core.part.0+0xc4>
 8004f5a:	46a1      	mov	r9, r4
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8004f5c:	210f      	movs	r1, #15
 8004f5e:	464a      	mov	r2, r9
 8004f60:	4640      	mov	r0, r8
 8004f62:	f7ff fe65 	bl	8004c30 <lv_event_send>
        if(res != LV_RES_OK) return focus_changed;
 8004f66:	2801      	cmp	r0, #1
 8004f68:	d000      	beq.n	8004f6c <focus_next_core.part.0+0x1d0>
 8004f6a:	e780      	b.n	8004e6e <focus_next_core.part.0+0xd2>
 8004f6c:	e7a7      	b.n	8004ebe <focus_next_core.part.0+0x122>
 8004f6e:	46a0      	mov	r8, r4
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8004f70:	210e      	movs	r1, #14
 8004f72:	4642      	mov	r2, r8
 8004f74:	0038      	movs	r0, r7
 8004f76:	f7ff fe5b 	bl	8004c30 <lv_event_send>
    if(res != LV_RES_OK) return focus_changed;
 8004f7a:	2801      	cmp	r0, #1
 8004f7c:	d000      	beq.n	8004f80 <focus_next_core.part.0+0x1e4>
 8004f7e:	e776      	b.n	8004e6e <focus_next_core.part.0+0xd2>
 8004f80:	e7cc      	b.n	8004f1c <focus_next_core.part.0+0x180>
    return lv_indev_get_next(NULL);
 8004f82:	2000      	movs	r0, #0
 8004f84:	f00e fde8 	bl	8013b58 <lv_indev_get_next>
 8004f88:	4680      	mov	r8, r0
 8004f8a:	e7c0      	b.n	8004f0e <focus_next_core.part.0+0x172>
    return focus_changed;
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	e76f      	b.n	8004e70 <focus_next_core.part.0+0xd4>

08004f90 <lv_group_refocus>:
    g->wrap           = 1;
 8004f90:	2208      	movs	r2, #8
    uint8_t temp_wrap = g->wrap;
 8004f92:	7e03      	ldrb	r3, [r0, #24]
{
 8004f94:	b570      	push	{r4, r5, r6, lr}
    uint8_t temp_wrap = g->wrap;
 8004f96:	071d      	lsls	r5, r3, #28
    g->wrap           = 1;
 8004f98:	4313      	orrs	r3, r2
{
 8004f9a:	0004      	movs	r4, r0
    uint8_t temp_wrap = g->wrap;
 8004f9c:	0fed      	lsrs	r5, r5, #31
    g->wrap           = 1;
 8004f9e:	7603      	strb	r3, [r0, #24]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	075b      	lsls	r3, r3, #29
 8004fa4:	d411      	bmi.n	8004fca <lv_group_refocus+0x3a>
    if(group->frozen) return focus_changed;
 8004fa6:	07d3      	lsls	r3, r2, #31
 8004fa8:	d422      	bmi.n	8004ff0 <lv_group_refocus+0x60>
 8004faa:	4a15      	ldr	r2, [pc, #84]	; (8005000 <lv_group_refocus+0x70>)
 8004fac:	4915      	ldr	r1, [pc, #84]	; (8005004 <lv_group_refocus+0x74>)
 8004fae:	f7ff fef5 	bl	8004d9c <focus_next_core.part.0>
    if(group->edge_cb) {
 8004fb2:	6963      	ldr	r3, [r4, #20]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <lv_group_refocus+0x2c>
        if(!focus_changed)
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d01c      	beq.n	8004ff6 <lv_group_refocus+0x66>
    g->wrap = temp_wrap;
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	7e23      	ldrb	r3, [r4, #24]
 8004fc0:	00ed      	lsls	r5, r5, #3
 8004fc2:	4393      	bics	r3, r2
 8004fc4:	432b      	orrs	r3, r5
 8004fc6:	7623      	strb	r3, [r4, #24]
}
 8004fc8:	bd70      	pop	{r4, r5, r6, pc}
    if(group->frozen) return focus_changed;
 8004fca:	07d3      	lsls	r3, r2, #31
 8004fcc:	d409      	bmi.n	8004fe2 <lv_group_refocus+0x52>
 8004fce:	4a0e      	ldr	r2, [pc, #56]	; (8005008 <lv_group_refocus+0x78>)
 8004fd0:	490e      	ldr	r1, [pc, #56]	; (800500c <lv_group_refocus+0x7c>)
 8004fd2:	f7ff fee3 	bl	8004d9c <focus_next_core.part.0>
    if(group->edge_cb) {
 8004fd6:	6963      	ldr	r3, [r4, #20]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0ef      	beq.n	8004fbc <lv_group_refocus+0x2c>
        if(!focus_changed)
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d1ed      	bne.n	8004fbc <lv_group_refocus+0x2c>
 8004fe0:	e002      	b.n	8004fe8 <lv_group_refocus+0x58>
    if(group->edge_cb) {
 8004fe2:	6943      	ldr	r3, [r0, #20]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0e9      	beq.n	8004fbc <lv_group_refocus+0x2c>
            group->edge_cb(group, false);
 8004fe8:	2100      	movs	r1, #0
 8004fea:	0020      	movs	r0, r4
 8004fec:	4798      	blx	r3
 8004fee:	e7e5      	b.n	8004fbc <lv_group_refocus+0x2c>
    if(group->edge_cb) {
 8004ff0:	6943      	ldr	r3, [r0, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0e2      	beq.n	8004fbc <lv_group_refocus+0x2c>
            group->edge_cb(group, true);
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	0020      	movs	r0, r4
 8004ffa:	4798      	blx	r3
 8004ffc:	e7de      	b.n	8004fbc <lv_group_refocus+0x2c>
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	08014d39 	.word	0x08014d39
 8005004:	08014d21 	.word	0x08014d21
 8005008:	08014d41 	.word	0x08014d41
 800500c:	08014d2d 	.word	0x08014d2d

08005010 <lv_group_focus_obj.part.0>:
void lv_group_focus_obj(lv_obj_t * obj)
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	46ce      	mov	lr, r9
 8005014:	4647      	mov	r7, r8
 8005016:	b580      	push	{r7, lr}
 8005018:	0006      	movs	r6, r0
    lv_group_t * g = lv_obj_get_group(obj);
 800501a:	f002 ff91 	bl	8007f40 <lv_obj_get_group>
 800501e:	1e05      	subs	r5, r0, #0
    if(g == NULL) return;
 8005020:	d065      	beq.n	80050ee <lv_group_focus_obj.part.0+0xde>
    if(g->frozen != 0) return;
 8005022:	7e03      	ldrb	r3, [r0, #24]
 8005024:	07da      	lsls	r2, r3, #31
 8005026:	d462      	bmi.n	80050ee <lv_group_focus_obj.part.0+0xde>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8005028:	079a      	lsls	r2, r3, #30
 800502a:	d525      	bpl.n	8005078 <lv_group_focus_obj.part.0+0x68>
    group->editing     = en_val;
 800502c:	2202      	movs	r2, #2
 800502e:	4393      	bics	r3, r2
 8005030:	7603      	strb	r3, [r0, #24]
    if(group->obj_focus == NULL) return NULL;
 8005032:	68c3      	ldr	r3, [r0, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01f      	beq.n	8005078 <lv_group_focus_obj.part.0+0x68>
    return *group->obj_focus;
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4698      	mov	r8, r3
    if(focused) {
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01b      	beq.n	8005078 <lv_group_focus_obj.part.0+0x68>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8005040:	2000      	movs	r0, #0
 8005042:	f00e fd89 	bl	8013b58 <lv_indev_get_next>
    lv_indev_t * indev_encoder = NULL;
 8005046:	2300      	movs	r3, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8005048:	0004      	movs	r4, r0
    lv_indev_t * indev_group = NULL;
 800504a:	2700      	movs	r7, #0
    lv_indev_t * indev_encoder = NULL;
 800504c:	4699      	mov	r9, r3
    while(indev) {
 800504e:	2800      	cmp	r0, #0
 8005050:	d15c      	bne.n	800510c <lv_group_focus_obj.part.0+0xfc>
    return lv_indev_get_next(NULL);
 8005052:	2000      	movs	r0, #0
 8005054:	f00e fd80 	bl	8013b58 <lv_indev_get_next>
 8005058:	4681      	mov	r9, r0
 800505a:	e003      	b.n	8005064 <lv_group_focus_obj.part.0+0x54>
    if(indev_encoder) return indev_encoder;
 800505c:	464b      	mov	r3, r9
 800505e:	2b00      	cmp	r3, #0
 8005060:	d100      	bne.n	8005064 <lv_group_focus_obj.part.0+0x54>
 8005062:	e098      	b.n	8005196 <lv_group_focus_obj.part.0+0x186>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8005064:	464a      	mov	r2, r9
 8005066:	210e      	movs	r1, #14
 8005068:	4640      	mov	r0, r8
 800506a:	f7ff fde1 	bl	8004c30 <lv_event_send>
        if(res != LV_RES_OK) return;
 800506e:	2801      	cmp	r0, #1
 8005070:	d102      	bne.n	8005078 <lv_group_focus_obj.part.0+0x68>
        lv_obj_invalidate(focused);
 8005072:	4640      	mov	r0, r8
 8005074:	f004 f9ce 	bl	8009414 <lv_obj_invalidate>
    _LV_LL_READ(&g->obj_ll, i) {
 8005078:	0028      	movs	r0, r5
 800507a:	f00f fe51 	bl	8014d20 <_lv_ll_get_head>
 800507e:	1e04      	subs	r4, r0, #0
 8005080:	d106      	bne.n	8005090 <lv_group_focus_obj.part.0+0x80>
 8005082:	e034      	b.n	80050ee <lv_group_focus_obj.part.0+0xde>
 8005084:	0021      	movs	r1, r4
 8005086:	0028      	movs	r0, r5
 8005088:	f00f fe56 	bl	8014d38 <_lv_ll_get_next>
 800508c:	1e04      	subs	r4, r0, #0
 800508e:	d02e      	beq.n	80050ee <lv_group_focus_obj.part.0+0xde>
        if(*i == obj) {
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	429e      	cmp	r6, r3
 8005094:	d1f6      	bne.n	8005084 <lv_group_focus_obj.part.0+0x74>
            if(g->obj_focus != NULL && obj != *g->obj_focus) {  /*Do not defocus if the same object needs to be focused again*/
 8005096:	68eb      	ldr	r3, [r5, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d042      	beq.n	8005122 <lv_group_focus_obj.part.0+0x112>
 800509c:	681f      	ldr	r7, [r3, #0]
 800509e:	42be      	cmp	r6, r7
 80050a0:	d03f      	beq.n	8005122 <lv_group_focus_obj.part.0+0x112>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80050a2:	2000      	movs	r0, #0
 80050a4:	f00e fd58 	bl	8013b58 <lv_indev_get_next>
    lv_indev_t * indev_group = NULL;
 80050a8:	2300      	movs	r3, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80050aa:	1e06      	subs	r6, r0, #0
    lv_indev_t * indev_group = NULL;
 80050ac:	4698      	mov	r8, r3
    lv_indev_t * indev_encoder = NULL;
 80050ae:	4699      	mov	r9, r3
    while(indev) {
 80050b0:	d105      	bne.n	80050be <lv_group_focus_obj.part.0+0xae>
 80050b2:	e085      	b.n	80051c0 <lv_group_focus_obj.part.0+0x1b0>
        indev = lv_indev_get_next(indev);
 80050b4:	0030      	movs	r0, r6
 80050b6:	f00e fd4f 	bl	8013b58 <lv_indev_get_next>
 80050ba:	1e06      	subs	r6, r0, #0
    while(indev) {
 80050bc:	d00d      	beq.n	80050da <lv_group_focus_obj.part.0+0xca>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 80050be:	0030      	movs	r0, r6
 80050c0:	f000 fada 	bl	8005678 <lv_indev_get_type>
        if(indev->group == g) {
 80050c4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80050c6:	429d      	cmp	r5, r3
 80050c8:	d1f4      	bne.n	80050b4 <lv_group_focus_obj.part.0+0xa4>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 80050ca:	2802      	cmp	r0, #2
 80050cc:	d100      	bne.n	80050d0 <lv_group_focus_obj.part.0+0xc0>
 80050ce:	e075      	b.n	80051bc <lv_group_focus_obj.part.0+0x1ac>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 80050d0:	46b0      	mov	r8, r6
 80050d2:	2804      	cmp	r0, #4
 80050d4:	d1ee      	bne.n	80050b4 <lv_group_focus_obj.part.0+0xa4>
 80050d6:	46b1      	mov	r9, r6
 80050d8:	e7ec      	b.n	80050b4 <lv_group_focus_obj.part.0+0xa4>
    if(indev_encoder) return indev_encoder;
 80050da:	464b      	mov	r3, r9
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d063      	beq.n	80051a8 <lv_group_focus_obj.part.0+0x198>
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 80050e0:	464a      	mov	r2, r9
 80050e2:	210f      	movs	r1, #15
 80050e4:	0038      	movs	r0, r7
 80050e6:	f7ff fda3 	bl	8004c30 <lv_event_send>
                if(res != LV_RES_OK) return;
 80050ea:	2801      	cmp	r0, #1
 80050ec:	d015      	beq.n	800511a <lv_group_focus_obj.part.0+0x10a>
}
 80050ee:	bcc0      	pop	{r6, r7}
 80050f0:	46b9      	mov	r9, r7
 80050f2:	46b0      	mov	r8, r6
 80050f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 80050f6:	2802      	cmp	r0, #2
 80050f8:	d049      	beq.n	800518e <lv_group_focus_obj.part.0+0x17e>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 80050fa:	0027      	movs	r7, r4
 80050fc:	2804      	cmp	r0, #4
 80050fe:	d100      	bne.n	8005102 <lv_group_focus_obj.part.0+0xf2>
 8005100:	46a1      	mov	r9, r4
        indev = lv_indev_get_next(indev);
 8005102:	0020      	movs	r0, r4
 8005104:	f00e fd28 	bl	8013b58 <lv_indev_get_next>
 8005108:	1e04      	subs	r4, r0, #0
    while(indev) {
 800510a:	d0a7      	beq.n	800505c <lv_group_focus_obj.part.0+0x4c>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 800510c:	0020      	movs	r0, r4
 800510e:	f000 fab3 	bl	8005678 <lv_indev_get_type>
        if(indev->group == g) {
 8005112:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005114:	429d      	cmp	r5, r3
 8005116:	d1f4      	bne.n	8005102 <lv_group_focus_obj.part.0+0xf2>
 8005118:	e7ed      	b.n	80050f6 <lv_group_focus_obj.part.0+0xe6>
                lv_obj_invalidate(*g->obj_focus);
 800511a:	68eb      	ldr	r3, [r5, #12]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	f004 f979 	bl	8009414 <lv_obj_invalidate>
                if(g->focus_cb) g->focus_cb(g);
 8005122:	692b      	ldr	r3, [r5, #16]
            g->obj_focus = i;
 8005124:	60ec      	str	r4, [r5, #12]
                if(g->focus_cb) g->focus_cb(g);
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <lv_group_focus_obj.part.0+0x120>
 800512a:	0028      	movs	r0, r5
 800512c:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, get_indev(g));
 800512e:	68ec      	ldr	r4, [r5, #12]
 8005130:	6823      	ldr	r3, [r4, #0]
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8005132:	2000      	movs	r0, #0
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, get_indev(g));
 8005134:	4698      	mov	r8, r3
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8005136:	f00e fd0f 	bl	8013b58 <lv_indev_get_next>
    lv_indev_t * indev_group = NULL;
 800513a:	2600      	movs	r6, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800513c:	0004      	movs	r4, r0
    lv_indev_t * indev_encoder = NULL;
 800513e:	2700      	movs	r7, #0
    while(indev) {
 8005140:	2800      	cmp	r0, #0
 8005142:	d105      	bne.n	8005150 <lv_group_focus_obj.part.0+0x140>
 8005144:	e035      	b.n	80051b2 <lv_group_focus_obj.part.0+0x1a2>
        indev = lv_indev_get_next(indev);
 8005146:	0020      	movs	r0, r4
 8005148:	f00e fd06 	bl	8013b58 <lv_indev_get_next>
 800514c:	1e04      	subs	r4, r0, #0
    while(indev) {
 800514e:	d010      	beq.n	8005172 <lv_group_focus_obj.part.0+0x162>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8005150:	0020      	movs	r0, r4
 8005152:	f000 fa91 	bl	8005678 <lv_indev_get_type>
        if(indev->group == g) {
 8005156:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005158:	429d      	cmp	r5, r3
 800515a:	d1f4      	bne.n	8005146 <lv_group_focus_obj.part.0+0x136>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 800515c:	2802      	cmp	r0, #2
 800515e:	d018      	beq.n	8005192 <lv_group_focus_obj.part.0+0x182>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8005160:	0026      	movs	r6, r4
 8005162:	2804      	cmp	r0, #4
 8005164:	d1ef      	bne.n	8005146 <lv_group_focus_obj.part.0+0x136>
        indev = lv_indev_get_next(indev);
 8005166:	0020      	movs	r0, r4
 8005168:	f00e fcf6 	bl	8013b58 <lv_indev_get_next>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 800516c:	0027      	movs	r7, r4
        indev = lv_indev_get_next(indev);
 800516e:	1e04      	subs	r4, r0, #0
    while(indev) {
 8005170:	d1ee      	bne.n	8005150 <lv_group_focus_obj.part.0+0x140>
    if(indev_encoder) return indev_encoder;
 8005172:	2f00      	cmp	r7, #0
 8005174:	d014      	beq.n	80051a0 <lv_group_focus_obj.part.0+0x190>
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, get_indev(g));
 8005176:	003a      	movs	r2, r7
 8005178:	210e      	movs	r1, #14
 800517a:	4640      	mov	r0, r8
 800517c:	f7ff fd58 	bl	8004c30 <lv_event_send>
                if(res != LV_RES_OK) return;
 8005180:	2801      	cmp	r0, #1
 8005182:	d1b4      	bne.n	80050ee <lv_group_focus_obj.part.0+0xde>
                lv_obj_invalidate(*g->obj_focus);
 8005184:	68eb      	ldr	r3, [r5, #12]
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	f004 f944 	bl	8009414 <lv_obj_invalidate>
 800518c:	e7af      	b.n	80050ee <lv_group_focus_obj.part.0+0xde>
 800518e:	46a1      	mov	r9, r4
 8005190:	e768      	b.n	8005064 <lv_group_focus_obj.part.0+0x54>
 8005192:	0027      	movs	r7, r4
 8005194:	e7ef      	b.n	8005176 <lv_group_focus_obj.part.0+0x166>
    if(indev_group) return indev_group;
 8005196:	2f00      	cmp	r7, #0
 8005198:	d100      	bne.n	800519c <lv_group_focus_obj.part.0+0x18c>
 800519a:	e75a      	b.n	8005052 <lv_group_focus_obj.part.0+0x42>
 800519c:	46b9      	mov	r9, r7
 800519e:	e761      	b.n	8005064 <lv_group_focus_obj.part.0+0x54>
 80051a0:	2e00      	cmp	r6, #0
 80051a2:	d006      	beq.n	80051b2 <lv_group_focus_obj.part.0+0x1a2>
 80051a4:	0037      	movs	r7, r6
 80051a6:	e7e6      	b.n	8005176 <lv_group_focus_obj.part.0+0x166>
 80051a8:	4643      	mov	r3, r8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <lv_group_focus_obj.part.0+0x1b0>
 80051ae:	46c1      	mov	r9, r8
 80051b0:	e796      	b.n	80050e0 <lv_group_focus_obj.part.0+0xd0>
    return lv_indev_get_next(NULL);
 80051b2:	2000      	movs	r0, #0
 80051b4:	f00e fcd0 	bl	8013b58 <lv_indev_get_next>
 80051b8:	0007      	movs	r7, r0
 80051ba:	e7dc      	b.n	8005176 <lv_group_focus_obj.part.0+0x166>
 80051bc:	46b1      	mov	r9, r6
 80051be:	e78f      	b.n	80050e0 <lv_group_focus_obj.part.0+0xd0>
 80051c0:	2000      	movs	r0, #0
 80051c2:	f00e fcc9 	bl	8013b58 <lv_indev_get_next>
 80051c6:	4681      	mov	r9, r0
 80051c8:	e78a      	b.n	80050e0 <lv_group_focus_obj.part.0+0xd0>
 80051ca:	46c0      	nop			; (mov r8, r8)

080051cc <_lv_group_init>:
{
 80051cc:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 80051ce:	211c      	movs	r1, #28
 80051d0:	4801      	ldr	r0, [pc, #4]	; (80051d8 <_lv_group_init+0xc>)
 80051d2:	f00f fd43 	bl	8014c5c <_lv_ll_init>
}
 80051d6:	bd10      	pop	{r4, pc}
 80051d8:	200005e4 	.word	0x200005e4

080051dc <lv_group_create>:
{
 80051dc:	b510      	push	{r4, lr}
    lv_group_t * group = _lv_ll_ins_head(&LV_GC_ROOT(_lv_group_ll));
 80051de:	480a      	ldr	r0, [pc, #40]	; (8005208 <lv_group_create+0x2c>)
 80051e0:	f00f fd44 	bl	8014c6c <_lv_ll_ins_head>
 80051e4:	1e04      	subs	r4, r0, #0
    LV_ASSERT_MALLOC(group);
 80051e6:	d00e      	beq.n	8005206 <lv_group_create+0x2a>
    _lv_ll_init(&group->obj_ll, sizeof(lv_obj_t *));
 80051e8:	2104      	movs	r1, #4
 80051ea:	f00f fd37 	bl	8014c5c <_lv_ll_init>
    group->obj_focus      = NULL;
 80051ee:	2300      	movs	r3, #0
    group->frozen         = 0;
 80051f0:	220f      	movs	r2, #15
    group->obj_focus      = NULL;
 80051f2:	60e3      	str	r3, [r4, #12]
    group->focus_cb       = NULL;
 80051f4:	6123      	str	r3, [r4, #16]
    group->edge_cb        = NULL;
 80051f6:	6163      	str	r3, [r4, #20]
    group->frozen         = 0;
 80051f8:	7e23      	ldrb	r3, [r4, #24]
}
 80051fa:	0020      	movs	r0, r4
    group->frozen         = 0;
 80051fc:	4393      	bics	r3, r2
 80051fe:	220c      	movs	r2, #12
 8005200:	4313      	orrs	r3, r2
 8005202:	7623      	strb	r3, [r4, #24]
}
 8005204:	bd10      	pop	{r4, pc}
    LV_ASSERT_MALLOC(group);
 8005206:	e7fe      	b.n	8005206 <lv_group_create+0x2a>
 8005208:	200005e4 	.word	0x200005e4

0800520c <lv_group_set_default>:
    default_group = group;
 800520c:	4b01      	ldr	r3, [pc, #4]	; (8005214 <lv_group_set_default+0x8>)
 800520e:	6018      	str	r0, [r3, #0]
}
 8005210:	4770      	bx	lr
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	2000044c 	.word	0x2000044c

08005218 <lv_group_get_default>:
    return default_group;
 8005218:	4b01      	ldr	r3, [pc, #4]	; (8005220 <lv_group_get_default+0x8>)
 800521a:	6818      	ldr	r0, [r3, #0]
}
 800521c:	4770      	bx	lr
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	2000044c 	.word	0x2000044c

08005224 <lv_group_add_obj>:
{
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	0004      	movs	r4, r0
 8005228:	000d      	movs	r5, r1
    if(group == NULL) return;
 800522a:	2800      	cmp	r0, #0
 800522c:	d00c      	beq.n	8005248 <lv_group_add_obj+0x24>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 800522e:	f00f fd77 	bl	8014d20 <_lv_ll_get_head>
 8005232:	1e01      	subs	r1, r0, #0
 8005234:	d105      	bne.n	8005242 <lv_group_add_obj+0x1e>
 8005236:	e008      	b.n	800524a <lv_group_add_obj+0x26>
 8005238:	0020      	movs	r0, r4
 800523a:	f00f fd7d 	bl	8014d38 <_lv_ll_get_next>
 800523e:	1e01      	subs	r1, r0, #0
 8005240:	d003      	beq.n	800524a <lv_group_add_obj+0x26>
        if((*obj_i) == obj) {
 8005242:	680b      	ldr	r3, [r1, #0]
 8005244:	42ab      	cmp	r3, r5
 8005246:	d1f7      	bne.n	8005238 <lv_group_add_obj+0x14>
}
 8005248:	bd70      	pop	{r4, r5, r6, pc}
    lv_group_t * group_cur = lv_obj_get_group(obj);
 800524a:	0028      	movs	r0, r5
 800524c:	f002 fe78 	bl	8007f40 <lv_obj_get_group>
    if(group_cur) {
 8005250:	2800      	cmp	r0, #0
 8005252:	d01a      	beq.n	800528a <lv_group_add_obj+0x66>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 8005254:	68ab      	ldr	r3, [r5, #8]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	2a00      	cmp	r2, #0
 800525a:	d003      	beq.n	8005264 <lv_group_add_obj+0x40>
 800525c:	68d2      	ldr	r2, [r2, #12]
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	42aa      	cmp	r2, r5
 8005262:	d010      	beq.n	8005286 <lv_group_add_obj+0x62>
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 8005264:	0020      	movs	r0, r4
    obj->spec_attr->group_p = group;
 8005266:	609c      	str	r4, [r3, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 8005268:	f00f fd18 	bl	8014c9c <_lv_ll_ins_tail>
 800526c:	1e06      	subs	r6, r0, #0
    LV_ASSERT_MALLOC(next);
 800526e:	d009      	beq.n	8005284 <lv_group_add_obj+0x60>
    *next = obj;
 8005270:	6005      	str	r5, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 8005272:	0020      	movs	r0, r4
 8005274:	f00f fd54 	bl	8014d20 <_lv_ll_get_head>
 8005278:	4286      	cmp	r6, r0
 800527a:	d1e5      	bne.n	8005248 <lv_group_add_obj+0x24>
        lv_group_refocus(group);
 800527c:	0020      	movs	r0, r4
 800527e:	f7ff fe87 	bl	8004f90 <lv_group_refocus>
    LV_LOG_TRACE("finished");
 8005282:	e7e1      	b.n	8005248 <lv_group_add_obj+0x24>
    LV_ASSERT_MALLOC(next);
 8005284:	e7fe      	b.n	8005284 <lv_group_add_obj+0x60>
            lv_group_refocus(group_cur);
 8005286:	f7ff fe83 	bl	8004f90 <lv_group_refocus>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 800528a:	68ab      	ldr	r3, [r5, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e9      	bne.n	8005264 <lv_group_add_obj+0x40>
 8005290:	0028      	movs	r0, r5
 8005292:	f002 fe5b 	bl	8007f4c <lv_obj_allocate_spec_attr>
    obj->spec_attr->group_p = group;
 8005296:	68ab      	ldr	r3, [r5, #8]
 8005298:	e7e4      	b.n	8005264 <lv_group_add_obj+0x40>
 800529a:	46c0      	nop			; (mov r8, r8)

0800529c <lv_group_remove_obj>:
{
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	46ce      	mov	lr, r9
 80052a0:	4647      	mov	r7, r8
 80052a2:	b580      	push	{r7, lr}
 80052a4:	0006      	movs	r6, r0
    lv_group_t * g = lv_obj_get_group(obj);
 80052a6:	f002 fe4b 	bl	8007f40 <lv_obj_get_group>
 80052aa:	1e05      	subs	r5, r0, #0
    if(g == NULL) return;
 80052ac:	d01e      	beq.n	80052ec <lv_group_remove_obj+0x50>
    if(g->obj_focus && *g->obj_focus == obj) {
 80052ae:	68c3      	ldr	r3, [r0, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <lv_group_remove_obj+0x1e>
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	42b3      	cmp	r3, r6
 80052b8:	d01c      	beq.n	80052f4 <lv_group_remove_obj+0x58>
    _LV_LL_READ(&g->obj_ll, i) {
 80052ba:	0028      	movs	r0, r5
 80052bc:	f00f fd30 	bl	8014d20 <_lv_ll_get_head>
 80052c0:	1e04      	subs	r4, r0, #0
 80052c2:	d104      	bne.n	80052ce <lv_group_remove_obj+0x32>
 80052c4:	e012      	b.n	80052ec <lv_group_remove_obj+0x50>
 80052c6:	f00f fd37 	bl	8014d38 <_lv_ll_get_next>
 80052ca:	1e04      	subs	r4, r0, #0
 80052cc:	d00e      	beq.n	80052ec <lv_group_remove_obj+0x50>
        if(*i == obj) {
 80052ce:	6823      	ldr	r3, [r4, #0]
            _lv_ll_remove(&g->obj_ll, i);
 80052d0:	0021      	movs	r1, r4
 80052d2:	0028      	movs	r0, r5
        if(*i == obj) {
 80052d4:	42b3      	cmp	r3, r6
 80052d6:	d1f6      	bne.n	80052c6 <lv_group_remove_obj+0x2a>
            _lv_ll_remove(&g->obj_ll, i);
 80052d8:	f00f fcf8 	bl	8014ccc <_lv_ll_remove>
            lv_mem_free(i);
 80052dc:	0020      	movs	r0, r4
 80052de:	f00f fdf1 	bl	8014ec4 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 80052e2:	68b3      	ldr	r3, [r6, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <lv_group_remove_obj+0x50>
 80052e8:	2200      	movs	r2, #0
 80052ea:	609a      	str	r2, [r3, #8]
}
 80052ec:	bcc0      	pop	{r6, r7}
 80052ee:	46b9      	mov	r9, r7
 80052f0:	46b0      	mov	r8, r6
 80052f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(g->frozen) g->frozen = 0;
 80052f4:	2201      	movs	r2, #1
 80052f6:	7e03      	ldrb	r3, [r0, #24]
 80052f8:	421a      	tst	r2, r3
 80052fa:	d001      	beq.n	8005300 <lv_group_remove_obj+0x64>
 80052fc:	4393      	bics	r3, r2
 80052fe:	7603      	strb	r3, [r0, #24]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8005300:	0028      	movs	r0, r5
 8005302:	f00f fd0d 	bl	8014d20 <_lv_ll_get_head>
 8005306:	68ea      	ldr	r2, [r5, #12]
 8005308:	4282      	cmp	r2, r0
 800530a:	d037      	beq.n	800537c <lv_group_remove_obj+0xe0>
    g->wrap           = 1;
 800530c:	2108      	movs	r1, #8
    uint8_t temp_wrap = g->wrap;
 800530e:	7e2b      	ldrb	r3, [r5, #24]
 8005310:	071c      	lsls	r4, r3, #28
    g->wrap           = 1;
 8005312:	430b      	orrs	r3, r1
    uint8_t temp_wrap = g->wrap;
 8005314:	0fe4      	lsrs	r4, r4, #31
    g->wrap           = 1;
 8005316:	762b      	strb	r3, [r5, #24]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8005318:	b2d9      	uxtb	r1, r3
 800531a:	075b      	lsls	r3, r3, #29
 800531c:	d410      	bmi.n	8005340 <lv_group_remove_obj+0xa4>
    if(group->frozen) return focus_changed;
 800531e:	07cb      	lsls	r3, r1, #31
 8005320:	d454      	bmi.n	80053cc <lv_group_remove_obj+0x130>
 8005322:	0028      	movs	r0, r5
 8005324:	4a36      	ldr	r2, [pc, #216]	; (8005400 <lv_group_remove_obj+0x164>)
 8005326:	4937      	ldr	r1, [pc, #220]	; (8005404 <lv_group_remove_obj+0x168>)
 8005328:	f7ff fd38 	bl	8004d9c <focus_next_core.part.0>
    if(group->edge_cb) {
 800532c:	696b      	ldr	r3, [r5, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d015      	beq.n	800535e <lv_group_remove_obj+0xc2>
        if(!focus_changed)
 8005332:	2800      	cmp	r0, #0
 8005334:	d113      	bne.n	800535e <lv_group_remove_obj+0xc2>
            group->edge_cb(group, true);
 8005336:	2101      	movs	r1, #1
 8005338:	0028      	movs	r0, r5
 800533a:	4798      	blx	r3
    if(g->obj_focus && *g->obj_focus == obj) {
 800533c:	68ea      	ldr	r2, [r5, #12]
 800533e:	e00f      	b.n	8005360 <lv_group_remove_obj+0xc4>
    if(group->frozen) return focus_changed;
 8005340:	07cb      	lsls	r3, r1, #31
 8005342:	d43f      	bmi.n	80053c4 <lv_group_remove_obj+0x128>
 8005344:	0028      	movs	r0, r5
 8005346:	4a30      	ldr	r2, [pc, #192]	; (8005408 <lv_group_remove_obj+0x16c>)
 8005348:	4930      	ldr	r1, [pc, #192]	; (800540c <lv_group_remove_obj+0x170>)
 800534a:	f7ff fd27 	bl	8004d9c <focus_next_core.part.0>
    if(group->edge_cb) {
 800534e:	696b      	ldr	r3, [r5, #20]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <lv_group_remove_obj+0xc2>
        if(!focus_changed)
 8005354:	2800      	cmp	r0, #0
 8005356:	d102      	bne.n	800535e <lv_group_remove_obj+0xc2>
            group->edge_cb(group, false);
 8005358:	2100      	movs	r1, #0
 800535a:	0028      	movs	r0, r5
 800535c:	4798      	blx	r3
    if(g->obj_focus && *g->obj_focus == obj) {
 800535e:	68ea      	ldr	r2, [r5, #12]
    g->wrap = temp_wrap;
 8005360:	2108      	movs	r1, #8
 8005362:	7e2b      	ldrb	r3, [r5, #24]
 8005364:	00e4      	lsls	r4, r4, #3
 8005366:	438b      	bics	r3, r1
 8005368:	4323      	orrs	r3, r4
 800536a:	762b      	strb	r3, [r5, #24]
    if(g->obj_focus && *g->obj_focus == obj) {
 800536c:	2a00      	cmp	r2, #0
 800536e:	d0a4      	beq.n	80052ba <lv_group_remove_obj+0x1e>
 8005370:	6813      	ldr	r3, [r2, #0]
 8005372:	429e      	cmp	r6, r3
 8005374:	d1a1      	bne.n	80052ba <lv_group_remove_obj+0x1e>
        g->obj_focus = NULL;
 8005376:	2300      	movs	r3, #0
 8005378:	60eb      	str	r3, [r5, #12]
 800537a:	e79e      	b.n	80052ba <lv_group_remove_obj+0x1e>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 800537c:	0028      	movs	r0, r5
 800537e:	f00f fcd5 	bl	8014d2c <_lv_ll_get_tail>
 8005382:	68ea      	ldr	r2, [r5, #12]
 8005384:	4290      	cmp	r0, r2
 8005386:	d1c1      	bne.n	800530c <lv_group_remove_obj+0x70>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8005388:	6803      	ldr	r3, [r0, #0]
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800538a:	2000      	movs	r0, #0
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 800538c:	4699      	mov	r9, r3
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800538e:	f00e fbe3 	bl	8013b58 <lv_indev_get_next>
    lv_indev_t * indev_group = NULL;
 8005392:	2300      	movs	r3, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8005394:	0004      	movs	r4, r0
    lv_indev_t * indev_group = NULL;
 8005396:	4698      	mov	r8, r3
    lv_indev_t * indev_encoder = NULL;
 8005398:	2700      	movs	r7, #0
    while(indev) {
 800539a:	2800      	cmp	r0, #0
 800539c:	d105      	bne.n	80053aa <lv_group_remove_obj+0x10e>
 800539e:	e029      	b.n	80053f4 <lv_group_remove_obj+0x158>
        indev = lv_indev_get_next(indev);
 80053a0:	0020      	movs	r0, r4
 80053a2:	f00e fbd9 	bl	8013b58 <lv_indev_get_next>
 80053a6:	1e04      	subs	r4, r0, #0
    while(indev) {
 80053a8:	d014      	beq.n	80053d4 <lv_group_remove_obj+0x138>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 80053aa:	0020      	movs	r0, r4
 80053ac:	f000 f964 	bl	8005678 <lv_indev_get_type>
        if(indev->group == g) {
 80053b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80053b2:	429d      	cmp	r5, r3
 80053b4:	d1f4      	bne.n	80053a0 <lv_group_remove_obj+0x104>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 80053b6:	2802      	cmp	r0, #2
 80053b8:	d015      	beq.n	80053e6 <lv_group_remove_obj+0x14a>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 80053ba:	46a0      	mov	r8, r4
 80053bc:	2804      	cmp	r0, #4
 80053be:	d1ef      	bne.n	80053a0 <lv_group_remove_obj+0x104>
 80053c0:	0027      	movs	r7, r4
 80053c2:	e7ed      	b.n	80053a0 <lv_group_remove_obj+0x104>
    if(group->edge_cb) {
 80053c4:	696b      	ldr	r3, [r5, #20]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1c6      	bne.n	8005358 <lv_group_remove_obj+0xbc>
 80053ca:	e7c9      	b.n	8005360 <lv_group_remove_obj+0xc4>
    if(group->edge_cb) {
 80053cc:	696b      	ldr	r3, [r5, #20]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1b1      	bne.n	8005336 <lv_group_remove_obj+0x9a>
 80053d2:	e7c5      	b.n	8005360 <lv_group_remove_obj+0xc4>
    if(indev_encoder) return indev_encoder;
 80053d4:	2f00      	cmp	r7, #0
 80053d6:	d008      	beq.n	80053ea <lv_group_remove_obj+0x14e>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 80053d8:	003a      	movs	r2, r7
 80053da:	210f      	movs	r1, #15
 80053dc:	4648      	mov	r0, r9
 80053de:	f7ff fc27 	bl	8004c30 <lv_event_send>
    if(g->obj_focus && *g->obj_focus == obj) {
 80053e2:	68ea      	ldr	r2, [r5, #12]
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 80053e4:	e7c2      	b.n	800536c <lv_group_remove_obj+0xd0>
 80053e6:	0027      	movs	r7, r4
 80053e8:	e7f6      	b.n	80053d8 <lv_group_remove_obj+0x13c>
    if(indev_group) return indev_group;
 80053ea:	4643      	mov	r3, r8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <lv_group_remove_obj+0x158>
 80053f0:	4647      	mov	r7, r8
 80053f2:	e7f1      	b.n	80053d8 <lv_group_remove_obj+0x13c>
    return lv_indev_get_next(NULL);
 80053f4:	2000      	movs	r0, #0
 80053f6:	f00e fbaf 	bl	8013b58 <lv_indev_get_next>
 80053fa:	0007      	movs	r7, r0
 80053fc:	e7ec      	b.n	80053d8 <lv_group_remove_obj+0x13c>
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	08014d39 	.word	0x08014d39
 8005404:	08014d21 	.word	0x08014d21
 8005408:	08014d41 	.word	0x08014d41
 800540c:	08014d2d 	.word	0x08014d2d

08005410 <lv_group_focus_obj>:
{
 8005410:	b510      	push	{r4, lr}
    if(obj == NULL) return;
 8005412:	2800      	cmp	r0, #0
 8005414:	d001      	beq.n	800541a <lv_group_focus_obj+0xa>
 8005416:	f7ff fdfb 	bl	8005010 <lv_group_focus_obj.part.0>
}
 800541a:	bd10      	pop	{r4, pc}

0800541c <lv_group_focus_next>:
    if(group->frozen) return focus_changed;
 800541c:	7e03      	ldrb	r3, [r0, #24]
{
 800541e:	b510      	push	{r4, lr}
 8005420:	0004      	movs	r4, r0
    if(group->frozen) return focus_changed;
 8005422:	07db      	lsls	r3, r3, #31
 8005424:	d409      	bmi.n	800543a <lv_group_focus_next+0x1e>
 8005426:	4a08      	ldr	r2, [pc, #32]	; (8005448 <lv_group_focus_next+0x2c>)
 8005428:	4908      	ldr	r1, [pc, #32]	; (800544c <lv_group_focus_next+0x30>)
 800542a:	f7ff fcb7 	bl	8004d9c <focus_next_core.part.0>
    if(group->edge_cb) {
 800542e:	6963      	ldr	r3, [r4, #20]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <lv_group_focus_next+0x1c>
        if(!focus_changed)
 8005434:	2800      	cmp	r0, #0
 8005436:	d003      	beq.n	8005440 <lv_group_focus_next+0x24>
}
 8005438:	bd10      	pop	{r4, pc}
    if(group->edge_cb) {
 800543a:	6943      	ldr	r3, [r0, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0fb      	beq.n	8005438 <lv_group_focus_next+0x1c>
            group->edge_cb(group, true);
 8005440:	2101      	movs	r1, #1
 8005442:	0020      	movs	r0, r4
 8005444:	4798      	blx	r3
}
 8005446:	e7f7      	b.n	8005438 <lv_group_focus_next+0x1c>
 8005448:	08014d39 	.word	0x08014d39
 800544c:	08014d21 	.word	0x08014d21

08005450 <lv_group_focus_prev>:
    if(group->frozen) return focus_changed;
 8005450:	7e03      	ldrb	r3, [r0, #24]
{
 8005452:	b510      	push	{r4, lr}
 8005454:	0004      	movs	r4, r0
    if(group->frozen) return focus_changed;
 8005456:	07db      	lsls	r3, r3, #31
 8005458:	d409      	bmi.n	800546e <lv_group_focus_prev+0x1e>
 800545a:	4a08      	ldr	r2, [pc, #32]	; (800547c <lv_group_focus_prev+0x2c>)
 800545c:	4908      	ldr	r1, [pc, #32]	; (8005480 <lv_group_focus_prev+0x30>)
 800545e:	f7ff fc9d 	bl	8004d9c <focus_next_core.part.0>
    if(group->edge_cb) {
 8005462:	6963      	ldr	r3, [r4, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <lv_group_focus_prev+0x1c>
        if(!focus_changed)
 8005468:	2800      	cmp	r0, #0
 800546a:	d003      	beq.n	8005474 <lv_group_focus_prev+0x24>
}
 800546c:	bd10      	pop	{r4, pc}
    if(group->edge_cb) {
 800546e:	6943      	ldr	r3, [r0, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0fb      	beq.n	800546c <lv_group_focus_prev+0x1c>
            group->edge_cb(group, false);
 8005474:	2100      	movs	r1, #0
 8005476:	0020      	movs	r0, r4
 8005478:	4798      	blx	r3
}
 800547a:	e7f7      	b.n	800546c <lv_group_focus_prev+0x1c>
 800547c:	08014d41 	.word	0x08014d41
 8005480:	08014d2d 	.word	0x08014d2d

08005484 <lv_group_send_data>:
{
 8005484:	b510      	push	{r4, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	9101      	str	r1, [sp, #4]
    if(!group) return NULL;
 800548a:	2800      	cmp	r0, #0
 800548c:	d00b      	beq.n	80054a6 <lv_group_send_data+0x22>
    if(group->obj_focus == NULL) return NULL;
 800548e:	68c3      	ldr	r3, [r0, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d008      	beq.n	80054a6 <lv_group_send_data+0x22>
    return *group->obj_focus;
 8005494:	681c      	ldr	r4, [r3, #0]
    if(act == NULL) return LV_RES_OK;
 8005496:	2c00      	cmp	r4, #0
 8005498:	d005      	beq.n	80054a6 <lv_group_send_data+0x22>
    if(lv_obj_has_state(act, LV_STATE_DISABLED)) return LV_RES_OK;
 800549a:	2180      	movs	r1, #128	; 0x80
 800549c:	0020      	movs	r0, r4
 800549e:	f002 fd49 	bl	8007f34 <lv_obj_has_state>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d002      	beq.n	80054ac <lv_group_send_data+0x28>
    if(act == NULL) return LV_RES_OK;
 80054a6:	2001      	movs	r0, #1
}
 80054a8:	b002      	add	sp, #8
 80054aa:	bd10      	pop	{r4, pc}
    return lv_event_send(act, LV_EVENT_KEY, &c);
 80054ac:	210d      	movs	r1, #13
 80054ae:	0020      	movs	r0, r4
 80054b0:	aa01      	add	r2, sp, #4
 80054b2:	f7ff fbbd 	bl	8004c30 <lv_event_send>
 80054b6:	e7f7      	b.n	80054a8 <lv_group_send_data+0x24>

080054b8 <lv_group_set_editing>:
{
 80054b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ba:	46c6      	mov	lr, r8
 80054bc:	0005      	movs	r5, r0
 80054be:	b500      	push	{lr}
    if(group == NULL) return;
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d03b      	beq.n	800553c <lv_group_set_editing+0x84>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 80054c4:	7e03      	ldrb	r3, [r0, #24]
 80054c6:	079a      	lsls	r2, r3, #30
 80054c8:	0fd2      	lsrs	r2, r2, #31
 80054ca:	428a      	cmp	r2, r1
 80054cc:	d036      	beq.n	800553c <lv_group_set_editing+0x84>
    group->editing     = en_val;
 80054ce:	2201      	movs	r2, #1
 80054d0:	4011      	ands	r1, r2
 80054d2:	3201      	adds	r2, #1
 80054d4:	0049      	lsls	r1, r1, #1
 80054d6:	4393      	bics	r3, r2
 80054d8:	430b      	orrs	r3, r1
 80054da:	7603      	strb	r3, [r0, #24]
    if(group->obj_focus == NULL) return NULL;
 80054dc:	68c3      	ldr	r3, [r0, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d02c      	beq.n	800553c <lv_group_set_editing+0x84>
    return *group->obj_focus;
 80054e2:	681f      	ldr	r7, [r3, #0]
    if(focused) {
 80054e4:	2f00      	cmp	r7, #0
 80054e6:	d029      	beq.n	800553c <lv_group_set_editing+0x84>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80054e8:	2000      	movs	r0, #0
 80054ea:	f00e fb35 	bl	8013b58 <lv_indev_get_next>
    lv_indev_t * indev_encoder = NULL;
 80054ee:	2300      	movs	r3, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80054f0:	0004      	movs	r4, r0
    lv_indev_t * indev_group = NULL;
 80054f2:	2600      	movs	r6, #0
    lv_indev_t * indev_encoder = NULL;
 80054f4:	4698      	mov	r8, r3
    while(indev) {
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d105      	bne.n	8005506 <lv_group_set_editing+0x4e>
 80054fa:	e02c      	b.n	8005556 <lv_group_set_editing+0x9e>
        indev = lv_indev_get_next(indev);
 80054fc:	0020      	movs	r0, r4
 80054fe:	f00e fb2b 	bl	8013b58 <lv_indev_get_next>
 8005502:	1e04      	subs	r4, r0, #0
    while(indev) {
 8005504:	d010      	beq.n	8005528 <lv_group_set_editing+0x70>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8005506:	0020      	movs	r0, r4
 8005508:	f000 f8b6 	bl	8005678 <lv_indev_get_type>
        if(indev->group == g) {
 800550c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800550e:	429d      	cmp	r5, r3
 8005510:	d1f4      	bne.n	80054fc <lv_group_set_editing+0x44>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8005512:	2802      	cmp	r0, #2
 8005514:	d01d      	beq.n	8005552 <lv_group_set_editing+0x9a>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8005516:	0026      	movs	r6, r4
 8005518:	2804      	cmp	r0, #4
 800551a:	d1ef      	bne.n	80054fc <lv_group_set_editing+0x44>
        indev = lv_indev_get_next(indev);
 800551c:	0020      	movs	r0, r4
 800551e:	f00e fb1b 	bl	8013b58 <lv_indev_get_next>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8005522:	46a0      	mov	r8, r4
        indev = lv_indev_get_next(indev);
 8005524:	1e04      	subs	r4, r0, #0
    while(indev) {
 8005526:	d1ee      	bne.n	8005506 <lv_group_set_editing+0x4e>
    if(indev_encoder) return indev_encoder;
 8005528:	4643      	mov	r3, r8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00d      	beq.n	800554a <lv_group_set_editing+0x92>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 800552e:	4642      	mov	r2, r8
 8005530:	210e      	movs	r1, #14
 8005532:	0038      	movs	r0, r7
 8005534:	f7ff fb7c 	bl	8004c30 <lv_event_send>
        if(res != LV_RES_OK) return;
 8005538:	2801      	cmp	r0, #1
 800553a:	d002      	beq.n	8005542 <lv_group_set_editing+0x8a>
}
 800553c:	bc80      	pop	{r7}
 800553e:	46b8      	mov	r8, r7
 8005540:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_invalidate(focused);
 8005542:	0038      	movs	r0, r7
 8005544:	f003 ff66 	bl	8009414 <lv_obj_invalidate>
 8005548:	e7f8      	b.n	800553c <lv_group_set_editing+0x84>
    if(indev_group) return indev_group;
 800554a:	2e00      	cmp	r6, #0
 800554c:	d003      	beq.n	8005556 <lv_group_set_editing+0x9e>
 800554e:	46b0      	mov	r8, r6
 8005550:	e7ed      	b.n	800552e <lv_group_set_editing+0x76>
 8005552:	46a0      	mov	r8, r4
 8005554:	e7eb      	b.n	800552e <lv_group_set_editing+0x76>
    return lv_indev_get_next(NULL);
 8005556:	2000      	movs	r0, #0
 8005558:	f00e fafe 	bl	8013b58 <lv_indev_get_next>
 800555c:	4680      	mov	r8, r0
 800555e:	e7e6      	b.n	800552e <lv_group_set_editing+0x76>

08005560 <lv_group_get_focused>:
    if(!group) return NULL;
 8005560:	2800      	cmp	r0, #0
 8005562:	d004      	beq.n	800556e <lv_group_get_focused+0xe>
    if(group->obj_focus == NULL) return NULL;
 8005564:	68c0      	ldr	r0, [r0, #12]
 8005566:	2800      	cmp	r0, #0
 8005568:	d000      	beq.n	800556c <lv_group_get_focused+0xc>
    return *group->obj_focus;
 800556a:	6800      	ldr	r0, [r0, #0]
}
 800556c:	4770      	bx	lr
    if(!group) return NULL;
 800556e:	2000      	movs	r0, #0
 8005570:	e7fc      	b.n	800556c <lv_group_get_focused+0xc>
 8005572:	46c0      	nop			; (mov r8, r8)

08005574 <lv_group_get_editing>:
    if(!group) return false;
 8005574:	2800      	cmp	r0, #0
 8005576:	d003      	beq.n	8005580 <lv_group_get_editing+0xc>
    return group->editing ? true : false;
 8005578:	7e00      	ldrb	r0, [r0, #24]
 800557a:	0780      	lsls	r0, r0, #30
 800557c:	0fc0      	lsrs	r0, r0, #31
}
 800557e:	4770      	bx	lr
    if(!group) return false;
 8005580:	2000      	movs	r0, #0
 8005582:	e7fc      	b.n	800557e <lv_group_get_editing+0xa>

08005584 <lv_group_get_obj_count>:
{
 8005584:	b510      	push	{r4, lr}
    return _lv_ll_get_len(&group->obj_ll);
 8005586:	f00f fbdf 	bl	8014d48 <_lv_ll_get_len>
}
 800558a:	bd10      	pop	{r4, pc}

0800558c <indev_proc_release>:
 * Process the released state of LV_INDEV_TYPE_POINTER input devices
 * @param proc pointer to an input device 'proc'
 */
static void indev_proc_release(_lv_indev_proc_t * proc)
{
    if(proc->wait_until_release != 0) {
 800558c:	2208      	movs	r2, #8
{
 800558e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005590:	46c6      	mov	lr, r8
    if(proc->wait_until_release != 0) {
 8005592:	0017      	movs	r7, r2
 8005594:	7843      	ldrb	r3, [r0, #1]
{
 8005596:	0004      	movs	r4, r0
 8005598:	b500      	push	{lr}
    if(proc->wait_until_release != 0) {
 800559a:	401f      	ands	r7, r3
 800559c:	421a      	tst	r2, r3
 800559e:	d125      	bne.n	80055ec <indev_proc_release+0x60>
        proc->types.pointer.last_obj = NULL;
        proc->pr_timestamp           = 0;
        proc->longpr_rep_timestamp   = 0;
        proc->wait_until_release     = 0;
    }
    indev_obj_act = proc->types.pointer.act_obj;
 80055a0:	6a00      	ldr	r0, [r0, #32]
 80055a2:	4d30      	ldr	r5, [pc, #192]	; (8005664 <indev_proc_release+0xd8>)
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 80055a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    indev_obj_act = proc->types.pointer.act_obj;
 80055a6:	6028      	str	r0, [r5, #0]

    /*Forget the act obj and send a released Call the ancestor's event handler*/
    if(indev_obj_act) {
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d012      	beq.n	80055d2 <indev_proc_release+0x46>
        LV_LOG_INFO("released");

        /*Send RELEASE Call the ancestor's event handler and event*/
        lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 80055ac:	4b2e      	ldr	r3, [pc, #184]	; (8005668 <indev_proc_release+0xdc>)
 80055ae:	2108      	movs	r1, #8
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4698      	mov	r8, r3
 80055b4:	f7ff fb3c 	bl	8004c30 <lv_event_send>
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(_lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
 80055b8:	7863      	ldrb	r3, [r4, #1]
 80055ba:	079a      	lsls	r2, r3, #30
 80055bc:	d500      	bpl.n	80055c0 <indev_proc_release+0x34>
        indev_obj_act = NULL;
 80055be:	602f      	str	r7, [r5, #0]
    }

    return proc->reset_query ? true : false;
 80055c0:	2201      	movs	r2, #1
        if(indev_reset_check(proc)) return;
 80055c2:	0799      	lsls	r1, r3, #30
 80055c4:	d40f      	bmi.n	80055e6 <indev_proc_release+0x5a>
        if(scroll_obj == NULL) {
 80055c6:	2e00      	cmp	r6, #0
 80055c8:	d02f      	beq.n	800562a <indev_proc_release+0x9e>
        proc->types.pointer.act_obj = NULL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	6223      	str	r3, [r4, #32]
        proc->pr_timestamp          = 0;
 80055ce:	6423      	str	r3, [r4, #64]	; 0x40
        proc->longpr_rep_timestamp  = 0;
 80055d0:	6463      	str	r3, [r4, #68]	; 0x44
    if(scroll_obj) {
 80055d2:	2e00      	cmp	r6, #0
 80055d4:	d007      	beq.n	80055e6 <indev_proc_release+0x5a>
        _lv_indev_scroll_throw_handler(proc);
 80055d6:	0020      	movs	r0, r4
 80055d8:	f001 fd10 	bl	8006ffc <_lv_indev_scroll_throw_handler>
    if(proc->reset_query) {
 80055dc:	7863      	ldrb	r3, [r4, #1]
 80055de:	079b      	lsls	r3, r3, #30
 80055e0:	d501      	bpl.n	80055e6 <indev_proc_release+0x5a>
        indev_obj_act = NULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	602b      	str	r3, [r5, #0]
}
 80055e6:	bc80      	pop	{r7}
 80055e8:	46b8      	mov	r8, r7
 80055ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_event_send(proc->types.pointer.act_obj, LV_EVENT_PRESS_LOST, indev_act);
 80055ec:	4b1e      	ldr	r3, [pc, #120]	; (8005668 <indev_proc_release+0xdc>)
 80055ee:	2103      	movs	r1, #3
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	6a00      	ldr	r0, [r0, #32]
 80055f4:	f7ff fb1c 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 80055f8:	7863      	ldrb	r3, [r4, #1]
 80055fa:	079a      	lsls	r2, r3, #30
 80055fc:	d411      	bmi.n	8005622 <indev_proc_release+0x96>
    return proc->reset_query ? true : false;
 80055fe:	079b      	lsls	r3, r3, #30
        if(indev_reset_check(proc)) return;
 8005600:	0fda      	lsrs	r2, r3, #31
 8005602:	2b00      	cmp	r3, #0
 8005604:	dbef      	blt.n	80055e6 <indev_proc_release+0x5a>
        proc->wait_until_release     = 0;
 8005606:	2108      	movs	r1, #8
 8005608:	7863      	ldrb	r3, [r4, #1]
    indev_obj_act = proc->types.pointer.act_obj;
 800560a:	4d16      	ldr	r5, [pc, #88]	; (8005664 <indev_proc_release+0xd8>)
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 800560c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        proc->wait_until_release     = 0;
 800560e:	438b      	bics	r3, r1
        proc->types.pointer.act_obj  = NULL;
 8005610:	6222      	str	r2, [r4, #32]
        proc->types.pointer.last_obj = NULL;
 8005612:	6262      	str	r2, [r4, #36]	; 0x24
        proc->pr_timestamp           = 0;
 8005614:	6422      	str	r2, [r4, #64]	; 0x40
        proc->longpr_rep_timestamp   = 0;
 8005616:	6462      	str	r2, [r4, #68]	; 0x44
        proc->wait_until_release     = 0;
 8005618:	7063      	strb	r3, [r4, #1]
    indev_obj_act = proc->types.pointer.act_obj;
 800561a:	602a      	str	r2, [r5, #0]
    if(scroll_obj) {
 800561c:	2e00      	cmp	r6, #0
 800561e:	d1da      	bne.n	80055d6 <indev_proc_release+0x4a>
 8005620:	e7e1      	b.n	80055e6 <indev_proc_release+0x5a>
        indev_obj_act = NULL;
 8005622:	2100      	movs	r1, #0
 8005624:	4a0f      	ldr	r2, [pc, #60]	; (8005664 <indev_proc_release+0xd8>)
 8005626:	6011      	str	r1, [r2, #0]
 8005628:	e7e9      	b.n	80055fe <indev_proc_release+0x72>
            if(proc->long_pr_sent == 0) {
 800562a:	421a      	tst	r2, r3
 800562c:	d10b      	bne.n	8005646 <indev_proc_release+0xba>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 800562e:	4643      	mov	r3, r8
 8005630:	2104      	movs	r1, #4
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	6828      	ldr	r0, [r5, #0]
 8005636:	f7ff fafb 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 800563a:	7863      	ldrb	r3, [r4, #1]
 800563c:	079a      	lsls	r2, r3, #30
 800563e:	d502      	bpl.n	8005646 <indev_proc_release+0xba>
        indev_obj_act = NULL;
 8005640:	602e      	str	r6, [r5, #0]
                if(indev_reset_check(proc)) return;
 8005642:	079b      	lsls	r3, r3, #30
 8005644:	d4cf      	bmi.n	80055e6 <indev_proc_release+0x5a>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8005646:	4643      	mov	r3, r8
 8005648:	2107      	movs	r1, #7
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	6828      	ldr	r0, [r5, #0]
 800564e:	f7ff faef 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8005652:	7863      	ldrb	r3, [r4, #1]
 8005654:	079a      	lsls	r2, r3, #30
 8005656:	d5b8      	bpl.n	80055ca <indev_proc_release+0x3e>
        indev_obj_act = NULL;
 8005658:	2200      	movs	r2, #0
 800565a:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 800565c:	079b      	lsls	r3, r3, #30
 800565e:	d4c2      	bmi.n	80055e6 <indev_proc_release+0x5a>
 8005660:	e7b3      	b.n	80055ca <indev_proc_release+0x3e>
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	20000454 	.word	0x20000454
 8005668:	20000450 	.word	0x20000450

0800566c <lv_indev_get_act>:
    return indev_act;
 800566c:	4b01      	ldr	r3, [pc, #4]	; (8005674 <lv_indev_get_act+0x8>)
 800566e:	6818      	ldr	r0, [r3, #0]
}
 8005670:	4770      	bx	lr
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	20000450 	.word	0x20000450

08005678 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8005678:	2800      	cmp	r0, #0
 800567a:	d002      	beq.n	8005682 <lv_indev_get_type+0xa>
    return indev->driver->type;
 800567c:	6803      	ldr	r3, [r0, #0]
 800567e:	7818      	ldrb	r0, [r3, #0]
}
 8005680:	4770      	bx	lr
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8005682:	2000      	movs	r0, #0
 8005684:	e7fc      	b.n	8005680 <lv_indev_get_type+0x8>
 8005686:	46c0      	nop			; (mov r8, r8)

08005688 <lv_indev_reset>:
{
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	000c      	movs	r4, r1
    if(indev) {
 800568c:	2800      	cmp	r0, #0
 800568e:	d025      	beq.n	80056dc <lv_indev_reset+0x54>
        indev->proc.reset_query = 1;
 8005690:	2202      	movs	r2, #2
 8005692:	7943      	ldrb	r3, [r0, #5]
 8005694:	4313      	orrs	r3, r2
 8005696:	7143      	strb	r3, [r0, #5]
        if(indev_act == indev) indev_obj_act = NULL;
 8005698:	4b32      	ldr	r3, [pc, #200]	; (8005764 <lv_indev_reset+0xdc>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4283      	cmp	r3, r0
 800569e:	d013      	beq.n	80056c8 <lv_indev_reset+0x40>
        if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 80056a0:	6803      	ldr	r3, [r0, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d900      	bls.n	80056ac <lv_indev_reset+0x24>
}
 80056aa:	bd70      	pop	{r4, r5, r6, pc}
            if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 80056ac:	2c00      	cmp	r4, #0
 80056ae:	d03d      	beq.n	800572c <lv_indev_reset+0xa4>
 80056b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80056b2:	42a3      	cmp	r3, r4
 80056b4:	d00f      	beq.n	80056d6 <lv_indev_reset+0x4e>
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 80056b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80056b8:	42a3      	cmp	r3, r4
 80056ba:	d009      	beq.n	80056d0 <lv_indev_reset+0x48>
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 80056bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80056be:	42a3      	cmp	r3, r4
 80056c0:	d1f3      	bne.n	80056aa <lv_indev_reset+0x22>
                indev->proc.types.pointer.last_obj = NULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	6283      	str	r3, [r0, #40]	; 0x28
 80056c6:	e7f0      	b.n	80056aa <lv_indev_reset+0x22>
        if(indev_act == indev) indev_obj_act = NULL;
 80056c8:	2200      	movs	r2, #0
 80056ca:	4b27      	ldr	r3, [pc, #156]	; (8005768 <lv_indev_reset+0xe0>)
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	e7e7      	b.n	80056a0 <lv_indev_reset+0x18>
                indev->proc.types.pointer.act_obj = NULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	6243      	str	r3, [r0, #36]	; 0x24
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 80056d4:	e7f2      	b.n	80056bc <lv_indev_reset+0x34>
                indev->proc.types.pointer.last_pressed = NULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	6303      	str	r3, [r0, #48]	; 0x30
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 80056da:	e7ec      	b.n	80056b6 <lv_indev_reset+0x2e>
        lv_indev_t * i = lv_indev_get_next(NULL);
 80056dc:	2000      	movs	r0, #0
 80056de:	f00e fa3b 	bl	8013b58 <lv_indev_get_next>
        while(i) {
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d01e      	beq.n	8005724 <lv_indev_reset+0x9c>
 80056e6:	2c00      	cmp	r4, #0
 80056e8:	d029      	beq.n	800573e <lv_indev_reset+0xb6>
            i->proc.reset_query = 1;
 80056ea:	2502      	movs	r5, #2
                    i->proc.types.pointer.act_obj = NULL;
 80056ec:	2600      	movs	r6, #0
 80056ee:	e003      	b.n	80056f8 <lv_indev_reset+0x70>
            i = lv_indev_get_next(i);
 80056f0:	f00e fa32 	bl	8013b58 <lv_indev_get_next>
        while(i) {
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d015      	beq.n	8005724 <lv_indev_reset+0x9c>
            i->proc.reset_query = 1;
 80056f8:	7943      	ldrb	r3, [r0, #5]
 80056fa:	432b      	orrs	r3, r5
 80056fc:	7143      	strb	r3, [r0, #5]
            if(i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) {
 80056fe:	6803      	ldr	r3, [r0, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	3b01      	subs	r3, #1
 8005704:	2b01      	cmp	r3, #1
 8005706:	d8f3      	bhi.n	80056f0 <lv_indev_reset+0x68>
                if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 8005708:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800570a:	429c      	cmp	r4, r3
 800570c:	d015      	beq.n	800573a <lv_indev_reset+0xb2>
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 800570e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005710:	429c      	cmp	r4, r3
 8005712:	d010      	beq.n	8005736 <lv_indev_reset+0xae>
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 8005714:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005716:	429c      	cmp	r4, r3
 8005718:	d1ea      	bne.n	80056f0 <lv_indev_reset+0x68>
                    i->proc.types.pointer.last_obj = NULL;
 800571a:	6286      	str	r6, [r0, #40]	; 0x28
            i = lv_indev_get_next(i);
 800571c:	f00e fa1c 	bl	8013b58 <lv_indev_get_next>
        while(i) {
 8005720:	2800      	cmp	r0, #0
 8005722:	d1e9      	bne.n	80056f8 <lv_indev_reset+0x70>
        indev_obj_act = NULL;
 8005724:	2200      	movs	r2, #0
 8005726:	4b10      	ldr	r3, [pc, #64]	; (8005768 <lv_indev_reset+0xe0>)
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e7be      	b.n	80056aa <lv_indev_reset+0x22>
                indev->proc.types.pointer.last_obj = NULL;
 800572c:	2300      	movs	r3, #0
                indev->proc.types.pointer.last_pressed = NULL;
 800572e:	6304      	str	r4, [r0, #48]	; 0x30
                indev->proc.types.pointer.act_obj = NULL;
 8005730:	6244      	str	r4, [r0, #36]	; 0x24
                indev->proc.types.pointer.last_obj = NULL;
 8005732:	6283      	str	r3, [r0, #40]	; 0x28
 8005734:	e7b9      	b.n	80056aa <lv_indev_reset+0x22>
                    i->proc.types.pointer.act_obj = NULL;
 8005736:	6246      	str	r6, [r0, #36]	; 0x24
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 8005738:	e7ec      	b.n	8005714 <lv_indev_reset+0x8c>
                    i->proc.types.pointer.last_pressed = NULL;
 800573a:	6306      	str	r6, [r0, #48]	; 0x30
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 800573c:	e7e7      	b.n	800570e <lv_indev_reset+0x86>
            i->proc.reset_query = 1;
 800573e:	2402      	movs	r4, #2
                    i->proc.types.pointer.last_pressed = NULL;
 8005740:	2500      	movs	r5, #0
 8005742:	e003      	b.n	800574c <lv_indev_reset+0xc4>
            i = lv_indev_get_next(i);
 8005744:	f00e fa08 	bl	8013b58 <lv_indev_get_next>
        while(i) {
 8005748:	2800      	cmp	r0, #0
 800574a:	d0eb      	beq.n	8005724 <lv_indev_reset+0x9c>
            i->proc.reset_query = 1;
 800574c:	7943      	ldrb	r3, [r0, #5]
 800574e:	4323      	orrs	r3, r4
 8005750:	7143      	strb	r3, [r0, #5]
            if(i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8005752:	6803      	ldr	r3, [r0, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	3b01      	subs	r3, #1
 8005758:	2b01      	cmp	r3, #1
 800575a:	d8f3      	bhi.n	8005744 <lv_indev_reset+0xbc>
                    i->proc.types.pointer.last_pressed = NULL;
 800575c:	6305      	str	r5, [r0, #48]	; 0x30
                    i->proc.types.pointer.act_obj = NULL;
 800575e:	6245      	str	r5, [r0, #36]	; 0x24
                    i->proc.types.pointer.last_obj = NULL;
 8005760:	6285      	str	r5, [r0, #40]	; 0x28
 8005762:	e7ef      	b.n	8005744 <lv_indev_reset+0xbc>
 8005764:	20000450 	.word	0x20000450
 8005768:	20000454 	.word	0x20000454

0800576c <lv_indev_set_group>:
    if(indev->driver->type == LV_INDEV_TYPE_KEYPAD || indev->driver->type == LV_INDEV_TYPE_ENCODER) {
 800576c:	22fd      	movs	r2, #253	; 0xfd
 800576e:	6803      	ldr	r3, [r0, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	3b02      	subs	r3, #2
 8005774:	4213      	tst	r3, r2
 8005776:	d100      	bne.n	800577a <lv_indev_set_group+0xe>
        indev->group = group;
 8005778:	6501      	str	r1, [r0, #80]	; 0x50
}
 800577a:	4770      	bx	lr

0800577c <lv_indev_get_point>:
    if(indev == NULL) {
 800577c:	2800      	cmp	r0, #0
 800577e:	d011      	beq.n	80057a4 <lv_indev_get_point+0x28>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) {
 8005780:	2202      	movs	r2, #2
 8005782:	6803      	ldr	r3, [r0, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	4393      	bics	r3, r2
 8005788:	2b01      	cmp	r3, #1
 800578a:	d004      	beq.n	8005796 <lv_indev_get_point+0x1a>
        point->x = -1;
 800578c:	2301      	movs	r3, #1
 800578e:	425b      	negs	r3, r3
 8005790:	800b      	strh	r3, [r1, #0]
        point->y = -1;
 8005792:	804b      	strh	r3, [r1, #2]
}
 8005794:	4770      	bx	lr
        point->x = indev->proc.types.pointer.act_point.x;
 8005796:	2208      	movs	r2, #8
 8005798:	5e83      	ldrsh	r3, [r0, r2]
 800579a:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 800579c:	220a      	movs	r2, #10
 800579e:	5e83      	ldrsh	r3, [r0, r2]
 80057a0:	804b      	strh	r3, [r1, #2]
 80057a2:	e7f7      	b.n	8005794 <lv_indev_get_point+0x18>
        point->x = 0;
 80057a4:	8008      	strh	r0, [r1, #0]
        point->y = 0;
 80057a6:	8048      	strh	r0, [r1, #2]
        return;
 80057a8:	e7f4      	b.n	8005794 <lv_indev_get_point+0x18>
 80057aa:	46c0      	nop			; (mov r8, r8)

080057ac <lv_indev_get_scroll_dir>:
{
 80057ac:	1e03      	subs	r3, r0, #0
    if(indev == NULL) return false;
 80057ae:	d00b      	beq.n	80057c8 <lv_indev_get_scroll_dir+0x1c>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 80057b0:	2102      	movs	r1, #2
 80057b2:	6802      	ldr	r2, [r0, #0]
    if(indev == NULL) return false;
 80057b4:	2000      	movs	r0, #0
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 80057b6:	7812      	ldrb	r2, [r2, #0]
 80057b8:	438a      	bics	r2, r1
 80057ba:	2a01      	cmp	r2, #1
 80057bc:	d103      	bne.n	80057c6 <lv_indev_get_scroll_dir+0x1a>
    return indev->proc.types.pointer.scroll_dir;
 80057be:	323f      	adds	r2, #63	; 0x3f
 80057c0:	5c98      	ldrb	r0, [r3, r2]
 80057c2:	0700      	lsls	r0, r0, #28
 80057c4:	0f00      	lsrs	r0, r0, #28
}
 80057c6:	4770      	bx	lr
    if(indev == NULL) return false;
 80057c8:	2000      	movs	r0, #0
 80057ca:	e7fc      	b.n	80057c6 <lv_indev_get_scroll_dir+0x1a>

080057cc <lv_indev_get_scroll_obj>:
{
 80057cc:	1e03      	subs	r3, r0, #0
    if(indev == NULL) return NULL;
 80057ce:	d008      	beq.n	80057e2 <lv_indev_get_scroll_obj+0x16>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 80057d0:	2102      	movs	r1, #2
 80057d2:	6802      	ldr	r2, [r0, #0]
    if(indev == NULL) return NULL;
 80057d4:	2000      	movs	r0, #0
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 80057d6:	7812      	ldrb	r2, [r2, #0]
 80057d8:	438a      	bics	r2, r1
 80057da:	2a01      	cmp	r2, #1
 80057dc:	d100      	bne.n	80057e0 <lv_indev_get_scroll_obj+0x14>
    return indev->proc.types.pointer.scroll_obj;
 80057de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
}
 80057e0:	4770      	bx	lr
    if(indev == NULL) return NULL;
 80057e2:	2000      	movs	r0, #0
 80057e4:	e7fc      	b.n	80057e0 <lv_indev_get_scroll_obj+0x14>
 80057e6:	46c0      	nop			; (mov r8, r8)

080057e8 <lv_indev_get_vect>:
    point->x = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	800b      	strh	r3, [r1, #0]
    point->y = 0;
 80057ec:	804b      	strh	r3, [r1, #2]
    if(indev == NULL) return;
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d00b      	beq.n	800580a <lv_indev_get_vect+0x22>
    if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_BUTTON) {
 80057f2:	2202      	movs	r2, #2
 80057f4:	6803      	ldr	r3, [r0, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	4393      	bics	r3, r2
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d105      	bne.n	800580a <lv_indev_get_vect+0x22>
        point->x = indev->proc.types.pointer.vect.x;
 80057fe:	2214      	movs	r2, #20
 8005800:	5e83      	ldrsh	r3, [r0, r2]
 8005802:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 8005804:	2216      	movs	r2, #22
 8005806:	5e83      	ldrsh	r3, [r0, r2]
 8005808:	804b      	strh	r3, [r1, #2]
}
 800580a:	4770      	bx	lr

0800580c <lv_indev_get_obj_act>:
    return indev_obj_act;
 800580c:	4b01      	ldr	r3, [pc, #4]	; (8005814 <lv_indev_get_obj_act+0x8>)
 800580e:	6818      	ldr	r0, [r3, #0]
}
 8005810:	4770      	bx	lr
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	20000454 	.word	0x20000454

08005818 <lv_indev_search_obj>:
{
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	000c      	movs	r4, r1
 800581c:	b082      	sub	sp, #8
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800581e:	2101      	movs	r1, #1
{
 8005820:	0005      	movs	r5, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 8005822:	f002 fb77 	bl	8007f14 <lv_obj_has_flag>
 8005826:	2800      	cmp	r0, #0
 8005828:	d139      	bne.n	800589e <lv_indev_search_obj+0x86>
    lv_point_t p_trans = *point;
 800582a:	2204      	movs	r2, #4
 800582c:	0021      	movs	r1, r4
 800582e:	a801      	add	r0, sp, #4
 8005830:	f015 fe56 	bl	801b4e0 <memcpy>
    lv_obj_transform_point(obj, &p_trans, false, true);
 8005834:	2200      	movs	r2, #0
 8005836:	2301      	movs	r3, #1
 8005838:	0028      	movs	r0, r5
 800583a:	a901      	add	r1, sp, #4
 800583c:	f003 fb7c 	bl	8008f38 <lv_obj_transform_point>
    bool hit_test_ok = lv_obj_hit_test(obj, &p_trans);
 8005840:	a901      	add	r1, sp, #4
 8005842:	0028      	movs	r0, r5
 8005844:	f004 ffde 	bl	800a804 <lv_obj_hit_test>
 8005848:	0006      	movs	r6, r0
    if(_lv_area_is_point_on(&obj->coords, &p_trans, 0) || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800584a:	0028      	movs	r0, r5
 800584c:	2200      	movs	r2, #0
 800584e:	a901      	add	r1, sp, #4
 8005850:	3010      	adds	r0, #16
 8005852:	f00e fd6b 	bl	801432c <_lv_area_is_point_on>
 8005856:	2800      	cmp	r0, #0
 8005858:	d014      	beq.n	8005884 <lv_indev_search_obj+0x6c>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800585a:	0028      	movs	r0, r5
 800585c:	f008 faf4 	bl	800de48 <lv_obj_get_child_cnt>
        for(i = child_cnt - 1; i >= 0; i--) {
 8005860:	1e44      	subs	r4, r0, #1
 8005862:	d40a      	bmi.n	800587a <lv_indev_search_obj+0x62>
            lv_obj_t * child = obj->spec_attr->children[i];
 8005864:	68ab      	ldr	r3, [r5, #8]
 8005866:	00a2      	lsls	r2, r4, #2
 8005868:	681b      	ldr	r3, [r3, #0]
            found_p = lv_indev_search_obj(child, &p_trans);
 800586a:	a901      	add	r1, sp, #4
 800586c:	58d0      	ldr	r0, [r2, r3]
 800586e:	f7ff ffd3 	bl	8005818 <lv_indev_search_obj>
            if(found_p) return found_p;
 8005872:	2800      	cmp	r0, #0
 8005874:	d104      	bne.n	8005880 <lv_indev_search_obj+0x68>
        for(i = child_cnt - 1; i >= 0; i--) {
 8005876:	3c01      	subs	r4, #1
 8005878:	d2f4      	bcs.n	8005864 <lv_indev_search_obj+0x4c>
    if(hit_test_ok) return obj;
 800587a:	0028      	movs	r0, r5
 800587c:	2e00      	cmp	r6, #0
 800587e:	d00e      	beq.n	800589e <lv_indev_search_obj+0x86>
}
 8005880:	b002      	add	sp, #8
 8005882:	bd70      	pop	{r4, r5, r6, pc}
    if(_lv_area_is_point_on(&obj->coords, &p_trans, 0) || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8005884:	2180      	movs	r1, #128	; 0x80
 8005886:	0028      	movs	r0, r5
 8005888:	0309      	lsls	r1, r1, #12
 800588a:	f002 fb43 	bl	8007f14 <lv_obj_has_flag>
 800588e:	2800      	cmp	r0, #0
 8005890:	d0f3      	beq.n	800587a <lv_indev_search_obj+0x62>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005892:	0028      	movs	r0, r5
 8005894:	f008 fad8 	bl	800de48 <lv_obj_get_child_cnt>
        for(i = child_cnt - 1; i >= 0; i--) {
 8005898:	1e44      	subs	r4, r0, #1
 800589a:	d5e3      	bpl.n	8005864 <lv_indev_search_obj+0x4c>
 800589c:	e7ed      	b.n	800587a <lv_indev_search_obj+0x62>
    else return NULL;
 800589e:	2000      	movs	r0, #0
 80058a0:	e7ee      	b.n	8005880 <lv_indev_search_obj+0x68>
 80058a2:	46c0      	nop			; (mov r8, r8)

080058a4 <indev_proc_press>:
{
 80058a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058a6:	4645      	mov	r5, r8
 80058a8:	46de      	mov	lr, fp
 80058aa:	4657      	mov	r7, sl
 80058ac:	464e      	mov	r6, r9
 80058ae:	0004      	movs	r4, r0
 80058b0:	b5e0      	push	{r5, r6, r7, lr}
    indev_obj_act = proc->types.pointer.act_obj;
 80058b2:	6a00      	ldr	r0, [r0, #32]
 80058b4:	4da8      	ldr	r5, [pc, #672]	; (8005b58 <indev_proc_press+0x2b4>)
    if(proc->wait_until_release != 0) return;
 80058b6:	7863      	ldrb	r3, [r4, #1]
{
 80058b8:	b083      	sub	sp, #12
    indev_obj_act = proc->types.pointer.act_obj;
 80058ba:	6028      	str	r0, [r5, #0]
    if(proc->wait_until_release != 0) return;
 80058bc:	071b      	lsls	r3, r3, #28
 80058be:	d466      	bmi.n	800598e <indev_proc_press+0xea>
    lv_disp_t * disp = indev_act->driver->disp;
 80058c0:	4ea6      	ldr	r6, [pc, #664]	; (8005b5c <indev_proc_press+0x2b8>)
 80058c2:	6833      	ldr	r3, [r6, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4698      	mov	r8, r3
    if(indev_obj_act == NULL) {
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d100      	bne.n	80058d0 <indev_proc_press+0x2c>
 80058ce:	e0df      	b.n	8005a90 <indev_proc_press+0x1ec>
    else if(proc->types.pointer.scroll_obj == NULL &&
 80058d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d100      	bne.n	80058d8 <indev_proc_press+0x34>
 80058d6:	e0d2      	b.n	8005a7e <indev_proc_press+0x1da>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 80058d8:	1d27      	adds	r7, r4, #4
    lv_obj_transform_point(indev_obj_act, &proc->types.pointer.act_point, true, true);
 80058da:	2301      	movs	r3, #1
 80058dc:	2201      	movs	r2, #1
 80058de:	0039      	movs	r1, r7
 80058e0:	f003 fb2a 	bl	8008f38 <lv_obj_transform_point>
    if(indev_obj_act != proc->types.pointer.act_obj) {
 80058e4:	6a20      	ldr	r0, [r4, #32]
 80058e6:	682b      	ldr	r3, [r5, #0]
 80058e8:	4298      	cmp	r0, r3
 80058ea:	d013      	beq.n	8005914 <indev_proc_press+0x70>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	60a2      	str	r2, [r4, #8]
        if(proc->types.pointer.act_obj != NULL) {
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d054      	beq.n	800599e <indev_proc_press+0xfa>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, indev_act);
 80058f4:	2103      	movs	r1, #3
 80058f6:	6832      	ldr	r2, [r6, #0]
 80058f8:	f7ff f99a 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 80058fc:	7863      	ldrb	r3, [r4, #1]
 80058fe:	079a      	lsls	r2, r3, #30
 8005900:	d54c      	bpl.n	800599c <indev_proc_press+0xf8>
        indev_obj_act = NULL;
 8005902:	2200      	movs	r2, #0
    return proc->reset_query ? true : false;
 8005904:	079b      	lsls	r3, r3, #30
        indev_obj_act = NULL;
 8005906:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 8005908:	0fda      	lsrs	r2, r3, #31
 800590a:	2b00      	cmp	r3, #0
 800590c:	db3f      	blt.n	800598e <indev_proc_press+0xea>
        proc->types.pointer.last_obj = indev_obj_act;
 800590e:	2300      	movs	r3, #0
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 8005910:	6222      	str	r2, [r4, #32]
        proc->types.pointer.last_obj = indev_obj_act;
 8005912:	6262      	str	r2, [r4, #36]	; 0x24
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8005914:	8922      	ldrh	r2, [r4, #8]
 8005916:	88a1      	ldrh	r1, [r4, #4]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8005918:	8960      	ldrh	r0, [r4, #10]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 800591a:	1a89      	subs	r1, r1, r2
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 800591c:	88e2      	ldrh	r2, [r4, #6]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 800591e:	b209      	sxth	r1, r1
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8005920:	1a12      	subs	r2, r2, r0
    proc->types.pointer.scroll_throw_vect.x = (proc->types.pointer.scroll_throw_vect.x + proc->types.pointer.vect.x) / 2;
 8005922:	2718      	movs	r7, #24
 8005924:	5fe0      	ldrsh	r0, [r4, r7]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8005926:	8221      	strh	r1, [r4, #16]
    proc->types.pointer.scroll_throw_vect.x = (proc->types.pointer.scroll_throw_vect.x + proc->types.pointer.vect.x) / 2;
 8005928:	1840      	adds	r0, r0, r1
 800592a:	0fc1      	lsrs	r1, r0, #31
 800592c:	1809      	adds	r1, r1, r0
 800592e:	1049      	asrs	r1, r1, #1
 8005930:	8321      	strh	r1, [r4, #24]
    proc->types.pointer.scroll_throw_vect.y = (proc->types.pointer.scroll_throw_vect.y + proc->types.pointer.vect.y) / 2;
 8005932:	201a      	movs	r0, #26
 8005934:	5e21      	ldrsh	r1, [r4, r0]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8005936:	b212      	sxth	r2, r2
    proc->types.pointer.scroll_throw_vect.y = (proc->types.pointer.scroll_throw_vect.y + proc->types.pointer.vect.y) / 2;
 8005938:	1889      	adds	r1, r1, r2
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 800593a:	8262      	strh	r2, [r4, #18]
    proc->types.pointer.scroll_throw_vect.y = (proc->types.pointer.scroll_throw_vect.y + proc->types.pointer.vect.y) / 2;
 800593c:	0fca      	lsrs	r2, r1, #31
 800593e:	1852      	adds	r2, r2, r1
 8005940:	1052      	asrs	r2, r2, #1
 8005942:	8362      	strh	r2, [r4, #26]
    proc->types.pointer.scroll_throw_vect_ori = proc->types.pointer.scroll_throw_vect;
 8005944:	69a2      	ldr	r2, [r4, #24]
 8005946:	61e2      	str	r2, [r4, #28]
    if(indev_obj_act) {
 8005948:	2b00      	cmp	r3, #0
 800594a:	d020      	beq.n	800598e <indev_proc_press+0xea>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, indev_act);
 800594c:	0018      	movs	r0, r3
 800594e:	2102      	movs	r1, #2
 8005950:	6832      	ldr	r2, [r6, #0]
 8005952:	f7ff f96d 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8005956:	7863      	ldrb	r3, [r4, #1]
 8005958:	079a      	lsls	r2, r3, #30
 800595a:	d500      	bpl.n	800595e <indev_proc_press+0xba>
 800595c:	e089      	b.n	8005a72 <indev_proc_press+0x1ce>
        if(indev_act->proc.wait_until_release) return;
 800595e:	2208      	movs	r2, #8
 8005960:	0017      	movs	r7, r2
 8005962:	6833      	ldr	r3, [r6, #0]
 8005964:	795b      	ldrb	r3, [r3, #5]
 8005966:	401f      	ands	r7, r3
 8005968:	421a      	tst	r2, r3
 800596a:	d110      	bne.n	800598e <indev_proc_press+0xea>
        _lv_indev_scroll_handler(proc);
 800596c:	0020      	movs	r0, r4
 800596e:	f001 f8cd 	bl	8006b0c <_lv_indev_scroll_handler>
    if(proc->reset_query) {
 8005972:	2302      	movs	r3, #2
 8005974:	0018      	movs	r0, r3
 8005976:	7861      	ldrb	r1, [r4, #1]
 8005978:	4008      	ands	r0, r1
 800597a:	420b      	tst	r3, r1
 800597c:	d000      	beq.n	8005980 <indev_proc_press+0xdc>
        indev_obj_act = NULL;
 800597e:	602f      	str	r7, [r5, #0]
    return proc->reset_query ? true : false;
 8005980:	2201      	movs	r2, #1
        if(indev_reset_check(proc)) return;
 8005982:	0017      	movs	r7, r2
    return proc->reset_query ? true : false;
 8005984:	084b      	lsrs	r3, r1, #1
        if(indev_reset_check(proc)) return;
 8005986:	401f      	ands	r7, r3
 8005988:	421a      	tst	r2, r3
 800598a:	d100      	bne.n	800598e <indev_proc_press+0xea>
 800598c:	e09e      	b.n	8005acc <indev_proc_press+0x228>
}
 800598e:	b003      	add	sp, #12
 8005990:	bcf0      	pop	{r4, r5, r6, r7}
 8005992:	46bb      	mov	fp, r7
 8005994:	46b2      	mov	sl, r6
 8005996:	46a9      	mov	r9, r5
 8005998:	46a0      	mov	r8, r4
 800599a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	6223      	str	r3, [r4, #32]
        proc->types.pointer.last_obj = indev_obj_act;
 80059a0:	6263      	str	r3, [r4, #36]	; 0x24
        if(indev_obj_act != NULL) {
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0b6      	beq.n	8005914 <indev_proc_press+0x70>
            proc->pr_timestamp                 = lv_tick_get();
 80059a6:	f00e f911 	bl	8013bcc <lv_tick_get>
            proc->long_pr_sent                 = 0;
 80059aa:	2201      	movs	r2, #1
            proc->types.pointer.scroll_sum.x     = 0;
 80059ac:	2700      	movs	r7, #0
            proc->long_pr_sent                 = 0;
 80059ae:	7863      	ldrb	r3, [r4, #1]
            proc->pr_timestamp                 = lv_tick_get();
 80059b0:	6420      	str	r0, [r4, #64]	; 0x40
            proc->long_pr_sent                 = 0;
 80059b2:	4393      	bics	r3, r2
 80059b4:	7063      	strb	r3, [r4, #1]
            proc->types.pointer.scroll_dir = LV_DIR_NONE;
 80059b6:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 80059b8:	2101      	movs	r1, #1
            proc->types.pointer.scroll_dir = LV_DIR_NONE;
 80059ba:	0a5b      	lsrs	r3, r3, #9
 80059bc:	025b      	lsls	r3, r3, #9
 80059be:	87a3      	strh	r3, [r4, #60]	; 0x3c
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 80059c0:	6832      	ldr	r2, [r6, #0]
 80059c2:	6828      	ldr	r0, [r5, #0]
            proc->types.pointer.scroll_sum.x     = 0;
 80059c4:	6167      	str	r7, [r4, #20]
            proc->types.pointer.gesture_sum.x  = 0;
 80059c6:	63a7      	str	r7, [r4, #56]	; 0x38
            proc->types.pointer.vect.x         = 0;
 80059c8:	6127      	str	r7, [r4, #16]
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 80059ca:	f7ff f931 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 80059ce:	7863      	ldrb	r3, [r4, #1]
 80059d0:	079a      	lsls	r2, r3, #30
 80059d2:	d502      	bpl.n	80059da <indev_proc_press+0x136>
        indev_obj_act = NULL;
 80059d4:	602f      	str	r7, [r5, #0]
            if(indev_reset_check(proc)) return;
 80059d6:	079b      	lsls	r3, r3, #30
 80059d8:	d4d9      	bmi.n	800598e <indev_proc_press+0xea>
            if(indev_act->proc.wait_until_release) return;
 80059da:	2208      	movs	r2, #8
 80059dc:	0011      	movs	r1, r2
 80059de:	6837      	ldr	r7, [r6, #0]
 80059e0:	797b      	ldrb	r3, [r7, #5]
 80059e2:	4019      	ands	r1, r3
 80059e4:	4688      	mov	r8, r1
 80059e6:	421a      	tst	r2, r3
 80059e8:	d1d1      	bne.n	800598e <indev_proc_press+0xea>
    if(lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_CLICK_FOCUSABLE) == false ||
 80059ea:	2104      	movs	r1, #4
 80059ec:	6828      	ldr	r0, [r5, #0]
 80059ee:	f002 fa91 	bl	8007f14 <lv_obj_has_flag>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d033      	beq.n	8005a5e <indev_proc_press+0x1ba>
       proc->types.pointer.last_pressed == indev_obj_act) {
 80059f6:	6828      	ldr	r0, [r5, #0]
    if(lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_CLICK_FOCUSABLE) == false ||
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	4283      	cmp	r3, r0
 80059fc:	d02f      	beq.n	8005a5e <indev_proc_press+0x1ba>
    lv_group_t * g_act = lv_obj_get_group(indev_obj_act);
 80059fe:	f002 fa9f 	bl	8007f40 <lv_obj_get_group>
 8005a02:	4681      	mov	r9, r0
    lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 8005a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d100      	bne.n	8005a0c <indev_proc_press+0x168>
 8005a0a:	e110      	b.n	8005c2e <indev_proc_press+0x38a>
 8005a0c:	f002 fa98 	bl	8007f40 <lv_obj_get_group>
 8005a10:	4682      	mov	sl, r0
    if(g_act == g_prev) {
 8005a12:	4581      	cmp	r9, r0
 8005a14:	d100      	bne.n	8005a18 <indev_proc_press+0x174>
 8005a16:	e13e      	b.n	8005c96 <indev_proc_press+0x3f2>
        if(g_prev == NULL && proc->types.pointer.last_pressed) {
 8005a18:	1e03      	subs	r3, r0, #0
 8005a1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a1c:	d100      	bne.n	8005a20 <indev_proc_press+0x17c>
 8005a1e:	e158      	b.n	8005cd2 <indev_proc_press+0x42e>
            if(proc->types.pointer.last_pressed) {
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d00a      	beq.n	8005a3a <indev_proc_press+0x196>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, indev_act);
 8005a24:	2110      	movs	r1, #16
 8005a26:	6832      	ldr	r2, [r6, #0]
 8005a28:	f7ff f902 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8005a2c:	797b      	ldrb	r3, [r7, #5]
 8005a2e:	079a      	lsls	r2, r3, #30
 8005a30:	d503      	bpl.n	8005a3a <indev_proc_press+0x196>
        indev_obj_act = NULL;
 8005a32:	4642      	mov	r2, r8
 8005a34:	602a      	str	r2, [r5, #0]
                    if(indev_reset_check(proc)) return;
 8005a36:	079b      	lsls	r3, r3, #30
 8005a38:	d411      	bmi.n	8005a5e <indev_proc_press+0x1ba>
        if(g_act) {
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d000      	beq.n	8005a42 <indev_proc_press+0x19e>
 8005a40:	e0f8      	b.n	8005c34 <indev_proc_press+0x390>
            lv_event_send(indev_obj_act, LV_EVENT_FOCUSED, indev_act);
 8005a42:	210e      	movs	r1, #14
 8005a44:	6832      	ldr	r2, [r6, #0]
 8005a46:	6828      	ldr	r0, [r5, #0]
 8005a48:	f7ff f8f2 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8005a4c:	797b      	ldrb	r3, [r7, #5]
 8005a4e:	079a      	lsls	r2, r3, #30
 8005a50:	d503      	bpl.n	8005a5a <indev_proc_press+0x1b6>
        indev_obj_act = NULL;
 8005a52:	464a      	mov	r2, r9
 8005a54:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 8005a56:	079b      	lsls	r3, r3, #30
 8005a58:	d401      	bmi.n	8005a5e <indev_proc_press+0x1ba>
    proc->types.pointer.last_pressed = indev_obj_act;
 8005a5a:	682b      	ldr	r3, [r5, #0]
 8005a5c:	633b      	str	r3, [r7, #48]	; 0x30
    if(proc->reset_query) {
 8005a5e:	7863      	ldrb	r3, [r4, #1]
 8005a60:	079a      	lsls	r2, r3, #30
 8005a62:	d504      	bpl.n	8005a6e <indev_proc_press+0x1ca>
        indev_obj_act = NULL;
 8005a64:	2200      	movs	r2, #0
 8005a66:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 8005a68:	079b      	lsls	r3, r3, #30
 8005a6a:	d500      	bpl.n	8005a6e <indev_proc_press+0x1ca>
 8005a6c:	e78f      	b.n	800598e <indev_proc_press+0xea>
    if(indev_obj_act) {
 8005a6e:	682b      	ldr	r3, [r5, #0]
 8005a70:	e750      	b.n	8005914 <indev_proc_press+0x70>
        indev_obj_act = NULL;
 8005a72:	2200      	movs	r2, #0
 8005a74:	602a      	str	r2, [r5, #0]
        if(indev_reset_check(proc)) return;
 8005a76:	079b      	lsls	r3, r3, #30
 8005a78:	d500      	bpl.n	8005a7c <indev_proc_press+0x1d8>
 8005a7a:	e788      	b.n	800598e <indev_proc_press+0xea>
 8005a7c:	e76f      	b.n	800595e <indev_proc_press+0xba>
            lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_PRESS_LOCK) == false) {
 8005a7e:	2180      	movs	r1, #128	; 0x80
 8005a80:	0189      	lsls	r1, r1, #6
 8005a82:	f002 fa47 	bl	8007f14 <lv_obj_has_flag>
    else if(proc->types.pointer.scroll_obj == NULL &&
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d002      	beq.n	8005a90 <indev_proc_press+0x1ec>
    lv_obj_transform_point(indev_obj_act, &proc->types.pointer.act_point, true, true);
 8005a8a:	6828      	ldr	r0, [r5, #0]
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 8005a8c:	1d27      	adds	r7, r4, #4
 8005a8e:	e724      	b.n	80058da <indev_proc_press+0x36>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 8005a90:	4640      	mov	r0, r8
 8005a92:	1d27      	adds	r7, r4, #4
 8005a94:	f7fe fe06 	bl	80046a4 <lv_disp_get_layer_sys>
 8005a98:	0039      	movs	r1, r7
 8005a9a:	f7ff febd 	bl	8005818 <lv_indev_search_obj>
 8005a9e:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d03f      	beq.n	8005b24 <indev_proc_press+0x280>
    if(new_obj_searched && proc->types.pointer.last_obj) {
 8005aa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d100      	bne.n	8005aac <indev_proc_press+0x208>
 8005aaa:	e716      	b.n	80058da <indev_proc_press+0x36>
        proc->types.pointer.scroll_throw_vect.x = 0;
 8005aac:	2300      	movs	r3, #0
        _lv_indev_scroll_throw_handler(proc);
 8005aae:	0020      	movs	r0, r4
        proc->types.pointer.scroll_throw_vect.x = 0;
 8005ab0:	61a3      	str	r3, [r4, #24]
 8005ab2:	4698      	mov	r8, r3
        _lv_indev_scroll_throw_handler(proc);
 8005ab4:	f001 faa2 	bl	8006ffc <_lv_indev_scroll_throw_handler>
    if(proc->reset_query) {
 8005ab8:	7863      	ldrb	r3, [r4, #1]
 8005aba:	079a      	lsls	r2, r3, #30
 8005abc:	d504      	bpl.n	8005ac8 <indev_proc_press+0x224>
        indev_obj_act = NULL;
 8005abe:	4642      	mov	r2, r8
 8005ac0:	602a      	str	r2, [r5, #0]
        if(indev_reset_check(proc)) return;
 8005ac2:	079b      	lsls	r3, r3, #30
 8005ac4:	d500      	bpl.n	8005ac8 <indev_proc_press+0x224>
 8005ac6:	e762      	b.n	800598e <indev_proc_press+0xea>
    lv_obj_transform_point(indev_obj_act, &proc->types.pointer.act_point, true, true);
 8005ac8:	6828      	ldr	r0, [r5, #0]
 8005aca:	e706      	b.n	80058da <indev_proc_press+0x36>
    if(proc->types.pointer.scroll_obj) return;
 8005acc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d039      	beq.n	8005b46 <indev_proc_press+0x2a2>
    if(proc->reset_query) {
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d100      	bne.n	8005ad8 <indev_proc_press+0x234>
 8005ad6:	e75a      	b.n	800598e <indev_proc_press+0xea>
        indev_obj_act = NULL;
 8005ad8:	602f      	str	r7, [r5, #0]
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 0) {
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d000      	beq.n	8005ae0 <indev_proc_press+0x23c>
 8005ade:	e756      	b.n	800598e <indev_proc_press+0xea>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	001f      	movs	r7, r3
 8005ae4:	400f      	ands	r7, r1
 8005ae6:	420b      	tst	r3, r1
 8005ae8:	d100      	bne.n	8005aec <indev_proc_press+0x248>
 8005aea:	e10f      	b.n	8005d0c <indev_proc_press+0x468>
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 1) {
 8005aec:	07cb      	lsls	r3, r1, #31
 8005aee:	d400      	bmi.n	8005af2 <indev_proc_press+0x24e>
 8005af0:	e74d      	b.n	800598e <indev_proc_press+0xea>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver->long_press_repeat_time) {
 8005af2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005af4:	f00e f878 	bl	8013be8 <lv_tick_elaps>
 8005af8:	6832      	ldr	r2, [r6, #0]
 8005afa:	6813      	ldr	r3, [r2, #0]
 8005afc:	8b5b      	ldrh	r3, [r3, #26]
 8005afe:	4298      	cmp	r0, r3
 8005b00:	d800      	bhi.n	8005b04 <indev_proc_press+0x260>
 8005b02:	e744      	b.n	800598e <indev_proc_press+0xea>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8005b04:	2106      	movs	r1, #6
 8005b06:	6828      	ldr	r0, [r5, #0]
 8005b08:	f7ff f892 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8005b0c:	7863      	ldrb	r3, [r4, #1]
 8005b0e:	079a      	lsls	r2, r3, #30
 8005b10:	d504      	bpl.n	8005b1c <indev_proc_press+0x278>
        indev_obj_act = NULL;
 8005b12:	2200      	movs	r2, #0
 8005b14:	602a      	str	r2, [r5, #0]
                if(indev_reset_check(proc)) return;
 8005b16:	079b      	lsls	r3, r3, #30
 8005b18:	d500      	bpl.n	8005b1c <indev_proc_press+0x278>
 8005b1a:	e738      	b.n	800598e <indev_proc_press+0xea>
                proc->longpr_rep_timestamp = lv_tick_get();
 8005b1c:	f00e f856 	bl	8013bcc <lv_tick_get>
 8005b20:	6460      	str	r0, [r4, #68]	; 0x44
 8005b22:	e734      	b.n	800598e <indev_proc_press+0xea>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8005b24:	4640      	mov	r0, r8
 8005b26:	f7fe fdaf 	bl	8004688 <lv_disp_get_layer_top>
 8005b2a:	0039      	movs	r1, r7
 8005b2c:	f7ff fe74 	bl	8005818 <lv_indev_search_obj>
 8005b30:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 8005b32:	2800      	cmp	r0, #0
 8005b34:	d1b6      	bne.n	8005aa4 <indev_proc_press+0x200>
 8005b36:	4640      	mov	r0, r8
 8005b38:	f7fe fd8a 	bl	8004650 <lv_disp_get_scr_act>
 8005b3c:	0039      	movs	r1, r7
 8005b3e:	f7ff fe6b 	bl	8005818 <lv_indev_search_obj>
 8005b42:	6028      	str	r0, [r5, #0]
 8005b44:	e7ae      	b.n	8005aa4 <indev_proc_press+0x200>
    if(proc->types.pointer.gesture_sent) return;
 8005b46:	333d      	adds	r3, #61	; 0x3d
 8005b48:	5ce3      	ldrb	r3, [r4, r3]
 8005b4a:	421a      	tst	r2, r3
 8005b4c:	d000      	beq.n	8005b50 <indev_proc_press+0x2ac>
 8005b4e:	e09c      	b.n	8005c8a <indev_proc_press+0x3e6>
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
 8005b50:	6a27      	ldr	r7, [r4, #32]
    while(gesture_obj && lv_obj_has_flag(gesture_obj, LV_OBJ_FLAG_GESTURE_BUBBLE)) {
 8005b52:	2f00      	cmp	r7, #0
 8005b54:	d109      	bne.n	8005b6a <indev_proc_press+0x2c6>
 8005b56:	e098      	b.n	8005c8a <indev_proc_press+0x3e6>
 8005b58:	20000454 	.word	0x20000454
 8005b5c:	20000450 	.word	0x20000450
        gesture_obj = lv_obj_get_parent(gesture_obj);
 8005b60:	0038      	movs	r0, r7
 8005b62:	f008 f95b 	bl	800de1c <lv_obj_get_parent>
 8005b66:	1e07      	subs	r7, r0, #0
    while(gesture_obj && lv_obj_has_flag(gesture_obj, LV_OBJ_FLAG_GESTURE_BUBBLE)) {
 8005b68:	d071      	beq.n	8005c4e <indev_proc_press+0x3aa>
 8005b6a:	2180      	movs	r1, #128	; 0x80
 8005b6c:	0038      	movs	r0, r7
 8005b6e:	0209      	lsls	r1, r1, #8
 8005b70:	f002 f9d0 	bl	8007f14 <lv_obj_has_flag>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d1f3      	bne.n	8005b60 <indev_proc_press+0x2bc>
    if((LV_ABS(proc->types.pointer.vect.x) < indev_act->driver->gesture_min_velocity) &&
 8005b78:	2210      	movs	r2, #16
 8005b7a:	5ea3      	ldrsh	r3, [r4, r2]
 8005b7c:	4698      	mov	r8, r3
 8005b7e:	6833      	ldr	r3, [r6, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	469c      	mov	ip, r3
 8005b84:	7d93      	ldrb	r3, [r2, #22]
 8005b86:	469a      	mov	sl, r3
 8005b88:	4643      	mov	r3, r8
 8005b8a:	17d9      	asrs	r1, r3, #31
 8005b8c:	185b      	adds	r3, r3, r1
 8005b8e:	404b      	eors	r3, r1
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	4553      	cmp	r3, sl
 8005b94:	d200      	bcs.n	8005b98 <indev_proc_press+0x2f4>
 8005b96:	e08e      	b.n	8005cb6 <indev_proc_press+0x412>
       (LV_ABS(proc->types.pointer.vect.y) < indev_act->driver->gesture_min_velocity)) {
 8005b98:	2112      	movs	r1, #18
 8005b9a:	5e63      	ldrsh	r3, [r4, r1]
 8005b9c:	4699      	mov	r9, r3
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8005b9e:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8005ba0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8005ba2:	4441      	add	r1, r8
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8005ba4:	444b      	add	r3, r9
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8005ba6:	b209      	sxth	r1, r1
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8005ba8:	b21b      	sxth	r3, r3
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	8763      	strh	r3, [r4, #58]	; 0x3a
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 8005bae:	17cb      	asrs	r3, r1, #31
 8005bb0:	18c8      	adds	r0, r1, r3
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8005bb2:	8721      	strh	r1, [r4, #56]	; 0x38
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 8005bb4:	4058      	eors	r0, r3
 8005bb6:	7dd3      	ldrb	r3, [r2, #23]
       (LV_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver->gesture_limit)) {
 8005bb8:	9a00      	ldr	r2, [sp, #0]
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 8005bba:	4698      	mov	r8, r3
       (LV_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver->gesture_limit)) {
 8005bbc:	17d3      	asrs	r3, r2, #31
 8005bbe:	18d2      	adds	r2, r2, r3
 8005bc0:	405a      	eors	r2, r3
 8005bc2:	b293      	uxth	r3, r2
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 8005bc4:	b280      	uxth	r0, r0
       (LV_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver->gesture_limit)) {
 8005bc6:	9301      	str	r3, [sp, #4]
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 8005bc8:	4540      	cmp	r0, r8
 8005bca:	d801      	bhi.n	8005bd0 <indev_proc_press+0x32c>
 8005bcc:	4598      	cmp	r8, r3
 8005bce:	d23e      	bcs.n	8005c4e <indev_proc_press+0x3aa>
        proc->types.pointer.gesture_sent = 1;
 8005bd0:	233c      	movs	r3, #60	; 0x3c
 8005bd2:	4699      	mov	r9, r3
 8005bd4:	44a1      	add	r9, r4
 8005bd6:	469a      	mov	sl, r3
 8005bd8:	464b      	mov	r3, r9
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	4698      	mov	r8, r3
 8005bde:	2301      	movs	r3, #1
 8005be0:	469b      	mov	fp, r3
 8005be2:	4643      	mov	r3, r8
 8005be4:	465a      	mov	r2, fp
 8005be6:	4313      	orrs	r3, r2
 8005be8:	4698      	mov	r8, r3
 8005bea:	464b      	mov	r3, r9
 8005bec:	4642      	mov	r2, r8
 8005bee:	705a      	strb	r2, [r3, #1]
        if(LV_ABS(proc->types.pointer.gesture_sum.x) > LV_ABS(proc->types.pointer.gesture_sum.y)) {
 8005bf0:	9b01      	ldr	r3, [sp, #4]
 8005bf2:	4298      	cmp	r0, r3
 8005bf4:	d97e      	bls.n	8005cf4 <indev_proc_press+0x450>
                proc->types.pointer.gesture_dir = LV_DIR_RIGHT;
 8005bf6:	4653      	mov	r3, sl
 8005bf8:	5ce2      	ldrb	r2, [r4, r3]
            if(proc->types.pointer.gesture_sum.x > 0)
 8005bfa:	2900      	cmp	r1, #0
 8005bfc:	dc00      	bgt.n	8005c00 <indev_proc_press+0x35c>
 8005bfe:	e093      	b.n	8005d28 <indev_proc_press+0x484>
                proc->types.pointer.gesture_dir = LV_DIR_RIGHT;
 8005c00:	3b2d      	subs	r3, #45	; 0x2d
 8005c02:	4013      	ands	r3, r2
 8005c04:	2220      	movs	r2, #32
 8005c06:	4313      	orrs	r3, r2
 8005c08:	4652      	mov	r2, sl
 8005c0a:	54a3      	strb	r3, [r4, r2]
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, indev_act);
 8005c0c:	210c      	movs	r1, #12
 8005c0e:	4662      	mov	r2, ip
 8005c10:	0038      	movs	r0, r7
 8005c12:	f7ff f80d 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8005c16:	7861      	ldrb	r1, [r4, #1]
 8005c18:	078b      	lsls	r3, r1, #30
 8005c1a:	d51b      	bpl.n	8005c54 <indev_proc_press+0x3b0>
        indev_obj_act = NULL;
 8005c1c:	2200      	movs	r2, #0
    return proc->reset_query ? true : false;
 8005c1e:	078b      	lsls	r3, r1, #30
 8005c20:	0fdb      	lsrs	r3, r3, #31
        indev_obj_act = NULL;
 8005c22:	602a      	str	r2, [r5, #0]
        if(indev_reset_check(proc)) return;
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d000      	beq.n	8005c2a <indev_proc_press+0x386>
 8005c28:	e6b1      	b.n	800598e <indev_proc_press+0xea>
 8005c2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005c2c:	e755      	b.n	8005ada <indev_proc_press+0x236>
    if(g_act == g_prev) {
 8005c2e:	464b      	mov	r3, r9
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d021      	beq.n	8005c78 <indev_proc_press+0x3d4>
            lv_group_focus_obj(indev_obj_act);
 8005c34:	6828      	ldr	r0, [r5, #0]
 8005c36:	f7ff fbeb 	bl	8005410 <lv_group_focus_obj>
    if(proc->reset_query) {
 8005c3a:	797b      	ldrb	r3, [r7, #5]
 8005c3c:	079a      	lsls	r2, r3, #30
 8005c3e:	d400      	bmi.n	8005c42 <indev_proc_press+0x39e>
 8005c40:	e70b      	b.n	8005a5a <indev_proc_press+0x1b6>
        indev_obj_act = NULL;
 8005c42:	2200      	movs	r2, #0
 8005c44:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 8005c46:	079b      	lsls	r3, r3, #30
 8005c48:	d500      	bpl.n	8005c4c <indev_proc_press+0x3a8>
 8005c4a:	e708      	b.n	8005a5e <indev_proc_press+0x1ba>
 8005c4c:	e705      	b.n	8005a5a <indev_proc_press+0x1b6>
    if(proc->reset_query) {
 8005c4e:	7861      	ldrb	r1, [r4, #1]
 8005c50:	078b      	lsls	r3, r1, #30
 8005c52:	d4e3      	bmi.n	8005c1c <indev_proc_press+0x378>
    return proc->reset_query ? true : false;
 8005c54:	078b      	lsls	r3, r1, #30
 8005c56:	0fdb      	lsrs	r3, r3, #31
 8005c58:	e7e4      	b.n	8005c24 <indev_proc_press+0x380>
            if(proc->types.pointer.last_pressed) {
 8005c5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d00b      	beq.n	8005c78 <indev_proc_press+0x3d4>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 8005c60:	210f      	movs	r1, #15
 8005c62:	6832      	ldr	r2, [r6, #0]
 8005c64:	f7fe ffe4 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8005c68:	797b      	ldrb	r3, [r7, #5]
 8005c6a:	079a      	lsls	r2, r3, #30
 8005c6c:	d504      	bpl.n	8005c78 <indev_proc_press+0x3d4>
        indev_obj_act = NULL;
 8005c6e:	464a      	mov	r2, r9
 8005c70:	602a      	str	r2, [r5, #0]
                if(indev_reset_check(proc)) return;
 8005c72:	079b      	lsls	r3, r3, #30
 8005c74:	d500      	bpl.n	8005c78 <indev_proc_press+0x3d4>
 8005c76:	e6f2      	b.n	8005a5e <indev_proc_press+0x1ba>
            lv_event_send(indev_obj_act, LV_EVENT_FOCUSED, indev_act);
 8005c78:	210e      	movs	r1, #14
 8005c7a:	6832      	ldr	r2, [r6, #0]
 8005c7c:	6828      	ldr	r0, [r5, #0]
 8005c7e:	f7fe ffd7 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8005c82:	797b      	ldrb	r3, [r7, #5]
 8005c84:	079a      	lsls	r2, r3, #30
 8005c86:	d4dc      	bmi.n	8005c42 <indev_proc_press+0x39e>
 8005c88:	e6e7      	b.n	8005a5a <indev_proc_press+0x1b6>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d100      	bne.n	8005c90 <indev_proc_press+0x3ec>
 8005c8e:	e727      	b.n	8005ae0 <indev_proc_press+0x23c>
        indev_obj_act = NULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	602b      	str	r3, [r5, #0]
    return proc->reset_query ? true : false;
 8005c94:	e724      	b.n	8005ae0 <indev_proc_press+0x23c>
        if(g_act) {
 8005c96:	464b      	mov	r3, r9
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0de      	beq.n	8005c5a <indev_proc_press+0x3b6>
            lv_group_focus_obj(indev_obj_act);
 8005c9c:	6828      	ldr	r0, [r5, #0]
 8005c9e:	f7ff fbb7 	bl	8005410 <lv_group_focus_obj>
    if(proc->reset_query) {
 8005ca2:	797b      	ldrb	r3, [r7, #5]
 8005ca4:	079a      	lsls	r2, r3, #30
 8005ca6:	d400      	bmi.n	8005caa <indev_proc_press+0x406>
 8005ca8:	e6d7      	b.n	8005a5a <indev_proc_press+0x1b6>
        indev_obj_act = NULL;
 8005caa:	4642      	mov	r2, r8
 8005cac:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 8005cae:	079b      	lsls	r3, r3, #30
 8005cb0:	d500      	bpl.n	8005cb4 <indev_proc_press+0x410>
 8005cb2:	e6d4      	b.n	8005a5e <indev_proc_press+0x1ba>
 8005cb4:	e6d1      	b.n	8005a5a <indev_proc_press+0x1b6>
       (LV_ABS(proc->types.pointer.vect.y) < indev_act->driver->gesture_min_velocity)) {
 8005cb6:	2112      	movs	r1, #18
 8005cb8:	5e63      	ldrsh	r3, [r4, r1]
 8005cba:	17d9      	asrs	r1, r3, #31
 8005cbc:	4699      	mov	r9, r3
 8005cbe:	185b      	adds	r3, r3, r1
 8005cc0:	404b      	eors	r3, r1
    if((LV_ABS(proc->types.pointer.vect.x) < indev_act->driver->gesture_min_velocity) &&
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	459a      	cmp	sl, r3
 8005cc6:	d800      	bhi.n	8005cca <indev_proc_press+0x426>
 8005cc8:	e769      	b.n	8005b9e <indev_proc_press+0x2fa>
        proc->types.pointer.gesture_sum.x = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	2100      	movs	r1, #0
 8005cce:	63a0      	str	r0, [r4, #56]	; 0x38
 8005cd0:	e767      	b.n	8005ba2 <indev_proc_press+0x2fe>
        if(g_prev == NULL && proc->types.pointer.last_pressed) {
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d100      	bne.n	8005cd8 <indev_proc_press+0x434>
 8005cd6:	e6b0      	b.n	8005a3a <indev_proc_press+0x196>
            lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 8005cd8:	210f      	movs	r1, #15
 8005cda:	6832      	ldr	r2, [r6, #0]
 8005cdc:	f7fe ffa8 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8005ce0:	797b      	ldrb	r3, [r7, #5]
 8005ce2:	079a      	lsls	r2, r3, #30
 8005ce4:	d400      	bmi.n	8005ce8 <indev_proc_press+0x444>
 8005ce6:	e6a8      	b.n	8005a3a <indev_proc_press+0x196>
        indev_obj_act = NULL;
 8005ce8:	4652      	mov	r2, sl
 8005cea:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 8005cec:	079b      	lsls	r3, r3, #30
 8005cee:	d500      	bpl.n	8005cf2 <indev_proc_press+0x44e>
 8005cf0:	e6b5      	b.n	8005a5e <indev_proc_press+0x1ba>
 8005cf2:	e6a2      	b.n	8005a3a <indev_proc_press+0x196>
            if(proc->types.pointer.gesture_sum.y > 0)
 8005cf4:	9b00      	ldr	r3, [sp, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	dd1d      	ble.n	8005d36 <indev_proc_press+0x492>
                proc->types.pointer.gesture_dir = LV_DIR_BOTTOM;
 8005cfa:	4653      	mov	r3, sl
 8005cfc:	5ce2      	ldrb	r2, [r4, r3]
 8005cfe:	230f      	movs	r3, #15
 8005d00:	401a      	ands	r2, r3
 8005d02:	3b8f      	subs	r3, #143	; 0x8f
 8005d04:	4313      	orrs	r3, r2
 8005d06:	4652      	mov	r2, sl
 8005d08:	54a3      	strb	r3, [r4, r2]
 8005d0a:	e77f      	b.n	8005c0c <indev_proc_press+0x368>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver->long_press_time) {
 8005d0c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005d0e:	f00d ff6b 	bl	8013be8 <lv_tick_elaps>
 8005d12:	6832      	ldr	r2, [r6, #0]
 8005d14:	6813      	ldr	r3, [r2, #0]
 8005d16:	8b1b      	ldrh	r3, [r3, #24]
 8005d18:	4298      	cmp	r0, r3
 8005d1a:	d815      	bhi.n	8005d48 <indev_proc_press+0x4a4>
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 1) {
 8005d1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d000      	beq.n	8005d24 <indev_proc_press+0x480>
 8005d22:	e634      	b.n	800598e <indev_proc_press+0xea>
 8005d24:	7861      	ldrb	r1, [r4, #1]
 8005d26:	e6e1      	b.n	8005aec <indev_proc_press+0x248>
                proc->types.pointer.gesture_dir = LV_DIR_LEFT;
 8005d28:	230f      	movs	r3, #15
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2210      	movs	r2, #16
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	4652      	mov	r2, sl
 8005d32:	54a3      	strb	r3, [r4, r2]
 8005d34:	e76a      	b.n	8005c0c <indev_proc_press+0x368>
                proc->types.pointer.gesture_dir = LV_DIR_TOP;
 8005d36:	4653      	mov	r3, sl
 8005d38:	5ce2      	ldrb	r2, [r4, r3]
 8005d3a:	230f      	movs	r3, #15
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2240      	movs	r2, #64	; 0x40
 8005d40:	4313      	orrs	r3, r2
 8005d42:	4652      	mov	r2, sl
 8005d44:	54a3      	strb	r3, [r4, r2]
 8005d46:	e761      	b.n	8005c0c <indev_proc_press+0x368>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8005d48:	2105      	movs	r1, #5
 8005d4a:	6828      	ldr	r0, [r5, #0]
 8005d4c:	f7fe ff70 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8005d50:	7863      	ldrb	r3, [r4, #1]
 8005d52:	079a      	lsls	r2, r3, #30
 8005d54:	d500      	bpl.n	8005d58 <indev_proc_press+0x4b4>
        indev_obj_act = NULL;
 8005d56:	602f      	str	r7, [r5, #0]
                if(indev_reset_check(proc)) return;
 8005d58:	079b      	lsls	r3, r3, #30
 8005d5a:	d500      	bpl.n	8005d5e <indev_proc_press+0x4ba>
 8005d5c:	e617      	b.n	800598e <indev_proc_press+0xea>
                proc->long_pr_sent = 1;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	7862      	ldrb	r2, [r4, #1]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	7063      	strb	r3, [r4, #1]
                proc->longpr_rep_timestamp = lv_tick_get();
 8005d66:	f00d ff31 	bl	8013bcc <lv_tick_get>
 8005d6a:	6460      	str	r0, [r4, #68]	; 0x44
 8005d6c:	e7d6      	b.n	8005d1c <indev_proc_press+0x478>
 8005d6e:	46c0      	nop			; (mov r8, r8)

08005d70 <lv_indev_read_timer_cb>:
{
 8005d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d72:	464e      	mov	r6, r9
 8005d74:	46de      	mov	lr, fp
 8005d76:	4657      	mov	r7, sl
 8005d78:	4645      	mov	r5, r8
    indev_act = timer->user_data;
 8005d7a:	68c4      	ldr	r4, [r0, #12]
{
 8005d7c:	b5e0      	push	{r5, r6, r7, lr}
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8005d7e:	6823      	ldr	r3, [r4, #0]
    indev_act = timer->user_data;
 8005d80:	4ec2      	ldr	r6, [pc, #776]	; (800608c <lv_indev_read_timer_cb+0x31c>)
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8005d82:	68d9      	ldr	r1, [r3, #12]
{
 8005d84:	b087      	sub	sp, #28
    indev_act = timer->user_data;
 8005d86:	6034      	str	r4, [r6, #0]
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8005d88:	2900      	cmp	r1, #0
 8005d8a:	d007      	beq.n	8005d9c <lv_indev_read_timer_cb+0x2c>
    if(indev->proc.reset_query) {
 8005d8c:	7963      	ldrb	r3, [r4, #5]
 8005d8e:	079a      	lsls	r2, r3, #30
 8005d90:	d40b      	bmi.n	8005daa <lv_indev_read_timer_cb+0x3a>
    if(indev_act->proc.disabled ||
 8005d92:	075b      	lsls	r3, r3, #29
 8005d94:	d402      	bmi.n	8005d9c <lv_indev_read_timer_cb+0x2c>
 8005d96:	694b      	ldr	r3, [r1, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01a      	beq.n	8005dd2 <lv_indev_read_timer_cb+0x62>
}
 8005d9c:	b007      	add	sp, #28
 8005d9e:	bcf0      	pop	{r4, r5, r6, r7}
 8005da0:	46bb      	mov	fp, r7
 8005da2:	46b2      	mov	sl, r6
 8005da4:	46a9      	mov	r9, r5
 8005da6:	46a0      	mov	r8, r4
 8005da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        indev->proc.types.pointer.act_obj           = NULL;
 8005daa:	2200      	movs	r2, #0
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8005dac:	2540      	movs	r5, #64	; 0x40
 8005dae:	270f      	movs	r7, #15
        indev->proc.types.pointer.act_obj           = NULL;
 8005db0:	6262      	str	r2, [r4, #36]	; 0x24
        indev->proc.types.pointer.last_obj          = NULL;
 8005db2:	62a2      	str	r2, [r4, #40]	; 0x28
        indev->proc.types.pointer.scroll_obj          = NULL;
 8005db4:	62e2      	str	r2, [r4, #44]	; 0x2c
        indev->proc.pr_timestamp                    = 0;
 8005db6:	6462      	str	r2, [r4, #68]	; 0x44
        indev->proc.longpr_rep_timestamp            = 0;
 8005db8:	64a2      	str	r2, [r4, #72]	; 0x48
        indev->proc.types.pointer.scroll_sum.x        = 0;
 8005dba:	61a2      	str	r2, [r4, #24]
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8005dbc:	5d60      	ldrb	r0, [r4, r5]
 8005dbe:	43b8      	bics	r0, r7
 8005dc0:	5560      	strb	r0, [r4, r5]
        indev->proc.long_pr_sent                    = 0;
 8005dc2:	2003      	movs	r0, #3
        indev_obj_act                               = NULL;
 8005dc4:	4fb2      	ldr	r7, [pc, #712]	; (8006090 <lv_indev_read_timer_cb+0x320>)
        indev->proc.long_pr_sent                    = 0;
 8005dc6:	4383      	bics	r3, r0
        indev->proc.types.pointer.scroll_throw_vect.x = 0;
 8005dc8:	61e2      	str	r2, [r4, #28]
        indev->proc.types.pointer.gesture_sum.x     = 0;
 8005dca:	63e2      	str	r2, [r4, #60]	; 0x3c
        indev->proc.long_pr_sent                    = 0;
 8005dcc:	7163      	strb	r3, [r4, #5]
        indev_obj_act                               = NULL;
 8005dce:	603a      	str	r2, [r7, #0]
}
 8005dd0:	e7df      	b.n	8005d92 <lv_indev_read_timer_cb+0x22>
    if(indev->proc.reset_query) {
 8005dd2:	3302      	adds	r3, #2
 8005dd4:	4698      	mov	r8, r3
        indev->proc.types.pointer.act_obj           = NULL;
 8005dd6:	2500      	movs	r5, #0
 8005dd8:	4fad      	ldr	r7, [pc, #692]	; (8006090 <lv_indev_read_timer_cb+0x320>)
        _lv_indev_read(indev_act, &data);
 8005dda:	0020      	movs	r0, r4
 8005ddc:	a902      	add	r1, sp, #8
 8005dde:	f00d fec9 	bl	8013b74 <_lv_indev_read>
    if(indev->proc.reset_query) {
 8005de2:	4642      	mov	r2, r8
        continue_reading = data.continue_reading;
 8005de4:	ab02      	add	r3, sp, #8
 8005de6:	7bdb      	ldrb	r3, [r3, #15]
        indev_proc_reset_query_handler(indev_act);
 8005de8:	6834      	ldr	r4, [r6, #0]
        continue_reading = data.continue_reading;
 8005dea:	4699      	mov	r9, r3
    if(indev->proc.reset_query) {
 8005dec:	7963      	ldrb	r3, [r4, #5]
 8005dee:	421a      	tst	r2, r3
 8005df0:	d00f      	beq.n	8005e12 <lv_indev_read_timer_cb+0xa2>
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8005df2:	2140      	movs	r1, #64	; 0x40
 8005df4:	200f      	movs	r0, #15
        indev->proc.types.pointer.act_obj           = NULL;
 8005df6:	6265      	str	r5, [r4, #36]	; 0x24
        indev->proc.types.pointer.last_obj          = NULL;
 8005df8:	62a5      	str	r5, [r4, #40]	; 0x28
        indev->proc.types.pointer.scroll_obj          = NULL;
 8005dfa:	62e5      	str	r5, [r4, #44]	; 0x2c
        indev->proc.pr_timestamp                    = 0;
 8005dfc:	6465      	str	r5, [r4, #68]	; 0x44
        indev->proc.longpr_rep_timestamp            = 0;
 8005dfe:	64a5      	str	r5, [r4, #72]	; 0x48
        indev->proc.types.pointer.scroll_sum.x        = 0;
 8005e00:	61a5      	str	r5, [r4, #24]
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8005e02:	5c62      	ldrb	r2, [r4, r1]
 8005e04:	4382      	bics	r2, r0
 8005e06:	5462      	strb	r2, [r4, r1]
        indev->proc.long_pr_sent                    = 0;
 8005e08:	2203      	movs	r2, #3
 8005e0a:	4393      	bics	r3, r2
        indev->proc.types.pointer.scroll_throw_vect.x = 0;
 8005e0c:	61e5      	str	r5, [r4, #28]
        indev->proc.types.pointer.gesture_sum.x     = 0;
 8005e0e:	63e5      	str	r5, [r4, #60]	; 0x3c
        indev->proc.long_pr_sent                    = 0;
 8005e10:	7163      	strb	r3, [r4, #5]
        indev_obj_act = NULL;
 8005e12:	603d      	str	r5, [r7, #0]
        indev_act->proc.state = data.state;
 8005e14:	ab02      	add	r3, sp, #8
 8005e16:	7b9a      	ldrb	r2, [r3, #14]
 8005e18:	7122      	strb	r2, [r4, #4]
        if(indev_act->proc.state == LV_INDEV_STATE_PRESSED) {
 8005e1a:	2a01      	cmp	r2, #1
 8005e1c:	d100      	bne.n	8005e20 <lv_indev_read_timer_cb+0xb0>
 8005e1e:	e0c5      	b.n	8005fac <lv_indev_read_timer_cb+0x23c>
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8005e20:	6821      	ldr	r1, [r4, #0]
 8005e22:	780b      	ldrb	r3, [r1, #0]
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d054      	beq.n	8005ed2 <lv_indev_read_timer_cb+0x162>
        if(indev_act->driver->type == LV_INDEV_TYPE_POINTER) {
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d100      	bne.n	8005e2e <lv_indev_read_timer_cb+0xbe>
 8005e2c:	e0cb      	b.n	8005fc6 <lv_indev_read_timer_cb+0x256>
        else if(indev_act->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d100      	bne.n	8005e34 <lv_indev_read_timer_cb+0xc4>
 8005e32:	e0fc      	b.n	800602e <lv_indev_read_timer_cb+0x2be>
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER) {
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	d100      	bne.n	8005e3a <lv_indev_read_timer_cb+0xca>
 8005e38:	e157      	b.n	80060ea <lv_indev_read_timer_cb+0x37a>
        else if(indev_act->driver->type == LV_INDEV_TYPE_BUTTON) {
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d01b      	beq.n	8005e76 <lv_indev_read_timer_cb+0x106>
    if(indev->proc.reset_query) {
 8005e3e:	7963      	ldrb	r3, [r4, #5]
 8005e40:	4642      	mov	r2, r8
 8005e42:	421a      	tst	r2, r3
 8005e44:	d011      	beq.n	8005e6a <lv_indev_read_timer_cb+0xfa>
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8005e46:	2240      	movs	r2, #64	; 0x40
 8005e48:	210f      	movs	r1, #15
        indev->proc.types.pointer.act_obj           = NULL;
 8005e4a:	6265      	str	r5, [r4, #36]	; 0x24
        indev->proc.types.pointer.last_obj          = NULL;
 8005e4c:	62a5      	str	r5, [r4, #40]	; 0x28
        indev->proc.types.pointer.scroll_obj          = NULL;
 8005e4e:	62e5      	str	r5, [r4, #44]	; 0x2c
        indev->proc.pr_timestamp                    = 0;
 8005e50:	6465      	str	r5, [r4, #68]	; 0x44
        indev->proc.longpr_rep_timestamp            = 0;
 8005e52:	64a5      	str	r5, [r4, #72]	; 0x48
        indev->proc.types.pointer.scroll_sum.x        = 0;
 8005e54:	61a5      	str	r5, [r4, #24]
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8005e56:	5ca3      	ldrb	r3, [r4, r2]
        indev_obj_act                               = NULL;
 8005e58:	603d      	str	r5, [r7, #0]
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8005e5a:	438b      	bics	r3, r1
 8005e5c:	54a3      	strb	r3, [r4, r2]
        indev->proc.long_pr_sent                    = 0;
 8005e5e:	7963      	ldrb	r3, [r4, #5]
 8005e60:	3a3d      	subs	r2, #61	; 0x3d
 8005e62:	4393      	bics	r3, r2
        indev->proc.types.pointer.scroll_throw_vect.x = 0;
 8005e64:	61e5      	str	r5, [r4, #28]
        indev->proc.types.pointer.gesture_sum.x     = 0;
 8005e66:	63e5      	str	r5, [r4, #60]	; 0x3c
        indev->proc.long_pr_sent                    = 0;
 8005e68:	7163      	strb	r3, [r4, #5]
    } while(continue_reading);
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1b4      	bne.n	8005dda <lv_indev_read_timer_cb+0x6a>
    indev_act     = NULL;
 8005e70:	6033      	str	r3, [r6, #0]
    indev_obj_act = NULL;
 8005e72:	603b      	str	r3, [r7, #0]
    INDEV_TRACE("finished");
 8005e74:	e792      	b.n	8005d9c <lv_indev_read_timer_cb+0x2c>
    if(i->btn_points == NULL) {
 8005e76:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005e78:	2a00      	cmp	r2, #0
 8005e7a:	d0e0      	beq.n	8005e3e <lv_indev_read_timer_cb+0xce>
    lv_coord_t x = i->btn_points[data->btn_id].x;
 8005e7c:	9b04      	ldr	r3, [sp, #16]
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	18d1      	adds	r1, r2, r3
 8005e84:	5ed3      	ldrsh	r3, [r2, r3]
 8005e86:	469a      	mov	sl, r3
    lv_coord_t y = i->btn_points[data->btn_id].y;
 8005e88:	2202      	movs	r2, #2
 8005e8a:	5e8b      	ldrsh	r3, [r1, r2]
 8005e8c:	469b      	mov	fp, r3
    if(data->state == LV_INDEV_STATE_PRESSED) {
 8005e8e:	ab02      	add	r3, sp, #8
 8005e90:	7b9b      	ldrb	r3, [r3, #14]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d100      	bne.n	8005e98 <lv_indev_read_timer_cb+0x128>
 8005e96:	e13a      	b.n	800610e <lv_indev_read_timer_cb+0x39e>
    if(proc->reset_query) {
 8005e98:	4642      	mov	r2, r8
 8005e9a:	7963      	ldrb	r3, [r4, #5]
 8005e9c:	421a      	tst	r2, r3
 8005e9e:	d000      	beq.n	8005ea2 <lv_indev_read_timer_cb+0x132>
        indev_obj_act = NULL;
 8005ea0:	603d      	str	r5, [r7, #0]
    if(indev_reset_check(&i->proc)) return;
 8005ea2:	079b      	lsls	r3, r3, #30
 8005ea4:	d413      	bmi.n	8005ece <lv_indev_read_timer_cb+0x15e>
    i->proc.types.pointer.act_point.x = x;
 8005ea6:	4653      	mov	r3, sl
 8005ea8:	8123      	strh	r3, [r4, #8]
    i->proc.types.pointer.act_point.y = y;
 8005eaa:	465b      	mov	r3, fp
 8005eac:	8163      	strh	r3, [r4, #10]
    if(data->state == LV_INDEV_STATE_PRESSED) indev_proc_press(&i->proc);
 8005eae:	ab02      	add	r3, sp, #8
 8005eb0:	7b9b      	ldrb	r3, [r3, #14]
 8005eb2:	1d20      	adds	r0, r4, #4
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d100      	bne.n	8005eba <lv_indev_read_timer_cb+0x14a>
 8005eb8:	e1aa      	b.n	8006210 <lv_indev_read_timer_cb+0x4a0>
    else indev_proc_release(&i->proc);
 8005eba:	f7ff fb67 	bl	800558c <indev_proc_release>
    if(proc->reset_query) {
 8005ebe:	4642      	mov	r2, r8
 8005ec0:	7963      	ldrb	r3, [r4, #5]
 8005ec2:	421a      	tst	r2, r3
 8005ec4:	d000      	beq.n	8005ec8 <lv_indev_read_timer_cb+0x158>
        indev_obj_act = NULL;
 8005ec6:	603d      	str	r5, [r7, #0]
    if(indev_reset_check(&i->proc)) return;
 8005ec8:	079b      	lsls	r3, r3, #30
 8005eca:	d400      	bmi.n	8005ece <lv_indev_read_timer_cb+0x15e>
 8005ecc:	e0ab      	b.n	8006026 <lv_indev_read_timer_cb+0x2b6>
        indev_proc_reset_query_handler(indev_act);
 8005ece:	6834      	ldr	r4, [r6, #0]
 8005ed0:	e7b5      	b.n	8005e3e <lv_indev_read_timer_cb+0xce>
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8005ed2:	ab02      	add	r3, sp, #8
 8005ed4:	200c      	movs	r0, #12
 8005ed6:	5e1b      	ldrsh	r3, [r3, r0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d000      	beq.n	8005ede <lv_indev_read_timer_cb+0x16e>
 8005edc:	e111      	b.n	8006102 <lv_indev_read_timer_cb+0x392>
    if(i->proc.wait_until_release) {
 8005ede:	7963      	ldrb	r3, [r4, #5]
 8005ee0:	0719      	lsls	r1, r3, #28
 8005ee2:	d400      	bmi.n	8005ee6 <lv_indev_read_timer_cb+0x176>
 8005ee4:	e10a      	b.n	80060fc <lv_indev_read_timer_cb+0x38c>
        i->proc.long_pr_sent            = 0;
 8005ee6:	2109      	movs	r1, #9
 8005ee8:	438b      	bics	r3, r1
 8005eea:	7163      	strb	r3, [r4, #5]
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 8005eec:	2300      	movs	r3, #0
 8005eee:	469b      	mov	fp, r3
        i->proc.pr_timestamp            = 0;
 8005ef0:	6465      	str	r5, [r4, #68]	; 0x44
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 8005ef2:	7225      	strb	r5, [r4, #8]
    i->proc.types.keypad.last_key   = data->key;
 8005ef4:	9b03      	ldr	r3, [sp, #12]
    i->proc.types.keypad.last_state = data->state;
 8005ef6:	7222      	strb	r2, [r4, #8]
    i->proc.types.keypad.last_key   = data->key;
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	60e3      	str	r3, [r4, #12]
    lv_group_t * g = i->group;
 8005efc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005efe:	469a      	mov	sl, r3
    if(g == NULL) return;
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d09c      	beq.n	8005e3e <lv_indev_read_timer_cb+0xce>
    indev_obj_act = lv_group_get_focused(g);
 8005f04:	0018      	movs	r0, r3
 8005f06:	f7ff fb2b 	bl	8005560 <lv_group_get_focused>
 8005f0a:	6038      	str	r0, [r7, #0]
    if(indev_obj_act == NULL) return;
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d0de      	beq.n	8005ece <lv_indev_read_timer_cb+0x15e>
    if(data->state != LV_INDEV_STATE_RELEASED) {
 8005f10:	ab02      	add	r3, sp, #8
 8005f12:	7b9b      	ldrb	r3, [r3, #14]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <lv_indev_read_timer_cb+0x1ac>
        data->enc_diff = 0;
 8005f18:	ab02      	add	r3, sp, #8
 8005f1a:	819d      	strh	r5, [r3, #12]
    indev_obj_act = lv_group_get_focused(g);
 8005f1c:	4650      	mov	r0, sl
 8005f1e:	f7ff fb1f 	bl	8005560 <lv_group_get_focused>
 8005f22:	6038      	str	r0, [r7, #0]
    if(indev_obj_act == NULL) return;
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d0d2      	beq.n	8005ece <lv_indev_read_timer_cb+0x15e>
    if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_RELEASED) {
 8005f28:	ab02      	add	r3, sp, #8
 8005f2a:	7b9b      	ldrb	r3, [r3, #14]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d100      	bne.n	8005f32 <lv_indev_read_timer_cb+0x1c2>
 8005f30:	e171      	b.n	8006216 <lv_indev_read_timer_cb+0x4a6>
    else if(data->state == LV_INDEV_STATE_RELEASED && last_state == LV_INDEV_STATE_PRESSED) {
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10c      	bne.n	8005f50 <lv_indev_read_timer_cb+0x1e0>
 8005f36:	465b      	mov	r3, fp
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d109      	bne.n	8005f50 <lv_indev_read_timer_cb+0x1e0>
        if(data->key == LV_KEY_ENTER) {
 8005f3c:	9b03      	ldr	r3, [sp, #12]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	2b0a      	cmp	r3, #10
 8005f42:	d100      	bne.n	8005f46 <lv_indev_read_timer_cb+0x1d6>
 8005f44:	e226      	b.n	8006394 <lv_indev_read_timer_cb+0x624>
        i->proc.long_pr_sent = 0;
 8005f46:	2201      	movs	r2, #1
 8005f48:	7963      	ldrb	r3, [r4, #5]
        i->proc.pr_timestamp = 0;
 8005f4a:	6465      	str	r5, [r4, #68]	; 0x44
        i->proc.long_pr_sent = 0;
 8005f4c:	4393      	bics	r3, r2
 8005f4e:	7163      	strb	r3, [r4, #5]
    if(data->enc_diff != 0) {
 8005f50:	ab02      	add	r3, sp, #8
 8005f52:	220c      	movs	r2, #12
 8005f54:	5e9b      	ldrsh	r3, [r3, r2]
    indev_obj_act = NULL;
 8005f56:	603d      	str	r5, [r7, #0]
    if(data->enc_diff != 0) {
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0b8      	beq.n	8005ece <lv_indev_read_timer_cb+0x15e>
        if(lv_group_get_editing(g)) {
 8005f5c:	4650      	mov	r0, sl
 8005f5e:	f7ff fb09 	bl	8005574 <lv_group_get_editing>
            if(data->enc_diff < 0) {
 8005f62:	ab02      	add	r3, sp, #8
 8005f64:	220c      	movs	r2, #12
 8005f66:	5e9b      	ldrsh	r3, [r3, r2]
        if(lv_group_get_editing(g)) {
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d100      	bne.n	8005f6e <lv_indev_read_timer_cb+0x1fe>
 8005f6c:	e180      	b.n	8006270 <lv_indev_read_timer_cb+0x500>
            if(data->enc_diff < 0) {
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da00      	bge.n	8005f74 <lv_indev_read_timer_cb+0x204>
 8005f72:	e1cf      	b.n	8006314 <lv_indev_read_timer_cb+0x5a4>
                for(s = 0; s < data->enc_diff; s++) {
 8005f74:	2200      	movs	r2, #0
 8005f76:	4693      	mov	fp, r2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d108      	bne.n	8005f8e <lv_indev_read_timer_cb+0x21e>
 8005f7c:	e7a7      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	469c      	mov	ip, r3
 8005f82:	ab02      	add	r3, sp, #8
 8005f84:	220c      	movs	r2, #12
 8005f86:	5e9b      	ldrsh	r3, [r3, r2]
 8005f88:	44e3      	add	fp, ip
 8005f8a:	459b      	cmp	fp, r3
 8005f8c:	da9f      	bge.n	8005ece <lv_indev_read_timer_cb+0x15e>
                    lv_group_send_data(g, LV_KEY_RIGHT);
 8005f8e:	2113      	movs	r1, #19
 8005f90:	4650      	mov	r0, sl
 8005f92:	f7ff fa77 	bl	8005484 <lv_group_send_data>
    if(proc->reset_query) {
 8005f96:	4642      	mov	r2, r8
 8005f98:	7963      	ldrb	r3, [r4, #5]
 8005f9a:	421a      	tst	r2, r3
 8005f9c:	d000      	beq.n	8005fa0 <lv_indev_read_timer_cb+0x230>
        indev_obj_act = NULL;
 8005f9e:	603d      	str	r5, [r7, #0]
                    if(indev_reset_check(&i->proc)) return;
 8005fa0:	2201      	movs	r2, #1
    return proc->reset_query ? true : false;
 8005fa2:	085b      	lsrs	r3, r3, #1
                    if(indev_reset_check(&i->proc)) return;
 8005fa4:	421a      	tst	r2, r3
 8005fa6:	d0ea      	beq.n	8005f7e <lv_indev_read_timer_cb+0x20e>
        indev_proc_reset_query_handler(indev_act);
 8005fa8:	6834      	ldr	r4, [r6, #0]
 8005faa:	e748      	b.n	8005e3e <lv_indev_read_timer_cb+0xce>
            indev_act->driver->disp->last_activity_time = lv_tick_get();
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	68dc      	ldr	r4, [r3, #12]
            indev_act->driver->disp->last_activity_time = lv_tick_get();
 8005fb0:	f00d fe0c 	bl	8013bcc <lv_tick_get>
 8005fb4:	23ac      	movs	r3, #172	; 0xac
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	50e0      	str	r0, [r4, r3]
        if(indev_act->driver->type == LV_INDEV_TYPE_POINTER) {
 8005fba:	6834      	ldr	r4, [r6, #0]
 8005fbc:	6821      	ldr	r1, [r4, #0]
 8005fbe:	780b      	ldrb	r3, [r1, #0]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d000      	beq.n	8005fc6 <lv_indev_read_timer_cb+0x256>
 8005fc4:	e733      	b.n	8005e2e <lv_indev_read_timer_cb+0xbe>
    lv_disp_t * disp = i->driver->disp;
 8005fc6:	68cb      	ldr	r3, [r1, #12]
 8005fc8:	469b      	mov	fp, r3
    i->proc.types.pointer.last_raw_point.x = data->point.x;
 8005fca:	ab02      	add	r3, sp, #8
 8005fcc:	2200      	movs	r2, #0
 8005fce:	5e9a      	ldrsh	r2, [r3, r2]
    i->proc.types.pointer.last_raw_point.y = data->point.y;
 8005fd0:	ab02      	add	r3, sp, #8
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	5e5b      	ldrsh	r3, [r3, r1]
    i->proc.types.pointer.last_raw_point.x = data->point.x;
 8005fd6:	9902      	ldr	r1, [sp, #8]
    i->proc.types.pointer.last_raw_point.y = data->point.y;
 8005fd8:	9300      	str	r3, [sp, #0]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 8005fda:	465b      	mov	r3, fp
    i->proc.types.pointer.last_raw_point.x = data->point.x;
 8005fdc:	6121      	str	r1, [r4, #16]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 8005fde:	6819      	ldr	r1, [r3, #0]
 8005fe0:	7c08      	ldrb	r0, [r1, #16]
 8005fe2:	4684      	mov	ip, r0
 8005fe4:	0680      	lsls	r0, r0, #26
 8005fe6:	d455      	bmi.n	8006094 <lv_indev_read_timer_cb+0x324>
    if(disp->driver->rotated == LV_DISP_ROT_90 || disp->driver->rotated == LV_DISP_ROT_270) {
 8005fe8:	2030      	movs	r0, #48	; 0x30
 8005fea:	4682      	mov	sl, r0
 8005fec:	4660      	mov	r0, ip
 8005fee:	4653      	mov	r3, sl
 8005ff0:	4018      	ands	r0, r3
 8005ff2:	2810      	cmp	r0, #16
 8005ff4:	d075      	beq.n	80060e2 <lv_indev_read_timer_cb+0x372>
    if(data->point.x >= lv_disp_get_hor_res(i->driver->disp)) {
 8005ff6:	4658      	mov	r0, fp
 8005ff8:	f00d fd28 	bl	8013a4c <lv_disp_get_hor_res>
    if(data->point.y >= lv_disp_get_ver_res(i->driver->disp)) {
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	68d8      	ldr	r0, [r3, #12]
 8006000:	f00d fd38 	bl	8013a74 <lv_disp_get_ver_res>
    if(i->cursor != NULL &&
 8006004:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006006:	2800      	cmp	r0, #0
 8006008:	d005      	beq.n	8006016 <lv_indev_read_timer_cb+0x2a6>
 800600a:	9b02      	ldr	r3, [sp, #8]
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	9a00      	ldr	r2, [sp, #0]
 8006010:	68e3      	ldr	r3, [r4, #12]
 8006012:	4293      	cmp	r3, r2
 8006014:	d154      	bne.n	80060c0 <lv_indev_read_timer_cb+0x350>
    i->proc.types.pointer.act_point.x = data->point.x;
 8006016:	9b02      	ldr	r3, [sp, #8]
        indev_proc_press(&i->proc);
 8006018:	1d20      	adds	r0, r4, #4
    i->proc.types.pointer.act_point.x = data->point.x;
 800601a:	60a3      	str	r3, [r4, #8]
    if(i->proc.state == LV_INDEV_STATE_PRESSED) {
 800601c:	7923      	ldrb	r3, [r4, #4]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d05c      	beq.n	80060dc <lv_indev_read_timer_cb+0x36c>
        indev_proc_release(&i->proc);
 8006022:	f7ff fab3 	bl	800558c <indev_proc_release>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 8006026:	68a3      	ldr	r3, [r4, #8]
 8006028:	60e3      	str	r3, [r4, #12]
        indev_proc_reset_query_handler(indev_act);
 800602a:	6834      	ldr	r4, [r6, #0]
 800602c:	e707      	b.n	8005e3e <lv_indev_read_timer_cb+0xce>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 800602e:	ab02      	add	r3, sp, #8
 8006030:	7b9b      	ldrb	r3, [r3, #14]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d067      	beq.n	8006106 <lv_indev_read_timer_cb+0x396>
    if(i->proc.wait_until_release) {
 8006036:	7963      	ldrb	r3, [r4, #5]
 8006038:	071a      	lsls	r2, r3, #28
 800603a:	d504      	bpl.n	8006046 <lv_indev_read_timer_cb+0x2d6>
        i->proc.long_pr_sent            = 0;
 800603c:	2209      	movs	r2, #9
 800603e:	4393      	bics	r3, r2
        i->proc.pr_timestamp            = 0;
 8006040:	6465      	str	r5, [r4, #68]	; 0x44
        i->proc.long_pr_sent            = 0;
 8006042:	7163      	strb	r3, [r4, #5]
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 8006044:	7225      	strb	r5, [r4, #8]
    lv_group_t * g = i->group;
 8006046:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006048:	469a      	mov	sl, r3
    if(g == NULL) return;
 800604a:	2b00      	cmp	r3, #0
 800604c:	d100      	bne.n	8006050 <lv_indev_read_timer_cb+0x2e0>
 800604e:	e6f6      	b.n	8005e3e <lv_indev_read_timer_cb+0xce>
    indev_obj_act = lv_group_get_focused(g);
 8006050:	0018      	movs	r0, r3
 8006052:	f7ff fa85 	bl	8005560 <lv_group_get_focused>
 8006056:	6038      	str	r0, [r7, #0]
    if(indev_obj_act == NULL) return;
 8006058:	2800      	cmp	r0, #0
 800605a:	d100      	bne.n	800605e <lv_indev_read_timer_cb+0x2ee>
 800605c:	e737      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
    bool dis = lv_obj_has_state(indev_obj_act, LV_STATE_DISABLED);
 800605e:	2180      	movs	r1, #128	; 0x80
 8006060:	f001 ff68 	bl	8007f34 <lv_obj_has_state>
 8006064:	9000      	str	r0, [sp, #0]
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 8006066:	7a21      	ldrb	r1, [r4, #8]
    i->proc.types.keypad.last_key = data->key;
 8006068:	9b03      	ldr	r3, [sp, #12]
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 800606a:	9101      	str	r1, [sp, #4]
    uint32_t prev_key = i->proc.types.keypad.last_key;
 800606c:	68e2      	ldr	r2, [r4, #12]
    i->proc.types.keypad.last_state = data->state;
 800606e:	a902      	add	r1, sp, #8
    i->proc.types.keypad.last_key = data->key;
 8006070:	60e3      	str	r3, [r4, #12]
    i->proc.types.keypad.last_state = data->state;
 8006072:	7b89      	ldrb	r1, [r1, #14]
 8006074:	468b      	mov	fp, r1
 8006076:	7221      	strb	r1, [r4, #8]
    if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_RELEASED) {
 8006078:	2901      	cmp	r1, #1
 800607a:	d055      	beq.n	8006128 <lv_indev_read_timer_cb+0x3b8>
    else if(!dis && data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_PRESSED) {
 800607c:	2800      	cmp	r0, #0
 800607e:	d100      	bne.n	8006082 <lv_indev_read_timer_cb+0x312>
 8006080:	e0b4      	b.n	80061ec <lv_indev_read_timer_cb+0x47c>
        indev_proc_reset_query_handler(indev_act);
 8006082:	6834      	ldr	r4, [r6, #0]
    indev_obj_act = NULL;
 8006084:	603d      	str	r5, [r7, #0]
    if(indev->proc.reset_query) {
 8006086:	7963      	ldrb	r3, [r4, #5]
 8006088:	e6da      	b.n	8005e40 <lv_indev_read_timer_cb+0xd0>
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	20000450 	.word	0x20000450
 8006090:	20000454 	.word	0x20000454
        data->point.x = disp->driver->hor_res - data->point.x - 1;
 8006094:	43d2      	mvns	r2, r2
 8006096:	4692      	mov	sl, r2
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 8006098:	9b00      	ldr	r3, [sp, #0]
        data->point.x = disp->driver->hor_res - data->point.x - 1;
 800609a:	880a      	ldrh	r2, [r1, #0]
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 800609c:	43db      	mvns	r3, r3
        data->point.x = disp->driver->hor_res - data->point.x - 1;
 800609e:	4452      	add	r2, sl
 80060a0:	a802      	add	r0, sp, #8
 80060a2:	b212      	sxth	r2, r2
 80060a4:	8002      	strh	r2, [r0, #0]
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 80060a6:	8849      	ldrh	r1, [r1, #2]
 80060a8:	18cb      	adds	r3, r1, r3
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	8043      	strh	r3, [r0, #2]
    if(disp->driver->rotated == LV_DISP_ROT_90 || disp->driver->rotated == LV_DISP_ROT_270) {
 80060ae:	4660      	mov	r0, ip
 80060b0:	06c0      	lsls	r0, r0, #27
 80060b2:	d5a0      	bpl.n	8005ff6 <lv_indev_read_timer_cb+0x286>
        data->point.x = disp->driver->ver_res - tmp - 1;
 80060b4:	43db      	mvns	r3, r3
        data->point.y = data->point.x;
 80060b6:	a802      	add	r0, sp, #8
        data->point.x = disp->driver->ver_res - tmp - 1;
 80060b8:	18cb      	adds	r3, r1, r3
        data->point.y = data->point.x;
 80060ba:	8042      	strh	r2, [r0, #2]
        data->point.x = disp->driver->ver_res - tmp - 1;
 80060bc:	8003      	strh	r3, [r0, #0]
 80060be:	e79a      	b.n	8005ff6 <lv_indev_read_timer_cb+0x286>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 80060c0:	ab02      	add	r3, sp, #8
 80060c2:	2202      	movs	r2, #2
 80060c4:	5e9a      	ldrsh	r2, [r3, r2]
 80060c6:	ab02      	add	r3, sp, #8
 80060c8:	2100      	movs	r1, #0
 80060ca:	5e59      	ldrsh	r1, [r3, r1]
 80060cc:	f002 fca2 	bl	8008a14 <lv_obj_set_pos>
    i->proc.types.pointer.act_point.x = data->point.x;
 80060d0:	9b02      	ldr	r3, [sp, #8]
        indev_proc_press(&i->proc);
 80060d2:	1d20      	adds	r0, r4, #4
    i->proc.types.pointer.act_point.x = data->point.x;
 80060d4:	60a3      	str	r3, [r4, #8]
    if(i->proc.state == LV_INDEV_STATE_PRESSED) {
 80060d6:	7923      	ldrb	r3, [r4, #4]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d1a2      	bne.n	8006022 <lv_indev_read_timer_cb+0x2b2>
        indev_proc_press(&i->proc);
 80060dc:	f7ff fbe2 	bl	80058a4 <indev_proc_press>
 80060e0:	e7a1      	b.n	8006026 <lv_indev_read_timer_cb+0x2b6>
        data->point.x = disp->driver->ver_res - tmp - 1;
 80060e2:	466b      	mov	r3, sp
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 80060e4:	8849      	ldrh	r1, [r1, #2]
        data->point.x = disp->driver->ver_res - tmp - 1;
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	e7e4      	b.n	80060b4 <lv_indev_read_timer_cb+0x344>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 80060ea:	ab02      	add	r3, sp, #8
 80060ec:	7b9a      	ldrb	r2, [r3, #14]
 80060ee:	2a01      	cmp	r2, #1
 80060f0:	d000      	beq.n	80060f4 <lv_indev_read_timer_cb+0x384>
 80060f2:	e6f4      	b.n	8005ede <lv_indev_read_timer_cb+0x16e>
 80060f4:	7963      	ldrb	r3, [r4, #5]
 80060f6:	0719      	lsls	r1, r3, #28
 80060f8:	d500      	bpl.n	80060fc <lv_indev_read_timer_cb+0x38c>
 80060fa:	e6a1      	b.n	8005e40 <lv_indev_read_timer_cb+0xd0>
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
 80060fc:	7a23      	ldrb	r3, [r4, #8]
 80060fe:	469b      	mov	fp, r3
 8006100:	e6f8      	b.n	8005ef4 <lv_indev_read_timer_cb+0x184>
            indev_act->driver->disp->last_activity_time = lv_tick_get();
 8006102:	68cc      	ldr	r4, [r1, #12]
 8006104:	e754      	b.n	8005fb0 <lv_indev_read_timer_cb+0x240>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8006106:	7963      	ldrb	r3, [r4, #5]
 8006108:	071a      	lsls	r2, r3, #28
 800610a:	d59c      	bpl.n	8006046 <lv_indev_read_timer_cb+0x2d6>
 800610c:	e698      	b.n	8005e40 <lv_indev_read_timer_cb+0xd0>
        if(i->proc.types.pointer.last_point.x != x ||
 800610e:	220c      	movs	r2, #12
 8006110:	5ea3      	ldrsh	r3, [r4, r2]
 8006112:	4553      	cmp	r3, sl
 8006114:	d104      	bne.n	8006120 <lv_indev_read_timer_cb+0x3b0>
 8006116:	220e      	movs	r2, #14
 8006118:	5ea3      	ldrsh	r3, [r4, r2]
 800611a:	455b      	cmp	r3, fp
 800611c:	d100      	bne.n	8006120 <lv_indev_read_timer_cb+0x3b0>
 800611e:	e6bb      	b.n	8005e98 <lv_indev_read_timer_cb+0x128>
            indev_proc_release(&i->proc);
 8006120:	1d20      	adds	r0, r4, #4
 8006122:	f7ff fa33 	bl	800558c <indev_proc_release>
 8006126:	e6b7      	b.n	8005e98 <lv_indev_read_timer_cb+0x128>
    if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_RELEASED) {
 8006128:	9a01      	ldr	r2, [sp, #4]
 800612a:	2a00      	cmp	r2, #0
 800612c:	d02d      	beq.n	800618a <lv_indev_read_timer_cb+0x41a>
    else if(!dis && data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_PRESSED) {
 800612e:	2800      	cmp	r0, #0
 8006130:	d1a7      	bne.n	8006082 <lv_indev_read_timer_cb+0x312>
 8006132:	9a01      	ldr	r2, [sp, #4]
 8006134:	2a01      	cmp	r2, #1
 8006136:	d1a4      	bne.n	8006082 <lv_indev_read_timer_cb+0x312>
        if(data->key == LV_KEY_ENTER) {
 8006138:	2b0a      	cmp	r3, #10
 800613a:	d100      	bne.n	800613e <lv_indev_read_timer_cb+0x3ce>
 800613c:	e21b      	b.n	8006576 <lv_indev_read_timer_cb+0x806>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 800613e:	7963      	ldrb	r3, [r4, #5]
 8006140:	2201      	movs	r2, #1
 8006142:	4693      	mov	fp, r2
 8006144:	401a      	ands	r2, r3
 8006146:	9200      	str	r2, [sp, #0]
 8006148:	465a      	mov	r2, fp
 800614a:	421a      	tst	r2, r3
 800614c:	d100      	bne.n	8006150 <lv_indev_read_timer_cb+0x3e0>
 800614e:	e1a2      	b.n	8006496 <lv_indev_read_timer_cb+0x726>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 8006150:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006152:	f00d fd49 	bl	8013be8 <lv_tick_elaps>
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	8b5b      	ldrh	r3, [r3, #26]
        else if(i->proc.long_pr_sent != 0 &&
 800615a:	4298      	cmp	r0, r3
 800615c:	d991      	bls.n	8006082 <lv_indev_read_timer_cb+0x312>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 800615e:	f00d fd35 	bl	8013bcc <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 8006162:	9903      	ldr	r1, [sp, #12]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8006164:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 8006166:	290a      	cmp	r1, #10
 8006168:	d100      	bne.n	800616c <lv_indev_read_timer_cb+0x3fc>
 800616a:	e285      	b.n	8006678 <lv_indev_read_timer_cb+0x908>
            else if(data->key == LV_KEY_NEXT) {
 800616c:	2909      	cmp	r1, #9
 800616e:	d100      	bne.n	8006172 <lv_indev_read_timer_cb+0x402>
 8006170:	e2bb      	b.n	80066ea <lv_indev_read_timer_cb+0x97a>
                lv_group_send_data(g, data->key);
 8006172:	4650      	mov	r0, sl
            else if(data->key == LV_KEY_PREV) {
 8006174:	290b      	cmp	r1, #11
 8006176:	d100      	bne.n	800617a <lv_indev_read_timer_cb+0x40a>
 8006178:	e2a5      	b.n	80066c6 <lv_indev_read_timer_cb+0x956>
                lv_group_send_data(g, data->key);
 800617a:	f7ff f983 	bl	8005484 <lv_group_send_data>
    if(proc->reset_query) {
 800617e:	4642      	mov	r2, r8
 8006180:	7963      	ldrb	r3, [r4, #5]
 8006182:	4213      	tst	r3, r2
 8006184:	d02d      	beq.n	80061e2 <lv_indev_read_timer_cb+0x472>
        indev_obj_act = NULL;
 8006186:	603d      	str	r5, [r7, #0]
 8006188:	e02b      	b.n	80061e2 <lv_indev_read_timer_cb+0x472>
        i->proc.pr_timestamp = lv_tick_get();
 800618a:	f00d fd1f 	bl	8013bcc <lv_tick_get>
        if(data->key == LV_KEY_NEXT) {
 800618e:	9903      	ldr	r1, [sp, #12]
        i->proc.pr_timestamp = lv_tick_get();
 8006190:	6460      	str	r0, [r4, #68]	; 0x44
        if(data->key == LV_KEY_NEXT) {
 8006192:	2909      	cmp	r1, #9
 8006194:	d100      	bne.n	8006198 <lv_indev_read_timer_cb+0x428>
 8006196:	e0ee      	b.n	8006376 <lv_indev_read_timer_cb+0x606>
        else if(data->key == LV_KEY_PREV) {
 8006198:	290b      	cmp	r1, #11
 800619a:	d100      	bne.n	800619e <lv_indev_read_timer_cb+0x42e>
 800619c:	e14f      	b.n	800643e <lv_indev_read_timer_cb+0x6ce>
        else if(!dis) {
 800619e:	9b00      	ldr	r3, [sp, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d000      	beq.n	80061a6 <lv_indev_read_timer_cb+0x436>
 80061a4:	e76d      	b.n	8006082 <lv_indev_read_timer_cb+0x312>
                lv_group_send_data(g, LV_KEY_ENTER);
 80061a6:	4650      	mov	r0, sl
            if(data->key == LV_KEY_ENTER) {
 80061a8:	290a      	cmp	r1, #10
 80061aa:	d100      	bne.n	80061ae <lv_indev_read_timer_cb+0x43e>
 80061ac:	e206      	b.n	80065bc <lv_indev_read_timer_cb+0x84c>
            else if(data->key == LV_KEY_ESC) {
 80061ae:	291b      	cmp	r1, #27
 80061b0:	d1e3      	bne.n	800617a <lv_indev_read_timer_cb+0x40a>
                lv_group_send_data(g, LV_KEY_ESC);
 80061b2:	f7ff f967 	bl	8005484 <lv_group_send_data>
    if(proc->reset_query) {
 80061b6:	4642      	mov	r2, r8
 80061b8:	7963      	ldrb	r3, [r4, #5]
 80061ba:	421a      	tst	r2, r3
 80061bc:	d000      	beq.n	80061c0 <lv_indev_read_timer_cb+0x450>
        indev_obj_act = NULL;
 80061be:	603d      	str	r5, [r7, #0]
    return proc->reset_query ? true : false;
 80061c0:	079b      	lsls	r3, r3, #30
                if(indev_reset_check(&i->proc)) return;
 80061c2:	0fda      	lsrs	r2, r3, #31
 80061c4:	4692      	mov	sl, r2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	da00      	bge.n	80061cc <lv_indev_read_timer_cb+0x45c>
 80061ca:	e680      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
                lv_event_send(indev_obj_act, LV_EVENT_CANCEL, indev_act);
 80061cc:	2120      	movs	r1, #32
 80061ce:	6832      	ldr	r2, [r6, #0]
 80061d0:	6838      	ldr	r0, [r7, #0]
 80061d2:	f7fe fd2d 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 80061d6:	4642      	mov	r2, r8
 80061d8:	7963      	ldrb	r3, [r4, #5]
 80061da:	4213      	tst	r3, r2
 80061dc:	d001      	beq.n	80061e2 <lv_indev_read_timer_cb+0x472>
        indev_obj_act = NULL;
 80061de:	4652      	mov	r2, sl
 80061e0:	603a      	str	r2, [r7, #0]
                if(indev_reset_check(&i->proc)) return;
 80061e2:	079b      	lsls	r3, r3, #30
 80061e4:	d400      	bmi.n	80061e8 <lv_indev_read_timer_cb+0x478>
 80061e6:	e74c      	b.n	8006082 <lv_indev_read_timer_cb+0x312>
        indev_proc_reset_query_handler(indev_act);
 80061e8:	6834      	ldr	r4, [r6, #0]
 80061ea:	e628      	b.n	8005e3e <lv_indev_read_timer_cb+0xce>
    else if(!dis && data->state == LV_INDEV_STATE_RELEASED && prev_state == LV_INDEV_STATE_PRESSED) {
 80061ec:	465b      	mov	r3, fp
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d000      	beq.n	80061f4 <lv_indev_read_timer_cb+0x484>
 80061f2:	e746      	b.n	8006082 <lv_indev_read_timer_cb+0x312>
 80061f4:	9b01      	ldr	r3, [sp, #4]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d000      	beq.n	80061fc <lv_indev_read_timer_cb+0x48c>
 80061fa:	e742      	b.n	8006082 <lv_indev_read_timer_cb+0x312>
        data->key = prev_key;
 80061fc:	9203      	str	r2, [sp, #12]
        if(data->key == LV_KEY_ENTER) {
 80061fe:	2a0a      	cmp	r2, #10
 8006200:	d100      	bne.n	8006204 <lv_indev_read_timer_cb+0x494>
 8006202:	e16e      	b.n	80064e2 <lv_indev_read_timer_cb+0x772>
        i->proc.long_pr_sent = 0;
 8006204:	2201      	movs	r2, #1
 8006206:	7963      	ldrb	r3, [r4, #5]
        i->proc.pr_timestamp = 0;
 8006208:	6465      	str	r5, [r4, #68]	; 0x44
        i->proc.long_pr_sent = 0;
 800620a:	4393      	bics	r3, r2
 800620c:	7163      	strb	r3, [r4, #5]
 800620e:	e738      	b.n	8006082 <lv_indev_read_timer_cb+0x312>
    if(data->state == LV_INDEV_STATE_PRESSED) indev_proc_press(&i->proc);
 8006210:	f7ff fb48 	bl	80058a4 <indev_proc_press>
 8006214:	e653      	b.n	8005ebe <lv_indev_read_timer_cb+0x14e>
    if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_RELEASED) {
 8006216:	465b      	mov	r3, fp
 8006218:	2b00      	cmp	r3, #0
 800621a:	d047      	beq.n	80062ac <lv_indev_read_timer_cb+0x53c>
    else if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_PRESSED) {
 800621c:	2b01      	cmp	r3, #1
 800621e:	d000      	beq.n	8006222 <lv_indev_read_timer_cb+0x4b2>
 8006220:	e696      	b.n	8005f50 <lv_indev_read_timer_cb+0x1e0>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8006222:	465a      	mov	r2, fp
 8006224:	7963      	ldrb	r3, [r4, #5]
 8006226:	421a      	tst	r2, r3
 8006228:	d100      	bne.n	800622c <lv_indev_read_timer_cb+0x4bc>
 800622a:	e08f      	b.n	800634c <lv_indev_read_timer_cb+0x5dc>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 800622c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800622e:	f00d fcdb 	bl	8013be8 <lv_tick_elaps>
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	8b5b      	ldrh	r3, [r3, #26]
 8006236:	4298      	cmp	r0, r3
 8006238:	d800      	bhi.n	800623c <lv_indev_read_timer_cb+0x4cc>
 800623a:	e689      	b.n	8005f50 <lv_indev_read_timer_cb+0x1e0>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 800623c:	f00d fcc6 	bl	8013bcc <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 8006240:	9903      	ldr	r1, [sp, #12]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8006242:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 8006244:	290a      	cmp	r1, #10
 8006246:	d100      	bne.n	800624a <lv_indev_read_timer_cb+0x4da>
 8006248:	e23a      	b.n	80066c0 <lv_indev_read_timer_cb+0x950>
            else if(data->key == LV_KEY_LEFT) {
 800624a:	2914      	cmp	r1, #20
 800624c:	d100      	bne.n	8006250 <lv_indev_read_timer_cb+0x4e0>
 800624e:	e08b      	b.n	8006368 <lv_indev_read_timer_cb+0x5f8>
            else if(data->key == LV_KEY_RIGHT) {
 8006250:	2913      	cmp	r1, #19
 8006252:	d100      	bne.n	8006256 <lv_indev_read_timer_cb+0x4e6>
 8006254:	e100      	b.n	8006458 <lv_indev_read_timer_cb+0x6e8>
                lv_group_send_data(g, data->key);
 8006256:	4650      	mov	r0, sl
 8006258:	f7ff f914 	bl	8005484 <lv_group_send_data>
    if(proc->reset_query) {
 800625c:	4642      	mov	r2, r8
 800625e:	7963      	ldrb	r3, [r4, #5]
 8006260:	4213      	tst	r3, r2
 8006262:	d000      	beq.n	8006266 <lv_indev_read_timer_cb+0x4f6>
        indev_obj_act = NULL;
 8006264:	603d      	str	r5, [r7, #0]
                if(indev_reset_check(&i->proc)) return;
 8006266:	079b      	lsls	r3, r3, #30
 8006268:	d400      	bmi.n	800626c <lv_indev_read_timer_cb+0x4fc>
 800626a:	e671      	b.n	8005f50 <lv_indev_read_timer_cb+0x1e0>
        indev_proc_reset_query_handler(indev_act);
 800626c:	6834      	ldr	r4, [r6, #0]
 800626e:	e5e6      	b.n	8005e3e <lv_indev_read_timer_cb+0xce>
            if(data->enc_diff < 0) {
 8006270:	2b00      	cmp	r3, #0
 8006272:	db34      	blt.n	80062de <lv_indev_read_timer_cb+0x56e>
                for(s = 0; s < data->enc_diff; s++) {
 8006274:	2200      	movs	r2, #0
 8006276:	4693      	mov	fp, r2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d109      	bne.n	8006290 <lv_indev_read_timer_cb+0x520>
 800627c:	e627      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
 800627e:	2301      	movs	r3, #1
 8006280:	469c      	mov	ip, r3
 8006282:	ab02      	add	r3, sp, #8
 8006284:	220c      	movs	r2, #12
 8006286:	5e9b      	ldrsh	r3, [r3, r2]
 8006288:	44e3      	add	fp, ip
 800628a:	459b      	cmp	fp, r3
 800628c:	db00      	blt.n	8006290 <lv_indev_read_timer_cb+0x520>
 800628e:	e61e      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
                    lv_group_focus_next(g);
 8006290:	4650      	mov	r0, sl
 8006292:	f7ff f8c3 	bl	800541c <lv_group_focus_next>
    if(proc->reset_query) {
 8006296:	4642      	mov	r2, r8
 8006298:	7963      	ldrb	r3, [r4, #5]
 800629a:	421a      	tst	r2, r3
 800629c:	d000      	beq.n	80062a0 <lv_indev_read_timer_cb+0x530>
        indev_obj_act = NULL;
 800629e:	603d      	str	r5, [r7, #0]
                    if(indev_reset_check(&i->proc)) return;
 80062a0:	2201      	movs	r2, #1
    return proc->reset_query ? true : false;
 80062a2:	085b      	lsrs	r3, r3, #1
                    if(indev_reset_check(&i->proc)) return;
 80062a4:	421a      	tst	r2, r3
 80062a6:	d0ea      	beq.n	800627e <lv_indev_read_timer_cb+0x50e>
        indev_proc_reset_query_handler(indev_act);
 80062a8:	6834      	ldr	r4, [r6, #0]
 80062aa:	e5c8      	b.n	8005e3e <lv_indev_read_timer_cb+0xce>
        i->proc.pr_timestamp = lv_tick_get();
 80062ac:	f00d fc8e 	bl	8013bcc <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 80062b0:	9903      	ldr	r1, [sp, #12]
        i->proc.pr_timestamp = lv_tick_get();
 80062b2:	6460      	str	r0, [r4, #68]	; 0x44
        if(data->key == LV_KEY_ENTER) {
 80062b4:	290a      	cmp	r1, #10
 80062b6:	d100      	bne.n	80062ba <lv_indev_read_timer_cb+0x54a>
 80062b8:	e0d5      	b.n	8006466 <lv_indev_read_timer_cb+0x6f6>
        else if(data->key == LV_KEY_LEFT) {
 80062ba:	2914      	cmp	r1, #20
 80062bc:	d054      	beq.n	8006368 <lv_indev_read_timer_cb+0x5f8>
        else if(data->key == LV_KEY_RIGHT) {
 80062be:	2913      	cmp	r1, #19
 80062c0:	d100      	bne.n	80062c4 <lv_indev_read_timer_cb+0x554>
 80062c2:	e0c9      	b.n	8006458 <lv_indev_read_timer_cb+0x6e8>
            lv_group_send_data(g, LV_KEY_ESC);
 80062c4:	4650      	mov	r0, sl
        else if(data->key == LV_KEY_ESC) {
 80062c6:	291b      	cmp	r1, #27
 80062c8:	d100      	bne.n	80062cc <lv_indev_read_timer_cb+0x55c>
 80062ca:	e13b      	b.n	8006544 <lv_indev_read_timer_cb+0x7d4>
            lv_group_send_data(g, data->key);
 80062cc:	f7ff f8da 	bl	8005484 <lv_group_send_data>
    if(proc->reset_query) {
 80062d0:	4642      	mov	r2, r8
 80062d2:	7963      	ldrb	r3, [r4, #5]
 80062d4:	421a      	tst	r2, r3
 80062d6:	d0c6      	beq.n	8006266 <lv_indev_read_timer_cb+0x4f6>
        indev_obj_act = NULL;
 80062d8:	465a      	mov	r2, fp
 80062da:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 80062dc:	e7c3      	b.n	8006266 <lv_indev_read_timer_cb+0x4f6>
                for(s = 0; s < -data->enc_diff; s++) {
 80062de:	2300      	movs	r3, #0
 80062e0:	469b      	mov	fp, r3
 80062e2:	e009      	b.n	80062f8 <lv_indev_read_timer_cb+0x588>
 80062e4:	2301      	movs	r3, #1
 80062e6:	469c      	mov	ip, r3
 80062e8:	ab02      	add	r3, sp, #8
 80062ea:	220c      	movs	r2, #12
 80062ec:	5e9b      	ldrsh	r3, [r3, r2]
 80062ee:	44e3      	add	fp, ip
 80062f0:	425b      	negs	r3, r3
 80062f2:	459b      	cmp	fp, r3
 80062f4:	db00      	blt.n	80062f8 <lv_indev_read_timer_cb+0x588>
 80062f6:	e5ea      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
                    lv_group_focus_prev(g);
 80062f8:	4650      	mov	r0, sl
 80062fa:	f7ff f8a9 	bl	8005450 <lv_group_focus_prev>
    if(proc->reset_query) {
 80062fe:	4642      	mov	r2, r8
 8006300:	7963      	ldrb	r3, [r4, #5]
 8006302:	421a      	tst	r2, r3
 8006304:	d000      	beq.n	8006308 <lv_indev_read_timer_cb+0x598>
        indev_obj_act = NULL;
 8006306:	603d      	str	r5, [r7, #0]
                    if(indev_reset_check(&i->proc)) return;
 8006308:	2201      	movs	r2, #1
    return proc->reset_query ? true : false;
 800630a:	085b      	lsrs	r3, r3, #1
                    if(indev_reset_check(&i->proc)) return;
 800630c:	421a      	tst	r2, r3
 800630e:	d0e9      	beq.n	80062e4 <lv_indev_read_timer_cb+0x574>
        indev_proc_reset_query_handler(indev_act);
 8006310:	6834      	ldr	r4, [r6, #0]
 8006312:	e594      	b.n	8005e3e <lv_indev_read_timer_cb+0xce>
                for(s = 0; s < -data->enc_diff; s++) {
 8006314:	2300      	movs	r3, #0
 8006316:	469b      	mov	fp, r3
 8006318:	e009      	b.n	800632e <lv_indev_read_timer_cb+0x5be>
 800631a:	2301      	movs	r3, #1
 800631c:	469c      	mov	ip, r3
 800631e:	ab02      	add	r3, sp, #8
 8006320:	220c      	movs	r2, #12
 8006322:	5e9b      	ldrsh	r3, [r3, r2]
 8006324:	44e3      	add	fp, ip
 8006326:	425b      	negs	r3, r3
 8006328:	459b      	cmp	fp, r3
 800632a:	db00      	blt.n	800632e <lv_indev_read_timer_cb+0x5be>
 800632c:	e5cf      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
                    lv_group_send_data(g, LV_KEY_LEFT);
 800632e:	2114      	movs	r1, #20
 8006330:	4650      	mov	r0, sl
 8006332:	f7ff f8a7 	bl	8005484 <lv_group_send_data>
    if(proc->reset_query) {
 8006336:	4642      	mov	r2, r8
 8006338:	7963      	ldrb	r3, [r4, #5]
 800633a:	421a      	tst	r2, r3
 800633c:	d000      	beq.n	8006340 <lv_indev_read_timer_cb+0x5d0>
        indev_obj_act = NULL;
 800633e:	603d      	str	r5, [r7, #0]
                    if(indev_reset_check(&i->proc)) return;
 8006340:	2201      	movs	r2, #1
    return proc->reset_query ? true : false;
 8006342:	085b      	lsrs	r3, r3, #1
                    if(indev_reset_check(&i->proc)) return;
 8006344:	421a      	tst	r2, r3
 8006346:	d0e8      	beq.n	800631a <lv_indev_read_timer_cb+0x5aa>
        indev_proc_reset_query_handler(indev_act);
 8006348:	6834      	ldr	r4, [r6, #0]
 800634a:	e578      	b.n	8005e3e <lv_indev_read_timer_cb+0xce>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 800634c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800634e:	f00d fc4b 	bl	8013be8 <lv_tick_elaps>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	8b1b      	ldrh	r3, [r3, #24]
 8006356:	4298      	cmp	r0, r3
 8006358:	d900      	bls.n	800635c <lv_indev_read_timer_cb+0x5ec>
 800635a:	e11c      	b.n	8006596 <lv_indev_read_timer_cb+0x826>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 800635c:	465a      	mov	r2, fp
 800635e:	7963      	ldrb	r3, [r4, #5]
 8006360:	421a      	tst	r2, r3
 8006362:	d100      	bne.n	8006366 <lv_indev_read_timer_cb+0x5f6>
 8006364:	e5f4      	b.n	8005f50 <lv_indev_read_timer_cb+0x1e0>
 8006366:	e761      	b.n	800622c <lv_indev_read_timer_cb+0x4bc>
                data->enc_diff--;
 8006368:	ab02      	add	r3, sp, #8
 800636a:	899b      	ldrh	r3, [r3, #12]
 800636c:	aa02      	add	r2, sp, #8
 800636e:	3b01      	subs	r3, #1
 8006370:	b21b      	sxth	r3, r3
 8006372:	8193      	strh	r3, [r2, #12]
 8006374:	e5ef      	b.n	8005f56 <lv_indev_read_timer_cb+0x1e6>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8006376:	2100      	movs	r1, #0
 8006378:	4650      	mov	r0, sl
 800637a:	f7ff f89d 	bl	80054b8 <lv_group_set_editing>
            lv_group_focus_next(g);
 800637e:	4650      	mov	r0, sl
 8006380:	f7ff f84c 	bl	800541c <lv_group_focus_next>
    if(proc->reset_query) {
 8006384:	4642      	mov	r2, r8
 8006386:	7963      	ldrb	r3, [r4, #5]
 8006388:	421a      	tst	r2, r3
 800638a:	d100      	bne.n	800638e <lv_indev_read_timer_cb+0x61e>
 800638c:	e729      	b.n	80061e2 <lv_indev_read_timer_cb+0x472>
        indev_obj_act = NULL;
 800638e:	9a01      	ldr	r2, [sp, #4]
 8006390:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 8006392:	e726      	b.n	80061e2 <lv_indev_read_timer_cb+0x472>
            bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 8006394:	f001 ff3c 	bl	8008210 <lv_obj_is_editable>
 8006398:	2800      	cmp	r0, #0
 800639a:	d100      	bne.n	800639e <lv_indev_read_timer_cb+0x62e>
 800639c:	e11f      	b.n	80065de <lv_indev_read_timer_cb+0x86e>
            else if(lv_group_get_editing(g)) {
 800639e:	4650      	mov	r0, sl
 80063a0:	f7ff f8e8 	bl	8005574 <lv_group_get_editing>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d100      	bne.n	80063aa <lv_indev_read_timer_cb+0x63a>
 80063a8:	e147      	b.n	800663a <lv_indev_read_timer_cb+0x8ca>
                if(!i->proc.long_pr_sent || lv_group_get_obj_count(g) <= 1) {
 80063aa:	7963      	ldrb	r3, [r4, #5]
 80063ac:	07db      	lsls	r3, r3, #31
 80063ae:	d505      	bpl.n	80063bc <lv_indev_read_timer_cb+0x64c>
 80063b0:	4650      	mov	r0, sl
 80063b2:	f7ff f8e7 	bl	8005584 <lv_group_get_obj_count>
 80063b6:	2801      	cmp	r0, #1
 80063b8:	d900      	bls.n	80063bc <lv_indev_read_timer_cb+0x64c>
 80063ba:	e191      	b.n	80066e0 <lv_indev_read_timer_cb+0x970>
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 80063bc:	6832      	ldr	r2, [r6, #0]
 80063be:	2108      	movs	r1, #8
 80063c0:	6838      	ldr	r0, [r7, #0]
 80063c2:	f7fe fc35 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 80063c6:	4642      	mov	r2, r8
 80063c8:	7963      	ldrb	r3, [r4, #5]
 80063ca:	4213      	tst	r3, r2
 80063cc:	d000      	beq.n	80063d0 <lv_indev_read_timer_cb+0x660>
        indev_obj_act = NULL;
 80063ce:	603d      	str	r5, [r7, #0]
    return proc->reset_query ? true : false;
 80063d0:	079b      	lsls	r3, r3, #30
                    if(indev_reset_check(&i->proc)) return;
 80063d2:	0fda      	lsrs	r2, r3, #31
 80063d4:	4693      	mov	fp, r2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	da00      	bge.n	80063dc <lv_indev_read_timer_cb+0x66c>
 80063da:	e578      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 80063dc:	6832      	ldr	r2, [r6, #0]
 80063de:	2104      	movs	r1, #4
 80063e0:	6838      	ldr	r0, [r7, #0]
 80063e2:	f7fe fc25 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 80063e6:	4642      	mov	r2, r8
 80063e8:	7963      	ldrb	r3, [r4, #5]
 80063ea:	4213      	tst	r3, r2
 80063ec:	d001      	beq.n	80063f2 <lv_indev_read_timer_cb+0x682>
        indev_obj_act = NULL;
 80063ee:	465a      	mov	r2, fp
 80063f0:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 80063f2:	079b      	lsls	r3, r3, #30
                    if(indev_reset_check(&i->proc)) return;
 80063f4:	0fda      	lsrs	r2, r3, #31
 80063f6:	4693      	mov	fp, r2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	da00      	bge.n	80063fe <lv_indev_read_timer_cb+0x68e>
 80063fc:	e567      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 80063fe:	6832      	ldr	r2, [r6, #0]
 8006400:	2107      	movs	r1, #7
 8006402:	6838      	ldr	r0, [r7, #0]
 8006404:	f7fe fc14 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8006408:	4642      	mov	r2, r8
 800640a:	7963      	ldrb	r3, [r4, #5]
 800640c:	4213      	tst	r3, r2
 800640e:	d001      	beq.n	8006414 <lv_indev_read_timer_cb+0x6a4>
        indev_obj_act = NULL;
 8006410:	465a      	mov	r2, fp
 8006412:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 8006414:	079b      	lsls	r3, r3, #30
                    if(indev_reset_check(&i->proc)) return;
 8006416:	0fda      	lsrs	r2, r3, #31
 8006418:	4693      	mov	fp, r2
 800641a:	2b00      	cmp	r3, #0
 800641c:	da00      	bge.n	8006420 <lv_indev_read_timer_cb+0x6b0>
 800641e:	e556      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
                    lv_group_send_data(g, LV_KEY_ENTER);
 8006420:	210a      	movs	r1, #10
 8006422:	4650      	mov	r0, sl
 8006424:	f7ff f82e 	bl	8005484 <lv_group_send_data>
    if(proc->reset_query) {
 8006428:	4642      	mov	r2, r8
 800642a:	7963      	ldrb	r3, [r4, #5]
 800642c:	4213      	tst	r3, r2
 800642e:	d001      	beq.n	8006434 <lv_indev_read_timer_cb+0x6c4>
        indev_obj_act = NULL;
 8006430:	465a      	mov	r2, fp
 8006432:	603a      	str	r2, [r7, #0]
                    if(indev_reset_check(&i->proc)) return;
 8006434:	079b      	lsls	r3, r3, #30
 8006436:	d400      	bmi.n	800643a <lv_indev_read_timer_cb+0x6ca>
 8006438:	e585      	b.n	8005f46 <lv_indev_read_timer_cb+0x1d6>
        indev_proc_reset_query_handler(indev_act);
 800643a:	6834      	ldr	r4, [r6, #0]
 800643c:	e4ff      	b.n	8005e3e <lv_indev_read_timer_cb+0xce>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 800643e:	2100      	movs	r1, #0
 8006440:	4650      	mov	r0, sl
 8006442:	f7ff f839 	bl	80054b8 <lv_group_set_editing>
            lv_group_focus_prev(g);
 8006446:	4650      	mov	r0, sl
 8006448:	f7ff f802 	bl	8005450 <lv_group_focus_prev>
    if(proc->reset_query) {
 800644c:	4642      	mov	r2, r8
 800644e:	7963      	ldrb	r3, [r4, #5]
 8006450:	421a      	tst	r2, r3
 8006452:	d100      	bne.n	8006456 <lv_indev_read_timer_cb+0x6e6>
 8006454:	e6c5      	b.n	80061e2 <lv_indev_read_timer_cb+0x472>
 8006456:	e79a      	b.n	800638e <lv_indev_read_timer_cb+0x61e>
                data->enc_diff++;
 8006458:	ab02      	add	r3, sp, #8
 800645a:	899b      	ldrh	r3, [r3, #12]
 800645c:	aa02      	add	r2, sp, #8
 800645e:	3301      	adds	r3, #1
 8006460:	b21b      	sxth	r3, r3
 8006462:	8193      	strh	r3, [r2, #12]
 8006464:	e577      	b.n	8005f56 <lv_indev_read_timer_cb+0x1e6>
            bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 8006466:	6838      	ldr	r0, [r7, #0]
 8006468:	f001 fed2 	bl	8008210 <lv_obj_is_editable>
 800646c:	2800      	cmp	r0, #0
 800646e:	d100      	bne.n	8006472 <lv_indev_read_timer_cb+0x702>
 8006470:	e0ec      	b.n	800664c <lv_indev_read_timer_cb+0x8dc>
            if(lv_group_get_editing(g) == true || editable_or_scrollable == false) {
 8006472:	4650      	mov	r0, sl
 8006474:	f7ff f87e 	bl	8005574 <lv_group_get_editing>
 8006478:	2800      	cmp	r0, #0
 800647a:	d100      	bne.n	800647e <lv_indev_read_timer_cb+0x70e>
 800647c:	e568      	b.n	8005f50 <lv_indev_read_timer_cb+0x1e0>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 800647e:	2101      	movs	r1, #1
 8006480:	6832      	ldr	r2, [r6, #0]
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8006482:	6838      	ldr	r0, [r7, #0]
 8006484:	f7fe fbd4 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8006488:	4642      	mov	r2, r8
 800648a:	7963      	ldrb	r3, [r4, #5]
 800648c:	4213      	tst	r3, r2
 800648e:	d100      	bne.n	8006492 <lv_indev_read_timer_cb+0x722>
 8006490:	e6e9      	b.n	8006266 <lv_indev_read_timer_cb+0x4f6>
        indev_obj_act = NULL;
 8006492:	603d      	str	r5, [r7, #0]
 8006494:	e6e7      	b.n	8006266 <lv_indev_read_timer_cb+0x4f6>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8006496:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006498:	f00d fba6 	bl	8013be8 <lv_tick_elaps>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	8b1b      	ldrh	r3, [r3, #24]
 80064a0:	4298      	cmp	r0, r3
 80064a2:	d918      	bls.n	80064d6 <lv_indev_read_timer_cb+0x766>
            i->proc.long_pr_sent = 1;
 80064a4:	2201      	movs	r2, #1
 80064a6:	7963      	ldrb	r3, [r4, #5]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	7163      	strb	r3, [r4, #5]
            if(data->key == LV_KEY_ENTER) {
 80064ac:	9b03      	ldr	r3, [sp, #12]
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	2b0a      	cmp	r3, #10
 80064b2:	d000      	beq.n	80064b6 <lv_indev_read_timer_cb+0x746>
 80064b4:	e5e5      	b.n	8006082 <lv_indev_read_timer_cb+0x312>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 80064b6:	f00d fb89 	bl	8013bcc <lv_tick_get>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 80064ba:	6832      	ldr	r2, [r6, #0]
                i->proc.longpr_rep_timestamp = lv_tick_get();
 80064bc:	64a0      	str	r0, [r4, #72]	; 0x48
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 80064be:	2105      	movs	r1, #5
 80064c0:	6838      	ldr	r0, [r7, #0]
 80064c2:	f7fe fbb5 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 80064c6:	4642      	mov	r2, r8
 80064c8:	7963      	ldrb	r3, [r4, #5]
 80064ca:	4213      	tst	r3, r2
 80064cc:	d100      	bne.n	80064d0 <lv_indev_read_timer_cb+0x760>
 80064ce:	e688      	b.n	80061e2 <lv_indev_read_timer_cb+0x472>
        indev_obj_act = NULL;
 80064d0:	9a00      	ldr	r2, [sp, #0]
 80064d2:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 80064d4:	e685      	b.n	80061e2 <lv_indev_read_timer_cb+0x472>
        else if(i->proc.long_pr_sent != 0 &&
 80064d6:	465a      	mov	r2, fp
 80064d8:	7963      	ldrb	r3, [r4, #5]
 80064da:	421a      	tst	r2, r3
 80064dc:	d100      	bne.n	80064e0 <lv_indev_read_timer_cb+0x770>
 80064de:	e5d0      	b.n	8006082 <lv_indev_read_timer_cb+0x312>
 80064e0:	e636      	b.n	8006150 <lv_indev_read_timer_cb+0x3e0>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 80064e2:	6832      	ldr	r2, [r6, #0]
 80064e4:	2108      	movs	r1, #8
 80064e6:	6838      	ldr	r0, [r7, #0]
 80064e8:	f7fe fba2 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 80064ec:	4642      	mov	r2, r8
 80064ee:	7963      	ldrb	r3, [r4, #5]
 80064f0:	421a      	tst	r2, r3
 80064f2:	d001      	beq.n	80064f8 <lv_indev_read_timer_cb+0x788>
        indev_obj_act = NULL;
 80064f4:	465a      	mov	r2, fp
 80064f6:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 80064f8:	2201      	movs	r2, #1
            if(indev_reset_check(&i->proc)) return;
 80064fa:	0799      	lsls	r1, r3, #30
 80064fc:	d500      	bpl.n	8006500 <lv_indev_read_timer_cb+0x790>
 80064fe:	e4e6      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
            if(i->proc.long_pr_sent == 0) {
 8006500:	0011      	movs	r1, r2
 8006502:	4019      	ands	r1, r3
 8006504:	468a      	mov	sl, r1
 8006506:	421a      	tst	r2, r3
 8006508:	d10d      	bne.n	8006526 <lv_indev_read_timer_cb+0x7b6>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 800650a:	6832      	ldr	r2, [r6, #0]
 800650c:	2104      	movs	r1, #4
 800650e:	6838      	ldr	r0, [r7, #0]
 8006510:	f7fe fb8e 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8006514:	4642      	mov	r2, r8
 8006516:	7963      	ldrb	r3, [r4, #5]
 8006518:	4213      	tst	r3, r2
 800651a:	d001      	beq.n	8006520 <lv_indev_read_timer_cb+0x7b0>
        indev_obj_act = NULL;
 800651c:	4652      	mov	r2, sl
 800651e:	603a      	str	r2, [r7, #0]
                if(indev_reset_check(&i->proc)) return;
 8006520:	079b      	lsls	r3, r3, #30
 8006522:	d500      	bpl.n	8006526 <lv_indev_read_timer_cb+0x7b6>
 8006524:	e4d3      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8006526:	6832      	ldr	r2, [r6, #0]
 8006528:	2107      	movs	r1, #7
 800652a:	6838      	ldr	r0, [r7, #0]
 800652c:	f7fe fb80 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8006530:	4642      	mov	r2, r8
 8006532:	7963      	ldrb	r3, [r4, #5]
 8006534:	421a      	tst	r2, r3
 8006536:	d000      	beq.n	800653a <lv_indev_read_timer_cb+0x7ca>
        indev_obj_act = NULL;
 8006538:	603d      	str	r5, [r7, #0]
            if(indev_reset_check(&i->proc)) return;
 800653a:	079b      	lsls	r3, r3, #30
 800653c:	d400      	bmi.n	8006540 <lv_indev_read_timer_cb+0x7d0>
 800653e:	e661      	b.n	8006204 <lv_indev_read_timer_cb+0x494>
        indev_proc_reset_query_handler(indev_act);
 8006540:	6834      	ldr	r4, [r6, #0]
 8006542:	e47c      	b.n	8005e3e <lv_indev_read_timer_cb+0xce>
            lv_group_send_data(g, LV_KEY_ESC);
 8006544:	f7fe ff9e 	bl	8005484 <lv_group_send_data>
    if(proc->reset_query) {
 8006548:	4642      	mov	r2, r8
 800654a:	7963      	ldrb	r3, [r4, #5]
 800654c:	421a      	tst	r2, r3
 800654e:	d001      	beq.n	8006554 <lv_indev_read_timer_cb+0x7e4>
        indev_obj_act = NULL;
 8006550:	465a      	mov	r2, fp
 8006552:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 8006554:	079b      	lsls	r3, r3, #30
            if(indev_reset_check(&i->proc)) return;
 8006556:	0fda      	lsrs	r2, r3, #31
 8006558:	4693      	mov	fp, r2
 800655a:	2b00      	cmp	r3, #0
 800655c:	da00      	bge.n	8006560 <lv_indev_read_timer_cb+0x7f0>
 800655e:	e4b6      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, indev_act);
 8006560:	6832      	ldr	r2, [r6, #0]
 8006562:	2120      	movs	r1, #32
 8006564:	6838      	ldr	r0, [r7, #0]
 8006566:	f7fe fb63 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 800656a:	4642      	mov	r2, r8
 800656c:	7963      	ldrb	r3, [r4, #5]
 800656e:	4213      	tst	r3, r2
 8006570:	d100      	bne.n	8006574 <lv_indev_read_timer_cb+0x804>
 8006572:	e678      	b.n	8006266 <lv_indev_read_timer_cb+0x4f6>
 8006574:	e6b0      	b.n	80062d8 <lv_indev_read_timer_cb+0x568>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, indev_act);
 8006576:	6832      	ldr	r2, [r6, #0]
 8006578:	2102      	movs	r1, #2
 800657a:	6838      	ldr	r0, [r7, #0]
 800657c:	f7fe fb58 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8006580:	4642      	mov	r2, r8
 8006582:	7963      	ldrb	r3, [r4, #5]
 8006584:	421a      	tst	r2, r3
 8006586:	d001      	beq.n	800658c <lv_indev_read_timer_cb+0x81c>
        indev_obj_act = NULL;
 8006588:	9a00      	ldr	r2, [sp, #0]
 800658a:	603a      	str	r2, [r7, #0]
            if(indev_reset_check(&i->proc)) return;
 800658c:	079a      	lsls	r2, r3, #30
 800658e:	d400      	bmi.n	8006592 <lv_indev_read_timer_cb+0x822>
 8006590:	e5d6      	b.n	8006140 <lv_indev_read_timer_cb+0x3d0>
        indev_proc_reset_query_handler(indev_act);
 8006592:	6834      	ldr	r4, [r6, #0]
 8006594:	e453      	b.n	8005e3e <lv_indev_read_timer_cb+0xce>
            i->proc.long_pr_sent = 1;
 8006596:	2201      	movs	r2, #1
 8006598:	7963      	ldrb	r3, [r4, #5]
 800659a:	4313      	orrs	r3, r2
 800659c:	7163      	strb	r3, [r4, #5]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 800659e:	f00d fb15 	bl	8013bcc <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 80065a2:	9b03      	ldr	r3, [sp, #12]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 80065a4:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	2b0a      	cmp	r3, #10
 80065aa:	d071      	beq.n	8006690 <lv_indev_read_timer_cb+0x920>
            i->proc.long_pr_sent = 1;
 80065ac:	2201      	movs	r2, #1
 80065ae:	7963      	ldrb	r3, [r4, #5]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	7163      	strb	r3, [r4, #5]
    if(data->enc_diff != 0) {
 80065b4:	ab02      	add	r3, sp, #8
 80065b6:	220c      	movs	r2, #12
 80065b8:	5e9b      	ldrsh	r3, [r3, r2]
            i->proc.long_pr_sent = 1;
 80065ba:	e4cc      	b.n	8005f56 <lv_indev_read_timer_cb+0x1e6>
                lv_group_send_data(g, LV_KEY_ENTER);
 80065bc:	f7fe ff62 	bl	8005484 <lv_group_send_data>
    if(proc->reset_query) {
 80065c0:	4642      	mov	r2, r8
 80065c2:	7963      	ldrb	r3, [r4, #5]
 80065c4:	421a      	tst	r2, r3
 80065c6:	d001      	beq.n	80065cc <lv_indev_read_timer_cb+0x85c>
        indev_obj_act = NULL;
 80065c8:	9a00      	ldr	r2, [sp, #0]
 80065ca:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 80065cc:	079b      	lsls	r3, r3, #30
                if(indev_reset_check(&i->proc)) return;
 80065ce:	0fda      	lsrs	r2, r3, #31
 80065d0:	4692      	mov	sl, r2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	da00      	bge.n	80065d8 <lv_indev_read_timer_cb+0x868>
 80065d6:	e47a      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
                if(!dis) lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 80065d8:	2101      	movs	r1, #1
 80065da:	6832      	ldr	r2, [r6, #0]
 80065dc:	e5f8      	b.n	80061d0 <lv_indev_read_timer_cb+0x460>
                                          lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_SCROLLABLE);
 80065de:	2110      	movs	r1, #16
 80065e0:	6838      	ldr	r0, [r7, #0]
 80065e2:	f001 fc97 	bl	8007f14 <lv_obj_has_flag>
 80065e6:	4683      	mov	fp, r0
            bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d000      	beq.n	80065ee <lv_indev_read_timer_cb+0x87e>
 80065ec:	e6d7      	b.n	800639e <lv_indev_read_timer_cb+0x62e>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 80065ee:	6832      	ldr	r2, [r6, #0]
 80065f0:	2108      	movs	r1, #8
 80065f2:	6838      	ldr	r0, [r7, #0]
 80065f4:	f7fe fb1c 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 80065f8:	4640      	mov	r0, r8
 80065fa:	4642      	mov	r2, r8
 80065fc:	7963      	ldrb	r3, [r4, #5]
 80065fe:	4018      	ands	r0, r3
 8006600:	421a      	tst	r2, r3
 8006602:	d001      	beq.n	8006608 <lv_indev_read_timer_cb+0x898>
        indev_obj_act = NULL;
 8006604:	465a      	mov	r2, fp
 8006606:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 8006608:	2101      	movs	r1, #1
 800660a:	085a      	lsrs	r2, r3, #1
                if(indev_reset_check(&i->proc)) return;
 800660c:	4211      	tst	r1, r2
 800660e:	d000      	beq.n	8006612 <lv_indev_read_timer_cb+0x8a2>
 8006610:	e45d      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8006612:	4219      	tst	r1, r3
 8006614:	d025      	beq.n	8006662 <lv_indev_read_timer_cb+0x8f2>
    if(proc->reset_query) {
 8006616:	2800      	cmp	r0, #0
 8006618:	d003      	beq.n	8006622 <lv_indev_read_timer_cb+0x8b2>
        indev_obj_act = NULL;
 800661a:	603d      	str	r5, [r7, #0]
                if(indev_reset_check(&i->proc)) return;
 800661c:	07d3      	lsls	r3, r2, #31
 800661e:	d500      	bpl.n	8006622 <lv_indev_read_timer_cb+0x8b2>
 8006620:	e455      	b.n	8005ece <lv_indev_read_timer_cb+0x15e>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8006622:	6832      	ldr	r2, [r6, #0]
 8006624:	2107      	movs	r1, #7
 8006626:	6838      	ldr	r0, [r7, #0]
 8006628:	f7fe fb02 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 800662c:	4642      	mov	r2, r8
 800662e:	7963      	ldrb	r3, [r4, #5]
 8006630:	4213      	tst	r3, r2
 8006632:	d100      	bne.n	8006636 <lv_indev_read_timer_cb+0x8c6>
 8006634:	e6fe      	b.n	8006434 <lv_indev_read_timer_cb+0x6c4>
        indev_obj_act = NULL;
 8006636:	603d      	str	r5, [r7, #0]
    return proc->reset_query ? true : false;
 8006638:	e6fc      	b.n	8006434 <lv_indev_read_timer_cb+0x6c4>
            else if(!i->proc.long_pr_sent) {
 800663a:	2101      	movs	r1, #1
 800663c:	7963      	ldrb	r3, [r4, #5]
 800663e:	420b      	tst	r3, r1
 8006640:	d000      	beq.n	8006644 <lv_indev_read_timer_cb+0x8d4>
 8006642:	e480      	b.n	8005f46 <lv_indev_read_timer_cb+0x1d6>
                lv_group_set_editing(g, true); /*Set edit mode*/
 8006644:	4650      	mov	r0, sl
 8006646:	f7fe ff37 	bl	80054b8 <lv_group_set_editing>
 800664a:	e47c      	b.n	8005f46 <lv_indev_read_timer_cb+0x1d6>
                                          lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_SCROLLABLE);
 800664c:	2110      	movs	r1, #16
 800664e:	6838      	ldr	r0, [r7, #0]
 8006650:	f001 fc60 	bl	8007f14 <lv_obj_has_flag>
            bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 8006654:	2800      	cmp	r0, #0
 8006656:	d000      	beq.n	800665a <lv_indev_read_timer_cb+0x8ea>
 8006658:	e70b      	b.n	8006472 <lv_indev_read_timer_cb+0x702>
            if(lv_group_get_editing(g) == true || editable_or_scrollable == false) {
 800665a:	4650      	mov	r0, sl
 800665c:	f7fe ff8a 	bl	8005574 <lv_group_get_editing>
 8006660:	e70d      	b.n	800647e <lv_indev_read_timer_cb+0x70e>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8006662:	2104      	movs	r1, #4
 8006664:	6832      	ldr	r2, [r6, #0]
 8006666:	6838      	ldr	r0, [r7, #0]
 8006668:	f7fe fae2 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 800666c:	4641      	mov	r1, r8
 800666e:	7963      	ldrb	r3, [r4, #5]
 8006670:	085a      	lsrs	r2, r3, #1
 8006672:	420b      	tst	r3, r1
 8006674:	d0d2      	beq.n	800661c <lv_indev_read_timer_cb+0x8ac>
 8006676:	e7d0      	b.n	800661a <lv_indev_read_timer_cb+0x8aa>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8006678:	6832      	ldr	r2, [r6, #0]
 800667a:	6838      	ldr	r0, [r7, #0]
 800667c:	3904      	subs	r1, #4
 800667e:	f7fe fad7 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 8006682:	4642      	mov	r2, r8
 8006684:	7963      	ldrb	r3, [r4, #5]
 8006686:	4213      	tst	r3, r2
 8006688:	d100      	bne.n	800668c <lv_indev_read_timer_cb+0x91c>
 800668a:	e5aa      	b.n	80061e2 <lv_indev_read_timer_cb+0x472>
        indev_obj_act = NULL;
 800668c:	603d      	str	r5, [r7, #0]
 800668e:	e5a8      	b.n	80061e2 <lv_indev_read_timer_cb+0x472>
                bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 8006690:	6838      	ldr	r0, [r7, #0]
 8006692:	f001 fdbd 	bl	8008210 <lv_obj_is_editable>
 8006696:	2800      	cmp	r0, #0
 8006698:	d035      	beq.n	8006706 <lv_indev_read_timer_cb+0x996>
                    if(lv_group_get_obj_count(g) > 1) {
 800669a:	4650      	mov	r0, sl
 800669c:	f7fe ff72 	bl	8005584 <lv_group_get_obj_count>
 80066a0:	2801      	cmp	r0, #1
 80066a2:	d983      	bls.n	80065ac <lv_indev_read_timer_cb+0x83c>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 80066a4:	4650      	mov	r0, sl
 80066a6:	f7fe ff65 	bl	8005574 <lv_group_get_editing>
 80066aa:	2301      	movs	r3, #1
 80066ac:	4043      	eors	r3, r0
 80066ae:	b2d9      	uxtb	r1, r3
 80066b0:	4650      	mov	r0, sl
 80066b2:	f7fe ff01 	bl	80054b8 <lv_group_set_editing>
                        lv_obj_clear_state(indev_obj_act, LV_STATE_PRESSED);    /*Remove the pressed state manually*/
 80066b6:	2120      	movs	r1, #32
 80066b8:	6838      	ldr	r0, [r7, #0]
 80066ba:	f001 fc21 	bl	8007f00 <lv_obj_clear_state>
 80066be:	e775      	b.n	80065ac <lv_indev_read_timer_cb+0x83c>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 80066c0:	6832      	ldr	r2, [r6, #0]
 80066c2:	3904      	subs	r1, #4
 80066c4:	e6dd      	b.n	8006482 <lv_indev_read_timer_cb+0x712>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80066c6:	2100      	movs	r1, #0
 80066c8:	f7fe fef6 	bl	80054b8 <lv_group_set_editing>
                lv_group_focus_prev(g);
 80066cc:	4650      	mov	r0, sl
 80066ce:	f7fe febf 	bl	8005450 <lv_group_focus_prev>
    if(proc->reset_query) {
 80066d2:	4642      	mov	r2, r8
 80066d4:	7963      	ldrb	r3, [r4, #5]
 80066d6:	4213      	tst	r3, r2
 80066d8:	d100      	bne.n	80066dc <lv_indev_read_timer_cb+0x96c>
 80066da:	e582      	b.n	80061e2 <lv_indev_read_timer_cb+0x472>
        indev_obj_act = NULL;
 80066dc:	603d      	str	r5, [r7, #0]
 80066de:	e580      	b.n	80061e2 <lv_indev_read_timer_cb+0x472>
                    lv_obj_clear_state(indev_obj_act, LV_STATE_PRESSED);    /*Remove the pressed state manually*/
 80066e0:	2120      	movs	r1, #32
 80066e2:	6838      	ldr	r0, [r7, #0]
 80066e4:	f001 fc0c 	bl	8007f00 <lv_obj_clear_state>
 80066e8:	e42d      	b.n	8005f46 <lv_indev_read_timer_cb+0x1d6>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80066ea:	2100      	movs	r1, #0
 80066ec:	4650      	mov	r0, sl
 80066ee:	f7fe fee3 	bl	80054b8 <lv_group_set_editing>
                lv_group_focus_next(g);
 80066f2:	4650      	mov	r0, sl
 80066f4:	f7fe fe92 	bl	800541c <lv_group_focus_next>
    if(proc->reset_query) {
 80066f8:	4642      	mov	r2, r8
 80066fa:	7963      	ldrb	r3, [r4, #5]
 80066fc:	4213      	tst	r3, r2
 80066fe:	d100      	bne.n	8006702 <lv_indev_read_timer_cb+0x992>
 8006700:	e56f      	b.n	80061e2 <lv_indev_read_timer_cb+0x472>
        indev_obj_act = NULL;
 8006702:	603d      	str	r5, [r7, #0]
 8006704:	e56d      	b.n	80061e2 <lv_indev_read_timer_cb+0x472>
                                              lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_SCROLLABLE);
 8006706:	2110      	movs	r1, #16
 8006708:	6838      	ldr	r0, [r7, #0]
 800670a:	f001 fc03 	bl	8007f14 <lv_obj_has_flag>
                bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 800670e:	2800      	cmp	r0, #0
 8006710:	d1c3      	bne.n	800669a <lv_indev_read_timer_cb+0x92a>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8006712:	6832      	ldr	r2, [r6, #0]
 8006714:	2105      	movs	r1, #5
 8006716:	6838      	ldr	r0, [r7, #0]
 8006718:	f7fe fa8a 	bl	8004c30 <lv_event_send>
    if(proc->reset_query) {
 800671c:	4642      	mov	r2, r8
 800671e:	7963      	ldrb	r3, [r4, #5]
 8006720:	4213      	tst	r3, r2
 8006722:	d000      	beq.n	8006726 <lv_indev_read_timer_cb+0x9b6>
        indev_obj_act = NULL;
 8006724:	603d      	str	r5, [r7, #0]
                    if(indev_reset_check(&i->proc)) return;
 8006726:	079b      	lsls	r3, r3, #30
 8006728:	d400      	bmi.n	800672c <lv_indev_read_timer_cb+0x9bc>
 800672a:	e73f      	b.n	80065ac <lv_indev_read_timer_cb+0x83c>
        indev_proc_reset_query_handler(indev_act);
 800672c:	6834      	ldr	r4, [r6, #0]
 800672e:	f7ff fb86 	bl	8005e3e <lv_indev_read_timer_cb+0xce>
 8006732:	46c0      	nop			; (mov r8, r8)

08006734 <find_snap_point_y>:
 * @param ofs offset to snap points. Useful to get a snap point in an imagined case
 *            what if children are already moved by this value
 * @return the distance of the snap point.
 */
static lv_coord_t find_snap_point_y(const lv_obj_t * obj, lv_coord_t min, lv_coord_t max, lv_coord_t ofs)
{
 8006734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006736:	4657      	mov	r7, sl
 8006738:	464e      	mov	r6, r9
 800673a:	46de      	mov	lr, fp
 800673c:	4645      	mov	r5, r8
 800673e:	b5e0      	push	{r5, r6, r7, lr}
 8006740:	b087      	sub	sp, #28
 8006742:	0006      	movs	r6, r0
 8006744:	4689      	mov	r9, r1
 8006746:	469a      	mov	sl, r3
 8006748:	9201      	str	r2, [sp, #4]
    lv_scroll_snap_t align = lv_obj_get_scroll_snap_y(obj);
 800674a:	f004 fa13 	bl	800ab74 <lv_obj_get_scroll_snap_y>
 800674e:	1e07      	subs	r7, r0, #0
    if(align == LV_SCROLL_SNAP_NONE) return 0;
 8006750:	d107      	bne.n	8006762 <find_snap_point_y+0x2e>
 8006752:	2000      	movs	r0, #0
            }
        }
    }

    return dist == LV_COORD_MAX ? 0 : -dist;
}
 8006754:	b007      	add	sp, #28
 8006756:	bcf0      	pop	{r4, r5, r6, r7}
 8006758:	46bb      	mov	fp, r7
 800675a:	46b2      	mov	sl, r6
 800675c:	46a9      	mov	r9, r5
 800675e:	46a0      	mov	r8, r4
 8006760:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006762:	2210      	movs	r2, #16
 8006764:	2100      	movs	r1, #0
 8006766:	0030      	movs	r0, r6
 8006768:	f005 ff2c 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_bottom(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800676c:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 800676e:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006770:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006772:	2100      	movs	r1, #0
 8006774:	0030      	movs	r0, r6
    return (lv_coord_t)v.num;
 8006776:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006778:	f005 ff24 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800677c:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800677e:	9004      	str	r0, [sp, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006780:	0030      	movs	r0, r6
    return (lv_coord_t)v.num;
 8006782:	9303      	str	r3, [sp, #12]
 8006784:	f007 fb60 	bl	800de48 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8006788:	2800      	cmp	r0, #0
 800678a:	d0e2      	beq.n	8006752 <find_snap_point_y+0x1e>
    lv_coord_t dist = LV_COORD_MAX;
 800678c:	4b31      	ldr	r3, [pc, #196]	; (8006854 <find_snap_point_y+0x120>)
    for(i = 0; i < child_cnt; i++) {
 800678e:	2400      	movs	r4, #0
    lv_coord_t dist = LV_COORD_MAX;
 8006790:	9302      	str	r3, [sp, #8]
 8006792:	003b      	movs	r3, r7
 8006794:	0007      	movs	r7, r0
 8006796:	4698      	mov	r8, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 8006798:	68b3      	ldr	r3, [r6, #8]
 800679a:	00a2      	lsls	r2, r4, #2
 800679c:	681b      	ldr	r3, [r3, #0]
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800679e:	492e      	ldr	r1, [pc, #184]	; (8006858 <find_snap_point_y+0x124>)
        lv_obj_t * child = obj->spec_attr->children[i];
 80067a0:	58d5      	ldr	r5, [r2, r3]
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80067a2:	0028      	movs	r0, r5
 80067a4:	f001 fbbe 	bl	8007f24 <lv_obj_has_flag_any>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d10d      	bne.n	80067c8 <find_snap_point_y+0x94>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPPABLE)) {
 80067ac:	2180      	movs	r1, #128	; 0x80
 80067ae:	0028      	movs	r0, r5
 80067b0:	0149      	lsls	r1, r1, #5
 80067b2:	f001 fbaf 	bl	8007f14 <lv_obj_has_flag>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d006      	beq.n	80067c8 <find_snap_point_y+0x94>
            switch(align) {
 80067ba:	4643      	mov	r3, r8
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d042      	beq.n	8006846 <find_snap_point_y+0x112>
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d026      	beq.n	8006812 <find_snap_point_y+0xde>
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d009      	beq.n	80067dc <find_snap_point_y+0xa8>
    for(i = 0; i < child_cnt; i++) {
 80067c8:	3401      	adds	r4, #1
 80067ca:	42a7      	cmp	r7, r4
 80067cc:	d1e4      	bne.n	8006798 <find_snap_point_y+0x64>
    return dist == LV_COORD_MAX ? 0 : -dist;
 80067ce:	4b21      	ldr	r3, [pc, #132]	; (8006854 <find_snap_point_y+0x120>)
 80067d0:	9a02      	ldr	r2, [sp, #8]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d0bd      	beq.n	8006752 <find_snap_point_y+0x1e>
 80067d6:	4250      	negs	r0, r2
 80067d8:	b200      	sxth	r0, r0
 80067da:	e7bb      	b.n	8006754 <find_snap_point_y+0x20>
                    y_parent = obj->coords.y1 + pad_top;
 80067dc:	8a72      	ldrh	r2, [r6, #18]
            y_child += ofs;
 80067de:	8a6b      	ldrh	r3, [r5, #18]
                    y_parent = obj->coords.y1 + pad_top;
 80067e0:	445a      	add	r2, fp
 80067e2:	b292      	uxth	r2, r2
            y_child += ofs;
 80067e4:	4453      	add	r3, sl
 80067e6:	b299      	uxth	r1, r3
 80067e8:	b21b      	sxth	r3, r3
            if(y_child >= min && y_child <= max) {
 80067ea:	454b      	cmp	r3, r9
 80067ec:	dbec      	blt.n	80067c8 <find_snap_point_y+0x94>
 80067ee:	9801      	ldr	r0, [sp, #4]
 80067f0:	4283      	cmp	r3, r0
 80067f2:	dce9      	bgt.n	80067c8 <find_snap_point_y+0x94>
                lv_coord_t y = y_child -  y_parent;
 80067f4:	1a8a      	subs	r2, r1, r2
 80067f6:	b212      	sxth	r2, r2
                if(LV_ABS(y) < LV_ABS(dist)) dist = y;
 80067f8:	17d3      	asrs	r3, r2, #31
 80067fa:	18d1      	adds	r1, r2, r3
 80067fc:	4059      	eors	r1, r3
 80067fe:	9b02      	ldr	r3, [sp, #8]
 8006800:	b289      	uxth	r1, r1
 8006802:	17d8      	asrs	r0, r3, #31
 8006804:	181b      	adds	r3, r3, r0
 8006806:	4043      	eors	r3, r0
 8006808:	b29b      	uxth	r3, r3
 800680a:	4299      	cmp	r1, r3
 800680c:	d2dc      	bcs.n	80067c8 <find_snap_point_y+0x94>
 800680e:	9202      	str	r2, [sp, #8]
 8006810:	e7da      	b.n	80067c8 <find_snap_point_y+0x94>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006812:	8aea      	ldrh	r2, [r5, #22]
                    y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 8006814:	8a6b      	ldrh	r3, [r5, #18]
 8006816:	3201      	adds	r2, #1
 8006818:	1ad2      	subs	r2, r2, r3
 800681a:	b212      	sxth	r2, r2
 800681c:	0fd1      	lsrs	r1, r2, #31
 800681e:	188a      	adds	r2, r1, r2
 8006820:	8af1      	ldrh	r1, [r6, #22]
                    y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 8006822:	8a70      	ldrh	r0, [r6, #18]
                    y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 8006824:	1052      	asrs	r2, r2, #1
 8006826:	3101      	adds	r1, #1
 8006828:	189b      	adds	r3, r3, r2
 800682a:	1a09      	subs	r1, r1, r0
                    y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 800682c:	9a05      	ldr	r2, [sp, #20]
 800682e:	b209      	sxth	r1, r1
 8006830:	1a89      	subs	r1, r1, r2
 8006832:	9a03      	ldr	r2, [sp, #12]
 8006834:	4458      	add	r0, fp
 8006836:	1a89      	subs	r1, r1, r2
 8006838:	0fca      	lsrs	r2, r1, #31
 800683a:	1852      	adds	r2, r2, r1
 800683c:	1052      	asrs	r2, r2, #1
 800683e:	1812      	adds	r2, r2, r0
                    y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 8006840:	b29b      	uxth	r3, r3
                    y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 8006842:	b292      	uxth	r2, r2
                    break;
 8006844:	e7ce      	b.n	80067e4 <find_snap_point_y+0xb0>
                    y_parent = obj->coords.y2 - pad_bottom;
 8006846:	9b04      	ldr	r3, [sp, #16]
 8006848:	8af2      	ldrh	r2, [r6, #22]
 800684a:	1ad2      	subs	r2, r2, r3
 800684c:	b292      	uxth	r2, r2
            y_child += ofs;
 800684e:	8aeb      	ldrh	r3, [r5, #22]
                    break;
 8006850:	e7c8      	b.n	80067e4 <find_snap_point_y+0xb0>
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	00001fff 	.word	0x00001fff
 8006858:	00040001 	.word	0x00040001

0800685c <find_snap_point_x>:
{
 800685c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800685e:	4657      	mov	r7, sl
 8006860:	464e      	mov	r6, r9
 8006862:	46de      	mov	lr, fp
 8006864:	4645      	mov	r5, r8
 8006866:	b5e0      	push	{r5, r6, r7, lr}
 8006868:	b087      	sub	sp, #28
 800686a:	0006      	movs	r6, r0
 800686c:	4689      	mov	r9, r1
 800686e:	469a      	mov	sl, r3
 8006870:	9201      	str	r2, [sp, #4]
    lv_scroll_snap_t align = lv_obj_get_scroll_snap_x(obj);
 8006872:	f004 f975 	bl	800ab60 <lv_obj_get_scroll_snap_x>
 8006876:	1e07      	subs	r7, r0, #0
    if(align == LV_SCROLL_SNAP_NONE) return 0;
 8006878:	d107      	bne.n	800688a <find_snap_point_x+0x2e>
 800687a:	2000      	movs	r0, #0
}
 800687c:	b007      	add	sp, #28
 800687e:	bcf0      	pop	{r4, r5, r6, r7}
 8006880:	46bb      	mov	fp, r7
 8006882:	46b2      	mov	sl, r6
 8006884:	46a9      	mov	r9, r5
 8006886:	46a0      	mov	r8, r4
 8006888:	bdf0      	pop	{r4, r5, r6, r7, pc}
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800688a:	2212      	movs	r2, #18
 800688c:	2100      	movs	r1, #0
 800688e:	0030      	movs	r0, r6
 8006890:	f005 fe98 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006894:	2213      	movs	r2, #19
    return (lv_coord_t)v.num;
 8006896:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006898:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800689a:	2100      	movs	r1, #0
 800689c:	0030      	movs	r0, r6
    return (lv_coord_t)v.num;
 800689e:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80068a0:	f005 fe90 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80068a4:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80068a6:	9004      	str	r0, [sp, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80068a8:	0030      	movs	r0, r6
    return (lv_coord_t)v.num;
 80068aa:	9303      	str	r3, [sp, #12]
 80068ac:	f007 facc 	bl	800de48 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d0e2      	beq.n	800687a <find_snap_point_x+0x1e>
    lv_coord_t dist = LV_COORD_MAX;
 80068b4:	4b31      	ldr	r3, [pc, #196]	; (800697c <find_snap_point_x+0x120>)
    for(i = 0; i < child_cnt; i++) {
 80068b6:	2400      	movs	r4, #0
    lv_coord_t dist = LV_COORD_MAX;
 80068b8:	9302      	str	r3, [sp, #8]
 80068ba:	003b      	movs	r3, r7
 80068bc:	0007      	movs	r7, r0
 80068be:	4698      	mov	r8, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 80068c0:	68b3      	ldr	r3, [r6, #8]
 80068c2:	00a2      	lsls	r2, r4, #2
 80068c4:	681b      	ldr	r3, [r3, #0]
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80068c6:	492e      	ldr	r1, [pc, #184]	; (8006980 <find_snap_point_x+0x124>)
        lv_obj_t * child = obj->spec_attr->children[i];
 80068c8:	58d5      	ldr	r5, [r2, r3]
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80068ca:	0028      	movs	r0, r5
 80068cc:	f001 fb2a 	bl	8007f24 <lv_obj_has_flag_any>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d10d      	bne.n	80068f0 <find_snap_point_x+0x94>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPPABLE)) {
 80068d4:	2180      	movs	r1, #128	; 0x80
 80068d6:	0028      	movs	r0, r5
 80068d8:	0149      	lsls	r1, r1, #5
 80068da:	f001 fb1b 	bl	8007f14 <lv_obj_has_flag>
 80068de:	2800      	cmp	r0, #0
 80068e0:	d006      	beq.n	80068f0 <find_snap_point_x+0x94>
            switch(align) {
 80068e2:	4643      	mov	r3, r8
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d042      	beq.n	800696e <find_snap_point_x+0x112>
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d026      	beq.n	800693a <find_snap_point_x+0xde>
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d009      	beq.n	8006904 <find_snap_point_x+0xa8>
    for(i = 0; i < child_cnt; i++) {
 80068f0:	3401      	adds	r4, #1
 80068f2:	42a7      	cmp	r7, r4
 80068f4:	d1e4      	bne.n	80068c0 <find_snap_point_x+0x64>
    return dist == LV_COORD_MAX ? 0 : -dist;
 80068f6:	4b21      	ldr	r3, [pc, #132]	; (800697c <find_snap_point_x+0x120>)
 80068f8:	9a02      	ldr	r2, [sp, #8]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d0bd      	beq.n	800687a <find_snap_point_x+0x1e>
 80068fe:	4250      	negs	r0, r2
 8006900:	b200      	sxth	r0, r0
 8006902:	e7bb      	b.n	800687c <find_snap_point_x+0x20>
                    x_parent = obj->coords.x1 + pad_left;
 8006904:	8a32      	ldrh	r2, [r6, #16]
            x_child += ofs;
 8006906:	8a2b      	ldrh	r3, [r5, #16]
                    x_parent = obj->coords.x1 + pad_left;
 8006908:	445a      	add	r2, fp
 800690a:	b292      	uxth	r2, r2
            x_child += ofs;
 800690c:	4453      	add	r3, sl
 800690e:	b299      	uxth	r1, r3
 8006910:	b21b      	sxth	r3, r3
            if(x_child >= min && x_child <= max) {
 8006912:	454b      	cmp	r3, r9
 8006914:	dbec      	blt.n	80068f0 <find_snap_point_x+0x94>
 8006916:	9801      	ldr	r0, [sp, #4]
 8006918:	4283      	cmp	r3, r0
 800691a:	dce9      	bgt.n	80068f0 <find_snap_point_x+0x94>
                lv_coord_t x = x_child -  x_parent;
 800691c:	1a8a      	subs	r2, r1, r2
 800691e:	b212      	sxth	r2, r2
                if(LV_ABS(x) < LV_ABS(dist)) dist = x;
 8006920:	17d3      	asrs	r3, r2, #31
 8006922:	18d1      	adds	r1, r2, r3
 8006924:	4059      	eors	r1, r3
 8006926:	9b02      	ldr	r3, [sp, #8]
 8006928:	b289      	uxth	r1, r1
 800692a:	17d8      	asrs	r0, r3, #31
 800692c:	181b      	adds	r3, r3, r0
 800692e:	4043      	eors	r3, r0
 8006930:	b29b      	uxth	r3, r3
 8006932:	4299      	cmp	r1, r3
 8006934:	d2dc      	bcs.n	80068f0 <find_snap_point_x+0x94>
 8006936:	9202      	str	r2, [sp, #8]
 8006938:	e7da      	b.n	80068f0 <find_snap_point_x+0x94>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800693a:	8aaa      	ldrh	r2, [r5, #20]
                    x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 800693c:	8a2b      	ldrh	r3, [r5, #16]
 800693e:	3201      	adds	r2, #1
 8006940:	1ad2      	subs	r2, r2, r3
 8006942:	b212      	sxth	r2, r2
 8006944:	0fd1      	lsrs	r1, r2, #31
 8006946:	188a      	adds	r2, r1, r2
 8006948:	8ab1      	ldrh	r1, [r6, #20]
                    x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 800694a:	8a30      	ldrh	r0, [r6, #16]
                    x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 800694c:	1052      	asrs	r2, r2, #1
 800694e:	3101      	adds	r1, #1
 8006950:	189b      	adds	r3, r3, r2
 8006952:	1a09      	subs	r1, r1, r0
                    x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 8006954:	9a05      	ldr	r2, [sp, #20]
 8006956:	b209      	sxth	r1, r1
 8006958:	1a89      	subs	r1, r1, r2
 800695a:	9a03      	ldr	r2, [sp, #12]
 800695c:	4458      	add	r0, fp
 800695e:	1a89      	subs	r1, r1, r2
 8006960:	0fca      	lsrs	r2, r1, #31
 8006962:	1852      	adds	r2, r2, r1
 8006964:	1052      	asrs	r2, r2, #1
 8006966:	1812      	adds	r2, r2, r0
                    x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 8006968:	b29b      	uxth	r3, r3
                    x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 800696a:	b292      	uxth	r2, r2
                    break;
 800696c:	e7ce      	b.n	800690c <find_snap_point_x+0xb0>
                    x_parent = obj->coords.x2 - pad_right;
 800696e:	9b04      	ldr	r3, [sp, #16]
 8006970:	8ab2      	ldrh	r2, [r6, #20]
 8006972:	1ad2      	subs	r2, r2, r3
 8006974:	b292      	uxth	r2, r2
            x_child += ofs;
 8006976:	8aab      	ldrh	r3, [r5, #20]
                    break;
 8006978:	e7c8      	b.n	800690c <find_snap_point_x+0xb0>
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	00001fff 	.word	0x00001fff
 8006980:	00040001 	.word	0x00040001

08006984 <elastic_diff>:
    return move;
}

static lv_coord_t elastic_diff(lv_obj_t * scroll_obj, lv_coord_t diff, lv_coord_t scroll_start, lv_coord_t scroll_end,
                               lv_dir_t dir)
{
 8006984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006986:	4646      	mov	r6, r8
 8006988:	464f      	mov	r7, r9
 800698a:	46d6      	mov	lr, sl
 800698c:	b5c0      	push	{r6, r7, lr}
 800698e:	001e      	movs	r6, r3
 8006990:	ab08      	add	r3, sp, #32
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	000c      	movs	r4, r1
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_ELASTIC)) {
 8006996:	2120      	movs	r1, #32
{
 8006998:	0005      	movs	r5, r0
 800699a:	0017      	movs	r7, r2
 800699c:	4698      	mov	r8, r3
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_ELASTIC)) {
 800699e:	f001 fab9 	bl	8007f14 <lv_obj_has_flag>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d02e      	beq.n	8006a04 <elastic_diff+0x80>
        /*If there is snapping in the current direction don't use the elastic factor because
         *it's natural that the first and last items are scrolled (snapped) in.*/
        lv_scroll_snap_t snap;
        snap = dir == LV_DIR_HOR ? lv_obj_get_scroll_snap_x(scroll_obj) : lv_obj_get_scroll_snap_y(scroll_obj);
 80069a6:	4643      	mov	r3, r8
 80069a8:	0028      	movs	r0, r5
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d034      	beq.n	8006a18 <elastic_diff+0x94>
 80069ae:	f004 f8e1 	bl	800ab74 <lv_obj_get_scroll_snap_y>
 80069b2:	4680      	mov	r8, r0

        lv_obj_t * act_obj = lv_indev_get_obj_act();
 80069b4:	f7fe ff2a 	bl	800580c <lv_indev_get_obj_act>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80069b8:	2210      	movs	r2, #16
 80069ba:	2100      	movs	r1, #0
 80069bc:	4681      	mov	r9, r0
 80069be:	0028      	movs	r0, r5
 80069c0:	f005 fe00 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80069c4:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80069c6:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80069c8:	2100      	movs	r1, #0
 80069ca:	0028      	movs	r0, r5
 80069cc:	f005 fdfa 	bl	800c5c4 <lv_obj_get_style_prop>
        }
        else {
            lv_coord_t pad_top = lv_obj_get_style_pad_top(scroll_obj, LV_PART_MAIN);
            lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(scroll_obj, LV_PART_MAIN);

            switch(snap) {
 80069d0:	4643      	mov	r3, r8
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d100      	bne.n	80069d8 <elastic_diff+0x54>
 80069d6:	e075      	b.n	8006ac4 <elastic_diff+0x140>
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d056      	beq.n	8006a8a <elastic_diff+0x106>
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d04d      	beq.n	8006a7c <elastic_diff+0xf8>
                    act_obj_point = act_obj->coords.y2;
                    break;
            }
        }

        if(scroll_end < 0) {
 80069e0:	2e00      	cmp	r6, #0
 80069e2:	da40      	bge.n	8006a66 <elastic_diff+0xe2>
        }
        else if(scroll_start < 0) {
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point < snap_point) return diff;

            /*Rounding*/
            if(diff < 0) diff -= ELASTIC_SLOWNESS_FACTOR / 2;
 80069e4:	2c00      	cmp	r4, #0
 80069e6:	db3b      	blt.n	8006a60 <elastic_diff+0xdc>
            if(diff > 0) diff += ELASTIC_SLOWNESS_FACTOR / 2;
 80069e8:	2c00      	cmp	r4, #0
 80069ea:	dd01      	ble.n	80069f0 <elastic_diff+0x6c>
 80069ec:	3402      	adds	r4, #2
 80069ee:	b224      	sxth	r4, r4
            return diff / ELASTIC_SLOWNESS_FACTOR;
 80069f0:	2003      	movs	r0, #3
 80069f2:	17e1      	asrs	r1, r4, #31
 80069f4:	4008      	ands	r0, r1
 80069f6:	1900      	adds	r0, r0, r4
 80069f8:	1080      	asrs	r0, r0, #2
        if(scroll_end + diff < 0) diff = - scroll_end;
        if(scroll_start - diff < 0) diff = scroll_start;
    }

    return diff;
}
 80069fa:	bce0      	pop	{r5, r6, r7}
 80069fc:	46ba      	mov	sl, r7
 80069fe:	46b1      	mov	r9, r6
 8006a00:	46a8      	mov	r8, r5
 8006a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(scroll_end + diff < 0) diff = - scroll_end;
 8006a04:	0020      	movs	r0, r4
 8006a06:	42e6      	cmn	r6, r4
 8006a08:	d502      	bpl.n	8006a10 <elastic_diff+0x8c>
 8006a0a:	4270      	negs	r0, r6
 8006a0c:	b200      	sxth	r0, r0
        if(scroll_start - diff < 0) diff = scroll_start;
 8006a0e:	0004      	movs	r4, r0
 8006a10:	1b3c      	subs	r4, r7, r4
 8006a12:	d5f2      	bpl.n	80069fa <elastic_diff+0x76>
 8006a14:	0038      	movs	r0, r7
 8006a16:	e7f0      	b.n	80069fa <elastic_diff+0x76>
        snap = dir == LV_DIR_HOR ? lv_obj_get_scroll_snap_x(scroll_obj) : lv_obj_get_scroll_snap_y(scroll_obj);
 8006a18:	f004 f8a2 	bl	800ab60 <lv_obj_get_scroll_snap_x>
 8006a1c:	4680      	mov	r8, r0
        lv_obj_t * act_obj = lv_indev_get_obj_act();
 8006a1e:	f7fe fef5 	bl	800580c <lv_indev_get_obj_act>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006a22:	2212      	movs	r2, #18
 8006a24:	2100      	movs	r1, #0
 8006a26:	4681      	mov	r9, r0
 8006a28:	0028      	movs	r0, r5
 8006a2a:	f005 fdcb 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006a2e:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006a30:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006a32:	2100      	movs	r1, #0
 8006a34:	0028      	movs	r0, r5
 8006a36:	f005 fdc5 	bl	800c5c4 <lv_obj_get_style_prop>
            switch(snap) {
 8006a3a:	4643      	mov	r3, r8
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d048      	beq.n	8006ad2 <elastic_diff+0x14e>
 8006a40:	2b03      	cmp	r3, #3
 8006a42:	d04d      	beq.n	8006ae0 <elastic_diff+0x15c>
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d1cb      	bne.n	80069e0 <elastic_diff+0x5c>
                    act_obj_point = act_obj->coords.x1;
 8006a48:	464a      	mov	r2, r9
                    snap_point = scroll_obj->coords.x1 + pad_left;
 8006a4a:	8a2b      	ldrh	r3, [r5, #16]
                    act_obj_point = act_obj->coords.x1;
 8006a4c:	2110      	movs	r1, #16
 8006a4e:	5e52      	ldrsh	r2, [r2, r1]
                    snap_point = scroll_obj->coords.x1 + pad_left;
 8006a50:	4453      	add	r3, sl
 8006a52:	b21b      	sxth	r3, r3
        if(scroll_end < 0) {
 8006a54:	2e00      	cmp	r6, #0
 8006a56:	db0d      	blt.n	8006a74 <elastic_diff+0xf0>
        else if(scroll_start < 0) {
 8006a58:	2f00      	cmp	r7, #0
 8006a5a:	db07      	blt.n	8006a6c <elastic_diff+0xe8>
 8006a5c:	0020      	movs	r0, r4
 8006a5e:	e7cc      	b.n	80069fa <elastic_diff+0x76>
            if(diff < 0) diff -= ELASTIC_SLOWNESS_FACTOR / 2;
 8006a60:	3c02      	subs	r4, #2
 8006a62:	b224      	sxth	r4, r4
 8006a64:	e7c0      	b.n	80069e8 <elastic_diff+0x64>
        else if(scroll_start < 0) {
 8006a66:	2f00      	cmp	r7, #0
 8006a68:	dbbc      	blt.n	80069e4 <elastic_diff+0x60>
 8006a6a:	e7f7      	b.n	8006a5c <elastic_diff+0xd8>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point < snap_point) return diff;
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	dab9      	bge.n	80069e4 <elastic_diff+0x60>
 8006a70:	0020      	movs	r0, r4
 8006a72:	e7c2      	b.n	80069fa <elastic_diff+0x76>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point > snap_point) return diff;
 8006a74:	429a      	cmp	r2, r3
 8006a76:	ddb5      	ble.n	80069e4 <elastic_diff+0x60>
 8006a78:	0020      	movs	r0, r4
 8006a7a:	e7be      	b.n	80069fa <elastic_diff+0x76>
                    act_obj_point = act_obj->coords.y1;
 8006a7c:	464a      	mov	r2, r9
                    snap_point = scroll_obj->coords.y1 + pad_top;
 8006a7e:	8a6b      	ldrh	r3, [r5, #18]
                    act_obj_point = act_obj->coords.y1;
 8006a80:	2112      	movs	r1, #18
 8006a82:	5e52      	ldrsh	r2, [r2, r1]
                    snap_point = scroll_obj->coords.y1 + pad_top;
 8006a84:	4453      	add	r3, sl
 8006a86:	b21b      	sxth	r3, r3
                    break;
 8006a88:	e7e4      	b.n	8006a54 <elastic_diff+0xd0>
                    snap_point = pad_top + (lv_area_get_height(&scroll_obj->coords) - pad_top - pad_bottom) / 2 + scroll_obj->coords.y1;
 8006a8a:	4653      	mov	r3, sl
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006a8c:	8aea      	ldrh	r2, [r5, #22]
 8006a8e:	8a69      	ldrh	r1, [r5, #18]
 8006a90:	3201      	adds	r2, #1
 8006a92:	1a52      	subs	r2, r2, r1
 8006a94:	b21b      	sxth	r3, r3
 8006a96:	b212      	sxth	r2, r2
 8006a98:	1ad2      	subs	r2, r2, r3
 8006a9a:	b200      	sxth	r0, r0
 8006a9c:	1a10      	subs	r0, r2, r0
 8006a9e:	0fc3      	lsrs	r3, r0, #31
 8006aa0:	181b      	adds	r3, r3, r0
 8006aa2:	4451      	add	r1, sl
 8006aa4:	105b      	asrs	r3, r3, #1
 8006aa6:	185b      	adds	r3, r3, r1
 8006aa8:	464a      	mov	r2, r9
 8006aaa:	4649      	mov	r1, r9
 8006aac:	8a52      	ldrh	r2, [r2, #18]
 8006aae:	8ac9      	ldrh	r1, [r1, #22]
 8006ab0:	b21b      	sxth	r3, r3
 8006ab2:	3101      	adds	r1, #1
 8006ab4:	1a89      	subs	r1, r1, r2
                    act_obj_point = lv_area_get_height(&act_obj->coords) / 2 + act_obj->coords.y1;
 8006ab6:	b209      	sxth	r1, r1
 8006ab8:	0fc8      	lsrs	r0, r1, #31
 8006aba:	1841      	adds	r1, r0, r1
 8006abc:	1049      	asrs	r1, r1, #1
 8006abe:	1852      	adds	r2, r2, r1
 8006ac0:	b212      	sxth	r2, r2
                    break;
 8006ac2:	e7c7      	b.n	8006a54 <elastic_diff+0xd0>
                    act_obj_point = act_obj->coords.y2;
 8006ac4:	464a      	mov	r2, r9
                    snap_point = scroll_obj->coords.y2 - pad_bottom;
 8006ac6:	8aeb      	ldrh	r3, [r5, #22]
                    act_obj_point = act_obj->coords.y2;
 8006ac8:	2116      	movs	r1, #22
 8006aca:	5e52      	ldrsh	r2, [r2, r1]
                    snap_point = scroll_obj->coords.y2 - pad_bottom;
 8006acc:	1a1b      	subs	r3, r3, r0
 8006ace:	b21b      	sxth	r3, r3
                    break;
 8006ad0:	e7c0      	b.n	8006a54 <elastic_diff+0xd0>
                    act_obj_point = act_obj->coords.x2;
 8006ad2:	464a      	mov	r2, r9
                    snap_point = scroll_obj->coords.x2 - pad_right;
 8006ad4:	8aab      	ldrh	r3, [r5, #20]
                    act_obj_point = act_obj->coords.x2;
 8006ad6:	2114      	movs	r1, #20
 8006ad8:	5e52      	ldrsh	r2, [r2, r1]
                    snap_point = scroll_obj->coords.x2 - pad_right;
 8006ada:	1a1b      	subs	r3, r3, r0
 8006adc:	b21b      	sxth	r3, r3
                    break;
 8006ade:	e7b9      	b.n	8006a54 <elastic_diff+0xd0>
                    snap_point = pad_left + (lv_area_get_width(&scroll_obj->coords) - pad_left - pad_right) / 2 + scroll_obj->coords.x1;
 8006ae0:	4653      	mov	r3, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006ae2:	8aaa      	ldrh	r2, [r5, #20]
 8006ae4:	8a29      	ldrh	r1, [r5, #16]
 8006ae6:	3201      	adds	r2, #1
 8006ae8:	1a52      	subs	r2, r2, r1
 8006aea:	b21b      	sxth	r3, r3
 8006aec:	b212      	sxth	r2, r2
 8006aee:	1ad2      	subs	r2, r2, r3
 8006af0:	b200      	sxth	r0, r0
 8006af2:	1a10      	subs	r0, r2, r0
 8006af4:	0fc3      	lsrs	r3, r0, #31
 8006af6:	181b      	adds	r3, r3, r0
 8006af8:	4451      	add	r1, sl
 8006afa:	105b      	asrs	r3, r3, #1
 8006afc:	185b      	adds	r3, r3, r1
 8006afe:	464a      	mov	r2, r9
 8006b00:	4649      	mov	r1, r9
 8006b02:	8a12      	ldrh	r2, [r2, #16]
 8006b04:	8a89      	ldrh	r1, [r1, #20]
 8006b06:	b21b      	sxth	r3, r3
 8006b08:	e7d3      	b.n	8006ab2 <elastic_diff+0x12e>
 8006b0a:	46c0      	nop			; (mov r8, r8)

08006b0c <_lv_indev_scroll_handler>:
{
 8006b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b0e:	4657      	mov	r7, sl
 8006b10:	46de      	mov	lr, fp
 8006b12:	464e      	mov	r6, r9
 8006b14:	4645      	mov	r5, r8
 8006b16:	b5e0      	push	{r5, r6, r7, lr}
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 8006b18:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 8006b1a:	0004      	movs	r4, r0
 8006b1c:	b08b      	sub	sp, #44	; 0x2c
    if(scroll_obj == NULL) {
 8006b1e:	2f00      	cmp	r7, #0
 8006b20:	d065      	beq.n	8006bee <_lv_indev_scroll_handler+0xe2>
    if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
 8006b22:	6923      	ldr	r3, [r4, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d055      	beq.n	8006bd4 <_lv_indev_scroll_handler+0xc8>
        if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 8006b28:	233c      	movs	r3, #60	; 0x3c
 8006b2a:	250f      	movs	r5, #15
 8006b2c:	5ce3      	ldrb	r3, [r4, r3]
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8006b2e:	0038      	movs	r0, r7
        if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 8006b30:	401d      	ands	r5, r3
 8006b32:	2d03      	cmp	r5, #3
 8006b34:	d100      	bne.n	8006b38 <_lv_indev_scroll_handler+0x2c>
 8006b36:	e187      	b.n	8006e48 <_lv_indev_scroll_handler+0x33c>
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 8006b38:	f004 f83a 	bl	800abb0 <lv_obj_get_scroll_top>
 8006b3c:	0005      	movs	r5, r0
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8006b3e:	0038      	movs	r0, r7
 8006b40:	f004 f840 	bl	800abc4 <lv_obj_get_scroll_bottom>
            diff_y = elastic_diff(scroll_obj, proc->types.pointer.vect.y, st, sb, LV_DIR_VER);
 8006b44:	2212      	movs	r2, #18
 8006b46:	5ea1      	ldrsh	r1, [r4, r2]
 8006b48:	220c      	movs	r2, #12
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8006b4a:	0003      	movs	r3, r0
            diff_y = elastic_diff(scroll_obj, proc->types.pointer.vect.y, st, sb, LV_DIR_VER);
 8006b4c:	9200      	str	r2, [sp, #0]
 8006b4e:	0038      	movs	r0, r7
 8006b50:	002a      	movs	r2, r5
 8006b52:	f7ff ff17 	bl	8006984 <elastic_diff>
 8006b56:	0006      	movs	r6, r0
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(scroll_obj);
 8006b58:	0038      	movs	r0, r7
 8006b5a:	f003 fff7 	bl	800ab4c <lv_obj_get_scroll_dir>
        if((scroll_dir & LV_DIR_TOP)    == 0 && diff_y > 0) diff_y = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	469c      	mov	ip, r3
 8006b62:	0743      	lsls	r3, r0, #29
 8006b64:	d53d      	bpl.n	8006be2 <_lv_indev_scroll_handler+0xd6>
        lv_coord_t diff_x = 0;
 8006b66:	2500      	movs	r5, #0
        if((scroll_dir & LV_DIR_BOTTOM) == 0 && diff_y < 0) diff_y = 0;
 8006b68:	0703      	lsls	r3, r0, #28
 8006b6a:	d403      	bmi.n	8006b74 <_lv_indev_scroll_handler+0x68>
 8006b6c:	43f0      	mvns	r0, r6
 8006b6e:	17c0      	asrs	r0, r0, #31
 8006b70:	4006      	ands	r6, r0
 8006b72:	b236      	sxth	r6, r6
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 8006b74:	0032      	movs	r2, r6
 8006b76:	2016      	movs	r0, #22
 8006b78:	5e21      	ldrsh	r1, [r4, r0]
 8006b7a:	2332      	movs	r3, #50	; 0x32
 8006b7c:	5ee0      	ldrsh	r0, [r4, r3]
 8006b7e:	188a      	adds	r2, r1, r2
 8006b80:	4282      	cmp	r2, r0
 8006b82:	da02      	bge.n	8006b8a <_lv_indev_scroll_handler+0x7e>
            *diff_y = proc->types.pointer.scroll_area.y1 - proc->types.pointer.scroll_sum.y;
 8006b84:	1a40      	subs	r0, r0, r1
 8006b86:	b206      	sxth	r6, r0
        if(proc->types.pointer.scroll_sum.y + *diff_y > proc->types.pointer.scroll_area.y2) {
 8006b88:	1872      	adds	r2, r6, r1
 8006b8a:	2336      	movs	r3, #54	; 0x36
 8006b8c:	5ee0      	ldrsh	r0, [r4, r3]
 8006b8e:	4290      	cmp	r0, r2
 8006b90:	da01      	bge.n	8006b96 <_lv_indev_scroll_handler+0x8a>
            *diff_y = proc->types.pointer.scroll_area.y2 - proc->types.pointer.scroll_sum.y;
 8006b92:	1a40      	subs	r0, r0, r1
 8006b94:	b206      	sxth	r6, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8006b96:	2314      	movs	r3, #20
 8006b98:	5ee2      	ldrsh	r2, [r4, r3]
 8006b9a:	4663      	mov	r3, ip
 8006b9c:	2130      	movs	r1, #48	; 0x30
 8006b9e:	5e60      	ldrsh	r0, [r4, r1]
 8006ba0:	18d3      	adds	r3, r2, r3
 8006ba2:	4283      	cmp	r3, r0
 8006ba4:	da02      	bge.n	8006bac <_lv_indev_scroll_handler+0xa0>
            *diff_x = proc->types.pointer.scroll_area.x1 - proc->types.pointer.scroll_sum.x;
 8006ba6:	1a80      	subs	r0, r0, r2
 8006ba8:	b205      	sxth	r5, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x > proc->types.pointer.scroll_area.x2) {
 8006baa:	18ab      	adds	r3, r5, r2
 8006bac:	2134      	movs	r1, #52	; 0x34
 8006bae:	5e60      	ldrsh	r0, [r4, r1]
 8006bb0:	4298      	cmp	r0, r3
 8006bb2:	da01      	bge.n	8006bb8 <_lv_indev_scroll_handler+0xac>
            *diff_x = proc->types.pointer.scroll_area.x2 - proc->types.pointer.scroll_sum.x;
 8006bb4:	1a80      	subs	r0, r0, r2
 8006bb6:	b205      	sxth	r5, r0
        _lv_obj_scroll_by_raw(scroll_obj, diff_x, diff_y);
 8006bb8:	0032      	movs	r2, r6
 8006bba:	0029      	movs	r1, r5
 8006bbc:	0038      	movs	r0, r7
 8006bbe:	f005 f93f 	bl	800be40 <_lv_obj_scroll_by_raw>
        if(proc->reset_query) return;
 8006bc2:	7863      	ldrb	r3, [r4, #1]
 8006bc4:	079b      	lsls	r3, r3, #30
 8006bc6:	d405      	bmi.n	8006bd4 <_lv_indev_scroll_handler+0xc8>
        proc->types.pointer.scroll_sum.x += diff_x;
 8006bc8:	8aa0      	ldrh	r0, [r4, #20]
 8006bca:	1945      	adds	r5, r0, r5
        proc->types.pointer.scroll_sum.y += diff_y;
 8006bcc:	8ae0      	ldrh	r0, [r4, #22]
        proc->types.pointer.scroll_sum.x += diff_x;
 8006bce:	82a5      	strh	r5, [r4, #20]
        proc->types.pointer.scroll_sum.y += diff_y;
 8006bd0:	1986      	adds	r6, r0, r6
 8006bd2:	82e6      	strh	r6, [r4, #22]
}
 8006bd4:	b00b      	add	sp, #44	; 0x2c
 8006bd6:	bcf0      	pop	{r4, r5, r6, r7}
 8006bd8:	46bb      	mov	fp, r7
 8006bda:	46b2      	mov	sl, r6
 8006bdc:	46a9      	mov	r9, r5
 8006bde:	46a0      	mov	r8, r4
 8006be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((scroll_dir & LV_DIR_TOP)    == 0 && diff_y > 0) diff_y = 0;
 8006be2:	2e00      	cmp	r6, #0
 8006be4:	ddbf      	ble.n	8006b66 <_lv_indev_scroll_handler+0x5a>
 8006be6:	2200      	movs	r2, #0
        lv_coord_t diff_x = 0;
 8006be8:	2500      	movs	r5, #0
        if((scroll_dir & LV_DIR_TOP)    == 0 && diff_y > 0) diff_y = 0;
 8006bea:	2600      	movs	r6, #0
 8006bec:	e7c3      	b.n	8006b76 <_lv_indev_scroll_handler+0x6a>
        proc->types.pointer.scroll_sum.x += proc->types.pointer.vect.x;
 8006bee:	8a83      	ldrh	r3, [r0, #20]
 8006bf0:	8a02      	ldrh	r2, [r0, #16]
 8006bf2:	189b      	adds	r3, r3, r2
 8006bf4:	8283      	strh	r3, [r0, #20]
        proc->types.pointer.scroll_sum.y += proc->types.pointer.vect.y;
 8006bf6:	8a42      	ldrh	r2, [r0, #18]
 8006bf8:	8ac3      	ldrh	r3, [r0, #22]
 8006bfa:	189b      	adds	r3, r3, r2
 8006bfc:	82c3      	strh	r3, [r0, #22]
    lv_indev_t * indev_act = lv_indev_get_act();
 8006bfe:	f7fe fd35 	bl	800566c <lv_indev_get_act>
    lv_coord_t scroll_limit = indev_act->driver->scroll_limit;
 8006c02:	6803      	ldr	r3, [r0, #0]
    lv_obj_t * obj_act = proc->types.pointer.act_obj;
 8006c04:	6a25      	ldr	r5, [r4, #32]
    lv_coord_t scroll_limit = indev_act->driver->scroll_limit;
 8006c06:	7d1a      	ldrb	r2, [r3, #20]
 8006c08:	9205      	str	r2, [sp, #20]
 8006c0a:	7d1b      	ldrb	r3, [r3, #20]
 8006c0c:	9304      	str	r3, [sp, #16]
    if(LV_ABS(proc->types.pointer.scroll_sum.x) > LV_ABS(proc->types.pointer.scroll_sum.y)) {
 8006c0e:	2314      	movs	r3, #20
 8006c10:	5ee2      	ldrsh	r2, [r4, r3]
 8006c12:	17d3      	asrs	r3, r2, #31
 8006c14:	18d2      	adds	r2, r2, r3
 8006c16:	405a      	eors	r2, r3
 8006c18:	2116      	movs	r1, #22
 8006c1a:	5e63      	ldrsh	r3, [r4, r1]
 8006c1c:	b292      	uxth	r2, r2
 8006c1e:	17d9      	asrs	r1, r3, #31
 8006c20:	185b      	adds	r3, r3, r1
 8006c22:	404b      	eors	r3, r1
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d900      	bls.n	8006c2c <_lv_indev_scroll_handler+0x120>
 8006c2a:	e174      	b.n	8006f16 <_lv_indev_scroll_handler+0x40a>
        ver_en = true;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	469b      	mov	fp, r3
    bool hor_en = false;
 8006c30:	2300      	movs	r3, #0
 8006c32:	4698      	mov	r8, r3
    while(obj_act) {
 8006c34:	2300      	movs	r3, #0
 8006c36:	46ba      	mov	sl, r7
 8006c38:	46a1      	mov	r9, r4
 8006c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c3c:	2d00      	cmp	r5, #0
 8006c3e:	d0c9      	beq.n	8006bd4 <_lv_indev_scroll_handler+0xc8>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLLABLE) == false) {
 8006c40:	2110      	movs	r1, #16
 8006c42:	0028      	movs	r0, r5
 8006c44:	f001 f966 	bl	8007f14 <lv_obj_has_flag>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d154      	bne.n	8006cf6 <_lv_indev_scroll_handler+0x1ea>
            if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_HOR) == false && hor_en) break;
 8006c4c:	2180      	movs	r1, #128	; 0x80
 8006c4e:	0028      	movs	r0, r5
 8006c50:	0049      	lsls	r1, r1, #1
 8006c52:	f001 f95f 	bl	8007f14 <lv_obj_has_flag>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d102      	bne.n	8006c60 <_lv_indev_scroll_handler+0x154>
 8006c5a:	4643      	mov	r3, r8
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10b      	bne.n	8006c78 <_lv_indev_scroll_handler+0x16c>
            if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_VER) == false && ver_en) break;
 8006c60:	2180      	movs	r1, #128	; 0x80
 8006c62:	0028      	movs	r0, r5
 8006c64:	0089      	lsls	r1, r1, #2
 8006c66:	f001 f955 	bl	8007f14 <lv_obj_has_flag>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d000      	beq.n	8006c70 <_lv_indev_scroll_handler+0x164>
 8006c6e:	e0cf      	b.n	8006e10 <_lv_indev_scroll_handler+0x304>
 8006c70:	465b      	mov	r3, fp
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d100      	bne.n	8006c78 <_lv_indev_scroll_handler+0x16c>
 8006c76:	e0cb      	b.n	8006e10 <_lv_indev_scroll_handler+0x304>
 8006c78:	4657      	mov	r7, sl
 8006c7a:	464c      	mov	r4, r9
    if(obj_candidate) {
 8006c7c:	2f00      	cmp	r7, #0
 8006c7e:	d0a9      	beq.n	8006bd4 <_lv_indev_scroll_handler+0xc8>
        proc->types.pointer.scroll_dir = dir_candidate;
 8006c80:	223c      	movs	r2, #60	; 0x3c
 8006c82:	210f      	movs	r1, #15
 8006c84:	5ca3      	ldrb	r3, [r4, r2]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ONE) == false) {
 8006c86:	0038      	movs	r0, r7
        proc->types.pointer.scroll_dir = dir_candidate;
 8006c88:	438b      	bics	r3, r1
 8006c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	54a3      	strb	r3, [r4, r2]
        proc->types.pointer.scroll_sum.x = 0;
 8006c90:	2300      	movs	r3, #0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ONE) == false) {
 8006c92:	2180      	movs	r1, #128	; 0x80
        proc->types.pointer.scroll_obj = obj_candidate;
 8006c94:	62a7      	str	r7, [r4, #40]	; 0x28
        proc->types.pointer.scroll_sum.x = 0;
 8006c96:	6163      	str	r3, [r4, #20]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ONE) == false) {
 8006c98:	f001 f93c 	bl	8007f14 <lv_obj_has_flag>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d000      	beq.n	8006ca2 <_lv_indev_scroll_handler+0x196>
 8006ca0:	e11e      	b.n	8006ee0 <_lv_indev_scroll_handler+0x3d4>
        lv_area_set(&proc->types.pointer.scroll_area, LV_COORD_MIN, LV_COORD_MIN, LV_COORD_MAX, LV_COORD_MAX);
 8006ca2:	0020      	movs	r0, r4
 8006ca4:	4bcb      	ldr	r3, [pc, #812]	; (8006fd4 <_lv_indev_scroll_handler+0x4c8>)
 8006ca6:	4acc      	ldr	r2, [pc, #816]	; (8006fd8 <_lv_indev_scroll_handler+0x4cc>)
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	3030      	adds	r0, #48	; 0x30
 8006cac:	0011      	movs	r1, r2
 8006cae:	f00d fa97 	bl	80141e0 <lv_area_set>
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8006cb2:	2334      	movs	r3, #52	; 0x34
 8006cb4:	5ee0      	ldrsh	r0, [r4, r3]
    if(proc->types.pointer.scroll_area.x1 == 0) proc->types.pointer.scroll_area.x1 = LV_COORD_MIN;
 8006cb6:	2230      	movs	r2, #48	; 0x30
 8006cb8:	5ea3      	ldrsh	r3, [r4, r2]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <_lv_indev_scroll_handler+0x1b6>
 8006cbe:	4bc6      	ldr	r3, [pc, #792]	; (8006fd8 <_lv_indev_scroll_handler+0x4cc>)
 8006cc0:	8623      	strh	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d101      	bne.n	8006cca <_lv_indev_scroll_handler+0x1be>
 8006cc6:	4bc3      	ldr	r3, [pc, #780]	; (8006fd4 <_lv_indev_scroll_handler+0x4c8>)
 8006cc8:	86a3      	strh	r3, [r4, #52]	; 0x34
    if(proc->types.pointer.scroll_area.y1 == 0) proc->types.pointer.scroll_area.y1 = LV_COORD_MIN;
 8006cca:	2232      	movs	r2, #50	; 0x32
 8006ccc:	5ea3      	ldrsh	r3, [r4, r2]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <_lv_indev_scroll_handler+0x1ca>
 8006cd2:	4bc1      	ldr	r3, [pc, #772]	; (8006fd8 <_lv_indev_scroll_handler+0x4cc>)
 8006cd4:	8663      	strh	r3, [r4, #50]	; 0x32
    if(proc->types.pointer.scroll_area.y2 == 0) proc->types.pointer.scroll_area.y2 = LV_COORD_MAX;
 8006cd6:	2236      	movs	r2, #54	; 0x36
 8006cd8:	5ea3      	ldrsh	r3, [r4, r2]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <_lv_indev_scroll_handler+0x1d6>
 8006cde:	4bbd      	ldr	r3, [pc, #756]	; (8006fd4 <_lv_indev_scroll_handler+0x4c8>)
 8006ce0:	86e3      	strh	r3, [r4, #54]	; 0x36
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_BEGIN, NULL);
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	2109      	movs	r1, #9
 8006ce6:	0038      	movs	r0, r7
 8006ce8:	f7fd ffa2 	bl	8004c30 <lv_event_send>
        if(proc->reset_query) return;
 8006cec:	7863      	ldrb	r3, [r4, #1]
 8006cee:	079b      	lsls	r3, r3, #30
 8006cf0:	d400      	bmi.n	8006cf4 <_lv_indev_scroll_handler+0x1e8>
 8006cf2:	e716      	b.n	8006b22 <_lv_indev_scroll_handler+0x16>
 8006cf4:	e76e      	b.n	8006bd4 <_lv_indev_scroll_handler+0xc8>
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(obj_act);
 8006cf6:	0028      	movs	r0, r5
 8006cf8:	f003 ff28 	bl	800ab4c <lv_obj_get_scroll_dir>
        if((scroll_dir & LV_DIR_LEFT) == 0) left_en = false;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	4642      	mov	r2, r8
 8006d00:	4003      	ands	r3, r0
 8006d02:	425b      	negs	r3, r3
 8006d04:	401a      	ands	r2, r3
 8006d06:	9206      	str	r2, [sp, #24]
        if((scroll_dir & LV_DIR_RIGHT) == 0) right_en = false;
 8006d08:	4642      	mov	r2, r8
 8006d0a:	0783      	lsls	r3, r0, #30
 8006d0c:	17db      	asrs	r3, r3, #31
 8006d0e:	401a      	ands	r2, r3
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8006d10:	465b      	mov	r3, fp
 8006d12:	0744      	lsls	r4, r0, #29
        if((scroll_dir & LV_DIR_BOTTOM) == 0) down_en = false;
 8006d14:	0706      	lsls	r6, r0, #28
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8006d16:	17e4      	asrs	r4, r4, #31
        lv_coord_t st = lv_obj_get_scroll_top(obj_act);
 8006d18:	0028      	movs	r0, r5
        if((scroll_dir & LV_DIR_BOTTOM) == 0) down_en = false;
 8006d1a:	17f6      	asrs	r6, r6, #31
        if((scroll_dir & LV_DIR_RIGHT) == 0) right_en = false;
 8006d1c:	9208      	str	r2, [sp, #32]
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8006d1e:	401c      	ands	r4, r3
        if((scroll_dir & LV_DIR_BOTTOM) == 0) down_en = false;
 8006d20:	401e      	ands	r6, r3
        lv_coord_t st = lv_obj_get_scroll_top(obj_act);
 8006d22:	f003 ff45 	bl	800abb0 <lv_obj_get_scroll_top>
 8006d26:	0007      	movs	r7, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj_act);
 8006d28:	0028      	movs	r0, r5
 8006d2a:	f003 ff4b 	bl	800abc4 <lv_obj_get_scroll_bottom>
 8006d2e:	9007      	str	r0, [sp, #28]
        lv_coord_t sl = lv_obj_get_scroll_left(obj_act);
 8006d30:	0028      	movs	r0, r5
 8006d32:	f004 fc55 	bl	800b5e0 <lv_obj_get_scroll_left>
 8006d36:	9003      	str	r0, [sp, #12]
        lv_coord_t sr = lv_obj_get_scroll_right(obj_act);
 8006d38:	0028      	movs	r0, r5
 8006d3a:	f004 fc67 	bl	800b60c <lv_obj_get_scroll_right>
        if((st > 0 || sb > 0)  &&
 8006d3e:	2f00      	cmp	r7, #0
 8006d40:	dc00      	bgt.n	8006d44 <_lv_indev_scroll_handler+0x238>
 8006d42:	e0a9      	b.n	8006e98 <_lv_indev_scroll_handler+0x38c>
 8006d44:	2c00      	cmp	r4, #0
 8006d46:	d075      	beq.n	8006e34 <_lv_indev_scroll_handler+0x328>
           ((up_en    && proc->types.pointer.scroll_sum.y >=   scroll_limit) ||
 8006d48:	464b      	mov	r3, r9
 8006d4a:	2216      	movs	r2, #22
 8006d4c:	5e9b      	ldrsh	r3, [r3, r2]
 8006d4e:	9a04      	ldr	r2, [sp, #16]
 8006d50:	4293      	cmp	r3, r2
 8006d52:	db6f      	blt.n	8006e34 <_lv_indev_scroll_handler+0x328>
            dir_candidate = LV_DIR_VER;
 8006d54:	230c      	movs	r3, #12
 8006d56:	46aa      	mov	sl, r5
 8006d58:	9309      	str	r3, [sp, #36]	; 0x24
        if((sl > 0 || sr > 0)  &&
 8006d5a:	9b03      	ldr	r3, [sp, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	dc00      	bgt.n	8006d62 <_lv_indev_scroll_handler+0x256>
 8006d60:	e096      	b.n	8006e90 <_lv_indev_scroll_handler+0x384>
 8006d62:	9b06      	ldr	r3, [sp, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d05a      	beq.n	8006e1e <_lv_indev_scroll_handler+0x312>
           ((left_en   && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8006d68:	464b      	mov	r3, r9
 8006d6a:	2214      	movs	r2, #20
 8006d6c:	5e9b      	ldrsh	r3, [r3, r2]
 8006d6e:	9a04      	ldr	r2, [sp, #16]
 8006d70:	4293      	cmp	r3, r2
 8006d72:	db54      	blt.n	8006e1e <_lv_indev_scroll_handler+0x312>
            dir_candidate = LV_DIR_HOR;
 8006d74:	2303      	movs	r3, #3
 8006d76:	46aa      	mov	sl, r5
 8006d78:	9309      	str	r3, [sp, #36]	; 0x24
        if(sb <= 0) down_en = false;
 8006d7a:	9a07      	ldr	r2, [sp, #28]
        if(st <= 0) up_en = false;
 8006d7c:	17fb      	asrs	r3, r7, #31
 8006d7e:	1bdf      	subs	r7, r3, r7
        if(sb <= 0) down_en = false;
 8006d80:	17d3      	asrs	r3, r2, #31
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	17db      	asrs	r3, r3, #31
 8006d86:	401e      	ands	r6, r3
        if(sl <= 0) left_en = false;
 8006d88:	9b03      	ldr	r3, [sp, #12]
        if(st <= 0) up_en = false;
 8006d8a:	17ff      	asrs	r7, r7, #31
 8006d8c:	403c      	ands	r4, r7
        if(sl <= 0) left_en = false;
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	dd7b      	ble.n	8006e8a <_lv_indev_scroll_handler+0x37e>
        if((left_en  && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8006d92:	9b06      	ldr	r3, [sp, #24]
        if(sr <= 0) right_en = false;
 8006d94:	2800      	cmp	r0, #0
 8006d96:	dc00      	bgt.n	8006d9a <_lv_indev_scroll_handler+0x28e>
 8006d98:	e08a      	b.n	8006eb0 <_lv_indev_scroll_handler+0x3a4>
        if((left_en  && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d006      	beq.n	8006dac <_lv_indev_scroll_handler+0x2a0>
 8006d9e:	464b      	mov	r3, r9
 8006da0:	2214      	movs	r2, #20
 8006da2:	5e9b      	ldrsh	r3, [r3, r2]
 8006da4:	9a04      	ldr	r2, [sp, #16]
 8006da6:	4293      	cmp	r3, r2
 8006da8:	db00      	blt.n	8006dac <_lv_indev_scroll_handler+0x2a0>
 8006daa:	e08a      	b.n	8006ec2 <_lv_indev_scroll_handler+0x3b6>
 8006dac:	9b08      	ldr	r3, [sp, #32]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d007      	beq.n	8006dc2 <_lv_indev_scroll_handler+0x2b6>
           (right_en && proc->types.pointer.scroll_sum.x <= - scroll_limit) ||
 8006db2:	464b      	mov	r3, r9
 8006db4:	2214      	movs	r2, #20
 8006db6:	5e9a      	ldrsh	r2, [r3, r2]
 8006db8:	9b05      	ldr	r3, [sp, #20]
 8006dba:	425b      	negs	r3, r3
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	dc00      	bgt.n	8006dc2 <_lv_indev_scroll_handler+0x2b6>
 8006dc0:	e07f      	b.n	8006ec2 <_lv_indev_scroll_handler+0x3b6>
 8006dc2:	2c00      	cmp	r4, #0
 8006dc4:	d005      	beq.n	8006dd2 <_lv_indev_scroll_handler+0x2c6>
           (up_en    && proc->types.pointer.scroll_sum.y >=   scroll_limit) ||
 8006dc6:	464b      	mov	r3, r9
 8006dc8:	2216      	movs	r2, #22
 8006dca:	5e9b      	ldrsh	r3, [r3, r2]
 8006dcc:	9a04      	ldr	r2, [sp, #16]
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	da77      	bge.n	8006ec2 <_lv_indev_scroll_handler+0x3b6>
 8006dd2:	2e00      	cmp	r6, #0
 8006dd4:	d006      	beq.n	8006de4 <_lv_indev_scroll_handler+0x2d8>
           (down_en  && proc->types.pointer.scroll_sum.y <= - scroll_limit)) {
 8006dd6:	464b      	mov	r3, r9
 8006dd8:	2216      	movs	r2, #22
 8006dda:	5e9a      	ldrsh	r2, [r3, r2]
 8006ddc:	9b05      	ldr	r3, [sp, #20]
 8006dde:	425b      	negs	r3, r3
 8006de0:	429a      	cmp	r2, r3
 8006de2:	dd6e      	ble.n	8006ec2 <_lv_indev_scroll_handler+0x3b6>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_HOR) == false && hor_en) break;
 8006de4:	2180      	movs	r1, #128	; 0x80
 8006de6:	0028      	movs	r0, r5
 8006de8:	0049      	lsls	r1, r1, #1
 8006dea:	f001 f893 	bl	8007f14 <lv_obj_has_flag>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d103      	bne.n	8006dfa <_lv_indev_scroll_handler+0x2ee>
 8006df2:	4643      	mov	r3, r8
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d000      	beq.n	8006dfa <_lv_indev_scroll_handler+0x2ee>
 8006df8:	e73e      	b.n	8006c78 <_lv_indev_scroll_handler+0x16c>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_VER) == false && ver_en) break;
 8006dfa:	2180      	movs	r1, #128	; 0x80
 8006dfc:	0028      	movs	r0, r5
 8006dfe:	0089      	lsls	r1, r1, #2
 8006e00:	f001 f888 	bl	8007f14 <lv_obj_has_flag>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d103      	bne.n	8006e10 <_lv_indev_scroll_handler+0x304>
 8006e08:	465b      	mov	r3, fp
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d000      	beq.n	8006e10 <_lv_indev_scroll_handler+0x304>
 8006e0e:	e733      	b.n	8006c78 <_lv_indev_scroll_handler+0x16c>
        obj_act = lv_obj_get_parent(obj_act);
 8006e10:	0028      	movs	r0, r5
 8006e12:	f007 f803 	bl	800de1c <lv_obj_get_parent>
 8006e16:	1e05      	subs	r5, r0, #0
    while(obj_act) {
 8006e18:	d000      	beq.n	8006e1c <_lv_indev_scroll_handler+0x310>
 8006e1a:	e711      	b.n	8006c40 <_lv_indev_scroll_handler+0x134>
 8006e1c:	e72c      	b.n	8006c78 <_lv_indev_scroll_handler+0x16c>
           ((left_en   && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8006e1e:	9b08      	ldr	r3, [sp, #32]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0aa      	beq.n	8006d7a <_lv_indev_scroll_handler+0x26e>
            (right_en  && proc->types.pointer.scroll_sum.x <= - scroll_limit))) {
 8006e24:	464b      	mov	r3, r9
 8006e26:	2214      	movs	r2, #20
 8006e28:	5e9a      	ldrsh	r2, [r3, r2]
 8006e2a:	9b05      	ldr	r3, [sp, #20]
 8006e2c:	425b      	negs	r3, r3
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	dca3      	bgt.n	8006d7a <_lv_indev_scroll_handler+0x26e>
 8006e32:	e79f      	b.n	8006d74 <_lv_indev_scroll_handler+0x268>
           ((up_en    && proc->types.pointer.scroll_sum.y >=   scroll_limit) ||
 8006e34:	2e00      	cmp	r6, #0
 8006e36:	d090      	beq.n	8006d5a <_lv_indev_scroll_handler+0x24e>
            (down_en  && proc->types.pointer.scroll_sum.y <= - scroll_limit))) {
 8006e38:	464b      	mov	r3, r9
 8006e3a:	2216      	movs	r2, #22
 8006e3c:	5e9a      	ldrsh	r2, [r3, r2]
 8006e3e:	9b05      	ldr	r3, [sp, #20]
 8006e40:	425b      	negs	r3, r3
 8006e42:	429a      	cmp	r2, r3
 8006e44:	dc89      	bgt.n	8006d5a <_lv_indev_scroll_handler+0x24e>
 8006e46:	e785      	b.n	8006d54 <_lv_indev_scroll_handler+0x248>
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8006e48:	f004 fbe0 	bl	800b60c <lv_obj_get_scroll_right>
 8006e4c:	0006      	movs	r6, r0
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8006e4e:	0038      	movs	r0, r7
 8006e50:	f004 fbc6 	bl	800b5e0 <lv_obj_get_scroll_left>
            diff_x = elastic_diff(scroll_obj, proc->types.pointer.vect.x, sl, sr, LV_DIR_HOR);
 8006e54:	2310      	movs	r3, #16
 8006e56:	5ee1      	ldrsh	r1, [r4, r3]
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8006e58:	0002      	movs	r2, r0
            diff_x = elastic_diff(scroll_obj, proc->types.pointer.vect.x, sl, sr, LV_DIR_HOR);
 8006e5a:	0033      	movs	r3, r6
 8006e5c:	9500      	str	r5, [sp, #0]
 8006e5e:	0038      	movs	r0, r7
 8006e60:	f7ff fd90 	bl	8006984 <elastic_diff>
 8006e64:	0005      	movs	r5, r0
 8006e66:	0006      	movs	r6, r0
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(scroll_obj);
 8006e68:	0038      	movs	r0, r7
 8006e6a:	f003 fe6f 	bl	800ab4c <lv_obj_get_scroll_dir>
 8006e6e:	0003      	movs	r3, r0
        if((scroll_dir & LV_DIR_LEFT)   == 0 && diff_x > 0) diff_x = 0;
 8006e70:	07c2      	lsls	r2, r0, #31
 8006e72:	d516      	bpl.n	8006ea2 <_lv_indev_scroll_handler+0x396>
        if((scroll_dir & LV_DIR_RIGHT)  == 0 && diff_x < 0) diff_x = 0;
 8006e74:	079b      	lsls	r3, r3, #30
 8006e76:	d500      	bpl.n	8006e7a <_lv_indev_scroll_handler+0x36e>
 8006e78:	e0bb      	b.n	8006ff2 <_lv_indev_scroll_handler+0x4e6>
 8006e7a:	b233      	sxth	r3, r6
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	17db      	asrs	r3, r3, #31
 8006e80:	4033      	ands	r3, r6
 8006e82:	b21d      	sxth	r5, r3
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8006e84:	46ac      	mov	ip, r5
 8006e86:	2600      	movs	r6, #0
 8006e88:	e66e      	b.n	8006b68 <_lv_indev_scroll_handler+0x5c>
        if(sr <= 0) right_en = false;
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	dc8e      	bgt.n	8006dac <_lv_indev_scroll_handler+0x2a0>
 8006e8e:	e798      	b.n	8006dc2 <_lv_indev_scroll_handler+0x2b6>
        if((sl > 0 || sr > 0)  &&
 8006e90:	2800      	cmp	r0, #0
 8006e92:	dd00      	ble.n	8006e96 <_lv_indev_scroll_handler+0x38a>
 8006e94:	e765      	b.n	8006d62 <_lv_indev_scroll_handler+0x256>
 8006e96:	e770      	b.n	8006d7a <_lv_indev_scroll_handler+0x26e>
        if((st > 0 || sb > 0)  &&
 8006e98:	9b07      	ldr	r3, [sp, #28]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	dd00      	ble.n	8006ea0 <_lv_indev_scroll_handler+0x394>
 8006e9e:	e751      	b.n	8006d44 <_lv_indev_scroll_handler+0x238>
 8006ea0:	e75b      	b.n	8006d5a <_lv_indev_scroll_handler+0x24e>
        if((scroll_dir & LV_DIR_LEFT)   == 0 && diff_x > 0) diff_x = 0;
 8006ea2:	2d00      	cmp	r5, #0
 8006ea4:	dde6      	ble.n	8006e74 <_lv_indev_scroll_handler+0x368>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	2500      	movs	r5, #0
 8006eaa:	469c      	mov	ip, r3
        lv_coord_t diff_y = 0;
 8006eac:	2600      	movs	r6, #0
 8006eae:	e65b      	b.n	8006b68 <_lv_indev_scroll_handler+0x5c>
        if((left_en  && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d086      	beq.n	8006dc2 <_lv_indev_scroll_handler+0x2b6>
 8006eb4:	464b      	mov	r3, r9
 8006eb6:	2214      	movs	r2, #20
 8006eb8:	5e9b      	ldrsh	r3, [r3, r2]
 8006eba:	9a04      	ldr	r2, [sp, #16]
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	da00      	bge.n	8006ec2 <_lv_indev_scroll_handler+0x3b6>
 8006ec0:	e77f      	b.n	8006dc2 <_lv_indev_scroll_handler+0x2b6>
            proc->types.pointer.scroll_dir = hor_en ? LV_DIR_HOR : LV_DIR_VER;
 8006ec2:	4643      	mov	r3, r8
 8006ec4:	464c      	mov	r4, r9
 8006ec6:	2208      	movs	r2, #8
 8006ec8:	213c      	movs	r1, #60	; 0x3c
 8006eca:	200f      	movs	r0, #15
 8006ecc:	425b      	negs	r3, r3
 8006ece:	4393      	bics	r3, r2
 8006ed0:	5c62      	ldrb	r2, [r4, r1]
 8006ed2:	330c      	adds	r3, #12
 8006ed4:	4003      	ands	r3, r0
 8006ed6:	4382      	bics	r2, r0
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	4657      	mov	r7, sl
 8006edc:	5463      	strb	r3, [r4, r1]
            break;
 8006ede:	e6cd      	b.n	8006c7c <_lv_indev_scroll_handler+0x170>
        switch(lv_obj_get_scroll_snap_y(obj)) {
 8006ee0:	0038      	movs	r0, r7
 8006ee2:	f003 fe47 	bl	800ab74 <lv_obj_get_scroll_snap_y>
 8006ee6:	2802      	cmp	r0, #2
 8006ee8:	d042      	beq.n	8006f70 <_lv_indev_scroll_handler+0x464>
 8006eea:	2803      	cmp	r0, #3
 8006eec:	d018      	beq.n	8006f20 <_lv_indev_scroll_handler+0x414>
 8006eee:	2801      	cmp	r0, #1
 8006ef0:	d031      	beq.n	8006f56 <_lv_indev_scroll_handler+0x44a>
                proc->types.pointer.scroll_area.y1 = LV_COORD_MIN;
 8006ef2:	4b39      	ldr	r3, [pc, #228]	; (8006fd8 <_lv_indev_scroll_handler+0x4cc>)
 8006ef4:	8663      	strh	r3, [r4, #50]	; 0x32
                proc->types.pointer.scroll_area.y2 = LV_COORD_MAX;
 8006ef6:	4b37      	ldr	r3, [pc, #220]	; (8006fd4 <_lv_indev_scroll_handler+0x4c8>)
 8006ef8:	86e3      	strh	r3, [r4, #54]	; 0x36
        switch(lv_obj_get_scroll_snap_x(obj)) {
 8006efa:	0038      	movs	r0, r7
 8006efc:	f003 fe30 	bl	800ab60 <lv_obj_get_scroll_snap_x>
 8006f00:	2802      	cmp	r0, #2
 8006f02:	d06b      	beq.n	8006fdc <_lv_indev_scroll_handler+0x4d0>
 8006f04:	2803      	cmp	r0, #3
 8006f06:	d04f      	beq.n	8006fa8 <_lv_indev_scroll_handler+0x49c>
 8006f08:	2801      	cmp	r0, #1
 8006f0a:	d03c      	beq.n	8006f86 <_lv_indev_scroll_handler+0x47a>
                proc->types.pointer.scroll_area.x1 = LV_COORD_MIN;
 8006f0c:	4b32      	ldr	r3, [pc, #200]	; (8006fd8 <_lv_indev_scroll_handler+0x4cc>)
 8006f0e:	8623      	strh	r3, [r4, #48]	; 0x30
                proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8006f10:	4b30      	ldr	r3, [pc, #192]	; (8006fd4 <_lv_indev_scroll_handler+0x4c8>)
 8006f12:	86a3      	strh	r3, [r4, #52]	; 0x34
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8006f14:	e6d9      	b.n	8006cca <_lv_indev_scroll_handler+0x1be>
    bool ver_en = false;
 8006f16:	2300      	movs	r3, #0
 8006f18:	469b      	mov	fp, r3
        hor_en = true;
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	4698      	mov	r8, r3
 8006f1e:	e689      	b.n	8006c34 <_lv_indev_scroll_handler+0x128>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006f20:	8afb      	ldrh	r3, [r7, #22]
                    lv_coord_t y_mid = obj->coords.y1 + lv_area_get_height(&obj->coords) / 2;
 8006f22:	8a7d      	ldrh	r5, [r7, #18]
 8006f24:	3301      	adds	r3, #1
 8006f26:	1b5b      	subs	r3, r3, r5
 8006f28:	b21b      	sxth	r3, r3
 8006f2a:	0fda      	lsrs	r2, r3, #31
 8006f2c:	18d3      	adds	r3, r2, r3
 8006f2e:	105b      	asrs	r3, r3, #1
 8006f30:	18ed      	adds	r5, r5, r3
 8006f32:	b2ad      	uxth	r5, r5
                    proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 8006f34:	1c69      	adds	r1, r5, #1
 8006f36:	4a27      	ldr	r2, [pc, #156]	; (8006fd4 <_lv_indev_scroll_handler+0x4c8>)
 8006f38:	2300      	movs	r3, #0
 8006f3a:	0038      	movs	r0, r7
 8006f3c:	b209      	sxth	r1, r1
 8006f3e:	f7ff fbf9 	bl	8006734 <find_snap_point_y>
                    proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, y_mid - 1, 0);
 8006f42:	3d01      	subs	r5, #1
                    proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 8006f44:	8660      	strh	r0, [r4, #50]	; 0x32
                    proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, y_mid - 1, 0);
 8006f46:	b22a      	sxth	r2, r5
                proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y2, 0);
 8006f48:	2300      	movs	r3, #0
 8006f4a:	0038      	movs	r0, r7
 8006f4c:	4922      	ldr	r1, [pc, #136]	; (8006fd8 <_lv_indev_scroll_handler+0x4cc>)
 8006f4e:	f7ff fbf1 	bl	8006734 <find_snap_point_y>
 8006f52:	86e0      	strh	r0, [r4, #54]	; 0x36
                break;
 8006f54:	e7d1      	b.n	8006efa <_lv_indev_scroll_handler+0x3ee>
                proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y1 + 1, LV_COORD_MAX, 0);
 8006f56:	8a79      	ldrh	r1, [r7, #18]
 8006f58:	4a1e      	ldr	r2, [pc, #120]	; (8006fd4 <_lv_indev_scroll_handler+0x4c8>)
 8006f5a:	3101      	adds	r1, #1
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	0038      	movs	r0, r7
 8006f60:	b209      	sxth	r1, r1
 8006f62:	f7ff fbe7 	bl	8006734 <find_snap_point_y>
 8006f66:	8660      	strh	r0, [r4, #50]	; 0x32
                proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y1 - 1, 0);
 8006f68:	8a7a      	ldrh	r2, [r7, #18]
 8006f6a:	3a01      	subs	r2, #1
 8006f6c:	b212      	sxth	r2, r2
 8006f6e:	e7eb      	b.n	8006f48 <_lv_indev_scroll_handler+0x43c>
                proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y2, LV_COORD_MAX, 0);
 8006f70:	2316      	movs	r3, #22
 8006f72:	5ef9      	ldrsh	r1, [r7, r3]
 8006f74:	4a17      	ldr	r2, [pc, #92]	; (8006fd4 <_lv_indev_scroll_handler+0x4c8>)
 8006f76:	2300      	movs	r3, #0
 8006f78:	0038      	movs	r0, r7
 8006f7a:	f7ff fbdb 	bl	8006734 <find_snap_point_y>
 8006f7e:	8660      	strh	r0, [r4, #50]	; 0x32
                proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y2, 0);
 8006f80:	2316      	movs	r3, #22
 8006f82:	5efa      	ldrsh	r2, [r7, r3]
 8006f84:	e7e0      	b.n	8006f48 <_lv_indev_scroll_handler+0x43c>
                proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x1, LV_COORD_MAX, 0);
 8006f86:	2310      	movs	r3, #16
 8006f88:	5ef9      	ldrsh	r1, [r7, r3]
 8006f8a:	4a12      	ldr	r2, [pc, #72]	; (8006fd4 <_lv_indev_scroll_handler+0x4c8>)
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	0038      	movs	r0, r7
 8006f90:	f7ff fc64 	bl	800685c <find_snap_point_x>
 8006f94:	8620      	strh	r0, [r4, #48]	; 0x30
                proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x1, 0);
 8006f96:	2310      	movs	r3, #16
 8006f98:	5efa      	ldrsh	r2, [r7, r3]
                    proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	0038      	movs	r0, r7
 8006f9e:	490e      	ldr	r1, [pc, #56]	; (8006fd8 <_lv_indev_scroll_handler+0x4cc>)
 8006fa0:	f7ff fc5c 	bl	800685c <find_snap_point_x>
 8006fa4:	86a0      	strh	r0, [r4, #52]	; 0x34
                    break;
 8006fa6:	e686      	b.n	8006cb6 <_lv_indev_scroll_handler+0x1aa>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006fa8:	8abb      	ldrh	r3, [r7, #20]
                    lv_coord_t x_mid = obj->coords.x1 + lv_area_get_width(&obj->coords) / 2;
 8006faa:	8a3d      	ldrh	r5, [r7, #16]
 8006fac:	3301      	adds	r3, #1
 8006fae:	1b5b      	subs	r3, r3, r5
 8006fb0:	b21b      	sxth	r3, r3
 8006fb2:	0fda      	lsrs	r2, r3, #31
 8006fb4:	18d3      	adds	r3, r2, r3
 8006fb6:	105b      	asrs	r3, r3, #1
 8006fb8:	18ed      	adds	r5, r5, r3
 8006fba:	b2ad      	uxth	r5, r5
                    proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 8006fbc:	1c69      	adds	r1, r5, #1
 8006fbe:	4a05      	ldr	r2, [pc, #20]	; (8006fd4 <_lv_indev_scroll_handler+0x4c8>)
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	0038      	movs	r0, r7
 8006fc4:	b209      	sxth	r1, r1
 8006fc6:	f7ff fc49 	bl	800685c <find_snap_point_x>
                    proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 8006fca:	3d01      	subs	r5, #1
                    proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 8006fcc:	8620      	strh	r0, [r4, #48]	; 0x30
                    proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 8006fce:	b22a      	sxth	r2, r5
 8006fd0:	e7e3      	b.n	8006f9a <_lv_indev_scroll_handler+0x48e>
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	00001fff 	.word	0x00001fff
 8006fd8:	ffffe001 	.word	0xffffe001
                proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x2, LV_COORD_MAX, 0);
 8006fdc:	2314      	movs	r3, #20
 8006fde:	5ef9      	ldrsh	r1, [r7, r3]
 8006fe0:	4a05      	ldr	r2, [pc, #20]	; (8006ff8 <_lv_indev_scroll_handler+0x4ec>)
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	0038      	movs	r0, r7
 8006fe6:	f7ff fc39 	bl	800685c <find_snap_point_x>
 8006fea:	8620      	strh	r0, [r4, #48]	; 0x30
                proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x2, 0);
 8006fec:	2314      	movs	r3, #20
 8006fee:	5efa      	ldrsh	r2, [r7, r3]
 8006ff0:	e7d3      	b.n	8006f9a <_lv_indev_scroll_handler+0x48e>
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8006ff2:	46b4      	mov	ip, r6
 8006ff4:	2600      	movs	r6, #0
 8006ff6:	e5b7      	b.n	8006b68 <_lv_indev_scroll_handler+0x5c>
 8006ff8:	00001fff 	.word	0x00001fff

08006ffc <_lv_indev_scroll_throw_handler>:
{
 8006ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ffe:	464e      	mov	r6, r9
 8007000:	46de      	mov	lr, fp
 8007002:	4657      	mov	r7, sl
 8007004:	4645      	mov	r5, r8
 8007006:	b5e0      	push	{r5, r6, r7, lr}
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 8007008:	6a86      	ldr	r6, [r0, #40]	; 0x28
{
 800700a:	0004      	movs	r4, r0
 800700c:	b083      	sub	sp, #12
    if(scroll_obj == NULL) return;
 800700e:	2e00      	cmp	r6, #0
 8007010:	d003      	beq.n	800701a <_lv_indev_scroll_throw_handler+0x1e>
    if(proc->types.pointer.scroll_dir == LV_DIR_NONE) return;
 8007012:	233c      	movs	r3, #60	; 0x3c
 8007014:	5cc3      	ldrb	r3, [r0, r3]
 8007016:	071b      	lsls	r3, r3, #28
 8007018:	d106      	bne.n	8007028 <_lv_indev_scroll_throw_handler+0x2c>
}
 800701a:	b003      	add	sp, #12
 800701c:	bcf0      	pop	{r4, r5, r6, r7}
 800701e:	46bb      	mov	fp, r7
 8007020:	46b2      	mov	sl, r6
 8007022:	46a9      	mov	r9, r5
 8007024:	46a0      	mov	r8, r4
 8007026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_indev_t * indev_act = lv_indev_get_act();
 8007028:	f7fe fb20 	bl	800566c <lv_indev_get_act>
    lv_coord_t scroll_throw = indev_act->driver->scroll_throw;
 800702c:	6803      	ldr	r3, [r0, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
 800702e:	4680      	mov	r8, r0
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_MOMENTUM) == false) {
 8007030:	2140      	movs	r1, #64	; 0x40
 8007032:	0030      	movs	r0, r6
    lv_coord_t scroll_throw = indev_act->driver->scroll_throw;
 8007034:	7d5f      	ldrb	r7, [r3, #21]
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_MOMENTUM) == false) {
 8007036:	f000 ff6d 	bl	8007f14 <lv_obj_has_flag>
 800703a:	2800      	cmp	r0, #0
 800703c:	d100      	bne.n	8007040 <_lv_indev_scroll_throw_handler+0x44>
        proc->types.pointer.scroll_throw_vect.x = 0;
 800703e:	61a0      	str	r0, [r4, #24]
    lv_scroll_snap_t align_x = lv_obj_get_scroll_snap_x(scroll_obj);
 8007040:	0030      	movs	r0, r6
 8007042:	f003 fd8d 	bl	800ab60 <lv_obj_get_scroll_snap_x>
 8007046:	4681      	mov	r9, r0
    lv_scroll_snap_t align_y = lv_obj_get_scroll_snap_y(scroll_obj);
 8007048:	0030      	movs	r0, r6
 800704a:	f003 fd93 	bl	800ab74 <lv_obj_get_scroll_snap_y>
    if(proc->types.pointer.scroll_dir == LV_DIR_VER) {
 800704e:	233c      	movs	r3, #60	; 0x3c
 8007050:	250f      	movs	r5, #15
 8007052:	5ce3      	ldrb	r3, [r4, r3]
    lv_scroll_snap_t align_y = lv_obj_get_scroll_snap_y(scroll_obj);
 8007054:	4682      	mov	sl, r0
    if(proc->types.pointer.scroll_dir == LV_DIR_VER) {
 8007056:	401d      	ands	r5, r3
 8007058:	2d0c      	cmp	r5, #12
 800705a:	d05b      	beq.n	8007114 <_lv_indev_scroll_throw_handler+0x118>
    else if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 800705c:	2d03      	cmp	r5, #3
 800705e:	d01b      	beq.n	8007098 <_lv_indev_scroll_throw_handler+0x9c>
    if(proc->types.pointer.scroll_throw_vect.x == 0 && proc->types.pointer.scroll_throw_vect.y == 0) {
 8007060:	69a3      	ldr	r3, [r4, #24]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1d9      	bne.n	800701a <_lv_indev_scroll_throw_handler+0x1e>
        if(align_y == LV_SCROLL_SNAP_NONE) {
 8007066:	4653      	mov	r3, sl
 8007068:	2b00      	cmp	r3, #0
 800706a:	d07a      	beq.n	8007162 <_lv_indev_scroll_throw_handler+0x166>
        if(align_x == LV_SCROLL_SNAP_NONE) {
 800706c:	464b      	mov	r3, r9
 800706e:	2b00      	cmp	r3, #0
 8007070:	d100      	bne.n	8007074 <_lv_indev_scroll_throw_handler+0x78>
 8007072:	e0c5      	b.n	8007200 <_lv_indev_scroll_throw_handler+0x204>
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_END, indev_act);
 8007074:	4642      	mov	r2, r8
 8007076:	210a      	movs	r1, #10
 8007078:	0030      	movs	r0, r6
 800707a:	f7fd fdd9 	bl	8004c30 <lv_event_send>
        if(proc->reset_query) return;
 800707e:	2202      	movs	r2, #2
 8007080:	0011      	movs	r1, r2
 8007082:	7863      	ldrb	r3, [r4, #1]
 8007084:	4019      	ands	r1, r3
 8007086:	421a      	tst	r2, r3
 8007088:	d1c7      	bne.n	800701a <_lv_indev_scroll_throw_handler+0x1e>
        proc->types.pointer.scroll_dir = LV_DIR_NONE;
 800708a:	200f      	movs	r0, #15
 800708c:	323a      	adds	r2, #58	; 0x3a
 800708e:	5ca3      	ldrb	r3, [r4, r2]
 8007090:	4383      	bics	r3, r0
 8007092:	54a3      	strb	r3, [r4, r2]
        proc->types.pointer.scroll_obj = NULL;
 8007094:	62a1      	str	r1, [r4, #40]	; 0x28
 8007096:	e7c0      	b.n	800701a <_lv_indev_scroll_throw_handler+0x1e>
        proc->types.pointer.scroll_throw_vect.y = 0;
 8007098:	2300      	movs	r3, #0
 800709a:	8363      	strh	r3, [r4, #26]
        if(align_x == LV_SCROLL_SNAP_NONE) {
 800709c:	464b      	mov	r3, r9
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d100      	bne.n	80070a4 <_lv_indev_scroll_throw_handler+0xa8>
 80070a2:	e0c1      	b.n	8007228 <_lv_indev_scroll_throw_handler+0x22c>
            lv_coord_t diff_x = scroll_throw_predict_x(proc);
 80070a4:	2318      	movs	r3, #24
 80070a6:	5ee5      	ldrsh	r5, [r4, r3]
    lv_indev_t * indev_act = lv_indev_get_act();
 80070a8:	f7fe fae0 	bl	800566c <lv_indev_get_act>
    lv_coord_t scroll_throw = indev_act->driver->scroll_throw;
 80070ac:	6803      	ldr	r3, [r0, #0]
 80070ae:	7d5b      	ldrb	r3, [r3, #21]
    while(x) {
 80070b0:	2d00      	cmp	r5, #0
 80070b2:	d100      	bne.n	80070b6 <_lv_indev_scroll_throw_handler+0xba>
 80070b4:	e0fd      	b.n	80072b2 <_lv_indev_scroll_throw_handler+0x2b6>
        x = x * (100 - scroll_throw) / 100;
 80070b6:	2264      	movs	r2, #100	; 0x64
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	469b      	mov	fp, r3
    lv_coord_t move = 0;
 80070bc:	2700      	movs	r7, #0
        x = x * (100 - scroll_throw) / 100;
 80070be:	4658      	mov	r0, fp
 80070c0:	2164      	movs	r1, #100	; 0x64
 80070c2:	4368      	muls	r0, r5
 80070c4:	f7f9 f8ba 	bl	800023c <__divsi3>
        move += x;
 80070c8:	197f      	adds	r7, r7, r5
        x = x * (100 - scroll_throw) / 100;
 80070ca:	b205      	sxth	r5, r0
        move += x;
 80070cc:	b23f      	sxth	r7, r7
    while(x) {
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	d1f5      	bne.n	80070be <_lv_indev_scroll_throw_handler+0xc2>
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 80070d2:	003b      	movs	r3, r7
            proc->types.pointer.scroll_throw_vect.x = 0;
 80070d4:	2200      	movs	r2, #0
 80070d6:	8322      	strh	r2, [r4, #24]
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 80070d8:	2214      	movs	r2, #20
 80070da:	5ea1      	ldrsh	r1, [r4, r2]
 80070dc:	2030      	movs	r0, #48	; 0x30
 80070de:	5e22      	ldrsh	r2, [r4, r0]
 80070e0:	18cb      	adds	r3, r1, r3
 80070e2:	4293      	cmp	r3, r2
 80070e4:	da02      	bge.n	80070ec <_lv_indev_scroll_throw_handler+0xf0>
            *diff_x = proc->types.pointer.scroll_area.x1 - proc->types.pointer.scroll_sum.x;
 80070e6:	1a52      	subs	r2, r2, r1
 80070e8:	b217      	sxth	r7, r2
        if(proc->types.pointer.scroll_sum.x + *diff_x > proc->types.pointer.scroll_area.x2) {
 80070ea:	187b      	adds	r3, r7, r1
 80070ec:	2034      	movs	r0, #52	; 0x34
 80070ee:	5e22      	ldrsh	r2, [r4, r0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	da00      	bge.n	80070f6 <_lv_indev_scroll_throw_handler+0xfa>
 80070f4:	e0d6      	b.n	80072a4 <_lv_indev_scroll_throw_handler+0x2a8>
            lv_obj_scroll_by(scroll_obj, x + diff_x, 0, LV_ANIM_ON);
 80070f6:	b2bd      	uxth	r5, r7
            lv_coord_t x = find_snap_point_x(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_x);
 80070f8:	003b      	movs	r3, r7
 80070fa:	0030      	movs	r0, r6
 80070fc:	4a6e      	ldr	r2, [pc, #440]	; (80072b8 <_lv_indev_scroll_throw_handler+0x2bc>)
 80070fe:	496f      	ldr	r1, [pc, #444]	; (80072bc <_lv_indev_scroll_throw_handler+0x2c0>)
 8007100:	f7ff fbac 	bl	800685c <find_snap_point_x>
            lv_obj_scroll_by(scroll_obj, x + diff_x, 0, LV_ANIM_ON);
 8007104:	182d      	adds	r5, r5, r0
 8007106:	2301      	movs	r3, #1
 8007108:	2200      	movs	r2, #0
 800710a:	0030      	movs	r0, r6
 800710c:	b229      	sxth	r1, r5
 800710e:	f004 fa93 	bl	800b638 <lv_obj_scroll_by>
 8007112:	e7a5      	b.n	8007060 <_lv_indev_scroll_throw_handler+0x64>
        proc->types.pointer.scroll_throw_vect.x = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	8323      	strh	r3, [r4, #24]
        if(align_y == LV_SCROLL_SNAP_NONE) {
 8007118:	2800      	cmp	r0, #0
 800711a:	d136      	bne.n	800718a <_lv_indev_scroll_throw_handler+0x18e>
                proc->types.pointer.scroll_throw_vect.y * (100 - scroll_throw) / 100;
 800711c:	2064      	movs	r0, #100	; 0x64
 800711e:	221a      	movs	r2, #26
 8007120:	5ea3      	ldrsh	r3, [r4, r2]
 8007122:	1bc0      	subs	r0, r0, r7
 8007124:	4358      	muls	r0, r3
 8007126:	2164      	movs	r1, #100	; 0x64
 8007128:	f7f9 f888 	bl	800023c <__divsi3>
            proc->types.pointer.scroll_throw_vect.y =
 800712c:	8360      	strh	r0, [r4, #26]
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 800712e:	0030      	movs	r0, r6
 8007130:	f003 fd48 	bl	800abc4 <lv_obj_get_scroll_bottom>
 8007134:	0007      	movs	r7, r0
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 8007136:	0030      	movs	r0, r6
 8007138:	f003 fd3a 	bl	800abb0 <lv_obj_get_scroll_top>
            proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb,
 800713c:	231a      	movs	r3, #26
 800713e:	5ee1      	ldrsh	r1, [r4, r3]
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 8007140:	0002      	movs	r2, r0
            proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb,
 8007142:	003b      	movs	r3, r7
 8007144:	0030      	movs	r0, r6
 8007146:	9500      	str	r5, [sp, #0]
 8007148:	f7ff fc1c 	bl	8006984 <elastic_diff>
            lv_obj_scroll_by(scroll_obj, 0, proc->types.pointer.scroll_throw_vect.y, LV_ANIM_OFF);
 800714c:	2300      	movs	r3, #0
            proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb,
 800714e:	0002      	movs	r2, r0
 8007150:	8360      	strh	r0, [r4, #26]
            lv_obj_scroll_by(scroll_obj, 0, proc->types.pointer.scroll_throw_vect.y, LV_ANIM_OFF);
 8007152:	2100      	movs	r1, #0
 8007154:	0030      	movs	r0, r6
 8007156:	f004 fa6f 	bl	800b638 <lv_obj_scroll_by>
    if(proc->types.pointer.scroll_throw_vect.x == 0 && proc->types.pointer.scroll_throw_vect.y == 0) {
 800715a:	69a3      	ldr	r3, [r4, #24]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d000      	beq.n	8007162 <_lv_indev_scroll_throw_handler+0x166>
 8007160:	e75b      	b.n	800701a <_lv_indev_scroll_throw_handler+0x1e>
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 8007162:	0030      	movs	r0, r6
 8007164:	f003 fd24 	bl	800abb0 <lv_obj_get_scroll_top>
 8007168:	0005      	movs	r5, r0
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 800716a:	0030      	movs	r0, r6
 800716c:	f003 fd2a 	bl	800abc4 <lv_obj_get_scroll_bottom>
            if(st > 0 || sb > 0) {
 8007170:	2d00      	cmp	r5, #0
 8007172:	dd7d      	ble.n	8007270 <_lv_indev_scroll_throw_handler+0x274>
                else if(sb < 0) {
 8007174:	2800      	cmp	r0, #0
 8007176:	db00      	blt.n	800717a <_lv_indev_scroll_throw_handler+0x17e>
 8007178:	e778      	b.n	800706c <_lv_indev_scroll_throw_handler+0x70>
                    lv_obj_scroll_by(scroll_obj, 0, -sb, LV_ANIM_ON);
 800717a:	4240      	negs	r0, r0
 800717c:	b202      	sxth	r2, r0
 800717e:	2301      	movs	r3, #1
 8007180:	2100      	movs	r1, #0
 8007182:	0030      	movs	r0, r6
 8007184:	f004 fa58 	bl	800b638 <lv_obj_scroll_by>
 8007188:	e770      	b.n	800706c <_lv_indev_scroll_throw_handler+0x70>
            lv_coord_t diff_y = scroll_throw_predict_y(proc);
 800718a:	231a      	movs	r3, #26
 800718c:	5ee5      	ldrsh	r5, [r4, r3]
    lv_indev_t * indev_act = lv_indev_get_act();
 800718e:	f7fe fa6d 	bl	800566c <lv_indev_get_act>
    lv_coord_t scroll_throw = indev_act->driver->scroll_throw;
 8007192:	6803      	ldr	r3, [r0, #0]
 8007194:	7d5b      	ldrb	r3, [r3, #21]
    while(y) {
 8007196:	2d00      	cmp	r5, #0
 8007198:	d100      	bne.n	800719c <_lv_indev_scroll_throw_handler+0x1a0>
 800719a:	e087      	b.n	80072ac <_lv_indev_scroll_throw_handler+0x2b0>
        y = y * (100 - scroll_throw) / 100;
 800719c:	2264      	movs	r2, #100	; 0x64
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	469a      	mov	sl, r3
    lv_coord_t move = 0;
 80071a2:	2700      	movs	r7, #0
        y = y * (100 - scroll_throw) / 100;
 80071a4:	4650      	mov	r0, sl
 80071a6:	2164      	movs	r1, #100	; 0x64
 80071a8:	4368      	muls	r0, r5
 80071aa:	f7f9 f847 	bl	800023c <__divsi3>
        move += y;
 80071ae:	197f      	adds	r7, r7, r5
        y = y * (100 - scroll_throw) / 100;
 80071b0:	b205      	sxth	r5, r0
        move += y;
 80071b2:	b23f      	sxth	r7, r7
    while(y) {
 80071b4:	2d00      	cmp	r5, #0
 80071b6:	d1f5      	bne.n	80071a4 <_lv_indev_scroll_throw_handler+0x1a8>
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 80071b8:	003b      	movs	r3, r7
            proc->types.pointer.scroll_throw_vect.y = 0;
 80071ba:	2200      	movs	r2, #0
 80071bc:	8362      	strh	r2, [r4, #26]
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 80071be:	2216      	movs	r2, #22
 80071c0:	5ea1      	ldrsh	r1, [r4, r2]
 80071c2:	2032      	movs	r0, #50	; 0x32
 80071c4:	5e22      	ldrsh	r2, [r4, r0]
 80071c6:	18cb      	adds	r3, r1, r3
 80071c8:	4293      	cmp	r3, r2
 80071ca:	da02      	bge.n	80071d2 <_lv_indev_scroll_throw_handler+0x1d6>
            *diff_y = proc->types.pointer.scroll_area.y1 - proc->types.pointer.scroll_sum.y;
 80071cc:	1a52      	subs	r2, r2, r1
 80071ce:	b217      	sxth	r7, r2
        if(proc->types.pointer.scroll_sum.y + *diff_y > proc->types.pointer.scroll_area.y2) {
 80071d0:	187b      	adds	r3, r7, r1
 80071d2:	2036      	movs	r0, #54	; 0x36
 80071d4:	5e22      	ldrsh	r2, [r4, r0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	db46      	blt.n	8007268 <_lv_indev_scroll_throw_handler+0x26c>
            lv_obj_scroll_by(scroll_obj, 0, diff_y + y, LV_ANIM_ON);
 80071da:	b2bd      	uxth	r5, r7
            lv_coord_t y = find_snap_point_y(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_y);
 80071dc:	003b      	movs	r3, r7
 80071de:	4a36      	ldr	r2, [pc, #216]	; (80072b8 <_lv_indev_scroll_throw_handler+0x2bc>)
 80071e0:	4936      	ldr	r1, [pc, #216]	; (80072bc <_lv_indev_scroll_throw_handler+0x2c0>)
 80071e2:	0030      	movs	r0, r6
 80071e4:	f7ff faa6 	bl	8006734 <find_snap_point_y>
            lv_obj_scroll_by(scroll_obj, 0, diff_y + y, LV_ANIM_ON);
 80071e8:	182d      	adds	r5, r5, r0
 80071ea:	2301      	movs	r3, #1
 80071ec:	2100      	movs	r1, #0
 80071ee:	0030      	movs	r0, r6
 80071f0:	b22a      	sxth	r2, r5
 80071f2:	f004 fa21 	bl	800b638 <lv_obj_scroll_by>
    if(proc->types.pointer.scroll_throw_vect.x == 0 && proc->types.pointer.scroll_throw_vect.y == 0) {
 80071f6:	69a3      	ldr	r3, [r4, #24]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d100      	bne.n	80071fe <_lv_indev_scroll_throw_handler+0x202>
 80071fc:	e736      	b.n	800706c <_lv_indev_scroll_throw_handler+0x70>
 80071fe:	e70c      	b.n	800701a <_lv_indev_scroll_throw_handler+0x1e>
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8007200:	0030      	movs	r0, r6
 8007202:	f004 f9ed 	bl	800b5e0 <lv_obj_get_scroll_left>
 8007206:	0005      	movs	r5, r0
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8007208:	0030      	movs	r0, r6
 800720a:	f004 f9ff 	bl	800b60c <lv_obj_get_scroll_right>
            if(sl > 0 || sr > 0) {
 800720e:	2d00      	cmp	r5, #0
 8007210:	dd3b      	ble.n	800728a <_lv_indev_scroll_throw_handler+0x28e>
                else if(sr < 0) {
 8007212:	2800      	cmp	r0, #0
 8007214:	db00      	blt.n	8007218 <_lv_indev_scroll_throw_handler+0x21c>
 8007216:	e72d      	b.n	8007074 <_lv_indev_scroll_throw_handler+0x78>
                    lv_obj_scroll_by(scroll_obj, -sr, 0, LV_ANIM_ON);
 8007218:	4240      	negs	r0, r0
 800721a:	b201      	sxth	r1, r0
 800721c:	2301      	movs	r3, #1
 800721e:	2200      	movs	r2, #0
 8007220:	0030      	movs	r0, r6
 8007222:	f004 fa09 	bl	800b638 <lv_obj_scroll_by>
 8007226:	e725      	b.n	8007074 <_lv_indev_scroll_throw_handler+0x78>
                proc->types.pointer.scroll_throw_vect.x * (100 - scroll_throw) / 100;
 8007228:	2064      	movs	r0, #100	; 0x64
 800722a:	2218      	movs	r2, #24
 800722c:	5ea3      	ldrsh	r3, [r4, r2]
 800722e:	1bc0      	subs	r0, r0, r7
 8007230:	2164      	movs	r1, #100	; 0x64
 8007232:	4358      	muls	r0, r3
 8007234:	f7f9 f802 	bl	800023c <__divsi3>
            proc->types.pointer.scroll_throw_vect.x =
 8007238:	8320      	strh	r0, [r4, #24]
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 800723a:	0030      	movs	r0, r6
 800723c:	f004 f9d0 	bl	800b5e0 <lv_obj_get_scroll_left>
 8007240:	0007      	movs	r7, r0
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8007242:	0030      	movs	r0, r6
 8007244:	f004 f9e2 	bl	800b60c <lv_obj_get_scroll_right>
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl, sr,
 8007248:	2218      	movs	r2, #24
 800724a:	5ea1      	ldrsh	r1, [r4, r2]
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 800724c:	0003      	movs	r3, r0
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl, sr,
 800724e:	003a      	movs	r2, r7
 8007250:	0030      	movs	r0, r6
 8007252:	9500      	str	r5, [sp, #0]
 8007254:	f7ff fb96 	bl	8006984 <elastic_diff>
            lv_obj_scroll_by(scroll_obj, proc->types.pointer.scroll_throw_vect.x, 0, LV_ANIM_OFF);
 8007258:	2300      	movs	r3, #0
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl, sr,
 800725a:	0001      	movs	r1, r0
 800725c:	8320      	strh	r0, [r4, #24]
            lv_obj_scroll_by(scroll_obj, proc->types.pointer.scroll_throw_vect.x, 0, LV_ANIM_OFF);
 800725e:	2200      	movs	r2, #0
 8007260:	0030      	movs	r0, r6
 8007262:	f004 f9e9 	bl	800b638 <lv_obj_scroll_by>
 8007266:	e6fb      	b.n	8007060 <_lv_indev_scroll_throw_handler+0x64>
            *diff_y = proc->types.pointer.scroll_area.y2 - proc->types.pointer.scroll_sum.y;
 8007268:	1a52      	subs	r2, r2, r1
 800726a:	b295      	uxth	r5, r2
 800726c:	b217      	sxth	r7, r2
 800726e:	e7b5      	b.n	80071dc <_lv_indev_scroll_throw_handler+0x1e0>
            if(st > 0 || sb > 0) {
 8007270:	2800      	cmp	r0, #0
 8007272:	dc00      	bgt.n	8007276 <_lv_indev_scroll_throw_handler+0x27a>
 8007274:	e6fa      	b.n	800706c <_lv_indev_scroll_throw_handler+0x70>
                if(st < 0) {
 8007276:	2d00      	cmp	r5, #0
 8007278:	d100      	bne.n	800727c <_lv_indev_scroll_throw_handler+0x280>
 800727a:	e6f7      	b.n	800706c <_lv_indev_scroll_throw_handler+0x70>
                    lv_obj_scroll_by(scroll_obj, 0, st, LV_ANIM_ON);
 800727c:	2301      	movs	r3, #1
 800727e:	002a      	movs	r2, r5
 8007280:	2100      	movs	r1, #0
 8007282:	0030      	movs	r0, r6
 8007284:	f004 f9d8 	bl	800b638 <lv_obj_scroll_by>
 8007288:	e6f0      	b.n	800706c <_lv_indev_scroll_throw_handler+0x70>
            if(sl > 0 || sr > 0) {
 800728a:	2800      	cmp	r0, #0
 800728c:	dc00      	bgt.n	8007290 <_lv_indev_scroll_throw_handler+0x294>
 800728e:	e6f1      	b.n	8007074 <_lv_indev_scroll_throw_handler+0x78>
                if(sl < 0) {
 8007290:	2d00      	cmp	r5, #0
 8007292:	d100      	bne.n	8007296 <_lv_indev_scroll_throw_handler+0x29a>
 8007294:	e6ee      	b.n	8007074 <_lv_indev_scroll_throw_handler+0x78>
                    lv_obj_scroll_by(scroll_obj, sl, 0, LV_ANIM_ON);
 8007296:	2301      	movs	r3, #1
 8007298:	2200      	movs	r2, #0
 800729a:	0029      	movs	r1, r5
 800729c:	0030      	movs	r0, r6
 800729e:	f004 f9cb 	bl	800b638 <lv_obj_scroll_by>
 80072a2:	e6e7      	b.n	8007074 <_lv_indev_scroll_throw_handler+0x78>
            *diff_x = proc->types.pointer.scroll_area.x2 - proc->types.pointer.scroll_sum.x;
 80072a4:	1a52      	subs	r2, r2, r1
 80072a6:	b295      	uxth	r5, r2
 80072a8:	b217      	sxth	r7, r2
 80072aa:	e725      	b.n	80070f8 <_lv_indev_scroll_throw_handler+0xfc>
    lv_coord_t move = 0;
 80072ac:	2700      	movs	r7, #0
    while(y) {
 80072ae:	2300      	movs	r3, #0
 80072b0:	e783      	b.n	80071ba <_lv_indev_scroll_throw_handler+0x1be>
    lv_coord_t move = 0;
 80072b2:	2700      	movs	r7, #0
    while(x) {
 80072b4:	2300      	movs	r3, #0
 80072b6:	e70d      	b.n	80070d4 <_lv_indev_scroll_throw_handler+0xd8>
 80072b8:	00001fff 	.word	0x00001fff
 80072bc:	ffffe001 	.word	0xffffe001

080072c0 <lv_indev_scroll_throw_predict>:
{
 80072c0:	0003      	movs	r3, r0
 80072c2:	b570      	push	{r4, r5, r6, lr}
    if(indev == NULL) return 0;
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d01b      	beq.n	8007300 <lv_indev_scroll_throw_predict+0x40>
    switch(dir) {
 80072c8:	2903      	cmp	r1, #3
 80072ca:	d016      	beq.n	80072fa <lv_indev_scroll_throw_predict+0x3a>
 80072cc:	2400      	movs	r4, #0
 80072ce:	290c      	cmp	r1, #12
 80072d0:	d111      	bne.n	80072f6 <lv_indev_scroll_throw_predict+0x36>
            v = indev->proc.types.pointer.scroll_throw_vect_ori.y;
 80072d2:	2222      	movs	r2, #34	; 0x22
 80072d4:	5e80      	ldrsh	r0, [r0, r2]
    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	7d5b      	ldrb	r3, [r3, #21]
    while(v) {
 80072da:	2800      	cmp	r0, #0
 80072dc:	d010      	beq.n	8007300 <lv_indev_scroll_throw_predict+0x40>
        v = v * (100 - scroll_throw) / 100;
 80072de:	2564      	movs	r5, #100	; 0x64
    lv_coord_t sum = 0;
 80072e0:	2400      	movs	r4, #0
        v = v * (100 - scroll_throw) / 100;
 80072e2:	1aed      	subs	r5, r5, r3
        sum += v;
 80072e4:	1824      	adds	r4, r4, r0
        v = v * (100 - scroll_throw) / 100;
 80072e6:	2164      	movs	r1, #100	; 0x64
 80072e8:	4368      	muls	r0, r5
 80072ea:	f7f8 ffa7 	bl	800023c <__divsi3>
 80072ee:	b200      	sxth	r0, r0
        sum += v;
 80072f0:	b224      	sxth	r4, r4
    while(v) {
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d1f6      	bne.n	80072e4 <lv_indev_scroll_throw_predict+0x24>
}
 80072f6:	0020      	movs	r0, r4
 80072f8:	bd70      	pop	{r4, r5, r6, pc}
            v = indev->proc.types.pointer.scroll_throw_vect_ori.x;
 80072fa:	2220      	movs	r2, #32
 80072fc:	5e80      	ldrsh	r0, [r0, r2]
            break;
 80072fe:	e7ea      	b.n	80072d6 <lv_indev_scroll_throw_predict+0x16>
    if(indev == NULL) return 0;
 8007300:	2400      	movs	r4, #0
 8007302:	e7f8      	b.n	80072f6 <lv_indev_scroll_throw_predict+0x36>

08007304 <lv_obj_draw>:
        obj->spec_attr = NULL;
    }
}

static void lv_obj_draw(lv_event_t * e)
{
 8007304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007306:	46d6      	mov	lr, sl
 8007308:	4646      	mov	r6, r8
 800730a:	464f      	mov	r7, r9
 800730c:	b5c0      	push	{r6, r7, lr}
 800730e:	b0a4      	sub	sp, #144	; 0x90
 8007310:	0005      	movs	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 8007312:	f7fd fcc9 	bl	8004ca8 <lv_event_get_code>
 8007316:	0006      	movs	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8007318:	0028      	movs	r0, r5
 800731a:	f7fd fcc1 	bl	8004ca0 <lv_event_get_target>
 800731e:	0004      	movs	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 8007320:	2e12      	cmp	r6, #18
 8007322:	d009      	beq.n	8007338 <lv_obj_draw+0x34>
        }

        info->res = LV_COVER_RES_COVER;

    }
    else if(code == LV_EVENT_DRAW_MAIN) {
 8007324:	2e15      	cmp	r6, #21
 8007326:	d019      	beq.n	800735c <lv_obj_draw+0x58>

        }
#endif
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
    }
    else if(code == LV_EVENT_DRAW_POST) {
 8007328:	2e18      	cmp	r6, #24
 800732a:	d06a      	beq.n	8007402 <lv_obj_draw+0xfe>

            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
        }
    }
}
 800732c:	b024      	add	sp, #144	; 0x90
 800732e:	bce0      	pop	{r5, r6, r7}
 8007330:	46ba      	mov	sl, r7
 8007332:	46b1      	mov	r9, r6
 8007334:	46a8      	mov	r8, r5
 8007336:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8007338:	0028      	movs	r0, r5
 800733a:	f7fd fcb9 	bl	8004cb0 <lv_event_get_param>
        if(info->res == LV_COVER_RES_MASKED) return;
 800733e:	7803      	ldrb	r3, [r0, #0]
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8007340:	0005      	movs	r5, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 8007342:	2b02      	cmp	r3, #2
 8007344:	d0f2      	beq.n	800732c <lv_obj_draw+0x28>
    return (lv_coord_t)v.num;
}

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8007346:	2217      	movs	r2, #23
 8007348:	2100      	movs	r1, #0
 800734a:	0020      	movs	r0, r4
 800734c:	f005 f93a 	bl	800c5c4 <lv_obj_get_style_prop>
 8007350:	1e06      	subs	r6, r0, #0
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8007352:	d100      	bne.n	8007356 <lv_obj_draw+0x52>
 8007354:	e100      	b.n	8007558 <lv_obj_draw+0x254>
            info->res = LV_COVER_RES_MASKED;
 8007356:	2302      	movs	r3, #2
 8007358:	702b      	strb	r3, [r5, #0]
            return;
 800735a:	e7e7      	b.n	800732c <lv_obj_draw+0x28>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800735c:	0028      	movs	r0, r5
 800735e:	f7fd fd05 	bl	8004d6c <lv_event_get_draw_ctx>
        lv_draw_rect_dsc_init(&draw_dsc);
 8007362:	ad04      	add	r5, sp, #16
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8007364:	0007      	movs	r7, r0
        lv_draw_rect_dsc_init(&draw_dsc);
 8007366:	0028      	movs	r0, r5
 8007368:	f008 fd8e 	bl	800fe88 <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 800736c:	2234      	movs	r2, #52	; 0x34
 800736e:	2100      	movs	r1, #0
 8007370:	0020      	movs	r0, r4
 8007372:	f005 f927 	bl	800c5c4 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8007376:	2800      	cmp	r0, #0
 8007378:	d004      	beq.n	8007384 <lv_obj_draw+0x80>
            draw_dsc.border_post = 1;
 800737a:	2223      	movs	r2, #35	; 0x23
 800737c:	2101      	movs	r1, #1
 800737e:	5cab      	ldrb	r3, [r5, r2]
 8007380:	430b      	orrs	r3, r1
 8007382:	54ab      	strb	r3, [r5, r2]
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8007384:	002a      	movs	r2, r5
 8007386:	2100      	movs	r1, #0
 8007388:	0020      	movs	r0, r4
 800738a:	f000 ff55 	bl	8008238 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800738e:	2268      	movs	r2, #104	; 0x68
 8007390:	2100      	movs	r1, #0
 8007392:	0020      	movs	r0, r4
 8007394:	f005 f916 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8007398:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800739a:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 800739c:	2269      	movs	r2, #105	; 0x69
 800739e:	0020      	movs	r0, r4
 80073a0:	f005 f910 	bl	800c5c4 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 80073a4:	2312      	movs	r3, #18
 80073a6:	5ee2      	ldrsh	r2, [r4, r3]
    dest->x2 = src->x2;
 80073a8:	2114      	movs	r1, #20
 80073aa:	5e63      	ldrsh	r3, [r4, r1]
        coords.y1 -= h;
 80073ac:	b280      	uxth	r0, r0
 80073ae:	4698      	mov	r8, r3
    dest->y2 = src->y2;
 80073b0:	2116      	movs	r1, #22
 80073b2:	5e63      	ldrsh	r3, [r4, r1]
        coords.x1 -= w;
 80073b4:	8a21      	ldrh	r1, [r4, #16]
 80073b6:	469c      	mov	ip, r3
 80073b8:	b2b3      	uxth	r3, r6
        coords.y1 -= h;
 80073ba:	1a12      	subs	r2, r2, r0
        coords.x1 -= w;
 80073bc:	ae02      	add	r6, sp, #8
        coords.y2 += h;
 80073be:	4460      	add	r0, ip
        coords.x1 -= w;
 80073c0:	1ac9      	subs	r1, r1, r3
        coords.x2 += w;
 80073c2:	4443      	add	r3, r8
        coords.x1 -= w;
 80073c4:	8031      	strh	r1, [r6, #0]
        coords.x2 += w;
 80073c6:	80b3      	strh	r3, [r6, #4]
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80073c8:	0039      	movs	r1, r7
        coords.y1 -= h;
 80073ca:	8072      	strh	r2, [r6, #2]
        coords.y2 += h;
 80073cc:	80f0      	strh	r0, [r6, #6]
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80073ce:	a812      	add	r0, sp, #72	; 0x48
 80073d0:	f001 f92e 	bl	8008630 <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 80073d4:	4b98      	ldr	r3, [pc, #608]	; (8007638 <lv_obj_draw+0x334>)
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80073d6:	211a      	movs	r1, #26
        part_dsc.class_p = MY_CLASS;
 80073d8:	9313      	str	r3, [sp, #76]	; 0x4c
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 80073da:	2300      	movs	r3, #0
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80073dc:	aa12      	add	r2, sp, #72	; 0x48
 80073de:	0020      	movs	r0, r4
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 80073e0:	9314      	str	r3, [sp, #80]	; 0x50
        part_dsc.rect_dsc = &draw_dsc;
 80073e2:	9516      	str	r5, [sp, #88]	; 0x58
        part_dsc.draw_area = &coords;
 80073e4:	9615      	str	r6, [sp, #84]	; 0x54
        part_dsc.part = LV_PART_MAIN;
 80073e6:	931f      	str	r3, [sp, #124]	; 0x7c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80073e8:	f7fd fc22 	bl	8004c30 <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 80073ec:	0032      	movs	r2, r6
 80073ee:	0029      	movs	r1, r5
 80073f0:	0038      	movs	r0, r7
            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 80073f2:	f008 fd6f 	bl	800fed4 <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80073f6:	211b      	movs	r1, #27
 80073f8:	0020      	movs	r0, r4
 80073fa:	aa12      	add	r2, sp, #72	; 0x48
 80073fc:	f7fd fc18 	bl	8004c30 <lv_event_send>
 8007400:	e794      	b.n	800732c <lv_obj_draw+0x28>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8007402:	0028      	movs	r0, r5
 8007404:	f7fd fcb2 	bl	8004d6c <lv_event_get_draw_ctx>
static void draw_scrollbar(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx)
{

    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8007408:	4669      	mov	r1, sp
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800740a:	0006      	movs	r6, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800740c:	aa02      	add	r2, sp, #8
 800740e:	0020      	movs	r0, r4
 8007410:	f004 fd3c 	bl	800be8c <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8007414:	4668      	mov	r0, sp
 8007416:	f00c fef3 	bl	8014200 <lv_area_get_size>
 800741a:	2800      	cmp	r0, #0
 800741c:	d104      	bne.n	8007428 <lv_obj_draw+0x124>
 800741e:	a802      	add	r0, sp, #8
 8007420:	f00c feee 	bl	8014200 <lv_area_get_size>
 8007424:	2800      	cmp	r0, #0
 8007426:	d047      	beq.n	80074b8 <lv_obj_draw+0x1b4>
 * @param dsc the draw descriptor to initialize
 * @return LV_RES_OK: the scrollbar is visible; LV_RES_INV: the scrollbar is not visible
 */
static lv_res_t scrollbar_init_draw_dsc(lv_obj_t * obj, lv_draw_rect_dsc_t * dsc)
{
    lv_draw_rect_dsc_init(dsc);
 8007428:	ad04      	add	r5, sp, #16
 800742a:	0028      	movs	r0, r5
 800742c:	f008 fd2c 	bl	800fe88 <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8007430:	2180      	movs	r1, #128	; 0x80
 8007432:	2221      	movs	r2, #33	; 0x21
 8007434:	0020      	movs	r0, r4
 8007436:	0249      	lsls	r1, r1, #9
 8007438:	f005 f8c4 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800743c:	b2c0      	uxtb	r0, r0
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 800743e:	70e8      	strb	r0, [r5, #3]
    if(dsc->bg_opa > LV_OPA_MIN) {
 8007440:	2802      	cmp	r0, #2
 8007442:	d900      	bls.n	8007446 <lv_obj_draw+0x142>
 8007444:	e0e6      	b.n	8007614 <lv_obj_draw+0x310>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8007446:	2180      	movs	r1, #128	; 0x80
 8007448:	2231      	movs	r2, #49	; 0x31
 800744a:	0020      	movs	r0, r4
 800744c:	0249      	lsls	r1, r1, #9
 800744e:	f005 f8b9 	bl	800c5c4 <lv_obj_get_style_prop>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
    }

    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 8007452:	2722      	movs	r7, #34	; 0x22
    return (lv_opa_t)v.num;
 8007454:	b2c3      	uxtb	r3, r0
 8007456:	55eb      	strb	r3, [r5, r7]
    if(dsc->border_opa > LV_OPA_MIN) {
 8007458:	2b02      	cmp	r3, #2
 800745a:	d900      	bls.n	800745e <lv_obj_draw+0x15a>
 800745c:	e0c9      	b.n	80075f2 <lv_obj_draw+0x2ee>
    }
    else {
        return LV_RES_INV;
    }
#else
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP) return LV_RES_OK;
 800745e:	78e8      	ldrb	r0, [r5, #3]
 8007460:	4303      	orrs	r3, r0
 8007462:	d029      	beq.n	80074b8 <lv_obj_draw+0x1b4>
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8007464:	a812      	add	r0, sp, #72	; 0x48
 8007466:	0031      	movs	r1, r6
 8007468:	f001 f8e2 	bl	8008630 <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 800746c:	4b72      	ldr	r3, [pc, #456]	; (8007638 <lv_obj_draw+0x334>)
    if(lv_area_get_size(&hor_area) > 0) {
 800746e:	4668      	mov	r0, sp
    part_dsc.class_p = MY_CLASS;
 8007470:	9313      	str	r3, [sp, #76]	; 0x4c
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 8007472:	2302      	movs	r3, #2
 8007474:	9314      	str	r3, [sp, #80]	; 0x50
    part_dsc.part = LV_PART_SCROLLBAR;
 8007476:	2380      	movs	r3, #128	; 0x80
 8007478:	025b      	lsls	r3, r3, #9
    part_dsc.rect_dsc = &draw_dsc;
 800747a:	9516      	str	r5, [sp, #88]	; 0x58
    part_dsc.part = LV_PART_SCROLLBAR;
 800747c:	931f      	str	r3, [sp, #124]	; 0x7c
    if(lv_area_get_size(&hor_area) > 0) {
 800747e:	f00c febf 	bl	8014200 <lv_area_get_size>
 8007482:	2800      	cmp	r0, #0
 8007484:	d000      	beq.n	8007488 <lv_obj_draw+0x184>
 8007486:	e0a2      	b.n	80075ce <lv_obj_draw+0x2ca>
    if(lv_area_get_size(&ver_area) > 0) {
 8007488:	a802      	add	r0, sp, #8
 800748a:	f00c feb9 	bl	8014200 <lv_area_get_size>
 800748e:	2800      	cmp	r0, #0
 8007490:	d012      	beq.n	80074b8 <lv_obj_draw+0x1b4>
        part_dsc.draw_area = &ver_area;
 8007492:	ab02      	add	r3, sp, #8
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8007494:	211a      	movs	r1, #26
 8007496:	aa12      	add	r2, sp, #72	; 0x48
 8007498:	0020      	movs	r0, r4
        part_dsc.draw_area = &ver_area;
 800749a:	9315      	str	r3, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 800749c:	f7fd fbc8 	bl	8004c30 <lv_event_send>
        part_dsc.draw_area = &ver_area;
 80074a0:	ab02      	add	r3, sp, #8
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 80074a2:	001a      	movs	r2, r3
 80074a4:	0029      	movs	r1, r5
 80074a6:	0030      	movs	r0, r6
        part_dsc.draw_area = &ver_area;
 80074a8:	9315      	str	r3, [sp, #84]	; 0x54
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 80074aa:	f008 fd13 	bl	800fed4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80074ae:	211b      	movs	r1, #27
 80074b0:	0020      	movs	r0, r4
 80074b2:	aa12      	add	r2, sp, #72	; 0x48
 80074b4:	f7fd fbbc 	bl	8004c30 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 80074b8:	2234      	movs	r2, #52	; 0x34
 80074ba:	2100      	movs	r1, #0
 80074bc:	0020      	movs	r0, r4
 80074be:	f005 f881 	bl	800c5c4 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d100      	bne.n	80074c8 <lv_obj_draw+0x1c4>
 80074c6:	e731      	b.n	800732c <lv_obj_draw+0x28>
            lv_draw_rect_dsc_init(&draw_dsc);
 80074c8:	ad04      	add	r5, sp, #16
 80074ca:	0028      	movs	r0, r5
 80074cc:	f008 fcdc 	bl	800fe88 <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 80074d0:	2700      	movs	r7, #0
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 80074d2:	232a      	movs	r3, #42	; 0x2a
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 80074d4:	70ef      	strb	r7, [r5, #3]
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 80074d6:	76af      	strb	r7, [r5, #26]
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 80074d8:	54ef      	strb	r7, [r5, r3]
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 80074da:	330c      	adds	r3, #12
 80074dc:	54ef      	strb	r7, [r5, r3]
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 80074de:	002a      	movs	r2, r5
 80074e0:	2100      	movs	r1, #0
 80074e2:	0020      	movs	r0, r4
 80074e4:	f000 fea8 	bl	8008238 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80074e8:	2268      	movs	r2, #104	; 0x68
 80074ea:	2100      	movs	r1, #0
 80074ec:	0020      	movs	r0, r4
 80074ee:	f005 f869 	bl	800c5c4 <lv_obj_get_style_prop>
 80074f2:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80074f4:	2269      	movs	r2, #105	; 0x69
 80074f6:	2100      	movs	r1, #0
 80074f8:	0020      	movs	r0, r4
 80074fa:	f005 f863 	bl	800c5c4 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 80074fe:	2312      	movs	r3, #18
 8007500:	5ee2      	ldrsh	r2, [r4, r3]
            coords.x1 -= w;
 8007502:	8a21      	ldrh	r1, [r4, #16]
 8007504:	4692      	mov	sl, r2
    dest->x2 = src->x2;
 8007506:	2214      	movs	r2, #20
 8007508:	5ea3      	ldrsh	r3, [r4, r2]
            coords.y1 -= h;
 800750a:	b280      	uxth	r0, r0
 800750c:	4699      	mov	r9, r3
    dest->y2 = src->y2;
 800750e:	2216      	movs	r2, #22
 8007510:	5ea3      	ldrsh	r3, [r4, r2]
            coords.x1 -= w;
 8007512:	466a      	mov	r2, sp
 8007514:	469c      	mov	ip, r3
 8007516:	4643      	mov	r3, r8
 8007518:	b29b      	uxth	r3, r3
 800751a:	1ac9      	subs	r1, r1, r3
            coords.x2 += w;
 800751c:	444b      	add	r3, r9
 800751e:	8193      	strh	r3, [r2, #12]
            coords.y1 -= h;
 8007520:	4653      	mov	r3, sl
            coords.x1 -= w;
 8007522:	8111      	strh	r1, [r2, #8]
            coords.y1 -= h;
 8007524:	1a1a      	subs	r2, r3, r0
 8007526:	466b      	mov	r3, sp
            coords.y2 += h;
 8007528:	4460      	add	r0, ip
            coords.y1 -= h;
 800752a:	815a      	strh	r2, [r3, #10]
            coords.y2 += h;
 800752c:	81d8      	strh	r0, [r3, #14]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 800752e:	0031      	movs	r1, r6
 8007530:	a812      	add	r0, sp, #72	; 0x48
 8007532:	f001 f87d 	bl	8008630 <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 8007536:	4b40      	ldr	r3, [pc, #256]	; (8007638 <lv_obj_draw+0x334>)
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8007538:	211a      	movs	r1, #26
            part_dsc.class_p = MY_CLASS;
 800753a:	9313      	str	r3, [sp, #76]	; 0x4c
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 800753c:	2301      	movs	r3, #1
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 800753e:	aa12      	add	r2, sp, #72	; 0x48
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 8007540:	9314      	str	r3, [sp, #80]	; 0x50
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8007542:	0020      	movs	r0, r4
            part_dsc.draw_area = &coords;
 8007544:	ab02      	add	r3, sp, #8
            part_dsc.rect_dsc = &draw_dsc;
 8007546:	9516      	str	r5, [sp, #88]	; 0x58
            part_dsc.draw_area = &coords;
 8007548:	9315      	str	r3, [sp, #84]	; 0x54
            part_dsc.part = LV_PART_MAIN;
 800754a:	971f      	str	r7, [sp, #124]	; 0x7c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 800754c:	f7fd fb70 	bl	8004c30 <lv_event_send>
            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8007550:	0029      	movs	r1, r5
 8007552:	0030      	movs	r0, r6
 8007554:	aa02      	add	r2, sp, #8
 8007556:	e74c      	b.n	80073f2 <lv_obj_draw+0xee>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8007558:	220b      	movs	r2, #11
 800755a:	2100      	movs	r1, #0
 800755c:	0020      	movs	r0, r4
 800755e:	f005 f831 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8007562:	2268      	movs	r2, #104	; 0x68
 8007564:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 8007566:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8007568:	0020      	movs	r0, r4
 800756a:	f005 f82b 	bl	800c5c4 <lv_obj_get_style_prop>
 800756e:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8007570:	2269      	movs	r2, #105	; 0x69
 8007572:	2100      	movs	r1, #0
 8007574:	0020      	movs	r0, r4
 8007576:	f005 f825 	bl	800c5c4 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 800757a:	2312      	movs	r3, #18
 800757c:	5ee2      	ldrsh	r2, [r4, r3]
        coords.x1 -= w;
 800757e:	a912      	add	r1, sp, #72	; 0x48
 8007580:	4692      	mov	sl, r2
    dest->x2 = src->x2;
 8007582:	2214      	movs	r2, #20
 8007584:	5ea3      	ldrsh	r3, [r4, r2]
        coords.y1 -= h;
 8007586:	b280      	uxth	r0, r0
 8007588:	4699      	mov	r9, r3
    dest->y2 = src->y2;
 800758a:	2216      	movs	r2, #22
 800758c:	5ea3      	ldrsh	r3, [r4, r2]
        coords.x1 -= w;
 800758e:	8a22      	ldrh	r2, [r4, #16]
 8007590:	469c      	mov	ip, r3
 8007592:	4643      	mov	r3, r8
 8007594:	b29b      	uxth	r3, r3
 8007596:	1ad2      	subs	r2, r2, r3
        coords.x2 += w;
 8007598:	444b      	add	r3, r9
 800759a:	808b      	strh	r3, [r1, #4]
        coords.y1 -= h;
 800759c:	4653      	mov	r3, sl
        coords.x1 -= w;
 800759e:	800a      	strh	r2, [r1, #0]
        coords.y1 -= h;
 80075a0:	1a1a      	subs	r2, r3, r0
        coords.y2 += h;
 80075a2:	4460      	add	r0, ip
        coords.y1 -= h;
 80075a4:	804a      	strh	r2, [r1, #2]
        coords.y2 += h;
 80075a6:	80c8      	strh	r0, [r1, #6]
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 80075a8:	003a      	movs	r2, r7
 80075aa:	6868      	ldr	r0, [r5, #4]
 80075ac:	f00c ffdc 	bl	8014568 <_lv_area_is_in>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	d102      	bne.n	80075ba <lv_obj_draw+0x2b6>
            info->res = LV_COVER_RES_NOT_COVER;
 80075b4:	2301      	movs	r3, #1
 80075b6:	702b      	strb	r3, [r5, #0]
            return;
 80075b8:	e6b8      	b.n	800732c <lv_obj_draw+0x28>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80075ba:	2221      	movs	r2, #33	; 0x21
 80075bc:	2100      	movs	r1, #0
 80075be:	0020      	movs	r0, r4
 80075c0:	f005 f800 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80075c4:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 80075c6:	28fc      	cmp	r0, #252	; 0xfc
 80075c8:	d9f4      	bls.n	80075b4 <lv_obj_draw+0x2b0>
        info->res = LV_COVER_RES_COVER;
 80075ca:	702e      	strb	r6, [r5, #0]
 80075cc:	e6ae      	b.n	800732c <lv_obj_draw+0x28>
        part_dsc.draw_area = &hor_area;
 80075ce:	466b      	mov	r3, sp
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80075d0:	aa12      	add	r2, sp, #72	; 0x48
 80075d2:	211a      	movs	r1, #26
 80075d4:	0020      	movs	r0, r4
        part_dsc.draw_area = &hor_area;
 80075d6:	9315      	str	r3, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80075d8:	f7fd fb2a 	bl	8004c30 <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 80075dc:	466a      	mov	r2, sp
 80075de:	0029      	movs	r1, r5
 80075e0:	0030      	movs	r0, r6
 80075e2:	f008 fc77 	bl	800fed4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80075e6:	211b      	movs	r1, #27
 80075e8:	0020      	movs	r0, r4
 80075ea:	aa12      	add	r2, sp, #72	; 0x48
 80075ec:	f7fd fb20 	bl	8004c30 <lv_event_send>
 80075f0:	e74a      	b.n	8007488 <lv_obj_draw+0x184>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80075f2:	2180      	movs	r1, #128	; 0x80
 80075f4:	2232      	movs	r2, #50	; 0x32
 80075f6:	0020      	movs	r0, r4
 80075f8:	0249      	lsls	r1, r1, #9
 80075fa:	f004 ffe3 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80075fe:	b200      	sxth	r0, r0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 8007600:	8428      	strh	r0, [r5, #32]
        if(dsc->border_width > 0) {
 8007602:	2800      	cmp	r0, #0
 8007604:	dc0e      	bgt.n	8007624 <lv_obj_draw+0x320>
            dsc->border_opa = LV_OPA_TRANSP;
 8007606:	2300      	movs	r3, #0
 8007608:	55eb      	strb	r3, [r5, r7]
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP) return LV_RES_OK;
 800760a:	78eb      	ldrb	r3, [r5, #3]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d100      	bne.n	8007612 <lv_obj_draw+0x30e>
 8007610:	e752      	b.n	80074b8 <lv_obj_draw+0x1b4>
 8007612:	e727      	b.n	8007464 <lv_obj_draw+0x160>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8007614:	2180      	movs	r1, #128	; 0x80
 8007616:	2220      	movs	r2, #32
 8007618:	0020      	movs	r0, r4
 800761a:	0249      	lsls	r1, r1, #9
 800761c:	f004 ffd2 	bl	800c5c4 <lv_obj_get_style_prop>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 8007620:	80a8      	strh	r0, [r5, #4]
 8007622:	e710      	b.n	8007446 <lv_obj_draw+0x142>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8007624:	2180      	movs	r1, #128	; 0x80
 8007626:	2230      	movs	r2, #48	; 0x30
 8007628:	0020      	movs	r0, r4
 800762a:	0249      	lsls	r1, r1, #9
 800762c:	f004 ffca 	bl	800c5c4 <lv_obj_get_style_prop>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 8007630:	83e8      	strh	r0, [r5, #30]
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP) return LV_RES_OK;
 8007632:	5deb      	ldrb	r3, [r5, r7]
 8007634:	e713      	b.n	800745e <lv_obj_draw+0x15a>
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	0801b6a8 	.word	0x0801b6a8

0800763c <lv_obj_destructor>:
{
 800763c:	b510      	push	{r4, lr}
 800763e:	000c      	movs	r4, r1
    _lv_event_mark_deleted(obj);
 8007640:	0008      	movs	r0, r1
 8007642:	f7fd fb41 	bl	8004cc8 <_lv_event_mark_deleted>
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 8007646:	2000      	movs	r0, #0
 8007648:	f004 ffb6 	bl	800c5b8 <lv_obj_enable_style_refresh>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 800764c:	2100      	movs	r1, #0
 800764e:	4a16      	ldr	r2, [pc, #88]	; (80076a8 <lv_obj_destructor+0x6c>)
 8007650:	0020      	movs	r0, r4
 8007652:	f005 fa93 	bl	800cb7c <lv_obj_remove_style>
    lv_obj_enable_style_refresh(true);
 8007656:	2001      	movs	r0, #1
 8007658:	f004 ffae 	bl	800c5b8 <lv_obj_enable_style_refresh>
    lv_anim_del(obj, NULL);
 800765c:	2100      	movs	r1, #0
 800765e:	0020      	movs	r0, r4
 8007660:	f00c fc1c 	bl	8013e9c <lv_anim_del>
    if(obj->spec_attr) return obj->spec_attr->group_p;
 8007664:	68a3      	ldr	r3, [r4, #8]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d01d      	beq.n	80076a6 <lv_obj_destructor+0x6a>
    if(group) lv_group_remove_obj(obj);
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	2a00      	cmp	r2, #0
 800766e:	d005      	beq.n	800767c <lv_obj_destructor+0x40>
 8007670:	0020      	movs	r0, r4
 8007672:	f7fd fe13 	bl	800529c <lv_group_remove_obj>
    if(obj->spec_attr) {
 8007676:	68a3      	ldr	r3, [r4, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d014      	beq.n	80076a6 <lv_obj_destructor+0x6a>
        if(obj->spec_attr->children) {
 800767c:	6818      	ldr	r0, [r3, #0]
 800767e:	2800      	cmp	r0, #0
 8007680:	d004      	beq.n	800768c <lv_obj_destructor+0x50>
            lv_mem_free(obj->spec_attr->children);
 8007682:	f00d fc1f 	bl	8014ec4 <lv_mem_free>
            obj->spec_attr->children = NULL;
 8007686:	2200      	movs	r2, #0
 8007688:	68a3      	ldr	r3, [r4, #8]
 800768a:	601a      	str	r2, [r3, #0]
        if(obj->spec_attr->event_dsc) {
 800768c:	68d8      	ldr	r0, [r3, #12]
 800768e:	2800      	cmp	r0, #0
 8007690:	d004      	beq.n	800769c <lv_obj_destructor+0x60>
            lv_mem_free(obj->spec_attr->event_dsc);
 8007692:	f00d fc17 	bl	8014ec4 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 8007696:	2200      	movs	r2, #0
 8007698:	68a3      	ldr	r3, [r4, #8]
 800769a:	60da      	str	r2, [r3, #12]
        lv_mem_free(obj->spec_attr);
 800769c:	0018      	movs	r0, r3
 800769e:	f00d fc11 	bl	8014ec4 <lv_mem_free>
        obj->spec_attr = NULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60a3      	str	r3, [r4, #8]
}
 80076a6:	bd10      	pop	{r4, pc}
 80076a8:	000fffff 	.word	0x000fffff

080076ac <lv_obj_constructor>:
{
 80076ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ae:	46c6      	mov	lr, r8
    lv_obj_t * parent = obj->parent;
 80076b0:	684f      	ldr	r7, [r1, #4]
{
 80076b2:	000c      	movs	r4, r1
 80076b4:	b500      	push	{lr}
    if(parent) {
 80076b6:	2f00      	cmp	r7, #0
 80076b8:	d025      	beq.n	8007706 <lv_obj_constructor+0x5a>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 80076ba:	0038      	movs	r0, r7
 80076bc:	f003 ff90 	bl	800b5e0 <lv_obj_get_scroll_left>
 80076c0:	4680      	mov	r8, r0
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 80076c2:	0038      	movs	r0, r7
 80076c4:	f003 fa74 	bl	800abb0 <lv_obj_get_scroll_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80076c8:	2210      	movs	r2, #16
 80076ca:	0005      	movs	r5, r0
 80076cc:	2100      	movs	r1, #0
 80076ce:	0038      	movs	r0, r7
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 80076d0:	8a7e      	ldrh	r6, [r7, #18]
 80076d2:	f004 ff77 	bl	800c5c4 <lv_obj_get_style_prop>
 80076d6:	1836      	adds	r6, r6, r0
 80076d8:	1b73      	subs	r3, r6, r5
 80076da:	b29b      	uxth	r3, r3
 80076dc:	8263      	strh	r3, [r4, #18]
        obj->coords.y2 = obj->coords.y1 - 1;
 80076de:	3b01      	subs	r3, #1
 80076e0:	82e3      	strh	r3, [r4, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80076e2:	2212      	movs	r2, #18
 80076e4:	2100      	movs	r1, #0
 80076e6:	0038      	movs	r0, r7
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 80076e8:	8a3d      	ldrh	r5, [r7, #16]
 80076ea:	f004 ff6b 	bl	800c5c4 <lv_obj_get_style_prop>
 80076ee:	4643      	mov	r3, r8
 80076f0:	1828      	adds	r0, r5, r0
 80076f2:	1ac0      	subs	r0, r0, r3
 80076f4:	b280      	uxth	r0, r0
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 80076f6:	4b05      	ldr	r3, [pc, #20]	; (800770c <lv_obj_constructor+0x60>)
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 80076f8:	8220      	strh	r0, [r4, #16]
        obj->coords.x2  = obj->coords.x1 - 1;
 80076fa:	3801      	subs	r0, #1
 80076fc:	82a0      	strh	r0, [r4, #20]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 80076fe:	61a3      	str	r3, [r4, #24]
}
 8007700:	bc80      	pop	{r7}
 8007702:	46b8      	mov	r8, r7
 8007704:	bdf0      	pop	{r4, r5, r6, r7, pc}
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 8007706:	4b02      	ldr	r3, [pc, #8]	; (8007710 <lv_obj_constructor+0x64>)
 8007708:	618b      	str	r3, [r1, #24]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 800770a:	e7f9      	b.n	8007700 <lv_obj_constructor+0x54>
 800770c:	0000bb76 	.word	0x0000bb76
 8007710:	00001876 	.word	0x00001876

08007714 <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 8007714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007716:	4657      	mov	r7, sl
 8007718:	46de      	mov	lr, fp
 800771a:	464e      	mov	r6, r9
 800771c:	4645      	mov	r5, r8
 800771e:	b5e0      	push	{r5, r6, r7, lr}
 8007720:	b08d      	sub	sp, #52	; 0x34
 8007722:	9107      	str	r1, [sp, #28]
    if(obj->state == new_state) return;
 8007724:	8b83      	ldrh	r3, [r0, #28]
{
 8007726:	4682      	mov	sl, r0
 8007728:	000a      	movs	r2, r1
    if(obj->state == new_state) return;
 800772a:	930a      	str	r3, [sp, #40]	; 0x28
 800772c:	428b      	cmp	r3, r1
 800772e:	d006      	beq.n	800773e <lv_obj_set_state+0x2a>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
    obj->state = new_state;
 8007730:	8381      	strh	r1, [r0, #28]

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 8007732:	0019      	movs	r1, r3
 8007734:	f005 febc 	bl	800d4b0 <_lv_obj_style_state_compare>
 8007738:	9008      	str	r0, [sp, #32]
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 800773a:	2800      	cmp	r0, #0
 800773c:	d106      	bne.n	800774c <lv_obj_set_state+0x38>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
        lv_obj_invalidate(obj);
        lv_obj_refresh_ext_draw_size(obj);
    }
}
 800773e:	b00d      	add	sp, #52	; 0x34
 8007740:	bcf0      	pop	{r4, r5, r6, r7}
 8007742:	46bb      	mov	fp, r7
 8007744:	46b2      	mov	sl, r6
 8007746:	46a9      	mov	r9, r5
 8007748:	46a0      	mov	r8, r4
 800774a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 800774c:	2080      	movs	r0, #128	; 0x80
 800774e:	0080      	lsls	r0, r0, #2
 8007750:	f00d fc14 	bl	8014f7c <lv_mem_buf_get>
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8007754:	2180      	movs	r1, #128	; 0x80
 8007756:	0089      	lsls	r1, r1, #2
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8007758:	9004      	str	r0, [sp, #16]
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 800775a:	f00d ff13 	bl	8015584 <lv_memset_00>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 800775e:	4653      	mov	r3, sl
 8007760:	8bdb      	ldrh	r3, [r3, #30]
 8007762:	05db      	lsls	r3, r3, #23
 8007764:	0e9b      	lsrs	r3, r3, #26
 8007766:	d060      	beq.n	800782a <lv_obj_set_state+0x116>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8007768:	9b07      	ldr	r3, [sp, #28]
 800776a:	43db      	mvns	r3, r3
 800776c:	9306      	str	r3, [sp, #24]
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 800776e:	2300      	movs	r3, #0
    uint32_t tsi = 0;
 8007770:	469b      	mov	fp, r3
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8007772:	9302      	str	r3, [sp, #8]
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8007774:	9b02      	ldr	r3, [sp, #8]
 8007776:	00dc      	lsls	r4, r3, #3
 8007778:	4653      	mov	r3, sl
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	469c      	mov	ip, r3
 800777e:	44a4      	add	ip, r4
 8007780:	4665      	mov	r5, ip
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8007782:	686b      	ldr	r3, [r5, #4]
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8007784:	9505      	str	r5, [sp, #20]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8007786:	0218      	lsls	r0, r3, #8
 8007788:	0a00      	lsrs	r0, r0, #8
 800778a:	9303      	str	r3, [sp, #12]
 800778c:	f005 ffce 	bl	800d72c <lv_obj_style_get_selector_state>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8007790:	4653      	mov	r3, sl
 8007792:	68db      	ldr	r3, [r3, #12]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8007794:	9003      	str	r0, [sp, #12]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8007796:	469c      	mov	ip, r3
 8007798:	4464      	add	r4, ip
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800779a:	0006      	movs	r6, r0
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800779c:	6860      	ldr	r0, [r4, #4]
 800779e:	0200      	lsls	r0, r0, #8
 80077a0:	0a00      	lsrs	r0, r0, #8
 80077a2:	f005 ffc5 	bl	800d730 <lv_obj_style_get_selector_part>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 80077a6:	9b06      	ldr	r3, [sp, #24]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 80077a8:	0007      	movs	r7, r0
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 80077aa:	4233      	tst	r3, r6
 80077ac:	d11c      	bne.n	80077e8 <lv_obj_set_state+0xd4>
        if(obj_style->is_trans) continue;
 80077ae:	2202      	movs	r2, #2
 80077b0:	79eb      	ldrb	r3, [r5, #7]
 80077b2:	421a      	tst	r2, r3
 80077b4:	d118      	bne.n	80077e8 <lv_obj_set_state+0xd4>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 80077b6:	682b      	ldr	r3, [r5, #0]
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 80077b8:	4978      	ldr	r1, [pc, #480]	; (800799c <lv_obj_set_state+0x288>)
 80077ba:	889a      	ldrh	r2, [r3, #4]
 80077bc:	428a      	cmp	r2, r1
 80077be:	d048      	beq.n	8007852 <lv_obj_set_state+0x13e>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 80077c0:	79dc      	ldrb	r4, [r3, #7]
 80077c2:	2c00      	cmp	r4, #0
 80077c4:	d010      	beq.n	80077e8 <lv_obj_set_state+0xd4>

    if(style->prop_cnt > 1) {
 80077c6:	2c01      	cmp	r4, #1
 80077c8:	d100      	bne.n	80077cc <lv_obj_set_state+0xb8>
 80077ca:	e0b9      	b.n	8007940 <lv_obj_set_state+0x22c>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 80077cc:	2100      	movs	r1, #0
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80077ce:	681d      	ldr	r5, [r3, #0]
 80077d0:	00a2      	lsls	r2, r4, #2
 80077d2:	18aa      	adds	r2, r5, r2
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 80077d4:	8810      	ldrh	r0, [r2, #0]
 80077d6:	0483      	lsls	r3, r0, #18
            if(prop_id == prop) {
 80077d8:	0c9b      	lsrs	r3, r3, #18
 80077da:	2b66      	cmp	r3, #102	; 0x66
 80077dc:	d100      	bne.n	80077e0 <lv_obj_set_state+0xcc>
 80077de:	e0bf      	b.n	8007960 <lv_obj_set_state+0x24c>
        for(i = 0; i < style->prop_cnt; i++) {
 80077e0:	3101      	adds	r1, #1
 80077e2:	3202      	adds	r2, #2
 80077e4:	428c      	cmp	r4, r1
 80077e6:	d8f5      	bhi.n	80077d4 <lv_obj_set_state+0xc0>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 80077e8:	4653      	mov	r3, sl
 80077ea:	9a02      	ldr	r2, [sp, #8]
 80077ec:	8bdb      	ldrh	r3, [r3, #30]
 80077ee:	3201      	adds	r2, #1
 80077f0:	05db      	lsls	r3, r3, #23
 80077f2:	9202      	str	r2, [sp, #8]
 80077f4:	0e9b      	lsrs	r3, r3, #26
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d800      	bhi.n	80077fc <lv_obj_set_state+0xe8>
 80077fa:	e09c      	b.n	8007936 <lv_obj_set_state+0x222>
 80077fc:	465b      	mov	r3, fp
 80077fe:	2b1f      	cmp	r3, #31
 8007800:	d9b8      	bls.n	8007774 <lv_obj_set_state+0x60>
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8007802:	9b07      	ldr	r3, [sp, #28]
 8007804:	2500      	movs	r5, #0
 8007806:	465f      	mov	r7, fp
 8007808:	4698      	mov	r8, r3
 800780a:	9c04      	ldr	r4, [sp, #16]
 800780c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 800780e:	6860      	ldr	r0, [r4, #4]
 8007810:	f005 ff8e 	bl	800d730 <lv_obj_style_get_selector_part>
    for(i = 0; i < tsi; i++) {
 8007814:	3501      	adds	r5, #1
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 8007816:	0001      	movs	r1, r0
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8007818:	9400      	str	r4, [sp, #0]
 800781a:	4643      	mov	r3, r8
 800781c:	0032      	movs	r2, r6
 800781e:	4650      	mov	r0, sl
 8007820:	f005 fd6e 	bl	800d300 <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 8007824:	3410      	adds	r4, #16
 8007826:	42af      	cmp	r7, r5
 8007828:	d1f1      	bne.n	800780e <lv_obj_set_state+0xfa>
    lv_mem_buf_release(ts);
 800782a:	9804      	ldr	r0, [sp, #16]
 800782c:	f00d fc4a 	bl	80150c4 <lv_mem_buf_release>
    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 8007830:	9b08      	ldr	r3, [sp, #32]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d100      	bne.n	8007838 <lv_obj_set_state+0x124>
 8007836:	e0a6      	b.n	8007986 <lv_obj_set_state+0x272>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 8007838:	2b03      	cmp	r3, #3
 800783a:	d100      	bne.n	800783e <lv_obj_set_state+0x12a>
 800783c:	e0a7      	b.n	800798e <lv_obj_set_state+0x27a>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 800783e:	2b02      	cmp	r3, #2
 8007840:	d000      	beq.n	8007844 <lv_obj_set_state+0x130>
 8007842:	e77c      	b.n	800773e <lv_obj_set_state+0x2a>
        lv_obj_invalidate(obj);
 8007844:	4650      	mov	r0, sl
 8007846:	f001 fde5 	bl	8009414 <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 800784a:	4650      	mov	r0, sl
 800784c:	f000 fef8 	bl	8008640 <lv_obj_refresh_ext_draw_size>
 8007850:	e775      	b.n	800773e <lv_obj_set_state+0x2a>
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 8007852:	6819      	ldr	r1, [r3, #0]
 8007854:	880a      	ldrh	r2, [r1, #0]
 8007856:	2a00      	cmp	r2, #0
 8007858:	d104      	bne.n	8007864 <lv_obj_set_state+0x150>
 800785a:	e7c5      	b.n	80077e8 <lv_obj_set_state+0xd4>
 800785c:	890a      	ldrh	r2, [r1, #8]
 800785e:	3108      	adds	r1, #8
 8007860:	2a00      	cmp	r2, #0
 8007862:	d0c1      	beq.n	80077e8 <lv_obj_set_state+0xd4>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8007864:	0493      	lsls	r3, r2, #18
            if(prop_id == prop) {
 8007866:	0c9b      	lsrs	r3, r3, #18
 8007868:	2b66      	cmp	r3, #102	; 0x66
 800786a:	d1f7      	bne.n	800785c <lv_obj_set_state+0x148>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 800786c:	b213      	sxth	r3, r2
 800786e:	2b00      	cmp	r3, #0
 8007870:	dbba      	blt.n	80077e8 <lv_obj_set_state+0xd4>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8007872:	2380      	movs	r3, #128	; 0x80
 8007874:	01db      	lsls	r3, r3, #7
 8007876:	421a      	tst	r2, r3
 8007878:	d000      	beq.n	800787c <lv_obj_set_state+0x168>
 800787a:	e07f      	b.n	800797c <lv_obj_set_state+0x268>
 800787c:	684b      	ldr	r3, [r1, #4]
 800787e:	4699      	mov	r9, r3
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8007880:	464b      	mov	r3, r9
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	881a      	ldrh	r2, [r3, #0]
 8007886:	2a00      	cmp	r2, #0
 8007888:	d0ae      	beq.n	80077e8 <lv_obj_set_state+0xd4>
 800788a:	2200      	movs	r2, #0
 800788c:	4690      	mov	r8, r2
 800788e:	465a      	mov	r2, fp
 8007890:	2a1f      	cmp	r2, #31
 8007892:	d8a9      	bhi.n	80077e8 <lv_obj_set_state+0xd4>
 8007894:	4652      	mov	r2, sl
 8007896:	46ba      	mov	sl, r7
 8007898:	920b      	str	r2, [sp, #44]	; 0x2c
            for(t = 0; t < tsi; t++) {
 800789a:	9a04      	ldr	r2, [sp, #16]
 800789c:	2600      	movs	r6, #0
 800789e:	1d14      	adds	r4, r2, #4
 80078a0:	465a      	mov	r2, fp
 80078a2:	4647      	mov	r7, r8
 80078a4:	2a00      	cmp	r2, #0
 80078a6:	d104      	bne.n	80078b2 <lv_obj_set_state+0x19e>
 80078a8:	e066      	b.n	8007978 <lv_obj_set_state+0x264>
 80078aa:	3601      	adds	r6, #1
 80078ac:	3410      	adds	r4, #16
 80078ae:	455e      	cmp	r6, fp
 80078b0:	d025      	beq.n	80078fe <lv_obj_set_state+0x1ea>
                lv_style_selector_t selector = ts[t].selector;
 80078b2:	6825      	ldr	r5, [r4, #0]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 80078b4:	0028      	movs	r0, r5
 80078b6:	f005 ff39 	bl	800d72c <lv_obj_style_get_selector_state>
 80078ba:	4680      	mov	r8, r0
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 80078bc:	0028      	movs	r0, r5
 80078be:	f005 ff37 	bl	800d730 <lv_obj_style_get_selector_part>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 80078c2:	464b      	mov	r3, r9
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	88a1      	ldrh	r1, [r4, #4]
 80078c8:	19da      	adds	r2, r3, r7
 80078ca:	4694      	mov	ip, r2
 80078cc:	5bda      	ldrh	r2, [r3, r7]
 80078ce:	4291      	cmp	r1, r2
 80078d0:	d1eb      	bne.n	80078aa <lv_obj_set_state+0x196>
 80078d2:	4582      	cmp	sl, r0
 80078d4:	d1e9      	bne.n	80078aa <lv_obj_set_state+0x196>
 80078d6:	9a03      	ldr	r2, [sp, #12]
 80078d8:	4542      	cmp	r2, r8
 80078da:	d8e6      	bhi.n	80078aa <lv_obj_set_state+0x196>
            if(t == tsi) {
 80078dc:	46b8      	mov	r8, r7
 80078de:	4667      	mov	r7, ip
 80078e0:	455e      	cmp	r6, fp
 80078e2:	d00e      	beq.n	8007902 <lv_obj_set_state+0x1ee>
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 80078e4:	2202      	movs	r2, #2
 80078e6:	4694      	mov	ip, r2
 80078e8:	44e0      	add	r8, ip
 80078ea:	4642      	mov	r2, r8
 80078ec:	5a9a      	ldrh	r2, [r3, r2]
 80078ee:	2a00      	cmp	r2, #0
 80078f0:	d002      	beq.n	80078f8 <lv_obj_set_state+0x1e4>
 80078f2:	465a      	mov	r2, fp
 80078f4:	2a20      	cmp	r2, #32
 80078f6:	d1d0      	bne.n	800789a <lv_obj_set_state+0x186>
 80078f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078fa:	469a      	mov	sl, r3
 80078fc:	e774      	b.n	80077e8 <lv_obj_set_state+0xd4>
 80078fe:	46b8      	mov	r8, r7
 8007900:	4667      	mov	r7, ip
                ts[tsi].time = tr->time;
 8007902:	9904      	ldr	r1, [sp, #16]
 8007904:	465a      	mov	r2, fp
 8007906:	468c      	mov	ip, r1
 8007908:	4649      	mov	r1, r9
 800790a:	0112      	lsls	r2, r2, #4
 800790c:	6889      	ldr	r1, [r1, #8]
 800790e:	4462      	add	r2, ip
 8007910:	8011      	strh	r1, [r2, #0]
                ts[tsi].delay = tr->delay;
 8007912:	4649      	mov	r1, r9
 8007914:	68c9      	ldr	r1, [r1, #12]
 8007916:	8051      	strh	r1, [r2, #2]
                ts[tsi].path_cb = tr->path_xcb;
 8007918:	4649      	mov	r1, r9
 800791a:	6849      	ldr	r1, [r1, #4]
 800791c:	60d1      	str	r1, [r2, #12]
                ts[tsi].prop = tr->props[j];
 800791e:	8839      	ldrh	r1, [r7, #0]
 8007920:	8111      	strh	r1, [r2, #8]
                ts[tsi].selector = obj_style->selector;
 8007922:	9905      	ldr	r1, [sp, #20]
 8007924:	6849      	ldr	r1, [r1, #4]
 8007926:	9109      	str	r1, [sp, #36]	; 0x24
 8007928:	0209      	lsls	r1, r1, #8
 800792a:	0a09      	lsrs	r1, r1, #8
 800792c:	6051      	str	r1, [r2, #4]
                tsi++;
 800792e:	2201      	movs	r2, #1
 8007930:	4694      	mov	ip, r2
 8007932:	44e3      	add	fp, ip
 8007934:	e7d6      	b.n	80078e4 <lv_obj_set_state+0x1d0>
    for(i = 0; i < tsi; i++) {
 8007936:	465b      	mov	r3, fp
 8007938:	2b00      	cmp	r3, #0
 800793a:	d000      	beq.n	800793e <lv_obj_set_state+0x22a>
 800793c:	e761      	b.n	8007802 <lv_obj_set_state+0xee>
 800793e:	e774      	b.n	800782a <lv_obj_set_state+0x116>
                }
                return LV_STYLE_RES_FOUND;
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8007940:	0491      	lsls	r1, r2, #18
 8007942:	0c89      	lsrs	r1, r1, #18
 8007944:	2966      	cmp	r1, #102	; 0x66
 8007946:	d000      	beq.n	800794a <lv_obj_set_state+0x236>
 8007948:	e74e      	b.n	80077e8 <lv_obj_set_state+0xd4>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 800794a:	b211      	sxth	r1, r2
 800794c:	2900      	cmp	r1, #0
 800794e:	da00      	bge.n	8007952 <lv_obj_set_state+0x23e>
 8007950:	e74a      	b.n	80077e8 <lv_obj_set_state+0xd4>
            return LV_STYLE_RES_INHERIT;
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8007952:	2180      	movs	r1, #128	; 0x80
 8007954:	01c9      	lsls	r1, r1, #7
 8007956:	420a      	tst	r2, r1
 8007958:	d110      	bne.n	800797c <lv_obj_set_state+0x268>
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4699      	mov	r9, r3
 800795e:	e78f      	b.n	8007880 <lv_obj_set_state+0x16c>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8007960:	b203      	sxth	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	da00      	bge.n	8007968 <lv_obj_set_state+0x254>
 8007966:	e73f      	b.n	80077e8 <lv_obj_set_state+0xd4>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8007968:	2380      	movs	r3, #128	; 0x80
 800796a:	01db      	lsls	r3, r3, #7
 800796c:	4218      	tst	r0, r3
 800796e:	d105      	bne.n	800797c <lv_obj_set_state+0x268>
                    *value = values[i];
 8007970:	0089      	lsls	r1, r1, #2
 8007972:	594b      	ldr	r3, [r1, r5]
 8007974:	4699      	mov	r9, r3
 8007976:	e783      	b.n	8007880 <lv_obj_set_state+0x16c>
                ts[tsi].prop = tr->props[j];
 8007978:	19df      	adds	r7, r3, r7
 800797a:	e7c2      	b.n	8007902 <lv_obj_set_state+0x1ee>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 800797c:	2066      	movs	r0, #102	; 0x66
 800797e:	f00d ffeb 	bl	8015958 <lv_style_prop_get_default>
 8007982:	4681      	mov	r9, r0
 8007984:	e77c      	b.n	8007880 <lv_obj_set_state+0x16c>
        lv_obj_invalidate(obj);
 8007986:	4650      	mov	r0, sl
 8007988:	f001 fd44 	bl	8009414 <lv_obj_invalidate>
 800798c:	e6d7      	b.n	800773e <lv_obj_set_state+0x2a>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 800798e:	21f0      	movs	r1, #240	; 0xf0
 8007990:	4650      	mov	r0, sl
 8007992:	4a02      	ldr	r2, [pc, #8]	; (800799c <lv_obj_set_state+0x288>)
 8007994:	0309      	lsls	r1, r1, #12
 8007996:	f004 ffcb 	bl	800c930 <lv_obj_refresh_style>
 800799a:	e6d0      	b.n	800773e <lv_obj_set_state+0x2a>
 800799c:	0000ffff 	.word	0x0000ffff

080079a0 <lv_obj_event>:
{
 80079a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_event_code_t code = lv_event_get_code(e);
 80079a2:	0008      	movs	r0, r1
{
 80079a4:	b085      	sub	sp, #20
 80079a6:	000e      	movs	r6, r1
    lv_event_code_t code = lv_event_get_code(e);
 80079a8:	f7fd f97e 	bl	8004ca8 <lv_event_get_code>
 80079ac:	0004      	movs	r4, r0
    lv_obj_t * obj = lv_event_get_current_target(e);
 80079ae:	0030      	movs	r0, r6
 80079b0:	f7fd f978 	bl	8004ca4 <lv_event_get_current_target>
 80079b4:	0005      	movs	r5, r0
    if(code == LV_EVENT_PRESSED) {
 80079b6:	2c01      	cmp	r4, #1
 80079b8:	d04d      	beq.n	8007a56 <lv_obj_event+0xb6>
    else if(code == LV_EVENT_RELEASED) {
 80079ba:	2c08      	cmp	r4, #8
 80079bc:	d028      	beq.n	8007a10 <lv_obj_event+0x70>
    else if(code == LV_EVENT_PRESS_LOST) {
 80079be:	2c03      	cmp	r4, #3
 80079c0:	d100      	bne.n	80079c4 <lv_obj_event+0x24>
 80079c2:	e09d      	b.n	8007b00 <lv_obj_event+0x160>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 80079c4:	2c2a      	cmp	r4, #42	; 0x2a
 80079c6:	d100      	bne.n	80079ca <lv_obj_event+0x2a>
 80079c8:	e0a2      	b.n	8007b10 <lv_obj_event+0x170>
    else if(code == LV_EVENT_KEY) {
 80079ca:	2c0d      	cmp	r4, #13
 80079cc:	d056      	beq.n	8007a7c <lv_obj_event+0xdc>
    else if(code == LV_EVENT_FOCUSED) {
 80079ce:	2c0e      	cmp	r4, #14
 80079d0:	d100      	bne.n	80079d4 <lv_obj_event+0x34>
 80079d2:	e0ad      	b.n	8007b30 <lv_obj_event+0x190>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 80079d4:	2c09      	cmp	r4, #9
 80079d6:	d100      	bne.n	80079da <lv_obj_event+0x3a>
 80079d8:	e101      	b.n	8007bde <lv_obj_event+0x23e>
    else if(code == LV_EVENT_SCROLL_END) {
 80079da:	2c0a      	cmp	r4, #10
 80079dc:	d100      	bne.n	80079e0 <lv_obj_event+0x40>
 80079de:	e0da      	b.n	8007b96 <lv_obj_event+0x1f6>
    else if(code == LV_EVENT_DEFOCUSED) {
 80079e0:	2c0f      	cmp	r4, #15
 80079e2:	d100      	bne.n	80079e6 <lv_obj_event+0x46>
 80079e4:	e11b      	b.n	8007c1e <lv_obj_event+0x27e>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 80079e6:	2c29      	cmp	r4, #41	; 0x29
 80079e8:	d100      	bne.n	80079ec <lv_obj_event+0x4c>
 80079ea:	e132      	b.n	8007c52 <lv_obj_event+0x2b2>
    else if(code == LV_EVENT_CHILD_CHANGED) {
 80079ec:	2c22      	cmp	r4, #34	; 0x22
 80079ee:	d100      	bne.n	80079f2 <lv_obj_event+0x52>
 80079f0:	e153      	b.n	8007c9a <lv_obj_event+0x2fa>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80079f2:	2c13      	cmp	r4, #19
 80079f4:	d100      	bne.n	80079f8 <lv_obj_event+0x58>
 80079f6:	e178      	b.n	8007cea <lv_obj_event+0x34a>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 80079f8:	2c18      	cmp	r4, #24
 80079fa:	d807      	bhi.n	8007a0c <lv_obj_event+0x6c>
 80079fc:	2392      	movs	r3, #146	; 0x92
 80079fe:	045b      	lsls	r3, r3, #17
 8007a00:	40e3      	lsrs	r3, r4
 8007a02:	07db      	lsls	r3, r3, #31
 8007a04:	d502      	bpl.n	8007a0c <lv_obj_event+0x6c>
        lv_obj_draw(e);
 8007a06:	0030      	movs	r0, r6
 8007a08:	f7ff fc7c 	bl	8007304 <lv_obj_draw>
}
 8007a0c:	b005      	add	sp, #20
 8007a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_state_t new_state = obj->state & (~state);
 8007a10:	8b83      	ldrh	r3, [r0, #28]
 8007a12:	2220      	movs	r2, #32
 8007a14:	0019      	movs	r1, r3
 8007a16:	4391      	bics	r1, r2
    if(obj->state != new_state) {
 8007a18:	421a      	tst	r2, r3
 8007a1a:	d125      	bne.n	8007a68 <lv_obj_event+0xc8>
        void * param = lv_event_get_param(e);
 8007a1c:	0030      	movs	r0, r6
 8007a1e:	f7fd f947 	bl	8004cb0 <lv_event_get_param>
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8007a22:	f7fd fed3 	bl	80057cc <lv_indev_get_scroll_obj>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d1f0      	bne.n	8007a0c <lv_obj_event+0x6c>
 8007a2a:	69ab      	ldr	r3, [r5, #24]
 8007a2c:	071b      	lsls	r3, r3, #28
 8007a2e:	d5ed      	bpl.n	8007a0c <lv_obj_event+0x6c>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8007a30:	2201      	movs	r2, #1
    return obj->state;
 8007a32:	8bab      	ldrh	r3, [r5, #28]
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8007a34:	421a      	tst	r2, r3
 8007a36:	d000      	beq.n	8007a3a <lv_obj_event+0x9a>
 8007a38:	e0eb      	b.n	8007c12 <lv_obj_event+0x272>
    lv_state_t new_state = obj->state | state;
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	4319      	orrs	r1, r3
 8007a3e:	b289      	uxth	r1, r1
    if(obj->state != new_state) {
 8007a40:	428b      	cmp	r3, r1
 8007a42:	d002      	beq.n	8007a4a <lv_obj_event+0xaa>
        lv_obj_set_state(obj, new_state);
 8007a44:	0028      	movs	r0, r5
 8007a46:	f7ff fe65 	bl	8007714 <lv_obj_set_state>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	211c      	movs	r1, #28
 8007a4e:	0028      	movs	r0, r5
 8007a50:	f7fd f8ee 	bl	8004c30 <lv_event_send>
                if(res != LV_RES_OK) return;
 8007a54:	e7da      	b.n	8007a0c <lv_obj_event+0x6c>
    lv_state_t new_state = obj->state | state;
 8007a56:	2120      	movs	r1, #32
 8007a58:	8b83      	ldrh	r3, [r0, #28]
 8007a5a:	4319      	orrs	r1, r3
    if(obj->state != new_state) {
 8007a5c:	4299      	cmp	r1, r3
 8007a5e:	d0d5      	beq.n	8007a0c <lv_obj_event+0x6c>
        lv_obj_set_state(obj, new_state);
 8007a60:	0028      	movs	r0, r5
 8007a62:	f7ff fe57 	bl	8007714 <lv_obj_set_state>
 8007a66:	e7d1      	b.n	8007a0c <lv_obj_event+0x6c>
 8007a68:	f7ff fe54 	bl	8007714 <lv_obj_set_state>
        void * param = lv_event_get_param(e);
 8007a6c:	0030      	movs	r0, r6
 8007a6e:	f7fd f91f 	bl	8004cb0 <lv_event_get_param>
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8007a72:	f7fd feab 	bl	80057cc <lv_indev_get_scroll_obj>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d1c8      	bne.n	8007a0c <lv_obj_event+0x6c>
 8007a7a:	e7d6      	b.n	8007a2a <lv_obj_event+0x8a>
    return (obj->flags & f)  == f ? true : false;
 8007a7c:	6983      	ldr	r3, [r0, #24]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8007a7e:	071a      	lsls	r2, r3, #28
 8007a80:	d500      	bpl.n	8007a84 <lv_obj_event+0xe4>
 8007a82:	e0b3      	b.n	8007bec <lv_obj_event+0x24c>
    return (obj->flags & f)  == f ? true : false;
 8007a84:	2281      	movs	r2, #129	; 0x81
 8007a86:	0112      	lsls	r2, r2, #4
 8007a88:	4013      	ands	r3, r2
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d1be      	bne.n	8007a0c <lv_obj_event+0x6c>
 8007a8e:	f000 fbbf 	bl	8008210 <lv_obj_is_editable>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	d1ba      	bne.n	8007a0c <lv_obj_event+0x6c>
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8007a96:	0028      	movs	r0, r5
 8007a98:	f003 fda2 	bl	800b5e0 <lv_obj_get_scroll_left>
 8007a9c:	0007      	movs	r7, r0
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8007a9e:	0028      	movs	r0, r5
 8007aa0:	f003 fdb4 	bl	800b60c <lv_obj_get_scroll_right>
 8007aa4:	0004      	movs	r4, r0
            char c = *((char *)lv_event_get_param(e));
 8007aa6:	0030      	movs	r0, r6
 8007aa8:	f7fd f902 	bl	8004cb0 <lv_event_get_param>
 8007aac:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_DOWN) {
 8007aae:	2b12      	cmp	r3, #18
 8007ab0:	d100      	bne.n	8007ab4 <lv_obj_event+0x114>
 8007ab2:	e122      	b.n	8007cfa <lv_obj_event+0x35a>
            else if(c == LV_KEY_UP) {
 8007ab4:	2b11      	cmp	r3, #17
 8007ab6:	d100      	bne.n	8007aba <lv_obj_event+0x11a>
 8007ab8:	e132      	b.n	8007d20 <lv_obj_event+0x380>
            else if(c == LV_KEY_RIGHT) {
 8007aba:	2b13      	cmp	r3, #19
 8007abc:	d100      	bne.n	8007ac0 <lv_obj_event+0x120>
 8007abe:	e142      	b.n	8007d46 <lv_obj_event+0x3a6>
            else if(c == LV_KEY_LEFT) {
 8007ac0:	2b14      	cmp	r3, #20
 8007ac2:	d1a3      	bne.n	8007a0c <lv_obj_event+0x6c>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8007ac4:	0028      	movs	r0, r5
 8007ac6:	f003 f841 	bl	800ab4c <lv_obj_get_scroll_dir>
 8007aca:	0783      	lsls	r3, r0, #30
 8007acc:	d100      	bne.n	8007ad0 <lv_obj_event+0x130>
 8007ace:	e127      	b.n	8007d20 <lv_obj_event+0x380>
 8007ad0:	2f00      	cmp	r7, #0
 8007ad2:	dc02      	bgt.n	8007ada <lv_obj_event+0x13a>
 8007ad4:	2c00      	cmp	r4, #0
 8007ad6:	dc00      	bgt.n	8007ada <lv_obj_event+0x13a>
 8007ad8:	e122      	b.n	8007d20 <lv_obj_event+0x380>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 8007ada:	0028      	movs	r0, r5
 8007adc:	f003 f854 	bl	800ab88 <lv_obj_get_scroll_x>
 8007ae0:	0004      	movs	r4, r0
 8007ae2:	0028      	movs	r0, r5
 8007ae4:	f001 f8f8 	bl	8008cd8 <lv_obj_get_width>
 8007ae8:	2203      	movs	r2, #3
 8007aea:	17c3      	asrs	r3, r0, #31
 8007aec:	4013      	ands	r3, r2
 8007aee:	181b      	adds	r3, r3, r0
 8007af0:	109b      	asrs	r3, r3, #2
 8007af2:	1ae3      	subs	r3, r4, r3
 8007af4:	2200      	movs	r2, #0
 8007af6:	0028      	movs	r0, r5
 8007af8:	b219      	sxth	r1, r3
 8007afa:	f004 f94b 	bl	800bd94 <lv_obj_scroll_to_x>
 8007afe:	e785      	b.n	8007a0c <lv_obj_event+0x6c>
    lv_state_t new_state = obj->state & (~state);
 8007b00:	8b83      	ldrh	r3, [r0, #28]
 8007b02:	2220      	movs	r2, #32
 8007b04:	0019      	movs	r1, r3
 8007b06:	4391      	bics	r1, r2
    if(obj->state != new_state) {
 8007b08:	421a      	tst	r2, r3
 8007b0a:	d100      	bne.n	8007b0e <lv_obj_event+0x16e>
 8007b0c:	e77e      	b.n	8007a0c <lv_obj_event+0x6c>
 8007b0e:	e7a7      	b.n	8007a60 <lv_obj_event+0xc0>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8007b10:	f006 f99a 	bl	800de48 <lv_obj_get_child_cnt>
 8007b14:	1e06      	subs	r6, r0, #0
        for(uint32_t i = 0; i < child_cnt; i++) {
 8007b16:	d100      	bne.n	8007b1a <lv_obj_event+0x17a>
 8007b18:	e778      	b.n	8007a0c <lv_obj_event+0x6c>
 8007b1a:	2400      	movs	r4, #0
            lv_obj_t * child = obj->spec_attr->children[i];
 8007b1c:	68ab      	ldr	r3, [r5, #8]
 8007b1e:	00a2      	lsls	r2, r4, #2
 8007b20:	681b      	ldr	r3, [r3, #0]
        for(uint32_t i = 0; i < child_cnt; i++) {
 8007b22:	3401      	adds	r4, #1
            lv_obj_mark_layout_as_dirty(child);
 8007b24:	58d0      	ldr	r0, [r2, r3]
 8007b26:	f001 f823 	bl	8008b70 <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 8007b2a:	42a6      	cmp	r6, r4
 8007b2c:	d1f6      	bne.n	8007b1c <lv_obj_event+0x17c>
 8007b2e:	e76d      	b.n	8007a0c <lv_obj_event+0x6c>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 8007b30:	6983      	ldr	r3, [r0, #24]
 8007b32:	055b      	lsls	r3, r3, #21
 8007b34:	d44b      	bmi.n	8007bce <lv_obj_event+0x22e>
    if(obj->spec_attr) return obj->spec_attr->group_p;
 8007b36:	68a8      	ldr	r0, [r5, #8]
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d000      	beq.n	8007b3e <lv_obj_event+0x19e>
 8007b3c:	6880      	ldr	r0, [r0, #8]
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8007b3e:	f7fd fd19 	bl	8005574 <lv_group_get_editing>
 8007b42:	0004      	movs	r4, r0
        lv_indev_t * indev = lv_indev_get_act();
 8007b44:	f7fd fd92 	bl	800566c <lv_indev_get_act>
        if(indev == NULL) indev = lv_event_get_indev(e);
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d044      	beq.n	8007bd6 <lv_obj_event+0x236>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8007b4c:	f7fd fd94 	bl	8005678 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8007b50:	1e81      	subs	r1, r0, #2
 8007b52:	20fd      	movs	r0, #253	; 0xfd
 8007b54:	4001      	ands	r1, r0
 8007b56:	1e4b      	subs	r3, r1, #1
 8007b58:	4199      	sbcs	r1, r3
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	4249      	negs	r1, r1
 8007b5e:	4399      	bics	r1, r3
    lv_state_t new_state = obj->state | state;
 8007b60:	8bab      	ldrh	r3, [r5, #28]
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8007b62:	3106      	adds	r1, #6
    lv_state_t new_state = obj->state | state;
 8007b64:	4319      	orrs	r1, r3
        if(editing) {
 8007b66:	2c00      	cmp	r4, #0
 8007b68:	d10e      	bne.n	8007b88 <lv_obj_event+0x1e8>
    lv_state_t new_state = obj->state | state;
 8007b6a:	b289      	uxth	r1, r1
    if(obj->state != new_state) {
 8007b6c:	428b      	cmp	r3, r1
 8007b6e:	d003      	beq.n	8007b78 <lv_obj_event+0x1d8>
        lv_obj_set_state(obj, new_state);
 8007b70:	0028      	movs	r0, r5
 8007b72:	f7ff fdcf 	bl	8007714 <lv_obj_set_state>
    lv_state_t new_state = obj->state & (~state);
 8007b76:	8ba9      	ldrh	r1, [r5, #28]
 8007b78:	2308      	movs	r3, #8
 8007b7a:	000a      	movs	r2, r1
 8007b7c:	439a      	bics	r2, r3
    if(obj->state != new_state) {
 8007b7e:	420b      	tst	r3, r1
 8007b80:	d100      	bne.n	8007b84 <lv_obj_event+0x1e4>
 8007b82:	e743      	b.n	8007a0c <lv_obj_event+0x6c>
        lv_obj_set_state(obj, new_state);
 8007b84:	0011      	movs	r1, r2
 8007b86:	e76b      	b.n	8007a60 <lv_obj_event+0xc0>
    lv_state_t new_state = obj->state | state;
 8007b88:	2208      	movs	r2, #8
 8007b8a:	4311      	orrs	r1, r2
 8007b8c:	b289      	uxth	r1, r1
    if(obj->state != new_state) {
 8007b8e:	428b      	cmp	r3, r1
 8007b90:	d100      	bne.n	8007b94 <lv_obj_event+0x1f4>
 8007b92:	e73b      	b.n	8007a0c <lv_obj_event+0x6c>
 8007b94:	e764      	b.n	8007a60 <lv_obj_event+0xc0>
    lv_state_t new_state = obj->state & (~state);
 8007b96:	8b83      	ldrh	r3, [r0, #28]
 8007b98:	2240      	movs	r2, #64	; 0x40
 8007b9a:	0019      	movs	r1, r3
 8007b9c:	4391      	bics	r1, r2
    if(obj->state != new_state) {
 8007b9e:	421a      	tst	r2, r3
 8007ba0:	d001      	beq.n	8007ba6 <lv_obj_event+0x206>
        lv_obj_set_state(obj, new_state);
 8007ba2:	f7ff fdb7 	bl	8007714 <lv_obj_set_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 8007ba6:	0028      	movs	r0, r5
 8007ba8:	f002 ffc6 	bl	800ab38 <lv_obj_get_scrollbar_mode>
 8007bac:	2802      	cmp	r0, #2
 8007bae:	d000      	beq.n	8007bb2 <lv_obj_event+0x212>
 8007bb0:	e72c      	b.n	8007a0c <lv_obj_event+0x6c>
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8007bb2:	4669      	mov	r1, sp
 8007bb4:	0028      	movs	r0, r5
 8007bb6:	aa02      	add	r2, sp, #8
 8007bb8:	f004 f968 	bl	800be8c <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 8007bbc:	4669      	mov	r1, sp
 8007bbe:	0028      	movs	r0, r5
 8007bc0:	f001 fc06 	bl	80093d0 <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 8007bc4:	0028      	movs	r0, r5
 8007bc6:	a902      	add	r1, sp, #8
 8007bc8:	f001 fc02 	bl	80093d0 <lv_obj_invalidate_area>
 8007bcc:	e71e      	b.n	8007a0c <lv_obj_event+0x6c>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 8007bce:	2101      	movs	r1, #1
 8007bd0:	f004 f918 	bl	800be04 <lv_obj_scroll_to_view_recursive>
 8007bd4:	e7af      	b.n	8007b36 <lv_obj_event+0x196>
        if(indev == NULL) indev = lv_event_get_indev(e);
 8007bd6:	0030      	movs	r0, r6
 8007bd8:	f7fd f8c0 	bl	8004d5c <lv_event_get_indev>
 8007bdc:	e7b6      	b.n	8007b4c <lv_obj_event+0x1ac>
    lv_state_t new_state = obj->state | state;
 8007bde:	2140      	movs	r1, #64	; 0x40
 8007be0:	8b83      	ldrh	r3, [r0, #28]
 8007be2:	4319      	orrs	r1, r3
    if(obj->state != new_state) {
 8007be4:	428b      	cmp	r3, r1
 8007be6:	d100      	bne.n	8007bea <lv_obj_event+0x24a>
 8007be8:	e710      	b.n	8007a0c <lv_obj_event+0x6c>
 8007bea:	e739      	b.n	8007a60 <lv_obj_event+0xc0>
            char c = *((char *)lv_event_get_param(e));
 8007bec:	0030      	movs	r0, r6
 8007bee:	f7fd f85f 	bl	8004cb0 <lv_event_get_param>
 8007bf2:	7804      	ldrb	r4, [r0, #0]
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	0022      	movs	r2, r4
 8007bf8:	439a      	bics	r2, r3
 8007bfa:	2a11      	cmp	r2, #17
 8007bfc:	d017      	beq.n	8007c2e <lv_obj_event+0x28e>
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8007bfe:	0022      	movs	r2, r4
 8007c00:	3a12      	subs	r2, #18
 8007c02:	439a      	bics	r2, r3
 8007c04:	b2d3      	uxtb	r3, r2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d018      	beq.n	8007c3c <lv_obj_event+0x29c>
            if(c != LV_KEY_ENTER) {
 8007c0a:	2c0a      	cmp	r4, #10
 8007c0c:	d100      	bne.n	8007c10 <lv_obj_event+0x270>
 8007c0e:	e6fd      	b.n	8007a0c <lv_obj_event+0x6c>
 8007c10:	e71b      	b.n	8007a4a <lv_obj_event+0xaa>
    lv_state_t new_state = obj->state & (~state);
 8007c12:	0019      	movs	r1, r3
 8007c14:	4391      	bics	r1, r2
    if(obj->state != new_state) {
 8007c16:	421a      	tst	r2, r3
 8007c18:	d100      	bne.n	8007c1c <lv_obj_event+0x27c>
 8007c1a:	e716      	b.n	8007a4a <lv_obj_event+0xaa>
 8007c1c:	e712      	b.n	8007a44 <lv_obj_event+0xa4>
    lv_state_t new_state = obj->state & (~state);
 8007c1e:	8b83      	ldrh	r3, [r0, #28]
 8007c20:	220e      	movs	r2, #14
 8007c22:	0019      	movs	r1, r3
 8007c24:	4391      	bics	r1, r2
    if(obj->state != new_state) {
 8007c26:	421a      	tst	r2, r3
 8007c28:	d100      	bne.n	8007c2c <lv_obj_event+0x28c>
 8007c2a:	e6ef      	b.n	8007a0c <lv_obj_event+0x6c>
 8007c2c:	e718      	b.n	8007a60 <lv_obj_event+0xc0>
    lv_state_t new_state = obj->state | state;
 8007c2e:	2101      	movs	r1, #1
 8007c30:	8bab      	ldrh	r3, [r5, #28]
 8007c32:	4319      	orrs	r1, r3
    if(obj->state != new_state) {
 8007c34:	428b      	cmp	r3, r1
 8007c36:	d100      	bne.n	8007c3a <lv_obj_event+0x29a>
 8007c38:	e707      	b.n	8007a4a <lv_obj_event+0xaa>
 8007c3a:	e703      	b.n	8007a44 <lv_obj_event+0xa4>
    lv_state_t new_state = obj->state & (~state);
 8007c3c:	8bab      	ldrh	r3, [r5, #28]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	0019      	movs	r1, r3
 8007c42:	4391      	bics	r1, r2
    if(obj->state != new_state) {
 8007c44:	421a      	tst	r2, r3
 8007c46:	d100      	bne.n	8007c4a <lv_obj_event+0x2aa>
 8007c48:	e6ff      	b.n	8007a4a <lv_obj_event+0xaa>
        lv_obj_set_state(obj, new_state);
 8007c4a:	0028      	movs	r0, r5
 8007c4c:	f7ff fd62 	bl	8007714 <lv_obj_set_state>
 8007c50:	e7db      	b.n	8007c0a <lv_obj_event+0x26a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8007c52:	2209      	movs	r2, #9
 8007c54:	2100      	movs	r1, #0
 8007c56:	f004 fcb5 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8007c5a:	220a      	movs	r2, #10
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8007c5c:	0004      	movs	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8007c5e:	2100      	movs	r1, #0
 8007c60:	0028      	movs	r0, r5
 8007c62:	f004 fcaf 	bl	800c5c4 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8007c66:	b280      	uxth	r0, r0
        if(layout || align) {
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	d102      	bne.n	8007c72 <lv_obj_event+0x2d2>
 8007c6c:	b2e4      	uxtb	r4, r4
 8007c6e:	2c00      	cmp	r4, #0
 8007c70:	d002      	beq.n	8007c78 <lv_obj_event+0x2d8>
            lv_obj_mark_layout_as_dirty(obj);
 8007c72:	0028      	movs	r0, r5
 8007c74:	f000 ff7c 	bl	8008b70 <lv_obj_mark_layout_as_dirty>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8007c78:	0028      	movs	r0, r5
 8007c7a:	f006 f8e5 	bl	800de48 <lv_obj_get_child_cnt>
 8007c7e:	1e06      	subs	r6, r0, #0
        for(i = 0; i < child_cnt; i++) {
 8007c80:	d100      	bne.n	8007c84 <lv_obj_event+0x2e4>
 8007c82:	e6c3      	b.n	8007a0c <lv_obj_event+0x6c>
 8007c84:	2400      	movs	r4, #0
            lv_obj_t * child = obj->spec_attr->children[i];
 8007c86:	68ab      	ldr	r3, [r5, #8]
 8007c88:	00a2      	lsls	r2, r4, #2
 8007c8a:	681b      	ldr	r3, [r3, #0]
        for(i = 0; i < child_cnt; i++) {
 8007c8c:	3401      	adds	r4, #1
            lv_obj_mark_layout_as_dirty(child);
 8007c8e:	58d0      	ldr	r0, [r2, r3]
 8007c90:	f000 ff6e 	bl	8008b70 <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 8007c94:	42a6      	cmp	r6, r4
 8007c96:	d1f6      	bne.n	8007c86 <lv_obj_event+0x2e6>
 8007c98:	e6b8      	b.n	8007a0c <lv_obj_event+0x6c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	f004 fc91 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8007ca2:	2204      	movs	r2, #4
 8007ca4:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8007ca6:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8007ca8:	0028      	movs	r0, r5
 8007caa:	f004 fc8b 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8007cae:	2209      	movs	r2, #9
 8007cb0:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8007cb2:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8007cb4:	0028      	movs	r0, r5
 8007cb6:	f004 fc85 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8007cba:	220a      	movs	r2, #10
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8007cbc:	0004      	movs	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	0028      	movs	r0, r5
 8007cc2:	f004 fc7f 	bl	800c5c4 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8007cc6:	b280      	uxth	r0, r0
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d10a      	bne.n	8007ce2 <lv_obj_event+0x342>
 8007ccc:	b2e4      	uxtb	r4, r4
 8007cce:	2c00      	cmp	r4, #0
 8007cd0:	d107      	bne.n	8007ce2 <lv_obj_event+0x342>
 8007cd2:	4b2b      	ldr	r3, [pc, #172]	; (8007d80 <lv_obj_event+0x3e0>)
 8007cd4:	b236      	sxth	r6, r6
 8007cd6:	429e      	cmp	r6, r3
 8007cd8:	d003      	beq.n	8007ce2 <lv_obj_event+0x342>
 8007cda:	b23f      	sxth	r7, r7
 8007cdc:	429f      	cmp	r7, r3
 8007cde:	d000      	beq.n	8007ce2 <lv_obj_event+0x342>
 8007ce0:	e694      	b.n	8007a0c <lv_obj_event+0x6c>
            lv_obj_mark_layout_as_dirty(obj);
 8007ce2:	0028      	movs	r0, r5
 8007ce4:	f000 ff44 	bl	8008b70 <lv_obj_mark_layout_as_dirty>
 8007ce8:	e690      	b.n	8007a0c <lv_obj_event+0x6c>
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 8007cea:	2100      	movs	r1, #0
 8007cec:	f000 fc2a 	bl	8008544 <lv_obj_calculate_ext_draw_size>
 8007cf0:	0001      	movs	r1, r0
        lv_event_set_ext_draw_size(e, d);
 8007cf2:	0030      	movs	r0, r6
 8007cf4:	f7fd f842 	bl	8004d7c <lv_event_set_ext_draw_size>
 8007cf8:	e688      	b.n	8007a0c <lv_obj_event+0x6c>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8007cfa:	0028      	movs	r0, r5
 8007cfc:	f002 ff4e 	bl	800ab9c <lv_obj_get_scroll_y>
 8007d00:	0004      	movs	r4, r0
 8007d02:	0028      	movs	r0, r5
 8007d04:	f000 fff0 	bl	8008ce8 <lv_obj_get_height>
 8007d08:	2303      	movs	r3, #3
 8007d0a:	17c1      	asrs	r1, r0, #31
 8007d0c:	4019      	ands	r1, r3
 8007d0e:	1809      	adds	r1, r1, r0
 8007d10:	1089      	asrs	r1, r1, #2
 8007d12:	1909      	adds	r1, r1, r4
 8007d14:	2200      	movs	r2, #0
 8007d16:	0028      	movs	r0, r5
 8007d18:	b209      	sxth	r1, r1
 8007d1a:	f004 f857 	bl	800bdcc <lv_obj_scroll_to_y>
 8007d1e:	e675      	b.n	8007a0c <lv_obj_event+0x6c>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8007d20:	0028      	movs	r0, r5
 8007d22:	f002 ff3b 	bl	800ab9c <lv_obj_get_scroll_y>
 8007d26:	0004      	movs	r4, r0
 8007d28:	0028      	movs	r0, r5
 8007d2a:	f000 ffdd 	bl	8008ce8 <lv_obj_get_height>
 8007d2e:	2203      	movs	r2, #3
 8007d30:	17c3      	asrs	r3, r0, #31
 8007d32:	4013      	ands	r3, r2
 8007d34:	181b      	adds	r3, r3, r0
 8007d36:	109b      	asrs	r3, r3, #2
 8007d38:	1ae3      	subs	r3, r4, r3
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	0028      	movs	r0, r5
 8007d3e:	b219      	sxth	r1, r3
 8007d40:	f004 f844 	bl	800bdcc <lv_obj_scroll_to_y>
 8007d44:	e662      	b.n	8007a0c <lv_obj_event+0x6c>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8007d46:	0028      	movs	r0, r5
 8007d48:	f002 ff00 	bl	800ab4c <lv_obj_get_scroll_dir>
 8007d4c:	0783      	lsls	r3, r0, #30
 8007d4e:	d0d4      	beq.n	8007cfa <lv_obj_event+0x35a>
 8007d50:	2f00      	cmp	r7, #0
 8007d52:	dc01      	bgt.n	8007d58 <lv_obj_event+0x3b8>
 8007d54:	2c00      	cmp	r4, #0
 8007d56:	ddd0      	ble.n	8007cfa <lv_obj_event+0x35a>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 8007d58:	0028      	movs	r0, r5
 8007d5a:	f002 ff15 	bl	800ab88 <lv_obj_get_scroll_x>
 8007d5e:	0004      	movs	r4, r0
 8007d60:	0028      	movs	r0, r5
 8007d62:	f000 ffb9 	bl	8008cd8 <lv_obj_get_width>
 8007d66:	2303      	movs	r3, #3
 8007d68:	17c1      	asrs	r1, r0, #31
 8007d6a:	4019      	ands	r1, r3
 8007d6c:	1809      	adds	r1, r1, r0
 8007d6e:	1089      	asrs	r1, r1, #2
 8007d70:	1909      	adds	r1, r1, r4
 8007d72:	2200      	movs	r2, #0
 8007d74:	0028      	movs	r0, r5
 8007d76:	b209      	sxth	r1, r1
 8007d78:	f004 f80c 	bl	800bd94 <lv_obj_scroll_to_x>
 8007d7c:	e646      	b.n	8007a0c <lv_obj_event+0x6c>
 8007d7e:	46c0      	nop			; (mov r8, r8)
 8007d80:	000027d1 	.word	0x000027d1

08007d84 <lv_init>:
{
 8007d84:	b510      	push	{r4, lr}
    if(lv_initialized) {
 8007d86:	4c12      	ldr	r4, [pc, #72]	; (8007dd0 <lv_init+0x4c>)
 8007d88:	7823      	ldrb	r3, [r4, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d11e      	bne.n	8007dcc <lv_init+0x48>
    lv_mem_init();
 8007d8e:	f00d f869 	bl	8014e64 <lv_mem_init>
    _lv_timer_core_init();
 8007d92:	f00d fed1 	bl	8015b38 <_lv_timer_core_init>
    _lv_fs_init();
 8007d96:	f00c fd9d 	bl	80148d4 <_lv_fs_init>
    _lv_anim_core_init();
 8007d9a:	f00c f83f 	bl	8013e1c <_lv_anim_core_init>
    _lv_group_init();
 8007d9e:	f7fd fa15 	bl	80051cc <_lv_group_init>
    lv_draw_init();
 8007da2:	f007 fa9d 	bl	800f2e0 <lv_draw_init>
    _lv_obj_style_init();
 8007da6:	f004 fbff 	bl	800c5a8 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8007daa:	21ae      	movs	r1, #174	; 0xae
 8007dac:	4809      	ldr	r0, [pc, #36]	; (8007dd4 <lv_init+0x50>)
 8007dae:	0049      	lsls	r1, r1, #1
 8007db0:	f00c ff54 	bl	8014c5c <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8007db4:	2158      	movs	r1, #88	; 0x58
 8007db6:	4808      	ldr	r0, [pc, #32]	; (8007dd8 <lv_init+0x54>)
 8007db8:	f00c ff50 	bl	8014c5c <_lv_ll_init>
    _lv_refr_init();
 8007dbc:	f006 fb5a 	bl	800e474 <_lv_refr_init>
    _lv_img_decoder_init();
 8007dc0:	f008 fc6e 	bl	80106a0 <_lv_img_decoder_init>
    lv_extra_init();
 8007dc4:	f00b f89a 	bl	8012efc <lv_extra_init>
    lv_initialized = true;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	7023      	strb	r3, [r4, #0]
}
 8007dcc:	bd10      	pop	{r4, pc}
 8007dce:	46c0      	nop			; (mov r8, r8)
 8007dd0:	20000458 	.word	0x20000458
 8007dd4:	200005cc 	.word	0x200005cc
 8007dd8:	20000628 	.word	0x20000628

08007ddc <lv_obj_create>:
{
 8007ddc:	b510      	push	{r4, lr}
 8007dde:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8007de0:	4803      	ldr	r0, [pc, #12]	; (8007df0 <lv_obj_create+0x14>)
 8007de2:	f000 f915 	bl	8008010 <lv_obj_class_create_obj>
 8007de6:	0004      	movs	r4, r0
    lv_obj_class_init_obj(obj);
 8007de8:	f000 f98a 	bl	8008100 <lv_obj_class_init_obj>
}
 8007dec:	0020      	movs	r0, r4
 8007dee:	bd10      	pop	{r4, pc}
 8007df0:	0801b6a8 	.word	0x0801b6a8

08007df4 <lv_obj_add_flag>:
{
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	0004      	movs	r4, r0
 8007dfa:	000d      	movs	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8007dfc:	f000 fe9e 	bl	8008b3c <lv_obj_is_layout_positioned>
 8007e00:	0006      	movs	r6, r0
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 8007e02:	07eb      	lsls	r3, r5, #31
 8007e04:	d427      	bmi.n	8007e56 <lv_obj_add_flag+0x62>
    obj->flags |= f;
 8007e06:	69a3      	ldr	r3, [r4, #24]
 8007e08:	432b      	orrs	r3, r5
 8007e0a:	61a3      	str	r3, [r4, #24]
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8007e0c:	0020      	movs	r0, r4
 8007e0e:	f000 fe95 	bl	8008b3c <lv_obj_is_layout_positioned>
 8007e12:	42b0      	cmp	r0, r6
 8007e14:	d107      	bne.n	8007e26 <lv_obj_add_flag+0x32>
 8007e16:	23c0      	movs	r3, #192	; 0xc0
 8007e18:	045b      	lsls	r3, r3, #17
 8007e1a:	421d      	tst	r5, r3
 8007e1c:	d103      	bne.n	8007e26 <lv_obj_add_flag+0x32>
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8007e1e:	06eb      	lsls	r3, r5, #27
 8007e20:	d40b      	bmi.n	8007e3a <lv_obj_add_flag+0x46>
}
 8007e22:	b004      	add	sp, #16
 8007e24:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8007e26:	0020      	movs	r0, r4
 8007e28:	f005 fff8 	bl	800de1c <lv_obj_get_parent>
 8007e2c:	f000 fea0 	bl	8008b70 <lv_obj_mark_layout_as_dirty>
        lv_obj_mark_layout_as_dirty(obj);
 8007e30:	0020      	movs	r0, r4
 8007e32:	f000 fe9d 	bl	8008b70 <lv_obj_mark_layout_as_dirty>
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8007e36:	06eb      	lsls	r3, r5, #27
 8007e38:	d5f3      	bpl.n	8007e22 <lv_obj_add_flag+0x2e>
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8007e3a:	4669      	mov	r1, sp
 8007e3c:	0020      	movs	r0, r4
 8007e3e:	aa02      	add	r2, sp, #8
 8007e40:	f004 f824 	bl	800be8c <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8007e44:	4669      	mov	r1, sp
 8007e46:	0020      	movs	r0, r4
 8007e48:	f001 fac2 	bl	80093d0 <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8007e4c:	0020      	movs	r0, r4
 8007e4e:	a902      	add	r1, sp, #8
 8007e50:	f001 fabe 	bl	80093d0 <lv_obj_invalidate_area>
}
 8007e54:	e7e5      	b.n	8007e22 <lv_obj_add_flag+0x2e>
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 8007e56:	0020      	movs	r0, r4
 8007e58:	f001 fadc 	bl	8009414 <lv_obj_invalidate>
    obj->flags |= f;
 8007e5c:	69a3      	ldr	r3, [r4, #24]
        lv_obj_invalidate(obj);
 8007e5e:	0020      	movs	r0, r4
    obj->flags |= f;
 8007e60:	432b      	orrs	r3, r5
 8007e62:	61a3      	str	r3, [r4, #24]
        lv_obj_invalidate(obj);
 8007e64:	f001 fad6 	bl	8009414 <lv_obj_invalidate>
 8007e68:	e7d0      	b.n	8007e0c <lv_obj_add_flag+0x18>
 8007e6a:	46c0      	nop			; (mov r8, r8)

08007e6c <lv_obj_clear_flag>:
{
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	0004      	movs	r4, r0
 8007e72:	000d      	movs	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8007e74:	f000 fe62 	bl	8008b3c <lv_obj_is_layout_positioned>
 8007e78:	0006      	movs	r6, r0
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8007e7a:	06eb      	lsls	r3, r5, #27
 8007e7c:	d414      	bmi.n	8007ea8 <lv_obj_clear_flag+0x3c>
    obj->flags &= (~f);
 8007e7e:	69a3      	ldr	r3, [r4, #24]
 8007e80:	43ab      	bics	r3, r5
 8007e82:	61a3      	str	r3, [r4, #24]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 8007e84:	07eb      	lsls	r3, r5, #31
 8007e86:	d421      	bmi.n	8007ecc <lv_obj_clear_flag+0x60>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8007e88:	0020      	movs	r0, r4
 8007e8a:	f000 fe57 	bl	8008b3c <lv_obj_is_layout_positioned>
 8007e8e:	42b0      	cmp	r0, r6
 8007e90:	d103      	bne.n	8007e9a <lv_obj_clear_flag+0x2e>
 8007e92:	23c0      	movs	r3, #192	; 0xc0
 8007e94:	045b      	lsls	r3, r3, #17
 8007e96:	421d      	tst	r5, r3
 8007e98:	d004      	beq.n	8007ea4 <lv_obj_clear_flag+0x38>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8007e9a:	0020      	movs	r0, r4
 8007e9c:	f005 ffbe 	bl	800de1c <lv_obj_get_parent>
 8007ea0:	f000 fe66 	bl	8008b70 <lv_obj_mark_layout_as_dirty>
}
 8007ea4:	b004      	add	sp, #16
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8007ea8:	aa02      	add	r2, sp, #8
 8007eaa:	4669      	mov	r1, sp
 8007eac:	0020      	movs	r0, r4
 8007eae:	f003 ffed 	bl	800be8c <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8007eb2:	4669      	mov	r1, sp
 8007eb4:	0020      	movs	r0, r4
 8007eb6:	f001 fa8b 	bl	80093d0 <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8007eba:	0020      	movs	r0, r4
 8007ebc:	a902      	add	r1, sp, #8
 8007ebe:	f001 fa87 	bl	80093d0 <lv_obj_invalidate_area>
    obj->flags &= (~f);
 8007ec2:	69a3      	ldr	r3, [r4, #24]
 8007ec4:	43ab      	bics	r3, r5
 8007ec6:	61a3      	str	r3, [r4, #24]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 8007ec8:	07eb      	lsls	r3, r5, #31
 8007eca:	d5dd      	bpl.n	8007e88 <lv_obj_clear_flag+0x1c>
        lv_obj_invalidate(obj);
 8007ecc:	0020      	movs	r0, r4
 8007ece:	f001 faa1 	bl	8009414 <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 8007ed2:	0020      	movs	r0, r4
 8007ed4:	f000 fe32 	bl	8008b3c <lv_obj_is_layout_positioned>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	d0d5      	beq.n	8007e88 <lv_obj_clear_flag+0x1c>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8007edc:	0020      	movs	r0, r4
 8007ede:	f005 ff9d 	bl	800de1c <lv_obj_get_parent>
 8007ee2:	f000 fe45 	bl	8008b70 <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 8007ee6:	0020      	movs	r0, r4
 8007ee8:	f000 fe42 	bl	8008b70 <lv_obj_mark_layout_as_dirty>
 8007eec:	e7cc      	b.n	8007e88 <lv_obj_clear_flag+0x1c>
 8007eee:	46c0      	nop			; (mov r8, r8)

08007ef0 <lv_obj_add_state>:
    lv_state_t new_state = obj->state | state;
 8007ef0:	8b83      	ldrh	r3, [r0, #28]
{
 8007ef2:	b510      	push	{r4, lr}
    lv_state_t new_state = obj->state | state;
 8007ef4:	4319      	orrs	r1, r3
    if(obj->state != new_state) {
 8007ef6:	428b      	cmp	r3, r1
 8007ef8:	d001      	beq.n	8007efe <lv_obj_add_state+0xe>
        lv_obj_set_state(obj, new_state);
 8007efa:	f7ff fc0b 	bl	8007714 <lv_obj_set_state>
}
 8007efe:	bd10      	pop	{r4, pc}

08007f00 <lv_obj_clear_state>:
    lv_state_t new_state = obj->state & (~state);
 8007f00:	8b83      	ldrh	r3, [r0, #28]
{
 8007f02:	b510      	push	{r4, lr}
    lv_state_t new_state = obj->state & (~state);
 8007f04:	001a      	movs	r2, r3
 8007f06:	438a      	bics	r2, r1
    if(obj->state != new_state) {
 8007f08:	4219      	tst	r1, r3
 8007f0a:	d002      	beq.n	8007f12 <lv_obj_clear_state+0x12>
        lv_obj_set_state(obj, new_state);
 8007f0c:	0011      	movs	r1, r2
 8007f0e:	f7ff fc01 	bl	8007714 <lv_obj_set_state>
}
 8007f12:	bd10      	pop	{r4, pc}

08007f14 <lv_obj_has_flag>:
    return (obj->flags & f)  == f ? true : false;
 8007f14:	6980      	ldr	r0, [r0, #24]
 8007f16:	4008      	ands	r0, r1
 8007f18:	1a40      	subs	r0, r0, r1
 8007f1a:	4243      	negs	r3, r0
 8007f1c:	4158      	adcs	r0, r3
 8007f1e:	b2c0      	uxtb	r0, r0
}
 8007f20:	4770      	bx	lr
 8007f22:	46c0      	nop			; (mov r8, r8)

08007f24 <lv_obj_has_flag_any>:
    return (obj->flags & f) ? true : false;
 8007f24:	6980      	ldr	r0, [r0, #24]
 8007f26:	4008      	ands	r0, r1
 8007f28:	1e43      	subs	r3, r0, #1
 8007f2a:	4198      	sbcs	r0, r3
 8007f2c:	b2c0      	uxtb	r0, r0
}
 8007f2e:	4770      	bx	lr

08007f30 <lv_obj_get_state>:
    return obj->state;
 8007f30:	8b80      	ldrh	r0, [r0, #28]
}
 8007f32:	4770      	bx	lr

08007f34 <lv_obj_has_state>:
    return obj->state & state ? true : false;
 8007f34:	8b80      	ldrh	r0, [r0, #28]
 8007f36:	4008      	ands	r0, r1
 8007f38:	1e43      	subs	r3, r0, #1
 8007f3a:	4198      	sbcs	r0, r3
 8007f3c:	b2c0      	uxtb	r0, r0
}
 8007f3e:	4770      	bx	lr

08007f40 <lv_obj_get_group>:
    if(obj->spec_attr) return obj->spec_attr->group_p;
 8007f40:	6880      	ldr	r0, [r0, #8]
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d000      	beq.n	8007f48 <lv_obj_get_group+0x8>
 8007f46:	6880      	ldr	r0, [r0, #8]
}
 8007f48:	4770      	bx	lr
 8007f4a:	46c0      	nop			; (mov r8, r8)

08007f4c <lv_obj_allocate_spec_attr>:
    if(obj->spec_attr == NULL) {
 8007f4c:	6883      	ldr	r3, [r0, #8]
{
 8007f4e:	b510      	push	{r4, lr}
 8007f50:	0004      	movs	r4, r0
    if(obj->spec_attr == NULL) {
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d000      	beq.n	8007f58 <lv_obj_allocate_spec_attr+0xc>
}
 8007f56:	bd10      	pop	{r4, pc}
        x++;
 8007f58:	4a0a      	ldr	r2, [pc, #40]	; (8007f84 <lv_obj_allocate_spec_attr+0x38>)
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8007f5a:	201c      	movs	r0, #28
        x++;
 8007f5c:	6813      	ldr	r3, [r2, #0]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8007f62:	f00c ff8d 	bl	8014e80 <lv_mem_alloc>
 8007f66:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d00a      	beq.n	8007f82 <lv_obj_allocate_spec_attr+0x36>
        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 8007f6c:	211c      	movs	r1, #28
 8007f6e:	f00d fb09 	bl	8015584 <lv_memset_00>
        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 8007f72:	68a1      	ldr	r1, [r4, #8]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 8007f74:	4a04      	ldr	r2, [pc, #16]	; (8007f88 <lv_obj_allocate_spec_attr+0x3c>)
 8007f76:	8b0b      	ldrh	r3, [r1, #24]
 8007f78:	401a      	ands	r2, r3
 8007f7a:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <lv_obj_allocate_spec_attr+0x40>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	830b      	strh	r3, [r1, #24]
 8007f80:	e7e9      	b.n	8007f56 <lv_obj_allocate_spec_attr+0xa>
        LV_ASSERT_MALLOC(obj->spec_attr);
 8007f82:	e7fe      	b.n	8007f82 <lv_obj_allocate_spec_attr+0x36>
 8007f84:	2000045c 	.word	0x2000045c
 8007f88:	fffff0fc 	.word	0xfffff0fc
 8007f8c:	00000f03 	.word	0x00000f03

08007f90 <lv_obj_check_type>:
    if(obj == NULL) return false;
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d005      	beq.n	8007fa0 <lv_obj_check_type+0x10>
    return obj->class_p == class_p ? true : false;
 8007f94:	6800      	ldr	r0, [r0, #0]
 8007f96:	1a40      	subs	r0, r0, r1
 8007f98:	4243      	negs	r3, r0
 8007f9a:	4158      	adcs	r0, r3
 8007f9c:	b2c0      	uxtb	r0, r0
}
 8007f9e:	4770      	bx	lr
    if(obj == NULL) return false;
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	e7fc      	b.n	8007f9e <lv_obj_check_type+0xe>

08007fa4 <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 8007fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fa6:	46c6      	mov	lr, r8
    const lv_obj_class_t * original_class_p = obj->class_p;
 8007fa8:	6805      	ldr	r5, [r0, #0]
{
 8007faa:	0004      	movs	r4, r0

    if(obj->class_p->base_class) {
 8007fac:	682e      	ldr	r6, [r5, #0]
{
 8007fae:	b500      	push	{lr}
    if(obj->class_p->base_class) {
 8007fb0:	2e00      	cmp	r6, #0
 8007fb2:	d022      	beq.n	8007ffa <lv_obj_construct+0x56>
 8007fb4:	6837      	ldr	r7, [r6, #0]
 8007fb6:	2f00      	cmp	r7, #0
 8007fb8:	d018      	beq.n	8007fec <lv_obj_construct+0x48>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	4698      	mov	r8, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00d      	beq.n	8007fde <lv_obj_construct+0x3a>
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <lv_obj_construct+0x2a>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 8007fc8:	6003      	str	r3, [r0, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 8007fca:	f7ff ffeb 	bl	8007fa4 <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;
 8007fce:	4643      	mov	r3, r8
 8007fd0:	6023      	str	r3, [r4, #0]

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <lv_obj_construct+0x3a>
 8007fd8:	0021      	movs	r1, r4
 8007fda:	4640      	mov	r0, r8
 8007fdc:	4798      	blx	r3
 8007fde:	687b      	ldr	r3, [r7, #4]
    obj->class_p = original_class_p;
 8007fe0:	6027      	str	r7, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d002      	beq.n	8007fec <lv_obj_construct+0x48>
 8007fe6:	0021      	movs	r1, r4
 8007fe8:	0038      	movs	r0, r7
 8007fea:	4798      	blx	r3
 8007fec:	6873      	ldr	r3, [r6, #4]
    obj->class_p = original_class_p;
 8007fee:	6026      	str	r6, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <lv_obj_construct+0x56>
 8007ff4:	0021      	movs	r1, r4
 8007ff6:	0030      	movs	r0, r6
 8007ff8:	4798      	blx	r3
 8007ffa:	686b      	ldr	r3, [r5, #4]
    obj->class_p = original_class_p;
 8007ffc:	6025      	str	r5, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <lv_obj_construct+0x64>
 8008002:	0021      	movs	r1, r4
 8008004:	0028      	movs	r0, r5
 8008006:	4798      	blx	r3
}
 8008008:	bc80      	pop	{r7}
 800800a:	46b8      	mov	r8, r7
 800800c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800800e:	46c0      	nop			; (mov r8, r8)

08008010 <lv_obj_class_create_obj>:
{
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	0007      	movs	r7, r0
 8008014:	000e      	movs	r6, r1

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
    while(base && base->instance_size == 0) base = base->base_class;
 8008016:	1e03      	subs	r3, r0, #0
 8008018:	d05e      	beq.n	80080d8 <lv_obj_class_create_obj+0xc8>
 800801a:	4c37      	ldr	r4, [pc, #220]	; (80080f8 <lv_obj_class_create_obj+0xe8>)
 800801c:	e002      	b.n	8008024 <lv_obj_class_create_obj+0x14>
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d006      	beq.n	8008032 <lv_obj_class_create_obj+0x22>
 8008024:	695a      	ldr	r2, [r3, #20]
 8008026:	0015      	movs	r5, r2
 8008028:	4025      	ands	r5, r4
 800802a:	4222      	tst	r2, r4
 800802c:	d0f7      	beq.n	800801e <lv_obj_class_create_obj+0xe>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/

    return base->instance_size;
 800802e:	0312      	lsls	r2, r2, #12
 8008030:	0c15      	lsrs	r5, r2, #16
    lv_obj_t * obj = lv_mem_alloc(s);
 8008032:	0028      	movs	r0, r5
 8008034:	f00c ff24 	bl	8014e80 <lv_mem_alloc>
 8008038:	1e04      	subs	r4, r0, #0
    if(obj == NULL) return NULL;
 800803a:	d01b      	beq.n	8008074 <lv_obj_class_create_obj+0x64>
    lv_memset_00(obj, s);
 800803c:	0029      	movs	r1, r5
 800803e:	f00d faa1 	bl	8015584 <lv_memset_00>
    obj->class_p = class_p;
 8008042:	6027      	str	r7, [r4, #0]
    obj->parent = parent;
 8008044:	6066      	str	r6, [r4, #4]
    if(parent == NULL) {
 8008046:	2e00      	cmp	r6, #0
 8008048:	d020      	beq.n	800808c <lv_obj_class_create_obj+0x7c>
        if(parent->spec_attr == NULL) {
 800804a:	68b5      	ldr	r5, [r6, #8]
 800804c:	2d00      	cmp	r5, #0
 800804e:	d03e      	beq.n	80080ce <lv_obj_class_create_obj+0xbe>
        if(parent->spec_attr->children == NULL) {
 8008050:	6828      	ldr	r0, [r5, #0]
 8008052:	2800      	cmp	r0, #0
 8008054:	d010      	beq.n	8008078 <lv_obj_class_create_obj+0x68>
            parent->spec_attr->child_cnt++;
 8008056:	686b      	ldr	r3, [r5, #4]
 8008058:	1c59      	adds	r1, r3, #1
 800805a:	6069      	str	r1, [r5, #4]
                                                         sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 800805c:	0089      	lsls	r1, r1, #2
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800805e:	f00c ff4d 	bl	8014efc <lv_mem_realloc>
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 8008062:	4926      	ldr	r1, [pc, #152]	; (80080fc <lv_obj_class_create_obj+0xec>)
 8008064:	68b2      	ldr	r2, [r6, #8]
 8008066:	468c      	mov	ip, r1
 8008068:	6853      	ldr	r3, [r2, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800806a:	6028      	str	r0, [r5, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 800806c:	6812      	ldr	r2, [r2, #0]
 800806e:	4463      	add	r3, ip
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	509c      	str	r4, [r3, r2]
}
 8008074:	0020      	movs	r0, r4
 8008076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 8008078:	3004      	adds	r0, #4
 800807a:	f00c ff01 	bl	8014e80 <lv_mem_alloc>
            parent->spec_attr->children[0] = obj;
 800807e:	68b3      	ldr	r3, [r6, #8]
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 8008080:	6028      	str	r0, [r5, #0]
            parent->spec_attr->children[0] = obj;
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	6014      	str	r4, [r2, #0]
            parent->spec_attr->child_cnt = 1;
 8008086:	2201      	movs	r2, #1
 8008088:	605a      	str	r2, [r3, #4]
 800808a:	e7f3      	b.n	8008074 <lv_obj_class_create_obj+0x64>
        lv_disp_t * disp = lv_disp_get_default();
 800808c:	f00b fcd8 	bl	8013a40 <lv_disp_get_default>
 8008090:	1e05      	subs	r5, r0, #0
        if(!disp) {
 8008092:	d02b      	beq.n	80080ec <lv_obj_class_create_obj+0xdc>
        if(disp->screens == NULL) {
 8008094:	68c0      	ldr	r0, [r0, #12]
 8008096:	2800      	cmp	r0, #0
 8008098:	d020      	beq.n	80080dc <lv_obj_class_create_obj+0xcc>
            disp->screen_cnt++;
 800809a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800809c:	1c59      	adds	r1, r3, #1
 800809e:	6269      	str	r1, [r5, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 80080a0:	0089      	lsls	r1, r1, #2
 80080a2:	f00c ff2b 	bl	8014efc <lv_mem_realloc>
            disp->screens[disp->screen_cnt - 1] = obj;
 80080a6:	4a15      	ldr	r2, [pc, #84]	; (80080fc <lv_obj_class_create_obj+0xec>)
 80080a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080aa:	4694      	mov	ip, r2
 80080ac:	4463      	add	r3, ip
 80080ae:	009b      	lsls	r3, r3, #2
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 80080b0:	60e8      	str	r0, [r5, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 80080b2:	501c      	str	r4, [r3, r0]
        obj->coords.x1 = 0;
 80080b4:	2300      	movs	r3, #0
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 80080b6:	2000      	movs	r0, #0
        obj->coords.x1 = 0;
 80080b8:	6123      	str	r3, [r4, #16]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 80080ba:	f00b fcc7 	bl	8013a4c <lv_disp_get_hor_res>
 80080be:	3801      	subs	r0, #1
 80080c0:	82a0      	strh	r0, [r4, #20]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 80080c2:	2000      	movs	r0, #0
 80080c4:	f00b fcd6 	bl	8013a74 <lv_disp_get_ver_res>
 80080c8:	3801      	subs	r0, #1
 80080ca:	82e0      	strh	r0, [r4, #22]
 80080cc:	e7d2      	b.n	8008074 <lv_obj_class_create_obj+0x64>
            lv_obj_allocate_spec_attr(parent);
 80080ce:	0030      	movs	r0, r6
 80080d0:	f7ff ff3c 	bl	8007f4c <lv_obj_allocate_spec_attr>
        if(parent->spec_attr->children == NULL) {
 80080d4:	68b5      	ldr	r5, [r6, #8]
 80080d6:	e7bb      	b.n	8008050 <lv_obj_class_create_obj+0x40>
    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 80080d8:	2500      	movs	r5, #0
 80080da:	e7aa      	b.n	8008032 <lv_obj_class_create_obj+0x22>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 80080dc:	3004      	adds	r0, #4
 80080de:	f00c fecf 	bl	8014e80 <lv_mem_alloc>
            disp->screen_cnt = 1;
 80080e2:	2301      	movs	r3, #1
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 80080e4:	60e8      	str	r0, [r5, #12]
            disp->screens[0] = obj;
 80080e6:	6004      	str	r4, [r0, #0]
            disp->screen_cnt = 1;
 80080e8:	626b      	str	r3, [r5, #36]	; 0x24
 80080ea:	e7e3      	b.n	80080b4 <lv_obj_class_create_obj+0xa4>
            lv_mem_free(obj);
 80080ec:	0020      	movs	r0, r4
 80080ee:	f00c fee9 	bl	8014ec4 <lv_mem_free>
            return NULL;
 80080f2:	2400      	movs	r4, #0
 80080f4:	e7be      	b.n	8008074 <lv_obj_class_create_obj+0x64>
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	000ffff0 	.word	0x000ffff0
 80080fc:	3fffffff 	.word	0x3fffffff

08008100 <lv_obj_class_init_obj>:
{
 8008100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008102:	46c6      	mov	lr, r8
 8008104:	0004      	movs	r4, r0
 8008106:	b500      	push	{lr}
    lv_obj_mark_layout_as_dirty(obj);
 8008108:	f000 fd32 	bl	8008b70 <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 800810c:	2000      	movs	r0, #0
 800810e:	f004 fa53 	bl	800c5b8 <lv_obj_enable_style_refresh>
    lv_theme_apply(obj);
 8008112:	0020      	movs	r0, r4
 8008114:	f007 f8a2 	bl	800f25c <lv_theme_apply>
    const lv_obj_class_t * original_class_p = obj->class_p;
 8008118:	6825      	ldr	r5, [r4, #0]
    if(obj->class_p->base_class) {
 800811a:	682e      	ldr	r6, [r5, #0]
 800811c:	2e00      	cmp	r6, #0
 800811e:	d023      	beq.n	8008168 <lv_obj_class_init_obj+0x68>
 8008120:	6837      	ldr	r7, [r6, #0]
 8008122:	2f00      	cmp	r7, #0
 8008124:	d019      	beq.n	800815a <lv_obj_class_init_obj+0x5a>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	4698      	mov	r8, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00e      	beq.n	800814c <lv_obj_class_init_obj+0x4c>
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d003      	beq.n	800813c <lv_obj_class_init_obj+0x3c>
        lv_obj_construct(obj);
 8008134:	0020      	movs	r0, r4
        obj->class_p = obj->class_p->base_class;
 8008136:	6023      	str	r3, [r4, #0]
        lv_obj_construct(obj);
 8008138:	f7ff ff34 	bl	8007fa4 <lv_obj_construct>
    obj->class_p = original_class_p;
 800813c:	4643      	mov	r3, r8
 800813e:	6023      	str	r3, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <lv_obj_class_init_obj+0x4c>
 8008146:	0021      	movs	r1, r4
 8008148:	4640      	mov	r0, r8
 800814a:	4798      	blx	r3
 800814c:	687b      	ldr	r3, [r7, #4]
    obj->class_p = original_class_p;
 800814e:	6027      	str	r7, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <lv_obj_class_init_obj+0x5a>
 8008154:	0021      	movs	r1, r4
 8008156:	0038      	movs	r0, r7
 8008158:	4798      	blx	r3
 800815a:	6873      	ldr	r3, [r6, #4]
    obj->class_p = original_class_p;
 800815c:	6026      	str	r6, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <lv_obj_class_init_obj+0x68>
 8008162:	0021      	movs	r1, r4
 8008164:	0030      	movs	r0, r6
 8008166:	4798      	blx	r3
 8008168:	686b      	ldr	r3, [r5, #4]
    obj->class_p = original_class_p;
 800816a:	6025      	str	r5, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <lv_obj_class_init_obj+0x76>
 8008170:	0021      	movs	r1, r4
 8008172:	0028      	movs	r0, r5
 8008174:	4798      	blx	r3
    lv_obj_enable_style_refresh(true);
 8008176:	2001      	movs	r0, #1
 8008178:	f004 fa1e 	bl	800c5b8 <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 800817c:	21f0      	movs	r1, #240	; 0xf0
 800817e:	0020      	movs	r0, r4
 8008180:	4a18      	ldr	r2, [pc, #96]	; (80081e4 <lv_obj_class_init_obj+0xe4>)
 8008182:	0309      	lsls	r1, r1, #12
 8008184:	f004 fbd4 	bl	800c930 <lv_obj_refresh_style>
    lv_obj_refresh_self_size(obj);
 8008188:	0020      	movs	r0, r4
 800818a:	f000 fe4b 	bl	8008e24 <lv_obj_refresh_self_size>
    lv_group_t * def_group = lv_group_get_default();
 800818e:	f7fd f843 	bl	8005218 <lv_group_get_default>
    if(def_group && lv_obj_is_group_def(obj)) {
 8008192:	2800      	cmp	r0, #0
 8008194:	d00e      	beq.n	80081b4 <lv_obj_class_init_obj+0xb4>
    const lv_obj_class_t * class_p = obj->class_p;
 8008196:	6823      	ldr	r3, [r4, #0]
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 8008198:	210c      	movs	r1, #12
 800819a:	2b00      	cmp	r3, #0
 800819c:	d103      	bne.n	80081a6 <lv_obj_class_init_obj+0xa6>
 800819e:	e009      	b.n	80081b4 <lv_obj_class_init_obj+0xb4>
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d006      	beq.n	80081b4 <lv_obj_class_init_obj+0xb4>
 80081a6:	000d      	movs	r5, r1
 80081a8:	7d1a      	ldrb	r2, [r3, #20]
 80081aa:	4015      	ands	r5, r2
 80081ac:	4211      	tst	r1, r2
 80081ae:	d0f7      	beq.n	80081a0 <lv_obj_class_init_obj+0xa0>
    if(def_group && lv_obj_is_group_def(obj)) {
 80081b0:	2d04      	cmp	r5, #4
 80081b2:	d013      	beq.n	80081dc <lv_obj_class_init_obj+0xdc>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80081b4:	0020      	movs	r0, r4
 80081b6:	f005 fe31 	bl	800de1c <lv_obj_get_parent>
 80081ba:	1e05      	subs	r5, r0, #0
    if(parent) {
 80081bc:	d00b      	beq.n	80081d6 <lv_obj_class_init_obj+0xd6>
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80081be:	0022      	movs	r2, r4
 80081c0:	2122      	movs	r1, #34	; 0x22
 80081c2:	f7fc fd35 	bl	8004c30 <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 80081c6:	0022      	movs	r2, r4
 80081c8:	2123      	movs	r1, #35	; 0x23
 80081ca:	0028      	movs	r0, r5
 80081cc:	f7fc fd30 	bl	8004c30 <lv_event_send>
        lv_obj_invalidate(obj);
 80081d0:	0020      	movs	r0, r4
 80081d2:	f001 f91f 	bl	8009414 <lv_obj_invalidate>
}
 80081d6:	bc80      	pop	{r7}
 80081d8:	46b8      	mov	r8, r7
 80081da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_group_add_obj(def_group, obj);
 80081dc:	0021      	movs	r1, r4
 80081de:	f7fd f821 	bl	8005224 <lv_group_add_obj>
 80081e2:	e7e7      	b.n	80081b4 <lv_obj_class_init_obj+0xb4>
 80081e4:	0000ffff 	.word	0x0000ffff

080081e8 <_lv_obj_destruct>:
{
 80081e8:	b510      	push	{r4, lr}
 80081ea:	0004      	movs	r4, r0
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 80081ec:	6800      	ldr	r0, [r0, #0]
 80081ee:	6883      	ldr	r3, [r0, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d009      	beq.n	8008208 <_lv_obj_destruct+0x20>
 80081f4:	0021      	movs	r1, r4
 80081f6:	4798      	blx	r3
    if(obj->class_p->base_class) {
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	6818      	ldr	r0, [r3, #0]
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d006      	beq.n	800820e <_lv_obj_destruct+0x26>
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 8008200:	6883      	ldr	r3, [r0, #8]
        obj->class_p = obj->class_p->base_class;
 8008202:	6020      	str	r0, [r4, #0]
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1f5      	bne.n	80081f4 <_lv_obj_destruct+0xc>
    if(obj->class_p->base_class) {
 8008208:	6800      	ldr	r0, [r0, #0]
 800820a:	2800      	cmp	r0, #0
 800820c:	d1f8      	bne.n	8008200 <_lv_obj_destruct+0x18>
}
 800820e:	bd10      	pop	{r4, pc}

08008210 <lv_obj_is_editable>:
    const lv_obj_class_t * class_p = obj->class_p;
 8008210:	6803      	ldr	r3, [r0, #0]
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 8008212:	2103      	movs	r1, #3
 8008214:	2b00      	cmp	r3, #0
 8008216:	d103      	bne.n	8008220 <lv_obj_is_editable+0x10>
 8008218:	e00c      	b.n	8008234 <lv_obj_is_editable+0x24>
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d009      	beq.n	8008234 <lv_obj_is_editable+0x24>
 8008220:	0008      	movs	r0, r1
 8008222:	7d1a      	ldrb	r2, [r3, #20]
 8008224:	4010      	ands	r0, r2
 8008226:	4211      	tst	r1, r2
 8008228:	d0f7      	beq.n	800821a <lv_obj_is_editable+0xa>
    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 800822a:	3801      	subs	r0, #1
 800822c:	4243      	negs	r3, r0
 800822e:	4158      	adcs	r0, r3
 8008230:	b2c0      	uxtb	r0, r0
}
 8008232:	4770      	bx	lr
    if(class_p == NULL) return false;
 8008234:	2000      	movs	r0, #0
 8008236:	e7fc      	b.n	8008232 <lv_obj_is_editable+0x22>

08008238 <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8008238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800823a:	46c6      	mov	lr, r8
 800823c:	0006      	movs	r6, r0
 800823e:	000d      	movs	r5, r1
 8008240:	0014      	movs	r4, r2
    lv_opa_t opa = LV_OPA_COVER;
 8008242:	27ff      	movs	r7, #255	; 0xff
{
 8008244:	b500      	push	{lr}
    if(part != LV_PART_MAIN) {
 8008246:	2900      	cmp	r1, #0
 8008248:	d151      	bne.n	80082ee <lv_obj_init_draw_rect_dsc+0xb6>
            }
        }
    }

#else /*LV_DRAW_COMPLEX*/
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 800824a:	78e3      	ldrb	r3, [r4, #3]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d000      	beq.n	8008252 <lv_obj_init_draw_rect_dsc+0x1a>
 8008250:	e08d      	b.n	800836e <lv_obj_init_draw_rect_dsc+0x136>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008252:	2232      	movs	r2, #50	; 0x32
 8008254:	0029      	movs	r1, r5
 8008256:	0030      	movs	r0, r6
 8008258:	f004 f9b4 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800825c:	b200      	sxth	r0, r0
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
        }
    }

    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 800825e:	8420      	strh	r0, [r4, #32]
    if(draw_dsc->border_width) {
 8008260:	2800      	cmp	r0, #0
 8008262:	d005      	beq.n	8008270 <lv_obj_init_draw_rect_dsc+0x38>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8008264:	2322      	movs	r3, #34	; 0x22
 8008266:	4698      	mov	r8, r3
 8008268:	5ce3      	ldrb	r3, [r4, r3]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d000      	beq.n	8008270 <lv_obj_init_draw_rect_dsc+0x38>
 800826e:	e094      	b.n	800839a <lv_obj_init_draw_rect_dsc+0x162>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8008270:	2235      	movs	r2, #53	; 0x35
 8008272:	0029      	movs	r1, r5
 8008274:	0030      	movs	r0, r6
 8008276:	f004 f9a5 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800827a:	b200      	sxth	r0, r0
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
            }
        }
    }

    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 800827c:	84e0      	strh	r0, [r4, #38]	; 0x26
    if(draw_dsc->outline_width) {
 800827e:	2800      	cmp	r0, #0
 8008280:	d114      	bne.n	80082ac <lv_obj_init_draw_rect_dsc+0x74>
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
            }
        }
    }

    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 8008282:	7ea3      	ldrb	r3, [r4, #26]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d142      	bne.n	800830e <lv_obj_init_draw_rect_dsc+0xd6>
            }
        }
    }
#endif

    if(part != LV_PART_MAIN) {
 8008288:	2d00      	cmp	r5, #0
 800828a:	d00c      	beq.n	80082a6 <lv_obj_init_draw_rect_dsc+0x6e>
        if(opa < LV_OPA_MAX) {
 800828c:	2ffc      	cmp	r7, #252	; 0xfc
 800828e:	d80a      	bhi.n	80082a6 <lv_obj_init_draw_rect_dsc+0x6e>
            draw_dsc->bg_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8008290:	2336      	movs	r3, #54	; 0x36
            draw_dsc->bg_img_opa = (opa * draw_dsc->shadow_opa) >> 8;
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8008292:	2222      	movs	r2, #34	; 0x22
            draw_dsc->bg_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8008294:	5ce0      	ldrb	r0, [r4, r3]
 8008296:	4347      	muls	r7, r0
 8008298:	0a3f      	lsrs	r7, r7, #8
 800829a:	70e7      	strb	r7, [r4, #3]
            draw_dsc->bg_img_opa = (opa * draw_dsc->shadow_opa) >> 8;
 800829c:	76a7      	strb	r7, [r4, #26]
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
 800829e:	54a7      	strb	r7, [r4, r2]
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80082a0:	3208      	adds	r2, #8
 80082a2:	54a7      	strb	r7, [r4, r2]
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80082a4:	54e7      	strb	r7, [r4, r3]
        }
    }
}
 80082a6:	bc80      	pop	{r7}
 80082a8:	46b8      	mov	r8, r7
 80082aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 80082ac:	232a      	movs	r3, #42	; 0x2a
 80082ae:	4698      	mov	r8, r3
 80082b0:	5ce3      	ldrb	r3, [r4, r3]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0e5      	beq.n	8008282 <lv_obj_init_draw_rect_dsc+0x4a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 80082b6:	2237      	movs	r2, #55	; 0x37
 80082b8:	0029      	movs	r1, r5
 80082ba:	0030      	movs	r0, r6
 80082bc:	f004 f982 	bl	800c5c4 <lv_obj_get_style_prop>
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 80082c0:	4643      	mov	r3, r8
    return (lv_opa_t)v.num;
 80082c2:	b2c0      	uxtb	r0, r0
 80082c4:	54e0      	strb	r0, [r4, r3]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 80082c6:	2802      	cmp	r0, #2
 80082c8:	d9db      	bls.n	8008282 <lv_obj_init_draw_rect_dsc+0x4a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 80082ca:	2238      	movs	r2, #56	; 0x38
 80082cc:	0029      	movs	r1, r5
 80082ce:	0030      	movs	r0, r6
 80082d0:	f004 f978 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR));
 80082d4:	2236      	movs	r2, #54	; 0x36
 80082d6:	0029      	movs	r1, r5
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 80082d8:	8520      	strh	r0, [r4, #40]	; 0x28
 80082da:	0030      	movs	r0, r6
 80082dc:	f004 f972 	bl	800c5c4 <lv_obj_get_style_prop>
 80082e0:	0029      	movs	r1, r5
 80082e2:	0002      	movs	r2, r0
 80082e4:	0030      	movs	r0, r6
 80082e6:	f005 f8c3 	bl	800d470 <_lv_obj_style_apply_color_filter>
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 80082ea:	84a0      	strh	r0, [r4, #36]	; 0x24
 80082ec:	e7c9      	b.n	8008282 <lv_obj_init_draw_rect_dsc+0x4a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80082ee:	2260      	movs	r2, #96	; 0x60
 80082f0:	f004 f968 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80082f4:	b2c7      	uxtb	r7, r0
        if(opa <= LV_OPA_MIN) {
 80082f6:	2f02      	cmp	r7, #2
 80082f8:	d8a7      	bhi.n	800824a <lv_obj_init_draw_rect_dsc+0x12>
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 80082fa:	2300      	movs	r3, #0
            draw_dsc->border_opa = LV_OPA_TRANSP;
 80082fc:	2222      	movs	r2, #34	; 0x22
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 80082fe:	70e3      	strb	r3, [r4, #3]
            draw_dsc->bg_img_opa = LV_OPA_TRANSP;
 8008300:	76a3      	strb	r3, [r4, #26]
            draw_dsc->border_opa = LV_OPA_TRANSP;
 8008302:	54a3      	strb	r3, [r4, r2]
            draw_dsc->outline_opa = LV_OPA_TRANSP;
 8008304:	3208      	adds	r2, #8
 8008306:	54a3      	strb	r3, [r4, r2]
            draw_dsc->shadow_opa = LV_OPA_TRANSP;
 8008308:	320c      	adds	r2, #12
 800830a:	54a3      	strb	r3, [r4, r2]
            return;
 800830c:	e7cb      	b.n	80082a6 <lv_obj_init_draw_rect_dsc+0x6e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 800830e:	2228      	movs	r2, #40	; 0x28
 8008310:	0029      	movs	r1, r5
 8008312:	0030      	movs	r0, r6
 8008314:	f004 f956 	bl	800c5c4 <lv_obj_get_style_prop>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 8008318:	6120      	str	r0, [r4, #16]
        if(draw_dsc->bg_img_src) {
 800831a:	2800      	cmp	r0, #0
 800831c:	d0b4      	beq.n	8008288 <lv_obj_init_draw_rect_dsc+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 800831e:	2229      	movs	r2, #41	; 0x29
 8008320:	0029      	movs	r1, r5
 8008322:	0030      	movs	r0, r6
 8008324:	f004 f94e 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8008328:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 800832a:	76a0      	strb	r0, [r4, #26]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 800832c:	2802      	cmp	r0, #2
 800832e:	d9ab      	bls.n	8008288 <lv_obj_init_draw_rect_dsc+0x50>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 8008330:	6920      	ldr	r0, [r4, #16]
 8008332:	f007 f971 	bl	800f618 <lv_img_src_get_type>
 8008336:	2802      	cmp	r0, #2
 8008338:	d054      	beq.n	80083e4 <lv_obj_init_draw_rect_dsc+0x1ac>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR));
 800833a:	222a      	movs	r2, #42	; 0x2a
 800833c:	0029      	movs	r1, r5
 800833e:	0030      	movs	r0, r6
 8008340:	f004 f940 	bl	800c5c4 <lv_obj_get_style_prop>
 8008344:	0029      	movs	r1, r5
 8008346:	0002      	movs	r2, r0
 8008348:	0030      	movs	r0, r6
 800834a:	f005 f891 	bl	800d470 <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 800834e:	222b      	movs	r2, #43	; 0x2b
 8008350:	0029      	movs	r1, r5
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 8008352:	8320      	strh	r0, [r4, #24]
 8008354:	0030      	movs	r0, r6
 8008356:	f004 f935 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 800835a:	222c      	movs	r2, #44	; 0x2c
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 800835c:	76e0      	strb	r0, [r4, #27]
 800835e:	0029      	movs	r1, r5
 8008360:	0030      	movs	r0, r6
 8008362:	f004 f92f 	bl	800c5c4 <lv_obj_get_style_prop>
    return (bool)v.num;
 8008366:	1e43      	subs	r3, r0, #1
 8008368:	4198      	sbcs	r0, r3
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 800836a:	7720      	strb	r0, [r4, #28]
 800836c:	e78c      	b.n	8008288 <lv_obj_init_draw_rect_dsc+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800836e:	2221      	movs	r2, #33	; 0x21
 8008370:	0029      	movs	r1, r5
 8008372:	0030      	movs	r0, r6
 8008374:	f004 f926 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8008378:	b2c0      	uxtb	r0, r0
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 800837a:	70e0      	strb	r0, [r4, #3]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 800837c:	2802      	cmp	r0, #2
 800837e:	d800      	bhi.n	8008382 <lv_obj_init_draw_rect_dsc+0x14a>
 8008380:	e767      	b.n	8008252 <lv_obj_init_draw_rect_dsc+0x1a>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 8008382:	2220      	movs	r2, #32
 8008384:	0029      	movs	r1, r5
 8008386:	0030      	movs	r0, r6
 8008388:	f004 f91c 	bl	800c5c4 <lv_obj_get_style_prop>
 800838c:	0029      	movs	r1, r5
 800838e:	0002      	movs	r2, r0
 8008390:	0030      	movs	r0, r6
 8008392:	f005 f86d 	bl	800d470 <_lv_obj_style_apply_color_filter>
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 8008396:	80a0      	strh	r0, [r4, #4]
 8008398:	e75b      	b.n	8008252 <lv_obj_init_draw_rect_dsc+0x1a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 800839a:	2231      	movs	r2, #49	; 0x31
 800839c:	0029      	movs	r1, r5
 800839e:	0030      	movs	r0, r6
 80083a0:	f004 f910 	bl	800c5c4 <lv_obj_get_style_prop>
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 80083a4:	4643      	mov	r3, r8
    return (lv_opa_t)v.num;
 80083a6:	b2c0      	uxtb	r0, r0
 80083a8:	54e0      	strb	r0, [r4, r3]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 80083aa:	2802      	cmp	r0, #2
 80083ac:	d800      	bhi.n	80083b0 <lv_obj_init_draw_rect_dsc+0x178>
 80083ae:	e75f      	b.n	8008270 <lv_obj_init_draw_rect_dsc+0x38>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
 80083b0:	2230      	movs	r2, #48	; 0x30
 80083b2:	0029      	movs	r1, r5
 80083b4:	0030      	movs	r0, r6
 80083b6:	f004 f905 	bl	800c5c4 <lv_obj_get_style_prop>
 80083ba:	0029      	movs	r1, r5
 80083bc:	0002      	movs	r2, r0
 80083be:	0030      	movs	r0, r6
 80083c0:	f005 f856 	bl	800d470 <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 80083c4:	2233      	movs	r2, #51	; 0x33
 80083c6:	0029      	movs	r1, r5
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 80083c8:	83e0      	strh	r0, [r4, #30]
 80083ca:	0030      	movs	r0, r6
 80083cc:	f004 f8fa 	bl	800c5c4 <lv_obj_get_style_prop>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 80083d0:	2223      	movs	r2, #35	; 0x23
 80083d2:	231f      	movs	r3, #31
 80083d4:	213e      	movs	r1, #62	; 0x3e
 80083d6:	4003      	ands	r3, r0
 80083d8:	5ca0      	ldrb	r0, [r4, r2]
 80083da:	005b      	lsls	r3, r3, #1
 80083dc:	4388      	bics	r0, r1
 80083de:	4318      	orrs	r0, r3
 80083e0:	54a0      	strb	r0, [r4, r2]
 80083e2:	e745      	b.n	8008270 <lv_obj_init_draw_rect_dsc+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80083e4:	2257      	movs	r2, #87	; 0x57
 80083e6:	0029      	movs	r1, r5
 80083e8:	0030      	movs	r0, r6
 80083ea:	f004 f8eb 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 80083ee:	2255      	movs	r2, #85	; 0x55
 80083f0:	0029      	movs	r1, r5
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 80083f2:	6160      	str	r0, [r4, #20]
 80083f4:	0030      	movs	r0, r6
 80083f6:	f004 f8e5 	bl	800c5c4 <lv_obj_get_style_prop>
 80083fa:	0029      	movs	r1, r5
 80083fc:	0002      	movs	r2, r0
 80083fe:	0030      	movs	r0, r6
 8008400:	f005 f836 	bl	800d470 <_lv_obj_style_apply_color_filter>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 8008404:	8320      	strh	r0, [r4, #24]
 8008406:	e73f      	b.n	8008288 <lv_obj_init_draw_rect_dsc+0x50>

08008408 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8008408:	b570      	push	{r4, r5, r6, lr}
 800840a:	0016      	movs	r6, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 800840c:	2256      	movs	r2, #86	; 0x56
 800840e:	0005      	movs	r5, r0
 8008410:	000c      	movs	r4, r1
 8008412:	f004 f8d7 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8008416:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8008418:	76b0      	strb	r0, [r6, #26]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 800841a:	2802      	cmp	r0, #2
 800841c:	d93a      	bls.n	8008494 <lv_obj_init_draw_label_dsc+0x8c>

    if(part != LV_PART_MAIN) {
 800841e:	2c00      	cmp	r4, #0
 8008420:	d009      	beq.n	8008436 <lv_obj_init_draw_label_dsc+0x2e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8008422:	2260      	movs	r2, #96	; 0x60
 8008424:	0021      	movs	r1, r4
 8008426:	0028      	movs	r0, r5
 8008428:	f004 f8cc 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800842c:	b2c3      	uxtb	r3, r0
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
        if(opa <= LV_OPA_MIN) {
 800842e:	2b02      	cmp	r3, #2
 8008430:	d938      	bls.n	80084a4 <lv_obj_init_draw_label_dsc+0x9c>
            draw_dsc->opa = LV_OPA_TRANSP;
            return;
        }
        if(opa < LV_OPA_MAX) {
 8008432:	2bfc      	cmp	r3, #252	; 0xfc
 8008434:	d92f      	bls.n	8008496 <lv_obj_init_draw_label_dsc+0x8e>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 8008436:	2255      	movs	r2, #85	; 0x55
 8008438:	0021      	movs	r1, r4
 800843a:	0028      	movs	r0, r5
 800843c:	f004 f8c2 	bl	800c5c4 <lv_obj_get_style_prop>
 8008440:	0021      	movs	r1, r4
 8008442:	0002      	movs	r2, r0
 8008444:	0028      	movs	r0, r5
 8008446:	f005 f813 	bl	800d470 <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 800844a:	2258      	movs	r2, #88	; 0x58
 800844c:	0021      	movs	r1, r4
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
        }
    }

    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 800844e:	81b0      	strh	r0, [r6, #12]
 8008450:	0028      	movs	r0, r5
 8008452:	f004 f8b7 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8008456:	2259      	movs	r2, #89	; 0x59
 8008458:	0021      	movs	r1, r4
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 800845a:	82b0      	strh	r0, [r6, #20]
 800845c:	0028      	movs	r0, r5
 800845e:	f004 f8b1 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 8008462:	225a      	movs	r2, #90	; 0x5a
 8008464:	0021      	movs	r1, r4
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 8008466:	8270      	strh	r0, [r6, #18]
 8008468:	0028      	movs	r0, r5
 800846a:	f004 f8ab 	bl	800c5c4 <lv_obj_get_style_prop>
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 800846e:	2207      	movs	r2, #7
 8008470:	0003      	movs	r3, r0
 8008472:	7fb0      	ldrb	r0, [r6, #30]
 8008474:	4013      	ands	r3, r2
 8008476:	4390      	bics	r0, r2
 8008478:	4318      	orrs	r0, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 800847a:	0021      	movs	r1, r4
 800847c:	77b0      	strb	r0, [r6, #30]
 800847e:	3250      	adds	r2, #80	; 0x50
 8008480:	0028      	movs	r0, r5
 8008482:	f004 f89f 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 8008486:	225b      	movs	r2, #91	; 0x5b
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 8008488:	6030      	str	r0, [r6, #0]
 800848a:	0021      	movs	r1, r4
 800848c:	0028      	movs	r0, r5
 800848e:	f004 f899 	bl	800c5c4 <lv_obj_get_style_prop>

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 8008492:	7730      	strb	r0, [r6, #28]
}
 8008494:	bd70      	pop	{r4, r5, r6, pc}
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8008496:	23ff      	movs	r3, #255	; 0xff
 8008498:	7eb2      	ldrb	r2, [r6, #26]
 800849a:	4018      	ands	r0, r3
 800849c:	4350      	muls	r0, r2
 800849e:	1200      	asrs	r0, r0, #8
 80084a0:	76b0      	strb	r0, [r6, #26]
 80084a2:	e7c8      	b.n	8008436 <lv_obj_init_draw_label_dsc+0x2e>
            draw_dsc->opa = LV_OPA_TRANSP;
 80084a4:	2300      	movs	r3, #0
 80084a6:	76b3      	strb	r3, [r6, #26]
            return;
 80084a8:	e7f4      	b.n	8008494 <lv_obj_init_draw_label_dsc+0x8c>
 80084aa:	46c0      	nop			; (mov r8, r8)

080084ac <lv_obj_init_draw_img_dsc>:

void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint32_t part, lv_draw_img_dsc_t * draw_dsc)
{
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	0015      	movs	r5, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 80084b0:	2246      	movs	r2, #70	; 0x46
 80084b2:	0004      	movs	r4, r0
 80084b4:	000e      	movs	r6, r1
 80084b6:	f004 f885 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80084ba:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
 80084bc:	72e8      	strb	r0, [r5, #11]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 80084be:	2802      	cmp	r0, #2
 80084c0:	d92f      	bls.n	8008522 <lv_obj_init_draw_img_dsc+0x76>

    if(part != LV_PART_MAIN) {
 80084c2:	2e00      	cmp	r6, #0
 80084c4:	d00f      	beq.n	80084e6 <lv_obj_init_draw_img_dsc+0x3a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80084c6:	2260      	movs	r2, #96	; 0x60
 80084c8:	0031      	movs	r1, r6
 80084ca:	0020      	movs	r0, r4
 80084cc:	f004 f87a 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80084d0:	b2c3      	uxtb	r3, r0
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
        if(opa <= LV_OPA_MIN) {
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d932      	bls.n	800853c <lv_obj_init_draw_img_dsc+0x90>
            draw_dsc->opa = LV_OPA_TRANSP;
            return;
        }
        if(opa < LV_OPA_MAX) {
 80084d6:	2bfc      	cmp	r3, #252	; 0xfc
 80084d8:	d805      	bhi.n	80084e6 <lv_obj_init_draw_img_dsc+0x3a>
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 80084da:	23ff      	movs	r3, #255	; 0xff
 80084dc:	7aea      	ldrb	r2, [r5, #11]
 80084de:	4018      	ands	r0, r3
 80084e0:	4350      	muls	r0, r2
 80084e2:	1200      	asrs	r0, r0, #8
 80084e4:	72e8      	strb	r0, [r5, #11]
        }
    }

    draw_dsc->angle = 0;
 80084e6:	2380      	movs	r3, #128	; 0x80
 80084e8:	045b      	lsls	r3, r3, #17
 80084ea:	602b      	str	r3, [r5, #0]
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80084ec:	8aa3      	ldrh	r3, [r4, #20]
 80084ee:	8a22      	ldrh	r2, [r4, #16]
 80084f0:	3301      	adds	r3, #1
 80084f2:	1a9b      	subs	r3, r3, r2
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 80084f4:	b21b      	sxth	r3, r3
 80084f6:	0fda      	lsrs	r2, r3, #31
 80084f8:	18d3      	adds	r3, r2, r3
 80084fa:	105b      	asrs	r3, r3, #1
 80084fc:	80ab      	strh	r3, [r5, #4]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80084fe:	8ae3      	ldrh	r3, [r4, #22]
 8008500:	8a62      	ldrh	r2, [r4, #18]
 8008502:	3301      	adds	r3, #1
 8008504:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 8008506:	b21b      	sxth	r3, r3
 8008508:	0fda      	lsrs	r2, r3, #31
 800850a:	18d3      	adds	r3, r2, r3
 800850c:	105b      	asrs	r3, r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR_OPA);
 800850e:	2248      	movs	r2, #72	; 0x48
 8008510:	0031      	movs	r1, r6
 8008512:	0020      	movs	r0, r4
 8008514:	80eb      	strh	r3, [r5, #6]
 8008516:	f004 f855 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800851a:	b2c0      	uxtb	r0, r0

    draw_dsc->recolor_opa = lv_obj_get_style_img_recolor_opa(obj, part);
 800851c:	72a8      	strb	r0, [r5, #10]
    if(draw_dsc->recolor_opa > 0) {
 800851e:	2800      	cmp	r0, #0
 8008520:	d100      	bne.n	8008524 <lv_obj_init_draw_img_dsc+0x78>
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
    }
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 8008522:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR));
 8008524:	2247      	movs	r2, #71	; 0x47
 8008526:	0031      	movs	r1, r6
 8008528:	0020      	movs	r0, r4
 800852a:	f004 f84b 	bl	800c5c4 <lv_obj_get_style_prop>
 800852e:	0031      	movs	r1, r6
 8008530:	0002      	movs	r2, r0
 8008532:	0020      	movs	r0, r4
 8008534:	f004 ff9c 	bl	800d470 <_lv_obj_style_apply_color_filter>
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
 8008538:	8128      	strh	r0, [r5, #8]
 800853a:	e7f2      	b.n	8008522 <lv_obj_init_draw_img_dsc+0x76>
            draw_dsc->opa = LV_OPA_TRANSP;
 800853c:	2300      	movs	r3, #0
 800853e:	72eb      	strb	r3, [r5, #11]
            return;
 8008540:	e7ef      	b.n	8008522 <lv_obj_init_draw_img_dsc+0x76>
 8008542:	46c0      	nop			; (mov r8, r8)

08008544 <lv_obj_calculate_ext_draw_size>:
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 8008544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8008546:	2240      	movs	r2, #64	; 0x40
 8008548:	0004      	movs	r4, r0
 800854a:	000d      	movs	r5, r1
 800854c:	f004 f83a 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008550:	b206      	sxth	r6, r0
    lv_coord_t s = 0;

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
    if(sh_width) {
 8008552:	2e00      	cmp	r6, #0
 8008554:	d11f      	bne.n	8008596 <lv_obj_calculate_ext_draw_size+0x52>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8008556:	2235      	movs	r2, #53	; 0x35
 8008558:	0029      	movs	r1, r5
 800855a:	0020      	movs	r0, r4
 800855c:	f004 f832 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008560:	b206      	sxth	r6, r0
    lv_coord_t s = 0;
 8008562:	2700      	movs	r7, #0
            s = LV_MAX(s, sh_width);
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
    if(outline_width) {
 8008564:	2e00      	cmp	r6, #0
 8008566:	d14f      	bne.n	8008608 <lv_obj_calculate_ext_draw_size+0xc4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8008568:	2268      	movs	r2, #104	; 0x68
 800856a:	0029      	movs	r1, r5
 800856c:	0020      	movs	r0, r4
 800856e:	f004 f829 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8008572:	2269      	movs	r2, #105	; 0x69
 8008574:	0029      	movs	r1, r5
    return (lv_coord_t)v.num;
 8008576:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8008578:	0020      	movs	r0, r4
 800857a:	f004 f823 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800857e:	b200      	sxth	r0, r0
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
    lv_coord_t wh = LV_MAX(w, h);
 8008580:	1c03      	adds	r3, r0, #0
 8008582:	42b0      	cmp	r0, r6
 8008584:	da00      	bge.n	8008588 <lv_obj_calculate_ext_draw_size+0x44>
 8008586:	1c33      	adds	r3, r6, #0
 8008588:	b21a      	sxth	r2, r3
    if(wh > 0) s += wh;
 800858a:	2a00      	cmp	r2, #0
 800858c:	dd01      	ble.n	8008592 <lv_obj_calculate_ext_draw_size+0x4e>
 800858e:	18ff      	adds	r7, r7, r3
 8008590:	b23f      	sxth	r7, r7

    return s;
}
 8008592:	0038      	movs	r0, r7
 8008594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8008596:	2245      	movs	r2, #69	; 0x45
 8008598:	0029      	movs	r1, r5
 800859a:	0020      	movs	r0, r4
 800859c:	f004 f812 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80085a0:	b2c0      	uxtb	r0, r0
        if(sh_opa > LV_OPA_MIN) {
 80085a2:	2802      	cmp	r0, #2
 80085a4:	d9d7      	bls.n	8008556 <lv_obj_calculate_ext_draw_size+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 80085a6:	2243      	movs	r2, #67	; 0x43
 80085a8:	0029      	movs	r1, r5
 80085aa:	0020      	movs	r0, r4
 80085ac:	f004 f80a 	bl	800c5c4 <lv_obj_get_style_prop>
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 80085b0:	0ff7      	lsrs	r7, r6, #31
 80085b2:	19bf      	adds	r7, r7, r6
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 80085b4:	3001      	adds	r0, #1
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 80085b6:	107f      	asrs	r7, r7, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 80085b8:	2241      	movs	r2, #65	; 0x41
 80085ba:	0029      	movs	r1, r5
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 80085bc:	183f      	adds	r7, r7, r0
 80085be:	0020      	movs	r0, r4
 80085c0:	f004 f800 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 80085c4:	2242      	movs	r2, #66	; 0x42
    return (lv_coord_t)v.num;
 80085c6:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 80085c8:	0029      	movs	r1, r5
 80085ca:	0020      	movs	r0, r4
 80085cc:	f003 fffa 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80085d0:	b203      	sxth	r3, r0
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 80085d2:	17da      	asrs	r2, r3, #31
 80085d4:	189b      	adds	r3, r3, r2
 80085d6:	4053      	eors	r3, r2
 80085d8:	17f2      	asrs	r2, r6, #31
 80085da:	18b6      	adds	r6, r6, r2
 80085dc:	4056      	eors	r6, r2
 80085de:	b2b1      	uxth	r1, r6
 80085e0:	1c1a      	adds	r2, r3, #0
 80085e2:	b29b      	uxth	r3, r3
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 80085e4:	b2bf      	uxth	r7, r7
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 80085e6:	428b      	cmp	r3, r1
 80085e8:	d200      	bcs.n	80085ec <lv_obj_calculate_ext_draw_size+0xa8>
 80085ea:	1c32      	adds	r2, r6, #0
 80085ec:	18ba      	adds	r2, r7, r2
            s = LV_MAX(s, sh_width);
 80085ee:	b213      	sxth	r3, r2
 80085f0:	43db      	mvns	r3, r3
 80085f2:	17df      	asrs	r7, r3, #31
 80085f4:	4017      	ands	r7, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 80085f6:	0029      	movs	r1, r5
 80085f8:	2235      	movs	r2, #53	; 0x35
 80085fa:	0020      	movs	r0, r4
 80085fc:	f003 ffe2 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008600:	b206      	sxth	r6, r0
 8008602:	b23f      	sxth	r7, r7
    if(outline_width) {
 8008604:	2e00      	cmp	r6, #0
 8008606:	d0af      	beq.n	8008568 <lv_obj_calculate_ext_draw_size+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 8008608:	2237      	movs	r2, #55	; 0x37
 800860a:	0029      	movs	r1, r5
 800860c:	0020      	movs	r0, r4
 800860e:	f003 ffd9 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8008612:	b2c0      	uxtb	r0, r0
        if(outline_opa > LV_OPA_MIN) {
 8008614:	2802      	cmp	r0, #2
 8008616:	d9a7      	bls.n	8008568 <lv_obj_calculate_ext_draw_size+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8008618:	2238      	movs	r2, #56	; 0x38
 800861a:	0029      	movs	r1, r5
 800861c:	0020      	movs	r0, r4
 800861e:	f003 ffd1 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008622:	b200      	sxth	r0, r0
            s = LV_MAX(s, outline_pad + outline_width);
 8008624:	1986      	adds	r6, r0, r6
 8008626:	42be      	cmp	r6, r7
 8008628:	da00      	bge.n	800862c <lv_obj_calculate_ext_draw_size+0xe8>
 800862a:	003e      	movs	r6, r7
 800862c:	b237      	sxth	r7, r6
 800862e:	e79b      	b.n	8008568 <lv_obj_calculate_ext_draw_size+0x24>

08008630 <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 8008630:	b570      	push	{r4, r5, r6, lr}
 8008632:	000d      	movs	r5, r1
 8008634:	0004      	movs	r4, r0
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 8008636:	2148      	movs	r1, #72	; 0x48
 8008638:	f00c ffa4 	bl	8015584 <lv_memset_00>
    dsc->draw_ctx = draw_ctx;
 800863c:	6025      	str	r5, [r4, #0]
}
 800863e:	bd70      	pop	{r4, r5, r6, pc}

08008640 <lv_obj_refresh_ext_draw_size>:
    if(dsc->class_p == class_p && dsc->type == type) return true;
    else return false;
}

void lv_obj_refresh_ext_draw_size(lv_obj_t * obj)
{
 8008640:	b570      	push	{r4, r5, r6, lr}
    if(s_new != s_old) lv_obj_invalidate(obj);
}

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 8008642:	6883      	ldr	r3, [r0, #8]
{
 8008644:	0004      	movs	r4, r0
 8008646:	b082      	sub	sp, #8
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 8008648:	2b00      	cmp	r3, #0
 800864a:	d028      	beq.n	800869e <lv_obj_refresh_ext_draw_size+0x5e>
 800864c:	2616      	movs	r6, #22
 800864e:	5f9e      	ldrsh	r6, [r3, r6]
    lv_coord_t s_new = 0;
 8008650:	466b      	mov	r3, sp
 8008652:	1d9d      	adds	r5, r3, #6
 8008654:	2300      	movs	r3, #0
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 8008656:	002a      	movs	r2, r5
 8008658:	2113      	movs	r1, #19
 800865a:	0020      	movs	r0, r4
    lv_coord_t s_new = 0;
 800865c:	802b      	strh	r3, [r5, #0]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 800865e:	f7fc fae7 	bl	8004c30 <lv_event_send>
    if(s_new != s_old) lv_obj_invalidate(obj);
 8008662:	2300      	movs	r3, #0
 8008664:	5eea      	ldrsh	r2, [r5, r3]
 8008666:	0033      	movs	r3, r6
 8008668:	42b2      	cmp	r2, r6
 800866a:	d004      	beq.n	8008676 <lv_obj_refresh_ext_draw_size+0x36>
 800866c:	0020      	movs	r0, r4
 800866e:	f000 fed1 	bl	8009414 <lv_obj_invalidate>
        obj->spec_attr->ext_draw_size = s_new;
 8008672:	2200      	movs	r2, #0
 8008674:	5eab      	ldrsh	r3, [r5, r2]
    if(obj->spec_attr) {
 8008676:	68a2      	ldr	r2, [r4, #8]
 8008678:	2a00      	cmp	r2, #0
 800867a:	d007      	beq.n	800868c <lv_obj_refresh_ext_draw_size+0x4c>
        obj->spec_attr->ext_draw_size = s_new;
 800867c:	82d3      	strh	r3, [r2, #22]
    if(s_new != s_old) lv_obj_invalidate(obj);
 800867e:	429e      	cmp	r6, r3
 8008680:	d002      	beq.n	8008688 <lv_obj_refresh_ext_draw_size+0x48>
 8008682:	0020      	movs	r0, r4
 8008684:	f000 fec6 	bl	8009414 <lv_obj_invalidate>
}
 8008688:	b002      	add	sp, #8
 800868a:	bd70      	pop	{r4, r5, r6, pc}
    else if(s_new != 0) {
 800868c:	2b00      	cmp	r3, #0
 800868e:	d0f6      	beq.n	800867e <lv_obj_refresh_ext_draw_size+0x3e>
        lv_obj_allocate_spec_attr(obj);
 8008690:	0020      	movs	r0, r4
 8008692:	f7ff fc5b 	bl	8007f4c <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 8008696:	2200      	movs	r2, #0
 8008698:	5eab      	ldrsh	r3, [r5, r2]
 800869a:	68a2      	ldr	r2, [r4, #8]
 800869c:	e7ee      	b.n	800867c <lv_obj_refresh_ext_draw_size+0x3c>
    else return 0;
 800869e:	2600      	movs	r6, #0
 80086a0:	e7d6      	b.n	8008650 <lv_obj_refresh_ext_draw_size+0x10>
 80086a2:	46c0      	nop			; (mov r8, r8)

080086a4 <_lv_obj_get_ext_draw_size>:
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 80086a4:	6883      	ldr	r3, [r0, #8]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <_lv_obj_get_ext_draw_size+0xc>
 80086aa:	2016      	movs	r0, #22
 80086ac:	5e18      	ldrsh	r0, [r3, r0]
}
 80086ae:	4770      	bx	lr
    else return 0;
 80086b0:	2000      	movs	r0, #0
 80086b2:	e7fc      	b.n	80086ae <_lv_obj_get_ext_draw_size+0xa>

080086b4 <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{

    if(obj->spec_attr) return obj->spec_attr->layer_type;
 80086b4:	6883      	ldr	r3, [r0, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <_lv_obj_get_layer_type+0xc>
 80086ba:	7e98      	ldrb	r0, [r3, #26]
 80086bc:	0980      	lsrs	r0, r0, #6
    else return LV_LAYER_TYPE_NONE;
}
 80086be:	4770      	bx	lr
    else return LV_LAYER_TYPE_NONE;
 80086c0:	2000      	movs	r0, #0
 80086c2:	e7fc      	b.n	80086be <_lv_obj_get_layer_type+0xa>

080086c4 <transform_point>:
        }
    }
}

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 80086c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086c6:	46d6      	mov	lr, sl
 80086c8:	4646      	mov	r6, r8
 80086ca:	464f      	mov	r7, r9
 80086cc:	b5c0      	push	{r6, r7, lr}
 80086ce:	4690      	mov	r8, r2
 80086d0:	b082      	sub	sp, #8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 80086d2:	226d      	movs	r2, #109	; 0x6d
 80086d4:	000f      	movs	r7, r1
 80086d6:	2100      	movs	r1, #0
 80086d8:	0004      	movs	r4, r0
 80086da:	f003 ff73 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80086de:	b203      	sxth	r3, r0
 80086e0:	469a      	mov	sl, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 80086e2:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 80086e4:	226c      	movs	r2, #108	; 0x6c
 80086e6:	2100      	movs	r1, #0
 80086e8:	0020      	movs	r0, r4
 80086ea:	f003 ff6b 	bl	800c5c4 <lv_obj_get_style_prop>
    int16_t angle = lv_obj_get_style_transform_angle(obj, 0);
    int16_t zoom = lv_obj_get_style_transform_zoom(obj, 0);

    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 80086ee:	4653      	mov	r3, sl
    return (lv_coord_t)v.num;
 80086f0:	b205      	sxth	r5, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d103      	bne.n	80086fe <transform_point+0x3a>
 80086f6:	3301      	adds	r3, #1
 80086f8:	33ff      	adds	r3, #255	; 0xff
 80086fa:	429d      	cmp	r5, r3
 80086fc:	d01c      	beq.n	8008738 <transform_point+0x74>

    lv_point_t pivot;
    pivot.x = obj->coords.x1 + lv_obj_get_style_transform_pivot_x(obj, 0);
 80086fe:	8a23      	ldrh	r3, [r4, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 8008700:	226e      	movs	r2, #110	; 0x6e
 8008702:	2100      	movs	r1, #0
 8008704:	0020      	movs	r0, r4
 8008706:	4699      	mov	r9, r3
 8008708:	f003 ff5c 	bl	800c5c4 <lv_obj_get_style_prop>
 800870c:	466b      	mov	r3, sp
 800870e:	4448      	add	r0, r9
 8008710:	8098      	strh	r0, [r3, #4]
    pivot.y = obj->coords.y1 + lv_obj_get_style_transform_pivot_y(obj, 0);
 8008712:	8a63      	ldrh	r3, [r4, #18]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 8008714:	226f      	movs	r2, #111	; 0x6f
 8008716:	2100      	movs	r1, #0
 8008718:	0020      	movs	r0, r4
 800871a:	4699      	mov	r9, r3
 800871c:	f003 ff52 	bl	800c5c4 <lv_obj_get_style_prop>
 8008720:	466b      	mov	r3, sp
 8008722:	4448      	add	r0, r9
 8008724:	80d8      	strh	r0, [r3, #6]
    if(inv) {
 8008726:	4643      	mov	r3, r8
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10b      	bne.n	8008744 <transform_point+0x80>
        angle = -angle;
        zoom = (256 * 256) / zoom;
    }

    lv_point_transform(p, angle, zoom, &pivot);
 800872c:	002a      	movs	r2, r5
 800872e:	4651      	mov	r1, sl
 8008730:	0038      	movs	r0, r7
 8008732:	ab01      	add	r3, sp, #4
 8008734:	f00b ff68 	bl	8014608 <lv_point_transform>
}
 8008738:	b002      	add	sp, #8
 800873a:	bce0      	pop	{r5, r6, r7}
 800873c:	46ba      	mov	sl, r7
 800873e:	46b1      	mov	r9, r6
 8008740:	46a8      	mov	r8, r5
 8008742:	bdf0      	pop	{r4, r5, r6, r7, pc}
        zoom = (256 * 256) / zoom;
 8008744:	2080      	movs	r0, #128	; 0x80
        angle = -angle;
 8008746:	4276      	negs	r6, r6
        zoom = (256 * 256) / zoom;
 8008748:	0029      	movs	r1, r5
        angle = -angle;
 800874a:	b233      	sxth	r3, r6
        zoom = (256 * 256) / zoom;
 800874c:	0240      	lsls	r0, r0, #9
        angle = -angle;
 800874e:	469a      	mov	sl, r3
        zoom = (256 * 256) / zoom;
 8008750:	f7f7 fd74 	bl	800023c <__divsi3>
 8008754:	b205      	sxth	r5, r0
 8008756:	e7e9      	b.n	800872c <transform_point+0x68>

08008758 <lv_obj_move_children_by.constprop.0>:
void lv_obj_move_children_by(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff, bool ignore_floating)
 8008758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800875a:	46de      	mov	lr, fp
 800875c:	4645      	mov	r5, r8
 800875e:	4657      	mov	r7, sl
 8008760:	464e      	mov	r6, r9
 8008762:	b5e0      	push	{r5, r6, r7, lr}
 8008764:	b099      	sub	sp, #100	; 0x64
 8008766:	000d      	movs	r5, r1
 8008768:	0014      	movs	r4, r2
 800876a:	9015      	str	r0, [sp, #84]	; 0x54
 800876c:	9116      	str	r1, [sp, #88]	; 0x58
 800876e:	9217      	str	r2, [sp, #92]	; 0x5c
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008770:	f005 fb6a 	bl	800de48 <lv_obj_get_child_cnt>
 8008774:	900e      	str	r0, [sp, #56]	; 0x38
    for(i = 0; i < child_cnt; i++) {
 8008776:	2800      	cmp	r0, #0
 8008778:	d100      	bne.n	800877c <lv_obj_move_children_by.constprop.0+0x24>
 800877a:	e144      	b.n	8008a06 <lv_obj_move_children_by.constprop.0+0x2ae>
        child->coords.x1 += x_diff;
 800877c:	b2ab      	uxth	r3, r5
 800877e:	4698      	mov	r8, r3
    for(i = 0; i < child_cnt; i++) {
 8008780:	2300      	movs	r3, #0
        child->coords.y1 += y_diff;
 8008782:	b2a7      	uxth	r7, r4
    for(i = 0; i < child_cnt; i++) {
 8008784:	9309      	str	r3, [sp, #36]	; 0x24
 8008786:	003b      	movs	r3, r7
 8008788:	4647      	mov	r7, r8
 800878a:	4698      	mov	r8, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 800878c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800878e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	0092      	lsls	r2, r2, #2
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	58d2      	ldr	r2, [r2, r3]
 8008798:	920f      	str	r2, [sp, #60]	; 0x3c
        child->coords.x1 += x_diff;
 800879a:	8a13      	ldrh	r3, [r2, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800879c:	0010      	movs	r0, r2
        child->coords.x1 += x_diff;
 800879e:	18fb      	adds	r3, r7, r3
 80087a0:	8213      	strh	r3, [r2, #16]
        child->coords.y1 += y_diff;
 80087a2:	8a53      	ldrh	r3, [r2, #18]
 80087a4:	4443      	add	r3, r8
 80087a6:	8253      	strh	r3, [r2, #18]
        child->coords.x2 += x_diff;
 80087a8:	8a93      	ldrh	r3, [r2, #20]
 80087aa:	18fb      	adds	r3, r7, r3
 80087ac:	8293      	strh	r3, [r2, #20]
        child->coords.y2 += y_diff;
 80087ae:	8ad3      	ldrh	r3, [r2, #22]
 80087b0:	4443      	add	r3, r8
 80087b2:	82d3      	strh	r3, [r2, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80087b4:	f005 fb48 	bl	800de48 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80087b8:	2300      	movs	r3, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80087ba:	9010      	str	r0, [sp, #64]	; 0x40
    for(i = 0; i < child_cnt; i++) {
 80087bc:	930a      	str	r3, [sp, #40]	; 0x28
 80087be:	2800      	cmp	r0, #0
 80087c0:	d100      	bne.n	80087c4 <lv_obj_move_children_by.constprop.0+0x6c>
 80087c2:	e119      	b.n	80089f8 <lv_obj_move_children_by.constprop.0+0x2a0>
        lv_obj_t * child = obj->spec_attr->children[i];
 80087c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	0092      	lsls	r2, r2, #2
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	46c3      	mov	fp, r8
 80087d0:	58d2      	ldr	r2, [r2, r3]
 80087d2:	9211      	str	r2, [sp, #68]	; 0x44
        child->coords.x1 += x_diff;
 80087d4:	8a13      	ldrh	r3, [r2, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80087d6:	0010      	movs	r0, r2
        child->coords.x1 += x_diff;
 80087d8:	18fb      	adds	r3, r7, r3
 80087da:	8213      	strh	r3, [r2, #16]
        child->coords.y1 += y_diff;
 80087dc:	8a53      	ldrh	r3, [r2, #18]
 80087de:	4443      	add	r3, r8
 80087e0:	8253      	strh	r3, [r2, #18]
        child->coords.x2 += x_diff;
 80087e2:	8a93      	ldrh	r3, [r2, #20]
 80087e4:	18fb      	adds	r3, r7, r3
 80087e6:	8293      	strh	r3, [r2, #20]
        child->coords.y2 += y_diff;
 80087e8:	8ad3      	ldrh	r3, [r2, #22]
 80087ea:	4443      	add	r3, r8
 80087ec:	82d3      	strh	r3, [r2, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80087ee:	f005 fb2b 	bl	800de48 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80087f2:	2300      	movs	r3, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80087f4:	9012      	str	r0, [sp, #72]	; 0x48
    for(i = 0; i < child_cnt; i++) {
 80087f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d100      	bne.n	80087fe <lv_obj_move_children_by.constprop.0+0xa6>
 80087fc:	e0f5      	b.n	80089ea <lv_obj_move_children_by.constprop.0+0x292>
        lv_obj_t * child = obj->spec_attr->children[i];
 80087fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008800:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	0092      	lsls	r2, r2, #2
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	46d9      	mov	r9, fp
 800880a:	58d2      	ldr	r2, [r2, r3]
 800880c:	9213      	str	r2, [sp, #76]	; 0x4c
        child->coords.x1 += x_diff;
 800880e:	8a13      	ldrh	r3, [r2, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008810:	0010      	movs	r0, r2
        child->coords.x1 += x_diff;
 8008812:	18fb      	adds	r3, r7, r3
 8008814:	8213      	strh	r3, [r2, #16]
        child->coords.y1 += y_diff;
 8008816:	8a53      	ldrh	r3, [r2, #18]
 8008818:	445b      	add	r3, fp
 800881a:	8253      	strh	r3, [r2, #18]
        child->coords.x2 += x_diff;
 800881c:	8a93      	ldrh	r3, [r2, #20]
 800881e:	18fb      	adds	r3, r7, r3
 8008820:	8293      	strh	r3, [r2, #20]
        child->coords.y2 += y_diff;
 8008822:	8ad3      	ldrh	r3, [r2, #22]
 8008824:	445b      	add	r3, fp
 8008826:	82d3      	strh	r3, [r2, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008828:	f005 fb0e 	bl	800de48 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 800882c:	2300      	movs	r3, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800882e:	9014      	str	r0, [sp, #80]	; 0x50
    for(i = 0; i < child_cnt; i++) {
 8008830:	930c      	str	r3, [sp, #48]	; 0x30
 8008832:	2800      	cmp	r0, #0
 8008834:	d100      	bne.n	8008838 <lv_obj_move_children_by.constprop.0+0xe0>
 8008836:	e0d0      	b.n	80089da <lv_obj_move_children_by.constprop.0+0x282>
        lv_obj_t * child = obj->spec_attr->children[i];
 8008838:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800883a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	0092      	lsls	r2, r2, #2
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	58d3      	ldr	r3, [r2, r3]
 8008844:	4698      	mov	r8, r3
        child->coords.x1 += x_diff;
 8008846:	4642      	mov	r2, r8
 8008848:	8a1b      	ldrh	r3, [r3, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800884a:	4640      	mov	r0, r8
        child->coords.x1 += x_diff;
 800884c:	18fb      	adds	r3, r7, r3
 800884e:	8213      	strh	r3, [r2, #16]
        child->coords.y1 += y_diff;
 8008850:	8a53      	ldrh	r3, [r2, #18]
 8008852:	444b      	add	r3, r9
 8008854:	8253      	strh	r3, [r2, #18]
        child->coords.x2 += x_diff;
 8008856:	8a93      	ldrh	r3, [r2, #20]
 8008858:	18fb      	adds	r3, r7, r3
 800885a:	8293      	strh	r3, [r2, #20]
        child->coords.y2 += y_diff;
 800885c:	8ad3      	ldrh	r3, [r2, #22]
 800885e:	444b      	add	r3, r9
 8008860:	82d3      	strh	r3, [r2, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008862:	f005 faf1 	bl	800de48 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8008866:	2300      	movs	r3, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008868:	9005      	str	r0, [sp, #20]
    for(i = 0; i < child_cnt; i++) {
 800886a:	469b      	mov	fp, r3
 800886c:	2800      	cmp	r0, #0
 800886e:	d100      	bne.n	8008872 <lv_obj_move_children_by.constprop.0+0x11a>
 8008870:	e0ab      	b.n	80089ca <lv_obj_move_children_by.constprop.0+0x272>
 8008872:	003b      	movs	r3, r7
 8008874:	46ca      	mov	sl, r9
 8008876:	465f      	mov	r7, fp
 8008878:	46c1      	mov	r9, r8
 800887a:	469b      	mov	fp, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 800887c:	464b      	mov	r3, r9
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	00ba      	lsls	r2, r7, #2
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	58d6      	ldr	r6, [r2, r3]
        child->coords.x1 += x_diff;
 8008886:	8a33      	ldrh	r3, [r6, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008888:	0030      	movs	r0, r6
        child->coords.x1 += x_diff;
 800888a:	445b      	add	r3, fp
 800888c:	8233      	strh	r3, [r6, #16]
        child->coords.y1 += y_diff;
 800888e:	8a73      	ldrh	r3, [r6, #18]
 8008890:	4453      	add	r3, sl
 8008892:	8273      	strh	r3, [r6, #18]
        child->coords.x2 += x_diff;
 8008894:	8ab3      	ldrh	r3, [r6, #20]
 8008896:	445b      	add	r3, fp
 8008898:	82b3      	strh	r3, [r6, #20]
        child->coords.y2 += y_diff;
 800889a:	8af3      	ldrh	r3, [r6, #22]
 800889c:	4453      	add	r3, sl
 800889e:	82f3      	strh	r3, [r6, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80088a0:	f005 fad2 	bl	800de48 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80088a4:	2300      	movs	r3, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80088a6:	9003      	str	r0, [sp, #12]
    for(i = 0; i < child_cnt; i++) {
 80088a8:	9301      	str	r3, [sp, #4]
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d100      	bne.n	80088b0 <lv_obj_move_children_by.constprop.0+0x158>
 80088ae:	e085      	b.n	80089bc <lv_obj_move_children_by.constprop.0+0x264>
 80088b0:	465b      	mov	r3, fp
 80088b2:	46cb      	mov	fp, r9
 80088b4:	46b9      	mov	r9, r7
 80088b6:	001f      	movs	r7, r3
 80088b8:	9608      	str	r6, [sp, #32]
        lv_obj_t * child = obj->spec_attr->children[i];
 80088ba:	9b08      	ldr	r3, [sp, #32]
 80088bc:	9a01      	ldr	r2, [sp, #4]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	0092      	lsls	r2, r2, #2
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	58d6      	ldr	r6, [r2, r3]
        child->coords.x1 += x_diff;
 80088c6:	8a33      	ldrh	r3, [r6, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80088c8:	0030      	movs	r0, r6
        child->coords.x1 += x_diff;
 80088ca:	18fb      	adds	r3, r7, r3
 80088cc:	8233      	strh	r3, [r6, #16]
        child->coords.y1 += y_diff;
 80088ce:	8a73      	ldrh	r3, [r6, #18]
 80088d0:	46b0      	mov	r8, r6
 80088d2:	4453      	add	r3, sl
 80088d4:	8273      	strh	r3, [r6, #18]
        child->coords.x2 += x_diff;
 80088d6:	8ab3      	ldrh	r3, [r6, #20]
 80088d8:	18fb      	adds	r3, r7, r3
 80088da:	82b3      	strh	r3, [r6, #20]
        child->coords.y2 += y_diff;
 80088dc:	8af3      	ldrh	r3, [r6, #22]
 80088de:	4453      	add	r3, sl
 80088e0:	82f3      	strh	r3, [r6, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80088e2:	f005 fab1 	bl	800de48 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80088e6:	2300      	movs	r3, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80088e8:	900d      	str	r0, [sp, #52]	; 0x34
    for(i = 0; i < child_cnt; i++) {
 80088ea:	9304      	str	r3, [sp, #16]
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d05a      	beq.n	80089a6 <lv_obj_move_children_by.constprop.0+0x24e>
        lv_obj_t * child = obj->spec_attr->children[i];
 80088f0:	4643      	mov	r3, r8
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	9a04      	ldr	r2, [sp, #16]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	0092      	lsls	r2, r2, #2
 80088fa:	58d6      	ldr	r6, [r2, r3]
    for(i = 0; i < child_cnt; i++) {
 80088fc:	2500      	movs	r5, #0
        child->coords.x1 += x_diff;
 80088fe:	8a33      	ldrh	r3, [r6, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008900:	0030      	movs	r0, r6
        child->coords.x1 += x_diff;
 8008902:	18fb      	adds	r3, r7, r3
 8008904:	8233      	strh	r3, [r6, #16]
        child->coords.y1 += y_diff;
 8008906:	8a73      	ldrh	r3, [r6, #18]
 8008908:	4453      	add	r3, sl
 800890a:	8273      	strh	r3, [r6, #18]
        child->coords.x2 += x_diff;
 800890c:	8ab3      	ldrh	r3, [r6, #20]
 800890e:	18fb      	adds	r3, r7, r3
 8008910:	82b3      	strh	r3, [r6, #20]
        child->coords.y2 += y_diff;
 8008912:	8af3      	ldrh	r3, [r6, #22]
 8008914:	4453      	add	r3, sl
 8008916:	82f3      	strh	r3, [r6, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008918:	f005 fa96 	bl	800de48 <lv_obj_get_child_cnt>
 800891c:	9006      	str	r0, [sp, #24]
    for(i = 0; i < child_cnt; i++) {
 800891e:	2800      	cmp	r0, #0
 8008920:	d03b      	beq.n	800899a <lv_obj_move_children_by.constprop.0+0x242>
 8008922:	4653      	mov	r3, sl
 8008924:	46b2      	mov	sl, r6
 8008926:	001e      	movs	r6, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 8008928:	4653      	mov	r3, sl
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	00aa      	lsls	r2, r5, #2
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	58d4      	ldr	r4, [r2, r3]
        child->coords.x1 += x_diff;
 8008932:	8a23      	ldrh	r3, [r4, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008934:	0020      	movs	r0, r4
        child->coords.x1 += x_diff;
 8008936:	18fb      	adds	r3, r7, r3
 8008938:	8223      	strh	r3, [r4, #16]
        child->coords.y1 += y_diff;
 800893a:	8a63      	ldrh	r3, [r4, #18]
 800893c:	18f3      	adds	r3, r6, r3
 800893e:	8263      	strh	r3, [r4, #18]
        child->coords.x2 += x_diff;
 8008940:	8aa3      	ldrh	r3, [r4, #20]
 8008942:	18fb      	adds	r3, r7, r3
 8008944:	82a3      	strh	r3, [r4, #20]
        child->coords.y2 += y_diff;
 8008946:	8ae3      	ldrh	r3, [r4, #22]
 8008948:	18f3      	adds	r3, r6, r3
 800894a:	82e3      	strh	r3, [r4, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800894c:	f005 fa7c 	bl	800de48 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8008950:	2300      	movs	r3, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008952:	9007      	str	r0, [sp, #28]
    for(i = 0; i < child_cnt; i++) {
 8008954:	9302      	str	r3, [sp, #8]
 8008956:	2800      	cmp	r0, #0
 8008958:	d01a      	beq.n	8008990 <lv_obj_move_children_by.constprop.0+0x238>
        lv_obj_t * child = obj->spec_attr->children[i];
 800895a:	68a3      	ldr	r3, [r4, #8]
 800895c:	9a02      	ldr	r2, [sp, #8]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	0092      	lsls	r2, r2, #2
 8008962:	58d0      	ldr	r0, [r2, r3]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8008964:	9916      	ldr	r1, [sp, #88]	; 0x58
        child->coords.x1 += x_diff;
 8008966:	8a03      	ldrh	r3, [r0, #16]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8008968:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        child->coords.x1 += x_diff;
 800896a:	18fb      	adds	r3, r7, r3
 800896c:	8203      	strh	r3, [r0, #16]
        child->coords.y1 += y_diff;
 800896e:	8a43      	ldrh	r3, [r0, #18]
 8008970:	18f3      	adds	r3, r6, r3
 8008972:	8243      	strh	r3, [r0, #18]
        child->coords.x2 += x_diff;
 8008974:	8a83      	ldrh	r3, [r0, #20]
 8008976:	18fb      	adds	r3, r7, r3
 8008978:	8283      	strh	r3, [r0, #20]
        child->coords.y2 += y_diff;
 800897a:	8ac3      	ldrh	r3, [r0, #22]
 800897c:	18f3      	adds	r3, r6, r3
 800897e:	82c3      	strh	r3, [r0, #22]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8008980:	f7ff feea 	bl	8008758 <lv_obj_move_children_by.constprop.0>
    for(i = 0; i < child_cnt; i++) {
 8008984:	9a02      	ldr	r2, [sp, #8]
 8008986:	1c53      	adds	r3, r2, #1
 8008988:	9a07      	ldr	r2, [sp, #28]
 800898a:	9302      	str	r3, [sp, #8]
 800898c:	429a      	cmp	r2, r3
 800898e:	d1e4      	bne.n	800895a <lv_obj_move_children_by.constprop.0+0x202>
 8008990:	9b06      	ldr	r3, [sp, #24]
 8008992:	3501      	adds	r5, #1
 8008994:	42ab      	cmp	r3, r5
 8008996:	d1c7      	bne.n	8008928 <lv_obj_move_children_by.constprop.0+0x1d0>
 8008998:	46b2      	mov	sl, r6
 800899a:	9b04      	ldr	r3, [sp, #16]
 800899c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800899e:	3301      	adds	r3, #1
 80089a0:	9304      	str	r3, [sp, #16]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d1a4      	bne.n	80088f0 <lv_obj_move_children_by.constprop.0+0x198>
 80089a6:	9b01      	ldr	r3, [sp, #4]
 80089a8:	9a03      	ldr	r2, [sp, #12]
 80089aa:	3301      	adds	r3, #1
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d000      	beq.n	80089b4 <lv_obj_move_children_by.constprop.0+0x25c>
 80089b2:	e782      	b.n	80088ba <lv_obj_move_children_by.constprop.0+0x162>
 80089b4:	003b      	movs	r3, r7
 80089b6:	464f      	mov	r7, r9
 80089b8:	46d9      	mov	r9, fp
 80089ba:	469b      	mov	fp, r3
 80089bc:	9b05      	ldr	r3, [sp, #20]
 80089be:	3701      	adds	r7, #1
 80089c0:	42bb      	cmp	r3, r7
 80089c2:	d000      	beq.n	80089c6 <lv_obj_move_children_by.constprop.0+0x26e>
 80089c4:	e75a      	b.n	800887c <lv_obj_move_children_by.constprop.0+0x124>
 80089c6:	465f      	mov	r7, fp
 80089c8:	46d1      	mov	r9, sl
 80089ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80089ce:	3301      	adds	r3, #1
 80089d0:	930c      	str	r3, [sp, #48]	; 0x30
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d000      	beq.n	80089d8 <lv_obj_move_children_by.constprop.0+0x280>
 80089d6:	e72f      	b.n	8008838 <lv_obj_move_children_by.constprop.0+0xe0>
 80089d8:	46cb      	mov	fp, r9
 80089da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089de:	3301      	adds	r3, #1
 80089e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d000      	beq.n	80089e8 <lv_obj_move_children_by.constprop.0+0x290>
 80089e6:	e70a      	b.n	80087fe <lv_obj_move_children_by.constprop.0+0xa6>
 80089e8:	46d8      	mov	r8, fp
 80089ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80089ee:	3301      	adds	r3, #1
 80089f0:	930a      	str	r3, [sp, #40]	; 0x28
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d000      	beq.n	80089f8 <lv_obj_move_children_by.constprop.0+0x2a0>
 80089f6:	e6e5      	b.n	80087c4 <lv_obj_move_children_by.constprop.0+0x6c>
 80089f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089fc:	3301      	adds	r3, #1
 80089fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d000      	beq.n	8008a06 <lv_obj_move_children_by.constprop.0+0x2ae>
 8008a04:	e6c2      	b.n	800878c <lv_obj_move_children_by.constprop.0+0x34>
}
 8008a06:	b019      	add	sp, #100	; 0x64
 8008a08:	bcf0      	pop	{r4, r5, r6, r7}
 8008a0a:	46bb      	mov	fp, r7
 8008a0c:	46b2      	mov	sl, r6
 8008a0e:	46a9      	mov	r9, r5
 8008a10:	46a0      	mov	r8, r4
 8008a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a14 <lv_obj_set_pos>:
{
 8008a14:	b570      	push	{r4, r5, r6, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	000e      	movs	r6, r1
 8008a1a:	0015      	movs	r5, r2
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	2107      	movs	r1, #7
 8008a20:	aa01      	add	r2, sp, #4
{
 8008a22:	0004      	movs	r4, r0
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8008a24:	f004 fc30 	bl	800d288 <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8008a28:	2801      	cmp	r0, #1
 8008a2a:	d017      	beq.n	8008a5c <lv_obj_set_pos+0x48>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d104      	bne.n	8008a3a <lv_obj_set_pos+0x26>
        lv_obj_set_style_x(obj, x, 0);
 8008a30:	2200      	movs	r2, #0
 8008a32:	0031      	movs	r1, r6
 8008a34:	0020      	movs	r0, r4
 8008a36:	f004 fea1 	bl	800d77c <lv_obj_set_style_x>
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	2108      	movs	r1, #8
 8008a3e:	0020      	movs	r0, r4
 8008a40:	aa01      	add	r2, sp, #4
 8008a42:	f004 fc21 	bl	800d288 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8008a46:	2801      	cmp	r0, #1
 8008a48:	d013      	beq.n	8008a72 <lv_obj_set_pos+0x5e>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d104      	bne.n	8008a58 <lv_obj_set_pos+0x44>
        lv_obj_set_style_y(obj, y, 0);
 8008a4e:	2200      	movs	r2, #0
 8008a50:	0029      	movs	r1, r5
 8008a52:	0020      	movs	r0, r4
 8008a54:	f004 fe9a 	bl	800d78c <lv_obj_set_style_y>
}
 8008a58:	b002      	add	sp, #8
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8008a5c:	9b01      	ldr	r3, [sp, #4]
 8008a5e:	42b3      	cmp	r3, r6
 8008a60:	d1e6      	bne.n	8008a30 <lv_obj_set_pos+0x1c>
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8008a62:	2300      	movs	r3, #0
 8008a64:	2108      	movs	r1, #8
 8008a66:	0020      	movs	r0, r4
 8008a68:	aa01      	add	r2, sp, #4
 8008a6a:	f004 fc0d 	bl	800d288 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8008a6e:	2801      	cmp	r0, #1
 8008a70:	d1eb      	bne.n	8008a4a <lv_obj_set_pos+0x36>
 8008a72:	9b01      	ldr	r3, [sp, #4]
 8008a74:	42ab      	cmp	r3, r5
 8008a76:	d1ea      	bne.n	8008a4e <lv_obj_set_pos+0x3a>
 8008a78:	e7ee      	b.n	8008a58 <lv_obj_set_pos+0x44>
 8008a7a:	46c0      	nop			; (mov r8, r8)

08008a7c <lv_obj_set_x>:
{
 8008a7c:	b530      	push	{r4, r5, lr}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	000d      	movs	r5, r1
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8008a82:	2300      	movs	r3, #0
 8008a84:	2107      	movs	r1, #7
 8008a86:	aa01      	add	r2, sp, #4
{
 8008a88:	0004      	movs	r4, r0
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8008a8a:	f004 fbfd 	bl	800d288 <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8008a8e:	2801      	cmp	r0, #1
 8008a90:	d008      	beq.n	8008aa4 <lv_obj_set_x+0x28>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d104      	bne.n	8008aa0 <lv_obj_set_x+0x24>
        lv_obj_set_style_x(obj, x, 0);
 8008a96:	2200      	movs	r2, #0
 8008a98:	0029      	movs	r1, r5
 8008a9a:	0020      	movs	r0, r4
 8008a9c:	f004 fe6e 	bl	800d77c <lv_obj_set_style_x>
}
 8008aa0:	b003      	add	sp, #12
 8008aa2:	bd30      	pop	{r4, r5, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8008aa4:	9b01      	ldr	r3, [sp, #4]
 8008aa6:	42ab      	cmp	r3, r5
 8008aa8:	d1f5      	bne.n	8008a96 <lv_obj_set_x+0x1a>
 8008aaa:	e7f9      	b.n	8008aa0 <lv_obj_set_x+0x24>

08008aac <lv_obj_set_y>:
{
 8008aac:	b530      	push	{r4, r5, lr}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	000d      	movs	r5, r1
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	2108      	movs	r1, #8
 8008ab6:	aa01      	add	r2, sp, #4
{
 8008ab8:	0004      	movs	r4, r0
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8008aba:	f004 fbe5 	bl	800d288 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8008abe:	2801      	cmp	r0, #1
 8008ac0:	d008      	beq.n	8008ad4 <lv_obj_set_y+0x28>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d104      	bne.n	8008ad0 <lv_obj_set_y+0x24>
        lv_obj_set_style_y(obj, y, 0);
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	0029      	movs	r1, r5
 8008aca:	0020      	movs	r0, r4
 8008acc:	f004 fe5e 	bl	800d78c <lv_obj_set_style_y>
}
 8008ad0:	b003      	add	sp, #12
 8008ad2:	bd30      	pop	{r4, r5, pc}
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8008ad4:	9b01      	ldr	r3, [sp, #4]
 8008ad6:	42ab      	cmp	r3, r5
 8008ad8:	d1f5      	bne.n	8008ac6 <lv_obj_set_y+0x1a>
 8008ada:	e7f9      	b.n	8008ad0 <lv_obj_set_y+0x24>

08008adc <lv_obj_set_width>:
{
 8008adc:	b530      	push	{r4, r5, lr}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	000d      	movs	r5, r1
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	aa01      	add	r2, sp, #4
{
 8008ae8:	0004      	movs	r4, r0
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 8008aea:	f004 fbcd 	bl	800d288 <lv_obj_get_local_style_prop>
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 8008aee:	2801      	cmp	r0, #1
 8008af0:	d008      	beq.n	8008b04 <lv_obj_set_width+0x28>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d104      	bne.n	8008b00 <lv_obj_set_width+0x24>
        lv_obj_set_style_width(obj, w, 0);
 8008af6:	2200      	movs	r2, #0
 8008af8:	0029      	movs	r1, r5
 8008afa:	0020      	movs	r0, r4
 8008afc:	f004 fe2e 	bl	800d75c <lv_obj_set_style_width>
}
 8008b00:	b003      	add	sp, #12
 8008b02:	bd30      	pop	{r4, r5, pc}
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 8008b04:	9b01      	ldr	r3, [sp, #4]
 8008b06:	42ab      	cmp	r3, r5
 8008b08:	d1f5      	bne.n	8008af6 <lv_obj_set_width+0x1a>
 8008b0a:	e7f9      	b.n	8008b00 <lv_obj_set_width+0x24>

08008b0c <lv_obj_set_height>:
{
 8008b0c:	b530      	push	{r4, r5, lr}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	000d      	movs	r5, r1
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8008b12:	2300      	movs	r3, #0
 8008b14:	2104      	movs	r1, #4
 8008b16:	aa01      	add	r2, sp, #4
{
 8008b18:	0004      	movs	r4, r0
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8008b1a:	f004 fbb5 	bl	800d288 <lv_obj_get_local_style_prop>
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8008b1e:	2801      	cmp	r0, #1
 8008b20:	d008      	beq.n	8008b34 <lv_obj_set_height+0x28>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d104      	bne.n	8008b30 <lv_obj_set_height+0x24>
        lv_obj_set_style_height(obj, h, 0);
 8008b26:	2200      	movs	r2, #0
 8008b28:	0029      	movs	r1, r5
 8008b2a:	0020      	movs	r0, r4
 8008b2c:	f004 fe1e 	bl	800d76c <lv_obj_set_style_height>
}
 8008b30:	b003      	add	sp, #12
 8008b32:	bd30      	pop	{r4, r5, pc}
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8008b34:	9b01      	ldr	r3, [sp, #4]
 8008b36:	42ab      	cmp	r3, r5
 8008b38:	d1f5      	bne.n	8008b26 <lv_obj_set_height+0x1a>
 8008b3a:	e7f9      	b.n	8008b30 <lv_obj_set_height+0x24>

08008b3c <lv_obj_is_layout_positioned>:
{
 8008b3c:	b510      	push	{r4, lr}
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8008b3e:	490b      	ldr	r1, [pc, #44]	; (8008b6c <lv_obj_is_layout_positioned+0x30>)
{
 8008b40:	0004      	movs	r4, r0
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8008b42:	f7ff f9ef 	bl	8007f24 <lv_obj_has_flag_any>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d001      	beq.n	8008b4e <lv_obj_is_layout_positioned+0x12>
 8008b4a:	2000      	movs	r0, #0
}
 8008b4c:	bd10      	pop	{r4, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008b4e:	0020      	movs	r0, r4
 8008b50:	f005 f964 	bl	800de1c <lv_obj_get_parent>
    if(parent == NULL) return false;
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d0f8      	beq.n	8008b4a <lv_obj_is_layout_positioned+0xe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8008b58:	220a      	movs	r2, #10
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	f003 fd32 	bl	800c5c4 <lv_obj_get_style_prop>
    if(layout) return true;
 8008b60:	0400      	lsls	r0, r0, #16
 8008b62:	1e43      	subs	r3, r0, #1
 8008b64:	4198      	sbcs	r0, r3
 8008b66:	b2c0      	uxtb	r0, r0
 8008b68:	e7f0      	b.n	8008b4c <lv_obj_is_layout_positioned+0x10>
 8008b6a:	46c0      	nop			; (mov r8, r8)
 8008b6c:	00060001 	.word	0x00060001

08008b70 <lv_obj_mark_layout_as_dirty>:
    obj->layout_inv = 1;
 8008b70:	2201      	movs	r2, #1
 8008b72:	7f83      	ldrb	r3, [r0, #30]
{
 8008b74:	b510      	push	{r4, lr}
    obj->layout_inv = 1;
 8008b76:	4313      	orrs	r3, r2
 8008b78:	7783      	strb	r3, [r0, #30]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8008b7a:	f005 f91f 	bl	800ddbc <lv_obj_get_screen>
    scr->scr_layout_inv = 1;
 8008b7e:	2202      	movs	r2, #2
 8008b80:	7f83      	ldrb	r3, [r0, #30]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	7783      	strb	r3, [r0, #30]
    lv_disp_t * disp = lv_obj_get_disp(scr);
 8008b86:	f005 f921 	bl	800ddcc <lv_obj_get_disp>
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8008b8a:	6840      	ldr	r0, [r0, #4]
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d001      	beq.n	8008b94 <lv_obj_mark_layout_as_dirty+0x24>
 8008b90:	f00d f908 	bl	8015da4 <lv_timer_resume>
}
 8008b94:	bd10      	pop	{r4, pc}
 8008b96:	46c0      	nop			; (mov r8, r8)

08008b98 <lv_obj_set_align>:
{
 8008b98:	b510      	push	{r4, lr}
    lv_obj_set_style_align(obj, align, 0);
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f004 fdfe 	bl	800d79c <lv_obj_set_style_align>
}
 8008ba0:	bd10      	pop	{r4, pc}
 8008ba2:	46c0      	nop			; (mov r8, r8)

08008ba4 <lv_obj_align>:
{
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	0004      	movs	r4, r0
 8008ba8:	b082      	sub	sp, #8
 8008baa:	0016      	movs	r6, r2
    lv_obj_set_style_align(obj, align, 0);
 8008bac:	2200      	movs	r2, #0
{
 8008bae:	001d      	movs	r5, r3
    lv_obj_set_style_align(obj, align, 0);
 8008bb0:	f004 fdf4 	bl	800d79c <lv_obj_set_style_align>
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	2107      	movs	r1, #7
 8008bb8:	0020      	movs	r0, r4
 8008bba:	aa01      	add	r2, sp, #4
 8008bbc:	f004 fb64 	bl	800d288 <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8008bc0:	2801      	cmp	r0, #1
 8008bc2:	d017      	beq.n	8008bf4 <lv_obj_align+0x50>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d104      	bne.n	8008bd2 <lv_obj_align+0x2e>
        lv_obj_set_style_x(obj, x, 0);
 8008bc8:	2200      	movs	r2, #0
 8008bca:	0031      	movs	r1, r6
 8008bcc:	0020      	movs	r0, r4
 8008bce:	f004 fdd5 	bl	800d77c <lv_obj_set_style_x>
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2108      	movs	r1, #8
 8008bd6:	0020      	movs	r0, r4
 8008bd8:	aa01      	add	r2, sp, #4
 8008bda:	f004 fb55 	bl	800d288 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8008bde:	2801      	cmp	r0, #1
 8008be0:	d013      	beq.n	8008c0a <lv_obj_align+0x66>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d104      	bne.n	8008bf0 <lv_obj_align+0x4c>
        lv_obj_set_style_y(obj, y, 0);
 8008be6:	2200      	movs	r2, #0
 8008be8:	0029      	movs	r1, r5
 8008bea:	0020      	movs	r0, r4
 8008bec:	f004 fdce 	bl	800d78c <lv_obj_set_style_y>
}
 8008bf0:	b002      	add	sp, #8
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8008bf4:	9b01      	ldr	r3, [sp, #4]
 8008bf6:	42b3      	cmp	r3, r6
 8008bf8:	d1e6      	bne.n	8008bc8 <lv_obj_align+0x24>
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	2108      	movs	r1, #8
 8008bfe:	0020      	movs	r0, r4
 8008c00:	aa01      	add	r2, sp, #4
 8008c02:	f004 fb41 	bl	800d288 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8008c06:	2801      	cmp	r0, #1
 8008c08:	d1eb      	bne.n	8008be2 <lv_obj_align+0x3e>
 8008c0a:	9b01      	ldr	r3, [sp, #4]
 8008c0c:	42ab      	cmp	r3, r5
 8008c0e:	d1ea      	bne.n	8008be6 <lv_obj_align+0x42>
 8008c10:	e7ee      	b.n	8008bf0 <lv_obj_align+0x4c>
 8008c12:	46c0      	nop			; (mov r8, r8)

08008c14 <lv_obj_get_coords>:
    dest->x1 = src->x1;
 8008c14:	2210      	movs	r2, #16
 8008c16:	5e83      	ldrsh	r3, [r0, r2]
 8008c18:	800b      	strh	r3, [r1, #0]
    dest->y1 = src->y1;
 8008c1a:	2212      	movs	r2, #18
 8008c1c:	5e83      	ldrsh	r3, [r0, r2]
 8008c1e:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
 8008c20:	2214      	movs	r2, #20
 8008c22:	5e83      	ldrsh	r3, [r0, r2]
 8008c24:	808b      	strh	r3, [r1, #4]
    dest->y2 = src->y2;
 8008c26:	2216      	movs	r2, #22
 8008c28:	5e83      	ldrsh	r3, [r0, r2]
 8008c2a:	80cb      	strh	r3, [r1, #6]
}
 8008c2c:	4770      	bx	lr
 8008c2e:	46c0      	nop			; (mov r8, r8)

08008c30 <lv_obj_get_y>:
{
 8008c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c32:	46c6      	mov	lr, r8
 8008c34:	b500      	push	{lr}
 8008c36:	0004      	movs	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008c38:	f005 f8f0 	bl	800de1c <lv_obj_get_parent>
 8008c3c:	1e05      	subs	r5, r0, #0
    if(parent) {
 8008c3e:	d019      	beq.n	8008c74 <lv_obj_get_y+0x44>
        rel_y = obj->coords.y1 - parent->coords.y1;
 8008c40:	8a43      	ldrh	r3, [r0, #18]
 8008c42:	8a64      	ldrh	r4, [r4, #18]
 8008c44:	4698      	mov	r8, r3
        rel_y += lv_obj_get_scroll_y(parent);
 8008c46:	f001 ffa9 	bl	800ab9c <lv_obj_get_scroll_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008c4a:	2210      	movs	r2, #16
 8008c4c:	0007      	movs	r7, r0
 8008c4e:	2100      	movs	r1, #0
 8008c50:	0028      	movs	r0, r5
 8008c52:	f003 fcb7 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008c56:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008c58:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	0028      	movs	r0, r5
 8008c5e:	f003 fcb1 	bl	800c5c4 <lv_obj_get_style_prop>
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8008c62:	4643      	mov	r3, r8
 8008c64:	1836      	adds	r6, r6, r0
 8008c66:	1ba4      	subs	r4, r4, r6
 8008c68:	1ae0      	subs	r0, r4, r3
 8008c6a:	19c0      	adds	r0, r0, r7
 8008c6c:	b200      	sxth	r0, r0
}
 8008c6e:	bc80      	pop	{r7}
 8008c70:	46b8      	mov	r8, r7
 8008c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rel_y = obj->coords.y1;
 8008c74:	2312      	movs	r3, #18
 8008c76:	5ee0      	ldrsh	r0, [r4, r3]
 8008c78:	e7f9      	b.n	8008c6e <lv_obj_get_y+0x3e>
 8008c7a:	46c0      	nop			; (mov r8, r8)

08008c7c <lv_obj_get_y2>:
{
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	46ce      	mov	lr, r9
 8008c80:	4647      	mov	r7, r8
 8008c82:	b580      	push	{r7, lr}
 8008c84:	0005      	movs	r5, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008c86:	f005 f8c9 	bl	800de1c <lv_obj_get_parent>
 8008c8a:	1e06      	subs	r6, r0, #0
    if(parent) {
 8008c8c:	d020      	beq.n	8008cd0 <lv_obj_get_y2+0x54>
        rel_y = obj->coords.y1 - parent->coords.y1;
 8008c8e:	8a43      	ldrh	r3, [r0, #18]
 8008c90:	8a6c      	ldrh	r4, [r5, #18]
 8008c92:	4699      	mov	r9, r3
        rel_y += lv_obj_get_scroll_y(parent);
 8008c94:	f001 ff82 	bl	800ab9c <lv_obj_get_scroll_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008c98:	2210      	movs	r2, #16
 8008c9a:	4680      	mov	r8, r0
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	0030      	movs	r0, r6
 8008ca0:	f003 fc90 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008ca4:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008ca6:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008ca8:	2100      	movs	r1, #0
 8008caa:	0030      	movs	r0, r6
 8008cac:	f003 fc8a 	bl	800c5c4 <lv_obj_get_style_prop>
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8008cb0:	464a      	mov	r2, r9
 8008cb2:	183f      	adds	r7, r7, r0
 8008cb4:	1be3      	subs	r3, r4, r7
 8008cb6:	1a9b      	subs	r3, r3, r2
 8008cb8:	4443      	add	r3, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008cba:	8a6a      	ldrh	r2, [r5, #18]
 8008cbc:	b29b      	uxth	r3, r3
    return lv_obj_get_y(obj) + lv_obj_get_height(obj);
 8008cbe:	8ae8      	ldrh	r0, [r5, #22]
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	1818      	adds	r0, r3, r0
 8008cc4:	1a80      	subs	r0, r0, r2
 8008cc6:	b200      	sxth	r0, r0
}
 8008cc8:	bcc0      	pop	{r6, r7}
 8008cca:	46b9      	mov	r9, r7
 8008ccc:	46b0      	mov	r8, r6
 8008cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return lv_obj_get_y(obj) + lv_obj_get_height(obj);
 8008cd0:	8a6b      	ldrh	r3, [r5, #18]
 8008cd2:	001a      	movs	r2, r3
 8008cd4:	e7f3      	b.n	8008cbe <lv_obj_get_y2+0x42>
 8008cd6:	46c0      	nop			; (mov r8, r8)

08008cd8 <lv_obj_get_width>:
{
 8008cd8:	0003      	movs	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008cda:	8a80      	ldrh	r0, [r0, #20]
 8008cdc:	8a1b      	ldrh	r3, [r3, #16]
 8008cde:	3001      	adds	r0, #1
 8008ce0:	1ac0      	subs	r0, r0, r3
    return lv_area_get_width(&obj->coords);
 8008ce2:	b200      	sxth	r0, r0
}
 8008ce4:	4770      	bx	lr
 8008ce6:	46c0      	nop			; (mov r8, r8)

08008ce8 <lv_obj_get_height>:
{
 8008ce8:	0003      	movs	r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008cea:	8ac0      	ldrh	r0, [r0, #22]
 8008cec:	8a5b      	ldrh	r3, [r3, #18]
 8008cee:	3001      	adds	r0, #1
 8008cf0:	1ac0      	subs	r0, r0, r3
    return lv_area_get_height(&obj->coords);
 8008cf2:	b200      	sxth	r0, r0
}
 8008cf4:	4770      	bx	lr
 8008cf6:	46c0      	nop			; (mov r8, r8)

08008cf8 <lv_obj_get_content_width>:
{
 8008cf8:	b570      	push	{r4, r5, r6, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8008cfa:	2212      	movs	r2, #18
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	0004      	movs	r4, r0
 8008d00:	f003 fc60 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8008d04:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8008d06:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8008d08:	2100      	movs	r1, #0
 8008d0a:	0020      	movs	r0, r4
 8008d0c:	f003 fc5a 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008d10:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8008d12:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008d14:	2100      	movs	r1, #0
 8008d16:	0020      	movs	r0, r4
 8008d18:	f003 fc54 	bl	800c5c4 <lv_obj_get_style_prop>
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	19ad      	adds	r5, r5, r6
 8008d20:	1b5b      	subs	r3, r3, r5
 8008d22:	0040      	lsls	r0, r0, #1
 8008d24:	1a18      	subs	r0, r3, r0
 8008d26:	8aa3      	ldrh	r3, [r4, #20]
 8008d28:	18c3      	adds	r3, r0, r3
 8008d2a:	8a20      	ldrh	r0, [r4, #16]
 8008d2c:	1a18      	subs	r0, r3, r0
 8008d2e:	b200      	sxth	r0, r0
}
 8008d30:	bd70      	pop	{r4, r5, r6, pc}
 8008d32:	46c0      	nop			; (mov r8, r8)

08008d34 <lv_obj_get_content_height>:
{
 8008d34:	b570      	push	{r4, r5, r6, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008d36:	2210      	movs	r2, #16
 8008d38:	2100      	movs	r1, #0
 8008d3a:	0004      	movs	r4, r0
 8008d3c:	f003 fc42 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8008d40:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008d42:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8008d44:	2100      	movs	r1, #0
 8008d46:	0020      	movs	r0, r4
 8008d48:	f003 fc3c 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008d4c:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8008d4e:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008d50:	2100      	movs	r1, #0
 8008d52:	0020      	movs	r0, r4
 8008d54:	f003 fc36 	bl	800c5c4 <lv_obj_get_style_prop>
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	19ad      	adds	r5, r5, r6
 8008d5c:	1b5b      	subs	r3, r3, r5
 8008d5e:	0040      	lsls	r0, r0, #1
 8008d60:	1a18      	subs	r0, r3, r0
 8008d62:	8ae3      	ldrh	r3, [r4, #22]
 8008d64:	18c3      	adds	r3, r0, r3
 8008d66:	8a60      	ldrh	r0, [r4, #18]
 8008d68:	1a18      	subs	r0, r3, r0
 8008d6a:	b200      	sxth	r0, r0
}
 8008d6c:	bd70      	pop	{r4, r5, r6, pc}
 8008d6e:	46c0      	nop			; (mov r8, r8)

08008d70 <lv_obj_get_content_coords>:
{
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	0005      	movs	r5, r0
 8008d74:	000c      	movs	r4, r1
 8008d76:	2232      	movs	r2, #50	; 0x32
 8008d78:	2100      	movs	r1, #0
 8008d7a:	f003 fc23 	bl	800c5c4 <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 8008d7e:	2210      	movs	r2, #16
 8008d80:	5eab      	ldrsh	r3, [r5, r2]
    lv_area_increase(area, -border_width, -border_width);
 8008d82:	4241      	negs	r1, r0
 8008d84:	8023      	strh	r3, [r4, #0]
    dest->y1 = src->y1;
 8008d86:	2212      	movs	r2, #18
 8008d88:	5eab      	ldrsh	r3, [r5, r2]
 8008d8a:	b209      	sxth	r1, r1
 8008d8c:	8063      	strh	r3, [r4, #2]
    dest->x2 = src->x2;
 8008d8e:	2214      	movs	r2, #20
 8008d90:	5eab      	ldrsh	r3, [r5, r2]
 8008d92:	0020      	movs	r0, r4
 8008d94:	80a3      	strh	r3, [r4, #4]
    dest->y2 = src->y2;
 8008d96:	2216      	movs	r2, #22
 8008d98:	5eab      	ldrsh	r3, [r5, r2]
 8008d9a:	000a      	movs	r2, r1
 8008d9c:	80e3      	strh	r3, [r4, #6]
 8008d9e:	f00b fa3f 	bl	8014220 <lv_area_increase>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8008da2:	0028      	movs	r0, r5
 8008da4:	2212      	movs	r2, #18
 8008da6:	2100      	movs	r1, #0
 8008da8:	f003 fc0c 	bl	800c5c4 <lv_obj_get_style_prop>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8008dac:	8823      	ldrh	r3, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8008dae:	2213      	movs	r2, #19
 8008db0:	181b      	adds	r3, r3, r0
 8008db2:	8023      	strh	r3, [r4, #0]
 8008db4:	0028      	movs	r0, r5
 8008db6:	2100      	movs	r1, #0
 8008db8:	f003 fc04 	bl	800c5c4 <lv_obj_get_style_prop>
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8008dbc:	88a3      	ldrh	r3, [r4, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008dbe:	2210      	movs	r2, #16
 8008dc0:	1a1b      	subs	r3, r3, r0
 8008dc2:	80a3      	strh	r3, [r4, #4]
 8008dc4:	0028      	movs	r0, r5
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	f003 fbfc 	bl	800c5c4 <lv_obj_get_style_prop>
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8008dcc:	8863      	ldrh	r3, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8008dce:	2211      	movs	r2, #17
 8008dd0:	181b      	adds	r3, r3, r0
 8008dd2:	8063      	strh	r3, [r4, #2]
 8008dd4:	0028      	movs	r0, r5
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	f003 fbf4 	bl	800c5c4 <lv_obj_get_style_prop>
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8008ddc:	88e3      	ldrh	r3, [r4, #6]
 8008dde:	1a1b      	subs	r3, r3, r0
 8008de0:	80e3      	strh	r3, [r4, #6]
}
 8008de2:	bd70      	pop	{r4, r5, r6, pc}

08008de4 <lv_obj_get_self_width>:
{
 8008de4:	b510      	push	{r4, lr}
 8008de6:	b082      	sub	sp, #8
    lv_point_t p = {0, LV_COORD_MIN};
 8008de8:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <lv_obj_get_self_width+0x1c>)
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8008dea:	ac01      	add	r4, sp, #4
 8008dec:	0022      	movs	r2, r4
 8008dee:	212c      	movs	r1, #44	; 0x2c
    lv_point_t p = {0, LV_COORD_MIN};
 8008df0:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8008df2:	f7fb ff1d 	bl	8004c30 <lv_event_send>
    return p.x;
 8008df6:	2300      	movs	r3, #0
 8008df8:	5ee0      	ldrsh	r0, [r4, r3]
}
 8008dfa:	b002      	add	sp, #8
 8008dfc:	bd10      	pop	{r4, pc}
 8008dfe:	46c0      	nop			; (mov r8, r8)
 8008e00:	e0010000 	.word	0xe0010000

08008e04 <lv_obj_get_self_height>:
{
 8008e04:	b510      	push	{r4, lr}
 8008e06:	b082      	sub	sp, #8
    lv_point_t p = {LV_COORD_MIN, 0};
 8008e08:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <lv_obj_get_self_height+0x1c>)
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8008e0a:	ac01      	add	r4, sp, #4
 8008e0c:	0022      	movs	r2, r4
 8008e0e:	212c      	movs	r1, #44	; 0x2c
    lv_point_t p = {LV_COORD_MIN, 0};
 8008e10:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8008e12:	f7fb ff0d 	bl	8004c30 <lv_event_send>
    return p.y;
 8008e16:	2302      	movs	r3, #2
 8008e18:	5ee0      	ldrsh	r0, [r4, r3]
}
 8008e1a:	b002      	add	sp, #8
 8008e1c:	bd10      	pop	{r4, pc}
 8008e1e:	46c0      	nop			; (mov r8, r8)
 8008e20:	0000e001 	.word	0x0000e001

08008e24 <lv_obj_refresh_self_size>:
{
 8008e24:	b570      	push	{r4, r5, r6, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8008e26:	2201      	movs	r2, #1
 8008e28:	2100      	movs	r1, #0
 8008e2a:	0004      	movs	r4, r0
 8008e2c:	f003 fbca 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8008e30:	2204      	movs	r2, #4
 8008e32:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 8008e34:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8008e36:	0020      	movs	r0, r4
 8008e38:	f003 fbc4 	bl	800c5c4 <lv_obj_get_style_prop>
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8008e3c:	4b0e      	ldr	r3, [pc, #56]	; (8008e78 <lv_obj_refresh_self_size+0x54>)
    return (lv_coord_t)v.num;
 8008e3e:	b200      	sxth	r0, r0
 8008e40:	429d      	cmp	r5, r3
 8008e42:	d004      	beq.n	8008e4e <lv_obj_refresh_self_size+0x2a>
 8008e44:	2500      	movs	r5, #0
 8008e46:	4298      	cmp	r0, r3
 8008e48:	d001      	beq.n	8008e4e <lv_obj_refresh_self_size+0x2a>
}
 8008e4a:	0028      	movs	r0, r5
 8008e4c:	bd70      	pop	{r4, r5, r6, pc}
    obj->layout_inv = 1;
 8008e4e:	2201      	movs	r2, #1
 8008e50:	7fa3      	ldrb	r3, [r4, #30]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8008e52:	0020      	movs	r0, r4
    obj->layout_inv = 1;
 8008e54:	4313      	orrs	r3, r2
 8008e56:	77a3      	strb	r3, [r4, #30]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8008e58:	f004 ffb0 	bl	800ddbc <lv_obj_get_screen>
    scr->scr_layout_inv = 1;
 8008e5c:	2202      	movs	r2, #2
 8008e5e:	7f83      	ldrb	r3, [r0, #30]
    return true;
 8008e60:	2501      	movs	r5, #1
    scr->scr_layout_inv = 1;
 8008e62:	4313      	orrs	r3, r2
 8008e64:	7783      	strb	r3, [r0, #30]
    lv_disp_t * disp = lv_obj_get_disp(scr);
 8008e66:	f004 ffb1 	bl	800ddcc <lv_obj_get_disp>
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8008e6a:	6840      	ldr	r0, [r0, #4]
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d0ec      	beq.n	8008e4a <lv_obj_refresh_self_size+0x26>
 8008e70:	f00c ff98 	bl	8015da4 <lv_timer_resume>
 8008e74:	e7e9      	b.n	8008e4a <lv_obj_refresh_self_size+0x26>
 8008e76:	46c0      	nop			; (mov r8, r8)
 8008e78:	000027d1 	.word	0x000027d1

08008e7c <lv_obj_move_children_by>:
{
 8008e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e7e:	46de      	mov	lr, fp
 8008e80:	4657      	mov	r7, sl
 8008e82:	464e      	mov	r6, r9
 8008e84:	4645      	mov	r5, r8
 8008e86:	b5e0      	push	{r5, r6, r7, lr}
 8008e88:	b085      	sub	sp, #20
 8008e8a:	4683      	mov	fp, r0
 8008e8c:	468a      	mov	sl, r1
 8008e8e:	4691      	mov	r9, r2
 8008e90:	9303      	str	r3, [sp, #12]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008e92:	f004 ffd9 	bl	800de48 <lv_obj_get_child_cnt>
 8008e96:	9002      	str	r0, [sp, #8]
    for(i = 0; i < child_cnt; i++) {
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d045      	beq.n	8008f28 <lv_obj_move_children_by+0xac>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	9301      	str	r3, [sp, #4]
        child->coords.x1 += x_diff;
 8008ea0:	4653      	mov	r3, sl
 8008ea2:	b29f      	uxth	r7, r3
        child->coords.y1 += y_diff;
 8008ea4:	464b      	mov	r3, r9
 8008ea6:	b29e      	uxth	r6, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 8008ea8:	465b      	mov	r3, fp
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	9a01      	ldr	r2, [sp, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	0092      	lsls	r2, r2, #2
 8008eb2:	58d5      	ldr	r5, [r2, r3]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d006      	beq.n	8008ec8 <lv_obj_move_children_by+0x4c>
 8008eba:	2180      	movs	r1, #128	; 0x80
 8008ebc:	0028      	movs	r0, r5
 8008ebe:	02c9      	lsls	r1, r1, #11
 8008ec0:	f7ff f828 	bl	8007f14 <lv_obj_has_flag>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d129      	bne.n	8008f1c <lv_obj_move_children_by+0xa0>
        child->coords.x1 += x_diff;
 8008ec8:	8a2b      	ldrh	r3, [r5, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008eca:	0028      	movs	r0, r5
        child->coords.x1 += x_diff;
 8008ecc:	18fb      	adds	r3, r7, r3
 8008ece:	822b      	strh	r3, [r5, #16]
        child->coords.y1 += y_diff;
 8008ed0:	8a6b      	ldrh	r3, [r5, #18]
    for(i = 0; i < child_cnt; i++) {
 8008ed2:	2400      	movs	r4, #0
        child->coords.y1 += y_diff;
 8008ed4:	18f3      	adds	r3, r6, r3
 8008ed6:	826b      	strh	r3, [r5, #18]
        child->coords.x2 += x_diff;
 8008ed8:	8aab      	ldrh	r3, [r5, #20]
 8008eda:	18fb      	adds	r3, r7, r3
 8008edc:	82ab      	strh	r3, [r5, #20]
        child->coords.y2 += y_diff;
 8008ede:	8aeb      	ldrh	r3, [r5, #22]
 8008ee0:	18f3      	adds	r3, r6, r3
 8008ee2:	82eb      	strh	r3, [r5, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008ee4:	f004 ffb0 	bl	800de48 <lv_obj_get_child_cnt>
 8008ee8:	4680      	mov	r8, r0
    for(i = 0; i < child_cnt; i++) {
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d016      	beq.n	8008f1c <lv_obj_move_children_by+0xa0>
        lv_obj_t * child = obj->spec_attr->children[i];
 8008eee:	68ab      	ldr	r3, [r5, #8]
 8008ef0:	00a2      	lsls	r2, r4, #2
 8008ef2:	681b      	ldr	r3, [r3, #0]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8008ef4:	4651      	mov	r1, sl
        lv_obj_t * child = obj->spec_attr->children[i];
 8008ef6:	58d0      	ldr	r0, [r2, r3]
    for(i = 0; i < child_cnt; i++) {
 8008ef8:	3401      	adds	r4, #1
        child->coords.x1 += x_diff;
 8008efa:	8a03      	ldrh	r3, [r0, #16]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8008efc:	464a      	mov	r2, r9
        child->coords.x1 += x_diff;
 8008efe:	18fb      	adds	r3, r7, r3
 8008f00:	8203      	strh	r3, [r0, #16]
        child->coords.y1 += y_diff;
 8008f02:	8a43      	ldrh	r3, [r0, #18]
 8008f04:	18f3      	adds	r3, r6, r3
 8008f06:	8243      	strh	r3, [r0, #18]
        child->coords.x2 += x_diff;
 8008f08:	8a83      	ldrh	r3, [r0, #20]
 8008f0a:	18fb      	adds	r3, r7, r3
 8008f0c:	8283      	strh	r3, [r0, #20]
        child->coords.y2 += y_diff;
 8008f0e:	8ac3      	ldrh	r3, [r0, #22]
 8008f10:	18f3      	adds	r3, r6, r3
 8008f12:	82c3      	strh	r3, [r0, #22]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8008f14:	f7ff fc20 	bl	8008758 <lv_obj_move_children_by.constprop.0>
    for(i = 0; i < child_cnt; i++) {
 8008f18:	45a0      	cmp	r8, r4
 8008f1a:	d1e8      	bne.n	8008eee <lv_obj_move_children_by+0x72>
 8008f1c:	9b01      	ldr	r3, [sp, #4]
 8008f1e:	9a02      	ldr	r2, [sp, #8]
 8008f20:	3301      	adds	r3, #1
 8008f22:	9301      	str	r3, [sp, #4]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d1bf      	bne.n	8008ea8 <lv_obj_move_children_by+0x2c>
}
 8008f28:	b005      	add	sp, #20
 8008f2a:	bcf0      	pop	{r4, r5, r6, r7}
 8008f2c:	46bb      	mov	fp, r7
 8008f2e:	46b2      	mov	sl, r6
 8008f30:	46a9      	mov	r9, r5
 8008f32:	46a0      	mov	r8, r4
 8008f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f36:	46c0      	nop			; (mov r8, r8)

08008f38 <lv_obj_transform_point>:
{
 8008f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f3a:	46c6      	mov	lr, r8
 8008f3c:	0004      	movs	r4, r0
 8008f3e:	000e      	movs	r6, r1
 8008f40:	0015      	movs	r5, r2
 8008f42:	4698      	mov	r8, r3
 8008f44:	b500      	push	{lr}
    if(obj) {
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d018      	beq.n	8008f7c <lv_obj_transform_point+0x44>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8008f4a:	f7ff fbb3 	bl	80086b4 <_lv_obj_get_layer_type>
        if(inv) {
 8008f4e:	4643      	mov	r3, r8
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8008f50:	0007      	movs	r7, r0
        if(inv) {
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d009      	beq.n	8008f6a <lv_obj_transform_point+0x32>
 8008f56:	e014      	b.n	8008f82 <lv_obj_transform_point+0x4a>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8008f58:	2d00      	cmp	r5, #0
 8008f5a:	d00f      	beq.n	8008f7c <lv_obj_transform_point+0x44>
 8008f5c:	0020      	movs	r0, r4
 8008f5e:	f004 ff5d 	bl	800de1c <lv_obj_get_parent>
 8008f62:	1e04      	subs	r4, r0, #0
    if(obj) {
 8008f64:	d00a      	beq.n	8008f7c <lv_obj_transform_point+0x44>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8008f66:	f7ff fba5 	bl	80086b4 <_lv_obj_get_layer_type>
            if(do_tranf) transform_point(obj, p, inv);
 8008f6a:	2802      	cmp	r0, #2
 8008f6c:	d1f4      	bne.n	8008f58 <lv_obj_transform_point+0x20>
 8008f6e:	2200      	movs	r2, #0
 8008f70:	0031      	movs	r1, r6
 8008f72:	0020      	movs	r0, r4
 8008f74:	f7ff fba6 	bl	80086c4 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8008f78:	2d00      	cmp	r5, #0
 8008f7a:	d1ef      	bne.n	8008f5c <lv_obj_transform_point+0x24>
}
 8008f7c:	bc80      	pop	{r7}
 8008f7e:	46b8      	mov	r8, r7
 8008f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8008f82:	2d00      	cmp	r5, #0
 8008f84:	d107      	bne.n	8008f96 <lv_obj_transform_point+0x5e>
            if(do_tranf) transform_point(obj, p, inv);
 8008f86:	2f02      	cmp	r7, #2
 8008f88:	d1f8      	bne.n	8008f7c <lv_obj_transform_point+0x44>
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	0031      	movs	r1, r6
 8008f8e:	0020      	movs	r0, r4
 8008f90:	f7ff fb98 	bl	80086c4 <transform_point>
 8008f94:	e7f2      	b.n	8008f7c <lv_obj_transform_point+0x44>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8008f96:	0020      	movs	r0, r4
 8008f98:	f004 ff40 	bl	800de1c <lv_obj_get_parent>
 8008f9c:	4680      	mov	r8, r0
    if(obj) {
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d0f1      	beq.n	8008f86 <lv_obj_transform_point+0x4e>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8008fa2:	f7ff fb87 	bl	80086b4 <_lv_obj_get_layer_type>
 8008fa6:	0005      	movs	r5, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8008fa8:	4640      	mov	r0, r8
 8008faa:	f004 ff37 	bl	800de1c <lv_obj_get_parent>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	0031      	movs	r1, r6
 8008fb4:	f7ff ffc0 	bl	8008f38 <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 8008fb8:	2d02      	cmp	r5, #2
 8008fba:	d1e4      	bne.n	8008f86 <lv_obj_transform_point+0x4e>
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	0031      	movs	r1, r6
 8008fc0:	4640      	mov	r0, r8
 8008fc2:	f7ff fb7f 	bl	80086c4 <transform_point>
 8008fc6:	e7de      	b.n	8008f86 <lv_obj_transform_point+0x4e>

08008fc8 <lv_obj_get_transformed_area>:
{
 8008fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fca:	46ce      	mov	lr, r9
 8008fcc:	4647      	mov	r7, r8
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b085      	sub	sp, #20
 8008fd2:	0016      	movs	r6, r2
 8008fd4:	4699      	mov	r9, r3
        {area->x1, area->y1},
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	5e8b      	ldrsh	r3, [r1, r2]
    lv_point_t p[4] = {
 8008fda:	466a      	mov	r2, sp
 8008fdc:	8013      	strh	r3, [r2, #0]
{
 8008fde:	000f      	movs	r7, r1
        {area->x1, area->y1},
 8008fe0:	2202      	movs	r2, #2
 8008fe2:	5e89      	ldrsh	r1, [r1, r2]
    lv_point_t p[4] = {
 8008fe4:	466a      	mov	r2, sp
 8008fe6:	8051      	strh	r1, [r2, #2]
 8008fe8:	8093      	strh	r3, [r2, #4]
        {area->x1, area->y2},
 8008fea:	2206      	movs	r2, #6
 8008fec:	5ebb      	ldrsh	r3, [r7, r2]
    lv_point_t p[4] = {
 8008fee:	466a      	mov	r2, sp
 8008ff0:	80d3      	strh	r3, [r2, #6]
{
 8008ff2:	0004      	movs	r4, r0
        {area->x2, area->y1},
 8008ff4:	2004      	movs	r0, #4
 8008ff6:	5e3a      	ldrsh	r2, [r7, r0]
    lv_point_t p[4] = {
 8008ff8:	4668      	mov	r0, sp
 8008ffa:	8102      	strh	r2, [r0, #8]
 8008ffc:	8141      	strh	r1, [r0, #10]
 8008ffe:	8182      	strh	r2, [r0, #12]
 8009000:	81c3      	strh	r3, [r0, #14]
    if(obj) {
 8009002:	2c00      	cmp	r4, #0
 8009004:	d070      	beq.n	80090e8 <lv_obj_get_transformed_area+0x120>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8009006:	0020      	movs	r0, r4
 8009008:	f7ff fb54 	bl	80086b4 <_lv_obj_get_layer_type>
        if(inv) {
 800900c:	464b      	mov	r3, r9
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800900e:	4680      	mov	r8, r0
        if(inv) {
 8009010:	0025      	movs	r5, r4
 8009012:	2b00      	cmp	r3, #0
 8009014:	d009      	beq.n	800902a <lv_obj_get_transformed_area+0x62>
 8009016:	e040      	b.n	800909a <lv_obj_get_transformed_area+0xd2>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8009018:	2e00      	cmp	r6, #0
 800901a:	d00f      	beq.n	800903c <lv_obj_get_transformed_area+0x74>
 800901c:	0028      	movs	r0, r5
 800901e:	f004 fefd 	bl	800de1c <lv_obj_get_parent>
 8009022:	1e05      	subs	r5, r0, #0
    if(obj) {
 8009024:	d00a      	beq.n	800903c <lv_obj_get_transformed_area+0x74>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8009026:	f7ff fb45 	bl	80086b4 <_lv_obj_get_layer_type>
            if(do_tranf) transform_point(obj, p, inv);
 800902a:	2802      	cmp	r0, #2
 800902c:	d1f4      	bne.n	8009018 <lv_obj_get_transformed_area+0x50>
 800902e:	2200      	movs	r2, #0
 8009030:	4669      	mov	r1, sp
 8009032:	0028      	movs	r0, r5
 8009034:	f7ff fb46 	bl	80086c4 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8009038:	2e00      	cmp	r6, #0
 800903a:	d1ef      	bne.n	800901c <lv_obj_get_transformed_area+0x54>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800903c:	0020      	movs	r0, r4
 800903e:	f7ff fb39 	bl	80086b4 <_lv_obj_get_layer_type>
 8009042:	0025      	movs	r5, r4
 8009044:	e008      	b.n	8009058 <lv_obj_get_transformed_area+0x90>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8009046:	2e00      	cmp	r6, #0
 8009048:	d00f      	beq.n	800906a <lv_obj_get_transformed_area+0xa2>
 800904a:	0028      	movs	r0, r5
 800904c:	f004 fee6 	bl	800de1c <lv_obj_get_parent>
 8009050:	1e05      	subs	r5, r0, #0
    if(obj) {
 8009052:	d00a      	beq.n	800906a <lv_obj_get_transformed_area+0xa2>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8009054:	f7ff fb2e 	bl	80086b4 <_lv_obj_get_layer_type>
            if(do_tranf) transform_point(obj, p, inv);
 8009058:	2802      	cmp	r0, #2
 800905a:	d1f4      	bne.n	8009046 <lv_obj_get_transformed_area+0x7e>
 800905c:	2200      	movs	r2, #0
 800905e:	0028      	movs	r0, r5
 8009060:	a901      	add	r1, sp, #4
 8009062:	f7ff fb2f 	bl	80086c4 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8009066:	2e00      	cmp	r6, #0
 8009068:	d1ef      	bne.n	800904a <lv_obj_get_transformed_area+0x82>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800906a:	0020      	movs	r0, r4
 800906c:	f7ff fb22 	bl	80086b4 <_lv_obj_get_layer_type>
 8009070:	0025      	movs	r5, r4
 8009072:	e00a      	b.n	800908a <lv_obj_get_transformed_area+0xc2>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8009074:	2e00      	cmp	r6, #0
 8009076:	d100      	bne.n	800907a <lv_obj_get_transformed_area+0xb2>
 8009078:	e098      	b.n	80091ac <lv_obj_get_transformed_area+0x1e4>
 800907a:	0028      	movs	r0, r5
 800907c:	f004 fece 	bl	800de1c <lv_obj_get_parent>
 8009080:	1e05      	subs	r5, r0, #0
    if(obj) {
 8009082:	d100      	bne.n	8009086 <lv_obj_get_transformed_area+0xbe>
 8009084:	e092      	b.n	80091ac <lv_obj_get_transformed_area+0x1e4>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8009086:	f7ff fb15 	bl	80086b4 <_lv_obj_get_layer_type>
            if(do_tranf) transform_point(obj, p, inv);
 800908a:	2802      	cmp	r0, #2
 800908c:	d1f2      	bne.n	8009074 <lv_obj_get_transformed_area+0xac>
 800908e:	2200      	movs	r2, #0
 8009090:	0028      	movs	r0, r5
 8009092:	a902      	add	r1, sp, #8
 8009094:	f7ff fb16 	bl	80086c4 <transform_point>
 8009098:	e7ec      	b.n	8009074 <lv_obj_get_transformed_area+0xac>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 800909a:	2e00      	cmp	r6, #0
 800909c:	d000      	beq.n	80090a0 <lv_obj_get_transformed_area+0xd8>
 800909e:	e0e1      	b.n	8009264 <lv_obj_get_transformed_area+0x29c>
            if(do_tranf) transform_point(obj, p, inv);
 80090a0:	4643      	mov	r3, r8
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d100      	bne.n	80090a8 <lv_obj_get_transformed_area+0xe0>
 80090a6:	e0f8      	b.n	800929a <lv_obj_get_transformed_area+0x2d2>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80090a8:	0020      	movs	r0, r4
 80090aa:	f7ff fb03 	bl	80086b4 <_lv_obj_get_layer_type>
 80090ae:	4681      	mov	r9, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80090b0:	2e00      	cmp	r6, #0
 80090b2:	d000      	beq.n	80090b6 <lv_obj_get_transformed_area+0xee>
 80090b4:	e0bb      	b.n	800922e <lv_obj_get_transformed_area+0x266>
            if(do_tranf) transform_point(obj, p, inv);
 80090b6:	464b      	mov	r3, r9
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d100      	bne.n	80090be <lv_obj_get_transformed_area+0xf6>
 80090bc:	e101      	b.n	80092c2 <lv_obj_get_transformed_area+0x2fa>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80090be:	0020      	movs	r0, r4
 80090c0:	f7ff faf8 	bl	80086b4 <_lv_obj_get_layer_type>
 80090c4:	4681      	mov	r9, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80090c6:	2e00      	cmp	r6, #0
 80090c8:	d000      	beq.n	80090cc <lv_obj_get_transformed_area+0x104>
 80090ca:	e095      	b.n	80091f8 <lv_obj_get_transformed_area+0x230>
            if(do_tranf) transform_point(obj, p, inv);
 80090cc:	464b      	mov	r3, r9
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d100      	bne.n	80090d4 <lv_obj_get_transformed_area+0x10c>
 80090d2:	e0ec      	b.n	80092ae <lv_obj_get_transformed_area+0x2e6>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80090d4:	0020      	movs	r0, r4
 80090d6:	f7ff faed 	bl	80086b4 <_lv_obj_get_layer_type>
 80090da:	4680      	mov	r8, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80090dc:	2e00      	cmp	r6, #0
 80090de:	d000      	beq.n	80090e2 <lv_obj_get_transformed_area+0x11a>
 80090e0:	e070      	b.n	80091c4 <lv_obj_get_transformed_area+0x1fc>
            if(do_tranf) transform_point(obj, p, inv);
 80090e2:	4643      	mov	r3, r8
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d067      	beq.n	80091b8 <lv_obj_get_transformed_area+0x1f0>
    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 80090e8:	466b      	mov	r3, sp
 80090ea:	220c      	movs	r2, #12
 80090ec:	5e9a      	ldrsh	r2, [r3, r2]
 80090ee:	466b      	mov	r3, sp
 80090f0:	2408      	movs	r4, #8
 80090f2:	5f1c      	ldrsh	r4, [r3, r4]
 80090f4:	466b      	mov	r3, sp
 80090f6:	2004      	movs	r0, #4
 80090f8:	5e18      	ldrsh	r0, [r3, r0]
 80090fa:	466b      	mov	r3, sp
 80090fc:	2100      	movs	r1, #0
 80090fe:	5e59      	ldrsh	r1, [r3, r1]
 8009100:	1c13      	adds	r3, r2, #0
 8009102:	42a2      	cmp	r2, r4
 8009104:	dd00      	ble.n	8009108 <lv_obj_get_transformed_area+0x140>
 8009106:	1c23      	adds	r3, r4, #0
 8009108:	b21d      	sxth	r5, r3
 800910a:	4285      	cmp	r5, r0
 800910c:	dd00      	ble.n	8009110 <lv_obj_get_transformed_area+0x148>
 800910e:	1c03      	adds	r3, r0, #0
 8009110:	b21d      	sxth	r5, r3
 8009112:	428d      	cmp	r5, r1
 8009114:	dd00      	ble.n	8009118 <lv_obj_get_transformed_area+0x150>
 8009116:	1c0b      	adds	r3, r1, #0
 8009118:	803b      	strh	r3, [r7, #0]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 800911a:	1c13      	adds	r3, r2, #0
 800911c:	42a2      	cmp	r2, r4
 800911e:	da00      	bge.n	8009122 <lv_obj_get_transformed_area+0x15a>
 8009120:	1c23      	adds	r3, r4, #0
 8009122:	b21a      	sxth	r2, r3
 8009124:	4282      	cmp	r2, r0
 8009126:	da00      	bge.n	800912a <lv_obj_get_transformed_area+0x162>
 8009128:	1c03      	adds	r3, r0, #0
 800912a:	b21a      	sxth	r2, r3
 800912c:	428a      	cmp	r2, r1
 800912e:	da00      	bge.n	8009132 <lv_obj_get_transformed_area+0x16a>
 8009130:	1c0b      	adds	r3, r1, #0
 8009132:	80bb      	strh	r3, [r7, #4]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 8009134:	466b      	mov	r3, sp
 8009136:	220e      	movs	r2, #14
 8009138:	5e9a      	ldrsh	r2, [r3, r2]
 800913a:	466b      	mov	r3, sp
 800913c:	240a      	movs	r4, #10
 800913e:	5f1c      	ldrsh	r4, [r3, r4]
 8009140:	466b      	mov	r3, sp
 8009142:	2006      	movs	r0, #6
 8009144:	5e18      	ldrsh	r0, [r3, r0]
 8009146:	466b      	mov	r3, sp
 8009148:	2102      	movs	r1, #2
 800914a:	5e59      	ldrsh	r1, [r3, r1]
 800914c:	1c13      	adds	r3, r2, #0
 800914e:	42a2      	cmp	r2, r4
 8009150:	dd00      	ble.n	8009154 <lv_obj_get_transformed_area+0x18c>
 8009152:	1c23      	adds	r3, r4, #0
 8009154:	b21d      	sxth	r5, r3
 8009156:	4285      	cmp	r5, r0
 8009158:	dd00      	ble.n	800915c <lv_obj_get_transformed_area+0x194>
 800915a:	1c03      	adds	r3, r0, #0
 800915c:	b21d      	sxth	r5, r3
 800915e:	428d      	cmp	r5, r1
 8009160:	dd00      	ble.n	8009164 <lv_obj_get_transformed_area+0x19c>
 8009162:	1c0b      	adds	r3, r1, #0
 8009164:	807b      	strh	r3, [r7, #2]
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 8009166:	1c13      	adds	r3, r2, #0
 8009168:	42a2      	cmp	r2, r4
 800916a:	da00      	bge.n	800916e <lv_obj_get_transformed_area+0x1a6>
 800916c:	1c23      	adds	r3, r4, #0
 800916e:	b21a      	sxth	r2, r3
 8009170:	4282      	cmp	r2, r0
 8009172:	da00      	bge.n	8009176 <lv_obj_get_transformed_area+0x1ae>
 8009174:	1c03      	adds	r3, r0, #0
 8009176:	b21a      	sxth	r2, r3
 8009178:	428a      	cmp	r2, r1
 800917a:	da00      	bge.n	800917e <lv_obj_get_transformed_area+0x1b6>
 800917c:	1c0b      	adds	r3, r1, #0
    lv_area_increase(area, 5, 5);
 800917e:	2205      	movs	r2, #5
 8009180:	2105      	movs	r1, #5
 8009182:	0038      	movs	r0, r7
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 8009184:	80fb      	strh	r3, [r7, #6]
    lv_area_increase(area, 5, 5);
 8009186:	f00b f84b 	bl	8014220 <lv_area_increase>
}
 800918a:	b005      	add	sp, #20
 800918c:	bcc0      	pop	{r6, r7}
 800918e:	46b9      	mov	r9, r7
 8009190:	46b0      	mov	r8, r6
 8009192:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(do_tranf) transform_point(obj, p, inv);
 8009194:	2200      	movs	r2, #0
 8009196:	0020      	movs	r0, r4
 8009198:	a903      	add	r1, sp, #12
 800919a:	f7ff fa93 	bl	80086c4 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 800919e:	2e00      	cmp	r6, #0
 80091a0:	d0a2      	beq.n	80090e8 <lv_obj_get_transformed_area+0x120>
 80091a2:	0020      	movs	r0, r4
 80091a4:	f004 fe3a 	bl	800de1c <lv_obj_get_parent>
 80091a8:	1e04      	subs	r4, r0, #0
    if(obj) {
 80091aa:	d09d      	beq.n	80090e8 <lv_obj_get_transformed_area+0x120>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80091ac:	0020      	movs	r0, r4
 80091ae:	f7ff fa81 	bl	80086b4 <_lv_obj_get_layer_type>
            if(do_tranf) transform_point(obj, p, inv);
 80091b2:	2802      	cmp	r0, #2
 80091b4:	d1f3      	bne.n	800919e <lv_obj_get_transformed_area+0x1d6>
 80091b6:	e7ed      	b.n	8009194 <lv_obj_get_transformed_area+0x1cc>
            if(do_tranf) transform_point(obj, p, inv);
 80091b8:	2201      	movs	r2, #1
 80091ba:	0020      	movs	r0, r4
 80091bc:	a903      	add	r1, sp, #12
 80091be:	f7ff fa81 	bl	80086c4 <transform_point>
 80091c2:	e791      	b.n	80090e8 <lv_obj_get_transformed_area+0x120>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80091c4:	0020      	movs	r0, r4
 80091c6:	f004 fe29 	bl	800de1c <lv_obj_get_parent>
 80091ca:	1e06      	subs	r6, r0, #0
    if(obj) {
 80091cc:	d100      	bne.n	80091d0 <lv_obj_get_transformed_area+0x208>
 80091ce:	e788      	b.n	80090e2 <lv_obj_get_transformed_area+0x11a>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80091d0:	f7ff fa70 	bl	80086b4 <_lv_obj_get_layer_type>
 80091d4:	0005      	movs	r5, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80091d6:	0030      	movs	r0, r6
 80091d8:	f004 fe20 	bl	800de1c <lv_obj_get_parent>
 80091dc:	2301      	movs	r3, #1
 80091de:	2201      	movs	r2, #1
 80091e0:	a903      	add	r1, sp, #12
 80091e2:	f7ff fea9 	bl	8008f38 <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 80091e6:	2d02      	cmp	r5, #2
 80091e8:	d000      	beq.n	80091ec <lv_obj_get_transformed_area+0x224>
 80091ea:	e77a      	b.n	80090e2 <lv_obj_get_transformed_area+0x11a>
 80091ec:	2201      	movs	r2, #1
 80091ee:	0030      	movs	r0, r6
 80091f0:	a903      	add	r1, sp, #12
 80091f2:	f7ff fa67 	bl	80086c4 <transform_point>
 80091f6:	e774      	b.n	80090e2 <lv_obj_get_transformed_area+0x11a>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80091f8:	0020      	movs	r0, r4
 80091fa:	f004 fe0f 	bl	800de1c <lv_obj_get_parent>
 80091fe:	4680      	mov	r8, r0
    if(obj) {
 8009200:	2800      	cmp	r0, #0
 8009202:	d100      	bne.n	8009206 <lv_obj_get_transformed_area+0x23e>
 8009204:	e762      	b.n	80090cc <lv_obj_get_transformed_area+0x104>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8009206:	f7ff fa55 	bl	80086b4 <_lv_obj_get_layer_type>
 800920a:	0005      	movs	r5, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 800920c:	4640      	mov	r0, r8
 800920e:	f004 fe05 	bl	800de1c <lv_obj_get_parent>
 8009212:	2301      	movs	r3, #1
 8009214:	2201      	movs	r2, #1
 8009216:	a902      	add	r1, sp, #8
 8009218:	f7ff fe8e 	bl	8008f38 <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 800921c:	2d02      	cmp	r5, #2
 800921e:	d000      	beq.n	8009222 <lv_obj_get_transformed_area+0x25a>
 8009220:	e754      	b.n	80090cc <lv_obj_get_transformed_area+0x104>
 8009222:	2201      	movs	r2, #1
 8009224:	4640      	mov	r0, r8
 8009226:	a902      	add	r1, sp, #8
 8009228:	f7ff fa4c 	bl	80086c4 <transform_point>
 800922c:	e74e      	b.n	80090cc <lv_obj_get_transformed_area+0x104>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 800922e:	0020      	movs	r0, r4
 8009230:	f004 fdf4 	bl	800de1c <lv_obj_get_parent>
 8009234:	4680      	mov	r8, r0
    if(obj) {
 8009236:	2800      	cmp	r0, #0
 8009238:	d100      	bne.n	800923c <lv_obj_get_transformed_area+0x274>
 800923a:	e73c      	b.n	80090b6 <lv_obj_get_transformed_area+0xee>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800923c:	f7ff fa3a 	bl	80086b4 <_lv_obj_get_layer_type>
 8009240:	0005      	movs	r5, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8009242:	4640      	mov	r0, r8
 8009244:	f004 fdea 	bl	800de1c <lv_obj_get_parent>
 8009248:	2301      	movs	r3, #1
 800924a:	2201      	movs	r2, #1
 800924c:	a901      	add	r1, sp, #4
 800924e:	f7ff fe73 	bl	8008f38 <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 8009252:	2d02      	cmp	r5, #2
 8009254:	d000      	beq.n	8009258 <lv_obj_get_transformed_area+0x290>
 8009256:	e72e      	b.n	80090b6 <lv_obj_get_transformed_area+0xee>
 8009258:	2201      	movs	r2, #1
 800925a:	4640      	mov	r0, r8
 800925c:	a901      	add	r1, sp, #4
 800925e:	f7ff fa31 	bl	80086c4 <transform_point>
 8009262:	e728      	b.n	80090b6 <lv_obj_get_transformed_area+0xee>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8009264:	0020      	movs	r0, r4
 8009266:	f004 fdd9 	bl	800de1c <lv_obj_get_parent>
 800926a:	4681      	mov	r9, r0
    if(obj) {
 800926c:	2800      	cmp	r0, #0
 800926e:	d100      	bne.n	8009272 <lv_obj_get_transformed_area+0x2aa>
 8009270:	e716      	b.n	80090a0 <lv_obj_get_transformed_area+0xd8>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8009272:	f7ff fa1f 	bl	80086b4 <_lv_obj_get_layer_type>
 8009276:	0005      	movs	r5, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8009278:	4648      	mov	r0, r9
 800927a:	f004 fdcf 	bl	800de1c <lv_obj_get_parent>
 800927e:	2301      	movs	r3, #1
 8009280:	2201      	movs	r2, #1
 8009282:	4669      	mov	r1, sp
 8009284:	f7ff fe58 	bl	8008f38 <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 8009288:	2d02      	cmp	r5, #2
 800928a:	d000      	beq.n	800928e <lv_obj_get_transformed_area+0x2c6>
 800928c:	e708      	b.n	80090a0 <lv_obj_get_transformed_area+0xd8>
 800928e:	2201      	movs	r2, #1
 8009290:	4669      	mov	r1, sp
 8009292:	4648      	mov	r0, r9
 8009294:	f7ff fa16 	bl	80086c4 <transform_point>
 8009298:	e702      	b.n	80090a0 <lv_obj_get_transformed_area+0xd8>
 800929a:	2201      	movs	r2, #1
 800929c:	4669      	mov	r1, sp
 800929e:	0020      	movs	r0, r4
 80092a0:	f7ff fa10 	bl	80086c4 <transform_point>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80092a4:	0020      	movs	r0, r4
 80092a6:	f7ff fa05 	bl	80086b4 <_lv_obj_get_layer_type>
 80092aa:	4681      	mov	r9, r0
        if(inv) {
 80092ac:	e700      	b.n	80090b0 <lv_obj_get_transformed_area+0xe8>
            if(do_tranf) transform_point(obj, p, inv);
 80092ae:	2201      	movs	r2, #1
 80092b0:	0020      	movs	r0, r4
 80092b2:	a902      	add	r1, sp, #8
 80092b4:	f7ff fa06 	bl	80086c4 <transform_point>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80092b8:	0020      	movs	r0, r4
 80092ba:	f7ff f9fb 	bl	80086b4 <_lv_obj_get_layer_type>
 80092be:	4680      	mov	r8, r0
        if(inv) {
 80092c0:	e70c      	b.n	80090dc <lv_obj_get_transformed_area+0x114>
            if(do_tranf) transform_point(obj, p, inv);
 80092c2:	2201      	movs	r2, #1
 80092c4:	0020      	movs	r0, r4
 80092c6:	a901      	add	r1, sp, #4
 80092c8:	f7ff f9fc 	bl	80086c4 <transform_point>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80092cc:	0020      	movs	r0, r4
 80092ce:	f7ff f9f1 	bl	80086b4 <_lv_obj_get_layer_type>
 80092d2:	4681      	mov	r9, r0
        if(inv) {
 80092d4:	e6f7      	b.n	80090c6 <lv_obj_get_transformed_area+0xfe>
 80092d6:	46c0      	nop			; (mov r8, r8)

080092d8 <lv_obj_area_is_visible>:
{
 80092d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092da:	000e      	movs	r6, r1
 80092dc:	b083      	sub	sp, #12
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 80092de:	2101      	movs	r1, #1
{
 80092e0:	0004      	movs	r4, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 80092e2:	f7fe fe17 	bl	8007f14 <lv_obj_has_flag>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d002      	beq.n	80092f0 <lv_obj_area_is_visible+0x18>
 80092ea:	2000      	movs	r0, #0
}
 80092ec:	b003      	add	sp, #12
 80092ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 80092f0:	0020      	movs	r0, r4
 80092f2:	f004 fd63 	bl	800ddbc <lv_obj_get_screen>
 80092f6:	0005      	movs	r5, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 80092f8:	f004 fd68 	bl	800ddcc <lv_obj_get_disp>
 80092fc:	0007      	movs	r7, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 80092fe:	f7fb f9a7 	bl	8004650 <lv_disp_get_scr_act>
 8009302:	4285      	cmp	r5, r0
 8009304:	d00e      	beq.n	8009324 <lv_obj_area_is_visible+0x4c>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8009306:	0038      	movs	r0, r7
 8009308:	f7fb f9b0 	bl	800466c <lv_disp_get_scr_prev>
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 800930c:	4285      	cmp	r5, r0
 800930e:	d009      	beq.n	8009324 <lv_obj_area_is_visible+0x4c>
       obj_scr != lv_disp_get_layer_top(disp) &&
 8009310:	0038      	movs	r0, r7
 8009312:	f7fb f9b9 	bl	8004688 <lv_disp_get_layer_top>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8009316:	4285      	cmp	r5, r0
 8009318:	d004      	beq.n	8009324 <lv_obj_area_is_visible+0x4c>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 800931a:	0038      	movs	r0, r7
 800931c:	f7fb f9c2 	bl	80046a4 <lv_disp_get_layer_sys>
       obj_scr != lv_disp_get_layer_top(disp) &&
 8009320:	4285      	cmp	r5, r0
 8009322:	d1e2      	bne.n	80092ea <lv_obj_area_is_visible+0x12>
    if(!lv_obj_has_flag_any(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8009324:	2180      	movs	r1, #128	; 0x80
 8009326:	0020      	movs	r0, r4
 8009328:	0309      	lsls	r1, r1, #12
 800932a:	f7fe fdfb 	bl	8007f24 <lv_obj_has_flag_any>
 800932e:	2800      	cmp	r0, #0
 8009330:	d11a      	bne.n	8009368 <lv_obj_area_is_visible+0x90>
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8009332:	0020      	movs	r0, r4
 8009334:	f7ff f9b6 	bl	80086a4 <_lv_obj_get_ext_draw_size>
        obj_coords.x1 -= ext_size;
 8009338:	466f      	mov	r7, sp
    dest->y1 = src->y1;
 800933a:	2312      	movs	r3, #18
 800933c:	5ee2      	ldrsh	r2, [r4, r3]
    dest->y2 = src->y2;
 800933e:	2116      	movs	r1, #22
 8009340:	5e65      	ldrsh	r5, [r4, r1]
    dest->x2 = src->x2;
 8009342:	2114      	movs	r1, #20
 8009344:	5e63      	ldrsh	r3, [r4, r1]
 8009346:	8a21      	ldrh	r1, [r4, #16]
 8009348:	b280      	uxth	r0, r0
 800934a:	1a09      	subs	r1, r1, r0
        obj_coords.y1 -= ext_size;
 800934c:	1a12      	subs	r2, r2, r0
        obj_coords.x2 += ext_size;
 800934e:	18c3      	adds	r3, r0, r3
        obj_coords.y2 += ext_size;
 8009350:	1940      	adds	r0, r0, r5
        obj_coords.x1 -= ext_size;
 8009352:	8039      	strh	r1, [r7, #0]
        obj_coords.y1 -= ext_size;
 8009354:	807a      	strh	r2, [r7, #2]
        obj_coords.y2 += ext_size;
 8009356:	80f8      	strh	r0, [r7, #6]
        obj_coords.x2 += ext_size;
 8009358:	466a      	mov	r2, sp
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 800935a:	0031      	movs	r1, r6
 800935c:	0030      	movs	r0, r6
        obj_coords.x2 += ext_size;
 800935e:	80bb      	strh	r3, [r7, #4]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 8009360:	f00a ff7e 	bl	8014260 <_lv_area_intersect>
 8009364:	2800      	cmp	r0, #0
 8009366:	d0c1      	beq.n	80092ec <lv_obj_area_is_visible+0x14>
    lv_obj_get_transformed_area(obj, area, true, false);
 8009368:	0020      	movs	r0, r4
 800936a:	2300      	movs	r3, #0
 800936c:	2201      	movs	r2, #1
 800936e:	0031      	movs	r1, r6
 8009370:	f7ff fe2a 	bl	8008fc8 <lv_obj_get_transformed_area>
    lv_obj_t * par = lv_obj_get_parent(obj);
 8009374:	0020      	movs	r0, r4
 8009376:	f004 fd51 	bl	800de1c <lv_obj_get_parent>
            lv_area_t par_area = par->coords;
 800937a:	466d      	mov	r5, sp
    lv_obj_t * par = lv_obj_get_parent(obj);
 800937c:	1e04      	subs	r4, r0, #0
    while(par != NULL) {
 800937e:	d11e      	bne.n	80093be <lv_obj_area_is_visible+0xe6>
 8009380:	e024      	b.n	80093cc <lv_obj_area_is_visible+0xf4>
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8009382:	2180      	movs	r1, #128	; 0x80
 8009384:	0020      	movs	r0, r4
 8009386:	0309      	lsls	r1, r1, #12
 8009388:	f7fe fdcc 	bl	8007f24 <lv_obj_has_flag_any>
 800938c:	2800      	cmp	r0, #0
 800938e:	d111      	bne.n	80093b4 <lv_obj_area_is_visible+0xdc>
            lv_area_t par_area = par->coords;
 8009390:	0023      	movs	r3, r4
 8009392:	002a      	movs	r2, r5
 8009394:	3310      	adds	r3, #16
 8009396:	cb03      	ldmia	r3!, {r0, r1}
 8009398:	c203      	stmia	r2!, {r0, r1}
            lv_obj_get_transformed_area(par, &par_area, true, false);
 800939a:	2201      	movs	r2, #1
 800939c:	0029      	movs	r1, r5
 800939e:	0020      	movs	r0, r4
 80093a0:	2300      	movs	r3, #0
 80093a2:	f7ff fe11 	bl	8008fc8 <lv_obj_get_transformed_area>
            if(!_lv_area_intersect(area, area, &par_area)) return false;
 80093a6:	002a      	movs	r2, r5
 80093a8:	0031      	movs	r1, r6
 80093aa:	0030      	movs	r0, r6
 80093ac:	f00a ff58 	bl	8014260 <_lv_area_intersect>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d09b      	beq.n	80092ec <lv_obj_area_is_visible+0x14>
        par = lv_obj_get_parent(par);
 80093b4:	0020      	movs	r0, r4
 80093b6:	f004 fd31 	bl	800de1c <lv_obj_get_parent>
 80093ba:	1e04      	subs	r4, r0, #0
    while(par != NULL) {
 80093bc:	d006      	beq.n	80093cc <lv_obj_area_is_visible+0xf4>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 80093be:	2101      	movs	r1, #1
 80093c0:	0020      	movs	r0, r4
 80093c2:	f7fe fda7 	bl	8007f14 <lv_obj_has_flag>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d0db      	beq.n	8009382 <lv_obj_area_is_visible+0xaa>
 80093ca:	e78e      	b.n	80092ea <lv_obj_area_is_visible+0x12>
    return true;
 80093cc:	2001      	movs	r0, #1
 80093ce:	e78d      	b.n	80092ec <lv_obj_area_is_visible+0x14>

080093d0 <lv_obj_invalidate_area>:
{
 80093d0:	b530      	push	{r4, r5, lr}
 80093d2:	b083      	sub	sp, #12
 80093d4:	000c      	movs	r4, r1
 80093d6:	0005      	movs	r5, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj);
 80093d8:	f004 fcf8 	bl	800ddcc <lv_obj_get_disp>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 80093dc:	f7fb fb30 	bl	8004a40 <lv_disp_is_invalidation_enabled>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d101      	bne.n	80093e8 <lv_obj_invalidate_area+0x18>
}
 80093e4:	b003      	add	sp, #12
 80093e6:	bd30      	pop	{r4, r5, pc}
    dest->x1 = src->x1;
 80093e8:	466a      	mov	r2, sp
 80093ea:	8823      	ldrh	r3, [r4, #0]
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 80093ec:	4669      	mov	r1, sp
 80093ee:	8013      	strh	r3, [r2, #0]
    dest->y1 = src->y1;
 80093f0:	8863      	ldrh	r3, [r4, #2]
 80093f2:	0028      	movs	r0, r5
 80093f4:	8053      	strh	r3, [r2, #2]
    dest->x2 = src->x2;
 80093f6:	88a3      	ldrh	r3, [r4, #4]
 80093f8:	8093      	strh	r3, [r2, #4]
    dest->y2 = src->y2;
 80093fa:	88e3      	ldrh	r3, [r4, #6]
 80093fc:	80d3      	strh	r3, [r2, #6]
 80093fe:	f7ff ff6b 	bl	80092d8 <lv_obj_area_is_visible>
 8009402:	2800      	cmp	r0, #0
 8009404:	d0ee      	beq.n	80093e4 <lv_obj_invalidate_area+0x14>
    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 8009406:	0028      	movs	r0, r5
 8009408:	f004 fce0 	bl	800ddcc <lv_obj_get_disp>
 800940c:	4669      	mov	r1, sp
 800940e:	f005 fbf3 	bl	800ebf8 <_lv_inv_area>
 8009412:	e7e7      	b.n	80093e4 <lv_obj_invalidate_area+0x14>

08009414 <lv_obj_invalidate>:
{
 8009414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009416:	46ce      	mov	lr, r9
 8009418:	4647      	mov	r7, r8
 800941a:	b580      	push	{r7, lr}
 800941c:	0004      	movs	r4, r0
 800941e:	b083      	sub	sp, #12
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8009420:	f7ff f940 	bl	80086a4 <_lv_obj_get_ext_draw_size>
    dest->x1 = src->x1;
 8009424:	2210      	movs	r2, #16
 8009426:	5ea3      	ldrsh	r3, [r4, r2]
 8009428:	0005      	movs	r5, r0
 800942a:	4698      	mov	r8, r3
    dest->y1 = src->y1;
 800942c:	2312      	movs	r3, #18
 800942e:	5ee7      	ldrsh	r7, [r4, r3]
    dest->x2 = src->x2;
 8009430:	2314      	movs	r3, #20
 8009432:	5ee6      	ldrsh	r6, [r4, r3]
    dest->y2 = src->y2;
 8009434:	2216      	movs	r2, #22
 8009436:	5ea3      	ldrsh	r3, [r4, r2]
    lv_disp_t * disp   = lv_obj_get_disp(obj);
 8009438:	0020      	movs	r0, r4
 800943a:	4699      	mov	r9, r3
 800943c:	f004 fcc6 	bl	800ddcc <lv_obj_get_disp>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 8009440:	f7fb fafe 	bl	8004a40 <lv_disp_is_invalidation_enabled>
 8009444:	2800      	cmp	r0, #0
 8009446:	d104      	bne.n	8009452 <lv_obj_invalidate+0x3e>
}
 8009448:	b003      	add	sp, #12
 800944a:	bcc0      	pop	{r6, r7}
 800944c:	46b9      	mov	r9, r7
 800944e:	46b0      	mov	r8, r6
 8009450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    obj_coords.x1 -= ext_size;
 8009452:	4643      	mov	r3, r8
    dest->x1 = src->x1;
 8009454:	466a      	mov	r2, sp
 8009456:	b2a8      	uxth	r0, r5
 8009458:	1a1b      	subs	r3, r3, r0
    obj_coords.y1 -= ext_size;
 800945a:	1a3f      	subs	r7, r7, r0
    obj_coords.x2 += ext_size;
 800945c:	1986      	adds	r6, r0, r6
    obj_coords.y2 += ext_size;
 800945e:	4448      	add	r0, r9
    dest->y2 = src->y2;
 8009460:	80d0      	strh	r0, [r2, #6]
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 8009462:	4669      	mov	r1, sp
 8009464:	0020      	movs	r0, r4
    dest->x1 = src->x1;
 8009466:	8013      	strh	r3, [r2, #0]
    dest->y1 = src->y1;
 8009468:	8057      	strh	r7, [r2, #2]
    dest->x2 = src->x2;
 800946a:	8096      	strh	r6, [r2, #4]
 800946c:	f7ff ff34 	bl	80092d8 <lv_obj_area_is_visible>
 8009470:	2800      	cmp	r0, #0
 8009472:	d0e9      	beq.n	8009448 <lv_obj_invalidate+0x34>
    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 8009474:	0020      	movs	r0, r4
 8009476:	f004 fca9 	bl	800ddcc <lv_obj_get_disp>
 800947a:	4669      	mov	r1, sp
 800947c:	f005 fbbc 	bl	800ebf8 <_lv_inv_area>
 8009480:	e7e2      	b.n	8009448 <lv_obj_invalidate+0x34>
 8009482:	46c0      	nop			; (mov r8, r8)

08009484 <lv_obj_move_to>:
{
 8009484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009486:	4645      	mov	r5, r8
 8009488:	464e      	mov	r6, r9
 800948a:	46de      	mov	lr, fp
 800948c:	4657      	mov	r7, sl
 800948e:	b5e0      	push	{r5, r6, r7, lr}
    lv_obj_t * parent = obj->parent;
 8009490:	6843      	ldr	r3, [r0, #4]
{
 8009492:	0006      	movs	r6, r0
 8009494:	000d      	movs	r5, r1
 8009496:	0014      	movs	r4, r2
    lv_obj_t * parent = obj->parent;
 8009498:	4698      	mov	r8, r3
{
 800949a:	b087      	sub	sp, #28
    if(parent) {
 800949c:	2b00      	cmp	r3, #0
 800949e:	d100      	bne.n	80094a2 <lv_obj_move_to+0x1e>
 80094a0:	e0a7      	b.n	80095f2 <lv_obj_move_to+0x16e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80094a2:	2212      	movs	r2, #18
 80094a4:	2100      	movs	r1, #0
 80094a6:	0018      	movs	r0, r3
 80094a8:	f003 f88c 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80094ac:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80094ae:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80094b0:	2210      	movs	r2, #16
 80094b2:	4640      	mov	r0, r8
 80094b4:	f003 f886 	bl	800c5c4 <lv_obj_get_style_prop>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 80094b8:	2180      	movs	r1, #128	; 0x80
 80094ba:	4681      	mov	r9, r0
 80094bc:	02c9      	lsls	r1, r1, #11
 80094be:	0030      	movs	r0, r6
 80094c0:	f7fe fd28 	bl	8007f14 <lv_obj_has_flag>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d100      	bne.n	80094ca <lv_obj_move_to+0x46>
 80094c8:	e09a      	b.n	8009600 <lv_obj_move_to+0x17c>
            x += pad_left + parent->coords.x1;
 80094ca:	4643      	mov	r3, r8
 80094cc:	197f      	adds	r7, r7, r5
 80094ce:	8a1d      	ldrh	r5, [r3, #16]
            y += pad_top + parent->coords.y1;
 80094d0:	444c      	add	r4, r9
            x += pad_left + parent->coords.x1;
 80094d2:	19ed      	adds	r5, r5, r7
            y += pad_top + parent->coords.y1;
 80094d4:	0027      	movs	r7, r4
 80094d6:	8a5c      	ldrh	r4, [r3, #18]
            x += pad_left + parent->coords.x1;
 80094d8:	b2ad      	uxth	r5, r5
            y += pad_top + parent->coords.y1;
 80094da:	19e7      	adds	r7, r4, r7
 80094dc:	b2bf      	uxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80094de:	2232      	movs	r2, #50	; 0x32
 80094e0:	2100      	movs	r1, #0
 80094e2:	4640      	mov	r0, r8
 80094e4:	f003 f86e 	bl	800c5c4 <lv_obj_get_style_prop>
        x += border_width;
 80094e8:	b284      	uxth	r4, r0
 80094ea:	1965      	adds	r5, r4, r5
        y += border_width;
 80094ec:	19e4      	adds	r4, r4, r7
        x += border_width;
 80094ee:	b2ad      	uxth	r5, r5
        y += border_width;
 80094f0:	b2a4      	uxth	r4, r4
    diff.x = x - obj->coords.x1;
 80094f2:	8a31      	ldrh	r1, [r6, #16]
    diff.y = y - obj->coords.y1;
 80094f4:	8a72      	ldrh	r2, [r6, #18]
    diff.x = x - obj->coords.x1;
 80094f6:	1a6d      	subs	r5, r5, r1
 80094f8:	b2ad      	uxth	r5, r5
    if(diff.x == 0 && diff.y == 0) return;
 80094fa:	002b      	movs	r3, r5
    diff.y = y - obj->coords.y1;
 80094fc:	1aa4      	subs	r4, r4, r2
 80094fe:	b2a4      	uxth	r4, r4
    if(diff.x == 0 && diff.y == 0) return;
 8009500:	4323      	orrs	r3, r4
 8009502:	d06f      	beq.n	80095e4 <lv_obj_move_to+0x160>
    lv_obj_invalidate(obj);
 8009504:	0030      	movs	r0, r6
 8009506:	f7ff ff85 	bl	8009414 <lv_obj_invalidate>
    dest->x1 = src->x1;
 800950a:	2310      	movs	r3, #16
 800950c:	5ef0      	ldrsh	r0, [r6, r3]
 800950e:	ab02      	add	r3, sp, #8
 8009510:	8018      	strh	r0, [r3, #0]
    dest->y1 = src->y1;
 8009512:	2312      	movs	r3, #18
 8009514:	5ef1      	ldrsh	r1, [r6, r3]
 8009516:	ab02      	add	r3, sp, #8
 8009518:	8059      	strh	r1, [r3, #2]
    dest->x2 = src->x2;
 800951a:	2314      	movs	r3, #20
 800951c:	5ef2      	ldrsh	r2, [r6, r3]
 800951e:	ab02      	add	r3, sp, #8
 8009520:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8009522:	2716      	movs	r7, #22
 8009524:	5ff3      	ldrsh	r3, [r6, r7]
 8009526:	af02      	add	r7, sp, #8
 8009528:	80fb      	strh	r3, [r7, #6]
    bool on1 = false;
 800952a:	2700      	movs	r7, #0
 800952c:	9701      	str	r7, [sp, #4]
    if(parent) {
 800952e:	4647      	mov	r7, r8
 8009530:	2f00      	cmp	r7, #0
 8009532:	d014      	beq.n	800955e <lv_obj_move_to+0xda>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 8009534:	4640      	mov	r0, r8
 8009536:	a904      	add	r1, sp, #16
 8009538:	f7ff fc1a 	bl	8008d70 <lv_obj_get_content_coords>
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 800953c:	2200      	movs	r2, #0
 800953e:	a904      	add	r1, sp, #16
 8009540:	a802      	add	r0, sp, #8
 8009542:	f00b f811 	bl	8014568 <_lv_area_is_in>
 8009546:	9001      	str	r0, [sp, #4]
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 8009548:	2800      	cmp	r0, #0
 800954a:	d100      	bne.n	800954e <lv_obj_move_to+0xca>
 800954c:	e070      	b.n	8009630 <lv_obj_move_to+0x1ac>
    obj->coords.x1 += diff.x;
 800954e:	2310      	movs	r3, #16
 8009550:	5ef0      	ldrsh	r0, [r6, r3]
    obj->coords.y1 += diff.y;
 8009552:	2312      	movs	r3, #18
 8009554:	5ef1      	ldrsh	r1, [r6, r3]
    obj->coords.x2 += diff.x;
 8009556:	2314      	movs	r3, #20
 8009558:	5ef2      	ldrsh	r2, [r6, r3]
    obj->coords.y2 += diff.y;
 800955a:	2716      	movs	r7, #22
 800955c:	5ff3      	ldrsh	r3, [r6, r7]
    obj->coords.x1 += diff.x;
 800955e:	1828      	adds	r0, r5, r0
    obj->coords.y1 += diff.y;
 8009560:	1861      	adds	r1, r4, r1
    obj->coords.x2 += diff.x;
 8009562:	18aa      	adds	r2, r5, r2
    obj->coords.y2 += diff.y;
 8009564:	18e3      	adds	r3, r4, r3
    obj->coords.x1 += diff.x;
 8009566:	8230      	strh	r0, [r6, #16]
    obj->coords.y1 += diff.y;
 8009568:	8271      	strh	r1, [r6, #18]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800956a:	0030      	movs	r0, r6
    obj->coords.x2 += diff.x;
 800956c:	82b2      	strh	r2, [r6, #20]
    obj->coords.y2 += diff.y;
 800956e:	82f3      	strh	r3, [r6, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009570:	f004 fc6a 	bl	800de48 <lv_obj_get_child_cnt>
 8009574:	4681      	mov	r9, r0
    for(i = 0; i < child_cnt; i++) {
 8009576:	2800      	cmp	r0, #0
 8009578:	d01b      	beq.n	80095b2 <lv_obj_move_to+0x12e>
    diff.x = x - obj->coords.x1;
 800957a:	b22b      	sxth	r3, r5
 800957c:	469b      	mov	fp, r3
    diff.y = y - obj->coords.y1;
 800957e:	b223      	sxth	r3, r4
 8009580:	469a      	mov	sl, r3
    for(i = 0; i < child_cnt; i++) {
 8009582:	2700      	movs	r7, #0
        lv_obj_t * child = obj->spec_attr->children[i];
 8009584:	68b3      	ldr	r3, [r6, #8]
 8009586:	00ba      	lsls	r2, r7, #2
 8009588:	681b      	ldr	r3, [r3, #0]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 800958a:	4659      	mov	r1, fp
        lv_obj_t * child = obj->spec_attr->children[i];
 800958c:	58d0      	ldr	r0, [r2, r3]
    for(i = 0; i < child_cnt; i++) {
 800958e:	3701      	adds	r7, #1
        child->coords.x1 += x_diff;
 8009590:	8a03      	ldrh	r3, [r0, #16]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8009592:	4652      	mov	r2, sl
        child->coords.x1 += x_diff;
 8009594:	18eb      	adds	r3, r5, r3
 8009596:	8203      	strh	r3, [r0, #16]
        child->coords.y1 += y_diff;
 8009598:	8a43      	ldrh	r3, [r0, #18]
 800959a:	18e3      	adds	r3, r4, r3
 800959c:	8243      	strh	r3, [r0, #18]
        child->coords.x2 += x_diff;
 800959e:	8a83      	ldrh	r3, [r0, #20]
 80095a0:	18eb      	adds	r3, r5, r3
 80095a2:	8283      	strh	r3, [r0, #20]
        child->coords.y2 += y_diff;
 80095a4:	8ac3      	ldrh	r3, [r0, #22]
 80095a6:	18e3      	adds	r3, r4, r3
 80095a8:	82c3      	strh	r3, [r0, #22]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 80095aa:	f7ff f8d5 	bl	8008758 <lv_obj_move_children_by.constprop.0>
    for(i = 0; i < child_cnt; i++) {
 80095ae:	45b9      	cmp	r9, r7
 80095b0:	d1e8      	bne.n	8009584 <lv_obj_move_to+0x100>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80095b2:	4643      	mov	r3, r8
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d01f      	beq.n	80095f8 <lv_obj_move_to+0x174>
 80095b8:	0032      	movs	r2, r6
 80095ba:	2122      	movs	r1, #34	; 0x22
 80095bc:	4640      	mov	r0, r8
 80095be:	f7fb fb37 	bl	8004c30 <lv_event_send>
    lv_obj_invalidate(obj);
 80095c2:	0030      	movs	r0, r6
 80095c4:	f7ff ff26 	bl	8009414 <lv_obj_invalidate>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 80095c8:	0030      	movs	r0, r6
 80095ca:	2200      	movs	r2, #0
 80095cc:	3010      	adds	r0, #16
 80095ce:	a904      	add	r1, sp, #16
 80095d0:	f00a ffca 	bl	8014568 <_lv_area_is_in>
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 80095d4:	9b01      	ldr	r3, [sp, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <lv_obj_move_to+0x15a>
 80095da:	2800      	cmp	r0, #0
 80095dc:	d002      	beq.n	80095e4 <lv_obj_move_to+0x160>
 80095de:	4640      	mov	r0, r8
 80095e0:	f002 fc76 	bl	800bed0 <lv_obj_scrollbar_invalidate>
}
 80095e4:	b007      	add	sp, #28
 80095e6:	bcf0      	pop	{r4, r5, r6, r7}
 80095e8:	46bb      	mov	fp, r7
 80095ea:	46b2      	mov	sl, r6
 80095ec:	46a9      	mov	r9, r5
 80095ee:	46a0      	mov	r8, r4
 80095f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    diff.x = x - obj->coords.x1;
 80095f2:	b28d      	uxth	r5, r1
    diff.y = y - obj->coords.y1;
 80095f4:	b294      	uxth	r4, r2
 80095f6:	e77c      	b.n	80094f2 <lv_obj_move_to+0x6e>
    lv_obj_invalidate(obj);
 80095f8:	0030      	movs	r0, r6
 80095fa:	f7ff ff0b 	bl	8009414 <lv_obj_invalidate>
    if(parent) {
 80095fe:	e7f1      	b.n	80095e4 <lv_obj_move_to+0x160>
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 8009600:	4643      	mov	r3, r8
 8009602:	2010      	movs	r0, #16
 8009604:	5e18      	ldrsh	r0, [r3, r0]
 8009606:	b23f      	sxth	r7, r7
 8009608:	19c7      	adds	r7, r0, r7
 800960a:	4640      	mov	r0, r8
 800960c:	f001 fabc 	bl	800ab88 <lv_obj_get_scroll_x>
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 8009610:	4643      	mov	r3, r8
 8009612:	2212      	movs	r2, #18
 8009614:	5e9b      	ldrsh	r3, [r3, r2]
 8009616:	464a      	mov	r2, r9
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 8009618:	1a3f      	subs	r7, r7, r0
 800961a:	197d      	adds	r5, r7, r5
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 800961c:	4640      	mov	r0, r8
 800961e:	b217      	sxth	r7, r2
 8009620:	19df      	adds	r7, r3, r7
 8009622:	f001 fabb 	bl	800ab9c <lv_obj_get_scroll_y>
 8009626:	1a3f      	subs	r7, r7, r0
 8009628:	193f      	adds	r7, r7, r4
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 800962a:	b2ad      	uxth	r5, r5
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 800962c:	b2bf      	uxth	r7, r7
 800962e:	e756      	b.n	80094de <lv_obj_move_to+0x5a>
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 8009630:	4640      	mov	r0, r8
 8009632:	f002 fc4d 	bl	800bed0 <lv_obj_scrollbar_invalidate>
 8009636:	e78a      	b.n	800954e <lv_obj_move_to+0xca>

08009638 <lv_obj_refr_pos.part.0>:
void lv_obj_refr_pos(lv_obj_t * obj)
 8009638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800963a:	46de      	mov	lr, fp
 800963c:	4645      	mov	r5, r8
 800963e:	4657      	mov	r7, sl
 8009640:	464e      	mov	r6, r9
 8009642:	b5e0      	push	{r5, r6, r7, lr}
 8009644:	b08b      	sub	sp, #44	; 0x2c
 8009646:	0004      	movs	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8009648:	f004 fbe8 	bl	800de1c <lv_obj_get_parent>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 800964c:	2207      	movs	r2, #7
 800964e:	2100      	movs	r1, #0
 8009650:	0005      	movs	r5, r0
 8009652:	0020      	movs	r0, r4
 8009654:	f002 ffb6 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8009658:	2208      	movs	r2, #8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 800965a:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 800965c:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 800965e:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8009660:	0020      	movs	r0, r4
 8009662:	f002 ffaf 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8009666:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8009668:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 800966a:	9300      	str	r3, [sp, #0]
    if(parent == NULL) {
 800966c:	2d00      	cmp	r5, #0
 800966e:	d100      	bne.n	8009672 <lv_obj_refr_pos.part.0+0x3a>
 8009670:	e156      	b.n	8009920 <lv_obj_refr_pos.part.0+0x2e8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8009672:	2212      	movs	r2, #18
 8009674:	2100      	movs	r1, #0
 8009676:	0028      	movs	r0, r5
 8009678:	f002 ffa4 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800967c:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800967e:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8009680:	2100      	movs	r1, #0
 8009682:	0028      	movs	r0, r5
 8009684:	f002 ff9e 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009688:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800968a:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800968c:	2100      	movs	r1, #0
 800968e:	0028      	movs	r0, r5
 8009690:	f002 ff98 	bl	800c5c4 <lv_obj_get_style_prop>
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8009694:	0033      	movs	r3, r6
 8009696:	2601      	movs	r6, #1
 8009698:	4453      	add	r3, sl
 800969a:	1af3      	subs	r3, r6, r3
 800969c:	0040      	lsls	r0, r0, #1
 800969e:	1a1b      	subs	r3, r3, r0
 80096a0:	8aa8      	ldrh	r0, [r5, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80096a2:	2210      	movs	r2, #16
 80096a4:	181b      	adds	r3, r3, r0
 80096a6:	8a28      	ldrh	r0, [r5, #16]
 80096a8:	2100      	movs	r1, #0
 80096aa:	1a18      	subs	r0, r3, r0
 80096ac:	b283      	uxth	r3, r0
 80096ae:	9309      	str	r3, [sp, #36]	; 0x24
 80096b0:	b203      	sxth	r3, r0
 80096b2:	0028      	movs	r0, r5
 80096b4:	9304      	str	r3, [sp, #16]
 80096b6:	f002 ff85 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80096ba:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80096bc:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80096be:	2100      	movs	r1, #0
 80096c0:	0028      	movs	r0, r5
 80096c2:	f002 ff7f 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80096c6:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80096c8:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80096ca:	2100      	movs	r1, #0
 80096cc:	0028      	movs	r0, r5
 80096ce:	f002 ff79 	bl	800c5c4 <lv_obj_get_style_prop>
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 80096d2:	4653      	mov	r3, sl
 80096d4:	445b      	add	r3, fp
 80096d6:	1af6      	subs	r6, r6, r3
 80096d8:	0040      	lsls	r0, r0, #1
 80096da:	1a36      	subs	r6, r6, r0
 80096dc:	8ae8      	ldrh	r0, [r5, #22]
 80096de:	1836      	adds	r6, r6, r0
 80096e0:	8a68      	ldrh	r0, [r5, #18]
 80096e2:	1a36      	subs	r6, r6, r0
 80096e4:	b2b3      	uxth	r3, r6
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 80096e6:	20c0      	movs	r0, #192	; 0xc0
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 80096e8:	9308      	str	r3, [sp, #32]
 80096ea:	b233      	sxth	r3, r6
 80096ec:	9303      	str	r3, [sp, #12]
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 80096ee:	464b      	mov	r3, r9
 80096f0:	01c0      	lsls	r0, r0, #7
 80096f2:	4003      	ands	r3, r0
 80096f4:	0018      	movs	r0, r3
 80096f6:	2380      	movs	r3, #128	; 0x80
 80096f8:	019b      	lsls	r3, r3, #6
 80096fa:	4298      	cmp	r0, r3
 80096fc:	d100      	bne.n	8009700 <lv_obj_refr_pos.part.0+0xc8>
 80096fe:	e0a4      	b.n	800984a <lv_obj_refr_pos.part.0+0x212>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 8009700:	20c0      	movs	r0, #192	; 0xc0
 8009702:	4643      	mov	r3, r8
 8009704:	01c0      	lsls	r0, r0, #7
 8009706:	4003      	ands	r3, r0
 8009708:	0018      	movs	r0, r3
 800970a:	2380      	movs	r3, #128	; 0x80
 800970c:	019b      	lsls	r3, r3, #6
 800970e:	4298      	cmp	r0, r3
 8009710:	d100      	bne.n	8009714 <lv_obj_refr_pos.part.0+0xdc>
 8009712:	e085      	b.n	8009820 <lv_obj_refr_pos.part.0+0x1e8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8009714:	226a      	movs	r2, #106	; 0x6a
 8009716:	2100      	movs	r1, #0
 8009718:	0020      	movs	r0, r4
 800971a:	f002 ff53 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800971e:	226b      	movs	r2, #107	; 0x6b
    return (lv_coord_t)v.num;
 8009720:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8009722:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8009724:	2100      	movs	r1, #0
 8009726:	0020      	movs	r0, r4
    return (lv_coord_t)v.num;
 8009728:	469a      	mov	sl, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800972a:	f002 ff4b 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800972e:	b203      	sxth	r3, r0
 8009730:	4699      	mov	r9, r3
 8009732:	8aa3      	ldrh	r3, [r4, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009734:	8a22      	ldrh	r2, [r4, #16]
 8009736:	3301      	adds	r3, #1
 8009738:	b29b      	uxth	r3, r3
 800973a:	9307      	str	r3, [sp, #28]
 800973c:	1a9b      	subs	r3, r3, r2
 800973e:	b21b      	sxth	r3, r3
 8009740:	9301      	str	r3, [sp, #4]
 8009742:	8ae3      	ldrh	r3, [r4, #22]
 8009744:	9205      	str	r2, [sp, #20]
 8009746:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009748:	8a62      	ldrh	r2, [r4, #18]
 800974a:	b29b      	uxth	r3, r3
 800974c:	469b      	mov	fp, r3
 800974e:	1a9b      	subs	r3, r3, r2
 8009750:	b21b      	sxth	r3, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8009752:	0006      	movs	r6, r0
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8009754:	20c0      	movs	r0, #192	; 0xc0
 8009756:	9302      	str	r3, [sp, #8]
 8009758:	4643      	mov	r3, r8
 800975a:	01c0      	lsls	r0, r0, #7
 800975c:	4018      	ands	r0, r3
 800975e:	2380      	movs	r3, #128	; 0x80
 8009760:	9206      	str	r2, [sp, #24]
 8009762:	019b      	lsls	r3, r3, #6
 8009764:	4298      	cmp	r0, r3
 8009766:	d047      	beq.n	80097f8 <lv_obj_refr_pos.part.0+0x1c0>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8009768:	20c0      	movs	r0, #192	; 0xc0
 800976a:	2380      	movs	r3, #128	; 0x80
 800976c:	01c0      	lsls	r0, r0, #7
 800976e:	4006      	ands	r6, r0
 8009770:	019b      	lsls	r3, r3, #6
 8009772:	429e      	cmp	r6, r3
 8009774:	d02c      	beq.n	80097d0 <lv_obj_refr_pos.part.0+0x198>
    y += tr_y;
 8009776:	9800      	ldr	r0, [sp, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8009778:	2209      	movs	r2, #9
 800977a:	4448      	add	r0, r9
 800977c:	b283      	uxth	r3, r0
 800977e:	4698      	mov	r8, r3
 8009780:	2100      	movs	r1, #0
 8009782:	b203      	sxth	r3, r0
 8009784:	0020      	movs	r0, r4
 8009786:	4699      	mov	r9, r3
 8009788:	f002 ff1c 	bl	800c5c4 <lv_obj_get_style_prop>
    x += tr_x;
 800978c:	4457      	add	r7, sl
    return (lv_align_t)v.num;
 800978e:	b2c0      	uxtb	r0, r0
 8009790:	b2be      	uxth	r6, r7
 8009792:	b23f      	sxth	r7, r7
    if(align == LV_ALIGN_DEFAULT) {
 8009794:	2800      	cmp	r0, #0
 8009796:	d007      	beq.n	80097a8 <lv_obj_refr_pos.part.0+0x170>
    if(align == LV_ALIGN_TOP_LEFT) {
 8009798:	2801      	cmp	r0, #1
 800979a:	d00d      	beq.n	80097b8 <lv_obj_refr_pos.part.0+0x180>
        switch(align) {
 800979c:	2809      	cmp	r0, #9
 800979e:	d80b      	bhi.n	80097b8 <lv_obj_refr_pos.part.0+0x180>
 80097a0:	4b62      	ldr	r3, [pc, #392]	; (800992c <lv_obj_refr_pos.part.0+0x2f4>)
 80097a2:	0080      	lsls	r0, r0, #2
 80097a4:	581b      	ldr	r3, [r3, r0]
 80097a6:	469f      	mov	pc, r3
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80097a8:	2216      	movs	r2, #22
 80097aa:	2100      	movs	r1, #0
 80097ac:	0028      	movs	r0, r5
 80097ae:	f002 ff09 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80097b2:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 80097b4:	2801      	cmp	r0, #1
 80097b6:	d05b      	beq.n	8009870 <lv_obj_refr_pos.part.0+0x238>
        lv_obj_move_to(obj, x, y);
 80097b8:	464a      	mov	r2, r9
 80097ba:	0039      	movs	r1, r7
 80097bc:	0020      	movs	r0, r4
 80097be:	f7ff fe61 	bl	8009484 <lv_obj_move_to>
}
 80097c2:	b00b      	add	sp, #44	; 0x2c
 80097c4:	bcf0      	pop	{r4, r5, r6, r7}
 80097c6:	46bb      	mov	fp, r7
 80097c8:	46b2      	mov	sl, r6
 80097ca:	46a9      	mov	r9, r5
 80097cc:	46a0      	mov	r8, r4
 80097ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 80097d0:	464b      	mov	r3, r9
 80097d2:	4857      	ldr	r0, [pc, #348]	; (8009930 <lv_obj_refr_pos.part.0+0x2f8>)
 80097d4:	4018      	ands	r0, r3
 80097d6:	23fa      	movs	r3, #250	; 0xfa
 80097d8:	00db      	lsls	r3, r3, #3
 80097da:	4298      	cmp	r0, r3
 80097dc:	dccb      	bgt.n	8009776 <lv_obj_refr_pos.part.0+0x13e>
 80097de:	23fa      	movs	r3, #250	; 0xfa
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4298      	cmp	r0, r3
 80097e4:	dd00      	ble.n	80097e8 <lv_obj_refr_pos.part.0+0x1b0>
 80097e6:	1a18      	subs	r0, r3, r0
 80097e8:	9b02      	ldr	r3, [sp, #8]
 80097ea:	2164      	movs	r1, #100	; 0x64
 80097ec:	4358      	muls	r0, r3
 80097ee:	f7f6 fd25 	bl	800023c <__divsi3>
 80097f2:	b203      	sxth	r3, r0
 80097f4:	4699      	mov	r9, r3
 80097f6:	e7be      	b.n	8009776 <lv_obj_refr_pos.part.0+0x13e>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 80097f8:	4653      	mov	r3, sl
 80097fa:	484d      	ldr	r0, [pc, #308]	; (8009930 <lv_obj_refr_pos.part.0+0x2f8>)
 80097fc:	4018      	ands	r0, r3
 80097fe:	23fa      	movs	r3, #250	; 0xfa
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	4298      	cmp	r0, r3
 8009804:	dcb0      	bgt.n	8009768 <lv_obj_refr_pos.part.0+0x130>
 8009806:	23fa      	movs	r3, #250	; 0xfa
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4298      	cmp	r0, r3
 800980c:	dd00      	ble.n	8009810 <lv_obj_refr_pos.part.0+0x1d8>
 800980e:	1a18      	subs	r0, r3, r0
 8009810:	9b01      	ldr	r3, [sp, #4]
 8009812:	2164      	movs	r1, #100	; 0x64
 8009814:	4358      	muls	r0, r3
 8009816:	f7f6 fd11 	bl	800023c <__divsi3>
 800981a:	b203      	sxth	r3, r0
 800981c:	469a      	mov	sl, r3
 800981e:	e7a3      	b.n	8009768 <lv_obj_refr_pos.part.0+0x130>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 8009820:	9b00      	ldr	r3, [sp, #0]
 8009822:	4843      	ldr	r0, [pc, #268]	; (8009930 <lv_obj_refr_pos.part.0+0x2f8>)
 8009824:	4018      	ands	r0, r3
 8009826:	23fa      	movs	r3, #250	; 0xfa
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	4298      	cmp	r0, r3
 800982c:	dd00      	ble.n	8009830 <lv_obj_refr_pos.part.0+0x1f8>
 800982e:	e771      	b.n	8009714 <lv_obj_refr_pos.part.0+0xdc>
 8009830:	23fa      	movs	r3, #250	; 0xfa
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4298      	cmp	r0, r3
 8009836:	dd00      	ble.n	800983a <lv_obj_refr_pos.part.0+0x202>
 8009838:	1a18      	subs	r0, r3, r0
 800983a:	9b03      	ldr	r3, [sp, #12]
 800983c:	2164      	movs	r1, #100	; 0x64
 800983e:	4358      	muls	r0, r3
 8009840:	f7f6 fcfc 	bl	800023c <__divsi3>
 8009844:	b203      	sxth	r3, r0
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	e764      	b.n	8009714 <lv_obj_refr_pos.part.0+0xdc>
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 800984a:	23fa      	movs	r3, #250	; 0xfa
 800984c:	4838      	ldr	r0, [pc, #224]	; (8009930 <lv_obj_refr_pos.part.0+0x2f8>)
 800984e:	00db      	lsls	r3, r3, #3
 8009850:	4038      	ands	r0, r7
 8009852:	4298      	cmp	r0, r3
 8009854:	dd00      	ble.n	8009858 <lv_obj_refr_pos.part.0+0x220>
 8009856:	e753      	b.n	8009700 <lv_obj_refr_pos.part.0+0xc8>
 8009858:	23fa      	movs	r3, #250	; 0xfa
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4298      	cmp	r0, r3
 800985e:	dd00      	ble.n	8009862 <lv_obj_refr_pos.part.0+0x22a>
 8009860:	1a18      	subs	r0, r3, r0
 8009862:	9b04      	ldr	r3, [sp, #16]
 8009864:	2164      	movs	r1, #100	; 0x64
 8009866:	4358      	muls	r0, r3
 8009868:	f7f6 fce8 	bl	800023c <__divsi3>
 800986c:	b207      	sxth	r7, r0
 800986e:	e747      	b.n	8009700 <lv_obj_refr_pos.part.0+0xc8>
                x += pw - w;
 8009870:	9b05      	ldr	r3, [sp, #20]
 8009872:	9a07      	ldr	r2, [sp, #28]
 8009874:	1a9f      	subs	r7, r3, r2
 8009876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009878:	469c      	mov	ip, r3
 800987a:	4467      	add	r7, ip
 800987c:	19f7      	adds	r7, r6, r7
 800987e:	b23f      	sxth	r7, r7
                break;
 8009880:	e79a      	b.n	80097b8 <lv_obj_refr_pos.part.0+0x180>
                x += pw - w;
 8009882:	9b05      	ldr	r3, [sp, #20]
 8009884:	9a07      	ldr	r2, [sp, #28]
 8009886:	1a9f      	subs	r7, r3, r2
 8009888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800988a:	469c      	mov	ip, r3
 800988c:	4467      	add	r7, ip
                x += pw / 2 - w / 2;
 800988e:	19f7      	adds	r7, r6, r7
 8009890:	b23f      	sxth	r7, r7
                y += ph - h;
 8009892:	465a      	mov	r2, fp
 8009894:	9b06      	ldr	r3, [sp, #24]
 8009896:	1a9b      	subs	r3, r3, r2
 8009898:	9a08      	ldr	r2, [sp, #32]
 800989a:	4694      	mov	ip, r2
 800989c:	4463      	add	r3, ip
 800989e:	4443      	add	r3, r8
 80098a0:	b21b      	sxth	r3, r3
 80098a2:	4699      	mov	r9, r3
                break;
 80098a4:	e788      	b.n	80097b8 <lv_obj_refr_pos.part.0+0x180>
                x += pw / 2 - w / 2;
 80098a6:	9b04      	ldr	r3, [sp, #16]
 80098a8:	9a01      	ldr	r2, [sp, #4]
 80098aa:	469c      	mov	ip, r3
 80098ac:	0fdf      	lsrs	r7, r3, #31
 80098ae:	4467      	add	r7, ip
 80098b0:	4694      	mov	ip, r2
 80098b2:	0fd3      	lsrs	r3, r2, #31
 80098b4:	4463      	add	r3, ip
 80098b6:	107f      	asrs	r7, r7, #1
 80098b8:	105b      	asrs	r3, r3, #1
 80098ba:	1aff      	subs	r7, r7, r3
 80098bc:	19f7      	adds	r7, r6, r7
 80098be:	b23f      	sxth	r7, r7
                y += ph / 2 - h / 2;
 80098c0:	9a03      	ldr	r2, [sp, #12]
 80098c2:	9902      	ldr	r1, [sp, #8]
 80098c4:	4694      	mov	ip, r2
 80098c6:	0fd3      	lsrs	r3, r2, #31
 80098c8:	4463      	add	r3, ip
 80098ca:	468c      	mov	ip, r1
 80098cc:	105a      	asrs	r2, r3, #1
 80098ce:	0fcb      	lsrs	r3, r1, #31
 80098d0:	4463      	add	r3, ip
 80098d2:	105b      	asrs	r3, r3, #1
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	4443      	add	r3, r8
 80098d8:	b21b      	sxth	r3, r3
 80098da:	4699      	mov	r9, r3
                break;
 80098dc:	e76c      	b.n	80097b8 <lv_obj_refr_pos.part.0+0x180>
                x += pw / 2 - w / 2;
 80098de:	9b04      	ldr	r3, [sp, #16]
 80098e0:	9a01      	ldr	r2, [sp, #4]
 80098e2:	469c      	mov	ip, r3
 80098e4:	0fdf      	lsrs	r7, r3, #31
 80098e6:	4467      	add	r7, ip
 80098e8:	4694      	mov	ip, r2
 80098ea:	0fd3      	lsrs	r3, r2, #31
 80098ec:	4463      	add	r3, ip
 80098ee:	107f      	asrs	r7, r7, #1
 80098f0:	105b      	asrs	r3, r3, #1
 80098f2:	1aff      	subs	r7, r7, r3
 80098f4:	19f7      	adds	r7, r6, r7
 80098f6:	b23f      	sxth	r7, r7
                break;
 80098f8:	e75e      	b.n	80097b8 <lv_obj_refr_pos.part.0+0x180>
                x += pw - w;
 80098fa:	9b05      	ldr	r3, [sp, #20]
 80098fc:	9a07      	ldr	r2, [sp, #28]
 80098fe:	1a9f      	subs	r7, r3, r2
 8009900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009902:	469c      	mov	ip, r3
 8009904:	4467      	add	r7, ip
 8009906:	e7d9      	b.n	80098bc <lv_obj_refr_pos.part.0+0x284>
                x += pw / 2 - w / 2;
 8009908:	9b04      	ldr	r3, [sp, #16]
 800990a:	9a01      	ldr	r2, [sp, #4]
 800990c:	469c      	mov	ip, r3
 800990e:	0fdf      	lsrs	r7, r3, #31
 8009910:	4467      	add	r7, ip
 8009912:	4694      	mov	ip, r2
 8009914:	0fd3      	lsrs	r3, r2, #31
 8009916:	4463      	add	r3, ip
 8009918:	107f      	asrs	r7, r7, #1
 800991a:	105b      	asrs	r3, r3, #1
 800991c:	1aff      	subs	r7, r7, r3
 800991e:	e7b6      	b.n	800988e <lv_obj_refr_pos.part.0+0x256>
        lv_obj_move_to(obj, x, y);
 8009920:	001a      	movs	r2, r3
 8009922:	0039      	movs	r1, r7
 8009924:	0020      	movs	r0, r4
 8009926:	f7ff fdad 	bl	8009484 <lv_obj_move_to>
        return;
 800992a:	e74a      	b.n	80097c2 <lv_obj_refr_pos.part.0+0x18a>
 800992c:	0801b6c0 	.word	0x0801b6c0
 8009930:	ffff9fff 	.word	0xffff9fff

08009934 <lv_obj_refr_size.part.0>:
bool lv_obj_refr_size(lv_obj_t * obj)
 8009934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009936:	46de      	mov	lr, fp
 8009938:	4645      	mov	r5, r8
 800993a:	4657      	mov	r7, sl
 800993c:	464e      	mov	r6, r9
 800993e:	b5e0      	push	{r5, r6, r7, lr}
 8009940:	b08d      	sub	sp, #52	; 0x34
 8009942:	0004      	movs	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8009944:	f004 fa6a 	bl	800de1c <lv_obj_get_parent>
 8009948:	1e05      	subs	r5, r0, #0
    if(parent == NULL) return false;
 800994a:	d100      	bne.n	800994e <lv_obj_refr_size.part.0+0x1a>
 800994c:	e182      	b.n	8009c54 <lv_obj_refr_size.part.0+0x320>
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 800994e:	0020      	movs	r0, r4
 8009950:	f001 fe46 	bl	800b5e0 <lv_obj_get_scroll_left>
    if(obj->w_layout) {
 8009954:	7fe3      	ldrb	r3, [r4, #31]
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8009956:	9001      	str	r0, [sp, #4]
    if(obj->w_layout) {
 8009958:	075b      	lsls	r3, r3, #29
 800995a:	d400      	bmi.n	800995e <lv_obj_refr_size.part.0+0x2a>
 800995c:	e07a      	b.n	8009a54 <lv_obj_refr_size.part.0+0x120>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800995e:	8aa6      	ldrh	r6, [r4, #20]
 8009960:	8a23      	ldrh	r3, [r4, #16]
 8009962:	3601      	adds	r6, #1
 8009964:	1af6      	subs	r6, r6, r3
    bool w_is_content = false;
 8009966:	2300      	movs	r3, #0
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8009968:	0020      	movs	r0, r4
    bool w_is_content = false;
 800996a:	9300      	str	r3, [sp, #0]
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 800996c:	f001 f920 	bl	800abb0 <lv_obj_get_scroll_top>
    if(obj->h_layout) {
 8009970:	7fe3      	ldrb	r3, [r4, #31]
 8009972:	b236      	sxth	r6, r6
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8009974:	9002      	str	r0, [sp, #8]
    if(obj->h_layout) {
 8009976:	079b      	lsls	r3, r3, #30
 8009978:	d400      	bmi.n	800997c <lv_obj_refr_size.part.0+0x48>
 800997a:	e0e7      	b.n	8009b4c <lv_obj_refr_size.part.0+0x218>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800997c:	8ae7      	ldrh	r7, [r4, #22]
 800997e:	8a63      	ldrh	r3, [r4, #18]
 8009980:	3701      	adds	r7, #1
 8009982:	1aff      	subs	r7, r7, r3
    if(w_is_content || h_is_content) {
 8009984:	9b00      	ldr	r3, [sp, #0]
 8009986:	b23f      	sxth	r7, r7
 8009988:	2b00      	cmp	r3, #0
 800998a:	d000      	beq.n	800998e <lv_obj_refr_size.part.0+0x5a>
 800998c:	e15b      	b.n	8009c46 <lv_obj_refr_size.part.0+0x312>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800998e:	8aa3      	ldrh	r3, [r4, #20]
 8009990:	8a22      	ldrh	r2, [r4, #16]
 8009992:	3301      	adds	r3, #1
 8009994:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 8009996:	b21b      	sxth	r3, r3
 8009998:	42b3      	cmp	r3, r6
 800999a:	d107      	bne.n	80099ac <lv_obj_refr_size.part.0+0x78>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800999c:	8ae3      	ldrh	r3, [r4, #22]
 800999e:	8a62      	ldrh	r2, [r4, #18]
 80099a0:	3301      	adds	r3, #1
 80099a2:	1a9b      	subs	r3, r3, r2
 80099a4:	b21b      	sxth	r3, r3
 80099a6:	42bb      	cmp	r3, r7
 80099a8:	d100      	bne.n	80099ac <lv_obj_refr_size.part.0+0x78>
 80099aa:	e153      	b.n	8009c54 <lv_obj_refr_size.part.0+0x320>
    lv_obj_invalidate(obj);
 80099ac:	0020      	movs	r0, r4
 80099ae:	f7ff fd31 	bl	8009414 <lv_obj_invalidate>
    dest->x1 = src->x1;
 80099b2:	8a23      	ldrh	r3, [r4, #16]
 80099b4:	aa08      	add	r2, sp, #32
 80099b6:	8013      	strh	r3, [r2, #0]
    dest->y1 = src->y1;
 80099b8:	8a63      	ldrh	r3, [r4, #18]
    lv_obj_get_content_coords(parent, &parent_fit_area);
 80099ba:	0028      	movs	r0, r5
 80099bc:	8053      	strh	r3, [r2, #2]
    dest->x2 = src->x2;
 80099be:	8aa3      	ldrh	r3, [r4, #20]
 80099c0:	a90a      	add	r1, sp, #40	; 0x28
 80099c2:	8093      	strh	r3, [r2, #4]
    dest->y2 = src->y2;
 80099c4:	8ae3      	ldrh	r3, [r4, #22]
 80099c6:	80d3      	strh	r3, [r2, #6]
 80099c8:	f7ff f9d2 	bl	8008d70 <lv_obj_get_content_coords>
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 80099cc:	2200      	movs	r2, #0
 80099ce:	a90a      	add	r1, sp, #40	; 0x28
 80099d0:	a808      	add	r0, sp, #32
 80099d2:	f00a fdc9 	bl	8014568 <_lv_area_is_in>
 80099d6:	4680      	mov	r8, r0
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 80099d8:	2800      	cmp	r0, #0
 80099da:	d100      	bne.n	80099de <lv_obj_refr_size.part.0+0xaa>
 80099dc:	e141      	b.n	8009c62 <lv_obj_refr_size.part.0+0x32e>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 80099de:	8a63      	ldrh	r3, [r4, #18]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80099e0:	2216      	movs	r2, #22
 80099e2:	3b01      	subs	r3, #1
 80099e4:	19df      	adds	r7, r3, r7
 80099e6:	2100      	movs	r1, #0
 80099e8:	0020      	movs	r0, r4
 80099ea:	82e7      	strh	r7, [r4, #22]
 80099ec:	f002 fdea 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80099f0:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80099f2:	2801      	cmp	r0, #1
 80099f4:	d100      	bne.n	80099f8 <lv_obj_refr_size.part.0+0xc4>
 80099f6:	e12f      	b.n	8009c58 <lv_obj_refr_size.part.0+0x324>
        obj->coords.x2 = obj->coords.x1 + w - 1;
 80099f8:	8a23      	ldrh	r3, [r4, #16]
 80099fa:	3b01      	subs	r3, #1
 80099fc:	199e      	adds	r6, r3, r6
 80099fe:	82a6      	strh	r6, [r4, #20]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8009a00:	2129      	movs	r1, #41	; 0x29
 8009a02:	aa08      	add	r2, sp, #32
 8009a04:	0020      	movs	r0, r4
 8009a06:	f7fb f913 	bl	8004c30 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8009a0a:	0022      	movs	r2, r4
 8009a0c:	2122      	movs	r1, #34	; 0x22
 8009a0e:	0028      	movs	r0, r5
 8009a10:	f7fb f90e 	bl	8004c30 <lv_event_send>
    lv_obj_invalidate(obj);
 8009a14:	0020      	movs	r0, r4
 8009a16:	f7ff fcfd 	bl	8009414 <lv_obj_invalidate>
    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	0020      	movs	r0, r4
 8009a1e:	f002 fa99 	bl	800bf54 <lv_obj_readjust_scroll>
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 8009a22:	0020      	movs	r0, r4
 8009a24:	2200      	movs	r2, #0
 8009a26:	a90a      	add	r1, sp, #40	; 0x28
 8009a28:	3010      	adds	r0, #16
 8009a2a:	f00a fd9d 	bl	8014568 <_lv_area_is_in>
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 8009a2e:	4643      	mov	r3, r8
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d101      	bne.n	8009a38 <lv_obj_refr_size.part.0+0x104>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	d002      	beq.n	8009a3e <lv_obj_refr_size.part.0+0x10a>
 8009a38:	0028      	movs	r0, r5
 8009a3a:	f002 fa49 	bl	800bed0 <lv_obj_scrollbar_invalidate>
    lv_obj_refresh_ext_draw_size(obj);
 8009a3e:	0020      	movs	r0, r4
 8009a40:	f7fe fdfe 	bl	8008640 <lv_obj_refresh_ext_draw_size>
    return true;
 8009a44:	2001      	movs	r0, #1
}
 8009a46:	b00d      	add	sp, #52	; 0x34
 8009a48:	bcf0      	pop	{r4, r5, r6, r7}
 8009a4a:	46bb      	mov	fp, r7
 8009a4c:	46b2      	mov	sl, r6
 8009a4e:	46a9      	mov	r9, r5
 8009a50:	46a0      	mov	r8, r4
 8009a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8009a54:	2201      	movs	r2, #1
 8009a56:	2100      	movs	r1, #0
 8009a58:	0020      	movs	r0, r4
 8009a5a:	f002 fdb3 	bl	800c5c4 <lv_obj_get_style_prop>
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 8009a5e:	4bb5      	ldr	r3, [pc, #724]	; (8009d34 <lv_obj_refr_size.part.0+0x400>)
    return (lv_coord_t)v.num;
 8009a60:	b207      	sxth	r7, r0
 8009a62:	18fb      	adds	r3, r7, r3
 8009a64:	425a      	negs	r2, r3
 8009a66:	4153      	adcs	r3, r2
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	9300      	str	r3, [sp, #0]
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8009a6c:	23c0      	movs	r3, #192	; 0xc0
 8009a6e:	01db      	lsls	r3, r3, #7
 8009a70:	4018      	ands	r0, r3
 8009a72:	2380      	movs	r3, #128	; 0x80
 8009a74:	2600      	movs	r6, #0
 8009a76:	019b      	lsls	r3, r3, #6
 8009a78:	4298      	cmp	r0, r3
 8009a7a:	d100      	bne.n	8009a7e <lv_obj_refr_size.part.0+0x14a>
 8009a7c:	e0ff      	b.n	8009c7e <lv_obj_refr_size.part.0+0x34a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8009a7e:	2212      	movs	r2, #18
 8009a80:	2100      	movs	r1, #0
 8009a82:	0028      	movs	r0, r5
 8009a84:	f002 fd9e 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8009a88:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8009a8a:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	0028      	movs	r0, r5
 8009a90:	f002 fd98 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009a94:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8009a96:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009a98:	2100      	movs	r1, #0
 8009a9a:	0028      	movs	r0, r5
 8009a9c:	f002 fd92 	bl	800c5c4 <lv_obj_get_style_prop>
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8009aa0:	465a      	mov	r2, fp
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	4442      	add	r2, r8
 8009aa6:	0040      	lsls	r0, r0, #1
 8009aa8:	1a9b      	subs	r3, r3, r2
 8009aaa:	1a1b      	subs	r3, r3, r0
 8009aac:	8aa8      	ldrh	r0, [r5, #20]
 8009aae:	181b      	adds	r3, r3, r0
 8009ab0:	8a28      	ldrh	r0, [r5, #16]
 8009ab2:	1a18      	subs	r0, r3, r0
 8009ab4:	b203      	sxth	r3, r0
 8009ab6:	469b      	mov	fp, r3
        if(w_is_content) {
 8009ab8:	4b9f      	ldr	r3, [pc, #636]	; (8009d38 <lv_obj_refr_size.part.0+0x404>)
 8009aba:	4698      	mov	r8, r3
 8009abc:	429f      	cmp	r7, r3
 8009abe:	d100      	bne.n	8009ac2 <lv_obj_refr_size.part.0+0x18e>
 8009ac0:	e1c3      	b.n	8009e4a <lv_obj_refr_size.part.0+0x516>
        else if(w_is_pct) {
 8009ac2:	2e00      	cmp	r6, #0
 8009ac4:	d010      	beq.n	8009ae8 <lv_obj_refr_size.part.0+0x1b4>
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8009ac6:	7feb      	ldrb	r3, [r5, #31]
 8009ac8:	075b      	lsls	r3, r3, #29
 8009aca:	d400      	bmi.n	8009ace <lv_obj_refr_size.part.0+0x19a>
 8009acc:	e278      	b.n	8009fc0 <lv_obj_refr_size.part.0+0x68c>
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 8009ace:	23fa      	movs	r3, #250	; 0xfa
 8009ad0:	489a      	ldr	r0, [pc, #616]	; (8009d3c <lv_obj_refr_size.part.0+0x408>)
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4038      	ands	r0, r7
 8009ad6:	4298      	cmp	r0, r3
 8009ad8:	dd00      	ble.n	8009adc <lv_obj_refr_size.part.0+0x1a8>
 8009ada:	e24b      	b.n	8009f74 <lv_obj_refr_size.part.0+0x640>
 8009adc:	465b      	mov	r3, fp
 8009ade:	2164      	movs	r1, #100	; 0x64
 8009ae0:	4358      	muls	r0, r3
 8009ae2:	f7f6 fbab 	bl	800023c <__divsi3>
 8009ae6:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8009ae8:	2202      	movs	r2, #2
 8009aea:	2100      	movs	r1, #0
 8009aec:	0020      	movs	r0, r4
 8009aee:	f002 fd69 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8009af2:	2203      	movs	r2, #3
    return (lv_coord_t)v.num;
 8009af4:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8009af6:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8009af8:	2100      	movs	r1, #0
 8009afa:	0020      	movs	r0, r4
    return (lv_coord_t)v.num;
 8009afc:	4699      	mov	r9, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8009afe:	f002 fd61 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8009b02:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8009b04:	0006      	movs	r6, r0
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 8009b06:	20c0      	movs	r0, #192	; 0xc0
    return (lv_coord_t)v.num;
 8009b08:	469a      	mov	sl, r3
 8009b0a:	4642      	mov	r2, r8
 8009b0c:	2380      	movs	r3, #128	; 0x80
 8009b0e:	01c0      	lsls	r0, r0, #7
 8009b10:	019b      	lsls	r3, r3, #6
 8009b12:	4010      	ands	r0, r2
 8009b14:	4298      	cmp	r0, r3
 8009b16:	d100      	bne.n	8009b1a <lv_obj_refr_size.part.0+0x1e6>
 8009b18:	e0f6      	b.n	8009d08 <lv_obj_refr_size.part.0+0x3d4>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8009b1a:	20c0      	movs	r0, #192	; 0xc0
 8009b1c:	2380      	movs	r3, #128	; 0x80
 8009b1e:	01c0      	lsls	r0, r0, #7
 8009b20:	019b      	lsls	r3, r3, #6
 8009b22:	4006      	ands	r6, r0
 8009b24:	429e      	cmp	r6, r3
 8009b26:	d100      	bne.n	8009b2a <lv_obj_refr_size.part.0+0x1f6>
 8009b28:	e0d9      	b.n	8009cde <lv_obj_refr_size.part.0+0x3aa>
    return LV_CLAMP(min_width, width, max_width);
 8009b2a:	1c3e      	adds	r6, r7, #0
 8009b2c:	4557      	cmp	r7, sl
 8009b2e:	dd00      	ble.n	8009b32 <lv_obj_refr_size.part.0+0x1fe>
 8009b30:	4656      	mov	r6, sl
 8009b32:	b233      	sxth	r3, r6
 8009b34:	454b      	cmp	r3, r9
 8009b36:	da00      	bge.n	8009b3a <lv_obj_refr_size.part.0+0x206>
 8009b38:	464e      	mov	r6, r9
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8009b3a:	0020      	movs	r0, r4
 8009b3c:	f001 f838 	bl	800abb0 <lv_obj_get_scroll_top>
    if(obj->h_layout) {
 8009b40:	7fe3      	ldrb	r3, [r4, #31]
    return LV_CLAMP(min_width, width, max_width);
 8009b42:	b236      	sxth	r6, r6
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8009b44:	9002      	str	r0, [sp, #8]
    if(obj->h_layout) {
 8009b46:	079b      	lsls	r3, r3, #30
 8009b48:	d500      	bpl.n	8009b4c <lv_obj_refr_size.part.0+0x218>
 8009b4a:	e717      	b.n	800997c <lv_obj_refr_size.part.0+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8009b4c:	2204      	movs	r2, #4
 8009b4e:	2100      	movs	r1, #0
 8009b50:	0020      	movs	r0, r4
 8009b52:	f002 fd37 	bl	800c5c4 <lv_obj_get_style_prop>
        h_is_content = h == LV_SIZE_CONTENT ? true : false;
 8009b56:	4b77      	ldr	r3, [pc, #476]	; (8009d34 <lv_obj_refr_size.part.0+0x400>)
    return (lv_coord_t)v.num;
 8009b58:	b207      	sxth	r7, r0
 8009b5a:	18fb      	adds	r3, r7, r3
 8009b5c:	425a      	negs	r2, r3
 8009b5e:	4153      	adcs	r3, r2
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	9303      	str	r3, [sp, #12]
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8009b64:	23c0      	movs	r3, #192	; 0xc0
 8009b66:	01db      	lsls	r3, r3, #7
 8009b68:	2200      	movs	r2, #0
 8009b6a:	4018      	ands	r0, r3
 8009b6c:	2380      	movs	r3, #128	; 0x80
 8009b6e:	4692      	mov	sl, r2
 8009b70:	019b      	lsls	r3, r3, #6
 8009b72:	4298      	cmp	r0, r3
 8009b74:	d079      	beq.n	8009c6a <lv_obj_refr_size.part.0+0x336>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8009b76:	2210      	movs	r2, #16
 8009b78:	2100      	movs	r1, #0
 8009b7a:	0028      	movs	r0, r5
 8009b7c:	f002 fd22 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8009b80:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8009b82:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8009b84:	2100      	movs	r1, #0
 8009b86:	0028      	movs	r0, r5
 8009b88:	f002 fd1c 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009b8c:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8009b8e:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009b90:	2100      	movs	r1, #0
 8009b92:	0028      	movs	r0, r5
 8009b94:	f002 fd16 	bl	800c5c4 <lv_obj_get_style_prop>
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8009b98:	4642      	mov	r2, r8
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	444a      	add	r2, r9
 8009b9e:	0040      	lsls	r0, r0, #1
 8009ba0:	1a9b      	subs	r3, r3, r2
 8009ba2:	1a1b      	subs	r3, r3, r0
 8009ba4:	8ae8      	ldrh	r0, [r5, #22]
 8009ba6:	181b      	adds	r3, r3, r0
 8009ba8:	8a68      	ldrh	r0, [r5, #18]
 8009baa:	1a18      	subs	r0, r3, r0
 8009bac:	b203      	sxth	r3, r0
 8009bae:	9304      	str	r3, [sp, #16]
        if(h_is_content) {
 8009bb0:	4b61      	ldr	r3, [pc, #388]	; (8009d38 <lv_obj_refr_size.part.0+0x404>)
 8009bb2:	4698      	mov	r8, r3
 8009bb4:	429f      	cmp	r7, r3
 8009bb6:	d100      	bne.n	8009bba <lv_obj_refr_size.part.0+0x286>
 8009bb8:	e0c2      	b.n	8009d40 <lv_obj_refr_size.part.0+0x40c>
        else if(h_is_pct) {
 8009bba:	4653      	mov	r3, sl
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d010      	beq.n	8009be2 <lv_obj_refr_size.part.0+0x2ae>
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8009bc0:	7feb      	ldrb	r3, [r5, #31]
 8009bc2:	079b      	lsls	r3, r3, #30
 8009bc4:	d400      	bmi.n	8009bc8 <lv_obj_refr_size.part.0+0x294>
 8009bc6:	e1d9      	b.n	8009f7c <lv_obj_refr_size.part.0+0x648>
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 8009bc8:	23fa      	movs	r3, #250	; 0xfa
 8009bca:	485c      	ldr	r0, [pc, #368]	; (8009d3c <lv_obj_refr_size.part.0+0x408>)
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4038      	ands	r0, r7
 8009bd0:	4298      	cmp	r0, r3
 8009bd2:	dd00      	ble.n	8009bd6 <lv_obj_refr_size.part.0+0x2a2>
 8009bd4:	e1d0      	b.n	8009f78 <lv_obj_refr_size.part.0+0x644>
 8009bd6:	9b04      	ldr	r3, [sp, #16]
 8009bd8:	2164      	movs	r1, #100	; 0x64
 8009bda:	4358      	muls	r0, r3
 8009bdc:	f7f6 fb2e 	bl	800023c <__divsi3>
 8009be0:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8009be2:	2205      	movs	r2, #5
 8009be4:	2100      	movs	r1, #0
 8009be6:	0020      	movs	r0, r4
 8009be8:	f002 fcec 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8009bec:	2206      	movs	r2, #6
    return (lv_coord_t)v.num;
 8009bee:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8009bf0:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	0020      	movs	r0, r4
    return (lv_coord_t)v.num;
 8009bf6:	469a      	mov	sl, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8009bf8:	f002 fce4 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8009bfc:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8009bfe:	4680      	mov	r8, r0
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 8009c00:	20c0      	movs	r0, #192	; 0xc0
    return (lv_coord_t)v.num;
 8009c02:	469b      	mov	fp, r3
 8009c04:	464a      	mov	r2, r9
 8009c06:	2380      	movs	r3, #128	; 0x80
 8009c08:	01c0      	lsls	r0, r0, #7
 8009c0a:	019b      	lsls	r3, r3, #6
 8009c0c:	4010      	ands	r0, r2
 8009c0e:	4298      	cmp	r0, r3
 8009c10:	d051      	beq.n	8009cb6 <lv_obj_refr_size.part.0+0x382>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8009c12:	20c0      	movs	r0, #192	; 0xc0
 8009c14:	2380      	movs	r3, #128	; 0x80
 8009c16:	4642      	mov	r2, r8
 8009c18:	01c0      	lsls	r0, r0, #7
 8009c1a:	019b      	lsls	r3, r3, #6
 8009c1c:	4002      	ands	r2, r0
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d035      	beq.n	8009c8e <lv_obj_refr_size.part.0+0x35a>
    return LV_CLAMP(min_width, width, max_width);
 8009c22:	1c3b      	adds	r3, r7, #0
 8009c24:	455f      	cmp	r7, fp
 8009c26:	dd00      	ble.n	8009c2a <lv_obj_refr_size.part.0+0x2f6>
 8009c28:	465b      	mov	r3, fp
 8009c2a:	1c1f      	adds	r7, r3, #0
 8009c2c:	b21b      	sxth	r3, r3
 8009c2e:	4553      	cmp	r3, sl
 8009c30:	da00      	bge.n	8009c34 <lv_obj_refr_size.part.0+0x300>
 8009c32:	4657      	mov	r7, sl
    if(w_is_content || h_is_content) {
 8009c34:	9a00      	ldr	r2, [sp, #0]
 8009c36:	9b03      	ldr	r3, [sp, #12]
    return LV_CLAMP(min_width, width, max_width);
 8009c38:	b23f      	sxth	r7, r7
    if(w_is_content || h_is_content) {
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	9b00      	ldr	r3, [sp, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d100      	bne.n	8009c46 <lv_obj_refr_size.part.0+0x312>
 8009c44:	e6a3      	b.n	800998e <lv_obj_refr_size.part.0+0x5a>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 8009c46:	2300      	movs	r3, #0
 8009c48:	0020      	movs	r0, r4
 8009c4a:	9a02      	ldr	r2, [sp, #8]
 8009c4c:	9901      	ldr	r1, [sp, #4]
 8009c4e:	f002 f86d 	bl	800bd2c <lv_obj_scroll_to>
 8009c52:	e69c      	b.n	800998e <lv_obj_refr_size.part.0+0x5a>
    if(parent == NULL) return false;
 8009c54:	2000      	movs	r0, #0
 8009c56:	e6f6      	b.n	8009a46 <lv_obj_refr_size.part.0+0x112>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8009c58:	8aa3      	ldrh	r3, [r4, #20]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	1b9e      	subs	r6, r3, r6
 8009c5e:	8226      	strh	r6, [r4, #16]
 8009c60:	e6ce      	b.n	8009a00 <lv_obj_refr_size.part.0+0xcc>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 8009c62:	0028      	movs	r0, r5
 8009c64:	f002 f934 	bl	800bed0 <lv_obj_scrollbar_invalidate>
 8009c68:	e6b9      	b.n	80099de <lv_obj_refr_size.part.0+0xaa>
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8009c6a:	22fa      	movs	r2, #250	; 0xfa
 8009c6c:	4650      	mov	r0, sl
 8009c6e:	4b33      	ldr	r3, [pc, #204]	; (8009d3c <lv_obj_refr_size.part.0+0x408>)
 8009c70:	00d2      	lsls	r2, r2, #3
 8009c72:	403b      	ands	r3, r7
 8009c74:	0fd9      	lsrs	r1, r3, #31
 8009c76:	429a      	cmp	r2, r3
 8009c78:	4148      	adcs	r0, r1
 8009c7a:	4682      	mov	sl, r0
 8009c7c:	e77b      	b.n	8009b76 <lv_obj_refr_size.part.0+0x242>
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8009c7e:	22fa      	movs	r2, #250	; 0xfa
 8009c80:	4b2e      	ldr	r3, [pc, #184]	; (8009d3c <lv_obj_refr_size.part.0+0x408>)
 8009c82:	00d2      	lsls	r2, r2, #3
 8009c84:	403b      	ands	r3, r7
 8009c86:	0fd9      	lsrs	r1, r3, #31
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	414e      	adcs	r6, r1
 8009c8c:	e6f7      	b.n	8009a7e <lv_obj_refr_size.part.0+0x14a>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8009c8e:	465b      	mov	r3, fp
 8009c90:	482a      	ldr	r0, [pc, #168]	; (8009d3c <lv_obj_refr_size.part.0+0x408>)
 8009c92:	4018      	ands	r0, r3
 8009c94:	23fa      	movs	r3, #250	; 0xfa
 8009c96:	00db      	lsls	r3, r3, #3
 8009c98:	4298      	cmp	r0, r3
 8009c9a:	dcc2      	bgt.n	8009c22 <lv_obj_refr_size.part.0+0x2ee>
 8009c9c:	23fa      	movs	r3, #250	; 0xfa
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4298      	cmp	r0, r3
 8009ca2:	dd00      	ble.n	8009ca6 <lv_obj_refr_size.part.0+0x372>
 8009ca4:	1a18      	subs	r0, r3, r0
 8009ca6:	9b04      	ldr	r3, [sp, #16]
 8009ca8:	2164      	movs	r1, #100	; 0x64
 8009caa:	4358      	muls	r0, r3
 8009cac:	f7f6 fac6 	bl	800023c <__divsi3>
 8009cb0:	b203      	sxth	r3, r0
 8009cb2:	469b      	mov	fp, r3
 8009cb4:	e7b5      	b.n	8009c22 <lv_obj_refr_size.part.0+0x2ee>
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 8009cb6:	4653      	mov	r3, sl
 8009cb8:	4820      	ldr	r0, [pc, #128]	; (8009d3c <lv_obj_refr_size.part.0+0x408>)
 8009cba:	4018      	ands	r0, r3
 8009cbc:	23fa      	movs	r3, #250	; 0xfa
 8009cbe:	00db      	lsls	r3, r3, #3
 8009cc0:	4298      	cmp	r0, r3
 8009cc2:	dca6      	bgt.n	8009c12 <lv_obj_refr_size.part.0+0x2de>
 8009cc4:	23fa      	movs	r3, #250	; 0xfa
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4298      	cmp	r0, r3
 8009cca:	dd00      	ble.n	8009cce <lv_obj_refr_size.part.0+0x39a>
 8009ccc:	1a18      	subs	r0, r3, r0
 8009cce:	9b04      	ldr	r3, [sp, #16]
 8009cd0:	2164      	movs	r1, #100	; 0x64
 8009cd2:	4358      	muls	r0, r3
 8009cd4:	f7f6 fab2 	bl	800023c <__divsi3>
 8009cd8:	b203      	sxth	r3, r0
 8009cda:	469a      	mov	sl, r3
 8009cdc:	e799      	b.n	8009c12 <lv_obj_refr_size.part.0+0x2de>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8009cde:	4653      	mov	r3, sl
 8009ce0:	4816      	ldr	r0, [pc, #88]	; (8009d3c <lv_obj_refr_size.part.0+0x408>)
 8009ce2:	4018      	ands	r0, r3
 8009ce4:	23fa      	movs	r3, #250	; 0xfa
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	4298      	cmp	r0, r3
 8009cea:	dd00      	ble.n	8009cee <lv_obj_refr_size.part.0+0x3ba>
 8009cec:	e71d      	b.n	8009b2a <lv_obj_refr_size.part.0+0x1f6>
 8009cee:	23fa      	movs	r3, #250	; 0xfa
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4298      	cmp	r0, r3
 8009cf4:	dd00      	ble.n	8009cf8 <lv_obj_refr_size.part.0+0x3c4>
 8009cf6:	1a18      	subs	r0, r3, r0
 8009cf8:	465b      	mov	r3, fp
 8009cfa:	2164      	movs	r1, #100	; 0x64
 8009cfc:	4358      	muls	r0, r3
 8009cfe:	f7f6 fa9d 	bl	800023c <__divsi3>
 8009d02:	b203      	sxth	r3, r0
 8009d04:	469a      	mov	sl, r3
 8009d06:	e710      	b.n	8009b2a <lv_obj_refr_size.part.0+0x1f6>
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 8009d08:	464b      	mov	r3, r9
 8009d0a:	480c      	ldr	r0, [pc, #48]	; (8009d3c <lv_obj_refr_size.part.0+0x408>)
 8009d0c:	4018      	ands	r0, r3
 8009d0e:	23fa      	movs	r3, #250	; 0xfa
 8009d10:	00db      	lsls	r3, r3, #3
 8009d12:	4298      	cmp	r0, r3
 8009d14:	dd00      	ble.n	8009d18 <lv_obj_refr_size.part.0+0x3e4>
 8009d16:	e700      	b.n	8009b1a <lv_obj_refr_size.part.0+0x1e6>
 8009d18:	23fa      	movs	r3, #250	; 0xfa
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4298      	cmp	r0, r3
 8009d1e:	dd00      	ble.n	8009d22 <lv_obj_refr_size.part.0+0x3ee>
 8009d20:	1a18      	subs	r0, r3, r0
 8009d22:	465b      	mov	r3, fp
 8009d24:	2164      	movs	r1, #100	; 0x64
 8009d26:	4358      	muls	r0, r3
 8009d28:	f7f6 fa88 	bl	800023c <__divsi3>
 8009d2c:	b203      	sxth	r3, r0
 8009d2e:	4699      	mov	r9, r3
 8009d30:	e6f3      	b.n	8009b1a <lv_obj_refr_size.part.0+0x1e6>
 8009d32:	46c0      	nop			; (mov r8, r8)
 8009d34:	ffffd82f 	.word	0xffffd82f
 8009d38:	000027d1 	.word	0x000027d1
 8009d3c:	ffff9fff 	.word	0xffff9fff
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 8009d40:	2200      	movs	r2, #0
 8009d42:	2100      	movs	r1, #0
 8009d44:	0020      	movs	r0, r4
 8009d46:	f002 f841 	bl	800bdcc <lv_obj_scroll_to_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009d4a:	2232      	movs	r2, #50	; 0x32
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	0020      	movs	r0, r4
 8009d50:	f002 fc38 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8009d54:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009d56:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8009d58:	2100      	movs	r1, #0
 8009d5a:	0020      	movs	r0, r4
 8009d5c:	f002 fc32 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8009d60:	b2bf      	uxth	r7, r7
 8009d62:	1838      	adds	r0, r7, r0
 8009d64:	b202      	sxth	r2, r0
 8009d66:	b283      	uxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8009d68:	2100      	movs	r1, #0
 8009d6a:	9207      	str	r2, [sp, #28]
 8009d6c:	0020      	movs	r0, r4
 8009d6e:	2211      	movs	r2, #17
 8009d70:	9306      	str	r3, [sp, #24]
 8009d72:	f002 fc27 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8009d76:	183f      	adds	r7, r7, r0
    lv_point_t p = {LV_COORD_MIN, 0};
 8009d78:	4bc1      	ldr	r3, [pc, #772]	; (800a080 <lv_obj_refr_size.part.0+0x74c>)
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8009d7a:	b2ba      	uxth	r2, r7
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8009d7c:	af0a      	add	r7, sp, #40	; 0x28
 8009d7e:	212c      	movs	r1, #44	; 0x2c
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8009d80:	9205      	str	r2, [sp, #20]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8009d82:	0020      	movs	r0, r4
 8009d84:	003a      	movs	r2, r7
    lv_point_t p = {LV_COORD_MIN, 0};
 8009d86:	930a      	str	r3, [sp, #40]	; 0x28
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8009d88:	f7fa ff52 	bl	8004c30 <lv_event_send>
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8009d8c:	9a05      	ldr	r2, [sp, #20]
    return p.y;
 8009d8e:	2102      	movs	r1, #2
 8009d90:	5e78      	ldrsh	r0, [r7, r1]
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8009d92:	4694      	mov	ip, r2
 8009d94:	9f06      	ldr	r7, [sp, #24]
 8009d96:	4467      	add	r7, ip
 8009d98:	183f      	adds	r7, r7, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009d9a:	0020      	movs	r0, r4
 8009d9c:	f004 f854 	bl	800de48 <lv_obj_get_child_cnt>
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8009da0:	b23f      	sxth	r7, r7
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009da2:	4683      	mov	fp, r0
    for(i = 0; i < child_cnt; i++) {
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d100      	bne.n	8009daa <lv_obj_refr_size.part.0+0x476>
 8009da8:	e71b      	b.n	8009be2 <lv_obj_refr_size.part.0+0x2ae>
    lv_coord_t child_res = LV_COORD_MIN;
 8009daa:	4bb6      	ldr	r3, [pc, #728]	; (800a084 <lv_obj_refr_size.part.0+0x750>)
            switch(align) {
 8009dac:	46b1      	mov	r9, r6
    lv_coord_t child_res = LV_COORD_MIN;
 8009dae:	469a      	mov	sl, r3
    for(i = 0; i < child_cnt; i++) {
 8009db0:	2300      	movs	r3, #0
 8009db2:	4698      	mov	r8, r3
            switch(align) {
 8009db4:	4653      	mov	r3, sl
 8009db6:	0026      	movs	r6, r4
 8009db8:	46ba      	mov	sl, r7
 8009dba:	4644      	mov	r4, r8
 8009dbc:	001f      	movs	r7, r3
 8009dbe:	46a8      	mov	r8, r5
        lv_obj_t * child = obj->spec_attr->children[i];
 8009dc0:	68b3      	ldr	r3, [r6, #8]
 8009dc2:	00a2      	lsls	r2, r4, #2
 8009dc4:	681b      	ldr	r3, [r3, #0]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009dc6:	49b0      	ldr	r1, [pc, #704]	; (800a088 <lv_obj_refr_size.part.0+0x754>)
        lv_obj_t * child = obj->spec_attr->children[i];
 8009dc8:	58d5      	ldr	r5, [r2, r3]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009dca:	0028      	movs	r0, r5
 8009dcc:	f7fe f8aa 	bl	8007f24 <lv_obj_has_flag_any>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d123      	bne.n	8009e1c <lv_obj_refr_size.part.0+0x4e8>
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8009dd4:	0028      	movs	r0, r5
 8009dd6:	49ad      	ldr	r1, [pc, #692]	; (800a08c <lv_obj_refr_size.part.0+0x758>)
 8009dd8:	f7fe f8a4 	bl	8007f24 <lv_obj_has_flag_any>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d10a      	bne.n	8009df6 <lv_obj_refr_size.part.0+0x4c2>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8009de0:	0028      	movs	r0, r5
 8009de2:	f004 f81b 	bl	800de1c <lv_obj_get_parent>
    if(parent == NULL) return false;
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d005      	beq.n	8009df6 <lv_obj_refr_size.part.0+0x4c2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8009dea:	220a      	movs	r2, #10
 8009dec:	2100      	movs	r1, #0
 8009dee:	f002 fbe9 	bl	800c5c4 <lv_obj_get_style_prop>
    if(layout) return true;
 8009df2:	0400      	lsls	r0, r0, #16
 8009df4:	d108      	bne.n	8009e08 <lv_obj_refr_size.part.0+0x4d4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8009df6:	2209      	movs	r2, #9
 8009df8:	2100      	movs	r1, #0
 8009dfa:	0028      	movs	r0, r5
 8009dfc:	f002 fbe2 	bl	800c5c4 <lv_obj_get_style_prop>
            switch(align) {
 8009e00:	23fc      	movs	r3, #252	; 0xfc
 8009e02:	4203      	tst	r3, r0
 8009e04:	d000      	beq.n	8009e08 <lv_obj_refr_size.part.0+0x4d4>
 8009e06:	e112      	b.n	800a02e <lv_obj_refr_size.part.0+0x6fa>
                    child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8009e08:	2216      	movs	r2, #22
 8009e0a:	5eab      	ldrsh	r3, [r5, r2]
 8009e0c:	2112      	movs	r1, #18
 8009e0e:	5e72      	ldrsh	r2, [r6, r1]
 8009e10:	1a9b      	subs	r3, r3, r2
 8009e12:	3301      	adds	r3, #1
 8009e14:	42bb      	cmp	r3, r7
 8009e16:	da00      	bge.n	8009e1a <lv_obj_refr_size.part.0+0x4e6>
 8009e18:	003b      	movs	r3, r7
 8009e1a:	b21f      	sxth	r7, r3
    for(i = 0; i < child_cnt; i++) {
 8009e1c:	3401      	adds	r4, #1
 8009e1e:	45a3      	cmp	fp, r4
 8009e20:	d1ce      	bne.n	8009dc0 <lv_obj_refr_size.part.0+0x48c>
    if(child_res != LV_COORD_MIN) {
 8009e22:	003b      	movs	r3, r7
 8009e24:	4657      	mov	r7, sl
 8009e26:	469a      	mov	sl, r3
 8009e28:	4b96      	ldr	r3, [pc, #600]	; (800a084 <lv_obj_refr_size.part.0+0x750>)
 8009e2a:	0034      	movs	r4, r6
 8009e2c:	4645      	mov	r5, r8
 8009e2e:	464e      	mov	r6, r9
 8009e30:	459a      	cmp	sl, r3
 8009e32:	d100      	bne.n	8009e36 <lv_obj_refr_size.part.0+0x502>
 8009e34:	e6d5      	b.n	8009be2 <lv_obj_refr_size.part.0+0x2ae>
        child_res += pad_bottom;
 8009e36:	9b05      	ldr	r3, [sp, #20]
 8009e38:	4453      	add	r3, sl
 8009e3a:	b29b      	uxth	r3, r3
        return LV_MAX(child_res, self_h);
 8009e3c:	1c1a      	adds	r2, r3, #0
 8009e3e:	b21b      	sxth	r3, r3
 8009e40:	42bb      	cmp	r3, r7
 8009e42:	da00      	bge.n	8009e46 <lv_obj_refr_size.part.0+0x512>
 8009e44:	1c3a      	adds	r2, r7, #0
 8009e46:	b217      	sxth	r7, r2
 8009e48:	e6cb      	b.n	8009be2 <lv_obj_refr_size.part.0+0x2ae>
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	0020      	movs	r0, r4
 8009e50:	f001 ffa0 	bl	800bd94 <lv_obj_scroll_to_x>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009e54:	2232      	movs	r2, #50	; 0x32
 8009e56:	2100      	movs	r1, #0
 8009e58:	0020      	movs	r0, r4
 8009e5a:	f002 fbb3 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8009e5e:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009e60:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8009e62:	2100      	movs	r1, #0
 8009e64:	0020      	movs	r0, r4
 8009e66:	f002 fbad 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8009e6a:	b2b6      	uxth	r6, r6
 8009e6c:	1830      	adds	r0, r6, r0
 8009e6e:	b287      	uxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8009e70:	2212      	movs	r2, #18
 8009e72:	2100      	movs	r1, #0
 8009e74:	0020      	movs	r0, r4
 8009e76:	9703      	str	r7, [sp, #12]
 8009e78:	f002 fba4 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8009e7c:	1836      	adds	r6, r6, r0
 8009e7e:	b2b3      	uxth	r3, r6
 8009e80:	9302      	str	r3, [sp, #8]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8009e82:	ae0a      	add	r6, sp, #40	; 0x28
    lv_point_t p = {0, LV_COORD_MIN};
 8009e84:	4b82      	ldr	r3, [pc, #520]	; (800a090 <lv_obj_refr_size.part.0+0x75c>)
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8009e86:	0032      	movs	r2, r6
 8009e88:	212c      	movs	r1, #44	; 0x2c
 8009e8a:	0020      	movs	r0, r4
    lv_point_t p = {0, LV_COORD_MIN};
 8009e8c:	930a      	str	r3, [sp, #40]	; 0x28
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8009e8e:	f7fa fecf 	bl	8004c30 <lv_event_send>
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8009e92:	9b02      	ldr	r3, [sp, #8]
    return p.x;
 8009e94:	2200      	movs	r2, #0
 8009e96:	5eb0      	ldrsh	r0, [r6, r2]
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8009e98:	469c      	mov	ip, r3
 8009e9a:	4467      	add	r7, ip
 8009e9c:	183f      	adds	r7, r7, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009e9e:	0020      	movs	r0, r4
 8009ea0:	f003 ffd2 	bl	800de48 <lv_obj_get_child_cnt>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8009ea4:	2216      	movs	r2, #22
 8009ea6:	4682      	mov	sl, r0
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	0020      	movs	r0, r4
 8009eac:	f002 fb8a 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8009eb0:	b2c0      	uxtb	r0, r0
        for(i = 0; i < child_cnt; i++) {
 8009eb2:	4653      	mov	r3, sl
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8009eb4:	b23f      	sxth	r7, r7
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8009eb6:	2801      	cmp	r0, #1
 8009eb8:	d100      	bne.n	8009ebc <lv_obj_refr_size.part.0+0x588>
 8009eba:	e0d2      	b.n	800a062 <lv_obj_refr_size.part.0+0x72e>
        for(i = 0; i < child_cnt; i++) {
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d100      	bne.n	8009ec2 <lv_obj_refr_size.part.0+0x58e>
 8009ec0:	e612      	b.n	8009ae8 <lv_obj_refr_size.part.0+0x1b4>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8009ec2:	466b      	mov	r3, sp
 8009ec4:	2208      	movs	r2, #8
 8009ec6:	5e9b      	ldrsh	r3, [r3, r2]
 8009ec8:	46a8      	mov	r8, r5
 8009eca:	9304      	str	r3, [sp, #16]
    lv_coord_t child_res = LV_COORD_MIN;
 8009ecc:	4b6d      	ldr	r3, [pc, #436]	; (800a084 <lv_obj_refr_size.part.0+0x750>)
 8009ece:	46b9      	mov	r9, r7
        for(i = 0; i < child_cnt; i++) {
 8009ed0:	2600      	movs	r6, #0
 8009ed2:	0025      	movs	r5, r4
 8009ed4:	001f      	movs	r7, r3
 8009ed6:	e019      	b.n	8009f0c <lv_obj_refr_size.part.0+0x5d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8009ed8:	2208      	movs	r2, #8
 8009eda:	2100      	movs	r1, #0
 8009edc:	0020      	movs	r0, r4
 8009ede:	f002 fb71 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8009ee2:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_y(child, 0) == 0) {
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d10e      	bne.n	8009f06 <lv_obj_refr_size.part.0+0x5d2>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 8009ee8:	9904      	ldr	r1, [sp, #16]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009eea:	8aa3      	ldrh	r3, [r4, #20]
 8009eec:	468c      	mov	ip, r1
 8009eee:	8a22      	ldrh	r2, [r4, #16]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	1a9b      	subs	r3, r3, r2
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	b21b      	sxth	r3, r3
 8009ef8:	4463      	add	r3, ip
 8009efa:	429f      	cmp	r7, r3
 8009efc:	dc03      	bgt.n	8009f06 <lv_obj_refr_size.part.0+0x5d2>
 8009efe:	9b02      	ldr	r3, [sp, #8]
 8009f00:	469c      	mov	ip, r3
 8009f02:	4462      	add	r2, ip
 8009f04:	b217      	sxth	r7, r2
        for(i = 0; i < child_cnt; i++) {
 8009f06:	3601      	adds	r6, #1
 8009f08:	45b2      	cmp	sl, r6
 8009f0a:	d07a      	beq.n	800a002 <lv_obj_refr_size.part.0+0x6ce>
            lv_obj_t * child = obj->spec_attr->children[i];
 8009f0c:	68ab      	ldr	r3, [r5, #8]
 8009f0e:	00b2      	lsls	r2, r6, #2
 8009f10:	681b      	ldr	r3, [r3, #0]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009f12:	495d      	ldr	r1, [pc, #372]	; (800a088 <lv_obj_refr_size.part.0+0x754>)
            lv_obj_t * child = obj->spec_attr->children[i];
 8009f14:	58d4      	ldr	r4, [r2, r3]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009f16:	0020      	movs	r0, r4
 8009f18:	f7fe f804 	bl	8007f24 <lv_obj_has_flag_any>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d1f2      	bne.n	8009f06 <lv_obj_refr_size.part.0+0x5d2>
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8009f20:	0020      	movs	r0, r4
 8009f22:	495a      	ldr	r1, [pc, #360]	; (800a08c <lv_obj_refr_size.part.0+0x758>)
 8009f24:	f7fd fffe 	bl	8007f24 <lv_obj_has_flag_any>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d10a      	bne.n	8009f42 <lv_obj_refr_size.part.0+0x60e>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8009f2c:	0020      	movs	r0, r4
 8009f2e:	f003 ff75 	bl	800de1c <lv_obj_get_parent>
    if(parent == NULL) return false;
 8009f32:	2800      	cmp	r0, #0
 8009f34:	d005      	beq.n	8009f42 <lv_obj_refr_size.part.0+0x60e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8009f36:	220a      	movs	r2, #10
 8009f38:	2100      	movs	r1, #0
 8009f3a:	f002 fb43 	bl	800c5c4 <lv_obj_get_style_prop>
    if(layout) return true;
 8009f3e:	0400      	lsls	r0, r0, #16
 8009f40:	d10d      	bne.n	8009f5e <lv_obj_refr_size.part.0+0x62a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8009f42:	2209      	movs	r2, #9
 8009f44:	2100      	movs	r1, #0
 8009f46:	0020      	movs	r0, r4
 8009f48:	f002 fb3c 	bl	800c5c4 <lv_obj_get_style_prop>
                switch(align) {
 8009f4c:	23ff      	movs	r3, #255	; 0xff
 8009f4e:	4018      	ands	r0, r3
 8009f50:	2807      	cmp	r0, #7
 8009f52:	d8c1      	bhi.n	8009ed8 <lv_obj_refr_size.part.0+0x5a4>
 8009f54:	3bfe      	subs	r3, #254	; 0xfe
 8009f56:	4083      	lsls	r3, r0
 8009f58:	2293      	movs	r2, #147	; 0x93
 8009f5a:	421a      	tst	r2, r3
 8009f5c:	d0bc      	beq.n	8009ed8 <lv_obj_refr_size.part.0+0x5a4>
                        child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8009f5e:	2214      	movs	r2, #20
 8009f60:	5ea3      	ldrsh	r3, [r4, r2]
 8009f62:	2110      	movs	r1, #16
 8009f64:	5e6a      	ldrsh	r2, [r5, r1]
 8009f66:	1a9b      	subs	r3, r3, r2
 8009f68:	3301      	adds	r3, #1
 8009f6a:	42bb      	cmp	r3, r7
 8009f6c:	da00      	bge.n	8009f70 <lv_obj_refr_size.part.0+0x63c>
 8009f6e:	003b      	movs	r3, r7
 8009f70:	b21f      	sxth	r7, r3
                        break;
 8009f72:	e7c8      	b.n	8009f06 <lv_obj_refr_size.part.0+0x5d2>
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 8009f74:	1a18      	subs	r0, r3, r0
 8009f76:	e5b1      	b.n	8009adc <lv_obj_refr_size.part.0+0x1a8>
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 8009f78:	1a18      	subs	r0, r3, r0
 8009f7a:	e62c      	b.n	8009bd6 <lv_obj_refr_size.part.0+0x2a2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8009f7c:	2204      	movs	r2, #4
 8009f7e:	2100      	movs	r1, #0
 8009f80:	0028      	movs	r0, r5
 8009f82:	f002 fb1f 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8009f86:	b200      	sxth	r0, r0
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8009f88:	4540      	cmp	r0, r8
 8009f8a:	d000      	beq.n	8009f8e <lv_obj_refr_size.part.0+0x65a>
 8009f8c:	e61c      	b.n	8009bc8 <lv_obj_refr_size.part.0+0x294>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009f8e:	2232      	movs	r2, #50	; 0x32
 8009f90:	2100      	movs	r1, #0
 8009f92:	0020      	movs	r0, r4
 8009f94:	f002 fb16 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8009f98:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009f9a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	0020      	movs	r0, r4
 8009fa0:	f002 fb10 	bl	800c5c4 <lv_obj_get_style_prop>
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 8009fa4:	4440      	add	r0, r8
 8009fa6:	b287      	uxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8009fa8:	2211      	movs	r2, #17
 8009faa:	2100      	movs	r1, #0
 8009fac:	0020      	movs	r0, r4
 8009fae:	f002 fb09 	bl	800c5c4 <lv_obj_get_style_prop>
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 8009fb2:	4643      	mov	r3, r8
    return (lv_coord_t)v.num;
 8009fb4:	b200      	sxth	r0, r0
 8009fb6:	b21b      	sxth	r3, r3
 8009fb8:	18c0      	adds	r0, r0, r3
 8009fba:	183f      	adds	r7, r7, r0
 8009fbc:	b23f      	sxth	r7, r7
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8009fbe:	e610      	b.n	8009be2 <lv_obj_refr_size.part.0+0x2ae>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	0028      	movs	r0, r5
 8009fc6:	f002 fafd 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8009fca:	b200      	sxth	r0, r0
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8009fcc:	4540      	cmp	r0, r8
 8009fce:	d000      	beq.n	8009fd2 <lv_obj_refr_size.part.0+0x69e>
 8009fd0:	e57d      	b.n	8009ace <lv_obj_refr_size.part.0+0x19a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009fd2:	2232      	movs	r2, #50	; 0x32
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	0020      	movs	r0, r4
 8009fd8:	f002 faf4 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8009fdc:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009fde:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	0020      	movs	r0, r4
 8009fe4:	f002 faee 	bl	800c5c4 <lv_obj_get_style_prop>
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 8009fe8:	1980      	adds	r0, r0, r6
 8009fea:	b287      	uxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8009fec:	2213      	movs	r2, #19
 8009fee:	2100      	movs	r1, #0
 8009ff0:	0020      	movs	r0, r4
 8009ff2:	f002 fae7 	bl	800c5c4 <lv_obj_get_style_prop>
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 8009ff6:	b236      	sxth	r6, r6
    return (lv_coord_t)v.num;
 8009ff8:	b200      	sxth	r0, r0
 8009ffa:	1986      	adds	r6, r0, r6
 8009ffc:	19bf      	adds	r7, r7, r6
 8009ffe:	b23f      	sxth	r7, r7
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 800a000:	e572      	b.n	8009ae8 <lv_obj_refr_size.part.0+0x1b4>
        if(child_res != LV_COORD_MIN) {
 800a002:	003b      	movs	r3, r7
 800a004:	464f      	mov	r7, r9
 800a006:	4699      	mov	r9, r3
 800a008:	4b1e      	ldr	r3, [pc, #120]	; (800a084 <lv_obj_refr_size.part.0+0x750>)
 800a00a:	002c      	movs	r4, r5
 800a00c:	4645      	mov	r5, r8
 800a00e:	4599      	cmp	r9, r3
 800a010:	d100      	bne.n	800a014 <lv_obj_refr_size.part.0+0x6e0>
 800a012:	e569      	b.n	8009ae8 <lv_obj_refr_size.part.0+0x1b4>
            child_res += pad_right;
 800a014:	9b03      	ldr	r3, [sp, #12]
 800a016:	444b      	add	r3, r9
 800a018:	b21b      	sxth	r3, r3
    if(child_res == LV_COORD_MIN) return self_w;
 800a01a:	4a1a      	ldr	r2, [pc, #104]	; (800a084 <lv_obj_refr_size.part.0+0x750>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d100      	bne.n	800a022 <lv_obj_refr_size.part.0+0x6ee>
 800a020:	e562      	b.n	8009ae8 <lv_obj_refr_size.part.0+0x1b4>
    else return LV_MAX(child_res, self_w);
 800a022:	1c3a      	adds	r2, r7, #0
 800a024:	429f      	cmp	r7, r3
 800a026:	da00      	bge.n	800a02a <lv_obj_refr_size.part.0+0x6f6>
 800a028:	1c1a      	adds	r2, r3, #0
 800a02a:	b217      	sxth	r7, r2
 800a02c:	e55c      	b.n	8009ae8 <lv_obj_refr_size.part.0+0x1b4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 800a02e:	2208      	movs	r2, #8
 800a030:	2100      	movs	r1, #0
 800a032:	0028      	movs	r0, r5
 800a034:	f002 fac6 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800a038:	b200      	sxth	r0, r0
                    if(lv_obj_get_style_y(child, 0) == 0) {
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d000      	beq.n	800a040 <lv_obj_refr_size.part.0+0x70c>
 800a03e:	e6ed      	b.n	8009e1c <lv_obj_refr_size.part.0+0x4e8>
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 800a040:	9907      	ldr	r1, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a042:	8aeb      	ldrh	r3, [r5, #22]
 800a044:	468c      	mov	ip, r1
 800a046:	8a6a      	ldrh	r2, [r5, #18]
 800a048:	3301      	adds	r3, #1
 800a04a:	1a9b      	subs	r3, r3, r2
 800a04c:	b29a      	uxth	r2, r3
 800a04e:	b21b      	sxth	r3, r3
 800a050:	4463      	add	r3, ip
 800a052:	429f      	cmp	r7, r3
 800a054:	dd00      	ble.n	800a058 <lv_obj_refr_size.part.0+0x724>
 800a056:	e6e1      	b.n	8009e1c <lv_obj_refr_size.part.0+0x4e8>
 800a058:	9b06      	ldr	r3, [sp, #24]
 800a05a:	469c      	mov	ip, r3
 800a05c:	4462      	add	r2, ip
 800a05e:	b217      	sxth	r7, r2
 800a060:	e6dc      	b.n	8009e1c <lv_obj_refr_size.part.0+0x4e8>
        for(i = 0; i < child_cnt; i++) {
 800a062:	2b00      	cmp	r3, #0
 800a064:	d100      	bne.n	800a068 <lv_obj_refr_size.part.0+0x734>
 800a066:	e53f      	b.n	8009ae8 <lv_obj_refr_size.part.0+0x1b4>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 800a068:	466b      	mov	r3, sp
 800a06a:	220c      	movs	r2, #12
 800a06c:	5e9b      	ldrsh	r3, [r3, r2]
 800a06e:	46a8      	mov	r8, r5
 800a070:	9304      	str	r3, [sp, #16]
    lv_coord_t child_res = LV_COORD_MIN;
 800a072:	4b04      	ldr	r3, [pc, #16]	; (800a084 <lv_obj_refr_size.part.0+0x750>)
 800a074:	46b9      	mov	r9, r7
        for(i = 0; i < child_cnt; i++) {
 800a076:	2600      	movs	r6, #0
 800a078:	0025      	movs	r5, r4
 800a07a:	001f      	movs	r7, r3
 800a07c:	e024      	b.n	800a0c8 <lv_obj_refr_size.part.0+0x794>
 800a07e:	46c0      	nop			; (mov r8, r8)
 800a080:	0000e001 	.word	0x0000e001
 800a084:	ffffe001 	.word	0xffffe001
 800a088:	00040001 	.word	0x00040001
 800a08c:	00060001 	.word	0x00060001
 800a090:	e0010000 	.word	0xe0010000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 800a094:	2207      	movs	r2, #7
 800a096:	2100      	movs	r1, #0
 800a098:	0020      	movs	r0, r4
 800a09a:	f002 fa93 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800a09e:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_x(child, 0) == 0) {
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	d10e      	bne.n	800a0c2 <lv_obj_refr_size.part.0+0x78e>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 800a0a4:	9904      	ldr	r1, [sp, #16]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a0a6:	8aa3      	ldrh	r3, [r4, #20]
 800a0a8:	468c      	mov	ip, r1
 800a0aa:	8a22      	ldrh	r2, [r4, #16]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	1a9b      	subs	r3, r3, r2
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	b21b      	sxth	r3, r3
 800a0b4:	4463      	add	r3, ip
 800a0b6:	429f      	cmp	r7, r3
 800a0b8:	dc03      	bgt.n	800a0c2 <lv_obj_refr_size.part.0+0x78e>
 800a0ba:	9b03      	ldr	r3, [sp, #12]
 800a0bc:	469c      	mov	ip, r3
 800a0be:	4462      	add	r2, ip
 800a0c0:	b217      	sxth	r7, r2
        for(i = 0; i < child_cnt; i++) {
 800a0c2:	3601      	adds	r6, #1
 800a0c4:	45b2      	cmp	sl, r6
 800a0c6:	d034      	beq.n	800a132 <lv_obj_refr_size.part.0+0x7fe>
            lv_obj_t * child = obj->spec_attr->children[i];
 800a0c8:	68ab      	ldr	r3, [r5, #8]
 800a0ca:	00b2      	lsls	r2, r6, #2
 800a0cc:	681b      	ldr	r3, [r3, #0]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a0ce:	491f      	ldr	r1, [pc, #124]	; (800a14c <lv_obj_refr_size.part.0+0x818>)
            lv_obj_t * child = obj->spec_attr->children[i];
 800a0d0:	58d4      	ldr	r4, [r2, r3]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a0d2:	0020      	movs	r0, r4
 800a0d4:	f7fd ff26 	bl	8007f24 <lv_obj_has_flag_any>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d1f2      	bne.n	800a0c2 <lv_obj_refr_size.part.0+0x78e>
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 800a0dc:	0020      	movs	r0, r4
 800a0de:	491c      	ldr	r1, [pc, #112]	; (800a150 <lv_obj_refr_size.part.0+0x81c>)
 800a0e0:	f7fd ff20 	bl	8007f24 <lv_obj_has_flag_any>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d10a      	bne.n	800a0fe <lv_obj_refr_size.part.0+0x7ca>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800a0e8:	0020      	movs	r0, r4
 800a0ea:	f003 fe97 	bl	800de1c <lv_obj_get_parent>
    if(parent == NULL) return false;
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d005      	beq.n	800a0fe <lv_obj_refr_size.part.0+0x7ca>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 800a0f2:	220a      	movs	r2, #10
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	f002 fa65 	bl	800c5c4 <lv_obj_get_style_prop>
    if(layout) return true;
 800a0fa:	0400      	lsls	r0, r0, #16
 800a0fc:	d10e      	bne.n	800a11c <lv_obj_refr_size.part.0+0x7e8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 800a0fe:	2209      	movs	r2, #9
 800a100:	2100      	movs	r1, #0
 800a102:	0020      	movs	r0, r4
 800a104:	f002 fa5e 	bl	800c5c4 <lv_obj_get_style_prop>
                switch(align) {
 800a108:	23ff      	movs	r3, #255	; 0xff
 800a10a:	4018      	ands	r0, r3
 800a10c:	2808      	cmp	r0, #8
 800a10e:	d8c1      	bhi.n	800a094 <lv_obj_refr_size.part.0+0x760>
 800a110:	224a      	movs	r2, #74	; 0x4a
 800a112:	3bfe      	subs	r3, #254	; 0xfe
 800a114:	4083      	lsls	r3, r0
 800a116:	32ff      	adds	r2, #255	; 0xff
 800a118:	4213      	tst	r3, r2
 800a11a:	d0bb      	beq.n	800a094 <lv_obj_refr_size.part.0+0x760>
                        child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 800a11c:	2214      	movs	r2, #20
 800a11e:	5eab      	ldrsh	r3, [r5, r2]
 800a120:	2110      	movs	r1, #16
 800a122:	5e62      	ldrsh	r2, [r4, r1]
 800a124:	1a9b      	subs	r3, r3, r2
 800a126:	3301      	adds	r3, #1
 800a128:	42bb      	cmp	r3, r7
 800a12a:	da00      	bge.n	800a12e <lv_obj_refr_size.part.0+0x7fa>
 800a12c:	003b      	movs	r3, r7
 800a12e:	b21f      	sxth	r7, r3
                        break;
 800a130:	e7c7      	b.n	800a0c2 <lv_obj_refr_size.part.0+0x78e>
        if(child_res != LV_COORD_MIN) {
 800a132:	003b      	movs	r3, r7
 800a134:	464f      	mov	r7, r9
 800a136:	4699      	mov	r9, r3
 800a138:	4b06      	ldr	r3, [pc, #24]	; (800a154 <lv_obj_refr_size.part.0+0x820>)
 800a13a:	002c      	movs	r4, r5
 800a13c:	4645      	mov	r5, r8
 800a13e:	4599      	cmp	r9, r3
 800a140:	d100      	bne.n	800a144 <lv_obj_refr_size.part.0+0x810>
 800a142:	e4d1      	b.n	8009ae8 <lv_obj_refr_size.part.0+0x1b4>
            child_res += pad_left;
 800a144:	9b02      	ldr	r3, [sp, #8]
 800a146:	444b      	add	r3, r9
 800a148:	b21b      	sxth	r3, r3
 800a14a:	e766      	b.n	800a01a <lv_obj_refr_size.part.0+0x6e6>
 800a14c:	00040001 	.word	0x00040001
 800a150:	00060001 	.word	0x00060001
 800a154:	ffffe001 	.word	0xffffe001

0800a158 <layout_update_core>:
{
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	0005      	movs	r5, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a15c:	f003 fe74 	bl	800de48 <lv_obj_get_child_cnt>
 800a160:	1e06      	subs	r6, r0, #0
    for(i = 0; i < child_cnt; i++) {
 800a162:	d009      	beq.n	800a178 <layout_update_core+0x20>
 800a164:	2400      	movs	r4, #0
        lv_obj_t * child = obj->spec_attr->children[i];
 800a166:	68ab      	ldr	r3, [r5, #8]
 800a168:	00a2      	lsls	r2, r4, #2
 800a16a:	681b      	ldr	r3, [r3, #0]
    for(i = 0; i < child_cnt; i++) {
 800a16c:	3401      	adds	r4, #1
        layout_update_core(child);
 800a16e:	58d0      	ldr	r0, [r2, r3]
 800a170:	f7ff fff2 	bl	800a158 <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 800a174:	42a6      	cmp	r6, r4
 800a176:	d1f6      	bne.n	800a166 <layout_update_core+0xe>
    if(obj->layout_inv == 0) return;
 800a178:	2201      	movs	r2, #1
 800a17a:	7fab      	ldrb	r3, [r5, #30]
 800a17c:	421a      	tst	r2, r3
 800a17e:	d014      	beq.n	800a1aa <layout_update_core+0x52>
    obj->layout_inv = 0;
 800a180:	4393      	bics	r3, r2
 800a182:	77ab      	strb	r3, [r5, #30]
    if(obj->w_layout && obj->h_layout) return false;
 800a184:	2306      	movs	r3, #6
 800a186:	7fea      	ldrb	r2, [r5, #31]
 800a188:	4013      	ands	r3, r2
 800a18a:	2b06      	cmp	r3, #6
 800a18c:	d002      	beq.n	800a194 <layout_update_core+0x3c>
 800a18e:	0028      	movs	r0, r5
 800a190:	f7ff fbd0 	bl	8009934 <lv_obj_refr_size.part.0>
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 800a194:	0028      	movs	r0, r5
 800a196:	4918      	ldr	r1, [pc, #96]	; (800a1f8 <layout_update_core+0xa0>)
 800a198:	f7fd fec4 	bl	8007f24 <lv_obj_has_flag_any>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d005      	beq.n	800a1ac <layout_update_core+0x54>
 800a1a0:	0028      	movs	r0, r5
 800a1a2:	f7ff fa49 	bl	8009638 <lv_obj_refr_pos.part.0>
    if(child_cnt > 0) {
 800a1a6:	2e00      	cmp	r6, #0
 800a1a8:	d10d      	bne.n	800a1c6 <layout_update_core+0x6e>
}
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800a1ac:	0028      	movs	r0, r5
 800a1ae:	f003 fe35 	bl	800de1c <lv_obj_get_parent>
    if(parent == NULL) return false;
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d0f4      	beq.n	800a1a0 <layout_update_core+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 800a1b6:	220a      	movs	r2, #10
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	f002 fa03 	bl	800c5c4 <lv_obj_get_style_prop>
    if(layout) return true;
 800a1be:	0400      	lsls	r0, r0, #16
 800a1c0:	d0ee      	beq.n	800a1a0 <layout_update_core+0x48>
    if(child_cnt > 0) {
 800a1c2:	2e00      	cmp	r6, #0
 800a1c4:	d0f1      	beq.n	800a1aa <layout_update_core+0x52>
 800a1c6:	220a      	movs	r2, #10
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	0028      	movs	r0, r5
 800a1cc:	f002 f9fa 	bl	800c5c4 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 800a1d0:	0400      	lsls	r0, r0, #16
 800a1d2:	0c03      	lsrs	r3, r0, #16
        if(layout_id > 0 && layout_id <= layout_cnt) {
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d0e8      	beq.n	800a1aa <layout_update_core+0x52>
 800a1d8:	4a08      	ldr	r2, [pc, #32]	; (800a1fc <layout_update_core+0xa4>)
 800a1da:	6812      	ldr	r2, [r2, #0]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d3e4      	bcc.n	800a1aa <layout_update_core+0x52>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 800a1e0:	4a07      	ldr	r2, [pc, #28]	; (800a200 <layout_update_core+0xa8>)
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 800a1e2:	0028      	movs	r0, r5
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 800a1e4:	4694      	mov	ip, r2
 800a1e6:	4a07      	ldr	r2, [pc, #28]	; (800a204 <layout_update_core+0xac>)
 800a1e8:	4463      	add	r3, ip
 800a1ea:	6812      	ldr	r2, [r2, #0]
 800a1ec:	00db      	lsls	r3, r3, #3
 800a1ee:	18d3      	adds	r3, r2, r3
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 800a1f0:	6859      	ldr	r1, [r3, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4798      	blx	r3
 800a1f6:	e7d8      	b.n	800a1aa <layout_update_core+0x52>
 800a1f8:	00060001 	.word	0x00060001
 800a1fc:	20000460 	.word	0x20000460
 800a200:	1fffffff 	.word	0x1fffffff
 800a204:	20000634 	.word	0x20000634

0800a208 <lv_obj_align_to>:
{
 800a208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a20a:	4657      	mov	r7, sl
 800a20c:	4645      	mov	r5, r8
 800a20e:	464e      	mov	r6, r9
 800a210:	46de      	mov	lr, fp
 800a212:	b5e0      	push	{r5, r6, r7, lr}
 800a214:	b087      	sub	sp, #28
 800a216:	9301      	str	r3, [sp, #4]
 800a218:	ab10      	add	r3, sp, #64	; 0x40
 800a21a:	4691      	mov	r9, r2
    if(mutex) {
 800a21c:	4fd4      	ldr	r7, [pc, #848]	; (800a570 <lv_obj_align_to+0x368>)
{
 800a21e:	2200      	movs	r2, #0
 800a220:	5e9b      	ldrsh	r3, [r3, r2]
 800a222:	4680      	mov	r8, r0
 800a224:	469a      	mov	sl, r3
    if(mutex) {
 800a226:	783b      	ldrb	r3, [r7, #0]
{
 800a228:	000d      	movs	r5, r1
    if(mutex) {
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d100      	bne.n	800a230 <lv_obj_align_to+0x28>
 800a22e:	e095      	b.n	800a35c <lv_obj_align_to+0x154>
    if(base == NULL) base = lv_obj_get_parent(obj);
 800a230:	2d00      	cmp	r5, #0
 800a232:	d100      	bne.n	800a236 <lv_obj_align_to+0x2e>
 800a234:	e0a9      	b.n	800a38a <lv_obj_align_to+0x182>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800a236:	4640      	mov	r0, r8
 800a238:	f003 fdf0 	bl	800de1c <lv_obj_get_parent>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a23c:	2232      	movs	r2, #50	; 0x32
 800a23e:	2100      	movs	r1, #0
 800a240:	0007      	movs	r7, r0
 800a242:	f002 f9bf 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a246:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a248:	0004      	movs	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a24a:	2100      	movs	r1, #0
 800a24c:	0038      	movs	r0, r7
 800a24e:	f002 f9b9 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + pborder;
 800a252:	b2a4      	uxth	r4, r4
 800a254:	1820      	adds	r0, r4, r0
 800a256:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800a258:	2210      	movs	r2, #16
 800a25a:	2100      	movs	r1, #0
 800a25c:	0038      	movs	r0, r7
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	f002 f9b0 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
 800a264:	1824      	adds	r4, r4, r0
 800a266:	b223      	sxth	r3, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a268:	2232      	movs	r2, #50	; 0x32
 800a26a:	2100      	movs	r1, #0
 800a26c:	0028      	movs	r0, r5
 800a26e:	469b      	mov	fp, r3
 800a270:	f002 f9a8 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a274:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a276:	0004      	movs	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a278:	2100      	movs	r1, #0
 800a27a:	0028      	movs	r0, r5
 800a27c:	f002 f9a2 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_coord_t bleft = lv_obj_get_style_pad_left(base, LV_PART_MAIN) + bborder;
 800a280:	b2a4      	uxth	r4, r4
 800a282:	1820      	adds	r0, r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800a284:	2210      	movs	r2, #16
 800a286:	2100      	movs	r1, #0
 800a288:	b286      	uxth	r6, r0
 800a28a:	0028      	movs	r0, r5
 800a28c:	f002 f99a 	bl	800c5c4 <lv_obj_get_style_prop>
    if(align == LV_ALIGN_DEFAULT) {
 800a290:	464b      	mov	r3, r9
    lv_coord_t btop = lv_obj_get_style_pad_top(base, LV_PART_MAIN) + bborder;
 800a292:	1824      	adds	r4, r4, r0
 800a294:	b2a4      	uxth	r4, r4
    if(align == LV_ALIGN_DEFAULT) {
 800a296:	2b00      	cmp	r3, #0
 800a298:	d006      	beq.n	800a2a8 <lv_obj_align_to+0xa0>
    switch(align) {
 800a29a:	2b15      	cmp	r3, #21
 800a29c:	d900      	bls.n	800a2a0 <lv_obj_align_to+0x98>
 800a29e:	e276      	b.n	800a78e <lv_obj_align_to+0x586>
 800a2a0:	009a      	lsls	r2, r3, #2
 800a2a2:	4bb4      	ldr	r3, [pc, #720]	; (800a574 <lv_obj_align_to+0x36c>)
 800a2a4:	589b      	ldr	r3, [r3, r2]
 800a2a6:	469f      	mov	pc, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800a2a8:	2216      	movs	r2, #22
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	0028      	movs	r0, r5
 800a2ae:	f002 f989 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800a2b2:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(base, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 800a2b4:	2801      	cmp	r0, #1
 800a2b6:	d100      	bne.n	800a2ba <lv_obj_align_to+0xb2>
 800a2b8:	e07f      	b.n	800a3ba <lv_obj_align_to+0x1b2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800a2ba:	2216      	movs	r2, #22
 800a2bc:	2100      	movs	r1, #0
 800a2be:	0038      	movs	r0, r7
 800a2c0:	f002 f980 	bl	800c5c4 <lv_obj_get_style_prop>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 800a2c4:	2210      	movs	r2, #16
 800a2c6:	5eab      	ldrsh	r3, [r5, r2]
 800a2c8:	9a01      	ldr	r2, [sp, #4]
    return (lv_base_dir_t)v.num;
 800a2ca:	b2c0      	uxtb	r0, r0
 800a2cc:	4694      	mov	ip, r2
 800a2ce:	2110      	movs	r1, #16
 800a2d0:	5e7a      	ldrsh	r2, [r7, r1]
 800a2d2:	4463      	add	r3, ip
 800a2d4:	1a9b      	subs	r3, r3, r2
 800a2d6:	4699      	mov	r9, r3
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800a2d8:	2801      	cmp	r0, #1
 800a2da:	d06a      	beq.n	800a3b2 <lv_obj_align_to+0x1aa>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent) - pleft;
 800a2dc:	0038      	movs	r0, r7
 800a2de:	f001 f97f 	bl	800b5e0 <lv_obj_get_scroll_left>
 800a2e2:	9b00      	ldr	r3, [sp, #0]
 800a2e4:	4448      	add	r0, r9
 800a2e6:	1ac0      	subs	r0, r0, r3
 800a2e8:	1836      	adds	r6, r6, r0
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 800a2ea:	2312      	movs	r3, #18
 800a2ec:	5ee8      	ldrsh	r0, [r5, r3]
 800a2ee:	2312      	movs	r3, #18
 800a2f0:	5efd      	ldrsh	r5, [r7, r3]
 800a2f2:	4450      	add	r0, sl
 800a2f4:	1b45      	subs	r5, r0, r5
 800a2f6:	0038      	movs	r0, r7
 800a2f8:	f000 fc5a 	bl	800abb0 <lv_obj_get_scroll_top>
 800a2fc:	465b      	mov	r3, fp
 800a2fe:	1940      	adds	r0, r0, r5
 800a300:	1ac0      	subs	r0, r0, r3
    lv_obj_set_style_align(obj, LV_ALIGN_TOP_LEFT, 0);
 800a302:	2200      	movs	r2, #0
 800a304:	2101      	movs	r1, #1
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 800a306:	1824      	adds	r4, r4, r0
    lv_obj_set_style_align(obj, LV_ALIGN_TOP_LEFT, 0);
 800a308:	4640      	mov	r0, r8
 800a30a:	f003 fa47 	bl	800d79c <lv_obj_set_style_align>
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 800a30e:	2300      	movs	r3, #0
 800a310:	2107      	movs	r1, #7
 800a312:	4640      	mov	r0, r8
 800a314:	aa05      	add	r2, sp, #20
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent) - pleft;
 800a316:	b236      	sxth	r6, r6
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 800a318:	b224      	sxth	r4, r4
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 800a31a:	f002 ffb5 	bl	800d288 <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 800a31e:	2801      	cmp	r0, #1
 800a320:	d038      	beq.n	800a394 <lv_obj_align_to+0x18c>
 800a322:	2800      	cmp	r0, #0
 800a324:	d104      	bne.n	800a330 <lv_obj_align_to+0x128>
        lv_obj_set_style_x(obj, x, 0);
 800a326:	2200      	movs	r2, #0
 800a328:	0031      	movs	r1, r6
 800a32a:	4640      	mov	r0, r8
 800a32c:	f003 fa26 	bl	800d77c <lv_obj_set_style_x>
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 800a330:	2300      	movs	r3, #0
 800a332:	2108      	movs	r1, #8
 800a334:	4640      	mov	r0, r8
 800a336:	aa05      	add	r2, sp, #20
 800a338:	f002 ffa6 	bl	800d288 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 800a33c:	2801      	cmp	r0, #1
 800a33e:	d034      	beq.n	800a3aa <lv_obj_align_to+0x1a2>
 800a340:	2800      	cmp	r0, #0
 800a342:	d104      	bne.n	800a34e <lv_obj_align_to+0x146>
        lv_obj_set_style_y(obj, y, 0);
 800a344:	2200      	movs	r2, #0
 800a346:	0021      	movs	r1, r4
 800a348:	4640      	mov	r0, r8
 800a34a:	f003 fa1f 	bl	800d78c <lv_obj_set_style_y>
}
 800a34e:	b007      	add	sp, #28
 800a350:	bcf0      	pop	{r4, r5, r6, r7}
 800a352:	46bb      	mov	fp, r7
 800a354:	46b2      	mov	sl, r6
 800a356:	46a9      	mov	r9, r5
 800a358:	46a0      	mov	r8, r4
 800a35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mutex = true;
 800a35c:	3301      	adds	r3, #1
 800a35e:	703b      	strb	r3, [r7, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 800a360:	f003 fd2c 	bl	800ddbc <lv_obj_get_screen>
    while(scr->scr_layout_inv) {
 800a364:	7f83      	ldrb	r3, [r0, #30]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 800a366:	0004      	movs	r4, r0
        scr->scr_layout_inv = 0;
 800a368:	2602      	movs	r6, #2
    while(scr->scr_layout_inv) {
 800a36a:	079b      	lsls	r3, r3, #30
 800a36c:	d508      	bpl.n	800a380 <lv_obj_align_to+0x178>
        scr->scr_layout_inv = 0;
 800a36e:	7fa3      	ldrb	r3, [r4, #30]
        layout_update_core(scr);
 800a370:	0020      	movs	r0, r4
        scr->scr_layout_inv = 0;
 800a372:	43b3      	bics	r3, r6
 800a374:	77a3      	strb	r3, [r4, #30]
        layout_update_core(scr);
 800a376:	f7ff feef 	bl	800a158 <layout_update_core>
    while(scr->scr_layout_inv) {
 800a37a:	7fa3      	ldrb	r3, [r4, #30]
 800a37c:	421e      	tst	r6, r3
 800a37e:	d1f6      	bne.n	800a36e <lv_obj_align_to+0x166>
    mutex = false;
 800a380:	2300      	movs	r3, #0
 800a382:	703b      	strb	r3, [r7, #0]
    if(base == NULL) base = lv_obj_get_parent(obj);
 800a384:	2d00      	cmp	r5, #0
 800a386:	d000      	beq.n	800a38a <lv_obj_align_to+0x182>
 800a388:	e755      	b.n	800a236 <lv_obj_align_to+0x2e>
 800a38a:	4640      	mov	r0, r8
 800a38c:	f003 fd46 	bl	800de1c <lv_obj_get_parent>
 800a390:	0005      	movs	r5, r0
 800a392:	e750      	b.n	800a236 <lv_obj_align_to+0x2e>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 800a394:	9b05      	ldr	r3, [sp, #20]
 800a396:	42b3      	cmp	r3, r6
 800a398:	d1c5      	bne.n	800a326 <lv_obj_align_to+0x11e>
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 800a39a:	2300      	movs	r3, #0
 800a39c:	2108      	movs	r1, #8
 800a39e:	4640      	mov	r0, r8
 800a3a0:	aa05      	add	r2, sp, #20
 800a3a2:	f002 ff71 	bl	800d288 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 800a3a6:	2801      	cmp	r0, #1
 800a3a8:	d1ca      	bne.n	800a340 <lv_obj_align_to+0x138>
 800a3aa:	9b05      	ldr	r3, [sp, #20]
 800a3ac:	42a3      	cmp	r3, r4
 800a3ae:	d1c9      	bne.n	800a344 <lv_obj_align_to+0x13c>
 800a3b0:	e7cd      	b.n	800a34e <lv_obj_align_to+0x146>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 800a3b2:	0038      	movs	r0, r7
 800a3b4:	f001 f92a 	bl	800b60c <lv_obj_get_scroll_right>
 800a3b8:	e793      	b.n	800a2e2 <lv_obj_align_to+0xda>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a3ba:	2212      	movs	r2, #18
 800a3bc:	2100      	movs	r1, #0
 800a3be:	0028      	movs	r0, r5
 800a3c0:	f002 f900 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a3c4:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a3c6:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	0028      	movs	r0, r5
 800a3cc:	f002 f8fa 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a3d0:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a3d2:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	0028      	movs	r0, r5
 800a3d8:	f002 f8f4 	bl	800c5c4 <lv_obj_get_style_prop>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 800a3dc:	464b      	mov	r3, r9
 800a3de:	1af6      	subs	r6, r6, r3
 800a3e0:	9b02      	ldr	r3, [sp, #8]
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 800a3e2:	0040      	lsls	r0, r0, #1
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 800a3e4:	1af6      	subs	r6, r6, r3
 800a3e6:	4643      	mov	r3, r8
 800a3e8:	1a36      	subs	r6, r6, r0
 800a3ea:	8a18      	ldrh	r0, [r3, #16]
 800a3ec:	8a9b      	ldrh	r3, [r3, #20]
 800a3ee:	1836      	adds	r6, r6, r0
 800a3f0:	1af6      	subs	r6, r6, r3
 800a3f2:	8aab      	ldrh	r3, [r5, #20]
 800a3f4:	18f6      	adds	r6, r6, r3
 800a3f6:	8a2b      	ldrh	r3, [r5, #16]
 800a3f8:	1af6      	subs	r6, r6, r3
 800a3fa:	b2b6      	uxth	r6, r6
            break;
 800a3fc:	e75d      	b.n	800a2ba <lv_obj_align_to+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a3fe:	2212      	movs	r2, #18
 800a400:	2100      	movs	r1, #0
 800a402:	0028      	movs	r0, r5
 800a404:	f002 f8de 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a408:	2213      	movs	r2, #19
 800a40a:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a40c:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a40e:	0028      	movs	r0, r5
 800a410:	f002 f8d8 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a414:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a416:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a418:	2100      	movs	r1, #0
 800a41a:	0028      	movs	r0, r5
 800a41c:	f002 f8d2 	bl	800c5c4 <lv_obj_get_style_prop>
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 800a420:	2301      	movs	r3, #1
 800a422:	9a02      	ldr	r2, [sp, #8]
 800a424:	0040      	lsls	r0, r0, #1
 800a426:	444a      	add	r2, r9
 800a428:	1a9b      	subs	r3, r3, r2
 800a42a:	8aaa      	ldrh	r2, [r5, #20]
 800a42c:	1a1b      	subs	r3, r3, r0
 800a42e:	189b      	adds	r3, r3, r2
 800a430:	8a2a      	ldrh	r2, [r5, #16]
 800a432:	4641      	mov	r1, r8
 800a434:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 800a436:	b21b      	sxth	r3, r3
 800a438:	0fda      	lsrs	r2, r3, #31
 800a43a:	18d3      	adds	r3, r2, r3
 800a43c:	4642      	mov	r2, r8
 800a43e:	8a92      	ldrh	r2, [r2, #20]
 800a440:	8a09      	ldrh	r1, [r1, #16]
 800a442:	3201      	adds	r2, #1
 800a444:	1a52      	subs	r2, r2, r1
 800a446:	b212      	sxth	r2, r2
 800a448:	0fd1      	lsrs	r1, r2, #31
 800a44a:	188a      	adds	r2, r1, r2
 800a44c:	1052      	asrs	r2, r2, #1
 800a44e:	105b      	asrs	r3, r3, #1
 800a450:	1ab6      	subs	r6, r6, r2
 800a452:	199e      	adds	r6, r3, r6
 800a454:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800a456:	2210      	movs	r2, #16
 800a458:	2100      	movs	r1, #0
 800a45a:	0028      	movs	r0, r5
 800a45c:	f002 f8b2 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800a460:	2211      	movs	r2, #17
 800a462:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800a464:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800a466:	0028      	movs	r0, r5
 800a468:	f002 f8ac 	bl	800c5c4 <lv_obj_get_style_prop>
 800a46c:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a46e:	2232      	movs	r2, #50	; 0x32
 800a470:	2100      	movs	r1, #0
 800a472:	0028      	movs	r0, r5
 800a474:	f002 f8a6 	bl	800c5c4 <lv_obj_get_style_prop>
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 800a478:	9b02      	ldr	r3, [sp, #8]
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 800a47a:	0040      	lsls	r0, r0, #1
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 800a47c:	1ae4      	subs	r4, r4, r3
 800a47e:	464b      	mov	r3, r9
 800a480:	1ae4      	subs	r4, r4, r3
 800a482:	4643      	mov	r3, r8
 800a484:	8a5b      	ldrh	r3, [r3, #18]
 800a486:	1a24      	subs	r4, r4, r0
 800a488:	18e4      	adds	r4, r4, r3
 800a48a:	4643      	mov	r3, r8
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800a48c:	8adb      	ldrh	r3, [r3, #22]
 800a48e:	1ae4      	subs	r4, r4, r3
 800a490:	8aeb      	ldrh	r3, [r5, #22]
 800a492:	18e4      	adds	r4, r4, r3
 800a494:	8a6b      	ldrh	r3, [r5, #18]
 800a496:	1ae4      	subs	r4, r4, r3
 800a498:	b2a4      	uxth	r4, r4
            break;
 800a49a:	e70e      	b.n	800a2ba <lv_obj_align_to+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a49c:	2212      	movs	r2, #18
 800a49e:	2100      	movs	r1, #0
 800a4a0:	0028      	movs	r0, r5
 800a4a2:	f002 f88f 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a4a6:	2213      	movs	r2, #19
 800a4a8:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a4aa:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a4ac:	0028      	movs	r0, r5
 800a4ae:	f002 f889 	bl	800c5c4 <lv_obj_get_style_prop>
 800a4b2:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a4b4:	2232      	movs	r2, #50	; 0x32
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	0028      	movs	r0, r5
 800a4ba:	f002 f883 	bl	800c5c4 <lv_obj_get_style_prop>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 800a4be:	9b02      	ldr	r3, [sp, #8]
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 800a4c0:	0040      	lsls	r0, r0, #1
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 800a4c2:	1af6      	subs	r6, r6, r3
 800a4c4:	464b      	mov	r3, r9
 800a4c6:	1af6      	subs	r6, r6, r3
 800a4c8:	4643      	mov	r3, r8
 800a4ca:	8a1b      	ldrh	r3, [r3, #16]
 800a4cc:	1a36      	subs	r6, r6, r0
 800a4ce:	18f6      	adds	r6, r6, r3
 800a4d0:	4643      	mov	r3, r8
 800a4d2:	8a9b      	ldrh	r3, [r3, #20]
 800a4d4:	1af6      	subs	r6, r6, r3
 800a4d6:	8aab      	ldrh	r3, [r5, #20]
 800a4d8:	18f6      	adds	r6, r6, r3
 800a4da:	8a2b      	ldrh	r3, [r5, #16]
 800a4dc:	1af6      	subs	r6, r6, r3
 800a4de:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800a4e0:	2210      	movs	r2, #16
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	0028      	movs	r0, r5
 800a4e6:	f002 f86d 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800a4ea:	2211      	movs	r2, #17
 800a4ec:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800a4ee:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800a4f0:	0028      	movs	r0, r5
 800a4f2:	f002 f867 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a4f6:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800a4f8:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	0028      	movs	r0, r5
 800a4fe:	f002 f861 	bl	800c5c4 <lv_obj_get_style_prop>
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 800a502:	2301      	movs	r3, #1
 800a504:	9a02      	ldr	r2, [sp, #8]
 800a506:	444a      	add	r2, r9
 800a508:	1a9b      	subs	r3, r3, r2
 800a50a:	8aea      	ldrh	r2, [r5, #22]
 800a50c:	0040      	lsls	r0, r0, #1
 800a50e:	1a1b      	subs	r3, r3, r0
 800a510:	189b      	adds	r3, r3, r2
 800a512:	8a6a      	ldrh	r2, [r5, #18]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a514:	4641      	mov	r1, r8
 800a516:	1a9b      	subs	r3, r3, r2
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 800a518:	b21b      	sxth	r3, r3
 800a51a:	0fda      	lsrs	r2, r3, #31
 800a51c:	18d3      	adds	r3, r2, r3
 800a51e:	4642      	mov	r2, r8
 800a520:	8ad2      	ldrh	r2, [r2, #22]
 800a522:	8a49      	ldrh	r1, [r1, #18]
 800a524:	3201      	adds	r2, #1
 800a526:	1a52      	subs	r2, r2, r1
 800a528:	b212      	sxth	r2, r2
 800a52a:	0fd1      	lsrs	r1, r2, #31
 800a52c:	188a      	adds	r2, r1, r2
 800a52e:	1052      	asrs	r2, r2, #1
 800a530:	105b      	asrs	r3, r3, #1
 800a532:	1aa4      	subs	r4, r4, r2
 800a534:	191c      	adds	r4, r3, r4
 800a536:	b2a4      	uxth	r4, r4
            break;
 800a538:	e6bf      	b.n	800a2ba <lv_obj_align_to+0xb2>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a53a:	8aae      	ldrh	r6, [r5, #20]
 800a53c:	8a2b      	ldrh	r3, [r5, #16]
 800a53e:	3601      	adds	r6, #1
 800a540:	1af6      	subs	r6, r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a542:	8aeb      	ldrh	r3, [r5, #22]
 800a544:	8a6a      	ldrh	r2, [r5, #18]
 800a546:	3301      	adds	r3, #1
 800a548:	1a9b      	subs	r3, r3, r2
            y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800a54a:	b21b      	sxth	r3, r3
 800a54c:	0fdc      	lsrs	r4, r3, #31
 800a54e:	18e4      	adds	r4, r4, r3
 800a550:	4643      	mov	r3, r8
 800a552:	4642      	mov	r2, r8
 800a554:	8adb      	ldrh	r3, [r3, #22]
 800a556:	8a52      	ldrh	r2, [r2, #18]
 800a558:	3301      	adds	r3, #1
 800a55a:	1a9b      	subs	r3, r3, r2
 800a55c:	b21b      	sxth	r3, r3
 800a55e:	0fda      	lsrs	r2, r3, #31
 800a560:	18d3      	adds	r3, r2, r3
 800a562:	1064      	asrs	r4, r4, #1
 800a564:	105b      	asrs	r3, r3, #1
 800a566:	1ae4      	subs	r4, r4, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a568:	b2b6      	uxth	r6, r6
 800a56a:	b2a4      	uxth	r4, r4
            break;
 800a56c:	e6a5      	b.n	800a2ba <lv_obj_align_to+0xb2>
 800a56e:	46c0      	nop			; (mov r8, r8)
 800a570:	20000464 	.word	0x20000464
 800a574:	0801b6e8 	.word	0x0801b6e8
            y = -lv_obj_get_height(obj);
 800a578:	4643      	mov	r3, r8
 800a57a:	8a5c      	ldrh	r4, [r3, #18]
 800a57c:	8adb      	ldrh	r3, [r3, #22]
 800a57e:	3c01      	subs	r4, #1
 800a580:	1ae4      	subs	r4, r4, r3
            break;
 800a582:	2600      	movs	r6, #0
            y = -lv_obj_get_height(obj);
 800a584:	b2a4      	uxth	r4, r4
            break;
 800a586:	e698      	b.n	800a2ba <lv_obj_align_to+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a588:	2212      	movs	r2, #18
 800a58a:	2100      	movs	r1, #0
 800a58c:	0028      	movs	r0, r5
 800a58e:	f002 f819 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a592:	2213      	movs	r2, #19
 800a594:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a596:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a598:	0028      	movs	r0, r5
 800a59a:	f002 f813 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a59e:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a5a0:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	0028      	movs	r0, r5
 800a5a6:	f002 f80d 	bl	800c5c4 <lv_obj_get_style_prop>
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	9b02      	ldr	r3, [sp, #8]
 800a5ae:	0040      	lsls	r0, r0, #1
 800a5b0:	444b      	add	r3, r9
 800a5b2:	4691      	mov	r9, r2
 800a5b4:	464a      	mov	r2, r9
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	8aaa      	ldrh	r2, [r5, #20]
 800a5ba:	1a1b      	subs	r3, r3, r0
 800a5bc:	189b      	adds	r3, r3, r2
 800a5be:	8a2a      	ldrh	r2, [r5, #16]
 800a5c0:	4641      	mov	r1, r8
 800a5c2:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 800a5c4:	b21b      	sxth	r3, r3
 800a5c6:	0fda      	lsrs	r2, r3, #31
 800a5c8:	18d3      	adds	r3, r2, r3
 800a5ca:	4642      	mov	r2, r8
 800a5cc:	8a92      	ldrh	r2, [r2, #20]
 800a5ce:	8a09      	ldrh	r1, [r1, #16]
 800a5d0:	3201      	adds	r2, #1
 800a5d2:	1a52      	subs	r2, r2, r1
 800a5d4:	b212      	sxth	r2, r2
 800a5d6:	0fd1      	lsrs	r1, r2, #31
 800a5d8:	188a      	adds	r2, r1, r2
 800a5da:	1052      	asrs	r2, r2, #1
 800a5dc:	105b      	asrs	r3, r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800a5de:	2100      	movs	r1, #0
 800a5e0:	1ab6      	subs	r6, r6, r2
 800a5e2:	0028      	movs	r0, r5
 800a5e4:	2210      	movs	r2, #16
 800a5e6:	199e      	adds	r6, r3, r6
 800a5e8:	f001 ffec 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800a5ec:	2211      	movs	r2, #17
 800a5ee:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800a5f0:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800a5f2:	0028      	movs	r0, r5
 800a5f4:	f001 ffe6 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a5f8:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800a5fa:	9003      	str	r0, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	0028      	movs	r0, r5
 800a600:	f001 ffe0 	bl	800c5c4 <lv_obj_get_style_prop>
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 800a604:	9a03      	ldr	r2, [sp, #12]
 800a606:	9b02      	ldr	r3, [sp, #8]
 800a608:	4694      	mov	ip, r2
 800a60a:	464a      	mov	r2, r9
 800a60c:	4463      	add	r3, ip
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 800a60e:	b2b6      	uxth	r6, r6
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	e77a      	b.n	800a50a <lv_obj_align_to+0x302>
 800a614:	8aae      	ldrh	r6, [r5, #20]
 800a616:	8a2b      	ldrh	r3, [r5, #16]
 800a618:	3601      	adds	r6, #1
 800a61a:	1af6      	subs	r6, r6, r3
            break;
 800a61c:	2400      	movs	r4, #0
 800a61e:	b2b6      	uxth	r6, r6
 800a620:	e64b      	b.n	800a2ba <lv_obj_align_to+0xb2>
            x = -lv_obj_get_width(obj);
 800a622:	4643      	mov	r3, r8
 800a624:	8a1e      	ldrh	r6, [r3, #16]
 800a626:	8a9b      	ldrh	r3, [r3, #20]
 800a628:	3e01      	subs	r6, #1
 800a62a:	1af6      	subs	r6, r6, r3
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800a62c:	4643      	mov	r3, r8
 800a62e:	b2b6      	uxth	r6, r6
 800a630:	8a5c      	ldrh	r4, [r3, #18]
 800a632:	e72b      	b.n	800a48c <lv_obj_align_to+0x284>
            x = -lv_obj_get_width(obj);
 800a634:	4643      	mov	r3, r8
 800a636:	8a1e      	ldrh	r6, [r3, #16]
 800a638:	8a9b      	ldrh	r3, [r3, #20]
 800a63a:	3e01      	subs	r6, #1
 800a63c:	e780      	b.n	800a540 <lv_obj_align_to+0x338>
            x = -lv_obj_get_width(obj);
 800a63e:	4643      	mov	r3, r8
 800a640:	8a1e      	ldrh	r6, [r3, #16]
 800a642:	8a9b      	ldrh	r3, [r3, #20]
 800a644:	3e01      	subs	r6, #1
 800a646:	1af6      	subs	r6, r6, r3
            break;
 800a648:	2400      	movs	r4, #0
            x = -lv_obj_get_width(obj);
 800a64a:	b2b6      	uxth	r6, r6
            break;
 800a64c:	e635      	b.n	800a2ba <lv_obj_align_to+0xb2>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800a64e:	4643      	mov	r3, r8
 800a650:	8a1e      	ldrh	r6, [r3, #16]
 800a652:	8a9b      	ldrh	r3, [r3, #20]
 800a654:	1af6      	subs	r6, r6, r3
 800a656:	8aab      	ldrh	r3, [r5, #20]
 800a658:	18f6      	adds	r6, r6, r3
 800a65a:	8a2b      	ldrh	r3, [r5, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a65c:	8aec      	ldrh	r4, [r5, #22]
 800a65e:	1af6      	subs	r6, r6, r3
 800a660:	8a6b      	ldrh	r3, [r5, #18]
 800a662:	3401      	adds	r4, #1
 800a664:	1ae4      	subs	r4, r4, r3
 800a666:	b2b6      	uxth	r6, r6
 800a668:	b2a4      	uxth	r4, r4
            break;
 800a66a:	e626      	b.n	800a2ba <lv_obj_align_to+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a66c:	2212      	movs	r2, #18
 800a66e:	2100      	movs	r1, #0
 800a670:	0028      	movs	r0, r5
 800a672:	f001 ffa7 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a676:	2213      	movs	r2, #19
 800a678:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a67a:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a67c:	0028      	movs	r0, r5
 800a67e:	f001 ffa1 	bl	800c5c4 <lv_obj_get_style_prop>
 800a682:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a684:	2232      	movs	r2, #50	; 0x32
 800a686:	2100      	movs	r1, #0
 800a688:	0028      	movs	r0, r5
 800a68a:	f001 ff9b 	bl	800c5c4 <lv_obj_get_style_prop>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 800a68e:	9b02      	ldr	r3, [sp, #8]
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 800a690:	0040      	lsls	r0, r0, #1
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 800a692:	1af6      	subs	r6, r6, r3
 800a694:	464b      	mov	r3, r9
 800a696:	1af6      	subs	r6, r6, r3
 800a698:	4643      	mov	r3, r8
 800a69a:	8a1b      	ldrh	r3, [r3, #16]
 800a69c:	1a36      	subs	r6, r6, r0
 800a69e:	18f6      	adds	r6, r6, r3
 800a6a0:	4643      	mov	r3, r8
 800a6a2:	8a9b      	ldrh	r3, [r3, #20]
 800a6a4:	1af6      	subs	r6, r6, r3
 800a6a6:	8aab      	ldrh	r3, [r5, #20]
 800a6a8:	18f6      	adds	r6, r6, r3
 800a6aa:	8a2b      	ldrh	r3, [r5, #16]
 800a6ac:	1af6      	subs	r6, r6, r3
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 800a6ae:	b2b6      	uxth	r6, r6
 800a6b0:	e6d1      	b.n	800a456 <lv_obj_align_to+0x24e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a6b2:	8aab      	ldrh	r3, [r5, #20]
 800a6b4:	8a2a      	ldrh	r2, [r5, #16]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800a6ba:	b21b      	sxth	r3, r3
 800a6bc:	0fde      	lsrs	r6, r3, #31
 800a6be:	18f6      	adds	r6, r6, r3
 800a6c0:	4643      	mov	r3, r8
 800a6c2:	4642      	mov	r2, r8
 800a6c4:	8a9b      	ldrh	r3, [r3, #20]
 800a6c6:	8a12      	ldrh	r2, [r2, #16]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	1a9b      	subs	r3, r3, r2
 800a6cc:	b21b      	sxth	r3, r3
 800a6ce:	0fda      	lsrs	r2, r3, #31
 800a6d0:	18d3      	adds	r3, r2, r3
 800a6d2:	1076      	asrs	r6, r6, #1
 800a6d4:	105b      	asrs	r3, r3, #1
 800a6d6:	e7c1      	b.n	800a65c <lv_obj_align_to+0x454>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a6d8:	8aec      	ldrh	r4, [r5, #22]
 800a6da:	8a6b      	ldrh	r3, [r5, #18]
 800a6dc:	3401      	adds	r4, #1
 800a6de:	1ae4      	subs	r4, r4, r3
            break;
 800a6e0:	2600      	movs	r6, #0
 800a6e2:	b2a4      	uxth	r4, r4
 800a6e4:	e5e9      	b.n	800a2ba <lv_obj_align_to+0xb2>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800a6e6:	4643      	mov	r3, r8
 800a6e8:	8a1e      	ldrh	r6, [r3, #16]
 800a6ea:	8a9b      	ldrh	r3, [r3, #20]
 800a6ec:	1af6      	subs	r6, r6, r3
 800a6ee:	8aab      	ldrh	r3, [r5, #20]
 800a6f0:	18f6      	adds	r6, r6, r3
 800a6f2:	8a2b      	ldrh	r3, [r5, #16]
 800a6f4:	1af6      	subs	r6, r6, r3
            y = -lv_obj_get_height(obj);
 800a6f6:	4643      	mov	r3, r8
 800a6f8:	8a5c      	ldrh	r4, [r3, #18]
 800a6fa:	8adb      	ldrh	r3, [r3, #22]
 800a6fc:	3c01      	subs	r4, #1
 800a6fe:	1ae4      	subs	r4, r4, r3
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800a700:	b2b6      	uxth	r6, r6
            y = -lv_obj_get_height(obj);
 800a702:	b2a4      	uxth	r4, r4
            break;
 800a704:	e5d9      	b.n	800a2ba <lv_obj_align_to+0xb2>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a706:	8aae      	ldrh	r6, [r5, #20]
 800a708:	8a2b      	ldrh	r3, [r5, #16]
 800a70a:	3601      	adds	r6, #1
 800a70c:	e78d      	b.n	800a62a <lv_obj_align_to+0x422>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a70e:	2212      	movs	r2, #18
 800a710:	2100      	movs	r1, #0
 800a712:	0028      	movs	r0, r5
 800a714:	f001 ff56 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a718:	2213      	movs	r2, #19
 800a71a:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a71c:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a71e:	0028      	movs	r0, r5
 800a720:	f001 ff50 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a724:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a726:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a728:	2100      	movs	r1, #0
 800a72a:	0028      	movs	r0, r5
 800a72c:	f001 ff4a 	bl	800c5c4 <lv_obj_get_style_prop>
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 800a730:	2301      	movs	r3, #1
 800a732:	9a02      	ldr	r2, [sp, #8]
 800a734:	0040      	lsls	r0, r0, #1
 800a736:	444a      	add	r2, r9
 800a738:	1a9b      	subs	r3, r3, r2
 800a73a:	8aaa      	ldrh	r2, [r5, #20]
 800a73c:	1a1b      	subs	r3, r3, r0
 800a73e:	189b      	adds	r3, r3, r2
 800a740:	8a2a      	ldrh	r2, [r5, #16]
 800a742:	4641      	mov	r1, r8
 800a744:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 800a746:	b21b      	sxth	r3, r3
 800a748:	0fda      	lsrs	r2, r3, #31
 800a74a:	18d3      	adds	r3, r2, r3
 800a74c:	4642      	mov	r2, r8
 800a74e:	8a92      	ldrh	r2, [r2, #20]
 800a750:	8a09      	ldrh	r1, [r1, #16]
 800a752:	3201      	adds	r2, #1
 800a754:	1a52      	subs	r2, r2, r1
 800a756:	b212      	sxth	r2, r2
 800a758:	0fd1      	lsrs	r1, r2, #31
 800a75a:	188a      	adds	r2, r1, r2
 800a75c:	1052      	asrs	r2, r2, #1
 800a75e:	105b      	asrs	r3, r3, #1
 800a760:	1ab6      	subs	r6, r6, r2
 800a762:	199e      	adds	r6, r3, r6
 800a764:	b2b6      	uxth	r6, r6
            break;
 800a766:	e5a8      	b.n	800a2ba <lv_obj_align_to+0xb2>
 800a768:	8aab      	ldrh	r3, [r5, #20]
 800a76a:	8a2a      	ldrh	r2, [r5, #16]
 800a76c:	3301      	adds	r3, #1
 800a76e:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800a770:	b21b      	sxth	r3, r3
 800a772:	0fde      	lsrs	r6, r3, #31
 800a774:	18f6      	adds	r6, r6, r3
 800a776:	4643      	mov	r3, r8
 800a778:	4642      	mov	r2, r8
 800a77a:	8a9b      	ldrh	r3, [r3, #20]
 800a77c:	8a12      	ldrh	r2, [r2, #16]
 800a77e:	3301      	adds	r3, #1
 800a780:	1a9b      	subs	r3, r3, r2
 800a782:	b21b      	sxth	r3, r3
 800a784:	0fda      	lsrs	r2, r3, #31
 800a786:	18d3      	adds	r3, r2, r3
 800a788:	1076      	asrs	r6, r6, #1
 800a78a:	105b      	asrs	r3, r3, #1
 800a78c:	e7b2      	b.n	800a6f4 <lv_obj_align_to+0x4ec>
    switch(align) {
 800a78e:	2400      	movs	r4, #0
 800a790:	0026      	movs	r6, r4
 800a792:	e592      	b.n	800a2ba <lv_obj_align_to+0xb2>

0800a794 <lv_obj_update_layout>:
{
 800a794:	b570      	push	{r4, r5, r6, lr}
    if(mutex) {
 800a796:	4e0d      	ldr	r6, [pc, #52]	; (800a7cc <lv_obj_update_layout+0x38>)
 800a798:	7833      	ldrb	r3, [r6, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d000      	beq.n	800a7a0 <lv_obj_update_layout+0xc>
}
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
    mutex = true;
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	7033      	strb	r3, [r6, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 800a7a4:	f003 fb0a 	bl	800ddbc <lv_obj_get_screen>
    while(scr->scr_layout_inv) {
 800a7a8:	7f83      	ldrb	r3, [r0, #30]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 800a7aa:	0004      	movs	r4, r0
    while(scr->scr_layout_inv) {
 800a7ac:	079b      	lsls	r3, r3, #30
 800a7ae:	d509      	bpl.n	800a7c4 <lv_obj_update_layout+0x30>
        scr->scr_layout_inv = 0;
 800a7b0:	2502      	movs	r5, #2
 800a7b2:	7fa3      	ldrb	r3, [r4, #30]
        layout_update_core(scr);
 800a7b4:	0020      	movs	r0, r4
        scr->scr_layout_inv = 0;
 800a7b6:	43ab      	bics	r3, r5
 800a7b8:	77a3      	strb	r3, [r4, #30]
        layout_update_core(scr);
 800a7ba:	f7ff fccd 	bl	800a158 <layout_update_core>
    while(scr->scr_layout_inv) {
 800a7be:	7fa3      	ldrb	r3, [r4, #30]
 800a7c0:	421d      	tst	r5, r3
 800a7c2:	d1f6      	bne.n	800a7b2 <lv_obj_update_layout+0x1e>
    mutex = false;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	7033      	strb	r3, [r6, #0]
 800a7c8:	e7e9      	b.n	800a79e <lv_obj_update_layout+0xa>
 800a7ca:	46c0      	nop			; (mov r8, r8)
 800a7cc:	20000464 	.word	0x20000464

0800a7d0 <lv_obj_get_click_area>:
{
 800a7d0:	b570      	push	{r4, r5, r6, lr}
    dest->x1 = src->x1;
 800a7d2:	2310      	movs	r3, #16
 800a7d4:	5ec5      	ldrsh	r5, [r0, r3]
 800a7d6:	800d      	strh	r5, [r1, #0]
    dest->y1 = src->y1;
 800a7d8:	2312      	movs	r3, #18
 800a7da:	5ec2      	ldrsh	r2, [r0, r3]
 800a7dc:	804a      	strh	r2, [r1, #2]
    dest->x2 = src->x2;
 800a7de:	2314      	movs	r3, #20
 800a7e0:	5ec4      	ldrsh	r4, [r0, r3]
 800a7e2:	808c      	strh	r4, [r1, #4]
    dest->y2 = src->y2;
 800a7e4:	2316      	movs	r3, #22
 800a7e6:	5ec6      	ldrsh	r6, [r0, r3]
    if(obj->spec_attr) {
 800a7e8:	6883      	ldr	r3, [r0, #8]
 800a7ea:	80ce      	strh	r6, [r1, #6]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d008      	beq.n	800a802 <lv_obj_get_click_area+0x32>
        area->x1 -= obj->spec_attr->ext_click_pad;
 800a7f0:	8a9b      	ldrh	r3, [r3, #20]
 800a7f2:	1aed      	subs	r5, r5, r3
        area->x2 += obj->spec_attr->ext_click_pad;
 800a7f4:	191c      	adds	r4, r3, r4
        area->y1 -= obj->spec_attr->ext_click_pad;
 800a7f6:	1ad2      	subs	r2, r2, r3
        area->y2 += obj->spec_attr->ext_click_pad;
 800a7f8:	199b      	adds	r3, r3, r6
        area->x1 -= obj->spec_attr->ext_click_pad;
 800a7fa:	800d      	strh	r5, [r1, #0]
        area->x2 += obj->spec_attr->ext_click_pad;
 800a7fc:	808c      	strh	r4, [r1, #4]
        area->y1 -= obj->spec_attr->ext_click_pad;
 800a7fe:	804a      	strh	r2, [r1, #2]
        area->y2 += obj->spec_attr->ext_click_pad;
 800a800:	80cb      	strh	r3, [r1, #6]
}
 800a802:	bd70      	pop	{r4, r5, r6, pc}

0800a804 <lv_obj_hit_test>:
{
 800a804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a806:	000e      	movs	r6, r1
 800a808:	b085      	sub	sp, #20
    if(!lv_obj_has_flag(obj, LV_OBJ_FLAG_CLICKABLE)) return false;
 800a80a:	2102      	movs	r1, #2
{
 800a80c:	0004      	movs	r4, r0
    if(!lv_obj_has_flag(obj, LV_OBJ_FLAG_CLICKABLE)) return false;
 800a80e:	f7fd fb81 	bl	8007f14 <lv_obj_has_flag>
 800a812:	2800      	cmp	r0, #0
 800a814:	d103      	bne.n	800a81e <lv_obj_hit_test+0x1a>
 800a816:	2500      	movs	r5, #0
}
 800a818:	0028      	movs	r0, r5
 800a81a:	b005      	add	sp, #20
 800a81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(lv_obj_has_state(obj, LV_STATE_DISABLED)) return false;
 800a81e:	2180      	movs	r1, #128	; 0x80
 800a820:	0020      	movs	r0, r4
 800a822:	f7fd fb87 	bl	8007f34 <lv_obj_has_state>
 800a826:	2800      	cmp	r0, #0
 800a828:	d1f5      	bne.n	800a816 <lv_obj_hit_test+0x12>
    dest->x1 = src->x1;
 800a82a:	2310      	movs	r3, #16
 800a82c:	5ee0      	ldrsh	r0, [r4, r3]
 800a82e:	466b      	mov	r3, sp
 800a830:	8018      	strh	r0, [r3, #0]
    dest->y1 = src->y1;
 800a832:	2312      	movs	r3, #18
 800a834:	5ee2      	ldrsh	r2, [r4, r3]
 800a836:	466b      	mov	r3, sp
 800a838:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 800a83a:	2314      	movs	r3, #20
 800a83c:	5ee1      	ldrsh	r1, [r4, r3]
 800a83e:	466b      	mov	r3, sp
 800a840:	8099      	strh	r1, [r3, #4]
    dest->y2 = src->y2;
 800a842:	2316      	movs	r3, #22
 800a844:	5ee5      	ldrsh	r5, [r4, r3]
 800a846:	466b      	mov	r3, sp
 800a848:	80dd      	strh	r5, [r3, #6]
    if(obj->spec_attr) {
 800a84a:	68a3      	ldr	r3, [r4, #8]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d009      	beq.n	800a864 <lv_obj_hit_test+0x60>
        area->x1 -= obj->spec_attr->ext_click_pad;
 800a850:	466f      	mov	r7, sp
 800a852:	8a9b      	ldrh	r3, [r3, #20]
 800a854:	1ac0      	subs	r0, r0, r3
        area->x2 += obj->spec_attr->ext_click_pad;
 800a856:	1859      	adds	r1, r3, r1
        area->y1 -= obj->spec_attr->ext_click_pad;
 800a858:	1ad2      	subs	r2, r2, r3
        area->y2 += obj->spec_attr->ext_click_pad;
 800a85a:	195b      	adds	r3, r3, r5
        area->x1 -= obj->spec_attr->ext_click_pad;
 800a85c:	8038      	strh	r0, [r7, #0]
        area->x2 += obj->spec_attr->ext_click_pad;
 800a85e:	80b9      	strh	r1, [r7, #4]
        area->y1 -= obj->spec_attr->ext_click_pad;
 800a860:	807a      	strh	r2, [r7, #2]
        area->y2 += obj->spec_attr->ext_click_pad;
 800a862:	80fb      	strh	r3, [r7, #6]
    bool res = _lv_area_is_point_on(&a, point, 0);
 800a864:	2200      	movs	r2, #0
 800a866:	0031      	movs	r1, r6
 800a868:	4668      	mov	r0, sp
 800a86a:	f009 fd5f 	bl	801432c <_lv_area_is_point_on>
 800a86e:	1e05      	subs	r5, r0, #0
    if(res == false) return false;
 800a870:	d0d1      	beq.n	800a816 <lv_obj_hit_test+0x12>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 800a872:	2180      	movs	r1, #128	; 0x80
 800a874:	0020      	movs	r0, r4
 800a876:	0249      	lsls	r1, r1, #9
 800a878:	f7fd fb4c 	bl	8007f14 <lv_obj_has_flag>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d0cb      	beq.n	800a818 <lv_obj_hit_test+0x14>
        hit_info.res = true;
 800a880:	2301      	movs	r3, #1
 800a882:	466a      	mov	r2, sp
        lv_event_send(obj, LV_EVENT_HIT_TEST, &hit_info);
 800a884:	2111      	movs	r1, #17
        hit_info.res = true;
 800a886:	7313      	strb	r3, [r2, #12]
        lv_event_send(obj, LV_EVENT_HIT_TEST, &hit_info);
 800a888:	0020      	movs	r0, r4
 800a88a:	aa02      	add	r2, sp, #8
        hit_info.point = point;
 800a88c:	9602      	str	r6, [sp, #8]
        lv_event_send(obj, LV_EVENT_HIT_TEST, &hit_info);
 800a88e:	f7fa f9cf 	bl	8004c30 <lv_event_send>
        return hit_info.res;
 800a892:	466b      	mov	r3, sp
 800a894:	7b1d      	ldrb	r5, [r3, #12]
 800a896:	e7bf      	b.n	800a818 <lv_obj_hit_test+0x14>

0800a898 <scroll_anim_ready_cb>:
{
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
}

static void scroll_anim_ready_cb(lv_anim_t * a)
{
 800a898:	b510      	push	{r4, lr}
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 800a89a:	2200      	movs	r2, #0
 800a89c:	210a      	movs	r1, #10
 800a89e:	6800      	ldr	r0, [r0, #0]
 800a8a0:	f7fa f9c6 	bl	8004c30 <lv_event_send>
}
 800a8a4:	bd10      	pop	{r4, pc}
 800a8a6:	46c0      	nop			; (mov r8, r8)

0800a8a8 <lv_obj_get_scroll_left.part.0>:
lv_coord_t lv_obj_get_scroll_left(lv_obj_t * obj)
 800a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8aa:	46de      	mov	lr, fp
 800a8ac:	464e      	mov	r6, r9
 800a8ae:	4657      	mov	r7, sl
 800a8b0:	4645      	mov	r5, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a8b2:	2213      	movs	r2, #19
 800a8b4:	b5e0      	push	{r5, r6, r7, lr}
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	0006      	movs	r6, r0
 800a8ba:	f001 fe83 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a8be:	2212      	movs	r2, #18
 800a8c0:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a8c2:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a8c4:	0030      	movs	r0, r6
 800a8c6:	f001 fe7d 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a8ca:	2232      	movs	r2, #50	; 0x32
 800a8cc:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a8ce:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a8d0:	0030      	movs	r0, r6
 800a8d2:	f001 fe77 	bl	800c5c4 <lv_obj_get_style_prop>
 800a8d6:	4680      	mov	r8, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a8d8:	0030      	movs	r0, r6
 800a8da:	f003 fab5 	bl	800de48 <lv_obj_get_child_cnt>
 800a8de:	4683      	mov	fp, r0
    for(i = 0; i < child_cnt; i++) {
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	d040      	beq.n	800a966 <lv_obj_get_scroll_left.part.0+0xbe>
 800a8e4:	2400      	movs	r4, #0
    lv_coord_t x1 = LV_COORD_MAX;
 800a8e6:	4f23      	ldr	r7, [pc, #140]	; (800a974 <lv_obj_get_scroll_left.part.0+0xcc>)
        lv_obj_t * child = obj->spec_attr->children[i];
 800a8e8:	68b3      	ldr	r3, [r6, #8]
 800a8ea:	00a2      	lsls	r2, r4, #2
 800a8ec:	681b      	ldr	r3, [r3, #0]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a8ee:	4922      	ldr	r1, [pc, #136]	; (800a978 <lv_obj_get_scroll_left.part.0+0xd0>)
        lv_obj_t * child = obj->spec_attr->children[i];
 800a8f0:	58d5      	ldr	r5, [r2, r3]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a8f2:	0028      	movs	r0, r5
 800a8f4:	f7fd fb16 	bl	8007f24 <lv_obj_has_flag_any>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d106      	bne.n	800a90a <lv_obj_get_scroll_left.part.0+0x62>
        x1 = LV_MIN(x1, child->coords.x1);
 800a8fc:	8a2b      	ldrh	r3, [r5, #16]
 800a8fe:	1c1a      	adds	r2, r3, #0
 800a900:	b21b      	sxth	r3, r3
 800a902:	42bb      	cmp	r3, r7
 800a904:	dd00      	ble.n	800a908 <lv_obj_get_scroll_left.part.0+0x60>
 800a906:	1c3a      	adds	r2, r7, #0
 800a908:	b217      	sxth	r7, r2
    for(i = 0; i < child_cnt; i++) {
 800a90a:	3401      	adds	r4, #1
 800a90c:	45a3      	cmp	fp, r4
 800a90e:	d1eb      	bne.n	800a8e8 <lv_obj_get_scroll_left.part.0+0x40>
    if(x1 != LV_COORD_MAX) {
 800a910:	4b18      	ldr	r3, [pc, #96]	; (800a974 <lv_obj_get_scroll_left.part.0+0xcc>)
 800a912:	429f      	cmp	r7, r3
 800a914:	d027      	beq.n	800a966 <lv_obj_get_scroll_left.part.0+0xbe>
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 800a916:	464b      	mov	r3, r9
 800a918:	b29c      	uxth	r4, r3
 800a91a:	4643      	mov	r3, r8
 800a91c:	8a32      	ldrh	r2, [r6, #16]
 800a91e:	b29d      	uxth	r5, r3
 800a920:	1963      	adds	r3, r4, r5
 800a922:	189b      	adds	r3, r3, r2
 800a924:	1bdf      	subs	r7, r3, r7
 800a926:	b23f      	sxth	r7, r7
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 800a928:	0030      	movs	r0, r6
 800a92a:	f7fe fa5b 	bl	8008de4 <lv_obj_get_self_width>
 800a92e:	4680      	mov	r8, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800a930:	0030      	movs	r0, r6
 800a932:	f7fe f9d1 	bl	8008cd8 <lv_obj_get_width>
 800a936:	006d      	lsls	r5, r5, #1
 800a938:	4454      	add	r4, sl
 800a93a:	192d      	adds	r5, r5, r4
 800a93c:	4445      	add	r5, r8
    if(obj->spec_attr == NULL) return 0;
 800a93e:	68b2      	ldr	r2, [r6, #8]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800a940:	1a2b      	subs	r3, r5, r0
 800a942:	b29b      	uxth	r3, r3
    if(obj->spec_attr == NULL) return 0;
 800a944:	2a00      	cmp	r2, #0
 800a946:	d002      	beq.n	800a94e <lv_obj_get_scroll_left.part.0+0xa6>
    self_w += lv_obj_get_scroll_x(obj);
 800a948:	8a12      	ldrh	r2, [r2, #16]
 800a94a:	1a9b      	subs	r3, r3, r2
 800a94c:	b29b      	uxth	r3, r3
    return LV_MAX(child_res, self_w);
 800a94e:	1c18      	adds	r0, r3, #0
 800a950:	b21b      	sxth	r3, r3
 800a952:	42bb      	cmp	r3, r7
 800a954:	da00      	bge.n	800a958 <lv_obj_get_scroll_left.part.0+0xb0>
 800a956:	1c38      	adds	r0, r7, #0
}
 800a958:	b200      	sxth	r0, r0
 800a95a:	bcf0      	pop	{r4, r5, r6, r7}
 800a95c:	46bb      	mov	fp, r7
 800a95e:	46b2      	mov	sl, r6
 800a960:	46a9      	mov	r9, r5
 800a962:	46a0      	mov	r8, r4
 800a964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800a966:	464b      	mov	r3, r9
 800a968:	b29c      	uxth	r4, r3
 800a96a:	4643      	mov	r3, r8
        child_res = LV_COORD_MIN;
 800a96c:	4f03      	ldr	r7, [pc, #12]	; (800a97c <lv_obj_get_scroll_left.part.0+0xd4>)
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800a96e:	b29d      	uxth	r5, r3
 800a970:	e7da      	b.n	800a928 <lv_obj_get_scroll_left.part.0+0x80>
 800a972:	46c0      	nop			; (mov r8, r8)
 800a974:	00001fff 	.word	0x00001fff
 800a978:	00040001 	.word	0x00040001
 800a97c:	ffffe001 	.word	0xffffe001

0800a980 <lv_obj_get_scroll_right.part.0>:
lv_coord_t lv_obj_get_scroll_right(lv_obj_t * obj)
 800a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a982:	46ce      	mov	lr, r9
 800a984:	4647      	mov	r7, r8
 800a986:	b580      	push	{r7, lr}
 800a988:	0006      	movs	r6, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a98a:	f003 fa5d 	bl	800de48 <lv_obj_get_child_cnt>
 800a98e:	4680      	mov	r8, r0
    for(i = 0; i < child_cnt; i++) {
 800a990:	2800      	cmp	r0, #0
 800a992:	d050      	beq.n	800aa36 <lv_obj_get_scroll_right.part.0+0xb6>
 800a994:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 800a996:	4f32      	ldr	r7, [pc, #200]	; (800aa60 <lv_obj_get_scroll_right.part.0+0xe0>)
        lv_obj_t * child = obj->spec_attr->children[i];
 800a998:	68b3      	ldr	r3, [r6, #8]
 800a99a:	00a2      	lsls	r2, r4, #2
 800a99c:	681b      	ldr	r3, [r3, #0]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a99e:	4931      	ldr	r1, [pc, #196]	; (800aa64 <lv_obj_get_scroll_right.part.0+0xe4>)
        lv_obj_t * child = obj->spec_attr->children[i];
 800a9a0:	58d5      	ldr	r5, [r2, r3]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800a9a2:	0028      	movs	r0, r5
 800a9a4:	f7fd fabe 	bl	8007f24 <lv_obj_has_flag_any>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	d106      	bne.n	800a9ba <lv_obj_get_scroll_right.part.0+0x3a>
        child_res = LV_MAX(child_res, child->coords.x2);
 800a9ac:	8aab      	ldrh	r3, [r5, #20]
 800a9ae:	1c1a      	adds	r2, r3, #0
 800a9b0:	b21b      	sxth	r3, r3
 800a9b2:	42bb      	cmp	r3, r7
 800a9b4:	da00      	bge.n	800a9b8 <lv_obj_get_scroll_right.part.0+0x38>
 800a9b6:	1c3a      	adds	r2, r7, #0
 800a9b8:	b217      	sxth	r7, r2
    for(i = 0; i < child_cnt; i++) {
 800a9ba:	3401      	adds	r4, #1
 800a9bc:	45a0      	cmp	r8, r4
 800a9be:	d1eb      	bne.n	800a998 <lv_obj_get_scroll_right.part.0+0x18>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a9c0:	2213      	movs	r2, #19
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	0030      	movs	r0, r6
 800a9c6:	f001 fdfd 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a9ca:	2212      	movs	r2, #18
 800a9cc:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a9ce:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a9d0:	0030      	movs	r0, r6
 800a9d2:	f001 fdf7 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a9d6:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a9d8:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a9da:	2100      	movs	r1, #0
 800a9dc:	0030      	movs	r0, r6
 800a9de:	f001 fdf1 	bl	800c5c4 <lv_obj_get_style_prop>
    if(child_res != LV_COORD_MIN) {
 800a9e2:	4b1f      	ldr	r3, [pc, #124]	; (800aa60 <lv_obj_get_scroll_right.part.0+0xe0>)
 800a9e4:	429f      	cmp	r7, r3
 800a9e6:	d023      	beq.n	800aa30 <lv_obj_get_scroll_right.part.0+0xb0>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 800a9e8:	8ab2      	ldrh	r2, [r6, #20]
 800a9ea:	b2ad      	uxth	r5, r5
 800a9ec:	b284      	uxth	r4, r0
 800a9ee:	192b      	adds	r3, r5, r4
 800a9f0:	1a9b      	subs	r3, r3, r2
 800a9f2:	19df      	adds	r7, r3, r7
 800a9f4:	b23f      	sxth	r7, r7
    self_w = lv_obj_get_self_width(obj);
 800a9f6:	0030      	movs	r0, r6
 800a9f8:	f7fe f9f4 	bl	8008de4 <lv_obj_get_self_width>
 800a9fc:	4680      	mov	r8, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800a9fe:	0030      	movs	r0, r6
 800aa00:	f7fe f96a 	bl	8008cd8 <lv_obj_get_width>
 800aa04:	0063      	lsls	r3, r4, #1
 800aa06:	444b      	add	r3, r9
 800aa08:	18eb      	adds	r3, r5, r3
 800aa0a:	4443      	add	r3, r8
    if(obj->spec_attr == NULL) return 0;
 800aa0c:	68b2      	ldr	r2, [r6, #8]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800aa0e:	1a1b      	subs	r3, r3, r0
 800aa10:	b29b      	uxth	r3, r3
    if(obj->spec_attr == NULL) return 0;
 800aa12:	2a00      	cmp	r2, #0
 800aa14:	d002      	beq.n	800aa1c <lv_obj_get_scroll_right.part.0+0x9c>
    self_w -= lv_obj_get_scroll_x(obj);
 800aa16:	8a10      	ldrh	r0, [r2, #16]
 800aa18:	181b      	adds	r3, r3, r0
 800aa1a:	b29b      	uxth	r3, r3
    return LV_MAX(child_res, self_w);
 800aa1c:	1c18      	adds	r0, r3, #0
 800aa1e:	b21b      	sxth	r3, r3
 800aa20:	42bb      	cmp	r3, r7
 800aa22:	da00      	bge.n	800aa26 <lv_obj_get_scroll_right.part.0+0xa6>
 800aa24:	1c38      	adds	r0, r7, #0
}
 800aa26:	b200      	sxth	r0, r0
 800aa28:	bcc0      	pop	{r6, r7}
 800aa2a:	46b9      	mov	r9, r7
 800aa2c:	46b0      	mov	r8, r6
 800aa2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800aa30:	b284      	uxth	r4, r0
 800aa32:	b2ad      	uxth	r5, r5
 800aa34:	e7df      	b.n	800a9f6 <lv_obj_get_scroll_right.part.0+0x76>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800aa36:	2213      	movs	r2, #19
 800aa38:	2100      	movs	r1, #0
 800aa3a:	0030      	movs	r0, r6
 800aa3c:	f001 fdc2 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800aa40:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800aa42:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800aa44:	2100      	movs	r1, #0
 800aa46:	0030      	movs	r0, r6
 800aa48:	f001 fdbc 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800aa4c:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800aa4e:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800aa50:	2100      	movs	r1, #0
 800aa52:	0030      	movs	r0, r6
 800aa54:	f001 fdb6 	bl	800c5c4 <lv_obj_get_style_prop>
 800aa58:	4f01      	ldr	r7, [pc, #4]	; (800aa60 <lv_obj_get_scroll_right.part.0+0xe0>)
 800aa5a:	b284      	uxth	r4, r0
 800aa5c:	b2ad      	uxth	r5, r5
 800aa5e:	e7ca      	b.n	800a9f6 <lv_obj_get_scroll_right.part.0+0x76>
 800aa60:	ffffe001 	.word	0xffffe001
 800aa64:	00040001 	.word	0x00040001

0800aa68 <scroll_x_anim>:
    if(obj->spec_attr == NULL) return 0;
 800aa68:	6883      	ldr	r3, [r0, #8]
{
 800aa6a:	b570      	push	{r4, r5, r6, lr}
 800aa6c:	000a      	movs	r2, r1
 800aa6e:	0005      	movs	r5, r0
    if(obj->spec_attr == NULL) return 0;
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d020      	beq.n	800aab6 <scroll_x_anim+0x4e>
    return -obj->spec_attr->scroll.x;
 800aa74:	8a1b      	ldrh	r3, [r3, #16]
 800aa76:	425b      	negs	r3, r3
 800aa78:	b299      	uxth	r1, r3
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 800aa7a:	1889      	adds	r1, r1, r2
 800aa7c:	b20c      	sxth	r4, r1
 800aa7e:	b28e      	uxth	r6, r1
    if(x == 0 && y == 0) return LV_RES_OK;
 800aa80:	2c00      	cmp	r4, #0
 800aa82:	d100      	bne.n	800aa86 <scroll_x_anim+0x1e>
}
 800aa84:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_allocate_spec_attr(obj);
 800aa86:	0028      	movs	r0, r5
 800aa88:	f7fd fa60 	bl	8007f4c <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll.x += x;
 800aa8c:	68ab      	ldr	r3, [r5, #8]
    lv_obj_move_children_by(obj, x, y, true);
 800aa8e:	0021      	movs	r1, r4
    obj->spec_attr->scroll.x += x;
 800aa90:	8a1a      	ldrh	r2, [r3, #16]
    lv_obj_move_children_by(obj, x, y, true);
 800aa92:	0028      	movs	r0, r5
    obj->spec_attr->scroll.x += x;
 800aa94:	18b6      	adds	r6, r6, r2
 800aa96:	821e      	strh	r6, [r3, #16]
    lv_obj_move_children_by(obj, x, y, true);
 800aa98:	2200      	movs	r2, #0
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	f7fe f9ee 	bl	8008e7c <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	210b      	movs	r1, #11
 800aaa4:	0028      	movs	r0, r5
 800aaa6:	f7fa f8c3 	bl	8004c30 <lv_event_send>
    if(res != LV_RES_OK) return res;
 800aaaa:	2801      	cmp	r0, #1
 800aaac:	d1ea      	bne.n	800aa84 <scroll_x_anim+0x1c>
    lv_obj_invalidate(obj);
 800aaae:	0028      	movs	r0, r5
 800aab0:	f7fe fcb0 	bl	8009414 <lv_obj_invalidate>
}
 800aab4:	e7e6      	b.n	800aa84 <scroll_x_anim+0x1c>
 800aab6:	2100      	movs	r1, #0
 800aab8:	e7df      	b.n	800aa7a <scroll_x_anim+0x12>
 800aaba:	46c0      	nop			; (mov r8, r8)

0800aabc <scroll_y_anim>:
    if(obj->spec_attr == NULL) return 0;
 800aabc:	6883      	ldr	r3, [r0, #8]
{
 800aabe:	b570      	push	{r4, r5, r6, lr}
 800aac0:	000a      	movs	r2, r1
 800aac2:	0005      	movs	r5, r0
    if(obj->spec_attr == NULL) return 0;
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d020      	beq.n	800ab0a <scroll_y_anim+0x4e>
    return -obj->spec_attr->scroll.y;
 800aac8:	8a5b      	ldrh	r3, [r3, #18]
 800aaca:	425b      	negs	r3, r3
 800aacc:	b299      	uxth	r1, r3
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 800aace:	1889      	adds	r1, r1, r2
 800aad0:	b20c      	sxth	r4, r1
 800aad2:	b28e      	uxth	r6, r1
    if(x == 0 && y == 0) return LV_RES_OK;
 800aad4:	2c00      	cmp	r4, #0
 800aad6:	d100      	bne.n	800aada <scroll_y_anim+0x1e>
}
 800aad8:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_allocate_spec_attr(obj);
 800aada:	0028      	movs	r0, r5
 800aadc:	f7fd fa36 	bl	8007f4c <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll.x += x;
 800aae0:	68ab      	ldr	r3, [r5, #8]
    lv_obj_move_children_by(obj, x, y, true);
 800aae2:	2100      	movs	r1, #0
    obj->spec_attr->scroll.y += y;
 800aae4:	8a5a      	ldrh	r2, [r3, #18]
    lv_obj_move_children_by(obj, x, y, true);
 800aae6:	0028      	movs	r0, r5
    obj->spec_attr->scroll.y += y;
 800aae8:	18b6      	adds	r6, r6, r2
 800aaea:	825e      	strh	r6, [r3, #18]
    lv_obj_move_children_by(obj, x, y, true);
 800aaec:	0022      	movs	r2, r4
 800aaee:	2301      	movs	r3, #1
 800aaf0:	f7fe f9c4 	bl	8008e7c <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	210b      	movs	r1, #11
 800aaf8:	0028      	movs	r0, r5
 800aafa:	f7fa f899 	bl	8004c30 <lv_event_send>
    if(res != LV_RES_OK) return res;
 800aafe:	2801      	cmp	r0, #1
 800ab00:	d1ea      	bne.n	800aad8 <scroll_y_anim+0x1c>
    lv_obj_invalidate(obj);
 800ab02:	0028      	movs	r0, r5
 800ab04:	f7fe fc86 	bl	8009414 <lv_obj_invalidate>
}
 800ab08:	e7e6      	b.n	800aad8 <scroll_y_anim+0x1c>
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	e7df      	b.n	800aace <scroll_y_anim+0x12>
 800ab0e:	46c0      	nop			; (mov r8, r8)

0800ab10 <lv_obj_set_scrollbar_mode>:
{
 800ab10:	b570      	push	{r4, r5, r6, lr}
 800ab12:	0005      	movs	r5, r0
 800ab14:	000c      	movs	r4, r1
    lv_obj_allocate_spec_attr(obj);
 800ab16:	f7fd fa19 	bl	8007f4c <lv_obj_allocate_spec_attr>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 800ab1a:	68aa      	ldr	r2, [r5, #8]
 800ab1c:	7e11      	ldrb	r1, [r2, #24]
 800ab1e:	078b      	lsls	r3, r1, #30
 800ab20:	0f9b      	lsrs	r3, r3, #30
 800ab22:	42a3      	cmp	r3, r4
 800ab24:	d007      	beq.n	800ab36 <lv_obj_set_scrollbar_mode+0x26>
    obj->spec_attr->scrollbar_mode = mode;
 800ab26:	2303      	movs	r3, #3
 800ab28:	401c      	ands	r4, r3
 800ab2a:	4399      	bics	r1, r3
 800ab2c:	430c      	orrs	r4, r1
    lv_obj_invalidate(obj);
 800ab2e:	0028      	movs	r0, r5
    obj->spec_attr->scrollbar_mode = mode;
 800ab30:	7614      	strb	r4, [r2, #24]
    lv_obj_invalidate(obj);
 800ab32:	f7fe fc6f 	bl	8009414 <lv_obj_invalidate>
}
 800ab36:	bd70      	pop	{r4, r5, r6, pc}

0800ab38 <lv_obj_get_scrollbar_mode>:
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 800ab38:	6883      	ldr	r3, [r0, #8]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d003      	beq.n	800ab46 <lv_obj_get_scrollbar_mode+0xe>
 800ab3e:	7e18      	ldrb	r0, [r3, #24]
 800ab40:	0780      	lsls	r0, r0, #30
 800ab42:	0f80      	lsrs	r0, r0, #30
}
 800ab44:	4770      	bx	lr
    else return LV_SCROLLBAR_MODE_AUTO;
 800ab46:	2003      	movs	r0, #3
 800ab48:	e7fc      	b.n	800ab44 <lv_obj_get_scrollbar_mode+0xc>
 800ab4a:	46c0      	nop			; (mov r8, r8)

0800ab4c <lv_obj_get_scroll_dir>:
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 800ab4c:	6883      	ldr	r3, [r0, #8]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d003      	beq.n	800ab5a <lv_obj_get_scroll_dir+0xe>
 800ab52:	7e58      	ldrb	r0, [r3, #25]
 800ab54:	0700      	lsls	r0, r0, #28
 800ab56:	0f00      	lsrs	r0, r0, #28
}
 800ab58:	4770      	bx	lr
    else return LV_DIR_ALL;
 800ab5a:	200f      	movs	r0, #15
 800ab5c:	e7fc      	b.n	800ab58 <lv_obj_get_scroll_dir+0xc>
 800ab5e:	46c0      	nop			; (mov r8, r8)

0800ab60 <lv_obj_get_scroll_snap_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800ab60:	6883      	ldr	r3, [r0, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d003      	beq.n	800ab6e <lv_obj_get_scroll_snap_x+0xe>
 800ab66:	7e18      	ldrb	r0, [r3, #24]
 800ab68:	0700      	lsls	r0, r0, #28
 800ab6a:	0f80      	lsrs	r0, r0, #30
}
 800ab6c:	4770      	bx	lr
    else return LV_SCROLL_SNAP_NONE;
 800ab6e:	2000      	movs	r0, #0
 800ab70:	e7fc      	b.n	800ab6c <lv_obj_get_scroll_snap_x+0xc>
 800ab72:	46c0      	nop			; (mov r8, r8)

0800ab74 <lv_obj_get_scroll_snap_y>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 800ab74:	6883      	ldr	r3, [r0, #8]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d003      	beq.n	800ab82 <lv_obj_get_scroll_snap_y+0xe>
 800ab7a:	7e18      	ldrb	r0, [r3, #24]
 800ab7c:	0680      	lsls	r0, r0, #26
 800ab7e:	0f80      	lsrs	r0, r0, #30
}
 800ab80:	4770      	bx	lr
    else return LV_SCROLL_SNAP_NONE;
 800ab82:	2000      	movs	r0, #0
 800ab84:	e7fc      	b.n	800ab80 <lv_obj_get_scroll_snap_y+0xc>
 800ab86:	46c0      	nop			; (mov r8, r8)

0800ab88 <lv_obj_get_scroll_x>:
    if(obj->spec_attr == NULL) return 0;
 800ab88:	6883      	ldr	r3, [r0, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d003      	beq.n	800ab96 <lv_obj_get_scroll_x+0xe>
    return -obj->spec_attr->scroll.x;
 800ab8e:	8a18      	ldrh	r0, [r3, #16]
 800ab90:	4240      	negs	r0, r0
 800ab92:	b200      	sxth	r0, r0
}
 800ab94:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 800ab96:	2000      	movs	r0, #0
 800ab98:	e7fc      	b.n	800ab94 <lv_obj_get_scroll_x+0xc>
 800ab9a:	46c0      	nop			; (mov r8, r8)

0800ab9c <lv_obj_get_scroll_y>:
    if(obj->spec_attr == NULL) return 0;
 800ab9c:	6883      	ldr	r3, [r0, #8]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d003      	beq.n	800abaa <lv_obj_get_scroll_y+0xe>
    return -obj->spec_attr->scroll.y;
 800aba2:	8a58      	ldrh	r0, [r3, #18]
 800aba4:	4240      	negs	r0, r0
 800aba6:	b200      	sxth	r0, r0
}
 800aba8:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 800abaa:	2000      	movs	r0, #0
 800abac:	e7fc      	b.n	800aba8 <lv_obj_get_scroll_y+0xc>
 800abae:	46c0      	nop			; (mov r8, r8)

0800abb0 <lv_obj_get_scroll_top>:
 800abb0:	6883      	ldr	r3, [r0, #8]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d003      	beq.n	800abbe <lv_obj_get_scroll_top+0xe>
 800abb6:	8a58      	ldrh	r0, [r3, #18]
 800abb8:	4240      	negs	r0, r0
 800abba:	b200      	sxth	r0, r0
 800abbc:	4770      	bx	lr
 800abbe:	2000      	movs	r0, #0
 800abc0:	e7fc      	b.n	800abbc <lv_obj_get_scroll_top+0xc>
 800abc2:	46c0      	nop			; (mov r8, r8)

0800abc4 <lv_obj_get_scroll_bottom>:
{
 800abc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc6:	46ce      	mov	lr, r9
 800abc8:	4647      	mov	r7, r8
 800abca:	b580      	push	{r7, lr}
 800abcc:	0006      	movs	r6, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800abce:	f003 f93b 	bl	800de48 <lv_obj_get_child_cnt>
 800abd2:	4680      	mov	r8, r0
    for(i = 0; i < child_cnt; i++) {
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d050      	beq.n	800ac7a <lv_obj_get_scroll_bottom+0xb6>
 800abd8:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 800abda:	4f32      	ldr	r7, [pc, #200]	; (800aca4 <lv_obj_get_scroll_bottom+0xe0>)
        lv_obj_t * child = obj->spec_attr->children[i];
 800abdc:	68b3      	ldr	r3, [r6, #8]
 800abde:	00a2      	lsls	r2, r4, #2
 800abe0:	681b      	ldr	r3, [r3, #0]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800abe2:	4931      	ldr	r1, [pc, #196]	; (800aca8 <lv_obj_get_scroll_bottom+0xe4>)
        lv_obj_t * child = obj->spec_attr->children[i];
 800abe4:	58d5      	ldr	r5, [r2, r3]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800abe6:	0028      	movs	r0, r5
 800abe8:	f7fd f99c 	bl	8007f24 <lv_obj_has_flag_any>
 800abec:	2800      	cmp	r0, #0
 800abee:	d106      	bne.n	800abfe <lv_obj_get_scroll_bottom+0x3a>
        child_res = LV_MAX(child_res, child->coords.y2);
 800abf0:	8aeb      	ldrh	r3, [r5, #22]
 800abf2:	1c1a      	adds	r2, r3, #0
 800abf4:	b21b      	sxth	r3, r3
 800abf6:	42bb      	cmp	r3, r7
 800abf8:	da00      	bge.n	800abfc <lv_obj_get_scroll_bottom+0x38>
 800abfa:	1c3a      	adds	r2, r7, #0
 800abfc:	b217      	sxth	r7, r2
    for(i = 0; i < child_cnt; i++) {
 800abfe:	3401      	adds	r4, #1
 800ac00:	45a0      	cmp	r8, r4
 800ac02:	d1eb      	bne.n	800abdc <lv_obj_get_scroll_bottom+0x18>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800ac04:	2210      	movs	r2, #16
 800ac06:	2100      	movs	r1, #0
 800ac08:	0030      	movs	r0, r6
 800ac0a:	f001 fcdb 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800ac0e:	2211      	movs	r2, #17
 800ac10:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800ac12:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800ac14:	0030      	movs	r0, r6
 800ac16:	f001 fcd5 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800ac1a:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800ac1c:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800ac1e:	2100      	movs	r1, #0
 800ac20:	0030      	movs	r0, r6
 800ac22:	f001 fccf 	bl	800c5c4 <lv_obj_get_style_prop>
    if(child_res != LV_COORD_MIN) {
 800ac26:	4b1f      	ldr	r3, [pc, #124]	; (800aca4 <lv_obj_get_scroll_bottom+0xe0>)
 800ac28:	429f      	cmp	r7, r3
 800ac2a:	d023      	beq.n	800ac74 <lv_obj_get_scroll_bottom+0xb0>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 800ac2c:	8af2      	ldrh	r2, [r6, #22]
 800ac2e:	b2ad      	uxth	r5, r5
 800ac30:	b284      	uxth	r4, r0
 800ac32:	192b      	adds	r3, r5, r4
 800ac34:	1a9b      	subs	r3, r3, r2
 800ac36:	19df      	adds	r7, r3, r7
 800ac38:	b23f      	sxth	r7, r7
    lv_coord_t self_h = lv_obj_get_self_height(obj);
 800ac3a:	0030      	movs	r0, r6
 800ac3c:	f7fe f8e2 	bl	8008e04 <lv_obj_get_self_height>
 800ac40:	4680      	mov	r8, r0
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 800ac42:	0030      	movs	r0, r6
 800ac44:	f7fe f850 	bl	8008ce8 <lv_obj_get_height>
 800ac48:	0063      	lsls	r3, r4, #1
 800ac4a:	444b      	add	r3, r9
 800ac4c:	18eb      	adds	r3, r5, r3
 800ac4e:	4443      	add	r3, r8
    if(obj->spec_attr == NULL) return 0;
 800ac50:	68b2      	ldr	r2, [r6, #8]
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 800ac52:	1a1b      	subs	r3, r3, r0
 800ac54:	b29b      	uxth	r3, r3
    if(obj->spec_attr == NULL) return 0;
 800ac56:	2a00      	cmp	r2, #0
 800ac58:	d002      	beq.n	800ac60 <lv_obj_get_scroll_bottom+0x9c>
    self_h -= lv_obj_get_scroll_y(obj);
 800ac5a:	8a50      	ldrh	r0, [r2, #18]
 800ac5c:	181b      	adds	r3, r3, r0
 800ac5e:	b29b      	uxth	r3, r3
    return LV_MAX(child_res, self_h);
 800ac60:	1c18      	adds	r0, r3, #0
 800ac62:	b21b      	sxth	r3, r3
 800ac64:	42bb      	cmp	r3, r7
 800ac66:	da00      	bge.n	800ac6a <lv_obj_get_scroll_bottom+0xa6>
 800ac68:	1c38      	adds	r0, r7, #0
 800ac6a:	b200      	sxth	r0, r0
}
 800ac6c:	bcc0      	pop	{r6, r7}
 800ac6e:	46b9      	mov	r9, r7
 800ac70:	46b0      	mov	r8, r6
 800ac72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 800ac74:	b284      	uxth	r4, r0
 800ac76:	b2ad      	uxth	r5, r5
 800ac78:	e7df      	b.n	800ac3a <lv_obj_get_scroll_bottom+0x76>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800ac7a:	2210      	movs	r2, #16
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	0030      	movs	r0, r6
 800ac80:	f001 fca0 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800ac84:	2211      	movs	r2, #17
 800ac86:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800ac88:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800ac8a:	0030      	movs	r0, r6
 800ac8c:	f001 fc9a 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800ac90:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800ac92:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800ac94:	2100      	movs	r1, #0
 800ac96:	0030      	movs	r0, r6
 800ac98:	f001 fc94 	bl	800c5c4 <lv_obj_get_style_prop>
 800ac9c:	4f01      	ldr	r7, [pc, #4]	; (800aca4 <lv_obj_get_scroll_bottom+0xe0>)
 800ac9e:	b284      	uxth	r4, r0
 800aca0:	b2ad      	uxth	r5, r5
 800aca2:	e7ca      	b.n	800ac3a <lv_obj_get_scroll_bottom+0x76>
 800aca4:	ffffe001 	.word	0xffffe001
 800aca8:	00040001 	.word	0x00040001

0800acac <lv_obj_get_scrollbar_area.part.0>:
void lv_obj_get_scrollbar_area(lv_obj_t * obj, lv_area_t * hor_area, lv_area_t * ver_area)
 800acac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acae:	46de      	mov	lr, fp
 800acb0:	4645      	mov	r5, r8
 800acb2:	4657      	mov	r7, sl
 800acb4:	464e      	mov	r6, r9
 800acb6:	b5e0      	push	{r5, r6, r7, lr}
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 800acb8:	6883      	ldr	r3, [r0, #8]
void lv_obj_get_scrollbar_area(lv_obj_t * obj, lv_area_t * hor_area, lv_area_t * ver_area)
 800acba:	0004      	movs	r4, r0
 800acbc:	468b      	mov	fp, r1
 800acbe:	0015      	movs	r5, r2
 800acc0:	b091      	sub	sp, #68	; 0x44
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d100      	bne.n	800acc8 <lv_obj_get_scrollbar_area.part.0+0x1c>
 800acc6:	e206      	b.n	800b0d6 <lv_obj_get_scrollbar_area.part.0+0x42a>
 800acc8:	7e1b      	ldrb	r3, [r3, #24]
 800acca:	079b      	lsls	r3, r3, #30
 800accc:	0f9a      	lsrs	r2, r3, #30
 800acce:	4692      	mov	sl, r2
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d100      	bne.n	800acd6 <lv_obj_get_scrollbar_area.part.0+0x2a>
 800acd4:	e1be      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800acd6:	2000      	movs	r0, #0
 800acd8:	f008 ff3e 	bl	8013b58 <lv_indev_get_next>
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 800acdc:	4653      	mov	r3, sl
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800acde:	0006      	movs	r6, r0
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 800ace0:	2b02      	cmp	r3, #2
 800ace2:	d10d      	bne.n	800ad00 <lv_obj_get_scrollbar_area.part.0+0x54>
        while(indev) {
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d106      	bne.n	800acf6 <lv_obj_get_scrollbar_area.part.0+0x4a>
 800ace8:	e1b4      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
            indev = lv_indev_get_next(indev);
 800acea:	0030      	movs	r0, r6
 800acec:	f008 ff34 	bl	8013b58 <lv_indev_get_next>
 800acf0:	1e06      	subs	r6, r0, #0
        while(indev) {
 800acf2:	d100      	bne.n	800acf6 <lv_obj_get_scrollbar_area.part.0+0x4a>
 800acf4:	e1ae      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 800acf6:	0030      	movs	r0, r6
 800acf8:	f7fa fd68 	bl	80057cc <lv_indev_get_scroll_obj>
 800acfc:	4284      	cmp	r4, r0
 800acfe:	d1f4      	bne.n	800acea <lv_obj_get_scrollbar_area.part.0+0x3e>
    if(obj->spec_attr == NULL) return 0;
 800ad00:	68a3      	ldr	r3, [r4, #8]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d100      	bne.n	800ad08 <lv_obj_get_scrollbar_area.part.0+0x5c>
 800ad06:	e1f0      	b.n	800b0ea <lv_obj_get_scrollbar_area.part.0+0x43e>
    return -obj->spec_attr->scroll.y;
 800ad08:	8a5b      	ldrh	r3, [r3, #18]
 800ad0a:	425b      	negs	r3, r3
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	4690      	mov	r8, r2
 800ad10:	b21f      	sxth	r7, r3
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800ad12:	0020      	movs	r0, r4
 800ad14:	f7ff ff56 	bl	800abc4 <lv_obj_get_scroll_bottom>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800ad18:	2216      	movs	r2, #22
 800ad1a:	9001      	str	r0, [sp, #4]
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	0020      	movs	r0, r4
 800ad20:	f001 fc50 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800ad24:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800ad26:	2801      	cmp	r0, #1
 800ad28:	d100      	bne.n	800ad2c <lv_obj_get_scrollbar_area.part.0+0x80>
 800ad2a:	e1e2      	b.n	800b0f2 <lv_obj_get_scrollbar_area.part.0+0x446>
        if(obj->spec_attr == NULL) return 0;
 800ad2c:	68a3      	ldr	r3, [r4, #8]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d100      	bne.n	800ad34 <lv_obj_get_scrollbar_area.part.0+0x88>
 800ad32:	e1c2      	b.n	800b0ba <lv_obj_get_scrollbar_area.part.0+0x40e>
        return -obj->spec_attr->scroll.x;
 800ad34:	8a18      	ldrh	r0, [r3, #16]
 800ad36:	4240      	negs	r0, r0
 800ad38:	b203      	sxth	r3, r0
 800ad3a:	9303      	str	r3, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800ad3c:	2216      	movs	r2, #22
 800ad3e:	2100      	movs	r1, #0
 800ad40:	0020      	movs	r0, r4
 800ad42:	f001 fc3f 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800ad46:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800ad48:	2801      	cmp	r0, #1
 800ad4a:	d000      	beq.n	800ad4e <lv_obj_get_scrollbar_area.part.0+0xa2>
 800ad4c:	e189      	b.n	800b062 <lv_obj_get_scrollbar_area.part.0+0x3b6>
        if(obj->spec_attr == NULL) return 0;
 800ad4e:	68a3      	ldr	r3, [r4, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d100      	bne.n	800ad56 <lv_obj_get_scrollbar_area.part.0+0xaa>
 800ad54:	e1e9      	b.n	800b12a <lv_obj_get_scrollbar_area.part.0+0x47e>
        return obj->spec_attr->scroll.x;
 800ad56:	2110      	movs	r1, #16
 800ad58:	5e5a      	ldrsh	r2, [r3, r1]
 800ad5a:	9202      	str	r2, [sp, #8]
    if((dir & LV_DIR_VER) &&
 800ad5c:	220c      	movs	r2, #12
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 800ad5e:	7e5b      	ldrb	r3, [r3, #25]
 800ad60:	071b      	lsls	r3, r3, #28
 800ad62:	0f1b      	lsrs	r3, r3, #28
    if((dir & LV_DIR_VER) &&
 800ad64:	421a      	tst	r2, r3
 800ad66:	d000      	beq.n	800ad6a <lv_obj_get_scrollbar_area.part.0+0xbe>
 800ad68:	e194      	b.n	800b094 <lv_obj_get_scrollbar_area.part.0+0x3e8>
    if((dir & LV_DIR_HOR) &&
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d100      	bne.n	800ad70 <lv_obj_get_scrollbar_area.part.0+0xc4>
 800ad6e:	e171      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
 800ad70:	2300      	movs	r3, #0
 800ad72:	4699      	mov	r9, r3
 800ad74:	4653      	mov	r3, sl
        hor_draw = true;
 800ad76:	2701      	movs	r7, #1
    if((dir & LV_DIR_HOR) &&
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d000      	beq.n	800ad7e <lv_obj_get_scrollbar_area.part.0+0xd2>
 800ad7c:	e1c9      	b.n	800b112 <lv_obj_get_scrollbar_area.part.0+0x466>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800ad7e:	2180      	movs	r1, #128	; 0x80
 800ad80:	2216      	movs	r2, #22
 800ad82:	0249      	lsls	r1, r1, #9
 800ad84:	0020      	movs	r0, r4
 800ad86:	f001 fc1d 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800ad8a:	2180      	movs	r1, #128	; 0x80
    return (lv_base_dir_t)v.num;
 800ad8c:	b2c3      	uxtb	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800ad8e:	2210      	movs	r2, #16
 800ad90:	0249      	lsls	r1, r1, #9
 800ad92:	0020      	movs	r0, r4
    return (lv_base_dir_t)v.num;
 800ad94:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800ad96:	f001 fc15 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800ad9a:	2180      	movs	r1, #128	; 0x80
 800ad9c:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800ad9e:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800ada0:	0249      	lsls	r1, r1, #9
 800ada2:	0020      	movs	r0, r4
 800ada4:	f001 fc0e 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800ada8:	2180      	movs	r1, #128	; 0x80
 800adaa:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800adac:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800adae:	0249      	lsls	r1, r1, #9
 800adb0:	0020      	movs	r0, r4
 800adb2:	f001 fc07 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800adb6:	2180      	movs	r1, #128	; 0x80
 800adb8:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800adba:	900a      	str	r0, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800adbc:	0249      	lsls	r1, r1, #9
 800adbe:	0020      	movs	r0, r4
 800adc0:	f001 fc00 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800adc4:	2180      	movs	r1, #128	; 0x80
 800adc6:	2201      	movs	r2, #1
 800adc8:	0249      	lsls	r1, r1, #9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800adca:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800adcc:	0020      	movs	r0, r4
 800adce:	f001 fbf9 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800add2:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800add4:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t obj_h = lv_obj_get_height(obj);
 800add6:	0020      	movs	r0, r4
 800add8:	f7fd ff86 	bl	8008ce8 <lv_obj_get_height>
 800addc:	4682      	mov	sl, r0
    lv_coord_t obj_w = lv_obj_get_width(obj);
 800adde:	0020      	movs	r0, r4
 800ade0:	f7fd ff7a 	bl	8008cd8 <lv_obj_get_width>
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 800ade4:	464b      	mov	r3, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800ade6:	2180      	movs	r1, #128	; 0x80
 800ade8:	425b      	negs	r3, r3
 800adea:	4033      	ands	r3, r6
    lv_coord_t obj_w = lv_obj_get_width(obj);
 800adec:	9005      	str	r0, [sp, #20]
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 800adee:	9308      	str	r3, [sp, #32]
 800adf0:	2221      	movs	r2, #33	; 0x21
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 800adf2:	427b      	negs	r3, r7
 800adf4:	0020      	movs	r0, r4
 800adf6:	0249      	lsls	r1, r1, #9
 800adf8:	401e      	ands	r6, r3
 800adfa:	f001 fbe3 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800adfe:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800ae00:	2801      	cmp	r0, #1
 800ae02:	d800      	bhi.n	800ae06 <lv_obj_get_scrollbar_area.part.0+0x15a>
 800ae04:	e17a      	b.n	800b0fc <lv_obj_get_scrollbar_area.part.0+0x450>
    if(ver_draw && content_h) {
 800ae06:	464b      	mov	r3, r9
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d100      	bne.n	800ae0e <lv_obj_get_scrollbar_area.part.0+0x162>
 800ae0c:	e07e      	b.n	800af0c <lv_obj_get_scrollbar_area.part.0+0x260>
    lv_coord_t content_h = obj_h + st + sb;
 800ae0e:	4653      	mov	r3, sl
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	4699      	mov	r9, r3
 800ae14:	9901      	ldr	r1, [sp, #4]
 800ae16:	4441      	add	r1, r8
 800ae18:	b28b      	uxth	r3, r1
 800ae1a:	4698      	mov	r8, r3
 800ae1c:	4649      	mov	r1, r9
 800ae1e:	4441      	add	r1, r8
 800ae20:	b209      	sxth	r1, r1
    if(ver_draw && content_h) {
 800ae22:	2900      	cmp	r1, #0
 800ae24:	d072      	beq.n	800af0c <lv_obj_get_scrollbar_area.part.0+0x260>
        ver_area->y1 = obj->coords.y1;
 800ae26:	2212      	movs	r2, #18
 800ae28:	5ea3      	ldrsh	r3, [r4, r2]
 800ae2a:	806b      	strh	r3, [r5, #2]
        ver_area->y2 = obj->coords.y2;
 800ae2c:	2216      	movs	r2, #22
 800ae2e:	5ea3      	ldrsh	r3, [r4, r2]
 800ae30:	80eb      	strh	r3, [r5, #6]
        if(rtl) {
 800ae32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d100      	bne.n	800ae3a <lv_obj_get_scrollbar_area.part.0+0x18e>
 800ae38:	e21a      	b.n	800b270 <lv_obj_get_scrollbar_area.part.0+0x5c4>
            ver_area->x2 = obj->coords.x2 - right_space;
 800ae3a:	9a07      	ldr	r2, [sp, #28]
 800ae3c:	8aa3      	ldrh	r3, [r4, #20]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 800ae3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
            ver_area->x2 = obj->coords.x2 - right_space;
 800ae40:	1a9b      	subs	r3, r3, r2
 800ae42:	b29a      	uxth	r2, r3
            ver_area->x1 = ver_area->x2 - tickness + 1;
 800ae44:	1a12      	subs	r2, r2, r0
 800ae46:	3201      	adds	r2, #1
            ver_area->x2 = obj->coords.x2 - right_space;
 800ae48:	b21b      	sxth	r3, r3
            ver_area->x1 = ver_area->x2 - tickness + 1;
 800ae4a:	b212      	sxth	r2, r2
 800ae4c:	80ab      	strh	r3, [r5, #4]
        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 800ae4e:	466b      	mov	r3, sp
 800ae50:	802a      	strh	r2, [r5, #0]
 800ae52:	2218      	movs	r2, #24
 800ae54:	5e9b      	ldrsh	r3, [r3, r2]
 800ae56:	466a      	mov	r2, sp
 800ae58:	2010      	movs	r0, #16
 800ae5a:	5e12      	ldrsh	r2, [r2, r0]
 800ae5c:	4650      	mov	r0, sl
 800ae5e:	930e      	str	r3, [sp, #56]	; 0x38
 800ae60:	1ac0      	subs	r0, r0, r3
 800ae62:	4653      	mov	r3, sl
 800ae64:	1a80      	subs	r0, r0, r2
 800ae66:	1b80      	subs	r0, r0, r6
 800ae68:	4358      	muls	r0, r3
 800ae6a:	920f      	str	r2, [sp, #60]	; 0x3c
 800ae6c:	f7f5 f9e6 	bl	800023c <__divsi3>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 800ae70:	b203      	sxth	r3, r0
        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 800ae72:	4682      	mov	sl, r0
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 800ae74:	2000      	movs	r0, #0
 800ae76:	930c      	str	r3, [sp, #48]	; 0x30
 800ae78:	f008 fe10 	bl	8013a9c <lv_disp_get_dpi>
 800ae7c:	0083      	lsls	r3, r0, #2
 800ae7e:	181b      	adds	r3, r3, r0
 800ae80:	005b      	lsls	r3, r3, #1
 800ae82:	2001      	movs	r0, #1
 800ae84:	2bef      	cmp	r3, #239	; 0xef
 800ae86:	dd00      	ble.n	800ae8a <lv_obj_get_scrollbar_area.part.0+0x1de>
 800ae88:	e214      	b.n	800b2b4 <lv_obj_get_scrollbar_area.part.0+0x608>
 800ae8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae8c:	4283      	cmp	r3, r0
 800ae8e:	dc00      	bgt.n	800ae92 <lv_obj_get_scrollbar_area.part.0+0x1e6>
 800ae90:	e1f8      	b.n	800b284 <lv_obj_get_scrollbar_area.part.0+0x5d8>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800ae92:	4653      	mov	r3, sl
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	469a      	mov	sl, r3
 800ae98:	466b      	mov	r3, sp
 800ae9a:	466a      	mov	r2, sp
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 800ae9c:	4640      	mov	r0, r8
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800ae9e:	b2b1      	uxth	r1, r6
 800aea0:	8b1b      	ldrh	r3, [r3, #24]
 800aea2:	8a12      	ldrh	r2, [r2, #16]
 800aea4:	910d      	str	r1, [sp, #52]	; 0x34
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 800aea6:	b201      	sxth	r1, r0
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800aea8:	9306      	str	r3, [sp, #24]
 800aeaa:	920c      	str	r2, [sp, #48]	; 0x30
        if(scroll_h <= 0) {
 800aeac:	2900      	cmp	r1, #0
 800aeae:	dc00      	bgt.n	800aeb2 <lv_obj_get_scrollbar_area.part.0+0x206>
 800aeb0:	e1c3      	b.n	800b23a <lv_obj_get_scrollbar_area.part.0+0x58e>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800aeb2:	4694      	mov	ip, r2
 800aeb4:	464a      	mov	r2, r9
 800aeb6:	0018      	movs	r0, r3
 800aeb8:	4463      	add	r3, ip
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	b2b2      	uxth	r2, r6
 800aebe:	1a9b      	subs	r3, r3, r2
 800aec0:	4652      	mov	r2, sl
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800aec2:	4684      	mov	ip, r0
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800aec4:	1a9b      	subs	r3, r3, r2
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800aec6:	8a62      	ldrh	r2, [r4, #18]
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800aec8:	b29b      	uxth	r3, r3
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800aeca:	4462      	add	r2, ip
 800aecc:	4691      	mov	r9, r2
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 800aece:	b218      	sxth	r0, r3
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800aed0:	4499      	add	r9, r3
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 800aed2:	9b01      	ldr	r3, [sp, #4]
 800aed4:	4343      	muls	r3, r0
 800aed6:	0018      	movs	r0, r3
 800aed8:	f7f5 f9b0 	bl	800023c <__divsi3>
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800aedc:	464b      	mov	r3, r9
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 800aede:	4652      	mov	r2, sl
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800aee0:	1a1b      	subs	r3, r3, r0
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 800aee2:	3a01      	subs	r2, #1
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800aee4:	b219      	sxth	r1, r3
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 800aee6:	189b      	adds	r3, r3, r2
 800aee8:	b21b      	sxth	r3, r3
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800aeea:	8069      	strh	r1, [r5, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 800aeec:	80eb      	strh	r3, [r5, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 800aeee:	2212      	movs	r2, #18
 800aef0:	5ea0      	ldrsh	r0, [r4, r2]
 800aef2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aef4:	1882      	adds	r2, r0, r2
 800aef6:	4291      	cmp	r1, r2
 800aef8:	da00      	bge.n	800aefc <lv_obj_get_scrollbar_area.part.0+0x250>
 800aefa:	e16b      	b.n	800b1d4 <lv_obj_get_scrollbar_area.part.0+0x528>
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 800aefc:	2116      	movs	r1, #22
 800aefe:	5e62      	ldrsh	r2, [r4, r1]
 800af00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800af02:	1b96      	subs	r6, r2, r6
 800af04:	1a76      	subs	r6, r6, r1
 800af06:	429e      	cmp	r6, r3
 800af08:	da00      	bge.n	800af0c <lv_obj_get_scrollbar_area.part.0+0x260>
 800af0a:	e13f      	b.n	800b18c <lv_obj_get_scrollbar_area.part.0+0x4e0>
    if(hor_draw && content_w) {
 800af0c:	2f00      	cmp	r7, #0
 800af0e:	d100      	bne.n	800af12 <lv_obj_get_scrollbar_area.part.0+0x266>
 800af10:	e0a0      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
    lv_coord_t content_w = obj_w + sl + sr;
 800af12:	466b      	mov	r3, sp
 800af14:	8a9d      	ldrh	r5, [r3, #20]
 800af16:	9b02      	ldr	r3, [sp, #8]
 800af18:	18e8      	adds	r0, r5, r3
 800af1a:	9b03      	ldr	r3, [sp, #12]
 800af1c:	469c      	mov	ip, r3
 800af1e:	4460      	add	r0, ip
 800af20:	b283      	uxth	r3, r0
 800af22:	b201      	sxth	r1, r0
 800af24:	4698      	mov	r8, r3
    if(hor_draw && content_w) {
 800af26:	2900      	cmp	r1, #0
 800af28:	d100      	bne.n	800af2c <lv_obj_get_scrollbar_area.part.0+0x280>
 800af2a:	e093      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 800af2c:	8ae0      	ldrh	r0, [r4, #22]
 800af2e:	9b04      	ldr	r3, [sp, #16]
 800af30:	1ac0      	subs	r0, r0, r3
 800af32:	465b      	mov	r3, fp
 800af34:	b280      	uxth	r0, r0
 800af36:	80d8      	strh	r0, [r3, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 800af38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af3a:	1ac0      	subs	r0, r0, r3
 800af3c:	465b      	mov	r3, fp
 800af3e:	3001      	adds	r0, #1
 800af40:	8058      	strh	r0, [r3, #2]
        hor_area->x1 = obj->coords.x1;
 800af42:	2210      	movs	r2, #16
 800af44:	5ea3      	ldrsh	r3, [r4, r2]
 800af46:	465a      	mov	r2, fp
 800af48:	8013      	strh	r3, [r2, #0]
        hor_area->x2 = obj->coords.x2;
 800af4a:	2214      	movs	r2, #20
 800af4c:	5ea3      	ldrsh	r3, [r4, r2]
 800af4e:	465a      	mov	r2, fp
 800af50:	8093      	strh	r3, [r2, #4]
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 800af52:	466b      	mov	r3, sp
 800af54:	2228      	movs	r2, #40	; 0x28
 800af56:	5e9b      	ldrsh	r3, [r3, r2]
 800af58:	469a      	mov	sl, r3
 800af5a:	466b      	mov	r3, sp
 800af5c:	221c      	movs	r2, #28
 800af5e:	5e9b      	ldrsh	r3, [r3, r2]
 800af60:	4652      	mov	r2, sl
 800af62:	4699      	mov	r9, r3
 800af64:	9b05      	ldr	r3, [sp, #20]
 800af66:	1a98      	subs	r0, r3, r2
 800af68:	464a      	mov	r2, r9
 800af6a:	1a80      	subs	r0, r0, r2
 800af6c:	9a08      	ldr	r2, [sp, #32]
 800af6e:	1a80      	subs	r0, r0, r2
 800af70:	4358      	muls	r0, r3
 800af72:	f7f5 f963 	bl	800023c <__divsi3>
 800af76:	0006      	movs	r6, r0
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800af78:	b207      	sxth	r7, r0
 800af7a:	2000      	movs	r0, #0
 800af7c:	f008 fd8e 	bl	8013a9c <lv_disp_get_dpi>
 800af80:	0083      	lsls	r3, r0, #2
 800af82:	181b      	adds	r3, r3, r0
 800af84:	005b      	lsls	r3, r3, #1
 800af86:	2001      	movs	r0, #1
 800af88:	2bef      	cmp	r3, #239	; 0xef
 800af8a:	dd00      	ble.n	800af8e <lv_obj_get_scrollbar_area.part.0+0x2e2>
 800af8c:	e1b3      	b.n	800b2f6 <lv_obj_get_scrollbar_area.part.0+0x64a>
 800af8e:	4287      	cmp	r7, r0
 800af90:	dc00      	bgt.n	800af94 <lv_obj_get_scrollbar_area.part.0+0x2e8>
 800af92:	e19a      	b.n	800b2ca <lv_obj_get_scrollbar_area.part.0+0x61e>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 800af94:	b2b6      	uxth	r6, r6
 800af96:	466b      	mov	r3, sp
 800af98:	8d1f      	ldrh	r7, [r3, #40]	; 0x28
 800af9a:	8b9b      	ldrh	r3, [r3, #28]
 800af9c:	9303      	str	r3, [sp, #12]
 800af9e:	466b      	mov	r3, sp
 800afa0:	8c1b      	ldrh	r3, [r3, #32]
 800afa2:	9301      	str	r3, [sp, #4]
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 800afa4:	4643      	mov	r3, r8
 800afa6:	1b59      	subs	r1, r3, r5
 800afa8:	b209      	sxth	r1, r1
        if(scroll_w <= 0) {
 800afaa:	2900      	cmp	r1, #0
 800afac:	dc00      	bgt.n	800afb0 <lv_obj_get_scrollbar_area.part.0+0x304>
 800afae:	e0d3      	b.n	800b158 <lv_obj_get_scrollbar_area.part.0+0x4ac>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 800afb0:	9b03      	ldr	r3, [sp, #12]
 800afb2:	9a01      	ldr	r2, [sp, #4]
 800afb4:	18fb      	adds	r3, r7, r3
 800afb6:	1aeb      	subs	r3, r5, r3
 800afb8:	1a9b      	subs	r3, r3, r2
 800afba:	1b9b      	subs	r3, r3, r6
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 800afbc:	b218      	sxth	r0, r3
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 800afbe:	b29d      	uxth	r5, r3
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 800afc0:	9b02      	ldr	r3, [sp, #8]
 800afc2:	4343      	muls	r3, r0
 800afc4:	0018      	movs	r0, r3
 800afc6:	f7f5 f939 	bl	800023c <__divsi3>
            if(rtl) {
 800afca:	9b09      	ldr	r3, [sp, #36]	; 0x24
            sb_x = rem - sb_x;
 800afcc:	1a2d      	subs	r5, r5, r0
 800afce:	b2ad      	uxth	r5, r5
            if(rtl) {
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d100      	bne.n	800afd6 <lv_obj_get_scrollbar_area.part.0+0x32a>
 800afd4:	e1b8      	b.n	800b348 <lv_obj_get_scrollbar_area.part.0+0x69c>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 800afd6:	8a23      	ldrh	r3, [r4, #16]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800afd8:	1e70      	subs	r0, r6, #1
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 800afda:	18fb      	adds	r3, r7, r3
 800afdc:	18ed      	adds	r5, r5, r3
 800afde:	465b      	mov	r3, fp
 800afe0:	b22a      	sxth	r2, r5
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800afe2:	182d      	adds	r5, r5, r0
 800afe4:	b22d      	sxth	r5, r5
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 800afe6:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800afe8:	809d      	strh	r5, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 800afea:	2310      	movs	r3, #16
 800afec:	5ee1      	ldrsh	r1, [r4, r3]
 800afee:	4653      	mov	r3, sl
 800aff0:	18cb      	adds	r3, r1, r3
 800aff2:	429a      	cmp	r2, r3
 800aff4:	da00      	bge.n	800aff8 <lv_obj_get_scrollbar_area.part.0+0x34c>
 800aff6:	e200      	b.n	800b3fa <lv_obj_get_scrollbar_area.part.0+0x74e>
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 800aff8:	464a      	mov	r2, r9
 800affa:	2314      	movs	r3, #20
 800affc:	5ee4      	ldrsh	r4, [r4, r3]
 800affe:	9b08      	ldr	r3, [sp, #32]
 800b000:	1ae3      	subs	r3, r4, r3
 800b002:	1a9b      	subs	r3, r3, r2
 800b004:	42ab      	cmp	r3, r5
 800b006:	da25      	bge.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 800b008:	9b03      	ldr	r3, [sp, #12]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800b00a:	2000      	movs	r0, #0
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 800b00c:	1ae4      	subs	r4, r4, r3
 800b00e:	9b01      	ldr	r3, [sp, #4]
 800b010:	1ae4      	subs	r4, r4, r3
 800b012:	465b      	mov	r3, fp
 800b014:	b224      	sxth	r4, r4
 800b016:	809c      	strh	r4, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800b018:	f008 fd40 	bl	8013a9c <lv_disp_get_dpi>
 800b01c:	0083      	lsls	r3, r0, #2
 800b01e:	181b      	adds	r3, r3, r0
 800b020:	005b      	lsls	r3, r3, #1
 800b022:	2001      	movs	r0, #1
 800b024:	2bef      	cmp	r3, #239	; 0xef
 800b026:	dd00      	ble.n	800b02a <lv_obj_get_scrollbar_area.part.0+0x37e>
 800b028:	e264      	b.n	800b4f4 <lv_obj_get_scrollbar_area.part.0+0x848>
 800b02a:	465b      	mov	r3, fp
 800b02c:	2200      	movs	r2, #0
 800b02e:	5e9b      	ldrsh	r3, [r3, r2]
 800b030:	1a24      	subs	r4, r4, r0
 800b032:	429c      	cmp	r4, r3
 800b034:	da0e      	bge.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800b036:	465b      	mov	r3, fp
 800b038:	2000      	movs	r0, #0
 800b03a:	889c      	ldrh	r4, [r3, #4]
 800b03c:	f008 fd2e 	bl	8013a9c <lv_disp_get_dpi>
 800b040:	0083      	lsls	r3, r0, #2
 800b042:	181b      	adds	r3, r3, r0
 800b044:	005b      	lsls	r3, r3, #1
 800b046:	2001      	movs	r0, #1
 800b048:	2bef      	cmp	r3, #239	; 0xef
 800b04a:	dd00      	ble.n	800b04e <lv_obj_get_scrollbar_area.part.0+0x3a2>
 800b04c:	e291      	b.n	800b572 <lv_obj_get_scrollbar_area.part.0+0x8c6>
 800b04e:	465b      	mov	r3, fp
 800b050:	1a20      	subs	r0, r4, r0
 800b052:	8018      	strh	r0, [r3, #0]
}
 800b054:	b011      	add	sp, #68	; 0x44
 800b056:	bcf0      	pop	{r4, r5, r6, r7}
 800b058:	46bb      	mov	fp, r7
 800b05a:	46b2      	mov	sl, r6
 800b05c:	46a9      	mov	r9, r5
 800b05e:	46a0      	mov	r8, r4
 800b060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b062:	0020      	movs	r0, r4
 800b064:	f7ff fc8c 	bl	800a980 <lv_obj_get_scroll_right.part.0>
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 800b068:	68a3      	ldr	r3, [r4, #8]
 800b06a:	9002      	str	r0, [sp, #8]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d000      	beq.n	800b072 <lv_obj_get_scrollbar_area.part.0+0x3c6>
 800b070:	e674      	b.n	800ad5c <lv_obj_get_scrollbar_area.part.0+0xb0>
    if((dir & LV_DIR_VER) &&
 800b072:	4653      	mov	r3, sl
 800b074:	2b01      	cmp	r3, #1
 800b076:	d100      	bne.n	800b07a <lv_obj_get_scrollbar_area.part.0+0x3ce>
 800b078:	e1e4      	b.n	800b444 <lv_obj_get_scrollbar_area.part.0+0x798>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800b07a:	2b03      	cmp	r3, #3
 800b07c:	d15d      	bne.n	800b13a <lv_obj_get_scrollbar_area.part.0+0x48e>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800b07e:	2f00      	cmp	r7, #0
 800b080:	dc00      	bgt.n	800b084 <lv_obj_get_scrollbar_area.part.0+0x3d8>
 800b082:	e25a      	b.n	800b53a <lv_obj_get_scrollbar_area.part.0+0x88e>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800b084:	9b03      	ldr	r3, [sp, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	dc00      	bgt.n	800b08c <lv_obj_get_scrollbar_area.part.0+0x3e0>
 800b08a:	e2a0      	b.n	800b5ce <lv_obj_get_scrollbar_area.part.0+0x922>
        ver_draw = true;
 800b08c:	2301      	movs	r3, #1
        hor_draw = true;
 800b08e:	2701      	movs	r7, #1
        ver_draw = true;
 800b090:	4699      	mov	r9, r3
 800b092:	e674      	b.n	800ad7e <lv_obj_get_scrollbar_area.part.0+0xd2>
 800b094:	3a09      	subs	r2, #9
 800b096:	401a      	ands	r2, r3
    if((dir & LV_DIR_VER) &&
 800b098:	4653      	mov	r3, sl
 800b09a:	4691      	mov	r9, r2
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d013      	beq.n	800b0c8 <lv_obj_get_scrollbar_area.part.0+0x41c>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800b0a0:	2b03      	cmp	r3, #3
 800b0a2:	d100      	bne.n	800b0a6 <lv_obj_get_scrollbar_area.part.0+0x3fa>
 800b0a4:	e0d4      	b.n	800b250 <lv_obj_get_scrollbar_area.part.0+0x5a4>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 800b0a6:	0030      	movs	r0, r6
 800b0a8:	f7fa fb80 	bl	80057ac <lv_indev_get_scroll_dir>
 800b0ac:	280c      	cmp	r0, #12
 800b0ae:	d100      	bne.n	800b0b2 <lv_obj_get_scrollbar_area.part.0+0x406>
 800b0b0:	e1e1      	b.n	800b476 <lv_obj_get_scrollbar_area.part.0+0x7ca>
    if((dir & LV_DIR_HOR) &&
 800b0b2:	464b      	mov	r3, r9
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d12f      	bne.n	800b118 <lv_obj_get_scrollbar_area.part.0+0x46c>
 800b0b8:	e7cc      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
        if(obj->spec_attr == NULL) return 0;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	9303      	str	r3, [sp, #12]
 800b0be:	e63d      	b.n	800ad3c <lv_obj_get_scrollbar_area.part.0+0x90>
    if((dir & LV_DIR_VER) &&
 800b0c0:	2303      	movs	r3, #3
 800b0c2:	4699      	mov	r9, r3
        if(obj->spec_attr == NULL) return 0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	9302      	str	r3, [sp, #8]
    if((dir & LV_DIR_HOR) &&
 800b0c8:	464f      	mov	r7, r9
        ver_draw = true;
 800b0ca:	2301      	movs	r3, #1
    if((dir & LV_DIR_HOR) &&
 800b0cc:	1e7a      	subs	r2, r7, #1
 800b0ce:	4197      	sbcs	r7, r2
        ver_draw = true;
 800b0d0:	4699      	mov	r9, r3
    if((dir & LV_DIR_HOR) &&
 800b0d2:	b2ff      	uxtb	r7, r7
 800b0d4:	e653      	b.n	800ad7e <lv_obj_get_scrollbar_area.part.0+0xd2>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800b0d6:	2000      	movs	r0, #0
 800b0d8:	f008 fd3e 	bl	8013b58 <lv_indev_get_next>
    else return LV_SCROLLBAR_MODE_AUTO;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	469a      	mov	sl, r3
    if(obj->spec_attr == NULL) return 0;
 800b0e0:	68a3      	ldr	r3, [r4, #8]
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800b0e2:	0006      	movs	r6, r0
    if(obj->spec_attr == NULL) return 0;
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d000      	beq.n	800b0ea <lv_obj_get_scrollbar_area.part.0+0x43e>
 800b0e8:	e60e      	b.n	800ad08 <lv_obj_get_scrollbar_area.part.0+0x5c>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	2700      	movs	r7, #0
 800b0ee:	4698      	mov	r8, r3
 800b0f0:	e60f      	b.n	800ad12 <lv_obj_get_scrollbar_area.part.0+0x66>
 800b0f2:	0020      	movs	r0, r4
 800b0f4:	f7ff fbd8 	bl	800a8a8 <lv_obj_get_scroll_left.part.0>
 800b0f8:	9003      	str	r0, [sp, #12]
 800b0fa:	e61f      	b.n	800ad3c <lv_obj_get_scrollbar_area.part.0+0x90>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 800b0fc:	2180      	movs	r1, #128	; 0x80
 800b0fe:	2231      	movs	r2, #49	; 0x31
 800b100:	0020      	movs	r0, r4
 800b102:	0249      	lsls	r1, r1, #9
 800b104:	f001 fa5e 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800b108:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800b10a:	2801      	cmp	r0, #1
 800b10c:	d900      	bls.n	800b110 <lv_obj_get_scrollbar_area.part.0+0x464>
 800b10e:	e67a      	b.n	800ae06 <lv_obj_get_scrollbar_area.part.0+0x15a>
 800b110:	e7a0      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800b112:	2b03      	cmp	r3, #3
 800b114:	d100      	bne.n	800b118 <lv_obj_get_scrollbar_area.part.0+0x46c>
 800b116:	e24f      	b.n	800b5b8 <lv_obj_get_scrollbar_area.part.0+0x90c>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 800b118:	0030      	movs	r0, r6
 800b11a:	f7fa fb47 	bl	80057ac <lv_indev_get_scroll_dir>
 800b11e:	2803      	cmp	r0, #3
 800b120:	d198      	bne.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
    bool ver_draw = false;
 800b122:	2300      	movs	r3, #0
        hor_draw = true;
 800b124:	2701      	movs	r7, #1
    bool ver_draw = false;
 800b126:	4699      	mov	r9, r3
 800b128:	e629      	b.n	800ad7e <lv_obj_get_scrollbar_area.part.0+0xd2>
    if((dir & LV_DIR_VER) &&
 800b12a:	4653      	mov	r3, sl
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d0c7      	beq.n	800b0c0 <lv_obj_get_scrollbar_area.part.0+0x414>
        if(obj->spec_attr == NULL) return 0;
 800b130:	2300      	movs	r3, #0
 800b132:	9302      	str	r3, [sp, #8]
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800b134:	4653      	mov	r3, sl
 800b136:	2b03      	cmp	r3, #3
 800b138:	d01f      	beq.n	800b17a <lv_obj_get_scrollbar_area.part.0+0x4ce>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 800b13a:	0030      	movs	r0, r6
 800b13c:	f7fa fb36 	bl	80057ac <lv_indev_get_scroll_dir>
 800b140:	280c      	cmp	r0, #12
 800b142:	d1e9      	bne.n	800b118 <lv_obj_get_scrollbar_area.part.0+0x46c>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 800b144:	0030      	movs	r0, r6
 800b146:	f7fa fb31 	bl	80057ac <lv_indev_get_scroll_dir>
 800b14a:	3803      	subs	r0, #3
 800b14c:	4243      	negs	r3, r0
 800b14e:	4158      	adcs	r0, r3
        ver_draw = true;
 800b150:	2301      	movs	r3, #1
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 800b152:	b2c7      	uxtb	r7, r0
        ver_draw = true;
 800b154:	4699      	mov	r9, r3
 800b156:	e612      	b.n	800ad7e <lv_obj_get_scrollbar_area.part.0+0xd2>
            if(rtl) {
 800b158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d100      	bne.n	800b160 <lv_obj_get_scrollbar_area.part.0+0x4b4>
 800b15e:	e13e      	b.n	800b3de <lv_obj_get_scrollbar_area.part.0+0x732>
                hor_area->x1 = obj->coords.x1 + left_space;
 800b160:	8a23      	ldrh	r3, [r4, #16]
 800b162:	18ff      	adds	r7, r7, r3
 800b164:	465b      	mov	r3, fp
 800b166:	801f      	strh	r7, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 800b168:	9b03      	ldr	r3, [sp, #12]
 800b16a:	43de      	mvns	r6, r3
 800b16c:	8aa3      	ldrh	r3, [r4, #20]
 800b16e:	18f6      	adds	r6, r6, r3
 800b170:	9b01      	ldr	r3, [sp, #4]
 800b172:	1af6      	subs	r6, r6, r3
 800b174:	465b      	mov	r3, fp
 800b176:	809e      	strh	r6, [r3, #4]
 800b178:	e76c      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800b17a:	2f00      	cmp	r7, #0
 800b17c:	dd51      	ble.n	800b222 <lv_obj_get_scrollbar_area.part.0+0x576>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800b17e:	9b03      	ldr	r3, [sp, #12]
 800b180:	2b00      	cmp	r3, #0
 800b182:	dd56      	ble.n	800b232 <lv_obj_get_scrollbar_area.part.0+0x586>
 800b184:	2301      	movs	r3, #1
 800b186:	4699      	mov	r9, r3
        hor_draw = true;
 800b188:	001f      	movs	r7, r3
 800b18a:	e5f8      	b.n	800ad7e <lv_obj_get_scrollbar_area.part.0+0xd2>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 800b18c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 800b18e:	2000      	movs	r0, #0
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 800b190:	1ad6      	subs	r6, r2, r3
 800b192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b194:	1af6      	subs	r6, r6, r3
 800b196:	b236      	sxth	r6, r6
 800b198:	80ee      	strh	r6, [r5, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 800b19a:	f008 fc7f 	bl	8013a9c <lv_disp_get_dpi>
 800b19e:	0083      	lsls	r3, r0, #2
 800b1a0:	181b      	adds	r3, r3, r0
 800b1a2:	005b      	lsls	r3, r3, #1
 800b1a4:	2001      	movs	r0, #1
 800b1a6:	2bef      	cmp	r3, #239	; 0xef
 800b1a8:	dd00      	ble.n	800b1ac <lv_obj_get_scrollbar_area.part.0+0x500>
 800b1aa:	e159      	b.n	800b460 <lv_obj_get_scrollbar_area.part.0+0x7b4>
 800b1ac:	2202      	movs	r2, #2
 800b1ae:	5eab      	ldrsh	r3, [r5, r2]
 800b1b0:	1a36      	subs	r6, r6, r0
 800b1b2:	429e      	cmp	r6, r3
 800b1b4:	db00      	blt.n	800b1b8 <lv_obj_get_scrollbar_area.part.0+0x50c>
 800b1b6:	e6a9      	b.n	800af0c <lv_obj_get_scrollbar_area.part.0+0x260>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	88ee      	ldrh	r6, [r5, #6]
 800b1bc:	f008 fc6e 	bl	8013a9c <lv_disp_get_dpi>
 800b1c0:	0083      	lsls	r3, r0, #2
 800b1c2:	181b      	adds	r3, r3, r0
 800b1c4:	005b      	lsls	r3, r3, #1
 800b1c6:	2001      	movs	r0, #1
 800b1c8:	2bef      	cmp	r3, #239	; 0xef
 800b1ca:	dd00      	ble.n	800b1ce <lv_obj_get_scrollbar_area.part.0+0x522>
 800b1cc:	e1a9      	b.n	800b522 <lv_obj_get_scrollbar_area.part.0+0x876>
 800b1ce:	1a36      	subs	r6, r6, r0
 800b1d0:	806e      	strh	r6, [r5, #2]
 800b1d2:	e69b      	b.n	800af0c <lv_obj_get_scrollbar_area.part.0+0x260>
                ver_area->y1 = obj->coords.y1 + top_space;
 800b1d4:	9b06      	ldr	r3, [sp, #24]
 800b1d6:	469c      	mov	ip, r3
 800b1d8:	4460      	add	r0, ip
 800b1da:	b203      	sxth	r3, r0
 800b1dc:	806b      	strh	r3, [r5, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 800b1de:	2000      	movs	r0, #0
                ver_area->y1 = obj->coords.y1 + top_space;
 800b1e0:	4698      	mov	r8, r3
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 800b1e2:	f008 fc5b 	bl	8013a9c <lv_disp_get_dpi>
 800b1e6:	0083      	lsls	r3, r0, #2
 800b1e8:	181b      	adds	r3, r3, r0
 800b1ea:	005b      	lsls	r3, r3, #1
 800b1ec:	2001      	movs	r0, #1
 800b1ee:	2bef      	cmp	r3, #239	; 0xef
 800b1f0:	dd00      	ble.n	800b1f4 <lv_obj_get_scrollbar_area.part.0+0x548>
 800b1f2:	e12a      	b.n	800b44a <lv_obj_get_scrollbar_area.part.0+0x79e>
 800b1f4:	2206      	movs	r2, #6
 800b1f6:	5eab      	ldrsh	r3, [r5, r2]
 800b1f8:	0002      	movs	r2, r0
 800b1fa:	4442      	add	r2, r8
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	dc00      	bgt.n	800b202 <lv_obj_get_scrollbar_area.part.0+0x556>
 800b200:	e67c      	b.n	800aefc <lv_obj_get_scrollbar_area.part.0+0x250>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 800b202:	886b      	ldrh	r3, [r5, #2]
 800b204:	2000      	movs	r0, #0
 800b206:	4698      	mov	r8, r3
 800b208:	f008 fc48 	bl	8013a9c <lv_disp_get_dpi>
 800b20c:	0083      	lsls	r3, r0, #2
 800b20e:	181b      	adds	r3, r3, r0
 800b210:	005a      	lsls	r2, r3, #1
 800b212:	2301      	movs	r3, #1
 800b214:	2aef      	cmp	r2, #239	; 0xef
 800b216:	dd00      	ble.n	800b21a <lv_obj_get_scrollbar_area.part.0+0x56e>
 800b218:	e177      	b.n	800b50a <lv_obj_get_scrollbar_area.part.0+0x85e>
 800b21a:	4443      	add	r3, r8
 800b21c:	b21b      	sxth	r3, r3
 800b21e:	80eb      	strh	r3, [r5, #6]
 800b220:	e66c      	b.n	800aefc <lv_obj_get_scrollbar_area.part.0+0x250>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800b222:	9b01      	ldr	r3, [sp, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	dc00      	bgt.n	800b22a <lv_obj_get_scrollbar_area.part.0+0x57e>
 800b228:	e154      	b.n	800b4d4 <lv_obj_get_scrollbar_area.part.0+0x828>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800b22a:	9b03      	ldr	r3, [sp, #12]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	dd00      	ble.n	800b232 <lv_obj_get_scrollbar_area.part.0+0x586>
 800b230:	e72c      	b.n	800b08c <lv_obj_get_scrollbar_area.part.0+0x3e0>
        ver_draw = true;
 800b232:	2301      	movs	r3, #1
 800b234:	2700      	movs	r7, #0
 800b236:	4699      	mov	r9, r3
 800b238:	e5a1      	b.n	800ad7e <lv_obj_get_scrollbar_area.part.0+0xd2>
            ver_area->y1 = obj->coords.y1 + top_space;
 800b23a:	469c      	mov	ip, r3
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 800b23c:	43d3      	mvns	r3, r2
            ver_area->y1 = obj->coords.y1 + top_space;
 800b23e:	8a60      	ldrh	r0, [r4, #18]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 800b240:	990d      	ldr	r1, [sp, #52]	; 0x34
            ver_area->y1 = obj->coords.y1 + top_space;
 800b242:	4460      	add	r0, ip
 800b244:	8068      	strh	r0, [r5, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 800b246:	8ae6      	ldrh	r6, [r4, #22]
 800b248:	18f6      	adds	r6, r6, r3
 800b24a:	1a76      	subs	r6, r6, r1
 800b24c:	80ee      	strh	r6, [r5, #6]
 800b24e:	e65d      	b.n	800af0c <lv_obj_get_scrollbar_area.part.0+0x260>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800b250:	2f00      	cmp	r7, #0
 800b252:	dd5b      	ble.n	800b30c <lv_obj_get_scrollbar_area.part.0+0x660>
    if((dir & LV_DIR_HOR) &&
 800b254:	1e13      	subs	r3, r2, #0
 800b256:	d100      	bne.n	800b25a <lv_obj_get_scrollbar_area.part.0+0x5ae>
 800b258:	e111      	b.n	800b47e <lv_obj_get_scrollbar_area.part.0+0x7d2>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800b25a:	9b03      	ldr	r3, [sp, #12]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	dd00      	ble.n	800b262 <lv_obj_get_scrollbar_area.part.0+0x5b6>
 800b260:	e714      	b.n	800b08c <lv_obj_get_scrollbar_area.part.0+0x3e0>
 800b262:	9a02      	ldr	r2, [sp, #8]
 800b264:	17d3      	asrs	r3, r2, #31
 800b266:	1a9b      	subs	r3, r3, r2
 800b268:	0fdf      	lsrs	r7, r3, #31
        ver_draw = true;
 800b26a:	2301      	movs	r3, #1
 800b26c:	4699      	mov	r9, r3
 800b26e:	e586      	b.n	800ad7e <lv_obj_get_scrollbar_area.part.0+0xd2>
            ver_area->x1 = obj->coords.x1 + left_space;
 800b270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b272:	8a23      	ldrh	r3, [r4, #16]
 800b274:	4694      	mov	ip, r2
            ver_area->x2 = ver_area->x1 + tickness - 1;
 800b276:	980b      	ldr	r0, [sp, #44]	; 0x2c
            ver_area->x1 = obj->coords.x1 + left_space;
 800b278:	4463      	add	r3, ip
            ver_area->x2 = ver_area->x1 + tickness - 1;
 800b27a:	3801      	subs	r0, #1
            ver_area->x1 = obj->coords.x1 + left_space;
 800b27c:	b21a      	sxth	r2, r3
            ver_area->x2 = ver_area->x1 + tickness - 1;
 800b27e:	181b      	adds	r3, r3, r0
 800b280:	b21b      	sxth	r3, r3
 800b282:	e5e3      	b.n	800ae4c <lv_obj_get_scrollbar_area.part.0+0x1a0>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 800b284:	2000      	movs	r0, #0
 800b286:	f008 fc09 	bl	8013a9c <lv_disp_get_dpi>
 800b28a:	2201      	movs	r2, #1
 800b28c:	0083      	lsls	r3, r0, #2
 800b28e:	181b      	adds	r3, r3, r0
 800b290:	4692      	mov	sl, r2
 800b292:	005b      	lsls	r3, r3, #1
 800b294:	2bef      	cmp	r3, #239	; 0xef
 800b296:	dc00      	bgt.n	800b29a <lv_obj_get_scrollbar_area.part.0+0x5ee>
 800b298:	e5fe      	b.n	800ae98 <lv_obj_get_scrollbar_area.part.0+0x1ec>
 800b29a:	2000      	movs	r0, #0
 800b29c:	f008 fbfe 	bl	8013a9c <lv_disp_get_dpi>
 800b2a0:	0083      	lsls	r3, r0, #2
 800b2a2:	1818      	adds	r0, r3, r0
 800b2a4:	0040      	lsls	r0, r0, #1
 800b2a6:	21a0      	movs	r1, #160	; 0xa0
 800b2a8:	3050      	adds	r0, #80	; 0x50
 800b2aa:	f7f4 ffc7 	bl	800023c <__divsi3>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800b2ae:	b283      	uxth	r3, r0
 800b2b0:	469a      	mov	sl, r3
 800b2b2:	e5f1      	b.n	800ae98 <lv_obj_get_scrollbar_area.part.0+0x1ec>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	f008 fbf1 	bl	8013a9c <lv_disp_get_dpi>
 800b2ba:	0083      	lsls	r3, r0, #2
 800b2bc:	1818      	adds	r0, r3, r0
 800b2be:	0040      	lsls	r0, r0, #1
 800b2c0:	21a0      	movs	r1, #160	; 0xa0
 800b2c2:	3050      	adds	r0, #80	; 0x50
 800b2c4:	f7f4 ffba 	bl	800023c <__divsi3>
 800b2c8:	e5df      	b.n	800ae8a <lv_obj_get_scrollbar_area.part.0+0x1de>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	f008 fbe6 	bl	8013a9c <lv_disp_get_dpi>
 800b2d0:	0083      	lsls	r3, r0, #2
 800b2d2:	181b      	adds	r3, r3, r0
 800b2d4:	2601      	movs	r6, #1
 800b2d6:	005b      	lsls	r3, r3, #1
 800b2d8:	2bef      	cmp	r3, #239	; 0xef
 800b2da:	dc00      	bgt.n	800b2de <lv_obj_get_scrollbar_area.part.0+0x632>
 800b2dc:	e65b      	b.n	800af96 <lv_obj_get_scrollbar_area.part.0+0x2ea>
 800b2de:	2000      	movs	r0, #0
 800b2e0:	f008 fbdc 	bl	8013a9c <lv_disp_get_dpi>
 800b2e4:	0083      	lsls	r3, r0, #2
 800b2e6:	1818      	adds	r0, r3, r0
 800b2e8:	0040      	lsls	r0, r0, #1
 800b2ea:	21a0      	movs	r1, #160	; 0xa0
 800b2ec:	3050      	adds	r0, #80	; 0x50
 800b2ee:	f7f4 ffa5 	bl	800023c <__divsi3>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 800b2f2:	b286      	uxth	r6, r0
 800b2f4:	e64f      	b.n	800af96 <lv_obj_get_scrollbar_area.part.0+0x2ea>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	f008 fbd0 	bl	8013a9c <lv_disp_get_dpi>
 800b2fc:	0083      	lsls	r3, r0, #2
 800b2fe:	1818      	adds	r0, r3, r0
 800b300:	0040      	lsls	r0, r0, #1
 800b302:	21a0      	movs	r1, #160	; 0xa0
 800b304:	3050      	adds	r0, #80	; 0x50
 800b306:	f7f4 ff99 	bl	800023c <__divsi3>
 800b30a:	e640      	b.n	800af8e <lv_obj_get_scrollbar_area.part.0+0x2e2>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800b30c:	9b01      	ldr	r3, [sp, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	dd0b      	ble.n	800b32a <lv_obj_get_scrollbar_area.part.0+0x67e>
    if((dir & LV_DIR_HOR) &&
 800b312:	1e13      	subs	r3, r2, #0
 800b314:	d100      	bne.n	800b318 <lv_obj_get_scrollbar_area.part.0+0x66c>
 800b316:	e0b2      	b.n	800b47e <lv_obj_get_scrollbar_area.part.0+0x7d2>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800b318:	9b03      	ldr	r3, [sp, #12]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	dd00      	ble.n	800b320 <lv_obj_get_scrollbar_area.part.0+0x674>
 800b31e:	e6b5      	b.n	800b08c <lv_obj_get_scrollbar_area.part.0+0x3e0>
 800b320:	9b02      	ldr	r3, [sp, #8]
 800b322:	2b00      	cmp	r3, #0
 800b324:	dd00      	ble.n	800b328 <lv_obj_get_scrollbar_area.part.0+0x67c>
 800b326:	e6b1      	b.n	800b08c <lv_obj_get_scrollbar_area.part.0+0x3e0>
 800b328:	e783      	b.n	800b232 <lv_obj_get_scrollbar_area.part.0+0x586>
    if((dir & LV_DIR_HOR) &&
 800b32a:	2a00      	cmp	r2, #0
 800b32c:	d100      	bne.n	800b330 <lv_obj_get_scrollbar_area.part.0+0x684>
 800b32e:	e691      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800b330:	9b03      	ldr	r3, [sp, #12]
 800b332:	2b00      	cmp	r3, #0
 800b334:	dd00      	ble.n	800b338 <lv_obj_get_scrollbar_area.part.0+0x68c>
 800b336:	e6f4      	b.n	800b122 <lv_obj_get_scrollbar_area.part.0+0x476>
    bool ver_draw = false;
 800b338:	2300      	movs	r3, #0
 800b33a:	4699      	mov	r9, r3
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800b33c:	9b02      	ldr	r3, [sp, #8]
        hor_draw = true;
 800b33e:	2701      	movs	r7, #1
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800b340:	2b00      	cmp	r3, #0
 800b342:	dd00      	ble.n	800b346 <lv_obj_get_scrollbar_area.part.0+0x69a>
 800b344:	e51b      	b.n	800ad7e <lv_obj_get_scrollbar_area.part.0+0xd2>
 800b346:	e685      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 800b348:	9a01      	ldr	r2, [sp, #4]
 800b34a:	8a23      	ldrh	r3, [r4, #16]
 800b34c:	4694      	mov	ip, r2
 800b34e:	18fb      	adds	r3, r7, r3
 800b350:	4463      	add	r3, ip
 800b352:	18ed      	adds	r5, r5, r3
 800b354:	465b      	mov	r3, fp
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800b356:	3e01      	subs	r6, #1
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 800b358:	b22a      	sxth	r2, r5
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800b35a:	19ad      	adds	r5, r5, r6
 800b35c:	b22d      	sxth	r5, r5
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 800b35e:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800b360:	809d      	strh	r5, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 800b362:	9808      	ldr	r0, [sp, #32]
 800b364:	2310      	movs	r3, #16
 800b366:	5ee1      	ldrsh	r1, [r4, r3]
 800b368:	4653      	mov	r3, sl
 800b36a:	4684      	mov	ip, r0
 800b36c:	18cb      	adds	r3, r1, r3
 800b36e:	4463      	add	r3, ip
 800b370:	429a      	cmp	r2, r3
 800b372:	da00      	bge.n	800b376 <lv_obj_get_scrollbar_area.part.0+0x6ca>
 800b374:	e087      	b.n	800b486 <lv_obj_get_scrollbar_area.part.0+0x7da>
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 800b376:	2314      	movs	r3, #20
 800b378:	5ee6      	ldrsh	r6, [r4, r3]
 800b37a:	464b      	mov	r3, r9
 800b37c:	1af2      	subs	r2, r6, r3
 800b37e:	42aa      	cmp	r2, r5
 800b380:	db00      	blt.n	800b384 <lv_obj_get_scrollbar_area.part.0+0x6d8>
 800b382:	e667      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
                    hor_area->x2 = obj->coords.x2 - right_space;
 800b384:	9b03      	ldr	r3, [sp, #12]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800b386:	2000      	movs	r0, #0
                    hor_area->x2 = obj->coords.x2 - right_space;
 800b388:	1af6      	subs	r6, r6, r3
 800b38a:	465b      	mov	r3, fp
 800b38c:	b236      	sxth	r6, r6
 800b38e:	809e      	strh	r6, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800b390:	f008 fb84 	bl	8013a9c <lv_disp_get_dpi>
 800b394:	0083      	lsls	r3, r0, #2
 800b396:	181b      	adds	r3, r3, r0
 800b398:	005b      	lsls	r3, r3, #1
 800b39a:	2001      	movs	r0, #1
 800b39c:	2bef      	cmp	r3, #239	; 0xef
 800b39e:	dd00      	ble.n	800b3a2 <lv_obj_get_scrollbar_area.part.0+0x6f6>
 800b3a0:	e0d0      	b.n	800b544 <lv_obj_get_scrollbar_area.part.0+0x898>
 800b3a2:	465b      	mov	r3, fp
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	5e9b      	ldrsh	r3, [r3, r2]
 800b3a8:	1a36      	subs	r6, r6, r0
 800b3aa:	429e      	cmp	r6, r3
 800b3ac:	db00      	blt.n	800b3b0 <lv_obj_get_scrollbar_area.part.0+0x704>
 800b3ae:	e651      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800b3b0:	465b      	mov	r3, fp
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	889c      	ldrh	r4, [r3, #4]
 800b3b6:	f008 fb71 	bl	8013a9c <lv_disp_get_dpi>
 800b3ba:	0083      	lsls	r3, r0, #2
 800b3bc:	181b      	adds	r3, r3, r0
 800b3be:	005b      	lsls	r3, r3, #1
 800b3c0:	2001      	movs	r0, #1
 800b3c2:	2bef      	cmp	r3, #239	; 0xef
 800b3c4:	dc00      	bgt.n	800b3c8 <lv_obj_get_scrollbar_area.part.0+0x71c>
 800b3c6:	e642      	b.n	800b04e <lv_obj_get_scrollbar_area.part.0+0x3a2>
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	f008 fb67 	bl	8013a9c <lv_disp_get_dpi>
 800b3ce:	230a      	movs	r3, #10
 800b3d0:	4358      	muls	r0, r3
 800b3d2:	21a0      	movs	r1, #160	; 0xa0
 800b3d4:	3050      	adds	r0, #80	; 0x50
 800b3d6:	f7f4 ff31 	bl	800023c <__divsi3>
 800b3da:	b280      	uxth	r0, r0
 800b3dc:	e637      	b.n	800b04e <lv_obj_get_scrollbar_area.part.0+0x3a2>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 800b3de:	9b01      	ldr	r3, [sp, #4]
 800b3e0:	1e78      	subs	r0, r7, #1
 800b3e2:	469c      	mov	ip, r3
 800b3e4:	465b      	mov	r3, fp
 800b3e6:	8a27      	ldrh	r7, [r4, #16]
                hor_area->x2 = obj->coords.x2 - right_space;
 800b3e8:	9a03      	ldr	r2, [sp, #12]
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 800b3ea:	183f      	adds	r7, r7, r0
 800b3ec:	4467      	add	r7, ip
 800b3ee:	801f      	strh	r7, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space;
 800b3f0:	8aa3      	ldrh	r3, [r4, #20]
 800b3f2:	1a9b      	subs	r3, r3, r2
 800b3f4:	465a      	mov	r2, fp
 800b3f6:	8093      	strh	r3, [r2, #4]
 800b3f8:	e62c      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
                    hor_area->x1 = obj->coords.x1 + left_space;
 800b3fa:	465b      	mov	r3, fp
 800b3fc:	187f      	adds	r7, r7, r1
 800b3fe:	b23f      	sxth	r7, r7
 800b400:	801f      	strh	r7, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800b402:	2000      	movs	r0, #0
 800b404:	f008 fb4a 	bl	8013a9c <lv_disp_get_dpi>
 800b408:	0083      	lsls	r3, r0, #2
 800b40a:	181b      	adds	r3, r3, r0
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	2001      	movs	r0, #1
 800b410:	2bef      	cmp	r3, #239	; 0xef
 800b412:	dc64      	bgt.n	800b4de <lv_obj_get_scrollbar_area.part.0+0x832>
 800b414:	465b      	mov	r3, fp
 800b416:	2504      	movs	r5, #4
 800b418:	5f5d      	ldrsh	r5, [r3, r5]
 800b41a:	183f      	adds	r7, r7, r0
 800b41c:	42af      	cmp	r7, r5
 800b41e:	dc00      	bgt.n	800b422 <lv_obj_get_scrollbar_area.part.0+0x776>
 800b420:	e5ea      	b.n	800aff8 <lv_obj_get_scrollbar_area.part.0+0x34c>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800b422:	465b      	mov	r3, fp
 800b424:	2000      	movs	r0, #0
 800b426:	881d      	ldrh	r5, [r3, #0]
 800b428:	f008 fb38 	bl	8013a9c <lv_disp_get_dpi>
 800b42c:	0083      	lsls	r3, r0, #2
 800b42e:	181b      	adds	r3, r3, r0
 800b430:	005b      	lsls	r3, r3, #1
 800b432:	2001      	movs	r0, #1
 800b434:	2bef      	cmp	r3, #239	; 0xef
 800b436:	dd00      	ble.n	800b43a <lv_obj_get_scrollbar_area.part.0+0x78e>
 800b438:	e0a7      	b.n	800b58a <lv_obj_get_scrollbar_area.part.0+0x8de>
 800b43a:	465b      	mov	r3, fp
 800b43c:	182d      	adds	r5, r5, r0
 800b43e:	b22d      	sxth	r5, r5
 800b440:	809d      	strh	r5, [r3, #4]
 800b442:	e5d9      	b.n	800aff8 <lv_obj_get_scrollbar_area.part.0+0x34c>
    if((dir & LV_DIR_VER) &&
 800b444:	2303      	movs	r3, #3
 800b446:	4699      	mov	r9, r3
 800b448:	e63e      	b.n	800b0c8 <lv_obj_get_scrollbar_area.part.0+0x41c>
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 800b44a:	2000      	movs	r0, #0
 800b44c:	f008 fb26 	bl	8013a9c <lv_disp_get_dpi>
 800b450:	0083      	lsls	r3, r0, #2
 800b452:	1818      	adds	r0, r3, r0
 800b454:	0040      	lsls	r0, r0, #1
 800b456:	21a0      	movs	r1, #160	; 0xa0
 800b458:	3050      	adds	r0, #80	; 0x50
 800b45a:	f7f4 feef 	bl	800023c <__divsi3>
 800b45e:	e6c9      	b.n	800b1f4 <lv_obj_get_scrollbar_area.part.0+0x548>
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 800b460:	2000      	movs	r0, #0
 800b462:	f008 fb1b 	bl	8013a9c <lv_disp_get_dpi>
 800b466:	0083      	lsls	r3, r0, #2
 800b468:	1818      	adds	r0, r3, r0
 800b46a:	0040      	lsls	r0, r0, #1
 800b46c:	21a0      	movs	r1, #160	; 0xa0
 800b46e:	3050      	adds	r0, #80	; 0x50
 800b470:	f7f4 fee4 	bl	800023c <__divsi3>
 800b474:	e69a      	b.n	800b1ac <lv_obj_get_scrollbar_area.part.0+0x500>
    if((dir & LV_DIR_HOR) &&
 800b476:	464b      	mov	r3, r9
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d000      	beq.n	800b47e <lv_obj_get_scrollbar_area.part.0+0x7d2>
 800b47c:	e662      	b.n	800b144 <lv_obj_get_scrollbar_area.part.0+0x498>
        ver_draw = true;
 800b47e:	3301      	adds	r3, #1
 800b480:	4699      	mov	r9, r3
    if((dir & LV_DIR_HOR) &&
 800b482:	2700      	movs	r7, #0
 800b484:	e47b      	b.n	800ad7e <lv_obj_get_scrollbar_area.part.0+0xd2>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 800b486:	9b01      	ldr	r3, [sp, #4]
 800b488:	1879      	adds	r1, r7, r1
 800b48a:	469c      	mov	ip, r3
 800b48c:	465b      	mov	r3, fp
 800b48e:	4461      	add	r1, ip
 800b490:	b20f      	sxth	r7, r1
 800b492:	801f      	strh	r7, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800b494:	2000      	movs	r0, #0
 800b496:	f008 fb01 	bl	8013a9c <lv_disp_get_dpi>
 800b49a:	0083      	lsls	r3, r0, #2
 800b49c:	181b      	adds	r3, r3, r0
 800b49e:	2101      	movs	r1, #1
 800b4a0:	005b      	lsls	r3, r3, #1
 800b4a2:	2bef      	cmp	r3, #239	; 0xef
 800b4a4:	dc59      	bgt.n	800b55a <lv_obj_get_scrollbar_area.part.0+0x8ae>
 800b4a6:	465b      	mov	r3, fp
 800b4a8:	2504      	movs	r5, #4
 800b4aa:	5f5d      	ldrsh	r5, [r3, r5]
 800b4ac:	1879      	adds	r1, r7, r1
 800b4ae:	42a9      	cmp	r1, r5
 800b4b0:	dc00      	bgt.n	800b4b4 <lv_obj_get_scrollbar_area.part.0+0x808>
 800b4b2:	e760      	b.n	800b376 <lv_obj_get_scrollbar_area.part.0+0x6ca>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800b4b4:	465b      	mov	r3, fp
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	881d      	ldrh	r5, [r3, #0]
 800b4ba:	f008 faef 	bl	8013a9c <lv_disp_get_dpi>
 800b4be:	0083      	lsls	r3, r0, #2
 800b4c0:	181b      	adds	r3, r3, r0
 800b4c2:	005b      	lsls	r3, r3, #1
 800b4c4:	2001      	movs	r0, #1
 800b4c6:	2bef      	cmp	r3, #239	; 0xef
 800b4c8:	dc6b      	bgt.n	800b5a2 <lv_obj_get_scrollbar_area.part.0+0x8f6>
 800b4ca:	465b      	mov	r3, fp
 800b4cc:	182d      	adds	r5, r5, r0
 800b4ce:	b22d      	sxth	r5, r5
 800b4d0:	809d      	strh	r5, [r3, #4]
 800b4d2:	e750      	b.n	800b376 <lv_obj_get_scrollbar_area.part.0+0x6ca>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800b4d4:	9b03      	ldr	r3, [sp, #12]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	dd00      	ble.n	800b4dc <lv_obj_get_scrollbar_area.part.0+0x830>
 800b4da:	e622      	b.n	800b122 <lv_obj_get_scrollbar_area.part.0+0x476>
 800b4dc:	e5ba      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800b4de:	2000      	movs	r0, #0
 800b4e0:	f008 fadc 	bl	8013a9c <lv_disp_get_dpi>
 800b4e4:	0083      	lsls	r3, r0, #2
 800b4e6:	1818      	adds	r0, r3, r0
 800b4e8:	0040      	lsls	r0, r0, #1
 800b4ea:	21a0      	movs	r1, #160	; 0xa0
 800b4ec:	3050      	adds	r0, #80	; 0x50
 800b4ee:	f7f4 fea5 	bl	800023c <__divsi3>
 800b4f2:	e78f      	b.n	800b414 <lv_obj_get_scrollbar_area.part.0+0x768>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	f008 fad1 	bl	8013a9c <lv_disp_get_dpi>
 800b4fa:	0083      	lsls	r3, r0, #2
 800b4fc:	1818      	adds	r0, r3, r0
 800b4fe:	0040      	lsls	r0, r0, #1
 800b500:	21a0      	movs	r1, #160	; 0xa0
 800b502:	3050      	adds	r0, #80	; 0x50
 800b504:	f7f4 fe9a 	bl	800023c <__divsi3>
 800b508:	e58f      	b.n	800b02a <lv_obj_get_scrollbar_area.part.0+0x37e>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 800b50a:	2000      	movs	r0, #0
 800b50c:	f008 fac6 	bl	8013a9c <lv_disp_get_dpi>
 800b510:	0083      	lsls	r3, r0, #2
 800b512:	1818      	adds	r0, r3, r0
 800b514:	0040      	lsls	r0, r0, #1
 800b516:	21a0      	movs	r1, #160	; 0xa0
 800b518:	3050      	adds	r0, #80	; 0x50
 800b51a:	f7f4 fe8f 	bl	800023c <__divsi3>
 800b51e:	b283      	uxth	r3, r0
 800b520:	e67b      	b.n	800b21a <lv_obj_get_scrollbar_area.part.0+0x56e>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 800b522:	2000      	movs	r0, #0
 800b524:	f008 faba 	bl	8013a9c <lv_disp_get_dpi>
 800b528:	0083      	lsls	r3, r0, #2
 800b52a:	1818      	adds	r0, r3, r0
 800b52c:	0040      	lsls	r0, r0, #1
 800b52e:	21a0      	movs	r1, #160	; 0xa0
 800b530:	3050      	adds	r0, #80	; 0x50
 800b532:	f7f4 fe83 	bl	800023c <__divsi3>
 800b536:	b280      	uxth	r0, r0
 800b538:	e649      	b.n	800b1ce <lv_obj_get_scrollbar_area.part.0+0x522>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800b53a:	9b01      	ldr	r3, [sp, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	dd00      	ble.n	800b542 <lv_obj_get_scrollbar_area.part.0+0x896>
 800b540:	e6ea      	b.n	800b318 <lv_obj_get_scrollbar_area.part.0+0x66c>
 800b542:	e6f5      	b.n	800b330 <lv_obj_get_scrollbar_area.part.0+0x684>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800b544:	2000      	movs	r0, #0
 800b546:	f008 faa9 	bl	8013a9c <lv_disp_get_dpi>
 800b54a:	0083      	lsls	r3, r0, #2
 800b54c:	1818      	adds	r0, r3, r0
 800b54e:	0040      	lsls	r0, r0, #1
 800b550:	21a0      	movs	r1, #160	; 0xa0
 800b552:	3050      	adds	r0, #80	; 0x50
 800b554:	f7f4 fe72 	bl	800023c <__divsi3>
 800b558:	e723      	b.n	800b3a2 <lv_obj_get_scrollbar_area.part.0+0x6f6>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800b55a:	2000      	movs	r0, #0
 800b55c:	f008 fa9e 	bl	8013a9c <lv_disp_get_dpi>
 800b560:	0083      	lsls	r3, r0, #2
 800b562:	1818      	adds	r0, r3, r0
 800b564:	0040      	lsls	r0, r0, #1
 800b566:	21a0      	movs	r1, #160	; 0xa0
 800b568:	3050      	adds	r0, #80	; 0x50
 800b56a:	f7f4 fe67 	bl	800023c <__divsi3>
 800b56e:	0001      	movs	r1, r0
 800b570:	e799      	b.n	800b4a6 <lv_obj_get_scrollbar_area.part.0+0x7fa>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800b572:	2000      	movs	r0, #0
 800b574:	f008 fa92 	bl	8013a9c <lv_disp_get_dpi>
 800b578:	0083      	lsls	r3, r0, #2
 800b57a:	1818      	adds	r0, r3, r0
 800b57c:	0040      	lsls	r0, r0, #1
 800b57e:	21a0      	movs	r1, #160	; 0xa0
 800b580:	3050      	adds	r0, #80	; 0x50
 800b582:	f7f4 fe5b 	bl	800023c <__divsi3>
 800b586:	b280      	uxth	r0, r0
 800b588:	e561      	b.n	800b04e <lv_obj_get_scrollbar_area.part.0+0x3a2>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800b58a:	2000      	movs	r0, #0
 800b58c:	f008 fa86 	bl	8013a9c <lv_disp_get_dpi>
 800b590:	0083      	lsls	r3, r0, #2
 800b592:	1818      	adds	r0, r3, r0
 800b594:	0040      	lsls	r0, r0, #1
 800b596:	21a0      	movs	r1, #160	; 0xa0
 800b598:	3050      	adds	r0, #80	; 0x50
 800b59a:	f7f4 fe4f 	bl	800023c <__divsi3>
 800b59e:	b280      	uxth	r0, r0
 800b5a0:	e74b      	b.n	800b43a <lv_obj_get_scrollbar_area.part.0+0x78e>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	f008 fa7a 	bl	8013a9c <lv_disp_get_dpi>
 800b5a8:	230a      	movs	r3, #10
 800b5aa:	4358      	muls	r0, r3
 800b5ac:	21a0      	movs	r1, #160	; 0xa0
 800b5ae:	3050      	adds	r0, #80	; 0x50
 800b5b0:	f7f4 fe44 	bl	800023c <__divsi3>
 800b5b4:	b280      	uxth	r0, r0
 800b5b6:	e788      	b.n	800b4ca <lv_obj_get_scrollbar_area.part.0+0x81e>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800b5b8:	9b03      	ldr	r3, [sp, #12]
 800b5ba:	454b      	cmp	r3, r9
 800b5bc:	dd01      	ble.n	800b5c2 <lv_obj_get_scrollbar_area.part.0+0x916>
 800b5be:	f7ff fbde 	bl	800ad7e <lv_obj_get_scrollbar_area.part.0+0xd2>
 800b5c2:	9b02      	ldr	r3, [sp, #8]
 800b5c4:	454b      	cmp	r3, r9
 800b5c6:	dd01      	ble.n	800b5cc <lv_obj_get_scrollbar_area.part.0+0x920>
 800b5c8:	f7ff fbd9 	bl	800ad7e <lv_obj_get_scrollbar_area.part.0+0xd2>
 800b5cc:	e542      	b.n	800b054 <lv_obj_get_scrollbar_area.part.0+0x3a8>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	4699      	mov	r9, r3
        hor_draw = true;
 800b5d2:	001f      	movs	r7, r3
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800b5d4:	9b02      	ldr	r3, [sp, #8]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	dd01      	ble.n	800b5de <lv_obj_get_scrollbar_area.part.0+0x932>
 800b5da:	f7ff fbd0 	bl	800ad7e <lv_obj_get_scrollbar_area.part.0+0xd2>
 800b5de:	e628      	b.n	800b232 <lv_obj_get_scrollbar_area.part.0+0x586>

0800b5e0 <lv_obj_get_scroll_left>:
{
 800b5e0:	b510      	push	{r4, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800b5e2:	2216      	movs	r2, #22
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	0004      	movs	r4, r0
 800b5e8:	f000 ffec 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800b5ec:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800b5ee:	2801      	cmp	r0, #1
 800b5f0:	d008      	beq.n	800b604 <lv_obj_get_scroll_left+0x24>
        if(obj->spec_attr == NULL) return 0;
 800b5f2:	68a3      	ldr	r3, [r4, #8]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d003      	beq.n	800b600 <lv_obj_get_scroll_left+0x20>
        return -obj->spec_attr->scroll.x;
 800b5f8:	8a18      	ldrh	r0, [r3, #16]
 800b5fa:	4240      	negs	r0, r0
 800b5fc:	b200      	sxth	r0, r0
}
 800b5fe:	bd10      	pop	{r4, pc}
        if(obj->spec_attr == NULL) return 0;
 800b600:	2000      	movs	r0, #0
 800b602:	e7fc      	b.n	800b5fe <lv_obj_get_scroll_left+0x1e>
 800b604:	0020      	movs	r0, r4
 800b606:	f7ff f94f 	bl	800a8a8 <lv_obj_get_scroll_left.part.0>
 800b60a:	e7f8      	b.n	800b5fe <lv_obj_get_scroll_left+0x1e>

0800b60c <lv_obj_get_scroll_right>:
{
 800b60c:	b510      	push	{r4, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800b60e:	2216      	movs	r2, #22
 800b610:	2100      	movs	r1, #0
 800b612:	0004      	movs	r4, r0
 800b614:	f000 ffd6 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800b618:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800b61a:	2801      	cmp	r0, #1
 800b61c:	d105      	bne.n	800b62a <lv_obj_get_scroll_right+0x1e>
        if(obj->spec_attr == NULL) return 0;
 800b61e:	68a3      	ldr	r3, [r4, #8]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d006      	beq.n	800b632 <lv_obj_get_scroll_right+0x26>
        return obj->spec_attr->scroll.x;
 800b624:	2010      	movs	r0, #16
 800b626:	5e18      	ldrsh	r0, [r3, r0]
}
 800b628:	bd10      	pop	{r4, pc}
 800b62a:	0020      	movs	r0, r4
 800b62c:	f7ff f9a8 	bl	800a980 <lv_obj_get_scroll_right.part.0>
 800b630:	e7fa      	b.n	800b628 <lv_obj_get_scroll_right+0x1c>
        if(obj->spec_attr == NULL) return 0;
 800b632:	2000      	movs	r0, #0
 800b634:	e7f8      	b.n	800b628 <lv_obj_get_scroll_right+0x1c>
 800b636:	46c0      	nop			; (mov r8, r8)

0800b638 <lv_obj_scroll_by>:
{
 800b638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b63a:	46c6      	mov	lr, r8
 800b63c:	0016      	movs	r6, r2
    if(dx == 0 && dy == 0) return;
 800b63e:	000a      	movs	r2, r1
{
 800b640:	b500      	push	{lr}
 800b642:	0004      	movs	r4, r0
 800b644:	000d      	movs	r5, r1
 800b646:	b090      	sub	sp, #64	; 0x40
    if(dx == 0 && dy == 0) return;
 800b648:	4332      	orrs	r2, r6
 800b64a:	d00f      	beq.n	800b66c <lv_obj_scroll_by+0x34>
    if(anim_en == LV_ANIM_ON) {
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d011      	beq.n	800b674 <lv_obj_scroll_by+0x3c>
        lv_anim_del(obj, scroll_y_anim);
 800b650:	4951      	ldr	r1, [pc, #324]	; (800b798 <lv_obj_scroll_by+0x160>)
 800b652:	f008 fc23 	bl	8013e9c <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 800b656:	4951      	ldr	r1, [pc, #324]	; (800b79c <lv_obj_scroll_by+0x164>)
 800b658:	0020      	movs	r0, r4
 800b65a:	f008 fc1f 	bl	8013e9c <lv_anim_del>
        res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 800b65e:	2200      	movs	r2, #0
 800b660:	2109      	movs	r1, #9
 800b662:	0020      	movs	r0, r4
 800b664:	f7f9 fae4 	bl	8004c30 <lv_event_send>
        if(res != LV_RES_OK) return;
 800b668:	2801      	cmp	r0, #1
 800b66a:	d03b      	beq.n	800b6e4 <lv_obj_scroll_by+0xac>
}
 800b66c:	b010      	add	sp, #64	; 0x40
 800b66e:	bc80      	pop	{r7}
 800b670:	46b8      	mov	r8, r7
 800b672:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_disp_t * d = lv_obj_get_disp(obj);
 800b674:	f002 fbaa 	bl	800ddcc <lv_obj_get_disp>
 800b678:	0007      	movs	r7, r0
        lv_anim_init(&a);
 800b67a:	4668      	mov	r0, sp
 800b67c:	f008 fbf6 	bl	8013e6c <lv_anim_init>
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 800b680:	4b47      	ldr	r3, [pc, #284]	; (800b7a0 <lv_obj_scroll_by+0x168>)
    a->var = var;
 800b682:	9400      	str	r4, [sp, #0]
    a->ready_cb = ready_cb;
 800b684:	9303      	str	r3, [sp, #12]
        if(dx) {
 800b686:	2d00      	cmp	r5, #0
 800b688:	d14c      	bne.n	800b724 <lv_obj_scroll_by+0xec>
        if(dy) {
 800b68a:	2e00      	cmp	r6, #0
 800b68c:	d0ee      	beq.n	800b66c <lv_obj_scroll_by+0x34>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 800b68e:	0038      	movs	r0, r7
 800b690:	f008 f9f0 	bl	8013a74 <lv_disp_get_ver_res>
 800b694:	0040      	lsls	r0, r0, #1
 800b696:	0032      	movs	r2, r6
 800b698:	2100      	movs	r1, #0
 800b69a:	1080      	asrs	r0, r0, #2
 800b69c:	f008 fd6e 	bl	801417c <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800b6a0:	23c8      	movs	r3, #200	; 0xc8
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 800b6a2:	0035      	movs	r5, r6
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	4298      	cmp	r0, r3
 800b6a8:	d86e      	bhi.n	800b788 <lv_obj_scroll_by+0x150>
    a->time = duration;
 800b6aa:	28c8      	cmp	r0, #200	; 0xc8
 800b6ac:	d36e      	bcc.n	800b78c <lv_obj_scroll_by+0x154>
    if(obj->spec_attr == NULL) return 0;
 800b6ae:	68a3      	ldr	r3, [r4, #8]
 800b6b0:	900a      	str	r0, [sp, #40]	; 0x28
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d06c      	beq.n	800b790 <lv_obj_scroll_by+0x158>
    return -obj->spec_attr->scroll.y;
 800b6b6:	8a5d      	ldrh	r5, [r3, #18]
 800b6b8:	426d      	negs	r5, r5
            lv_anim_set_values(&a, -sy, -sy + dy);
 800b6ba:	b22d      	sxth	r5, r5
 800b6bc:	426b      	negs	r3, r5
 800b6be:	1b75      	subs	r5, r6, r5
    a->start_value = start;
 800b6c0:	9307      	str	r3, [sp, #28]
    a->current_value = start;
 800b6c2:	9308      	str	r3, [sp, #32]
    a->exec_cb = exec_cb;
 800b6c4:	4b34      	ldr	r3, [pc, #208]	; (800b798 <lv_obj_scroll_by+0x160>)
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 800b6c6:	466a      	mov	r2, sp
 800b6c8:	9301      	str	r3, [sp, #4]
    a->path_cb = path_cb;
 800b6ca:	4b36      	ldr	r3, [pc, #216]	; (800b7a4 <lv_obj_scroll_by+0x16c>)
 800b6cc:	2109      	movs	r1, #9
 800b6ce:	0020      	movs	r0, r4
    a->end_value = end;
 800b6d0:	9509      	str	r5, [sp, #36]	; 0x24
    a->path_cb = path_cb;
 800b6d2:	9306      	str	r3, [sp, #24]
 800b6d4:	f7f9 faac 	bl	8004c30 <lv_event_send>
            if(res != LV_RES_OK) return;
 800b6d8:	2801      	cmp	r0, #1
 800b6da:	d1c7      	bne.n	800b66c <lv_obj_scroll_by+0x34>
            lv_anim_start(&a);
 800b6dc:	4668      	mov	r0, sp
 800b6de:	f008 fcc7 	bl	8014070 <lv_anim_start>
 800b6e2:	e7c3      	b.n	800b66c <lv_obj_scroll_by+0x34>
    lv_obj_allocate_spec_attr(obj);
 800b6e4:	0020      	movs	r0, r4
 800b6e6:	f7fc fc31 	bl	8007f4c <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll.x += x;
 800b6ea:	68a3      	ldr	r3, [r4, #8]
    lv_obj_move_children_by(obj, x, y, true);
 800b6ec:	0029      	movs	r1, r5
    obj->spec_attr->scroll.x += x;
 800b6ee:	8a1a      	ldrh	r2, [r3, #16]
    lv_obj_move_children_by(obj, x, y, true);
 800b6f0:	0020      	movs	r0, r4
    obj->spec_attr->scroll.x += x;
 800b6f2:	1952      	adds	r2, r2, r5
 800b6f4:	821a      	strh	r2, [r3, #16]
    obj->spec_attr->scroll.y += y;
 800b6f6:	8a5a      	ldrh	r2, [r3, #18]
 800b6f8:	1992      	adds	r2, r2, r6
 800b6fa:	825a      	strh	r2, [r3, #18]
    lv_obj_move_children_by(obj, x, y, true);
 800b6fc:	0032      	movs	r2, r6
 800b6fe:	2301      	movs	r3, #1
 800b700:	f7fd fbbc 	bl	8008e7c <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 800b704:	2200      	movs	r2, #0
 800b706:	210b      	movs	r1, #11
 800b708:	0020      	movs	r0, r4
 800b70a:	f7f9 fa91 	bl	8004c30 <lv_event_send>
    if(res != LV_RES_OK) return res;
 800b70e:	2801      	cmp	r0, #1
 800b710:	d1ac      	bne.n	800b66c <lv_obj_scroll_by+0x34>
    lv_obj_invalidate(obj);
 800b712:	0020      	movs	r0, r4
 800b714:	f7fd fe7e 	bl	8009414 <lv_obj_invalidate>
        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 800b718:	2200      	movs	r2, #0
 800b71a:	210a      	movs	r1, #10
 800b71c:	0020      	movs	r0, r4
 800b71e:	f7f9 fa87 	bl	8004c30 <lv_event_send>
        if(res != LV_RES_OK) return;
 800b722:	e7a3      	b.n	800b66c <lv_obj_scroll_by+0x34>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 800b724:	0038      	movs	r0, r7
 800b726:	f008 f991 	bl	8013a4c <lv_disp_get_hor_res>
 800b72a:	0040      	lsls	r0, r0, #1
 800b72c:	002a      	movs	r2, r5
 800b72e:	2100      	movs	r1, #0
 800b730:	1080      	asrs	r0, r0, #2
 800b732:	f008 fd23 	bl	801417c <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800b736:	23c8      	movs	r3, #200	; 0xc8
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 800b738:	46a8      	mov	r8, r5
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	4298      	cmp	r0, r3
 800b73e:	d821      	bhi.n	800b784 <lv_obj_scroll_by+0x14c>
    a->time = duration;
 800b740:	28c8      	cmp	r0, #200	; 0xc8
 800b742:	d31d      	bcc.n	800b780 <lv_obj_scroll_by+0x148>
    if(obj->spec_attr == NULL) return 0;
 800b744:	68a3      	ldr	r3, [r4, #8]
 800b746:	900a      	str	r0, [sp, #40]	; 0x28
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d023      	beq.n	800b794 <lv_obj_scroll_by+0x15c>
    return -obj->spec_attr->scroll.x;
 800b74c:	8a1b      	ldrh	r3, [r3, #16]
 800b74e:	425b      	negs	r3, r3
            lv_anim_set_values(&a, -sx, -sx + dx);
 800b750:	b21b      	sxth	r3, r3
 800b752:	425a      	negs	r2, r3
 800b754:	1aeb      	subs	r3, r5, r3
 800b756:	4698      	mov	r8, r3
    a->end_value = end;
 800b758:	4643      	mov	r3, r8
 800b75a:	9309      	str	r3, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 800b75c:	4b0f      	ldr	r3, [pc, #60]	; (800b79c <lv_obj_scroll_by+0x164>)
    a->start_value = start;
 800b75e:	9207      	str	r2, [sp, #28]
    a->exec_cb = exec_cb;
 800b760:	9301      	str	r3, [sp, #4]
    a->path_cb = path_cb;
 800b762:	4b10      	ldr	r3, [pc, #64]	; (800b7a4 <lv_obj_scroll_by+0x16c>)
    a->current_value = start;
 800b764:	9208      	str	r2, [sp, #32]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 800b766:	2109      	movs	r1, #9
 800b768:	466a      	mov	r2, sp
 800b76a:	0020      	movs	r0, r4
    a->path_cb = path_cb;
 800b76c:	9306      	str	r3, [sp, #24]
 800b76e:	f7f9 fa5f 	bl	8004c30 <lv_event_send>
            if(res != LV_RES_OK) return;
 800b772:	2801      	cmp	r0, #1
 800b774:	d000      	beq.n	800b778 <lv_obj_scroll_by+0x140>
 800b776:	e779      	b.n	800b66c <lv_obj_scroll_by+0x34>
            lv_anim_start(&a);
 800b778:	4668      	mov	r0, sp
 800b77a:	f008 fc79 	bl	8014070 <lv_anim_start>
 800b77e:	e784      	b.n	800b68a <lv_obj_scroll_by+0x52>
    a->time = duration;
 800b780:	20c8      	movs	r0, #200	; 0xc8
 800b782:	e7df      	b.n	800b744 <lv_obj_scroll_by+0x10c>
 800b784:	0018      	movs	r0, r3
 800b786:	e7dd      	b.n	800b744 <lv_obj_scroll_by+0x10c>
 800b788:	0018      	movs	r0, r3
 800b78a:	e790      	b.n	800b6ae <lv_obj_scroll_by+0x76>
 800b78c:	20c8      	movs	r0, #200	; 0xc8
 800b78e:	e78e      	b.n	800b6ae <lv_obj_scroll_by+0x76>
 800b790:	2300      	movs	r3, #0
 800b792:	e795      	b.n	800b6c0 <lv_obj_scroll_by+0x88>
 800b794:	2200      	movs	r2, #0
 800b796:	e7df      	b.n	800b758 <lv_obj_scroll_by+0x120>
 800b798:	0800aabd 	.word	0x0800aabd
 800b79c:	0800aa69 	.word	0x0800aa69
 800b7a0:	0800a899 	.word	0x0800a899
 800b7a4:	080141a5 	.word	0x080141a5

0800b7a8 <lv_obj_scroll_by_bounded.part.0>:
void lv_obj_scroll_by_bounded(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
 800b7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7aa:	46de      	mov	lr, fp
 800b7ac:	4657      	mov	r7, sl
 800b7ae:	464e      	mov	r6, r9
 800b7b0:	4645      	mov	r5, r8
 800b7b2:	0004      	movs	r4, r0
 800b7b4:	b5e0      	push	{r5, r6, r7, lr}
 800b7b6:	4698      	mov	r8, r3
 800b7b8:	4689      	mov	r9, r1
 800b7ba:	0017      	movs	r7, r2
    lv_obj_update_layout(obj);
 800b7bc:	f7fe ffea 	bl	800a794 <lv_obj_update_layout>
    if(obj->spec_attr == NULL) return 0;
 800b7c0:	68a3      	ldr	r3, [r4, #8]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d100      	bne.n	800b7c8 <lv_obj_scroll_by_bounded.part.0+0x20>
 800b7c6:	e082      	b.n	800b8ce <lv_obj_scroll_by_bounded.part.0+0x126>
    return -obj->spec_attr->scroll.x;
 800b7c8:	8a1d      	ldrh	r5, [r3, #16]
 800b7ca:	426d      	negs	r5, r5
 800b7cc:	b2ab      	uxth	r3, r5
 800b7ce:	469a      	mov	sl, r3
 800b7d0:	b22d      	sxth	r5, r5
    lv_coord_t x_bounded = x_current + dx;
 800b7d2:	464b      	mov	r3, r9
 800b7d4:	4652      	mov	r2, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	1a9e      	subs	r6, r3, r2
 800b7da:	0020      	movs	r0, r4
 800b7dc:	2216      	movs	r2, #22
 800b7de:	f000 fef1 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800b7e2:	b2c0      	uxtb	r0, r0
 800b7e4:	b236      	sxth	r6, r6
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800b7e6:	2801      	cmp	r0, #1
 800b7e8:	d018      	beq.n	800b81c <lv_obj_scroll_by_bounded.part.0+0x74>
        if(x_bounded < 0) {
 800b7ea:	2e00      	cmp	r6, #0
 800b7ec:	db49      	blt.n	800b882 <lv_obj_scroll_by_bounded.part.0+0xda>
    if(obj->spec_attr == NULL) return 0;
 800b7ee:	68a3      	ldr	r3, [r4, #8]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d100      	bne.n	800b7f6 <lv_obj_scroll_by_bounded.part.0+0x4e>
 800b7f4:	e070      	b.n	800b8d8 <lv_obj_scroll_by_bounded.part.0+0x130>
    return -obj->spec_attr->scroll.y;
 800b7f6:	8a59      	ldrh	r1, [r3, #18]
 800b7f8:	4249      	negs	r1, r1
 800b7fa:	b28e      	uxth	r6, r1
 800b7fc:	b20a      	sxth	r2, r1
    lv_coord_t y_bounded = y_current + dy;
 800b7fe:	1bbb      	subs	r3, r7, r6
 800b800:	b219      	sxth	r1, r3
 800b802:	4689      	mov	r9, r1
    if(y_bounded < 0) {
 800b804:	041b      	lsls	r3, r3, #16
 800b806:	d500      	bpl.n	800b80a <lv_obj_scroll_by_bounded.part.0+0x62>
 800b808:	e06e      	b.n	800b8e8 <lv_obj_scroll_by_bounded.part.0+0x140>
    if(dx || dy) {
 800b80a:	002b      	movs	r3, r5
 800b80c:	4313      	orrs	r3, r2
 800b80e:	d132      	bne.n	800b876 <lv_obj_scroll_by_bounded.part.0+0xce>
}
 800b810:	bcf0      	pop	{r4, r5, r6, r7}
 800b812:	46bb      	mov	fp, r7
 800b814:	46b2      	mov	sl, r6
 800b816:	46a9      	mov	r9, r5
 800b818:	46a0      	mov	r8, r4
 800b81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(x_bounded > 0) {
 800b81c:	2e00      	cmp	r6, #0
 800b81e:	dde6      	ble.n	800b7ee <lv_obj_scroll_by_bounded.part.0+0x46>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800b820:	2216      	movs	r2, #22
 800b822:	2100      	movs	r1, #0
 800b824:	0020      	movs	r0, r4
 800b826:	f000 fecd 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800b82a:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800b82c:	2801      	cmp	r0, #1
 800b82e:	d100      	bne.n	800b832 <lv_obj_scroll_by_bounded.part.0+0x8a>
 800b830:	e0a1      	b.n	800b976 <lv_obj_scroll_by_bounded.part.0+0x1ce>
        if(obj->spec_attr == NULL) return 0;
 800b832:	68a3      	ldr	r3, [r4, #8]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d06c      	beq.n	800b912 <lv_obj_scroll_by_bounded.part.0+0x16a>
        return -obj->spec_attr->scroll.x;
 800b838:	8a18      	ldrh	r0, [r3, #16]
 800b83a:	4240      	negs	r0, r0
 800b83c:	b203      	sxth	r3, r0
 800b83e:	4699      	mov	r9, r3
 800b840:	b285      	uxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800b842:	2216      	movs	r2, #22
 800b844:	2100      	movs	r1, #0
 800b846:	0020      	movs	r0, r4
 800b848:	f000 febc 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800b84c:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800b84e:	2801      	cmp	r0, #1
 800b850:	d176      	bne.n	800b940 <lv_obj_scroll_by_bounded.part.0+0x198>
        if(obj->spec_attr == NULL) return 0;
 800b852:	68a3      	ldr	r3, [r4, #8]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d100      	bne.n	800b85a <lv_obj_scroll_by_bounded.part.0+0xb2>
 800b858:	e093      	b.n	800b982 <lv_obj_scroll_by_bounded.part.0+0x1da>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800b85a:	8a18      	ldrh	r0, [r3, #16]
 800b85c:	1828      	adds	r0, r5, r0
 800b85e:	b200      	sxth	r0, r0
    dx = x_bounded - x_current;
 800b860:	43c2      	mvns	r2, r0
 800b862:	17d2      	asrs	r2, r2, #31
 800b864:	0011      	movs	r1, r2
 800b866:	4001      	ands	r1, r0
 800b868:	000d      	movs	r5, r1
 800b86a:	42b1      	cmp	r1, r6
 800b86c:	dd00      	ble.n	800b870 <lv_obj_scroll_by_bounded.part.0+0xc8>
 800b86e:	1c35      	adds	r5, r6, #0
 800b870:	4455      	add	r5, sl
 800b872:	b22d      	sxth	r5, r5
 800b874:	e7bc      	b.n	800b7f0 <lv_obj_scroll_by_bounded.part.0+0x48>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 800b876:	4643      	mov	r3, r8
 800b878:	0029      	movs	r1, r5
 800b87a:	0020      	movs	r0, r4
 800b87c:	f7ff fedc 	bl	800b638 <lv_obj_scroll_by>
 800b880:	e7c6      	b.n	800b810 <lv_obj_scroll_by_bounded.part.0+0x68>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800b882:	2216      	movs	r2, #22
 800b884:	2100      	movs	r1, #0
 800b886:	0020      	movs	r0, r4
 800b888:	f000 fe9c 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800b88c:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800b88e:	2801      	cmp	r0, #1
 800b890:	d05d      	beq.n	800b94e <lv_obj_scroll_by_bounded.part.0+0x1a6>
        if(obj->spec_attr == NULL) return 0;
 800b892:	68a3      	ldr	r3, [r4, #8]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d038      	beq.n	800b90a <lv_obj_scroll_by_bounded.part.0+0x162>
        return -obj->spec_attr->scroll.x;
 800b898:	8a1d      	ldrh	r5, [r3, #16]
 800b89a:	426d      	negs	r5, r5
 800b89c:	b2ab      	uxth	r3, r5
 800b89e:	469b      	mov	fp, r3
 800b8a0:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800b8a2:	2216      	movs	r2, #22
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	0020      	movs	r0, r4
 800b8a8:	f000 fe8c 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800b8ac:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800b8ae:	2801      	cmp	r0, #1
 800b8b0:	d133      	bne.n	800b91a <lv_obj_scroll_by_bounded.part.0+0x172>
        if(obj->spec_attr == NULL) return 0;
 800b8b2:	68a3      	ldr	r3, [r4, #8]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d051      	beq.n	800b95c <lv_obj_scroll_by_bounded.part.0+0x1b4>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800b8b8:	8a1d      	ldrh	r5, [r3, #16]
 800b8ba:	445d      	add	r5, fp
 800b8bc:	b228      	sxth	r0, r5
            if(scroll_max < 0) scroll_max = 0;
 800b8be:	43c5      	mvns	r5, r0
 800b8c0:	17ed      	asrs	r5, r5, #31
 800b8c2:	4005      	ands	r5, r0
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 800b8c4:	426a      	negs	r2, r5
 800b8c6:	4296      	cmp	r6, r2
 800b8c8:	db36      	blt.n	800b938 <lv_obj_scroll_by_bounded.part.0+0x190>
 800b8ca:	464d      	mov	r5, r9
 800b8cc:	e793      	b.n	800b7f6 <lv_obj_scroll_by_bounded.part.0+0x4e>
 800b8ce:	2300      	movs	r3, #0
    if(obj->spec_attr == NULL) return 0;
 800b8d0:	2500      	movs	r5, #0
 800b8d2:	469a      	mov	sl, r3
 800b8d4:	e77d      	b.n	800b7d2 <lv_obj_scroll_by_bounded.part.0+0x2a>
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 800b8d6:	464d      	mov	r5, r9
 800b8d8:	2600      	movs	r6, #0
    lv_coord_t y_bounded = y_current + dy;
 800b8da:	1bbb      	subs	r3, r7, r6
 800b8dc:	b219      	sxth	r1, r3
    if(obj->spec_attr == NULL) return 0;
 800b8de:	2200      	movs	r2, #0
    lv_coord_t y_bounded = y_current + dy;
 800b8e0:	4689      	mov	r9, r1
    if(y_bounded < 0) {
 800b8e2:	041b      	lsls	r3, r3, #16
 800b8e4:	d400      	bmi.n	800b8e8 <lv_obj_scroll_by_bounded.part.0+0x140>
 800b8e6:	e790      	b.n	800b80a <lv_obj_scroll_by_bounded.part.0+0x62>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 800b8e8:	0020      	movs	r0, r4
 800b8ea:	f7ff f96b 	bl	800abc4 <lv_obj_get_scroll_bottom>
 800b8ee:	1830      	adds	r0, r6, r0
 800b8f0:	b202      	sxth	r2, r0
        if(scroll_max < 0) scroll_max = 0;
 800b8f2:	43d0      	mvns	r0, r2
 800b8f4:	17c0      	asrs	r0, r0, #31
 800b8f6:	0003      	movs	r3, r0
 800b8f8:	4013      	ands	r3, r2
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 800b8fa:	4258      	negs	r0, r3
 800b8fc:	003a      	movs	r2, r7
 800b8fe:	4581      	cmp	r9, r0
 800b900:	db00      	blt.n	800b904 <lv_obj_scroll_by_bounded.part.0+0x15c>
 800b902:	e782      	b.n	800b80a <lv_obj_scroll_by_bounded.part.0+0x62>
    dy = y_bounded - y_current;
 800b904:	1af2      	subs	r2, r6, r3
 800b906:	b212      	sxth	r2, r2
 800b908:	e77f      	b.n	800b80a <lv_obj_scroll_by_bounded.part.0+0x62>
 800b90a:	2300      	movs	r3, #0
        if(obj->spec_attr == NULL) return 0;
 800b90c:	2500      	movs	r5, #0
 800b90e:	469b      	mov	fp, r3
 800b910:	e7c7      	b.n	800b8a2 <lv_obj_scroll_by_bounded.part.0+0xfa>
 800b912:	2300      	movs	r3, #0
 800b914:	2500      	movs	r5, #0
 800b916:	4699      	mov	r9, r3
 800b918:	e793      	b.n	800b842 <lv_obj_scroll_by_bounded.part.0+0x9a>
 800b91a:	0020      	movs	r0, r4
 800b91c:	f7ff f830 	bl	800a980 <lv_obj_get_scroll_right.part.0>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800b920:	4458      	add	r0, fp
 800b922:	b200      	sxth	r0, r0
            if(scroll_max < 0) scroll_max = 0;
 800b924:	43c5      	mvns	r5, r0
 800b926:	17ed      	asrs	r5, r5, #31
 800b928:	4005      	ands	r5, r0
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 800b92a:	426b      	negs	r3, r5
 800b92c:	429e      	cmp	r6, r3
 800b92e:	db02      	blt.n	800b936 <lv_obj_scroll_by_bounded.part.0+0x18e>
    if(obj->spec_attr == NULL) return 0;
 800b930:	464d      	mov	r5, r9
 800b932:	68a3      	ldr	r3, [r4, #8]
 800b934:	e75c      	b.n	800b7f0 <lv_obj_scroll_by_bounded.part.0+0x48>
 800b936:	68a3      	ldr	r3, [r4, #8]
    dx = x_bounded - x_current;
 800b938:	4652      	mov	r2, sl
 800b93a:	1b55      	subs	r5, r2, r5
 800b93c:	b22d      	sxth	r5, r5
 800b93e:	e757      	b.n	800b7f0 <lv_obj_scroll_by_bounded.part.0+0x48>
 800b940:	0020      	movs	r0, r4
 800b942:	f7ff f81d 	bl	800a980 <lv_obj_get_scroll_right.part.0>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800b946:	1828      	adds	r0, r5, r0
    if(obj->spec_attr == NULL) return 0;
 800b948:	68a3      	ldr	r3, [r4, #8]
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800b94a:	b200      	sxth	r0, r0
 800b94c:	e788      	b.n	800b860 <lv_obj_scroll_by_bounded.part.0+0xb8>
 800b94e:	0020      	movs	r0, r4
 800b950:	f7fe ffaa 	bl	800a8a8 <lv_obj_get_scroll_left.part.0>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800b954:	b283      	uxth	r3, r0
 800b956:	0005      	movs	r5, r0
 800b958:	469b      	mov	fp, r3
 800b95a:	e7a2      	b.n	800b8a2 <lv_obj_scroll_by_bounded.part.0+0xfa>
            if(scroll_max < 0) scroll_max = 0;
 800b95c:	43e8      	mvns	r0, r5
 800b95e:	17c0      	asrs	r0, r0, #31
 800b960:	4005      	ands	r5, r0
 800b962:	b22b      	sxth	r3, r5
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 800b964:	425b      	negs	r3, r3
 800b966:	42b3      	cmp	r3, r6
 800b968:	ddb5      	ble.n	800b8d6 <lv_obj_scroll_by_bounded.part.0+0x12e>
    dx = x_bounded - x_current;
 800b96a:	4653      	mov	r3, sl
 800b96c:	1b5d      	subs	r5, r3, r5
 800b96e:	2600      	movs	r6, #0
    if(obj->spec_attr == NULL) return 0;
 800b970:	2200      	movs	r2, #0
    dx = x_bounded - x_current;
 800b972:	b22d      	sxth	r5, r5
    if(obj->spec_attr == NULL) return 0;
 800b974:	e743      	b.n	800b7fe <lv_obj_scroll_by_bounded.part.0+0x56>
 800b976:	0020      	movs	r0, r4
 800b978:	f7fe ff96 	bl	800a8a8 <lv_obj_get_scroll_left.part.0>
 800b97c:	4681      	mov	r9, r0
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800b97e:	b285      	uxth	r5, r0
 800b980:	e75f      	b.n	800b842 <lv_obj_scroll_by_bounded.part.0+0x9a>
    dx = x_bounded - x_current;
 800b982:	464b      	mov	r3, r9
 800b984:	43d8      	mvns	r0, r3
 800b986:	17c0      	asrs	r0, r0, #31
 800b988:	4018      	ands	r0, r3
 800b98a:	b203      	sxth	r3, r0
 800b98c:	42b3      	cmp	r3, r6
 800b98e:	dd00      	ble.n	800b992 <lv_obj_scroll_by_bounded.part.0+0x1ea>
 800b990:	1c30      	adds	r0, r6, #0
 800b992:	4450      	add	r0, sl
 800b994:	2600      	movs	r6, #0
    if(obj->spec_attr == NULL) return 0;
 800b996:	2200      	movs	r2, #0
    dx = x_bounded - x_current;
 800b998:	b205      	sxth	r5, r0
    if(obj->spec_attr == NULL) return 0;
 800b99a:	e730      	b.n	800b7fe <lv_obj_scroll_by_bounded.part.0+0x56>

0800b99c <scroll_area_into_view>:

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 800b99c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b99e:	4657      	mov	r7, sl
 800b9a0:	46de      	mov	lr, fp
 800b9a2:	464e      	mov	r6, r9
 800b9a4:	4645      	mov	r5, r8
 800b9a6:	b5e0      	push	{r5, r6, r7, lr}
 800b9a8:	0007      	movs	r7, r0
 800b9aa:	b08b      	sub	sp, #44	; 0x2c
    lv_obj_t * parent = lv_obj_get_parent(child);
 800b9ac:	0008      	movs	r0, r1
{
 800b9ae:	468a      	mov	sl, r1
 800b9b0:	0016      	movs	r6, r2
 800b9b2:	9302      	str	r3, [sp, #8]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800b9b4:	f002 fa32 	bl	800de1c <lv_obj_get_parent>
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 800b9b8:	2110      	movs	r1, #16
    lv_obj_t * parent = lv_obj_get_parent(child);
 800b9ba:	0004      	movs	r4, r0
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 800b9bc:	f7fc faaa 	bl	8007f14 <lv_obj_has_flag>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d100      	bne.n	800b9c6 <scroll_area_into_view+0x2a>
 800b9c4:	e0d9      	b.n	800bb7a <scroll_area_into_view+0x1de>
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 800b9c6:	68a3      	ldr	r3, [r4, #8]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d100      	bne.n	800b9ce <scroll_area_into_view+0x32>
 800b9cc:	e197      	b.n	800bcfe <scroll_area_into_view+0x362>
 800b9ce:	7e5a      	ldrb	r2, [r3, #25]
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 800b9d0:	7e1b      	ldrb	r3, [r3, #24]
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 800b9d2:	0712      	lsls	r2, r2, #28
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 800b9d4:	069b      	lsls	r3, r3, #26
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 800b9d6:	0f12      	lsrs	r2, r2, #28
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 800b9d8:	0f9b      	lsrs	r3, r3, #30
 800b9da:	469b      	mov	fp, r3
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
    else area_tmp = area;
 800b9dc:	46b9      	mov	r9, r7
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 800b9de:	9201      	str	r2, [sp, #4]
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800b9e0:	d002      	beq.n	800b9e8 <scroll_area_into_view+0x4c>
 800b9e2:	2310      	movs	r3, #16
 800b9e4:	4453      	add	r3, sl
 800b9e6:	4699      	mov	r9, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800b9e8:	2232      	movs	r2, #50	; 0x32
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	0020      	movs	r0, r4
 800b9ee:	f000 fde9 	bl	800c5c4 <lv_obj_get_style_prop>
 800b9f2:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800b9f4:	2210      	movs	r2, #16
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	0020      	movs	r0, r4
 800b9fa:	f000 fde3 	bl	800c5c4 <lv_obj_get_style_prop>

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 800b9fe:	b2ab      	uxth	r3, r5
 800ba00:	4698      	mov	r8, r3
 800ba02:	4440      	add	r0, r8
 800ba04:	b285      	uxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800ba06:	2211      	movs	r2, #17
 800ba08:	2100      	movs	r1, #0
 800ba0a:	0020      	movs	r0, r4
 800ba0c:	9504      	str	r5, [sp, #16]
 800ba0e:	f000 fdd9 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 800ba12:	4440      	add	r0, r8
 800ba14:	b281      	uxth	r1, r0
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800ba16:	8873      	ldrh	r3, [r6, #2]
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 800ba18:	9105      	str	r1, [sp, #20]
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800ba1a:	1aea      	subs	r2, r5, r3
 800ba1c:	8a65      	ldrh	r5, [r4, #18]
 800ba1e:	468c      	mov	ip, r1
 800ba20:	18ad      	adds	r5, r5, r2
 800ba22:	464a      	mov	r2, r9
 800ba24:	8852      	ldrh	r2, [r2, #2]
 800ba26:	4463      	add	r3, ip
 800ba28:	1aad      	subs	r5, r5, r2
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 800ba2a:	464a      	mov	r2, r9
 800ba2c:	88d2      	ldrh	r2, [r2, #6]
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	4694      	mov	ip, r2
 800ba32:	9207      	str	r2, [sp, #28]
 800ba34:	8ae0      	ldrh	r0, [r4, #22]
 800ba36:	9309      	str	r3, [sp, #36]	; 0x24
 800ba38:	1a1b      	subs	r3, r3, r0
 800ba3a:	4463      	add	r3, ip
 800ba3c:	b21b      	sxth	r3, r3
 800ba3e:	9008      	str	r0, [sp, #32]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 800ba40:	0020      	movs	r0, r4
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 800ba42:	9303      	str	r3, [sp, #12]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 800ba44:	f7fd f950 	bl	8008ce8 <lv_obj_get_height>
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800ba48:	b22d      	sxth	r5, r5
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 800ba4a:	9b03      	ldr	r3, [sp, #12]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 800ba4c:	9006      	str	r0, [sp, #24]
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 800ba4e:	2d00      	cmp	r5, #0
 800ba50:	da00      	bge.n	800ba54 <scroll_area_into_view+0xb8>
 800ba52:	e0da      	b.n	800bc0a <scroll_area_into_view+0x26e>
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	da00      	bge.n	800ba5a <scroll_area_into_view+0xbe>
 800ba58:	e099      	b.n	800bb8e <scroll_area_into_view+0x1f2>
    lv_coord_t y_scroll = 0;
 800ba5a:	2500      	movs	r5, #0
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800ba5c:	68a2      	ldr	r2, [r4, #8]
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
        if(sb + y_scroll < 0) y_scroll = 0;
    }

    switch(snap_y) {
 800ba5e:	465b      	mov	r3, fp
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	d100      	bne.n	800ba66 <scroll_area_into_view+0xca>
 800ba64:	e0a4      	b.n	800bbb0 <scroll_area_into_view+0x214>
 800ba66:	2b03      	cmp	r3, #3
 800ba68:	d100      	bne.n	800ba6c <scroll_area_into_view+0xd0>
 800ba6a:	e10d      	b.n	800bc88 <scroll_area_into_view+0x2ec>
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d100      	bne.n	800ba72 <scroll_area_into_view+0xd6>
 800ba70:	e125      	b.n	800bcbe <scroll_area_into_view+0x322>
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800ba72:	2a00      	cmp	r2, #0
 800ba74:	d100      	bne.n	800ba78 <scroll_area_into_view+0xdc>
 800ba76:	e0a5      	b.n	800bbc4 <scroll_area_into_view+0x228>
 800ba78:	7e13      	ldrb	r3, [r2, #24]
 800ba7a:	071b      	lsls	r3, r3, #28
 800ba7c:	0f9b      	lsrs	r3, r3, #30
 800ba7e:	4699      	mov	r9, r3
            break;
    }

    lv_coord_t x_scroll = 0;
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800ba80:	d001      	beq.n	800ba86 <scroll_area_into_view+0xea>
 800ba82:	4657      	mov	r7, sl
 800ba84:	3710      	adds	r7, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800ba86:	2212      	movs	r2, #18
 800ba88:	2100      	movs	r1, #0
 800ba8a:	0020      	movs	r0, r4
 800ba8c:	f000 fd9a 	bl	800c5c4 <lv_obj_get_style_prop>
    else area_tmp = area;

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 800ba90:	4440      	add	r0, r8
 800ba92:	b283      	uxth	r3, r0
 800ba94:	469a      	mov	sl, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800ba96:	2213      	movs	r2, #19
 800ba98:	2100      	movs	r1, #0
 800ba9a:	0020      	movs	r0, r4
 800ba9c:	f000 fd92 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800baa0:	4652      	mov	r2, sl
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 800baa2:	4440      	add	r0, r8
 800baa4:	b283      	uxth	r3, r0
 800baa6:	469b      	mov	fp, r3
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800baa8:	8833      	ldrh	r3, [r6, #0]
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 800baaa:	8aa0      	ldrh	r0, [r4, #20]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800baac:	1ad1      	subs	r1, r2, r3
 800baae:	8a22      	ldrh	r2, [r4, #16]
 800bab0:	445b      	add	r3, fp
 800bab2:	1852      	adds	r2, r2, r1
 800bab4:	8839      	ldrh	r1, [r7, #0]
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	1a52      	subs	r2, r2, r1
 800baba:	b211      	sxth	r1, r2
 800babc:	4688      	mov	r8, r1
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 800babe:	88b9      	ldrh	r1, [r7, #4]
 800bac0:	468c      	mov	ip, r1
 800bac2:	1a19      	subs	r1, r3, r0
 800bac4:	4461      	add	r1, ip
 800bac6:	b209      	sxth	r1, r1
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 800bac8:	0412      	lsls	r2, r2, #16
 800baca:	d500      	bpl.n	800bace <scroll_area_into_view+0x132>
 800bacc:	e07d      	b.n	800bbca <scroll_area_into_view+0x22e>
 800bace:	2900      	cmp	r1, #0
 800bad0:	da00      	bge.n	800bad4 <scroll_area_into_view+0x138>
 800bad2:	e0ac      	b.n	800bc2e <scroll_area_into_view+0x292>
 800bad4:	2300      	movs	r3, #0
 800bad6:	4698      	mov	r8, r3
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
        if(sr + x_scroll < 0) x_scroll = 0;
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 800bad8:	0020      	movs	r0, r4
 800bada:	f7fd f8fd 	bl	8008cd8 <lv_obj_get_width>
    switch(snap_x) {
 800bade:	464b      	mov	r3, r9
 800bae0:	2b02      	cmp	r3, #2
 800bae2:	d100      	bne.n	800bae6 <scroll_area_into_view+0x14a>
 800bae4:	e0c1      	b.n	800bc6a <scroll_area_into_view+0x2ce>
 800bae6:	2b03      	cmp	r3, #3
 800bae8:	d100      	bne.n	800baec <scroll_area_into_view+0x150>
 800baea:	e0f1      	b.n	800bcd0 <scroll_area_into_view+0x334>
 800baec:	2b01      	cmp	r3, #1
 800baee:	d100      	bne.n	800baf2 <scroll_area_into_view+0x156>
 800baf0:	e0c3      	b.n	800bc7a <scroll_area_into_view+0x2de>
            x_scroll += snap_goal - act;
            break;
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 800baf2:	498c      	ldr	r1, [pc, #560]	; (800bd24 <scroll_area_into_view+0x388>)
 800baf4:	0020      	movs	r0, r4
 800baf6:	f008 f9d1 	bl	8013e9c <lv_anim_del>
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 800bafa:	498b      	ldr	r1, [pc, #556]	; (800bd28 <scroll_area_into_view+0x38c>)
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 800bafc:	0007      	movs	r7, r0
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 800bafe:	0020      	movs	r0, r4
 800bb00:	f008 f9cc 	bl	8013e9c <lv_anim_del>
    if(y_del || x_del) {
 800bb04:	2f00      	cmp	r7, #0
 800bb06:	d000      	beq.n	800bb0a <scroll_area_into_view+0x16e>
 800bb08:	e077      	b.n	800bbfa <scroll_area_into_view+0x25e>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d000      	beq.n	800bb10 <scroll_area_into_view+0x174>
 800bb0e:	e074      	b.n	800bbfa <scroll_area_into_view+0x25e>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
        if(res != LV_RES_OK) return;
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 800bb10:	9b01      	ldr	r3, [sp, #4]
 800bb12:	07db      	lsls	r3, r3, #31
 800bb14:	d405      	bmi.n	800bb22 <scroll_area_into_view+0x186>
 800bb16:	4643      	mov	r3, r8
 800bb18:	43db      	mvns	r3, r3
 800bb1a:	4642      	mov	r2, r8
 800bb1c:	17db      	asrs	r3, r3, #31
 800bb1e:	401a      	ands	r2, r3
 800bb20:	4690      	mov	r8, r2
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 800bb22:	9b01      	ldr	r3, [sp, #4]
 800bb24:	079b      	lsls	r3, r3, #30
 800bb26:	d406      	bmi.n	800bb36 <scroll_area_into_view+0x19a>
 800bb28:	4642      	mov	r2, r8
 800bb2a:	4643      	mov	r3, r8
 800bb2c:	2a00      	cmp	r2, #0
 800bb2e:	dd00      	ble.n	800bb32 <scroll_area_into_view+0x196>
 800bb30:	2300      	movs	r3, #0
 800bb32:	b21b      	sxth	r3, r3
 800bb34:	4698      	mov	r8, r3
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 800bb36:	9b01      	ldr	r3, [sp, #4]
 800bb38:	075b      	lsls	r3, r3, #29
 800bb3a:	d403      	bmi.n	800bb44 <scroll_area_into_view+0x1a8>
 800bb3c:	43eb      	mvns	r3, r5
 800bb3e:	17db      	asrs	r3, r3, #31
 800bb40:	401d      	ands	r5, r3
 800bb42:	b22d      	sxth	r5, r5
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 800bb44:	2308      	movs	r3, #8
 800bb46:	9a01      	ldr	r2, [sp, #4]
 800bb48:	4213      	tst	r3, r2
 800bb4a:	d104      	bne.n	800bb56 <scroll_area_into_view+0x1ba>
 800bb4c:	1c2b      	adds	r3, r5, #0
 800bb4e:	2d00      	cmp	r5, #0
 800bb50:	dd00      	ble.n	800bb54 <scroll_area_into_view+0x1b8>
 800bb52:	2300      	movs	r3, #0
 800bb54:	b21d      	sxth	r5, r3

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800bb56:	2200      	movs	r2, #0
 800bb58:	5eb3      	ldrsh	r3, [r6, r2]
 800bb5a:	9a02      	ldr	r2, [sp, #8]
 800bb5c:	2a00      	cmp	r2, #0
 800bb5e:	d013      	beq.n	800bb88 <scroll_area_into_view+0x1ec>
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800bb60:	8872      	ldrh	r2, [r6, #2]
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800bb62:	4443      	add	r3, r8
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800bb64:	1952      	adds	r2, r2, r5
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800bb66:	b21b      	sxth	r3, r3
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800bb68:	b212      	sxth	r2, r2
 800bb6a:	8033      	strh	r3, [r6, #0]
 800bb6c:	8072      	strh	r2, [r6, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800bb6e:	4641      	mov	r1, r8
 800bb70:	002a      	movs	r2, r5
 800bb72:	0020      	movs	r0, r4
 800bb74:	9b02      	ldr	r3, [sp, #8]
 800bb76:	f7ff fd5f 	bl	800b638 <lv_obj_scroll_by>
}
 800bb7a:	b00b      	add	sp, #44	; 0x2c
 800bb7c:	bcf0      	pop	{r4, r5, r6, r7}
 800bb7e:	46bb      	mov	fp, r7
 800bb80:	46b2      	mov	sl, r6
 800bb82:	46a9      	mov	r9, r5
 800bb84:	46a0      	mov	r8, r4
 800bb86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800bb88:	2102      	movs	r1, #2
 800bb8a:	5e72      	ldrsh	r2, [r6, r1]
 800bb8c:	e7ed      	b.n	800bb6a <scroll_area_into_view+0x1ce>
    if(obj->spec_attr == NULL) return 0;
 800bb8e:	68a2      	ldr	r2, [r4, #8]
    else if(top_diff > 0) {
 800bb90:	2d00      	cmp	r5, #0
 800bb92:	d100      	bne.n	800bb96 <scroll_area_into_view+0x1fa>
 800bb94:	e763      	b.n	800ba5e <scroll_area_into_view+0xc2>
    if(obj->spec_attr == NULL) return 0;
 800bb96:	2a00      	cmp	r2, #0
 800bb98:	d047      	beq.n	800bc2a <scroll_area_into_view+0x28e>
    return -obj->spec_attr->scroll.y;
 800bb9a:	8a53      	ldrh	r3, [r2, #18]
 800bb9c:	425b      	negs	r3, r3
        if(st - y_scroll < 0) y_scroll = 0;
 800bb9e:	b21b      	sxth	r3, r3
 800bba0:	1b5b      	subs	r3, r3, r5
 800bba2:	43db      	mvns	r3, r3
 800bba4:	17db      	asrs	r3, r3, #31
 800bba6:	401d      	ands	r5, r3
    switch(snap_y) {
 800bba8:	465b      	mov	r3, fp
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d000      	beq.n	800bbb0 <scroll_area_into_view+0x214>
 800bbae:	e75a      	b.n	800ba66 <scroll_area_into_view+0xca>
            y_scroll += snap_goal - act;
 800bbb0:	9b05      	ldr	r3, [sp, #20]
 800bbb2:	8ae5      	ldrh	r5, [r4, #22]
 800bbb4:	1aed      	subs	r5, r5, r3
 800bbb6:	464b      	mov	r3, r9
 800bbb8:	88db      	ldrh	r3, [r3, #6]
 800bbba:	1aed      	subs	r5, r5, r3
 800bbbc:	b22d      	sxth	r5, r5
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800bbbe:	2a00      	cmp	r2, #0
 800bbc0:	d000      	beq.n	800bbc4 <scroll_area_into_view+0x228>
 800bbc2:	e759      	b.n	800ba78 <scroll_area_into_view+0xdc>
    else return LV_SCROLL_SNAP_NONE;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	4699      	mov	r9, r3
 800bbc8:	e75d      	b.n	800ba86 <scroll_area_into_view+0xea>
    else if(right_diff > 0) {
 800bbca:	2900      	cmp	r1, #0
 800bbcc:	dc00      	bgt.n	800bbd0 <scroll_area_into_view+0x234>
 800bbce:	e781      	b.n	800bad4 <scroll_area_into_view+0x138>
        x_scroll = -right_diff;
 800bbd0:	4662      	mov	r2, ip
 800bbd2:	1ac3      	subs	r3, r0, r3
 800bbd4:	1a9b      	subs	r3, r3, r2
 800bbd6:	b21b      	sxth	r3, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800bbd8:	2216      	movs	r2, #22
 800bbda:	2100      	movs	r1, #0
 800bbdc:	0020      	movs	r0, r4
 800bbde:	4698      	mov	r8, r3
 800bbe0:	f000 fcf0 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800bbe4:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800bbe6:	2801      	cmp	r0, #1
 800bbe8:	d000      	beq.n	800bbec <scroll_area_into_view+0x250>
 800bbea:	e08e      	b.n	800bd0a <scroll_area_into_view+0x36e>
        if(obj->spec_attr == NULL) return 0;
 800bbec:	68a3      	ldr	r3, [r4, #8]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d100      	bne.n	800bbf4 <scroll_area_into_view+0x258>
 800bbf2:	e76f      	b.n	800bad4 <scroll_area_into_view+0x138>
        return obj->spec_attr->scroll.x;
 800bbf4:	2010      	movs	r0, #16
 800bbf6:	5e18      	ldrsh	r0, [r3, r0]
 800bbf8:	e08a      	b.n	800bd10 <scroll_area_into_view+0x374>
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	210a      	movs	r1, #10
 800bbfe:	0020      	movs	r0, r4
 800bc00:	f7f9 f816 	bl	8004c30 <lv_event_send>
        if(res != LV_RES_OK) return;
 800bc04:	2801      	cmp	r0, #1
 800bc06:	d1b8      	bne.n	800bb7a <scroll_area_into_view+0x1de>
 800bc08:	e782      	b.n	800bb10 <scroll_area_into_view+0x174>
    else if(bottom_diff > 0) {
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	dc00      	bgt.n	800bc10 <scroll_area_into_view+0x274>
 800bc0e:	e724      	b.n	800ba5a <scroll_area_into_view+0xbe>
        y_scroll = -bottom_diff;
 800bc10:	9b08      	ldr	r3, [sp, #32]
 800bc12:	9a09      	ldr	r2, [sp, #36]	; 0x24
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 800bc14:	0020      	movs	r0, r4
        y_scroll = -bottom_diff;
 800bc16:	1a9d      	subs	r5, r3, r2
 800bc18:	9b07      	ldr	r3, [sp, #28]
 800bc1a:	1aed      	subs	r5, r5, r3
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 800bc1c:	f7fe ffd2 	bl	800abc4 <lv_obj_get_scroll_bottom>
        y_scroll = -bottom_diff;
 800bc20:	b22d      	sxth	r5, r5
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800bc22:	68a2      	ldr	r2, [r4, #8]
        if(sb + y_scroll < 0) y_scroll = 0;
 800bc24:	42e8      	cmn	r0, r5
 800bc26:	d400      	bmi.n	800bc2a <scroll_area_into_view+0x28e>
 800bc28:	e719      	b.n	800ba5e <scroll_area_into_view+0xc2>
        if(st - y_scroll < 0) y_scroll = 0;
 800bc2a:	2500      	movs	r5, #0
 800bc2c:	e717      	b.n	800ba5e <scroll_area_into_view+0xc2>
    else if(left_diff > 0) {
 800bc2e:	4643      	mov	r3, r8
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d100      	bne.n	800bc36 <scroll_area_into_view+0x29a>
 800bc34:	e74e      	b.n	800bad4 <scroll_area_into_view+0x138>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800bc36:	2216      	movs	r2, #22
 800bc38:	2100      	movs	r1, #0
 800bc3a:	0020      	movs	r0, r4
 800bc3c:	f000 fcc2 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800bc40:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800bc42:	2801      	cmp	r0, #1
 800bc44:	d069      	beq.n	800bd1a <scroll_area_into_view+0x37e>
        if(obj->spec_attr == NULL) return 0;
 800bc46:	68a3      	ldr	r3, [r4, #8]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d100      	bne.n	800bc4e <scroll_area_into_view+0x2b2>
 800bc4c:	e742      	b.n	800bad4 <scroll_area_into_view+0x138>
        return -obj->spec_attr->scroll.x;
 800bc4e:	8a18      	ldrh	r0, [r3, #16]
 800bc50:	4240      	negs	r0, r0
 800bc52:	b200      	sxth	r0, r0
        if(sl - x_scroll < 0) x_scroll = 0;
 800bc54:	4643      	mov	r3, r8
 800bc56:	1ac0      	subs	r0, r0, r3
 800bc58:	d500      	bpl.n	800bc5c <scroll_area_into_view+0x2c0>
 800bc5a:	e73b      	b.n	800bad4 <scroll_area_into_view+0x138>
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 800bc5c:	0020      	movs	r0, r4
 800bc5e:	f7fd f83b 	bl	8008cd8 <lv_obj_get_width>
    switch(snap_x) {
 800bc62:	464b      	mov	r3, r9
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d000      	beq.n	800bc6a <scroll_area_into_view+0x2ce>
 800bc68:	e73d      	b.n	800bae6 <scroll_area_into_view+0x14a>
            x_scroll += snap_goal - act;
 800bc6a:	465b      	mov	r3, fp
 800bc6c:	8aa0      	ldrh	r0, [r4, #20]
 800bc6e:	1ac0      	subs	r0, r0, r3
 800bc70:	88bb      	ldrh	r3, [r7, #4]
 800bc72:	1ac0      	subs	r0, r0, r3
 800bc74:	b203      	sxth	r3, r0
 800bc76:	4698      	mov	r8, r3
            break;
 800bc78:	e73b      	b.n	800baf2 <scroll_area_into_view+0x156>
            x_scroll += snap_goal - act;
 800bc7a:	8a20      	ldrh	r0, [r4, #16]
 800bc7c:	883b      	ldrh	r3, [r7, #0]
 800bc7e:	4450      	add	r0, sl
 800bc80:	1ac0      	subs	r0, r0, r3
 800bc82:	b203      	sxth	r3, r0
 800bc84:	4698      	mov	r8, r3
            break;
 800bc86:	e734      	b.n	800baf2 <scroll_area_into_view+0x156>
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 800bc88:	9904      	ldr	r1, [sp, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bc8a:	464b      	mov	r3, r9
 800bc8c:	468c      	mov	ip, r1
 800bc8e:	4649      	mov	r1, r9
 800bc90:	9805      	ldr	r0, [sp, #20]
 800bc92:	9d06      	ldr	r5, [sp, #24]
 800bc94:	4460      	add	r0, ip
 800bc96:	1a28      	subs	r0, r5, r0
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 800bc98:	b200      	sxth	r0, r0
 800bc9a:	0fc5      	lsrs	r5, r0, #31
 800bc9c:	182d      	adds	r5, r5, r0
 800bc9e:	88c9      	ldrh	r1, [r1, #6]
            y_scroll += snap_goal - act;
 800bca0:	8a60      	ldrh	r0, [r4, #18]
 800bca2:	885b      	ldrh	r3, [r3, #2]
 800bca4:	4460      	add	r0, ip
 800bca6:	3101      	adds	r1, #1
 800bca8:	1ac0      	subs	r0, r0, r3
 800bcaa:	1acb      	subs	r3, r1, r3
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 800bcac:	106d      	asrs	r5, r5, #1
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 800bcae:	b21b      	sxth	r3, r3
            y_scroll += snap_goal - act;
 800bcb0:	1828      	adds	r0, r5, r0
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 800bcb2:	0fdd      	lsrs	r5, r3, #31
 800bcb4:	18eb      	adds	r3, r5, r3
 800bcb6:	105b      	asrs	r3, r3, #1
            y_scroll += snap_goal - act;
 800bcb8:	1ac0      	subs	r0, r0, r3
 800bcba:	b205      	sxth	r5, r0
            break;
 800bcbc:	e6d9      	b.n	800ba72 <scroll_area_into_view+0xd6>
            y_scroll += snap_goal - act;
 800bcbe:	9b04      	ldr	r3, [sp, #16]
 800bcc0:	8a65      	ldrh	r5, [r4, #18]
 800bcc2:	469c      	mov	ip, r3
 800bcc4:	464b      	mov	r3, r9
 800bcc6:	885b      	ldrh	r3, [r3, #2]
 800bcc8:	4465      	add	r5, ip
 800bcca:	1aed      	subs	r5, r5, r3
 800bccc:	b22d      	sxth	r5, r5
            break;
 800bcce:	e6d0      	b.n	800ba72 <scroll_area_into_view+0xd6>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bcd0:	88bb      	ldrh	r3, [r7, #4]
 800bcd2:	883a      	ldrh	r2, [r7, #0]
            x_scroll += snap_goal - act;
 800bcd4:	8a21      	ldrh	r1, [r4, #16]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	1a9b      	subs	r3, r3, r2
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 800bcda:	b21b      	sxth	r3, r3
            x_scroll += snap_goal - act;
 800bcdc:	4451      	add	r1, sl
 800bcde:	1a89      	subs	r1, r1, r2
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 800bce0:	0fda      	lsrs	r2, r3, #31
 800bce2:	18d2      	adds	r2, r2, r3
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 800bce4:	4653      	mov	r3, sl
 800bce6:	445b      	add	r3, fp
 800bce8:	1ac0      	subs	r0, r0, r3
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 800bcea:	b200      	sxth	r0, r0
 800bcec:	0fc3      	lsrs	r3, r0, #31
 800bcee:	1818      	adds	r0, r3, r0
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 800bcf0:	1052      	asrs	r2, r2, #1
            x_scroll += snap_goal - act;
 800bcf2:	1a8a      	subs	r2, r1, r2
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 800bcf4:	1040      	asrs	r0, r0, #1
            x_scroll += snap_goal - act;
 800bcf6:	1810      	adds	r0, r2, r0
 800bcf8:	b203      	sxth	r3, r0
 800bcfa:	4698      	mov	r8, r3
            break;
 800bcfc:	e6f9      	b.n	800baf2 <scroll_area_into_view+0x156>
    else return LV_DIR_ALL;
 800bcfe:	230f      	movs	r3, #15
 800bd00:	9301      	str	r3, [sp, #4]
    else return LV_SCROLL_SNAP_NONE;
 800bd02:	2300      	movs	r3, #0
    else area_tmp = area;
 800bd04:	46b9      	mov	r9, r7
    else return LV_SCROLL_SNAP_NONE;
 800bd06:	469b      	mov	fp, r3
 800bd08:	e66e      	b.n	800b9e8 <scroll_area_into_view+0x4c>
 800bd0a:	0020      	movs	r0, r4
 800bd0c:	f7fe fe38 	bl	800a980 <lv_obj_get_scroll_right.part.0>
        if(sr + x_scroll < 0) x_scroll = 0;
 800bd10:	4643      	mov	r3, r8
 800bd12:	42d8      	cmn	r0, r3
 800bd14:	d400      	bmi.n	800bd18 <scroll_area_into_view+0x37c>
 800bd16:	e6df      	b.n	800bad8 <scroll_area_into_view+0x13c>
 800bd18:	e6dc      	b.n	800bad4 <scroll_area_into_view+0x138>
 800bd1a:	0020      	movs	r0, r4
 800bd1c:	f7fe fdc4 	bl	800a8a8 <lv_obj_get_scroll_left.part.0>
 800bd20:	e798      	b.n	800bc54 <scroll_area_into_view+0x2b8>
 800bd22:	46c0      	nop			; (mov r8, r8)
 800bd24:	0800aabd 	.word	0x0800aabd
 800bd28:	0800aa69 	.word	0x0800aa69

0800bd2c <lv_obj_scroll_to>:
{
 800bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2e:	0004      	movs	r4, r0
 800bd30:	000f      	movs	r7, r1
    lv_anim_del(obj, scroll_x_anim);
 800bd32:	4916      	ldr	r1, [pc, #88]	; (800bd8c <lv_obj_scroll_to+0x60>)
{
 800bd34:	001d      	movs	r5, r3
 800bd36:	0016      	movs	r6, r2
    lv_anim_del(obj, scroll_x_anim);
 800bd38:	f008 f8b0 	bl	8013e9c <lv_anim_del>
    if(obj->spec_attr == NULL) return 0;
 800bd3c:	68a3      	ldr	r3, [r4, #8]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d021      	beq.n	800bd86 <lv_obj_scroll_to+0x5a>
    return -obj->spec_attr->scroll.x;
 800bd42:	8a1b      	ldrh	r3, [r3, #16]
 800bd44:	425b      	negs	r3, r3
 800bd46:	b299      	uxth	r1, r3
    lv_coord_t diff = -x + scroll_x;
 800bd48:	1bc9      	subs	r1, r1, r7
 800bd4a:	b209      	sxth	r1, r1
    if(dx == 0 && dy == 0) return;
 800bd4c:	2900      	cmp	r1, #0
 800bd4e:	d004      	beq.n	800bd5a <lv_obj_scroll_to+0x2e>
 800bd50:	002b      	movs	r3, r5
 800bd52:	2200      	movs	r2, #0
 800bd54:	0020      	movs	r0, r4
 800bd56:	f7ff fd27 	bl	800b7a8 <lv_obj_scroll_by_bounded.part.0>
    lv_anim_del(obj, scroll_y_anim);
 800bd5a:	0020      	movs	r0, r4
 800bd5c:	490c      	ldr	r1, [pc, #48]	; (800bd90 <lv_obj_scroll_to+0x64>)
 800bd5e:	f008 f89d 	bl	8013e9c <lv_anim_del>
    if(obj->spec_attr == NULL) return 0;
 800bd62:	68a3      	ldr	r3, [r4, #8]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00c      	beq.n	800bd82 <lv_obj_scroll_to+0x56>
    return -obj->spec_attr->scroll.y;
 800bd68:	8a59      	ldrh	r1, [r3, #18]
 800bd6a:	4249      	negs	r1, r1
 800bd6c:	b28a      	uxth	r2, r1
    lv_coord_t diff = -y + scroll_y;
 800bd6e:	1b92      	subs	r2, r2, r6
 800bd70:	b212      	sxth	r2, r2
    if(dx == 0 && dy == 0) return;
 800bd72:	2a00      	cmp	r2, #0
 800bd74:	d004      	beq.n	800bd80 <lv_obj_scroll_to+0x54>
 800bd76:	002b      	movs	r3, r5
 800bd78:	2100      	movs	r1, #0
 800bd7a:	0020      	movs	r0, r4
 800bd7c:	f7ff fd14 	bl	800b7a8 <lv_obj_scroll_by_bounded.part.0>
}
 800bd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd82:	2200      	movs	r2, #0
 800bd84:	e7f3      	b.n	800bd6e <lv_obj_scroll_to+0x42>
 800bd86:	2100      	movs	r1, #0
 800bd88:	e7de      	b.n	800bd48 <lv_obj_scroll_to+0x1c>
 800bd8a:	46c0      	nop			; (mov r8, r8)
 800bd8c:	0800aa69 	.word	0x0800aa69
 800bd90:	0800aabd 	.word	0x0800aabd

0800bd94 <lv_obj_scroll_to_x>:
{
 800bd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd96:	0005      	movs	r5, r0
 800bd98:	000e      	movs	r6, r1
    lv_anim_del(obj, scroll_x_anim);
 800bd9a:	490b      	ldr	r1, [pc, #44]	; (800bdc8 <lv_obj_scroll_to_x+0x34>)
{
 800bd9c:	0017      	movs	r7, r2
    lv_anim_del(obj, scroll_x_anim);
 800bd9e:	f008 f87d 	bl	8013e9c <lv_anim_del>
    if(obj->spec_attr == NULL) return 0;
 800bda2:	68ab      	ldr	r3, [r5, #8]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00c      	beq.n	800bdc2 <lv_obj_scroll_to_x+0x2e>
    return -obj->spec_attr->scroll.x;
 800bda8:	8a1c      	ldrh	r4, [r3, #16]
 800bdaa:	4264      	negs	r4, r4
 800bdac:	b2a1      	uxth	r1, r4
    lv_coord_t diff = -x + scroll_x;
 800bdae:	1b89      	subs	r1, r1, r6
 800bdb0:	b209      	sxth	r1, r1
    if(dx == 0 && dy == 0) return;
 800bdb2:	2900      	cmp	r1, #0
 800bdb4:	d004      	beq.n	800bdc0 <lv_obj_scroll_to_x+0x2c>
 800bdb6:	003b      	movs	r3, r7
 800bdb8:	2200      	movs	r2, #0
 800bdba:	0028      	movs	r0, r5
 800bdbc:	f7ff fcf4 	bl	800b7a8 <lv_obj_scroll_by_bounded.part.0>
}
 800bdc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	e7f3      	b.n	800bdae <lv_obj_scroll_to_x+0x1a>
 800bdc6:	46c0      	nop			; (mov r8, r8)
 800bdc8:	0800aa69 	.word	0x0800aa69

0800bdcc <lv_obj_scroll_to_y>:
{
 800bdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdce:	0005      	movs	r5, r0
 800bdd0:	000e      	movs	r6, r1
    lv_anim_del(obj, scroll_y_anim);
 800bdd2:	490b      	ldr	r1, [pc, #44]	; (800be00 <lv_obj_scroll_to_y+0x34>)
{
 800bdd4:	0017      	movs	r7, r2
    lv_anim_del(obj, scroll_y_anim);
 800bdd6:	f008 f861 	bl	8013e9c <lv_anim_del>
    if(obj->spec_attr == NULL) return 0;
 800bdda:	68ab      	ldr	r3, [r5, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00c      	beq.n	800bdfa <lv_obj_scroll_to_y+0x2e>
    return -obj->spec_attr->scroll.y;
 800bde0:	8a5c      	ldrh	r4, [r3, #18]
 800bde2:	4264      	negs	r4, r4
 800bde4:	b2a2      	uxth	r2, r4
    lv_coord_t diff = -y + scroll_y;
 800bde6:	1b92      	subs	r2, r2, r6
 800bde8:	b212      	sxth	r2, r2
    if(dx == 0 && dy == 0) return;
 800bdea:	2a00      	cmp	r2, #0
 800bdec:	d004      	beq.n	800bdf8 <lv_obj_scroll_to_y+0x2c>
 800bdee:	003b      	movs	r3, r7
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	0028      	movs	r0, r5
 800bdf4:	f7ff fcd8 	bl	800b7a8 <lv_obj_scroll_by_bounded.part.0>
}
 800bdf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	e7f3      	b.n	800bde6 <lv_obj_scroll_to_y+0x1a>
 800bdfe:	46c0      	nop			; (mov r8, r8)
 800be00:	0800aabd 	.word	0x0800aabd

0800be04 <lv_obj_scroll_to_view_recursive>:
{
 800be04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be06:	0005      	movs	r5, r0
 800be08:	b083      	sub	sp, #12
 800be0a:	000e      	movs	r6, r1
    lv_obj_update_layout(obj);
 800be0c:	f7fe fcc2 	bl	800a794 <lv_obj_update_layout>
    lv_point_t p = {0, 0};
 800be10:	2300      	movs	r3, #0
    lv_obj_t * parent = lv_obj_get_parent(child);
 800be12:	0028      	movs	r0, r5
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 800be14:	002f      	movs	r7, r5
    lv_point_t p = {0, 0};
 800be16:	9301      	str	r3, [sp, #4]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800be18:	f002 f800 	bl	800de1c <lv_obj_get_parent>
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 800be1c:	3710      	adds	r7, #16
    lv_obj_t * parent = lv_obj_get_parent(child);
 800be1e:	1e04      	subs	r4, r0, #0
    while(parent) {
 800be20:	d00b      	beq.n	800be3a <lv_obj_scroll_to_view_recursive+0x36>
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 800be22:	0029      	movs	r1, r5
 800be24:	0033      	movs	r3, r6
 800be26:	0038      	movs	r0, r7
 800be28:	aa01      	add	r2, sp, #4
 800be2a:	f7ff fdb7 	bl	800b99c <scroll_area_into_view>
        parent = lv_obj_get_parent(parent);
 800be2e:	0020      	movs	r0, r4
 800be30:	f001 fff4 	bl	800de1c <lv_obj_get_parent>
 800be34:	0025      	movs	r5, r4
 800be36:	1e04      	subs	r4, r0, #0
    while(parent) {
 800be38:	d1f3      	bne.n	800be22 <lv_obj_scroll_to_view_recursive+0x1e>
}
 800be3a:	b003      	add	sp, #12
 800be3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be3e:	46c0      	nop			; (mov r8, r8)

0800be40 <_lv_obj_scroll_by_raw>:
{
 800be40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(x == 0 && y == 0) return LV_RES_OK;
 800be42:	000b      	movs	r3, r1
{
 800be44:	0004      	movs	r4, r0
 800be46:	000d      	movs	r5, r1
 800be48:	0016      	movs	r6, r2
    if(x == 0 && y == 0) return LV_RES_OK;
 800be4a:	2701      	movs	r7, #1
 800be4c:	4313      	orrs	r3, r2
 800be4e:	d101      	bne.n	800be54 <_lv_obj_scroll_by_raw+0x14>
}
 800be50:	0038      	movs	r0, r7
 800be52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_obj_allocate_spec_attr(obj);
 800be54:	f7fc f87a 	bl	8007f4c <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll.x += x;
 800be58:	68a3      	ldr	r3, [r4, #8]
    lv_obj_move_children_by(obj, x, y, true);
 800be5a:	0029      	movs	r1, r5
    obj->spec_attr->scroll.x += x;
 800be5c:	8a1a      	ldrh	r2, [r3, #16]
    lv_obj_move_children_by(obj, x, y, true);
 800be5e:	0020      	movs	r0, r4
    obj->spec_attr->scroll.x += x;
 800be60:	1952      	adds	r2, r2, r5
 800be62:	821a      	strh	r2, [r3, #16]
    obj->spec_attr->scroll.y += y;
 800be64:	8a5a      	ldrh	r2, [r3, #18]
 800be66:	1992      	adds	r2, r2, r6
 800be68:	825a      	strh	r2, [r3, #18]
    lv_obj_move_children_by(obj, x, y, true);
 800be6a:	2301      	movs	r3, #1
 800be6c:	0032      	movs	r2, r6
 800be6e:	f7fd f805 	bl	8008e7c <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 800be72:	2200      	movs	r2, #0
 800be74:	210b      	movs	r1, #11
 800be76:	0020      	movs	r0, r4
 800be78:	f7f8 feda 	bl	8004c30 <lv_event_send>
 800be7c:	0007      	movs	r7, r0
    if(res != LV_RES_OK) return res;
 800be7e:	2801      	cmp	r0, #1
 800be80:	d1e6      	bne.n	800be50 <_lv_obj_scroll_by_raw+0x10>
    lv_obj_invalidate(obj);
 800be82:	0020      	movs	r0, r4
 800be84:	f7fd fac6 	bl	8009414 <lv_obj_invalidate>
    return LV_RES_OK;
 800be88:	e7e2      	b.n	800be50 <_lv_obj_scroll_by_raw+0x10>
 800be8a:	46c0      	nop			; (mov r8, r8)

0800be8c <lv_obj_get_scrollbar_area>:
{
 800be8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_area_set(hor_area, 0, 0, -1, -1);
 800be8e:	2401      	movs	r4, #1
{
 800be90:	000e      	movs	r6, r1
 800be92:	0017      	movs	r7, r2
 800be94:	0005      	movs	r5, r0
 800be96:	b083      	sub	sp, #12
    lv_area_set(hor_area, 0, 0, -1, -1);
 800be98:	4264      	negs	r4, r4
 800be9a:	0023      	movs	r3, r4
 800be9c:	2200      	movs	r2, #0
 800be9e:	2100      	movs	r1, #0
 800bea0:	0030      	movs	r0, r6
 800bea2:	9400      	str	r4, [sp, #0]
 800bea4:	f008 f99c 	bl	80141e0 <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 800bea8:	2100      	movs	r1, #0
 800beaa:	0038      	movs	r0, r7
 800beac:	0023      	movs	r3, r4
 800beae:	2200      	movs	r2, #0
 800beb0:	9400      	str	r4, [sp, #0]
 800beb2:	f008 f995 	bl	80141e0 <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 800beb6:	2110      	movs	r1, #16
 800beb8:	0028      	movs	r0, r5
 800beba:	f7fc f82b 	bl	8007f14 <lv_obj_has_flag>
 800bebe:	2800      	cmp	r0, #0
 800bec0:	d004      	beq.n	800becc <lv_obj_get_scrollbar_area+0x40>
 800bec2:	003a      	movs	r2, r7
 800bec4:	0031      	movs	r1, r6
 800bec6:	0028      	movs	r0, r5
 800bec8:	f7fe fef0 	bl	800acac <lv_obj_get_scrollbar_area.part.0>
}
 800becc:	b003      	add	sp, #12
 800bece:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bed0 <lv_obj_scrollbar_invalidate>:
{
 800bed0:	b530      	push	{r4, r5, lr}
    lv_area_set(hor_area, 0, 0, -1, -1);
 800bed2:	2501      	movs	r5, #1
{
 800bed4:	0004      	movs	r4, r0
 800bed6:	b087      	sub	sp, #28
    lv_area_set(hor_area, 0, 0, -1, -1);
 800bed8:	426d      	negs	r5, r5
 800beda:	002b      	movs	r3, r5
 800bedc:	2200      	movs	r2, #0
 800bede:	2100      	movs	r1, #0
 800bee0:	a802      	add	r0, sp, #8
 800bee2:	9500      	str	r5, [sp, #0]
 800bee4:	f008 f97c 	bl	80141e0 <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 800bee8:	2100      	movs	r1, #0
 800beea:	a804      	add	r0, sp, #16
 800beec:	002b      	movs	r3, r5
 800beee:	2200      	movs	r2, #0
 800bef0:	9500      	str	r5, [sp, #0]
 800bef2:	f008 f975 	bl	80141e0 <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 800bef6:	2110      	movs	r1, #16
 800bef8:	0020      	movs	r0, r4
 800befa:	f7fc f80b 	bl	8007f14 <lv_obj_has_flag>
 800befe:	2800      	cmp	r0, #0
 800bf00:	d004      	beq.n	800bf0c <lv_obj_scrollbar_invalidate+0x3c>
 800bf02:	0020      	movs	r0, r4
 800bf04:	aa04      	add	r2, sp, #16
 800bf06:	a902      	add	r1, sp, #8
 800bf08:	f7fe fed0 	bl	800acac <lv_obj_get_scrollbar_area.part.0>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800bf0c:	a802      	add	r0, sp, #8
 800bf0e:	f008 f977 	bl	8014200 <lv_area_get_size>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	d104      	bne.n	800bf20 <lv_obj_scrollbar_invalidate+0x50>
 800bf16:	a804      	add	r0, sp, #16
 800bf18:	f008 f972 	bl	8014200 <lv_area_get_size>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	d009      	beq.n	800bf34 <lv_obj_scrollbar_invalidate+0x64>
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 800bf20:	a802      	add	r0, sp, #8
 800bf22:	f008 f96d 	bl	8014200 <lv_area_get_size>
 800bf26:	2800      	cmp	r0, #0
 800bf28:	d106      	bne.n	800bf38 <lv_obj_scrollbar_invalidate+0x68>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 800bf2a:	a804      	add	r0, sp, #16
 800bf2c:	f008 f968 	bl	8014200 <lv_area_get_size>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d10a      	bne.n	800bf4a <lv_obj_scrollbar_invalidate+0x7a>
}
 800bf34:	b007      	add	sp, #28
 800bf36:	bd30      	pop	{r4, r5, pc}
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 800bf38:	0020      	movs	r0, r4
 800bf3a:	a902      	add	r1, sp, #8
 800bf3c:	f7fd fa48 	bl	80093d0 <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 800bf40:	a804      	add	r0, sp, #16
 800bf42:	f008 f95d 	bl	8014200 <lv_area_get_size>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d0f4      	beq.n	800bf34 <lv_obj_scrollbar_invalidate+0x64>
 800bf4a:	0020      	movs	r0, r4
 800bf4c:	a904      	add	r1, sp, #16
 800bf4e:	f7fd fa3f 	bl	80093d0 <lv_obj_invalidate_area>
 800bf52:	e7ef      	b.n	800bf34 <lv_obj_scrollbar_invalidate+0x64>

0800bf54 <lv_obj_readjust_scroll>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 800bf54:	6882      	ldr	r2, [r0, #8]
{
 800bf56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf58:	0004      	movs	r4, r0
 800bf5a:	000d      	movs	r5, r1
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 800bf5c:	2a00      	cmp	r2, #0
 800bf5e:	d100      	bne.n	800bf62 <lv_obj_readjust_scroll+0xe>
 800bf60:	e073      	b.n	800c04a <lv_obj_readjust_scroll+0xf6>
 800bf62:	7e10      	ldrb	r0, [r2, #24]
 800bf64:	0680      	lsls	r0, r0, #26
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 800bf66:	0f80      	lsrs	r0, r0, #30
 800bf68:	d109      	bne.n	800bf7e <lv_obj_readjust_scroll+0x2a>
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800bf6a:	0020      	movs	r0, r4
    return -obj->spec_attr->scroll.y;
 800bf6c:	2312      	movs	r3, #18
 800bf6e:	5ed6      	ldrsh	r6, [r2, r3]
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800bf70:	f7fe fe28 	bl	800abc4 <lv_obj_get_scroll_bottom>
        if(sb < 0 && st > 0) {
 800bf74:	2800      	cmp	r0, #0
 800bf76:	db2c      	blt.n	800bfd2 <lv_obj_readjust_scroll+0x7e>
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800bf78:	68a2      	ldr	r2, [r4, #8]
 800bf7a:	2a00      	cmp	r2, #0
 800bf7c:	d003      	beq.n	800bf86 <lv_obj_readjust_scroll+0x32>
 800bf7e:	7e12      	ldrb	r2, [r2, #24]
 800bf80:	0712      	lsls	r2, r2, #28
    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 800bf82:	0f92      	lsrs	r2, r2, #30
 800bf84:	d124      	bne.n	800bfd0 <lv_obj_readjust_scroll+0x7c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800bf86:	2216      	movs	r2, #22
 800bf88:	2100      	movs	r1, #0
 800bf8a:	0020      	movs	r0, r4
 800bf8c:	f000 fb1a 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800bf90:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800bf92:	2801      	cmp	r0, #1
 800bf94:	d054      	beq.n	800c040 <lv_obj_readjust_scroll+0xec>
        if(obj->spec_attr == NULL) return 0;
 800bf96:	68a3      	ldr	r3, [r4, #8]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d04f      	beq.n	800c03c <lv_obj_readjust_scroll+0xe8>
        return -obj->spec_attr->scroll.x;
 800bf9c:	8a1e      	ldrh	r6, [r3, #16]
 800bf9e:	4276      	negs	r6, r6
 800bfa0:	b236      	sxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800bfa2:	2216      	movs	r2, #22
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	0020      	movs	r0, r4
 800bfa8:	f000 fb0c 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800bfac:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800bfae:	2801      	cmp	r0, #1
 800bfb0:	d121      	bne.n	800bff6 <lv_obj_readjust_scroll+0xa2>
        if(obj->spec_attr == NULL) return 0;
 800bfb2:	68a3      	ldr	r3, [r4, #8]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d04f      	beq.n	800c058 <lv_obj_readjust_scroll+0x104>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800bfb8:	2216      	movs	r2, #22
 800bfba:	2100      	movs	r1, #0
 800bfbc:	0020      	movs	r0, r4
        return obj->spec_attr->scroll.x;
 800bfbe:	2710      	movs	r7, #16
 800bfc0:	5fdf      	ldrsh	r7, [r3, r7]
 800bfc2:	f000 faff 	bl	800c5c4 <lv_obj_get_style_prop>
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800bfc6:	b2c0      	uxtb	r0, r0
 800bfc8:	2801      	cmp	r0, #1
 800bfca:	d020      	beq.n	800c00e <lv_obj_readjust_scroll+0xba>
            if(sr < 0 && sl > 0) {
 800bfcc:	2f00      	cmp	r7, #0
 800bfce:	db29      	blt.n	800c024 <lv_obj_readjust_scroll+0xd0>
}
 800bfd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return -obj->spec_attr->scroll.y;
 800bfd2:	4276      	negs	r6, r6
 800bfd4:	b236      	sxth	r6, r6
        if(sb < 0 && st > 0) {
 800bfd6:	2e00      	cmp	r6, #0
 800bfd8:	ddce      	ble.n	800bf78 <lv_obj_readjust_scroll+0x24>
            sb = LV_MIN(st, -sb);
 800bfda:	4240      	negs	r0, r0
 800bfdc:	42b0      	cmp	r0, r6
 800bfde:	dd00      	ble.n	800bfe2 <lv_obj_readjust_scroll+0x8e>
 800bfe0:	0030      	movs	r0, r6
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 800bfe2:	b202      	sxth	r2, r0
 800bfe4:	002b      	movs	r3, r5
 800bfe6:	2100      	movs	r1, #0
 800bfe8:	0020      	movs	r0, r4
 800bfea:	f7ff fb25 	bl	800b638 <lv_obj_scroll_by>
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800bfee:	68a2      	ldr	r2, [r4, #8]
 800bff0:	2a00      	cmp	r2, #0
 800bff2:	d1c4      	bne.n	800bf7e <lv_obj_readjust_scroll+0x2a>
 800bff4:	e7c7      	b.n	800bf86 <lv_obj_readjust_scroll+0x32>
 800bff6:	0020      	movs	r0, r4
 800bff8:	f7fe fcc2 	bl	800a980 <lv_obj_get_scroll_right.part.0>
 800bffc:	2216      	movs	r2, #22
 800bffe:	0007      	movs	r7, r0
 800c000:	2100      	movs	r1, #0
 800c002:	0020      	movs	r0, r4
 800c004:	f000 fade 	bl	800c5c4 <lv_obj_get_style_prop>
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800c008:	b2c0      	uxtb	r0, r0
 800c00a:	2801      	cmp	r0, #1
 800c00c:	d1de      	bne.n	800bfcc <lv_obj_readjust_scroll+0x78>
            if(sl < 0 && sr > 0) {
 800c00e:	2e00      	cmp	r6, #0
 800c010:	dade      	bge.n	800bfd0 <lv_obj_readjust_scroll+0x7c>
 800c012:	2f00      	cmp	r7, #0
 800c014:	dddc      	ble.n	800bfd0 <lv_obj_readjust_scroll+0x7c>
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 800c016:	002b      	movs	r3, r5
 800c018:	2200      	movs	r2, #0
 800c01a:	0031      	movs	r1, r6
 800c01c:	0020      	movs	r0, r4
 800c01e:	f7ff fb0b 	bl	800b638 <lv_obj_scroll_by>
}
 800c022:	e7d5      	b.n	800bfd0 <lv_obj_readjust_scroll+0x7c>
            if(sr < 0 && sl > 0) {
 800c024:	2e00      	cmp	r6, #0
 800c026:	ddd3      	ble.n	800bfd0 <lv_obj_readjust_scroll+0x7c>
                sr = LV_MIN(sl, -sr);
 800c028:	427f      	negs	r7, r7
 800c02a:	42b7      	cmp	r7, r6
 800c02c:	dc1a      	bgt.n	800c064 <lv_obj_readjust_scroll+0x110>
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 800c02e:	002b      	movs	r3, r5
 800c030:	2200      	movs	r2, #0
 800c032:	0020      	movs	r0, r4
 800c034:	b239      	sxth	r1, r7
 800c036:	f7ff faff 	bl	800b638 <lv_obj_scroll_by>
 800c03a:	e7c9      	b.n	800bfd0 <lv_obj_readjust_scroll+0x7c>
        if(obj->spec_attr == NULL) return 0;
 800c03c:	2600      	movs	r6, #0
 800c03e:	e7b0      	b.n	800bfa2 <lv_obj_readjust_scroll+0x4e>
 800c040:	0020      	movs	r0, r4
 800c042:	f7fe fc31 	bl	800a8a8 <lv_obj_get_scroll_left.part.0>
 800c046:	0006      	movs	r6, r0
 800c048:	e7ab      	b.n	800bfa2 <lv_obj_readjust_scroll+0x4e>
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800c04a:	f7fe fdbb 	bl	800abc4 <lv_obj_get_scroll_bottom>
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800c04e:	68a2      	ldr	r2, [r4, #8]
 800c050:	2a00      	cmp	r2, #0
 800c052:	d000      	beq.n	800c056 <lv_obj_readjust_scroll+0x102>
 800c054:	e793      	b.n	800bf7e <lv_obj_readjust_scroll+0x2a>
 800c056:	e796      	b.n	800bf86 <lv_obj_readjust_scroll+0x32>
 800c058:	2216      	movs	r2, #22
 800c05a:	2100      	movs	r1, #0
 800c05c:	0020      	movs	r0, r4
 800c05e:	f000 fab1 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800c062:	e7b5      	b.n	800bfd0 <lv_obj_readjust_scroll+0x7c>
                sr = LV_MIN(sl, -sr);
 800c064:	0037      	movs	r7, r6
 800c066:	e7e2      	b.n	800c02e <lv_obj_readjust_scroll+0xda>

0800c068 <get_local_style>:
 * @param obj pointer to an object
 * @param selector OR-ed value of parts and state for which the style should be get
 * @return pointer to the local style
 */
static lv_style_t * get_local_style(lv_obj_t * obj, lv_style_selector_t selector)
{
 800c068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c06a:	464f      	mov	r7, r9
 800c06c:	4646      	mov	r6, r8
 800c06e:	46d6      	mov	lr, sl
 800c070:	b5c0      	push	{r6, r7, lr}
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800c072:	8bc7      	ldrh	r7, [r0, #30]
        if(obj->styles[i].is_local &&
 800c074:	68c3      	ldr	r3, [r0, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800c076:	05ff      	lsls	r7, r7, #23
{
 800c078:	0006      	movs	r6, r0
 800c07a:	000d      	movs	r5, r1
        if(obj->styles[i].is_local &&
 800c07c:	469c      	mov	ip, r3
    for(i = 0; i < obj->style_cnt; i++) {
 800c07e:	0ebf      	lsrs	r7, r7, #26
 800c080:	d063      	beq.n	800c14a <get_local_style+0xe2>
 800c082:	2200      	movs	r2, #0
        if(obj->styles[i].is_local &&
 800c084:	2001      	movs	r0, #1
 800c086:	79d9      	ldrb	r1, [r3, #7]
 800c088:	4208      	tst	r0, r1
 800c08a:	d004      	beq.n	800c096 <get_local_style+0x2e>
           obj->styles[i].selector == selector) {
 800c08c:	6859      	ldr	r1, [r3, #4]
 800c08e:	020c      	lsls	r4, r1, #8
 800c090:	0a24      	lsrs	r4, r4, #8
        if(obj->styles[i].is_local &&
 800c092:	42ac      	cmp	r4, r5
 800c094:	d057      	beq.n	800c146 <get_local_style+0xde>
    for(i = 0; i < obj->style_cnt; i++) {
 800c096:	3201      	adds	r2, #1
 800c098:	3308      	adds	r3, #8
 800c09a:	42ba      	cmp	r2, r7
 800c09c:	d3f3      	bcc.n	800c086 <get_local_style+0x1e>
            return obj->styles[i].style;
        }
    }

    obj->style_cnt++;
 800c09e:	233f      	movs	r3, #63	; 0x3f
 800c0a0:	3701      	adds	r7, #1
 800c0a2:	401f      	ands	r7, r3
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c0a4:	00f9      	lsls	r1, r7, #3
    obj->style_cnt++;
 800c0a6:	8bf3      	ldrh	r3, [r6, #30]
 800c0a8:	4a29      	ldr	r2, [pc, #164]	; (800c150 <get_local_style+0xe8>)
 800c0aa:	00ff      	lsls	r7, r7, #3
 800c0ac:	4013      	ands	r3, r2
 800c0ae:	431f      	orrs	r7, r3
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c0b0:	4660      	mov	r0, ip
    obj->style_cnt++;
 800c0b2:	83f7      	strh	r7, [r6, #30]
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c0b4:	f008 ff22 	bl	8014efc <lv_mem_realloc>
 800c0b8:	4682      	mov	sl, r0
 800c0ba:	60f0      	str	r0, [r6, #12]
    LV_ASSERT_MALLOC(obj->styles);
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d041      	beq.n	800c144 <get_local_style+0xdc>

    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800c0c0:	8bf1      	ldrh	r1, [r6, #30]
 800c0c2:	05c9      	lsls	r1, r1, #23
 800c0c4:	0e89      	lsrs	r1, r1, #26
 800c0c6:	1e4c      	subs	r4, r1, #1
 800c0c8:	2901      	cmp	r1, #1
 800c0ca:	d01c      	beq.n	800c106 <get_local_style+0x9e>
 800c0cc:	4b21      	ldr	r3, [pc, #132]	; (800c154 <get_local_style+0xec>)
 800c0ce:	00cf      	lsls	r7, r1, #3
 800c0d0:	18cb      	adds	r3, r1, r3
 800c0d2:	427a      	negs	r2, r7
 800c0d4:	3101      	adds	r1, #1
 800c0d6:	4691      	mov	r9, r2
 800c0d8:	00ca      	lsls	r2, r1, #3
 800c0da:	4690      	mov	r8, r2
        /*Copy only normal styles (not local and transition).
         *The new local style will be added as the last local style*/
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 800c0dc:	2203      	movs	r2, #3
 800c0de:	00db      	lsls	r3, r3, #3
 800c0e0:	4694      	mov	ip, r2
 800c0e2:	4453      	add	r3, sl
 800c0e4:	e009      	b.n	800c0fa <get_local_style+0x92>
        obj->styles[i] = obj->styles[i - 1];
 800c0e6:	464a      	mov	r2, r9
 800c0e8:	0018      	movs	r0, r3
 800c0ea:	18d2      	adds	r2, r2, r3
 800c0ec:	4442      	add	r2, r8
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800c0ee:	3c01      	subs	r4, #1
        obj->styles[i] = obj->styles[i - 1];
 800c0f0:	c882      	ldmia	r0!, {r1, r7}
 800c0f2:	c282      	stmia	r2!, {r1, r7}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800c0f4:	3b08      	subs	r3, #8
 800c0f6:	2c00      	cmp	r4, #0
 800c0f8:	d005      	beq.n	800c106 <get_local_style+0x9e>
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 800c0fa:	4660      	mov	r0, ip
 800c0fc:	79da      	ldrb	r2, [r3, #7]
 800c0fe:	4210      	tst	r0, r2
 800c100:	d0f1      	beq.n	800c0e6 <get_local_style+0x7e>
    }

    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800c102:	00e4      	lsls	r4, r4, #3
 800c104:	44a2      	add	sl, r4
 800c106:	2108      	movs	r1, #8
 800c108:	4650      	mov	r0, sl
 800c10a:	f009 fa3b 	bl	8015584 <lv_memset_00>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 800c10e:	68f3      	ldr	r3, [r6, #12]
 800c110:	2008      	movs	r0, #8
 800c112:	191f      	adds	r7, r3, r4
 800c114:	f008 feb4 	bl	8014e80 <lv_mem_alloc>
    lv_style_init(obj->styles[i].style);
 800c118:	68f3      	ldr	r3, [r6, #12]
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 800c11a:	6038      	str	r0, [r7, #0]
    lv_style_init(obj->styles[i].style);
 800c11c:	5918      	ldr	r0, [r3, r4]
 800c11e:	f009 fb05 	bl	801572c <lv_style_init>
    obj->styles[i].is_local = 1;
 800c122:	2201      	movs	r2, #1
 800c124:	68f3      	ldr	r3, [r6, #12]
    obj->styles[i].selector = selector;
 800c126:	022d      	lsls	r5, r5, #8
    obj->styles[i].is_local = 1;
 800c128:	191c      	adds	r4, r3, r4
 800c12a:	79e3      	ldrb	r3, [r4, #7]
    obj->styles[i].selector = selector;
 800c12c:	0a2d      	lsrs	r5, r5, #8
    obj->styles[i].is_local = 1;
 800c12e:	4313      	orrs	r3, r2
    obj->styles[i].selector = selector;
 800c130:	b2db      	uxtb	r3, r3
 800c132:	061b      	lsls	r3, r3, #24
 800c134:	431d      	orrs	r5, r3
    return obj->styles[i].style;
 800c136:	6820      	ldr	r0, [r4, #0]
    obj->styles[i].selector = selector;
 800c138:	6065      	str	r5, [r4, #4]
}
 800c13a:	bce0      	pop	{r5, r6, r7}
 800c13c:	46ba      	mov	sl, r7
 800c13e:	46b1      	mov	r9, r6
 800c140:	46a8      	mov	r8, r5
 800c142:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(obj->styles);
 800c144:	e7fe      	b.n	800c144 <get_local_style+0xdc>
            return obj->styles[i].style;
 800c146:	6818      	ldr	r0, [r3, #0]
 800c148:	e7f7      	b.n	800c13a <get_local_style+0xd2>
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c14a:	2108      	movs	r1, #8
 800c14c:	2701      	movs	r7, #1
 800c14e:	e7aa      	b.n	800c0a6 <get_local_style+0x3e>
 800c150:	fffffe07 	.word	0xfffffe07
 800c154:	1ffffffe 	.word	0x1ffffffe

0800c158 <get_trans_style>:
 * @param obj   pointer to an object
 * @param selector OR-ed value of parts and state for which the style should be get
 * @return pointer to the transition style
 */
static _lv_obj_style_t * get_trans_style(lv_obj_t * obj,  lv_style_selector_t selector)
{
 800c158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c15a:	000d      	movs	r5, r1
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800c15c:	8bc1      	ldrh	r1, [r0, #30]
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800c15e:	68c3      	ldr	r3, [r0, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800c160:	05c9      	lsls	r1, r1, #23
{
 800c162:	0006      	movs	r6, r0
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800c164:	469c      	mov	ip, r3
    for(i = 0; i < obj->style_cnt; i++) {
 800c166:	0e89      	lsrs	r1, r1, #26
 800c168:	d04c      	beq.n	800c204 <get_trans_style+0xac>
 800c16a:	2200      	movs	r2, #0
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800c16c:	2702      	movs	r7, #2
 800c16e:	79dc      	ldrb	r4, [r3, #7]
 800c170:	0018      	movs	r0, r3
 800c172:	4227      	tst	r7, r4
 800c174:	d004      	beq.n	800c180 <get_trans_style+0x28>
 800c176:	685c      	ldr	r4, [r3, #4]
 800c178:	0224      	lsls	r4, r4, #8
 800c17a:	0a24      	lsrs	r4, r4, #8
 800c17c:	42ac      	cmp	r4, r5
 800c17e:	d006      	beq.n	800c18e <get_trans_style+0x36>
    for(i = 0; i < obj->style_cnt; i++) {
 800c180:	3201      	adds	r2, #1
 800c182:	3308      	adds	r3, #8
 800c184:	428a      	cmp	r2, r1
 800c186:	d3f2      	bcc.n	800c16e <get_trans_style+0x16>
    }

    /*Already have a transition style for it*/
    if(i != obj->style_cnt) return &obj->styles[i];
 800c188:	d002      	beq.n	800c190 <get_trans_style+0x38>
 800c18a:	00d0      	lsls	r0, r2, #3
 800c18c:	4460      	add	r0, ip
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
    lv_style_init(obj->styles[0].style);
    obj->styles[0].is_trans = 1;
    obj->styles[0].selector = selector;
    return &obj->styles[0];
}
 800c18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    obj->style_cnt++;
 800c190:	233f      	movs	r3, #63	; 0x3f
 800c192:	3201      	adds	r2, #1
 800c194:	401a      	ands	r2, r3
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c196:	00d1      	lsls	r1, r2, #3
    obj->style_cnt++;
 800c198:	8bf3      	ldrh	r3, [r6, #30]
 800c19a:	481c      	ldr	r0, [pc, #112]	; (800c20c <get_trans_style+0xb4>)
 800c19c:	00d2      	lsls	r2, r2, #3
 800c19e:	4003      	ands	r3, r0
 800c1a0:	431a      	orrs	r2, r3
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c1a2:	4660      	mov	r0, ip
    obj->style_cnt++;
 800c1a4:	83f2      	strh	r2, [r6, #30]
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c1a6:	f008 fea9 	bl	8014efc <lv_mem_realloc>
 800c1aa:	0004      	movs	r4, r0
 800c1ac:	60f0      	str	r0, [r6, #12]
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800c1ae:	8bf0      	ldrh	r0, [r6, #30]
 800c1b0:	05c0      	lsls	r0, r0, #23
 800c1b2:	0e80      	lsrs	r0, r0, #26
 800c1b4:	1e43      	subs	r3, r0, #1
 800c1b6:	2801      	cmp	r0, #1
 800c1b8:	d00c      	beq.n	800c1d4 <get_trans_style+0x7c>
        obj->styles[i] = obj->styles[i - 1];
 800c1ba:	4f15      	ldr	r7, [pc, #84]	; (800c210 <get_trans_style+0xb8>)
 800c1bc:	1a19      	subs	r1, r3, r0
 800c1be:	46bc      	mov	ip, r7
 800c1c0:	1a18      	subs	r0, r3, r0
 800c1c2:	4461      	add	r1, ip
 800c1c4:	3002      	adds	r0, #2
 800c1c6:	00c9      	lsls	r1, r1, #3
 800c1c8:	00c0      	lsls	r0, r0, #3
 800c1ca:	00da      	lsls	r2, r3, #3
 800c1cc:	1861      	adds	r1, r4, r1
 800c1ce:	1820      	adds	r0, r4, r0
 800c1d0:	f00f f98f 	bl	801b4f2 <memmove>
    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 800c1d4:	2108      	movs	r1, #8
 800c1d6:	0020      	movs	r0, r4
 800c1d8:	f009 f9d4 	bl	8015584 <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 800c1dc:	2008      	movs	r0, #8
 800c1de:	68f4      	ldr	r4, [r6, #12]
 800c1e0:	f008 fe4e 	bl	8014e80 <lv_mem_alloc>
    lv_style_init(obj->styles[0].style);
 800c1e4:	68f3      	ldr	r3, [r6, #12]
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 800c1e6:	6020      	str	r0, [r4, #0]
    lv_style_init(obj->styles[0].style);
 800c1e8:	6818      	ldr	r0, [r3, #0]
 800c1ea:	f009 fa9f 	bl	801572c <lv_style_init>
    obj->styles[0].is_trans = 1;
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	68f0      	ldr	r0, [r6, #12]
    obj->styles[0].selector = selector;
 800c1f2:	022d      	lsls	r5, r5, #8
    obj->styles[0].is_trans = 1;
 800c1f4:	79c3      	ldrb	r3, [r0, #7]
 800c1f6:	4313      	orrs	r3, r2
    obj->styles[0].selector = selector;
 800c1f8:	0a2a      	lsrs	r2, r5, #8
 800c1fa:	b2dd      	uxtb	r5, r3
 800c1fc:	062d      	lsls	r5, r5, #24
 800c1fe:	4315      	orrs	r5, r2
 800c200:	6045      	str	r5, [r0, #4]
    return &obj->styles[0];
 800c202:	e7c4      	b.n	800c18e <get_trans_style+0x36>
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c204:	2108      	movs	r1, #8
 800c206:	2201      	movs	r2, #1
 800c208:	e7c6      	b.n	800c198 <get_trans_style+0x40>
 800c20a:	46c0      	nop			; (mov r8, r8)
 800c20c:	fffffe07 	.word	0xfffffe07
 800c210:	20000001 	.word	0x20000001

0800c214 <trans_del.isra.0>:
 * @param obj pointer to an object which transition(s) should be removed
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
 800c214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c216:	4657      	mov	r7, sl
 800c218:	464e      	mov	r6, r9
 800c21a:	46de      	mov	lr, fp
 800c21c:	4645      	mov	r5, r8
 800c21e:	b5e0      	push	{r5, r6, r7, lr}
 800c220:	001f      	movs	r7, r3
{
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800c222:	4b3f      	ldr	r3, [pc, #252]	; (800c320 <trans_del.isra.0+0x10c>)
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
 800c224:	b083      	sub	sp, #12
 800c226:	0006      	movs	r6, r0
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800c228:	0018      	movs	r0, r3
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
 800c22a:	468a      	mov	sl, r1
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800c22c:	4699      	mov	r9, r3
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
 800c22e:	9200      	str	r2, [sp, #0]
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800c230:	f008 fd7c 	bl	8014d2c <_lv_ll_get_tail>
 800c234:	1e04      	subs	r4, r0, #0
    while(tr != NULL) {
 800c236:	d04e      	beq.n	800c2d6 <trans_del.isra.0+0xc2>
        if(tr == tr_limit) break;
 800c238:	42b8      	cmp	r0, r7
 800c23a:	d04c      	beq.n	800c2d6 <trans_del.isra.0+0xc2>
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
            /*Remove any transitioned properties from the trans. style
             *to allow changing it by normal styles*/
            uint32_t i;
            for(i = 0; i < obj->style_cnt; i++) {
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 800c23c:	2302      	movs	r3, #2
 800c23e:	46b8      	mov	r8, r7
 800c240:	469b      	mov	fp, r3
 800c242:	e003      	b.n	800c24c <trans_del.isra.0+0x38>
    while(tr != NULL) {
 800c244:	2c00      	cmp	r4, #0
 800c246:	d046      	beq.n	800c2d6 <trans_del.isra.0+0xc2>
        if(tr == tr_limit) break;
 800c248:	45a0      	cmp	r8, r4
 800c24a:	d044      	beq.n	800c2d6 <trans_del.isra.0+0xc2>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800c24c:	0025      	movs	r5, r4
 800c24e:	0021      	movs	r1, r4
 800c250:	4648      	mov	r0, r9
 800c252:	f008 fd75 	bl	8014d40 <_lv_ll_get_prev>
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 800c256:	682b      	ldr	r3, [r5, #0]
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800c258:	0004      	movs	r4, r0
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 800c25a:	42b3      	cmp	r3, r6
 800c25c:	d1f2      	bne.n	800c244 <trans_del.isra.0+0x30>
 800c25e:	68ab      	ldr	r3, [r5, #8]
 800c260:	4553      	cmp	r3, sl
 800c262:	d003      	beq.n	800c26c <trans_del.isra.0+0x58>
 800c264:	23f0      	movs	r3, #240	; 0xf0
 800c266:	031b      	lsls	r3, r3, #12
 800c268:	459a      	cmp	sl, r3
 800c26a:	d1eb      	bne.n	800c244 <trans_del.isra.0+0x30>
 800c26c:	88ab      	ldrh	r3, [r5, #4]
 800c26e:	9a00      	ldr	r2, [sp, #0]
 800c270:	4293      	cmp	r3, r2
 800c272:	d003      	beq.n	800c27c <trans_del.isra.0+0x68>
 800c274:	0013      	movs	r3, r2
 800c276:	4a2b      	ldr	r2, [pc, #172]	; (800c324 <trans_del.isra.0+0x110>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d1e3      	bne.n	800c244 <trans_del.isra.0+0x30>
            for(i = 0; i < obj->style_cnt; i++) {
 800c27c:	8bf2      	ldrh	r2, [r6, #30]
 800c27e:	05d2      	lsls	r2, r2, #23
 800c280:	0e92      	lsrs	r2, r2, #26
 800c282:	d01b      	beq.n	800c2bc <trans_del.isra.0+0xa8>
 800c284:	23f0      	movs	r3, #240	; 0xf0
 800c286:	2700      	movs	r7, #0
 800c288:	031b      	lsls	r3, r3, #12
 800c28a:	459a      	cmp	sl, r3
 800c28c:	d02a      	beq.n	800c2e4 <trans_del.isra.0+0xd0>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 800c28e:	68f1      	ldr	r1, [r6, #12]
 800c290:	4658      	mov	r0, fp
 800c292:	468c      	mov	ip, r1
 800c294:	00fb      	lsls	r3, r7, #3
 800c296:	4463      	add	r3, ip
 800c298:	79d9      	ldrb	r1, [r3, #7]
 800c29a:	4208      	tst	r0, r1
 800c29c:	d00b      	beq.n	800c2b6 <trans_del.isra.0+0xa2>
 800c29e:	6859      	ldr	r1, [r3, #4]
 800c2a0:	0209      	lsls	r1, r1, #8
 800c2a2:	0a09      	lsrs	r1, r1, #8
 800c2a4:	458a      	cmp	sl, r1
 800c2a6:	d106      	bne.n	800c2b6 <trans_del.isra.0+0xa2>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 800c2a8:	88a9      	ldrh	r1, [r5, #4]
 800c2aa:	6818      	ldr	r0, [r3, #0]
 800c2ac:	f009 fa58 	bl	8015760 <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 800c2b0:	8bf2      	ldrh	r2, [r6, #30]
 800c2b2:	05d2      	lsls	r2, r2, #23
 800c2b4:	0e92      	lsrs	r2, r2, #26
 800c2b6:	3701      	adds	r7, #1
 800c2b8:	4297      	cmp	r7, r2
 800c2ba:	d3e8      	bcc.n	800c28e <trans_del.isra.0+0x7a>
                }
            }

            /*Free the transition descriptor too*/
            lv_anim_del(tr, NULL);
 800c2bc:	2100      	movs	r1, #0
 800c2be:	0028      	movs	r0, r5
 800c2c0:	f007 fdec 	bl	8013e9c <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800c2c4:	4648      	mov	r0, r9
 800c2c6:	0029      	movs	r1, r5
 800c2c8:	f008 fd00 	bl	8014ccc <_lv_ll_remove>
            lv_mem_free(tr);
 800c2cc:	0028      	movs	r0, r5
 800c2ce:	f008 fdf9 	bl	8014ec4 <lv_mem_free>
    while(tr != NULL) {
 800c2d2:	2c00      	cmp	r4, #0
 800c2d4:	d1b8      	bne.n	800c248 <trans_del.isra.0+0x34>

        }
        tr = tr_prev;
    }
    return removed;
}
 800c2d6:	b003      	add	sp, #12
 800c2d8:	bcf0      	pop	{r4, r5, r6, r7}
 800c2da:	46bb      	mov	fp, r7
 800c2dc:	46b2      	mov	sl, r6
 800c2de:	46a9      	mov	r9, r5
 800c2e0:	46a0      	mov	r8, r4
 800c2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2e4:	68f0      	ldr	r0, [r6, #12]
 800c2e6:	9401      	str	r4, [sp, #4]
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 800c2e8:	465c      	mov	r4, fp
 800c2ea:	00fb      	lsls	r3, r7, #3
 800c2ec:	18c3      	adds	r3, r0, r3
 800c2ee:	79d9      	ldrb	r1, [r3, #7]
 800c2f0:	420c      	tst	r4, r1
 800c2f2:	d010      	beq.n	800c316 <trans_del.isra.0+0x102>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 800c2f4:	88a9      	ldrh	r1, [r5, #4]
 800c2f6:	6818      	ldr	r0, [r3, #0]
 800c2f8:	f009 fa32 	bl	8015760 <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 800c2fc:	8bf2      	ldrh	r2, [r6, #30]
 800c2fe:	3701      	adds	r7, #1
 800c300:	05d2      	lsls	r2, r2, #23
 800c302:	0e92      	lsrs	r2, r2, #26
 800c304:	4297      	cmp	r7, r2
 800c306:	d209      	bcs.n	800c31c <trans_del.isra.0+0x108>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 800c308:	465c      	mov	r4, fp
 800c30a:	68f0      	ldr	r0, [r6, #12]
 800c30c:	00fb      	lsls	r3, r7, #3
 800c30e:	18c3      	adds	r3, r0, r3
 800c310:	79d9      	ldrb	r1, [r3, #7]
 800c312:	420c      	tst	r4, r1
 800c314:	d1ee      	bne.n	800c2f4 <trans_del.isra.0+0xe0>
            for(i = 0; i < obj->style_cnt; i++) {
 800c316:	3701      	adds	r7, #1
 800c318:	4297      	cmp	r7, r2
 800c31a:	d3e5      	bcc.n	800c2e8 <trans_del.isra.0+0xd4>
 800c31c:	9c01      	ldr	r4, [sp, #4]
 800c31e:	e7cd      	b.n	800c2bc <trans_del.isra.0+0xa8>
 800c320:	20000638 	.word	0x20000638
 800c324:	0000ffff 	.word	0x0000ffff

0800c328 <refresh_children_style>:
{
 800c328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c32a:	46de      	mov	lr, fp
 800c32c:	4657      	mov	r7, sl
 800c32e:	464e      	mov	r6, r9
 800c330:	4645      	mov	r5, r8
 800c332:	b5e0      	push	{r5, r6, r7, lr}
 800c334:	b095      	sub	sp, #84	; 0x54
 800c336:	9012      	str	r0, [sp, #72]	; 0x48
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c338:	f001 fd86 	bl	800de48 <lv_obj_get_child_cnt>
 800c33c:	900c      	str	r0, [sp, #48]	; 0x30
    for(i = 0; i < child_cnt; i++) {
 800c33e:	2800      	cmp	r0, #0
 800c340:	d100      	bne.n	800c344 <refresh_children_style+0x1c>
 800c342:	e129      	b.n	800c598 <refresh_children_style+0x270>
 800c344:	2300      	movs	r3, #0
 800c346:	9305      	str	r3, [sp, #20]
        lv_obj_t * child = obj->spec_attr->children[i];
 800c348:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c34a:	9a05      	ldr	r2, [sp, #20]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	0092      	lsls	r2, r2, #2
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	58d3      	ldr	r3, [r2, r3]
 800c354:	001c      	movs	r4, r3
        lv_obj_invalidate(child);
 800c356:	0018      	movs	r0, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 800c358:	930d      	str	r3, [sp, #52]	; 0x34
        lv_obj_invalidate(child);
 800c35a:	f7fd f85b 	bl	8009414 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800c35e:	2200      	movs	r2, #0
 800c360:	212a      	movs	r1, #42	; 0x2a
 800c362:	0020      	movs	r0, r4
 800c364:	f7f8 fc64 	bl	8004c30 <lv_event_send>
        lv_obj_invalidate(child);
 800c368:	0020      	movs	r0, r4
 800c36a:	f7fd f853 	bl	8009414 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c36e:	0020      	movs	r0, r4
 800c370:	f001 fd6a 	bl	800de48 <lv_obj_get_child_cnt>
 800c374:	900e      	str	r0, [sp, #56]	; 0x38
    for(i = 0; i < child_cnt; i++) {
 800c376:	2800      	cmp	r0, #0
 800c378:	d100      	bne.n	800c37c <refresh_children_style+0x54>
 800c37a:	e106      	b.n	800c58a <refresh_children_style+0x262>
 800c37c:	2300      	movs	r3, #0
 800c37e:	9306      	str	r3, [sp, #24]
        lv_obj_t * child = obj->spec_attr->children[i];
 800c380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c382:	9a06      	ldr	r2, [sp, #24]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	0092      	lsls	r2, r2, #2
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	58d3      	ldr	r3, [r2, r3]
 800c38c:	001c      	movs	r4, r3
        lv_obj_invalidate(child);
 800c38e:	0018      	movs	r0, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 800c390:	930f      	str	r3, [sp, #60]	; 0x3c
        lv_obj_invalidate(child);
 800c392:	f7fd f83f 	bl	8009414 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800c396:	2200      	movs	r2, #0
 800c398:	212a      	movs	r1, #42	; 0x2a
 800c39a:	0020      	movs	r0, r4
 800c39c:	f7f8 fc48 	bl	8004c30 <lv_event_send>
        lv_obj_invalidate(child);
 800c3a0:	0020      	movs	r0, r4
 800c3a2:	f7fd f837 	bl	8009414 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c3a6:	0020      	movs	r0, r4
 800c3a8:	f001 fd4e 	bl	800de48 <lv_obj_get_child_cnt>
 800c3ac:	9010      	str	r0, [sp, #64]	; 0x40
    for(i = 0; i < child_cnt; i++) {
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d100      	bne.n	800c3b4 <refresh_children_style+0x8c>
 800c3b2:	e0e3      	b.n	800c57c <refresh_children_style+0x254>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	9307      	str	r3, [sp, #28]
        lv_obj_t * child = obj->spec_attr->children[i];
 800c3b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3ba:	9a07      	ldr	r2, [sp, #28]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	0092      	lsls	r2, r2, #2
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	58d3      	ldr	r3, [r2, r3]
 800c3c4:	4698      	mov	r8, r3
        lv_obj_invalidate(child);
 800c3c6:	0018      	movs	r0, r3
 800c3c8:	f7fd f824 	bl	8009414 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	212a      	movs	r1, #42	; 0x2a
 800c3d0:	4640      	mov	r0, r8
 800c3d2:	f7f8 fc2d 	bl	8004c30 <lv_event_send>
        lv_obj_invalidate(child);
 800c3d6:	4640      	mov	r0, r8
 800c3d8:	f7fd f81c 	bl	8009414 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c3dc:	4640      	mov	r0, r8
 800c3de:	f001 fd33 	bl	800de48 <lv_obj_get_child_cnt>
 800c3e2:	9011      	str	r0, [sp, #68]	; 0x44
    for(i = 0; i < child_cnt; i++) {
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d100      	bne.n	800c3ea <refresh_children_style+0xc2>
 800c3e8:	e0c1      	b.n	800c56e <refresh_children_style+0x246>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	46c3      	mov	fp, r8
 800c3ee:	9308      	str	r3, [sp, #32]
        lv_obj_t * child = obj->spec_attr->children[i];
 800c3f0:	465b      	mov	r3, fp
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	9a08      	ldr	r2, [sp, #32]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	0092      	lsls	r2, r2, #2
 800c3fa:	58d3      	ldr	r3, [r2, r3]
 800c3fc:	4698      	mov	r8, r3
        lv_obj_invalidate(child);
 800c3fe:	0018      	movs	r0, r3
 800c400:	f7fd f808 	bl	8009414 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800c404:	2200      	movs	r2, #0
 800c406:	212a      	movs	r1, #42	; 0x2a
 800c408:	4640      	mov	r0, r8
 800c40a:	f7f8 fc11 	bl	8004c30 <lv_event_send>
        lv_obj_invalidate(child);
 800c40e:	4640      	mov	r0, r8
 800c410:	f7fd f800 	bl	8009414 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c414:	4640      	mov	r0, r8
 800c416:	f001 fd17 	bl	800de48 <lv_obj_get_child_cnt>
 800c41a:	9002      	str	r0, [sp, #8]
    for(i = 0; i < child_cnt; i++) {
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d100      	bne.n	800c422 <refresh_children_style+0xfa>
 800c420:	e09e      	b.n	800c560 <refresh_children_style+0x238>
 800c422:	465b      	mov	r3, fp
 800c424:	2600      	movs	r6, #0
 800c426:	46c1      	mov	r9, r8
 800c428:	9313      	str	r3, [sp, #76]	; 0x4c
        lv_obj_t * child = obj->spec_attr->children[i];
 800c42a:	464b      	mov	r3, r9
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	00b2      	lsls	r2, r6, #2
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	58d5      	ldr	r5, [r2, r3]
        lv_obj_invalidate(child);
 800c434:	0028      	movs	r0, r5
 800c436:	f7fc ffed 	bl	8009414 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800c43a:	2200      	movs	r2, #0
 800c43c:	212a      	movs	r1, #42	; 0x2a
 800c43e:	0028      	movs	r0, r5
 800c440:	f7f8 fbf6 	bl	8004c30 <lv_event_send>
        lv_obj_invalidate(child);
 800c444:	0028      	movs	r0, r5
 800c446:	f7fc ffe5 	bl	8009414 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c44a:	0028      	movs	r0, r5
 800c44c:	f001 fcfc 	bl	800de48 <lv_obj_get_child_cnt>
 800c450:	9000      	str	r0, [sp, #0]
    for(i = 0; i < child_cnt; i++) {
 800c452:	2800      	cmp	r0, #0
 800c454:	d07d      	beq.n	800c552 <refresh_children_style+0x22a>
 800c456:	2300      	movs	r3, #0
 800c458:	46c8      	mov	r8, r9
 800c45a:	469a      	mov	sl, r3
 800c45c:	46a9      	mov	r9, r5
 800c45e:	46b3      	mov	fp, r6
        lv_obj_t * child = obj->spec_attr->children[i];
 800c460:	464b      	mov	r3, r9
 800c462:	4652      	mov	r2, sl
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	0092      	lsls	r2, r2, #2
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	58d7      	ldr	r7, [r2, r3]
        lv_obj_invalidate(child);
 800c46c:	0038      	movs	r0, r7
 800c46e:	f7fc ffd1 	bl	8009414 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800c472:	2200      	movs	r2, #0
 800c474:	212a      	movs	r1, #42	; 0x2a
 800c476:	0038      	movs	r0, r7
 800c478:	f7f8 fbda 	bl	8004c30 <lv_event_send>
        lv_obj_invalidate(child);
 800c47c:	0038      	movs	r0, r7
 800c47e:	f7fc ffc9 	bl	8009414 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c482:	0038      	movs	r0, r7
 800c484:	f001 fce0 	bl	800de48 <lv_obj_get_child_cnt>
 800c488:	900a      	str	r0, [sp, #40]	; 0x28
    for(i = 0; i < child_cnt; i++) {
 800c48a:	2800      	cmp	r0, #0
 800c48c:	d059      	beq.n	800c542 <refresh_children_style+0x21a>
 800c48e:	2300      	movs	r3, #0
 800c490:	9301      	str	r3, [sp, #4]
        lv_obj_t * child = obj->spec_attr->children[i];
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	9a01      	ldr	r2, [sp, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	0092      	lsls	r2, r2, #2
 800c49a:	58d6      	ldr	r6, [r2, r3]
        lv_obj_invalidate(child);
 800c49c:	0030      	movs	r0, r6
 800c49e:	f7fc ffb9 	bl	8009414 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	212a      	movs	r1, #42	; 0x2a
 800c4a6:	0030      	movs	r0, r6
 800c4a8:	f7f8 fbc2 	bl	8004c30 <lv_event_send>
        lv_obj_invalidate(child);
 800c4ac:	0030      	movs	r0, r6
 800c4ae:	f7fc ffb1 	bl	8009414 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c4b2:	0030      	movs	r0, r6
 800c4b4:	f001 fcc8 	bl	800de48 <lv_obj_get_child_cnt>
 800c4b8:	9003      	str	r0, [sp, #12]
    for(i = 0; i < child_cnt; i++) {
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d03b      	beq.n	800c536 <refresh_children_style+0x20e>
 800c4be:	4643      	mov	r3, r8
 800c4c0:	2500      	movs	r5, #0
 800c4c2:	46b8      	mov	r8, r7
 800c4c4:	0037      	movs	r7, r6
 800c4c6:	9309      	str	r3, [sp, #36]	; 0x24
        lv_obj_t * child = obj->spec_attr->children[i];
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	00aa      	lsls	r2, r5, #2
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	58d4      	ldr	r4, [r2, r3]
        lv_obj_invalidate(child);
 800c4d0:	0020      	movs	r0, r4
 800c4d2:	f7fc ff9f 	bl	8009414 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	212a      	movs	r1, #42	; 0x2a
 800c4da:	0020      	movs	r0, r4
 800c4dc:	f7f8 fba8 	bl	8004c30 <lv_event_send>
        lv_obj_invalidate(child);
 800c4e0:	0020      	movs	r0, r4
 800c4e2:	f7fc ff97 	bl	8009414 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c4e6:	0020      	movs	r0, r4
 800c4e8:	f001 fcae 	bl	800de48 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	d01b      	beq.n	800c528 <refresh_children_style+0x200>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	900b      	str	r0, [sp, #44]	; 0x2c
 800c4f4:	9304      	str	r3, [sp, #16]
        lv_obj_t * child = obj->spec_attr->children[i];
 800c4f6:	68a3      	ldr	r3, [r4, #8]
 800c4f8:	9a04      	ldr	r2, [sp, #16]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	0092      	lsls	r2, r2, #2
 800c4fe:	58d6      	ldr	r6, [r2, r3]
        lv_obj_invalidate(child);
 800c500:	0030      	movs	r0, r6
 800c502:	f7fc ff87 	bl	8009414 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800c506:	2200      	movs	r2, #0
 800c508:	212a      	movs	r1, #42	; 0x2a
 800c50a:	0030      	movs	r0, r6
 800c50c:	f7f8 fb90 	bl	8004c30 <lv_event_send>
        lv_obj_invalidate(child);
 800c510:	0030      	movs	r0, r6
 800c512:	f7fc ff7f 	bl	8009414 <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 800c516:	0030      	movs	r0, r6
 800c518:	f7ff ff06 	bl	800c328 <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 800c51c:	9a04      	ldr	r2, [sp, #16]
 800c51e:	1c53      	adds	r3, r2, #1
 800c520:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c522:	9304      	str	r3, [sp, #16]
 800c524:	429a      	cmp	r2, r3
 800c526:	d1e6      	bne.n	800c4f6 <refresh_children_style+0x1ce>
 800c528:	9b03      	ldr	r3, [sp, #12]
 800c52a:	3501      	adds	r5, #1
 800c52c:	42ab      	cmp	r3, r5
 800c52e:	d1cb      	bne.n	800c4c8 <refresh_children_style+0x1a0>
 800c530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c532:	4647      	mov	r7, r8
 800c534:	4698      	mov	r8, r3
 800c536:	9b01      	ldr	r3, [sp, #4]
 800c538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c53a:	3301      	adds	r3, #1
 800c53c:	9301      	str	r3, [sp, #4]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d1a7      	bne.n	800c492 <refresh_children_style+0x16a>
 800c542:	2301      	movs	r3, #1
 800c544:	469c      	mov	ip, r3
 800c546:	9b00      	ldr	r3, [sp, #0]
 800c548:	44e2      	add	sl, ip
 800c54a:	4553      	cmp	r3, sl
 800c54c:	d188      	bne.n	800c460 <refresh_children_style+0x138>
 800c54e:	46c1      	mov	r9, r8
 800c550:	465e      	mov	r6, fp
 800c552:	9b02      	ldr	r3, [sp, #8]
 800c554:	3601      	adds	r6, #1
 800c556:	42b3      	cmp	r3, r6
 800c558:	d000      	beq.n	800c55c <refresh_children_style+0x234>
 800c55a:	e766      	b.n	800c42a <refresh_children_style+0x102>
 800c55c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c55e:	469b      	mov	fp, r3
 800c560:	9b08      	ldr	r3, [sp, #32]
 800c562:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c564:	3301      	adds	r3, #1
 800c566:	9308      	str	r3, [sp, #32]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d000      	beq.n	800c56e <refresh_children_style+0x246>
 800c56c:	e740      	b.n	800c3f0 <refresh_children_style+0xc8>
 800c56e:	9b07      	ldr	r3, [sp, #28]
 800c570:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c572:	3301      	adds	r3, #1
 800c574:	9307      	str	r3, [sp, #28]
 800c576:	429a      	cmp	r2, r3
 800c578:	d000      	beq.n	800c57c <refresh_children_style+0x254>
 800c57a:	e71d      	b.n	800c3b8 <refresh_children_style+0x90>
 800c57c:	9b06      	ldr	r3, [sp, #24]
 800c57e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c580:	3301      	adds	r3, #1
 800c582:	9306      	str	r3, [sp, #24]
 800c584:	429a      	cmp	r2, r3
 800c586:	d000      	beq.n	800c58a <refresh_children_style+0x262>
 800c588:	e6fa      	b.n	800c380 <refresh_children_style+0x58>
 800c58a:	9b05      	ldr	r3, [sp, #20]
 800c58c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c58e:	3301      	adds	r3, #1
 800c590:	9305      	str	r3, [sp, #20]
 800c592:	429a      	cmp	r2, r3
 800c594:	d000      	beq.n	800c598 <refresh_children_style+0x270>
 800c596:	e6d7      	b.n	800c348 <refresh_children_style+0x20>
}
 800c598:	b015      	add	sp, #84	; 0x54
 800c59a:	bcf0      	pop	{r4, r5, r6, r7}
 800c59c:	46bb      	mov	fp, r7
 800c59e:	46b2      	mov	sl, r6
 800c5a0:	46a9      	mov	r9, r5
 800c5a2:	46a0      	mov	r8, r4
 800c5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5a6:	46c0      	nop			; (mov r8, r8)

0800c5a8 <_lv_obj_style_init>:
{
 800c5a8:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 800c5aa:	2114      	movs	r1, #20
 800c5ac:	4801      	ldr	r0, [pc, #4]	; (800c5b4 <_lv_obj_style_init+0xc>)
 800c5ae:	f008 fb55 	bl	8014c5c <_lv_ll_init>
}
 800c5b2:	bd10      	pop	{r4, pc}
 800c5b4:	20000638 	.word	0x20000638

0800c5b8 <lv_obj_enable_style_refresh>:
    style_refr = en;
 800c5b8:	4b01      	ldr	r3, [pc, #4]	; (800c5c0 <lv_obj_enable_style_refresh+0x8>)
 800c5ba:	7018      	strb	r0, [r3, #0]
}
 800c5bc:	4770      	bx	lr
 800c5be:	46c0      	nop			; (mov r8, r8)
 800c5c0:	20000070 	.word	0x20000070

0800c5c4 <lv_obj_get_style_prop>:
{
 800c5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5c6:	46de      	mov	lr, fp
 800c5c8:	4657      	mov	r7, sl
 800c5ca:	4645      	mov	r5, r8
 800c5cc:	464e      	mov	r6, r9
 800c5ce:	b5e0      	push	{r5, r6, r7, lr}
 800c5d0:	0005      	movs	r5, r0
 800c5d2:	b087      	sub	sp, #28
 * @param flag Flag
 * @return true if the flag is set for this property
 */
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)
{
    return _lv_style_prop_lookup_flags(prop) & flag;
 800c5d4:	0010      	movs	r0, r2
 800c5d6:	000f      	movs	r7, r1
 800c5d8:	4693      	mov	fp, r2
 800c5da:	f009 fa41 	bl	8015a60 <_lv_style_prop_lookup_flags>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	4003      	ands	r3, r0
 800c5e2:	9303      	str	r3, [sp, #12]
    while(obj) {
 800c5e4:	2d00      	cmp	r5, #0
 800c5e6:	d100      	bne.n	800c5ea <lv_obj_get_style_prop+0x26>
 800c5e8:	e08f      	b.n	800c70a <lv_obj_get_style_prop+0x146>
    return selector & 0xFF0000;
 800c5ea:	23ff      	movs	r3, #255	; 0xff
 800c5ec:	041b      	lsls	r3, r3, #16
 800c5ee:	469a      	mov	sl, r3
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 800c5f0:	4658      	mov	r0, fp
 800c5f2:	f009 fa2d 	bl	8015a50 <_lv_style_get_prop_group>
 800c5f6:	2601      	movs	r6, #1
    lv_state_t state = obj->state;
 800c5f8:	8bab      	ldrh	r3, [r5, #28]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 800c5fa:	4086      	lsls	r6, r0
    lv_state_t state = obj->state;
 800c5fc:	9302      	str	r3, [sp, #8]
    lv_state_t state_inv = ~state;
 800c5fe:	43db      	mvns	r3, r3
 800c600:	b29b      	uxth	r3, r3
 800c602:	4699      	mov	r9, r3
    for(i = 0; i < obj->style_cnt; i++) {
 800c604:	8bea      	ldrh	r2, [r5, #30]
    bool skip_trans = obj->skip_trans;
 800c606:	7fab      	ldrb	r3, [r5, #30]
    for(i = 0; i < obj->style_cnt; i++) {
 800c608:	05d1      	lsls	r1, r2, #23
    bool skip_trans = obj->skip_trans;
 800c60a:	075b      	lsls	r3, r3, #29
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 800c60c:	b2f6      	uxtb	r6, r6
    bool skip_trans = obj->skip_trans;
 800c60e:	0fdb      	lsrs	r3, r3, #31
    for(i = 0; i < obj->style_cnt; i++) {
 800c610:	0e89      	lsrs	r1, r1, #26
 800c612:	d100      	bne.n	800c616 <lv_obj_get_style_prop+0x52>
 800c614:	e06e      	b.n	800c6f4 <lv_obj_get_style_prop+0x130>
 800c616:	2b00      	cmp	r3, #0
 800c618:	d000      	beq.n	800c61c <lv_obj_get_style_prop+0x58>
 800c61a:	e081      	b.n	800c720 <lv_obj_get_style_prop+0x15c>
        if(obj_style->is_trans == false) break;
 800c61c:	3302      	adds	r3, #2
    for(i = 0; i < obj->style_cnt; i++) {
 800c61e:	2400      	movs	r4, #0
        if(obj_style->is_trans == false) break;
 800c620:	4698      	mov	r8, r3
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800c622:	4694      	mov	ip, r2
 800c624:	9601      	str	r6, [sp, #4]
 800c626:	e019      	b.n	800c65c <lv_obj_get_style_prop+0x98>
    return selector & 0xFF0000;
 800c628:	4652      	mov	r2, sl
 800c62a:	6843      	ldr	r3, [r0, #4]
 800c62c:	4013      	ands	r3, r2
        if(part_act != part) continue;
 800c62e:	429f      	cmp	r7, r3
 800c630:	d111      	bne.n	800c656 <lv_obj_get_style_prop+0x92>
        if((obj_style->style->has_group & group) == 0) continue;
 800c632:	6800      	ldr	r0, [r0, #0]
 800c634:	9a01      	ldr	r2, [sp, #4]
 800c636:	7983      	ldrb	r3, [r0, #6]
 800c638:	4213      	tst	r3, r2
 800c63a:	d00c      	beq.n	800c656 <lv_obj_get_style_prop+0x92>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800c63c:	4659      	mov	r1, fp
 800c63e:	aa05      	add	r2, sp, #20
 800c640:	f009 f9aa 	bl	8015998 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 800c644:	2801      	cmp	r0, #1
 800c646:	d04d      	beq.n	800c6e4 <lv_obj_get_style_prop+0x120>
        else if(found == LV_STYLE_RES_INHERIT) {
 800c648:	2802      	cmp	r0, #2
 800c64a:	d100      	bne.n	800c64e <lv_obj_get_style_prop+0x8a>
 800c64c:	e07d      	b.n	800c74a <lv_obj_get_style_prop+0x186>
    for(i = 0; i < obj->style_cnt; i++) {
 800c64e:	8beb      	ldrh	r3, [r5, #30]
 800c650:	469c      	mov	ip, r3
 800c652:	05d9      	lsls	r1, r3, #23
 800c654:	0e89      	lsrs	r1, r1, #26
 800c656:	3401      	adds	r4, #1
 800c658:	42a1      	cmp	r1, r4
 800c65a:	d94b      	bls.n	800c6f4 <lv_obj_get_style_prop+0x130>
        if(obj_style->is_trans == false) break;
 800c65c:	4646      	mov	r6, r8
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800c65e:	68eb      	ldr	r3, [r5, #12]
 800c660:	00e0      	lsls	r0, r4, #3
 800c662:	1818      	adds	r0, r3, r0
        if(obj_style->is_trans == false) break;
 800c664:	79c2      	ldrb	r2, [r0, #7]
 800c666:	4216      	tst	r6, r2
 800c668:	d1de      	bne.n	800c628 <lv_obj_get_style_prop+0x64>
 800c66a:	4662      	mov	r2, ip
 800c66c:	9e01      	ldr	r6, [sp, #4]
    for(; i < obj->style_cnt; i++) {
 800c66e:	428c      	cmp	r4, r1
 800c670:	d240      	bcs.n	800c6f4 <lv_obj_get_style_prop+0x130>
 800c672:	2101      	movs	r1, #1
 800c674:	4249      	negs	r1, r1
 800c676:	3401      	adds	r4, #1
 800c678:	9101      	str	r1, [sp, #4]
 800c67a:	e008      	b.n	800c68e <lv_obj_get_style_prop+0xca>
        else if(found == LV_STYLE_RES_INHERIT) {
 800c67c:	2802      	cmp	r0, #2
 800c67e:	d064      	beq.n	800c74a <lv_obj_get_style_prop+0x186>
 800c680:	8bea      	ldrh	r2, [r5, #30]
    for(; i < obj->style_cnt; i++) {
 800c682:	05d3      	lsls	r3, r2, #23
 800c684:	0e9b      	lsrs	r3, r3, #26
 800c686:	42a3      	cmp	r3, r4
 800c688:	d929      	bls.n	800c6de <lv_obj_get_style_prop+0x11a>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 800c68a:	68eb      	ldr	r3, [r5, #12]
 800c68c:	3401      	adds	r4, #1
 800c68e:	00e1      	lsls	r1, r4, #3
 800c690:	3908      	subs	r1, #8
 800c692:	185b      	adds	r3, r3, r1
 800c694:	6818      	ldr	r0, [r3, #0]
 800c696:	7981      	ldrb	r1, [r0, #6]
 800c698:	4231      	tst	r1, r6
 800c69a:	d0f2      	beq.n	800c682 <lv_obj_get_style_prop+0xbe>
    return selector & 0xFF0000;
 800c69c:	4651      	mov	r1, sl
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	021b      	lsls	r3, r3, #8
 800c6a2:	0a1b      	lsrs	r3, r3, #8
    return selector & 0xFF0000;
 800c6a4:	4019      	ands	r1, r3
        if(part_act != part) continue;
 800c6a6:	42b9      	cmp	r1, r7
 800c6a8:	d1eb      	bne.n	800c682 <lv_obj_get_style_prop+0xbe>
    return selector & 0xFFFF;
 800c6aa:	b299      	uxth	r1, r3
 800c6ac:	4688      	mov	r8, r1
        if((state_act & state_inv)) continue;
 800c6ae:	4649      	mov	r1, r9
 800c6b0:	420b      	tst	r3, r1
 800c6b2:	d1e6      	bne.n	800c682 <lv_obj_get_style_prop+0xbe>
        if(state_act <= weight) continue;
 800c6b4:	9b01      	ldr	r3, [sp, #4]
 800c6b6:	4598      	cmp	r8, r3
 800c6b8:	dde3      	ble.n	800c682 <lv_obj_get_style_prop+0xbe>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800c6ba:	4659      	mov	r1, fp
 800c6bc:	aa05      	add	r2, sp, #20
 800c6be:	f009 f96b 	bl	8015998 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 800c6c2:	2801      	cmp	r0, #1
 800c6c4:	d1da      	bne.n	800c67c <lv_obj_get_style_prop+0xb8>
            if(state_act == state) {
 800c6c6:	9b02      	ldr	r3, [sp, #8]
                *v = value_tmp;
 800c6c8:	9805      	ldr	r0, [sp, #20]
            if(state_act == state) {
 800c6ca:	4543      	cmp	r3, r8
 800c6cc:	d00b      	beq.n	800c6e6 <lv_obj_get_style_prop+0x122>
    for(; i < obj->style_cnt; i++) {
 800c6ce:	8bea      	ldrh	r2, [r5, #30]
 800c6d0:	05d3      	lsls	r3, r2, #23
 800c6d2:	0e9b      	lsrs	r3, r3, #26
 800c6d4:	42a3      	cmp	r3, r4
 800c6d6:	d906      	bls.n	800c6e6 <lv_obj_get_style_prop+0x122>
 800c6d8:	4643      	mov	r3, r8
 800c6da:	9301      	str	r3, [sp, #4]
 800c6dc:	e7d5      	b.n	800c68a <lv_obj_get_style_prop+0xc6>
    if(weight >= 0) {
 800c6de:	9b01      	ldr	r3, [sp, #4]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	d007      	beq.n	800c6f4 <lv_obj_get_style_prop+0x130>
        *v = value_tmp;
 800c6e4:	9805      	ldr	r0, [sp, #20]
}
 800c6e6:	b007      	add	sp, #28
 800c6e8:	bcf0      	pop	{r4, r5, r6, r7}
 800c6ea:	46bb      	mov	fp, r7
 800c6ec:	46b2      	mov	sl, r6
 800c6ee:	46a9      	mov	r9, r5
 800c6f0:	46a0      	mov	r8, r4
 800c6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(!inheritable) break;
 800c6f4:	9b03      	ldr	r3, [sp, #12]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d007      	beq.n	800c70a <lv_obj_get_style_prop+0x146>
        if(found != LV_STYLE_RES_INHERIT && part != LV_PART_MAIN) {
 800c6fa:	2f00      	cmp	r7, #0
 800c6fc:	d123      	bne.n	800c746 <lv_obj_get_style_prop+0x182>
        obj = lv_obj_get_parent(obj);
 800c6fe:	0028      	movs	r0, r5
 800c700:	f001 fb8c 	bl	800de1c <lv_obj_get_parent>
 800c704:	1e05      	subs	r5, r0, #0
    while(obj) {
 800c706:	d000      	beq.n	800c70a <lv_obj_get_style_prop+0x146>
 800c708:	e772      	b.n	800c5f0 <lv_obj_get_style_prop+0x2c>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800c70a:	2f00      	cmp	r7, #0
 800c70c:	d104      	bne.n	800c718 <lv_obj_get_style_prop+0x154>
 800c70e:	465b      	mov	r3, fp
 800c710:	2b01      	cmp	r3, #1
 800c712:	d02a      	beq.n	800c76a <lv_obj_get_style_prop+0x1a6>
 800c714:	2b04      	cmp	r3, #4
 800c716:	d01c      	beq.n	800c752 <lv_obj_get_style_prop+0x18e>
            value_act = lv_style_prop_get_default(prop);
 800c718:	4658      	mov	r0, fp
 800c71a:	f009 f91d 	bl	8015958 <lv_style_prop_get_default>
 800c71e:	e7e2      	b.n	800c6e6 <lv_obj_get_style_prop+0x122>
        if(obj_style->is_trans == false) break;
 800c720:	2002      	movs	r0, #2
 800c722:	68eb      	ldr	r3, [r5, #12]
 800c724:	4680      	mov	r8, r0
 800c726:	469c      	mov	ip, r3
    for(i = 0; i < obj->style_cnt; i++) {
 800c728:	2400      	movs	r4, #0
        if(obj_style->is_trans == false) break;
 800c72a:	0018      	movs	r0, r3
 800c72c:	9201      	str	r2, [sp, #4]
 800c72e:	e003      	b.n	800c738 <lv_obj_get_style_prop+0x174>
    for(i = 0; i < obj->style_cnt; i++) {
 800c730:	3401      	adds	r4, #1
 800c732:	3008      	adds	r0, #8
 800c734:	428c      	cmp	r4, r1
 800c736:	d2dd      	bcs.n	800c6f4 <lv_obj_get_style_prop+0x130>
        if(obj_style->is_trans == false) break;
 800c738:	4642      	mov	r2, r8
 800c73a:	79c3      	ldrb	r3, [r0, #7]
 800c73c:	421a      	tst	r2, r3
 800c73e:	d1f7      	bne.n	800c730 <lv_obj_get_style_prop+0x16c>
 800c740:	4663      	mov	r3, ip
 800c742:	9a01      	ldr	r2, [sp, #4]
 800c744:	e793      	b.n	800c66e <lv_obj_get_style_prop+0xaa>
            part = LV_PART_MAIN;
 800c746:	2700      	movs	r7, #0
 800c748:	e752      	b.n	800c5f0 <lv_obj_get_style_prop+0x2c>
        if(!inheritable) break;
 800c74a:	9b03      	ldr	r3, [sp, #12]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d1d6      	bne.n	800c6fe <lv_obj_get_style_prop+0x13a>
 800c750:	e7db      	b.n	800c70a <lv_obj_get_style_prop+0x146>
            const lv_obj_class_t * cls = obj->class_p;
 800c752:	682b      	ldr	r3, [r5, #0]
            while(cls) {
 800c754:	2b00      	cmp	r3, #0
 800c756:	d103      	bne.n	800c760 <lv_obj_get_style_prop+0x19c>
 800c758:	e013      	b.n	800c782 <lv_obj_get_style_prop+0x1be>
                cls = cls->base_class;
 800c75a:	681b      	ldr	r3, [r3, #0]
            while(cls) {
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d0c2      	beq.n	800c6e6 <lv_obj_get_style_prop+0x122>
                    if(cls->height_def != 0) break;
 800c760:	2212      	movs	r2, #18
 800c762:	5e98      	ldrsh	r0, [r3, r2]
 800c764:	2800      	cmp	r0, #0
 800c766:	d0f8      	beq.n	800c75a <lv_obj_get_style_prop+0x196>
 800c768:	e7bd      	b.n	800c6e6 <lv_obj_get_style_prop+0x122>
            const lv_obj_class_t * cls = obj->class_p;
 800c76a:	682b      	ldr	r3, [r5, #0]
            while(cls) {
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d103      	bne.n	800c778 <lv_obj_get_style_prop+0x1b4>
 800c770:	e007      	b.n	800c782 <lv_obj_get_style_prop+0x1be>
                cls = cls->base_class;
 800c772:	681b      	ldr	r3, [r3, #0]
            while(cls) {
 800c774:	2b00      	cmp	r3, #0
 800c776:	d0b6      	beq.n	800c6e6 <lv_obj_get_style_prop+0x122>
                    if(cls->width_def != 0) break;
 800c778:	2210      	movs	r2, #16
 800c77a:	5e98      	ldrsh	r0, [r3, r2]
 800c77c:	2800      	cmp	r0, #0
 800c77e:	d0f8      	beq.n	800c772 <lv_obj_get_style_prop+0x1ae>
 800c780:	e7b1      	b.n	800c6e6 <lv_obj_get_style_prop+0x122>
                value_act.num = 0;
 800c782:	2000      	movs	r0, #0
    return value_act;
 800c784:	e7af      	b.n	800c6e6 <lv_obj_get_style_prop+0x122>
 800c786:	46c0      	nop			; (mov r8, r8)

0800c788 <lv_obj_refresh_style.part.0>:
void lv_obj_refresh_style(lv_obj_t * obj, lv_style_selector_t selector, lv_style_prop_t prop)
 800c788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c78a:	46de      	mov	lr, fp
 800c78c:	4657      	mov	r7, sl
 800c78e:	464e      	mov	r6, r9
 800c790:	4645      	mov	r5, r8
 800c792:	b5e0      	push	{r5, r6, r7, lr}
 800c794:	000c      	movs	r4, r1
 800c796:	0015      	movs	r5, r2
 800c798:	0006      	movs	r6, r0
    lv_obj_invalidate(obj);
 800c79a:	f7fc fe3b 	bl	8009414 <lv_obj_invalidate>
    return selector & 0xFF0000;
 800c79e:	21ff      	movs	r1, #255	; 0xff
 800c7a0:	0028      	movs	r0, r5
 800c7a2:	0409      	lsls	r1, r1, #16
 800c7a4:	400c      	ands	r4, r1
 800c7a6:	2704      	movs	r7, #4
 800c7a8:	f009 f95a 	bl	8015a60 <_lv_style_prop_lookup_flags>
 800c7ac:	4007      	ands	r7, r0
 800c7ae:	0028      	movs	r0, r5
 800c7b0:	f009 f956 	bl	8015a60 <_lv_style_prop_lookup_flags>
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	4003      	ands	r3, r0
 800c7b8:	0028      	movs	r0, r5
 800c7ba:	4698      	mov	r8, r3
 800c7bc:	f009 f950 	bl	8015a60 <_lv_style_prop_lookup_flags>
 800c7c0:	4681      	mov	r9, r0
 800c7c2:	0028      	movs	r0, r5
 800c7c4:	f009 f94c 	bl	8015a60 <_lv_style_prop_lookup_flags>
 800c7c8:	4682      	mov	sl, r0
    if(is_layout_refr) {
 800c7ca:	2f00      	cmp	r7, #0
 800c7cc:	d00e      	beq.n	800c7ec <lv_obj_refresh_style.part.0+0x64>
        if(part == LV_PART_ANY ||
 800c7ce:	23f0      	movs	r3, #240	; 0xf0
 800c7d0:	031b      	lsls	r3, r3, #12
 800c7d2:	429c      	cmp	r4, r3
 800c7d4:	d002      	beq.n	800c7dc <lv_obj_refresh_style.part.0+0x54>
 800c7d6:	2c00      	cmp	r4, #0
 800c7d8:	d000      	beq.n	800c7dc <lv_obj_refresh_style.part.0+0x54>
 800c7da:	e083      	b.n	800c8e4 <lv_obj_refresh_style.part.0+0x15c>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 800c7dc:	2200      	movs	r2, #0
 800c7de:	212a      	movs	r1, #42	; 0x2a
 800c7e0:	0030      	movs	r0, r6
 800c7e2:	f7f8 fa25 	bl	8004c30 <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 800c7e6:	0030      	movs	r0, r6
 800c7e8:	f7fc f9c2 	bl	8008b70 <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 800c7ec:	23f0      	movs	r3, #240	; 0xf0
 800c7ee:	031b      	lsls	r3, r3, #12
 800c7f0:	429c      	cmp	r4, r3
 800c7f2:	d001      	beq.n	800c7f8 <lv_obj_refresh_style.part.0+0x70>
 800c7f4:	2c00      	cmp	r4, #0
 800c7f6:	d112      	bne.n	800c81e <lv_obj_refresh_style.part.0+0x96>
 800c7f8:	4b4b      	ldr	r3, [pc, #300]	; (800c928 <lv_obj_refresh_style.part.0+0x1a0>)
 800c7fa:	429d      	cmp	r5, r3
 800c7fc:	d001      	beq.n	800c802 <lv_obj_refresh_style.part.0+0x7a>
 800c7fe:	2f00      	cmp	r7, #0
 800c800:	d006      	beq.n	800c810 <lv_obj_refresh_style.part.0+0x88>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800c802:	0030      	movs	r0, r6
 800c804:	f001 fb0a 	bl	800de1c <lv_obj_get_parent>
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 800c808:	2800      	cmp	r0, #0
 800c80a:	d001      	beq.n	800c810 <lv_obj_refresh_style.part.0+0x88>
 800c80c:	f7fc f9b0 	bl	8008b70 <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800c810:	23f0      	movs	r3, #240	; 0xf0
 800c812:	031b      	lsls	r3, r3, #12
 800c814:	429c      	cmp	r4, r3
 800c816:	d127      	bne.n	800c868 <lv_obj_refresh_style.part.0+0xe0>
 800c818:	4653      	mov	r3, sl
 800c81a:	06db      	lsls	r3, r3, #27
 800c81c:	d429      	bmi.n	800c872 <lv_obj_refresh_style.part.0+0xea>
    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 800c81e:	4b42      	ldr	r3, [pc, #264]	; (800c928 <lv_obj_refresh_style.part.0+0x1a0>)
 800c820:	429d      	cmp	r5, r3
 800c822:	d04d      	beq.n	800c8c0 <lv_obj_refresh_style.part.0+0x138>
 800c824:	4643      	mov	r3, r8
 800c826:	2b00      	cmp	r3, #0
 800c828:	d015      	beq.n	800c856 <lv_obj_refresh_style.part.0+0xce>
        lv_obj_refresh_ext_draw_size(obj);
 800c82a:	0030      	movs	r0, r6
 800c82c:	f7fb ff08 	bl	8008640 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 800c830:	0030      	movs	r0, r6
 800c832:	f7fc fdef 	bl	8009414 <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 800c836:	464b      	mov	r3, r9
 800c838:	07db      	lsls	r3, r3, #31
 800c83a:	d506      	bpl.n	800c84a <lv_obj_refresh_style.part.0+0xc2>
        if(part != LV_PART_SCROLLBAR) {
 800c83c:	2380      	movs	r3, #128	; 0x80
 800c83e:	025b      	lsls	r3, r3, #9
 800c840:	429c      	cmp	r4, r3
 800c842:	d002      	beq.n	800c84a <lv_obj_refresh_style.part.0+0xc2>
            refresh_children_style(obj);
 800c844:	0030      	movs	r0, r6
 800c846:	f7ff fd6f 	bl	800c328 <refresh_children_style>
}
 800c84a:	bcf0      	pop	{r4, r5, r6, r7}
 800c84c:	46bb      	mov	fp, r7
 800c84e:	46b2      	mov	sl, r6
 800c850:	46a9      	mov	r9, r5
 800c852:	46a0      	mov	r8, r4
 800c854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_obj_invalidate(obj);
 800c856:	0030      	movs	r0, r6
 800c858:	f7fc fddc 	bl	8009414 <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 800c85c:	464b      	mov	r3, r9
 800c85e:	07db      	lsls	r3, r3, #31
 800c860:	d5f3      	bpl.n	800c84a <lv_obj_refresh_style.part.0+0xc2>
 800c862:	2f00      	cmp	r7, #0
 800c864:	d0f1      	beq.n	800c84a <lv_obj_refresh_style.part.0+0xc2>
 800c866:	e7e9      	b.n	800c83c <lv_obj_refresh_style.part.0+0xb4>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800c868:	2c00      	cmp	r4, #0
 800c86a:	d1d8      	bne.n	800c81e <lv_obj_refresh_style.part.0+0x96>
 800c86c:	4653      	mov	r3, sl
 800c86e:	06db      	lsls	r3, r3, #27
 800c870:	d5d5      	bpl.n	800c81e <lv_obj_refresh_style.part.0+0x96>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800c872:	226d      	movs	r2, #109	; 0x6d
 800c874:	2100      	movs	r1, #0
 800c876:	0030      	movs	r0, r6
 800c878:	f7ff fea4 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800c87c:	b200      	sxth	r0, r0
    }
}

static lv_layer_type_t calculate_layer_type(lv_obj_t * obj)
{
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800c87e:	2800      	cmp	r0, #0
 800c880:	d125      	bne.n	800c8ce <lv_obj_refresh_style.part.0+0x146>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800c882:	226c      	movs	r2, #108	; 0x6c
 800c884:	2100      	movs	r1, #0
 800c886:	0030      	movs	r0, r6
 800c888:	f7ff fe9c 	bl	800c5c4 <lv_obj_get_style_prop>
    if(lv_obj_get_style_transform_zoom(obj, 0) != 256) return LV_LAYER_TYPE_TRANSFORM;
 800c88c:	2380      	movs	r3, #128	; 0x80
    return (lv_coord_t)v.num;
 800c88e:	b200      	sxth	r0, r0
 800c890:	005b      	lsls	r3, r3, #1
 800c892:	4298      	cmp	r0, r3
 800c894:	d13b      	bne.n	800c90e <lv_obj_refresh_style.part.0+0x186>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800c896:	2260      	movs	r2, #96	; 0x60
 800c898:	2100      	movs	r1, #0
 800c89a:	0030      	movs	r0, r6
 800c89c:	f7ff fe92 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800c8a0:	b2c0      	uxtb	r0, r0
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 800c8a2:	68b2      	ldr	r2, [r6, #8]
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 800c8a4:	28ff      	cmp	r0, #255	; 0xff
 800c8a6:	d037      	beq.n	800c918 <lv_obj_refresh_style.part.0+0x190>
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 800c8a8:	2101      	movs	r1, #1
 800c8aa:	2a00      	cmp	r2, #0
 800c8ac:	d113      	bne.n	800c8d6 <lv_obj_refresh_style.part.0+0x14e>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	469a      	mov	sl, r3
            lv_obj_allocate_spec_attr(obj);
 800c8b2:	0030      	movs	r0, r6
 800c8b4:	f7fb fb4a 	bl	8007f4c <lv_obj_allocate_spec_attr>
            obj->spec_attr->layer_type = layer_type;
 800c8b8:	4653      	mov	r3, sl
 800c8ba:	68b2      	ldr	r2, [r6, #8]
 800c8bc:	0199      	lsls	r1, r3, #6
 800c8be:	e00b      	b.n	800c8d8 <lv_obj_refresh_style.part.0+0x150>
        lv_obj_refresh_ext_draw_size(obj);
 800c8c0:	0030      	movs	r0, r6
 800c8c2:	f7fb febd 	bl	8008640 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 800c8c6:	0030      	movs	r0, r6
 800c8c8:	f7fc fda4 	bl	8009414 <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 800c8cc:	e7b6      	b.n	800c83c <lv_obj_refresh_style.part.0+0xb4>
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 800c8ce:	68b2      	ldr	r2, [r6, #8]
 800c8d0:	2102      	movs	r1, #2
 800c8d2:	2a00      	cmp	r2, #0
 800c8d4:	d024      	beq.n	800c920 <lv_obj_refresh_style.part.0+0x198>
 800c8d6:	0189      	lsls	r1, r1, #6
            obj->spec_attr->layer_type = layer_type;
 800c8d8:	233f      	movs	r3, #63	; 0x3f
 800c8da:	7e90      	ldrb	r0, [r2, #26]
 800c8dc:	4003      	ands	r3, r0
 800c8de:	430b      	orrs	r3, r1
 800c8e0:	7693      	strb	r3, [r2, #26]
 800c8e2:	e79c      	b.n	800c81e <lv_obj_refresh_style.part.0+0x96>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800c8e4:	2204      	movs	r2, #4
 800c8e6:	2100      	movs	r1, #0
 800c8e8:	0030      	movs	r0, r6
 800c8ea:	f7ff fe6b 	bl	800c5c4 <lv_obj_get_style_prop>
           part == LV_PART_MAIN ||
 800c8ee:	4b0f      	ldr	r3, [pc, #60]	; (800c92c <lv_obj_refresh_style.part.0+0x1a4>)
    return (lv_coord_t)v.num;
 800c8f0:	b200      	sxth	r0, r0
 800c8f2:	469b      	mov	fp, r3
 800c8f4:	4298      	cmp	r0, r3
 800c8f6:	d100      	bne.n	800c8fa <lv_obj_refresh_style.part.0+0x172>
 800c8f8:	e770      	b.n	800c7dc <lv_obj_refresh_style.part.0+0x54>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	0030      	movs	r0, r6
 800c900:	f7ff fe60 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800c904:	b200      	sxth	r0, r0
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800c906:	4558      	cmp	r0, fp
 800c908:	d000      	beq.n	800c90c <lv_obj_refresh_style.part.0+0x184>
 800c90a:	e788      	b.n	800c81e <lv_obj_refresh_style.part.0+0x96>
 800c90c:	e766      	b.n	800c7dc <lv_obj_refresh_style.part.0+0x54>
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 800c90e:	68b2      	ldr	r2, [r6, #8]
 800c910:	2a00      	cmp	r2, #0
 800c912:	d005      	beq.n	800c920 <lv_obj_refresh_style.part.0+0x198>
 800c914:	2102      	movs	r1, #2
 800c916:	e7de      	b.n	800c8d6 <lv_obj_refresh_style.part.0+0x14e>
 800c918:	2100      	movs	r1, #0
 800c91a:	2a00      	cmp	r2, #0
 800c91c:	d1db      	bne.n	800c8d6 <lv_obj_refresh_style.part.0+0x14e>
 800c91e:	e77e      	b.n	800c81e <lv_obj_refresh_style.part.0+0x96>
 800c920:	2302      	movs	r3, #2
 800c922:	469a      	mov	sl, r3
 800c924:	e7c5      	b.n	800c8b2 <lv_obj_refresh_style.part.0+0x12a>
 800c926:	46c0      	nop			; (mov r8, r8)
 800c928:	0000ffff 	.word	0x0000ffff
 800c92c:	000027d1 	.word	0x000027d1

0800c930 <lv_obj_refresh_style>:
    if(!style_refr) return;
 800c930:	4b03      	ldr	r3, [pc, #12]	; (800c940 <lv_obj_refresh_style+0x10>)
{
 800c932:	b510      	push	{r4, lr}
    if(!style_refr) return;
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d001      	beq.n	800c93e <lv_obj_refresh_style+0xe>
 800c93a:	f7ff ff25 	bl	800c788 <lv_obj_refresh_style.part.0>
}
 800c93e:	bd10      	pop	{r4, pc}
 800c940:	20000070 	.word	0x20000070

0800c944 <lv_obj_add_style>:
{
 800c944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c946:	46ce      	mov	lr, r9
 800c948:	0016      	movs	r6, r2
 800c94a:	4647      	mov	r7, r8
 800c94c:	0004      	movs	r4, r0
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 800c94e:	2300      	movs	r3, #0
{
 800c950:	4689      	mov	r9, r1
 800c952:	b580      	push	{r7, lr}
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 800c954:	0031      	movs	r1, r6
 800c956:	4a37      	ldr	r2, [pc, #220]	; (800ca34 <lv_obj_add_style+0xf0>)
 800c958:	f7ff fc5c 	bl	800c214 <trans_del.isra.0>
    for(i = 0; i < obj->style_cnt; i++) {
 800c95c:	8be3      	ldrh	r3, [r4, #30]
        if(obj->styles[i].is_trans) continue;
 800c95e:	68e0      	ldr	r0, [r4, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800c960:	05db      	lsls	r3, r3, #23
 800c962:	0e9b      	lsrs	r3, r3, #26
 800c964:	d05f      	beq.n	800ca26 <lv_obj_add_style+0xe2>
 800c966:	0002      	movs	r2, r0
 800c968:	2500      	movs	r5, #0
        if(obj->styles[i].is_local) continue;
 800c96a:	2703      	movs	r7, #3
        if(obj->styles[i].is_trans) continue;
 800c96c:	00e9      	lsls	r1, r5, #3
 800c96e:	4688      	mov	r8, r1
        if(obj->styles[i].is_local) continue;
 800c970:	79d1      	ldrb	r1, [r2, #7]
 800c972:	420f      	tst	r7, r1
 800c974:	d00a      	beq.n	800c98c <lv_obj_add_style+0x48>
    for(i = 0; i < obj->style_cnt; i++) {
 800c976:	3501      	adds	r5, #1
 800c978:	3208      	adds	r2, #8
 800c97a:	429d      	cmp	r5, r3
 800c97c:	d3f6      	bcc.n	800c96c <lv_obj_add_style+0x28>
    obj->style_cnt++;
 800c97e:	223f      	movs	r2, #63	; 0x3f
 800c980:	3301      	adds	r3, #1
 800c982:	4013      	ands	r3, r2
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800c984:	00ea      	lsls	r2, r5, #3
 800c986:	4690      	mov	r8, r2
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c988:	00df      	lsls	r7, r3, #3
 800c98a:	e003      	b.n	800c994 <lv_obj_add_style+0x50>
    obj->style_cnt++;
 800c98c:	223f      	movs	r2, #63	; 0x3f
 800c98e:	3301      	adds	r3, #1
 800c990:	4013      	ands	r3, r2
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c992:	00df      	lsls	r7, r3, #3
    obj->style_cnt++;
 800c994:	8be2      	ldrh	r2, [r4, #30]
 800c996:	4928      	ldr	r1, [pc, #160]	; (800ca38 <lv_obj_add_style+0xf4>)
 800c998:	00db      	lsls	r3, r3, #3
 800c99a:	400a      	ands	r2, r1
 800c99c:	4313      	orrs	r3, r2
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c99e:	0039      	movs	r1, r7
    obj->style_cnt++;
 800c9a0:	83e3      	strh	r3, [r4, #30]
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c9a2:	f008 faab 	bl	8014efc <lv_mem_realloc>
    for(j = obj->style_cnt - 1; j > i ; j--) {
 800c9a6:	8be3      	ldrh	r3, [r4, #30]
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c9a8:	0007      	movs	r7, r0
    for(j = obj->style_cnt - 1; j > i ; j--) {
 800c9aa:	05db      	lsls	r3, r3, #23
 800c9ac:	0e9b      	lsrs	r3, r3, #26
 800c9ae:	1e59      	subs	r1, r3, #1
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800c9b0:	60e0      	str	r0, [r4, #12]
    for(j = obj->style_cnt - 1; j > i ; j--) {
 800c9b2:	42a9      	cmp	r1, r5
 800c9b4:	d911      	bls.n	800c9da <lv_obj_add_style+0x96>
        obj->styles[j] = obj->styles[j - 1];
 800c9b6:	1e9a      	subs	r2, r3, #2
 800c9b8:	4694      	mov	ip, r2
 800c9ba:	2000      	movs	r0, #0
 800c9bc:	00ca      	lsls	r2, r1, #3
 800c9be:	4565      	cmp	r5, ip
 800c9c0:	d92a      	bls.n	800ca18 <lv_obj_add_style+0xd4>
 800c9c2:	2308      	movs	r3, #8
 800c9c4:	4565      	cmp	r5, ip
 800c9c6:	d924      	bls.n	800ca12 <lv_obj_add_style+0xce>
 800c9c8:	0011      	movs	r1, r2
 800c9ca:	3908      	subs	r1, #8
 800c9cc:	1809      	adds	r1, r1, r0
 800c9ce:	1880      	adds	r0, r0, r2
 800c9d0:	1879      	adds	r1, r7, r1
 800c9d2:	001a      	movs	r2, r3
 800c9d4:	1838      	adds	r0, r7, r0
 800c9d6:	f00e fd8c 	bl	801b4f2 <memmove>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800c9da:	0038      	movs	r0, r7
 800c9dc:	2108      	movs	r1, #8
 800c9de:	4440      	add	r0, r8
 800c9e0:	f008 fdd0 	bl	8015584 <lv_memset_00>
    obj->styles[i].style = style;
 800c9e4:	464a      	mov	r2, r9
 800c9e6:	68e3      	ldr	r3, [r4, #12]
    obj->styles[i].selector = selector;
 800c9e8:	0231      	lsls	r1, r6, #8
    obj->styles[i].style = style;
 800c9ea:	4443      	add	r3, r8
 800c9ec:	601a      	str	r2, [r3, #0]
    obj->styles[i].selector = selector;
 800c9ee:	79da      	ldrb	r2, [r3, #7]
 800c9f0:	0a09      	lsrs	r1, r1, #8
 800c9f2:	0612      	lsls	r2, r2, #24
 800c9f4:	430a      	orrs	r2, r1
 800c9f6:	605a      	str	r2, [r3, #4]
    if(!style_refr) return;
 800c9f8:	4b10      	ldr	r3, [pc, #64]	; (800ca3c <lv_obj_add_style+0xf8>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d004      	beq.n	800ca0a <lv_obj_add_style+0xc6>
 800ca00:	0031      	movs	r1, r6
 800ca02:	0020      	movs	r0, r4
 800ca04:	4a0b      	ldr	r2, [pc, #44]	; (800ca34 <lv_obj_add_style+0xf0>)
 800ca06:	f7ff febf 	bl	800c788 <lv_obj_refresh_style.part.0>
}
 800ca0a:	bcc0      	pop	{r6, r7}
 800ca0c:	46b9      	mov	r9, r7
 800ca0e:	46b0      	mov	r8, r6
 800ca10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        obj->styles[j] = obj->styles[j - 1];
 800ca12:	1b4b      	subs	r3, r1, r5
 800ca14:	00db      	lsls	r3, r3, #3
 800ca16:	e7d7      	b.n	800c9c8 <lv_obj_add_style+0x84>
 800ca18:	1aeb      	subs	r3, r5, r3
 800ca1a:	3302      	adds	r3, #2
 800ca1c:	00d8      	lsls	r0, r3, #3
 800ca1e:	2308      	movs	r3, #8
 800ca20:	4565      	cmp	r5, ip
 800ca22:	d8d1      	bhi.n	800c9c8 <lv_obj_add_style+0x84>
 800ca24:	e7f5      	b.n	800ca12 <lv_obj_add_style+0xce>
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800ca26:	2300      	movs	r3, #0
    for(i = 0; i < obj->style_cnt; i++) {
 800ca28:	2500      	movs	r5, #0
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800ca2a:	4698      	mov	r8, r3
 800ca2c:	2708      	movs	r7, #8
 800ca2e:	3301      	adds	r3, #1
 800ca30:	e7b0      	b.n	800c994 <lv_obj_add_style+0x50>
 800ca32:	46c0      	nop			; (mov r8, r8)
 800ca34:	0000ffff 	.word	0x0000ffff
 800ca38:	fffffe07 	.word	0xfffffe07
 800ca3c:	20000070 	.word	0x20000070

0800ca40 <trans_anim_cb>:
{
 800ca40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca42:	46ce      	mov	lr, r9
 800ca44:	4647      	mov	r7, r8
    lv_obj_t * obj = tr->obj;
 800ca46:	6806      	ldr	r6, [r0, #0]
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	0005      	movs	r5, r0
    for(i = 0; i < obj->style_cnt; i++) {
 800ca4c:	8bf0      	ldrh	r0, [r6, #30]
{
 800ca4e:	4689      	mov	r9, r1
    for(i = 0; i < obj->style_cnt; i++) {
 800ca50:	05c0      	lsls	r0, r0, #23
{
 800ca52:	b083      	sub	sp, #12
    for(i = 0; i < obj->style_cnt; i++) {
 800ca54:	0e80      	lsrs	r0, r0, #26
 800ca56:	d01c      	beq.n	800ca92 <trans_anim_cb+0x52>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 800ca58:	2302      	movs	r3, #2
    for(i = 0; i < obj->style_cnt; i++) {
 800ca5a:	2200      	movs	r2, #0
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 800ca5c:	469c      	mov	ip, r3
 800ca5e:	68f4      	ldr	r4, [r6, #12]
 800ca60:	4661      	mov	r1, ip
 800ca62:	79e3      	ldrb	r3, [r4, #7]
 800ca64:	00d7      	lsls	r7, r2, #3
 800ca66:	4219      	tst	r1, r3
 800ca68:	d00f      	beq.n	800ca8a <trans_anim_cb+0x4a>
 800ca6a:	6863      	ldr	r3, [r4, #4]
 800ca6c:	68a9      	ldr	r1, [r5, #8]
 800ca6e:	021b      	lsls	r3, r3, #8
 800ca70:	0a1b      	lsrs	r3, r3, #8
 800ca72:	428b      	cmp	r3, r1
 800ca74:	d109      	bne.n	800ca8a <trans_anim_cb+0x4a>
        switch(tr->prop) {
 800ca76:	88a8      	ldrh	r0, [r5, #4]
 800ca78:	0003      	movs	r3, r0
 800ca7a:	3b20      	subs	r3, #32
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	2b47      	cmp	r3, #71	; 0x47
 800ca80:	d82f      	bhi.n	800cae2 <trans_anim_cb+0xa2>
 800ca82:	4a3b      	ldr	r2, [pc, #236]	; (800cb70 <trans_anim_cb+0x130>)
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	58d3      	ldr	r3, [r2, r3]
 800ca88:	469f      	mov	pc, r3
    for(i = 0; i < obj->style_cnt; i++) {
 800ca8a:	3201      	adds	r2, #1
 800ca8c:	3408      	adds	r4, #8
 800ca8e:	4282      	cmp	r2, r0
 800ca90:	d3e6      	bcc.n	800ca60 <trans_anim_cb+0x20>
}
 800ca92:	b003      	add	sp, #12
 800ca94:	bcc0      	pop	{r6, r7}
 800ca96:	46b9      	mov	r9, r7
 800ca98:	46b0      	mov	r8, r6
 800ca9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 800ca9c:	464b      	mov	r3, r9
 800ca9e:	2bfe      	cmp	r3, #254	; 0xfe
 800caa0:	dc1c      	bgt.n	800cadc <trans_anim_cb+0x9c>
 800caa2:	68eb      	ldr	r3, [r5, #12]
 800caa4:	4698      	mov	r8, r3
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 800caa6:	6823      	ldr	r3, [r4, #0]
 800caa8:	0001      	movs	r1, r0
 800caaa:	aa01      	add	r2, sp, #4
 800caac:	0018      	movs	r0, r3
 800caae:	f008 ff73 	bl	8015998 <lv_style_get_prop>
 800cab2:	2800      	cmp	r0, #0
 800cab4:	d002      	beq.n	800cabc <trans_anim_cb+0x7c>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800cab6:	9b01      	ldr	r3, [sp, #4]
 800cab8:	4598      	cmp	r8, r3
 800caba:	d051      	beq.n	800cb60 <trans_anim_cb+0x120>
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 800cabc:	68f3      	ldr	r3, [r6, #12]
 800cabe:	4642      	mov	r2, r8
 800cac0:	59d8      	ldr	r0, [r3, r7]
 800cac2:	88a9      	ldrh	r1, [r5, #4]
 800cac4:	f008 feb2 	bl	801582c <lv_style_set_prop>
    if(!style_refr) return;
 800cac8:	4b2a      	ldr	r3, [pc, #168]	; (800cb74 <trans_anim_cb+0x134>)
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d0e0      	beq.n	800ca92 <trans_anim_cb+0x52>
 800cad0:	88aa      	ldrh	r2, [r5, #4]
 800cad2:	68a9      	ldr	r1, [r5, #8]
 800cad4:	6828      	ldr	r0, [r5, #0]
 800cad6:	f7ff fe57 	bl	800c788 <lv_obj_refresh_style.part.0>
}
 800cada:	e7da      	b.n	800ca92 <trans_anim_cb+0x52>
                else value_final.ptr = tr->end_value.ptr;
 800cadc:	692b      	ldr	r3, [r5, #16]
 800cade:	4698      	mov	r8, r3
 800cae0:	e7e1      	b.n	800caa6 <trans_anim_cb+0x66>
                if(v == 0) value_final.num = tr->start_value.num;
 800cae2:	464b      	mov	r3, r9
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d0dc      	beq.n	800caa2 <trans_anim_cb+0x62>
                else if(v == 255) value_final.num = tr->end_value.num;
 800cae8:	2bff      	cmp	r3, #255	; 0xff
 800caea:	d0f7      	beq.n	800cadc <trans_anim_cb+0x9c>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 800caec:	4649      	mov	r1, r9
 800caee:	68eb      	ldr	r3, [r5, #12]
 800caf0:	692a      	ldr	r2, [r5, #16]
 800caf2:	1ad2      	subs	r2, r2, r3
 800caf4:	4351      	muls	r1, r2
 800caf6:	1209      	asrs	r1, r1, #8
 800caf8:	4688      	mov	r8, r1
 800cafa:	4498      	add	r8, r3
 800cafc:	e7d3      	b.n	800caa6 <trans_anim_cb+0x66>
                if(v <= 0) value_final.color = tr->start_value.color;
 800cafe:	464b      	mov	r3, r9
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	dd10      	ble.n	800cb26 <trans_anim_cb+0xe6>
                else if(v >= 255) value_final.color = tr->end_value.color;
 800cb04:	2bfe      	cmp	r3, #254	; 0xfe
 800cb06:	dd11      	ble.n	800cb2c <trans_anim_cb+0xec>
 800cb08:	8a2b      	ldrh	r3, [r5, #16]
 800cb0a:	4698      	mov	r8, r3
 800cb0c:	e7cb      	b.n	800caa6 <trans_anim_cb+0x66>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 800cb0e:	68eb      	ldr	r3, [r5, #12]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d0e3      	beq.n	800cadc <trans_anim_cb+0x9c>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 800cb14:	692a      	ldr	r2, [r5, #16]
 800cb16:	2a00      	cmp	r2, #0
 800cb18:	d003      	beq.n	800cb22 <trans_anim_cb+0xe2>
                else value_final.ptr = tr->end_value.ptr;
 800cb1a:	4690      	mov	r8, r2
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 800cb1c:	464a      	mov	r2, r9
 800cb1e:	2a7f      	cmp	r2, #127	; 0x7f
 800cb20:	dcc1      	bgt.n	800caa6 <trans_anim_cb+0x66>
 800cb22:	4698      	mov	r8, r3
 800cb24:	e7bf      	b.n	800caa6 <trans_anim_cb+0x66>
                if(v <= 0) value_final.color = tr->start_value.color;
 800cb26:	89ab      	ldrh	r3, [r5, #12]
 800cb28:	4698      	mov	r8, r3
 800cb2a:	e7bc      	b.n	800caa6 <trans_anim_cb+0x66>
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0 && LV_COLOR_MIX_ROUND_OFS == 0
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800cb2c:	89aa      	ldrh	r2, [r5, #12]
 800cb2e:	0413      	lsls	r3, r2, #16
 800cb30:	4313      	orrs	r3, r2
 800cb32:	4a11      	ldr	r2, [pc, #68]	; (800cb78 <trans_anim_cb+0x138>)
 800cb34:	4013      	ands	r3, r2
 800cb36:	4698      	mov	r8, r3
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800cb38:	8a2b      	ldrh	r3, [r5, #16]
 800cb3a:	469c      	mov	ip, r3
 800cb3c:	4661      	mov	r1, ip
 800cb3e:	041b      	lsls	r3, r3, #16
 800cb40:	430b      	orrs	r3, r1
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800cb42:	4641      	mov	r1, r8
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800cb44:	4013      	ands	r3, r2
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800cb46:	1a5b      	subs	r3, r3, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800cb48:	4649      	mov	r1, r9
 800cb4a:	3104      	adds	r1, #4
 800cb4c:	08c9      	lsrs	r1, r1, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800cb4e:	434b      	muls	r3, r1
 800cb50:	095b      	lsrs	r3, r3, #5
 800cb52:	4443      	add	r3, r8
 800cb54:	4013      	ands	r3, r2
    ret.full = (uint16_t)((result >> 16) | result);
 800cb56:	0c1a      	lsrs	r2, r3, #16
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	4698      	mov	r8, r3
 800cb5e:	e7a2      	b.n	800caa6 <trans_anim_cb+0x66>
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 800cb60:	68f3      	ldr	r3, [r6, #12]
 800cb62:	4642      	mov	r2, r8
 800cb64:	88a9      	ldrh	r1, [r5, #4]
 800cb66:	59d8      	ldr	r0, [r3, r7]
 800cb68:	f008 fe60 	bl	801582c <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800cb6c:	e791      	b.n	800ca92 <trans_anim_cb+0x52>
 800cb6e:	46c0      	nop			; (mov r8, r8)
 800cb70:	0801b740 	.word	0x0801b740
 800cb74:	20000070 	.word	0x20000070
 800cb78:	07e0f81f 	.word	0x07e0f81f

0800cb7c <lv_obj_remove_style>:
{
 800cb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb7e:	46de      	mov	lr, fp
 800cb80:	4657      	mov	r7, sl
 800cb82:	464e      	mov	r6, r9
 800cb84:	4645      	mov	r5, r8
    return selector & 0xFFFF;
 800cb86:	b293      	uxth	r3, r2
{
 800cb88:	b5e0      	push	{r5, r6, r7, lr}
 800cb8a:	0017      	movs	r7, r2
    return selector & 0xFF0000;
 800cb8c:	22ff      	movs	r2, #255	; 0xff
 800cb8e:	0412      	lsls	r2, r2, #16
{
 800cb90:	4681      	mov	r9, r0
 800cb92:	468b      	mov	fp, r1
    return selector & 0xFFFF;
 800cb94:	4698      	mov	r8, r3
{
 800cb96:	b083      	sub	sp, #12
    return selector & 0xFF0000;
 800cb98:	4017      	ands	r7, r2
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 800cb9a:	2900      	cmp	r1, #0
 800cb9c:	d100      	bne.n	800cba0 <lv_obj_remove_style+0x24>
 800cb9e:	e089      	b.n	800ccb4 <lv_obj_remove_style+0x138>
 800cba0:	79cb      	ldrb	r3, [r1, #7]
 800cba2:	1e5a      	subs	r2, r3, #1
 800cba4:	4193      	sbcs	r3, r2
 800cba6:	425b      	negs	r3, r3
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	9301      	str	r3, [sp, #4]
    while(i <  obj->style_cnt) {
 800cbac:	464b      	mov	r3, r9
 800cbae:	8bd9      	ldrh	r1, [r3, #30]
 800cbb0:	05c9      	lsls	r1, r1, #23
 800cbb2:	0e89      	lsrs	r1, r1, #26
 800cbb4:	d02f      	beq.n	800cc16 <lv_obj_remove_style+0x9a>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800cbb6:	68de      	ldr	r6, [r3, #12]
    bool deleted = false;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	469c      	mov	ip, r3
        if((state != LV_STATE_ANY && state_act != state) ||
 800cbbc:	4b42      	ldr	r3, [pc, #264]	; (800ccc8 <lv_obj_remove_style+0x14c>)
    uint32_t i = 0;
 800cbbe:	2400      	movs	r4, #0
        if((state != LV_STATE_ANY && state_act != state) ||
 800cbc0:	469a      	mov	sl, r3
        if(obj->styles[i].is_trans) {
 800cbc2:	465b      	mov	r3, fp
 800cbc4:	46bb      	mov	fp, r7
 800cbc6:	4647      	mov	r7, r8
 800cbc8:	4698      	mov	r8, r3
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800cbca:	00e5      	lsls	r5, r4, #3
 800cbcc:	1972      	adds	r2, r6, r5
 800cbce:	6853      	ldr	r3, [r2, #4]
 800cbd0:	021b      	lsls	r3, r3, #8
 800cbd2:	0a1b      	lsrs	r3, r3, #8
        if((state != LV_STATE_ANY && state_act != state) ||
 800cbd4:	4557      	cmp	r7, sl
 800cbd6:	d002      	beq.n	800cbde <lv_obj_remove_style+0x62>
 800cbd8:	b298      	uxth	r0, r3
 800cbda:	42b8      	cmp	r0, r7
 800cbdc:	d10e      	bne.n	800cbfc <lv_obj_remove_style+0x80>
 800cbde:	20f0      	movs	r0, #240	; 0xf0
 800cbe0:	0300      	lsls	r0, r0, #12
 800cbe2:	4583      	cmp	fp, r0
 800cbe4:	d004      	beq.n	800cbf0 <lv_obj_remove_style+0x74>
    return selector & 0xFF0000;
 800cbe6:	20ff      	movs	r0, #255	; 0xff
 800cbe8:	0400      	lsls	r0, r0, #16
 800cbea:	4003      	ands	r3, r0
           (part != LV_PART_ANY && part_act != part) ||
 800cbec:	455b      	cmp	r3, fp
 800cbee:	d105      	bne.n	800cbfc <lv_obj_remove_style+0x80>
 800cbf0:	4643      	mov	r3, r8
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d016      	beq.n	800cc24 <lv_obj_remove_style+0xa8>
           (style != NULL && style != obj->styles[i].style)) {
 800cbf6:	6813      	ldr	r3, [r2, #0]
 800cbf8:	4543      	cmp	r3, r8
 800cbfa:	d013      	beq.n	800cc24 <lv_obj_remove_style+0xa8>
            i++;
 800cbfc:	3401      	adds	r4, #1
    while(i <  obj->style_cnt) {
 800cbfe:	42a1      	cmp	r1, r4
 800cc00:	d8e3      	bhi.n	800cbca <lv_obj_remove_style+0x4e>
    if(deleted && prop != LV_STYLE_PROP_INV) {
 800cc02:	4663      	mov	r3, ip
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d006      	beq.n	800cc16 <lv_obj_remove_style+0x9a>
 800cc08:	9b01      	ldr	r3, [sp, #4]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d003      	beq.n	800cc16 <lv_obj_remove_style+0x9a>
    if(!style_refr) return;
 800cc0e:	4b2f      	ldr	r3, [pc, #188]	; (800cccc <lv_obj_remove_style+0x150>)
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d151      	bne.n	800ccba <lv_obj_remove_style+0x13e>
}
 800cc16:	b003      	add	sp, #12
 800cc18:	bcf0      	pop	{r4, r5, r6, r7}
 800cc1a:	46bb      	mov	fp, r7
 800cc1c:	46b2      	mov	sl, r6
 800cc1e:	46a9      	mov	r9, r5
 800cc20:	46a0      	mov	r8, r4
 800cc22:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(obj->styles[i].is_trans) {
 800cc24:	2102      	movs	r1, #2
 800cc26:	79d3      	ldrb	r3, [r2, #7]
 800cc28:	4219      	tst	r1, r3
 800cc2a:	d138      	bne.n	800cc9e <lv_obj_remove_style+0x122>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 800cc2c:	079b      	lsls	r3, r3, #30
 800cc2e:	d129      	bne.n	800cc84 <lv_obj_remove_style+0x108>
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800cc30:	464b      	mov	r3, r9
 800cc32:	8bdb      	ldrh	r3, [r3, #30]
 800cc34:	05db      	lsls	r3, r3, #23
 800cc36:	0e9b      	lsrs	r3, r3, #26
 800cc38:	1e5a      	subs	r2, r3, #1
 800cc3a:	9300      	str	r3, [sp, #0]
 800cc3c:	42a2      	cmp	r2, r4
 800cc3e:	d907      	bls.n	800cc50 <lv_obj_remove_style+0xd4>
            obj->styles[j] = obj->styles[j + 1];
 800cc40:	0029      	movs	r1, r5
 800cc42:	1b12      	subs	r2, r2, r4
 800cc44:	3108      	adds	r1, #8
 800cc46:	00d2      	lsls	r2, r2, #3
 800cc48:	1871      	adds	r1, r6, r1
 800cc4a:	1970      	adds	r0, r6, r5
 800cc4c:	f00e fc51 	bl	801b4f2 <memmove>
        obj->style_cnt--;
 800cc50:	233f      	movs	r3, #63	; 0x3f
 800cc52:	0019      	movs	r1, r3
 800cc54:	9a00      	ldr	r2, [sp, #0]
 800cc56:	481e      	ldr	r0, [pc, #120]	; (800ccd0 <lv_obj_remove_style+0x154>)
 800cc58:	323f      	adds	r2, #63	; 0x3f
 800cc5a:	4011      	ands	r1, r2
 800cc5c:	464a      	mov	r2, r9
 800cc5e:	8bd2      	ldrh	r2, [r2, #30]
 800cc60:	00cb      	lsls	r3, r1, #3
 800cc62:	4002      	ands	r2, r0
 800cc64:	4313      	orrs	r3, r2
 800cc66:	464a      	mov	r2, r9
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800cc68:	0030      	movs	r0, r6
        obj->style_cnt--;
 800cc6a:	83d3      	strh	r3, [r2, #30]
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800cc6c:	00c9      	lsls	r1, r1, #3
 800cc6e:	f008 f945 	bl	8014efc <lv_mem_realloc>
 800cc72:	464b      	mov	r3, r9
    while(i <  obj->style_cnt) {
 800cc74:	8bd9      	ldrh	r1, [r3, #30]
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800cc76:	60d8      	str	r0, [r3, #12]
        deleted = true;
 800cc78:	2301      	movs	r3, #1
    while(i <  obj->style_cnt) {
 800cc7a:	05c9      	lsls	r1, r1, #23
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800cc7c:	0006      	movs	r6, r0
        deleted = true;
 800cc7e:	469c      	mov	ip, r3
    while(i <  obj->style_cnt) {
 800cc80:	0e89      	lsrs	r1, r1, #26
 800cc82:	e7bc      	b.n	800cbfe <lv_obj_remove_style+0x82>
            lv_style_reset(obj->styles[i].style);
 800cc84:	6810      	ldr	r0, [r2, #0]
 800cc86:	f008 fd57 	bl	8015738 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 800cc8a:	464b      	mov	r3, r9
 800cc8c:	68db      	ldr	r3, [r3, #12]
 800cc8e:	5958      	ldr	r0, [r3, r5]
 800cc90:	f008 f918 	bl	8014ec4 <lv_mem_free>
            obj->styles[i].style = NULL;
 800cc94:	464b      	mov	r3, r9
 800cc96:	68de      	ldr	r6, [r3, #12]
 800cc98:	2300      	movs	r3, #0
 800cc9a:	5173      	str	r3, [r6, r5]
 800cc9c:	e7c8      	b.n	800cc30 <lv_obj_remove_style+0xb4>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 800cc9e:	2300      	movs	r3, #0
 800cca0:	4a09      	ldr	r2, [pc, #36]	; (800ccc8 <lv_obj_remove_style+0x14c>)
 800cca2:	4659      	mov	r1, fp
 800cca4:	4648      	mov	r0, r9
 800cca6:	f7ff fab5 	bl	800c214 <trans_del.isra.0>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 800ccaa:	464b      	mov	r3, r9
 800ccac:	68de      	ldr	r6, [r3, #12]
 800ccae:	1972      	adds	r2, r6, r5
 800ccb0:	79d3      	ldrb	r3, [r2, #7]
 800ccb2:	e7bb      	b.n	800cc2c <lv_obj_remove_style+0xb0>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 800ccb4:	4b04      	ldr	r3, [pc, #16]	; (800ccc8 <lv_obj_remove_style+0x14c>)
 800ccb6:	9301      	str	r3, [sp, #4]
 800ccb8:	e778      	b.n	800cbac <lv_obj_remove_style+0x30>
 800ccba:	4659      	mov	r1, fp
 800ccbc:	4648      	mov	r0, r9
 800ccbe:	4a02      	ldr	r2, [pc, #8]	; (800ccc8 <lv_obj_remove_style+0x14c>)
 800ccc0:	f7ff fd62 	bl	800c788 <lv_obj_refresh_style.part.0>
}
 800ccc4:	e7a7      	b.n	800cc16 <lv_obj_remove_style+0x9a>
 800ccc6:	46c0      	nop			; (mov r8, r8)
 800ccc8:	0000ffff 	.word	0x0000ffff
 800cccc:	20000070 	.word	0x20000070
 800ccd0:	fffffe07 	.word	0xfffffe07

0800ccd4 <trans_anim_ready_cb>:
{
 800ccd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd6:	46ce      	mov	lr, r9
 800ccd8:	4647      	mov	r7, r8
 800ccda:	b580      	push	{r7, lr}
    trans_t * tr = a->var;
 800ccdc:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800ccde:	4d2c      	ldr	r5, [pc, #176]	; (800cd90 <trans_anim_ready_cb+0xbc>)
    lv_obj_t * obj = tr->obj;
 800cce0:	6823      	ldr	r3, [r4, #0]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800cce2:	0028      	movs	r0, r5
    lv_obj_t * obj = tr->obj;
 800cce4:	4699      	mov	r9, r3
    lv_style_prop_t prop = tr->prop;
 800cce6:	88a3      	ldrh	r3, [r4, #4]
 800cce8:	4698      	mov	r8, r3
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800ccea:	f008 f819 	bl	8014d20 <_lv_ll_get_head>
 800ccee:	1e01      	subs	r1, r0, #0
 800ccf0:	d105      	bne.n	800ccfe <trans_anim_ready_cb+0x2a>
 800ccf2:	e016      	b.n	800cd22 <trans_anim_ready_cb+0x4e>
 800ccf4:	0028      	movs	r0, r5
 800ccf6:	f008 f81f 	bl	8014d38 <_lv_ll_get_next>
 800ccfa:	1e01      	subs	r1, r0, #0
 800ccfc:	d011      	beq.n	800cd22 <trans_anim_ready_cb+0x4e>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 800ccfe:	428c      	cmp	r4, r1
 800cd00:	d0f8      	beq.n	800ccf4 <trans_anim_ready_cb+0x20>
 800cd02:	680b      	ldr	r3, [r1, #0]
 800cd04:	6822      	ldr	r2, [r4, #0]
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d1f4      	bne.n	800ccf4 <trans_anim_ready_cb+0x20>
 800cd0a:	688b      	ldr	r3, [r1, #8]
 800cd0c:	68a2      	ldr	r2, [r4, #8]
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d1f0      	bne.n	800ccf4 <trans_anim_ready_cb+0x20>
 800cd12:	888a      	ldrh	r2, [r1, #4]
 800cd14:	88a3      	ldrh	r3, [r4, #4]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d1ec      	bne.n	800ccf4 <trans_anim_ready_cb+0x20>
}
 800cd1a:	bcc0      	pop	{r6, r7}
 800cd1c:	46b9      	mov	r9, r7
 800cd1e:	46b0      	mov	r8, r6
 800cd20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for(i = 0; i < obj->style_cnt; i++) {
 800cd22:	464b      	mov	r3, r9
 800cd24:	8bd8      	ldrh	r0, [r3, #30]
 800cd26:	05c0      	lsls	r0, r0, #23
 800cd28:	0e80      	lsrs	r0, r0, #26
 800cd2a:	d0f6      	beq.n	800cd1a <trans_anim_ready_cb+0x46>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 800cd2c:	2102      	movs	r1, #2
 800cd2e:	68da      	ldr	r2, [r3, #12]
 800cd30:	468c      	mov	ip, r1
 800cd32:	2300      	movs	r3, #0
 800cd34:	4666      	mov	r6, ip
 800cd36:	79d1      	ldrb	r1, [r2, #7]
 800cd38:	00df      	lsls	r7, r3, #3
 800cd3a:	420e      	tst	r6, r1
 800cd3c:	d005      	beq.n	800cd4a <trans_anim_ready_cb+0x76>
 800cd3e:	6851      	ldr	r1, [r2, #4]
 800cd40:	68a6      	ldr	r6, [r4, #8]
 800cd42:	0209      	lsls	r1, r1, #8
 800cd44:	0a09      	lsrs	r1, r1, #8
 800cd46:	42b1      	cmp	r1, r6
 800cd48:	d004      	beq.n	800cd54 <trans_anim_ready_cb+0x80>
        for(i = 0; i < obj->style_cnt; i++) {
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	3208      	adds	r2, #8
 800cd4e:	4283      	cmp	r3, r0
 800cd50:	d3f0      	bcc.n	800cd34 <trans_anim_ready_cb+0x60>
 800cd52:	e7e2      	b.n	800cd1a <trans_anim_ready_cb+0x46>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800cd54:	0021      	movs	r1, r4
 800cd56:	0028      	movs	r0, r5
 800cd58:	f007 ffb8 	bl	8014ccc <_lv_ll_remove>
                lv_mem_free(tr);
 800cd5c:	0020      	movs	r0, r4
 800cd5e:	f008 f8b1 	bl	8014ec4 <lv_mem_free>
                _lv_obj_style_t * obj_style = &obj->styles[i];
 800cd62:	464b      	mov	r3, r9
 800cd64:	68db      	ldr	r3, [r3, #12]
                lv_style_remove_prop(obj_style->style, prop);
 800cd66:	4641      	mov	r1, r8
                _lv_obj_style_t * obj_style = &obj->styles[i];
 800cd68:	19dc      	adds	r4, r3, r7
                lv_style_remove_prop(obj_style->style, prop);
 800cd6a:	6820      	ldr	r0, [r4, #0]
 800cd6c:	f008 fcf8 	bl	8015760 <lv_style_remove_prop>
                if(lv_style_is_empty(obj->styles[i].style)) {
 800cd70:	464b      	mov	r3, r9
 800cd72:	68db      	ldr	r3, [r3, #12]
 800cd74:	59d8      	ldr	r0, [r3, r7]
 800cd76:	f008 fe65 	bl	8015a44 <lv_style_is_empty>
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	d0cd      	beq.n	800cd1a <trans_anim_ready_cb+0x46>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 800cd7e:	6863      	ldr	r3, [r4, #4]
 800cd80:	4648      	mov	r0, r9
 800cd82:	021a      	lsls	r2, r3, #8
 800cd84:	6821      	ldr	r1, [r4, #0]
 800cd86:	0a12      	lsrs	r2, r2, #8
 800cd88:	f7ff fef8 	bl	800cb7c <lv_obj_remove_style>
 800cd8c:	e7c5      	b.n	800cd1a <trans_anim_ready_cb+0x46>
 800cd8e:	46c0      	nop			; (mov r8, r8)
 800cd90:	20000638 	.word	0x20000638

0800cd94 <report_style_change_core>:
{
 800cd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd96:	4657      	mov	r7, sl
 800cd98:	464e      	mov	r6, r9
 800cd9a:	46de      	mov	lr, fp
 800cd9c:	4645      	mov	r5, r8
 800cd9e:	b5e0      	push	{r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 800cda0:	8bcb      	ldrh	r3, [r1, #30]
{
 800cda2:	0007      	movs	r7, r0
    for(i = 0; i < obj->style_cnt; i++) {
 800cda4:	05db      	lsls	r3, r3, #23
{
 800cda6:	4689      	mov	r9, r1
 800cda8:	b095      	sub	sp, #84	; 0x54
    for(i = 0; i < obj->style_cnt; i++) {
 800cdaa:	0e9b      	lsrs	r3, r3, #26
 800cdac:	d010      	beq.n	800cdd0 <report_style_change_core+0x3c>
        if(style == NULL || obj->styles[i].style == style) {
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	d009      	beq.n	800cdc6 <report_style_change_core+0x32>
    for(i = 0; i < obj->style_cnt; i++) {
 800cdb2:	2200      	movs	r2, #0
        if(style == NULL || obj->styles[i].style == style) {
 800cdb4:	68c9      	ldr	r1, [r1, #12]
 800cdb6:	e002      	b.n	800cdbe <report_style_change_core+0x2a>
    for(i = 0; i < obj->style_cnt; i++) {
 800cdb8:	3201      	adds	r2, #1
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d208      	bcs.n	800cdd0 <report_style_change_core+0x3c>
        if(style == NULL || obj->styles[i].style == style) {
 800cdbe:	00d0      	lsls	r0, r2, #3
 800cdc0:	5808      	ldr	r0, [r1, r0]
 800cdc2:	42b8      	cmp	r0, r7
 800cdc4:	d1f8      	bne.n	800cdb8 <report_style_change_core+0x24>
    if(!style_refr) return;
 800cdc6:	4bab      	ldr	r3, [pc, #684]	; (800d074 <report_style_change_core+0x2e0>)
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d000      	beq.n	800cdd0 <report_style_change_core+0x3c>
 800cdce:	e1bd      	b.n	800d14c <report_style_change_core+0x3b8>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800cdd0:	4648      	mov	r0, r9
 800cdd2:	f001 f839 	bl	800de48 <lv_obj_get_child_cnt>
 800cdd6:	900b      	str	r0, [sp, #44]	; 0x2c
    for(i = 0; i < child_cnt; i++) {
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	d100      	bne.n	800cdde <report_style_change_core+0x4a>
 800cddc:	e1ad      	b.n	800d13a <report_style_change_core+0x3a6>
 800cdde:	2300      	movs	r3, #0
 800cde0:	9304      	str	r3, [sp, #16]
    if(!style_refr) return;
 800cde2:	464b      	mov	r3, r9
 800cde4:	930f      	str	r3, [sp, #60]	; 0x3c
        report_style_change_core(style, obj->spec_attr->children[i]);
 800cde6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cde8:	9a04      	ldr	r2, [sp, #16]
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	0092      	lsls	r2, r2, #2
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	58d3      	ldr	r3, [r2, r3]
 800cdf2:	4699      	mov	r9, r3
    for(i = 0; i < obj->style_cnt; i++) {
 800cdf4:	8bdb      	ldrh	r3, [r3, #30]
 800cdf6:	05db      	lsls	r3, r3, #23
 800cdf8:	0e9b      	lsrs	r3, r3, #26
 800cdfa:	d016      	beq.n	800ce2a <report_style_change_core+0x96>
        if(style == NULL || obj->styles[i].style == style) {
 800cdfc:	2f00      	cmp	r7, #0
 800cdfe:	d00a      	beq.n	800ce16 <report_style_change_core+0x82>
 800ce00:	464a      	mov	r2, r9
 800ce02:	68d1      	ldr	r1, [r2, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800ce04:	2200      	movs	r2, #0
 800ce06:	e002      	b.n	800ce0e <report_style_change_core+0x7a>
 800ce08:	3201      	adds	r2, #1
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d20d      	bcs.n	800ce2a <report_style_change_core+0x96>
        if(style == NULL || obj->styles[i].style == style) {
 800ce0e:	00d0      	lsls	r0, r2, #3
 800ce10:	5808      	ldr	r0, [r1, r0]
 800ce12:	4287      	cmp	r7, r0
 800ce14:	d1f8      	bne.n	800ce08 <report_style_change_core+0x74>
    if(!style_refr) return;
 800ce16:	4b97      	ldr	r3, [pc, #604]	; (800d074 <report_style_change_core+0x2e0>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d005      	beq.n	800ce2a <report_style_change_core+0x96>
 800ce1e:	21f0      	movs	r1, #240	; 0xf0
 800ce20:	4648      	mov	r0, r9
 800ce22:	4a95      	ldr	r2, [pc, #596]	; (800d078 <report_style_change_core+0x2e4>)
 800ce24:	0309      	lsls	r1, r1, #12
 800ce26:	f7ff fcaf 	bl	800c788 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800ce2a:	4648      	mov	r0, r9
 800ce2c:	f001 f80c 	bl	800de48 <lv_obj_get_child_cnt>
 800ce30:	900c      	str	r0, [sp, #48]	; 0x30
    for(i = 0; i < child_cnt; i++) {
 800ce32:	2800      	cmp	r0, #0
 800ce34:	d100      	bne.n	800ce38 <report_style_change_core+0xa4>
 800ce36:	e179      	b.n	800d12c <report_style_change_core+0x398>
 800ce38:	2300      	movs	r3, #0
 800ce3a:	9305      	str	r3, [sp, #20]
 800ce3c:	464b      	mov	r3, r9
 800ce3e:	9310      	str	r3, [sp, #64]	; 0x40
        report_style_change_core(style, obj->spec_attr->children[i]);
 800ce40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce42:	9a05      	ldr	r2, [sp, #20]
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	0092      	lsls	r2, r2, #2
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	58d3      	ldr	r3, [r2, r3]
 800ce4c:	4699      	mov	r9, r3
    for(i = 0; i < obj->style_cnt; i++) {
 800ce4e:	8bdb      	ldrh	r3, [r3, #30]
 800ce50:	05db      	lsls	r3, r3, #23
 800ce52:	0e9b      	lsrs	r3, r3, #26
 800ce54:	d016      	beq.n	800ce84 <report_style_change_core+0xf0>
        if(style == NULL || obj->styles[i].style == style) {
 800ce56:	2f00      	cmp	r7, #0
 800ce58:	d00a      	beq.n	800ce70 <report_style_change_core+0xdc>
 800ce5a:	464a      	mov	r2, r9
 800ce5c:	68d1      	ldr	r1, [r2, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800ce5e:	2200      	movs	r2, #0
 800ce60:	e002      	b.n	800ce68 <report_style_change_core+0xd4>
 800ce62:	3201      	adds	r2, #1
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d20d      	bcs.n	800ce84 <report_style_change_core+0xf0>
        if(style == NULL || obj->styles[i].style == style) {
 800ce68:	00d0      	lsls	r0, r2, #3
 800ce6a:	5808      	ldr	r0, [r1, r0]
 800ce6c:	4287      	cmp	r7, r0
 800ce6e:	d1f8      	bne.n	800ce62 <report_style_change_core+0xce>
    if(!style_refr) return;
 800ce70:	4b80      	ldr	r3, [pc, #512]	; (800d074 <report_style_change_core+0x2e0>)
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d005      	beq.n	800ce84 <report_style_change_core+0xf0>
 800ce78:	21f0      	movs	r1, #240	; 0xf0
 800ce7a:	4648      	mov	r0, r9
 800ce7c:	4a7e      	ldr	r2, [pc, #504]	; (800d078 <report_style_change_core+0x2e4>)
 800ce7e:	0309      	lsls	r1, r1, #12
 800ce80:	f7ff fc82 	bl	800c788 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800ce84:	4648      	mov	r0, r9
 800ce86:	f000 ffdf 	bl	800de48 <lv_obj_get_child_cnt>
 800ce8a:	900d      	str	r0, [sp, #52]	; 0x34
    for(i = 0; i < child_cnt; i++) {
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d100      	bne.n	800ce92 <report_style_change_core+0xfe>
 800ce90:	e145      	b.n	800d11e <report_style_change_core+0x38a>
 800ce92:	2300      	movs	r3, #0
 800ce94:	9306      	str	r3, [sp, #24]
 800ce96:	464b      	mov	r3, r9
 800ce98:	9311      	str	r3, [sp, #68]	; 0x44
        report_style_change_core(style, obj->spec_attr->children[i]);
 800ce9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce9c:	9a06      	ldr	r2, [sp, #24]
 800ce9e:	689b      	ldr	r3, [r3, #8]
 800cea0:	0092      	lsls	r2, r2, #2
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	58d3      	ldr	r3, [r2, r3]
 800cea6:	4699      	mov	r9, r3
    for(i = 0; i < obj->style_cnt; i++) {
 800cea8:	8bdb      	ldrh	r3, [r3, #30]
 800ceaa:	05db      	lsls	r3, r3, #23
 800ceac:	0e9b      	lsrs	r3, r3, #26
 800ceae:	d016      	beq.n	800cede <report_style_change_core+0x14a>
        if(style == NULL || obj->styles[i].style == style) {
 800ceb0:	2f00      	cmp	r7, #0
 800ceb2:	d00a      	beq.n	800ceca <report_style_change_core+0x136>
 800ceb4:	464a      	mov	r2, r9
 800ceb6:	68d1      	ldr	r1, [r2, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800ceb8:	2200      	movs	r2, #0
 800ceba:	e002      	b.n	800cec2 <report_style_change_core+0x12e>
 800cebc:	3201      	adds	r2, #1
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d20d      	bcs.n	800cede <report_style_change_core+0x14a>
        if(style == NULL || obj->styles[i].style == style) {
 800cec2:	00d0      	lsls	r0, r2, #3
 800cec4:	5808      	ldr	r0, [r1, r0]
 800cec6:	4287      	cmp	r7, r0
 800cec8:	d1f8      	bne.n	800cebc <report_style_change_core+0x128>
    if(!style_refr) return;
 800ceca:	4b6a      	ldr	r3, [pc, #424]	; (800d074 <report_style_change_core+0x2e0>)
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d005      	beq.n	800cede <report_style_change_core+0x14a>
 800ced2:	21f0      	movs	r1, #240	; 0xf0
 800ced4:	4648      	mov	r0, r9
 800ced6:	4a68      	ldr	r2, [pc, #416]	; (800d078 <report_style_change_core+0x2e4>)
 800ced8:	0309      	lsls	r1, r1, #12
 800ceda:	f7ff fc55 	bl	800c788 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800cede:	4648      	mov	r0, r9
 800cee0:	f000 ffb2 	bl	800de48 <lv_obj_get_child_cnt>
 800cee4:	900e      	str	r0, [sp, #56]	; 0x38
    for(i = 0; i < child_cnt; i++) {
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d100      	bne.n	800ceec <report_style_change_core+0x158>
 800ceea:	e111      	b.n	800d110 <report_style_change_core+0x37c>
 800ceec:	2300      	movs	r3, #0
 800ceee:	46ca      	mov	sl, r9
 800cef0:	003d      	movs	r5, r7
 800cef2:	9307      	str	r3, [sp, #28]
        report_style_change_core(style, obj->spec_attr->children[i]);
 800cef4:	4653      	mov	r3, sl
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	9a07      	ldr	r2, [sp, #28]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	0092      	lsls	r2, r2, #2
 800cefe:	58d3      	ldr	r3, [r2, r3]
 800cf00:	4698      	mov	r8, r3
    for(i = 0; i < obj->style_cnt; i++) {
 800cf02:	8bdb      	ldrh	r3, [r3, #30]
 800cf04:	05db      	lsls	r3, r3, #23
 800cf06:	0e9b      	lsrs	r3, r3, #26
 800cf08:	d016      	beq.n	800cf38 <report_style_change_core+0x1a4>
        if(style == NULL || obj->styles[i].style == style) {
 800cf0a:	2d00      	cmp	r5, #0
 800cf0c:	d00a      	beq.n	800cf24 <report_style_change_core+0x190>
 800cf0e:	4642      	mov	r2, r8
 800cf10:	68d1      	ldr	r1, [r2, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800cf12:	2200      	movs	r2, #0
 800cf14:	e002      	b.n	800cf1c <report_style_change_core+0x188>
 800cf16:	3201      	adds	r2, #1
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d20d      	bcs.n	800cf38 <report_style_change_core+0x1a4>
        if(style == NULL || obj->styles[i].style == style) {
 800cf1c:	00d0      	lsls	r0, r2, #3
 800cf1e:	5808      	ldr	r0, [r1, r0]
 800cf20:	4285      	cmp	r5, r0
 800cf22:	d1f8      	bne.n	800cf16 <report_style_change_core+0x182>
    if(!style_refr) return;
 800cf24:	4b53      	ldr	r3, [pc, #332]	; (800d074 <report_style_change_core+0x2e0>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d005      	beq.n	800cf38 <report_style_change_core+0x1a4>
 800cf2c:	21f0      	movs	r1, #240	; 0xf0
 800cf2e:	4640      	mov	r0, r8
 800cf30:	4a51      	ldr	r2, [pc, #324]	; (800d078 <report_style_change_core+0x2e4>)
 800cf32:	0309      	lsls	r1, r1, #12
 800cf34:	f7ff fc28 	bl	800c788 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800cf38:	4640      	mov	r0, r8
 800cf3a:	f000 ff85 	bl	800de48 <lv_obj_get_child_cnt>
 800cf3e:	900a      	str	r0, [sp, #40]	; 0x28
    for(i = 0; i < child_cnt; i++) {
 800cf40:	2800      	cmp	r0, #0
 800cf42:	d100      	bne.n	800cf46 <report_style_change_core+0x1b2>
 800cf44:	e0dc      	b.n	800d100 <report_style_change_core+0x36c>
 800cf46:	2300      	movs	r3, #0
 800cf48:	9301      	str	r3, [sp, #4]
 800cf4a:	4653      	mov	r3, sl
 800cf4c:	46c3      	mov	fp, r8
 800cf4e:	9312      	str	r3, [sp, #72]	; 0x48
        report_style_change_core(style, obj->spec_attr->children[i]);
 800cf50:	465b      	mov	r3, fp
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	9a01      	ldr	r2, [sp, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	0092      	lsls	r2, r2, #2
 800cf5a:	58d3      	ldr	r3, [r2, r3]
 800cf5c:	4698      	mov	r8, r3
    for(i = 0; i < obj->style_cnt; i++) {
 800cf5e:	8bdb      	ldrh	r3, [r3, #30]
 800cf60:	05db      	lsls	r3, r3, #23
 800cf62:	0e9b      	lsrs	r3, r3, #26
 800cf64:	d016      	beq.n	800cf94 <report_style_change_core+0x200>
        if(style == NULL || obj->styles[i].style == style) {
 800cf66:	2d00      	cmp	r5, #0
 800cf68:	d00a      	beq.n	800cf80 <report_style_change_core+0x1ec>
 800cf6a:	4642      	mov	r2, r8
 800cf6c:	68d1      	ldr	r1, [r2, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800cf6e:	2200      	movs	r2, #0
 800cf70:	e002      	b.n	800cf78 <report_style_change_core+0x1e4>
 800cf72:	3201      	adds	r2, #1
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d20d      	bcs.n	800cf94 <report_style_change_core+0x200>
        if(style == NULL || obj->styles[i].style == style) {
 800cf78:	00d0      	lsls	r0, r2, #3
 800cf7a:	5808      	ldr	r0, [r1, r0]
 800cf7c:	4285      	cmp	r5, r0
 800cf7e:	d1f8      	bne.n	800cf72 <report_style_change_core+0x1de>
    if(!style_refr) return;
 800cf80:	4b3c      	ldr	r3, [pc, #240]	; (800d074 <report_style_change_core+0x2e0>)
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d005      	beq.n	800cf94 <report_style_change_core+0x200>
 800cf88:	21f0      	movs	r1, #240	; 0xf0
 800cf8a:	4640      	mov	r0, r8
 800cf8c:	4a3a      	ldr	r2, [pc, #232]	; (800d078 <report_style_change_core+0x2e4>)
 800cf8e:	0309      	lsls	r1, r1, #12
 800cf90:	f7ff fbfa 	bl	800c788 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800cf94:	4640      	mov	r0, r8
 800cf96:	f000 ff57 	bl	800de48 <lv_obj_get_child_cnt>
 800cf9a:	9003      	str	r0, [sp, #12]
    for(i = 0; i < child_cnt; i++) {
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	d100      	bne.n	800cfa2 <report_style_change_core+0x20e>
 800cfa0:	e0a5      	b.n	800d0ee <report_style_change_core+0x35a>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	9300      	str	r3, [sp, #0]
    if(!style_refr) return;
 800cfa6:	465b      	mov	r3, fp
 800cfa8:	46c2      	mov	sl, r8
 800cfaa:	9313      	str	r3, [sp, #76]	; 0x4c
        report_style_change_core(style, obj->spec_attr->children[i]);
 800cfac:	4653      	mov	r3, sl
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	9a00      	ldr	r2, [sp, #0]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	0092      	lsls	r2, r2, #2
 800cfb6:	58d7      	ldr	r7, [r2, r3]
    for(i = 0; i < obj->style_cnt; i++) {
 800cfb8:	8bfb      	ldrh	r3, [r7, #30]
 800cfba:	05db      	lsls	r3, r3, #23
 800cfbc:	0e9b      	lsrs	r3, r3, #26
 800cfbe:	d015      	beq.n	800cfec <report_style_change_core+0x258>
        if(style == NULL || obj->styles[i].style == style) {
 800cfc0:	2d00      	cmp	r5, #0
 800cfc2:	d009      	beq.n	800cfd8 <report_style_change_core+0x244>
    for(i = 0; i < obj->style_cnt; i++) {
 800cfc4:	2200      	movs	r2, #0
        if(style == NULL || obj->styles[i].style == style) {
 800cfc6:	68f9      	ldr	r1, [r7, #12]
 800cfc8:	e002      	b.n	800cfd0 <report_style_change_core+0x23c>
    for(i = 0; i < obj->style_cnt; i++) {
 800cfca:	3201      	adds	r2, #1
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d20d      	bcs.n	800cfec <report_style_change_core+0x258>
        if(style == NULL || obj->styles[i].style == style) {
 800cfd0:	00d0      	lsls	r0, r2, #3
 800cfd2:	5808      	ldr	r0, [r1, r0]
 800cfd4:	4285      	cmp	r5, r0
 800cfd6:	d1f8      	bne.n	800cfca <report_style_change_core+0x236>
    if(!style_refr) return;
 800cfd8:	4b26      	ldr	r3, [pc, #152]	; (800d074 <report_style_change_core+0x2e0>)
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d005      	beq.n	800cfec <report_style_change_core+0x258>
 800cfe0:	21f0      	movs	r1, #240	; 0xf0
 800cfe2:	0038      	movs	r0, r7
 800cfe4:	4a24      	ldr	r2, [pc, #144]	; (800d078 <report_style_change_core+0x2e4>)
 800cfe6:	0309      	lsls	r1, r1, #12
 800cfe8:	f7ff fbce 	bl	800c788 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800cfec:	0038      	movs	r0, r7
 800cfee:	f000 ff2b 	bl	800de48 <lv_obj_get_child_cnt>
 800cff2:	9002      	str	r0, [sp, #8]
    for(i = 0; i < child_cnt; i++) {
 800cff4:	2800      	cmp	r0, #0
 800cff6:	d071      	beq.n	800d0dc <report_style_change_core+0x348>
 800cff8:	2600      	movs	r6, #0
 800cffa:	46bb      	mov	fp, r7
 800cffc:	46a9      	mov	r9, r5
        report_style_change_core(style, obj->spec_attr->children[i]);
 800cffe:	465b      	mov	r3, fp
 800d000:	689b      	ldr	r3, [r3, #8]
 800d002:	00b2      	lsls	r2, r6, #2
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	58d4      	ldr	r4, [r2, r3]
    for(i = 0; i < obj->style_cnt; i++) {
 800d008:	8be3      	ldrh	r3, [r4, #30]
 800d00a:	05db      	lsls	r3, r3, #23
 800d00c:	0e9b      	lsrs	r3, r3, #26
 800d00e:	d019      	beq.n	800d044 <report_style_change_core+0x2b0>
        if(style == NULL || obj->styles[i].style == style) {
 800d010:	464a      	mov	r2, r9
 800d012:	2a00      	cmp	r2, #0
 800d014:	d00c      	beq.n	800d030 <report_style_change_core+0x29c>
    for(i = 0; i < obj->style_cnt; i++) {
 800d016:	2200      	movs	r2, #0
 800d018:	464d      	mov	r5, r9
        if(style == NULL || obj->styles[i].style == style) {
 800d01a:	68e1      	ldr	r1, [r4, #12]
 800d01c:	e003      	b.n	800d026 <report_style_change_core+0x292>
    for(i = 0; i < obj->style_cnt; i++) {
 800d01e:	3201      	adds	r2, #1
 800d020:	429a      	cmp	r2, r3
 800d022:	d300      	bcc.n	800d026 <report_style_change_core+0x292>
 800d024:	e090      	b.n	800d148 <report_style_change_core+0x3b4>
        if(style == NULL || obj->styles[i].style == style) {
 800d026:	00d0      	lsls	r0, r2, #3
 800d028:	5808      	ldr	r0, [r1, r0]
 800d02a:	4285      	cmp	r5, r0
 800d02c:	d1f7      	bne.n	800d01e <report_style_change_core+0x28a>
 800d02e:	46a9      	mov	r9, r5
    if(!style_refr) return;
 800d030:	4b10      	ldr	r3, [pc, #64]	; (800d074 <report_style_change_core+0x2e0>)
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d005      	beq.n	800d044 <report_style_change_core+0x2b0>
 800d038:	21f0      	movs	r1, #240	; 0xf0
 800d03a:	0020      	movs	r0, r4
 800d03c:	4a0e      	ldr	r2, [pc, #56]	; (800d078 <report_style_change_core+0x2e4>)
 800d03e:	0309      	lsls	r1, r1, #12
 800d040:	f7ff fba2 	bl	800c788 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800d044:	0020      	movs	r0, r4
 800d046:	f000 feff 	bl	800de48 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d041      	beq.n	800d0d2 <report_style_change_core+0x33e>
 800d04e:	46b0      	mov	r8, r6
 800d050:	2500      	movs	r5, #0
 800d052:	0026      	movs	r6, r4
 800d054:	0004      	movs	r4, r0
        report_style_change_core(style, obj->spec_attr->children[i]);
 800d056:	68b3      	ldr	r3, [r6, #8]
 800d058:	00aa      	lsls	r2, r5, #2
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	58d7      	ldr	r7, [r2, r3]
    for(i = 0; i < obj->style_cnt; i++) {
 800d05e:	8bfb      	ldrh	r3, [r7, #30]
 800d060:	05db      	lsls	r3, r3, #23
 800d062:	0e9b      	lsrs	r3, r3, #26
 800d064:	d01b      	beq.n	800d09e <report_style_change_core+0x30a>
        if(style == NULL || obj->styles[i].style == style) {
 800d066:	464a      	mov	r2, r9
 800d068:	2a00      	cmp	r2, #0
 800d06a:	d00e      	beq.n	800d08a <report_style_change_core+0x2f6>
    for(i = 0; i < obj->style_cnt; i++) {
 800d06c:	2200      	movs	r2, #0
        if(style == NULL || obj->styles[i].style == style) {
 800d06e:	68f9      	ldr	r1, [r7, #12]
 800d070:	e007      	b.n	800d082 <report_style_change_core+0x2ee>
 800d072:	46c0      	nop			; (mov r8, r8)
 800d074:	20000070 	.word	0x20000070
 800d078:	0000ffff 	.word	0x0000ffff
    for(i = 0; i < obj->style_cnt; i++) {
 800d07c:	3201      	adds	r2, #1
 800d07e:	429a      	cmp	r2, r3
 800d080:	d20d      	bcs.n	800d09e <report_style_change_core+0x30a>
        if(style == NULL || obj->styles[i].style == style) {
 800d082:	00d0      	lsls	r0, r2, #3
 800d084:	5808      	ldr	r0, [r1, r0]
 800d086:	4581      	cmp	r9, r0
 800d088:	d1f8      	bne.n	800d07c <report_style_change_core+0x2e8>
    if(!style_refr) return;
 800d08a:	4b34      	ldr	r3, [pc, #208]	; (800d15c <report_style_change_core+0x3c8>)
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d005      	beq.n	800d09e <report_style_change_core+0x30a>
 800d092:	21f0      	movs	r1, #240	; 0xf0
 800d094:	0038      	movs	r0, r7
 800d096:	4a32      	ldr	r2, [pc, #200]	; (800d160 <report_style_change_core+0x3cc>)
 800d098:	0309      	lsls	r1, r1, #12
 800d09a:	f7ff fb75 	bl	800c788 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800d09e:	0038      	movs	r0, r7
 800d0a0:	f000 fed2 	bl	800de48 <lv_obj_get_child_cnt>
 800d0a4:	9008      	str	r0, [sp, #32]
    for(i = 0; i < child_cnt; i++) {
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d00f      	beq.n	800d0ca <report_style_change_core+0x336>
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	9309      	str	r3, [sp, #36]	; 0x24
        report_style_change_core(style, obj->spec_attr->children[i]);
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	0092      	lsls	r2, r2, #2
 800d0b6:	58d1      	ldr	r1, [r2, r3]
 800d0b8:	4648      	mov	r0, r9
 800d0ba:	f7ff fe6b 	bl	800cd94 <report_style_change_core>
    for(i = 0; i < child_cnt; i++) {
 800d0be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0c0:	1c53      	adds	r3, r2, #1
 800d0c2:	9a08      	ldr	r2, [sp, #32]
 800d0c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d1f1      	bne.n	800d0ae <report_style_change_core+0x31a>
 800d0ca:	3501      	adds	r5, #1
 800d0cc:	42ac      	cmp	r4, r5
 800d0ce:	d1c2      	bne.n	800d056 <report_style_change_core+0x2c2>
 800d0d0:	4646      	mov	r6, r8
 800d0d2:	9b02      	ldr	r3, [sp, #8]
 800d0d4:	3601      	adds	r6, #1
 800d0d6:	42b3      	cmp	r3, r6
 800d0d8:	d191      	bne.n	800cffe <report_style_change_core+0x26a>
 800d0da:	464d      	mov	r5, r9
 800d0dc:	9b00      	ldr	r3, [sp, #0]
 800d0de:	9a03      	ldr	r2, [sp, #12]
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d000      	beq.n	800d0ea <report_style_change_core+0x356>
 800d0e8:	e760      	b.n	800cfac <report_style_change_core+0x218>
 800d0ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0ec:	469b      	mov	fp, r3
 800d0ee:	9b01      	ldr	r3, [sp, #4]
 800d0f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	9301      	str	r3, [sp, #4]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d000      	beq.n	800d0fc <report_style_change_core+0x368>
 800d0fa:	e729      	b.n	800cf50 <report_style_change_core+0x1bc>
 800d0fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0fe:	469a      	mov	sl, r3
 800d100:	9b07      	ldr	r3, [sp, #28]
 800d102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d104:	3301      	adds	r3, #1
 800d106:	9307      	str	r3, [sp, #28]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d000      	beq.n	800d10e <report_style_change_core+0x37a>
 800d10c:	e6f2      	b.n	800cef4 <report_style_change_core+0x160>
 800d10e:	002f      	movs	r7, r5
 800d110:	9b06      	ldr	r3, [sp, #24]
 800d112:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d114:	3301      	adds	r3, #1
 800d116:	9306      	str	r3, [sp, #24]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d000      	beq.n	800d11e <report_style_change_core+0x38a>
 800d11c:	e6bd      	b.n	800ce9a <report_style_change_core+0x106>
 800d11e:	9b05      	ldr	r3, [sp, #20]
 800d120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d122:	3301      	adds	r3, #1
 800d124:	9305      	str	r3, [sp, #20]
 800d126:	429a      	cmp	r2, r3
 800d128:	d000      	beq.n	800d12c <report_style_change_core+0x398>
 800d12a:	e689      	b.n	800ce40 <report_style_change_core+0xac>
 800d12c:	9b04      	ldr	r3, [sp, #16]
 800d12e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d130:	3301      	adds	r3, #1
 800d132:	9304      	str	r3, [sp, #16]
 800d134:	429a      	cmp	r2, r3
 800d136:	d000      	beq.n	800d13a <report_style_change_core+0x3a6>
 800d138:	e655      	b.n	800cde6 <report_style_change_core+0x52>
}
 800d13a:	b015      	add	sp, #84	; 0x54
 800d13c:	bcf0      	pop	{r4, r5, r6, r7}
 800d13e:	46bb      	mov	fp, r7
 800d140:	46b2      	mov	sl, r6
 800d142:	46a9      	mov	r9, r5
 800d144:	46a0      	mov	r8, r4
 800d146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d148:	46a9      	mov	r9, r5
 800d14a:	e77b      	b.n	800d044 <report_style_change_core+0x2b0>
 800d14c:	21f0      	movs	r1, #240	; 0xf0
 800d14e:	4648      	mov	r0, r9
 800d150:	4a03      	ldr	r2, [pc, #12]	; (800d160 <report_style_change_core+0x3cc>)
 800d152:	0309      	lsls	r1, r1, #12
 800d154:	f7ff fb18 	bl	800c788 <lv_obj_refresh_style.part.0>
 800d158:	e63a      	b.n	800cdd0 <report_style_change_core+0x3c>
 800d15a:	46c0      	nop			; (mov r8, r8)
 800d15c:	20000070 	.word	0x20000070
 800d160:	0000ffff 	.word	0x0000ffff

0800d164 <lv_obj_report_style_change>:
{
 800d164:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d166:	4646      	mov	r6, r8
 800d168:	46d6      	mov	lr, sl
 800d16a:	464f      	mov	r7, r9
    if(!style_refr) return;
 800d16c:	4b28      	ldr	r3, [pc, #160]	; (800d210 <lv_obj_report_style_change+0xac>)
{
 800d16e:	0004      	movs	r4, r0
    if(!style_refr) return;
 800d170:	4698      	mov	r8, r3
 800d172:	781b      	ldrb	r3, [r3, #0]
{
 800d174:	b5c0      	push	{r6, r7, lr}
    if(!style_refr) return;
 800d176:	2b00      	cmp	r3, #0
 800d178:	d104      	bne.n	800d184 <lv_obj_report_style_change+0x20>
}
 800d17a:	bce0      	pop	{r5, r6, r7}
 800d17c:	46ba      	mov	sl, r7
 800d17e:	46b1      	mov	r9, r6
 800d180:	46a8      	mov	r8, r5
 800d182:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_disp_t * d = lv_disp_get_next(NULL);
 800d184:	2000      	movs	r0, #0
 800d186:	f006 fc9f 	bl	8013ac8 <lv_disp_get_next>
 800d18a:	1e07      	subs	r7, r0, #0
    while(d) {
 800d18c:	d0f5      	beq.n	800d17a <lv_obj_report_style_change+0x16>
        for(i = 0; i < d->screen_cnt; i++) {
 800d18e:	2300      	movs	r3, #0
 800d190:	4699      	mov	r9, r3
 800d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d194:	2b00      	cmp	r3, #0
 800d196:	d034      	beq.n	800d202 <lv_obj_report_style_change+0x9e>
            report_style_change_core(style, d->screens[i]);
 800d198:	464b      	mov	r3, r9
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	589d      	ldr	r5, [r3, r2]
    for(i = 0; i < obj->style_cnt; i++) {
 800d1a0:	8be9      	ldrh	r1, [r5, #30]
 800d1a2:	05c9      	lsls	r1, r1, #23
 800d1a4:	0e89      	lsrs	r1, r1, #26
 800d1a6:	d015      	beq.n	800d1d4 <lv_obj_report_style_change+0x70>
        if(style == NULL || obj->styles[i].style == style) {
 800d1a8:	2c00      	cmp	r4, #0
 800d1aa:	d009      	beq.n	800d1c0 <lv_obj_report_style_change+0x5c>
    for(i = 0; i < obj->style_cnt; i++) {
 800d1ac:	2300      	movs	r3, #0
        if(style == NULL || obj->styles[i].style == style) {
 800d1ae:	68e8      	ldr	r0, [r5, #12]
 800d1b0:	e002      	b.n	800d1b8 <lv_obj_report_style_change+0x54>
    for(i = 0; i < obj->style_cnt; i++) {
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	428b      	cmp	r3, r1
 800d1b6:	d20d      	bcs.n	800d1d4 <lv_obj_report_style_change+0x70>
        if(style == NULL || obj->styles[i].style == style) {
 800d1b8:	00da      	lsls	r2, r3, #3
 800d1ba:	5882      	ldr	r2, [r0, r2]
 800d1bc:	4294      	cmp	r4, r2
 800d1be:	d1f8      	bne.n	800d1b2 <lv_obj_report_style_change+0x4e>
    if(!style_refr) return;
 800d1c0:	4643      	mov	r3, r8
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d005      	beq.n	800d1d4 <lv_obj_report_style_change+0x70>
 800d1c8:	21f0      	movs	r1, #240	; 0xf0
 800d1ca:	0028      	movs	r0, r5
 800d1cc:	4a11      	ldr	r2, [pc, #68]	; (800d214 <lv_obj_report_style_change+0xb0>)
 800d1ce:	0309      	lsls	r1, r1, #12
 800d1d0:	f7ff fada 	bl	800c788 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800d1d4:	0028      	movs	r0, r5
 800d1d6:	f000 fe37 	bl	800de48 <lv_obj_get_child_cnt>
 800d1da:	4682      	mov	sl, r0
    for(i = 0; i < child_cnt; i++) {
 800d1dc:	2800      	cmp	r0, #0
 800d1de:	d00a      	beq.n	800d1f6 <lv_obj_report_style_change+0x92>
 800d1e0:	2600      	movs	r6, #0
        report_style_change_core(style, obj->spec_attr->children[i]);
 800d1e2:	68ab      	ldr	r3, [r5, #8]
 800d1e4:	00b2      	lsls	r2, r6, #2
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	0020      	movs	r0, r4
 800d1ea:	58d1      	ldr	r1, [r2, r3]
    for(i = 0; i < child_cnt; i++) {
 800d1ec:	3601      	adds	r6, #1
        report_style_change_core(style, obj->spec_attr->children[i]);
 800d1ee:	f7ff fdd1 	bl	800cd94 <report_style_change_core>
    for(i = 0; i < child_cnt; i++) {
 800d1f2:	45b2      	cmp	sl, r6
 800d1f4:	d1f5      	bne.n	800d1e2 <lv_obj_report_style_change+0x7e>
        for(i = 0; i < d->screen_cnt; i++) {
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	469c      	mov	ip, r3
 800d1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fc:	44e1      	add	r9, ip
 800d1fe:	454b      	cmp	r3, r9
 800d200:	d8ca      	bhi.n	800d198 <lv_obj_report_style_change+0x34>
        d = lv_disp_get_next(d);
 800d202:	0038      	movs	r0, r7
 800d204:	f006 fc60 	bl	8013ac8 <lv_disp_get_next>
 800d208:	1e07      	subs	r7, r0, #0
    while(d) {
 800d20a:	d1c0      	bne.n	800d18e <lv_obj_report_style_change+0x2a>
 800d20c:	e7b5      	b.n	800d17a <lv_obj_report_style_change+0x16>
 800d20e:	46c0      	nop			; (mov r8, r8)
 800d210:	20000070 	.word	0x20000070
 800d214:	0000ffff 	.word	0x0000ffff

0800d218 <trans_anim_start_cb>:
{
 800d218:	b570      	push	{r4, r5, r6, lr}
    return selector & 0xFF0000;
 800d21a:	25ff      	movs	r5, #255	; 0xff
    trans_t * tr = a->var;
 800d21c:	6804      	ldr	r4, [r0, #0]
    return selector & 0xFF0000;
 800d21e:	042d      	lsls	r5, r5, #16
 800d220:	68a3      	ldr	r3, [r4, #8]
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800d222:	88a2      	ldrh	r2, [r4, #4]
    return selector & 0xFF0000;
 800d224:	401d      	ands	r5, r3
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800d226:	0029      	movs	r1, r5
 800d228:	6820      	ldr	r0, [r4, #0]
 800d22a:	f7ff f9cb 	bl	800c5c4 <lv_obj_get_style_prop>
    tr->prop = LV_STYLE_PROP_INV;
 800d22e:	2300      	movs	r3, #0
    lv_style_prop_t prop_tmp = tr->prop;
 800d230:	88a6      	ldrh	r6, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
 800d232:	0029      	movs	r1, r5
 800d234:	0032      	movs	r2, r6
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800d236:	60e0      	str	r0, [r4, #12]
    tr->prop = LV_STYLE_PROP_INV;
 800d238:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
 800d23a:	6820      	ldr	r0, [r4, #0]
 800d23c:	0023      	movs	r3, r4
 800d23e:	f7fe ffe9 	bl	800c214 <trans_del.isra.0>
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800d242:	68a1      	ldr	r1, [r4, #8]
    tr->prop = prop_tmp;
 800d244:	80a6      	strh	r6, [r4, #4]
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800d246:	6820      	ldr	r0, [r4, #0]
 800d248:	f7fe ff86 	bl	800c158 <get_trans_style>
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 800d24c:	68e2      	ldr	r2, [r4, #12]
 800d24e:	88a1      	ldrh	r1, [r4, #4]
 800d250:	6800      	ldr	r0, [r0, #0]
 800d252:	f008 faeb 	bl	801582c <lv_style_set_prop>
}
 800d256:	bd70      	pop	{r4, r5, r6, pc}

0800d258 <lv_obj_set_local_style_prop>:
{
 800d258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d25a:	000e      	movs	r6, r1
 800d25c:	0017      	movs	r7, r2
    lv_style_t * style = get_local_style(obj, selector);
 800d25e:	0019      	movs	r1, r3
{
 800d260:	001d      	movs	r5, r3
 800d262:	0004      	movs	r4, r0
    lv_style_t * style = get_local_style(obj, selector);
 800d264:	f7fe ff00 	bl	800c068 <get_local_style>
    lv_style_set_prop(style, prop, value);
 800d268:	003a      	movs	r2, r7
 800d26a:	0031      	movs	r1, r6
 800d26c:	f008 fade 	bl	801582c <lv_style_set_prop>
    if(!style_refr) return;
 800d270:	4b04      	ldr	r3, [pc, #16]	; (800d284 <lv_obj_set_local_style_prop+0x2c>)
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d004      	beq.n	800d282 <lv_obj_set_local_style_prop+0x2a>
 800d278:	0032      	movs	r2, r6
 800d27a:	0029      	movs	r1, r5
 800d27c:	0020      	movs	r0, r4
 800d27e:	f7ff fa83 	bl	800c788 <lv_obj_refresh_style.part.0>
}
 800d282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d284:	20000070 	.word	0x20000070

0800d288 <lv_obj_get_local_style_prop>:
{
 800d288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 800d28a:	8bc6      	ldrh	r6, [r0, #30]
 800d28c:	05f6      	lsls	r6, r6, #23
 800d28e:	0eb6      	lsrs	r6, r6, #26
 800d290:	d00e      	beq.n	800d2b0 <lv_obj_get_local_style_prop+0x28>
 800d292:	2400      	movs	r4, #0
        if(obj->styles[i].is_local &&
 800d294:	2701      	movs	r7, #1
 800d296:	68c0      	ldr	r0, [r0, #12]
 800d298:	79c5      	ldrb	r5, [r0, #7]
 800d29a:	422f      	tst	r7, r5
 800d29c:	d004      	beq.n	800d2a8 <lv_obj_get_local_style_prop+0x20>
           obj->styles[i].selector == selector) {
 800d29e:	6845      	ldr	r5, [r0, #4]
 800d2a0:	022d      	lsls	r5, r5, #8
 800d2a2:	0a2d      	lsrs	r5, r5, #8
        if(obj->styles[i].is_local &&
 800d2a4:	429d      	cmp	r5, r3
 800d2a6:	d005      	beq.n	800d2b4 <lv_obj_get_local_style_prop+0x2c>
    for(i = 0; i < obj->style_cnt; i++) {
 800d2a8:	3401      	adds	r4, #1
 800d2aa:	3008      	adds	r0, #8
 800d2ac:	42b4      	cmp	r4, r6
 800d2ae:	d3f3      	bcc.n	800d298 <lv_obj_get_local_style_prop+0x10>
    return LV_STYLE_RES_NOT_FOUND;
 800d2b0:	2000      	movs	r0, #0
}
 800d2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 800d2b4:	6800      	ldr	r0, [r0, #0]
 800d2b6:	f008 fb6f 	bl	8015998 <lv_style_get_prop>
 800d2ba:	e7fa      	b.n	800d2b2 <lv_obj_get_local_style_prop+0x2a>

0800d2bc <lv_obj_remove_local_style_prop>:
{
 800d2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 800d2be:	8bc5      	ldrh	r5, [r0, #30]
 800d2c0:	05ed      	lsls	r5, r5, #23
 800d2c2:	0ead      	lsrs	r5, r5, #26
 800d2c4:	d019      	beq.n	800d2fa <lv_obj_remove_local_style_prop+0x3e>
        if(obj->styles[i].is_local &&
 800d2c6:	68c3      	ldr	r3, [r0, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800d2c8:	2400      	movs	r4, #0
        if(obj->styles[i].is_local &&
 800d2ca:	469c      	mov	ip, r3
 800d2cc:	2701      	movs	r7, #1
 800d2ce:	79d8      	ldrb	r0, [r3, #7]
 800d2d0:	001e      	movs	r6, r3
 800d2d2:	4207      	tst	r7, r0
 800d2d4:	d004      	beq.n	800d2e0 <lv_obj_remove_local_style_prop+0x24>
           obj->styles[i].selector == selector) {
 800d2d6:	6858      	ldr	r0, [r3, #4]
 800d2d8:	0200      	lsls	r0, r0, #8
 800d2da:	0a00      	lsrs	r0, r0, #8
        if(obj->styles[i].is_local &&
 800d2dc:	4290      	cmp	r0, r2
 800d2de:	d008      	beq.n	800d2f2 <lv_obj_remove_local_style_prop+0x36>
    for(i = 0; i < obj->style_cnt; i++) {
 800d2e0:	3401      	adds	r4, #1
 800d2e2:	3308      	adds	r3, #8
 800d2e4:	42ac      	cmp	r4, r5
 800d2e6:	d3f2      	bcc.n	800d2ce <lv_obj_remove_local_style_prop+0x12>
    if(i == obj->style_cnt) return false;
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	42ac      	cmp	r4, r5
 800d2ec:	d004      	beq.n	800d2f8 <lv_obj_remove_local_style_prop+0x3c>
    return lv_style_remove_prop(obj->styles[i].style, prop);
 800d2ee:	00e6      	lsls	r6, r4, #3
 800d2f0:	4466      	add	r6, ip
 800d2f2:	6830      	ldr	r0, [r6, #0]
 800d2f4:	f008 fa34 	bl	8015760 <lv_style_remove_prop>
}
 800d2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(i == obj->style_cnt) return false;
 800d2fa:	2000      	movs	r0, #0
 800d2fc:	e7fc      	b.n	800d2f8 <lv_obj_remove_local_style_prop+0x3c>
 800d2fe:	46c0      	nop			; (mov r8, r8)

0800d300 <_lv_obj_style_create_transition>:
{
 800d300:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d302:	4646      	mov	r6, r8
 800d304:	4690      	mov	r8, r2
    obj->skip_trans = 1;
 800d306:	2204      	movs	r2, #4
{
 800d308:	46d6      	mov	lr, sl
 800d30a:	464f      	mov	r7, r9
 800d30c:	469a      	mov	sl, r3
    obj->skip_trans = 1;
 800d30e:	7f83      	ldrb	r3, [r0, #30]
{
 800d310:	b5c0      	push	{r6, r7, lr}
    obj->skip_trans = 1;
 800d312:	4313      	orrs	r3, r2
 800d314:	7783      	strb	r3, [r0, #30]
    obj->state = prev_state;
 800d316:	4643      	mov	r3, r8
{
 800d318:	b092      	sub	sp, #72	; 0x48
 800d31a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    obj->state = prev_state;
 800d31c:	8383      	strh	r3, [r0, #28]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800d31e:	892a      	ldrh	r2, [r5, #8]
{
 800d320:	0004      	movs	r4, r0
 800d322:	000e      	movs	r6, r1
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800d324:	f7ff f94e 	bl	800c5c4 <lv_obj_get_style_prop>
    obj->state = new_state;
 800d328:	4653      	mov	r3, sl
 800d32a:	83a3      	strh	r3, [r4, #28]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800d32c:	892a      	ldrh	r2, [r5, #8]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800d32e:	0007      	movs	r7, r0
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800d330:	0031      	movs	r1, r6
 800d332:	0020      	movs	r0, r4
 800d334:	f7ff f946 	bl	800c5c4 <lv_obj_get_style_prop>
    obj->skip_trans = 0;
 800d338:	2204      	movs	r2, #4
 800d33a:	7fa3      	ldrb	r3, [r4, #30]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800d33c:	4681      	mov	r9, r0
    obj->skip_trans = 0;
 800d33e:	4393      	bics	r3, r2
 800d340:	77a3      	strb	r3, [r4, #30]
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800d342:	4287      	cmp	r7, r0
 800d344:	d044      	beq.n	800d3d0 <_lv_obj_style_create_transition+0xd0>
    obj->state = prev_state;
 800d346:	4643      	mov	r3, r8
 800d348:	83a3      	strh	r3, [r4, #28]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800d34a:	892a      	ldrh	r2, [r5, #8]
 800d34c:	0031      	movs	r1, r6
 800d34e:	0020      	movs	r0, r4
 800d350:	f7ff f938 	bl	800c5c4 <lv_obj_get_style_prop>
    obj->state = new_state;
 800d354:	4653      	mov	r3, sl
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800d356:	4680      	mov	r8, r0
    obj->state = new_state;
 800d358:	83a3      	strh	r3, [r4, #28]
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 800d35a:	0031      	movs	r1, r6
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800d35c:	0007      	movs	r7, r0
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 800d35e:	0020      	movs	r0, r4
 800d360:	f7fe fefa 	bl	800c158 <get_trans_style>
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 800d364:	4642      	mov	r2, r8
 800d366:	8929      	ldrh	r1, [r5, #8]
 800d368:	6800      	ldr	r0, [r0, #0]
 800d36a:	f008 fa5f 	bl	801582c <lv_style_set_prop>
    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 800d36e:	892b      	ldrh	r3, [r5, #8]
 800d370:	2b0b      	cmp	r3, #11
 800d372:	d034      	beq.n	800d3de <_lv_obj_style_create_transition+0xde>
    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800d374:	4839      	ldr	r0, [pc, #228]	; (800d45c <_lv_obj_style_create_transition+0x15c>)
 800d376:	f007 fc79 	bl	8014c6c <_lv_ll_ins_head>
 800d37a:	1e07      	subs	r7, r0, #0
    LV_ASSERT_MALLOC(tr);
 800d37c:	d02e      	beq.n	800d3dc <_lv_obj_style_create_transition+0xdc>
    tr->start_value = v1;
 800d37e:	4643      	mov	r3, r8
 800d380:	60c3      	str	r3, [r0, #12]
    tr->end_value = v2;
 800d382:	464b      	mov	r3, r9
    tr->obj = obj;
 800d384:	6004      	str	r4, [r0, #0]
    tr->end_value = v2;
 800d386:	6103      	str	r3, [r0, #16]
    tr->prop = tr_dsc->prop;
 800d388:	892b      	ldrh	r3, [r5, #8]
    tr->selector = part;
 800d38a:	6086      	str	r6, [r0, #8]
    tr->prop = tr_dsc->prop;
 800d38c:	8083      	strh	r3, [r0, #4]
    lv_anim_init(&a);
 800d38e:	a802      	add	r0, sp, #8
 800d390:	f006 fd6c 	bl	8013e6c <lv_anim_init>
    a->exec_cb = exec_cb;
 800d394:	4b32      	ldr	r3, [pc, #200]	; (800d460 <_lv_obj_style_create_transition+0x160>)
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
    a->early_apply = en;
 800d396:	223e      	movs	r2, #62	; 0x3e
    a->exec_cb = exec_cb;
 800d398:	9303      	str	r3, [sp, #12]
    a->start_cb = start_cb;
 800d39a:	4b32      	ldr	r3, [pc, #200]	; (800d464 <_lv_obj_style_create_transition+0x164>)
    a->early_apply = en;
 800d39c:	2101      	movs	r1, #1
    a->start_cb = start_cb;
 800d39e:	9304      	str	r3, [sp, #16]
    a->ready_cb = ready_cb;
 800d3a0:	4b31      	ldr	r3, [pc, #196]	; (800d468 <_lv_obj_style_create_transition+0x168>)
    a->var = var;
 800d3a2:	9702      	str	r7, [sp, #8]
    a->ready_cb = ready_cb;
 800d3a4:	9305      	str	r3, [sp, #20]
    a->start_value = start;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 800d3aa:	930a      	str	r3, [sp, #40]	; 0x28
    a->end_value = end;
 800d3ac:	33ff      	adds	r3, #255	; 0xff
 800d3ae:	930b      	str	r3, [sp, #44]	; 0x2c
    a->time = duration;
 800d3b0:	882b      	ldrh	r3, [r5, #0]
 800d3b2:	930c      	str	r3, [sp, #48]	; 0x30
    a->act_time = -(int32_t)(delay);
 800d3b4:	886b      	ldrh	r3, [r5, #2]
 800d3b6:	425b      	negs	r3, r3
 800d3b8:	930d      	str	r3, [sp, #52]	; 0x34
    a->path_cb = path_cb;
 800d3ba:	68eb      	ldr	r3, [r5, #12]
 800d3bc:	9301      	str	r3, [sp, #4]
 800d3be:	9308      	str	r3, [sp, #32]
    a->early_apply = en;
 800d3c0:	ab02      	add	r3, sp, #8
 800d3c2:	5c9b      	ldrb	r3, [r3, r2]
 800d3c4:	438b      	bics	r3, r1
 800d3c6:	a902      	add	r1, sp, #8
    lv_anim_start(&a);
 800d3c8:	0008      	movs	r0, r1
 800d3ca:	548b      	strb	r3, [r1, r2]
 800d3cc:	f006 fe50 	bl	8014070 <lv_anim_start>
}
 800d3d0:	b012      	add	sp, #72	; 0x48
 800d3d2:	bce0      	pop	{r5, r6, r7}
 800d3d4:	46ba      	mov	sl, r7
 800d3d6:	46b1      	mov	r9, r6
 800d3d8:	46a8      	mov	r8, r5
 800d3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(tr);
 800d3dc:	e7fe      	b.n	800d3dc <_lv_obj_style_create_transition+0xdc>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 800d3de:	4b23      	ldr	r3, [pc, #140]	; (800d46c <_lv_obj_style_create_transition+0x16c>)
 800d3e0:	4598      	cmp	r8, r3
 800d3e2:	d019      	beq.n	800d418 <_lv_obj_style_create_transition+0x118>
 800d3e4:	4599      	cmp	r9, r3
 800d3e6:	d1c5      	bne.n	800d374 <_lv_obj_style_create_transition+0x74>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800d3e8:	0020      	movs	r0, r4
 800d3ea:	f7fb fc75 	bl	8008cd8 <lv_obj_get_width>
 800d3ee:	0fc3      	lsrs	r3, r0, #31
 800d3f0:	181b      	adds	r3, r3, r0
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800d3f2:	0020      	movs	r0, r4
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800d3f4:	105f      	asrs	r7, r3, #1
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800d3f6:	f7fb fc77 	bl	8008ce8 <lv_obj_get_height>
 800d3fa:	0fc3      	lsrs	r3, r0, #31
 800d3fc:	181b      	adds	r3, r3, r0
 800d3fe:	105b      	asrs	r3, r3, #1
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800d400:	b23f      	sxth	r7, r7
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800d402:	b21b      	sxth	r3, r3
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800d404:	429f      	cmp	r7, r3
 800d406:	da03      	bge.n	800d410 <_lv_obj_style_create_transition+0x110>
 800d408:	3701      	adds	r7, #1
 800d40a:	b23b      	sxth	r3, r7
 800d40c:	4699      	mov	r9, r3
 800d40e:	e7b1      	b.n	800d374 <_lv_obj_style_create_transition+0x74>
 800d410:	3301      	adds	r3, #1
 800d412:	b21b      	sxth	r3, r3
 800d414:	4699      	mov	r9, r3
 800d416:	e7ad      	b.n	800d374 <_lv_obj_style_create_transition+0x74>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800d418:	0020      	movs	r0, r4
 800d41a:	f7fb fc5d 	bl	8008cd8 <lv_obj_get_width>
 800d41e:	0fc3      	lsrs	r3, r0, #31
 800d420:	181b      	adds	r3, r3, r0
 800d422:	105b      	asrs	r3, r3, #1
 800d424:	b21b      	sxth	r3, r3
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800d426:	0020      	movs	r0, r4
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800d428:	4698      	mov	r8, r3
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800d42a:	f7fb fc5d 	bl	8008ce8 <lv_obj_get_height>
 800d42e:	0fc3      	lsrs	r3, r0, #31
 800d430:	181b      	adds	r3, r3, r0
 800d432:	105b      	asrs	r3, r3, #1
 800d434:	b21b      	sxth	r3, r3
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800d436:	4598      	cmp	r8, r3
 800d438:	da07      	bge.n	800d44a <_lv_obj_style_create_transition+0x14a>
 800d43a:	4640      	mov	r0, r8
 800d43c:	3001      	adds	r0, #1
 800d43e:	b203      	sxth	r3, r0
 800d440:	4698      	mov	r8, r3
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800d442:	45b9      	cmp	r9, r7
 800d444:	d196      	bne.n	800d374 <_lv_obj_style_create_transition+0x74>
 800d446:	46c1      	mov	r9, r8
 800d448:	e794      	b.n	800d374 <_lv_obj_style_create_transition+0x74>
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800d44a:	3301      	adds	r3, #1
 800d44c:	b21b      	sxth	r3, r3
 800d44e:	4698      	mov	r8, r3
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800d450:	45b9      	cmp	r9, r7
 800d452:	d000      	beq.n	800d456 <_lv_obj_style_create_transition+0x156>
 800d454:	e78e      	b.n	800d374 <_lv_obj_style_create_transition+0x74>
 800d456:	46c1      	mov	r9, r8
 800d458:	e78c      	b.n	800d374 <_lv_obj_style_create_transition+0x74>
 800d45a:	46c0      	nop			; (mov r8, r8)
 800d45c:	20000638 	.word	0x20000638
 800d460:	0800ca41 	.word	0x0800ca41
 800d464:	0800d219 	.word	0x0800d219
 800d468:	0800ccd5 	.word	0x0800ccd5
 800d46c:	00007fff 	.word	0x00007fff

0800d470 <_lv_obj_style_apply_color_filter>:
{
 800d470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d472:	0004      	movs	r4, r0
 800d474:	000e      	movs	r6, r1
 800d476:	0015      	movs	r5, r2
    if(obj == NULL) return v;
 800d478:	2800      	cmp	r0, #0
 800d47a:	d017      	beq.n	800d4ac <_lv_obj_style_apply_color_filter+0x3c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 800d47c:	2261      	movs	r2, #97	; 0x61
 800d47e:	f7ff f8a1 	bl	800c5c4 <lv_obj_get_style_prop>
 800d482:	1e07      	subs	r7, r0, #0
    if(f && f->filter_cb) {
 800d484:	d012      	beq.n	800d4ac <_lv_obj_style_apply_color_filter+0x3c>
 800d486:	6803      	ldr	r3, [r0, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00f      	beq.n	800d4ac <_lv_obj_style_apply_color_filter+0x3c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 800d48c:	2262      	movs	r2, #98	; 0x62
 800d48e:	0031      	movs	r1, r6
 800d490:	0020      	movs	r0, r4
 800d492:	f7ff f897 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800d496:	b2c2      	uxtb	r2, r0
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 800d498:	2a00      	cmp	r2, #0
 800d49a:	d007      	beq.n	800d4ac <_lv_obj_style_apply_color_filter+0x3c>
 800d49c:	1c29      	adds	r1, r5, #0
 800d49e:	0038      	movs	r0, r7
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	4798      	blx	r3
 800d4a4:	0c2d      	lsrs	r5, r5, #16
 800d4a6:	b280      	uxth	r0, r0
 800d4a8:	042d      	lsls	r5, r5, #16
 800d4aa:	4305      	orrs	r5, r0
}
 800d4ac:	0028      	movs	r0, r5
 800d4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d4b0 <_lv_obj_style_state_compare>:
{
 800d4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4b2:	464e      	mov	r6, r9
 800d4b4:	46de      	mov	lr, fp
 800d4b6:	4657      	mov	r7, sl
 800d4b8:	4645      	mov	r5, r8
 800d4ba:	b5e0      	push	{r5, r6, r7, lr}
 800d4bc:	0006      	movs	r6, r0
    for(i = 0; i < obj->style_cnt; i++) {
 800d4be:	8bc0      	ldrh	r0, [r0, #30]
{
 800d4c0:	4691      	mov	r9, r2
    for(i = 0; i < obj->style_cnt; i++) {
 800d4c2:	05c0      	lsls	r0, r0, #23
{
 800d4c4:	b083      	sub	sp, #12
    for(i = 0; i < obj->style_cnt; i++) {
 800d4c6:	0e80      	lsrs	r0, r0, #26
 800d4c8:	d100      	bne.n	800d4cc <_lv_obj_style_state_compare+0x1c>
 800d4ca:	e12c      	b.n	800d726 <_lv_obj_style_state_compare+0x276>
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	469a      	mov	sl, r3
        if(obj->styles[i].is_trans) continue;
 800d4d0:	3302      	adds	r3, #2
 800d4d2:	4698      	mov	r8, r3
 800d4d4:	2301      	movs	r3, #1
    for(i = 0; i < obj->style_cnt; i++) {
 800d4d6:	2500      	movs	r5, #0
        bool valid1 = state_act & (~state1) ? false : true;
 800d4d8:	43cf      	mvns	r7, r1
 800d4da:	469b      	mov	fp, r3
 800d4dc:	e008      	b.n	800d4f0 <_lv_obj_style_state_compare+0x40>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d4de:	2302      	movs	r3, #2
 800d4e0:	469a      	mov	sl, r3
    for(i = 0; i < obj->style_cnt; i++) {
 800d4e2:	8bf0      	ldrh	r0, [r6, #30]
 800d4e4:	05c0      	lsls	r0, r0, #23
 800d4e6:	0e80      	lsrs	r0, r0, #26
 800d4e8:	3501      	adds	r5, #1
 800d4ea:	42a8      	cmp	r0, r5
 800d4ec:	d800      	bhi.n	800d4f0 <_lv_obj_style_state_compare+0x40>
 800d4ee:	e112      	b.n	800d716 <_lv_obj_style_state_compare+0x266>
        if(obj->styles[i].is_trans) continue;
 800d4f0:	68f2      	ldr	r2, [r6, #12]
 800d4f2:	4641      	mov	r1, r8
 800d4f4:	4694      	mov	ip, r2
 800d4f6:	00eb      	lsls	r3, r5, #3
 800d4f8:	4463      	add	r3, ip
 800d4fa:	79da      	ldrb	r2, [r3, #7]
 800d4fc:	4211      	tst	r1, r2
 800d4fe:	d1f3      	bne.n	800d4e8 <_lv_obj_style_state_compare+0x38>
        bool valid1 = state_act & (~state1) ? false : true;
 800d500:	889a      	ldrh	r2, [r3, #4]
 800d502:	0011      	movs	r1, r2
 800d504:	4039      	ands	r1, r7
 800d506:	424c      	negs	r4, r1
 800d508:	4161      	adcs	r1, r4
        bool valid2 = state_act & (~state2) ? false : true;
 800d50a:	464c      	mov	r4, r9
 800d50c:	43a2      	bics	r2, r4
 800d50e:	4254      	negs	r4, r2
 800d510:	4162      	adcs	r2, r4
        if(valid1 != valid2) {
 800d512:	4291      	cmp	r1, r2
 800d514:	d0e8      	beq.n	800d4e8 <_lv_obj_style_state_compare+0x38>
            lv_style_t * style = obj->styles[i].style;
 800d516:	681c      	ldr	r4, [r3, #0]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 800d518:	2110      	movs	r1, #16
 800d51a:	0020      	movs	r0, r4
 800d51c:	aa01      	add	r2, sp, #4
 800d51e:	f008 fa3b 	bl	8015998 <lv_style_get_prop>
 800d522:	2800      	cmp	r0, #0
 800d524:	d000      	beq.n	800d528 <_lv_obj_style_state_compare+0x78>
 800d526:	e0f4      	b.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 800d528:	2111      	movs	r1, #17
 800d52a:	0020      	movs	r0, r4
 800d52c:	aa01      	add	r2, sp, #4
 800d52e:	f008 fa33 	bl	8015998 <lv_style_get_prop>
 800d532:	2800      	cmp	r0, #0
 800d534:	d000      	beq.n	800d538 <_lv_obj_style_state_compare+0x88>
 800d536:	e0ec      	b.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 800d538:	2112      	movs	r1, #18
 800d53a:	0020      	movs	r0, r4
 800d53c:	aa01      	add	r2, sp, #4
 800d53e:	f008 fa2b 	bl	8015998 <lv_style_get_prop>
 800d542:	2800      	cmp	r0, #0
 800d544:	d000      	beq.n	800d548 <_lv_obj_style_state_compare+0x98>
 800d546:	e0e4      	b.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 800d548:	2113      	movs	r1, #19
 800d54a:	0020      	movs	r0, r4
 800d54c:	aa01      	add	r2, sp, #4
 800d54e:	f008 fa23 	bl	8015998 <lv_style_get_prop>
 800d552:	2800      	cmp	r0, #0
 800d554:	d000      	beq.n	800d558 <_lv_obj_style_state_compare+0xa8>
 800d556:	e0dc      	b.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 800d558:	2115      	movs	r1, #21
 800d55a:	0020      	movs	r0, r4
 800d55c:	aa01      	add	r2, sp, #4
 800d55e:	f008 fa1b 	bl	8015998 <lv_style_get_prop>
 800d562:	2800      	cmp	r0, #0
 800d564:	d000      	beq.n	800d568 <_lv_obj_style_state_compare+0xb8>
 800d566:	e0d4      	b.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 800d568:	2114      	movs	r1, #20
 800d56a:	0020      	movs	r0, r4
 800d56c:	aa01      	add	r2, sp, #4
 800d56e:	f008 fa13 	bl	8015998 <lv_style_get_prop>
 800d572:	2800      	cmp	r0, #0
 800d574:	d000      	beq.n	800d578 <_lv_obj_style_state_compare+0xc8>
 800d576:	e0cc      	b.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 800d578:	210a      	movs	r1, #10
 800d57a:	0020      	movs	r0, r4
 800d57c:	aa01      	add	r2, sp, #4
 800d57e:	f008 fa0b 	bl	8015998 <lv_style_get_prop>
 800d582:	2800      	cmp	r0, #0
 800d584:	d000      	beq.n	800d588 <_lv_obj_style_state_compare+0xd8>
 800d586:	e0c4      	b.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 800d588:	216a      	movs	r1, #106	; 0x6a
 800d58a:	0020      	movs	r0, r4
 800d58c:	aa01      	add	r2, sp, #4
 800d58e:	f008 fa03 	bl	8015998 <lv_style_get_prop>
 800d592:	2800      	cmp	r0, #0
 800d594:	d000      	beq.n	800d598 <_lv_obj_style_state_compare+0xe8>
 800d596:	e0bc      	b.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 800d598:	216b      	movs	r1, #107	; 0x6b
 800d59a:	0020      	movs	r0, r4
 800d59c:	aa01      	add	r2, sp, #4
 800d59e:	f008 f9fb 	bl	8015998 <lv_style_get_prop>
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	d000      	beq.n	800d5a8 <_lv_obj_style_state_compare+0xf8>
 800d5a6:	e0b4      	b.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 800d5a8:	2101      	movs	r1, #1
 800d5aa:	0020      	movs	r0, r4
 800d5ac:	aa01      	add	r2, sp, #4
 800d5ae:	f008 f9f3 	bl	8015998 <lv_style_get_prop>
 800d5b2:	2800      	cmp	r0, #0
 800d5b4:	d000      	beq.n	800d5b8 <_lv_obj_style_state_compare+0x108>
 800d5b6:	e0ac      	b.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 800d5b8:	2104      	movs	r1, #4
 800d5ba:	0020      	movs	r0, r4
 800d5bc:	aa01      	add	r2, sp, #4
 800d5be:	f008 f9eb 	bl	8015998 <lv_style_get_prop>
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	d000      	beq.n	800d5c8 <_lv_obj_style_state_compare+0x118>
 800d5c6:	e0a4      	b.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 800d5c8:	2102      	movs	r1, #2
 800d5ca:	0020      	movs	r0, r4
 800d5cc:	aa01      	add	r2, sp, #4
 800d5ce:	f008 f9e3 	bl	8015998 <lv_style_get_prop>
 800d5d2:	2800      	cmp	r0, #0
 800d5d4:	d000      	beq.n	800d5d8 <_lv_obj_style_state_compare+0x128>
 800d5d6:	e09c      	b.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 800d5d8:	2103      	movs	r1, #3
 800d5da:	0020      	movs	r0, r4
 800d5dc:	aa01      	add	r2, sp, #4
 800d5de:	f008 f9db 	bl	8015998 <lv_style_get_prop>
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d000      	beq.n	800d5e8 <_lv_obj_style_state_compare+0x138>
 800d5e6:	e094      	b.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 800d5e8:	2105      	movs	r1, #5
 800d5ea:	0020      	movs	r0, r4
 800d5ec:	aa01      	add	r2, sp, #4
 800d5ee:	f008 f9d3 	bl	8015998 <lv_style_get_prop>
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	d000      	beq.n	800d5f8 <_lv_obj_style_state_compare+0x148>
 800d5f6:	e08c      	b.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 800d5f8:	2106      	movs	r1, #6
 800d5fa:	0020      	movs	r0, r4
 800d5fc:	aa01      	add	r2, sp, #4
 800d5fe:	f008 f9cb 	bl	8015998 <lv_style_get_prop>
 800d602:	2800      	cmp	r0, #0
 800d604:	d000      	beq.n	800d608 <_lv_obj_style_state_compare+0x158>
 800d606:	e084      	b.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 800d608:	2132      	movs	r1, #50	; 0x32
 800d60a:	0020      	movs	r0, r4
 800d60c:	aa01      	add	r2, sp, #4
 800d60e:	f008 f9c3 	bl	8015998 <lv_style_get_prop>
 800d612:	2800      	cmp	r0, #0
 800d614:	d17d      	bne.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 800d616:	216d      	movs	r1, #109	; 0x6d
 800d618:	0020      	movs	r0, r4
 800d61a:	aa01      	add	r2, sp, #4
 800d61c:	f008 f9bc 	bl	8015998 <lv_style_get_prop>
 800d620:	2800      	cmp	r0, #0
 800d622:	d176      	bne.n	800d712 <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 800d624:	216c      	movs	r1, #108	; 0x6c
 800d626:	0020      	movs	r0, r4
 800d628:	aa01      	add	r2, sp, #4
 800d62a:	f008 f9b5 	bl	8015998 <lv_style_get_prop>
 800d62e:	2800      	cmp	r0, #0
 800d630:	d16f      	bne.n	800d712 <_lv_obj_style_state_compare+0x262>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d632:	2168      	movs	r1, #104	; 0x68
 800d634:	0020      	movs	r0, r4
 800d636:	aa01      	add	r2, sp, #4
 800d638:	f008 f9ae 	bl	8015998 <lv_style_get_prop>
 800d63c:	2800      	cmp	r0, #0
 800d63e:	d000      	beq.n	800d642 <_lv_obj_style_state_compare+0x192>
 800d640:	e74d      	b.n	800d4de <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d642:	2169      	movs	r1, #105	; 0x69
 800d644:	0020      	movs	r0, r4
 800d646:	aa01      	add	r2, sp, #4
 800d648:	f008 f9a6 	bl	8015998 <lv_style_get_prop>
 800d64c:	2800      	cmp	r0, #0
 800d64e:	d000      	beq.n	800d652 <_lv_obj_style_state_compare+0x1a2>
 800d650:	e745      	b.n	800d4de <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d652:	216d      	movs	r1, #109	; 0x6d
 800d654:	0020      	movs	r0, r4
 800d656:	aa01      	add	r2, sp, #4
 800d658:	f008 f99e 	bl	8015998 <lv_style_get_prop>
 800d65c:	2800      	cmp	r0, #0
 800d65e:	d000      	beq.n	800d662 <_lv_obj_style_state_compare+0x1b2>
 800d660:	e73d      	b.n	800d4de <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d662:	216c      	movs	r1, #108	; 0x6c
 800d664:	0020      	movs	r0, r4
 800d666:	aa01      	add	r2, sp, #4
 800d668:	f008 f996 	bl	8015998 <lv_style_get_prop>
 800d66c:	2800      	cmp	r0, #0
 800d66e:	d000      	beq.n	800d672 <_lv_obj_style_state_compare+0x1c2>
 800d670:	e735      	b.n	800d4de <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d672:	2137      	movs	r1, #55	; 0x37
 800d674:	0020      	movs	r0, r4
 800d676:	aa01      	add	r2, sp, #4
 800d678:	f008 f98e 	bl	8015998 <lv_style_get_prop>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	d000      	beq.n	800d682 <_lv_obj_style_state_compare+0x1d2>
 800d680:	e72d      	b.n	800d4de <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d682:	2138      	movs	r1, #56	; 0x38
 800d684:	0020      	movs	r0, r4
 800d686:	aa01      	add	r2, sp, #4
 800d688:	f008 f986 	bl	8015998 <lv_style_get_prop>
 800d68c:	2800      	cmp	r0, #0
 800d68e:	d000      	beq.n	800d692 <_lv_obj_style_state_compare+0x1e2>
 800d690:	e725      	b.n	800d4de <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d692:	2135      	movs	r1, #53	; 0x35
 800d694:	0020      	movs	r0, r4
 800d696:	aa01      	add	r2, sp, #4
 800d698:	f008 f97e 	bl	8015998 <lv_style_get_prop>
 800d69c:	2800      	cmp	r0, #0
 800d69e:	d000      	beq.n	800d6a2 <_lv_obj_style_state_compare+0x1f2>
 800d6a0:	e71d      	b.n	800d4de <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d6a2:	2140      	movs	r1, #64	; 0x40
 800d6a4:	0020      	movs	r0, r4
 800d6a6:	aa01      	add	r2, sp, #4
 800d6a8:	f008 f976 	bl	8015998 <lv_style_get_prop>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	d000      	beq.n	800d6b2 <_lv_obj_style_state_compare+0x202>
 800d6b0:	e715      	b.n	800d4de <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d6b2:	2145      	movs	r1, #69	; 0x45
 800d6b4:	0020      	movs	r0, r4
 800d6b6:	aa01      	add	r2, sp, #4
 800d6b8:	f008 f96e 	bl	8015998 <lv_style_get_prop>
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	d000      	beq.n	800d6c2 <_lv_obj_style_state_compare+0x212>
 800d6c0:	e70d      	b.n	800d4de <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d6c2:	2141      	movs	r1, #65	; 0x41
 800d6c4:	0020      	movs	r0, r4
 800d6c6:	aa01      	add	r2, sp, #4
 800d6c8:	f008 f966 	bl	8015998 <lv_style_get_prop>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d000      	beq.n	800d6d2 <_lv_obj_style_state_compare+0x222>
 800d6d0:	e705      	b.n	800d4de <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d6d2:	2142      	movs	r1, #66	; 0x42
 800d6d4:	0020      	movs	r0, r4
 800d6d6:	aa01      	add	r2, sp, #4
 800d6d8:	f008 f95e 	bl	8015998 <lv_style_get_prop>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d000      	beq.n	800d6e2 <_lv_obj_style_state_compare+0x232>
 800d6e0:	e6fd      	b.n	800d4de <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d6e2:	2143      	movs	r1, #67	; 0x43
 800d6e4:	0020      	movs	r0, r4
 800d6e6:	aa01      	add	r2, sp, #4
 800d6e8:	f008 f956 	bl	8015998 <lv_style_get_prop>
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	d000      	beq.n	800d6f2 <_lv_obj_style_state_compare+0x242>
 800d6f0:	e6f5      	b.n	800d4de <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800d6f2:	2149      	movs	r1, #73	; 0x49
 800d6f4:	0020      	movs	r0, r4
 800d6f6:	aa01      	add	r2, sp, #4
 800d6f8:	f008 f94e 	bl	8015998 <lv_style_get_prop>
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d000      	beq.n	800d702 <_lv_obj_style_state_compare+0x252>
 800d700:	e6ed      	b.n	800d4de <_lv_obj_style_state_compare+0x2e>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 800d702:	4652      	mov	r2, sl
 800d704:	4653      	mov	r3, sl
 800d706:	2a00      	cmp	r2, #0
 800d708:	d100      	bne.n	800d70c <_lv_obj_style_state_compare+0x25c>
 800d70a:	465b      	mov	r3, fp
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	469a      	mov	sl, r3
 800d710:	e6e7      	b.n	800d4e2 <_lv_obj_style_state_compare+0x32>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 800d712:	2303      	movs	r3, #3
 800d714:	469a      	mov	sl, r3
}
 800d716:	4650      	mov	r0, sl
 800d718:	b003      	add	sp, #12
 800d71a:	bcf0      	pop	{r4, r5, r6, r7}
 800d71c:	46bb      	mov	fp, r7
 800d71e:	46b2      	mov	sl, r6
 800d720:	46a9      	mov	r9, r5
 800d722:	46a0      	mov	r8, r4
 800d724:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 800d726:	2300      	movs	r3, #0
 800d728:	469a      	mov	sl, r3
 800d72a:	e7f4      	b.n	800d716 <_lv_obj_style_state_compare+0x266>

0800d72c <lv_obj_style_get_selector_state>:
    return selector & 0xFFFF;
 800d72c:	b280      	uxth	r0, r0
}
 800d72e:	4770      	bx	lr

0800d730 <lv_obj_style_get_selector_part>:
    return selector & 0xFF0000;
 800d730:	23ff      	movs	r3, #255	; 0xff
 800d732:	041b      	lsls	r3, r3, #16
 800d734:	4018      	ands	r0, r3
}
 800d736:	4770      	bx	lr

0800d738 <lv_obj_calculate_style_text_align>:
{
 800d738:	b570      	push	{r4, r5, r6, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 800d73a:	225b      	movs	r2, #91	; 0x5b
 800d73c:	0005      	movs	r5, r0
 800d73e:	000e      	movs	r6, r1
 800d740:	f7fe ff40 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800d744:	2216      	movs	r2, #22
    return (lv_text_align_t)v.num;
 800d746:	b2c4      	uxtb	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800d748:	0031      	movs	r1, r6
 800d74a:	0028      	movs	r0, r5
 800d74c:	f7fe ff3a 	bl	800c5c4 <lv_obj_get_style_prop>
    return align;
 800d750:	1c20      	adds	r0, r4, #0
 800d752:	2c00      	cmp	r4, #0
 800d754:	d100      	bne.n	800d758 <lv_obj_calculate_style_text_align+0x20>
 800d756:	2001      	movs	r0, #1
 800d758:	b2c0      	uxtb	r0, r0
}
 800d75a:	bd70      	pop	{r4, r5, r6, pc}

0800d75c <lv_obj_set_style_width>:
#include "lv_obj.h"

void lv_obj_set_style_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800d75c:	b510      	push	{r4, lr}
 800d75e:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_WIDTH, v, selector);
 800d760:	000a      	movs	r2, r1
 800d762:	2101      	movs	r1, #1
 800d764:	f7ff fd78 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d768:	bd10      	pop	{r4, pc}
 800d76a:	46c0      	nop			; (mov r8, r8)

0800d76c <lv_obj_set_style_height>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_WIDTH, v, selector);
}

void lv_obj_set_style_height(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800d76c:	b510      	push	{r4, lr}
 800d76e:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_HEIGHT, v, selector);
 800d770:	000a      	movs	r2, r1
 800d772:	2104      	movs	r1, #4
 800d774:	f7ff fd70 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d778:	bd10      	pop	{r4, pc}
 800d77a:	46c0      	nop			; (mov r8, r8)

0800d77c <lv_obj_set_style_x>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_HEIGHT, v, selector);
}

void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800d77c:	b510      	push	{r4, lr}
 800d77e:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 800d780:	000a      	movs	r2, r1
 800d782:	2107      	movs	r1, #7
 800d784:	f7ff fd68 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d788:	bd10      	pop	{r4, pc}
 800d78a:	46c0      	nop			; (mov r8, r8)

0800d78c <lv_obj_set_style_y>:

void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800d78c:	b510      	push	{r4, lr}
 800d78e:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 800d790:	000a      	movs	r2, r1
 800d792:	2108      	movs	r1, #8
 800d794:	f7ff fd60 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d798:	bd10      	pop	{r4, pc}
 800d79a:	46c0      	nop			; (mov r8, r8)

0800d79c <lv_obj_set_style_align>:

void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
 800d79c:	b510      	push	{r4, lr}
 800d79e:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 800d7a0:	000a      	movs	r2, r1
 800d7a2:	2109      	movs	r1, #9
 800d7a4:	f7ff fd58 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d7a8:	bd10      	pop	{r4, pc}
 800d7aa:	46c0      	nop			; (mov r8, r8)

0800d7ac <lv_obj_set_style_pad_top>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TRANSFORM_PIVOT_Y, v, selector);
}

void lv_obj_set_style_pad_top(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800d7ac:	b510      	push	{r4, lr}
 800d7ae:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_TOP, v, selector);
 800d7b0:	000a      	movs	r2, r1
 800d7b2:	2110      	movs	r1, #16
 800d7b4:	f7ff fd50 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d7b8:	bd10      	pop	{r4, pc}
 800d7ba:	46c0      	nop			; (mov r8, r8)

0800d7bc <lv_obj_set_style_pad_bottom>:

void lv_obj_set_style_pad_bottom(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800d7bc:	b510      	push	{r4, lr}
 800d7be:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_BOTTOM, v, selector);
 800d7c0:	000a      	movs	r2, r1
 800d7c2:	2111      	movs	r1, #17
 800d7c4:	f7ff fd48 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d7c8:	bd10      	pop	{r4, pc}
 800d7ca:	46c0      	nop			; (mov r8, r8)

0800d7cc <lv_obj_set_style_pad_left>:

void lv_obj_set_style_pad_left(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800d7cc:	b510      	push	{r4, lr}
 800d7ce:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_LEFT, v, selector);
 800d7d0:	000a      	movs	r2, r1
 800d7d2:	2112      	movs	r1, #18
 800d7d4:	f7ff fd40 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d7d8:	bd10      	pop	{r4, pc}
 800d7da:	46c0      	nop			; (mov r8, r8)

0800d7dc <lv_obj_set_style_pad_right>:

void lv_obj_set_style_pad_right(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800d7dc:	b510      	push	{r4, lr}
 800d7de:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_RIGHT, v, selector);
 800d7e0:	000a      	movs	r2, r1
 800d7e2:	2113      	movs	r1, #19
 800d7e4:	f7ff fd38 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d7e8:	bd10      	pop	{r4, pc}
 800d7ea:	46c0      	nop			; (mov r8, r8)

0800d7ec <lv_obj_set_style_bg_color>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_COLUMN, v, selector);
}

void lv_obj_set_style_bg_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 800d7ec:	b510      	push	{r4, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	0013      	movs	r3, r2
    lv_style_value_t v = {
 800d7f2:	466c      	mov	r4, sp
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	8022      	strh	r2, [r4, #0]
 800d7f8:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_COLOR, v, selector);
 800d7fa:	2120      	movs	r1, #32
 800d7fc:	f7ff fd2c 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d800:	b002      	add	sp, #8
 800d802:	bd10      	pop	{r4, pc}

0800d804 <lv_obj_set_style_bg_opa>:

void lv_obj_set_style_bg_opa(struct _lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
{
 800d804:	b510      	push	{r4, lr}
 800d806:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_OPA, v, selector);
 800d808:	000a      	movs	r2, r1
 800d80a:	2121      	movs	r1, #33	; 0x21
 800d80c:	f7ff fd24 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d810:	bd10      	pop	{r4, pc}
 800d812:	46c0      	nop			; (mov r8, r8)

0800d814 <lv_obj_set_style_bg_img_src>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_DITHER_MODE, v, selector);
}

void lv_obj_set_style_bg_img_src(struct _lv_obj_t * obj, const void * value, lv_style_selector_t selector)
{
 800d814:	b510      	push	{r4, lr}
 800d816:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .ptr = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_IMG_SRC, v, selector);
 800d818:	000a      	movs	r2, r1
 800d81a:	2128      	movs	r1, #40	; 0x28
 800d81c:	f7ff fd1c 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d820:	bd10      	pop	{r4, pc}
 800d822:	46c0      	nop			; (mov r8, r8)

0800d824 <lv_obj_set_style_bg_img_recolor>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_IMG_OPA, v, selector);
}

void lv_obj_set_style_bg_img_recolor(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 800d824:	b510      	push	{r4, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	0013      	movs	r3, r2
    lv_style_value_t v = {
 800d82a:	466c      	mov	r4, sp
 800d82c:	2200      	movs	r2, #0
 800d82e:	8022      	strh	r2, [r4, #0]
 800d830:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_IMG_RECOLOR, v, selector);
 800d832:	212a      	movs	r1, #42	; 0x2a
 800d834:	f7ff fd10 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d838:	b002      	add	sp, #8
 800d83a:	bd10      	pop	{r4, pc}

0800d83c <lv_obj_set_style_bg_img_recolor_opa>:

void lv_obj_set_style_bg_img_recolor_opa(struct _lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
{
 800d83c:	b510      	push	{r4, lr}
 800d83e:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_IMG_RECOLOR_OPA, v, selector);
 800d840:	000a      	movs	r2, r1
 800d842:	212b      	movs	r1, #43	; 0x2b
 800d844:	f7ff fd08 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d848:	bd10      	pop	{r4, pc}
 800d84a:	46c0      	nop			; (mov r8, r8)

0800d84c <lv_obj_set_style_bg_img_tiled>:

void lv_obj_set_style_bg_img_tiled(struct _lv_obj_t * obj, bool value, lv_style_selector_t selector)
{
 800d84c:	b510      	push	{r4, lr}
 800d84e:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_IMG_TILED, v, selector);
 800d850:	000a      	movs	r2, r1
 800d852:	212c      	movs	r1, #44	; 0x2c
 800d854:	f7ff fd00 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d858:	bd10      	pop	{r4, pc}
 800d85a:	46c0      	nop			; (mov r8, r8)

0800d85c <lv_obj_set_style_border_color>:

void lv_obj_set_style_border_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 800d85c:	b510      	push	{r4, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	0013      	movs	r3, r2
    lv_style_value_t v = {
 800d862:	466c      	mov	r4, sp
 800d864:	2200      	movs	r2, #0
 800d866:	8022      	strh	r2, [r4, #0]
 800d868:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BORDER_COLOR, v, selector);
 800d86a:	2130      	movs	r1, #48	; 0x30
 800d86c:	f7ff fcf4 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d870:	b002      	add	sp, #8
 800d872:	bd10      	pop	{r4, pc}

0800d874 <lv_obj_set_style_border_width>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BORDER_OPA, v, selector);
}

void lv_obj_set_style_border_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800d874:	b510      	push	{r4, lr}
 800d876:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BORDER_WIDTH, v, selector);
 800d878:	000a      	movs	r2, r1
 800d87a:	2132      	movs	r1, #50	; 0x32
 800d87c:	f7ff fcec 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d880:	bd10      	pop	{r4, pc}
 800d882:	46c0      	nop			; (mov r8, r8)

0800d884 <lv_obj_set_style_border_side>:

void lv_obj_set_style_border_side(struct _lv_obj_t * obj, lv_border_side_t value, lv_style_selector_t selector)
{
 800d884:	b510      	push	{r4, lr}
 800d886:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BORDER_SIDE, v, selector);
 800d888:	000a      	movs	r2, r1
 800d88a:	2133      	movs	r1, #51	; 0x33
 800d88c:	f7ff fce4 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d890:	bd10      	pop	{r4, pc}
 800d892:	46c0      	nop			; (mov r8, r8)

0800d894 <lv_obj_set_style_outline_width>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BORDER_POST, v, selector);
}

void lv_obj_set_style_outline_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800d894:	b510      	push	{r4, lr}
 800d896:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_OUTLINE_WIDTH, v, selector);
 800d898:	000a      	movs	r2, r1
 800d89a:	2135      	movs	r1, #53	; 0x35
 800d89c:	f7ff fcdc 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d8a0:	bd10      	pop	{r4, pc}
 800d8a2:	46c0      	nop			; (mov r8, r8)

0800d8a4 <lv_obj_set_style_outline_color>:

void lv_obj_set_style_outline_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 800d8a4:	b510      	push	{r4, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	0013      	movs	r3, r2
    lv_style_value_t v = {
 800d8aa:	466c      	mov	r4, sp
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	8022      	strh	r2, [r4, #0]
 800d8b0:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_OUTLINE_COLOR, v, selector);
 800d8b2:	2136      	movs	r1, #54	; 0x36
 800d8b4:	f7ff fcd0 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d8b8:	b002      	add	sp, #8
 800d8ba:	bd10      	pop	{r4, pc}

0800d8bc <lv_obj_set_style_outline_pad>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_OUTLINE_OPA, v, selector);
}

void lv_obj_set_style_outline_pad(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800d8bc:	b510      	push	{r4, lr}
 800d8be:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_OUTLINE_PAD, v, selector);
 800d8c0:	000a      	movs	r2, r1
 800d8c2:	2138      	movs	r1, #56	; 0x38
 800d8c4:	f7ff fcc8 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d8c8:	bd10      	pop	{r4, pc}
 800d8ca:	46c0      	nop			; (mov r8, r8)

0800d8cc <lv_obj_set_style_text_color>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ARC_IMG_SRC, v, selector);
}

void lv_obj_set_style_text_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 800d8cc:	b510      	push	{r4, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	0013      	movs	r3, r2
    lv_style_value_t v = {
 800d8d2:	466c      	mov	r4, sp
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	8022      	strh	r2, [r4, #0]
 800d8d8:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_COLOR, v, selector);
 800d8da:	2155      	movs	r1, #85	; 0x55
 800d8dc:	f7ff fcbc 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d8e0:	b002      	add	sp, #8
 800d8e2:	bd10      	pop	{r4, pc}

0800d8e4 <lv_obj_set_style_text_opa>:

void lv_obj_set_style_text_opa(struct _lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
{
 800d8e4:	b510      	push	{r4, lr}
 800d8e6:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_OPA, v, selector);
 800d8e8:	000a      	movs	r2, r1
 800d8ea:	2156      	movs	r1, #86	; 0x56
 800d8ec:	f7ff fcb4 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d8f0:	bd10      	pop	{r4, pc}
 800d8f2:	46c0      	nop			; (mov r8, r8)

0800d8f4 <lv_obj_set_style_text_letter_space>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_FONT, v, selector);
}

void lv_obj_set_style_text_letter_space(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800d8f4:	b510      	push	{r4, lr}
 800d8f6:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_LETTER_SPACE, v, selector);
 800d8f8:	000a      	movs	r2, r1
 800d8fa:	2158      	movs	r1, #88	; 0x58
 800d8fc:	f7ff fcac 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d900:	bd10      	pop	{r4, pc}
 800d902:	46c0      	nop			; (mov r8, r8)

0800d904 <lv_obj_set_style_text_line_space>:

void lv_obj_set_style_text_line_space(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800d904:	b510      	push	{r4, lr}
 800d906:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_LINE_SPACE, v, selector);
 800d908:	000a      	movs	r2, r1
 800d90a:	2159      	movs	r1, #89	; 0x59
 800d90c:	f7ff fca4 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d910:	bd10      	pop	{r4, pc}
 800d912:	46c0      	nop			; (mov r8, r8)

0800d914 <lv_obj_set_style_text_align>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_DECOR, v, selector);
}

void lv_obj_set_style_text_align(struct _lv_obj_t * obj, lv_text_align_t value, lv_style_selector_t selector)
{
 800d914:	b510      	push	{r4, lr}
 800d916:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_ALIGN, v, selector);
 800d918:	000a      	movs	r2, r1
 800d91a:	215b      	movs	r1, #91	; 0x5b
 800d91c:	f7ff fc9c 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d920:	bd10      	pop	{r4, pc}
 800d922:	46c0      	nop			; (mov r8, r8)

0800d924 <lv_obj_set_style_opa>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_CLIP_CORNER, v, selector);
}

void lv_obj_set_style_opa(struct _lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
{
 800d924:	b510      	push	{r4, lr}
 800d926:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_OPA, v, selector);
 800d928:	000a      	movs	r2, r1
 800d92a:	2160      	movs	r1, #96	; 0x60
 800d92c:	f7ff fc94 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d930:	bd10      	pop	{r4, pc}
 800d932:	46c0      	nop			; (mov r8, r8)

0800d934 <lv_obj_set_style_anim_time>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ANIM, v, selector);
}

void lv_obj_set_style_anim_time(struct _lv_obj_t * obj, uint32_t value, lv_style_selector_t selector)
{
 800d934:	b510      	push	{r4, lr}
 800d936:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ANIM_TIME, v, selector);
 800d938:	000a      	movs	r2, r1
 800d93a:	2164      	movs	r1, #100	; 0x64
 800d93c:	f7ff fc8c 	bl	800d258 <lv_obj_set_local_style_prop>
}
 800d940:	bd10      	pop	{r4, pc}
 800d942:	46c0      	nop			; (mov r8, r8)

0800d944 <obj_del_core.part.0>:
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_del(obj);
}

static void obj_del_core(lv_obj_t * obj)
 800d944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d946:	0005      	movs	r5, r0
    if(obj->spec_attr == NULL) return NULL;
 800d948:	68ab      	ldr	r3, [r5, #8]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d013      	beq.n	800d976 <obj_del_core.part.0+0x32>
    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800d94e:	685a      	ldr	r2, [r3, #4]
 800d950:	2a00      	cmp	r2, #0
 800d952:	d010      	beq.n	800d976 <obj_del_core.part.0+0x32>
    else return obj->spec_attr->children[id];
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	681c      	ldr	r4, [r3, #0]
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
    if(res == LV_RES_INV) return;

    /*Recursively delete the children*/
    lv_obj_t * child = lv_obj_get_child(obj, 0);
    while(child) {
 800d958:	2c00      	cmp	r4, #0
 800d95a:	d00c      	beq.n	800d976 <obj_del_core.part.0+0x32>
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800d95c:	2200      	movs	r2, #0
 800d95e:	2121      	movs	r1, #33	; 0x21
 800d960:	0020      	movs	r0, r4
 800d962:	f7f7 f965 	bl	8004c30 <lv_event_send>
    if(res == LV_RES_INV) return;
 800d966:	2800      	cmp	r0, #0
 800d968:	d0ee      	beq.n	800d948 <obj_del_core.part.0+0x4>
 800d96a:	0020      	movs	r0, r4
 800d96c:	f7ff ffea 	bl	800d944 <obj_del_core.part.0>
    if(obj->spec_attr == NULL) return NULL;
 800d970:	68ab      	ldr	r3, [r5, #8]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1eb      	bne.n	800d94e <obj_del_core.part.0+0xa>
        obj_del_core(child);
        child = lv_obj_get_child(obj, 0);
    }

    lv_group_t * group = lv_obj_get_group(obj);
 800d976:	0028      	movs	r0, r5
 800d978:	f7fa fae2 	bl	8007f40 <lv_obj_get_group>
 800d97c:	0006      	movs	r6, r0

    /*Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800d97e:	2000      	movs	r0, #0
 800d980:	f006 f8ea 	bl	8013b58 <lv_indev_get_next>
    while(indev) {
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
            lv_indev_reset(indev, obj);
        }
        if(indev->proc.types.pointer.last_pressed == obj) {
            indev->proc.types.pointer.last_pressed = NULL;
 800d984:	2700      	movs	r7, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800d986:	1e04      	subs	r4, r0, #0
    while(indev) {
 800d988:	d108      	bne.n	800d99c <obj_del_core.part.0+0x58>
 800d98a:	e021      	b.n	800d9d0 <obj_del_core.part.0+0x8c>
        }

        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800d98c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d98e:	429e      	cmp	r6, r3
 800d990:	d011      	beq.n	800d9b6 <obj_del_core.part.0+0x72>
            lv_indev_reset(indev, obj);
        }
        indev = lv_indev_get_next(indev);
 800d992:	0020      	movs	r0, r4
 800d994:	f006 f8e0 	bl	8013b58 <lv_indev_get_next>
 800d998:	1e04      	subs	r4, r0, #0
    while(indev) {
 800d99a:	d019      	beq.n	800d9d0 <obj_del_core.part.0+0x8c>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800d99c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d99e:	429d      	cmp	r5, r3
 800d9a0:	d035      	beq.n	800da0e <obj_del_core.part.0+0xca>
 800d9a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d9a4:	429d      	cmp	r5, r3
 800d9a6:	d032      	beq.n	800da0e <obj_del_core.part.0+0xca>
        if(indev->proc.types.pointer.last_pressed == obj) {
 800d9a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d9aa:	429d      	cmp	r5, r3
 800d9ac:	d1ee      	bne.n	800d98c <obj_del_core.part.0+0x48>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800d9ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
            indev->proc.types.pointer.last_pressed = NULL;
 800d9b0:	6327      	str	r7, [r4, #48]	; 0x30
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800d9b2:	429e      	cmp	r6, r3
 800d9b4:	d1ed      	bne.n	800d992 <obj_del_core.part.0+0x4e>
 800d9b6:	f7f7 ff29 	bl	800580c <lv_indev_get_obj_act>
 800d9ba:	4285      	cmp	r5, r0
 800d9bc:	d1e9      	bne.n	800d992 <obj_del_core.part.0+0x4e>
            lv_indev_reset(indev, obj);
 800d9be:	0020      	movs	r0, r4
 800d9c0:	0029      	movs	r1, r5
 800d9c2:	f7f7 fe61 	bl	8005688 <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 800d9c6:	0020      	movs	r0, r4
 800d9c8:	f006 f8c6 	bl	8013b58 <lv_indev_get_next>
 800d9cc:	1e04      	subs	r4, r0, #0
    while(indev) {
 800d9ce:	d1e5      	bne.n	800d99c <obj_del_core.part.0+0x58>
    }

    /*All children deleted. Now clean up the object specific data*/
    _lv_obj_destruct(obj);
 800d9d0:	0028      	movs	r0, r5
 800d9d2:	f7fa fc09 	bl	80081e8 <_lv_obj_destruct>

    /*Remove the screen for the screen list*/
    if(obj->parent == NULL) {
 800d9d6:	686b      	ldr	r3, [r5, #4]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d01d      	beq.n	800da18 <obj_del_core.part.0+0xd4>
    if(obj->spec_attr == NULL) return 0;
 800d9dc:	689c      	ldr	r4, [r3, #8]
 800d9de:	6861      	ldr	r1, [r4, #4]
 800d9e0:	6827      	ldr	r7, [r4, #0]
 800d9e2:	2c00      	cmp	r4, #0
 800d9e4:	d052      	beq.n	800da8c <obj_del_core.part.0+0x148>
    else return obj->spec_attr->children[id];
 800d9e6:	0038      	movs	r0, r7
    return obj->spec_attr->child_cnt;
 800d9e8:	000e      	movs	r6, r1
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	e007      	b.n	800d9fe <obj_del_core.part.0+0xba>
    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800d9ee:	428a      	cmp	r2, r1
 800d9f0:	d203      	bcs.n	800d9fa <obj_del_core.part.0+0xb6>
    else return obj->spec_attr->children[id];
 800d9f2:	0092      	lsls	r2, r2, #2
        if(lv_obj_get_child(parent, i) == obj) return i;
 800d9f4:	58ba      	ldr	r2, [r7, r2]
 800d9f6:	4295      	cmp	r5, r2
 800d9f8:	d050      	beq.n	800da9c <obj_del_core.part.0+0x158>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800d9fa:	3301      	adds	r3, #1
    if(obj->spec_attr == NULL) return 0;
 800d9fc:	3601      	adds	r6, #1
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800d9fe:	4299      	cmp	r1, r3
 800da00:	d044      	beq.n	800da8c <obj_del_core.part.0+0x148>
    if(id < 0) {
 800da02:	1e1a      	subs	r2, r3, #0
 800da04:	daf3      	bge.n	800d9ee <obj_del_core.part.0+0xaa>
        if(id < 0) return NULL;
 800da06:	2e00      	cmp	r6, #0
 800da08:	dbf7      	blt.n	800d9fa <obj_del_core.part.0+0xb6>
 800da0a:	0032      	movs	r2, r6
 800da0c:	e7ef      	b.n	800d9ee <obj_del_core.part.0+0xaa>
            lv_indev_reset(indev, obj);
 800da0e:	0029      	movs	r1, r5
 800da10:	0020      	movs	r0, r4
 800da12:	f7f7 fe39 	bl	8005688 <lv_indev_reset>
 800da16:	e7c7      	b.n	800d9a8 <obj_del_core.part.0+0x64>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800da18:	4f30      	ldr	r7, [pc, #192]	; (800dadc <obj_del_core.part.0+0x198>)
 800da1a:	0038      	movs	r0, r7
 800da1c:	f007 f980 	bl	8014d20 <_lv_ll_get_head>
 800da20:	1e06      	subs	r6, r0, #0
 800da22:	d030      	beq.n	800da86 <obj_del_core.part.0+0x142>
        for(i = 0; i < d->screen_cnt; i++) {
 800da24:	6a71      	ldr	r1, [r6, #36]	; 0x24
 800da26:	2900      	cmp	r1, #0
 800da28:	d027      	beq.n	800da7a <obj_del_core.part.0+0x136>
 800da2a:	2300      	movs	r3, #0
            if(d->screens[i] == scr) return d;
 800da2c:	68f4      	ldr	r4, [r6, #12]
 800da2e:	e002      	b.n	800da36 <obj_del_core.part.0+0xf2>
        for(i = 0; i < d->screen_cnt; i++) {
 800da30:	3301      	adds	r3, #1
 800da32:	428b      	cmp	r3, r1
 800da34:	d021      	beq.n	800da7a <obj_del_core.part.0+0x136>
            if(d->screens[i] == scr) return d;
 800da36:	009a      	lsls	r2, r3, #2
 800da38:	58a2      	ldr	r2, [r4, r2]
 800da3a:	4295      	cmp	r5, r2
 800da3c:	d1f8      	bne.n	800da30 <obj_del_core.part.0+0xec>
 800da3e:	2300      	movs	r3, #0
 800da40:	e002      	b.n	800da48 <obj_del_core.part.0+0x104>
        lv_disp_t * disp = lv_obj_get_disp(obj);
        uint32_t i;
        /*Find the screen in the list*/
        for(i = 0; i < disp->screen_cnt; i++) {
 800da42:	3301      	adds	r3, #1
 800da44:	428b      	cmp	r3, r1
 800da46:	d203      	bcs.n	800da50 <obj_del_core.part.0+0x10c>
            if(disp->screens[i] == obj) break;
 800da48:	009a      	lsls	r2, r3, #2
 800da4a:	58a2      	ldr	r2, [r4, r2]
 800da4c:	4295      	cmp	r5, r2
 800da4e:	d1f8      	bne.n	800da42 <obj_del_core.part.0+0xfe>
        }

        uint32_t id = i;
        for(i = id; i < disp->screen_cnt - 1; i++) {
 800da50:	1e4f      	subs	r7, r1, #1
 800da52:	42bb      	cmp	r3, r7
 800da54:	d207      	bcs.n	800da66 <obj_del_core.part.0+0x122>
 800da56:	0098      	lsls	r0, r3, #2
            disp->screens[i] = disp->screens[i + 1];
 800da58:	1d01      	adds	r1, r0, #4
 800da5a:	1afb      	subs	r3, r7, r3
 800da5c:	009a      	lsls	r2, r3, #2
 800da5e:	1861      	adds	r1, r4, r1
 800da60:	1820      	adds	r0, r4, r0
 800da62:	f00d fd46 	bl	801b4f2 <memmove>
        }
        disp->screen_cnt--;
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 800da66:	0020      	movs	r0, r4
        disp->screen_cnt--;
 800da68:	6277      	str	r7, [r6, #36]	; 0x24
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 800da6a:	00b9      	lsls	r1, r7, #2
 800da6c:	f007 fa46 	bl	8014efc <lv_mem_realloc>
 800da70:	60f0      	str	r0, [r6, #12]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
                                                          obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
    }

    /*Free the object itself*/
    lv_mem_free(obj);
 800da72:	0028      	movs	r0, r5
 800da74:	f007 fa26 	bl	8014ec4 <lv_mem_free>
}
 800da78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800da7a:	0031      	movs	r1, r6
 800da7c:	0038      	movs	r0, r7
 800da7e:	f007 f95b 	bl	8014d38 <_lv_ll_get_next>
 800da82:	1e06      	subs	r6, r0, #0
 800da84:	d1ce      	bne.n	800da24 <obj_del_core.part.0+0xe0>
        for(i = 0; i < disp->screen_cnt; i++) {
 800da86:	2300      	movs	r3, #0
 800da88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8a:	deff      	udf	#255	; 0xff
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800da8c:	0038      	movs	r0, r7
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800da8e:	3901      	subs	r1, #1
        obj->parent->spec_attr->child_cnt--;
 800da90:	6061      	str	r1, [r4, #4]
                                                          obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
 800da92:	0089      	lsls	r1, r1, #2
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800da94:	f007 fa32 	bl	8014efc <lv_mem_realloc>
 800da98:	6020      	str	r0, [r4, #0]
 800da9a:	e7ea      	b.n	800da72 <obj_del_core.part.0+0x12e>
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800da9c:	3901      	subs	r1, #1
 800da9e:	4299      	cmp	r1, r3
 800daa0:	d9f6      	bls.n	800da90 <obj_del_core.part.0+0x14c>
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 800daa2:	1c58      	adds	r0, r3, #1
 800daa4:	0082      	lsls	r2, r0, #2
 800daa6:	58b9      	ldr	r1, [r7, r2]
 800daa8:	18ba      	adds	r2, r7, r2
 800daaa:	3a04      	subs	r2, #4
 800daac:	6011      	str	r1, [r2, #0]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800daae:	686a      	ldr	r2, [r5, #4]
 800dab0:	3302      	adds	r3, #2
 800dab2:	6894      	ldr	r4, [r2, #8]
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	6862      	ldr	r2, [r4, #4]
 800dab8:	1e51      	subs	r1, r2, #1
 800daba:	4288      	cmp	r0, r1
 800dabc:	d20c      	bcs.n	800dad8 <obj_del_core.part.0+0x194>
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 800dabe:	6822      	ldr	r2, [r4, #0]
 800dac0:	3001      	adds	r0, #1
 800dac2:	58d1      	ldr	r1, [r2, r3]
 800dac4:	18d2      	adds	r2, r2, r3
 800dac6:	3a04      	subs	r2, #4
 800dac8:	6011      	str	r1, [r2, #0]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800daca:	686a      	ldr	r2, [r5, #4]
 800dacc:	3304      	adds	r3, #4
 800dace:	6894      	ldr	r4, [r2, #8]
 800dad0:	6862      	ldr	r2, [r4, #4]
 800dad2:	1e51      	subs	r1, r2, #1
 800dad4:	4288      	cmp	r0, r1
 800dad6:	d3f2      	bcc.n	800dabe <obj_del_core.part.0+0x17a>
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800dad8:	6820      	ldr	r0, [r4, #0]
 800dada:	e7d9      	b.n	800da90 <obj_del_core.part.0+0x14c>
 800dadc:	200005cc 	.word	0x200005cc

0800dae0 <lv_obj_del>:
{
 800dae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dae2:	0004      	movs	r4, r0
    lv_obj_invalidate(obj);
 800dae4:	f7fb fc96 	bl	8009414 <lv_obj_invalidate>
    if(obj == NULL) return NULL;
 800dae8:	2c00      	cmp	r4, #0
 800daea:	d04f      	beq.n	800db8c <lv_obj_del+0xac>
    return obj->parent;
 800daec:	6865      	ldr	r5, [r4, #4]
    if(par) {
 800daee:	2d00      	cmp	r5, #0
 800daf0:	d021      	beq.n	800db36 <lv_obj_del+0x56>
        lv_obj_scrollbar_invalidate(par);
 800daf2:	0028      	movs	r0, r5
 800daf4:	f7fe f9ec 	bl	800bed0 <lv_obj_scrollbar_invalidate>
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800daf8:	2200      	movs	r2, #0
 800dafa:	2121      	movs	r1, #33	; 0x21
 800dafc:	0020      	movs	r0, r4
 800dafe:	f7f7 f897 	bl	8004c30 <lv_event_send>
    if(res == LV_RES_INV) return;
 800db02:	2800      	cmp	r0, #0
 800db04:	d002      	beq.n	800db0c <lv_obj_del+0x2c>
 800db06:	0020      	movs	r0, r4
 800db08:	f7ff ff1c 	bl	800d944 <obj_del_core.part.0>
        lv_obj_update_layout(par);
 800db0c:	0028      	movs	r0, r5
 800db0e:	f7fc fe41 	bl	800a794 <lv_obj_update_layout>
        lv_obj_readjust_scroll(par, LV_ANIM_OFF);
 800db12:	2100      	movs	r1, #0
 800db14:	0028      	movs	r0, r5
 800db16:	f7fe fa1d 	bl	800bf54 <lv_obj_readjust_scroll>
        lv_obj_scrollbar_invalidate(par);
 800db1a:	0028      	movs	r0, r5
 800db1c:	f7fe f9d8 	bl	800bed0 <lv_obj_scrollbar_invalidate>
        lv_event_send(par, LV_EVENT_CHILD_CHANGED, NULL);
 800db20:	2200      	movs	r2, #0
 800db22:	2122      	movs	r1, #34	; 0x22
 800db24:	0028      	movs	r0, r5
 800db26:	f7f7 f883 	bl	8004c30 <lv_event_send>
        lv_event_send(par, LV_EVENT_CHILD_DELETED, NULL);
 800db2a:	2200      	movs	r2, #0
 800db2c:	2124      	movs	r1, #36	; 0x24
 800db2e:	0028      	movs	r0, r5
 800db30:	f7f7 f87e 	bl	8004c30 <lv_event_send>
}
 800db34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db36:	0025      	movs	r5, r4
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800db38:	4f19      	ldr	r7, [pc, #100]	; (800dba0 <lv_obj_del+0xc0>)
 800db3a:	0038      	movs	r0, r7
 800db3c:	f007 f8f0 	bl	8014d20 <_lv_ll_get_head>
 800db40:	1e06      	subs	r6, r0, #0
 800db42:	d0f7      	beq.n	800db34 <lv_obj_del+0x54>
        for(i = 0; i < d->screen_cnt; i++) {
 800db44:	6a71      	ldr	r1, [r6, #36]	; 0x24
 800db46:	2900      	cmp	r1, #0
 800db48:	d019      	beq.n	800db7e <lv_obj_del+0x9e>
 800db4a:	2300      	movs	r3, #0
            if(d->screens[i] == scr) return d;
 800db4c:	68f0      	ldr	r0, [r6, #12]
 800db4e:	e002      	b.n	800db56 <lv_obj_del+0x76>
        for(i = 0; i < d->screen_cnt; i++) {
 800db50:	3301      	adds	r3, #1
 800db52:	428b      	cmp	r3, r1
 800db54:	d013      	beq.n	800db7e <lv_obj_del+0x9e>
            if(d->screens[i] == scr) return d;
 800db56:	009a      	lsls	r2, r3, #2
 800db58:	5882      	ldr	r2, [r0, r2]
 800db5a:	42aa      	cmp	r2, r5
 800db5c:	d1f8      	bne.n	800db50 <lv_obj_del+0x70>
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800db5e:	2200      	movs	r2, #0
 800db60:	2121      	movs	r1, #33	; 0x21
 800db62:	0020      	movs	r0, r4
        if(disp->act_scr == obj) act_scr_del = true;
 800db64:	6935      	ldr	r5, [r6, #16]
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800db66:	f7f7 f863 	bl	8004c30 <lv_event_send>
    if(res == LV_RES_INV) return;
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d002      	beq.n	800db74 <lv_obj_del+0x94>
 800db6e:	0020      	movs	r0, r4
 800db70:	f7ff fee8 	bl	800d944 <obj_del_core.part.0>
    if(act_scr_del) {
 800db74:	42a5      	cmp	r5, r4
 800db76:	d1dd      	bne.n	800db34 <lv_obj_del+0x54>
        disp->act_scr = NULL;
 800db78:	2300      	movs	r3, #0
 800db7a:	6133      	str	r3, [r6, #16]
    LV_LOG_TRACE("finished (delete %p)", (void *)obj);
 800db7c:	e7da      	b.n	800db34 <lv_obj_del+0x54>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800db7e:	0031      	movs	r1, r6
 800db80:	0038      	movs	r0, r7
 800db82:	f007 f8d9 	bl	8014d38 <_lv_ll_get_next>
 800db86:	1e06      	subs	r6, r0, #0
 800db88:	d1dc      	bne.n	800db44 <lv_obj_del+0x64>
 800db8a:	e7d3      	b.n	800db34 <lv_obj_del+0x54>
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 800db8c:	6863      	ldr	r3, [r4, #4]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d004      	beq.n	800db9c <lv_obj_del+0xbc>
 800db92:	001d      	movs	r5, r3
    return obj->parent;
 800db94:	685b      	ldr	r3, [r3, #4]
    } while(par != NULL);
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1fb      	bne.n	800db92 <lv_obj_del+0xb2>
 800db9a:	e7cd      	b.n	800db38 <lv_obj_del+0x58>
 800db9c:	2500      	movs	r5, #0
 800db9e:	e7cb      	b.n	800db38 <lv_obj_del+0x58>
 800dba0:	200005cc 	.word	0x200005cc

0800dba4 <lv_obj_set_parent>:
{
 800dba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dba6:	46ce      	mov	lr, r9
 800dba8:	4647      	mov	r7, r8
    if(obj->parent == NULL) {
 800dbaa:	6843      	ldr	r3, [r0, #4]
{
 800dbac:	0004      	movs	r4, r0
 800dbae:	000d      	movs	r5, r1
 800dbb0:	b580      	push	{r7, lr}
    if(obj->parent == NULL) {
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d076      	beq.n	800dca4 <lv_obj_set_parent+0x100>
    if(parent == NULL) {
 800dbb6:	2900      	cmp	r1, #0
 800dbb8:	d074      	beq.n	800dca4 <lv_obj_set_parent+0x100>
    lv_obj_invalidate(obj);
 800dbba:	f7fb fc2b 	bl	8009414 <lv_obj_invalidate>
    lv_obj_allocate_spec_attr(parent);
 800dbbe:	0028      	movs	r0, r5
 800dbc0:	f7fa f9c4 	bl	8007f4c <lv_obj_allocate_spec_attr>
    lv_obj_t * old_parent = obj->parent;
 800dbc4:	6867      	ldr	r7, [r4, #4]
    if(obj->spec_attr == NULL) return 0;
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	4698      	mov	r8, r3
    if(parent == NULL) return 0;
 800dbca:	2f00      	cmp	r7, #0
 800dbcc:	d018      	beq.n	800dc00 <lv_obj_set_parent+0x5c>
    if(obj->spec_attr == NULL) return 0;
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d100      	bne.n	800dbd4 <lv_obj_set_parent+0x30>
 800dbd2:	e072      	b.n	800dcba <lv_obj_set_parent+0x116>
    return obj->spec_attr->child_cnt;
 800dbd4:	6858      	ldr	r0, [r3, #4]
    else return obj->spec_attr->children[id];
 800dbd6:	681e      	ldr	r6, [r3, #0]
    return obj->spec_attr->child_cnt;
 800dbd8:	0001      	movs	r1, r0
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800dbda:	2300      	movs	r3, #0
 800dbdc:	e007      	b.n	800dbee <lv_obj_set_parent+0x4a>
    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800dbde:	4282      	cmp	r2, r0
 800dbe0:	d203      	bcs.n	800dbea <lv_obj_set_parent+0x46>
    else return obj->spec_attr->children[id];
 800dbe2:	0092      	lsls	r2, r2, #2
        if(lv_obj_get_child(parent, i) == obj) return i;
 800dbe4:	5992      	ldr	r2, [r2, r6]
 800dbe6:	4294      	cmp	r4, r2
 800dbe8:	d00e      	beq.n	800dc08 <lv_obj_set_parent+0x64>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800dbea:	3301      	adds	r3, #1
    if(obj->spec_attr == NULL) return 0;
 800dbec:	3101      	adds	r1, #1
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800dbee:	4298      	cmp	r0, r3
 800dbf0:	d068      	beq.n	800dcc4 <lv_obj_set_parent+0x120>
        if(lv_obj_get_child(parent, i) == obj) return i;
 800dbf2:	469c      	mov	ip, r3
    if(id < 0) {
 800dbf4:	1e1a      	subs	r2, r3, #0
 800dbf6:	daf2      	bge.n	800dbde <lv_obj_set_parent+0x3a>
        if(id < 0) return NULL;
 800dbf8:	2900      	cmp	r1, #0
 800dbfa:	dbf6      	blt.n	800dbea <lv_obj_set_parent+0x46>
 800dbfc:	000a      	movs	r2, r1
 800dbfe:	e7ee      	b.n	800dbde <lv_obj_set_parent+0x3a>
    else return obj->spec_attr->children[id];
 800dc00:	681e      	ldr	r6, [r3, #0]
    return obj->spec_attr->child_cnt;
 800dc02:	6858      	ldr	r0, [r3, #4]
 800dc04:	2300      	movs	r3, #0
 800dc06:	469c      	mov	ip, r3
        old_parent->spec_attr->children[i] = old_parent->spec_attr->children[i + 1];
 800dc08:	1e43      	subs	r3, r0, #1
 800dc0a:	4699      	mov	r9, r3
 800dc0c:	4663      	mov	r3, ip
 800dc0e:	2200      	movs	r2, #0
 800dc10:	0098      	lsls	r0, r3, #2
 800dc12:	45cc      	cmp	ip, r9
 800dc14:	dc03      	bgt.n	800dc1e <lv_obj_set_parent+0x7a>
 800dc16:	464b      	mov	r3, r9
 800dc18:	4662      	mov	r2, ip
 800dc1a:	1a9a      	subs	r2, r3, r2
 800dc1c:	0092      	lsls	r2, r2, #2
 800dc1e:	1d01      	adds	r1, r0, #4
 800dc20:	1871      	adds	r1, r6, r1
 800dc22:	1830      	adds	r0, r6, r0
 800dc24:	f00d fc65 	bl	801b4f2 <memmove>
    old_parent->spec_attr->child_cnt--;
 800dc28:	4643      	mov	r3, r8
 800dc2a:	464a      	mov	r2, r9
 800dc2c:	605a      	str	r2, [r3, #4]
    if(old_parent->spec_attr->child_cnt) {
 800dc2e:	2a00      	cmp	r2, #0
 800dc30:	d03c      	beq.n	800dcac <lv_obj_set_parent+0x108>
        old_parent->spec_attr->children = lv_mem_realloc(old_parent->spec_attr->children,
 800dc32:	0030      	movs	r0, r6
                                                         old_parent->spec_attr->child_cnt * (sizeof(lv_obj_t *)));
 800dc34:	0091      	lsls	r1, r2, #2
        old_parent->spec_attr->children = lv_mem_realloc(old_parent->spec_attr->children,
 800dc36:	f007 f961 	bl	8014efc <lv_mem_realloc>
 800dc3a:	4643      	mov	r3, r8
 800dc3c:	6018      	str	r0, [r3, #0]
    parent->spec_attr->child_cnt++;
 800dc3e:	68ae      	ldr	r6, [r5, #8]
 800dc40:	6873      	ldr	r3, [r6, #4]
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800dc42:	6830      	ldr	r0, [r6, #0]
    parent->spec_attr->child_cnt++;
 800dc44:	1c59      	adds	r1, r3, #1
 800dc46:	6071      	str	r1, [r6, #4]
                                                 parent->spec_attr->child_cnt * (sizeof(lv_obj_t *)));
 800dc48:	0089      	lsls	r1, r1, #2
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800dc4a:	f007 f957 	bl	8014efc <lv_mem_realloc>
    parent->spec_attr->children[lv_obj_get_child_cnt(parent) - 1] = obj;
 800dc4e:	491f      	ldr	r1, [pc, #124]	; (800dccc <lv_obj_set_parent+0x128>)
 800dc50:	68aa      	ldr	r2, [r5, #8]
 800dc52:	468c      	mov	ip, r1
 800dc54:	6853      	ldr	r3, [r2, #4]
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800dc56:	6030      	str	r0, [r6, #0]
    parent->spec_attr->children[lv_obj_get_child_cnt(parent) - 1] = obj;
 800dc58:	4463      	add	r3, ip
 800dc5a:	6812      	ldr	r2, [r2, #0]
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	509c      	str	r4, [r3, r2]
    lv_obj_readjust_scroll(old_parent, LV_ANIM_OFF);
 800dc60:	2100      	movs	r1, #0
 800dc62:	0038      	movs	r0, r7
    obj->parent = parent;
 800dc64:	6065      	str	r5, [r4, #4]
    lv_obj_readjust_scroll(old_parent, LV_ANIM_OFF);
 800dc66:	f7fe f975 	bl	800bf54 <lv_obj_readjust_scroll>
    lv_obj_scrollbar_invalidate(old_parent);
 800dc6a:	0038      	movs	r0, r7
 800dc6c:	f7fe f930 	bl	800bed0 <lv_obj_scrollbar_invalidate>
    lv_event_send(old_parent, LV_EVENT_CHILD_CHANGED, obj);
 800dc70:	0022      	movs	r2, r4
 800dc72:	2122      	movs	r1, #34	; 0x22
 800dc74:	0038      	movs	r0, r7
 800dc76:	f7f6 ffdb 	bl	8004c30 <lv_event_send>
    lv_event_send(old_parent, LV_EVENT_CHILD_DELETED, NULL);
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	2124      	movs	r1, #36	; 0x24
 800dc7e:	0038      	movs	r0, r7
 800dc80:	f7f6 ffd6 	bl	8004c30 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 800dc84:	0022      	movs	r2, r4
 800dc86:	2122      	movs	r1, #34	; 0x22
 800dc88:	0028      	movs	r0, r5
 800dc8a:	f7f6 ffd1 	bl	8004c30 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CREATED, NULL);
 800dc8e:	2200      	movs	r2, #0
 800dc90:	2123      	movs	r1, #35	; 0x23
 800dc92:	0028      	movs	r0, r5
 800dc94:	f7f6 ffcc 	bl	8004c30 <lv_event_send>
    lv_obj_mark_layout_as_dirty(obj);
 800dc98:	0020      	movs	r0, r4
 800dc9a:	f7fa ff69 	bl	8008b70 <lv_obj_mark_layout_as_dirty>
    lv_obj_invalidate(obj);
 800dc9e:	0020      	movs	r0, r4
 800dca0:	f7fb fbb8 	bl	8009414 <lv_obj_invalidate>
}
 800dca4:	bcc0      	pop	{r6, r7}
 800dca6:	46b9      	mov	r9, r7
 800dca8:	46b0      	mov	r8, r6
 800dcaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_mem_free(old_parent->spec_attr->children);
 800dcac:	0030      	movs	r0, r6
 800dcae:	f007 f909 	bl	8014ec4 <lv_mem_free>
        old_parent->spec_attr->children = NULL;
 800dcb2:	464a      	mov	r2, r9
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	601a      	str	r2, [r3, #0]
 800dcb8:	e7c1      	b.n	800dc3e <lv_obj_set_parent+0x9a>
    return obj->spec_attr->child_cnt;
 800dcba:	6858      	ldr	r0, [r3, #4]
    else return obj->spec_attr->children[id];
 800dcbc:	681e      	ldr	r6, [r3, #0]
 800dcbe:	1e43      	subs	r3, r0, #1
 800dcc0:	4699      	mov	r9, r3
 800dcc2:	e7b1      	b.n	800dc28 <lv_obj_set_parent+0x84>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	425b      	negs	r3, r3
 800dcc8:	469c      	mov	ip, r3
 800dcca:	e79d      	b.n	800dc08 <lv_obj_set_parent+0x64>
 800dccc:	3fffffff 	.word	0x3fffffff

0800dcd0 <lv_obj_move_to_index>:
{
 800dcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcd2:	46c6      	mov	lr, r8
 800dcd4:	0006      	movs	r6, r0
 800dcd6:	000f      	movs	r7, r1
 800dcd8:	b500      	push	{lr}
    if(index < 0) {
 800dcda:	2900      	cmp	r1, #0
 800dcdc:	db48      	blt.n	800dd70 <lv_obj_move_to_index+0xa0>
    if(obj == NULL) return NULL;
 800dcde:	2800      	cmp	r0, #0
 800dce0:	d061      	beq.n	800dda6 <lv_obj_move_to_index+0xd6>
 800dce2:	6843      	ldr	r3, [r0, #4]
    return obj->parent;
 800dce4:	4698      	mov	r8, r3
    if(parent == NULL) return 0;
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d04d      	beq.n	800dd86 <lv_obj_move_to_index+0xb6>
    if(obj->spec_attr == NULL) return 0;
 800dcea:	689b      	ldr	r3, [r3, #8]
 800dcec:	469c      	mov	ip, r3
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d056      	beq.n	800dda0 <lv_obj_move_to_index+0xd0>
    return obj->spec_attr->child_cnt;
 800dcf2:	6859      	ldr	r1, [r3, #4]
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800dcf4:	2300      	movs	r3, #0
    return obj->spec_attr->child_cnt;
 800dcf6:	000a      	movs	r2, r1
 800dcf8:	e007      	b.n	800dd0a <lv_obj_move_to_index+0x3a>
        if(lv_obj_get_child(parent, i) == obj) return i;
 800dcfa:	4660      	mov	r0, ip
 800dcfc:	6800      	ldr	r0, [r0, #0]
    else return obj->spec_attr->children[id];
 800dcfe:	00a4      	lsls	r4, r4, #2
        if(lv_obj_get_child(parent, i) == obj) return i;
 800dd00:	5820      	ldr	r0, [r4, r0]
 800dd02:	4286      	cmp	r6, r0
 800dd04:	d011      	beq.n	800dd2a <lv_obj_move_to_index+0x5a>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800dd06:	3301      	adds	r3, #1
    if(obj->spec_attr == NULL) return 0;
 800dd08:	3201      	adds	r2, #1
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800dd0a:	428b      	cmp	r3, r1
 800dd0c:	d048      	beq.n	800dda0 <lv_obj_move_to_index+0xd0>
        if(lv_obj_get_child(parent, i) == obj) return i;
 800dd0e:	001d      	movs	r5, r3
    if(id < 0) {
 800dd10:	1e1c      	subs	r4, r3, #0
 800dd12:	daf2      	bge.n	800dcfa <lv_obj_move_to_index+0x2a>
        if(id < 0) return NULL;
 800dd14:	2a00      	cmp	r2, #0
 800dd16:	dbf6      	blt.n	800dd06 <lv_obj_move_to_index+0x36>
    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800dd18:	4291      	cmp	r1, r2
 800dd1a:	d9f4      	bls.n	800dd06 <lv_obj_move_to_index+0x36>
        if(lv_obj_get_child(parent, i) == obj) return i;
 800dd1c:	4660      	mov	r0, ip
 800dd1e:	0014      	movs	r4, r2
 800dd20:	6800      	ldr	r0, [r0, #0]
    else return obj->spec_attr->children[id];
 800dd22:	00a4      	lsls	r4, r4, #2
        if(lv_obj_get_child(parent, i) == obj) return i;
 800dd24:	5820      	ldr	r0, [r4, r0]
 800dd26:	4286      	cmp	r6, r0
 800dd28:	d1ed      	bne.n	800dd06 <lv_obj_move_to_index+0x36>
    if(index < 0) return;
 800dd2a:	2f00      	cmp	r7, #0
 800dd2c:	db1d      	blt.n	800dd6a <lv_obj_move_to_index+0x9a>
    if(obj->spec_attr == NULL) return 0;
 800dd2e:	4643      	mov	r3, r8
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d019      	beq.n	800dd6a <lv_obj_move_to_index+0x9a>
    if(index >= (int32_t) lv_obj_get_child_cnt(parent)) return;
 800dd36:	685a      	ldr	r2, [r3, #4]
 800dd38:	42ba      	cmp	r2, r7
 800dd3a:	dd16      	ble.n	800dd6a <lv_obj_move_to_index+0x9a>
    if(index == old_index) return;
 800dd3c:	42bd      	cmp	r5, r7
 800dd3e:	d014      	beq.n	800dd6a <lv_obj_move_to_index+0x9a>
    if(index < old_index) {
 800dd40:	dc23      	bgt.n	800dd8a <lv_obj_move_to_index+0xba>
        while(i < index) {
 800dd42:	da37      	bge.n	800ddb4 <lv_obj_move_to_index+0xe4>
            parent->spec_attr->children[i] = parent->spec_attr->children[i + 1];
 800dd44:	681c      	ldr	r4, [r3, #0]
 800dd46:	00a8      	lsls	r0, r5, #2
 800dd48:	1d01      	adds	r1, r0, #4
 800dd4a:	1b7a      	subs	r2, r7, r5
 800dd4c:	0092      	lsls	r2, r2, #2
 800dd4e:	1861      	adds	r1, r4, r1
 800dd50:	1820      	adds	r0, r4, r0
 800dd52:	f00d fbce 	bl	801b4f2 <memmove>
    parent->spec_attr->children[index] = obj;
 800dd56:	00bf      	lsls	r7, r7, #2
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, NULL);
 800dd58:	2200      	movs	r2, #0
 800dd5a:	2122      	movs	r1, #34	; 0x22
 800dd5c:	4640      	mov	r0, r8
    parent->spec_attr->children[index] = obj;
 800dd5e:	513e      	str	r6, [r7, r4]
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, NULL);
 800dd60:	f7f6 ff66 	bl	8004c30 <lv_event_send>
    lv_obj_invalidate(parent);
 800dd64:	4640      	mov	r0, r8
 800dd66:	f7fb fb55 	bl	8009414 <lv_obj_invalidate>
}
 800dd6a:	bc80      	pop	{r7}
 800dd6c:	46b8      	mov	r8, r7
 800dd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(obj == NULL) return NULL;
 800dd70:	2800      	cmp	r0, #0
 800dd72:	d021      	beq.n	800ddb8 <lv_obj_move_to_index+0xe8>
    if(obj->spec_attr == NULL) return 0;
 800dd74:	6843      	ldr	r3, [r0, #4]
 800dd76:	689a      	ldr	r2, [r3, #8]
 800dd78:	2a00      	cmp	r2, #0
 800dd7a:	d018      	beq.n	800ddae <lv_obj_move_to_index+0xde>
    return obj->spec_attr->child_cnt;
 800dd7c:	6852      	ldr	r2, [r2, #4]
        index = lv_obj_get_child_cnt(lv_obj_get_parent(obj)) + index;
 800dd7e:	18bf      	adds	r7, r7, r2
    return obj->parent;
 800dd80:	4698      	mov	r8, r3
    if(parent == NULL) return 0;
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d1b1      	bne.n	800dcea <lv_obj_move_to_index+0x1a>
 800dd86:	2500      	movs	r5, #0
 800dd88:	e7cf      	b.n	800dd2a <lv_obj_move_to_index+0x5a>
            parent->spec_attr->children[i] = parent->spec_attr->children[i - 1];
 800dd8a:	1c78      	adds	r0, r7, #1
 800dd8c:	681c      	ldr	r4, [r3, #0]
 800dd8e:	0080      	lsls	r0, r0, #2
 800dd90:	1bea      	subs	r2, r5, r7
 800dd92:	1f01      	subs	r1, r0, #4
 800dd94:	0092      	lsls	r2, r2, #2
 800dd96:	1861      	adds	r1, r4, r1
 800dd98:	1820      	adds	r0, r4, r0
 800dd9a:	f00d fbaa 	bl	801b4f2 <memmove>
 800dd9e:	e7da      	b.n	800dd56 <lv_obj_move_to_index+0x86>
    if(obj->spec_attr == NULL) return 0;
 800dda0:	2501      	movs	r5, #1
 800dda2:	426d      	negs	r5, r5
 800dda4:	e7c1      	b.n	800dd2a <lv_obj_move_to_index+0x5a>
    if(obj == NULL) return NULL;
 800dda6:	2300      	movs	r3, #0
    const int32_t old_index = lv_obj_get_index(obj);
 800dda8:	2500      	movs	r5, #0
    if(obj == NULL) return NULL;
 800ddaa:	4698      	mov	r8, r3
 800ddac:	e7bf      	b.n	800dd2e <lv_obj_move_to_index+0x5e>
    if(obj->spec_attr == NULL) return 0;
 800ddae:	2200      	movs	r2, #0
        index = lv_obj_get_child_cnt(lv_obj_get_parent(obj)) + index;
 800ddb0:	18bf      	adds	r7, r7, r2
    if(obj == NULL) return NULL;
 800ddb2:	e7e5      	b.n	800dd80 <lv_obj_move_to_index+0xb0>
            parent->spec_attr->children[i] = parent->spec_attr->children[i + 1];
 800ddb4:	681c      	ldr	r4, [r3, #0]
 800ddb6:	e7ce      	b.n	800dd56 <lv_obj_move_to_index+0x86>
    if(obj->spec_attr == NULL) return 0;
 800ddb8:	6883      	ldr	r3, [r0, #8]
 800ddba:	deff      	udf	#255	; 0xff

0800ddbc <lv_obj_get_screen>:
    const lv_obj_t * par = obj;
 800ddbc:	e003      	b.n	800ddc6 <lv_obj_get_screen+0xa>
    return obj->parent;
 800ddbe:	6843      	ldr	r3, [r0, #4]
    } while(par != NULL);
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d002      	beq.n	800ddca <lv_obj_get_screen+0xe>
 800ddc4:	0018      	movs	r0, r3
    if(obj == NULL) return NULL;
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d1f9      	bne.n	800ddbe <lv_obj_get_screen+0x2>
}
 800ddca:	4770      	bx	lr

0800ddcc <lv_obj_get_disp>:
{
 800ddcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 800ddce:	6843      	ldr	r3, [r0, #4]
{
 800ddd0:	0004      	movs	r4, r0
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d003      	beq.n	800ddde <lv_obj_get_disp+0x12>
 800ddd6:	001c      	movs	r4, r3
    return obj->parent;
 800ddd8:	685b      	ldr	r3, [r3, #4]
    } while(par != NULL);
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d1fb      	bne.n	800ddd6 <lv_obj_get_disp+0xa>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800ddde:	4f0e      	ldr	r7, [pc, #56]	; (800de18 <lv_obj_get_disp+0x4c>)
 800dde0:	0038      	movs	r0, r7
 800dde2:	f006 ff9d 	bl	8014d20 <_lv_ll_get_head>
 800dde6:	2800      	cmp	r0, #0
 800dde8:	d013      	beq.n	800de12 <lv_obj_get_disp+0x46>
        for(i = 0; i < d->screen_cnt; i++) {
 800ddea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ddec:	2d00      	cmp	r5, #0
 800ddee:	d00a      	beq.n	800de06 <lv_obj_get_disp+0x3a>
 800ddf0:	2300      	movs	r3, #0
            if(d->screens[i] == scr) return d;
 800ddf2:	68c6      	ldr	r6, [r0, #12]
 800ddf4:	e002      	b.n	800ddfc <lv_obj_get_disp+0x30>
        for(i = 0; i < d->screen_cnt; i++) {
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	42ab      	cmp	r3, r5
 800ddfa:	d004      	beq.n	800de06 <lv_obj_get_disp+0x3a>
            if(d->screens[i] == scr) return d;
 800ddfc:	009a      	lsls	r2, r3, #2
 800ddfe:	58b2      	ldr	r2, [r6, r2]
 800de00:	42a2      	cmp	r2, r4
 800de02:	d1f8      	bne.n	800ddf6 <lv_obj_get_disp+0x2a>
}
 800de04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800de06:	0001      	movs	r1, r0
 800de08:	0038      	movs	r0, r7
 800de0a:	f006 ff95 	bl	8014d38 <_lv_ll_get_next>
 800de0e:	2800      	cmp	r0, #0
 800de10:	d1eb      	bne.n	800ddea <lv_obj_get_disp+0x1e>
    return NULL;
 800de12:	2000      	movs	r0, #0
 800de14:	e7f6      	b.n	800de04 <lv_obj_get_disp+0x38>
 800de16:	46c0      	nop			; (mov r8, r8)
 800de18:	200005cc 	.word	0x200005cc

0800de1c <lv_obj_get_parent>:
    if(obj == NULL) return NULL;
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d001      	beq.n	800de24 <lv_obj_get_parent+0x8>
    return obj->parent;
 800de20:	6840      	ldr	r0, [r0, #4]
}
 800de22:	4770      	bx	lr
    if(obj == NULL) return NULL;
 800de24:	2000      	movs	r0, #0
 800de26:	e7fc      	b.n	800de22 <lv_obj_get_parent+0x6>

0800de28 <lv_obj_get_child>:
    if(obj->spec_attr == NULL) return NULL;
 800de28:	6880      	ldr	r0, [r0, #8]
 800de2a:	2800      	cmp	r0, #0
 800de2c:	d007      	beq.n	800de3e <lv_obj_get_child+0x16>
        id = obj->spec_attr->child_cnt + id;
 800de2e:	6843      	ldr	r3, [r0, #4]
    if(id < 0) {
 800de30:	2900      	cmp	r1, #0
 800de32:	db05      	blt.n	800de40 <lv_obj_get_child+0x18>
    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800de34:	4299      	cmp	r1, r3
 800de36:	d205      	bcs.n	800de44 <lv_obj_get_child+0x1c>
    else return obj->spec_attr->children[id];
 800de38:	6803      	ldr	r3, [r0, #0]
 800de3a:	0089      	lsls	r1, r1, #2
 800de3c:	58c8      	ldr	r0, [r1, r3]
}
 800de3e:	4770      	bx	lr
        if(id < 0) return NULL;
 800de40:	18c9      	adds	r1, r1, r3
 800de42:	d5f7      	bpl.n	800de34 <lv_obj_get_child+0xc>
    if(obj->spec_attr == NULL) return NULL;
 800de44:	2000      	movs	r0, #0
 800de46:	e7fa      	b.n	800de3e <lv_obj_get_child+0x16>

0800de48 <lv_obj_get_child_cnt>:
    if(obj->spec_attr == NULL) return 0;
 800de48:	6883      	ldr	r3, [r0, #8]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d001      	beq.n	800de52 <lv_obj_get_child_cnt+0xa>
    return obj->spec_attr->child_cnt;
 800de4e:	6858      	ldr	r0, [r3, #4]
}
 800de50:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 800de52:	2000      	movs	r0, #0
 800de54:	e7fc      	b.n	800de50 <lv_obj_get_child_cnt+0x8>
 800de56:	46c0      	nop			; (mov r8, r8)

0800de58 <draw_buf_flush>:

/**
 * Flush the content of the draw buffer
 */
static void draw_buf_flush(lv_disp_t * disp)
{
 800de58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de5a:	46de      	mov	lr, fp
 800de5c:	4657      	mov	r7, sl
 800de5e:	4645      	mov	r5, r8
 800de60:	464e      	mov	r6, r9
 800de62:	b5e0      	push	{r5, r6, r7, lr}
 800de64:	0004      	movs	r4, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800de66:	4dc5      	ldr	r5, [pc, #788]	; (800e17c <draw_buf_flush+0x324>)
{
 800de68:	b09d      	sub	sp, #116	; 0x74
 800de6a:	9006      	str	r0, [sp, #24]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800de6c:	6828      	ldr	r0, [r5, #0]
 800de6e:	f005 fe39 	bl	8013ae4 <lv_disp_get_draw_buf>

    /*Flush the rendered content to the display*/
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 800de72:	6823      	ldr	r3, [r4, #0]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800de74:	0007      	movs	r7, r0
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 800de76:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800de78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d001      	beq.n	800de82 <draw_buf_flush+0x2a>
 800de7e:	0020      	movs	r0, r4
 800de80:	4798      	blx	r3

    /* In double buffered mode wait until the other buffer is freed
     * and driver is ready to receive the new buffer */
    if(draw_buf->buf1 && draw_buf->buf2) {
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d050      	beq.n	800df2a <draw_buf_flush+0xd2>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d04d      	beq.n	800df2a <draw_buf_flush+0xd2>
        while(draw_buf->flushing) {
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800de8e:	682a      	ldr	r2, [r5, #0]
 800de90:	6810      	ldr	r0, [r2, #0]
 800de92:	e003      	b.n	800de9c <draw_buf_flush+0x44>
 800de94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800de96:	2b00      	cmp	r3, #0
 800de98:	d000      	beq.n	800de9c <draw_buf_flush+0x44>
 800de9a:	e18b      	b.n	800e1b4 <draw_buf_flush+0x35c>
        while(draw_buf->flushing) {
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d1f8      	bne.n	800de94 <draw_buf_flush+0x3c>
 800dea2:	0006      	movs	r6, r0
            }
        }
#endif
    }

    draw_buf->flushing = 1;
 800dea4:	2101      	movs	r1, #1

    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 800dea6:	68f3      	ldr	r3, [r6, #12]
    draw_buf->flushing = 1;
 800dea8:	6139      	str	r1, [r7, #16]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 800deaa:	6998      	ldr	r0, [r3, #24]
 800deac:	07c0      	lsls	r0, r0, #31
 800deae:	d444      	bmi.n	800df3a <draw_buf_flush+0xe2>
    else draw_buf->flushing_last = 0;
 800deb0:	2300      	movs	r3, #0
 800deb2:	617b      	str	r3, [r7, #20]

    bool flushing_last = draw_buf->flushing_last;
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	930a      	str	r3, [sp, #40]	; 0x28

    if(disp->driver->flush_cb) {
 800deb8:	9b06      	ldr	r3, [sp, #24]
 800deba:	6818      	ldr	r0, [r3, #0]
 800debc:	6945      	ldr	r5, [r0, #20]
 800debe:	2d00      	cmp	r5, #0
 800dec0:	d019      	beq.n	800def6 <draw_buf_flush+0x9e>
        /*Rotate the buffer to the display's native orientation if necessary*/
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 800dec2:	2130      	movs	r1, #48	; 0x30
 800dec4:	7c03      	ldrb	r3, [r0, #16]
 800dec6:	4219      	tst	r1, r3
 800dec8:	d13c      	bne.n	800df44 <draw_buf_flush+0xec>
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
        }
        else {
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 800deca:	6823      	ldr	r3, [r4, #0]
 800decc:	6861      	ldr	r1, [r4, #4]
 800dece:	469c      	mov	ip, r3
{
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 800ded0:	8904      	ldrh	r4, [r0, #8]
 800ded2:	880b      	ldrh	r3, [r1, #0]
    lv_area_t offset_area = {
 800ded4:	ae1a      	add	r6, sp, #104	; 0x68
        .x1 = area->x1 + drv->offset_x,
 800ded6:	18e3      	adds	r3, r4, r3
    lv_area_t offset_area = {
 800ded8:	8033      	strh	r3, [r6, #0]
        .y1 = area->y1 + drv->offset_y,
 800deda:	8943      	ldrh	r3, [r0, #10]
 800dedc:	884e      	ldrh	r6, [r1, #2]
    lv_area_t offset_area = {
 800dede:	aa1a      	add	r2, sp, #104	; 0x68
        .y1 = area->y1 + drv->offset_y,
 800dee0:	199e      	adds	r6, r3, r6
    lv_area_t offset_area = {
 800dee2:	8056      	strh	r6, [r2, #2]
        .x2 = area->x2 + drv->offset_x,
 800dee4:	888e      	ldrh	r6, [r1, #4]
 800dee6:	19a4      	adds	r4, r4, r6
    lv_area_t offset_area = {
 800dee8:	8094      	strh	r4, [r2, #4]
        .y2 = area->y2 + drv->offset_y
 800deea:	88c9      	ldrh	r1, [r1, #6]
 800deec:	185b      	adds	r3, r3, r1
    lv_area_t offset_area = {
 800deee:	80d3      	strh	r3, [r2, #6]
    };

    drv->flush_cb(drv, &offset_area, color_p);
 800def0:	a91a      	add	r1, sp, #104	; 0x68
 800def2:	4662      	mov	r2, ip
 800def4:	47a8      	blx	r5
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || flushing_last)) {
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d00f      	beq.n	800df1c <draw_buf_flush+0xc4>
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	2a00      	cmp	r2, #0
 800df00:	d00c      	beq.n	800df1c <draw_buf_flush+0xc4>
 800df02:	9906      	ldr	r1, [sp, #24]
 800df04:	6809      	ldr	r1, [r1, #0]
 800df06:	7c09      	ldrb	r1, [r1, #16]
 800df08:	07c9      	lsls	r1, r1, #31
 800df0a:	d502      	bpl.n	800df12 <draw_buf_flush+0xba>
 800df0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800df0e:	2900      	cmp	r1, #0
 800df10:	d004      	beq.n	800df1c <draw_buf_flush+0xc4>
        if(draw_buf->buf_act == draw_buf->buf1)
 800df12:	68b9      	ldr	r1, [r7, #8]
 800df14:	428b      	cmp	r3, r1
 800df16:	d100      	bne.n	800df1a <draw_buf_flush+0xc2>
 800df18:	e14e      	b.n	800e1b8 <draw_buf_flush+0x360>
            draw_buf->buf_act = draw_buf->buf1;
 800df1a:	60bb      	str	r3, [r7, #8]
}
 800df1c:	b01d      	add	sp, #116	; 0x74
 800df1e:	bcf0      	pop	{r4, r5, r6, r7}
 800df20:	46bb      	mov	fp, r7
 800df22:	46b2      	mov	sl, r6
 800df24:	46a9      	mov	r9, r5
 800df26:	46a0      	mov	r8, r4
 800df28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    draw_buf->flushing = 1;
 800df2a:	2101      	movs	r1, #1
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 800df2c:	682a      	ldr	r2, [r5, #0]
 800df2e:	6816      	ldr	r6, [r2, #0]
    draw_buf->flushing = 1;
 800df30:	6139      	str	r1, [r7, #16]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 800df32:	68f3      	ldr	r3, [r6, #12]
 800df34:	6998      	ldr	r0, [r3, #24]
 800df36:	07c0      	lsls	r0, r0, #31
 800df38:	d5ba      	bpl.n	800deb0 <draw_buf_flush+0x58>
 800df3a:	699b      	ldr	r3, [r3, #24]
 800df3c:	079b      	lsls	r3, r3, #30
 800df3e:	d5b7      	bpl.n	800deb0 <draw_buf_flush+0x58>
 800df40:	6179      	str	r1, [r7, #20]
 800df42:	e7b7      	b.n	800deb4 <draw_buf_flush+0x5c>
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 800df44:	075b      	lsls	r3, r3, #29
 800df46:	d5c0      	bpl.n	800deca <draw_buf_flush+0x72>
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 800df48:	6863      	ldr	r3, [r4, #4]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 800df4a:	7c30      	ldrb	r0, [r6, #16]
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 800df4c:	930d      	str	r3, [sp, #52]	; 0x34
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 800df4e:	2306      	movs	r3, #6
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 800df50:	6824      	ldr	r4, [r4, #0]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 800df52:	4003      	ands	r3, r0
 800df54:	2b06      	cmp	r3, #6
 800df56:	d0ce      	beq.n	800def6 <draw_buf_flush+0x9e>
    if(drv->rotated == LV_DISP_ROT_180) {
 800df58:	4001      	ands	r1, r0
 800df5a:	2920      	cmp	r1, #32
 800df5c:	d100      	bne.n	800df60 <draw_buf_flush+0x108>
 800df5e:	e1ed      	b.n	800e33c <draw_buf_flush+0x4e4>
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 800df60:	06c3      	lsls	r3, r0, #27
 800df62:	d5c8      	bpl.n	800def6 <draw_buf_flush+0x9e>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800df64:	0010      	movs	r0, r2
 800df66:	f005 fdbd 	bl	8013ae4 <lv_disp_get_draw_buf>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800df6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df6c:	4681      	mov	r9, r0
 800df6e:	2104      	movs	r1, #4
 800df70:	5e53      	ldrsh	r3, [r2, r1]
 800df72:	2000      	movs	r0, #0
 800df74:	5e11      	ldrsh	r1, [r2, r0]
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 800df76:	20a0      	movs	r0, #160	; 0xa0
 800df78:	4698      	mov	r8, r3
 800df7a:	8893      	ldrh	r3, [r2, #4]
 800df7c:	468a      	mov	sl, r1
 800df7e:	8811      	ldrh	r1, [r2, #0]
 800df80:	9314      	str	r3, [sp, #80]	; 0x50
 800df82:	3301      	adds	r3, #1
 800df84:	1a5b      	subs	r3, r3, r1
 800df86:	9115      	str	r1, [sp, #84]	; 0x54
 800df88:	b299      	uxth	r1, r3
 800df8a:	9113      	str	r1, [sp, #76]	; 0x4c
 800df8c:	b21d      	sxth	r5, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800df8e:	2102      	movs	r1, #2
 800df90:	5e53      	ldrsh	r3, [r2, r1]
 800df92:	0140      	lsls	r0, r0, #5
 800df94:	9316      	str	r3, [sp, #88]	; 0x58
 800df96:	8851      	ldrh	r1, [r2, #2]
 800df98:	9111      	str	r1, [sp, #68]	; 0x44
 800df9a:	88d3      	ldrh	r3, [r2, #6]
 800df9c:	3301      	adds	r3, #1
 800df9e:	1a5b      	subs	r3, r3, r1
 800dfa0:	b21b      	sxth	r3, r3
 800dfa2:	0029      	movs	r1, r5
 800dfa4:	930c      	str	r3, [sp, #48]	; 0x30
 800dfa6:	f7f2 f8bf 	bl	8000128 <__udivsi3>
 800dfaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dfac:	1c03      	adds	r3, r0, #0
 800dfae:	b200      	sxth	r0, r0
 800dfb0:	4290      	cmp	r0, r2
 800dfb2:	dd00      	ble.n	800dfb6 <draw_buf_flush+0x15e>
 800dfb4:	1c13      	adds	r3, r2, #0
 800dfb6:	b21b      	sxth	r3, r3
 800dfb8:	9312      	str	r3, [sp, #72]	; 0x48
        if(drv->rotated == LV_DISP_ROT_90) {
 800dfba:	2330      	movs	r3, #48	; 0x30
 800dfbc:	7c32      	ldrb	r2, [r6, #16]
 800dfbe:	4013      	ands	r3, r2
 800dfc0:	2b10      	cmp	r3, #16
 800dfc2:	d10a      	bne.n	800dfda <draw_buf_flush+0x182>
            area->y2 = drv->ver_res - area->x1 - 1;
 800dfc4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dfc6:	8872      	ldrh	r2, [r6, #2]
 800dfc8:	43cb      	mvns	r3, r1
 800dfca:	18d2      	adds	r2, r2, r3
 800dfcc:	b213      	sxth	r3, r2
 800dfce:	4698      	mov	r8, r3
            area->y1 = area->y2 - area_w + 1;
 800dfd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dfd2:	1acb      	subs	r3, r1, r3
 800dfd4:	18d3      	adds	r3, r2, r3
 800dfd6:	b21b      	sxth	r3, r3
 800dfd8:	469a      	mov	sl, r3
 800dfda:	4652      	mov	r2, sl
 800dfdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfde:	805a      	strh	r2, [r3, #2]
 800dfe0:	4642      	mov	r2, r8
 800dfe2:	80da      	strh	r2, [r3, #6]
        while(row < area_h) {
 800dfe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	dc00      	bgt.n	800dfec <draw_buf_flush+0x194>
 800dfea:	e784      	b.n	800def6 <draw_buf_flush+0x9e>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800dfec:	0feb      	lsrs	r3, r5, #31
 800dfee:	195b      	adds	r3, r3, r5
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800dff0:	1c6a      	adds	r2, r5, #1
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800dff2:	105b      	asrs	r3, r3, #1
 800dff4:	9310      	str	r3, [sp, #64]	; 0x40
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800dff6:	0fd3      	lsrs	r3, r2, #31
 800dff8:	189b      	adds	r3, r3, r2
 800dffa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dffc:	105b      	asrs	r3, r3, #1
 800dffe:	9305      	str	r3, [sp, #20]
 800e000:	1e53      	subs	r3, r2, #1
 800e002:	b29b      	uxth	r3, r3
 800e004:	9302      	str	r3, [sp, #8]
 800e006:	3301      	adds	r3, #1
 800e008:	005b      	lsls	r3, r3, #1
 800e00a:	9308      	str	r3, [sp, #32]
            color_p += area_w * height;
 800e00c:	002b      	movs	r3, r5
 800e00e:	436b      	muls	r3, r5
 800e010:	9317      	str	r3, [sp, #92]	; 0x5c
 800e012:	2300      	movs	r3, #0
                    area->x2 = init_y_off + area_w - 1;
 800e014:	4694      	mov	ip, r2
 800e016:	46ca      	mov	sl, r9
 800e018:	46b3      	mov	fp, r6
            color_p += area_w * height;
 800e01a:	9307      	str	r3, [sp, #28]
 800e01c:	9309      	str	r3, [sp, #36]	; 0x24
                    area->x2 = init_y_off + area_w - 1;
 800e01e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e020:	9719      	str	r7, [sp, #100]	; 0x64
 800e022:	3b01      	subs	r3, #1
 800e024:	4463      	add	r3, ip
 800e026:	b29b      	uxth	r3, r3
 800e028:	9318      	str	r3, [sp, #96]	; 0x60
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 800e02a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e02c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e02e:	1a9b      	subs	r3, r3, r2
 800e030:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e032:	9304      	str	r3, [sp, #16]
 800e034:	4293      	cmp	r3, r2
 800e036:	dd00      	ble.n	800e03a <draw_buf_flush+0x1e2>
 800e038:	9204      	str	r2, [sp, #16]
 800e03a:	466b      	mov	r3, sp
 800e03c:	2210      	movs	r2, #16
 800e03e:	5e9b      	ldrsh	r3, [r3, r2]
            draw_buf->flushing = 1;
 800e040:	4652      	mov	r2, sl
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 800e042:	9303      	str	r3, [sp, #12]
            draw_buf->flushing = 1;
 800e044:	2301      	movs	r3, #1
 800e046:	6113      	str	r3, [r2, #16]
            if((row == 0) && (area_h >= area_w)) {
 800e048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d103      	bne.n	800e056 <draw_buf_flush+0x1fe>
 800e04e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e050:	429d      	cmp	r5, r3
 800e052:	dc00      	bgt.n	800e056 <draw_buf_flush+0x1fe>
 800e054:	e0dd      	b.n	800e212 <draw_buf_flush+0x3ba>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 800e056:	9b07      	ldr	r3, [sp, #28]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d100      	bne.n	800e05e <draw_buf_flush+0x206>
 800e05c:	e168      	b.n	800e330 <draw_buf_flush+0x4d8>
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 800e05e:	465b      	mov	r3, fp
 800e060:	2230      	movs	r2, #48	; 0x30
 800e062:	7c1b      	ldrb	r3, [r3, #16]
 800e064:	401a      	ands	r2, r3
 800e066:	4694      	mov	ip, r2
    uint32_t invert = (area_w * area_h) - 1;
 800e068:	9a04      	ldr	r2, [sp, #16]
 800e06a:	0013      	movs	r3, r2
 800e06c:	436b      	muls	r3, r5
    uint32_t initial_i = ((area_w - 1) * area_h);
 800e06e:	1a99      	subs	r1, r3, r2
 800e070:	4688      	mov	r8, r1
    uint32_t invert = (area_w * area_h) - 1;
 800e072:	930e      	str	r3, [sp, #56]	; 0x38
    for(lv_coord_t y = 0; y < area_h; y++) {
 800e074:	2a00      	cmp	r2, #0
 800e076:	dd38      	ble.n	800e0ea <draw_buf_flush+0x292>
 800e078:	9a03      	ldr	r2, [sp, #12]
 800e07a:	3b01      	subs	r3, #1
 800e07c:	0056      	lsls	r6, r2, #1
 800e07e:	4642      	mov	r2, r8
 800e080:	1a9b      	subs	r3, r3, r2
 800e082:	930b      	str	r3, [sp, #44]	; 0x2c
 800e084:	4653      	mov	r3, sl
                i += area_h;
 800e086:	2100      	movs	r1, #0
 800e088:	46c1      	mov	r9, r8
 800e08a:	46a2      	mov	sl, r4
 800e08c:	4270      	negs	r0, r6
 800e08e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e090:	9401      	str	r4, [sp, #4]
        uint32_t i = initial_i + y;
 800e092:	464b      	mov	r3, r9
 800e094:	185a      	adds	r2, r3, r1
        if(invert_i)
 800e096:	4663      	mov	r3, ip
 800e098:	2b30      	cmp	r3, #48	; 0x30
 800e09a:	d000      	beq.n	800e09e <draw_buf_flush+0x246>
 800e09c:	e08e      	b.n	800e1bc <draw_buf_flush+0x364>
            i = invert - i;
 800e09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0a0:	1a5a      	subs	r2, r3, r1
        for(lv_coord_t x = 0; x < area_w; x++) {
 800e0a2:	2d00      	cmp	r5, #0
 800e0a4:	dd14      	ble.n	800e0d0 <draw_buf_flush+0x278>
 800e0a6:	9b07      	ldr	r3, [sp, #28]
 800e0a8:	9f01      	ldr	r7, [sp, #4]
 800e0aa:	4698      	mov	r8, r3
 800e0ac:	0052      	lsls	r2, r2, #1
 800e0ae:	4442      	add	r2, r8
 800e0b0:	4654      	mov	r4, sl
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	46b8      	mov	r8, r7
            rot_buf[i] = *(orig_color_p++);
 800e0b6:	8827      	ldrh	r7, [r4, #0]
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	b21b      	sxth	r3, r3
 800e0bc:	8017      	strh	r7, [r2, #0]
        for(lv_coord_t x = 0; x < area_w; x++) {
 800e0be:	3402      	adds	r4, #2
 800e0c0:	1992      	adds	r2, r2, r6
 800e0c2:	429d      	cmp	r5, r3
 800e0c4:	d1f7      	bne.n	800e0b6 <draw_buf_flush+0x25e>
 800e0c6:	4643      	mov	r3, r8
 800e0c8:	9301      	str	r3, [sp, #4]
            rot_buf[i] = *(orig_color_p++);
 800e0ca:	9b08      	ldr	r3, [sp, #32]
 800e0cc:	4698      	mov	r8, r3
 800e0ce:	44c2      	add	sl, r8
    for(lv_coord_t y = 0; y < area_h; y++) {
 800e0d0:	3101      	adds	r1, #1
 800e0d2:	9a03      	ldr	r2, [sp, #12]
 800e0d4:	b20b      	sxth	r3, r1
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	dcdb      	bgt.n	800e092 <draw_buf_flush+0x23a>
                if(drv->rotated == LV_DISP_ROT_90) {
 800e0da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e0dc:	2230      	movs	r2, #48	; 0x30
 800e0de:	469a      	mov	sl, r3
 800e0e0:	465b      	mov	r3, fp
 800e0e2:	7c1b      	ldrb	r3, [r3, #16]
 800e0e4:	9c01      	ldr	r4, [sp, #4]
 800e0e6:	401a      	ands	r2, r3
 800e0e8:	4694      	mov	ip, r2
 800e0ea:	4663      	mov	r3, ip
 800e0ec:	2b10      	cmp	r3, #16
 800e0ee:	d100      	bne.n	800e0f2 <draw_buf_flush+0x29a>
 800e0f0:	e081      	b.n	800e1f6 <draw_buf_flush+0x39e>
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800e0f2:	466b      	mov	r3, sp
 800e0f4:	465a      	mov	r2, fp
 800e0f6:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
 800e0f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e0fa:	8811      	ldrh	r1, [r2, #0]
 800e0fc:	43db      	mvns	r3, r3
                    area->x1 = area->x2 - height + 1;
 800e0fe:	466a      	mov	r2, sp
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800e100:	18c9      	adds	r1, r1, r3
 800e102:	1b89      	subs	r1, r1, r6
 800e104:	b289      	uxth	r1, r1
                    area->x1 = area->x2 - height + 1;
 800e106:	8a17      	ldrh	r7, [r2, #16]
 800e108:	1c48      	adds	r0, r1, #1
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800e10a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                    area->x1 = area->x2 - height + 1;
 800e10c:	1bc0      	subs	r0, r0, r7
 800e10e:	b280      	uxth	r0, r0
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800e110:	8099      	strh	r1, [r3, #4]
                    area->x1 = area->x2 - height + 1;
 800e112:	8018      	strh	r0, [r3, #0]
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 800e114:	9a04      	ldr	r2, [sp, #16]
 800e116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e118:	4694      	mov	ip, r2
 800e11a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e11c:	4463      	add	r3, ip
 800e11e:	4293      	cmp	r3, r2
 800e120:	db63      	blt.n	800e1ea <draw_buf_flush+0x392>
 800e122:	4653      	mov	r3, sl
 800e124:	699b      	ldr	r3, [r3, #24]
 800e126:	07db      	lsls	r3, r3, #31
 800e128:	d55f      	bpl.n	800e1ea <draw_buf_flush+0x392>
 800e12a:	4653      	mov	r3, sl
 800e12c:	699b      	ldr	r3, [r3, #24]
 800e12e:	079b      	lsls	r3, r3, #30
 800e130:	d55b      	bpl.n	800e1ea <draw_buf_flush+0x392>
                draw_buf->flushing_last = 1;
 800e132:	2301      	movs	r3, #1
 800e134:	4652      	mov	r2, sl
 800e136:	6153      	str	r3, [r2, #20]
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 800e138:	9b07      	ldr	r3, [sp, #28]
 800e13a:	4699      	mov	r9, r3
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d058      	beq.n	800e1f2 <draw_buf_flush+0x39a>
        .x1 = area->x1 + drv->offset_x,
 800e140:	465b      	mov	r3, fp
 800e142:	891b      	ldrh	r3, [r3, #8]
 800e144:	4698      	mov	r8, r3
    lv_area_t offset_area = {
 800e146:	ab1a      	add	r3, sp, #104	; 0x68
        .x1 = area->x1 + drv->offset_x,
 800e148:	4440      	add	r0, r8
    lv_area_t offset_area = {
 800e14a:	8018      	strh	r0, [r3, #0]
        .y1 = area->y1 + drv->offset_y,
 800e14c:	465b      	mov	r3, fp
 800e14e:	8958      	ldrh	r0, [r3, #10]
 800e150:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e152:	885b      	ldrh	r3, [r3, #2]
 800e154:	469c      	mov	ip, r3
 800e156:	4484      	add	ip, r0
    lv_area_t offset_area = {
 800e158:	4662      	mov	r2, ip
 800e15a:	ab1a      	add	r3, sp, #104	; 0x68
 800e15c:	805a      	strh	r2, [r3, #2]
        .x2 = area->x2 + drv->offset_x,
 800e15e:	000b      	movs	r3, r1
    lv_area_t offset_area = {
 800e160:	aa1a      	add	r2, sp, #104	; 0x68
        .x2 = area->x2 + drv->offset_x,
 800e162:	4443      	add	r3, r8
    lv_area_t offset_area = {
 800e164:	8093      	strh	r3, [r2, #4]
        .y2 = area->y2 + drv->offset_y
 800e166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e168:	88db      	ldrh	r3, [r3, #6]
 800e16a:	18c0      	adds	r0, r0, r3
    lv_area_t offset_area = {
 800e16c:	80d0      	strh	r0, [r2, #6]
 800e16e:	0013      	movs	r3, r2
    drv->flush_cb(drv, &offset_area, color_p);
 800e170:	4658      	mov	r0, fp
 800e172:	0019      	movs	r1, r3
 800e174:	464a      	mov	r2, r9
 800e176:	6943      	ldr	r3, [r0, #20]
 800e178:	4798      	blx	r3
}
 800e17a:	e005      	b.n	800e188 <draw_buf_flush+0x330>
 800e17c:	20000468 	.word	0x20000468
                if(drv->wait_cb) drv->wait_cb(drv);
 800e180:	465b      	mov	r3, fp
 800e182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e184:	2b00      	cmp	r3, #0
 800e186:	d12d      	bne.n	800e1e4 <draw_buf_flush+0x38c>
            while(draw_buf->flushing) {
 800e188:	4653      	mov	r3, sl
 800e18a:	691b      	ldr	r3, [r3, #16]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d1f7      	bne.n	800e180 <draw_buf_flush+0x328>
            color_p += area_w * height;
 800e190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            row += height;
 800e192:	19f6      	adds	r6, r6, r7
            color_p += area_w * height;
 800e194:	005b      	lsls	r3, r3, #1
        while(row < area_h) {
 800e196:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            color_p += area_w * height;
 800e198:	18e4      	adds	r4, r4, r3
            row += height;
 800e19a:	b233      	sxth	r3, r6
 800e19c:	9309      	str	r3, [sp, #36]	; 0x24
        while(row < area_h) {
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	dd00      	ble.n	800e1a4 <draw_buf_flush+0x34c>
 800e1a2:	e742      	b.n	800e02a <draw_buf_flush+0x1d2>
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 800e1a4:	9807      	ldr	r0, [sp, #28]
 800e1a6:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800e1a8:	2800      	cmp	r0, #0
 800e1aa:	d100      	bne.n	800e1ae <draw_buf_flush+0x356>
 800e1ac:	e6a3      	b.n	800def6 <draw_buf_flush+0x9e>
 800e1ae:	f006 ff89 	bl	80150c4 <lv_mem_buf_release>
 800e1b2:	e6a0      	b.n	800def6 <draw_buf_flush+0x9e>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800e1b4:	4798      	blx	r3
 800e1b6:	e66a      	b.n	800de8e <draw_buf_flush+0x36>
            draw_buf->buf_act = draw_buf->buf2;
 800e1b8:	60ba      	str	r2, [r7, #8]
 800e1ba:	e6af      	b.n	800df1c <draw_buf_flush+0xc4>
        for(lv_coord_t x = 0; x < area_w; x++) {
 800e1bc:	2d00      	cmp	r5, #0
 800e1be:	dc00      	bgt.n	800e1c2 <draw_buf_flush+0x36a>
 800e1c0:	e786      	b.n	800e0d0 <draw_buf_flush+0x278>
 800e1c2:	9b07      	ldr	r3, [sp, #28]
 800e1c4:	9f01      	ldr	r7, [sp, #4]
 800e1c6:	4698      	mov	r8, r3
 800e1c8:	0052      	lsls	r2, r2, #1
 800e1ca:	4442      	add	r2, r8
 800e1cc:	4654      	mov	r4, sl
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	46b8      	mov	r8, r7
            rot_buf[i] = *(orig_color_p++);
 800e1d2:	8827      	ldrh	r7, [r4, #0]
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	b21b      	sxth	r3, r3
 800e1d8:	8017      	strh	r7, [r2, #0]
        for(lv_coord_t x = 0; x < area_w; x++) {
 800e1da:	3402      	adds	r4, #2
 800e1dc:	1812      	adds	r2, r2, r0
 800e1de:	429d      	cmp	r5, r3
 800e1e0:	d1f7      	bne.n	800e1d2 <draw_buf_flush+0x37a>
 800e1e2:	e770      	b.n	800e0c6 <draw_buf_flush+0x26e>
                if(drv->wait_cb) drv->wait_cb(drv);
 800e1e4:	4658      	mov	r0, fp
 800e1e6:	4798      	blx	r3
 800e1e8:	e7ce      	b.n	800e188 <draw_buf_flush+0x330>
                draw_buf->flushing_last = 0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	4652      	mov	r2, sl
 800e1ee:	6153      	str	r3, [r2, #20]
 800e1f0:	e7a2      	b.n	800e138 <draw_buf_flush+0x2e0>
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 800e1f2:	46a1      	mov	r9, r4
 800e1f4:	e7a4      	b.n	800e140 <draw_buf_flush+0x2e8>
                    area->x1 = init_y_off + row;
 800e1f6:	466b      	mov	r3, sp
                    area->x2 = init_y_off + row + height - 1;
 800e1f8:	466a      	mov	r2, sp
                    area->x1 = init_y_off + row;
 800e1fa:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
 800e1fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
                    area->x2 = init_y_off + row + height - 1;
 800e1fe:	8a17      	ldrh	r7, [r2, #16]
                    area->x1 = init_y_off + row;
 800e200:	1998      	adds	r0, r3, r6
 800e202:	b280      	uxth	r0, r0
                    area->x2 = init_y_off + row + height - 1;
 800e204:	1e41      	subs	r1, r0, #1
                    area->x1 = init_y_off + row;
 800e206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                    area->x2 = init_y_off + row + height - 1;
 800e208:	1879      	adds	r1, r7, r1
 800e20a:	b289      	uxth	r1, r1
                    area->x1 = init_y_off + row;
 800e20c:	8018      	strh	r0, [r3, #0]
                    area->x2 = init_y_off + row + height - 1;
 800e20e:	8099      	strh	r1, [r3, #4]
 800e210:	e780      	b.n	800e114 <draw_buf_flush+0x2bc>
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 800e212:	465b      	mov	r3, fp
 800e214:	2230      	movs	r2, #48	; 0x30
 800e216:	7c1b      	ldrb	r3, [r3, #16]
 800e218:	401a      	ands	r2, r3
 800e21a:	9204      	str	r2, [sp, #16]
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800e21c:	2d01      	cmp	r5, #1
 800e21e:	dd71      	ble.n	800e304 <draw_buf_flush+0x4ac>
 800e220:	2d00      	cmp	r5, #0
 800e222:	dd6c      	ble.n	800e2fe <draw_buf_flush+0x4a6>
 800e224:	2300      	movs	r3, #0
 800e226:	469c      	mov	ip, r3
 800e228:	4653      	mov	r3, sl
 800e22a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e22c:	465b      	mov	r3, fp
 800e22e:	2600      	movs	r6, #0
 800e230:	930e      	str	r3, [sp, #56]	; 0x38
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800e232:	9b02      	ldr	r3, [sp, #8]
 800e234:	2100      	movs	r1, #0
 800e236:	1b9f      	subs	r7, r3, r6
                    &color_p[inv_i * w + inv_j],
 800e238:	002b      	movs	r3, r5
 800e23a:	b23f      	sxth	r7, r7
 800e23c:	437b      	muls	r3, r7
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800e23e:	2200      	movs	r2, #0
 800e240:	46b0      	mov	r8, r6
 800e242:	9703      	str	r7, [sp, #12]
 800e244:	9301      	str	r3, [sp, #4]
 800e246:	e024      	b.n	800e292 <draw_buf_flush+0x43a>
                    &color_p[i * w + j],
 800e248:	4660      	mov	r0, ip
                    &color_p[inv_i * w + inv_j],
 800e24a:	9e01      	ldr	r6, [sp, #4]
                    &color_p[i * w + j],
 800e24c:	1880      	adds	r0, r0, r2
 800e24e:	0040      	lsls	r0, r0, #1
 800e250:	4681      	mov	r9, r0
                    &color_p[inv_i * w + inv_j],
 800e252:	46b2      	mov	sl, r6
                    &color_p[inv_j * w + i],
 800e254:	0028      	movs	r0, r5
                    &color_p[j * w + inv_i]
 800e256:	9e03      	ldr	r6, [sp, #12]
                    &color_p[inv_j * w + i],
 800e258:	4358      	muls	r0, r3
                    &color_p[inv_i * w + inv_j],
 800e25a:	4453      	add	r3, sl
                    &color_p[j * w + inv_i]
 800e25c:	46b2      	mov	sl, r6
    tmp = *a;
 800e25e:	464e      	mov	r6, r9
                    &color_p[j * w + inv_i]
 800e260:	436a      	muls	r2, r5
    tmp = *a;
 800e262:	5ba6      	ldrh	r6, [r4, r6]
                    &color_p[inv_j * w + i],
 800e264:	4440      	add	r0, r8
 800e266:	0040      	lsls	r0, r0, #1
                    &color_p[j * w + inv_i]
 800e268:	4452      	add	r2, sl
    tmp = *a;
 800e26a:	46b2      	mov	sl, r6
    *a = *b;
 800e26c:	5a26      	ldrh	r6, [r4, r0]
                    &color_p[inv_i * w + inv_j],
 800e26e:	005b      	lsls	r3, r3, #1
    *a = *b;
 800e270:	46b3      	mov	fp, r6
 800e272:	464e      	mov	r6, r9
 800e274:	465f      	mov	r7, fp
 800e276:	53a7      	strh	r7, [r4, r6]
    *b = *c;
 800e278:	5ae6      	ldrh	r6, [r4, r3]
                    &color_p[j * w + inv_i]
 800e27a:	0052      	lsls	r2, r2, #1
    *b = *c;
 800e27c:	5226      	strh	r6, [r4, r0]
    *c = *d;
 800e27e:	5aa0      	ldrh	r0, [r4, r2]
 800e280:	3101      	adds	r1, #1
 800e282:	52e0      	strh	r0, [r4, r3]
    *d = tmp;
 800e284:	4653      	mov	r3, sl
 800e286:	52a3      	strh	r3, [r4, r2]
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800e288:	9b05      	ldr	r3, [sp, #20]
 800e28a:	b209      	sxth	r1, r1
 800e28c:	000a      	movs	r2, r1
 800e28e:	4299      	cmp	r1, r3
 800e290:	da29      	bge.n	800e2e6 <draw_buf_flush+0x48e>
            lv_coord_t inv_j = (w - 1) - j;
 800e292:	9b02      	ldr	r3, [sp, #8]
 800e294:	b289      	uxth	r1, r1
            if(is_270) {
 800e296:	9804      	ldr	r0, [sp, #16]
 800e298:	1a5b      	subs	r3, r3, r1
 800e29a:	b21b      	sxth	r3, r3
 800e29c:	2830      	cmp	r0, #48	; 0x30
 800e29e:	d0d3      	beq.n	800e248 <draw_buf_flush+0x3f0>
                    &color_p[i * w + j],
 800e2a0:	4660      	mov	r0, ip
 800e2a2:	1880      	adds	r0, r0, r2
 800e2a4:	0040      	lsls	r0, r0, #1
 800e2a6:	4681      	mov	r9, r0
                    &color_p[j * w + inv_i],
 800e2a8:	9803      	ldr	r0, [sp, #12]
    tmp = *a;
 800e2aa:	464e      	mov	r6, r9
                    &color_p[j * w + inv_i],
 800e2ac:	4682      	mov	sl, r0
 800e2ae:	436a      	muls	r2, r5
    tmp = *a;
 800e2b0:	5ba6      	ldrh	r6, [r4, r6]
                    &color_p[j * w + inv_i],
 800e2b2:	4452      	add	r2, sl
 800e2b4:	0052      	lsls	r2, r2, #1
    tmp = *a;
 800e2b6:	46b2      	mov	sl, r6
    *a = *b;
 800e2b8:	5aa6      	ldrh	r6, [r4, r2]
                    &color_p[inv_i * w + inv_j],
 800e2ba:	9801      	ldr	r0, [sp, #4]
    *a = *b;
 800e2bc:	46b3      	mov	fp, r6
 800e2be:	464e      	mov	r6, r9
 800e2c0:	465f      	mov	r7, fp
                    &color_p[inv_i * w + inv_j],
 800e2c2:	18c0      	adds	r0, r0, r3
                    &color_p[inv_j * w + i]
 800e2c4:	436b      	muls	r3, r5
    *a = *b;
 800e2c6:	53a7      	strh	r7, [r4, r6]
                    &color_p[inv_i * w + inv_j],
 800e2c8:	0040      	lsls	r0, r0, #1
    *b = *c;
 800e2ca:	5a26      	ldrh	r6, [r4, r0]
                    &color_p[inv_j * w + i]
 800e2cc:	4443      	add	r3, r8
 800e2ce:	005b      	lsls	r3, r3, #1
    *b = *c;
 800e2d0:	52a6      	strh	r6, [r4, r2]
    *c = *d;
 800e2d2:	5ae2      	ldrh	r2, [r4, r3]
 800e2d4:	3101      	adds	r1, #1
 800e2d6:	5222      	strh	r2, [r4, r0]
    *d = tmp;
 800e2d8:	4652      	mov	r2, sl
 800e2da:	52e2      	strh	r2, [r4, r3]
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800e2dc:	9b05      	ldr	r3, [sp, #20]
 800e2de:	b209      	sxth	r1, r1
 800e2e0:	000a      	movs	r2, r1
 800e2e2:	4299      	cmp	r1, r3
 800e2e4:	dbd5      	blt.n	800e292 <draw_buf_flush+0x43a>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800e2e6:	4646      	mov	r6, r8
 800e2e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e2ea:	3601      	adds	r6, #1
 800e2ec:	b233      	sxth	r3, r6
 800e2ee:	44ac      	add	ip, r5
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	dc9e      	bgt.n	800e232 <draw_buf_flush+0x3da>
 800e2f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2f6:	469a      	mov	sl, r3
 800e2f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2fa:	469b      	mov	fp, r3
 800e2fc:	7c1b      	ldrb	r3, [r3, #16]
                if(drv->rotated == LV_DISP_ROT_90) {
 800e2fe:	2230      	movs	r2, #48	; 0x30
 800e300:	401a      	ands	r2, r3
 800e302:	9204      	str	r2, [sp, #16]
 800e304:	2a10      	cmp	r2, #16
 800e306:	d069      	beq.n	800e3dc <draw_buf_flush+0x584>
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800e308:	465a      	mov	r2, fp
 800e30a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e30c:	8811      	ldrh	r1, [r2, #0]
 800e30e:	43db      	mvns	r3, r3
                    area->x1 = area->x2 - area_w + 1;
 800e310:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e312:	9814      	ldr	r0, [sp, #80]	; 0x50
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800e314:	18c9      	adds	r1, r1, r3
 800e316:	b289      	uxth	r1, r1
                    area->x1 = area->x2 - area_w + 1;
 800e318:	1a10      	subs	r0, r2, r0
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800e31a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                    area->x1 = area->x2 - area_w + 1;
 800e31c:	1808      	adds	r0, r1, r0
 800e31e:	b280      	uxth	r0, r0
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800e320:	8099      	strh	r1, [r3, #4]
                    area->x1 = area->x2 - area_w + 1;
 800e322:	8018      	strh	r0, [r3, #0]
 800e324:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e326:	2600      	movs	r6, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e328:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800e32a:	930e      	str	r3, [sp, #56]	; 0x38
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800e32c:	9504      	str	r5, [sp, #16]
 800e32e:	e6f1      	b.n	800e114 <draw_buf_flush+0x2bc>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 800e330:	20a0      	movs	r0, #160	; 0xa0
 800e332:	0180      	lsls	r0, r0, #6
 800e334:	f006 fe22 	bl	8014f7c <lv_mem_buf_get>
 800e338:	9007      	str	r0, [sp, #28]
 800e33a:	e690      	b.n	800e05e <draw_buf_flush+0x206>
 800e33c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e33e:	889a      	ldrh	r2, [r3, #4]
 800e340:	4690      	mov	r8, r2
 800e342:	881a      	ldrh	r2, [r3, #0]
 800e344:	4694      	mov	ip, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e346:	88da      	ldrh	r2, [r3, #6]
 800e348:	885b      	ldrh	r3, [r3, #2]
 800e34a:	4691      	mov	r9, r2
 800e34c:	469a      	mov	sl, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e34e:	4643      	mov	r3, r8
 800e350:	1c58      	adds	r0, r3, #1
 800e352:	4663      	mov	r3, ip
 800e354:	1ac0      	subs	r0, r0, r3
    uint32_t total = area_w * area_h;
 800e356:	b203      	sxth	r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e358:	1c50      	adds	r0, r2, #1
 800e35a:	4652      	mov	r2, sl
 800e35c:	1a80      	subs	r0, r0, r2
 800e35e:	b200      	sxth	r0, r0
 800e360:	4358      	muls	r0, r3
    uint32_t i = total - 1, j = 0;
 800e362:	1e42      	subs	r2, r0, #1
    while(i > j) {
 800e364:	2801      	cmp	r0, #1
 800e366:	d00f      	beq.n	800e388 <draw_buf_flush+0x530>
 800e368:	0021      	movs	r1, r4
 800e36a:	46a3      	mov	fp, r4
 800e36c:	0053      	lsls	r3, r2, #1
 800e36e:	18e3      	adds	r3, r4, r3
        tmp = color_p[i];
 800e370:	881d      	ldrh	r5, [r3, #0]
        color_p[i] = color_p[j];
 800e372:	880c      	ldrh	r4, [r1, #0]
    while(i > j) {
 800e374:	3b02      	subs	r3, #2
        color_p[i] = color_p[j];
 800e376:	805c      	strh	r4, [r3, #2]
        color_p[j] = tmp;
 800e378:	800d      	strh	r5, [r1, #0]
        i--;
 800e37a:	0015      	movs	r5, r2
 800e37c:	3a01      	subs	r2, #1
    while(i > j) {
 800e37e:	3102      	adds	r1, #2
 800e380:	1b45      	subs	r5, r0, r5
 800e382:	4295      	cmp	r5, r2
 800e384:	d3f4      	bcc.n	800e370 <draw_buf_flush+0x518>
 800e386:	465c      	mov	r4, fp
    area->y2 = drv->ver_res - area->y1 - 1;
 800e388:	4652      	mov	r2, sl
 800e38a:	8873      	ldrh	r3, [r6, #2]
 800e38c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e38e:	3b01      	subs	r3, #1
 800e390:	b29b      	uxth	r3, r3
 800e392:	1a9a      	subs	r2, r3, r2
 800e394:	b290      	uxth	r0, r2
    area->y1 = drv->ver_res - tmp_coord - 1;
 800e396:	464a      	mov	r2, r9
 800e398:	1a9b      	subs	r3, r3, r2
    area->x2 = drv->hor_res - area->x1 - 1;
 800e39a:	4662      	mov	r2, ip
    area->y1 = drv->ver_res - tmp_coord - 1;
 800e39c:	b29d      	uxth	r5, r3
 800e39e:	8833      	ldrh	r3, [r6, #0]
    area->y2 = drv->ver_res - area->y1 - 1;
 800e3a0:	80c8      	strh	r0, [r1, #6]
    area->y1 = drv->ver_res - tmp_coord - 1;
 800e3a2:	3b01      	subs	r3, #1
 800e3a4:	b29b      	uxth	r3, r3
    area->x2 = drv->hor_res - area->x1 - 1;
 800e3a6:	1a9a      	subs	r2, r3, r2
 800e3a8:	b292      	uxth	r2, r2
 800e3aa:	808a      	strh	r2, [r1, #4]
 800e3ac:	4694      	mov	ip, r2
    area->x1 = drv->hor_res - tmp_coord - 1;
 800e3ae:	4642      	mov	r2, r8
 800e3b0:	1a9b      	subs	r3, r3, r2
 800e3b2:	b29b      	uxth	r3, r3
    area->y1 = drv->ver_res - tmp_coord - 1;
 800e3b4:	804d      	strh	r5, [r1, #2]
    area->x1 = drv->hor_res - tmp_coord - 1;
 800e3b6:	800b      	strh	r3, [r1, #0]
        .x1 = area->x1 + drv->offset_x,
 800e3b8:	8931      	ldrh	r1, [r6, #8]
    lv_area_t offset_area = {
 800e3ba:	aa1a      	add	r2, sp, #104	; 0x68
        .x1 = area->x1 + drv->offset_x,
 800e3bc:	18cb      	adds	r3, r1, r3
    lv_area_t offset_area = {
 800e3be:	8013      	strh	r3, [r2, #0]
        .y1 = area->y1 + drv->offset_y,
 800e3c0:	8973      	ldrh	r3, [r6, #10]
 800e3c2:	195d      	adds	r5, r3, r5
    lv_area_t offset_area = {
 800e3c4:	8055      	strh	r5, [r2, #2]
        .x2 = area->x2 + drv->offset_x,
 800e3c6:	000a      	movs	r2, r1
        .y2 = area->y2 + drv->offset_y
 800e3c8:	181b      	adds	r3, r3, r0
        .x2 = area->x2 + drv->offset_x,
 800e3ca:	4462      	add	r2, ip
    lv_area_t offset_area = {
 800e3cc:	a91a      	add	r1, sp, #104	; 0x68
 800e3ce:	808a      	strh	r2, [r1, #4]
 800e3d0:	80cb      	strh	r3, [r1, #6]
    drv->flush_cb(drv, &offset_area, color_p);
 800e3d2:	0022      	movs	r2, r4
 800e3d4:	0030      	movs	r0, r6
 800e3d6:	6973      	ldr	r3, [r6, #20]
 800e3d8:	4798      	blx	r3
}
 800e3da:	e58c      	b.n	800def6 <draw_buf_flush+0x9e>
                    area->x1 = init_y_off;
 800e3dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e3e0:	2600      	movs	r6, #0
 800e3e2:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + area_w - 1;
 800e3e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e3e6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800e3e8:	809a      	strh	r2, [r3, #4]
 800e3ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e3ec:	0011      	movs	r1, r2
 800e3ee:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e3f0:	930e      	str	r3, [sp, #56]	; 0x38
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800e3f2:	9504      	str	r5, [sp, #16]
 800e3f4:	e68e      	b.n	800e114 <draw_buf_flush+0x2bc>
 800e3f6:	46c0      	nop			; (mov r8, r8)

0800e3f8 <lv_refr_get_top_obj.part.0>:
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
 800e3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3fa:	000e      	movs	r6, r1
 800e3fc:	b083      	sub	sp, #12
    info.res = LV_COVER_RES_COVER;
 800e3fe:	2300      	movs	r3, #0
 800e400:	466a      	mov	r2, sp
    info.area = area_p;
 800e402:	9001      	str	r0, [sp, #4]
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
 800e404:	0007      	movs	r7, r0
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800e406:	2112      	movs	r1, #18
 800e408:	0030      	movs	r0, r6
    info.res = LV_COVER_RES_COVER;
 800e40a:	7013      	strb	r3, [r2, #0]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800e40c:	f7f6 fc10 	bl	8004c30 <lv_event_send>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 800e410:	466b      	mov	r3, sp
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	2b02      	cmp	r3, #2
 800e416:	d02a      	beq.n	800e46e <lv_refr_get_top_obj.part.0+0x76>
    int32_t child_cnt = lv_obj_get_child_cnt(obj);
 800e418:	0030      	movs	r0, r6
 800e41a:	f7ff fd15 	bl	800de48 <lv_obj_get_child_cnt>
    for(i = child_cnt - 1; i >= 0; i--) {
 800e41e:	1e44      	subs	r4, r0, #1
 800e420:	d420      	bmi.n	800e464 <lv_refr_get_top_obj.part.0+0x6c>
        lv_obj_t * child = obj->spec_attr->children[i];
 800e422:	68b3      	ldr	r3, [r6, #8]
 800e424:	00a2      	lsls	r2, r4, #2
 800e426:	681b      	ldr	r3, [r3, #0]
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800e428:	0038      	movs	r0, r7
        lv_obj_t * child = obj->spec_attr->children[i];
 800e42a:	58d5      	ldr	r5, [r2, r3]
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800e42c:	2200      	movs	r2, #0
 800e42e:	0029      	movs	r1, r5
 800e430:	3110      	adds	r1, #16
 800e432:	f006 f899 	bl	8014568 <_lv_area_is_in>
 800e436:	2800      	cmp	r0, #0
 800e438:	d012      	beq.n	800e460 <lv_refr_get_top_obj.part.0+0x68>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800e43a:	2101      	movs	r1, #1
 800e43c:	0028      	movs	r0, r5
 800e43e:	f7f9 fd69 	bl	8007f14 <lv_obj_has_flag>
 800e442:	2800      	cmp	r0, #0
 800e444:	d10c      	bne.n	800e460 <lv_refr_get_top_obj.part.0+0x68>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800e446:	0028      	movs	r0, r5
 800e448:	f7fa f934 	bl	80086b4 <_lv_obj_get_layer_type>
 800e44c:	2800      	cmp	r0, #0
 800e44e:	d107      	bne.n	800e460 <lv_refr_get_top_obj.part.0+0x68>
 800e450:	0029      	movs	r1, r5
 800e452:	0038      	movs	r0, r7
 800e454:	f7ff ffd0 	bl	800e3f8 <lv_refr_get_top_obj.part.0>
        if(found_p != NULL) {
 800e458:	2800      	cmp	r0, #0
 800e45a:	d001      	beq.n	800e460 <lv_refr_get_top_obj.part.0+0x68>
}
 800e45c:	b003      	add	sp, #12
 800e45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for(i = child_cnt - 1; i >= 0; i--) {
 800e460:	3c01      	subs	r4, #1
 800e462:	d2de      	bcs.n	800e422 <lv_refr_get_top_obj.part.0+0x2a>
    if(found_p == NULL && info.res == LV_COVER_RES_COVER) {
 800e464:	466b      	mov	r3, sp
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	0030      	movs	r0, r6
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d0f6      	beq.n	800e45c <lv_refr_get_top_obj.part.0+0x64>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 800e46e:	2000      	movs	r0, #0
 800e470:	e7f4      	b.n	800e45c <lv_refr_get_top_obj.part.0+0x64>
 800e472:	46c0      	nop			; (mov r8, r8)

0800e474 <_lv_refr_init>:
}
 800e474:	4770      	bx	lr
 800e476:	46c0      	nop			; (mov r8, r8)

0800e478 <lv_obj_redraw>:
{
 800e478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e47a:	46d6      	mov	lr, sl
 800e47c:	464f      	mov	r7, r9
 800e47e:	4646      	mov	r6, r8
 800e480:	000d      	movs	r5, r1
 800e482:	b5c0      	push	{r6, r7, lr}
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800e484:	6883      	ldr	r3, [r0, #8]
{
 800e486:	b086      	sub	sp, #24
    lv_obj_get_coords(obj, &obj_coords_ext);
 800e488:	a902      	add	r1, sp, #8
{
 800e48a:	0007      	movs	r7, r0
    lv_obj_get_coords(obj, &obj_coords_ext);
 800e48c:	0028      	movs	r0, r5
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800e48e:	4699      	mov	r9, r3
    lv_obj_get_coords(obj, &obj_coords_ext);
 800e490:	f7fa fbc0 	bl	8008c14 <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800e494:	0028      	movs	r0, r5
 800e496:	f7fa f905 	bl	80086a4 <_lv_obj_get_ext_draw_size>
 800e49a:	0001      	movs	r1, r0
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800e49c:	0002      	movs	r2, r0
 800e49e:	a802      	add	r0, sp, #8
 800e4a0:	f005 febe 	bl	8014220 <lv_area_increase>
    bool com_clip_res = _lv_area_intersect(&clip_coords_for_obj, clip_area_ori, &obj_coords_ext);
 800e4a4:	4649      	mov	r1, r9
 800e4a6:	4668      	mov	r0, sp
 800e4a8:	aa02      	add	r2, sp, #8
 800e4aa:	f005 fed9 	bl	8014260 <_lv_area_intersect>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800e4ae:	2800      	cmp	r0, #0
 800e4b0:	d043      	beq.n	800e53a <lv_obj_redraw+0xc2>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800e4b2:	466b      	mov	r3, sp
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 800e4b4:	003a      	movs	r2, r7
        draw_ctx->clip_area = &clip_coords_for_obj;
 800e4b6:	60bb      	str	r3, [r7, #8]
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 800e4b8:	2114      	movs	r1, #20
 800e4ba:	0028      	movs	r0, r5
 800e4bc:	f7f6 fbb8 	bl	8004c30 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 800e4c0:	003a      	movs	r2, r7
 800e4c2:	2115      	movs	r1, #21
 800e4c4:	0028      	movs	r0, r5
 800e4c6:	f7f6 fbb3 	bl	8004c30 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 800e4ca:	003a      	movs	r2, r7
 800e4cc:	2116      	movs	r1, #22
 800e4ce:	0028      	movs	r0, r5
 800e4d0:	f7f6 fbae 	bl	8004c30 <lv_event_send>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800e4d4:	2180      	movs	r1, #128	; 0x80
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 800e4d6:	2301      	movs	r3, #1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800e4d8:	0028      	movs	r0, r5
 800e4da:	0309      	lsls	r1, r1, #12
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 800e4dc:	469a      	mov	sl, r3
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800e4de:	f7f9 fd19 	bl	8007f14 <lv_obj_has_flag>
        clip_coords_for_children  = *clip_area_ori;
 800e4e2:	ac04      	add	r4, sp, #16
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	d039      	beq.n	800e55c <lv_obj_redraw+0xe4>
        clip_coords_for_children  = *clip_area_ori;
 800e4e8:	2208      	movs	r2, #8
 800e4ea:	4649      	mov	r1, r9
 800e4ec:	0020      	movs	r0, r4
 800e4ee:	f00c fff7 	bl	801b4e0 <memcpy>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800e4f2:	0028      	movs	r0, r5
        draw_ctx->clip_area = &clip_coords_for_children;
 800e4f4:	60bc      	str	r4, [r7, #8]
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800e4f6:	f7ff fca7 	bl	800de48 <lv_obj_get_child_cnt>
 800e4fa:	4680      	mov	r8, r0
        for(i = 0; i < child_cnt; i++) {
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	d011      	beq.n	800e524 <lv_obj_redraw+0xac>
 800e500:	2400      	movs	r4, #0
            lv_obj_t * child = obj->spec_attr->children[i];
 800e502:	68ab      	ldr	r3, [r5, #8]
 800e504:	00a2      	lsls	r2, r4, #2
 800e506:	681b      	ldr	r3, [r3, #0]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800e508:	2101      	movs	r1, #1
            lv_obj_t * child = obj->spec_attr->children[i];
 800e50a:	58d6      	ldr	r6, [r2, r3]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800e50c:	0030      	movs	r0, r6
 800e50e:	f7f9 fd01 	bl	8007f14 <lv_obj_has_flag>
 800e512:	2800      	cmp	r0, #0
 800e514:	d103      	bne.n	800e51e <lv_obj_redraw+0xa6>
 800e516:	0031      	movs	r1, r6
 800e518:	0038      	movs	r0, r7
 800e51a:	f000 f83d 	bl	800e598 <refr_obj.part.0>
        for(i = 0; i < child_cnt; i++) {
 800e51e:	3401      	adds	r4, #1
 800e520:	45a0      	cmp	r8, r4
 800e522:	d1ee      	bne.n	800e502 <lv_obj_redraw+0x8a>
    if(should_draw) {
 800e524:	4653      	mov	r3, sl
 800e526:	2b00      	cmp	r3, #0
 800e528:	d123      	bne.n	800e572 <lv_obj_redraw+0xfa>
    draw_ctx->clip_area = clip_area_ori;
 800e52a:	464b      	mov	r3, r9
 800e52c:	60bb      	str	r3, [r7, #8]
}
 800e52e:	b006      	add	sp, #24
 800e530:	bce0      	pop	{r5, r6, r7}
 800e532:	46ba      	mov	sl, r7
 800e534:	46b1      	mov	r9, r6
 800e536:	46a8      	mov	r8, r5
 800e538:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800e53a:	2180      	movs	r1, #128	; 0x80
 800e53c:	0028      	movs	r0, r5
 800e53e:	0309      	lsls	r1, r1, #12
 800e540:	f7f9 fce8 	bl	8007f14 <lv_obj_has_flag>
 800e544:	2800      	cmp	r0, #0
 800e546:	d1b4      	bne.n	800e4b2 <lv_obj_redraw+0x3a>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800e548:	2180      	movs	r1, #128	; 0x80
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800e54a:	2300      	movs	r3, #0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800e54c:	0028      	movs	r0, r5
 800e54e:	0309      	lsls	r1, r1, #12
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800e550:	469a      	mov	sl, r3
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800e552:	f7f9 fcdf 	bl	8007f14 <lv_obj_has_flag>
        clip_coords_for_children  = *clip_area_ori;
 800e556:	ac04      	add	r4, sp, #16
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800e558:	2800      	cmp	r0, #0
 800e55a:	d1c5      	bne.n	800e4e8 <lv_obj_redraw+0x70>
        if(!_lv_area_intersect(&clip_coords_for_children, clip_area_ori, &obj->coords)) {
 800e55c:	002a      	movs	r2, r5
 800e55e:	4649      	mov	r1, r9
 800e560:	0020      	movs	r0, r4
 800e562:	3210      	adds	r2, #16
 800e564:	f005 fe7c 	bl	8014260 <_lv_area_intersect>
 800e568:	2800      	cmp	r0, #0
 800e56a:	d1c2      	bne.n	800e4f2 <lv_obj_redraw+0x7a>
    if(should_draw) {
 800e56c:	4653      	mov	r3, sl
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d0db      	beq.n	800e52a <lv_obj_redraw+0xb2>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800e572:	466b      	mov	r3, sp
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 800e574:	003a      	movs	r2, r7
        draw_ctx->clip_area = &clip_coords_for_obj;
 800e576:	60bb      	str	r3, [r7, #8]
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 800e578:	2117      	movs	r1, #23
 800e57a:	0028      	movs	r0, r5
 800e57c:	f7f6 fb58 	bl	8004c30 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 800e580:	003a      	movs	r2, r7
 800e582:	2118      	movs	r1, #24
 800e584:	0028      	movs	r0, r5
 800e586:	f7f6 fb53 	bl	8004c30 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 800e58a:	003a      	movs	r2, r7
 800e58c:	2119      	movs	r1, #25
 800e58e:	0028      	movs	r0, r5
 800e590:	f7f6 fb4e 	bl	8004c30 <lv_event_send>
 800e594:	e7c9      	b.n	800e52a <lv_obj_redraw+0xb2>
 800e596:	46c0      	nop			; (mov r8, r8)

0800e598 <refr_obj.part.0>:
void refr_obj(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
 800e598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e59a:	46de      	mov	lr, fp
 800e59c:	464e      	mov	r6, r9
 800e59e:	4645      	mov	r5, r8
 800e5a0:	4657      	mov	r7, sl
 800e5a2:	b5e0      	push	{r5, r6, r7, lr}
 800e5a4:	0005      	movs	r5, r0
 800e5a6:	b093      	sub	sp, #76	; 0x4c
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800e5a8:	0008      	movs	r0, r1
void refr_obj(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
 800e5aa:	000c      	movs	r4, r1
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800e5ac:	f7fa f882 	bl	80086b4 <_lv_obj_get_layer_type>
 800e5b0:	1e06      	subs	r6, r0, #0
    if(layer_type == LV_LAYER_TYPE_NONE) {
 800e5b2:	d10a      	bne.n	800e5ca <refr_obj.part.0+0x32>
        lv_obj_redraw(draw_ctx, obj);
 800e5b4:	0021      	movs	r1, r4
 800e5b6:	0028      	movs	r0, r5
 800e5b8:	f7ff ff5e 	bl	800e478 <lv_obj_redraw>
}
 800e5bc:	b013      	add	sp, #76	; 0x4c
 800e5be:	bcf0      	pop	{r4, r5, r6, r7}
 800e5c0:	46bb      	mov	fp, r7
 800e5c2:	46b2      	mov	sl, r6
 800e5c4:	46a9      	mov	r9, r5
 800e5c6:	46a0      	mov	r8, r4
 800e5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800e5ca:	2260      	movs	r2, #96	; 0x60
 800e5cc:	2100      	movs	r1, #0
 800e5ce:	0020      	movs	r0, r4
 800e5d0:	f7fd fff8 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800e5d4:	b2c3      	uxtb	r3, r0
 800e5d6:	4698      	mov	r8, r3
        if(opa < LV_OPA_MIN) return;
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d9ef      	bls.n	800e5bc <refr_obj.part.0+0x24>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800e5dc:	0020      	movs	r0, r4
 800e5de:	f7fa f861 	bl	80086a4 <_lv_obj_get_ext_draw_size>
 800e5e2:	0007      	movs	r7, r0
    lv_obj_get_coords(obj, &obj_coords_ext);
 800e5e4:	a906      	add	r1, sp, #24
 800e5e6:	0020      	movs	r0, r4
 800e5e8:	f7fa fb14 	bl	8008c14 <lv_obj_get_coords>
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800e5ec:	003a      	movs	r2, r7
 800e5ee:	0039      	movs	r1, r7
 800e5f0:	a806      	add	r0, sp, #24
 800e5f2:	f005 fe15 	bl	8014220 <lv_area_increase>
    if(layer_type == LV_LAYER_TYPE_TRANSFORM) {
 800e5f6:	2e02      	cmp	r6, #2
 800e5f8:	d100      	bne.n	800e5fc <refr_obj.part.0+0x64>
 800e5fa:	e0c5      	b.n	800e788 <refr_obj.part.0+0x1f0>
    else if(layer_type == LV_LAYER_TYPE_SIMPLE) {
 800e5fc:	2e01      	cmp	r6, #1
 800e5fe:	d1dd      	bne.n	800e5bc <refr_obj.part.0+0x24>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 800e600:	af0c      	add	r7, sp, #48	; 0x30
 800e602:	0038      	movs	r0, r7
 800e604:	68a9      	ldr	r1, [r5, #8]
 800e606:	aa06      	add	r2, sp, #24
 800e608:	f005 fe2a 	bl	8014260 <_lv_area_intersect>
 800e60c:	2800      	cmp	r0, #0
 800e60e:	d0d5      	beq.n	800e5bc <refr_obj.part.0+0x24>
        *layer_area_out = clip_coords_for_obj;
 800e610:	ab04      	add	r3, sp, #16
 800e612:	2208      	movs	r2, #8
 800e614:	0039      	movs	r1, r7
 800e616:	0018      	movs	r0, r3
 800e618:	4699      	mov	r9, r3
 800e61a:	f00c ff61 	bl	801b4e0 <memcpy>
        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 800e61e:	2310      	movs	r3, #16
 800e620:	469c      	mov	ip, r3
 800e622:	44a4      	add	ip, r4
 800e624:	4663      	mov	r3, ip
 800e626:	2200      	movs	r2, #0
 800e628:	4661      	mov	r1, ip
 800e62a:	4648      	mov	r0, r9
 800e62c:	9303      	str	r3, [sp, #12]
 800e62e:	f005 ff9b 	bl	8014568 <_lv_area_is_in>
 800e632:	2800      	cmp	r0, #0
 800e634:	d000      	beq.n	800e638 <refr_obj.part.0+0xa0>
 800e636:	e0e5      	b.n	800e804 <refr_obj.part.0+0x26c>
 800e638:	2303      	movs	r3, #3
 800e63a:	001a      	movs	r2, r3
 800e63c:	9301      	str	r3, [sp, #4]
        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 800e63e:	4649      	mov	r1, r9
 800e640:	0028      	movs	r0, r5
 800e642:	f001 fba9 	bl	800fd98 <lv_draw_layer_create>
 800e646:	1e06      	subs	r6, r0, #0
        if(layer_ctx == NULL) {
 800e648:	d0b8      	beq.n	800e5bc <refr_obj.part.0+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800e64a:	226e      	movs	r2, #110	; 0x6e
 800e64c:	2100      	movs	r1, #0
 800e64e:	0020      	movs	r0, r4
 800e650:	f7fd ffb8 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 800e654:	226f      	movs	r2, #111	; 0x6f
 800e656:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800e658:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 800e65a:	0020      	movs	r0, r4
 800e65c:	f7fd ffb2 	bl	800c5c4 <lv_obj_get_style_prop>
 800e660:	4683      	mov	fp, r0
        lv_draw_img_dsc_init(&draw_dsc);
 800e662:	0038      	movs	r0, r7
 800e664:	f000 fe44 	bl	800f2f0 <lv_draw_img_dsc_init>
        draw_dsc.opa = opa;
 800e668:	4643      	mov	r3, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800e66a:	226d      	movs	r2, #109	; 0x6d
 800e66c:	72fb      	strb	r3, [r7, #11]
 800e66e:	2100      	movs	r1, #0
 800e670:	0020      	movs	r0, r4
 800e672:	f7fd ffa7 	bl	800c5c4 <lv_obj_get_style_prop>
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 800e676:	22e1      	movs	r2, #225	; 0xe1
    return (lv_coord_t)v.num;
 800e678:	b203      	sxth	r3, r0
 800e67a:	0112      	lsls	r2, r2, #4
 800e67c:	4293      	cmp	r3, r2
 800e67e:	dc00      	bgt.n	800e682 <refr_obj.part.0+0xea>
 800e680:	e0e8      	b.n	800e854 <refr_obj.part.0+0x2bc>
 800e682:	4b8a      	ldr	r3, [pc, #552]	; (800e8ac <refr_obj.part.0+0x314>)
 800e684:	469c      	mov	ip, r3
 800e686:	4460      	add	r0, ip
 800e688:	8038      	strh	r0, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800e68a:	226c      	movs	r2, #108	; 0x6c
 800e68c:	2100      	movs	r1, #0
 800e68e:	0020      	movs	r0, r4
 800e690:	f7fd ff98 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800e694:	2267      	movs	r2, #103	; 0x67
 800e696:	2100      	movs	r1, #0
        draw_dsc.zoom = lv_obj_get_style_transform_zoom(obj, 0);
 800e698:	8078      	strh	r0, [r7, #2]
 800e69a:	0020      	movs	r0, r4
 800e69c:	f7fd ff92 	bl	800c5c4 <lv_obj_get_style_prop>
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 800e6a0:	220f      	movs	r2, #15
 800e6a2:	0003      	movs	r3, r0
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 800e6a4:	2101      	movs	r1, #1
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 800e6a6:	7b38      	ldrb	r0, [r7, #12]
 800e6a8:	4013      	ands	r3, r2
 800e6aa:	4390      	bics	r0, r2
 800e6ac:	4318      	orrs	r0, r3
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 800e6ae:	4b80      	ldr	r3, [pc, #512]	; (800e8b0 <refr_obj.part.0+0x318>)
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 800e6b0:	7338      	strb	r0, [r7, #12]
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	7c1a      	ldrb	r2, [r3, #16]
 800e6b8:	7d3b      	ldrb	r3, [r7, #20]
 800e6ba:	08d2      	lsrs	r2, r2, #3
 800e6bc:	400a      	ands	r2, r1
 800e6be:	438b      	bics	r3, r1
 800e6c0:	4313      	orrs	r3, r2
 800e6c2:	9a01      	ldr	r2, [sp, #4]
 800e6c4:	753b      	strb	r3, [r7, #20]
        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800e6c6:	0011      	movs	r1, r2
 800e6c8:	2302      	movs	r3, #2
 800e6ca:	4019      	ands	r1, r3
 800e6cc:	4688      	mov	r8, r1
 800e6ce:	4213      	tst	r3, r2
 800e6d0:	d100      	bne.n	800e6d4 <refr_obj.part.0+0x13c>
 800e6d2:	e0bc      	b.n	800e84e <refr_obj.part.0+0x2b6>
            layer_ctx->area_act = layer_ctx->area_full;
 800e6d4:	0033      	movs	r3, r6
 800e6d6:	0032      	movs	r2, r6
 800e6d8:	3308      	adds	r3, #8
 800e6da:	ca03      	ldmia	r2!, {r0, r1}
 800e6dc:	c303      	stmia	r3!, {r0, r1}
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800e6de:	230a      	movs	r3, #10
 800e6e0:	5ef2      	ldrsh	r2, [r6, r3]
 800e6e2:	8a73      	ldrh	r3, [r6, #18]
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800e6e4:	2006      	movs	r0, #6
 800e6e6:	5e31      	ldrsh	r1, [r6, r0]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800e6e8:	189b      	adds	r3, r3, r2
 800e6ea:	3b01      	subs	r3, #1
 800e6ec:	b21b      	sxth	r3, r3
 800e6ee:	81f3      	strh	r3, [r6, #14]
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800e6f0:	428b      	cmp	r3, r1
 800e6f2:	dd00      	ble.n	800e6f6 <refr_obj.part.0+0x15e>
 800e6f4:	81f1      	strh	r1, [r6, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800e6f6:	464b      	mov	r3, r9
 800e6f8:	2106      	movs	r1, #6
 800e6fa:	5e5b      	ldrsh	r3, [r3, r1]
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	da00      	bge.n	800e702 <refr_obj.part.0+0x16a>
 800e700:	e091      	b.n	800e826 <refr_obj.part.0+0x28e>
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 800e702:	4653      	mov	r3, sl
 800e704:	b29b      	uxth	r3, r3
 800e706:	469a      	mov	sl, r3
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 800e708:	465b      	mov	r3, fp
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	469b      	mov	fp, r3
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 800e70e:	2308      	movs	r3, #8
 800e710:	469c      	mov	ip, r3
 800e712:	44b4      	add	ip, r6
 800e714:	4663      	mov	r3, ip
 800e716:	9302      	str	r3, [sp, #8]
 800e718:	e023      	b.n	800e762 <refr_obj.part.0+0x1ca>
            lv_obj_redraw(draw_ctx, obj);
 800e71a:	0021      	movs	r1, r4
 800e71c:	0028      	movs	r0, r5
 800e71e:	f7ff feab 	bl	800e478 <lv_obj_redraw>
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 800e722:	686a      	ldr	r2, [r5, #4]
 800e724:	8a23      	ldrh	r3, [r4, #16]
 800e726:	8811      	ldrh	r1, [r2, #0]
 800e728:	4453      	add	r3, sl
 800e72a:	1a5b      	subs	r3, r3, r1
 800e72c:	80bb      	strh	r3, [r7, #4]
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 800e72e:	8a63      	ldrh	r3, [r4, #18]
 800e730:	8852      	ldrh	r2, [r2, #2]
 800e732:	445b      	add	r3, fp
 800e734:	1a9b      	subs	r3, r3, r2
 800e736:	80fb      	strh	r3, [r7, #6]
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 800e738:	003a      	movs	r2, r7
 800e73a:	0031      	movs	r1, r6
 800e73c:	0028      	movs	r0, r5
 800e73e:	f001 fb63 	bl	800fe08 <lv_draw_layer_blend>
            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 800e742:	4643      	mov	r3, r8
 800e744:	2b00      	cmp	r3, #0
 800e746:	d06e      	beq.n	800e826 <refr_obj.part.0+0x28e>
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800e748:	89f3      	ldrh	r3, [r6, #14]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800e74a:	8a72      	ldrh	r2, [r6, #18]
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800e74c:	3301      	adds	r3, #1
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800e74e:	3a01      	subs	r2, #1
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800e750:	b219      	sxth	r1, r3
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800e752:	189b      	adds	r3, r3, r2
 800e754:	81f3      	strh	r3, [r6, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800e756:	464b      	mov	r3, r9
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800e758:	8171      	strh	r1, [r6, #10]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800e75a:	2206      	movs	r2, #6
 800e75c:	5e9b      	ldrsh	r3, [r3, r2]
 800e75e:	428b      	cmp	r3, r1
 800e760:	db61      	blt.n	800e826 <refr_obj.part.0+0x28e>
            if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800e762:	4643      	mov	r3, r8
 800e764:	2b00      	cmp	r3, #0
 800e766:	d0d8      	beq.n	800e71a <refr_obj.part.0+0x182>
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800e768:	9b01      	ldr	r3, [sp, #4]
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	d160      	bne.n	800e830 <refr_obj.part.0+0x298>
    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800e76e:	220e      	movs	r2, #14
 800e770:	5eb3      	ldrsh	r3, [r6, r2]
 800e772:	2200      	movs	r2, #0
 800e774:	2006      	movs	r0, #6
 800e776:	5e31      	ldrsh	r1, [r6, r0]
 800e778:	4299      	cmp	r1, r3
 800e77a:	da00      	bge.n	800e77e <refr_obj.part.0+0x1e6>
 800e77c:	81f1      	strh	r1, [r6, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 800e77e:	0031      	movs	r1, r6
 800e780:	0028      	movs	r0, r5
 800e782:	f001 fb3b 	bl	800fdfc <lv_draw_layer_adjust>
}
 800e786:	e7c8      	b.n	800e71a <refr_obj.part.0+0x182>
        lv_area_t tranf_coords = obj_coords_ext;
 800e788:	2208      	movs	r2, #8
 800e78a:	a906      	add	r1, sp, #24
 800e78c:	a80a      	add	r0, sp, #40	; 0x28
 800e78e:	f00c fea7 	bl	801b4e0 <memcpy>
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 800e792:	2200      	movs	r2, #0
 800e794:	0020      	movs	r0, r4
 800e796:	a90a      	add	r1, sp, #40	; 0x28
 800e798:	2300      	movs	r3, #0
 800e79a:	f7fa fc15 	bl	8008fc8 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 800e79e:	68a9      	ldr	r1, [r5, #8]
 800e7a0:	aa0a      	add	r2, sp, #40	; 0x28
 800e7a2:	a808      	add	r0, sp, #32
 800e7a4:	f005 fd5c 	bl	8014260 <_lv_area_intersect>
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	d100      	bne.n	800e7ae <refr_obj.part.0+0x216>
 800e7ac:	e706      	b.n	800e5bc <refr_obj.part.0+0x24>
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 800e7ae:	af0c      	add	r7, sp, #48	; 0x30
 800e7b0:	2208      	movs	r2, #8
 800e7b2:	a908      	add	r1, sp, #32
 800e7b4:	0038      	movs	r0, r7
 800e7b6:	f00c fe93 	bl	801b4e0 <memcpy>
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	0039      	movs	r1, r7
 800e7be:	0020      	movs	r0, r4
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	f7fa fc01 	bl	8008fc8 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&inverse_clip_coords_for_obj, &inverse_clip_coords_for_obj, &obj_coords_ext)) {
 800e7c6:	0039      	movs	r1, r7
 800e7c8:	0038      	movs	r0, r7
 800e7ca:	aa06      	add	r2, sp, #24
 800e7cc:	f005 fd48 	bl	8014260 <_lv_area_intersect>
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	d100      	bne.n	800e7d6 <refr_obj.part.0+0x23e>
 800e7d4:	e6f2      	b.n	800e5bc <refr_obj.part.0+0x24>
        *layer_area_out = inverse_clip_coords_for_obj;
 800e7d6:	ab04      	add	r3, sp, #16
 800e7d8:	2208      	movs	r2, #8
 800e7da:	0039      	movs	r1, r7
 800e7dc:	0018      	movs	r0, r3
 800e7de:	4699      	mov	r9, r3
 800e7e0:	f00c fe7e 	bl	801b4e0 <memcpy>
        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 800e7e4:	2310      	movs	r3, #16
 800e7e6:	469c      	mov	ip, r3
 800e7e8:	44a4      	add	ip, r4
 800e7ea:	4663      	mov	r3, ip
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	4661      	mov	r1, ip
 800e7f0:	4648      	mov	r0, r9
 800e7f2:	9303      	str	r3, [sp, #12]
 800e7f4:	f005 feb8 	bl	8014568 <_lv_area_is_in>
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	d146      	bne.n	800e88a <refr_obj.part.0+0x2f2>
        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	001a      	movs	r2, r3
 800e800:	9301      	str	r3, [sp, #4]
 800e802:	e71c      	b.n	800e63e <refr_obj.part.0+0xa6>
            info.res = LV_COVER_RES_COVER;
 800e804:	2300      	movs	r3, #0
 800e806:	703b      	strb	r3, [r7, #0]
            info.area = &layer_area_full;
 800e808:	464b      	mov	r3, r9
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800e80a:	003a      	movs	r2, r7
            info.area = &layer_area_full;
 800e80c:	607b      	str	r3, [r7, #4]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800e80e:	2112      	movs	r1, #18
 800e810:	0020      	movs	r0, r4
 800e812:	f7f6 fa0d 	bl	8004c30 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800e816:	783b      	ldrb	r3, [r7, #0]
 800e818:	1e5a      	subs	r2, r3, #1
 800e81a:	4193      	sbcs	r3, r2
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 800e81c:	2202      	movs	r2, #2
 800e81e:	4313      	orrs	r3, r2
 800e820:	001a      	movs	r2, r3
 800e822:	9301      	str	r3, [sp, #4]
 800e824:	e70b      	b.n	800e63e <refr_obj.part.0+0xa6>
        lv_draw_layer_destroy(draw_ctx, layer_ctx);
 800e826:	0031      	movs	r1, r6
 800e828:	0028      	movs	r0, r5
 800e82a:	f001 faf3 	bl	800fe14 <lv_draw_layer_destroy>
 800e82e:	e6c5      	b.n	800e5bc <refr_obj.part.0+0x24>
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 800e830:	2200      	movs	r2, #0
 800e832:	9903      	ldr	r1, [sp, #12]
 800e834:	9802      	ldr	r0, [sp, #8]
 800e836:	f005 fe97 	bl	8014568 <_lv_area_is_in>
 800e83a:	2800      	cmp	r0, #0
 800e83c:	d10e      	bne.n	800e85c <refr_obj.part.0+0x2c4>
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_alpha - 1;
 800e83e:	8a32      	ldrh	r2, [r6, #16]
 800e840:	8973      	ldrh	r3, [r6, #10]
 800e842:	189b      	adds	r3, r3, r2
 800e844:	3b01      	subs	r3, #1
 800e846:	b21b      	sxth	r3, r3
 800e848:	2201      	movs	r2, #1
 800e84a:	81f3      	strh	r3, [r6, #14]
 800e84c:	e792      	b.n	800e774 <refr_obj.part.0+0x1dc>
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800e84e:	230a      	movs	r3, #10
 800e850:	5ef2      	ldrsh	r2, [r6, r3]
 800e852:	e750      	b.n	800e6f6 <refr_obj.part.0+0x15e>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 800e854:	2b00      	cmp	r3, #0
 800e856:	db12      	blt.n	800e87e <refr_obj.part.0+0x2e6>
        draw_dsc.angle = lv_obj_get_style_transform_angle(obj, 0);
 800e858:	803b      	strh	r3, [r7, #0]
 800e85a:	e716      	b.n	800e68a <refr_obj.part.0+0xf2>
            info.res = LV_COVER_RES_COVER;
 800e85c:	2300      	movs	r3, #0
 800e85e:	aa04      	add	r2, sp, #16
 800e860:	7613      	strb	r3, [r2, #24]
            info.area = &layer_ctx->area_act;
 800e862:	9b02      	ldr	r3, [sp, #8]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800e864:	aa0a      	add	r2, sp, #40	; 0x28
 800e866:	2112      	movs	r1, #18
 800e868:	0020      	movs	r0, r4
            info.area = &layer_ctx->area_act;
 800e86a:	930b      	str	r3, [sp, #44]	; 0x2c
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800e86c:	f7f6 f9e0 	bl	8004c30 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) has_alpha = false;
 800e870:	ab04      	add	r3, sp, #16
 800e872:	7e1a      	ldrb	r2, [r3, #24]
 800e874:	2a00      	cmp	r2, #0
 800e876:	d1e2      	bne.n	800e83e <refr_obj.part.0+0x2a6>
    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800e878:	210e      	movs	r1, #14
 800e87a:	5e73      	ldrsh	r3, [r6, r1]
 800e87c:	e77a      	b.n	800e774 <refr_obj.part.0+0x1dc>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 800e87e:	23e1      	movs	r3, #225	; 0xe1
 800e880:	011b      	lsls	r3, r3, #4
 800e882:	469c      	mov	ip, r3
 800e884:	4460      	add	r0, ip
 800e886:	8038      	strh	r0, [r7, #0]
 800e888:	e6ff      	b.n	800e68a <refr_obj.part.0+0xf2>
            info.res = LV_COVER_RES_COVER;
 800e88a:	2300      	movs	r3, #0
 800e88c:	703b      	strb	r3, [r7, #0]
            info.area = &layer_area_full;
 800e88e:	464b      	mov	r3, r9
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800e890:	003a      	movs	r2, r7
            info.area = &layer_area_full;
 800e892:	607b      	str	r3, [r7, #4]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800e894:	2112      	movs	r1, #18
 800e896:	0020      	movs	r0, r4
 800e898:	f7f6 f9ca 	bl	8004c30 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800e89c:	783b      	ldrb	r3, [r7, #0]
 800e89e:	1e5a      	subs	r2, r3, #1
 800e8a0:	4193      	sbcs	r3, r2
        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	001a      	movs	r2, r3
 800e8a6:	9301      	str	r3, [sp, #4]
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 800e8a8:	e6c9      	b.n	800e63e <refr_obj.part.0+0xa6>
 800e8aa:	46c0      	nop			; (mov r8, r8)
 800e8ac:	fffff1f0 	.word	0xfffff1f0
 800e8b0:	20000468 	.word	0x20000468

0800e8b4 <refr_obj_and_children>:
{
 800e8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8b6:	464f      	mov	r7, r9
 800e8b8:	4646      	mov	r6, r8
 800e8ba:	46d6      	mov	lr, sl
 800e8bc:	4681      	mov	r9, r0
 800e8be:	4688      	mov	r8, r1
 800e8c0:	b5c0      	push	{r6, r7, lr}
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 800e8c2:	2900      	cmp	r1, #0
 800e8c4:	d049      	beq.n	800e95a <refr_obj_and_children+0xa6>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800e8c6:	2101      	movs	r1, #1
 800e8c8:	4640      	mov	r0, r8
 800e8ca:	f7f9 fb23 	bl	8007f14 <lv_obj_has_flag>
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	d04f      	beq.n	800e972 <refr_obj_and_children+0xbe>
    parent = lv_obj_get_parent(top_obj);
 800e8d2:	4640      	mov	r0, r8
 800e8d4:	f7ff faa2 	bl	800de1c <lv_obj_get_parent>
 800e8d8:	1e06      	subs	r6, r0, #0
    while(parent != NULL) {
 800e8da:	d045      	beq.n	800e968 <refr_obj_and_children+0xb4>
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 800e8dc:	0030      	movs	r0, r6
 800e8de:	f7ff fab3 	bl	800de48 <lv_obj_get_child_cnt>
 800e8e2:	1e07      	subs	r7, r0, #0
        for(i = 0; i < child_cnt; i++) {
 800e8e4:	d020      	beq.n	800e928 <refr_obj_and_children+0x74>
        bool go = false;
 800e8e6:	2300      	movs	r3, #0
        for(i = 0; i < child_cnt; i++) {
 800e8e8:	2500      	movs	r5, #0
        bool go = false;
 800e8ea:	469a      	mov	sl, r3
 800e8ec:	e008      	b.n	800e900 <refr_obj_and_children+0x4c>
                if(child == border_p) go = true;
 800e8ee:	4643      	mov	r3, r8
 800e8f0:	1ae4      	subs	r4, r4, r3
 800e8f2:	4263      	negs	r3, r4
 800e8f4:	415c      	adcs	r4, r3
 800e8f6:	b2e3      	uxtb	r3, r4
 800e8f8:	469a      	mov	sl, r3
        for(i = 0; i < child_cnt; i++) {
 800e8fa:	3501      	adds	r5, #1
 800e8fc:	42af      	cmp	r7, r5
 800e8fe:	d013      	beq.n	800e928 <refr_obj_and_children+0x74>
            lv_obj_t * child = parent->spec_attr->children[i];
 800e900:	68b3      	ldr	r3, [r6, #8]
 800e902:	00aa      	lsls	r2, r5, #2
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	58d4      	ldr	r4, [r2, r3]
            if(!go) {
 800e908:	4653      	mov	r3, sl
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d0ef      	beq.n	800e8ee <refr_obj_and_children+0x3a>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800e90e:	2101      	movs	r1, #1
 800e910:	0020      	movs	r0, r4
 800e912:	f7f9 faff 	bl	8007f14 <lv_obj_has_flag>
 800e916:	2800      	cmp	r0, #0
 800e918:	d11d      	bne.n	800e956 <refr_obj_and_children+0xa2>
 800e91a:	0021      	movs	r1, r4
 800e91c:	4648      	mov	r0, r9
        for(i = 0; i < child_cnt; i++) {
 800e91e:	3501      	adds	r5, #1
 800e920:	f7ff fe3a 	bl	800e598 <refr_obj.part.0>
 800e924:	42af      	cmp	r7, r5
 800e926:	d1eb      	bne.n	800e900 <refr_obj_and_children+0x4c>
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 800e928:	464a      	mov	r2, r9
 800e92a:	2117      	movs	r1, #23
 800e92c:	0030      	movs	r0, r6
 800e92e:	f7f6 f97f 	bl	8004c30 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 800e932:	464a      	mov	r2, r9
 800e934:	2118      	movs	r1, #24
 800e936:	0030      	movs	r0, r6
 800e938:	f7f6 f97a 	bl	8004c30 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 800e93c:	464a      	mov	r2, r9
 800e93e:	2119      	movs	r1, #25
 800e940:	0030      	movs	r0, r6
 800e942:	f7f6 f975 	bl	8004c30 <lv_event_send>
        parent = lv_obj_get_parent(parent);
 800e946:	0030      	movs	r0, r6
 800e948:	f7ff fa68 	bl	800de1c <lv_obj_get_parent>
    while(parent != NULL) {
 800e94c:	46b0      	mov	r8, r6
 800e94e:	2800      	cmp	r0, #0
 800e950:	d00a      	beq.n	800e968 <refr_obj_and_children+0xb4>
 800e952:	0006      	movs	r6, r0
 800e954:	e7c2      	b.n	800e8dc <refr_obj_and_children+0x28>
 800e956:	4682      	mov	sl, r0
 800e958:	e7cf      	b.n	800e8fa <refr_obj_and_children+0x46>
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 800e95a:	4b08      	ldr	r3, [pc, #32]	; (800e97c <refr_obj_and_children+0xc8>)
 800e95c:	6818      	ldr	r0, [r3, #0]
 800e95e:	f7f5 fe77 	bl	8004650 <lv_disp_get_scr_act>
 800e962:	4680      	mov	r8, r0
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 800e964:	2800      	cmp	r0, #0
 800e966:	d1ae      	bne.n	800e8c6 <refr_obj_and_children+0x12>
}
 800e968:	bce0      	pop	{r5, r6, r7}
 800e96a:	46ba      	mov	sl, r7
 800e96c:	46b1      	mov	r9, r6
 800e96e:	46a8      	mov	r8, r5
 800e970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e972:	4641      	mov	r1, r8
 800e974:	4648      	mov	r0, r9
 800e976:	f7ff fe0f 	bl	800e598 <refr_obj.part.0>
 800e97a:	e7aa      	b.n	800e8d2 <refr_obj_and_children+0x1e>
 800e97c:	20000468 	.word	0x20000468

0800e980 <refr_area_part>:
{
 800e980:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e982:	46ce      	mov	lr, r9
 800e984:	4647      	mov	r7, r8
 800e986:	b580      	push	{r7, lr}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800e988:	4c9a      	ldr	r4, [pc, #616]	; (800ebf4 <refr_area_part+0x274>)
{
 800e98a:	0006      	movs	r6, r0
 800e98c:	b095      	sub	sp, #84	; 0x54
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800e98e:	6820      	ldr	r0, [r4, #0]
 800e990:	f005 f8a8 	bl	8013ae4 <lv_disp_get_draw_buf>
    if(draw_buf->buf1 && !draw_buf->buf2) {
 800e994:	6803      	ldr	r3, [r0, #0]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800e996:	0005      	movs	r5, r0
    if(draw_buf->buf1 && !draw_buf->buf2) {
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d003      	beq.n	800e9a4 <refr_area_part+0x24>
 800e99c:	6843      	ldr	r3, [r0, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d100      	bne.n	800e9a4 <refr_area_part+0x24>
 800e9a2:	e087      	b.n	800eab4 <refr_area_part+0x134>
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 800e9a4:	6820      	ldr	r0, [r4, #0]
 800e9a6:	6877      	ldr	r7, [r6, #4]
 800e9a8:	f7f5 fe52 	bl	8004650 <lv_disp_get_scr_act>
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800e9ac:	0001      	movs	r1, r0
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 800e9ae:	0005      	movs	r5, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	0038      	movs	r0, r7
 800e9b4:	3110      	adds	r1, #16
 800e9b6:	f005 fdd7 	bl	8014568 <_lv_area_is_in>
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	d029      	beq.n	800ea12 <refr_area_part+0x92>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800e9be:	2101      	movs	r1, #1
 800e9c0:	0028      	movs	r0, r5
 800e9c2:	f7f9 faa7 	bl	8007f14 <lv_obj_has_flag>
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	d123      	bne.n	800ea12 <refr_area_part+0x92>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800e9ca:	0028      	movs	r0, r5
 800e9cc:	f7f9 fe72 	bl	80086b4 <_lv_obj_get_layer_type>
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	d11e      	bne.n	800ea12 <refr_area_part+0x92>
 800e9d4:	0029      	movs	r1, r5
 800e9d6:	0038      	movs	r0, r7
 800e9d8:	f7ff fd0e 	bl	800e3f8 <lv_refr_get_top_obj.part.0>
 800e9dc:	0007      	movs	r7, r0
    if(disp_refr->prev_scr) {
 800e9de:	6820      	ldr	r0, [r4, #0]
 800e9e0:	6945      	ldr	r5, [r0, #20]
 800e9e2:	2d00      	cmp	r5, #0
 800e9e4:	d000      	beq.n	800e9e8 <refr_area_part+0x68>
 800e9e6:	e08d      	b.n	800eb04 <refr_area_part+0x184>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800e9e8:	2f00      	cmp	r7, #0
 800e9ea:	d100      	bne.n	800e9ee <refr_area_part+0x6e>
 800e9ec:	e098      	b.n	800eb20 <refr_area_part+0x1a0>
    if(disp_refr->draw_prev_over_act) {
 800e9ee:	2328      	movs	r3, #40	; 0x28
 800e9f0:	5cc3      	ldrb	r3, [r0, r3]
 800e9f2:	07db      	lsls	r3, r3, #31
 800e9f4:	d540      	bpl.n	800ea78 <refr_area_part+0xf8>
        refr_obj_and_children(draw_ctx, top_act_scr);
 800e9f6:	0030      	movs	r0, r6
 800e9f8:	0039      	movs	r1, r7
 800e9fa:	f7ff ff5b 	bl	800e8b4 <refr_obj_and_children>
        if(disp_refr->prev_scr) {
 800e9fe:	6820      	ldr	r0, [r4, #0]
 800ea00:	6945      	ldr	r5, [r0, #20]
 800ea02:	2d00      	cmp	r5, #0
 800ea04:	d03d      	beq.n	800ea82 <refr_area_part+0x102>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800ea06:	0030      	movs	r0, r6
 800ea08:	0029      	movs	r1, r5
 800ea0a:	f7ff ff53 	bl	800e8b4 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 800ea0e:	6820      	ldr	r0, [r4, #0]
 800ea10:	e037      	b.n	800ea82 <refr_area_part+0x102>
    if(disp_refr->prev_scr) {
 800ea12:	6820      	ldr	r0, [r4, #0]
 800ea14:	6945      	ldr	r5, [r0, #20]
 800ea16:	2d00      	cmp	r5, #0
 800ea18:	d100      	bne.n	800ea1c <refr_area_part+0x9c>
 800ea1a:	e081      	b.n	800eb20 <refr_area_part+0x1a0>
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800ea1c:	0029      	movs	r1, r5
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 800ea1e:	6873      	ldr	r3, [r6, #4]
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800ea20:	2200      	movs	r2, #0
 800ea22:	0018      	movs	r0, r3
 800ea24:	3110      	adds	r1, #16
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 800ea26:	4698      	mov	r8, r3
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800ea28:	f005 fd9e 	bl	8014568 <_lv_area_is_in>
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	d100      	bne.n	800ea32 <refr_area_part+0xb2>
 800ea30:	e075      	b.n	800eb1e <refr_area_part+0x19e>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800ea32:	2101      	movs	r1, #1
 800ea34:	0028      	movs	r0, r5
 800ea36:	f7f9 fa6d 	bl	8007f14 <lv_obj_has_flag>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	d000      	beq.n	800ea40 <refr_area_part+0xc0>
 800ea3e:	e06e      	b.n	800eb1e <refr_area_part+0x19e>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800ea40:	0028      	movs	r0, r5
 800ea42:	f7f9 fe37 	bl	80086b4 <_lv_obj_get_layer_type>
 800ea46:	2800      	cmp	r0, #0
 800ea48:	d169      	bne.n	800eb1e <refr_area_part+0x19e>
 800ea4a:	2700      	movs	r7, #0
 800ea4c:	0029      	movs	r1, r5
 800ea4e:	4640      	mov	r0, r8
 800ea50:	f7ff fcd2 	bl	800e3f8 <lv_refr_get_top_obj.part.0>
 800ea54:	0005      	movs	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800ea56:	2f00      	cmp	r7, #0
 800ea58:	d048      	beq.n	800eaec <refr_area_part+0x16c>
    if(disp_refr->draw_prev_over_act) {
 800ea5a:	2228      	movs	r2, #40	; 0x28
 800ea5c:	6823      	ldr	r3, [r4, #0]
 800ea5e:	5c9a      	ldrb	r2, [r3, r2]
 800ea60:	07d2      	lsls	r2, r2, #31
 800ea62:	d436      	bmi.n	800ead2 <refr_area_part+0x152>
        if(disp_refr->prev_scr) {
 800ea64:	695b      	ldr	r3, [r3, #20]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d006      	beq.n	800ea78 <refr_area_part+0xf8>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800ea6a:	2d00      	cmp	r5, #0
 800ea6c:	d100      	bne.n	800ea70 <refr_area_part+0xf0>
 800ea6e:	e0a2      	b.n	800ebb6 <refr_area_part+0x236>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800ea70:	0029      	movs	r1, r5
 800ea72:	0030      	movs	r0, r6
 800ea74:	f7ff ff1e 	bl	800e8b4 <refr_obj_and_children>
        refr_obj_and_children(draw_ctx, top_act_scr);
 800ea78:	0030      	movs	r0, r6
 800ea7a:	0039      	movs	r1, r7
 800ea7c:	f7ff ff1a 	bl	800e8b4 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 800ea80:	6820      	ldr	r0, [r4, #0]
 800ea82:	f7f5 fe01 	bl	8004688 <lv_disp_get_layer_top>
 800ea86:	0001      	movs	r1, r0
 800ea88:	0030      	movs	r0, r6
 800ea8a:	f7ff ff13 	bl	800e8b4 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 800ea8e:	6820      	ldr	r0, [r4, #0]
 800ea90:	f7f5 fe08 	bl	80046a4 <lv_disp_get_layer_sys>
 800ea94:	0001      	movs	r1, r0
 800ea96:	0030      	movs	r0, r6
 800ea98:	f7ff ff0c 	bl	800e8b4 <refr_obj_and_children>
    if(disp_refr->driver->full_refresh == false) {
 800ea9c:	6820      	ldr	r0, [r4, #0]
 800ea9e:	6803      	ldr	r3, [r0, #0]
 800eaa0:	7c1b      	ldrb	r3, [r3, #16]
 800eaa2:	079b      	lsls	r3, r3, #30
 800eaa4:	d510      	bpl.n	800eac8 <refr_area_part+0x148>
}
 800eaa6:	b015      	add	sp, #84	; 0x54
 800eaa8:	bcc0      	pop	{r6, r7}
 800eaaa:	46b9      	mov	r9, r7
 800eaac:	46b0      	mov	r8, r6
 800eaae:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800eab0:	0010      	movs	r0, r2
 800eab2:	4798      	blx	r3
 800eab4:	6820      	ldr	r0, [r4, #0]
        while(draw_buf->flushing) {
 800eab6:	692b      	ldr	r3, [r5, #16]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d100      	bne.n	800eabe <refr_area_part+0x13e>
 800eabc:	e773      	b.n	800e9a6 <refr_area_part+0x26>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800eabe:	6802      	ldr	r2, [r0, #0]
 800eac0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d0f7      	beq.n	800eab6 <refr_area_part+0x136>
 800eac6:	e7f3      	b.n	800eab0 <refr_area_part+0x130>
        draw_buf_flush(disp_refr);
 800eac8:	f7ff f9c6 	bl	800de58 <draw_buf_flush>
}
 800eacc:	e7eb      	b.n	800eaa6 <refr_area_part+0x126>
 800eace:	2500      	movs	r5, #0
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800ead0:	691f      	ldr	r7, [r3, #16]
        refr_obj_and_children(draw_ctx, top_act_scr);
 800ead2:	0030      	movs	r0, r6
 800ead4:	0039      	movs	r1, r7
 800ead6:	f7ff feed 	bl	800e8b4 <refr_obj_and_children>
        if(disp_refr->prev_scr) {
 800eada:	6820      	ldr	r0, [r4, #0]
 800eadc:	6943      	ldr	r3, [r0, #20]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d0cf      	beq.n	800ea82 <refr_area_part+0x102>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800eae2:	2d00      	cmp	r5, #0
 800eae4:	d000      	beq.n	800eae8 <refr_area_part+0x168>
 800eae6:	e78e      	b.n	800ea06 <refr_area_part+0x86>
 800eae8:	001d      	movs	r5, r3
 800eaea:	e78c      	b.n	800ea06 <refr_area_part+0x86>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800eaec:	2800      	cmp	r0, #0
 800eaee:	d016      	beq.n	800eb1e <refr_area_part+0x19e>
    if(disp_refr->draw_prev_over_act) {
 800eaf0:	2228      	movs	r2, #40	; 0x28
 800eaf2:	6823      	ldr	r3, [r4, #0]
 800eaf4:	5c9a      	ldrb	r2, [r3, r2]
 800eaf6:	07d2      	lsls	r2, r2, #31
 800eaf8:	d4ea      	bmi.n	800ead0 <refr_area_part+0x150>
        if(disp_refr->prev_scr) {
 800eafa:	695b      	ldr	r3, [r3, #20]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d03f      	beq.n	800eb80 <refr_area_part+0x200>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800eb00:	0001      	movs	r1, r0
 800eb02:	e03a      	b.n	800eb7a <refr_area_part+0x1fa>
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800eb04:	0029      	movs	r1, r5
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 800eb06:	6873      	ldr	r3, [r6, #4]
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800eb08:	2200      	movs	r2, #0
 800eb0a:	0018      	movs	r0, r3
 800eb0c:	3110      	adds	r1, #16
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 800eb0e:	4698      	mov	r8, r3
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800eb10:	f005 fd2a 	bl	8014568 <_lv_area_is_in>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d160      	bne.n	800ebda <refr_area_part+0x25a>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800eb18:	2500      	movs	r5, #0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800eb1a:	2f00      	cmp	r7, #0
 800eb1c:	d19d      	bne.n	800ea5a <refr_area_part+0xda>
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800eb1e:	6820      	ldr	r0, [r4, #0]
 800eb20:	f004 ff94 	bl	8013a4c <lv_disp_get_hor_res>
 800eb24:	0005      	movs	r5, r0
 800eb26:	6820      	ldr	r0, [r4, #0]
 800eb28:	f004 ffa4 	bl	8013a74 <lv_disp_get_ver_res>
 800eb2c:	3801      	subs	r0, #1
        lv_area_set(&a, 0, 0,
 800eb2e:	b200      	sxth	r0, r0
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800eb30:	3d01      	subs	r5, #1
        lv_area_set(&a, 0, 0,
 800eb32:	b22b      	sxth	r3, r5
 800eb34:	9000      	str	r0, [sp, #0]
 800eb36:	2200      	movs	r2, #0
 800eb38:	2100      	movs	r1, #0
 800eb3a:	a804      	add	r0, sp, #16
 800eb3c:	f005 fb50 	bl	80141e0 <lv_area_set>
        if(draw_ctx->draw_bg) {
 800eb40:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d01f      	beq.n	800eb86 <refr_area_part+0x206>
            lv_draw_rect_dsc_init(&dsc);
 800eb46:	ad06      	add	r5, sp, #24
 800eb48:	0028      	movs	r0, r5
 800eb4a:	f001 f99d 	bl	800fe88 <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 800eb4e:	6823      	ldr	r3, [r4, #0]
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 800eb50:	0029      	movs	r1, r5
            dsc.bg_img_src = disp_refr->bg_img;
 800eb52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 800eb54:	0030      	movs	r0, r6
            dsc.bg_img_src = disp_refr->bg_img;
 800eb56:	920a      	str	r2, [sp, #40]	; 0x28
            dsc.bg_img_opa = disp_refr->bg_opa;
 800eb58:	2229      	movs	r2, #41	; 0x29
 800eb5a:	5c9a      	ldrb	r2, [r3, r2]
 800eb5c:	76aa      	strb	r2, [r5, #26]
            dsc.bg_color = disp_refr->bg_color;
 800eb5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
            dsc.bg_opa = disp_refr->bg_opa;
 800eb60:	70ea      	strb	r2, [r5, #3]
            dsc.bg_color = disp_refr->bg_color;
 800eb62:	80ab      	strh	r3, [r5, #4]
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 800eb64:	aa04      	add	r2, sp, #16
 800eb66:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800eb68:	4798      	blx	r3
    if(disp_refr->draw_prev_over_act) {
 800eb6a:	2228      	movs	r2, #40	; 0x28
 800eb6c:	6823      	ldr	r3, [r4, #0]
 800eb6e:	5c9a      	ldrb	r2, [r3, r2]
 800eb70:	07d2      	lsls	r2, r2, #31
 800eb72:	d4ac      	bmi.n	800eace <refr_area_part+0x14e>
        if(disp_refr->prev_scr) {
 800eb74:	6959      	ldr	r1, [r3, #20]
 800eb76:	2900      	cmp	r1, #0
 800eb78:	d003      	beq.n	800eb82 <refr_area_part+0x202>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800eb7a:	0030      	movs	r0, r6
 800eb7c:	f7ff fe9a 	bl	800e8b4 <refr_obj_and_children>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800eb80:	6823      	ldr	r3, [r4, #0]
 800eb82:	691f      	ldr	r7, [r3, #16]
 800eb84:	e778      	b.n	800ea78 <refr_area_part+0xf8>
        else if(disp_refr->bg_img) {
 800eb86:	6823      	ldr	r3, [r4, #0]
 800eb88:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	d015      	beq.n	800ebba <refr_area_part+0x23a>
            lv_res_t res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800eb8e:	a903      	add	r1, sp, #12
 800eb90:	f001 fda8 	bl	80106e4 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 800eb94:	2801      	cmp	r0, #1
 800eb96:	d1e8      	bne.n	800eb6a <refr_area_part+0x1ea>
                lv_draw_img_dsc_init(&dsc);
 800eb98:	ad06      	add	r5, sp, #24
 800eb9a:	0028      	movs	r0, r5
 800eb9c:	f000 fba8 	bl	800f2f0 <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 800eba0:	2229      	movs	r2, #41	; 0x29
 800eba2:	6823      	ldr	r3, [r4, #0]
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 800eba4:	0029      	movs	r1, r5
                dsc.opa = disp_refr->bg_opa;
 800eba6:	5c9a      	ldrb	r2, [r3, r2]
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 800eba8:	0030      	movs	r0, r6
                dsc.opa = disp_refr->bg_opa;
 800ebaa:	72ea      	strb	r2, [r5, #11]
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 800ebac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebae:	aa04      	add	r2, sp, #16
 800ebb0:	f000 fbae 	bl	800f310 <lv_draw_img>
                LV_LOG_WARN("Can't draw the background image");
 800ebb4:	e7d9      	b.n	800eb6a <refr_area_part+0x1ea>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800ebb6:	001d      	movs	r5, r3
 800ebb8:	e75a      	b.n	800ea70 <refr_area_part+0xf0>
            lv_draw_rect_dsc_init(&dsc);
 800ebba:	a806      	add	r0, sp, #24
 800ebbc:	f001 f964 	bl	800fe88 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800ebc0:	4669      	mov	r1, sp
 800ebc2:	6823      	ldr	r3, [r4, #0]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 800ebc4:	0030      	movs	r0, r6
            dsc.bg_color = disp_refr->bg_color;
 800ebc6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ebc8:	838a      	strh	r2, [r1, #28]
            dsc.bg_opa = disp_refr->bg_opa;
 800ebca:	2229      	movs	r2, #41	; 0x29
 800ebcc:	5c9b      	ldrb	r3, [r3, r2]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 800ebce:	6872      	ldr	r2, [r6, #4]
            dsc.bg_opa = disp_refr->bg_opa;
 800ebd0:	76cb      	strb	r3, [r1, #27]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 800ebd2:	a906      	add	r1, sp, #24
 800ebd4:	f001 f97e 	bl	800fed4 <lv_draw_rect>
 800ebd8:	e7c7      	b.n	800eb6a <refr_area_part+0x1ea>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800ebda:	2101      	movs	r1, #1
 800ebdc:	0028      	movs	r0, r5
 800ebde:	f7f9 f999 	bl	8007f14 <lv_obj_has_flag>
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	d198      	bne.n	800eb18 <refr_area_part+0x198>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800ebe6:	0028      	movs	r0, r5
 800ebe8:	f7f9 fd64 	bl	80086b4 <_lv_obj_get_layer_type>
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d100      	bne.n	800ebf2 <refr_area_part+0x272>
 800ebf0:	e72c      	b.n	800ea4c <refr_area_part+0xcc>
 800ebf2:	e791      	b.n	800eb18 <refr_area_part+0x198>
 800ebf4:	20000468 	.word	0x20000468

0800ebf8 <_lv_inv_area>:
{
 800ebf8:	b570      	push	{r4, r5, r6, lr}
 800ebfa:	0004      	movs	r4, r0
 800ebfc:	000d      	movs	r5, r1
 800ebfe:	b084      	sub	sp, #16
    if(!disp) disp = lv_disp_get_default();
 800ec00:	2800      	cmp	r0, #0
 800ec02:	d040      	beq.n	800ec86 <_lv_inv_area+0x8e>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800ec04:	0020      	movs	r0, r4
 800ec06:	f7f5 ff1b 	bl	8004a40 <lv_disp_is_invalidation_enabled>
 800ec0a:	2800      	cmp	r0, #0
 800ec0c:	d039      	beq.n	800ec82 <_lv_inv_area+0x8a>
    if(disp->rendering_in_progress) {
 800ec0e:	2204      	movs	r2, #4
 800ec10:	2328      	movs	r3, #40	; 0x28
 800ec12:	0011      	movs	r1, r2
 800ec14:	5ce3      	ldrb	r3, [r4, r3]
 800ec16:	4019      	ands	r1, r3
 800ec18:	421a      	tst	r2, r3
 800ec1a:	d132      	bne.n	800ec82 <_lv_inv_area+0x8a>
    if(area_p == NULL) {
 800ec1c:	2d00      	cmp	r5, #0
 800ec1e:	d037      	beq.n	800ec90 <_lv_inv_area+0x98>
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800ec20:	0020      	movs	r0, r4
    scr_area.x1 = 0;
 800ec22:	9100      	str	r1, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800ec24:	f004 ff12 	bl	8013a4c <lv_disp_get_hor_res>
 800ec28:	466e      	mov	r6, sp
 800ec2a:	3801      	subs	r0, #1
 800ec2c:	80b0      	strh	r0, [r6, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800ec2e:	0020      	movs	r0, r4
 800ec30:	f004 ff20 	bl	8013a74 <lv_disp_get_ver_res>
 800ec34:	3801      	subs	r0, #1
 800ec36:	80f0      	strh	r0, [r6, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800ec38:	0032      	movs	r2, r6
 800ec3a:	0029      	movs	r1, r5
 800ec3c:	a802      	add	r0, sp, #8
 800ec3e:	f005 fb0f 	bl	8014260 <_lv_area_intersect>
    if(suc == false)  return; /*Out of the screen*/
 800ec42:	2800      	cmp	r0, #0
 800ec44:	d01d      	beq.n	800ec82 <_lv_inv_area+0x8a>
    if(disp->driver->full_refresh) {
 800ec46:	6820      	ldr	r0, [r4, #0]
 800ec48:	7c03      	ldrb	r3, [r0, #16]
 800ec4a:	079b      	lsls	r3, r3, #30
 800ec4c:	d424      	bmi.n	800ec98 <_lv_inv_area+0xa0>
    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 800ec4e:	6983      	ldr	r3, [r0, #24]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d001      	beq.n	800ec58 <_lv_inv_area+0x60>
 800ec54:	a902      	add	r1, sp, #8
 800ec56:	4798      	blx	r3
    for(i = 0; i < disp->inv_p; i++) {
 800ec58:	26a8      	movs	r6, #168	; 0xa8
 800ec5a:	0076      	lsls	r6, r6, #1
 800ec5c:	5ba3      	ldrh	r3, [r4, r6]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d037      	beq.n	800ecd2 <_lv_inv_area+0xda>
 800ec62:	2500      	movs	r5, #0
 800ec64:	e004      	b.n	800ec70 <_lv_inv_area+0x78>
 800ec66:	3501      	adds	r5, #1
 800ec68:	5ba3      	ldrh	r3, [r4, r6]
 800ec6a:	b2ad      	uxth	r5, r5
 800ec6c:	42ab      	cmp	r3, r5
 800ec6e:	d921      	bls.n	800ecb4 <_lv_inv_area+0xbc>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800ec70:	1da9      	adds	r1, r5, #6
 800ec72:	00c9      	lsls	r1, r1, #3
 800ec74:	2200      	movs	r2, #0
 800ec76:	1861      	adds	r1, r4, r1
 800ec78:	a802      	add	r0, sp, #8
 800ec7a:	f005 fc75 	bl	8014568 <_lv_area_is_in>
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	d0f1      	beq.n	800ec66 <_lv_inv_area+0x6e>
}
 800ec82:	b004      	add	sp, #16
 800ec84:	bd70      	pop	{r4, r5, r6, pc}
    if(!disp) disp = lv_disp_get_default();
 800ec86:	f004 fedb 	bl	8013a40 <lv_disp_get_default>
 800ec8a:	1e04      	subs	r4, r0, #0
    if(!disp) return;
 800ec8c:	d0f9      	beq.n	800ec82 <_lv_inv_area+0x8a>
 800ec8e:	e7b9      	b.n	800ec04 <_lv_inv_area+0xc>
        disp->inv_p = 0;
 800ec90:	23a8      	movs	r3, #168	; 0xa8
 800ec92:	005b      	lsls	r3, r3, #1
 800ec94:	52e5      	strh	r5, [r4, r3]
        return;
 800ec96:	e7f4      	b.n	800ec82 <_lv_inv_area+0x8a>
        disp->inv_areas[0] = scr_area;
 800ec98:	0023      	movs	r3, r4
 800ec9a:	3330      	adds	r3, #48	; 0x30
 800ec9c:	ce06      	ldmia	r6!, {r1, r2}
 800ec9e:	c306      	stmia	r3!, {r1, r2}
        disp->inv_p = 1;
 800eca0:	23a8      	movs	r3, #168	; 0xa8
 800eca2:	2201      	movs	r2, #1
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800eca4:	6860      	ldr	r0, [r4, #4]
        disp->inv_p = 1;
 800eca6:	005b      	lsls	r3, r3, #1
 800eca8:	52e2      	strh	r2, [r4, r3]
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800ecaa:	2800      	cmp	r0, #0
 800ecac:	d0e9      	beq.n	800ec82 <_lv_inv_area+0x8a>
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800ecae:	f007 f879 	bl	8015da4 <lv_timer_resume>
 800ecb2:	e7e6      	b.n	800ec82 <_lv_inv_area+0x8a>
        lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800ecb4:	001a      	movs	r2, r3
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 800ecb6:	2b1f      	cmp	r3, #31
 800ecb8:	d90c      	bls.n	800ecd4 <_lv_inv_area+0xdc>
    dest->x1 = src->x1;
 800ecba:	9b00      	ldr	r3, [sp, #0]
 800ecbc:	6323      	str	r3, [r4, #48]	; 0x30
 800ecbe:	9b01      	ldr	r3, [sp, #4]
 800ecc0:	6363      	str	r3, [r4, #52]	; 0x34
}
 800ecc2:	2301      	movs	r3, #1
    disp->inv_p++;
 800ecc4:	22a8      	movs	r2, #168	; 0xa8
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800ecc6:	6860      	ldr	r0, [r4, #4]
    disp->inv_p++;
 800ecc8:	0052      	lsls	r2, r2, #1
 800ecca:	52a3      	strh	r3, [r4, r2]
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800eccc:	2800      	cmp	r0, #0
 800ecce:	d1ee      	bne.n	800ecae <_lv_inv_area+0xb6>
 800ecd0:	e7d7      	b.n	800ec82 <_lv_inv_area+0x8a>
    for(i = 0; i < disp->inv_p; i++) {
 800ecd2:	2200      	movs	r2, #0
    dest->y2 = src->y2;
 800ecd4:	3206      	adds	r2, #6
    dest->x1 = src->x1;
 800ecd6:	9903      	ldr	r1, [sp, #12]
 800ecd8:	9802      	ldr	r0, [sp, #8]
 800ecda:	00d2      	lsls	r2, r2, #3
 800ecdc:	18a2      	adds	r2, r4, r2
    disp->inv_p++;
 800ecde:	3301      	adds	r3, #1
 800ece0:	c203      	stmia	r2!, {r0, r1}
 800ece2:	b29b      	uxth	r3, r3
}
 800ece4:	e7ee      	b.n	800ecc4 <_lv_inv_area+0xcc>
 800ece6:	46c0      	nop			; (mov r8, r8)

0800ece8 <_lv_refr_get_disp_refreshing>:
    return disp_refr;
 800ece8:	4b01      	ldr	r3, [pc, #4]	; (800ecf0 <_lv_refr_get_disp_refreshing+0x8>)
 800ecea:	6818      	ldr	r0, [r3, #0]
}
 800ecec:	4770      	bx	lr
 800ecee:	46c0      	nop			; (mov r8, r8)
 800ecf0:	20000468 	.word	0x20000468

0800ecf4 <_lv_disp_refr_timer>:
{
 800ecf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecf6:	46de      	mov	lr, fp
 800ecf8:	4657      	mov	r7, sl
 800ecfa:	464e      	mov	r6, r9
 800ecfc:	4645      	mov	r5, r8
 800ecfe:	b5e0      	push	{r5, r6, r7, lr}
 800ed00:	b08d      	sub	sp, #52	; 0x34
 800ed02:	0004      	movs	r4, r0
    uint32_t start = lv_tick_get();
 800ed04:	f004 ff62 	bl	8013bcc <lv_tick_get>
    volatile uint32_t elaps = 0;
 800ed08:	2300      	movs	r3, #0
    uint32_t start = lv_tick_get();
 800ed0a:	9007      	str	r0, [sp, #28]
    volatile uint32_t elaps = 0;
 800ed0c:	9309      	str	r3, [sp, #36]	; 0x24
    if(tmr) {
 800ed0e:	2c00      	cmp	r4, #0
 800ed10:	d100      	bne.n	800ed14 <_lv_disp_refr_timer+0x20>
 800ed12:	e22f      	b.n	800f174 <_lv_disp_refr_timer+0x480>
        disp_refr = tmr->user_data;
 800ed14:	4bb0      	ldr	r3, [pc, #704]	; (800efd8 <_lv_disp_refr_timer+0x2e4>)
 800ed16:	68e2      	ldr	r2, [r4, #12]
 800ed18:	469a      	mov	sl, r3
        lv_timer_pause(tmr);
 800ed1a:	0020      	movs	r0, r4
        disp_refr = tmr->user_data;
 800ed1c:	601a      	str	r2, [r3, #0]
        lv_timer_pause(tmr);
 800ed1e:	f007 f83b 	bl	8015d98 <lv_timer_pause>
    lv_obj_update_layout(disp_refr->act_scr);
 800ed22:	4653      	mov	r3, sl
 800ed24:	6818      	ldr	r0, [r3, #0]
 800ed26:	6900      	ldr	r0, [r0, #16]
 800ed28:	f7fb fd34 	bl	800a794 <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 800ed2c:	4653      	mov	r3, sl
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	6958      	ldr	r0, [r3, #20]
 800ed32:	2800      	cmp	r0, #0
 800ed34:	d003      	beq.n	800ed3e <_lv_disp_refr_timer+0x4a>
 800ed36:	f7fb fd2d 	bl	800a794 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->top_layer);
 800ed3a:	4653      	mov	r3, sl
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	69d8      	ldr	r0, [r3, #28]
 800ed40:	f7fb fd28 	bl	800a794 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 800ed44:	4653      	mov	r3, sl
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	6a18      	ldr	r0, [r3, #32]
 800ed4a:	f7fb fd23 	bl	800a794 <lv_obj_update_layout>
    if(disp_refr->act_scr == NULL) {
 800ed4e:	4653      	mov	r3, sl
 800ed50:	681e      	ldr	r6, [r3, #0]
 800ed52:	6933      	ldr	r3, [r6, #16]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d100      	bne.n	800ed5a <_lv_disp_refr_timer+0x66>
 800ed58:	e208      	b.n	800f16c <_lv_disp_refr_timer+0x478>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800ed5a:	23a8      	movs	r3, #168	; 0xa8
 800ed5c:	005b      	lsls	r3, r3, #1
 800ed5e:	5af2      	ldrh	r2, [r6, r3]
 800ed60:	0030      	movs	r0, r6
 800ed62:	2700      	movs	r7, #0
 800ed64:	4656      	mov	r6, sl
 800ed66:	2a00      	cmp	r2, #0
 800ed68:	d103      	bne.n	800ed72 <_lv_disp_refr_timer+0x7e>
 800ed6a:	e209      	b.n	800f180 <_lv_disp_refr_timer+0x48c>
 800ed6c:	3701      	adds	r7, #1
 800ed6e:	4297      	cmp	r7, r2
 800ed70:	d24f      	bcs.n	800ee12 <_lv_disp_refr_timer+0x11e>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800ed72:	19c3      	adds	r3, r0, r7
 800ed74:	3331      	adds	r3, #49	; 0x31
 800ed76:	33ff      	adds	r3, #255	; 0xff
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d1f6      	bne.n	800ed6c <_lv_disp_refr_timer+0x78>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800ed7e:	2a00      	cmp	r2, #0
 800ed80:	d100      	bne.n	800ed84 <_lv_disp_refr_timer+0x90>
 800ed82:	e1fd      	b.n	800f180 <_lv_disp_refr_timer+0x48c>
 800ed84:	1dbb      	adds	r3, r7, #6
 800ed86:	00fd      	lsls	r5, r7, #3
 800ed88:	00db      	lsls	r3, r3, #3
 800ed8a:	2400      	movs	r4, #0
 800ed8c:	4698      	mov	r8, r3
 800ed8e:	3530      	adds	r5, #48	; 0x30
 800ed90:	e027      	b.n	800ede2 <_lv_disp_refr_timer+0xee>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800ed92:	464b      	mov	r3, r9
 800ed94:	6831      	ldr	r1, [r6, #0]
 800ed96:	a80a      	add	r0, sp, #40	; 0x28
 800ed98:	18ca      	adds	r2, r1, r3
 800ed9a:	1949      	adds	r1, r1, r5
 800ed9c:	f005 fa9c 	bl	80142d8 <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800eda0:	a80a      	add	r0, sp, #40	; 0x28
 800eda2:	f005 fa2d 	bl	8014200 <lv_area_get_size>
 800eda6:	6833      	ldr	r3, [r6, #0]
 800eda8:	4683      	mov	fp, r0
 800edaa:	1958      	adds	r0, r3, r5
 800edac:	f005 fa28 	bl	8014200 <lv_area_get_size>
 800edb0:	4682      	mov	sl, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800edb2:	6830      	ldr	r0, [r6, #0]
 800edb4:	4448      	add	r0, r9
 800edb6:	f005 fa23 	bl	8014200 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800edba:	4450      	add	r0, sl
 800edbc:	4583      	cmp	fp, r0
 800edbe:	d223      	bcs.n	800ee08 <_lv_disp_refr_timer+0x114>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800edc0:	4643      	mov	r3, r8
 800edc2:	6830      	ldr	r0, [r6, #0]
    dest->x1 = src->x1;
 800edc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800edc6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800edc8:	18c3      	adds	r3, r0, r3
 800edca:	c306      	stmia	r3!, {r1, r2}
                disp_refr->inv_area_joined[join_from] = 1;
 800edcc:	2201      	movs	r2, #1
 800edce:	1903      	adds	r3, r0, r4
 800edd0:	3331      	adds	r3, #49	; 0x31
 800edd2:	33ff      	adds	r3, #255	; 0xff
 800edd4:	701a      	strb	r2, [r3, #0]
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800edd6:	23a8      	movs	r3, #168	; 0xa8
 800edd8:	005b      	lsls	r3, r3, #1
 800edda:	5ac2      	ldrh	r2, [r0, r3]
 800eddc:	3401      	adds	r4, #1
 800edde:	4294      	cmp	r4, r2
 800ede0:	d2c4      	bcs.n	800ed6c <_lv_disp_refr_timer+0x78>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800ede2:	1903      	adds	r3, r0, r4
 800ede4:	3331      	adds	r3, #49	; 0x31
 800ede6:	33ff      	adds	r3, #255	; 0xff
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d1f6      	bne.n	800eddc <_lv_disp_refr_timer+0xe8>
 800edee:	42bc      	cmp	r4, r7
 800edf0:	d0f4      	beq.n	800eddc <_lv_disp_refr_timer+0xe8>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800edf2:	2230      	movs	r2, #48	; 0x30
 800edf4:	4691      	mov	r9, r2
 800edf6:	00e3      	lsls	r3, r4, #3
 800edf8:	4499      	add	r9, r3
 800edfa:	464b      	mov	r3, r9
 800edfc:	18c1      	adds	r1, r0, r3
 800edfe:	1940      	adds	r0, r0, r5
 800ee00:	f005 fb92 	bl	8014528 <_lv_area_is_on>
 800ee04:	2800      	cmp	r0, #0
 800ee06:	d1c4      	bne.n	800ed92 <_lv_disp_refr_timer+0x9e>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800ee08:	23a8      	movs	r3, #168	; 0xa8
 800ee0a:	6830      	ldr	r0, [r6, #0]
 800ee0c:	005b      	lsls	r3, r3, #1
 800ee0e:	5ac2      	ldrh	r2, [r0, r3]
 800ee10:	e7e4      	b.n	800eddc <_lv_disp_refr_timer+0xe8>
    px_num = 0;
 800ee12:	2300      	movs	r3, #0
 800ee14:	4971      	ldr	r1, [pc, #452]	; (800efdc <_lv_disp_refr_timer+0x2e8>)
 800ee16:	46b2      	mov	sl, r6
 800ee18:	600b      	str	r3, [r1, #0]
 800ee1a:	0006      	movs	r6, r0
    if(disp_refr->inv_p == 0) return;
 800ee1c:	2a00      	cmp	r2, #0
 800ee1e:	d100      	bne.n	800ee22 <_lv_disp_refr_timer+0x12e>
 800ee20:	e141      	b.n	800f0a6 <_lv_disp_refr_timer+0x3b2>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800ee22:	0001      	movs	r1, r0
 800ee24:	3131      	adds	r1, #49	; 0x31
 800ee26:	1e53      	subs	r3, r2, #1
 800ee28:	31ff      	adds	r1, #255	; 0xff
        if(disp_refr->inv_area_joined[i] == 0) {
 800ee2a:	5cc8      	ldrb	r0, [r1, r3]
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	d100      	bne.n	800ee32 <_lv_disp_refr_timer+0x13e>
 800ee30:	e1a9      	b.n	800f186 <_lv_disp_refr_timer+0x492>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800ee32:	3b01      	subs	r3, #1
 800ee34:	d2f9      	bcs.n	800ee2a <_lv_disp_refr_timer+0x136>
    int32_t last_i = 0;
 800ee36:	2300      	movs	r3, #0
    if(disp_refr->driver->render_start_cb) {
 800ee38:	6830      	ldr	r0, [r6, #0]
    int32_t last_i = 0;
 800ee3a:	9306      	str	r3, [sp, #24]
    if(disp_refr->driver->render_start_cb) {
 800ee3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d100      	bne.n	800ee44 <_lv_disp_refr_timer+0x150>
 800ee42:	e1a6      	b.n	800f192 <_lv_disp_refr_timer+0x49e>
        disp_refr->driver->render_start_cb(disp_refr->driver);
 800ee44:	4798      	blx	r3
    disp_refr->driver->draw_buf->last_area = 0;
 800ee46:	4653      	mov	r3, sl
 800ee48:	681e      	ldr	r6, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800ee4a:	23a8      	movs	r3, #168	; 0xa8
    disp_refr->driver->draw_buf->last_area = 0;
 800ee4c:	2001      	movs	r0, #1
    for(i = 0; i < disp_refr->inv_p; i++) {
 800ee4e:	005b      	lsls	r3, r3, #1
 800ee50:	5af2      	ldrh	r2, [r6, r3]
    disp_refr->driver->draw_buf->last_area = 0;
 800ee52:	6833      	ldr	r3, [r6, #0]
 800ee54:	68db      	ldr	r3, [r3, #12]
 800ee56:	7e19      	ldrb	r1, [r3, #24]
 800ee58:	4381      	bics	r1, r0
 800ee5a:	7619      	strb	r1, [r3, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 800ee5c:	7e19      	ldrb	r1, [r3, #24]
 800ee5e:	3001      	adds	r0, #1
 800ee60:	4381      	bics	r1, r0
 800ee62:	7619      	strb	r1, [r3, #24]
    disp_refr->rendering_in_progress = true;
 800ee64:	2128      	movs	r1, #40	; 0x28
 800ee66:	2004      	movs	r0, #4
 800ee68:	5c73      	ldrb	r3, [r6, r1]
 800ee6a:	4303      	orrs	r3, r0
 800ee6c:	5473      	strb	r3, [r6, r1]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800ee6e:	2a00      	cmp	r2, #0
 800ee70:	d100      	bne.n	800ee74 <_lv_disp_refr_timer+0x180>
 800ee72:	e1ba      	b.n	800f1ea <_lv_disp_refr_timer+0x4f6>
    int32_t last_i = 0;
 800ee74:	2300      	movs	r3, #0
 800ee76:	9304      	str	r3, [sp, #16]
        if(disp_refr->inv_area_joined[i] == 0) {
 800ee78:	9904      	ldr	r1, [sp, #16]
 800ee7a:	1873      	adds	r3, r6, r1
 800ee7c:	3331      	adds	r3, #49	; 0x31
 800ee7e:	33ff      	adds	r3, #255	; 0xff
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d000      	beq.n	800ee88 <_lv_disp_refr_timer+0x194>
 800ee86:	e0db      	b.n	800f040 <_lv_disp_refr_timer+0x34c>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 800ee88:	9b06      	ldr	r3, [sp, #24]
 800ee8a:	428b      	cmp	r3, r1
 800ee8c:	d100      	bne.n	800ee90 <_lv_disp_refr_timer+0x19c>
 800ee8e:	e139      	b.n	800f104 <_lv_disp_refr_timer+0x410>
 800ee90:	6831      	ldr	r1, [r6, #0]
 800ee92:	68cb      	ldr	r3, [r1, #12]
            disp_refr->driver->draw_buf->last_part = 0;
 800ee94:	2002      	movs	r0, #2
 800ee96:	7e1a      	ldrb	r2, [r3, #24]
 800ee98:	4382      	bics	r2, r0
 800ee9a:	302e      	adds	r0, #46	; 0x2e
 800ee9c:	4684      	mov	ip, r0
 800ee9e:	761a      	strb	r2, [r3, #24]
            refr_area(&disp_refr->inv_areas[i]);
 800eea0:	9a04      	ldr	r2, [sp, #16]
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800eea2:	689b      	ldr	r3, [r3, #8]
 800eea4:	00d2      	lsls	r2, r2, #3
 800eea6:	4494      	add	ip, r2
 800eea8:	4660      	mov	r0, ip
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 800eeaa:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
 800eeac:	9005      	str	r0, [sp, #20]
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800eeae:	603b      	str	r3, [r7, #0]
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 800eeb0:	7c0b      	ldrb	r3, [r1, #16]
 800eeb2:	079b      	lsls	r3, r3, #30
 800eeb4:	d000      	beq.n	800eeb8 <_lv_disp_refr_timer+0x1c4>
 800eeb6:	e101      	b.n	800f0bc <_lv_disp_refr_timer+0x3c8>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eeb8:	4693      	mov	fp, r2
 800eeba:	44b3      	add	fp, r6
 800eebc:	465b      	mov	r3, fp
 800eebe:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
 800eec0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800eec2:	3401      	adds	r4, #1
 800eec4:	1ae4      	subs	r4, r4, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eec6:	465b      	mov	r3, fp
 800eec8:	2236      	movs	r2, #54	; 0x36
 800eeca:	5e9b      	ldrsh	r3, [r3, r2]
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800eecc:	0030      	movs	r0, r6
 800eece:	4698      	mov	r8, r3
 800eed0:	1c5d      	adds	r5, r3, #1
 800eed2:	465b      	mov	r3, fp
 800eed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eed6:	b224      	sxth	r4, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eed8:	1aed      	subs	r5, r5, r3
 800eeda:	b22d      	sxth	r5, r5
 800eedc:	f004 fdca 	bl	8013a74 <lv_disp_get_ver_res>
 800eee0:	4580      	cmp	r8, r0
 800eee2:	db00      	blt.n	800eee6 <_lv_disp_refr_timer+0x1f2>
 800eee4:	e128      	b.n	800f138 <_lv_disp_refr_timer+0x444>
 800eee6:	465b      	mov	r3, fp
 800eee8:	2236      	movs	r2, #54	; 0x36
 800eeea:	5e9b      	ldrsh	r3, [r3, r2]
 800eeec:	4698      	mov	r8, r3
    int32_t max_row = get_max_row(disp_refr, w, h);
 800eeee:	4653      	mov	r3, sl
 800eef0:	681b      	ldr	r3, [r3, #0]
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 800eef2:	0021      	movs	r1, r4
 800eef4:	681e      	ldr	r6, [r3, #0]
    int32_t max_row = get_max_row(disp_refr, w, h);
 800eef6:	4699      	mov	r9, r3
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 800eef8:	68f3      	ldr	r3, [r6, #12]
 800eefa:	68d8      	ldr	r0, [r3, #12]
 800eefc:	f7f1 f914 	bl	8000128 <__udivsi3>
    if(max_row > area_h) max_row = area_h;
 800ef00:	9503      	str	r5, [sp, #12]
 800ef02:	4285      	cmp	r5, r0
 800ef04:	dd00      	ble.n	800ef08 <_lv_disp_refr_timer+0x214>
 800ef06:	9003      	str	r0, [sp, #12]
    if(disp_refr->driver->rounder_cb) {
 800ef08:	69b3      	ldr	r3, [r6, #24]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d028      	beq.n	800ef60 <_lv_disp_refr_timer+0x26c>
        tmp.x2 = 0;
 800ef0e:	2200      	movs	r2, #0
        lv_coord_t h_tmp = max_row;
 800ef10:	9d03      	ldr	r5, [sp, #12]
        tmp.x2 = 0;
 800ef12:	ac0a      	add	r4, sp, #40	; 0x28
 800ef14:	80a2      	strh	r2, [r4, #4]
        tmp.x1 = 0;
 800ef16:	920a      	str	r2, [sp, #40]	; 0x28
        lv_coord_t h_tmp = max_row;
 800ef18:	b22a      	sxth	r2, r5
 800ef1a:	0030      	movs	r0, r6
 800ef1c:	46b9      	mov	r9, r7
 800ef1e:	0016      	movs	r6, r2
 800ef20:	4657      	mov	r7, sl
 800ef22:	46aa      	mov	sl, r5
 800ef24:	e006      	b.n	800ef34 <_lv_disp_refr_timer+0x240>
        } while(h_tmp > 0);
 800ef26:	2d00      	cmp	r5, #0
 800ef28:	dc00      	bgt.n	800ef2c <_lv_disp_refr_timer+0x238>
 800ef2a:	e0f2      	b.n	800f112 <_lv_disp_refr_timer+0x41e>
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 800ef2c:	002e      	movs	r6, r5
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	6818      	ldr	r0, [r3, #0]
 800ef32:	6983      	ldr	r3, [r0, #24]
            tmp.y2 = h_tmp - 1;
 800ef34:	1e75      	subs	r5, r6, #1
 800ef36:	b22d      	sxth	r5, r5
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 800ef38:	0021      	movs	r1, r4
            tmp.y2 = h_tmp - 1;
 800ef3a:	80e5      	strh	r5, [r4, #6]
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 800ef3c:	4798      	blx	r3
 800ef3e:	2306      	movs	r3, #6
 800ef40:	5ee2      	ldrsh	r2, [r4, r3]
 800ef42:	8863      	ldrh	r3, [r4, #2]
 800ef44:	3201      	adds	r2, #1
 800ef46:	1ad3      	subs	r3, r2, r3
            if(lv_area_get_height(&tmp) <= max_row) break;
 800ef48:	b21b      	sxth	r3, r3
 800ef4a:	459a      	cmp	sl, r3
 800ef4c:	dbeb      	blt.n	800ef26 <_lv_disp_refr_timer+0x232>
        if(h_tmp <= 0) {
 800ef4e:	46ba      	mov	sl, r7
 800ef50:	464f      	mov	r7, r9
 800ef52:	2e00      	cmp	r6, #0
 800ef54:	dc00      	bgt.n	800ef58 <_lv_disp_refr_timer+0x264>
 800ef56:	e0de      	b.n	800f116 <_lv_disp_refr_timer+0x422>
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800ef58:	4653      	mov	r3, sl
 800ef5a:	681b      	ldr	r3, [r3, #0]
            max_row = tmp.y2 + 1;
 800ef5c:	9203      	str	r2, [sp, #12]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800ef5e:	4699      	mov	r9, r3
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800ef60:	465b      	mov	r3, fp
 800ef62:	2232      	movs	r2, #50	; 0x32
 800ef64:	5e9a      	ldrsh	r2, [r3, r2]
 800ef66:	9b03      	ldr	r3, [sp, #12]
    return max_row;
 800ef68:	9903      	ldr	r1, [sp, #12]
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800ef6a:	18d3      	adds	r3, r2, r3
 800ef6c:	3b01      	subs	r3, #1
 800ef6e:	4598      	cmp	r8, r3
 800ef70:	da00      	bge.n	800ef74 <_lv_disp_refr_timer+0x280>
 800ef72:	e0df      	b.n	800f134 <_lv_disp_refr_timer+0x440>
        sub_area.y2 = row + max_row - 1;
 800ef74:	b28b      	uxth	r3, r1
 800ef76:	469c      	mov	ip, r3
 800ef78:	4462      	add	r2, ip
 800ef7a:	b295      	uxth	r5, r2
 800ef7c:	ac0a      	add	r4, sp, #40	; 0x28
 800ef7e:	464a      	mov	r2, r9
 800ef80:	4699      	mov	r9, r3
 800ef82:	e013      	b.n	800efac <_lv_disp_refr_timer+0x2b8>
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 800ef84:	4642      	mov	r2, r8
 800ef86:	4646      	mov	r6, r8
 800ef88:	80e2      	strh	r2, [r4, #6]
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 800ef8a:	2102      	movs	r1, #2
 800ef8c:	7e1a      	ldrb	r2, [r3, #24]
 800ef8e:	430a      	orrs	r2, r1
 800ef90:	761a      	strb	r2, [r3, #24]
        refr_area_part(draw_ctx);
 800ef92:	0038      	movs	r0, r7
 800ef94:	f7ff fcf4 	bl	800e980 <refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800ef98:	9b03      	ldr	r3, [sp, #12]
 800ef9a:	b22a      	sxth	r2, r5
 800ef9c:	18d3      	adds	r3, r2, r3
 800ef9e:	444d      	add	r5, r9
 800efa0:	3b01      	subs	r3, #1
 800efa2:	b2ad      	uxth	r5, r5
 800efa4:	4543      	cmp	r3, r8
 800efa6:	dc1b      	bgt.n	800efe0 <_lv_disp_refr_timer+0x2ec>
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800efa8:	4653      	mov	r3, sl
 800efaa:	681a      	ldr	r2, [r3, #0]
        sub_area.x1 = area_p->x1;
 800efac:	465b      	mov	r3, fp
 800efae:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800efb0:	1e6e      	subs	r6, r5, #1
 800efb2:	8023      	strh	r3, [r4, #0]
        sub_area.x2 = area_p->x2;
 800efb4:	465b      	mov	r3, fp
 800efb6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800efb8:	b236      	sxth	r6, r6
 800efba:	80a3      	strh	r3, [r4, #4]
        sub_area.y1 = row;
 800efbc:	464b      	mov	r3, r9
 800efbe:	1aeb      	subs	r3, r5, r3
 800efc0:	8063      	strh	r3, [r4, #2]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800efc2:	6813      	ldr	r3, [r2, #0]
        sub_area.y2 = row + max_row - 1;
 800efc4:	80e6      	strh	r6, [r4, #6]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800efc6:	68db      	ldr	r3, [r3, #12]
        draw_ctx->buf_area = &sub_area;
 800efc8:	607c      	str	r4, [r7, #4]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800efca:	689a      	ldr	r2, [r3, #8]
        draw_ctx->clip_area = &sub_area;
 800efcc:	60bc      	str	r4, [r7, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800efce:	603a      	str	r2, [r7, #0]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 800efd0:	45b0      	cmp	r8, r6
 800efd2:	dbd7      	blt.n	800ef84 <_lv_disp_refr_timer+0x290>
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 800efd4:	d1dd      	bne.n	800ef92 <_lv_disp_refr_timer+0x29e>
 800efd6:	e7d8      	b.n	800ef8a <_lv_disp_refr_timer+0x296>
 800efd8:	20000468 	.word	0x20000468
 800efdc:	2000046c 	.word	0x2000046c
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800efe0:	4653      	mov	r3, sl
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4699      	mov	r9, r3
    if(y2 != row_last) {
 800efe6:	45b0      	cmp	r8, r6
 800efe8:	d01a      	beq.n	800f020 <_lv_disp_refr_timer+0x32c>
        sub_area.x1 = area_p->x1;
 800efea:	465b      	mov	r3, fp
 800efec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800efee:	ac0a      	add	r4, sp, #40	; 0x28
 800eff0:	8023      	strh	r3, [r4, #0]
        sub_area.x2 = area_p->x2;
 800eff2:	465b      	mov	r3, fp
 800eff4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
        disp_refr->driver->draw_buf->last_part = 1;
 800eff6:	2102      	movs	r1, #2
        sub_area.x2 = area_p->x2;
 800eff8:	80a3      	strh	r3, [r4, #4]
        sub_area.y2 = y2;
 800effa:	4643      	mov	r3, r8
 800effc:	80e3      	strh	r3, [r4, #6]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800effe:	464b      	mov	r3, r9
 800f000:	681b      	ldr	r3, [r3, #0]
        sub_area.y1 = row;
 800f002:	8062      	strh	r2, [r4, #2]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800f004:	68db      	ldr	r3, [r3, #12]
        draw_ctx->buf_area = &sub_area;
 800f006:	607c      	str	r4, [r7, #4]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800f008:	689a      	ldr	r2, [r3, #8]
        draw_ctx->clip_area = &sub_area;
 800f00a:	60bc      	str	r4, [r7, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800f00c:	603a      	str	r2, [r7, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 800f00e:	7e1a      	ldrb	r2, [r3, #24]
        refr_area_part(draw_ctx);
 800f010:	0038      	movs	r0, r7
        disp_refr->driver->draw_buf->last_part = 1;
 800f012:	430a      	orrs	r2, r1
 800f014:	761a      	strb	r2, [r3, #24]
        refr_area_part(draw_ctx);
 800f016:	f7ff fcb3 	bl	800e980 <refr_area_part>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800f01a:	4653      	mov	r3, sl
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	4699      	mov	r9, r3
 800f020:	9805      	ldr	r0, [sp, #20]
 800f022:	4448      	add	r0, r9
 800f024:	f005 f8ec 	bl	8014200 <lv_area_get_size>
 800f028:	4b72      	ldr	r3, [pc, #456]	; (800f1f4 <_lv_disp_refr_timer+0x500>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	469c      	mov	ip, r3
 800f02e:	9303      	str	r3, [sp, #12]
 800f030:	4b70      	ldr	r3, [pc, #448]	; (800f1f4 <_lv_disp_refr_timer+0x500>)
 800f032:	4460      	add	r0, ip
 800f034:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800f036:	4653      	mov	r3, sl
 800f038:	681e      	ldr	r6, [r3, #0]
 800f03a:	23a8      	movs	r3, #168	; 0xa8
 800f03c:	005b      	lsls	r3, r3, #1
 800f03e:	5af2      	ldrh	r2, [r6, r3]
 800f040:	9b04      	ldr	r3, [sp, #16]
 800f042:	3301      	adds	r3, #1
 800f044:	9304      	str	r3, [sp, #16]
 800f046:	4293      	cmp	r3, r2
 800f048:	da00      	bge.n	800f04c <_lv_disp_refr_timer+0x358>
 800f04a:	e715      	b.n	800ee78 <_lv_disp_refr_timer+0x184>
    disp_refr->rendering_in_progress = false;
 800f04c:	2128      	movs	r1, #40	; 0x28
 800f04e:	2004      	movs	r0, #4
 800f050:	5c73      	ldrb	r3, [r6, r1]
 800f052:	4383      	bics	r3, r0
 800f054:	5473      	strb	r3, [r6, r1]
    if(disp_refr->inv_p != 0) {
 800f056:	2a00      	cmp	r2, #0
 800f058:	d025      	beq.n	800f0a6 <_lv_disp_refr_timer+0x3b2>
        if(disp_refr->driver->full_refresh) {
 800f05a:	6833      	ldr	r3, [r6, #0]
 800f05c:	7c1b      	ldrb	r3, [r3, #16]
 800f05e:	079b      	lsls	r3, r3, #30
 800f060:	d500      	bpl.n	800f064 <_lv_disp_refr_timer+0x370>
 800f062:	e0a5      	b.n	800f1b0 <_lv_disp_refr_timer+0x4bc>
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800f064:	0030      	movs	r0, r6
 800f066:	2180      	movs	r1, #128	; 0x80
 800f068:	3030      	adds	r0, #48	; 0x30
 800f06a:	0049      	lsls	r1, r1, #1
 800f06c:	f006 fa8a 	bl	8015584 <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 800f070:	4653      	mov	r3, sl
 800f072:	6818      	ldr	r0, [r3, #0]
 800f074:	2120      	movs	r1, #32
 800f076:	3031      	adds	r0, #49	; 0x31
 800f078:	30ff      	adds	r0, #255	; 0xff
 800f07a:	f006 fa83 	bl	8015584 <lv_memset_00>
        disp_refr->inv_p = 0;
 800f07e:	4651      	mov	r1, sl
 800f080:	23a8      	movs	r3, #168	; 0xa8
 800f082:	2200      	movs	r2, #0
 800f084:	6809      	ldr	r1, [r1, #0]
 800f086:	005b      	lsls	r3, r3, #1
 800f088:	52ca      	strh	r2, [r1, r3]
        elaps = lv_tick_elaps(start);
 800f08a:	9807      	ldr	r0, [sp, #28]
 800f08c:	f004 fdac 	bl	8013be8 <lv_tick_elaps>
        if(disp_refr->driver->monitor_cb) {
 800f090:	4653      	mov	r3, sl
 800f092:	681b      	ldr	r3, [r3, #0]
        elaps = lv_tick_elaps(start);
 800f094:	9009      	str	r0, [sp, #36]	; 0x24
        if(disp_refr->driver->monitor_cb) {
 800f096:	6818      	ldr	r0, [r3, #0]
 800f098:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d003      	beq.n	800f0a6 <_lv_disp_refr_timer+0x3b2>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 800f09e:	4a55      	ldr	r2, [pc, #340]	; (800f1f4 <_lv_disp_refr_timer+0x500>)
 800f0a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f0a2:	6812      	ldr	r2, [r2, #0]
 800f0a4:	4798      	blx	r3
    lv_mem_buf_free_all();
 800f0a6:	f006 f867 	bl	8015178 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800f0aa:	f004 fc15 	bl	80138d8 <_lv_font_clean_up_fmt_txt>
}
 800f0ae:	b00d      	add	sp, #52	; 0x34
 800f0b0:	bcf0      	pop	{r4, r5, r6, r7}
 800f0b2:	46bb      	mov	fp, r7
 800f0b4:	46b2      	mov	sl, r6
 800f0b6:	46a9      	mov	r9, r5
 800f0b8:	46a0      	mov	r8, r4
 800f0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800f0bc:	0030      	movs	r0, r6
 800f0be:	f004 fcc5 	bl	8013a4c <lv_disp_get_hor_res>
 800f0c2:	4653      	mov	r3, sl
 800f0c4:	0004      	movs	r4, r0
 800f0c6:	6818      	ldr	r0, [r3, #0]
 800f0c8:	f004 fcd4 	bl	8013a74 <lv_disp_get_ver_res>
 800f0cc:	3c01      	subs	r4, #1
 800f0ce:	3801      	subs	r0, #1
 800f0d0:	b223      	sxth	r3, r4
 800f0d2:	b200      	sxth	r0, r0
 800f0d4:	ac0a      	add	r4, sp, #40	; 0x28
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	2100      	movs	r1, #0
 800f0da:	9000      	str	r0, [sp, #0]
 800f0dc:	0020      	movs	r0, r4
 800f0de:	f005 f87f 	bl	80141e0 <lv_area_set>
        if(disp_refr->driver->full_refresh) {
 800f0e2:	4653      	mov	r3, sl
 800f0e4:	2102      	movs	r1, #2
 800f0e6:	681b      	ldr	r3, [r3, #0]
        draw_ctx->buf_area = &disp_area;
 800f0e8:	607c      	str	r4, [r7, #4]
        if(disp_refr->driver->full_refresh) {
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	7c1a      	ldrb	r2, [r3, #16]
 800f0ee:	4211      	tst	r1, r2
 800f0f0:	d02a      	beq.n	800f148 <_lv_disp_refr_timer+0x454>
            disp_refr->driver->draw_buf->last_part = 1;
 800f0f2:	68da      	ldr	r2, [r3, #12]
            refr_area_part(draw_ctx);
 800f0f4:	0038      	movs	r0, r7
            disp_refr->driver->draw_buf->last_part = 1;
 800f0f6:	7e13      	ldrb	r3, [r2, #24]
 800f0f8:	430b      	orrs	r3, r1
 800f0fa:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = &disp_area;
 800f0fc:	60bc      	str	r4, [r7, #8]
            refr_area_part(draw_ctx);
 800f0fe:	f7ff fc3f 	bl	800e980 <refr_area_part>
 800f102:	e78a      	b.n	800f01a <_lv_disp_refr_timer+0x326>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 800f104:	2001      	movs	r0, #1
 800f106:	6831      	ldr	r1, [r6, #0]
 800f108:	68cb      	ldr	r3, [r1, #12]
 800f10a:	7e1a      	ldrb	r2, [r3, #24]
 800f10c:	4302      	orrs	r2, r0
 800f10e:	761a      	strb	r2, [r3, #24]
 800f110:	e6c0      	b.n	800ee94 <_lv_disp_refr_timer+0x1a0>
 800f112:	46ba      	mov	sl, r7
 800f114:	464f      	mov	r7, r9
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800f116:	4653      	mov	r3, sl
 800f118:	681b      	ldr	r3, [r3, #0]
            return 0;
 800f11a:	2100      	movs	r1, #0
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800f11c:	4699      	mov	r9, r3
 800f11e:	2300      	movs	r3, #0
 800f120:	9303      	str	r3, [sp, #12]
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800f122:	465b      	mov	r3, fp
 800f124:	2232      	movs	r2, #50	; 0x32
 800f126:	5e9a      	ldrsh	r2, [r3, r2]
 800f128:	9b03      	ldr	r3, [sp, #12]
 800f12a:	18d3      	adds	r3, r2, r3
 800f12c:	3b01      	subs	r3, #1
 800f12e:	4598      	cmp	r8, r3
 800f130:	db00      	blt.n	800f134 <_lv_disp_refr_timer+0x440>
 800f132:	e71f      	b.n	800ef74 <_lv_disp_refr_timer+0x280>
    lv_coord_t row_last = 0;
 800f134:	2600      	movs	r6, #0
 800f136:	e756      	b.n	800efe6 <_lv_disp_refr_timer+0x2f2>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800f138:	4653      	mov	r3, sl
 800f13a:	6818      	ldr	r0, [r3, #0]
 800f13c:	f004 fc9a 	bl	8013a74 <lv_disp_get_ver_res>
 800f140:	3801      	subs	r0, #1
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800f142:	b203      	sxth	r3, r0
 800f144:	4698      	mov	r8, r3
 800f146:	e6d2      	b.n	800eeee <_lv_disp_refr_timer+0x1fa>
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 800f148:	2201      	movs	r2, #1
 800f14a:	2002      	movs	r0, #2
 800f14c:	68d9      	ldr	r1, [r3, #12]
 800f14e:	698b      	ldr	r3, [r1, #24]
 800f150:	401a      	ands	r2, r3
 800f152:	7e0b      	ldrb	r3, [r1, #24]
 800f154:	0052      	lsls	r2, r2, #1
 800f156:	4383      	bics	r3, r0
 800f158:	4313      	orrs	r3, r2
 800f15a:	760b      	strb	r3, [r1, #24]
            refr_area(&disp_refr->inv_areas[i]);
 800f15c:	9b05      	ldr	r3, [sp, #20]
            refr_area_part(draw_ctx);
 800f15e:	0038      	movs	r0, r7
            refr_area(&disp_refr->inv_areas[i]);
 800f160:	469c      	mov	ip, r3
 800f162:	4466      	add	r6, ip
            draw_ctx->clip_area = area_p;
 800f164:	60be      	str	r6, [r7, #8]
            refr_area_part(draw_ctx);
 800f166:	f7ff fc0b 	bl	800e980 <refr_area_part>
        return;
 800f16a:	e756      	b.n	800f01a <_lv_disp_refr_timer+0x326>
        disp_refr->inv_p = 0;
 800f16c:	22a8      	movs	r2, #168	; 0xa8
 800f16e:	0052      	lsls	r2, r2, #1
 800f170:	52b3      	strh	r3, [r6, r2]
        return;
 800f172:	e79c      	b.n	800f0ae <_lv_disp_refr_timer+0x3ba>
        disp_refr = lv_disp_get_default();
 800f174:	f004 fc64 	bl	8013a40 <lv_disp_get_default>
 800f178:	4b1f      	ldr	r3, [pc, #124]	; (800f1f8 <_lv_disp_refr_timer+0x504>)
 800f17a:	469a      	mov	sl, r3
 800f17c:	6018      	str	r0, [r3, #0]
 800f17e:	e5d2      	b.n	800ed26 <_lv_disp_refr_timer+0x32>
    px_num = 0;
 800f180:	4b1c      	ldr	r3, [pc, #112]	; (800f1f4 <_lv_disp_refr_timer+0x500>)
 800f182:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
 800f184:	e78f      	b.n	800f0a6 <_lv_disp_refr_timer+0x3b2>
    if(disp_refr->driver->render_start_cb) {
 800f186:	6830      	ldr	r0, [r6, #0]
 800f188:	9306      	str	r3, [sp, #24]
 800f18a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d000      	beq.n	800f192 <_lv_disp_refr_timer+0x49e>
 800f190:	e658      	b.n	800ee44 <_lv_disp_refr_timer+0x150>
    disp_refr->driver->draw_buf->last_area = 0;
 800f192:	68c3      	ldr	r3, [r0, #12]
 800f194:	2001      	movs	r0, #1
 800f196:	7e19      	ldrb	r1, [r3, #24]
 800f198:	4381      	bics	r1, r0
 800f19a:	7619      	strb	r1, [r3, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 800f19c:	7e19      	ldrb	r1, [r3, #24]
 800f19e:	3001      	adds	r0, #1
 800f1a0:	4381      	bics	r1, r0
 800f1a2:	7619      	strb	r1, [r3, #24]
    disp_refr->rendering_in_progress = true;
 800f1a4:	2128      	movs	r1, #40	; 0x28
 800f1a6:	2004      	movs	r0, #4
 800f1a8:	5c73      	ldrb	r3, [r6, r1]
 800f1aa:	4303      	orrs	r3, r0
 800f1ac:	5473      	strb	r3, [r6, r1]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800f1ae:	e661      	b.n	800ee74 <_lv_disp_refr_timer+0x180>
            lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800f1b0:	0030      	movs	r0, r6
 800f1b2:	f004 fc4b 	bl	8013a4c <lv_disp_get_hor_res>
 800f1b6:	4653      	mov	r3, sl
 800f1b8:	0004      	movs	r4, r0
 800f1ba:	6818      	ldr	r0, [r3, #0]
 800f1bc:	f004 fc5a 	bl	8013a74 <lv_disp_get_ver_res>
 800f1c0:	3c01      	subs	r4, #1
 800f1c2:	3801      	subs	r0, #1
 800f1c4:	b223      	sxth	r3, r4
 800f1c6:	b200      	sxth	r0, r0
 800f1c8:	ac0a      	add	r4, sp, #40	; 0x28
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	9000      	str	r0, [sp, #0]
 800f1d0:	0020      	movs	r0, r4
 800f1d2:	f005 f805 	bl	80141e0 <lv_area_set>
            disp_refr->driver->draw_ctx->buf_area = &disp_area;
 800f1d6:	4653      	mov	r3, sl
 800f1d8:	6818      	ldr	r0, [r3, #0]
 800f1da:	6803      	ldr	r3, [r0, #0]
 800f1dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1de:	605c      	str	r4, [r3, #4]
            draw_buf_flush(disp_refr);
 800f1e0:	f7fe fe3a 	bl	800de58 <draw_buf_flush>
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800f1e4:	4653      	mov	r3, sl
 800f1e6:	681e      	ldr	r6, [r3, #0]
 800f1e8:	e73c      	b.n	800f064 <_lv_disp_refr_timer+0x370>
    disp_refr->rendering_in_progress = false;
 800f1ea:	2204      	movs	r2, #4
 800f1ec:	5c73      	ldrb	r3, [r6, r1]
 800f1ee:	4393      	bics	r3, r2
 800f1f0:	5473      	strb	r3, [r6, r1]
    if(disp_refr->inv_p != 0) {
 800f1f2:	e758      	b.n	800f0a6 <_lv_disp_refr_timer+0x3b2>
 800f1f4:	2000046c 	.word	0x2000046c
 800f1f8:	20000468 	.word	0x20000468

0800f1fc <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 800f1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1fe:	46c6      	mov	lr, r8
    if(th->parent) apply_theme(th->parent, obj);
 800f200:	6846      	ldr	r6, [r0, #4]
{
 800f202:	0004      	movs	r4, r0
 800f204:	000d      	movs	r5, r1
 800f206:	b500      	push	{lr}
    if(th->parent) apply_theme(th->parent, obj);
 800f208:	2e00      	cmp	r6, #0
 800f20a:	d01e      	beq.n	800f24a <apply_theme+0x4e>
 800f20c:	6877      	ldr	r7, [r6, #4]
 800f20e:	2f00      	cmp	r7, #0
 800f210:	d015      	beq.n	800f23e <apply_theme+0x42>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	4698      	mov	r8, r3
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00b      	beq.n	800f232 <apply_theme+0x36>
 800f21a:	6858      	ldr	r0, [r3, #4]
 800f21c:	2800      	cmp	r0, #0
 800f21e:	d001      	beq.n	800f224 <apply_theme+0x28>
 800f220:	f7ff ffec 	bl	800f1fc <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 800f224:	4643      	mov	r3, r8
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d002      	beq.n	800f232 <apply_theme+0x36>
 800f22c:	0029      	movs	r1, r5
 800f22e:	4640      	mov	r0, r8
 800f230:	4798      	blx	r3
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d002      	beq.n	800f23e <apply_theme+0x42>
 800f238:	0029      	movs	r1, r5
 800f23a:	0038      	movs	r0, r7
 800f23c:	4798      	blx	r3
 800f23e:	6833      	ldr	r3, [r6, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d002      	beq.n	800f24a <apply_theme+0x4e>
 800f244:	0029      	movs	r1, r5
 800f246:	0030      	movs	r0, r6
 800f248:	4798      	blx	r3
 800f24a:	6823      	ldr	r3, [r4, #0]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d002      	beq.n	800f256 <apply_theme+0x5a>
 800f250:	0029      	movs	r1, r5
 800f252:	0020      	movs	r0, r4
 800f254:	4798      	blx	r3
}
 800f256:	bc80      	pop	{r7}
 800f258:	46b8      	mov	r8, r7
 800f25a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f25c <lv_theme_apply>:
{
 800f25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f25e:	46c6      	mov	lr, r8
 800f260:	0004      	movs	r4, r0
 800f262:	b500      	push	{lr}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 800f264:	2800      	cmp	r0, #0
 800f266:	d036      	beq.n	800f2d6 <lv_theme_apply+0x7a>
 800f268:	f7fe fdb0 	bl	800ddcc <lv_obj_get_disp>
    return lv_disp_get_theme(disp);
 800f26c:	f7f5 fa4e 	bl	800470c <lv_disp_get_theme>
 800f270:	1e05      	subs	r5, r0, #0
    if(th == NULL) return;
 800f272:	d02d      	beq.n	800f2d0 <lv_theme_apply+0x74>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 800f274:	2100      	movs	r1, #0
 800f276:	0020      	movs	r0, r4
 800f278:	4a18      	ldr	r2, [pc, #96]	; (800f2dc <lv_theme_apply+0x80>)
 800f27a:	f7fd fc7f 	bl	800cb7c <lv_obj_remove_style>
    if(th->parent) apply_theme(th->parent, obj);
 800f27e:	686e      	ldr	r6, [r5, #4]
 800f280:	2e00      	cmp	r6, #0
 800f282:	d01f      	beq.n	800f2c4 <lv_theme_apply+0x68>
 800f284:	6877      	ldr	r7, [r6, #4]
 800f286:	2f00      	cmp	r7, #0
 800f288:	d016      	beq.n	800f2b8 <lv_theme_apply+0x5c>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	4698      	mov	r8, r3
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d00c      	beq.n	800f2ac <lv_theme_apply+0x50>
 800f292:	6858      	ldr	r0, [r3, #4]
 800f294:	2800      	cmp	r0, #0
 800f296:	d002      	beq.n	800f29e <lv_theme_apply+0x42>
 800f298:	0021      	movs	r1, r4
 800f29a:	f7ff ffaf 	bl	800f1fc <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 800f29e:	4643      	mov	r3, r8
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d002      	beq.n	800f2ac <lv_theme_apply+0x50>
 800f2a6:	0021      	movs	r1, r4
 800f2a8:	4640      	mov	r0, r8
 800f2aa:	4798      	blx	r3
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d002      	beq.n	800f2b8 <lv_theme_apply+0x5c>
 800f2b2:	0021      	movs	r1, r4
 800f2b4:	0038      	movs	r0, r7
 800f2b6:	4798      	blx	r3
 800f2b8:	6833      	ldr	r3, [r6, #0]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d002      	beq.n	800f2c4 <lv_theme_apply+0x68>
 800f2be:	0021      	movs	r1, r4
 800f2c0:	0030      	movs	r0, r6
 800f2c2:	4798      	blx	r3
 800f2c4:	682b      	ldr	r3, [r5, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d002      	beq.n	800f2d0 <lv_theme_apply+0x74>
 800f2ca:	0021      	movs	r1, r4
 800f2cc:	0028      	movs	r0, r5
 800f2ce:	4798      	blx	r3
}
 800f2d0:	bc80      	pop	{r7}
 800f2d2:	46b8      	mov	r8, r7
 800f2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 800f2d6:	f004 fbb3 	bl	8013a40 <lv_disp_get_default>
 800f2da:	e7c7      	b.n	800f26c <lv_theme_apply+0x10>
 800f2dc:	000fffff 	.word	0x000fffff

0800f2e0 <lv_draw_init>:
 **********************/

void lv_draw_init(void)
{
    /*Nothing to init now*/
}
 800f2e0:	4770      	bx	lr
 800f2e2:	46c0      	nop			; (mov r8, r8)

0800f2e4 <lv_draw_wait_for_finish>:

void lv_draw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800f2e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 800f2e6:	b510      	push	{r4, lr}
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d000      	beq.n	800f2ee <lv_draw_wait_for_finish+0xa>
 800f2ec:	4798      	blx	r3
}
 800f2ee:	bd10      	pop	{r4, pc}

0800f2f0 <lv_draw_img_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_img_dsc_init(lv_draw_img_dsc_t * dsc)
{
 800f2f0:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800f2f2:	2118      	movs	r1, #24
{
 800f2f4:	0004      	movs	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800f2f6:	f006 f945 	bl	8015584 <lv_memset_00>
    dsc->recolor = lv_color_black();
 800f2fa:	2300      	movs	r3, #0
    dsc->opa = LV_OPA_COVER;
    dsc->zoom = LV_IMG_ZOOM_NONE;
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 800f2fc:	2201      	movs	r2, #1
    dsc->recolor = lv_color_black();
 800f2fe:	8123      	strh	r3, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 800f300:	33ff      	adds	r3, #255	; 0xff
 800f302:	72e3      	strb	r3, [r4, #11]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 800f304:	3301      	adds	r3, #1
 800f306:	8063      	strh	r3, [r4, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 800f308:	7d23      	ldrb	r3, [r4, #20]
 800f30a:	4313      	orrs	r3, r2
 800f30c:	7523      	strb	r3, [r4, #20]
}
 800f30e:	bd10      	pop	{r4, pc}

0800f310 <lv_draw_img>:
 * @param mask the image will be drawn only in this area
 * @param src pointer to a lv_color_t array which contains the pixels of the image
 * @param dsc pointer to an initialized `lv_draw_img_dsc_t` variable
 */
void lv_draw_img(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * dsc, const lv_area_t * coords, const void * src)
{
 800f310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f312:	4657      	mov	r7, sl
 800f314:	464e      	mov	r6, r9
 800f316:	4645      	mov	r5, r8
 800f318:	46de      	mov	lr, fp
 800f31a:	b5e0      	push	{r5, r6, r7, lr}
 800f31c:	0004      	movs	r4, r0
 800f31e:	000d      	movs	r5, r1
 800f320:	0016      	movs	r6, r2
 800f322:	001f      	movs	r7, r3
 800f324:	b0a3      	sub	sp, #140	; 0x8c
    if(src == NULL) {
 800f326:	2b00      	cmp	r3, #0
 800f328:	d034      	beq.n	800f394 <lv_draw_img+0x84>
        LV_LOG_WARN("Image draw: src is NULL");
        show_error(draw_ctx, coords, "No\ndata");
        return;
    }

    if(dsc->opa <= LV_OPA_MIN) return;
 800f32a:	7acb      	ldrb	r3, [r1, #11]
 800f32c:	2b02      	cmp	r3, #2
 800f32e:	d907      	bls.n	800f340 <lv_draw_img+0x30>

    lv_res_t res;
    if(draw_ctx->draw_img) {
 800f330:	6983      	ldr	r3, [r0, #24]
 800f332:	4698      	mov	r8, r3
 800f334:	2b00      	cmp	r3, #0
 800f336:	d00a      	beq.n	800f34e <lv_draw_img+0x3e>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 800f338:	003b      	movs	r3, r7
 800f33a:	47c0      	blx	r8
    }
    else {
        res = decode_and_draw(draw_ctx, dsc, coords, src);
    }

    if(res == LV_RES_INV) {
 800f33c:	2800      	cmp	r0, #0
 800f33e:	d00e      	beq.n	800f35e <lv_draw_img+0x4e>
        LV_LOG_WARN("Image draw error");
        show_error(draw_ctx, coords, "No\ndata");
        return;
    }
}
 800f340:	b023      	add	sp, #140	; 0x8c
 800f342:	bcf0      	pop	{r4, r5, r6, r7}
 800f344:	46bb      	mov	fp, r7
 800f346:	46b2      	mov	sl, r6
 800f348:	46a9      	mov	r9, r5
 800f34a:	46a0      	mov	r8, r4
 800f34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
LV_ATTRIBUTE_FAST_MEM static lv_res_t decode_and_draw(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                      const lv_area_t * coords, const void * src)
{
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;

    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 800f34e:	0038      	movs	r0, r7
 800f350:	8909      	ldrh	r1, [r1, #8]
 800f352:	692a      	ldr	r2, [r5, #16]
 800f354:	f000 fdf6 	bl	800ff44 <_lv_img_cache_open>
 800f358:	4682      	mov	sl, r0

    if(cdsc == NULL) return LV_RES_INV;
 800f35a:	2800      	cmp	r0, #0
 800f35c:	d131      	bne.n	800f3c2 <lv_draw_img+0xb2>
 800f35e:	ab14      	add	r3, sp, #80	; 0x50
 800f360:	4699      	mov	r9, r3
 800f362:	af0c      	add	r7, sp, #48	; 0x30


static void show_error(lv_draw_ctx_t * draw_ctx, const lv_area_t * coords, const char * msg)
{
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 800f364:	4648      	mov	r0, r9
 800f366:	f000 fd8f 	bl	800fe88 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 800f36a:	2301      	movs	r3, #1
 800f36c:	464a      	mov	r2, r9
 800f36e:	425b      	negs	r3, r3
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800f370:	4649      	mov	r1, r9
    rect_dsc.bg_color = lv_color_white();
 800f372:	8093      	strh	r3, [r2, #4]
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800f374:	0020      	movs	r0, r4
 800f376:	0032      	movs	r2, r6
 800f378:	f000 fdac 	bl	800fed4 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800f37c:	0038      	movs	r0, r7
 800f37e:	f000 f959 	bl	800f634 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 800f382:	2300      	movs	r3, #0
 800f384:	0032      	movs	r2, r6
 800f386:	9300      	str	r3, [sp, #0]
 800f388:	0039      	movs	r1, r7
 800f38a:	0020      	movs	r0, r4
 800f38c:	4b9b      	ldr	r3, [pc, #620]	; (800f5fc <lv_draw_img+0x2ec>)
 800f38e:	f000 f969 	bl	800f664 <lv_draw_label>
}
 800f392:	e7d5      	b.n	800f340 <lv_draw_img+0x30>
    lv_draw_rect_dsc_init(&rect_dsc);
 800f394:	ad14      	add	r5, sp, #80	; 0x50
 800f396:	0028      	movs	r0, r5
 800f398:	f000 fd76 	bl	800fe88 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 800f39c:	2301      	movs	r3, #1
 800f39e:	425b      	negs	r3, r3
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800f3a0:	0032      	movs	r2, r6
 800f3a2:	0029      	movs	r1, r5
    rect_dsc.bg_color = lv_color_white();
 800f3a4:	80ab      	strh	r3, [r5, #4]
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800f3a6:	0020      	movs	r0, r4
 800f3a8:	f000 fd94 	bl	800fed4 <lv_draw_rect>
    lv_draw_label_dsc_init(&label_dsc);
 800f3ac:	a80c      	add	r0, sp, #48	; 0x30
 800f3ae:	f000 f941 	bl	800f634 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 800f3b2:	0032      	movs	r2, r6
 800f3b4:	0020      	movs	r0, r4
 800f3b6:	4b91      	ldr	r3, [pc, #580]	; (800f5fc <lv_draw_img+0x2ec>)
 800f3b8:	9700      	str	r7, [sp, #0]
 800f3ba:	a90c      	add	r1, sp, #48	; 0x30
 800f3bc:	f000 f952 	bl	800f664 <lv_draw_label>
}
 800f3c0:	e7be      	b.n	800f340 <lv_draw_img+0x30>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 800f3c2:	7d02      	ldrb	r2, [r0, #20]
 800f3c4:	06d3      	lsls	r3, r2, #27
 800f3c6:	0edb      	lsrs	r3, r3, #27
    switch(cf) {
 800f3c8:	2b03      	cmp	r3, #3
 800f3ca:	d034      	beq.n	800f436 <lv_draw_img+0x126>
 800f3cc:	2b06      	cmp	r3, #6
 800f3ce:	d032      	beq.n	800f436 <lv_draw_img+0x126>
    else if(LV_IMG_CF_ALPHA_8BIT == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_ALPHA_8BIT;
 800f3d0:	211f      	movs	r1, #31
 800f3d2:	4011      	ands	r1, r2
 800f3d4:	468b      	mov	fp, r1
 800f3d6:	290e      	cmp	r1, #14
 800f3d8:	d100      	bne.n	800f3dc <lv_draw_img+0xcc>
 800f3da:	e07e      	b.n	800f4da <lv_draw_img+0x1ca>
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 800f3dc:	2914      	cmp	r1, #20
 800f3de:	d00b      	beq.n	800f3f8 <lv_draw_img+0xe8>
    switch(cf) {
 800f3e0:	2b0e      	cmp	r3, #14
 800f3e2:	d900      	bls.n	800f3e6 <lv_draw_img+0xd6>
 800f3e4:	e0f8      	b.n	800f5d8 <lv_draw_img+0x2c8>
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	409a      	lsls	r2, r3
 800f3ea:	0013      	movs	r3, r2
 800f3ec:	4a84      	ldr	r2, [pc, #528]	; (800f600 <lv_draw_img+0x2f0>)
 800f3ee:	4013      	ands	r3, r2
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 800f3f0:	1e5a      	subs	r2, r3, #1
 800f3f2:	4193      	sbcs	r3, r2
 800f3f4:	3304      	adds	r3, #4
 800f3f6:	469b      	mov	fp, r3
    if(cdsc->dec_dsc.error_msg != NULL) {
 800f3f8:	4653      	mov	r3, sl
 800f3fa:	6a1f      	ldr	r7, [r3, #32]
 800f3fc:	2f00      	cmp	r7, #0
 800f3fe:	d01d      	beq.n	800f43c <lv_draw_img+0x12c>
    lv_draw_rect_dsc_init(&rect_dsc);
 800f400:	ad14      	add	r5, sp, #80	; 0x50
 800f402:	0028      	movs	r0, r5
 800f404:	f000 fd40 	bl	800fe88 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 800f408:	2301      	movs	r3, #1
 800f40a:	425b      	negs	r3, r3
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800f40c:	0032      	movs	r2, r6
 800f40e:	0029      	movs	r1, r5
    rect_dsc.bg_color = lv_color_white();
 800f410:	80ab      	strh	r3, [r5, #4]
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800f412:	0020      	movs	r0, r4
 800f414:	f000 fd5e 	bl	800fed4 <lv_draw_rect>
    lv_draw_label_dsc_init(&label_dsc);
 800f418:	a80c      	add	r0, sp, #48	; 0x30
 800f41a:	f000 f90b 	bl	800f634 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 800f41e:	2300      	movs	r3, #0
 800f420:	0032      	movs	r2, r6
 800f422:	9300      	str	r3, [sp, #0]
 800f424:	0020      	movs	r0, r4
 800f426:	003b      	movs	r3, r7
 800f428:	a90c      	add	r1, sp, #48	; 0x30
 800f42a:	f000 f91b 	bl	800f664 <lv_draw_label>

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 800f42e:	4650      	mov	r0, sl
 800f430:	f001 fa0e 	bl	8010850 <lv_img_decoder_close>
    if(res == LV_RES_INV) {
 800f434:	e784      	b.n	800f340 <lv_draw_img+0x30>
    switch(cf) {
 800f436:	2306      	movs	r3, #6
 800f438:	469b      	mov	fp, r3
 800f43a:	e7dd      	b.n	800f3f8 <lv_draw_img+0xe8>
    else if(cdsc->dec_dsc.img_data) {
 800f43c:	699b      	ldr	r3, [r3, #24]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d057      	beq.n	800f4f2 <lv_draw_img+0x1e2>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
 800f442:	2300      	movs	r3, #0
 800f444:	5ef0      	ldrsh	r0, [r6, r3]
 800f446:	af0c      	add	r7, sp, #48	; 0x30
 800f448:	8038      	strh	r0, [r7, #0]
    dest->y1 = src->y1;
 800f44a:	2202      	movs	r2, #2
 800f44c:	5eb3      	ldrsh	r3, [r6, r2]
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800f44e:	6829      	ldr	r1, [r5, #0]
 800f450:	807b      	strh	r3, [r7, #2]
 800f452:	469c      	mov	ip, r3
    dest->x2 = src->x2;
 800f454:	2304      	movs	r3, #4
 800f456:	5ef2      	ldrsh	r2, [r6, r3]
 800f458:	80ba      	strh	r2, [r7, #4]
 800f45a:	4690      	mov	r8, r2
    dest->y2 = src->y2;
 800f45c:	2306      	movs	r3, #6
 800f45e:	5ef2      	ldrsh	r2, [r6, r3]
 800f460:	2380      	movs	r3, #128	; 0x80
 800f462:	80fa      	strh	r2, [r7, #6]
 800f464:	045b      	lsls	r3, r3, #17
 800f466:	4299      	cmp	r1, r3
 800f468:	d01e      	beq.n	800f4a8 <lv_draw_img+0x198>
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 800f46a:	2100      	movs	r1, #0
 800f46c:	5e6b      	ldrsh	r3, [r5, r1]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f46e:	4661      	mov	r1, ip
 800f470:	3201      	adds	r2, #1
 800f472:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f474:	4641      	mov	r1, r8
 800f476:	3101      	adds	r1, #1
 800f478:	1a09      	subs	r1, r1, r0
 800f47a:	1d28      	adds	r0, r5, #4
 800f47c:	9001      	str	r0, [sp, #4]
 800f47e:	8868      	ldrh	r0, [r5, #2]
 800f480:	b212      	sxth	r2, r2
 800f482:	b209      	sxth	r1, r1
 800f484:	9000      	str	r0, [sp, #0]
 800f486:	0038      	movs	r0, r7
 800f488:	f000 fd54 	bl	800ff34 <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 800f48c:	8832      	ldrh	r2, [r6, #0]
 800f48e:	883b      	ldrh	r3, [r7, #0]
            map_area_rot.y1 += coords->y1;
 800f490:	8879      	ldrh	r1, [r7, #2]
            map_area_rot.x1 += coords->x1;
 800f492:	18d3      	adds	r3, r2, r3
 800f494:	803b      	strh	r3, [r7, #0]
            map_area_rot.y1 += coords->y1;
 800f496:	8873      	ldrh	r3, [r6, #2]
 800f498:	1859      	adds	r1, r3, r1
 800f49a:	8079      	strh	r1, [r7, #2]
            map_area_rot.x2 += coords->x1;
 800f49c:	88b9      	ldrh	r1, [r7, #4]
 800f49e:	1852      	adds	r2, r2, r1
 800f4a0:	80ba      	strh	r2, [r7, #4]
            map_area_rot.y2 += coords->y1;
 800f4a2:	88fa      	ldrh	r2, [r7, #6]
 800f4a4:	189b      	adds	r3, r3, r2
 800f4a6:	80fb      	strh	r3, [r7, #6]
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 800f4a8:	003a      	movs	r2, r7
 800f4aa:	68a1      	ldr	r1, [r4, #8]
 800f4ac:	a814      	add	r0, sp, #80	; 0x50
 800f4ae:	f004 fed7 	bl	8014260 <_lv_area_intersect>
        if(union_ok == false) {
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	d0bb      	beq.n	800f42e <lv_draw_img+0x11e>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f4b6:	68a3      	ldr	r3, [r4, #8]
    if(draw_ctx->draw_img_decoded == NULL) return;
 800f4b8:	6967      	ldr	r7, [r4, #20]
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f4ba:	4698      	mov	r8, r3
        draw_ctx->clip_area = &clip_com;
 800f4bc:	ab14      	add	r3, sp, #80	; 0x50
 800f4be:	60a3      	str	r3, [r4, #8]
    if(draw_ctx->draw_img_decoded == NULL) return;
 800f4c0:	2f00      	cmp	r7, #0
 800f4c2:	d007      	beq.n	800f4d4 <lv_draw_img+0x1c4>
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 800f4c4:	465a      	mov	r2, fp
 800f4c6:	4653      	mov	r3, sl
 800f4c8:	0029      	movs	r1, r5
 800f4ca:	699b      	ldr	r3, [r3, #24]
 800f4cc:	0020      	movs	r0, r4
 800f4ce:	9200      	str	r2, [sp, #0]
 800f4d0:	0032      	movs	r2, r6
 800f4d2:	47b8      	blx	r7
        draw_ctx->clip_area = clip_area_ori;
 800f4d4:	4643      	mov	r3, r8
 800f4d6:	60a3      	str	r3, [r4, #8]
 800f4d8:	e7a9      	b.n	800f42e <lv_draw_img+0x11e>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800f4da:	2380      	movs	r3, #128	; 0x80
 800f4dc:	682a      	ldr	r2, [r5, #0]
 800f4de:	045b      	lsls	r3, r3, #17
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d089      	beq.n	800f3f8 <lv_draw_img+0xe8>
            cdsc->dec_dsc.img_data = NULL;
 800f4e4:	4642      	mov	r2, r8
    if(cdsc->dec_dsc.error_msg != NULL) {
 800f4e6:	6a07      	ldr	r7, [r0, #32]
            cdsc->dec_dsc.img_data = NULL;
 800f4e8:	6182      	str	r2, [r0, #24]
    if(cdsc->dec_dsc.error_msg != NULL) {
 800f4ea:	2f00      	cmp	r7, #0
 800f4ec:	d188      	bne.n	800f400 <lv_draw_img+0xf0>
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800f4ee:	2305      	movs	r3, #5
 800f4f0:	469b      	mov	fp, r3
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 800f4f2:	0032      	movs	r2, r6
 800f4f4:	68a1      	ldr	r1, [r4, #8]
 800f4f6:	a80a      	add	r0, sp, #40	; 0x28
 800f4f8:	f004 feb2 	bl	8014260 <_lv_area_intersect>
        if(union_ok == false) {
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	d096      	beq.n	800f42e <lv_draw_img+0x11e>
 800f500:	ab08      	add	r3, sp, #32
 800f502:	899b      	ldrh	r3, [r3, #12]
 800f504:	aa08      	add	r2, sp, #32
 800f506:	8912      	ldrh	r2, [r2, #8]
 800f508:	3301      	adds	r3, #1
 800f50a:	1a9b      	subs	r3, r3, r2
 800f50c:	b21b      	sxth	r3, r3
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800f50e:	469c      	mov	ip, r3
 800f510:	0058      	lsls	r0, r3, #1
 800f512:	4460      	add	r0, ip
 800f514:	9305      	str	r3, [sp, #20]
 800f516:	f005 fd31 	bl	8014f7c <lv_mem_buf_get>
    dest->x1 = src->x1;
 800f51a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f51c:	68a3      	ldr	r3, [r4, #8]
 800f51e:	920c      	str	r2, [sp, #48]	; 0x30
        lv_area_set_height(&line, 1);
 800f520:	af0c      	add	r7, sp, #48	; 0x30
 800f522:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f524:	2101      	movs	r1, #1
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800f526:	9004      	str	r0, [sp, #16]
        lv_area_set_height(&line, 1);
 800f528:	0038      	movs	r0, r7
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f52a:	9308      	str	r3, [sp, #32]
 800f52c:	920d      	str	r2, [sp, #52]	; 0x34
        lv_area_set_height(&line, 1);
 800f52e:	f004 fe61 	bl	80141f4 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 800f532:	aa08      	add	r2, sp, #32
 800f534:	2308      	movs	r3, #8
 800f536:	5ed3      	ldrsh	r3, [r2, r3]
 800f538:	2100      	movs	r1, #0
 800f53a:	5e72      	ldrsh	r2, [r6, r1]
        int32_t y = mask_com.y1 - coords->y1;
 800f53c:	a908      	add	r1, sp, #32
 800f53e:	200a      	movs	r0, #10
 800f540:	5e09      	ldrsh	r1, [r1, r0]
 800f542:	4688      	mov	r8, r1
 800f544:	2002      	movs	r0, #2
 800f546:	5e31      	ldrsh	r1, [r6, r0]
 800f548:	4640      	mov	r0, r8
 800f54a:	1a41      	subs	r1, r0, r1
 800f54c:	9103      	str	r1, [sp, #12]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800f54e:	a908      	add	r1, sp, #32
 800f550:	200e      	movs	r0, #14
 800f552:	5e09      	ldrsh	r1, [r1, r0]
 800f554:	4588      	cmp	r8, r1
 800f556:	dc39      	bgt.n	800f5cc <lv_draw_img+0x2bc>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800f558:	1a9b      	subs	r3, r3, r2
 800f55a:	b21a      	sxth	r2, r3
 800f55c:	9b08      	ldr	r3, [sp, #32]
 800f55e:	a914      	add	r1, sp, #80	; 0x50
 800f560:	9206      	str	r2, [sp, #24]
 800f562:	465a      	mov	r2, fp
 800f564:	9609      	str	r6, [sp, #36]	; 0x24
 800f566:	46ab      	mov	fp, r5
 800f568:	4646      	mov	r6, r8
 800f56a:	000d      	movs	r5, r1
 800f56c:	4699      	mov	r9, r3
 800f56e:	9207      	str	r2, [sp, #28]
            union_ok = _lv_area_intersect(&mask_line, clip_area_ori, &line);
 800f570:	003a      	movs	r2, r7
 800f572:	4649      	mov	r1, r9
 800f574:	0028      	movs	r0, r5
 800f576:	f004 fe73 	bl	8014260 <_lv_area_intersect>
            if(union_ok == false) continue;
 800f57a:	2800      	cmp	r0, #0
 800f57c:	d020      	beq.n	800f5c0 <lv_draw_img+0x2b0>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800f57e:	466b      	mov	r3, sp
 800f580:	220c      	movs	r2, #12
 800f582:	5e9a      	ldrsh	r2, [r3, r2]
 800f584:	9b04      	ldr	r3, [sp, #16]
 800f586:	4650      	mov	r0, sl
 800f588:	9300      	str	r3, [sp, #0]
 800f58a:	9906      	ldr	r1, [sp, #24]
 800f58c:	9b05      	ldr	r3, [sp, #20]
 800f58e:	f001 f94d 	bl	801082c <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 800f592:	2801      	cmp	r0, #1
 800f594:	d123      	bne.n	800f5de <lv_draw_img+0x2ce>
    if(draw_ctx->draw_img_decoded == NULL) return;
 800f596:	6963      	ldr	r3, [r4, #20]
            draw_ctx->clip_area = &mask_line;
 800f598:	60a5      	str	r5, [r4, #8]
    if(draw_ctx->draw_img_decoded == NULL) return;
 800f59a:	4698      	mov	r8, r3
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d006      	beq.n	800f5ae <lv_draw_img+0x29e>
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 800f5a0:	9b07      	ldr	r3, [sp, #28]
 800f5a2:	003a      	movs	r2, r7
 800f5a4:	9300      	str	r3, [sp, #0]
 800f5a6:	4659      	mov	r1, fp
 800f5a8:	0020      	movs	r0, r4
 800f5aa:	9b04      	ldr	r3, [sp, #16]
 800f5ac:	47c0      	blx	r8
            line.y1++;
 800f5ae:	887b      	ldrh	r3, [r7, #2]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	807b      	strh	r3, [r7, #2]
            line.y2++;
 800f5b4:	88fb      	ldrh	r3, [r7, #6]
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	80fb      	strh	r3, [r7, #6]
            y++;
 800f5ba:	9b03      	ldr	r3, [sp, #12]
 800f5bc:	3301      	adds	r3, #1
 800f5be:	9303      	str	r3, [sp, #12]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800f5c0:	ab08      	add	r3, sp, #32
 800f5c2:	220e      	movs	r2, #14
 800f5c4:	5e9b      	ldrsh	r3, [r3, r2]
 800f5c6:	3601      	adds	r6, #1
 800f5c8:	429e      	cmp	r6, r3
 800f5ca:	ddd1      	ble.n	800f570 <lv_draw_img+0x260>
        draw_ctx->clip_area = clip_area_ori;
 800f5cc:	9b08      	ldr	r3, [sp, #32]
        lv_mem_buf_release(buf);
 800f5ce:	9804      	ldr	r0, [sp, #16]
        draw_ctx->clip_area = clip_area_ori;
 800f5d0:	60a3      	str	r3, [r4, #8]
        lv_mem_buf_release(buf);
 800f5d2:	f005 fd77 	bl	80150c4 <lv_mem_buf_release>
 800f5d6:	e72a      	b.n	800f42e <lv_draw_img+0x11e>
    else cf = LV_IMG_CF_TRUE_COLOR;
 800f5d8:	2304      	movs	r3, #4
 800f5da:	469b      	mov	fp, r3
 800f5dc:	e70c      	b.n	800f3f8 <lv_draw_img+0xe8>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800f5de:	4650      	mov	r0, sl
 800f5e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f5e2:	f001 f935 	bl	8010850 <lv_img_decoder_close>
                lv_mem_buf_release(buf);
 800f5e6:	9804      	ldr	r0, [sp, #16]
 800f5e8:	f005 fd6c 	bl	80150c4 <lv_mem_buf_release>
    lv_img_decoder_close(&cache->dec_dsc);
 800f5ec:	4650      	mov	r0, sl
 800f5ee:	f001 f92f 	bl	8010850 <lv_img_decoder_close>
                draw_ctx->clip_area = clip_area_ori;
 800f5f2:	9b08      	ldr	r3, [sp, #32]
                lv_img_decoder_close(&cdsc->dec_dsc);
 800f5f4:	46a9      	mov	r9, r5
                draw_ctx->clip_area = clip_area_ori;
 800f5f6:	60a3      	str	r3, [r4, #8]
    if(res == LV_RES_INV) {
 800f5f8:	e6b4      	b.n	800f364 <lv_draw_img+0x54>
 800f5fa:	46c0      	nop			; (mov r8, r8)
 800f5fc:	0801b860 	.word	0x0801b860
 800f600:	00007fa4 	.word	0x00007fa4

0800f604 <lv_img_cf_get_px_size>:
    switch(cf) {
 800f604:	1f03      	subs	r3, r0, #4
 800f606:	b2db      	uxtb	r3, r3
{
 800f608:	2000      	movs	r0, #0
 800f60a:	2b0a      	cmp	r3, #10
 800f60c:	d801      	bhi.n	800f612 <lv_img_cf_get_px_size+0xe>
 800f60e:	4a01      	ldr	r2, [pc, #4]	; (800f614 <lv_img_cf_get_px_size+0x10>)
 800f610:	5cd0      	ldrb	r0, [r2, r3]
}
 800f612:	4770      	bx	lr
 800f614:	0801b868 	.word	0x0801b868

0800f618 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 800f618:	2800      	cmp	r0, #0
 800f61a:	d009      	beq.n	800f630 <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800f61c:	7803      	ldrb	r3, [r0, #0]
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800f61e:	2001      	movs	r0, #1
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800f620:	001a      	movs	r2, r3
 800f622:	3a20      	subs	r2, #32
 800f624:	2a5f      	cmp	r2, #95	; 0x5f
 800f626:	d800      	bhi.n	800f62a <lv_img_src_get_type+0x12>
}
 800f628:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 800f62a:	09d8      	lsrs	r0, r3, #7
 800f62c:	0040      	lsls	r0, r0, #1
 800f62e:	e7fb      	b.n	800f628 <lv_img_src_get_type+0x10>
    if(src == NULL) return img_src_type;
 800f630:	2003      	movs	r0, #3
 800f632:	e7f9      	b.n	800f628 <lv_img_src_get_type+0x10>

0800f634 <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
 800f634:	b570      	push	{r4, r5, r6, lr}
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800f636:	2120      	movs	r1, #32
{
 800f638:	0004      	movs	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800f63a:	f005 ffa3 	bl	8015584 <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 800f63e:	23ff      	movs	r3, #255	; 0xff
    dsc->color = lv_color_black();
 800f640:	2500      	movs	r5, #0
    dsc->opa = LV_OPA_COVER;
 800f642:	76a3      	strb	r3, [r4, #26]
    dsc->font = LV_FONT_DEFAULT;
 800f644:	4b05      	ldr	r3, [pc, #20]	; (800f65c <lv_draw_label_dsc_init+0x28>)
    dsc->color = lv_color_black();
 800f646:	60e5      	str	r5, [r4, #12]
    dsc->font = LV_FONT_DEFAULT;
 800f648:	6023      	str	r3, [r4, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800f64a:	4b05      	ldr	r3, [pc, #20]	; (800f660 <lv_draw_label_dsc_init+0x2c>)
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
    dsc->sel_color = lv_color_black();
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800f64c:	2005      	movs	r0, #5
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800f64e:	6063      	str	r3, [r4, #4]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 800f650:	60a3      	str	r3, [r4, #8]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800f652:	f005 f913 	bl	801487c <lv_palette_main>
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 800f656:	76e5      	strb	r5, [r4, #27]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800f658:	8220      	strh	r0, [r4, #16]
}
 800f65a:	bd70      	pop	{r4, r5, r6, pc}
 800f65c:	0801bf40 	.word	0x0801bf40
 800f660:	0000ffff 	.word	0x0000ffff

0800f664 <lv_draw_label>:
 * @param hint pointer to a `lv_draw_label_hint_t` variable.
 * It is managed by the draw to speed up the drawing of very long texts (thousands of lines).
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                         const lv_area_t * coords, const char * txt, lv_draw_label_hint_t * hint)
{
 800f664:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f666:	46de      	mov	lr, fp
 800f668:	4657      	mov	r7, sl
 800f66a:	4645      	mov	r5, r8
 800f66c:	464e      	mov	r6, r9
 800f66e:	b5e0      	push	{r5, r6, r7, lr}
 800f670:	b0bd      	sub	sp, #244	; 0xf4
 800f672:	9210      	str	r2, [sp, #64]	; 0x40
 800f674:	930b      	str	r3, [sp, #44]	; 0x2c
 800f676:	469c      	mov	ip, r3
    if(dsc->opa <= LV_OPA_MIN) return;
 800f678:	7e8b      	ldrb	r3, [r1, #26]
{
 800f67a:	4683      	mov	fp, r0
 800f67c:	000f      	movs	r7, r1
 800f67e:	4690      	mov	r8, r2
    if(dsc->opa <= LV_OPA_MIN) return;
 800f680:	2b02      	cmp	r3, #2
 800f682:	d917      	bls.n	800f6b4 <lv_draw_label+0x50>
    if(dsc->font == NULL) {
 800f684:	6809      	ldr	r1, [r1, #0]
 800f686:	9108      	str	r1, [sp, #32]
 800f688:	2900      	cmp	r1, #0
 800f68a:	d013      	beq.n	800f6b4 <lv_draw_label+0x50>
        LV_LOG_WARN("dsc->font == NULL");
        return;
    }

    if(draw_ctx->draw_letter == NULL) {
 800f68c:	69c1      	ldr	r1, [r0, #28]
 800f68e:	2900      	cmp	r1, #0
 800f690:	d010      	beq.n	800f6b4 <lv_draw_label+0x50>
        LV_LOG_WARN("draw->draw_letter == NULL (there is no function to draw letters)");
        return;
    }

    lv_draw_label_dsc_t dsc_mod = *dsc;
 800f692:	0038      	movs	r0, r7
 800f694:	a926      	add	r1, sp, #152	; 0x98
 800f696:	4689      	mov	r9, r1
 800f698:	c870      	ldmia	r0!, {r4, r5, r6}
 800f69a:	c170      	stmia	r1!, {r4, r5, r6}
 800f69c:	0002      	movs	r2, r0
 800f69e:	000b      	movs	r3, r1
 800f6a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 800f6a2:	c313      	stmia	r3!, {r0, r1, r4}
 800f6a4:	ca03      	ldmia	r2!, {r0, r1}
 800f6a6:	c303      	stmia	r3!, {r0, r1}

    const lv_font_t * font = dsc->font;
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt == NULL || txt[0] == '\0')
 800f6a8:	4663      	mov	r3, ip
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d002      	beq.n	800f6b4 <lv_draw_label+0x50>
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d106      	bne.n	800f6c2 <lv_draw_label+0x5e>

        if(pos.y > draw_ctx->clip_area->y2) return;
    }

    LV_ASSERT_MEM_INTEGRITY();
}
 800f6b4:	b03d      	add	sp, #244	; 0xf4
 800f6b6:	bcf0      	pop	{r4, r5, r6, r7}
 800f6b8:	46bb      	mov	fp, r7
 800f6ba:	46b2      	mov	sl, r6
 800f6bc:	46a9      	mov	r9, r5
 800f6be:	46a0      	mov	r8, r4
 800f6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 800f6c2:	465b      	mov	r3, fp
 800f6c4:	4641      	mov	r1, r8
 800f6c6:	689a      	ldr	r2, [r3, #8]
 800f6c8:	a81f      	add	r0, sp, #124	; 0x7c
 800f6ca:	f004 fdc9 	bl	8014260 <_lv_area_intersect>
    if(!clip_ok) return;
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	d0f0      	beq.n	800f6b4 <lv_draw_label+0x50>
    lv_text_align_t align = dsc->align;
 800f6d2:	7f3b      	ldrb	r3, [r7, #28]
 800f6d4:	9315      	str	r3, [sp, #84]	; 0x54
    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 800f6d6:	7f79      	ldrb	r1, [r7, #29]
 800f6d8:	078a      	lsls	r2, r1, #30
 800f6da:	d500      	bpl.n	800f6de <lv_draw_label+0x7a>
 800f6dc:	e220      	b.n	800fb20 <lv_draw_label+0x4bc>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f6de:	4643      	mov	r3, r8
 800f6e0:	2000      	movs	r0, #0
 800f6e2:	5e1a      	ldrsh	r2, [r3, r0]
 800f6e4:	889b      	ldrh	r3, [r3, #4]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	1a9b      	subs	r3, r3, r2
 800f6ea:	b21b      	sxth	r3, r3
 800f6ec:	9311      	str	r3, [sp, #68]	; 0x44
    int32_t line_height_font = lv_font_get_line_height(font);
 800f6ee:	9b08      	ldr	r3, [sp, #32]
    pos.x = coords->x1;
 800f6f0:	ae1b      	add	r6, sp, #108	; 0x6c
    int32_t line_height_font = lv_font_get_line_height(font);
 800f6f2:	2008      	movs	r0, #8
 800f6f4:	5e1b      	ldrsh	r3, [r3, r0]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800f6f6:	9d46      	ldr	r5, [sp, #280]	; 0x118
    int32_t line_height_font = lv_font_get_line_height(font);
 800f6f8:	4698      	mov	r8, r3
    int32_t line_height = line_height_font + dsc->line_space;
 800f6fa:	2012      	movs	r0, #18
 800f6fc:	5e3b      	ldrsh	r3, [r7, r0]
    pos.x = coords->x1;
 800f6fe:	8032      	strh	r2, [r6, #0]
    int32_t line_height = line_height_font + dsc->line_space;
 800f700:	001c      	movs	r4, r3
    pos.y = coords->y1;
 800f702:	9b10      	ldr	r3, [sp, #64]	; 0x40
    int32_t line_height = line_height_font + dsc->line_space;
 800f704:	4444      	add	r4, r8
 800f706:	9412      	str	r4, [sp, #72]	; 0x48
    pos.y = coords->y1;
 800f708:	2002      	movs	r0, #2
 800f70a:	5e18      	ldrsh	r0, [r3, r0]
    x_ofs = dsc->ofs_x;
 800f70c:	2216      	movs	r2, #22
 800f70e:	5ebb      	ldrsh	r3, [r7, r2]
 800f710:	9316      	str	r3, [sp, #88]	; 0x58
    y_ofs = dsc->ofs_y;
 800f712:	2318      	movs	r3, #24
 800f714:	5efa      	ldrsh	r2, [r7, r3]
    pos.y += y_ofs;
 800f716:	1883      	adds	r3, r0, r2
 800f718:	b29b      	uxth	r3, r3
 800f71a:	8073      	strh	r3, [r6, #2]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800f71c:	2d00      	cmp	r5, #0
 800f71e:	d100      	bne.n	800f722 <lv_draw_label+0xbe>
 800f720:	e214      	b.n	800fb4c <lv_draw_label+0x4e8>
 800f722:	2a00      	cmp	r2, #0
 800f724:	d100      	bne.n	800f728 <lv_draw_label+0xc4>
 800f726:	e129      	b.n	800f97c <lv_draw_label+0x318>
    uint32_t line_start     = 0;
 800f728:	2300      	movs	r3, #0
 800f72a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f72c:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800f72e:	2314      	movs	r3, #20
 800f730:	5efa      	ldrsh	r2, [r7, r3]
 800f732:	2300      	movs	r3, #0
 800f734:	9101      	str	r1, [sp, #4]
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	9908      	ldr	r1, [sp, #32]
 800f73a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f73c:	f007 f818 	bl	8016770 <_lv_txt_get_next_line>
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800f740:	2202      	movs	r2, #2
 800f742:	5eb3      	ldrsh	r3, [r6, r2]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800f744:	2200      	movs	r2, #0
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800f746:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f748:	0004      	movs	r4, r0
 800f74a:	468c      	mov	ip, r1
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800f74c:	4692      	mov	sl, r2
 800f74e:	4642      	mov	r2, r8
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800f750:	4dd4      	ldr	r5, [pc, #848]	; (800faa4 <lv_draw_label+0x440>)
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800f752:	4464      	add	r4, ip
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800f754:	9205      	str	r2, [sp, #20]
 800f756:	e02d      	b.n	800f7b4 <lv_draw_label+0x150>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800f758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f75a:	9908      	ldr	r1, [sp, #32]
 800f75c:	4698      	mov	r8, r3
 800f75e:	2314      	movs	r3, #20
 800f760:	5efa      	ldrsh	r2, [r7, r3]
 800f762:	7f7b      	ldrb	r3, [r7, #29]
 800f764:	44a0      	add	r8, r4
 800f766:	9301      	str	r3, [sp, #4]
 800f768:	4653      	mov	r3, sl
 800f76a:	4640      	mov	r0, r8
 800f76c:	9300      	str	r3, [sp, #0]
 800f76e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f770:	f006 fffe 	bl	8016770 <_lv_txt_get_next_line>
        pos.y += line_height;
 800f774:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f776:	8873      	ldrh	r3, [r6, #2]
 800f778:	4694      	mov	ip, r2
 800f77a:	4463      	add	r3, ip
 800f77c:	b21b      	sxth	r3, r3
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800f77e:	1820      	adds	r0, r4, r0
        pos.y += line_height;
 800f780:	8073      	strh	r3, [r6, #2]
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800f782:	42ab      	cmp	r3, r5
 800f784:	db0f      	blt.n	800f7a6 <lv_draw_label+0x142>
 800f786:	9a46      	ldr	r2, [sp, #280]	; 0x118
 800f788:	6812      	ldr	r2, [r2, #0]
 800f78a:	9206      	str	r2, [sp, #24]
 800f78c:	2a00      	cmp	r2, #0
 800f78e:	da0a      	bge.n	800f7a6 <lv_draw_label+0x142>
            hint->line_start = line_start;
 800f790:	9a46      	ldr	r2, [sp, #280]	; 0x118
 800f792:	6014      	str	r4, [r2, #0]
            hint->y          = pos.y - coords->y1;
 800f794:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f796:	2102      	movs	r1, #2
 800f798:	5e51      	ldrsh	r1, [r2, r1]
 800f79a:	9a46      	ldr	r2, [sp, #280]	; 0x118
 800f79c:	468c      	mov	ip, r1
 800f79e:	1a59      	subs	r1, r3, r1
 800f7a0:	6051      	str	r1, [r2, #4]
            hint->coord_y    = coords->y1;
 800f7a2:	4661      	mov	r1, ip
 800f7a4:	6091      	str	r1, [r2, #8]
        if(txt[line_start] == '\0') return;
 800f7a6:	4642      	mov	r2, r8
 800f7a8:	7812      	ldrb	r2, [r2, #0]
 800f7aa:	0021      	movs	r1, r4
 800f7ac:	2a00      	cmp	r2, #0
 800f7ae:	d100      	bne.n	800f7b2 <lv_draw_label+0x14e>
 800f7b0:	e780      	b.n	800f6b4 <lv_draw_label+0x50>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800f7b2:	0004      	movs	r4, r0
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800f7b4:	9a05      	ldr	r2, [sp, #20]
 800f7b6:	4694      	mov	ip, r2
 800f7b8:	465a      	mov	r2, fp
 800f7ba:	6892      	ldr	r2, [r2, #8]
 800f7bc:	4463      	add	r3, ip
 800f7be:	2002      	movs	r0, #2
 800f7c0:	5e12      	ldrsh	r2, [r2, r0]
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	dbc8      	blt.n	800f758 <lv_draw_label+0xf4>
 800f7c6:	910e      	str	r1, [sp, #56]	; 0x38
 800f7c8:	940f      	str	r4, [sp, #60]	; 0x3c
    if(align == LV_TEXT_ALIGN_CENTER) {
 800f7ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f7cc:	2b02      	cmp	r3, #2
 800f7ce:	d100      	bne.n	800f7d2 <lv_draw_label+0x16e>
 800f7d0:	e285      	b.n	800fcde <lv_draw_label+0x67a>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 800f7d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7d6:	4694      	mov	ip, r2
 800f7d8:	4463      	add	r3, ip
 800f7da:	4698      	mov	r8, r3
 800f7dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f7de:	2b03      	cmp	r3, #3
 800f7e0:	d100      	bne.n	800f7e4 <lv_draw_label+0x180>
 800f7e2:	e2a6      	b.n	800fd32 <lv_draw_label+0x6ce>
    uint32_t sel_start = dsc->sel_start;
 800f7e4:	687b      	ldr	r3, [r7, #4]
    uint32_t sel_end = dsc->sel_end;
 800f7e6:	68ba      	ldr	r2, [r7, #8]
    uint32_t sel_start = dsc->sel_start;
 800f7e8:	9306      	str	r3, [sp, #24]
    uint32_t sel_end = dsc->sel_end;
 800f7ea:	920a      	str	r2, [sp, #40]	; 0x28
    if(sel_start > sel_end) {
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d901      	bls.n	800f7f4 <lv_draw_label+0x190>
 800f7f0:	9206      	str	r2, [sp, #24]
 800f7f2:	930a      	str	r3, [sp, #40]	; 0x28
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 800f7f4:	7fbb      	ldrb	r3, [r7, #30]
 800f7f6:	079b      	lsls	r3, r3, #30
 800f7f8:	d000      	beq.n	800f7fc <lv_draw_label+0x198>
 800f7fa:	e1df      	b.n	800fbbc <lv_draw_label+0x558>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800f7fc:	a82e      	add	r0, sp, #184	; 0xb8
 800f7fe:	f000 fb43 	bl	800fe88 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800f802:	2164      	movs	r1, #100	; 0x64
 800f804:	8a3b      	ldrh	r3, [r7, #16]
 800f806:	aa16      	add	r2, sp, #88	; 0x58
 800f808:	1852      	adds	r2, r2, r1
 800f80a:	8013      	strh	r3, [r2, #0]
    int32_t pos_x_start = pos.x;
 800f80c:	2200      	movs	r2, #0
 800f80e:	5eb3      	ldrsh	r3, [r6, r2]
 800f810:	465c      	mov	r4, fp
 800f812:	9318      	str	r3, [sp, #96]	; 0x60
    while(txt[line_start] != '\0') {
 800f814:	2300      	movs	r3, #0
 800f816:	9305      	str	r3, [sp, #20]
 800f818:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t par_start = 0;
 800f81a:	9317      	str	r3, [sp, #92]	; 0x5c
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800f81c:	4ba2      	ldr	r3, [pc, #648]	; (800faa8 <lv_draw_label+0x444>)
 800f81e:	469a      	mov	sl, r3
 800f820:	4643      	mov	r3, r8
 800f822:	9309      	str	r3, [sp, #36]	; 0x24
    while(txt[line_start] != '\0') {
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d100      	bne.n	800f82c <lv_draw_label+0x1c8>
 800f82a:	e743      	b.n	800f6b4 <lv_draw_label+0x50>
        pos.x += x_ofs;
 800f82c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f82e:	8833      	ldrh	r3, [r6, #0]
 800f830:	4694      	mov	ip, r2
 800f832:	4463      	add	r3, ip
 800f834:	8033      	strh	r3, [r6, #0]
        i         = 0;
 800f836:	2300      	movs	r3, #0
        while(i < line_end - line_start) {
 800f838:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        i         = 0;
 800f83a:	931c      	str	r3, [sp, #112]	; 0x70
        while(i < line_end - line_start) {
 800f83c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f83e:	1a99      	subs	r1, r3, r2
 800f840:	910c      	str	r1, [sp, #48]	; 0x30
 800f842:	4293      	cmp	r3, r2
 800f844:	d100      	bne.n	800f848 <lv_draw_label+0x1e4>
 800f846:	e165      	b.n	800fb14 <lv_draw_label+0x4b0>
        pos.y += line_height;
 800f848:	466b      	mov	r3, sp
 800f84a:	2248      	movs	r2, #72	; 0x48
 800f84c:	189b      	adds	r3, r3, r2
 800f84e:	881b      	ldrh	r3, [r3, #0]
        while(i < line_end - line_start) {
 800f850:	2100      	movs	r1, #0
        pos.y += line_height;
 800f852:	9314      	str	r3, [sp, #80]	; 0x50
        cmd_state = CMD_STATE_WAIT;
 800f854:	2300      	movs	r3, #0
 800f856:	9307      	str	r3, [sp, #28]
 800f858:	ab1e      	add	r3, sp, #120	; 0x78
 800f85a:	4698      	mov	r8, r3
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800f85c:	4b93      	ldr	r3, [pc, #588]	; (800faac <lv_draw_label+0x448>)
 800f85e:	469b      	mov	fp, r3
 800f860:	4643      	mov	r3, r8
 800f862:	46a0      	mov	r8, r4
 800f864:	930d      	str	r3, [sp, #52]	; 0x34
 800f866:	9b06      	ldr	r3, [sp, #24]
 800f868:	455b      	cmp	r3, fp
 800f86a:	d100      	bne.n	800f86e <lv_draw_label+0x20a>
 800f86c:	e09d      	b.n	800f9aa <lv_draw_label+0x346>
 800f86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f870:	455b      	cmp	r3, fp
 800f872:	d100      	bne.n	800f876 <lv_draw_label+0x212>
 800f874:	e099      	b.n	800f9aa <lv_draw_label+0x346>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800f876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f878:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f87a:	469c      	mov	ip, r3
 800f87c:	4653      	mov	r3, sl
 800f87e:	4461      	add	r1, ip
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4798      	blx	r3
 800f884:	0004      	movs	r4, r0
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 800f886:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f88a:	ab1c      	add	r3, sp, #112	; 0x70
 800f88c:	a91d      	add	r1, sp, #116	; 0x74
 800f88e:	f007 f9c3 	bl	8016c18 <_lv_txt_encoded_letter_next_2>
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 800f892:	2201      	movs	r2, #1
 800f894:	0010      	movs	r0, r2
 800f896:	7f7b      	ldrb	r3, [r7, #29]
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800f898:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f89a:	4018      	ands	r0, r3
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 800f89c:	421a      	tst	r2, r3
 800f89e:	d006      	beq.n	800f8ae <lv_draw_label+0x24a>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800f8a0:	9b07      	ldr	r3, [sp, #28]
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800f8a2:	2923      	cmp	r1, #35	; 0x23
 800f8a4:	d100      	bne.n	800f8a8 <lv_draw_label+0x244>
 800f8a6:	e083      	b.n	800f9b0 <lv_draw_label+0x34c>
                if(cmd_state == CMD_STATE_PAR) {
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	d100      	bne.n	800f8ae <lv_draw_label+0x24a>
 800f8ac:	e08b      	b.n	800f9c6 <lv_draw_label+0x362>
            color = dsc->color;
 800f8ae:	89bb      	ldrh	r3, [r7, #12]
 800f8b0:	9305      	str	r3, [sp, #20]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800f8b2:	9b07      	ldr	r3, [sp, #28]
 800f8b4:	2b02      	cmp	r3, #2
 800f8b6:	d101      	bne.n	800f8bc <lv_draw_label+0x258>
 800f8b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f8ba:	9305      	str	r3, [sp, #20]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800f8bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f8be:	9808      	ldr	r0, [sp, #32]
 800f8c0:	f003 fd70 	bl	80133a4 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800f8c4:	9b06      	ldr	r3, [sp, #24]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800f8c6:	0005      	movs	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800f8c8:	455b      	cmp	r3, fp
 800f8ca:	d007      	beq.n	800f8dc <lv_draw_label+0x278>
 800f8cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8ce:	455a      	cmp	r2, fp
 800f8d0:	d004      	beq.n	800f8dc <lv_draw_label+0x278>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800f8d2:	42a3      	cmp	r3, r4
 800f8d4:	d802      	bhi.n	800f8dc <lv_draw_label+0x278>
 800f8d6:	42a2      	cmp	r2, r4
 800f8d8:	d900      	bls.n	800f8dc <lv_draw_label+0x278>
 800f8da:	e081      	b.n	800f9e0 <lv_draw_label+0x37c>
            dsc_mod.color = color;
 800f8dc:	464b      	mov	r3, r9

void lv_draw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                    uint32_t letter)
{
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 800f8de:	4640      	mov	r0, r8
            dsc_mod.color = color;
 800f8e0:	9a05      	ldr	r2, [sp, #20]
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 800f8e2:	4649      	mov	r1, r9
            dsc_mod.color = color;
 800f8e4:	819a      	strh	r2, [r3, #12]
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 800f8e6:	69c4      	ldr	r4, [r0, #28]
 800f8e8:	0032      	movs	r2, r6
 800f8ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f8ec:	47a0      	blx	r4
            if(letter_w > 0) {
 800f8ee:	2d00      	cmp	r5, #0
 800f8f0:	d004      	beq.n	800f8fc <lv_draw_label+0x298>
                pos.x += letter_w + dsc->letter_space;
 800f8f2:	8830      	ldrh	r0, [r6, #0]
 800f8f4:	8abb      	ldrh	r3, [r7, #20]
 800f8f6:	18c0      	adds	r0, r0, r3
 800f8f8:	182d      	adds	r5, r5, r0
 800f8fa:	8035      	strh	r5, [r6, #0]
        while(i < line_end - line_start) {
 800f8fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f8fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f900:	428b      	cmp	r3, r1
 800f902:	d8b0      	bhi.n	800f866 <lv_draw_label+0x202>
 800f904:	4644      	mov	r4, r8
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800f906:	7fbb      	ldrb	r3, [r7, #30]
 800f908:	075b      	lsls	r3, r3, #29
 800f90a:	0f5a      	lsrs	r2, r3, #29
 800f90c:	005b      	lsls	r3, r3, #1
 800f90e:	d500      	bpl.n	800f912 <lv_draw_label+0x2ae>
 800f910:	e0a2      	b.n	800fa58 <lv_draw_label+0x3f4>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800f912:	07d3      	lsls	r3, r2, #31
 800f914:	d500      	bpl.n	800f918 <lv_draw_label+0x2b4>
 800f916:	e081      	b.n	800fa1c <lv_draw_label+0x3b8>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800f918:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f91a:	2114      	movs	r1, #20
 800f91c:	5e7a      	ldrsh	r2, [r7, r1]
 800f91e:	4698      	mov	r8, r3
 800f920:	2100      	movs	r1, #0
 800f922:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800f924:	7f7b      	ldrb	r3, [r7, #29]
 800f926:	4445      	add	r5, r8
 800f928:	9301      	str	r3, [sp, #4]
 800f92a:	9100      	str	r1, [sp, #0]
 800f92c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f92e:	9908      	ldr	r1, [sp, #32]
 800f930:	0028      	movs	r0, r5
 800f932:	f006 ff1d 	bl	8016770 <_lv_txt_get_next_line>
 800f936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f938:	0001      	movs	r1, r0
 800f93a:	4698      	mov	r8, r3
        pos.x = coords->x1;
 800f93c:	9b10      	ldr	r3, [sp, #64]	; 0x40
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800f93e:	4480      	add	r8, r0
        pos.x = coords->x1;
 800f940:	881b      	ldrh	r3, [r3, #0]
 800f942:	8033      	strh	r3, [r6, #0]
        if(align == LV_TEXT_ALIGN_CENTER) {
 800f944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f946:	2b02      	cmp	r3, #2
 800f948:	d100      	bne.n	800f94c <lv_draw_label+0x2e8>
 800f94a:	e0b6      	b.n	800faba <lv_draw_label+0x456>
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 800f94c:	2b03      	cmp	r3, #3
 800f94e:	d100      	bne.n	800f952 <lv_draw_label+0x2ee>
 800f950:	e0c9      	b.n	800fae6 <lv_draw_label+0x482>
        pos.y += line_height;
 800f952:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f954:	8873      	ldrh	r3, [r6, #2]
 800f956:	4694      	mov	ip, r2
        line_start = line_end;
 800f958:	990f      	ldr	r1, [sp, #60]	; 0x3c
        pos.y += line_height;
 800f95a:	4463      	add	r3, ip
        if(pos.y > draw_ctx->clip_area->y2) return;
 800f95c:	68a2      	ldr	r2, [r4, #8]
        pos.y += line_height;
 800f95e:	b21b      	sxth	r3, r3
 800f960:	8073      	strh	r3, [r6, #2]
        line_start = line_end;
 800f962:	910e      	str	r1, [sp, #56]	; 0x38
        if(pos.y > draw_ctx->clip_area->y2) return;
 800f964:	2006      	movs	r0, #6
 800f966:	5e12      	ldrsh	r2, [r2, r0]
 800f968:	429a      	cmp	r2, r3
 800f96a:	da00      	bge.n	800f96e <lv_draw_label+0x30a>
 800f96c:	e6a2      	b.n	800f6b4 <lv_draw_label+0x50>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800f96e:	4643      	mov	r3, r8
 800f970:	468c      	mov	ip, r1
 800f972:	930f      	str	r3, [sp, #60]	; 0x3c
 800f974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f976:	4463      	add	r3, ip
 800f978:	9309      	str	r3, [sp, #36]	; 0x24
 800f97a:	e753      	b.n	800f824 <lv_draw_label+0x1c0>
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800f97c:	2800      	cmp	r0, #0
 800f97e:	db00      	blt.n	800f982 <lv_draw_label+0x31e>
 800f980:	e6d2      	b.n	800f728 <lv_draw_label+0xc4>
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800f982:	68aa      	ldr	r2, [r5, #8]
 800f984:	1a10      	subs	r0, r2, r0
 800f986:	9205      	str	r2, [sp, #20]
 800f988:	17c2      	asrs	r2, r0, #31
 800f98a:	1880      	adds	r0, r0, r2
 800f98c:	4050      	eors	r0, r2
 800f98e:	2280      	movs	r2, #128	; 0x80
 800f990:	0092      	lsls	r2, r2, #2
 800f992:	1b12      	subs	r2, r2, r4
 800f994:	0052      	lsls	r2, r2, #1
 800f996:	4290      	cmp	r0, r2
 800f998:	dc00      	bgt.n	800f99c <lv_draw_label+0x338>
 800f99a:	e1bc      	b.n	800fd16 <lv_draw_label+0x6b2>
            hint->line_start = -1;
 800f99c:	2301      	movs	r3, #1
 800f99e:	425b      	negs	r3, r3
 800f9a0:	602b      	str	r3, [r5, #0]
    uint32_t line_start     = 0;
 800f9a2:	2300      	movs	r3, #0
            hint->line_start = -1;
 800f9a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    uint32_t line_start     = 0;
 800f9a6:	930e      	str	r3, [sp, #56]	; 0x38
 800f9a8:	e6c1      	b.n	800f72e <lv_draw_label+0xca>
            uint32_t logical_char_pos = 0;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	001c      	movs	r4, r3
 800f9ae:	e76a      	b.n	800f886 <lv_draw_label+0x222>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d02e      	beq.n	800fa12 <lv_draw_label+0x3ae>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 800f9b4:	2b01      	cmp	r3, #1
 800f9b6:	d100      	bne.n	800f9ba <lv_draw_label+0x356>
 800f9b8:	e07a      	b.n	800fab0 <lv_draw_label+0x44c>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 800f9ba:	2b02      	cmp	r3, #2
 800f9bc:	d100      	bne.n	800f9c0 <lv_draw_label+0x35c>
 800f9be:	e0a5      	b.n	800fb0c <lv_draw_label+0x4a8>
            color = dsc->color;
 800f9c0:	89bb      	ldrh	r3, [r7, #12]
 800f9c2:	9305      	str	r3, [sp, #20]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800f9c4:	e77a      	b.n	800f8bc <lv_draw_label+0x258>
                    if(letter == ' ') {
 800f9c6:	2920      	cmp	r1, #32
 800f9c8:	d198      	bne.n	800f8fc <lv_draw_label+0x298>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800f9ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f9cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f9ce:	1acb      	subs	r3, r1, r3
 800f9d0:	2b07      	cmp	r3, #7
 800f9d2:	d100      	bne.n	800f9d6 <lv_draw_label+0x372>
 800f9d4:	e10a      	b.n	800fbec <lv_draw_label+0x588>
                            recolor.full = dsc->color.full;
 800f9d6:	89bb      	ldrh	r3, [r7, #12]
 800f9d8:	9313      	str	r3, [sp, #76]	; 0x4c
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800f9da:	2302      	movs	r3, #2
 800f9dc:	9307      	str	r3, [sp, #28]
 800f9de:	e78e      	b.n	800f8fe <lv_draw_label+0x29a>
                    sel_coords.x1 = pos.x;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	5ef1      	ldrsh	r1, [r6, r3]
                    sel_coords.y1 = pos.y;
 800f9e4:	2202      	movs	r2, #2
 800f9e6:	5eb3      	ldrsh	r3, [r6, r2]
                    sel_coords.x1 = pos.x;
 800f9e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800f9ea:	3901      	subs	r1, #1
                    sel_coords.x1 = pos.x;
 800f9ec:	9221      	str	r2, [sp, #132]	; 0x84
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800f9ee:	8aba      	ldrh	r2, [r7, #20]
                    sel_coords.y2 = pos.y + line_height - 1;
 800f9f0:	3b01      	subs	r3, #1
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800f9f2:	1852      	adds	r2, r2, r1
 800f9f4:	1882      	adds	r2, r0, r2
 800f9f6:	a916      	add	r1, sp, #88	; 0x58
 800f9f8:	860a      	strh	r2, [r1, #48]	; 0x30
                    sel_coords.y2 = pos.y + line_height - 1;
 800f9fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 800f9fc:	4640      	mov	r0, r8
                    sel_coords.y2 = pos.y + line_height - 1;
 800f9fe:	4694      	mov	ip, r2
 800fa00:	4463      	add	r3, ip
 800fa02:	864b      	strh	r3, [r1, #50]	; 0x32
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 800fa04:	aa21      	add	r2, sp, #132	; 0x84
 800fa06:	a92e      	add	r1, sp, #184	; 0xb8
 800fa08:	f000 fa64 	bl	800fed4 <lv_draw_rect>
                    color = dsc->sel_color;
 800fa0c:	89fb      	ldrh	r3, [r7, #14]
 800fa0e:	9305      	str	r3, [sp, #20]
 800fa10:	e764      	b.n	800f8dc <lv_draw_label+0x278>
                        par_start = i;
 800fa12:	9b1c      	ldr	r3, [sp, #112]	; 0x70
                        cmd_state = CMD_STATE_PAR;
 800fa14:	9007      	str	r0, [sp, #28]
                        continue;
 800fa16:	0019      	movs	r1, r3
                        par_start = i;
 800fa18:	9317      	str	r3, [sp, #92]	; 0x5c
                        continue;
 800fa1a:	e770      	b.n	800f8fe <lv_draw_label+0x29a>
            p1.x = pos_x_start;
 800fa1c:	ab1e      	add	r3, sp, #120	; 0x78
 800fa1e:	4698      	mov	r8, r3
 800fa20:	9a18      	ldr	r2, [sp, #96]	; 0x60
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800fa22:	0020      	movs	r0, r4
            p1.x = pos_x_start;
 800fa24:	801a      	strh	r2, [r3, #0]
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800fa26:	683a      	ldr	r2, [r7, #0]
 800fa28:	8873      	ldrh	r3, [r6, #2]
 800fa2a:	8911      	ldrh	r1, [r2, #8]
 800fa2c:	8952      	ldrh	r2, [r2, #10]
 800fa2e:	185b      	adds	r3, r3, r1
 800fa30:	1a9b      	subs	r3, r3, r2
 800fa32:	9a08      	ldr	r2, [sp, #32]
            p2.x = pos.x;
 800fa34:	a916      	add	r1, sp, #88	; 0x58
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800fa36:	7b52      	ldrb	r2, [r2, #13]
 800fa38:	b252      	sxtb	r2, r2
 800fa3a:	1a9b      	subs	r3, r3, r2
 800fa3c:	4642      	mov	r2, r8
 800fa3e:	b21b      	sxth	r3, r3
 800fa40:	8053      	strh	r3, [r2, #2]
            p2.x = pos.x;
 800fa42:	8832      	ldrh	r2, [r6, #0]
            p2.y = p1.y;
 800fa44:	85cb      	strh	r3, [r1, #46]	; 0x2e
            line_dsc.color = color;
 800fa46:	9b05      	ldr	r3, [sp, #20]
            p2.x = pos.x;
 800fa48:	858a      	strh	r2, [r1, #44]	; 0x2c
            line_dsc.color = color;
 800fa4a:	a923      	add	r1, sp, #140	; 0x8c
 800fa4c:	800b      	strh	r3, [r1, #0]
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800fa4e:	4642      	mov	r2, r8
 800fa50:	ab21      	add	r3, sp, #132	; 0x84
 800fa52:	f000 fa0d 	bl	800fe70 <lv_draw_line>
 800fa56:	e75f      	b.n	800f918 <lv_draw_label+0x2b4>
            p1.x = pos_x_start;
 800fa58:	ab1e      	add	r3, sp, #120	; 0x78
 800fa5a:	4698      	mov	r8, r3
 800fa5c:	9a18      	ldr	r2, [sp, #96]	; 0x60
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800fa5e:	0020      	movs	r0, r4
            p1.x = pos_x_start;
 800fa60:	801a      	strh	r2, [r3, #0]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800fa62:	ab16      	add	r3, sp, #88	; 0x58
 800fa64:	2236      	movs	r2, #54	; 0x36
 800fa66:	5e9a      	ldrsh	r2, [r3, r2]
 800fa68:	0fd3      	lsrs	r3, r2, #31
 800fa6a:	189b      	adds	r3, r3, r2
 800fa6c:	8872      	ldrh	r2, [r6, #2]
 800fa6e:	105b      	asrs	r3, r3, #1
 800fa70:	189b      	adds	r3, r3, r2
 800fa72:	683a      	ldr	r2, [r7, #0]
 800fa74:	2108      	movs	r1, #8
 800fa76:	5e51      	ldrsh	r1, [r2, r1]
 800fa78:	0fca      	lsrs	r2, r1, #31
 800fa7a:	1852      	adds	r2, r2, r1
 800fa7c:	1052      	asrs	r2, r2, #1
 800fa7e:	189b      	adds	r3, r3, r2
 800fa80:	4642      	mov	r2, r8
 800fa82:	b21b      	sxth	r3, r3
 800fa84:	8053      	strh	r3, [r2, #2]
            p2.x = pos.x;
 800fa86:	8832      	ldrh	r2, [r6, #0]
 800fa88:	a916      	add	r1, sp, #88	; 0x58
 800fa8a:	858a      	strh	r2, [r1, #44]	; 0x2c
            line_dsc.color = color;
 800fa8c:	9a05      	ldr	r2, [sp, #20]
            p2.y = p1.y;
 800fa8e:	85cb      	strh	r3, [r1, #46]	; 0x2e
            line_dsc.color = color;
 800fa90:	868a      	strh	r2, [r1, #52]	; 0x34
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800fa92:	ab21      	add	r3, sp, #132	; 0x84
 800fa94:	4642      	mov	r2, r8
 800fa96:	a923      	add	r1, sp, #140	; 0x8c
 800fa98:	f000 f9ea 	bl	800fe70 <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800fa9c:	7fba      	ldrb	r2, [r7, #30]
 800fa9e:	0752      	lsls	r2, r2, #29
 800faa0:	0f52      	lsrs	r2, r2, #29
 800faa2:	e736      	b.n	800f912 <lv_draw_label+0x2ae>
 800faa4:	fffffc00 	.word	0xfffffc00
 800faa8:	20000080 	.word	0x20000080
 800faac:	0000ffff 	.word	0x0000ffff
            color = dsc->color;
 800fab0:	89bb      	ldrh	r3, [r7, #12]
 800fab2:	9305      	str	r3, [sp, #20]
                        cmd_state = CMD_STATE_WAIT;
 800fab4:	2300      	movs	r3, #0
 800fab6:	9307      	str	r3, [sp, #28]
 800fab8:	e700      	b.n	800f8bc <lv_draw_label+0x258>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800faba:	2214      	movs	r2, #20
 800fabc:	5ebb      	ldrsh	r3, [r7, r2]
 800fabe:	7f7a      	ldrb	r2, [r7, #29]
 800fac0:	0028      	movs	r0, r5
 800fac2:	9200      	str	r2, [sp, #0]
 800fac4:	9a08      	ldr	r2, [sp, #32]
 800fac6:	f007 f873 	bl	8016bb0 <lv_txt_get_width>
 800faca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800facc:	8893      	ldrh	r3, [r2, #4]
 800face:	8812      	ldrh	r2, [r2, #0]
 800fad0:	3301      	adds	r3, #1
 800fad2:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800fad4:	b21b      	sxth	r3, r3
 800fad6:	1a18      	subs	r0, r3, r0
 800fad8:	0fc3      	lsrs	r3, r0, #31
 800fada:	1818      	adds	r0, r3, r0
 800fadc:	8833      	ldrh	r3, [r6, #0]
 800fade:	1040      	asrs	r0, r0, #1
 800fae0:	18c0      	adds	r0, r0, r3
 800fae2:	8030      	strh	r0, [r6, #0]
 800fae4:	e735      	b.n	800f952 <lv_draw_label+0x2ee>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800fae6:	2214      	movs	r2, #20
 800fae8:	5ebb      	ldrsh	r3, [r7, r2]
 800faea:	7f7a      	ldrb	r2, [r7, #29]
 800faec:	0028      	movs	r0, r5
 800faee:	9200      	str	r2, [sp, #0]
 800faf0:	9a08      	ldr	r2, [sp, #32]
 800faf2:	f007 f85d 	bl	8016bb0 <lv_txt_get_width>
 800faf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800faf8:	8893      	ldrh	r3, [r2, #4]
 800fafa:	8812      	ldrh	r2, [r2, #0]
 800fafc:	3301      	adds	r3, #1
 800fafe:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 800fb00:	b21b      	sxth	r3, r3
 800fb02:	1a1b      	subs	r3, r3, r0
 800fb04:	8830      	ldrh	r0, [r6, #0]
 800fb06:	181b      	adds	r3, r3, r0
 800fb08:	8033      	strh	r3, [r6, #0]
 800fb0a:	e722      	b.n	800f952 <lv_draw_label+0x2ee>
                        cmd_state = CMD_STATE_WAIT;
 800fb0c:	2300      	movs	r3, #0
                        par_start = i;
 800fb0e:	991c      	ldr	r1, [sp, #112]	; 0x70
                        cmd_state = CMD_STATE_WAIT;
 800fb10:	9307      	str	r3, [sp, #28]
 800fb12:	e6f4      	b.n	800f8fe <lv_draw_label+0x29a>
        pos.y += line_height;
 800fb14:	466b      	mov	r3, sp
 800fb16:	2248      	movs	r2, #72	; 0x48
 800fb18:	189b      	adds	r3, r3, r2
 800fb1a:	881b      	ldrh	r3, [r3, #0]
 800fb1c:	9314      	str	r3, [sp, #80]	; 0x50
 800fb1e:	e6f2      	b.n	800f906 <lv_draw_label+0x2a2>
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800fb20:	2214      	movs	r2, #20
 800fb22:	5ebb      	ldrsh	r3, [r7, r2]
 800fb24:	4a9b      	ldr	r2, [pc, #620]	; (800fd94 <lv_draw_label+0x730>)
 800fb26:	9102      	str	r1, [sp, #8]
 800fb28:	9201      	str	r2, [sp, #4]
 800fb2a:	2112      	movs	r1, #18
 800fb2c:	5e7a      	ldrsh	r2, [r7, r1]
 800fb2e:	ac2e      	add	r4, sp, #184	; 0xb8
 800fb30:	9200      	str	r2, [sp, #0]
 800fb32:	683a      	ldr	r2, [r7, #0]
 800fb34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb36:	0020      	movs	r0, r4
 800fb38:	f006 ffa4 	bl	8016a84 <lv_txt_get_size>
        w = p.x;
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	5ea3      	ldrsh	r3, [r4, r2]
 800fb40:	9311      	str	r3, [sp, #68]	; 0x44
    pos.x = coords->x1;
 800fb42:	9b10      	ldr	r3, [sp, #64]	; 0x40
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800fb44:	7f79      	ldrb	r1, [r7, #29]
    pos.x = coords->x1;
 800fb46:	2200      	movs	r2, #0
 800fb48:	5e9a      	ldrsh	r2, [r3, r2]
 800fb4a:	e5d0      	b.n	800f6ee <lv_draw_label+0x8a>
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800fb4c:	2314      	movs	r3, #20
 800fb4e:	5efa      	ldrsh	r2, [r7, r3]
 800fb50:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800fb52:	9101      	str	r1, [sp, #4]
 800fb54:	9300      	str	r3, [sp, #0]
 800fb56:	9908      	ldr	r1, [sp, #32]
 800fb58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fb5c:	f006 fe08 	bl	8016770 <_lv_txt_get_next_line>
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800fb60:	2202      	movs	r2, #2
 800fb62:	5eb3      	ldrsh	r3, [r6, r2]
 800fb64:	2200      	movs	r2, #0
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800fb66:	2500      	movs	r5, #0
 800fb68:	0011      	movs	r1, r2
 800fb6a:	0004      	movs	r4, r0
 800fb6c:	46ba      	mov	sl, r7
 800fb6e:	e01a      	b.n	800fba6 <lv_draw_label+0x542>
 800fb70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb72:	9908      	ldr	r1, [sp, #32]
 800fb74:	191f      	adds	r7, r3, r4
 800fb76:	4653      	mov	r3, sl
 800fb78:	2214      	movs	r2, #20
 800fb7a:	5e9a      	ldrsh	r2, [r3, r2]
 800fb7c:	4653      	mov	r3, sl
 800fb7e:	7f5b      	ldrb	r3, [r3, #29]
 800fb80:	0038      	movs	r0, r7
 800fb82:	9301      	str	r3, [sp, #4]
 800fb84:	9500      	str	r5, [sp, #0]
 800fb86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb88:	f006 fdf2 	bl	8016770 <_lv_txt_get_next_line>
        pos.y += line_height;
 800fb8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb8e:	8873      	ldrh	r3, [r6, #2]
 800fb90:	4694      	mov	ip, r2
        if(txt[line_start] == '\0') return;
 800fb92:	783a      	ldrb	r2, [r7, #0]
        pos.y += line_height;
 800fb94:	4463      	add	r3, ip
 800fb96:	b21b      	sxth	r3, r3
 800fb98:	0021      	movs	r1, r4
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800fb9a:	1820      	adds	r0, r4, r0
        pos.y += line_height;
 800fb9c:	8073      	strh	r3, [r6, #2]
        if(txt[line_start] == '\0') return;
 800fb9e:	2a00      	cmp	r2, #0
 800fba0:	d100      	bne.n	800fba4 <lv_draw_label+0x540>
 800fba2:	e587      	b.n	800f6b4 <lv_draw_label+0x50>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800fba4:	0004      	movs	r4, r0
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800fba6:	465a      	mov	r2, fp
 800fba8:	6892      	ldr	r2, [r2, #8]
 800fbaa:	4443      	add	r3, r8
 800fbac:	2002      	movs	r0, #2
 800fbae:	5e12      	ldrsh	r2, [r2, r0]
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	dcdd      	bgt.n	800fb70 <lv_draw_label+0x50c>
 800fbb4:	4657      	mov	r7, sl
 800fbb6:	910e      	str	r1, [sp, #56]	; 0x38
 800fbb8:	940f      	str	r4, [sp, #60]	; 0x3c
 800fbba:	e606      	b.n	800f7ca <lv_draw_label+0x166>
        lv_draw_line_dsc_init(&line_dsc);
 800fbbc:	ac23      	add	r4, sp, #140	; 0x8c
 800fbbe:	0020      	movs	r0, r4
 800fbc0:	f000 f94a 	bl	800fe58 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800fbc4:	89bb      	ldrh	r3, [r7, #12]
 800fbc6:	8023      	strh	r3, [r4, #0]
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800fbc8:	9b08      	ldr	r3, [sp, #32]
 800fbca:	7b9b      	ldrb	r3, [r3, #14]
 800fbcc:	b25b      	sxtb	r3, r3
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d100      	bne.n	800fbd4 <lv_draw_label+0x570>
 800fbd2:	3301      	adds	r3, #1
        line_dsc.blend_mode = dsc->blend_mode;
 800fbd4:	2103      	movs	r1, #3
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800fbd6:	8063      	strh	r3, [r4, #2]
        line_dsc.opa = dsc->opa;
 800fbd8:	7ebb      	ldrb	r3, [r7, #26]
        line_dsc.blend_mode = dsc->blend_mode;
 800fbda:	7fba      	ldrb	r2, [r7, #30]
        line_dsc.opa = dsc->opa;
 800fbdc:	7223      	strb	r3, [r4, #8]
        line_dsc.blend_mode = dsc->blend_mode;
 800fbde:	7a63      	ldrb	r3, [r4, #9]
 800fbe0:	08d2      	lsrs	r2, r2, #3
 800fbe2:	400a      	ands	r2, r1
 800fbe4:	438b      	bics	r3, r1
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	7263      	strb	r3, [r4, #9]
 800fbea:	e607      	b.n	800f7fc <lv_draw_label+0x198>
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800fbec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbee:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fbf0:	0013      	movs	r3, r2
 800fbf2:	4684      	mov	ip, r0
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 800fbf4:	5c14      	ldrb	r4, [r2, r0]
 800fbf6:	4463      	add	r3, ip
 800fbf8:	9407      	str	r4, [sp, #28]
 800fbfa:	7858      	ldrb	r0, [r3, #1]
 800fbfc:	791c      	ldrb	r4, [r3, #4]
 800fbfe:	789a      	ldrb	r2, [r3, #2]
 800fc00:	78dd      	ldrb	r5, [r3, #3]
 800fc02:	795b      	ldrb	r3, [r3, #5]
 800fc04:	9413      	str	r4, [sp, #76]	; 0x4c
 800fc06:	9319      	str	r3, [sp, #100]	; 0x64
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 800fc08:	9b07      	ldr	r3, [sp, #28]
 800fc0a:	3b30      	subs	r3, #48	; 0x30
 800fc0c:	b2db      	uxtb	r3, r3
 800fc0e:	2b09      	cmp	r3, #9
 800fc10:	d90e      	bls.n	800fc30 <lv_draw_label+0x5cc>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800fc12:	9b07      	ldr	r3, [sp, #28]
 800fc14:	2b60      	cmp	r3, #96	; 0x60
 800fc16:	d902      	bls.n	800fc1e <lv_draw_label+0x5ba>
 800fc18:	3b20      	subs	r3, #32
 800fc1a:	b2db      	uxtb	r3, r3
 800fc1c:	9307      	str	r3, [sp, #28]
            uint32_t logical_char_pos = 0;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	9c07      	ldr	r4, [sp, #28]
 800fc22:	469c      	mov	ip, r3
 800fc24:	0023      	movs	r3, r4
 800fc26:	3b41      	subs	r3, #65	; 0x41
 800fc28:	2b05      	cmp	r3, #5
 800fc2a:	d803      	bhi.n	800fc34 <lv_draw_label+0x5d0>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800fc2c:	330a      	adds	r3, #10
 800fc2e:	b2db      	uxtb	r3, r3
 800fc30:	011b      	lsls	r3, r3, #4
 800fc32:	469c      	mov	ip, r3
    if(hex >= '0' && hex <= '9') {
 800fc34:	0003      	movs	r3, r0
 800fc36:	3b30      	subs	r3, #48	; 0x30
 800fc38:	b2db      	uxtb	r3, r3
 800fc3a:	2b09      	cmp	r3, #9
 800fc3c:	d900      	bls.n	800fc40 <lv_draw_label+0x5dc>
 800fc3e:	e09b      	b.n	800fd78 <lv_draw_label+0x714>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800fc40:	449c      	add	ip, r3
    if(hex >= '0' && hex <= '9') {
 800fc42:	0013      	movs	r3, r2
 800fc44:	3b30      	subs	r3, #48	; 0x30
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	2b09      	cmp	r3, #9
 800fc4a:	d90a      	bls.n	800fc62 <lv_draw_label+0x5fe>
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800fc4c:	2a60      	cmp	r2, #96	; 0x60
 800fc4e:	d901      	bls.n	800fc54 <lv_draw_label+0x5f0>
 800fc50:	3a20      	subs	r2, #32
 800fc52:	b2d2      	uxtb	r2, r2

        switch(hex) {
 800fc54:	0013      	movs	r3, r2
 800fc56:	3b41      	subs	r3, #65	; 0x41
            uint32_t logical_char_pos = 0;
 800fc58:	2000      	movs	r0, #0
 800fc5a:	2b05      	cmp	r3, #5
 800fc5c:	d802      	bhi.n	800fc64 <lv_draw_label+0x600>
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800fc5e:	330a      	adds	r3, #10
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	0118      	lsls	r0, r3, #4
    if(hex >= '0' && hex <= '9') {
 800fc64:	002b      	movs	r3, r5
 800fc66:	3b30      	subs	r3, #48	; 0x30
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	2b09      	cmp	r3, #9
 800fc6c:	d877      	bhi.n	800fd5e <lv_draw_label+0x6fa>
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800fc6e:	18c0      	adds	r0, r0, r3
    if(hex >= '0' && hex <= '9') {
 800fc70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fc72:	3a30      	subs	r2, #48	; 0x30
 800fc74:	b2d2      	uxtb	r2, r2
 800fc76:	2a09      	cmp	r2, #9
 800fc78:	d90e      	bls.n	800fc98 <lv_draw_label+0x634>
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800fc7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fc7c:	2b60      	cmp	r3, #96	; 0x60
 800fc7e:	d902      	bls.n	800fc86 <lv_draw_label+0x622>
 800fc80:	3b20      	subs	r3, #32
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	9313      	str	r3, [sp, #76]	; 0x4c
        switch(hex) {
 800fc86:	9c13      	ldr	r4, [sp, #76]	; 0x4c
            uint32_t logical_char_pos = 0;
 800fc88:	2200      	movs	r2, #0
 800fc8a:	0023      	movs	r3, r4
 800fc8c:	3b41      	subs	r3, #65	; 0x41
 800fc8e:	2b05      	cmp	r3, #5
 800fc90:	d803      	bhi.n	800fc9a <lv_draw_label+0x636>
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800fc92:	0022      	movs	r2, r4
 800fc94:	3a37      	subs	r2, #55	; 0x37
 800fc96:	b2d2      	uxtb	r2, r2
 800fc98:	0112      	lsls	r2, r2, #4
    if(hex >= '0' && hex <= '9') {
 800fc9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fc9c:	3b30      	subs	r3, #48	; 0x30
 800fc9e:	b2db      	uxtb	r3, r3
 800fca0:	2b09      	cmp	r3, #9
 800fca2:	d90c      	bls.n	800fcbe <lv_draw_label+0x65a>
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800fca4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fca6:	2b60      	cmp	r3, #96	; 0x60
 800fca8:	d902      	bls.n	800fcb0 <lv_draw_label+0x64c>
 800fcaa:	3b20      	subs	r3, #32
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	9319      	str	r3, [sp, #100]	; 0x64
        switch(hex) {
 800fcb0:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800fcb2:	0023      	movs	r3, r4
 800fcb4:	3b41      	subs	r3, #65	; 0x41
 800fcb6:	2b05      	cmp	r3, #5
 800fcb8:	d802      	bhi.n	800fcc0 <lv_draw_label+0x65c>
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800fcba:	330a      	adds	r3, #10
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	18d2      	adds	r2, r2, r3
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800fcc0:	b2c3      	uxtb	r3, r0
 800fcc2:	089b      	lsrs	r3, r3, #2
 800fcc4:	b2d2      	uxtb	r2, r2
 800fcc6:	015b      	lsls	r3, r3, #5
 800fcc8:	08d2      	lsrs	r2, r2, #3
 800fcca:	431a      	orrs	r2, r3
 800fccc:	4663      	mov	r3, ip
 800fcce:	b2db      	uxtb	r3, r3
 800fcd0:	08db      	lsrs	r3, r3, #3
 800fcd2:	02db      	lsls	r3, r3, #11
 800fcd4:	431a      	orrs	r2, r3
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800fcd6:	2302      	movs	r3, #2
 800fcd8:	9213      	str	r2, [sp, #76]	; 0x4c
 800fcda:	9307      	str	r3, [sp, #28]
 800fcdc:	e60f      	b.n	800f8fe <lv_draw_label+0x29a>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800fcde:	2214      	movs	r2, #20
 800fce0:	5ebb      	ldrsh	r3, [r7, r2]
 800fce2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fce4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fce6:	4694      	mov	ip, r2
 800fce8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fcea:	1a89      	subs	r1, r1, r2
 800fcec:	7f7a      	ldrb	r2, [r7, #29]
 800fcee:	4460      	add	r0, ip
 800fcf0:	9200      	str	r2, [sp, #0]
 800fcf2:	9a08      	ldr	r2, [sp, #32]
 800fcf4:	4680      	mov	r8, r0
 800fcf6:	f006 ff5b 	bl	8016bb0 <lv_txt_get_width>
 800fcfa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fcfc:	8893      	ldrh	r3, [r2, #4]
 800fcfe:	8812      	ldrh	r2, [r2, #0]
 800fd00:	3301      	adds	r3, #1
 800fd02:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800fd04:	b21b      	sxth	r3, r3
 800fd06:	1a18      	subs	r0, r3, r0
 800fd08:	0fc3      	lsrs	r3, r0, #31
 800fd0a:	8832      	ldrh	r2, [r6, #0]
 800fd0c:	181b      	adds	r3, r3, r0
 800fd0e:	105b      	asrs	r3, r3, #1
 800fd10:	189b      	adds	r3, r3, r2
 800fd12:	8033      	strh	r3, [r6, #0]
 800fd14:	e566      	b.n	800f7e4 <lv_draw_label+0x180>
        last_line_start = hint->line_start;
 800fd16:	682a      	ldr	r2, [r5, #0]
    if(hint && last_line_start >= 0) {
 800fd18:	2a00      	cmp	r2, #0
 800fd1a:	da00      	bge.n	800fd1e <lv_draw_label+0x6ba>
 800fd1c:	e504      	b.n	800f728 <lv_draw_label+0xc4>
        pos.y += hint->y;
 800fd1e:	6868      	ldr	r0, [r5, #4]
        line_start = last_line_start;
 800fd20:	920e      	str	r2, [sp, #56]	; 0x38
        pos.y += hint->y;
 800fd22:	4684      	mov	ip, r0
 800fd24:	4463      	add	r3, ip
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800fd26:	4694      	mov	ip, r2
        pos.y += hint->y;
 800fd28:	9005      	str	r0, [sp, #20]
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800fd2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
        pos.y += hint->y;
 800fd2c:	8073      	strh	r3, [r6, #2]
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800fd2e:	4460      	add	r0, ip
 800fd30:	e4fd      	b.n	800f72e <lv_draw_label+0xca>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800fd32:	4661      	mov	r1, ip
 800fd34:	2214      	movs	r2, #20
 800fd36:	5ebb      	ldrsh	r3, [r7, r2]
 800fd38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fd3a:	4640      	mov	r0, r8
 800fd3c:	1a51      	subs	r1, r2, r1
 800fd3e:	7f7a      	ldrb	r2, [r7, #29]
 800fd40:	9200      	str	r2, [sp, #0]
 800fd42:	9a08      	ldr	r2, [sp, #32]
 800fd44:	f006 ff34 	bl	8016bb0 <lv_txt_get_width>
 800fd48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fd4a:	8893      	ldrh	r3, [r2, #4]
 800fd4c:	8812      	ldrh	r2, [r2, #0]
 800fd4e:	3301      	adds	r3, #1
 800fd50:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 800fd52:	b21b      	sxth	r3, r3
 800fd54:	8832      	ldrh	r2, [r6, #0]
 800fd56:	1a1b      	subs	r3, r3, r0
 800fd58:	189b      	adds	r3, r3, r2
 800fd5a:	8033      	strh	r3, [r6, #0]
 800fd5c:	e542      	b.n	800f7e4 <lv_draw_label+0x180>
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800fd5e:	2d60      	cmp	r5, #96	; 0x60
 800fd60:	d901      	bls.n	800fd66 <lv_draw_label+0x702>
 800fd62:	3d20      	subs	r5, #32
 800fd64:	b2ed      	uxtb	r5, r5
        switch(hex) {
 800fd66:	002b      	movs	r3, r5
 800fd68:	3b41      	subs	r3, #65	; 0x41
 800fd6a:	2b05      	cmp	r3, #5
 800fd6c:	d900      	bls.n	800fd70 <lv_draw_label+0x70c>
 800fd6e:	e77f      	b.n	800fc70 <lv_draw_label+0x60c>
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800fd70:	3d37      	subs	r5, #55	; 0x37
 800fd72:	b2ed      	uxtb	r5, r5
 800fd74:	1940      	adds	r0, r0, r5
 800fd76:	e77b      	b.n	800fc70 <lv_draw_label+0x60c>
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800fd78:	2860      	cmp	r0, #96	; 0x60
 800fd7a:	d901      	bls.n	800fd80 <lv_draw_label+0x71c>
 800fd7c:	3820      	subs	r0, #32
 800fd7e:	b2c0      	uxtb	r0, r0
        switch(hex) {
 800fd80:	0003      	movs	r3, r0
 800fd82:	3b41      	subs	r3, #65	; 0x41
 800fd84:	2b05      	cmp	r3, #5
 800fd86:	d900      	bls.n	800fd8a <lv_draw_label+0x726>
 800fd88:	e75b      	b.n	800fc42 <lv_draw_label+0x5de>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800fd8a:	3837      	subs	r0, #55	; 0x37
 800fd8c:	b2c0      	uxtb	r0, r0
 800fd8e:	4484      	add	ip, r0
 800fd90:	e757      	b.n	800fc42 <lv_draw_label+0x5de>
 800fd92:	46c0      	nop			; (mov r8, r8)
 800fd94:	00001fff 	.word	0x00001fff

0800fd98 <lv_draw_layer_create>:
 *   GLOBAL FUNCTIONS
 **********************/

lv_draw_layer_ctx_t * lv_draw_layer_create(lv_draw_ctx_t * draw_ctx, const lv_area_t * layer_area,
                                           lv_draw_layer_flags_t flags)
{
 800fd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(draw_ctx->layer_init == NULL) return NULL;
 800fd9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 800fd9c:	0004      	movs	r4, r0
 800fd9e:	000f      	movs	r7, r1
 800fda0:	0016      	movs	r6, r2
    if(draw_ctx->layer_init == NULL) return NULL;
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d024      	beq.n	800fdf0 <lv_draw_layer_create+0x58>

    lv_draw_layer_ctx_t * layer_ctx = lv_mem_alloc(draw_ctx->layer_instance_size);
 800fda6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800fda8:	f005 f86a 	bl	8014e80 <lv_mem_alloc>
 800fdac:	1e05      	subs	r5, r0, #0
    LV_ASSERT_MALLOC(layer_ctx);
 800fdae:	d01e      	beq.n	800fdee <lv_draw_layer_create+0x56>
    if(layer_ctx == NULL) {
        LV_LOG_WARN("Couldn't allocate a new layer context");
        return NULL;
    }

    lv_memset_00(layer_ctx, draw_ctx->layer_instance_size);
 800fdb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fdb2:	f005 fbe7 	bl	8015584 <lv_memset_00>

    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800fdb6:	f7fe ff97 	bl	800ece8 <_lv_refr_get_disp_refreshing>
    layer_ctx->original.buf = draw_ctx->buf;
    layer_ctx->original.buf_area = draw_ctx->buf_area;
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 800fdba:	6862      	ldr	r2, [r4, #4]
 800fdbc:	6823      	ldr	r3, [r4, #0]
 800fdbe:	68a1      	ldr	r1, [r4, #8]
 800fdc0:	61ea      	str	r2, [r5, #28]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 800fdc2:	2224      	movs	r2, #36	; 0x24
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 800fdc4:	61a9      	str	r1, [r5, #24]
 800fdc6:	622b      	str	r3, [r5, #32]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 800fdc8:	6803      	ldr	r3, [r0, #0]
    layer_ctx->area_full = *layer_area;
 800fdca:	0039      	movs	r1, r7
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 800fdcc:	7c1b      	ldrb	r3, [r3, #16]
    layer_ctx->area_full = *layer_area;
 800fdce:	0028      	movs	r0, r5
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 800fdd0:	065b      	lsls	r3, r3, #25
 800fdd2:	0fdb      	lsrs	r3, r3, #31
 800fdd4:	54ab      	strb	r3, [r5, r2]
    layer_ctx->area_full = *layer_area;
 800fdd6:	3a1c      	subs	r2, #28
 800fdd8:	f00b fb82 	bl	801b4e0 <memcpy>

    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 800fddc:	0020      	movs	r0, r4
 800fdde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fde0:	0032      	movs	r2, r6
 800fde2:	0029      	movs	r1, r5
 800fde4:	4798      	blx	r3
 800fde6:	1e04      	subs	r4, r0, #0
    if(NULL == init_layer_ctx) {
 800fde8:	d004      	beq.n	800fdf4 <lv_draw_layer_create+0x5c>
        lv_mem_free(layer_ctx);
    }
    return init_layer_ctx;
}
 800fdea:	0020      	movs	r0, r4
 800fdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(layer_ctx);
 800fdee:	e7fe      	b.n	800fdee <lv_draw_layer_create+0x56>
    if(draw_ctx->layer_init == NULL) return NULL;
 800fdf0:	2400      	movs	r4, #0
 800fdf2:	e7fa      	b.n	800fdea <lv_draw_layer_create+0x52>
        lv_mem_free(layer_ctx);
 800fdf4:	0028      	movs	r0, r5
 800fdf6:	f005 f865 	bl	8014ec4 <lv_mem_free>
 800fdfa:	e7f6      	b.n	800fdea <lv_draw_layer_create+0x52>

0800fdfc <lv_draw_layer_adjust>:

void lv_draw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                          lv_draw_layer_flags_t flags)
{
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 800fdfc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 800fdfe:	b510      	push	{r4, lr}
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d000      	beq.n	800fe06 <lv_draw_layer_adjust+0xa>
 800fe04:	4798      	blx	r3
}
 800fe06:	bd10      	pop	{r4, pc}

0800fe08 <lv_draw_layer_blend>:

void lv_draw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                         lv_draw_img_dsc_t * draw_dsc)
{
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 800fe08:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 800fe0a:	b510      	push	{r4, lr}
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d000      	beq.n	800fe12 <lv_draw_layer_blend+0xa>
 800fe10:	4798      	blx	r3
}
 800fe12:	bd10      	pop	{r4, pc}

0800fe14 <lv_draw_layer_destroy>:

void lv_draw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 800fe14:	b570      	push	{r4, r5, r6, lr}
 800fe16:	000c      	movs	r4, r1
 800fe18:	0005      	movs	r5, r0

    lv_draw_wait_for_finish(draw_ctx);
 800fe1a:	f7ff fa63 	bl	800f2e4 <lv_draw_wait_for_finish>
    draw_ctx->buf = layer_ctx->original.buf;
 800fe1e:	69a3      	ldr	r3, [r4, #24]
 800fe20:	69e2      	ldr	r2, [r4, #28]
 800fe22:	6a21      	ldr	r1, [r4, #32]
 800fe24:	606a      	str	r2, [r5, #4]
 800fe26:	6029      	str	r1, [r5, #0]
 800fe28:	60ab      	str	r3, [r5, #8]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
    draw_ctx->clip_area = layer_ctx->original.clip_area;
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800fe2a:	f7fe ff5d 	bl	800ece8 <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 800fe2e:	2324      	movs	r3, #36	; 0x24
 800fe30:	6801      	ldr	r1, [r0, #0]
 800fe32:	2040      	movs	r0, #64	; 0x40
 800fe34:	5ce2      	ldrb	r2, [r4, r3]
 800fe36:	3b23      	subs	r3, #35	; 0x23
 800fe38:	401a      	ands	r2, r3
 800fe3a:	7c0b      	ldrb	r3, [r1, #16]
 800fe3c:	0192      	lsls	r2, r2, #6
 800fe3e:	4383      	bics	r3, r0
 800fe40:	4313      	orrs	r3, r2
 800fe42:	740b      	strb	r3, [r1, #16]

    if(draw_ctx->layer_destroy) draw_ctx->layer_destroy(draw_ctx, layer_ctx);
 800fe44:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d002      	beq.n	800fe50 <lv_draw_layer_destroy+0x3c>
 800fe4a:	0021      	movs	r1, r4
 800fe4c:	0028      	movs	r0, r5
 800fe4e:	4798      	blx	r3
    lv_mem_free(layer_ctx);
 800fe50:	0020      	movs	r0, r4
 800fe52:	f005 f837 	bl	8014ec4 <lv_mem_free>
}
 800fe56:	bd70      	pop	{r4, r5, r6, pc}

0800fe58 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 800fe58:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800fe5a:	210a      	movs	r1, #10
{
 800fe5c:	0004      	movs	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800fe5e:	f005 fb91 	bl	8015584 <lv_memset_00>
    dsc->width = 1;
    dsc->opa = LV_OPA_COVER;
 800fe62:	23ff      	movs	r3, #255	; 0xff
 800fe64:	7223      	strb	r3, [r4, #8]
    dsc->color = lv_color_black();
 800fe66:	2300      	movs	r3, #0
 800fe68:	8023      	strh	r3, [r4, #0]
    dsc->width = 1;
 800fe6a:	3301      	adds	r3, #1
 800fe6c:	8063      	strh	r3, [r4, #2]
}
 800fe6e:	bd10      	pop	{r4, pc}

0800fe70 <lv_draw_line>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 800fe70:	b570      	push	{r4, r5, r6, lr}
    if(dsc->width == 0) return;
 800fe72:	2502      	movs	r5, #2
 800fe74:	5f4c      	ldrsh	r4, [r1, r5]
 800fe76:	2c00      	cmp	r4, #0
 800fe78:	d004      	beq.n	800fe84 <lv_draw_line+0x14>
    if(dsc->opa <= LV_OPA_MIN) return;
 800fe7a:	7a0c      	ldrb	r4, [r1, #8]
 800fe7c:	2c02      	cmp	r4, #2
 800fe7e:	d901      	bls.n	800fe84 <lv_draw_line+0x14>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 800fe80:	6a04      	ldr	r4, [r0, #32]
 800fe82:	47a0      	blx	r4
}
 800fe84:	bd70      	pop	{r4, r5, r6, pc}
 800fe86:	46c0      	nop			; (mov r8, r8)

0800fe88 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 800fe88:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800fe8a:	2138      	movs	r1, #56	; 0x38
{
 800fe8c:	0004      	movs	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800fe8e:	f005 fb79 	bl	8015584 <lv_memset_00>
    dsc->bg_color = lv_color_white();
    dsc->bg_grad.stops[0].color = lv_color_white();
    dsc->bg_grad.stops[1].color = lv_color_black();
 800fe92:	2200      	movs	r2, #0
 800fe94:	8162      	strh	r2, [r4, #10]
    dsc->bg_grad.stops[1].frac = 0xFF;
    dsc->bg_grad.stops_count = 2;
    dsc->border_color = lv_color_black();
 800fe96:	83e2      	strh	r2, [r4, #30]
    dsc->shadow_color = lv_color_black();
 800fe98:	85a2      	strh	r2, [r4, #44]	; 0x2c
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 800fe9a:	4a0b      	ldr	r2, [pc, #44]	; (800fec8 <lv_draw_rect_dsc_init+0x40>)
    dsc->bg_grad.stops[1].frac = 0xFF;
 800fe9c:	23ff      	movs	r3, #255	; 0xff
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 800fe9e:	6162      	str	r2, [r4, #20]
    dsc->bg_color = lv_color_white();
 800fea0:	2201      	movs	r2, #1
    dsc->bg_grad.stops_count = 2;
 800fea2:	2102      	movs	r1, #2
    dsc->bg_color = lv_color_white();
 800fea4:	4252      	negs	r2, r2
 800fea6:	6062      	str	r2, [r4, #4]
    dsc->bg_opa = LV_OPA_COVER;
    dsc->bg_img_opa = LV_OPA_COVER;
 800fea8:	76a2      	strb	r2, [r4, #26]
    dsc->outline_opa = LV_OPA_COVER;
 800feaa:	322b      	adds	r2, #43	; 0x2b
    dsc->bg_grad.stops[1].frac = 0xFF;
 800feac:	7323      	strb	r3, [r4, #12]
    dsc->bg_opa = LV_OPA_COVER;
 800feae:	70e3      	strb	r3, [r4, #3]
    dsc->bg_grad.stops_count = 2;
 800feb0:	73a1      	strb	r1, [r4, #14]
    dsc->outline_opa = LV_OPA_COVER;
 800feb2:	54a3      	strb	r3, [r4, r2]
    dsc->border_opa = LV_OPA_COVER;
    dsc->shadow_opa = LV_OPA_COVER;
 800feb4:	320c      	adds	r2, #12
 800feb6:	54a3      	strb	r3, [r4, r2]
    dsc->border_opa = LV_OPA_COVER;
 800feb8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800feba:	4a04      	ldr	r2, [pc, #16]	; (800fecc <lv_draw_rect_dsc_init+0x44>)
 800febc:	401a      	ands	r2, r3
 800febe:	4b04      	ldr	r3, [pc, #16]	; (800fed0 <lv_draw_rect_dsc_init+0x48>)
 800fec0:	4313      	orrs	r3, r2
 800fec2:	8463      	strh	r3, [r4, #34]	; 0x22
    dsc->border_side = LV_BORDER_SIDE_FULL;
}
 800fec4:	bd10      	pop	{r4, pc}
 800fec6:	46c0      	nop			; (mov r8, r8)
 800fec8:	0801bf40 	.word	0x0801bf40
 800fecc:	ffffc100 	.word	0xffffc100
 800fed0:	00001eff 	.word	0x00001eff

0800fed4 <lv_draw_rect>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fed4:	88d3      	ldrh	r3, [r2, #6]
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 800fed6:	b510      	push	{r4, lr}
 800fed8:	8854      	ldrh	r4, [r2, #2]
 800feda:	3301      	adds	r3, #1
 800fedc:	1b1b      	subs	r3, r3, r4
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800fede:	b21b      	sxth	r3, r3
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	dd08      	ble.n	800fef6 <lv_draw_rect+0x22>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fee4:	8893      	ldrh	r3, [r2, #4]
 800fee6:	8814      	ldrh	r4, [r2, #0]
 800fee8:	3301      	adds	r3, #1
 800feea:	1b1b      	subs	r3, r3, r4
 800feec:	b21b      	sxth	r3, r3
 800feee:	2b00      	cmp	r3, #0
 800fef0:	dd01      	ble.n	800fef6 <lv_draw_rect+0x22>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 800fef2:	68c3      	ldr	r3, [r0, #12]
 800fef4:	4798      	blx	r3

    LV_ASSERT_MEM_INTEGRITY();
}
 800fef6:	bd10      	pop	{r4, pc}

0800fef8 <lv_draw_transform>:
 *   GLOBAL FUNCTIONS
 **********************/
void lv_draw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w,
                       lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 800fef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fefa:	b087      	sub	sp, #28
 800fefc:	ac0c      	add	r4, sp, #48	; 0x30
 800fefe:	469c      	mov	ip, r3
 800ff00:	2300      	movs	r3, #0
 800ff02:	5ee5      	ldrsh	r5, [r4, r3]
 800ff04:	ac0d      	add	r4, sp, #52	; 0x34
 800ff06:	2300      	movs	r3, #0
 800ff08:	5ee6      	ldrsh	r6, [r4, r3]
 800ff0a:	ac0f      	add	r4, sp, #60	; 0x3c
 800ff0c:	7827      	ldrb	r7, [r4, #0]
    LV_ASSERT_NULL(draw_ctx);
 800ff0e:	2800      	cmp	r0, #0
 800ff10:	d00f      	beq.n	800ff32 <lv_draw_transform+0x3a>
    if(draw_ctx->draw_transform == NULL) {
 800ff12:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ff14:	2c00      	cmp	r4, #0
 800ff16:	d00a      	beq.n	800ff2e <lv_draw_transform+0x36>
        LV_LOG_WARN("draw_ctx->draw_transform == NULL");
        return;
    }

    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 800ff18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff1a:	9703      	str	r7, [sp, #12]
 800ff1c:	9305      	str	r3, [sp, #20]
 800ff1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff20:	9601      	str	r6, [sp, #4]
 800ff22:	9304      	str	r3, [sp, #16]
 800ff24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ff26:	9500      	str	r5, [sp, #0]
 800ff28:	9302      	str	r3, [sp, #8]
 800ff2a:	4663      	mov	r3, ip
 800ff2c:	47a0      	blx	r4

}
 800ff2e:	b007      	add	sp, #28
 800ff30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(draw_ctx);
 800ff32:	e7fe      	b.n	800ff32 <lv_draw_transform+0x3a>

0800ff34 <_lv_img_buf_get_transformed_area>:

#else
    LV_UNUSED(angle);
    LV_UNUSED(zoom);
    LV_UNUSED(pivot);
    res->x1 = 0;
 800ff34:	2300      	movs	r3, #0
    res->y1 = 0;
    res->x2 = w - 1;
 800ff36:	3901      	subs	r1, #1
    res->y2 = h - 1;
 800ff38:	3a01      	subs	r2, #1
    res->x1 = 0;
 800ff3a:	8003      	strh	r3, [r0, #0]
    res->y1 = 0;
 800ff3c:	8043      	strh	r3, [r0, #2]
    res->x2 = w - 1;
 800ff3e:	8081      	strh	r1, [r0, #4]
    res->y2 = h - 1;
 800ff40:	80c2      	strh	r2, [r0, #6]
#endif
}
 800ff42:	4770      	bx	lr

0800ff44 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 800ff44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff46:	46c6      	mov	lr, r8
 800ff48:	b500      	push	{lr}
 800ff4a:	0017      	movs	r7, r2
 800ff4c:	1c0e      	adds	r6, r1, #0
 800ff4e:	0005      	movs	r5, r0
    }
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
 800ff50:	f003 fe3c 	bl	8013bcc <lv_tick_get>
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800ff54:	4c12      	ldr	r4, [pc, #72]	; (800ffa0 <_lv_img_cache_open+0x5c>)
    uint32_t t_start  = lv_tick_get();
 800ff56:	4680      	mov	r8, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800ff58:	003b      	movs	r3, r7
 800ff5a:	0029      	movs	r1, r5
 800ff5c:	0020      	movs	r0, r4
 800ff5e:	1c32      	adds	r2, r6, #0
 800ff60:	f000 fbf4 	bl	801074c <lv_img_decoder_open>
    if(open_res == LV_RES_INV) {
 800ff64:	2800      	cmp	r0, #0
 800ff66:	d010      	beq.n	800ff8a <_lv_img_cache_open+0x46>
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
        return NULL;
    }

    cached_src->life = 0;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	62a3      	str	r3, [r4, #40]	; 0x28

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
 800ff6c:	69e3      	ldr	r3, [r4, #28]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d003      	beq.n	800ff7a <_lv_img_cache_open+0x36>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
 800ff72:	0020      	movs	r0, r4
}
 800ff74:	bc80      	pop	{r7}
 800ff76:	46b8      	mov	r8, r7
 800ff78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800ff7a:	4640      	mov	r0, r8
 800ff7c:	f003 fe34 	bl	8013be8 <lv_tick_elaps>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800ff80:	2800      	cmp	r0, #0
 800ff82:	d10b      	bne.n	800ff9c <_lv_img_cache_open+0x58>
 800ff84:	2301      	movs	r3, #1
 800ff86:	61e3      	str	r3, [r4, #28]
 800ff88:	e7f3      	b.n	800ff72 <_lv_img_cache_open+0x2e>
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 800ff8a:	0020      	movs	r0, r4
 800ff8c:	212c      	movs	r1, #44	; 0x2c
 800ff8e:	f005 faf9 	bl	8015584 <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 800ff92:	2380      	movs	r3, #128	; 0x80
 800ff94:	061b      	lsls	r3, r3, #24
        return NULL;
 800ff96:	2000      	movs	r0, #0
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 800ff98:	62a3      	str	r3, [r4, #40]	; 0x28
        return NULL;
 800ff9a:	e7eb      	b.n	800ff74 <_lv_img_cache_open+0x30>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800ff9c:	61e0      	str	r0, [r4, #28]
 800ff9e:	e7e8      	b.n	800ff72 <_lv_img_cache_open+0x2e>
 800ffa0:	200005f0 	.word	0x200005f0

0800ffa4 <lv_img_cache_invalidate_src>:

            lv_memset_00(&cache[i], sizeof(_lv_img_cache_entry_t));
        }
    }
#endif
}
 800ffa4:	4770      	bx	lr
 800ffa6:	46c0      	nop			; (mov r8, r8)

0800ffa8 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800ffa8:	b570      	push	{r4, r5, r6, lr}
    LV_UNUSED(decoder); /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800ffaa:	6a4d      	ldr	r5, [r1, #36]	; 0x24
{
 800ffac:	000c      	movs	r4, r1
    if(user_data) {
 800ffae:	2d00      	cmp	r5, #0
 800ffb0:	d011      	beq.n	800ffd6 <lv_img_decoder_built_in_close+0x2e>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800ffb2:	7c0b      	ldrb	r3, [r1, #16]
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d00f      	beq.n	800ffd8 <lv_img_decoder_built_in_close+0x30>
            lv_fs_close(&user_data->f);
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 800ffb8:	68e8      	ldr	r0, [r5, #12]
 800ffba:	2800      	cmp	r0, #0
 800ffbc:	d001      	beq.n	800ffc2 <lv_img_decoder_built_in_close+0x1a>
 800ffbe:	f004 ff81 	bl	8014ec4 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 800ffc2:	6928      	ldr	r0, [r5, #16]
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	d001      	beq.n	800ffcc <lv_img_decoder_built_in_close+0x24>
 800ffc8:	f004 ff7c 	bl	8014ec4 <lv_mem_free>

        lv_mem_free(user_data);
 800ffcc:	0028      	movs	r0, r5
 800ffce:	f004 ff79 	bl	8014ec4 <lv_mem_free>
        dsc->user_data = NULL;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	6263      	str	r3, [r4, #36]	; 0x24
    }
}
 800ffd6:	bd70      	pop	{r4, r5, r6, pc}
            lv_fs_close(&user_data->f);
 800ffd8:	0028      	movs	r0, r5
 800ffda:	f004 fcdd 	bl	8014998 <lv_fs_close>
 800ffde:	e7eb      	b.n	800ffb8 <lv_img_decoder_built_in_close+0x10>

0800ffe0 <lv_img_decoder_built_in_info>:
{
 800ffe0:	b570      	push	{r4, r5, r6, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800ffe2:	0008      	movs	r0, r1
{
 800ffe4:	b084      	sub	sp, #16
 800ffe6:	000d      	movs	r5, r1
 800ffe8:	0016      	movs	r6, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800ffea:	f7ff fb15 	bl	800f618 <lv_img_src_get_type>
 800ffee:	1e04      	subs	r4, r0, #0
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800fff0:	d11a      	bne.n	8010028 <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800fff2:	782b      	ldrb	r3, [r5, #0]
 800fff4:	06db      	lsls	r3, r3, #27
 800fff6:	0edb      	lsrs	r3, r3, #27
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800fff8:	3b04      	subs	r3, #4
 800fffa:	b2db      	uxtb	r3, r3
 800fffc:	2b10      	cmp	r3, #16
 800fffe:	d810      	bhi.n	8010022 <lv_img_decoder_built_in_info+0x42>
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8010000:	886a      	ldrh	r2, [r5, #2]
 8010002:	8873      	ldrh	r3, [r6, #2]
 8010004:	0952      	lsrs	r2, r2, #5
 8010006:	0151      	lsls	r1, r2, #5
 8010008:	221f      	movs	r2, #31
 801000a:	401a      	ands	r2, r3
 801000c:	430a      	orrs	r2, r1
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 801000e:	6828      	ldr	r0, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8010010:	8072      	strh	r2, [r6, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8010012:	6832      	ldr	r2, [r6, #0]
 8010014:	4b21      	ldr	r3, [pc, #132]	; (801009c <lv_img_decoder_built_in_info+0xbc>)
    return LV_RES_OK;
 8010016:	3401      	adds	r4, #1
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8010018:	4013      	ands	r3, r2
 801001a:	4a21      	ldr	r2, [pc, #132]	; (80100a0 <lv_img_decoder_built_in_info+0xc0>)
 801001c:	4002      	ands	r2, r0
 801001e:	4313      	orrs	r3, r2
 8010020:	6033      	str	r3, [r6, #0]
}
 8010022:	0020      	movs	r0, r4
 8010024:	b004      	add	sp, #16
 8010026:	bd70      	pop	{r4, r5, r6, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 8010028:	2801      	cmp	r0, #1
 801002a:	d00b      	beq.n	8010044 <lv_img_decoder_built_in_info+0x64>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 801002c:	2400      	movs	r4, #0
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 801002e:	2802      	cmp	r0, #2
 8010030:	d1f7      	bne.n	8010022 <lv_img_decoder_built_in_info+0x42>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8010032:	22f8      	movs	r2, #248	; 0xf8
 8010034:	6833      	ldr	r3, [r6, #0]
 8010036:	0092      	lsls	r2, r2, #2
 8010038:	401a      	ands	r2, r3
 801003a:	4b1a      	ldr	r3, [pc, #104]	; (80100a4 <lv_img_decoder_built_in_info+0xc4>)
    return LV_RES_OK;
 801003c:	3401      	adds	r4, #1
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 801003e:	4313      	orrs	r3, r2
 8010040:	6033      	str	r3, [r6, #0]
 8010042:	e7ee      	b.n	8010022 <lv_img_decoder_built_in_info+0x42>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8010044:	0028      	movs	r0, r5
 8010046:	f004 fdf1 	bl	8014c2c <lv_fs_get_ext>
 801004a:	4917      	ldr	r1, [pc, #92]	; (80100a8 <lv_img_decoder_built_in_info+0xc8>)
 801004c:	f7f0 f85a 	bl	8000104 <strcmp>
 8010050:	2800      	cmp	r0, #0
 8010052:	d001      	beq.n	8010058 <lv_img_decoder_built_in_info+0x78>
 8010054:	2400      	movs	r4, #0
 8010056:	e7e4      	b.n	8010022 <lv_img_decoder_built_in_info+0x42>
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 8010058:	2202      	movs	r2, #2
 801005a:	0029      	movs	r1, r5
 801005c:	a801      	add	r0, sp, #4
 801005e:	f004 fc41 	bl	80148e4 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 8010062:	2800      	cmp	r0, #0
 8010064:	d008      	beq.n	8010078 <lv_img_decoder_built_in_info+0x98>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8010066:	221f      	movs	r2, #31
 8010068:	7833      	ldrb	r3, [r6, #0]
 801006a:	06db      	lsls	r3, r3, #27
 801006c:	0edb      	lsrs	r3, r3, #27
 801006e:	331c      	adds	r3, #28
 8010070:	4013      	ands	r3, r2
 8010072:	2b10      	cmp	r3, #16
 8010074:	d9d5      	bls.n	8010022 <lv_img_decoder_built_in_info+0x42>
 8010076:	e7ed      	b.n	8010054 <lv_img_decoder_built_in_info+0x74>
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 8010078:	466b      	mov	r3, sp
 801007a:	2204      	movs	r2, #4
 801007c:	0031      	movs	r1, r6
 801007e:	a801      	add	r0, sp, #4
 8010080:	f004 fcb0 	bl	80149e4 <lv_fs_read>
 8010084:	0005      	movs	r5, r0
            lv_fs_close(&f);
 8010086:	a801      	add	r0, sp, #4
 8010088:	f004 fc86 	bl	8014998 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 801008c:	2d00      	cmp	r5, #0
 801008e:	d1e1      	bne.n	8010054 <lv_img_decoder_built_in_info+0x74>
 8010090:	9b00      	ldr	r3, [sp, #0]
 8010092:	2b04      	cmp	r3, #4
 8010094:	d0e7      	beq.n	8010066 <lv_img_decoder_built_in_info+0x86>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8010096:	2400      	movs	r4, #0
 8010098:	e7c3      	b.n	8010022 <lv_img_decoder_built_in_info+0x42>
 801009a:	46c0      	nop			; (mov r8, r8)
 801009c:	ffe003e0 	.word	0xffe003e0
 80100a0:	001ffc1f 	.word	0x001ffc1f
 80100a4:	0020040b 	.word	0x0020040b
 80100a8:	0801b874 	.word	0x0801b874

080100ac <lv_img_decoder_built_in_read_line>:
{
 80100ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100ae:	46de      	mov	lr, fp
 80100b0:	464e      	mov	r6, r9
 80100b2:	4657      	mov	r7, sl
 80100b4:	4645      	mov	r5, r8
 80100b6:	b5e0      	push	{r5, r6, r7, lr}
 80100b8:	b08b      	sub	sp, #44	; 0x2c
 80100ba:	469b      	mov	fp, r3
 80100bc:	ab14      	add	r3, sp, #80	; 0x50
 80100be:	2600      	movs	r6, #0
 80100c0:	5f9e      	ldrsh	r6, [r3, r6]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80100c2:	231e      	movs	r3, #30
 80100c4:	7d08      	ldrb	r0, [r1, #20]
{
 80100c6:	000c      	movs	r4, r1
 80100c8:	9201      	str	r2, [sp, #4]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80100ca:	4003      	ands	r3, r0
 80100cc:	2b04      	cmp	r3, #4
 80100ce:	d014      	beq.n	80100fa <lv_img_decoder_built_in_read_line+0x4e>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80100d0:	231f      	movs	r3, #31
 80100d2:	4003      	ands	r3, r0
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 80100d4:	2b06      	cmp	r3, #6
 80100d6:	d010      	beq.n	80100fa <lv_img_decoder_built_in_read_line+0x4e>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 80100d8:	001a      	movs	r2, r3
 80100da:	3a0b      	subs	r2, #11
 80100dc:	2a03      	cmp	r2, #3
 80100de:	d800      	bhi.n	80100e2 <lv_img_decoder_built_in_read_line+0x36>
 80100e0:	e09d      	b.n	801021e <lv_img_decoder_built_in_read_line+0x172>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 80100e2:	3b07      	subs	r3, #7
 80100e4:	2b03      	cmp	r3, #3
 80100e6:	d935      	bls.n	8010154 <lv_img_decoder_built_in_read_line+0xa8>
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t * fs_buf = lv_mem_buf_get(w);
    if(fs_buf == NULL) return LV_RES_INV;
 80100e8:	2500      	movs	r5, #0
}
 80100ea:	0028      	movs	r0, r5
 80100ec:	b00b      	add	sp, #44	; 0x2c
 80100ee:	bcf0      	pop	{r4, r5, r6, r7}
 80100f0:	46bb      	mov	fp, r7
 80100f2:	46b2      	mov	sl, r6
 80100f4:	46a9      	mov	r9, r5
 80100f6:	46a0      	mov	r8, r4
 80100f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80100fa:	7c25      	ldrb	r5, [r4, #16]
 80100fc:	2d01      	cmp	r5, #1
 80100fe:	d1f3      	bne.n	80100e8 <lv_img_decoder_built_in_read_line+0x3c>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8010100:	6a63      	ldr	r3, [r4, #36]	; 0x24
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8010102:	06c0      	lsls	r0, r0, #27
 8010104:	0ec0      	lsrs	r0, r0, #27
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8010106:	4699      	mov	r9, r3
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8010108:	f7ff fa7c 	bl	800f604 <lv_img_cf_get_px_size>
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 801010c:	465b      	mov	r3, fp
 801010e:	6961      	ldr	r1, [r4, #20]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8010110:	4682      	mov	sl, r0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8010112:	02c9      	lsls	r1, r1, #11
 8010114:	0d49      	lsrs	r1, r1, #21
 8010116:	434b      	muls	r3, r1
 8010118:	0019      	movs	r1, r3
 801011a:	9b01      	ldr	r3, [sp, #4]
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 801011c:	2200      	movs	r2, #0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 801011e:	469c      	mov	ip, r3
 8010120:	4461      	add	r1, ip
 8010122:	4341      	muls	r1, r0
 8010124:	10c9      	asrs	r1, r1, #3
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 8010126:	4648      	mov	r0, r9
    pos += 4; /*Skip the header*/
 8010128:	3104      	adds	r1, #4
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 801012a:	f004 fd2d 	bl	8014b88 <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 801012e:	2800      	cmp	r0, #0
 8010130:	d1da      	bne.n	80100e8 <lv_img_decoder_built_in_read_line+0x3c>
    uint32_t btr = len * (px_size >> 3);
 8010132:	4653      	mov	r3, sl
 8010134:	08db      	lsrs	r3, r3, #3
 8010136:	b2db      	uxtb	r3, r3
 8010138:	435e      	muls	r6, r3
    uint32_t br  = 0;
 801013a:	9006      	str	r0, [sp, #24]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 801013c:	0032      	movs	r2, r6
 801013e:	4648      	mov	r0, r9
 8010140:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010142:	ab06      	add	r3, sp, #24
 8010144:	f004 fc4e 	bl	80149e4 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 8010148:	2800      	cmp	r0, #0
 801014a:	d1cd      	bne.n	80100e8 <lv_img_decoder_built_in_read_line+0x3c>
 801014c:	9b06      	ldr	r3, [sp, #24]
 801014e:	429e      	cmp	r6, r3
 8010150:	d1ca      	bne.n	80100e8 <lv_img_decoder_built_in_read_line+0x3c>
 8010152:	e7ca      	b.n	80100ea <lv_img_decoder_built_in_read_line+0x3e>
}

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8010154:	06c0      	lsls	r0, r0, #27
 8010156:	0ec0      	lsrs	r0, r0, #27
 8010158:	f7ff fa54 	bl	800f604 <lv_img_cf_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 801015c:	7d22      	ldrb	r2, [r4, #20]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 801015e:	4680      	mov	r8, r0
    switch(dsc->header.cf) {
 8010160:	06d2      	lsls	r2, r2, #27
 8010162:	0ed2      	lsrs	r2, r2, #27
 8010164:	2a09      	cmp	r2, #9
 8010166:	d100      	bne.n	801016a <lv_img_decoder_built_in_read_line+0xbe>
 8010168:	e144      	b.n	80103f4 <lv_img_decoder_built_in_read_line+0x348>
 801016a:	d900      	bls.n	801016e <lv_img_decoder_built_in_read_line+0xc2>
 801016c:	e0ea      	b.n	8010344 <lv_img_decoder_built_in_read_line+0x298>
 801016e:	2a07      	cmp	r2, #7
 8010170:	d100      	bne.n	8010174 <lv_img_decoder_built_in_read_line+0xc8>
 8010172:	e153      	b.n	801041c <lv_img_decoder_built_in_read_line+0x370>
 8010174:	2a08      	cmp	r2, #8
 8010176:	d000      	beq.n	801017a <lv_img_decoder_built_in_read_line+0xce>
 8010178:	e167      	b.n	801044a <lv_img_decoder_built_in_read_line+0x39e>
            ofs += w * y + (x >> 3); /*First pixel*/
            ofs += 8;                /*Skip the palette*/
            pos = 7 - (x & 0x7);
            break;
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801017a:	6963      	ldr	r3, [r4, #20]
            ofs += w * y + (x >> 2); /*First pixel*/
 801017c:	465d      	mov	r5, fp
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801017e:	02d8      	lsls	r0, r3, #11
            ofs += 16;               /*Skip the palette*/
 8010180:	2310      	movs	r3, #16
 8010182:	469a      	mov	sl, r3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8010184:	0d40      	lsrs	r0, r0, #21
 8010186:	3003      	adds	r0, #3
 8010188:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 801018a:	4345      	muls	r5, r0
 801018c:	9a01      	ldr	r2, [sp, #4]
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;

    uint8_t * fs_buf = lv_mem_buf_get(w);
 801018e:	4683      	mov	fp, r0
            ofs += w * y + (x >> 2); /*First pixel*/
 8010190:	1091      	asrs	r1, r2, #2
 8010192:	186d      	adds	r5, r5, r1
            ofs += 16;               /*Skip the palette*/
 8010194:	44aa      	add	sl, r5
            pos = 6 - (x & 0x3) * 2;
 8010196:	2503      	movs	r5, #3
 8010198:	b297      	uxth	r7, r2
 801019a:	43bd      	bics	r5, r7
 801019c:	006d      	lsls	r5, r5, #1
    uint8_t * fs_buf = lv_mem_buf_get(w);
 801019e:	4658      	mov	r0, fp
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80101a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
    uint8_t * fs_buf = lv_mem_buf_get(w);
 80101a2:	f004 feeb 	bl	8014f7c <lv_mem_buf_get>
 80101a6:	4681      	mov	r9, r0
    if(fs_buf == NULL) return LV_RES_INV;
 80101a8:	2800      	cmp	r0, #0
 80101aa:	d09d      	beq.n	80100e8 <lv_img_decoder_built_in_read_line+0x3c>
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80101ac:	7c23      	ldrb	r3, [r4, #16]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d000      	beq.n	80101b4 <lv_img_decoder_built_in_read_line+0x108>
 80101b2:	e0ef      	b.n	8010394 <lv_img_decoder_built_in_read_line+0x2e8>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
 80101b4:	6863      	ldr	r3, [r4, #4]
 80101b6:	6899      	ldr	r1, [r3, #8]
 80101b8:	4451      	add	r1, sl
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 80101ba:	2e00      	cmp	r6, #0
 80101bc:	dd2a      	ble.n	8010214 <lv_img_decoder_built_in_read_line+0x168>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80101be:	4643      	mov	r3, r8
 80101c0:	2001      	movs	r0, #1
 80101c2:	3e01      	subs	r6, #1
 80101c4:	b2b6      	uxth	r6, r6
 80101c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80101c8:	4098      	lsls	r0, r3
 80101ca:	0073      	lsls	r3, r6, #1
 80101cc:	199e      	adds	r6, r3, r6
 80101ce:	1cd3      	adds	r3, r2, #3
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 80101d0:	2408      	movs	r4, #8
 80101d2:	18f6      	adds	r6, r6, r3
 80101d4:	4643      	mov	r3, r8
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80101d6:	3801      	subs	r0, #1
            pos = 8 - px_size;
 80101d8:	1ae4      	subs	r4, r4, r3
        uint8_t val_act = (*data_tmp >> pos) & mask;
 80101da:	b240      	sxtb	r0, r0
            pos = 8 - px_size;
 80101dc:	b263      	sxtb	r3, r4
 80101de:	469c      	mov	ip, r3
 80101e0:	4682      	mov	sl, r0
 80101e2:	46c3      	mov	fp, r8
        uint8_t val_act = (*data_tmp >> pos) & mask;
 80101e4:	780b      	ldrb	r3, [r1, #0]
 80101e6:	4650      	mov	r0, sl
 80101e8:	412b      	asrs	r3, r5
 80101ea:	4003      	ands	r3, r0
        lv_color_t color = user_data->palette[val_act];
 80101ec:	68fc      	ldr	r4, [r7, #12]
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	0058      	lsls	r0, r3, #1
 80101f2:	5b00      	ldrh	r0, [r0, r4]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 80101f4:	7010      	strb	r0, [r2, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 80101f6:	0a00      	lsrs	r0, r0, #8
 80101f8:	7050      	strb	r0, [r2, #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 80101fa:	6938      	ldr	r0, [r7, #16]
 80101fc:	5cc3      	ldrb	r3, [r0, r3]
 80101fe:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
 8010200:	465b      	mov	r3, fp
 8010202:	1aeb      	subs	r3, r5, r3
 8010204:	b25d      	sxtb	r5, r3
        if(pos < 0) {
 8010206:	061b      	lsls	r3, r3, #24
 8010208:	d501      	bpl.n	801020e <lv_img_decoder_built_in_read_line+0x162>
            pos = 8 - px_size;
 801020a:	4665      	mov	r5, ip
            data_tmp++;
 801020c:	3101      	adds	r1, #1
    for(i = 0; i < len; i++) {
 801020e:	3203      	adds	r2, #3
 8010210:	42b2      	cmp	r2, r6
 8010212:	d1e7      	bne.n	80101e4 <lv_img_decoder_built_in_read_line+0x138>
        }
    }
    lv_mem_buf_release(fs_buf);
 8010214:	4648      	mov	r0, r9
 8010216:	f004 ff55 	bl	80150c4 <lv_mem_buf_release>
    return LV_RES_OK;
 801021a:	2501      	movs	r5, #1
 801021c:	e765      	b.n	80100ea <lv_img_decoder_built_in_read_line+0x3e>
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 801021e:	4b8d      	ldr	r3, [pc, #564]	; (8010454 <lv_img_decoder_built_in_read_line+0x3a8>)
 8010220:	aa04      	add	r2, sp, #16
 8010222:	8013      	strh	r3, [r2, #0]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8010224:	4b8c      	ldr	r3, [pc, #560]	; (8010458 <lv_img_decoder_built_in_read_line+0x3ac>)
 8010226:	9305      	str	r3, [sp, #20]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8010228:	ab06      	add	r3, sp, #24
 801022a:	469a      	mov	sl, r3
 801022c:	4652      	mov	r2, sl
 801022e:	4b8b      	ldr	r3, [pc, #556]	; (801045c <lv_img_decoder_built_in_read_line+0x3b0>)
 8010230:	cba2      	ldmia	r3!, {r1, r5, r7}
 8010232:	c2a2      	stmia	r2!, {r1, r5, r7}
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	6013      	str	r3, [r2, #0]
    lv_color_t bg_color = dsc->color;
 8010238:	8922      	ldrh	r2, [r4, #8]
    for(i = 0; i < len; i++) {
 801023a:	2e00      	cmp	r6, #0
 801023c:	dd0d      	ble.n	801025a <lv_img_decoder_built_in_read_line+0x1ae>
 801023e:	2000      	movs	r0, #0
 8010240:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010242:	9f01      	ldr	r7, [sp, #4]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8010244:	0a11      	lsrs	r1, r2, #8
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8010246:	b2d2      	uxtb	r2, r2
 8010248:	3001      	adds	r0, #1
 801024a:	b200      	sxth	r0, r0
 801024c:	701a      	strb	r2, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 801024e:	7059      	strb	r1, [r3, #1]
    for(i = 0; i < len; i++) {
 8010250:	3303      	adds	r3, #3
 8010252:	4286      	cmp	r6, r0
 8010254:	d1f8      	bne.n	8010248 <lv_img_decoder_built_in_read_line+0x19c>
 8010256:	7d20      	ldrb	r0, [r4, #20]
 8010258:	9701      	str	r7, [sp, #4]
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 801025a:	06c0      	lsls	r0, r0, #27
 801025c:	0ec0      	lsrs	r0, r0, #27
 801025e:	f7ff f9d1 	bl	800f604 <lv_img_cf_get_px_size>
    switch(dsc->header.cf) {
 8010262:	7d23      	ldrb	r3, [r4, #20]
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8010264:	4680      	mov	r8, r0
    switch(dsc->header.cf) {
 8010266:	06db      	lsls	r3, r3, #27
 8010268:	0edb      	lsrs	r3, r3, #27
 801026a:	2b0d      	cmp	r3, #13
 801026c:	d100      	bne.n	8010270 <lv_img_decoder_built_in_read_line+0x1c4>
 801026e:	e09f      	b.n	80103b0 <lv_img_decoder_built_in_read_line+0x304>
 8010270:	d859      	bhi.n	8010326 <lv_img_decoder_built_in_read_line+0x27a>
 8010272:	2b0b      	cmp	r3, #11
 8010274:	d100      	bne.n	8010278 <lv_img_decoder_built_in_read_line+0x1cc>
 8010276:	e0ac      	b.n	80103d2 <lv_img_decoder_built_in_read_line+0x326>
 8010278:	2b0c      	cmp	r3, #12
 801027a:	d000      	beq.n	801027e <lv_img_decoder_built_in_read_line+0x1d2>
 801027c:	e0df      	b.n	801043e <lv_img_decoder_built_in_read_line+0x392>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801027e:	6963      	ldr	r3, [r4, #20]
            ofs += w * y + (x >> 2); /*First pixel*/
 8010280:	465d      	mov	r5, fp
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8010282:	02d8      	lsls	r0, r3, #11
 8010284:	0d40      	lsrs	r0, r0, #21
            ofs += w * y + (x >> 2); /*First pixel*/
 8010286:	9b01      	ldr	r3, [sp, #4]
            pos = 6 - (x & 0x3) * 2;
 8010288:	2703      	movs	r7, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801028a:	3003      	adds	r0, #3
 801028c:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 801028e:	1099      	asrs	r1, r3, #2
            pos = 6 - (x & 0x3) * 2;
 8010290:	b29a      	uxth	r2, r3
            opa_table = alpha2_opa_table;
 8010292:	ab05      	add	r3, sp, #20
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8010294:	4681      	mov	r9, r0
            opa_table = alpha2_opa_table;
 8010296:	469a      	mov	sl, r3
            ofs += w * y + (x >> 2); /*First pixel*/
 8010298:	4345      	muls	r5, r0
            pos = 6 - (x & 0x3) * 2;
 801029a:	4397      	bics	r7, r2
            ofs += w * y + (x >> 2); /*First pixel*/
 801029c:	186d      	adds	r5, r5, r1
            pos = 6 - (x & 0x3) * 2;
 801029e:	007f      	lsls	r7, r7, #1
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80102a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    uint8_t * fs_buf = lv_mem_buf_get(w);
 80102a2:	4648      	mov	r0, r9
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80102a4:	469b      	mov	fp, r3
    uint8_t * fs_buf = lv_mem_buf_get(w);
 80102a6:	f004 fe69 	bl	8014f7c <lv_mem_buf_get>
 80102aa:	9003      	str	r0, [sp, #12]
    if(fs_buf == NULL) return LV_RES_INV;
 80102ac:	2800      	cmp	r0, #0
 80102ae:	d100      	bne.n	80102b2 <lv_img_decoder_built_in_read_line+0x206>
 80102b0:	e71a      	b.n	80100e8 <lv_img_decoder_built_in_read_line+0x3c>
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80102b2:	7c23      	ldrb	r3, [r4, #16]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d160      	bne.n	801037a <lv_img_decoder_built_in_read_line+0x2ce>
        data_tmp = img_dsc->data + ofs;
 80102b8:	6863      	ldr	r3, [r4, #4]
 80102ba:	6899      	ldr	r1, [r3, #8]
 80102bc:	194d      	adds	r5, r1, r5
    for(i = 0; i < len; i++) {
 80102be:	2e00      	cmp	r6, #0
 80102c0:	dd2c      	ble.n	801031c <lv_img_decoder_built_in_read_line+0x270>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80102c2:	4642      	mov	r2, r8
 80102c4:	2301      	movs	r3, #1
 80102c6:	4093      	lsls	r3, r2
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 80102c8:	221f      	movs	r2, #31
            pos = 8 - px_size;
 80102ca:	4641      	mov	r1, r8
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 80102cc:	4691      	mov	r9, r2
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80102ce:	3b01      	subs	r3, #1
            pos = 8 - px_size;
 80102d0:	2208      	movs	r2, #8
        uint8_t val_act = (*data_tmp >> pos) & mask;
 80102d2:	b25b      	sxtb	r3, r3
 80102d4:	469c      	mov	ip, r3
            pos = 8 - px_size;
 80102d6:	1a52      	subs	r2, r2, r1
 80102d8:	b252      	sxtb	r2, r2
 80102da:	4693      	mov	fp, r2
 80102dc:	4662      	mov	r2, ip
        uint8_t val_act = (*data_tmp >> pos) & mask;
 80102de:	2000      	movs	r0, #0
 80102e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
            pos = 8 - px_size;
 80102e2:	9201      	str	r2, [sp, #4]
 80102e4:	3302      	adds	r3, #2
 80102e6:	9402      	str	r4, [sp, #8]
        uint8_t val_act = (*data_tmp >> pos) & mask;
 80102e8:	782a      	ldrb	r2, [r5, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 80102ea:	464c      	mov	r4, r9
        uint8_t val_act = (*data_tmp >> pos) & mask;
 80102ec:	413a      	asrs	r2, r7
 80102ee:	9901      	ldr	r1, [sp, #4]
 80102f0:	400a      	ands	r2, r1
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 80102f2:	9902      	ldr	r1, [sp, #8]
        uint8_t val_act = (*data_tmp >> pos) & mask;
 80102f4:	b2d2      	uxtb	r2, r2
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 80102f6:	7d09      	ldrb	r1, [r1, #20]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 80102f8:	4021      	ands	r1, r4
 80102fa:	290e      	cmp	r1, #14
 80102fc:	d001      	beq.n	8010302 <lv_img_decoder_built_in_read_line+0x256>
 80102fe:	4651      	mov	r1, sl
 8010300:	5c8a      	ldrb	r2, [r1, r2]
 8010302:	701a      	strb	r2, [r3, #0]
        pos -= px_size;
 8010304:	4642      	mov	r2, r8
 8010306:	1aba      	subs	r2, r7, r2
 8010308:	b257      	sxtb	r7, r2
        if(pos < 0) {
 801030a:	0612      	lsls	r2, r2, #24
 801030c:	d501      	bpl.n	8010312 <lv_img_decoder_built_in_read_line+0x266>
            pos = 8 - px_size;
 801030e:	465f      	mov	r7, fp
            data_tmp++;
 8010310:	3501      	adds	r5, #1
    for(i = 0; i < len; i++) {
 8010312:	3001      	adds	r0, #1
 8010314:	b200      	sxth	r0, r0
 8010316:	3303      	adds	r3, #3
 8010318:	4286      	cmp	r6, r0
 801031a:	d1e5      	bne.n	80102e8 <lv_img_decoder_built_in_read_line+0x23c>
    lv_mem_buf_release(fs_buf);
 801031c:	9803      	ldr	r0, [sp, #12]
 801031e:	f004 fed1 	bl	80150c4 <lv_mem_buf_release>
    return LV_RES_OK;
 8010322:	2501      	movs	r5, #1
 8010324:	e6e1      	b.n	80100ea <lv_img_decoder_built_in_read_line+0x3e>
    switch(dsc->header.cf) {
 8010326:	2b0e      	cmp	r3, #14
 8010328:	d11c      	bne.n	8010364 <lv_img_decoder_built_in_read_line+0x2b8>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 801032a:	6963      	ldr	r3, [r4, #20]
            ofs += w * y + x;  /*First pixel*/
 801032c:	465d      	mov	r5, fp
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 801032e:	02da      	lsls	r2, r3, #11
            ofs += w * y + x;  /*First pixel*/
 8010330:	9b01      	ldr	r3, [sp, #4]
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8010332:	0d52      	lsrs	r2, r2, #21
            ofs += w * y + x;  /*First pixel*/
 8010334:	469c      	mov	ip, r3
    const lv_opa_t * opa_table = NULL;
 8010336:	2300      	movs	r3, #0
            ofs += w * y + x;  /*First pixel*/
 8010338:	4355      	muls	r5, r2
    uint8_t * fs_buf = lv_mem_buf_get(w);
 801033a:	4691      	mov	r9, r2
            pos = 0;
 801033c:	2700      	movs	r7, #0
    const lv_opa_t * opa_table = NULL;
 801033e:	469a      	mov	sl, r3
            ofs += w * y + x;  /*First pixel*/
 8010340:	4465      	add	r5, ip
            break;
 8010342:	e7ad      	b.n	80102a0 <lv_img_decoder_built_in_read_line+0x1f4>
    switch(dsc->header.cf) {
 8010344:	2a0a      	cmp	r2, #10
 8010346:	d113      	bne.n	8010370 <lv_img_decoder_built_in_read_line+0x2c4>
            ofs += w * y + x;  /*First pixel*/
 8010348:	465d      	mov	r5, fp
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 801034a:	6963      	ldr	r3, [r4, #20]
            ofs += w * y + x;  /*First pixel*/
 801034c:	9a01      	ldr	r2, [sp, #4]
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 801034e:	02db      	lsls	r3, r3, #11
 8010350:	0d5b      	lsrs	r3, r3, #21
            ofs += w * y + x;  /*First pixel*/
 8010352:	435d      	muls	r5, r3
 8010354:	18af      	adds	r7, r5, r2
            ofs += 1024;       /*Skip the palette*/
 8010356:	2280      	movs	r2, #128	; 0x80
 8010358:	00d2      	lsls	r2, r2, #3
 801035a:	4692      	mov	sl, r2
    uint8_t * fs_buf = lv_mem_buf_get(w);
 801035c:	469b      	mov	fp, r3
            pos = 0;
 801035e:	2500      	movs	r5, #0
            ofs += 1024;       /*Skip the palette*/
 8010360:	44ba      	add	sl, r7
            break;
 8010362:	e71c      	b.n	801019e <lv_img_decoder_built_in_read_line+0xf2>
    switch(dsc->header.cf) {
 8010364:	2300      	movs	r3, #0
 8010366:	2700      	movs	r7, #0
 8010368:	4699      	mov	r9, r3
 801036a:	2500      	movs	r5, #0
 801036c:	469a      	mov	sl, r3
 801036e:	e797      	b.n	80102a0 <lv_img_decoder_built_in_read_line+0x1f4>
    switch(dsc->header.cf) {
 8010370:	2300      	movs	r3, #0
 8010372:	2500      	movs	r5, #0
 8010374:	469b      	mov	fp, r3
 8010376:	469a      	mov	sl, r3
 8010378:	e711      	b.n	801019e <lv_img_decoder_built_in_read_line+0xf2>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 801037a:	1d29      	adds	r1, r5, #4
 801037c:	2200      	movs	r2, #0
 801037e:	4658      	mov	r0, fp
 8010380:	f004 fc02 	bl	8014b88 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8010384:	9d03      	ldr	r5, [sp, #12]
 8010386:	2300      	movs	r3, #0
 8010388:	464a      	mov	r2, r9
 801038a:	0029      	movs	r1, r5
 801038c:	4658      	mov	r0, fp
 801038e:	f004 fb29 	bl	80149e4 <lv_fs_read>
        data_tmp = fs_buf;
 8010392:	e794      	b.n	80102be <lv_img_decoder_built_in_read_line+0x212>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8010394:	4651      	mov	r1, sl
 8010396:	2200      	movs	r2, #0
 8010398:	3104      	adds	r1, #4
 801039a:	0038      	movs	r0, r7
 801039c:	f004 fbf4 	bl	8014b88 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 80103a0:	4649      	mov	r1, r9
 80103a2:	2300      	movs	r3, #0
 80103a4:	465a      	mov	r2, fp
 80103a6:	0038      	movs	r0, r7
 80103a8:	f004 fb1c 	bl	80149e4 <lv_fs_read>
 80103ac:	4649      	mov	r1, r9
 80103ae:	e704      	b.n	80101ba <lv_img_decoder_built_in_read_line+0x10e>
            ofs += w * y + (x >> 1); /*First pixel*/
 80103b0:	465d      	mov	r5, fp
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80103b2:	6963      	ldr	r3, [r4, #20]
            pos = 4 - (x & 0x1) * 4;
 80103b4:	2704      	movs	r7, #4
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80103b6:	02da      	lsls	r2, r3, #11
 80103b8:	0d52      	lsrs	r2, r2, #21
 80103ba:	3201      	adds	r2, #1
 80103bc:	1052      	asrs	r2, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 80103be:	4355      	muls	r5, r2
 80103c0:	9b01      	ldr	r3, [sp, #4]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 80103c2:	4691      	mov	r9, r2
            ofs += w * y + (x >> 1); /*First pixel*/
 80103c4:	1059      	asrs	r1, r3, #1
 80103c6:	186d      	adds	r5, r5, r1
            pos = 4 - (x & 0x1) * 4;
 80103c8:	07db      	lsls	r3, r3, #31
 80103ca:	d400      	bmi.n	80103ce <lv_img_decoder_built_in_read_line+0x322>
 80103cc:	e768      	b.n	80102a0 <lv_img_decoder_built_in_read_line+0x1f4>
 80103ce:	2700      	movs	r7, #0
 80103d0:	e766      	b.n	80102a0 <lv_img_decoder_built_in_read_line+0x1f4>
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 80103d2:	6963      	ldr	r3, [r4, #20]
            ofs += w * y + (x >> 3); /*First pixel*/
 80103d4:	465d      	mov	r5, fp
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 80103d6:	02da      	lsls	r2, r3, #11
            pos = 7 - (x & 0x7);
 80103d8:	2307      	movs	r3, #7
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 80103da:	0d52      	lsrs	r2, r2, #21
 80103dc:	3207      	adds	r2, #7
 80103de:	10d2      	asrs	r2, r2, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 80103e0:	9801      	ldr	r0, [sp, #4]
 80103e2:	4355      	muls	r5, r2
            pos = 7 - (x & 0x7);
 80103e4:	4383      	bics	r3, r0
 80103e6:	001f      	movs	r7, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 80103e8:	10c1      	asrs	r1, r0, #3
            opa_table = alpha1_opa_table;
 80103ea:	ab04      	add	r3, sp, #16
    uint8_t * fs_buf = lv_mem_buf_get(w);
 80103ec:	4691      	mov	r9, r2
            opa_table = alpha1_opa_table;
 80103ee:	469a      	mov	sl, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 80103f0:	186d      	adds	r5, r5, r1
            break;
 80103f2:	e755      	b.n	80102a0 <lv_img_decoder_built_in_read_line+0x1f4>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80103f4:	6963      	ldr	r3, [r4, #20]
            ofs += w * y + (x >> 1); /*First pixel*/
 80103f6:	465d      	mov	r5, fp
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80103f8:	02da      	lsls	r2, r3, #11
            ofs += 64;               /*Skip the palette*/
 80103fa:	2340      	movs	r3, #64	; 0x40
 80103fc:	469a      	mov	sl, r3
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80103fe:	0d52      	lsrs	r2, r2, #21
 8010400:	3201      	adds	r2, #1
 8010402:	1052      	asrs	r2, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 8010404:	4355      	muls	r5, r2
 8010406:	9801      	ldr	r0, [sp, #4]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8010408:	4693      	mov	fp, r2
            ofs += w * y + (x >> 1); /*First pixel*/
 801040a:	1041      	asrs	r1, r0, #1
 801040c:	186d      	adds	r5, r5, r1
            ofs += 64;               /*Skip the palette*/
 801040e:	44aa      	add	sl, r5
            pos = 4 - (x & 0x1) * 4;
 8010410:	2504      	movs	r5, #4
 8010412:	07c3      	lsls	r3, r0, #31
 8010414:	d400      	bmi.n	8010418 <lv_img_decoder_built_in_read_line+0x36c>
 8010416:	e6c2      	b.n	801019e <lv_img_decoder_built_in_read_line+0xf2>
            pos = 0;
 8010418:	2500      	movs	r5, #0
 801041a:	e6c0      	b.n	801019e <lv_img_decoder_built_in_read_line+0xf2>
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 801041c:	6963      	ldr	r3, [r4, #20]
            ofs += w * y + (x >> 3); /*First pixel*/
 801041e:	465d      	mov	r5, fp
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8010420:	02d8      	lsls	r0, r3, #11
            ofs += 8;                /*Skip the palette*/
 8010422:	2308      	movs	r3, #8
 8010424:	469a      	mov	sl, r3
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8010426:	0d40      	lsrs	r0, r0, #21
 8010428:	3007      	adds	r0, #7
 801042a:	10c0      	asrs	r0, r0, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 801042c:	4345      	muls	r5, r0
 801042e:	9f01      	ldr	r7, [sp, #4]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 8010430:	4683      	mov	fp, r0
            ofs += w * y + (x >> 3); /*First pixel*/
 8010432:	10f9      	asrs	r1, r7, #3
 8010434:	186d      	adds	r5, r5, r1
            pos = 7 - (x & 0x7);
 8010436:	43ba      	bics	r2, r7
            ofs += 8;                /*Skip the palette*/
 8010438:	44aa      	add	sl, r5
            pos = 7 - (x & 0x7);
 801043a:	0015      	movs	r5, r2
            break;
 801043c:	e6af      	b.n	801019e <lv_img_decoder_built_in_read_line+0xf2>
    switch(dsc->header.cf) {
 801043e:	2300      	movs	r3, #0
 8010440:	4699      	mov	r9, r3
 8010442:	001f      	movs	r7, r3
 8010444:	001d      	movs	r5, r3
 8010446:	469a      	mov	sl, r3
 8010448:	e72a      	b.n	80102a0 <lv_img_decoder_built_in_read_line+0x1f4>
    switch(dsc->header.cf) {
 801044a:	2300      	movs	r3, #0
 801044c:	469b      	mov	fp, r3
 801044e:	469a      	mov	sl, r3
 8010450:	001d      	movs	r5, r3
 8010452:	e6a4      	b.n	801019e <lv_img_decoder_built_in_read_line+0xf2>
 8010454:	ffffff00 	.word	0xffffff00
 8010458:	ffaa5500 	.word	0xffaa5500
 801045c:	0801b550 	.word	0x0801b550

08010460 <lv_img_decoder_built_in_open>:
{
 8010460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010462:	46c6      	mov	lr, r8
 8010464:	b500      	push	{lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8010466:	7c0b      	ldrb	r3, [r1, #16]
{
 8010468:	000c      	movs	r4, r1
 801046a:	b084      	sub	sp, #16
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 801046c:	2b01      	cmp	r3, #1
 801046e:	d03a      	beq.n	80104e6 <lv_img_decoder_built_in_open+0x86>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8010470:	2b00      	cmp	r3, #0
 8010472:	d110      	bne.n	8010496 <lv_img_decoder_built_in_open+0x36>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 8010474:	684a      	ldr	r2, [r1, #4]
 8010476:	6893      	ldr	r3, [r2, #8]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d032      	beq.n	80104e2 <lv_img_decoder_built_in_open+0x82>
    lv_img_cf_t cf = dsc->header.cf;
 801047c:	7d08      	ldrb	r0, [r1, #20]
 801047e:	06c0      	lsls	r0, r0, #27
 8010480:	0ec0      	lsrs	r0, r0, #27
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8010482:	1f01      	subs	r1, r0, #4
 8010484:	2902      	cmp	r1, #2
 8010486:	d85e      	bhi.n	8010546 <lv_img_decoder_built_in_open+0xe6>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8010488:	61a3      	str	r3, [r4, #24]
            return LV_RES_OK;
 801048a:	2501      	movs	r5, #1
}
 801048c:	0028      	movs	r0, r5
 801048e:	b004      	add	sp, #16
 8010490:	bc80      	pop	{r7}
 8010492:	46b8      	mov	r8, r7
 8010494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_img_cf_t cf = dsc->header.cf;
 8010496:	7d08      	ldrb	r0, [r1, #20]
 8010498:	06c0      	lsls	r0, r0, #27
 801049a:	0ec0      	lsrs	r0, r0, #27
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 801049c:	1f03      	subs	r3, r0, #4
 801049e:	2b02      	cmp	r3, #2
 80104a0:	d9f3      	bls.n	801048a <lv_img_decoder_built_in_open+0x2a>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 80104a2:	2814      	cmp	r0, #20
 80104a4:	d0f1      	beq.n	801048a <lv_img_decoder_built_in_open+0x2a>
 80104a6:	280e      	cmp	r0, #14
 80104a8:	d046      	beq.n	8010538 <lv_img_decoder_built_in_open+0xd8>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 80104aa:	1fc3      	subs	r3, r0, #7
 80104ac:	2b03      	cmp	r3, #3
 80104ae:	d94e      	bls.n	801054e <lv_img_decoder_built_in_open+0xee>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT) {
 80104b0:	380b      	subs	r0, #11
 80104b2:	2802      	cmp	r0, #2
 80104b4:	d9e9      	bls.n	801048a <lv_img_decoder_built_in_open+0x2a>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80104b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if(user_data) {
 80104b8:	2d00      	cmp	r5, #0
 80104ba:	d012      	beq.n	80104e2 <lv_img_decoder_built_in_open+0x82>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80104bc:	7c23      	ldrb	r3, [r4, #16]
 80104be:	2b01      	cmp	r3, #1
 80104c0:	d100      	bne.n	80104c4 <lv_img_decoder_built_in_open+0x64>
 80104c2:	e0c1      	b.n	8010648 <lv_img_decoder_built_in_open+0x1e8>
        if(user_data->palette) lv_mem_free(user_data->palette);
 80104c4:	68e8      	ldr	r0, [r5, #12]
 80104c6:	2800      	cmp	r0, #0
 80104c8:	d001      	beq.n	80104ce <lv_img_decoder_built_in_open+0x6e>
 80104ca:	f004 fcfb 	bl	8014ec4 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 80104ce:	6928      	ldr	r0, [r5, #16]
 80104d0:	2800      	cmp	r0, #0
 80104d2:	d001      	beq.n	80104d8 <lv_img_decoder_built_in_open+0x78>
 80104d4:	f004 fcf6 	bl	8014ec4 <lv_mem_free>
        lv_mem_free(user_data);
 80104d8:	0028      	movs	r0, r5
 80104da:	f004 fcf3 	bl	8014ec4 <lv_mem_free>
        dsc->user_data = NULL;
 80104de:	2300      	movs	r3, #0
 80104e0:	6263      	str	r3, [r4, #36]	; 0x24
        return LV_RES_INV;
 80104e2:	2500      	movs	r5, #0
 80104e4:	e7d2      	b.n	801048c <lv_img_decoder_built_in_open+0x2c>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 80104e6:	6848      	ldr	r0, [r1, #4]
 80104e8:	f004 fba0 	bl	8014c2c <lv_fs_get_ext>
 80104ec:	496b      	ldr	r1, [pc, #428]	; (801069c <lv_img_decoder_built_in_open+0x23c>)
 80104ee:	f7ef fe09 	bl	8000104 <strcmp>
 80104f2:	2800      	cmp	r0, #0
 80104f4:	d1f5      	bne.n	80104e2 <lv_img_decoder_built_in_open+0x82>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 80104f6:	af01      	add	r7, sp, #4
 80104f8:	2202      	movs	r2, #2
 80104fa:	0038      	movs	r0, r7
 80104fc:	6861      	ldr	r1, [r4, #4]
 80104fe:	f004 f9f1 	bl	80148e4 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 8010502:	2800      	cmp	r0, #0
 8010504:	d1ed      	bne.n	80104e2 <lv_img_decoder_built_in_open+0x82>
        if(dsc->user_data == NULL) {
 8010506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010508:	2b00      	cmp	r3, #0
 801050a:	d100      	bne.n	801050e <lv_img_decoder_built_in_open+0xae>
 801050c:	e090      	b.n	8010630 <lv_img_decoder_built_in_open+0x1d0>
    while(len) {
 801050e:	466a      	mov	r2, sp
 8010510:	3205      	adds	r2, #5
 8010512:	1a9a      	subs	r2, r3, r2
 8010514:	2a02      	cmp	r2, #2
 8010516:	d972      	bls.n	80105fe <lv_img_decoder_built_in_open+0x19e>
 8010518:	079a      	lsls	r2, r3, #30
 801051a:	d170      	bne.n	80105fe <lv_img_decoder_built_in_open+0x19e>
        *d8 = *s8;
 801051c:	9a01      	ldr	r2, [sp, #4]
 801051e:	601a      	str	r2, [r3, #0]
 8010520:	9a02      	ldr	r2, [sp, #8]
 8010522:	605a      	str	r2, [r3, #4]
 8010524:	9a03      	ldr	r2, [sp, #12]
 8010526:	609a      	str	r2, [r3, #8]
    lv_img_cf_t cf = dsc->header.cf;
 8010528:	7d20      	ldrb	r0, [r4, #20]
 801052a:	06c0      	lsls	r0, r0, #27
 801052c:	0ec0      	lsrs	r0, r0, #27
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 801052e:	1f03      	subs	r3, r0, #4
 8010530:	2b02      	cmp	r3, #2
 8010532:	d901      	bls.n	8010538 <lv_img_decoder_built_in_open+0xd8>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 8010534:	2814      	cmp	r0, #20
 8010536:	d1b6      	bne.n	80104a6 <lv_img_decoder_built_in_open+0x46>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8010538:	7c23      	ldrb	r3, [r4, #16]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d1a5      	bne.n	801048a <lv_img_decoder_built_in_open+0x2a>
 801053e:	6862      	ldr	r2, [r4, #4]
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8010540:	6893      	ldr	r3, [r2, #8]
 8010542:	61a3      	str	r3, [r4, #24]
 8010544:	e7a1      	b.n	801048a <lv_img_decoder_built_in_open+0x2a>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 8010546:	2814      	cmp	r0, #20
 8010548:	d1ad      	bne.n	80104a6 <lv_img_decoder_built_in_open+0x46>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 801054a:	6893      	ldr	r3, [r2, #8]
 801054c:	e7f9      	b.n	8010542 <lv_img_decoder_built_in_open+0xe2>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 801054e:	f7ff f859 	bl	800f604 <lv_img_cf_get_px_size>
        if(dsc->user_data == NULL) {
 8010552:	6a66      	ldr	r6, [r4, #36]	; 0x24
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 8010554:	0005      	movs	r5, r0
        if(dsc->user_data == NULL) {
 8010556:	2e00      	cmp	r6, #0
 8010558:	d045      	beq.n	80105e6 <lv_img_decoder_built_in_open+0x186>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 801055a:	2002      	movs	r0, #2
 801055c:	40a8      	lsls	r0, r5
 801055e:	f004 fc8f 	bl	8014e80 <lv_mem_alloc>
 8010562:	60f0      	str	r0, [r6, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 8010564:	2800      	cmp	r0, #0
 8010566:	d03c      	beq.n	80105e2 <lv_img_decoder_built_in_open+0x182>
        uint32_t palette_size = 1 << px_size;
 8010568:	2701      	movs	r7, #1
 801056a:	40af      	lsls	r7, r5
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 801056c:	0038      	movs	r0, r7
 801056e:	f004 fc87 	bl	8014e80 <lv_mem_alloc>
        uint32_t palette_size = 1 << px_size;
 8010572:	46b8      	mov	r8, r7
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 8010574:	6130      	str	r0, [r6, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 8010576:	2800      	cmp	r0, #0
 8010578:	d034      	beq.n	80105e4 <lv_img_decoder_built_in_open+0x184>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 801057a:	68f3      	ldr	r3, [r6, #12]
 801057c:	469c      	mov	ip, r3
 801057e:	2b00      	cmp	r3, #0
 8010580:	d099      	beq.n	80104b6 <lv_img_decoder_built_in_open+0x56>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8010582:	7c25      	ldrb	r5, [r4, #16]
 8010584:	2d01      	cmp	r5, #1
 8010586:	d063      	beq.n	8010650 <lv_img_decoder_built_in_open+0x1f0>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8010588:	6863      	ldr	r3, [r4, #4]
 801058a:	6899      	ldr	r1, [r3, #8]
            for(i = 0; i < palette_size; i++) {
 801058c:	2f00      	cmp	r7, #0
 801058e:	d100      	bne.n	8010592 <lv_img_decoder_built_in_open+0x132>
 8010590:	e77b      	b.n	801048a <lv_img_decoder_built_in_open+0x2a>
 8010592:	784b      	ldrb	r3, [r1, #1]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8010594:	089b      	lsrs	r3, r3, #2
 8010596:	015a      	lsls	r2, r3, #5
 8010598:	780b      	ldrb	r3, [r1, #0]
 801059a:	08db      	lsrs	r3, r3, #3
 801059c:	4313      	orrs	r3, r2
 801059e:	788a      	ldrb	r2, [r1, #2]
 80105a0:	08d2      	lsrs	r2, r2, #3
 80105a2:	02d2      	lsls	r2, r2, #11
 80105a4:	4313      	orrs	r3, r2
 80105a6:	4662      	mov	r2, ip
 80105a8:	8013      	strh	r3, [r2, #0]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 80105aa:	78cb      	ldrb	r3, [r1, #3]
 80105ac:	3104      	adds	r1, #4
 80105ae:	7003      	strb	r3, [r0, #0]
            for(i = 0; i < palette_size; i++) {
 80105b0:	2001      	movs	r0, #1
 80105b2:	2f01      	cmp	r7, #1
 80105b4:	d100      	bne.n	80105b8 <lv_img_decoder_built_in_open+0x158>
 80105b6:	e768      	b.n	801048a <lv_img_decoder_built_in_open+0x2a>
 80105b8:	784b      	ldrb	r3, [r1, #1]
 80105ba:	788a      	ldrb	r2, [r1, #2]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 80105bc:	089b      	lsrs	r3, r3, #2
 80105be:	015f      	lsls	r7, r3, #5
 80105c0:	780b      	ldrb	r3, [r1, #0]
 80105c2:	08d2      	lsrs	r2, r2, #3
 80105c4:	08db      	lsrs	r3, r3, #3
 80105c6:	02d2      	lsls	r2, r2, #11
 80105c8:	433b      	orrs	r3, r7
 80105ca:	4313      	orrs	r3, r2
 80105cc:	68f2      	ldr	r2, [r6, #12]
 80105ce:	0045      	lsls	r5, r0, #1
                user_data->opa[i]     = palette_p[i].ch.alpha;
 80105d0:	6934      	ldr	r4, [r6, #16]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 80105d2:	52ab      	strh	r3, [r5, r2]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 80105d4:	78cb      	ldrb	r3, [r1, #3]
            for(i = 0; i < palette_size; i++) {
 80105d6:	3104      	adds	r1, #4
                user_data->opa[i]     = palette_p[i].ch.alpha;
 80105d8:	5423      	strb	r3, [r4, r0]
            for(i = 0; i < palette_size; i++) {
 80105da:	3001      	adds	r0, #1
 80105dc:	4580      	cmp	r8, r0
 80105de:	d1eb      	bne.n	80105b8 <lv_img_decoder_built_in_open+0x158>
 80105e0:	e753      	b.n	801048a <lv_img_decoder_built_in_open+0x2a>
        LV_ASSERT_MALLOC(user_data->palette);
 80105e2:	e7fe      	b.n	80105e2 <lv_img_decoder_built_in_open+0x182>
        LV_ASSERT_MALLOC(user_data->opa);
 80105e4:	e7fe      	b.n	80105e4 <lv_img_decoder_built_in_open+0x184>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 80105e6:	2014      	movs	r0, #20
 80105e8:	f004 fc4a 	bl	8014e80 <lv_mem_alloc>
 80105ec:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 80105ee:	2800      	cmp	r0, #0
 80105f0:	d004      	beq.n	80105fc <lv_img_decoder_built_in_open+0x19c>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 80105f2:	2114      	movs	r1, #20
 80105f4:	f004 ffc6 	bl	8015584 <lv_memset_00>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80105f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80105fa:	e7ae      	b.n	801055a <lv_img_decoder_built_in_open+0xfa>
            LV_ASSERT_MALLOC(dsc->user_data);
 80105fc:	e7fe      	b.n	80105fc <lv_img_decoder_built_in_open+0x19c>
 80105fe:	783a      	ldrb	r2, [r7, #0]
 8010600:	701a      	strb	r2, [r3, #0]
 8010602:	787a      	ldrb	r2, [r7, #1]
 8010604:	705a      	strb	r2, [r3, #1]
 8010606:	78ba      	ldrb	r2, [r7, #2]
 8010608:	709a      	strb	r2, [r3, #2]
 801060a:	78fa      	ldrb	r2, [r7, #3]
 801060c:	70da      	strb	r2, [r3, #3]
 801060e:	793a      	ldrb	r2, [r7, #4]
 8010610:	711a      	strb	r2, [r3, #4]
 8010612:	797a      	ldrb	r2, [r7, #5]
 8010614:	715a      	strb	r2, [r3, #5]
 8010616:	79ba      	ldrb	r2, [r7, #6]
 8010618:	719a      	strb	r2, [r3, #6]
 801061a:	79fa      	ldrb	r2, [r7, #7]
 801061c:	71da      	strb	r2, [r3, #7]
 801061e:	7a3a      	ldrb	r2, [r7, #8]
 8010620:	721a      	strb	r2, [r3, #8]
 8010622:	7a7a      	ldrb	r2, [r7, #9]
 8010624:	725a      	strb	r2, [r3, #9]
 8010626:	7aba      	ldrb	r2, [r7, #10]
 8010628:	729a      	strb	r2, [r3, #10]
 801062a:	7afa      	ldrb	r2, [r7, #11]
 801062c:	72da      	strb	r2, [r3, #11]
    while(len) {
 801062e:	e77b      	b.n	8010528 <lv_img_decoder_built_in_open+0xc8>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8010630:	3014      	adds	r0, #20
 8010632:	f004 fc25 	bl	8014e80 <lv_mem_alloc>
 8010636:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8010638:	2800      	cmp	r0, #0
 801063a:	d004      	beq.n	8010646 <lv_img_decoder_built_in_open+0x1e6>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 801063c:	2114      	movs	r1, #20
 801063e:	f004 ffa1 	bl	8015584 <lv_memset_00>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8010642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010644:	e763      	b.n	801050e <lv_img_decoder_built_in_open+0xae>
            LV_ASSERT_MALLOC(dsc->user_data);
 8010646:	e7fe      	b.n	8010646 <lv_img_decoder_built_in_open+0x1e6>
            lv_fs_close(&user_data->f);
 8010648:	0028      	movs	r0, r5
 801064a:	f004 f9a5 	bl	8014998 <lv_fs_close>
 801064e:	e739      	b.n	80104c4 <lv_img_decoder_built_in_open+0x64>
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 8010650:	2200      	movs	r2, #0
 8010652:	2104      	movs	r1, #4
 8010654:	0030      	movs	r0, r6
 8010656:	f004 fa97 	bl	8014b88 <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 801065a:	4643      	mov	r3, r8
 801065c:	2400      	movs	r4, #0
 801065e:	af01      	add	r7, sp, #4
 8010660:	2b00      	cmp	r3, #0
 8010662:	d100      	bne.n	8010666 <lv_img_decoder_built_in_open+0x206>
 8010664:	e712      	b.n	801048c <lv_img_decoder_built_in_open+0x2c>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 8010666:	2300      	movs	r3, #0
 8010668:	2204      	movs	r2, #4
 801066a:	0039      	movs	r1, r7
 801066c:	0030      	movs	r0, r6
 801066e:	f004 f9b9 	bl	80149e4 <lv_fs_read>
 8010672:	787b      	ldrb	r3, [r7, #1]
 8010674:	78ba      	ldrb	r2, [r7, #2]
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8010676:	089b      	lsrs	r3, r3, #2
 8010678:	0158      	lsls	r0, r3, #5
 801067a:	783b      	ldrb	r3, [r7, #0]
 801067c:	08d2      	lsrs	r2, r2, #3
 801067e:	08db      	lsrs	r3, r3, #3
 8010680:	02d2      	lsls	r2, r2, #11
 8010682:	4303      	orrs	r3, r0
 8010684:	4313      	orrs	r3, r2
 8010686:	68f2      	ldr	r2, [r6, #12]
 8010688:	0061      	lsls	r1, r4, #1
 801068a:	528b      	strh	r3, [r1, r2]
                user_data->opa[i]     = cur_color.ch.alpha;
 801068c:	78fb      	ldrb	r3, [r7, #3]
 801068e:	6932      	ldr	r2, [r6, #16]
 8010690:	5513      	strb	r3, [r2, r4]
            for(i = 0; i < palette_size; i++) {
 8010692:	3401      	adds	r4, #1
 8010694:	45a0      	cmp	r8, r4
 8010696:	d1e6      	bne.n	8010666 <lv_img_decoder_built_in_open+0x206>
 8010698:	e6f8      	b.n	801048c <lv_img_decoder_built_in_open+0x2c>
 801069a:	46c0      	nop			; (mov r8, r8)
 801069c:	0801b874 	.word	0x0801b874

080106a0 <_lv_img_decoder_init>:
{
 80106a0:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 80106a2:	4c0b      	ldr	r4, [pc, #44]	; (80106d0 <_lv_img_decoder_init+0x30>)
 80106a4:	2110      	movs	r1, #16
 80106a6:	0020      	movs	r0, r4
 80106a8:	f004 fad8 	bl	8014c5c <_lv_ll_init>
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 80106ac:	0020      	movs	r0, r4
 80106ae:	f004 fadd 	bl	8014c6c <_lv_ll_ins_head>
 80106b2:	1e04      	subs	r4, r0, #0
    LV_ASSERT_MALLOC(decoder);
 80106b4:	d00b      	beq.n	80106ce <_lv_img_decoder_init+0x2e>
    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 80106b6:	2110      	movs	r1, #16
 80106b8:	f004 ff64 	bl	8015584 <lv_memset_00>
    decoder->info_cb = info_cb;
 80106bc:	4b05      	ldr	r3, [pc, #20]	; (80106d4 <_lv_img_decoder_init+0x34>)
 80106be:	6023      	str	r3, [r4, #0]
    decoder->open_cb = open_cb;
 80106c0:	4b05      	ldr	r3, [pc, #20]	; (80106d8 <_lv_img_decoder_init+0x38>)
 80106c2:	6063      	str	r3, [r4, #4]
    decoder->read_line_cb = read_line_cb;
 80106c4:	4b05      	ldr	r3, [pc, #20]	; (80106dc <_lv_img_decoder_init+0x3c>)
 80106c6:	60a3      	str	r3, [r4, #8]
    decoder->close_cb = close_cb;
 80106c8:	4b05      	ldr	r3, [pc, #20]	; (80106e0 <_lv_img_decoder_init+0x40>)
 80106ca:	60e3      	str	r3, [r4, #12]
}
 80106cc:	bd10      	pop	{r4, pc}
    LV_ASSERT_MALLOC(decoder);
 80106ce:	e7fe      	b.n	80106ce <_lv_img_decoder_init+0x2e>
 80106d0:	2000061c 	.word	0x2000061c
 80106d4:	0800ffe1 	.word	0x0800ffe1
 80106d8:	08010461 	.word	0x08010461
 80106dc:	080100ad 	.word	0x080100ad
 80106e0:	0800ffa9 	.word	0x0800ffa9

080106e4 <lv_img_decoder_get_info>:
{
 80106e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106e6:	000f      	movs	r7, r1
 80106e8:	46c6      	mov	lr, r8
 80106ea:	0006      	movs	r6, r0
 80106ec:	b500      	push	{lr}
    lv_memset_00(header, sizeof(lv_img_header_t));
 80106ee:	2104      	movs	r1, #4
 80106f0:	0038      	movs	r0, r7
 80106f2:	f004 ff47 	bl	8015584 <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 80106f6:	2e00      	cmp	r6, #0
 80106f8:	d023      	beq.n	8010742 <lv_img_decoder_get_info+0x5e>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 80106fa:	0030      	movs	r0, r6
 80106fc:	f7fe ff8c 	bl	800f618 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8010700:	2800      	cmp	r0, #0
 8010702:	d102      	bne.n	801070a <lv_img_decoder_get_info+0x26>
        if(img_dsc->data == NULL) return LV_RES_INV;
 8010704:	68b3      	ldr	r3, [r6, #8]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d01b      	beq.n	8010742 <lv_img_decoder_get_info+0x5e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 801070a:	4b0f      	ldr	r3, [pc, #60]	; (8010748 <lv_img_decoder_get_info+0x64>)
 801070c:	0018      	movs	r0, r3
 801070e:	4698      	mov	r8, r3
 8010710:	f004 fb06 	bl	8014d20 <_lv_ll_get_head>
 8010714:	1e04      	subs	r4, r0, #0
 8010716:	d014      	beq.n	8010742 <lv_img_decoder_get_info+0x5e>
    lv_res_t res = LV_RES_INV;
 8010718:	2500      	movs	r5, #0
        if(d->info_cb) {
 801071a:	6823      	ldr	r3, [r4, #0]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d006      	beq.n	801072e <lv_img_decoder_get_info+0x4a>
            res = d->info_cb(d, src, header);
 8010720:	003a      	movs	r2, r7
 8010722:	0031      	movs	r1, r6
 8010724:	0020      	movs	r0, r4
 8010726:	4798      	blx	r3
 8010728:	0005      	movs	r5, r0
            if(res == LV_RES_OK) break;
 801072a:	2801      	cmp	r0, #1
 801072c:	d005      	beq.n	801073a <lv_img_decoder_get_info+0x56>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 801072e:	0021      	movs	r1, r4
 8010730:	4640      	mov	r0, r8
 8010732:	f004 fb01 	bl	8014d38 <_lv_ll_get_next>
 8010736:	1e04      	subs	r4, r0, #0
 8010738:	d1ef      	bne.n	801071a <lv_img_decoder_get_info+0x36>
}
 801073a:	0028      	movs	r0, r5
 801073c:	bc80      	pop	{r7}
 801073e:	46b8      	mov	r8, r7
 8010740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(src == NULL) return LV_RES_INV;
 8010742:	2500      	movs	r5, #0
 8010744:	e7f9      	b.n	801073a <lv_img_decoder_get_info+0x56>
 8010746:	46c0      	nop			; (mov r8, r8)
 8010748:	2000061c 	.word	0x2000061c

0801074c <lv_img_decoder_open>:
{
 801074c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801074e:	464f      	mov	r7, r9
 8010750:	4646      	mov	r6, r8
 8010752:	46d6      	mov	lr, sl
 8010754:	b5c0      	push	{r6, r7, lr}
 8010756:	000f      	movs	r7, r1
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 8010758:	2128      	movs	r1, #40	; 0x28
{
 801075a:	0006      	movs	r6, r0
 801075c:	001c      	movs	r4, r3
 801075e:	1c15      	adds	r5, r2, #0
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 8010760:	f004 ff10 	bl	8015584 <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 8010764:	2f00      	cmp	r7, #0
 8010766:	d057      	beq.n	8010818 <lv_img_decoder_open+0xcc>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8010768:	0038      	movs	r0, r7
 801076a:	f7fe ff55 	bl	800f618 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 801076e:	2800      	cmp	r0, #0
 8010770:	d140      	bne.n	80107f4 <lv_img_decoder_open+0xa8>
        if(img_dsc->data == NULL) return LV_RES_INV;
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d04f      	beq.n	8010818 <lv_img_decoder_open+0xcc>
    dsc->color    = color;
 8010778:	8135      	strh	r5, [r6, #8]
    dsc->src_type = src_type;
 801077a:	7430      	strb	r0, [r6, #16]
    dsc->frame_id = frame_id;
 801077c:	60f4      	str	r4, [r6, #12]
        dsc->src = src;
 801077e:	6077      	str	r7, [r6, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8010780:	4b29      	ldr	r3, [pc, #164]	; (8010828 <lv_img_decoder_open+0xdc>)
    lv_res_t res = LV_RES_INV;
 8010782:	2500      	movs	r5, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8010784:	0018      	movs	r0, r3
 8010786:	4699      	mov	r9, r3
 8010788:	f004 faca 	bl	8014d20 <_lv_ll_get_head>
 801078c:	1e04      	subs	r4, r0, #0
 801078e:	d028      	beq.n	80107e2 <lv_img_decoder_open+0x96>
        res = decoder->info_cb(decoder, src, &dsc->header);
 8010790:	2314      	movs	r3, #20
 8010792:	469a      	mov	sl, r3
        dsc->error_msg = NULL;
 8010794:	2300      	movs	r3, #0
 8010796:	4698      	mov	r8, r3
        res = decoder->info_cb(decoder, src, &dsc->header);
 8010798:	44b2      	add	sl, r6
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 801079a:	6823      	ldr	r3, [r4, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d01a      	beq.n	80107d6 <lv_img_decoder_open+0x8a>
 80107a0:	6862      	ldr	r2, [r4, #4]
 80107a2:	2a00      	cmp	r2, #0
 80107a4:	d017      	beq.n	80107d6 <lv_img_decoder_open+0x8a>
        res = decoder->info_cb(decoder, src, &dsc->header);
 80107a6:	4652      	mov	r2, sl
 80107a8:	0039      	movs	r1, r7
 80107aa:	0020      	movs	r0, r4
 80107ac:	4798      	blx	r3
 80107ae:	0005      	movs	r5, r0
        if(res != LV_RES_OK) continue;
 80107b0:	2801      	cmp	r0, #1
 80107b2:	d110      	bne.n	80107d6 <lv_img_decoder_open+0x8a>
        res = decoder->open_cb(decoder, dsc);
 80107b4:	0031      	movs	r1, r6
 80107b6:	0020      	movs	r0, r4
 80107b8:	6863      	ldr	r3, [r4, #4]
        dsc->decoder = decoder;
 80107ba:	6034      	str	r4, [r6, #0]
        res = decoder->open_cb(decoder, dsc);
 80107bc:	4798      	blx	r3
 80107be:	0005      	movs	r5, r0
        if(res == LV_RES_OK) return res;
 80107c0:	2801      	cmp	r0, #1
 80107c2:	d011      	beq.n	80107e8 <lv_img_decoder_open+0x9c>
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 80107c4:	2104      	movs	r1, #4
 80107c6:	4650      	mov	r0, sl
 80107c8:	f004 fedc 	bl	8015584 <lv_memset_00>
        dsc->error_msg = NULL;
 80107cc:	4643      	mov	r3, r8
 80107ce:	6233      	str	r3, [r6, #32]
        dsc->img_data  = NULL;
 80107d0:	61b3      	str	r3, [r6, #24]
        dsc->user_data = NULL;
 80107d2:	6273      	str	r3, [r6, #36]	; 0x24
        dsc->time_to_open = 0;
 80107d4:	61f3      	str	r3, [r6, #28]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 80107d6:	0021      	movs	r1, r4
 80107d8:	4648      	mov	r0, r9
 80107da:	f004 faad 	bl	8014d38 <_lv_ll_get_next>
 80107de:	1e04      	subs	r4, r0, #0
 80107e0:	d1db      	bne.n	801079a <lv_img_decoder_open+0x4e>
    if(dsc->src_type == LV_IMG_SRC_FILE)
 80107e2:	7c33      	ldrb	r3, [r6, #16]
 80107e4:	2b01      	cmp	r3, #1
 80107e6:	d01a      	beq.n	801081e <lv_img_decoder_open+0xd2>
}
 80107e8:	0028      	movs	r0, r5
 80107ea:	bce0      	pop	{r5, r6, r7}
 80107ec:	46ba      	mov	sl, r7
 80107ee:	46b1      	mov	r9, r6
 80107f0:	46a8      	mov	r8, r5
 80107f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dsc->color    = color;
 80107f4:	8135      	strh	r5, [r6, #8]
    dsc->src_type = src_type;
 80107f6:	7430      	strb	r0, [r6, #16]
    dsc->frame_id = frame_id;
 80107f8:	60f4      	str	r4, [r6, #12]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 80107fa:	2801      	cmp	r0, #1
 80107fc:	d1bf      	bne.n	801077e <lv_img_decoder_open+0x32>
        size_t fnlen = strlen(src);
 80107fe:	0038      	movs	r0, r7
 8010800:	f7ef fc8a 	bl	8000118 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 8010804:	3001      	adds	r0, #1
 8010806:	f004 fb3b 	bl	8014e80 <lv_mem_alloc>
 801080a:	6070      	str	r0, [r6, #4]
        LV_ASSERT_MALLOC(dsc->src);
 801080c:	2800      	cmp	r0, #0
 801080e:	d005      	beq.n	801081c <lv_img_decoder_open+0xd0>
        strcpy((char *)dsc->src, src);
 8010810:	0039      	movs	r1, r7
 8010812:	f00a fe89 	bl	801b528 <strcpy>
 8010816:	e7b3      	b.n	8010780 <lv_img_decoder_open+0x34>
    if(src == NULL) return LV_RES_INV;
 8010818:	2500      	movs	r5, #0
 801081a:	e7e5      	b.n	80107e8 <lv_img_decoder_open+0x9c>
        LV_ASSERT_MALLOC(dsc->src);
 801081c:	e7fe      	b.n	801081c <lv_img_decoder_open+0xd0>
        lv_mem_free((void *)dsc->src);
 801081e:	6870      	ldr	r0, [r6, #4]
 8010820:	f004 fb50 	bl	8014ec4 <lv_mem_free>
 8010824:	e7e0      	b.n	80107e8 <lv_img_decoder_open+0x9c>
 8010826:	46c0      	nop			; (mov r8, r8)
 8010828:	2000061c 	.word	0x2000061c

0801082c <lv_img_decoder_read_line>:
{
 801082c:	b570      	push	{r4, r5, r6, lr}
 801082e:	0004      	movs	r4, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8010830:	6800      	ldr	r0, [r0, #0]
{
 8010832:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8010834:	6885      	ldr	r5, [r0, #8]
 8010836:	2d00      	cmp	r5, #0
 8010838:	d008      	beq.n	801084c <lv_img_decoder_read_line+0x20>
 801083a:	9e06      	ldr	r6, [sp, #24]
 801083c:	9300      	str	r3, [sp, #0]
 801083e:	9601      	str	r6, [sp, #4]
 8010840:	0013      	movs	r3, r2
 8010842:	000a      	movs	r2, r1
 8010844:	0021      	movs	r1, r4
 8010846:	47a8      	blx	r5
}
 8010848:	b002      	add	sp, #8
 801084a:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 801084c:	2000      	movs	r0, #0
 801084e:	e7fb      	b.n	8010848 <lv_img_decoder_read_line+0x1c>

08010850 <lv_img_decoder_close>:
{
 8010850:	b510      	push	{r4, lr}
 8010852:	0004      	movs	r4, r0
    if(dsc->decoder) {
 8010854:	6800      	ldr	r0, [r0, #0]
 8010856:	2800      	cmp	r0, #0
 8010858:	d007      	beq.n	801086a <lv_img_decoder_close+0x1a>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 801085a:	68c3      	ldr	r3, [r0, #12]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d001      	beq.n	8010864 <lv_img_decoder_close+0x14>
 8010860:	0021      	movs	r1, r4
 8010862:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8010864:	7c23      	ldrb	r3, [r4, #16]
 8010866:	2b01      	cmp	r3, #1
 8010868:	d000      	beq.n	801086c <lv_img_decoder_close+0x1c>
}
 801086a:	bd10      	pop	{r4, pc}
            lv_mem_free((void *)dsc->src);
 801086c:	6860      	ldr	r0, [r4, #4]
 801086e:	f004 fb29 	bl	8014ec4 <lv_mem_free>
            dsc->src = NULL;
 8010872:	2300      	movs	r3, #0
 8010874:	6063      	str	r3, [r4, #4]
}
 8010876:	e7f8      	b.n	801086a <lv_img_decoder_close+0x1a>

08010878 <lv_draw_sw_wait_for_finish>:

void lv_draw_sw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
    LV_UNUSED(draw_ctx);
    /*Nothing to wait for*/
}
 8010878:	4770      	bx	lr
 801087a:	46c0      	nop			; (mov r8, r8)

0801087c <lv_draw_sw_buffer_copy>:

void lv_draw_sw_buffer_copy(lv_draw_ctx_t * draw_ctx,
                            void * dest_buf, lv_coord_t dest_stride, const lv_area_t * dest_area,
                            void * src_buf, lv_coord_t src_stride, const lv_area_t * src_area)
{
 801087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801087e:	4646      	mov	r6, r8
 8010880:	464f      	mov	r7, r9
 8010882:	46d6      	mov	lr, sl
 8010884:	4698      	mov	r8, r3
 8010886:	b5c0      	push	{r6, r7, lr}
 8010888:	ab08      	add	r3, sp, #32
 801088a:	000d      	movs	r5, r1
 801088c:	cb02      	ldmia	r3!, {r1}
 801088e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8010890:	2000      	movs	r0, #0
 8010892:	5e18      	ldrsh	r0, [r3, r0]

    lv_color_t * dest_bufc =  dest_buf;
    lv_color_t * src_bufc =  src_buf;

    /*Got the first pixel of each buffer*/
    dest_bufc += dest_stride * dest_area->y1;
 8010894:	4643      	mov	r3, r8
 8010896:	2402      	movs	r4, #2
 8010898:	5f1c      	ldrsh	r4, [r3, r4]
    dest_bufc += dest_area->x1;
 801089a:	4643      	mov	r3, r8
{
 801089c:	468c      	mov	ip, r1
    dest_bufc += dest_area->x1;
 801089e:	2100      	movs	r1, #0
 80108a0:	5e59      	ldrsh	r1, [r3, r1]
    dest_bufc += dest_stride * dest_area->y1;
 80108a2:	0023      	movs	r3, r4
 80108a4:	4353      	muls	r3, r2
    dest_bufc += dest_area->x1;
 80108a6:	185b      	adds	r3, r3, r1
 80108a8:	005b      	lsls	r3, r3, #1
 80108aa:	18ed      	adds	r5, r5, r3

    src_bufc += src_stride * src_area->y1;
 80108ac:	2602      	movs	r6, #2
 80108ae:	5fbb      	ldrsh	r3, [r7, r6]
    src_bufc += src_area->x1;
 80108b0:	2600      	movs	r6, #0
 80108b2:	5fbf      	ldrsh	r7, [r7, r6]
    src_bufc += src_stride * src_area->y1;
 80108b4:	4343      	muls	r3, r0
    src_bufc += src_area->x1;
 80108b6:	19db      	adds	r3, r3, r7
 80108b8:	005b      	lsls	r3, r3, #1
 80108ba:	4463      	add	r3, ip
 80108bc:	001e      	movs	r6, r3
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80108be:	4643      	mov	r3, r8
 80108c0:	889f      	ldrh	r7, [r3, #4]
 80108c2:	3701      	adds	r7, #1
 80108c4:	1a7f      	subs	r7, r7, r1

    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
    lv_coord_t y;
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80108c6:	2106      	movs	r1, #6
 80108c8:	5e5b      	ldrsh	r3, [r3, r1]
    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
 80108ca:	b23f      	sxth	r7, r7
 80108cc:	007f      	lsls	r7, r7, #1
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80108ce:	42a3      	cmp	r3, r4
 80108d0:	db11      	blt.n	80108f6 <lv_draw_sw_buffer_copy+0x7a>
        lv_memcpy(dest_bufc, src_bufc, line_length);
        dest_bufc += dest_stride;
 80108d2:	0053      	lsls	r3, r2, #1
 80108d4:	4699      	mov	r9, r3
        src_bufc += src_stride;
 80108d6:	0043      	lsls	r3, r0, #1
 80108d8:	469a      	mov	sl, r3
        lv_memcpy(dest_bufc, src_bufc, line_length);
 80108da:	003a      	movs	r2, r7
 80108dc:	0031      	movs	r1, r6
 80108de:	0028      	movs	r0, r5
 80108e0:	f004 fc82 	bl	80151e8 <lv_memcpy>
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80108e4:	4643      	mov	r3, r8
 80108e6:	3401      	adds	r4, #1
 80108e8:	2206      	movs	r2, #6
 80108ea:	5e9a      	ldrsh	r2, [r3, r2]
 80108ec:	b224      	sxth	r4, r4
        dest_bufc += dest_stride;
 80108ee:	444d      	add	r5, r9
        src_bufc += src_stride;
 80108f0:	4456      	add	r6, sl
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80108f2:	42a2      	cmp	r2, r4
 80108f4:	daf1      	bge.n	80108da <lv_draw_sw_buffer_copy+0x5e>
    }
}
 80108f6:	bce0      	pop	{r5, r6, r7}
 80108f8:	46ba      	mov	sl, r7
 80108fa:	46b1      	mov	r9, r6
 80108fc:	46a8      	mov	r8, r5
 80108fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010900 <lv_draw_sw_init_ctx>:
{
 8010900:	b510      	push	{r4, lr}
 8010902:	000c      	movs	r4, r1
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
 8010904:	2150      	movs	r1, #80	; 0x50
 8010906:	0020      	movs	r0, r4
 8010908:	f004 fe3c 	bl	8015584 <lv_memset_00>
    draw_sw_ctx->base_draw.draw_arc = lv_draw_sw_arc;
 801090c:	4b0f      	ldr	r3, [pc, #60]	; (801094c <lv_draw_sw_init_ctx+0x4c>)
 801090e:	6123      	str	r3, [r4, #16]
    draw_sw_ctx->base_draw.draw_rect = lv_draw_sw_rect;
 8010910:	4b0f      	ldr	r3, [pc, #60]	; (8010950 <lv_draw_sw_init_ctx+0x50>)
 8010912:	60e3      	str	r3, [r4, #12]
    draw_sw_ctx->base_draw.draw_bg = lv_draw_sw_bg;
 8010914:	4b0f      	ldr	r3, [pc, #60]	; (8010954 <lv_draw_sw_init_ctx+0x54>)
 8010916:	62e3      	str	r3, [r4, #44]	; 0x2c
    draw_sw_ctx->base_draw.draw_letter = lv_draw_sw_letter;
 8010918:	4b0f      	ldr	r3, [pc, #60]	; (8010958 <lv_draw_sw_init_ctx+0x58>)
 801091a:	61e3      	str	r3, [r4, #28]
    draw_sw_ctx->base_draw.draw_img_decoded = lv_draw_sw_img_decoded;
 801091c:	4b0f      	ldr	r3, [pc, #60]	; (801095c <lv_draw_sw_init_ctx+0x5c>)
 801091e:	6163      	str	r3, [r4, #20]
    draw_sw_ctx->base_draw.draw_line = lv_draw_sw_line;
 8010920:	4b0f      	ldr	r3, [pc, #60]	; (8010960 <lv_draw_sw_init_ctx+0x60>)
 8010922:	6223      	str	r3, [r4, #32]
    draw_sw_ctx->base_draw.draw_polygon = lv_draw_sw_polygon;
 8010924:	4b0f      	ldr	r3, [pc, #60]	; (8010964 <lv_draw_sw_init_ctx+0x64>)
 8010926:	6263      	str	r3, [r4, #36]	; 0x24
    draw_sw_ctx->base_draw.wait_for_finish = lv_draw_sw_wait_for_finish;
 8010928:	4b0f      	ldr	r3, [pc, #60]	; (8010968 <lv_draw_sw_init_ctx+0x68>)
 801092a:	6323      	str	r3, [r4, #48]	; 0x30
    draw_sw_ctx->base_draw.buffer_copy = lv_draw_sw_buffer_copy;
 801092c:	4b0f      	ldr	r3, [pc, #60]	; (801096c <lv_draw_sw_init_ctx+0x6c>)
 801092e:	6363      	str	r3, [r4, #52]	; 0x34
    draw_sw_ctx->base_draw.layer_init = lv_draw_sw_layer_create;
 8010930:	4b0f      	ldr	r3, [pc, #60]	; (8010970 <lv_draw_sw_init_ctx+0x70>)
 8010932:	63a3      	str	r3, [r4, #56]	; 0x38
    draw_sw_ctx->base_draw.layer_adjust = lv_draw_sw_layer_adjust;
 8010934:	4b0f      	ldr	r3, [pc, #60]	; (8010974 <lv_draw_sw_init_ctx+0x74>)
 8010936:	63e3      	str	r3, [r4, #60]	; 0x3c
    draw_sw_ctx->base_draw.layer_blend = lv_draw_sw_layer_blend;
 8010938:	4b0f      	ldr	r3, [pc, #60]	; (8010978 <lv_draw_sw_init_ctx+0x78>)
 801093a:	6423      	str	r3, [r4, #64]	; 0x40
    draw_sw_ctx->base_draw.layer_destroy = lv_draw_sw_layer_destroy;
 801093c:	4b0f      	ldr	r3, [pc, #60]	; (801097c <lv_draw_sw_init_ctx+0x7c>)
 801093e:	6463      	str	r3, [r4, #68]	; 0x44
    draw_sw_ctx->blend = lv_draw_sw_blend_basic;
 8010940:	4b0f      	ldr	r3, [pc, #60]	; (8010980 <lv_draw_sw_init_ctx+0x80>)
 8010942:	64e3      	str	r3, [r4, #76]	; 0x4c
    draw_ctx->layer_instance_size = sizeof(lv_draw_sw_layer_ctx_t);
 8010944:	232c      	movs	r3, #44	; 0x2c
 8010946:	64a3      	str	r3, [r4, #72]	; 0x48
}
 8010948:	bd10      	pop	{r4, pc}
 801094a:	46c0      	nop			; (mov r8, r8)
 801094c:	08010985 	.word	0x08010985
 8010950:	080126ed 	.word	0x080126ed
 8010954:	08012ba9 	.word	0x08012ba9
 8010958:	08011f95 	.word	0x08011f95
 801095c:	080117e9 	.word	0x080117e9
 8010960:	08012371 	.word	0x08012371
 8010964:	080125cd 	.word	0x080125cd
 8010968:	08010879 	.word	0x08010879
 801096c:	0801087d 	.word	0x0801087d
 8010970:	08011db1 	.word	0x08011db1
 8010974:	08011ea1 	.word	0x08011ea1
 8010978:	08011efd 	.word	0x08011efd
 801097c:	08011f89 	.word	0x08011f89
 8010980:	080109bd 	.word	0x080109bd

08010984 <lv_draw_sw_arc>:
    LV_UNUSED(start_angle);
    LV_UNUSED(end_angle);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(dsc);
#endif /*LV_DRAW_COMPLEX*/
}
 8010984:	4770      	bx	lr
 8010986:	46c0      	nop			; (mov r8, r8)

08010988 <lv_draw_sw_blend>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_blend(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 8010988:	b530      	push	{r4, r5, lr}
    /*Do not draw transparent things*/
    if(dsc->opa <= LV_OPA_MIN) return;
 801098a:	7e0b      	ldrb	r3, [r1, #24]
{
 801098c:	0005      	movs	r5, r0
 801098e:	000c      	movs	r4, r1
 8010990:	b083      	sub	sp, #12
    if(dsc->opa <= LV_OPA_MIN) return;
 8010992:	2b02      	cmp	r3, #2
 8010994:	d801      	bhi.n	801099a <lv_draw_sw_blend+0x12>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;

    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);

    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
}
 8010996:	b003      	add	sp, #12
 8010998:	bd30      	pop	{r4, r5, pc}
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 801099a:	6882      	ldr	r2, [r0, #8]
 801099c:	6809      	ldr	r1, [r1, #0]
 801099e:	4668      	mov	r0, sp
 80109a0:	f003 fc5e 	bl	8014260 <_lv_area_intersect>
 80109a4:	2800      	cmp	r0, #0
 80109a6:	d0f6      	beq.n	8010996 <lv_draw_sw_blend+0xe>
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 80109a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d001      	beq.n	80109b2 <lv_draw_sw_blend+0x2a>
 80109ae:	0028      	movs	r0, r5
 80109b0:	4798      	blx	r3
    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
 80109b2:	0021      	movs	r1, r4
 80109b4:	0028      	movs	r0, r5
 80109b6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80109b8:	4798      	blx	r3
 80109ba:	e7ec      	b.n	8010996 <lv_draw_sw_blend+0xe>

080109bc <lv_draw_sw_blend_basic>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_blend_basic(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 80109bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109be:	46de      	mov	lr, fp
 80109c0:	4657      	mov	r7, sl
 80109c2:	4645      	mov	r5, r8
 80109c4:	464e      	mov	r6, r9
 80109c6:	b5e0      	push	{r5, r6, r7, lr}
    const lv_opa_t * mask;
    if(dsc->mask_buf == NULL) mask = NULL;
 80109c8:	68cb      	ldr	r3, [r1, #12]
{
 80109ca:	0005      	movs	r5, r0
 80109cc:	000f      	movs	r7, r1
    if(dsc->mask_buf == NULL) mask = NULL;
 80109ce:	469b      	mov	fp, r3
{
 80109d0:	b091      	sub	sp, #68	; 0x44
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d100      	bne.n	80109d8 <lv_draw_sw_blend_basic+0x1c>
 80109d6:	e0d7      	b.n	8010b88 <lv_draw_sw_blend_basic+0x1cc>
 80109d8:	7c0b      	ldrb	r3, [r1, #16]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d014      	beq.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 80109de:	3b01      	subs	r3, #1
 80109e0:	1e5a      	subs	r2, r3, #1
 80109e2:	4193      	sbcs	r3, r2
 80109e4:	465a      	mov	r2, fp
 80109e6:	425b      	negs	r3, r3
 80109e8:	401a      	ands	r2, r3
    else mask = dsc->mask_buf;

    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
 80109ea:	686b      	ldr	r3, [r5, #4]
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 80109ec:	4693      	mov	fp, r2

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 80109ee:	ac0e      	add	r4, sp, #56	; 0x38
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80109f0:	2204      	movs	r2, #4
 80109f2:	5e9e      	ldrsh	r6, [r3, r2]
 80109f4:	2200      	movs	r2, #0
 80109f6:	5e9b      	ldrsh	r3, [r3, r2]
 80109f8:	0020      	movs	r0, r4
 80109fa:	68aa      	ldr	r2, [r5, #8]
 80109fc:	6839      	ldr	r1, [r7, #0]
 80109fe:	4698      	mov	r8, r3
 8010a00:	f003 fc2e 	bl	8014260 <_lv_area_intersect>
 8010a04:	2800      	cmp	r0, #0
 8010a06:	d106      	bne.n	8010a16 <lv_draw_sw_blend_basic+0x5a>
        else {
            map_blended(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
        }
#endif
    }
}
 8010a08:	b011      	add	sp, #68	; 0x44
 8010a0a:	bcf0      	pop	{r4, r5, r6, r7}
 8010a0c:	46bb      	mov	fp, r7
 8010a0e:	46b2      	mov	sl, r6
 8010a10:	46a9      	mov	r9, r5
 8010a12:	46a0      	mov	r8, r4
 8010a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a16:	4643      	mov	r3, r8
 8010a18:	3601      	adds	r6, #1
 8010a1a:	1af6      	subs	r6, r6, r3
 8010a1c:	b233      	sxth	r3, r6
 8010a1e:	930d      	str	r3, [sp, #52]	; 0x34
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8010a20:	f7fe f962 	bl	800ece8 <_lv_refr_get_disp_refreshing>
    lv_color_t * dest_buf = draw_ctx->buf;
 8010a24:	682b      	ldr	r3, [r5, #0]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8010a26:	4680      	mov	r8, r0
    lv_color_t * dest_buf = draw_ctx->buf;
 8010a28:	469a      	mov	sl, r3
    if(disp->driver->set_px_cb == NULL) {
 8010a2a:	6803      	ldr	r3, [r0, #0]
 8010a2c:	69da      	ldr	r2, [r3, #28]
 8010a2e:	2a00      	cmp	r2, #0
 8010a30:	d100      	bne.n	8010a34 <lv_draw_sw_blend_basic+0x78>
 8010a32:	e174      	b.n	8010d1e <lv_draw_sw_blend_basic+0x362>
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 8010a34:	686b      	ldr	r3, [r5, #4]
 8010a36:	2102      	movs	r1, #2
 8010a38:	5e5a      	ldrsh	r2, [r3, r1]
 8010a3a:	2100      	movs	r1, #0
 8010a3c:	5e59      	ldrsh	r1, [r3, r1]
    const lv_color_t * src_buf = dsc->src_buf;
 8010a3e:	687b      	ldr	r3, [r7, #4]
    if(src_buf) {
 8010a40:	9308      	str	r3, [sp, #32]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d100      	bne.n	8010a48 <lv_draw_sw_blend_basic+0x8c>
 8010a46:	e168      	b.n	8010d1a <lv_draw_sw_blend_basic+0x35e>
        src_stride = lv_area_get_width(dsc->blend_area);
 8010a48:	6838      	ldr	r0, [r7, #0]
 8010a4a:	2600      	movs	r6, #0
 8010a4c:	5f85      	ldrsh	r5, [r0, r6]
 8010a4e:	46ac      	mov	ip, r5
 8010a50:	4663      	mov	r3, ip
 8010a52:	8885      	ldrh	r5, [r0, #4]
        src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 - dsc->blend_area->x1);
 8010a54:	2602      	movs	r6, #2
 8010a56:	5f80      	ldrsh	r0, [r0, r6]
 8010a58:	3501      	adds	r5, #1
 8010a5a:	1aed      	subs	r5, r5, r3
 8010a5c:	2602      	movs	r6, #2
 8010a5e:	5fa3      	ldrsh	r3, [r4, r6]
 8010a60:	b22d      	sxth	r5, r5
 8010a62:	1a1b      	subs	r3, r3, r0
 8010a64:	2600      	movs	r6, #0
 8010a66:	5fa0      	ldrsh	r0, [r4, r6]
 8010a68:	4666      	mov	r6, ip
 8010a6a:	436b      	muls	r3, r5
 8010a6c:	1b80      	subs	r0, r0, r6
 8010a6e:	181b      	adds	r3, r3, r0
 8010a70:	9808      	ldr	r0, [sp, #32]
 8010a72:	005b      	lsls	r3, r3, #1
 8010a74:	4684      	mov	ip, r0
 8010a76:	449c      	add	ip, r3
 8010a78:	4663      	mov	r3, ip
 8010a7a:	9308      	str	r3, [sp, #32]
    if(mask) {
 8010a7c:	465b      	mov	r3, fp
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d100      	bne.n	8010a84 <lv_draw_sw_blend_basic+0xc8>
 8010a82:	e146      	b.n	8010d12 <lv_draw_sw_blend_basic+0x356>
        mask_stride = lv_area_get_width(dsc->mask_area);
 8010a84:	6978      	ldr	r0, [r7, #20]
 8010a86:	2600      	movs	r6, #0
 8010a88:	5f83      	ldrsh	r3, [r0, r6]
 8010a8a:	469c      	mov	ip, r3
 8010a8c:	4666      	mov	r6, ip
 8010a8e:	8883      	ldrh	r3, [r0, #4]
 8010a90:	3301      	adds	r3, #1
 8010a92:	1b9b      	subs	r3, r3, r6
 8010a94:	b21b      	sxth	r3, r3
        mask += mask_stride * (blend_area.y1 - dsc->mask_area->y1) + (blend_area.x1 - dsc->mask_area->x1);
 8010a96:	4699      	mov	r9, r3
 8010a98:	930a      	str	r3, [sp, #40]	; 0x28
 8010a9a:	2602      	movs	r6, #2
 8010a9c:	5f80      	ldrsh	r0, [r0, r6]
 8010a9e:	2602      	movs	r6, #2
 8010aa0:	5fa3      	ldrsh	r3, [r4, r6]
 8010aa2:	1a1b      	subs	r3, r3, r0
 8010aa4:	4648      	mov	r0, r9
 8010aa6:	4343      	muls	r3, r0
 8010aa8:	2600      	movs	r6, #0
 8010aaa:	5fa0      	ldrsh	r0, [r4, r6]
 8010aac:	4666      	mov	r6, ip
 8010aae:	1b80      	subs	r0, r0, r6
 8010ab0:	181b      	adds	r3, r3, r0
 8010ab2:	449b      	add	fp, r3
    lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
 8010ab4:	4252      	negs	r2, r2
 8010ab6:	4249      	negs	r1, r1
 8010ab8:	0020      	movs	r0, r4
 8010aba:	b212      	sxth	r2, r2
 8010abc:	b209      	sxth	r1, r1
 8010abe:	f003 fbbf 	bl	8014240 <lv_area_move>
    if(disp->driver->set_px_cb) {
 8010ac2:	4643      	mov	r3, r8
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	69db      	ldr	r3, [r3, #28]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d100      	bne.n	8010ace <lv_draw_sw_blend_basic+0x112>
 8010acc:	e0ae      	b.n	8010c2c <lv_draw_sw_blend_basic+0x270>
        if(dsc->src_buf == NULL) {
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d05b      	beq.n	8010b8c <lv_draw_sw_blend_basic+0x1d0>
            map_set_px(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 8010ad4:	7e3b      	ldrb	r3, [r7, #24]
 8010ad6:	9306      	str	r3, [sp, #24]

static void map_set_px(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                       const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8010ad8:	f7fe f906 	bl	800ece8 <_lv_refr_get_disp_refreshing>
 8010adc:	88a7      	ldrh	r7, [r4, #4]
 8010ade:	8823      	ldrh	r3, [r4, #0]
 8010ae0:	3701      	adds	r7, #1
 8010ae2:	1aff      	subs	r7, r7, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010ae4:	88e3      	ldrh	r3, [r4, #6]
 8010ae6:	8862      	ldrh	r2, [r4, #2]
 8010ae8:	3301      	adds	r3, #1
 8010aea:	1a9b      	subs	r3, r3, r2
    int32_t h = lv_area_get_height(dest_area);

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 8010aec:	465a      	mov	r2, fp
    int32_t h = lv_area_get_height(dest_area);
 8010aee:	b21b      	sxth	r3, r3
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8010af0:	4681      	mov	r9, r0
    int32_t w = lv_area_get_width(dest_area);
 8010af2:	b23f      	sxth	r7, r7
    int32_t h = lv_area_get_height(dest_area);
 8010af4:	930b      	str	r3, [sp, #44]	; 0x2c
    if(mask == NULL) {
 8010af6:	2a00      	cmp	r2, #0
 8010af8:	d100      	bne.n	8010afc <lv_draw_sw_blend_basic+0x140>
 8010afa:	e138      	b.n	8010d6e <lv_draw_sw_blend_basic+0x3b2>
            }
            src_buf += src_stride;
        }
    }
    else {
        for(y = 0; y < h; y++) {
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	dc00      	bgt.n	8010b02 <lv_draw_sw_blend_basic+0x146>
 8010b00:	e782      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
                }
            }
            mask += mask_stride;
            src_buf += src_stride;
 8010b02:	006b      	lsls	r3, r5, #1
 8010b04:	930c      	str	r3, [sp, #48]	; 0x30
        for(y = 0; y < h; y++) {
 8010b06:	2300      	movs	r3, #0
 8010b08:	9307      	str	r3, [sp, #28]
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8010b0a:	ab01      	add	r3, sp, #4
 8010b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8010b0e:	2f00      	cmp	r7, #0
 8010b10:	dc00      	bgt.n	8010b14 <lv_draw_sw_blend_basic+0x158>
 8010b12:	e779      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
 8010b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b16:	46b8      	mov	r8, r7
 8010b18:	465f      	mov	r7, fp
 8010b1a:	469b      	mov	fp, r3
            for(x = 0; x < w; x++) {
 8010b1c:	4642      	mov	r2, r8
 8010b1e:	2500      	movs	r5, #0
 8010b20:	46b8      	mov	r8, r7
 8010b22:	9e08      	ldr	r6, [sp, #32]
 8010b24:	9205      	str	r2, [sp, #20]
                if(mask[x]) {
 8010b26:	4643      	mov	r3, r8
 8010b28:	5d5a      	ldrb	r2, [r3, r5]
 8010b2a:	2a00      	cmp	r2, #0
 8010b2c:	d016      	beq.n	8010b5c <lv_draw_sw_blend_basic+0x1a0>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8010b2e:	464b      	mov	r3, r9
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8010b30:	9906      	ldr	r1, [sp, #24]
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8010b32:	6818      	ldr	r0, [r3, #0]
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8010b34:	434a      	muls	r2, r1
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8010b36:	0a12      	lsrs	r2, r2, #8
 8010b38:	8823      	ldrh	r3, [r4, #0]
 8010b3a:	9202      	str	r2, [sp, #8]
 8010b3c:	8832      	ldrh	r2, [r6, #0]
 8010b3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b40:	195b      	adds	r3, r3, r5
 8010b42:	800a      	strh	r2, [r1, #0]
 8010b44:	9907      	ldr	r1, [sp, #28]
 8010b46:	8862      	ldrh	r2, [r4, #2]
 8010b48:	468c      	mov	ip, r1
 8010b4a:	4462      	add	r2, ip
 8010b4c:	b212      	sxth	r2, r2
 8010b4e:	9200      	str	r2, [sp, #0]
 8010b50:	69c2      	ldr	r2, [r0, #28]
 8010b52:	4651      	mov	r1, sl
 8010b54:	0017      	movs	r7, r2
 8010b56:	b21b      	sxth	r3, r3
 8010b58:	465a      	mov	r2, fp
 8010b5a:	47b8      	blx	r7
            for(x = 0; x < w; x++) {
 8010b5c:	9b05      	ldr	r3, [sp, #20]
 8010b5e:	3501      	adds	r5, #1
 8010b60:	3602      	adds	r6, #2
 8010b62:	42ab      	cmp	r3, r5
 8010b64:	dcdf      	bgt.n	8010b26 <lv_draw_sw_blend_basic+0x16a>
            mask += mask_stride;
 8010b66:	4647      	mov	r7, r8
 8010b68:	4698      	mov	r8, r3
 8010b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            src_buf += src_stride;
 8010b6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            mask += mask_stride;
 8010b6e:	469c      	mov	ip, r3
 8010b70:	4467      	add	r7, ip
            src_buf += src_stride;
 8010b72:	4694      	mov	ip, r2
 8010b74:	9b08      	ldr	r3, [sp, #32]
        for(y = 0; y < h; y++) {
 8010b76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            src_buf += src_stride;
 8010b78:	4463      	add	r3, ip
 8010b7a:	9308      	str	r3, [sp, #32]
        for(y = 0; y < h; y++) {
 8010b7c:	9b07      	ldr	r3, [sp, #28]
 8010b7e:	3301      	adds	r3, #1
 8010b80:	9307      	str	r3, [sp, #28]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	dcca      	bgt.n	8010b1c <lv_draw_sw_blend_basic+0x160>
 8010b86:	e73f      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 8010b88:	7c0b      	ldrb	r3, [r1, #16]
 8010b8a:	e728      	b.n	80109de <lv_draw_sw_blend_basic+0x22>
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 8010b8c:	466a      	mov	r2, sp
 8010b8e:	7e3b      	ldrb	r3, [r7, #24]
 8010b90:	9305      	str	r3, [sp, #20]
 8010b92:	893b      	ldrh	r3, [r7, #8]
 8010b94:	8313      	strh	r3, [r2, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8010b96:	f7fe f8a7 	bl	800ece8 <_lv_refr_get_disp_refreshing>
    if(mask == NULL) {
 8010b9a:	465b      	mov	r3, fp
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d100      	bne.n	8010ba2 <lv_draw_sw_blend_basic+0x1e6>
 8010ba0:	e283      	b.n	80110aa <lv_draw_sw_blend_basic+0x6ee>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010ba2:	88a3      	ldrh	r3, [r4, #4]
 8010ba4:	8822      	ldrh	r2, [r4, #0]
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	1a9b      	subs	r3, r3, r2
        int32_t w = lv_area_get_width(blend_area);
 8010baa:	b21b      	sxth	r3, r3
 8010bac:	4698      	mov	r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010bae:	88e3      	ldrh	r3, [r4, #6]
 8010bb0:	8862      	ldrh	r2, [r4, #2]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	1a9b      	subs	r3, r3, r2
        int32_t h = lv_area_get_height(blend_area);
 8010bb6:	b21b      	sxth	r3, r3
 8010bb8:	9309      	str	r3, [sp, #36]	; 0x24
        for(y = 0; y < h; y++) {
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	dc00      	bgt.n	8010bc0 <lv_draw_sw_blend_basic+0x204>
 8010bbe:	e723      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	9307      	str	r3, [sp, #28]
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8010bc4:	ab01      	add	r3, sp, #4
 8010bc6:	9308      	str	r3, [sp, #32]
 8010bc8:	4643      	mov	r3, r8
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	dc00      	bgt.n	8010bd0 <lv_draw_sw_blend_basic+0x214>
 8010bce:	e71b      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
 8010bd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bd2:	465e      	mov	r6, fp
 8010bd4:	4699      	mov	r9, r3
 8010bd6:	4683      	mov	fp, r0
 8010bd8:	4647      	mov	r7, r8
            for(x = 0; x < w; x++) {
 8010bda:	2500      	movs	r5, #0
                if(mask[x]) {
 8010bdc:	5d72      	ldrb	r2, [r6, r5]
 8010bde:	2a00      	cmp	r2, #0
 8010be0:	d017      	beq.n	8010c12 <lv_draw_sw_blend_basic+0x256>
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8010be2:	9905      	ldr	r1, [sp, #20]
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8010be4:	465b      	mov	r3, fp
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8010be6:	434a      	muls	r2, r1
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8010be8:	4669      	mov	r1, sp
 8010bea:	0a12      	lsrs	r2, r2, #8
 8010bec:	6818      	ldr	r0, [r3, #0]
 8010bee:	8823      	ldrh	r3, [r4, #0]
 8010bf0:	9202      	str	r2, [sp, #8]
 8010bf2:	8b09      	ldrh	r1, [r1, #24]
 8010bf4:	9a08      	ldr	r2, [sp, #32]
 8010bf6:	195b      	adds	r3, r3, r5
 8010bf8:	8011      	strh	r1, [r2, #0]
 8010bfa:	9907      	ldr	r1, [sp, #28]
 8010bfc:	8862      	ldrh	r2, [r4, #2]
 8010bfe:	468c      	mov	ip, r1
 8010c00:	4462      	add	r2, ip
 8010c02:	b212      	sxth	r2, r2
 8010c04:	9200      	str	r2, [sp, #0]
 8010c06:	69c2      	ldr	r2, [r0, #28]
 8010c08:	4651      	mov	r1, sl
 8010c0a:	4690      	mov	r8, r2
 8010c0c:	b21b      	sxth	r3, r3
 8010c0e:	464a      	mov	r2, r9
 8010c10:	47c0      	blx	r8
            for(x = 0; x < w; x++) {
 8010c12:	3501      	adds	r5, #1
 8010c14:	42af      	cmp	r7, r5
 8010c16:	dce1      	bgt.n	8010bdc <lv_draw_sw_blend_basic+0x220>
            mask += mask_stide;
 8010c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        for(y = 0; y < h; y++) {
 8010c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
            mask += mask_stide;
 8010c1c:	469c      	mov	ip, r3
        for(y = 0; y < h; y++) {
 8010c1e:	9b07      	ldr	r3, [sp, #28]
            mask += mask_stide;
 8010c20:	4466      	add	r6, ip
        for(y = 0; y < h; y++) {
 8010c22:	3301      	adds	r3, #1
 8010c24:	9307      	str	r3, [sp, #28]
 8010c26:	429a      	cmp	r2, r3
 8010c28:	dcd7      	bgt.n	8010bda <lv_draw_sw_blend_basic+0x21e>
 8010c2a:	e6ed      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 8010c2c:	7e78      	ldrb	r0, [r7, #25]
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	d000      	beq.n	8010c34 <lv_draw_sw_blend_basic+0x278>
 8010c32:	e6e9      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
        if(dsc->src_buf == NULL) {
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d100      	bne.n	8010c3c <lv_draw_sw_blend_basic+0x280>
 8010c3a:	e0cf      	b.n	8010ddc <lv_draw_sw_blend_basic+0x420>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010c3c:	88a0      	ldrh	r0, [r4, #4]
 8010c3e:	8823      	ldrh	r3, [r4, #0]
 8010c40:	3001      	adds	r0, #1
 8010c42:	1ac0      	subs	r0, r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010c44:	88e3      	ldrh	r3, [r4, #6]
 8010c46:	8862      	ldrh	r2, [r4, #2]
 8010c48:	3301      	adds	r3, #1
 8010c4a:	1a9b      	subs	r3, r3, r2
LV_ATTRIBUTE_FAST_MEM static void map_normal(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                                             const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
    int32_t w = lv_area_get_width(dest_area);
    int32_t h = lv_area_get_height(dest_area);
 8010c4c:	b21b      	sxth	r3, r3
            map_normal(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 8010c4e:	7e3f      	ldrb	r7, [r7, #24]
    int32_t h = lv_area_get_height(dest_area);
 8010c50:	9306      	str	r3, [sp, #24]

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 8010c52:	465b      	mov	r3, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010c54:	b200      	sxth	r0, r0
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d101      	bne.n	8010c5e <lv_draw_sw_blend_basic+0x2a2>
 8010c5a:	f000 fc36 	bl	80114ca <lv_draw_sw_blend_basic+0xb0e>
        }
    }
    /*Masked*/
    else {
        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
 8010c5e:	2ffd      	cmp	r7, #253	; 0xfd
 8010c60:	d900      	bls.n	8010c64 <lv_draw_sw_blend_basic+0x2a8>
 8010c62:	e259      	b.n	8011118 <lv_draw_sw_blend_basic+0x75c>
                mask += mask_stride;
            }
        }
        /*Handle opa and mask values too*/
        else {
            for(y = 0; y < h; y++) {
 8010c64:	9b06      	ldr	r3, [sp, #24]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	dc00      	bgt.n	8010c6c <lv_draw_sw_blend_basic+0x2b0>
 8010c6a:	e6cd      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
                    if(mask[x]) {
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
                    }
                }
                dest_buf += dest_stride;
 8010c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c6e:	005b      	lsls	r3, r3, #1
 8010c70:	9307      	str	r3, [sp, #28]
                src_buf += src_stride;
 8010c72:	006b      	lsls	r3, r5, #1
 8010c74:	4699      	mov	r9, r3
            for(y = 0; y < h; y++) {
 8010c76:	2300      	movs	r3, #0
 8010c78:	4698      	mov	r8, r3
 8010c7a:	2800      	cmp	r0, #0
 8010c7c:	dc00      	bgt.n	8010c80 <lv_draw_sw_blend_basic+0x2c4>
 8010c7e:	e6c3      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
 8010c80:	464b      	mov	r3, r9
 8010c82:	9309      	str	r3, [sp, #36]	; 0x24
 8010c84:	9b08      	ldr	r3, [sp, #32]
 8010c86:	46b9      	mov	r9, r7
 8010c88:	0001      	movs	r1, r0
 8010c8a:	465f      	mov	r7, fp
 8010c8c:	469b      	mov	fp, r3
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0 && LV_COLOR_MIX_ROUND_OFS == 0
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010c8e:	4ece      	ldr	r6, [pc, #824]	; (8010fc8 <lv_draw_sw_blend_basic+0x60c>)
                for(x = 0; x < w; x++) {
 8010c90:	4653      	mov	r3, sl
            for(y = 0; y < h; y++) {
 8010c92:	2400      	movs	r4, #0
                for(x = 0; x < w; x++) {
 8010c94:	2200      	movs	r2, #0
 8010c96:	0008      	movs	r0, r1
 8010c98:	9305      	str	r3, [sp, #20]
                    if(mask[x]) {
 8010c9a:	5cbb      	ldrb	r3, [r7, r2]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d021      	beq.n	8010ce4 <lv_draw_sw_blend_basic+0x328>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8010ca0:	4649      	mov	r1, r9
 8010ca2:	2bfc      	cmp	r3, #252	; 0xfc
 8010ca4:	d801      	bhi.n	8010caa <lv_draw_sw_blend_basic+0x2ee>
 8010ca6:	434b      	muls	r3, r1
 8010ca8:	0a19      	lsrs	r1, r3, #8
 8010caa:	9b05      	ldr	r3, [sp, #20]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010cac:	3104      	adds	r1, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010cae:	5b1b      	ldrh	r3, [r3, r4]
 8010cb0:	469c      	mov	ip, r3
 8010cb2:	4665      	mov	r5, ip
 8010cb4:	041b      	lsls	r3, r3, #16
 8010cb6:	432b      	orrs	r3, r5
 8010cb8:	4033      	ands	r3, r6
 8010cba:	469c      	mov	ip, r3
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8010cbc:	465b      	mov	r3, fp
 8010cbe:	5b1b      	ldrh	r3, [r3, r4]
 8010cc0:	469a      	mov	sl, r3
 8010cc2:	4655      	mov	r5, sl
 8010cc4:	041b      	lsls	r3, r3, #16
 8010cc6:	432b      	orrs	r3, r5
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010cc8:	4665      	mov	r5, ip
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8010cca:	4033      	ands	r3, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010ccc:	1b5b      	subs	r3, r3, r5
 8010cce:	469a      	mov	sl, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010cd0:	08cb      	lsrs	r3, r1, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010cd2:	4651      	mov	r1, sl
 8010cd4:	434b      	muls	r3, r1
 8010cd6:	095b      	lsrs	r3, r3, #5
 8010cd8:	4463      	add	r3, ip
 8010cda:	4033      	ands	r3, r6
    ret.full = (uint16_t)((result >> 16) | result);
 8010cdc:	0c19      	lsrs	r1, r3, #16
 8010cde:	430b      	orrs	r3, r1
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 8010ce0:	9905      	ldr	r1, [sp, #20]
 8010ce2:	530b      	strh	r3, [r1, r4]
                for(x = 0; x < w; x++) {
 8010ce4:	3201      	adds	r2, #1
 8010ce6:	3402      	adds	r4, #2
 8010ce8:	4290      	cmp	r0, r2
 8010cea:	dcd6      	bgt.n	8010c9a <lv_draw_sw_blend_basic+0x2de>
                dest_buf += dest_stride;
 8010cec:	9b05      	ldr	r3, [sp, #20]
 8010cee:	0001      	movs	r1, r0
 8010cf0:	469a      	mov	sl, r3
 8010cf2:	9b07      	ldr	r3, [sp, #28]
 8010cf4:	469c      	mov	ip, r3
                src_buf += src_stride;
 8010cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
                dest_buf += dest_stride;
 8010cf8:	44e2      	add	sl, ip
                src_buf += src_stride;
 8010cfa:	469c      	mov	ip, r3
                mask += mask_stride;
 8010cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                src_buf += src_stride;
 8010cfe:	44e3      	add	fp, ip
                mask += mask_stride;
 8010d00:	469c      	mov	ip, r3
            for(y = 0; y < h; y++) {
 8010d02:	2301      	movs	r3, #1
                mask += mask_stride;
 8010d04:	4467      	add	r7, ip
            for(y = 0; y < h; y++) {
 8010d06:	469c      	mov	ip, r3
 8010d08:	9b06      	ldr	r3, [sp, #24]
 8010d0a:	44e0      	add	r8, ip
 8010d0c:	4543      	cmp	r3, r8
 8010d0e:	dcbf      	bgt.n	8010c90 <lv_draw_sw_blend_basic+0x2d4>
 8010d10:	e67a      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
 8010d12:	2300      	movs	r3, #0
 8010d14:	4699      	mov	r9, r3
        mask_stride = 0;
 8010d16:	930a      	str	r3, [sp, #40]	; 0x28
 8010d18:	e6cc      	b.n	8010ab4 <lv_draw_sw_blend_basic+0xf8>
        src_stride = 0;
 8010d1a:	2500      	movs	r5, #0
 8010d1c:	e6ae      	b.n	8010a7c <lv_draw_sw_blend_basic+0xc0>
        if(disp->driver->screen_transp == 0) {
 8010d1e:	7c1b      	ldrb	r3, [r3, #16]
 8010d20:	065b      	lsls	r3, r3, #25
 8010d22:	d410      	bmi.n	8010d46 <lv_draw_sw_blend_basic+0x38a>
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 8010d24:	686b      	ldr	r3, [r5, #4]
 8010d26:	2102      	movs	r1, #2
 8010d28:	5e5a      	ldrsh	r2, [r3, r1]
 8010d2a:	2100      	movs	r1, #0
 8010d2c:	5e59      	ldrsh	r1, [r3, r1]
 8010d2e:	2002      	movs	r0, #2
 8010d30:	5e23      	ldrsh	r3, [r4, r0]
 8010d32:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010d34:	1a9b      	subs	r3, r3, r2
 8010d36:	4343      	muls	r3, r0
 8010d38:	2500      	movs	r5, #0
 8010d3a:	5f60      	ldrsh	r0, [r4, r5]
 8010d3c:	1a40      	subs	r0, r0, r1
 8010d3e:	181b      	adds	r3, r3, r0
 8010d40:	005b      	lsls	r3, r3, #1
 8010d42:	449a      	add	sl, r3
 8010d44:	e67b      	b.n	8010a3e <lv_draw_sw_blend_basic+0x82>
            dest_buf8 += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8010d46:	686b      	ldr	r3, [r5, #4]
 8010d48:	2102      	movs	r1, #2
 8010d4a:	5e5a      	ldrsh	r2, [r3, r1]
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8010d4c:	2100      	movs	r1, #0
 8010d4e:	5e59      	ldrsh	r1, [r3, r1]
            dest_buf8 += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8010d50:	2002      	movs	r0, #2
 8010d52:	5e23      	ldrsh	r3, [r4, r0]
 8010d54:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010d56:	1a9b      	subs	r3, r3, r2
 8010d58:	4343      	muls	r3, r0
 8010d5a:	0058      	lsls	r0, r3, #1
 8010d5c:	18c3      	adds	r3, r0, r3
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8010d5e:	2500      	movs	r5, #0
 8010d60:	5f60      	ldrsh	r0, [r4, r5]
 8010d62:	1a40      	subs	r0, r0, r1
 8010d64:	0045      	lsls	r5, r0, #1
 8010d66:	1828      	adds	r0, r5, r0
 8010d68:	181b      	adds	r3, r3, r0
 8010d6a:	449a      	add	sl, r3
            dest_buf = (lv_color_t *)dest_buf8;
 8010d6c:	e667      	b.n	8010a3e <lv_draw_sw_blend_basic+0x82>
        for(y = 0; y < h; y++) {
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	dc00      	bgt.n	8010d74 <lv_draw_sw_blend_basic+0x3b8>
 8010d72:	e649      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
            src_buf += src_stride;
 8010d74:	006b      	lsls	r3, r5, #1
 8010d76:	930a      	str	r3, [sp, #40]	; 0x28
        for(y = 0; y < h; y++) {
 8010d78:	2300      	movs	r3, #0
 8010d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d7c:	ab01      	add	r3, sp, #4
 8010d7e:	9305      	str	r3, [sp, #20]
 8010d80:	2f00      	cmp	r7, #0
 8010d82:	dc00      	bgt.n	8010d86 <lv_draw_sw_blend_basic+0x3ca>
 8010d84:	e640      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
 8010d86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d88:	9707      	str	r7, [sp, #28]
 8010d8a:	469b      	mov	fp, r3
            for(x = 0; x < w; x++) {
 8010d8c:	466b      	mov	r3, sp
 8010d8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010d90:	2500      	movs	r5, #0
 8010d92:	4698      	mov	r8, r3
 8010d94:	9f08      	ldr	r7, [sp, #32]
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8010d96:	464b      	mov	r3, r9
 8010d98:	9a06      	ldr	r2, [sp, #24]
 8010d9a:	6818      	ldr	r0, [r3, #0]
 8010d9c:	8823      	ldrh	r3, [r4, #0]
 8010d9e:	9202      	str	r2, [sp, #8]
 8010da0:	883a      	ldrh	r2, [r7, #0]
 8010da2:	9905      	ldr	r1, [sp, #20]
 8010da4:	195b      	adds	r3, r3, r5
 8010da6:	800a      	strh	r2, [r1, #0]
 8010da8:	8862      	ldrh	r2, [r4, #2]
 8010daa:	b21b      	sxth	r3, r3
 8010dac:	4442      	add	r2, r8
 8010dae:	b212      	sxth	r2, r2
 8010db0:	9200      	str	r2, [sp, #0]
 8010db2:	4651      	mov	r1, sl
 8010db4:	465a      	mov	r2, fp
 8010db6:	69c6      	ldr	r6, [r0, #28]
 8010db8:	47b0      	blx	r6
            for(x = 0; x < w; x++) {
 8010dba:	9b07      	ldr	r3, [sp, #28]
 8010dbc:	3501      	adds	r5, #1
 8010dbe:	3702      	adds	r7, #2
 8010dc0:	42ab      	cmp	r3, r5
 8010dc2:	dce8      	bgt.n	8010d96 <lv_draw_sw_blend_basic+0x3da>
            src_buf += src_stride;
 8010dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010dc6:	9b08      	ldr	r3, [sp, #32]
 8010dc8:	4694      	mov	ip, r2
 8010dca:	4463      	add	r3, ip
 8010dcc:	9308      	str	r3, [sp, #32]
        for(y = 0; y < h; y++) {
 8010dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010dd2:	3301      	adds	r3, #1
 8010dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	dcd8      	bgt.n	8010d8c <lv_draw_sw_blend_basic+0x3d0>
 8010dda:	e615      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
            fill_normal(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 8010ddc:	7e3b      	ldrb	r3, [r7, #24]
 8010dde:	893d      	ldrh	r5, [r7, #8]
 8010de0:	88a7      	ldrh	r7, [r4, #4]
 8010de2:	469c      	mov	ip, r3
 8010de4:	8823      	ldrh	r3, [r4, #0]
 8010de6:	3701      	adds	r7, #1
 8010de8:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010dea:	88e3      	ldrh	r3, [r4, #6]
 8010dec:	8862      	ldrh	r2, [r4, #2]
 8010dee:	3301      	adds	r3, #1
 8010df0:	1a9b      	subs	r3, r3, r2
    int32_t h = lv_area_get_height(dest_area);
 8010df2:	b21b      	sxth	r3, r3
 8010df4:	9305      	str	r3, [sp, #20]
    if(mask == NULL) {
 8010df6:	465b      	mov	r3, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010df8:	b23f      	sxth	r7, r7
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d101      	bne.n	8010e02 <lv_draw_sw_blend_basic+0x446>
 8010dfe:	f000 fc2b 	bl	8011658 <lv_draw_sw_blend_basic+0xc9c>
        if(opa >= LV_OPA_MAX) {
 8010e02:	4662      	mov	r2, ip
        uint32_t c32 = color.full + ((uint32_t)color.full << 16);
 8010e04:	042b      	lsls	r3, r5, #16
        if(opa >= LV_OPA_MAX) {
 8010e06:	2afc      	cmp	r2, #252	; 0xfc
 8010e08:	d800      	bhi.n	8010e0c <lv_draw_sw_blend_basic+0x450>
 8010e0a:	e3c7      	b.n	801159c <lv_draw_sw_blend_basic+0xbe0>
            int32_t x_end4 = w - 4;
 8010e0c:	1f3a      	subs	r2, r7, #4
 8010e0e:	4694      	mov	ip, r2
            for(y = 0; y < h; y++) {
 8010e10:	9a05      	ldr	r2, [sp, #20]
 8010e12:	2a00      	cmp	r2, #0
 8010e14:	dc00      	bgt.n	8010e18 <lv_draw_sw_blend_basic+0x45c>
 8010e16:	e5f7      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
        uint32_t c32 = color.full + ((uint32_t)color.full << 16);
 8010e18:	18ea      	adds	r2, r5, r3
 8010e1a:	9206      	str	r2, [sp, #24]
                dest_buf += (dest_stride - w);
 8010e1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8010e1e:	432b      	orrs	r3, r5
 8010e20:	1bd6      	subs	r6, r2, r7
 8010e22:	0072      	lsls	r2, r6, #1
 8010e24:	9209      	str	r2, [sp, #36]	; 0x24
                mask += (mask_stride - w);
 8010e26:	464a      	mov	r2, r9
 8010e28:	1bd2      	subs	r2, r2, r7
 8010e2a:	920a      	str	r2, [sp, #40]	; 0x28
            for(y = 0; y < h; y++) {
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	9207      	str	r2, [sp, #28]
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 8010e30:	3203      	adds	r2, #3
 8010e32:	4690      	mov	r8, r2
 8010e34:	4a64      	ldr	r2, [pc, #400]	; (8010fc8 <lv_draw_sw_blend_basic+0x60c>)
 8010e36:	4658      	mov	r0, fp
 8010e38:	4013      	ands	r3, r2
 8010e3a:	4699      	mov	r9, r3
 8010e3c:	4663      	mov	r3, ip
 8010e3e:	46cc      	mov	ip, r9
 8010e40:	46b9      	mov	r9, r7
 8010e42:	4657      	mov	r7, sl
 8010e44:	9308      	str	r3, [sp, #32]
 8010e46:	464b      	mov	r3, r9
 8010e48:	2200      	movs	r2, #0
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	dd28      	ble.n	8010ea0 <lv_draw_sw_blend_basic+0x4e4>
 8010e4e:	4643      	mov	r3, r8
 8010e50:	464c      	mov	r4, r9
 8010e52:	4218      	tst	r0, r3
 8010e54:	d104      	bne.n	8010e60 <lv_draw_sw_blend_basic+0x4a4>
 8010e56:	e123      	b.n	80110a0 <lv_draw_sw_blend_basic+0x6e4>
 8010e58:	4643      	mov	r3, r8
 8010e5a:	4218      	tst	r0, r3
 8010e5c:	d100      	bne.n	8010e60 <lv_draw_sw_blend_basic+0x4a4>
 8010e5e:	e11e      	b.n	801109e <lv_draw_sw_blend_basic+0x6e2>
                    FILL_NORMAL_MASK_PX(color)
 8010e60:	7803      	ldrb	r3, [r0, #0]
 8010e62:	0029      	movs	r1, r5
 8010e64:	2bff      	cmp	r3, #255	; 0xff
 8010e66:	d014      	beq.n	8010e92 <lv_draw_sw_blend_basic+0x4d6>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010e68:	8839      	ldrh	r1, [r7, #0]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010e6a:	3304      	adds	r3, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010e6c:	4689      	mov	r9, r1
 8010e6e:	464e      	mov	r6, r9
 8010e70:	0409      	lsls	r1, r1, #16
 8010e72:	4331      	orrs	r1, r6
 8010e74:	4e54      	ldr	r6, [pc, #336]	; (8010fc8 <lv_draw_sw_blend_basic+0x60c>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010e76:	08db      	lsrs	r3, r3, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010e78:	4031      	ands	r1, r6
 8010e7a:	4689      	mov	r9, r1
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010e7c:	4661      	mov	r1, ip
 8010e7e:	464e      	mov	r6, r9
 8010e80:	1b89      	subs	r1, r1, r6
 8010e82:	434b      	muls	r3, r1
 8010e84:	4950      	ldr	r1, [pc, #320]	; (8010fc8 <lv_draw_sw_blend_basic+0x60c>)
 8010e86:	095b      	lsrs	r3, r3, #5
 8010e88:	444b      	add	r3, r9
 8010e8a:	400b      	ands	r3, r1
    ret.full = (uint16_t)((result >> 16) | result);
 8010e8c:	0c19      	lsrs	r1, r3, #16
 8010e8e:	4319      	orrs	r1, r3
 8010e90:	b289      	uxth	r1, r1
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 8010e92:	3201      	adds	r2, #1
 8010e94:	8039      	strh	r1, [r7, #0]
                    FILL_NORMAL_MASK_PX(color)
 8010e96:	3001      	adds	r0, #1
 8010e98:	3702      	adds	r7, #2
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 8010e9a:	4294      	cmp	r4, r2
 8010e9c:	dcdc      	bgt.n	8010e58 <lv_draw_sw_blend_basic+0x49c>
 8010e9e:	46a1      	mov	r9, r4
                for(; x <= x_end4; x += 4) {
 8010ea0:	9b08      	ldr	r3, [sp, #32]
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	da00      	bge.n	8010ea8 <lv_draw_sw_blend_basic+0x4ec>
 8010ea6:	e080      	b.n	8010faa <lv_draw_sw_blend_basic+0x5ee>
 8010ea8:	0001      	movs	r1, r0
 8010eaa:	1d04      	adds	r4, r0, #4
 8010eac:	9808      	ldr	r0, [sp, #32]
 8010eae:	003b      	movs	r3, r7
 8010eb0:	4682      	mov	sl, r0
 8010eb2:	e061      	b.n	8010f78 <lv_draw_sw_blend_basic+0x5bc>
                    else if(mask32) {
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	d06e      	beq.n	8010f96 <lv_draw_sw_blend_basic+0x5da>
                        FILL_NORMAL_MASK_PX(color)
 8010eb8:	7808      	ldrb	r0, [r1, #0]
 8010eba:	002f      	movs	r7, r5
 8010ebc:	28ff      	cmp	r0, #255	; 0xff
 8010ebe:	d010      	beq.n	8010ee2 <lv_draw_sw_blend_basic+0x526>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010ec0:	881e      	ldrh	r6, [r3, #0]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010ec2:	3004      	adds	r0, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010ec4:	0437      	lsls	r7, r6, #16
 8010ec6:	4337      	orrs	r7, r6
 8010ec8:	4e3f      	ldr	r6, [pc, #252]	; (8010fc8 <lv_draw_sw_blend_basic+0x60c>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010eca:	08c0      	lsrs	r0, r0, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010ecc:	4037      	ands	r7, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010ece:	4666      	mov	r6, ip
 8010ed0:	1bf6      	subs	r6, r6, r7
 8010ed2:	4370      	muls	r0, r6
 8010ed4:	0940      	lsrs	r0, r0, #5
 8010ed6:	19c7      	adds	r7, r0, r7
 8010ed8:	483b      	ldr	r0, [pc, #236]	; (8010fc8 <lv_draw_sw_blend_basic+0x60c>)
 8010eda:	4007      	ands	r7, r0
    ret.full = (uint16_t)((result >> 16) | result);
 8010edc:	0c38      	lsrs	r0, r7, #16
 8010ede:	4307      	orrs	r7, r0
 8010ee0:	b2bf      	uxth	r7, r7
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8010ee2:	801f      	strh	r7, [r3, #0]
                        FILL_NORMAL_MASK_PX(color)
 8010ee4:	7848      	ldrb	r0, [r1, #1]
 8010ee6:	002f      	movs	r7, r5
 8010ee8:	28ff      	cmp	r0, #255	; 0xff
 8010eea:	d010      	beq.n	8010f0e <lv_draw_sw_blend_basic+0x552>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010eec:	885e      	ldrh	r6, [r3, #2]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010eee:	3004      	adds	r0, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010ef0:	0437      	lsls	r7, r6, #16
 8010ef2:	4337      	orrs	r7, r6
 8010ef4:	4e34      	ldr	r6, [pc, #208]	; (8010fc8 <lv_draw_sw_blend_basic+0x60c>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010ef6:	08c0      	lsrs	r0, r0, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010ef8:	4037      	ands	r7, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010efa:	4666      	mov	r6, ip
 8010efc:	1bf6      	subs	r6, r6, r7
 8010efe:	4370      	muls	r0, r6
 8010f00:	0940      	lsrs	r0, r0, #5
 8010f02:	19c7      	adds	r7, r0, r7
 8010f04:	4830      	ldr	r0, [pc, #192]	; (8010fc8 <lv_draw_sw_blend_basic+0x60c>)
 8010f06:	4007      	ands	r7, r0
    ret.full = (uint16_t)((result >> 16) | result);
 8010f08:	0c38      	lsrs	r0, r7, #16
 8010f0a:	4307      	orrs	r7, r0
 8010f0c:	b2bf      	uxth	r7, r7
    return ret;
 8010f0e:	805f      	strh	r7, [r3, #2]
                        FILL_NORMAL_MASK_PX(color)
 8010f10:	7888      	ldrb	r0, [r1, #2]
 8010f12:	002f      	movs	r7, r5
 8010f14:	28ff      	cmp	r0, #255	; 0xff
 8010f16:	d010      	beq.n	8010f3a <lv_draw_sw_blend_basic+0x57e>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010f18:	889e      	ldrh	r6, [r3, #4]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010f1a:	3004      	adds	r0, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010f1c:	0437      	lsls	r7, r6, #16
 8010f1e:	4337      	orrs	r7, r6
 8010f20:	4e29      	ldr	r6, [pc, #164]	; (8010fc8 <lv_draw_sw_blend_basic+0x60c>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010f22:	08c0      	lsrs	r0, r0, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010f24:	4037      	ands	r7, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010f26:	4666      	mov	r6, ip
 8010f28:	1bf6      	subs	r6, r6, r7
 8010f2a:	4370      	muls	r0, r6
 8010f2c:	0940      	lsrs	r0, r0, #5
 8010f2e:	19c7      	adds	r7, r0, r7
 8010f30:	4825      	ldr	r0, [pc, #148]	; (8010fc8 <lv_draw_sw_blend_basic+0x60c>)
 8010f32:	4007      	ands	r7, r0
    ret.full = (uint16_t)((result >> 16) | result);
 8010f34:	0c38      	lsrs	r0, r7, #16
 8010f36:	4307      	orrs	r7, r0
 8010f38:	b2bf      	uxth	r7, r7
    return ret;
 8010f3a:	809f      	strh	r7, [r3, #4]
                        FILL_NORMAL_MASK_PX(color)
 8010f3c:	78c8      	ldrb	r0, [r1, #3]
 8010f3e:	002f      	movs	r7, r5
 8010f40:	28ff      	cmp	r0, #255	; 0xff
 8010f42:	d010      	beq.n	8010f66 <lv_draw_sw_blend_basic+0x5aa>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010f44:	88de      	ldrh	r6, [r3, #6]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010f46:	3004      	adds	r0, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010f48:	0437      	lsls	r7, r6, #16
 8010f4a:	4337      	orrs	r7, r6
 8010f4c:	4e1e      	ldr	r6, [pc, #120]	; (8010fc8 <lv_draw_sw_blend_basic+0x60c>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010f4e:	08c0      	lsrs	r0, r0, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010f50:	4037      	ands	r7, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010f52:	4666      	mov	r6, ip
 8010f54:	1bf6      	subs	r6, r6, r7
 8010f56:	4370      	muls	r0, r6
 8010f58:	0940      	lsrs	r0, r0, #5
 8010f5a:	19c7      	adds	r7, r0, r7
 8010f5c:	481a      	ldr	r0, [pc, #104]	; (8010fc8 <lv_draw_sw_blend_basic+0x60c>)
 8010f5e:	4007      	ands	r7, r0
    ret.full = (uint16_t)((result >> 16) | result);
 8010f60:	0c38      	lsrs	r0, r7, #16
 8010f62:	4307      	orrs	r7, r0
 8010f64:	b2bf      	uxth	r7, r7
    return ret;
 8010f66:	80df      	strh	r7, [r3, #6]
 8010f68:	3308      	adds	r3, #8
 8010f6a:	0020      	movs	r0, r4
 8010f6c:	001f      	movs	r7, r3
                for(; x <= x_end4; x += 4) {
 8010f6e:	3204      	adds	r2, #4
 8010f70:	3104      	adds	r1, #4
 8010f72:	3404      	adds	r4, #4
 8010f74:	4592      	cmp	sl, r2
 8010f76:	db29      	blt.n	8010fcc <lv_draw_sw_blend_basic+0x610>
                    uint32_t mask32 = *((uint32_t *)mask);
 8010f78:	6808      	ldr	r0, [r1, #0]
                    if(mask32 == 0xFFFFFFFF) {
 8010f7a:	1c46      	adds	r6, r0, #1
 8010f7c:	d19a      	bne.n	8010eb4 <lv_draw_sw_blend_basic+0x4f8>
                        if((lv_uintptr_t)dest_buf & 0x3) {
 8010f7e:	4640      	mov	r0, r8
 8010f80:	4218      	tst	r0, r3
 8010f82:	d00c      	beq.n	8010f9e <lv_draw_sw_blend_basic+0x5e2>
                            *d = c32;
 8010f84:	9e06      	ldr	r6, [sp, #24]
 8010f86:	1c98      	adds	r0, r3, #2
                            *(dest_buf + 0) = color;
 8010f88:	801d      	strh	r5, [r3, #0]
                            *d = c32;
 8010f8a:	6006      	str	r6, [r0, #0]
                            *(dest_buf + 3) = color;
 8010f8c:	80dd      	strh	r5, [r3, #6]
                        dest_buf += 4;
 8010f8e:	3308      	adds	r3, #8
 8010f90:	001f      	movs	r7, r3
                        mask += 4;
 8010f92:	0020      	movs	r0, r4
 8010f94:	e7eb      	b.n	8010f6e <lv_draw_sw_blend_basic+0x5b2>
                        mask += 4;
 8010f96:	3308      	adds	r3, #8
 8010f98:	0020      	movs	r0, r4
                        dest_buf += 4;
 8010f9a:	001f      	movs	r7, r3
 8010f9c:	e7e7      	b.n	8010f6e <lv_draw_sw_blend_basic+0x5b2>
                            *d = c32;
 8010f9e:	9806      	ldr	r0, [sp, #24]
 8010fa0:	6018      	str	r0, [r3, #0]
                            *(d + 1) = c32;
 8010fa2:	6058      	str	r0, [r3, #4]
 8010fa4:	e7f3      	b.n	8010f8e <lv_draw_sw_blend_basic+0x5d2>
                    FILL_NORMAL_MASK_PX(color)
 8010fa6:	0027      	movs	r7, r4
 8010fa8:	0008      	movs	r0, r1
                dest_buf += (dest_stride - w);
 8010faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for(y = 0; y < h; y++) {
 8010fac:	9a05      	ldr	r2, [sp, #20]
                dest_buf += (dest_stride - w);
 8010fae:	469a      	mov	sl, r3
                mask += (mask_stride - w);
 8010fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                dest_buf += (dest_stride - w);
 8010fb2:	4457      	add	r7, sl
                mask += (mask_stride - w);
 8010fb4:	469a      	mov	sl, r3
            for(y = 0; y < h; y++) {
 8010fb6:	9b07      	ldr	r3, [sp, #28]
                mask += (mask_stride - w);
 8010fb8:	4450      	add	r0, sl
            for(y = 0; y < h; y++) {
 8010fba:	3301      	adds	r3, #1
 8010fbc:	9307      	str	r3, [sp, #28]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	dd00      	ble.n	8010fc4 <lv_draw_sw_blend_basic+0x608>
 8010fc2:	e740      	b.n	8010e46 <lv_draw_sw_blend_basic+0x48a>
 8010fc4:	e520      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
 8010fc6:	46c0      	nop			; (mov r8, r8)
 8010fc8:	07e0f81f 	.word	0x07e0f81f
                for(; x < w ; x++) {
 8010fcc:	4591      	cmp	r9, r2
 8010fce:	ddec      	ble.n	8010faa <lv_draw_sw_blend_basic+0x5ee>
                    FILL_NORMAL_MASK_PX(color)
 8010fd0:	7803      	ldrb	r3, [r0, #0]
 8010fd2:	0029      	movs	r1, r5
 8010fd4:	2bff      	cmp	r3, #255	; 0xff
 8010fd6:	d00f      	beq.n	8010ff8 <lv_draw_sw_blend_basic+0x63c>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010fd8:	883c      	ldrh	r4, [r7, #0]
 8010fda:	4eca      	ldr	r6, [pc, #808]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
 8010fdc:	0421      	lsls	r1, r4, #16
 8010fde:	4321      	orrs	r1, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010fe0:	4664      	mov	r4, ip
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010fe2:	4031      	ands	r1, r6
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010fe4:	3304      	adds	r3, #4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010fe6:	1a64      	subs	r4, r4, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010fe8:	08db      	lsrs	r3, r3, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010fea:	4363      	muls	r3, r4
 8010fec:	095b      	lsrs	r3, r3, #5
 8010fee:	1859      	adds	r1, r3, r1
 8010ff0:	4031      	ands	r1, r6
    ret.full = (uint16_t)((result >> 16) | result);
 8010ff2:	0c0b      	lsrs	r3, r1, #16
 8010ff4:	4319      	orrs	r1, r3
 8010ff6:	b289      	uxth	r1, r1
                for(; x < w ; x++) {
 8010ff8:	1c53      	adds	r3, r2, #1
 8010ffa:	8039      	strh	r1, [r7, #0]
                    FILL_NORMAL_MASK_PX(color)
 8010ffc:	1cbc      	adds	r4, r7, #2
 8010ffe:	1c41      	adds	r1, r0, #1
                for(; x < w ; x++) {
 8011000:	4599      	cmp	r9, r3
 8011002:	ddd0      	ble.n	8010fa6 <lv_draw_sw_blend_basic+0x5ea>
                    FILL_NORMAL_MASK_PX(color)
 8011004:	7843      	ldrb	r3, [r0, #1]
 8011006:	0029      	movs	r1, r5
 8011008:	2bff      	cmp	r3, #255	; 0xff
 801100a:	d00f      	beq.n	801102c <lv_draw_sw_blend_basic+0x670>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801100c:	887c      	ldrh	r4, [r7, #2]
 801100e:	4ebd      	ldr	r6, [pc, #756]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
 8011010:	0421      	lsls	r1, r4, #16
 8011012:	4321      	orrs	r1, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011014:	4664      	mov	r4, ip
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011016:	4031      	ands	r1, r6
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011018:	3304      	adds	r3, #4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801101a:	1a64      	subs	r4, r4, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801101c:	08db      	lsrs	r3, r3, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801101e:	4363      	muls	r3, r4
 8011020:	095b      	lsrs	r3, r3, #5
 8011022:	1859      	adds	r1, r3, r1
 8011024:	4031      	ands	r1, r6
    ret.full = (uint16_t)((result >> 16) | result);
 8011026:	0c0b      	lsrs	r3, r1, #16
 8011028:	4319      	orrs	r1, r3
 801102a:	b289      	uxth	r1, r1
                for(; x < w ; x++) {
 801102c:	1c93      	adds	r3, r2, #2
 801102e:	8079      	strh	r1, [r7, #2]
                    FILL_NORMAL_MASK_PX(color)
 8011030:	1d3c      	adds	r4, r7, #4
 8011032:	1c81      	adds	r1, r0, #2
                for(; x < w ; x++) {
 8011034:	4599      	cmp	r9, r3
 8011036:	ddb6      	ble.n	8010fa6 <lv_draw_sw_blend_basic+0x5ea>
                    FILL_NORMAL_MASK_PX(color)
 8011038:	7883      	ldrb	r3, [r0, #2]
 801103a:	0029      	movs	r1, r5
 801103c:	2bff      	cmp	r3, #255	; 0xff
 801103e:	d00f      	beq.n	8011060 <lv_draw_sw_blend_basic+0x6a4>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011040:	88bc      	ldrh	r4, [r7, #4]
 8011042:	4eb0      	ldr	r6, [pc, #704]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
 8011044:	0421      	lsls	r1, r4, #16
 8011046:	4321      	orrs	r1, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011048:	4664      	mov	r4, ip
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801104a:	4031      	ands	r1, r6
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801104c:	3304      	adds	r3, #4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801104e:	1a64      	subs	r4, r4, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011050:	08db      	lsrs	r3, r3, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011052:	4363      	muls	r3, r4
 8011054:	095b      	lsrs	r3, r3, #5
 8011056:	1859      	adds	r1, r3, r1
 8011058:	4031      	ands	r1, r6
    ret.full = (uint16_t)((result >> 16) | result);
 801105a:	0c0b      	lsrs	r3, r1, #16
 801105c:	4319      	orrs	r1, r3
 801105e:	b289      	uxth	r1, r1
                for(; x < w ; x++) {
 8011060:	3203      	adds	r2, #3
 8011062:	80b9      	strh	r1, [r7, #4]
                    FILL_NORMAL_MASK_PX(color)
 8011064:	1cc3      	adds	r3, r0, #3
 8011066:	1db9      	adds	r1, r7, #6
                for(; x < w ; x++) {
 8011068:	4591      	cmp	r9, r2
 801106a:	dc00      	bgt.n	801106e <lv_draw_sw_blend_basic+0x6b2>
 801106c:	e30d      	b.n	801168a <lv_draw_sw_blend_basic+0xcce>
                    FILL_NORMAL_MASK_PX(color)
 801106e:	78c3      	ldrb	r3, [r0, #3]
 8011070:	002a      	movs	r2, r5
 8011072:	2bff      	cmp	r3, #255	; 0xff
 8011074:	d00f      	beq.n	8011096 <lv_draw_sw_blend_basic+0x6da>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011076:	88f9      	ldrh	r1, [r7, #6]
 8011078:	4ca2      	ldr	r4, [pc, #648]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
 801107a:	040a      	lsls	r2, r1, #16
 801107c:	430a      	orrs	r2, r1
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801107e:	4661      	mov	r1, ip
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011080:	4022      	ands	r2, r4
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011082:	3304      	adds	r3, #4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011084:	1a89      	subs	r1, r1, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011086:	08db      	lsrs	r3, r3, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011088:	434b      	muls	r3, r1
 801108a:	095b      	lsrs	r3, r3, #5
 801108c:	189a      	adds	r2, r3, r2
 801108e:	4022      	ands	r2, r4
    ret.full = (uint16_t)((result >> 16) | result);
 8011090:	0c13      	lsrs	r3, r2, #16
 8011092:	431a      	orrs	r2, r3
 8011094:	b292      	uxth	r2, r2
    return ret;
 8011096:	80fa      	strh	r2, [r7, #6]
 8011098:	3004      	adds	r0, #4
 801109a:	3708      	adds	r7, #8
                for(; x < w ; x++) {
 801109c:	e785      	b.n	8010faa <lv_draw_sw_blend_basic+0x5ee>
 801109e:	46a1      	mov	r9, r4
                for(; x <= x_end4; x += 4) {
 80110a0:	9b08      	ldr	r3, [sp, #32]
 80110a2:	4293      	cmp	r3, r2
 80110a4:	db00      	blt.n	80110a8 <lv_draw_sw_blend_basic+0x6ec>
 80110a6:	e6ff      	b.n	8010ea8 <lv_draw_sw_blend_basic+0x4ec>
 80110a8:	e792      	b.n	8010fd0 <lv_draw_sw_blend_basic+0x614>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 80110aa:	2302      	movs	r3, #2
 80110ac:	5ee2      	ldrsh	r2, [r4, r3]
 80110ae:	9207      	str	r2, [sp, #28]
 80110b0:	2106      	movs	r1, #6
 80110b2:	5e63      	ldrsh	r3, [r4, r1]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	dd00      	ble.n	80110ba <lv_draw_sw_blend_basic+0x6fe>
 80110b8:	e4a6      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 80110ba:	2204      	movs	r2, #4
 80110bc:	5ea3      	ldrsh	r3, [r4, r2]
 80110be:	aa01      	add	r2, sp, #4
 80110c0:	4693      	mov	fp, r2
 80110c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110c4:	4681      	mov	r9, r0
 80110c6:	4690      	mov	r8, r2
 80110c8:	2200      	movs	r2, #0
 80110ca:	5ea5      	ldrsh	r5, [r4, r2]
 80110cc:	429d      	cmp	r5, r3
 80110ce:	dd00      	ble.n	80110d2 <lv_draw_sw_blend_basic+0x716>
 80110d0:	e49a      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 80110d2:	466b      	mov	r3, sp
 80110d4:	271c      	movs	r7, #28
 80110d6:	5fdf      	ldrsh	r7, [r3, r7]
 80110d8:	003b      	movs	r3, r7
 80110da:	4647      	mov	r7, r8
 80110dc:	4698      	mov	r8, r3
 80110de:	464b      	mov	r3, r9
 80110e0:	9a05      	ldr	r2, [sp, #20]
 80110e2:	4669      	mov	r1, sp
 80110e4:	6818      	ldr	r0, [r3, #0]
 80110e6:	9202      	str	r2, [sp, #8]
 80110e8:	465a      	mov	r2, fp
 80110ea:	8b09      	ldrh	r1, [r1, #24]
 80110ec:	b22b      	sxth	r3, r5
 80110ee:	8011      	strh	r1, [r2, #0]
 80110f0:	4642      	mov	r2, r8
 80110f2:	9200      	str	r2, [sp, #0]
 80110f4:	4651      	mov	r1, sl
 80110f6:	003a      	movs	r2, r7
 80110f8:	69c6      	ldr	r6, [r0, #28]
 80110fa:	47b0      	blx	r6
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 80110fc:	2204      	movs	r2, #4
 80110fe:	5ea3      	ldrsh	r3, [r4, r2]
 8011100:	3501      	adds	r5, #1
 8011102:	429d      	cmp	r5, r3
 8011104:	ddeb      	ble.n	80110de <lv_draw_sw_blend_basic+0x722>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 8011106:	9907      	ldr	r1, [sp, #28]
 8011108:	46b8      	mov	r8, r7
 801110a:	3101      	adds	r1, #1
 801110c:	9107      	str	r1, [sp, #28]
 801110e:	2006      	movs	r0, #6
 8011110:	5e22      	ldrsh	r2, [r4, r0]
 8011112:	428a      	cmp	r2, r1
 8011114:	dad8      	bge.n	80110c8 <lv_draw_sw_blend_basic+0x70c>
 8011116:	e477      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
            int32_t x_end4 = w - 4;
 8011118:	1f03      	subs	r3, r0, #4
 801111a:	4699      	mov	r9, r3
            for(y = 0; y < h; y++) {
 801111c:	9b06      	ldr	r3, [sp, #24]
 801111e:	2b00      	cmp	r3, #0
 8011120:	dc00      	bgt.n	8011124 <lv_draw_sw_blend_basic+0x768>
 8011122:	e471      	b.n	8010a08 <lv_draw_sw_blend_basic+0x4c>
                dest_buf += dest_stride;
 8011124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011126:	005b      	lsls	r3, r3, #1
 8011128:	9309      	str	r3, [sp, #36]	; 0x24
                src_buf += src_stride;
 801112a:	006b      	lsls	r3, r5, #1
 801112c:	930b      	str	r3, [sp, #44]	; 0x2c
            for(y = 0; y < h; y++) {
 801112e:	2300      	movs	r3, #0
 8011130:	9305      	str	r3, [sp, #20]
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8011132:	465b      	mov	r3, fp
 8011134:	2800      	cmp	r0, #0
 8011136:	dd36      	ble.n	80111a6 <lv_draw_sw_blend_basic+0x7ea>
 8011138:	2203      	movs	r2, #3
 801113a:	2100      	movs	r1, #0
 801113c:	4213      	tst	r3, r2
 801113e:	d100      	bne.n	8011142 <lv_draw_sw_blend_basic+0x786>
 8011140:	e1a8      	b.n	8011494 <lv_draw_sw_blend_basic+0xad8>
 8011142:	4654      	mov	r4, sl
 8011144:	465b      	mov	r3, fp
 8011146:	2100      	movs	r1, #0
 8011148:	9f08      	ldr	r7, [sp, #32]
 801114a:	e024      	b.n	8011196 <lv_draw_sw_blend_basic+0x7da>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801114c:	8825      	ldrh	r5, [r4, #0]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801114e:	3204      	adds	r2, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011150:	46ac      	mov	ip, r5
 8011152:	4666      	mov	r6, ip
 8011154:	042d      	lsls	r5, r5, #16
 8011156:	4335      	orrs	r5, r6
 8011158:	4e6a      	ldr	r6, [pc, #424]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801115a:	08d2      	lsrs	r2, r2, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801115c:	4035      	ands	r5, r6
 801115e:	46ac      	mov	ip, r5
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011160:	883d      	ldrh	r5, [r7, #0]
 8011162:	46a8      	mov	r8, r5
 8011164:	4646      	mov	r6, r8
 8011166:	042d      	lsls	r5, r5, #16
 8011168:	4335      	orrs	r5, r6
 801116a:	4e66      	ldr	r6, [pc, #408]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
 801116c:	4035      	ands	r5, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801116e:	4666      	mov	r6, ip
 8011170:	1bad      	subs	r5, r5, r6
 8011172:	436a      	muls	r2, r5
 8011174:	4d63      	ldr	r5, [pc, #396]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
 8011176:	0952      	lsrs	r2, r2, #5
 8011178:	4462      	add	r2, ip
 801117a:	402a      	ands	r2, r5
    ret.full = (uint16_t)((result >> 16) | result);
 801117c:	0c15      	lsrs	r5, r2, #16
 801117e:	432a      	orrs	r2, r5
                    MAP_NORMAL_MASK_PX(x)
 8011180:	8022      	strh	r2, [r4, #0]
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8011182:	3101      	adds	r1, #1
                    MAP_NORMAL_MASK_PX(x)
 8011184:	3301      	adds	r3, #1
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8011186:	4288      	cmp	r0, r1
 8011188:	dd0e      	ble.n	80111a8 <lv_draw_sw_blend_basic+0x7ec>
 801118a:	2203      	movs	r2, #3
 801118c:	3702      	adds	r7, #2
 801118e:	3402      	adds	r4, #2
 8011190:	4213      	tst	r3, r2
 8011192:	d100      	bne.n	8011196 <lv_draw_sw_blend_basic+0x7da>
 8011194:	e17e      	b.n	8011494 <lv_draw_sw_blend_basic+0xad8>
                    MAP_NORMAL_MASK_PX(x)
 8011196:	781a      	ldrb	r2, [r3, #0]
 8011198:	2a00      	cmp	r2, #0
 801119a:	d0f2      	beq.n	8011182 <lv_draw_sw_blend_basic+0x7c6>
 801119c:	2aff      	cmp	r2, #255	; 0xff
 801119e:	d1d5      	bne.n	801114c <lv_draw_sw_blend_basic+0x790>
 80111a0:	883a      	ldrh	r2, [r7, #0]
 80111a2:	8022      	strh	r2, [r4, #0]
 80111a4:	e7ed      	b.n	8011182 <lv_draw_sw_blend_basic+0x7c6>
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 80111a6:	2100      	movs	r1, #0
                for(; x < x_end4; x += 4) {
 80111a8:	4589      	cmp	r9, r1
 80111aa:	dc00      	bgt.n	80111ae <lv_draw_sw_blend_basic+0x7f2>
 80111ac:	e15e      	b.n	801146c <lv_draw_sw_blend_basic+0xab0>
 80111ae:	9c08      	ldr	r4, [sp, #32]
 80111b0:	004a      	lsls	r2, r1, #1
 80111b2:	18a4      	adds	r4, r4, r2
 80111b4:	464f      	mov	r7, r9
 80111b6:	4452      	add	r2, sl
 80111b8:	9007      	str	r0, [sp, #28]
 80111ba:	e094      	b.n	80112e6 <lv_draw_sw_blend_basic+0x92a>
                            MAP_NORMAL_MASK_PX(x)
 80111bc:	781d      	ldrb	r5, [r3, #0]
 80111be:	2d00      	cmp	r5, #0
 80111c0:	d01f      	beq.n	8011202 <lv_draw_sw_blend_basic+0x846>
 80111c2:	2dff      	cmp	r5, #255	; 0xff
 80111c4:	d100      	bne.n	80111c8 <lv_draw_sw_blend_basic+0x80c>
 80111c6:	e169      	b.n	801149c <lv_draw_sw_blend_basic+0xae0>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80111c8:	8816      	ldrh	r6, [r2, #0]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80111ca:	3504      	adds	r5, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80111cc:	46b0      	mov	r8, r6
 80111ce:	4640      	mov	r0, r8
 80111d0:	0436      	lsls	r6, r6, #16
 80111d2:	4306      	orrs	r6, r0
 80111d4:	484b      	ldr	r0, [pc, #300]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80111d6:	08ed      	lsrs	r5, r5, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80111d8:	4006      	ands	r6, r0
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80111da:	8820      	ldrh	r0, [r4, #0]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80111dc:	46b4      	mov	ip, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80111de:	4681      	mov	r9, r0
 80111e0:	0400      	lsls	r0, r0, #16
 80111e2:	0006      	movs	r6, r0
 80111e4:	4648      	mov	r0, r9
 80111e6:	4306      	orrs	r6, r0
 80111e8:	4846      	ldr	r0, [pc, #280]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
 80111ea:	4006      	ands	r6, r0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80111ec:	0030      	movs	r0, r6
 80111ee:	4666      	mov	r6, ip
 80111f0:	1b80      	subs	r0, r0, r6
 80111f2:	4345      	muls	r5, r0
 80111f4:	4843      	ldr	r0, [pc, #268]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
 80111f6:	096d      	lsrs	r5, r5, #5
 80111f8:	4465      	add	r5, ip
 80111fa:	4005      	ands	r5, r0
    ret.full = (uint16_t)((result >> 16) | result);
 80111fc:	0c28      	lsrs	r0, r5, #16
 80111fe:	4305      	orrs	r5, r0
 8011200:	8015      	strh	r5, [r2, #0]
                            MAP_NORMAL_MASK_PX(x + 1)
 8011202:	785d      	ldrb	r5, [r3, #1]
 8011204:	2d00      	cmp	r5, #0
 8011206:	d020      	beq.n	801124a <lv_draw_sw_blend_basic+0x88e>
 8011208:	2dff      	cmp	r5, #255	; 0xff
 801120a:	d100      	bne.n	801120e <lv_draw_sw_blend_basic+0x852>
 801120c:	e14c      	b.n	80114a8 <lv_draw_sw_blend_basic+0xaec>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801120e:	8850      	ldrh	r0, [r2, #2]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011210:	3504      	adds	r5, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011212:	4680      	mov	r8, r0
 8011214:	0400      	lsls	r0, r0, #16
 8011216:	0006      	movs	r6, r0
 8011218:	4640      	mov	r0, r8
 801121a:	4306      	orrs	r6, r0
 801121c:	4839      	ldr	r0, [pc, #228]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801121e:	08ed      	lsrs	r5, r5, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011220:	4006      	ands	r6, r0
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011222:	8860      	ldrh	r0, [r4, #2]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011224:	46b4      	mov	ip, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011226:	4681      	mov	r9, r0
 8011228:	0400      	lsls	r0, r0, #16
 801122a:	0006      	movs	r6, r0
 801122c:	4648      	mov	r0, r9
 801122e:	4306      	orrs	r6, r0
 8011230:	4834      	ldr	r0, [pc, #208]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
 8011232:	4006      	ands	r6, r0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011234:	0030      	movs	r0, r6
 8011236:	4666      	mov	r6, ip
 8011238:	1b80      	subs	r0, r0, r6
 801123a:	4345      	muls	r5, r0
 801123c:	4831      	ldr	r0, [pc, #196]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
 801123e:	096d      	lsrs	r5, r5, #5
 8011240:	4465      	add	r5, ip
 8011242:	4005      	ands	r5, r0
    ret.full = (uint16_t)((result >> 16) | result);
 8011244:	0c28      	lsrs	r0, r5, #16
 8011246:	4305      	orrs	r5, r0
 8011248:	8055      	strh	r5, [r2, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
 801124a:	789d      	ldrb	r5, [r3, #2]
 801124c:	2d00      	cmp	r5, #0
 801124e:	d020      	beq.n	8011292 <lv_draw_sw_blend_basic+0x8d6>
 8011250:	2dff      	cmp	r5, #255	; 0xff
 8011252:	d100      	bne.n	8011256 <lv_draw_sw_blend_basic+0x89a>
 8011254:	e12b      	b.n	80114ae <lv_draw_sw_blend_basic+0xaf2>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011256:	8890      	ldrh	r0, [r2, #4]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011258:	3504      	adds	r5, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801125a:	4680      	mov	r8, r0
 801125c:	0400      	lsls	r0, r0, #16
 801125e:	0006      	movs	r6, r0
 8011260:	4640      	mov	r0, r8
 8011262:	4306      	orrs	r6, r0
 8011264:	4827      	ldr	r0, [pc, #156]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011266:	08ed      	lsrs	r5, r5, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011268:	4006      	ands	r6, r0
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801126a:	88a0      	ldrh	r0, [r4, #4]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801126c:	46b4      	mov	ip, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801126e:	4681      	mov	r9, r0
 8011270:	0400      	lsls	r0, r0, #16
 8011272:	0006      	movs	r6, r0
 8011274:	4648      	mov	r0, r9
 8011276:	4306      	orrs	r6, r0
 8011278:	4822      	ldr	r0, [pc, #136]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
 801127a:	4006      	ands	r6, r0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801127c:	0030      	movs	r0, r6
 801127e:	4666      	mov	r6, ip
 8011280:	1b80      	subs	r0, r0, r6
 8011282:	4345      	muls	r5, r0
 8011284:	481f      	ldr	r0, [pc, #124]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
 8011286:	096d      	lsrs	r5, r5, #5
 8011288:	4465      	add	r5, ip
 801128a:	4005      	ands	r5, r0
    ret.full = (uint16_t)((result >> 16) | result);
 801128c:	0c28      	lsrs	r0, r5, #16
 801128e:	4305      	orrs	r5, r0
 8011290:	8095      	strh	r5, [r2, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 8011292:	78dd      	ldrb	r5, [r3, #3]
 8011294:	2d00      	cmp	r5, #0
 8011296:	d020      	beq.n	80112da <lv_draw_sw_blend_basic+0x91e>
 8011298:	2dff      	cmp	r5, #255	; 0xff
 801129a:	d100      	bne.n	801129e <lv_draw_sw_blend_basic+0x8e2>
 801129c:	e101      	b.n	80114a2 <lv_draw_sw_blend_basic+0xae6>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801129e:	88d0      	ldrh	r0, [r2, #6]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80112a0:	3504      	adds	r5, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80112a2:	4680      	mov	r8, r0
 80112a4:	0400      	lsls	r0, r0, #16
 80112a6:	0006      	movs	r6, r0
 80112a8:	4640      	mov	r0, r8
 80112aa:	4306      	orrs	r6, r0
 80112ac:	4815      	ldr	r0, [pc, #84]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80112ae:	08ed      	lsrs	r5, r5, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80112b0:	4006      	ands	r6, r0
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80112b2:	88e0      	ldrh	r0, [r4, #6]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80112b4:	46b4      	mov	ip, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80112b6:	4681      	mov	r9, r0
 80112b8:	0400      	lsls	r0, r0, #16
 80112ba:	0006      	movs	r6, r0
 80112bc:	4648      	mov	r0, r9
 80112be:	4306      	orrs	r6, r0
 80112c0:	4810      	ldr	r0, [pc, #64]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
 80112c2:	4006      	ands	r6, r0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80112c4:	0030      	movs	r0, r6
 80112c6:	4666      	mov	r6, ip
 80112c8:	1b80      	subs	r0, r0, r6
 80112ca:	4345      	muls	r5, r0
 80112cc:	480d      	ldr	r0, [pc, #52]	; (8011304 <lv_draw_sw_blend_basic+0x948>)
 80112ce:	096d      	lsrs	r5, r5, #5
 80112d0:	4465      	add	r5, ip
 80112d2:	4005      	ands	r5, r0
    ret.full = (uint16_t)((result >> 16) | result);
 80112d4:	0c28      	lsrs	r0, r5, #16
 80112d6:	4305      	orrs	r5, r0
 80112d8:	80d5      	strh	r5, [r2, #6]
                for(; x < x_end4; x += 4) {
 80112da:	3104      	adds	r1, #4
                    mask32++;
 80112dc:	3304      	adds	r3, #4
                for(; x < x_end4; x += 4) {
 80112de:	3408      	adds	r4, #8
 80112e0:	3208      	adds	r2, #8
 80112e2:	428f      	cmp	r7, r1
 80112e4:	dd10      	ble.n	8011308 <lv_draw_sw_blend_basic+0x94c>
                    if(*mask32) {
 80112e6:	681d      	ldr	r5, [r3, #0]
 80112e8:	2d00      	cmp	r5, #0
 80112ea:	d0f6      	beq.n	80112da <lv_draw_sw_blend_basic+0x91e>
                        if((*mask32) == 0xFFFFFFFF) {
 80112ec:	3501      	adds	r5, #1
 80112ee:	d000      	beq.n	80112f2 <lv_draw_sw_blend_basic+0x936>
 80112f0:	e764      	b.n	80111bc <lv_draw_sw_blend_basic+0x800>
                            dest_buf[x] = src_buf[x];
 80112f2:	8825      	ldrh	r5, [r4, #0]
 80112f4:	8015      	strh	r5, [r2, #0]
                            dest_buf[x + 1] = src_buf[x + 1];
 80112f6:	8865      	ldrh	r5, [r4, #2]
 80112f8:	8055      	strh	r5, [r2, #2]
                            dest_buf[x + 2] = src_buf[x + 2];
 80112fa:	88a5      	ldrh	r5, [r4, #4]
 80112fc:	8095      	strh	r5, [r2, #4]
                            dest_buf[x + 3] = src_buf[x + 3];
 80112fe:	88e5      	ldrh	r5, [r4, #6]
 8011300:	80d5      	strh	r5, [r2, #6]
 8011302:	e7ea      	b.n	80112da <lv_draw_sw_blend_basic+0x91e>
 8011304:	07e0f81f 	.word	0x07e0f81f
                for(; x < w ; x++) {
 8011308:	9807      	ldr	r0, [sp, #28]
 801130a:	46b9      	mov	r9, r7
 801130c:	4288      	cmp	r0, r1
 801130e:	dc00      	bgt.n	8011312 <lv_draw_sw_blend_basic+0x956>
 8011310:	e0ac      	b.n	801146c <lv_draw_sw_blend_basic+0xab0>
                    MAP_NORMAL_MASK_PX(x)
 8011312:	781a      	ldrb	r2, [r3, #0]
 8011314:	2a00      	cmp	r2, #0
 8011316:	d01c      	beq.n	8011352 <lv_draw_sw_blend_basic+0x996>
 8011318:	2aff      	cmp	r2, #255	; 0xff
 801131a:	d100      	bne.n	801131e <lv_draw_sw_blend_basic+0x962>
 801131c:	e0ca      	b.n	80114b4 <lv_draw_sw_blend_basic+0xaf8>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801131e:	4654      	mov	r4, sl
 8011320:	004f      	lsls	r7, r1, #1
 8011322:	5be4      	ldrh	r4, [r4, r7]
 8011324:	4ecb      	ldr	r6, [pc, #812]	; (8011654 <lv_draw_sw_blend_basic+0xc98>)
 8011326:	0425      	lsls	r5, r4, #16
 8011328:	4325      	orrs	r5, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801132a:	9c08      	ldr	r4, [sp, #32]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801132c:	4035      	ands	r5, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801132e:	5be4      	ldrh	r4, [r4, r7]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011330:	3204      	adds	r2, #4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011332:	46a4      	mov	ip, r4
 8011334:	4666      	mov	r6, ip
 8011336:	0424      	lsls	r4, r4, #16
 8011338:	4334      	orrs	r4, r6
 801133a:	4ec6      	ldr	r6, [pc, #792]	; (8011654 <lv_draw_sw_blend_basic+0xc98>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801133c:	08d2      	lsrs	r2, r2, #3
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801133e:	4034      	ands	r4, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011340:	1b64      	subs	r4, r4, r5
 8011342:	4362      	muls	r2, r4
 8011344:	0952      	lsrs	r2, r2, #5
 8011346:	1955      	adds	r5, r2, r5
 8011348:	4035      	ands	r5, r6
    ret.full = (uint16_t)((result >> 16) | result);
 801134a:	0c2a      	lsrs	r2, r5, #16
 801134c:	4315      	orrs	r5, r2
 801134e:	4652      	mov	r2, sl
 8011350:	53d5      	strh	r5, [r2, r7]
                for(; x < w ; x++) {
 8011352:	1c4c      	adds	r4, r1, #1
 8011354:	4284      	cmp	r4, r0
 8011356:	db00      	blt.n	801135a <lv_draw_sw_blend_basic+0x99e>
 8011358:	e088      	b.n	801146c <lv_draw_sw_blend_basic+0xab0>
                    MAP_NORMAL_MASK_PX(x)
 801135a:	785a      	ldrb	r2, [r3, #1]
 801135c:	2a00      	cmp	r2, #0
 801135e:	d01c      	beq.n	801139a <lv_draw_sw_blend_basic+0x9de>
 8011360:	0064      	lsls	r4, r4, #1
 8011362:	2aff      	cmp	r2, #255	; 0xff
 8011364:	d100      	bne.n	8011368 <lv_draw_sw_blend_basic+0x9ac>
 8011366:	e0ab      	b.n	80114c0 <lv_draw_sw_blend_basic+0xb04>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011368:	4655      	mov	r5, sl
 801136a:	5b2d      	ldrh	r5, [r5, r4]
 801136c:	4eb9      	ldr	r6, [pc, #740]	; (8011654 <lv_draw_sw_blend_basic+0xc98>)
 801136e:	042f      	lsls	r7, r5, #16
 8011370:	432f      	orrs	r7, r5
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011372:	9d08      	ldr	r5, [sp, #32]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011374:	4037      	ands	r7, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011376:	5b2d      	ldrh	r5, [r5, r4]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011378:	3204      	adds	r2, #4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801137a:	46ac      	mov	ip, r5
 801137c:	4666      	mov	r6, ip
 801137e:	042d      	lsls	r5, r5, #16
 8011380:	4335      	orrs	r5, r6
 8011382:	4eb4      	ldr	r6, [pc, #720]	; (8011654 <lv_draw_sw_blend_basic+0xc98>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011384:	08d2      	lsrs	r2, r2, #3
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011386:	4035      	ands	r5, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011388:	1bed      	subs	r5, r5, r7
 801138a:	436a      	muls	r2, r5
 801138c:	0952      	lsrs	r2, r2, #5
 801138e:	19d7      	adds	r7, r2, r7
 8011390:	4037      	ands	r7, r6
    ret.full = (uint16_t)((result >> 16) | result);
 8011392:	0c3a      	lsrs	r2, r7, #16
 8011394:	4317      	orrs	r7, r2
 8011396:	4652      	mov	r2, sl
 8011398:	5317      	strh	r7, [r2, r4]
                for(; x < w ; x++) {
 801139a:	1c8c      	adds	r4, r1, #2
 801139c:	42a0      	cmp	r0, r4
 801139e:	dd65      	ble.n	801146c <lv_draw_sw_blend_basic+0xab0>
                    MAP_NORMAL_MASK_PX(x)
 80113a0:	789a      	ldrb	r2, [r3, #2]
 80113a2:	2a00      	cmp	r2, #0
 80113a4:	d01c      	beq.n	80113e0 <lv_draw_sw_blend_basic+0xa24>
 80113a6:	0064      	lsls	r4, r4, #1
 80113a8:	2aff      	cmp	r2, #255	; 0xff
 80113aa:	d100      	bne.n	80113ae <lv_draw_sw_blend_basic+0x9f2>
 80113ac:	e0cb      	b.n	8011546 <lv_draw_sw_blend_basic+0xb8a>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80113ae:	4655      	mov	r5, sl
 80113b0:	5b2d      	ldrh	r5, [r5, r4]
 80113b2:	4ea8      	ldr	r6, [pc, #672]	; (8011654 <lv_draw_sw_blend_basic+0xc98>)
 80113b4:	042f      	lsls	r7, r5, #16
 80113b6:	432f      	orrs	r7, r5
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80113b8:	9d08      	ldr	r5, [sp, #32]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80113ba:	4037      	ands	r7, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80113bc:	5b2d      	ldrh	r5, [r5, r4]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80113be:	3204      	adds	r2, #4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80113c0:	46ac      	mov	ip, r5
 80113c2:	4666      	mov	r6, ip
 80113c4:	042d      	lsls	r5, r5, #16
 80113c6:	4335      	orrs	r5, r6
 80113c8:	4ea2      	ldr	r6, [pc, #648]	; (8011654 <lv_draw_sw_blend_basic+0xc98>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80113ca:	08d2      	lsrs	r2, r2, #3
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80113cc:	4035      	ands	r5, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80113ce:	1bed      	subs	r5, r5, r7
 80113d0:	436a      	muls	r2, r5
 80113d2:	0952      	lsrs	r2, r2, #5
 80113d4:	19d7      	adds	r7, r2, r7
 80113d6:	4037      	ands	r7, r6
    ret.full = (uint16_t)((result >> 16) | result);
 80113d8:	0c3a      	lsrs	r2, r7, #16
 80113da:	4317      	orrs	r7, r2
 80113dc:	4652      	mov	r2, sl
 80113de:	5317      	strh	r7, [r2, r4]
                for(; x < w ; x++) {
 80113e0:	1ccc      	adds	r4, r1, #3
 80113e2:	42a0      	cmp	r0, r4
 80113e4:	dd42      	ble.n	801146c <lv_draw_sw_blend_basic+0xab0>
                    MAP_NORMAL_MASK_PX(x)
 80113e6:	78da      	ldrb	r2, [r3, #3]
 80113e8:	2a00      	cmp	r2, #0
 80113ea:	d01e      	beq.n	801142a <lv_draw_sw_blend_basic+0xa6e>
 80113ec:	0064      	lsls	r4, r4, #1
 80113ee:	2aff      	cmp	r2, #255	; 0xff
 80113f0:	d100      	bne.n	80113f4 <lv_draw_sw_blend_basic+0xa38>
 80113f2:	e0ad      	b.n	8011550 <lv_draw_sw_blend_basic+0xb94>
 80113f4:	46a4      	mov	ip, r4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80113f6:	4654      	mov	r4, sl
 80113f8:	4665      	mov	r5, ip
 80113fa:	5b64      	ldrh	r4, [r4, r5]
 80113fc:	4e95      	ldr	r6, [pc, #596]	; (8011654 <lv_draw_sw_blend_basic+0xc98>)
 80113fe:	0425      	lsls	r5, r4, #16
 8011400:	4325      	orrs	r5, r4
 8011402:	4035      	ands	r5, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011404:	4666      	mov	r6, ip
 8011406:	9c08      	ldr	r4, [sp, #32]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011408:	3204      	adds	r2, #4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801140a:	5ba7      	ldrh	r7, [r4, r6]
 801140c:	4e91      	ldr	r6, [pc, #580]	; (8011654 <lv_draw_sw_blend_basic+0xc98>)
 801140e:	043c      	lsls	r4, r7, #16
 8011410:	433c      	orrs	r4, r7
 8011412:	4034      	ands	r4, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011414:	1b64      	subs	r4, r4, r5
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011416:	08d2      	lsrs	r2, r2, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011418:	4362      	muls	r2, r4
 801141a:	0952      	lsrs	r2, r2, #5
 801141c:	1955      	adds	r5, r2, r5
 801141e:	4035      	ands	r5, r6
    ret.full = (uint16_t)((result >> 16) | result);
 8011420:	0c2a      	lsrs	r2, r5, #16
 8011422:	4315      	orrs	r5, r2
 8011424:	4664      	mov	r4, ip
 8011426:	4652      	mov	r2, sl
 8011428:	5315      	strh	r5, [r2, r4]
                for(; x < w ; x++) {
 801142a:	3104      	adds	r1, #4
 801142c:	4288      	cmp	r0, r1
 801142e:	dd1d      	ble.n	801146c <lv_draw_sw_blend_basic+0xab0>
                    MAP_NORMAL_MASK_PX(x)
 8011430:	791b      	ldrb	r3, [r3, #4]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d01a      	beq.n	801146c <lv_draw_sw_blend_basic+0xab0>
 8011436:	0049      	lsls	r1, r1, #1
 8011438:	2bff      	cmp	r3, #255	; 0xff
 801143a:	d100      	bne.n	801143e <lv_draw_sw_blend_basic+0xa82>
 801143c:	e08d      	b.n	801155a <lv_draw_sw_blend_basic+0xb9e>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801143e:	4652      	mov	r2, sl
 8011440:	4d84      	ldr	r5, [pc, #528]	; (8011654 <lv_draw_sw_blend_basic+0xc98>)
 8011442:	5a52      	ldrh	r2, [r2, r1]
 8011444:	002e      	movs	r6, r5
 8011446:	0414      	lsls	r4, r2, #16
 8011448:	4314      	orrs	r4, r2
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801144a:	9a08      	ldr	r2, [sp, #32]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801144c:	402c      	ands	r4, r5
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801144e:	5a55      	ldrh	r5, [r2, r1]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011450:	3304      	adds	r3, #4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011452:	042a      	lsls	r2, r5, #16
 8011454:	432a      	orrs	r2, r5
 8011456:	4032      	ands	r2, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011458:	1b12      	subs	r2, r2, r4
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801145a:	08db      	lsrs	r3, r3, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801145c:	4353      	muls	r3, r2
 801145e:	095b      	lsrs	r3, r3, #5
 8011460:	191c      	adds	r4, r3, r4
 8011462:	4034      	ands	r4, r6
    ret.full = (uint16_t)((result >> 16) | result);
 8011464:	0c23      	lsrs	r3, r4, #16
 8011466:	431c      	orrs	r4, r3
 8011468:	4653      	mov	r3, sl
 801146a:	525c      	strh	r4, [r3, r1]
                dest_buf += dest_stride;
 801146c:	9b09      	ldr	r3, [sp, #36]	; 0x24
                src_buf += src_stride;
 801146e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                dest_buf += dest_stride;
 8011470:	469c      	mov	ip, r3
 8011472:	44e2      	add	sl, ip
                src_buf += src_stride;
 8011474:	4694      	mov	ip, r2
 8011476:	9b08      	ldr	r3, [sp, #32]
            for(y = 0; y < h; y++) {
 8011478:	9a06      	ldr	r2, [sp, #24]
                src_buf += src_stride;
 801147a:	4463      	add	r3, ip
 801147c:	9308      	str	r3, [sp, #32]
                mask += mask_stride;
 801147e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011480:	469c      	mov	ip, r3
            for(y = 0; y < h; y++) {
 8011482:	9b05      	ldr	r3, [sp, #20]
                mask += mask_stride;
 8011484:	44e3      	add	fp, ip
            for(y = 0; y < h; y++) {
 8011486:	3301      	adds	r3, #1
 8011488:	9305      	str	r3, [sp, #20]
 801148a:	429a      	cmp	r2, r3
 801148c:	dd00      	ble.n	8011490 <lv_draw_sw_blend_basic+0xad4>
 801148e:	e650      	b.n	8011132 <lv_draw_sw_blend_basic+0x776>
 8011490:	f7ff faba 	bl	8010a08 <lv_draw_sw_blend_basic+0x4c>
                for(; x < x_end4; x += 4) {
 8011494:	4589      	cmp	r9, r1
 8011496:	dd00      	ble.n	801149a <lv_draw_sw_blend_basic+0xade>
 8011498:	e689      	b.n	80111ae <lv_draw_sw_blend_basic+0x7f2>
 801149a:	e73a      	b.n	8011312 <lv_draw_sw_blend_basic+0x956>
                            MAP_NORMAL_MASK_PX(x)
 801149c:	8825      	ldrh	r5, [r4, #0]
 801149e:	8015      	strh	r5, [r2, #0]
 80114a0:	e6af      	b.n	8011202 <lv_draw_sw_blend_basic+0x846>
                            MAP_NORMAL_MASK_PX(x + 3)
 80114a2:	88e5      	ldrh	r5, [r4, #6]
 80114a4:	80d5      	strh	r5, [r2, #6]
 80114a6:	e718      	b.n	80112da <lv_draw_sw_blend_basic+0x91e>
                            MAP_NORMAL_MASK_PX(x + 1)
 80114a8:	8865      	ldrh	r5, [r4, #2]
 80114aa:	8055      	strh	r5, [r2, #2]
 80114ac:	e6cd      	b.n	801124a <lv_draw_sw_blend_basic+0x88e>
                            MAP_NORMAL_MASK_PX(x + 2)
 80114ae:	88a5      	ldrh	r5, [r4, #4]
 80114b0:	8095      	strh	r5, [r2, #4]
 80114b2:	e6ee      	b.n	8011292 <lv_draw_sw_blend_basic+0x8d6>
                    MAP_NORMAL_MASK_PX(x)
 80114b4:	4655      	mov	r5, sl
 80114b6:	9c08      	ldr	r4, [sp, #32]
 80114b8:	004a      	lsls	r2, r1, #1
 80114ba:	5aa4      	ldrh	r4, [r4, r2]
 80114bc:	52ac      	strh	r4, [r5, r2]
 80114be:	e748      	b.n	8011352 <lv_draw_sw_blend_basic+0x996>
 80114c0:	4655      	mov	r5, sl
 80114c2:	9a08      	ldr	r2, [sp, #32]
 80114c4:	5b12      	ldrh	r2, [r2, r4]
 80114c6:	532a      	strh	r2, [r5, r4]
 80114c8:	e767      	b.n	801139a <lv_draw_sw_blend_basic+0x9de>
            for(y = 0; y < h; y++) {
 80114ca:	9b06      	ldr	r3, [sp, #24]
        if(opa >= LV_OPA_MAX) {
 80114cc:	2ffc      	cmp	r7, #252	; 0xfc
 80114ce:	d849      	bhi.n	8011564 <lv_draw_sw_blend_basic+0xba8>
            for(y = 0; y < h; y++) {
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	dc01      	bgt.n	80114d8 <lv_draw_sw_blend_basic+0xb1c>
 80114d4:	f7ff fa98 	bl	8010a08 <lv_draw_sw_blend_basic+0x4c>
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80114d8:	3704      	adds	r7, #4
 80114da:	08fb      	lsrs	r3, r7, #3
 80114dc:	469c      	mov	ip, r3
                dest_buf += dest_stride;
 80114de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(y = 0; y < h; y++) {
 80114e0:	2600      	movs	r6, #0
                dest_buf += dest_stride;
 80114e2:	005b      	lsls	r3, r3, #1
 80114e4:	4698      	mov	r8, r3
                src_buf += src_stride;
 80114e6:	006b      	lsls	r3, r5, #1
 80114e8:	4699      	mov	r9, r3
 80114ea:	2800      	cmp	r0, #0
 80114ec:	dc01      	bgt.n	80114f2 <lv_draw_sw_blend_basic+0xb36>
 80114ee:	f7ff fa8b 	bl	8010a08 <lv_draw_sw_blend_basic+0x4c>
 80114f2:	0002      	movs	r2, r0
 80114f4:	4663      	mov	r3, ip
 80114f6:	4650      	mov	r0, sl
 80114f8:	4692      	mov	sl, r2
 80114fa:	46b3      	mov	fp, r6
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80114fc:	4f55      	ldr	r7, [pc, #340]	; (8011654 <lv_draw_sw_blend_basic+0xc98>)
 80114fe:	9e08      	ldr	r6, [sp, #32]
 8011500:	9305      	str	r3, [sp, #20]
            for(y = 0; y < h; y++) {
 8011502:	2100      	movs	r1, #0
                for(x = 0; x < w; x++) {
 8011504:	2400      	movs	r4, #0
 8011506:	5a42      	ldrh	r2, [r0, r1]
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011508:	5a75      	ldrh	r5, [r6, r1]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801150a:	0413      	lsls	r3, r2, #16
 801150c:	4313      	orrs	r3, r2
 801150e:	403b      	ands	r3, r7
 8011510:	001a      	movs	r2, r3
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011512:	042b      	lsls	r3, r5, #16
 8011514:	432b      	orrs	r3, r5
 8011516:	403b      	ands	r3, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011518:	9d05      	ldr	r5, [sp, #20]
 801151a:	1a9b      	subs	r3, r3, r2
 801151c:	436b      	muls	r3, r5
 801151e:	095b      	lsrs	r3, r3, #5
 8011520:	189b      	adds	r3, r3, r2
 8011522:	403b      	ands	r3, r7
    ret.full = (uint16_t)((result >> 16) | result);
 8011524:	0c1a      	lsrs	r2, r3, #16
 8011526:	4313      	orrs	r3, r2
 8011528:	3401      	adds	r4, #1
                    dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
 801152a:	5243      	strh	r3, [r0, r1]
                for(x = 0; x < w; x++) {
 801152c:	3102      	adds	r1, #2
 801152e:	45a2      	cmp	sl, r4
 8011530:	dce9      	bgt.n	8011506 <lv_draw_sw_blend_basic+0xb4a>
            for(y = 0; y < h; y++) {
 8011532:	2301      	movs	r3, #1
 8011534:	469c      	mov	ip, r3
 8011536:	9b06      	ldr	r3, [sp, #24]
 8011538:	44e3      	add	fp, ip
                dest_buf += dest_stride;
 801153a:	4440      	add	r0, r8
                src_buf += src_stride;
 801153c:	444e      	add	r6, r9
            for(y = 0; y < h; y++) {
 801153e:	455b      	cmp	r3, fp
 8011540:	dcdf      	bgt.n	8011502 <lv_draw_sw_blend_basic+0xb46>
 8011542:	f7ff fa61 	bl	8010a08 <lv_draw_sw_blend_basic+0x4c>
                    MAP_NORMAL_MASK_PX(x)
 8011546:	4655      	mov	r5, sl
 8011548:	9a08      	ldr	r2, [sp, #32]
 801154a:	5b12      	ldrh	r2, [r2, r4]
 801154c:	532a      	strh	r2, [r5, r4]
 801154e:	e747      	b.n	80113e0 <lv_draw_sw_blend_basic+0xa24>
 8011550:	4655      	mov	r5, sl
 8011552:	9a08      	ldr	r2, [sp, #32]
 8011554:	5b12      	ldrh	r2, [r2, r4]
 8011556:	532a      	strh	r2, [r5, r4]
 8011558:	e767      	b.n	801142a <lv_draw_sw_blend_basic+0xa6e>
 801155a:	4652      	mov	r2, sl
 801155c:	9b08      	ldr	r3, [sp, #32]
 801155e:	5a5b      	ldrh	r3, [r3, r1]
 8011560:	5253      	strh	r3, [r2, r1]
 8011562:	e783      	b.n	801146c <lv_draw_sw_blend_basic+0xab0>
            for(y = 0; y < h; y++) {
 8011564:	2b00      	cmp	r3, #0
 8011566:	dc01      	bgt.n	801156c <lv_draw_sw_blend_basic+0xbb0>
 8011568:	f7ff fa4e 	bl	8010a08 <lv_draw_sw_blend_basic+0x4c>
                dest_buf += dest_stride;
 801156c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                src_buf += src_stride;
 801156e:	006d      	lsls	r5, r5, #1
                dest_buf += dest_stride;
 8011570:	005e      	lsls	r6, r3, #1
            for(y = 0; y < h; y++) {
 8011572:	002b      	movs	r3, r5
 8011574:	2400      	movs	r4, #0
 8011576:	4655      	mov	r5, sl
 8011578:	469a      	mov	sl, r3
 801157a:	46b1      	mov	r9, r6
 801157c:	0026      	movs	r6, r4
 801157e:	9c08      	ldr	r4, [sp, #32]
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 8011580:	0047      	lsls	r7, r0, #1
 8011582:	0021      	movs	r1, r4
 8011584:	0028      	movs	r0, r5
 8011586:	003a      	movs	r2, r7
 8011588:	f003 fe2e 	bl	80151e8 <lv_memcpy>
            for(y = 0; y < h; y++) {
 801158c:	9b06      	ldr	r3, [sp, #24]
 801158e:	3601      	adds	r6, #1
                dest_buf += dest_stride;
 8011590:	444d      	add	r5, r9
                src_buf += src_stride;
 8011592:	4454      	add	r4, sl
            for(y = 0; y < h; y++) {
 8011594:	42b3      	cmp	r3, r6
 8011596:	dcf4      	bgt.n	8011582 <lv_draw_sw_blend_basic+0xbc6>
 8011598:	f7ff fa36 	bl	8010a08 <lv_draw_sw_blend_basic+0x4c>
            last_dest_color.full = dest_buf[0].full;
 801159c:	4652      	mov	r2, sl
 801159e:	8811      	ldrh	r1, [r2, #0]
            for(y = 0; y < h; y++) {
 80115a0:	9a05      	ldr	r2, [sp, #20]
 80115a2:	2a00      	cmp	r2, #0
 80115a4:	dc01      	bgt.n	80115aa <lv_draw_sw_blend_basic+0xbee>
 80115a6:	f7ff fa2f 	bl	8010a08 <lv_draw_sw_blend_basic+0x4c>
                dest_buf += dest_stride;
 80115aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80115ac:	0052      	lsls	r2, r2, #1
 80115ae:	9208      	str	r2, [sp, #32]
                mask += (mask_stride - w);
 80115b0:	464a      	mov	r2, r9
 80115b2:	1bd2      	subs	r2, r2, r7
 80115b4:	2f00      	cmp	r7, #0
 80115b6:	dc01      	bgt.n	80115bc <lv_draw_sw_blend_basic+0xc00>
 80115b8:	f7ff fa26 	bl	8010a08 <lv_draw_sw_blend_basic+0x4c>
 80115bc:	007c      	lsls	r4, r7, #1
 80115be:	4454      	add	r4, sl
 80115c0:	46a0      	mov	r8, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80115c2:	431d      	orrs	r5, r3
 80115c4:	4b23      	ldr	r3, [pc, #140]	; (8011654 <lv_draw_sw_blend_basic+0xc98>)
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 80115c6:	2400      	movs	r4, #0
 80115c8:	401d      	ands	r5, r3
 80115ca:	46a9      	mov	r9, r5
 80115cc:	000b      	movs	r3, r1
 80115ce:	4646      	mov	r6, r8
 80115d0:	000d      	movs	r5, r1
 80115d2:	18ba      	adds	r2, r7, r2
 80115d4:	9406      	str	r4, [sp, #24]
            for(y = 0; y < h; y++) {
 80115d6:	9407      	str	r4, [sp, #28]
 80115d8:	9209      	str	r2, [sp, #36]	; 0x24
                for(x = 0; x < w; x++) {
 80115da:	4652      	mov	r2, sl
            for(y = 0; y < h; y++) {
 80115dc:	4659      	mov	r1, fp
                    if(*mask) {
 80115de:	780c      	ldrb	r4, [r1, #0]
 80115e0:	2c00      	cmp	r4, #0
 80115e2:	d01a      	beq.n	801161a <lv_draw_sw_blend_basic+0xc5e>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 80115e4:	4284      	cmp	r4, r0
 80115e6:	d02c      	beq.n	8011642 <lv_draw_sw_blend_basic+0xc86>
 80115e8:	2cff      	cmp	r4, #255	; 0xff
 80115ea:	d030      	beq.n	801164e <lv_draw_sw_blend_basic+0xc92>
                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
 80115ec:	4660      	mov	r0, ip
 80115ee:	4360      	muls	r0, r4
 80115f0:	0a03      	lsrs	r3, r0, #8
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 80115f2:	9306      	str	r3, [sp, #24]
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 80115f4:	8815      	ldrh	r5, [r2, #0]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80115f6:	4f17      	ldr	r7, [pc, #92]	; (8011654 <lv_draw_sw_blend_basic+0xc98>)
 80115f8:	0428      	lsls	r0, r5, #16
 80115fa:	4328      	orrs	r0, r5
 80115fc:	4038      	ands	r0, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80115fe:	464f      	mov	r7, r9
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011600:	3304      	adds	r3, #4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011602:	1a3f      	subs	r7, r7, r0
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011604:	08db      	lsrs	r3, r3, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011606:	437b      	muls	r3, r7
 8011608:	095b      	lsrs	r3, r3, #5
 801160a:	1818      	adds	r0, r3, r0
 801160c:	4b11      	ldr	r3, [pc, #68]	; (8011654 <lv_draw_sw_blend_basic+0xc98>)
 801160e:	4018      	ands	r0, r3
    ret.full = (uint16_t)((result >> 16) | result);
 8011610:	0c03      	lsrs	r3, r0, #16
 8011612:	4303      	orrs	r3, r0
 8011614:	0020      	movs	r0, r4
 8011616:	b29b      	uxth	r3, r3
                        dest_buf[x] = last_res_color;
 8011618:	8013      	strh	r3, [r2, #0]
                for(x = 0; x < w; x++) {
 801161a:	3202      	adds	r2, #2
                    mask++;
 801161c:	3101      	adds	r1, #1
                for(x = 0; x < w; x++) {
 801161e:	4296      	cmp	r6, r2
 8011620:	d1dd      	bne.n	80115de <lv_draw_sw_blend_basic+0xc22>
                dest_buf += dest_stride;
 8011622:	9908      	ldr	r1, [sp, #32]
 8011624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011626:	4688      	mov	r8, r1
 8011628:	44c2      	add	sl, r8
                mask += (mask_stride - w);
 801162a:	4690      	mov	r8, r2
 801162c:	44c3      	add	fp, r8
            for(y = 0; y < h; y++) {
 801162e:	4688      	mov	r8, r1
 8011630:	9a07      	ldr	r2, [sp, #28]
 8011632:	9905      	ldr	r1, [sp, #20]
 8011634:	3201      	adds	r2, #1
 8011636:	9207      	str	r2, [sp, #28]
 8011638:	4446      	add	r6, r8
 801163a:	4291      	cmp	r1, r2
 801163c:	dccd      	bgt.n	80115da <lv_draw_sw_blend_basic+0xc1e>
 801163e:	f7ff f9e3 	bl	8010a08 <lv_draw_sw_blend_basic+0x4c>
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 8011642:	8817      	ldrh	r7, [r2, #0]
 8011644:	42af      	cmp	r7, r5
 8011646:	d0e7      	beq.n	8011618 <lv_draw_sw_blend_basic+0xc5c>
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011648:	003d      	movs	r5, r7
 801164a:	9b06      	ldr	r3, [sp, #24]
 801164c:	e7d3      	b.n	80115f6 <lv_draw_sw_blend_basic+0xc3a>
 801164e:	4663      	mov	r3, ip
 8011650:	9306      	str	r3, [sp, #24]
 8011652:	e7cf      	b.n	80115f4 <lv_draw_sw_blend_basic+0xc38>
 8011654:	07e0f81f 	.word	0x07e0f81f
        if(opa >= LV_OPA_MAX) {
 8011658:	4663      	mov	r3, ip
 801165a:	2bfc      	cmp	r3, #252	; 0xfc
 801165c:	d918      	bls.n	8011690 <lv_draw_sw_blend_basic+0xcd4>
            for(y = 0; y < h; y++) {
 801165e:	9b05      	ldr	r3, [sp, #20]
 8011660:	2b00      	cmp	r3, #0
 8011662:	dc01      	bgt.n	8011668 <lv_draw_sw_blend_basic+0xcac>
 8011664:	f7ff f9d0 	bl	8010a08 <lv_draw_sw_blend_basic+0x4c>
 8011668:	46a8      	mov	r8, r5
 801166a:	2400      	movs	r4, #0
 801166c:	4655      	mov	r5, sl
                dest_buf += dest_stride;
 801166e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011670:	005e      	lsls	r6, r3, #1
                lv_color_fill(dest_buf, color, w);
 8011672:	0028      	movs	r0, r5
 8011674:	003a      	movs	r2, r7
 8011676:	4641      	mov	r1, r8
 8011678:	f003 f894 	bl	80147a4 <lv_color_fill>
            for(y = 0; y < h; y++) {
 801167c:	9b05      	ldr	r3, [sp, #20]
 801167e:	3401      	adds	r4, #1
                dest_buf += dest_stride;
 8011680:	19ad      	adds	r5, r5, r6
            for(y = 0; y < h; y++) {
 8011682:	42a3      	cmp	r3, r4
 8011684:	dcf5      	bgt.n	8011672 <lv_draw_sw_blend_basic+0xcb6>
 8011686:	f7ff f9bf 	bl	8010a08 <lv_draw_sw_blend_basic+0x4c>
                    FILL_NORMAL_MASK_PX(color)
 801168a:	000f      	movs	r7, r1
 801168c:	0018      	movs	r0, r3
 801168e:	e48c      	b.n	8010faa <lv_draw_sw_blend_basic+0x5ee>
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011690:	042b      	lsls	r3, r5, #16
 8011692:	0018      	movs	r0, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011694:	4661      	mov	r1, ip
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011696:	4a52      	ldr	r2, [pc, #328]	; (80117e0 <lv_draw_sw_blend_basic+0xe24>)
 8011698:	4328      	orrs	r0, r5
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801169a:	3104      	adds	r1, #4
 801169c:	08c9      	lsrs	r1, r1, #3
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801169e:	4010      	ands	r0, r2
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80116a0:	4348      	muls	r0, r1
            opa = opa << 3;
 80116a2:	00c9      	lsls	r1, r1, #3
 80116a4:	b2c9      	uxtb	r1, r1
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 80116a6:	0edb      	lsrs	r3, r3, #27
 80116a8:	434b      	muls	r3, r1
 80116aa:	9306      	str	r3, [sp, #24]
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 80116ac:	056b      	lsls	r3, r5, #21
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 80116ae:	06ed      	lsls	r5, r5, #27
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 80116b0:	0e9b      	lsrs	r3, r3, #26
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 80116b2:	0eed      	lsrs	r5, r5, #27
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 80116b4:	434b      	muls	r3, r1
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 80116b6:	434d      	muls	r5, r1
            lv_opa_t opa_inv = 255 - opa;
 80116b8:	43c9      	mvns	r1, r1
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80116ba:	0940      	lsrs	r0, r0, #5
 80116bc:	4010      	ands	r0, r2
    return ret;
 80116be:	06c2      	lsls	r2, r0, #27
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 80116c0:	9307      	str	r3, [sp, #28]
 80116c2:	b2cb      	uxtb	r3, r1
 80116c4:	0ed2      	lsrs	r2, r2, #27
 80116c6:	4699      	mov	r9, r3
            for(y = 0; y < h; y++) {
 80116c8:	9b05      	ldr	r3, [sp, #20]
 80116ca:	0016      	movs	r6, r2
 80116cc:	0d42      	lsrs	r2, r0, #21
 80116ce:	0400      	lsls	r0, r0, #16
 80116d0:	4690      	mov	r8, r2
 80116d2:	0ec0      	lsrs	r0, r0, #27
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 80116d4:	9508      	str	r5, [sp, #32]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	dc01      	bgt.n	80116de <lv_draw_sw_blend_basic+0xd22>
 80116da:	f7ff f995 	bl	8010a08 <lv_draw_sw_blend_basic+0x4c>
                dest_buf += dest_stride;
 80116de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80116e0:	005b      	lsls	r3, r3, #1
 80116e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80116e4:	2f00      	cmp	r7, #0
 80116e6:	dc01      	bgt.n	80116ec <lv_draw_sw_blend_basic+0xd30>
 80116e8:	f7ff f98e 	bl	8010a08 <lv_draw_sw_blend_basic+0x4c>
            for(y = 0; y < h; y++) {
 80116ec:	2200      	movs	r2, #0
 80116ee:	007f      	lsls	r7, r7, #1
 80116f0:	003b      	movs	r3, r7
 80116f2:	920a      	str	r2, [sp, #40]	; 0x28
                    dest_buf[x] = last_res_color;
 80116f4:	4a3b      	ldr	r2, [pc, #236]	; (80117e4 <lv_draw_sw_blend_basic+0xe28>)
 80116f6:	4453      	add	r3, sl
 80116f8:	4693      	mov	fp, r2
 80116fa:	4652      	mov	r2, sl
                dest_buf += dest_stride;
 80116fc:	2100      	movs	r1, #0
                    dest_buf[x] = last_res_color;
 80116fe:	241f      	movs	r4, #31
 8011700:	464f      	mov	r7, r9
 8011702:	469c      	mov	ip, r3
 8011704:	9209      	str	r2, [sp, #36]	; 0x24
            for(y = 0; y < h; y++) {
 8011706:	000b      	movs	r3, r1
 8011708:	46b1      	mov	r9, r6
 801170a:	9a09      	ldr	r2, [sp, #36]	; 0x24
                    if(last_dest_color.full != dest_buf[x].full) {
 801170c:	8811      	ldrh	r1, [r2, #0]
 801170e:	4299      	cmp	r1, r3
 8011710:	d041      	beq.n	8011796 <lv_draw_sw_blend_basic+0xdda>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8011712:	7850      	ldrb	r0, [r2, #1]
 8011714:	9b06      	ldr	r3, [sp, #24]
 8011716:	08c0      	lsrs	r0, r0, #3
 8011718:	4378      	muls	r0, r7
 801171a:	18c5      	adds	r5, r0, r3
 801171c:	0228      	lsls	r0, r5, #8
 801171e:	1940      	adds	r0, r0, r5
 8011720:	01c0      	lsls	r0, r0, #7
 8011722:	1940      	adds	r0, r0, r5
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8011724:	9d07      	ldr	r5, [sp, #28]
 8011726:	054b      	lsls	r3, r1, #21
 8011728:	46a8      	mov	r8, r5
 801172a:	0e9b      	lsrs	r3, r3, #26
 801172c:	437b      	muls	r3, r7
 801172e:	4443      	add	r3, r8
 8011730:	021d      	lsls	r5, r3, #8
 8011732:	18ed      	adds	r5, r5, r3
 8011734:	01ed      	lsls	r5, r5, #7
 8011736:	18eb      	adds	r3, r5, r3
 8011738:	253f      	movs	r5, #63	; 0x3f
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 801173a:	9e08      	ldr	r6, [sp, #32]
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 801173c:	0ddb      	lsrs	r3, r3, #23
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 801173e:	46b1      	mov	r9, r6
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8011740:	401d      	ands	r5, r3
 8011742:	46a8      	mov	r8, r5
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8011744:	7815      	ldrb	r5, [r2, #0]
 8011746:	0026      	movs	r6, r4
 8011748:	46aa      	mov	sl, r5
 801174a:	06ed      	lsls	r5, r5, #27
 801174c:	0eed      	lsrs	r5, r5, #27
 801174e:	437d      	muls	r5, r7
 8011750:	44a9      	add	r9, r5
 8011752:	464d      	mov	r5, r9
 8011754:	022d      	lsls	r5, r5, #8
 8011756:	444d      	add	r5, r9
 8011758:	01ed      	lsls	r5, r5, #7
 801175a:	444d      	add	r5, r9
 801175c:	0ded      	lsrs	r5, r5, #23
 801175e:	402e      	ands	r6, r5
                    dest_buf[x] = last_res_color;
 8011760:	0035      	movs	r5, r6
 8011762:	46b1      	mov	r9, r6
 8011764:	4656      	mov	r6, sl
 8011766:	43a6      	bics	r6, r4
 8011768:	4335      	orrs	r5, r6
 801176a:	465e      	mov	r6, fp
 801176c:	7015      	strb	r5, [r2, #0]
 801176e:	8815      	ldrh	r5, [r2, #0]
 8011770:	4643      	mov	r3, r8
 8011772:	4035      	ands	r5, r6
 8011774:	002e      	movs	r6, r5
 8011776:	015b      	lsls	r3, r3, #5
 8011778:	431e      	orrs	r6, r3
 801177a:	8016      	strh	r6, [r2, #0]
 801177c:	0a33      	lsrs	r3, r6, #8
 801177e:	2607      	movs	r6, #7
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8011780:	0dc0      	lsrs	r0, r0, #23
 8011782:	4020      	ands	r0, r4
 8011784:	00c5      	lsls	r5, r0, #3
 8011786:	4033      	ands	r3, r6
 8011788:	432b      	orrs	r3, r5
 801178a:	7053      	strb	r3, [r2, #1]
                for(x = 0; x < w; x++) {
 801178c:	3202      	adds	r2, #2
 801178e:	4562      	cmp	r2, ip
 8011790:	d017      	beq.n	80117c2 <lv_draw_sw_blend_basic+0xe06>
                    if(last_dest_color.full != dest_buf[x].full) {
 8011792:	000b      	movs	r3, r1
 8011794:	e7ba      	b.n	801170c <lv_draw_sw_blend_basic+0xd50>
                    dest_buf[x] = last_res_color;
 8011796:	464d      	mov	r5, r9
 8011798:	465e      	mov	r6, fp
 801179a:	7813      	ldrb	r3, [r2, #0]
 801179c:	43a3      	bics	r3, r4
 801179e:	432b      	orrs	r3, r5
 80117a0:	7013      	strb	r3, [r2, #0]
 80117a2:	8815      	ldrh	r5, [r2, #0]
 80117a4:	4643      	mov	r3, r8
 80117a6:	4035      	ands	r5, r6
 80117a8:	002e      	movs	r6, r5
 80117aa:	015b      	lsls	r3, r3, #5
 80117ac:	431e      	orrs	r6, r3
 80117ae:	8016      	strh	r6, [r2, #0]
 80117b0:	0a33      	lsrs	r3, r6, #8
 80117b2:	2607      	movs	r6, #7
 80117b4:	00c5      	lsls	r5, r0, #3
 80117b6:	4033      	ands	r3, r6
 80117b8:	431d      	orrs	r5, r3
 80117ba:	7055      	strb	r5, [r2, #1]
                for(x = 0; x < w; x++) {
 80117bc:	3202      	adds	r2, #2
 80117be:	4562      	cmp	r2, ip
 80117c0:	d1e7      	bne.n	8011792 <lv_draw_sw_blend_basic+0xdd6>
                dest_buf += dest_stride;
 80117c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80117c4:	464e      	mov	r6, r9
 80117c6:	4691      	mov	r9, r2
 80117c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for(y = 0; y < h; y++) {
 80117ca:	9a05      	ldr	r2, [sp, #20]
                dest_buf += dest_stride;
 80117cc:	444b      	add	r3, r9
 80117ce:	9309      	str	r3, [sp, #36]	; 0x24
            for(y = 0; y < h; y++) {
 80117d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117d2:	44cc      	add	ip, r9
 80117d4:	3301      	adds	r3, #1
 80117d6:	930a      	str	r3, [sp, #40]	; 0x28
 80117d8:	429a      	cmp	r2, r3
 80117da:	dc94      	bgt.n	8011706 <lv_draw_sw_blend_basic+0xd4a>
 80117dc:	f7ff f914 	bl	8010a08 <lv_draw_sw_blend_basic+0x4c>
 80117e0:	07e0f81f 	.word	0x07e0f81f
 80117e4:	fffff81f 	.word	0xfffff81f

080117e8 <lv_draw_sw_img_decoded>:
 **********************/


LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_img_decoded(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                  const lv_area_t * coords, const uint8_t * src_buf, lv_img_cf_t cf)
{
 80117e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117ea:	46de      	mov	lr, fp
 80117ec:	4657      	mov	r7, sl
 80117ee:	464e      	mov	r6, r9
 80117f0:	4645      	mov	r5, r8
 80117f2:	468a      	mov	sl, r1
 80117f4:	b5e0      	push	{r5, r6, r7, lr}
 80117f6:	b0a5      	sub	sp, #148	; 0x94
 80117f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80117fa:	ab2e      	add	r3, sp, #184	; 0xb8
 80117fc:	781b      	ldrb	r3, [r3, #0]
    /*Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, draw_ctx->clip_area);

    bool mask_any = lv_draw_mask_is_any(&draw_area);
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 80117fe:	680c      	ldr	r4, [r1, #0]
{
 8011800:	4683      	mov	fp, r0

    lv_area_t blend_area;
    lv_draw_sw_blend_dsc_t blend_dsc;

    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 8011802:	211c      	movs	r1, #28
 8011804:	a81d      	add	r0, sp, #116	; 0x74
{
 8011806:	920b      	str	r2, [sp, #44]	; 0x2c
 8011808:	9309      	str	r3, [sp, #36]	; 0x24
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 801180a:	940d      	str	r4, [sp, #52]	; 0x34
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 801180c:	f003 feba 	bl	8015584 <lv_memset_00>
    blend_dsc.opa = draw_dsc->opa;
 8011810:	4653      	mov	r3, sl
 8011812:	2144      	movs	r1, #68	; 0x44
 8011814:	7adb      	ldrb	r3, [r3, #11]
 8011816:	aa12      	add	r2, sp, #72	; 0x48
 8011818:	1852      	adds	r2, r2, r1
 801181a:	7013      	strb	r3, [r2, #0]
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 801181c:	4653      	mov	r3, sl
 801181e:	7b1b      	ldrb	r3, [r3, #12]
 8011820:	aa12      	add	r2, sp, #72	; 0x48
 8011822:	071b      	lsls	r3, r3, #28
 8011824:	3101      	adds	r1, #1
 8011826:	0f1b      	lsrs	r3, r3, #28
 8011828:	1852      	adds	r2, r2, r1
 801182a:	7013      	strb	r3, [r2, #0]
    blend_dsc.blend_area = &blend_area;
 801182c:	ab19      	add	r3, sp, #100	; 0x64
 801182e:	931d      	str	r3, [sp, #116]	; 0x74

    /*The simplest case just copy the pixels into the draw_buf*/
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8011830:	2380      	movs	r3, #128	; 0x80
 8011832:	045b      	lsls	r3, r3, #17
 8011834:	429c      	cmp	r4, r3
 8011836:	d100      	bne.n	801183a <lv_draw_sw_img_decoded+0x52>
 8011838:	e261      	b.n	8011cfe <lv_draw_sw_img_decoded+0x516>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        blend_area.x1 = draw_ctx->clip_area->x1;
 801183a:	465b      	mov	r3, fp
 801183c:	689b      	ldr	r3, [r3, #8]
 801183e:	2200      	movs	r2, #0
 8011840:	5e9f      	ldrsh	r7, [r3, r2]
 8011842:	aa12      	add	r2, sp, #72	; 0x48
 8011844:	8397      	strh	r7, [r2, #28]
        blend_area.x2 = draw_ctx->clip_area->x2;
 8011846:	2204      	movs	r2, #4
 8011848:	5e9c      	ldrsh	r4, [r3, r2]
 801184a:	aa12      	add	r2, sp, #72	; 0x48
 801184c:	8414      	strh	r4, [r2, #32]
        blend_area.y1 = draw_ctx->clip_area->y1;
 801184e:	2102      	movs	r1, #2
 8011850:	5e5a      	ldrsh	r2, [r3, r1]
 8011852:	3401      	adds	r4, #1
 8011854:	4690      	mov	r8, r2
 8011856:	4641      	mov	r1, r8
 8011858:	aa12      	add	r2, sp, #72	; 0x48
 801185a:	83d1      	strh	r1, [r2, #30]
        blend_area.y2 = draw_ctx->clip_area->y2;
 801185c:	2506      	movs	r5, #6
 801185e:	5f5d      	ldrsh	r5, [r3, r5]
 8011860:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011862:	8455      	strh	r5, [r2, #34]	; 0x22
 8011864:	888b      	ldrh	r3, [r1, #4]
 8011866:	880a      	ldrh	r2, [r1, #0]
 8011868:	1be7      	subs	r7, r4, r7
 801186a:	1a9b      	subs	r3, r3, r2
 801186c:	b29b      	uxth	r3, r3
 801186e:	9316      	str	r3, [sp, #88]	; 0x58
 8011870:	3301      	adds	r3, #1
 8011872:	b21b      	sxth	r3, r3
 8011874:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011876:	88cb      	ldrh	r3, [r1, #6]
 8011878:	884a      	ldrh	r2, [r1, #2]
 801187a:	3301      	adds	r3, #1
 801187c:	1a9b      	subs	r3, r3, r2
 801187e:	b21b      	sxth	r3, r3
 8011880:	9310      	str	r3, [sp, #64]	; 0x40
        lv_coord_t src_w = lv_area_get_width(coords);
        lv_coord_t src_h = lv_area_get_height(coords);
        lv_coord_t blend_h = lv_area_get_height(&blend_area);
        lv_coord_t blend_w = lv_area_get_width(&blend_area);

        uint32_t max_buf_size = MAX_BUF_SIZE;
 8011882:	f7fd fa31 	bl	800ece8 <_lv_refr_get_disp_refreshing>
 8011886:	f002 f8e1 	bl	8013a4c <lv_disp_get_hor_res>
 801188a:	0006      	movs	r6, r0
        uint32_t blend_size = lv_area_get_size(&blend_area);
 801188c:	a819      	add	r0, sp, #100	; 0x64
 801188e:	f002 fcb7 	bl	8014200 <lv_area_get_size>
        uint32_t buf_h;
        uint32_t buf_w = blend_w;
 8011892:	b23f      	sxth	r7, r7
        if(blend_size <= max_buf_size) {
 8011894:	4286      	cmp	r6, r0
 8011896:	d300      	bcc.n	801189a <lv_draw_sw_img_decoded+0xb2>
 8011898:	e098      	b.n	80119cc <lv_draw_sw_img_decoded+0x1e4>
            buf_h = blend_h;
        }
        else {
            /*Round to full lines*/
            buf_h = max_buf_size / blend_w;
 801189a:	0039      	movs	r1, r7
 801189c:	0030      	movs	r0, r6
 801189e:	f7ee fc43 	bl	8000128 <__udivsi3>
 80118a2:	0004      	movs	r4, r0
        }

        /*Create buffers and masks*/
        uint32_t buf_size = buf_w * buf_h;
 80118a4:	4367      	muls	r7, r4

        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 80118a6:	007d      	lsls	r5, r7, #1
 80118a8:	0028      	movs	r0, r5
        uint32_t buf_size = buf_w * buf_h;
 80118aa:	003e      	movs	r6, r7
 80118ac:	9715      	str	r7, [sp, #84]	; 0x54
        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 80118ae:	f003 fb65 	bl	8014f7c <lv_mem_buf_get>
 80118b2:	0007      	movs	r7, r0
 80118b4:	9006      	str	r0, [sp, #24]
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 80118b6:	0030      	movs	r0, r6
 80118b8:	f003 fb60 	bl	8014f7c <lv_mem_buf_get>
        blend_dsc.mask_buf = mask_buf;
        blend_dsc.mask_area = &blend_area;
 80118bc:	ab19      	add	r3, sp, #100	; 0x64
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 80118be:	900c      	str	r0, [sp, #48]	; 0x30
        blend_dsc.mask_buf = mask_buf;
 80118c0:	9020      	str	r0, [sp, #128]	; 0x80
        blend_dsc.mask_area = &blend_area;
 80118c2:	9322      	str	r3, [sp, #136]	; 0x88
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        blend_dsc.src_buf = rgb_buf;
 80118c4:	971e      	str	r7, [sp, #120]	; 0x78
        lv_coord_t y_last = blend_area.y2;
 80118c6:	ab12      	add	r3, sp, #72	; 0x48
 80118c8:	2222      	movs	r2, #34	; 0x22
 80118ca:	5e9b      	ldrsh	r3, [r3, r2]
        blend_area.y2 = blend_area.y1 + buf_h - 1;

        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 80118cc:	9809      	ldr	r0, [sp, #36]	; 0x24
        lv_coord_t y_last = blend_area.y2;
 80118ce:	9307      	str	r3, [sp, #28]
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 80118d0:	ab12      	add	r3, sp, #72	; 0x48
 80118d2:	221e      	movs	r2, #30
 80118d4:	5e9a      	ldrsh	r2, [r3, r2]
 80118d6:	b2a3      	uxth	r3, r4
 80118d8:	0019      	movs	r1, r3
 80118da:	468c      	mov	ip, r1
 80118dc:	930e      	str	r3, [sp, #56]	; 0x38
 80118de:	1e53      	subs	r3, r2, #1
 80118e0:	4463      	add	r3, ip
 80118e2:	a912      	add	r1, sp, #72	; 0x48
 80118e4:	b21b      	sxth	r3, r3
 80118e6:	844b      	strh	r3, [r1, #34]	; 0x22
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 80118e8:	2102      	movs	r1, #2
 80118ea:	2804      	cmp	r0, #4
 80118ec:	d108      	bne.n	8011900 <lv_draw_sw_img_decoded+0x118>
 80118ee:	20ff      	movs	r0, #255	; 0xff
 80118f0:	4651      	mov	r1, sl
 80118f2:	0600      	lsls	r0, r0, #24
 80118f4:	4684      	mov	ip, r0
 80118f6:	6809      	ldr	r1, [r1, #0]
 80118f8:	4461      	add	r1, ip
 80118fa:	1e48      	subs	r0, r1, #1
 80118fc:	4181      	sbcs	r1, r0
 80118fe:	3101      	adds	r1, #1
                                           draw_dsc->zoom != LV_IMG_ZOOM_NONE) ?
                                          LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
        blend_dsc.mask_res = mask_res_def;
 8011900:	243c      	movs	r4, #60	; 0x3c
 8011902:	a812      	add	r0, sp, #72	; 0x48
 8011904:	1900      	adds	r0, r0, r4
 8011906:	7001      	strb	r1, [r0, #0]

        while(blend_area.y1 <= y_last) {
 8011908:	9907      	ldr	r1, [sp, #28]
 801190a:	428a      	cmp	r2, r1
 801190c:	dc51      	bgt.n	80119b2 <lv_draw_sw_img_decoded+0x1ca>

    const uint8_t * src_tmp8 = (const uint8_t *)src_buf;
    lv_coord_t y;
    lv_coord_t x;

    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801190e:	2102      	movs	r1, #2
 8011910:	9809      	ldr	r0, [sp, #36]	; 0x24

        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);

        lv_coord_t dest_h = lv_area_get_height(dest_area);
        lv_coord_t dest_w = lv_area_get_width(dest_area);
        for(y = 0; y < dest_h; y++) {
 8011912:	465f      	mov	r7, fp
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8011914:	4388      	bics	r0, r1
 8011916:	9014      	str	r0, [sp, #80]	; 0x50
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 8011918:	980a      	ldr	r0, [sp, #40]	; 0x28
        for(y = 0; y < dest_h; y++) {
 801191a:	4656      	mov	r6, sl
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 801191c:	0041      	lsls	r1, r0, #1
 801191e:	b209      	sxth	r1, r1
 8011920:	9108      	str	r1, [sp, #32]
            cbuf += dest_w;
            src_tmp8 += src_stride_byte;
        }

        src_tmp8 = (const uint8_t *)src_buf;
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 8011922:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011924:	4341      	muls	r1, r0
 8011926:	0049      	lsls	r1, r1, #1
 8011928:	9117      	str	r1, [sp, #92]	; 0x5c
 801192a:	9906      	ldr	r1, [sp, #24]
 801192c:	4689      	mov	r9, r1
 801192e:	44a9      	add	r9, r5
        for(y = 0; y < dest_h; y++) {
 8011930:	464d      	mov	r5, r9
    dest->x1 = src->x1;
 8011932:	a812      	add	r0, sp, #72	; 0x48
 8011934:	a912      	add	r1, sp, #72	; 0x48
    dest->y1 = src->y1;
 8011936:	84c2      	strh	r2, [r0, #38]	; 0x26
    dest->x1 = src->x1;
 8011938:	8b89      	ldrh	r1, [r1, #28]
    dest->x2 = src->x2;
 801193a:	8c02      	ldrh	r2, [r0, #32]
    dest->y2 = src->y2;
 801193c:	8543      	strh	r3, [r0, #42]	; 0x2a
            lv_area_move(&transform_area, -coords->x1, -coords->y1);
 801193e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dest->x1 = src->x1;
 8011940:	8481      	strh	r1, [r0, #36]	; 0x24
    dest->x2 = src->x2;
 8011942:	8502      	strh	r2, [r0, #40]	; 0x28
 8011944:	885a      	ldrh	r2, [r3, #2]
 8011946:	8819      	ldrh	r1, [r3, #0]
 8011948:	4252      	negs	r2, r2
 801194a:	4249      	negs	r1, r1
 801194c:	b212      	sxth	r2, r2
 801194e:	b209      	sxth	r1, r1
 8011950:	a81b      	add	r0, sp, #108	; 0x6c
 8011952:	f002 fc75 	bl	8014240 <lv_area_move>
            if(transform) {
 8011956:	2280      	movs	r2, #128	; 0x80
 8011958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801195a:	0452      	lsls	r2, r2, #17
 801195c:	4293      	cmp	r3, r2
 801195e:	d040      	beq.n	80119e2 <lv_draw_sw_img_decoded+0x1fa>
                lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 8011960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011962:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011964:	9305      	str	r3, [sp, #20]
 8011966:	9b06      	ldr	r3, [sp, #24]
 8011968:	9200      	str	r2, [sp, #0]
 801196a:	9304      	str	r3, [sp, #16]
 801196c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801196e:	0038      	movs	r0, r7
 8011970:	9303      	str	r3, [sp, #12]
 8011972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011974:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011976:	9602      	str	r6, [sp, #8]
 8011978:	9301      	str	r3, [sp, #4]
 801197a:	a91b      	add	r1, sp, #108	; 0x6c
 801197c:	f7fe fabc 	bl	800fef8 <lv_draw_transform>
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 8011980:	7ab4      	ldrb	r4, [r6, #10]
 8011982:	2c02      	cmp	r4, #2
 8011984:	d900      	bls.n	8011988 <lv_draw_sw_img_decoded+0x1a0>
 8011986:	e099      	b.n	8011abc <lv_draw_sw_img_decoded+0x2d4>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8011988:	a91d      	add	r1, sp, #116	; 0x74
 801198a:	0038      	movs	r0, r7
 801198c:	f7fe fffc 	bl	8010988 <lv_draw_sw_blend>
            blend_area.y1 = blend_area.y2 + 1;
 8011990:	ab12      	add	r3, sp, #72	; 0x48
 8011992:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8011994:	a912      	add	r1, sp, #72	; 0x48
 8011996:	1c5a      	adds	r2, r3, #1
 8011998:	b212      	sxth	r2, r2
 801199a:	83ca      	strh	r2, [r1, #30]
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 801199c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801199e:	468c      	mov	ip, r1
            if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 80119a0:	9907      	ldr	r1, [sp, #28]
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 80119a2:	4463      	add	r3, ip
 80119a4:	b21b      	sxth	r3, r3
            if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 80119a6:	428b      	cmp	r3, r1
 80119a8:	dc15      	bgt.n	80119d6 <lv_draw_sw_img_decoded+0x1ee>
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 80119aa:	a812      	add	r0, sp, #72	; 0x48
 80119ac:	8443      	strh	r3, [r0, #34]	; 0x22
        while(blend_area.y1 <= y_last) {
 80119ae:	428a      	cmp	r2, r1
 80119b0:	ddbf      	ble.n	8011932 <lv_draw_sw_img_decoded+0x14a>
        lv_mem_buf_release(mask_buf);
 80119b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80119b4:	f003 fb86 	bl	80150c4 <lv_mem_buf_release>
        lv_mem_buf_release(rgb_buf);
 80119b8:	9806      	ldr	r0, [sp, #24]
 80119ba:	f003 fb83 	bl	80150c4 <lv_mem_buf_release>
}
 80119be:	b025      	add	sp, #148	; 0x94
 80119c0:	bcf0      	pop	{r4, r5, r6, r7}
 80119c2:	46bb      	mov	fp, r7
 80119c4:	46b2      	mov	sl, r6
 80119c6:	46a9      	mov	r9, r5
 80119c8:	46a0      	mov	r8, r4
 80119ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80119cc:	4643      	mov	r3, r8
 80119ce:	3501      	adds	r5, #1
 80119d0:	1aec      	subs	r4, r5, r3
            buf_h = blend_h;
 80119d2:	b224      	sxth	r4, r4
 80119d4:	e766      	b.n	80118a4 <lv_draw_sw_img_decoded+0xbc>
 80119d6:	000b      	movs	r3, r1
            if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 80119d8:	a912      	add	r1, sp, #72	; 0x48
 80119da:	844b      	strh	r3, [r1, #34]	; 0x22
        while(blend_area.y1 <= y_last) {
 80119dc:	429a      	cmp	r2, r3
 80119de:	dda8      	ble.n	8011932 <lv_draw_sw_img_decoded+0x14a>
 80119e0:	e7e7      	b.n	80119b2 <lv_draw_sw_img_decoded+0x1ca>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80119e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80119e4:	2b04      	cmp	r3, #4
 80119e6:	d100      	bne.n	80119ea <lv_draw_sw_img_decoded+0x202>
 80119e8:	e0cd      	b.n	8011b86 <lv_draw_sw_img_decoded+0x39e>
    else if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 80119ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119ec:	2b05      	cmp	r3, #5
 80119ee:	d100      	bne.n	80119f2 <lv_draw_sw_img_decoded+0x20a>
 80119f0:	e120      	b.n	8011c34 <lv_draw_sw_img_decoded+0x44c>
    else if(cf == LV_IMG_CF_RGB565A8) {
 80119f2:	2b14      	cmp	r3, #20
 80119f4:	d1c4      	bne.n	8011980 <lv_draw_sw_img_decoded+0x198>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 80119f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80119f8:	ab12      	add	r3, sp, #72	; 0x48
 80119fa:	4690      	mov	r8, r2
 80119fc:	2026      	movs	r0, #38	; 0x26
 80119fe:	5e18      	ldrsh	r0, [r3, r0]
 8011a00:	ab12      	add	r3, sp, #72	; 0x48
 8011a02:	2124      	movs	r1, #36	; 0x24
 8011a04:	5e59      	ldrsh	r1, [r3, r1]
 8011a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a08:	4343      	muls	r3, r0
 8011a0a:	185b      	adds	r3, r3, r1
 8011a0c:	005b      	lsls	r3, r3, #1
 8011a0e:	4498      	add	r8, r3
 8011a10:	ab12      	add	r3, sp, #72	; 0x48
 8011a12:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011a14:	3201      	adds	r2, #1
 8011a16:	1a12      	subs	r2, r2, r0
 8011a18:	b212      	sxth	r2, r2
 8011a1a:	9211      	str	r2, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8011a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a1e:	3301      	adds	r3, #1
 8011a20:	1a5b      	subs	r3, r3, r1
 8011a22:	b21b      	sxth	r3, r3
 8011a24:	469a      	mov	sl, r3
        for(y = 0; y < dest_h; y++) {
 8011a26:	2a00      	cmp	r2, #0
 8011a28:	ddaa      	ble.n	8011980 <lv_draw_sw_img_decoded+0x198>
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 8011a2a:	005b      	lsls	r3, r3, #1
 8011a2c:	469b      	mov	fp, r3
            src_tmp8 += src_stride_byte;
 8011a2e:	9b06      	ldr	r3, [sp, #24]
        for(y = 0; y < dest_h; y++) {
 8011a30:	2400      	movs	r4, #0
            src_tmp8 += src_stride_byte;
 8011a32:	4699      	mov	r9, r3
        for(y = 0; y < dest_h; y++) {
 8011a34:	0033      	movs	r3, r6
 8011a36:	4646      	mov	r6, r8
 8011a38:	46a8      	mov	r8, r5
 8011a3a:	464d      	mov	r5, r9
 8011a3c:	46b9      	mov	r9, r7
 8011a3e:	465f      	mov	r7, fp
 8011a40:	469b      	mov	fp, r3
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 8011a42:	0031      	movs	r1, r6
 8011a44:	0028      	movs	r0, r5
 8011a46:	003a      	movs	r2, r7
 8011a48:	f003 fbce 	bl	80151e8 <lv_memcpy>
            src_tmp8 += src_stride_byte;
 8011a4c:	9b08      	ldr	r3, [sp, #32]
 8011a4e:	3401      	adds	r4, #1
 8011a50:	469c      	mov	ip, r3
        for(y = 0; y < dest_h; y++) {
 8011a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a54:	b224      	sxth	r4, r4
            cbuf += dest_w;
 8011a56:	19ed      	adds	r5, r5, r7
            src_tmp8 += src_stride_byte;
 8011a58:	4466      	add	r6, ip
        for(y = 0; y < dest_h; y++) {
 8011a5a:	42a3      	cmp	r3, r4
 8011a5c:	d1f1      	bne.n	8011a42 <lv_draw_sw_img_decoded+0x25a>
 8011a5e:	464f      	mov	r7, r9
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 8011a60:	ab12      	add	r3, sp, #72	; 0x48
 8011a62:	2226      	movs	r2, #38	; 0x26
 8011a64:	5e9b      	ldrsh	r3, [r3, r2]
 8011a66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a68:	4645      	mov	r5, r8
 8011a6a:	4353      	muls	r3, r2
 8011a6c:	aa12      	add	r2, sp, #72	; 0x48
 8011a6e:	2124      	movs	r1, #36	; 0x24
 8011a70:	5e52      	ldrsh	r2, [r2, r1]
 8011a72:	0039      	movs	r1, r7
 8011a74:	189b      	adds	r3, r3, r2
 8011a76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011a78:	46a9      	mov	r9, r5
 8011a7a:	4694      	mov	ip, r2
 8011a7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a7e:	4463      	add	r3, ip
 8011a80:	4690      	mov	r8, r2
 8011a82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011a84:	4498      	add	r8, r3
 8011a86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a88:	4657      	mov	r7, sl
 8011a8a:	4646      	mov	r6, r8
 8011a8c:	2400      	movs	r4, #0
 8011a8e:	4690      	mov	r8, r2
 8011a90:	468a      	mov	sl, r1
 8011a92:	001d      	movs	r5, r3
        for(y = 0; y < dest_h; y++) {
            lv_memcpy(abuf, src_tmp8, dest_w);
 8011a94:	0031      	movs	r1, r6
 8011a96:	0028      	movs	r0, r5
 8011a98:	003a      	movs	r2, r7
 8011a9a:	f003 fba5 	bl	80151e8 <lv_memcpy>
            abuf += dest_w;
            src_tmp8 += src_stride;
 8011a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011aa0:	3401      	adds	r4, #1
 8011aa2:	469c      	mov	ip, r3
 8011aa4:	b224      	sxth	r4, r4
            abuf += dest_w;
 8011aa6:	19ed      	adds	r5, r5, r7
            src_tmp8 += src_stride;
 8011aa8:	4466      	add	r6, ip
        for(y = 0; y < dest_h; y++) {
 8011aaa:	45a0      	cmp	r8, r4
 8011aac:	d1f2      	bne.n	8011a94 <lv_draw_sw_img_decoded+0x2ac>
 8011aae:	465e      	mov	r6, fp
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 8011ab0:	7ab4      	ldrb	r4, [r6, #10]
 8011ab2:	464d      	mov	r5, r9
 8011ab4:	4657      	mov	r7, sl
 8011ab6:	2c02      	cmp	r4, #2
 8011ab8:	d800      	bhi.n	8011abc <lv_draw_sw_img_decoded+0x2d4>
 8011aba:	e765      	b.n	8011988 <lv_draw_sw_img_decoded+0x1a0>
                lv_color_t recolor = draw_dsc->recolor;
 8011abc:	7a73      	ldrb	r3, [r6, #9]
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 8011abe:	08db      	lsrs	r3, r3, #3
 8011ac0:	4363      	muls	r3, r4
 8011ac2:	4698      	mov	r8, r3
 8011ac4:	8933      	ldrh	r3, [r6, #8]
 8011ac6:	055b      	lsls	r3, r3, #21
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 8011ac8:	0e9b      	lsrs	r3, r3, #26
 8011aca:	4363      	muls	r3, r4
 8011acc:	469c      	mov	ip, r3
 8011ace:	7a33      	ldrb	r3, [r6, #8]
 8011ad0:	06db      	lsls	r3, r3, #27
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 8011ad2:	0edb      	lsrs	r3, r3, #27
 8011ad4:	4363      	muls	r3, r4
                recolor_opa = 255 - recolor_opa;
 8011ad6:	43e4      	mvns	r4, r4
 8011ad8:	469a      	mov	sl, r3
                for(i = 0; i < buf_size; i++) {
 8011ada:	9b15      	ldr	r3, [sp, #84]	; 0x54
                recolor_opa = 255 - recolor_opa;
 8011adc:	b2e4      	uxtb	r4, r4
                for(i = 0; i < buf_size; i++) {
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d100      	bne.n	8011ae4 <lv_draw_sw_img_decoded+0x2fc>
 8011ae2:	e751      	b.n	8011988 <lv_draw_sw_img_decoded+0x1a0>
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 8011ae4:	231f      	movs	r3, #31
 8011ae6:	4651      	mov	r1, sl
 8011ae8:	4699      	mov	r9, r3
 8011aea:	46b2      	mov	sl, r6
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8011aec:	9806      	ldr	r0, [sp, #24]
 8011aee:	7802      	ldrb	r2, [r0, #0]
 8011af0:	06d3      	lsls	r3, r2, #27
 8011af2:	0edb      	lsrs	r3, r3, #27
 8011af4:	4363      	muls	r3, r4
 8011af6:	185e      	adds	r6, r3, r1
 8011af8:	0233      	lsls	r3, r6, #8
 8011afa:	199b      	adds	r3, r3, r6
 8011afc:	01db      	lsls	r3, r3, #7
 8011afe:	199b      	adds	r3, r3, r6
 8011b00:	464e      	mov	r6, r9
 8011b02:	0ddb      	lsrs	r3, r3, #23
 8011b04:	4033      	ands	r3, r6
 8011b06:	43b2      	bics	r2, r6
 8011b08:	4313      	orrs	r3, r2
 8011b0a:	7003      	strb	r3, [r0, #0]
                for(i = 0; i < buf_size; i++) {
 8011b0c:	3002      	adds	r0, #2
 8011b0e:	42a8      	cmp	r0, r5
 8011b10:	d1ed      	bne.n	8011aee <lv_draw_sw_img_decoded+0x306>
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 8011b12:	233f      	movs	r3, #63	; 0x3f
                for(i = 0; i < buf_size; i++) {
 8011b14:	4656      	mov	r6, sl
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 8011b16:	469a      	mov	sl, r3
 8011b18:	4ba4      	ldr	r3, [pc, #656]	; (8011dac <lv_draw_sw_img_decoded+0x5c4>)
 8011b1a:	4661      	mov	r1, ip
 8011b1c:	4699      	mov	r9, r3
 8011b1e:	46b4      	mov	ip, r6
                for(i = 0; i < buf_size; i++) {
 8011b20:	9806      	ldr	r0, [sp, #24]
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8011b22:	8802      	ldrh	r2, [r0, #0]
 8011b24:	0553      	lsls	r3, r2, #21
 8011b26:	0e9b      	lsrs	r3, r3, #26
 8011b28:	4363      	muls	r3, r4
 8011b2a:	185e      	adds	r6, r3, r1
 8011b2c:	0233      	lsls	r3, r6, #8
 8011b2e:	199b      	adds	r3, r3, r6
 8011b30:	01db      	lsls	r3, r3, #7
 8011b32:	199b      	adds	r3, r3, r6
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 8011b34:	4656      	mov	r6, sl
 8011b36:	0ddb      	lsrs	r3, r3, #23
 8011b38:	4033      	ands	r3, r6
 8011b3a:	464e      	mov	r6, r9
 8011b3c:	015b      	lsls	r3, r3, #5
 8011b3e:	4032      	ands	r2, r6
 8011b40:	4313      	orrs	r3, r2
 8011b42:	8003      	strh	r3, [r0, #0]
                for(i = 0; i < buf_size; i++) {
 8011b44:	3002      	adds	r0, #2
 8011b46:	42a8      	cmp	r0, r5
 8011b48:	d1eb      	bne.n	8011b22 <lv_draw_sw_img_decoded+0x33a>
 8011b4a:	4666      	mov	r6, ip
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 8011b4c:	2307      	movs	r3, #7
 8011b4e:	469c      	mov	ip, r3
 8011b50:	0033      	movs	r3, r6
 8011b52:	003a      	movs	r2, r7
 8011b54:	002e      	movs	r6, r5
 8011b56:	4645      	mov	r5, r8
 8011b58:	4698      	mov	r8, r3
                for(i = 0; i < buf_size; i++) {
 8011b5a:	9906      	ldr	r1, [sp, #24]
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8011b5c:	7848      	ldrb	r0, [r1, #1]
 8011b5e:	08c3      	lsrs	r3, r0, #3
 8011b60:	4363      	muls	r3, r4
 8011b62:	195f      	adds	r7, r3, r5
 8011b64:	023b      	lsls	r3, r7, #8
 8011b66:	19db      	adds	r3, r3, r7
 8011b68:	01db      	lsls	r3, r3, #7
 8011b6a:	19db      	adds	r3, r3, r7
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 8011b6c:	4667      	mov	r7, ip
 8011b6e:	0ddb      	lsrs	r3, r3, #23
 8011b70:	00db      	lsls	r3, r3, #3
 8011b72:	4038      	ands	r0, r7
 8011b74:	4303      	orrs	r3, r0
 8011b76:	704b      	strb	r3, [r1, #1]
                for(i = 0; i < buf_size; i++) {
 8011b78:	3102      	adds	r1, #2
 8011b7a:	42b1      	cmp	r1, r6
 8011b7c:	d1ee      	bne.n	8011b5c <lv_draw_sw_img_decoded+0x374>
 8011b7e:	0035      	movs	r5, r6
 8011b80:	0017      	movs	r7, r2
 8011b82:	4646      	mov	r6, r8
 8011b84:	e700      	b.n	8011988 <lv_draw_sw_img_decoded+0x1a0>
        uint32_t px_cnt = lv_area_get_size(dest_area);
 8011b86:	a81b      	add	r0, sp, #108	; 0x6c
 8011b88:	f002 fb3a 	bl	8014200 <lv_area_get_size>
        lv_memset_ff(abuf, px_cnt);
 8011b8c:	0001      	movs	r1, r0
        uint32_t px_cnt = lv_area_get_size(dest_area);
 8011b8e:	4683      	mov	fp, r0
        lv_memset_ff(abuf, px_cnt);
 8011b90:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011b92:	f003 fd63 	bl	801565c <lv_memset_ff>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 8011b96:	ab12      	add	r3, sp, #72	; 0x48
 8011b98:	2426      	movs	r4, #38	; 0x26
 8011b9a:	5f1c      	ldrsh	r4, [r3, r4]
 8011b9c:	ab12      	add	r3, sp, #72	; 0x48
 8011b9e:	2124      	movs	r1, #36	; 0x24
 8011ba0:	5e59      	ldrsh	r1, [r3, r1]
 8011ba2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ba4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ba6:	4698      	mov	r8, r3
 8011ba8:	ab12      	add	r3, sp, #72	; 0x48
 8011baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011bac:	4362      	muls	r2, r4
 8011bae:	3301      	adds	r3, #1
 8011bb0:	1a5b      	subs	r3, r3, r1
        uint32_t dest_w = lv_area_get_width(dest_area);
 8011bb2:	b21b      	sxth	r3, r3
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 8011bb4:	005b      	lsls	r3, r3, #1
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 8011bb6:	1852      	adds	r2, r2, r1
 8011bb8:	0052      	lsls	r2, r2, #1
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 8011bba:	469a      	mov	sl, r3
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8011bbc:	ab12      	add	r3, sp, #72	; 0x48
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 8011bbe:	4490      	add	r8, r2
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8011bc0:	222a      	movs	r2, #42	; 0x2a
 8011bc2:	5e9b      	ldrsh	r3, [r3, r2]
        lv_color_t * cbuf_tmp = cbuf;
 8011bc4:	9a06      	ldr	r2, [sp, #24]
 8011bc6:	4691      	mov	r9, r2
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8011bc8:	42a3      	cmp	r3, r4
 8011bca:	db1a      	blt.n	8011c02 <lv_draw_sw_img_decoded+0x41a>
 8011bcc:	4643      	mov	r3, r8
 8011bce:	0032      	movs	r2, r6
 8011bd0:	46a8      	mov	r8, r5
 8011bd2:	464e      	mov	r6, r9
 8011bd4:	001d      	movs	r5, r3
 8011bd6:	46b9      	mov	r9, r7
 8011bd8:	4657      	mov	r7, sl
 8011bda:	4692      	mov	sl, r2
            lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 8011bdc:	003a      	movs	r2, r7
 8011bde:	0029      	movs	r1, r5
 8011be0:	0030      	movs	r0, r6
 8011be2:	f003 fb01 	bl	80151e8 <lv_memcpy>
            src_tmp8 += src_stride_byte;
 8011be6:	9b08      	ldr	r3, [sp, #32]
 8011be8:	3401      	adds	r4, #1
 8011bea:	469c      	mov	ip, r3
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8011bec:	ab12      	add	r3, sp, #72	; 0x48
 8011bee:	222a      	movs	r2, #42	; 0x2a
 8011bf0:	5e9b      	ldrsh	r3, [r3, r2]
 8011bf2:	b224      	sxth	r4, r4
            src_tmp8 += src_stride_byte;
 8011bf4:	4465      	add	r5, ip
            cbuf_tmp += dest_w;
 8011bf6:	19f6      	adds	r6, r6, r7
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8011bf8:	42a3      	cmp	r3, r4
 8011bfa:	daef      	bge.n	8011bdc <lv_draw_sw_img_decoded+0x3f4>
 8011bfc:	4645      	mov	r5, r8
 8011bfe:	464f      	mov	r7, r9
 8011c00:	4656      	mov	r6, sl
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8011c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c04:	2b06      	cmp	r3, #6
 8011c06:	d000      	beq.n	8011c0a <lv_draw_sw_img_decoded+0x422>
 8011c08:	e6ba      	b.n	8011980 <lv_draw_sw_img_decoded+0x198>
            for(i = 0; i < px_cnt; i++) {
 8011c0a:	465b      	mov	r3, fp
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d100      	bne.n	8011c12 <lv_draw_sw_img_decoded+0x42a>
 8011c10:	e6b6      	b.n	8011980 <lv_draw_sw_img_decoded+0x198>
 8011c12:	0058      	lsls	r0, r3, #1
 8011c14:	9b06      	ldr	r3, [sp, #24]
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 8011c16:	24fc      	movs	r4, #252	; 0xfc
 8011c18:	469c      	mov	ip, r3
 8011c1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c1c:	4460      	add	r0, ip
 8011c1e:	00e4      	lsls	r4, r4, #3
 8011c20:	8819      	ldrh	r1, [r3, #0]
 8011c22:	42a1      	cmp	r1, r4
 8011c24:	d101      	bne.n	8011c2a <lv_draw_sw_img_decoded+0x442>
 8011c26:	2100      	movs	r1, #0
 8011c28:	7011      	strb	r1, [r2, #0]
            for(i = 0; i < px_cnt; i++) {
 8011c2a:	3302      	adds	r3, #2
 8011c2c:	3201      	adds	r2, #1
 8011c2e:	4283      	cmp	r3, r0
 8011c30:	d1f6      	bne.n	8011c20 <lv_draw_sw_img_decoded+0x438>
 8011c32:	e6a5      	b.n	8011980 <lv_draw_sw_img_decoded+0x198>
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8011c34:	ab12      	add	r3, sp, #72	; 0x48
 8011c36:	2126      	movs	r1, #38	; 0x26
 8011c38:	5e59      	ldrsh	r1, [r3, r1]
 8011c3a:	ab12      	add	r3, sp, #72	; 0x48
 8011c3c:	2224      	movs	r2, #36	; 0x24
 8011c3e:	5e9b      	ldrsh	r3, [r3, r2]
 8011c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c42:	434a      	muls	r2, r1
 8011c44:	18d2      	adds	r2, r2, r3
 8011c46:	0050      	lsls	r0, r2, #1
 8011c48:	1882      	adds	r2, r0, r2
 8011c4a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011c4c:	b29b      	uxth	r3, r3
 8011c4e:	4683      	mov	fp, r0
 8011c50:	4493      	add	fp, r2
 8011c52:	aa12      	add	r2, sp, #72	; 0x48
 8011c54:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8011c56:	1c60      	adds	r0, r4, #1
 8011c58:	1ac0      	subs	r0, r0, r3
 8011c5a:	b282      	uxth	r2, r0
 8011c5c:	b200      	sxth	r0, r0
 8011c5e:	4681      	mov	r9, r0
        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
 8011c60:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011c62:	1b1b      	subs	r3, r3, r4
 8011c64:	4684      	mov	ip, r0
 8011c66:	4463      	add	r3, ip
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8011c68:	0058      	lsls	r0, r3, #1
 8011c6a:	181b      	adds	r3, r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011c6c:	a812      	add	r0, sp, #72	; 0x48
 8011c6e:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
 8011c70:	b21b      	sxth	r3, r3
 8011c72:	3001      	adds	r0, #1
 8011c74:	1a41      	subs	r1, r0, r1
 8011c76:	b209      	sxth	r1, r1
 8011c78:	9111      	str	r1, [sp, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 8011c7a:	2900      	cmp	r1, #0
 8011c7c:	dc00      	bgt.n	8011c80 <lv_draw_sw_img_decoded+0x498>
 8011c7e:	e67f      	b.n	8011980 <lv_draw_sw_img_decoded+0x198>
            cbuf += dest_w;
 8011c80:	4649      	mov	r1, r9
 8011c82:	0049      	lsls	r1, r1, #1
 8011c84:	9112      	str	r1, [sp, #72]	; 0x48
 8011c86:	4649      	mov	r1, r9
 8011c88:	2900      	cmp	r1, #0
 8011c8a:	dc00      	bgt.n	8011c8e <lv_draw_sw_img_decoded+0x4a6>
 8011c8c:	e678      	b.n	8011980 <lv_draw_sw_img_decoded+0x198>
 8011c8e:	3a01      	subs	r2, #1
 8011c90:	b292      	uxth	r2, r2
 8011c92:	0051      	lsls	r1, r2, #1
 8011c94:	188a      	adds	r2, r1, r2
 8011c96:	18d3      	adds	r3, r2, r3
            src_tmp8 += src_new_line_step_byte;
 8011c98:	9a06      	ldr	r2, [sp, #24]
 8011c9a:	3303      	adds	r3, #3
 8011c9c:	4690      	mov	r8, r2
 8011c9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ca0:	9313      	str	r3, [sp, #76]	; 0x4c
 8011ca2:	4694      	mov	ip, r2
        for(y = 0; y < dest_h; y++) {
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	0033      	movs	r3, r6
 8011ca8:	4692      	mov	sl, r2
 8011caa:	002a      	movs	r2, r5
 8011cac:	4646      	mov	r6, r8
 8011cae:	4665      	mov	r5, ip
 8011cb0:	46b8      	mov	r8, r7
 8011cb2:	0011      	movs	r1, r2
 8011cb4:	464f      	mov	r7, r9
 8011cb6:	4699      	mov	r9, r3
            for(i = 0; i < px_cnt; i++) {
 8011cb8:	465a      	mov	r2, fp
 8011cba:	2300      	movs	r3, #0
 8011cbc:	468c      	mov	ip, r1
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8011cbe:	7891      	ldrb	r1, [r2, #2]
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
 8011cc0:	0058      	lsls	r0, r3, #1
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8011cc2:	54e9      	strb	r1, [r5, r3]
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
 8011cc4:	7854      	ldrb	r4, [r2, #1]
 8011cc6:	7811      	ldrb	r1, [r2, #0]
 8011cc8:	0224      	lsls	r4, r4, #8
 8011cca:	1909      	adds	r1, r1, r4
            for(x = 0; x < dest_w; x++) {
 8011ccc:	3301      	adds	r3, #1
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
 8011cce:	5231      	strh	r1, [r6, r0]
            for(x = 0; x < dest_w; x++) {
 8011cd0:	b219      	sxth	r1, r3
                src_tmp8 += LV_IMG_PX_SIZE_ALPHA_BYTE;
 8011cd2:	3203      	adds	r2, #3
            for(x = 0; x < dest_w; x++) {
 8011cd4:	428f      	cmp	r7, r1
 8011cd6:	dcf2      	bgt.n	8011cbe <lv_draw_sw_img_decoded+0x4d6>
            cbuf += dest_w;
 8011cd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011cda:	4661      	mov	r1, ip
 8011cdc:	469c      	mov	ip, r3
 8011cde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011ce0:	4466      	add	r6, ip
            abuf += dest_w;
 8011ce2:	469c      	mov	ip, r3
 8011ce4:	4653      	mov	r3, sl
 8011ce6:	3301      	adds	r3, #1
 8011ce8:	b21b      	sxth	r3, r3
 8011cea:	469a      	mov	sl, r3
        for(y = 0; y < dest_h; y++) {
 8011cec:	9b11      	ldr	r3, [sp, #68]	; 0x44
            abuf += dest_w;
 8011cee:	19ed      	adds	r5, r5, r7
            src_tmp8 += src_new_line_step_byte;
 8011cf0:	44e3      	add	fp, ip
        for(y = 0; y < dest_h; y++) {
 8011cf2:	4553      	cmp	r3, sl
 8011cf4:	d1e0      	bne.n	8011cb8 <lv_draw_sw_img_decoded+0x4d0>
 8011cf6:	000d      	movs	r5, r1
 8011cf8:	4647      	mov	r7, r8
 8011cfa:	464e      	mov	r6, r9
 8011cfc:	e640      	b.n	8011980 <lv_draw_sw_img_decoded+0x198>
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8011cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d00:	2b04      	cmp	r3, #4
 8011d02:	d044      	beq.n	8011d8e <lv_draw_sw_img_decoded+0x5a6>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 8011d04:	2b0e      	cmp	r3, #14
 8011d06:	d025      	beq.n	8011d54 <lv_draw_sw_img_decoded+0x56c>
    else if(!mask_any && !transform && cf == LV_IMG_CF_RGB565A8 && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8011d08:	2b14      	cmp	r3, #20
 8011d0a:	d000      	beq.n	8011d0e <lv_draw_sw_img_decoded+0x526>
 8011d0c:	e595      	b.n	801183a <lv_draw_sw_img_decoded+0x52>
 8011d0e:	4653      	mov	r3, sl
 8011d10:	7a9b      	ldrb	r3, [r3, #10]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d000      	beq.n	8011d18 <lv_draw_sw_img_decoded+0x530>
 8011d16:	e590      	b.n	801183a <lv_draw_sw_img_decoded+0x52>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8011d18:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011d1a:	8883      	ldrh	r3, [r0, #4]
 8011d1c:	8802      	ldrh	r2, [r0, #0]
 8011d1e:	3301      	adds	r3, #1
 8011d20:	1a9a      	subs	r2, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011d22:	88c3      	ldrh	r3, [r0, #6]
 8011d24:	8841      	ldrh	r1, [r0, #2]
 8011d26:	3301      	adds	r3, #1
 8011d28:	1a5b      	subs	r3, r3, r1
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 8011d2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8011d2c:	b212      	sxth	r2, r2
        blend_dsc.mask_buf += sizeof(lv_color_t) * src_w * src_h;
 8011d2e:	468c      	mov	ip, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011d30:	b21b      	sxth	r3, r3
 8011d32:	4353      	muls	r3, r2
 8011d34:	005b      	lsls	r3, r3, #1
 8011d36:	4463      	add	r3, ip
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 8011d38:	911e      	str	r1, [sp, #120]	; 0x78
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8011d3a:	213c      	movs	r1, #60	; 0x3c
        blend_dsc.mask_buf += sizeof(lv_color_t) * src_w * src_h;
 8011d3c:	9320      	str	r3, [sp, #128]	; 0x80
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8011d3e:	2302      	movs	r3, #2
 8011d40:	aa12      	add	r2, sp, #72	; 0x48
 8011d42:	1852      	adds	r2, r2, r1
        blend_dsc.blend_area = coords;
 8011d44:	901d      	str	r0, [sp, #116]	; 0x74
        blend_dsc.mask_area = coords;
 8011d46:	9022      	str	r0, [sp, #136]	; 0x88
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8011d48:	a91d      	add	r1, sp, #116	; 0x74
 8011d4a:	4658      	mov	r0, fp
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8011d4c:	7013      	strb	r3, [r2, #0]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8011d4e:	f7fe fe1b 	bl	8010988 <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_RGB565A8 && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8011d52:	e634      	b.n	80119be <lv_draw_sw_img_decoded+0x1d6>
        if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
 8011d54:	465b      	mov	r3, fp
 8011d56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011d58:	689a      	ldr	r2, [r3, #8]
 8011d5a:	0021      	movs	r1, r4
 8011d5c:	a81b      	add	r0, sp, #108	; 0x6c
 8011d5e:	f002 fa7f 	bl	8014260 <_lv_area_intersect>
 8011d62:	2800      	cmp	r0, #0
 8011d64:	d100      	bne.n	8011d68 <lv_draw_sw_img_decoded+0x580>
 8011d66:	e62a      	b.n	80119be <lv_draw_sw_img_decoded+0x1d6>
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 8011d68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        blend_dsc.mask_area = coords;
 8011d6a:	9422      	str	r4, [sp, #136]	; 0x88
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 8011d6c:	9320      	str	r3, [sp, #128]	; 0x80
        blend_dsc.src_buf = NULL;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	931e      	str	r3, [sp, #120]	; 0x78
        blend_dsc.color = draw_dsc->recolor;
 8011d72:	4653      	mov	r3, sl
 8011d74:	891b      	ldrh	r3, [r3, #8]
 8011d76:	a912      	add	r1, sp, #72	; 0x48
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8011d78:	203c      	movs	r0, #60	; 0x3c
        blend_dsc.color = draw_dsc->recolor;
 8011d7a:	868b      	strh	r3, [r1, #52]	; 0x34
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8011d7c:	2302      	movs	r3, #2
 8011d7e:	1809      	adds	r1, r1, r0
 8011d80:	700b      	strb	r3, [r1, #0]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8011d82:	4658      	mov	r0, fp
 8011d84:	a91d      	add	r1, sp, #116	; 0x74
        blend_dsc.blend_area = coords;
 8011d86:	941d      	str	r4, [sp, #116]	; 0x74
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8011d88:	f7fe fdfe 	bl	8010988 <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 8011d8c:	e617      	b.n	80119be <lv_draw_sw_img_decoded+0x1d6>
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8011d8e:	4653      	mov	r3, sl
 8011d90:	7a9b      	ldrb	r3, [r3, #10]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d000      	beq.n	8011d98 <lv_draw_sw_img_decoded+0x5b0>
 8011d96:	e550      	b.n	801183a <lv_draw_sw_img_decoded+0x52>
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 8011d98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8011d9a:	4658      	mov	r0, fp
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 8011d9c:	931e      	str	r3, [sp, #120]	; 0x78
        blend_dsc.blend_area = coords;
 8011d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8011da0:	a91d      	add	r1, sp, #116	; 0x74
        blend_dsc.blend_area = coords;
 8011da2:	931d      	str	r3, [sp, #116]	; 0x74
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8011da4:	f7fe fdf0 	bl	8010988 <lv_draw_sw_blend>
 8011da8:	e609      	b.n	80119be <lv_draw_sw_img_decoded+0x1d6>
 8011daa:	46c0      	nop			; (mov r8, r8)
 8011dac:	fffff81f 	.word	0xfffff81f

08011db0 <lv_draw_sw_layer_create>:
 **********************/


struct _lv_draw_layer_ctx_t * lv_draw_sw_layer_create(struct _lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                                                      lv_draw_layer_flags_t flags)
{
 8011db0:	b570      	push	{r4, r5, r6, lr}
 8011db2:	0005      	movs	r5, r0
 8011db4:	000c      	movs	r4, r1
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 8011db6:	07d3      	lsls	r3, r2, #31
 8011db8:	d500      	bpl.n	8011dbc <lv_draw_sw_layer_create+0xc>
 8011dba:	e06f      	b.n	8011e9c <lv_draw_sw_layer_create+0xec>
        return NULL;
    }

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
    uint32_t px_size = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 8011dbc:	0793      	lsls	r3, r2, #30
 8011dbe:	d535      	bpl.n	8011e2c <lv_draw_sw_layer_create+0x7c>
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 8011dc0:	22c0      	movs	r2, #192	; 0xc0
 8011dc2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8011dc4:	01d2      	lsls	r2, r2, #7
 8011dc6:	0fdb      	lsrs	r3, r3, #31
 8011dc8:	07db      	lsls	r3, r3, #31
 8011dca:	4313      	orrs	r3, r2
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8011dcc:	0008      	movs	r0, r1
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 8011dce:	628b      	str	r3, [r1, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8011dd0:	f002 fa16 	bl	8014200 <lv_area_get_size>
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 8011dd4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8011dd6:	0002      	movs	r2, r0
 8011dd8:	0045      	lsls	r5, r0, #1
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 8011dda:	0048      	lsls	r0, r1, #1
 8011ddc:	0840      	lsrs	r0, r0, #1
 8011dde:	42a8      	cmp	r0, r5
 8011de0:	d905      	bls.n	8011dee <lv_draw_sw_layer_create+0x3e>
 8011de2:	0090      	lsls	r0, r2, #2
 8011de4:	0fc9      	lsrs	r1, r1, #31
 8011de6:	0840      	lsrs	r0, r0, #1
 8011de8:	07c9      	lsls	r1, r1, #31
 8011dea:	4301      	orrs	r1, r0
 8011dec:	62a1      	str	r1, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8011dee:	f003 f847 	bl	8014e80 <lv_mem_alloc>
 8011df2:	6160      	str	r0, [r4, #20]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 8011df4:	2800      	cmp	r0, #0
 8011df6:	d045      	beq.n	8011e84 <lv_draw_sw_layer_create+0xd4>
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
            if(layer_sw_ctx->base_draw.buf == NULL) {
                return NULL;
            }
        }
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 8011df8:	0023      	movs	r3, r4
 8011dfa:	0022      	movs	r2, r4
 8011dfc:	3308      	adds	r3, #8
 8011dfe:	ca03      	ldmia	r2!, {r0, r1}
 8011e00:	c303      	stmia	r3!, {r0, r1}
        layer_sw_ctx->base_draw.area_act.y2 = layer_sw_ctx->base_draw.area_full.y1;
 8011e02:	8863      	ldrh	r3, [r4, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8011e04:	89a1      	ldrh	r1, [r4, #12]
 8011e06:	81e3      	strh	r3, [r4, #14]
        lv_coord_t w = lv_area_get_width(&layer_sw_ctx->base_draw.area_act);
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 8011e08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011e0a:	3101      	adds	r1, #1
 8011e0c:	0058      	lsls	r0, r3, #1
 8011e0e:	8923      	ldrh	r3, [r4, #8]
 8011e10:	0840      	lsrs	r0, r0, #1
 8011e12:	1ac9      	subs	r1, r1, r3
 8011e14:	b209      	sxth	r1, r1
 8011e16:	f7ee fa11 	bl	800023c <__divsi3>
 8011e1a:	2103      	movs	r1, #3
 8011e1c:	0005      	movs	r5, r0
 8011e1e:	f7ee fa0d 	bl	800023c <__divsi3>
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 8011e22:	086d      	lsrs	r5, r5, #1
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 8011e24:	8220      	strh	r0, [r4, #16]
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 8011e26:	8265      	strh	r5, [r4, #18]
 8011e28:	0020      	movs	r0, r4
 8011e2a:	e02a      	b.n	8011e82 <lv_draw_sw_layer_create+0xd2>
    }
    else {
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 8011e2c:	000b      	movs	r3, r1
 8011e2e:	000e      	movs	r6, r1
 8011e30:	3308      	adds	r3, #8
 8011e32:	ce06      	ldmia	r6!, {r1, r2}
 8011e34:	c306      	stmia	r3!, {r1, r2}
        layer_sw_ctx->buf_size_bytes = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8011e36:	0020      	movs	r0, r4
 8011e38:	f002 f9e2 	bl	8014200 <lv_area_get_size>
 8011e3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011e3e:	0082      	lsls	r2, r0, #2
 8011e40:	0fdb      	lsrs	r3, r3, #31
 8011e42:	0850      	lsrs	r0, r2, #1
 8011e44:	07db      	lsls	r3, r3, #31
 8011e46:	4303      	orrs	r3, r0
 8011e48:	62a3      	str	r3, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8011e4a:	f003 f819 	bl	8014e80 <lv_mem_alloc>
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 8011e4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8011e50:	6160      	str	r0, [r4, #20]
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 8011e52:	0059      	lsls	r1, r3, #1
 8011e54:	0849      	lsrs	r1, r1, #1
 8011e56:	f003 fb95 	bl	8015584 <lv_memset_00>
        layer_sw_ctx->has_alpha = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 8011e5a:	0022      	movs	r2, r4
 8011e5c:	237f      	movs	r3, #127	; 0x7f
 8011e5e:	3228      	adds	r2, #40	; 0x28
 8011e60:	78d1      	ldrb	r1, [r2, #3]
 8011e62:	400b      	ands	r3, r1
 8011e64:	70d3      	strb	r3, [r2, #3]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 8011e66:	6963      	ldr	r3, [r4, #20]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d017      	beq.n	8011e9c <lv_draw_sw_layer_create+0xec>
            return NULL;
        }

        draw_ctx->buf = layer_sw_ctx->base_draw.buf;
 8011e6c:	602b      	str	r3, [r5, #0]
        draw_ctx->buf_area = &layer_sw_ctx->base_draw.area_act;
 8011e6e:	606e      	str	r6, [r5, #4]
        draw_ctx->clip_area = &layer_sw_ctx->base_draw.area_act;
 8011e70:	60ae      	str	r6, [r5, #8]

        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8011e72:	f7fc ff39 	bl	800ece8 <_lv_refr_get_disp_refreshing>
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 8011e76:	2140      	movs	r1, #64	; 0x40
 8011e78:	6802      	ldr	r2, [r0, #0]
 8011e7a:	0020      	movs	r0, r4
 8011e7c:	7c13      	ldrb	r3, [r2, #16]
 8011e7e:	438b      	bics	r3, r1
 8011e80:	7413      	strb	r3, [r2, #16]
    }

    return layer_ctx;
}
 8011e82:	bd70      	pop	{r4, r5, r6, pc}
            layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE;
 8011e84:	20c0      	movs	r0, #192	; 0xc0
 8011e86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011e88:	0100      	lsls	r0, r0, #4
 8011e8a:	0fdb      	lsrs	r3, r3, #31
 8011e8c:	07db      	lsls	r3, r3, #31
 8011e8e:	4303      	orrs	r3, r0
 8011e90:	62a3      	str	r3, [r4, #40]	; 0x28
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8011e92:	f002 fff5 	bl	8014e80 <lv_mem_alloc>
 8011e96:	6160      	str	r0, [r4, #20]
            if(layer_sw_ctx->base_draw.buf == NULL) {
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	d1ad      	bne.n	8011df8 <lv_draw_sw_layer_create+0x48>
        return NULL;
 8011e9c:	2000      	movs	r0, #0
 8011e9e:	e7f0      	b.n	8011e82 <lv_draw_sw_layer_create+0xd2>

08011ea0 <lv_draw_sw_layer_adjust>:

void lv_draw_sw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 8011ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ea2:	0005      	movs	r5, r0
 8011ea4:	000c      	movs	r4, r1
 8011ea6:	0017      	movs	r7, r2

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8011ea8:	f7fc ff1e 	bl	800ece8 <_lv_refr_get_disp_refreshing>
 8011eac:	0006      	movs	r6, r0
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 8011eae:	07fb      	lsls	r3, r7, #31
 8011eb0:	d410      	bmi.n	8011ed4 <lv_draw_sw_layer_adjust+0x34>
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
        layer_sw_ctx->has_alpha = 1;
        disp_refr->driver->screen_transp = 1;
    }
    else {
        layer_sw_ctx->has_alpha = 0;
 8011eb2:	0022      	movs	r2, r4
 8011eb4:	237f      	movs	r3, #127	; 0x7f
 8011eb6:	3228      	adds	r2, #40	; 0x28
 8011eb8:	78d1      	ldrb	r1, [r2, #3]
 8011eba:	400b      	ands	r3, r1
        disp_refr->driver->screen_transp = 0;
 8011ebc:	2140      	movs	r1, #64	; 0x40
        layer_sw_ctx->has_alpha = 0;
 8011ebe:	70d3      	strb	r3, [r2, #3]
        disp_refr->driver->screen_transp = 0;
 8011ec0:	6802      	ldr	r2, [r0, #0]
 8011ec2:	7c13      	ldrb	r3, [r2, #16]
 8011ec4:	438b      	bics	r3, r1
 8011ec6:	7413      	strb	r3, [r2, #16]
    }

    draw_ctx->buf = layer_ctx->buf;
 8011ec8:	6963      	ldr	r3, [r4, #20]
    draw_ctx->buf_area = &layer_ctx->area_act;
 8011eca:	3408      	adds	r4, #8
    draw_ctx->buf = layer_ctx->buf;
 8011ecc:	602b      	str	r3, [r5, #0]
    draw_ctx->buf_area = &layer_ctx->area_act;
 8011ece:	606c      	str	r4, [r5, #4]
    draw_ctx->clip_area = &layer_ctx->area_act;
 8011ed0:	60ac      	str	r4, [r5, #8]
}
 8011ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
 8011ed4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011ed6:	6960      	ldr	r0, [r4, #20]
 8011ed8:	0059      	lsls	r1, r3, #1
 8011eda:	0849      	lsrs	r1, r1, #1
 8011edc:	f003 fb52 	bl	8015584 <lv_memset_00>
        layer_sw_ctx->has_alpha = 1;
 8011ee0:	0022      	movs	r2, r4
 8011ee2:	2380      	movs	r3, #128	; 0x80
 8011ee4:	3228      	adds	r2, #40	; 0x28
 8011ee6:	78d1      	ldrb	r1, [r2, #3]
 8011ee8:	425b      	negs	r3, r3
 8011eea:	430b      	orrs	r3, r1
        disp_refr->driver->screen_transp = 1;
 8011eec:	2140      	movs	r1, #64	; 0x40
        layer_sw_ctx->has_alpha = 1;
 8011eee:	70d3      	strb	r3, [r2, #3]
        disp_refr->driver->screen_transp = 1;
 8011ef0:	6832      	ldr	r2, [r6, #0]
 8011ef2:	7c13      	ldrb	r3, [r2, #16]
 8011ef4:	430b      	orrs	r3, r1
 8011ef6:	7413      	strb	r3, [r2, #16]
 8011ef8:	e7e6      	b.n	8011ec8 <lv_draw_sw_layer_adjust+0x28>
 8011efa:	46c0      	nop			; (mov r8, r8)

08011efc <lv_draw_sw_layer_blend>:

void lv_draw_sw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                            const lv_draw_img_dsc_t * draw_dsc)
{
 8011efc:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;

    lv_img_dsc_t img;
    img.data = draw_ctx->buf;
 8011efe:	6803      	ldr	r3, [r0, #0]
{
 8011f00:	b085      	sub	sp, #20
 8011f02:	0017      	movs	r7, r2
    img.header.always_zero = 0;
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 8011f04:	6842      	ldr	r2, [r0, #4]
    img.data = draw_ctx->buf;
 8011f06:	9303      	str	r3, [sp, #12]
 8011f08:	8893      	ldrh	r3, [r2, #4]
{
 8011f0a:	000c      	movs	r4, r1
 8011f0c:	8811      	ldrh	r1, [r2, #0]
 8011f0e:	3301      	adds	r3, #1
 8011f10:	1a5b      	subs	r3, r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011f12:	88d1      	ldrh	r1, [r2, #6]
 8011f14:	8852      	ldrh	r2, [r2, #2]
 8011f16:	3101      	adds	r1, #1
 8011f18:	1a8a      	subs	r2, r1, r2
    img.header.always_zero = 0;
 8011f1a:	055b      	lsls	r3, r3, #21
 8011f1c:	0552      	lsls	r2, r2, #21
 8011f1e:	0adb      	lsrs	r3, r3, #11
 8011f20:	9901      	ldr	r1, [sp, #4]
 8011f22:	4313      	orrs	r3, r2
 8011f24:	4a17      	ldr	r2, [pc, #92]	; (8011f84 <lv_draw_sw_layer_blend+0x88>)
{
 8011f26:	0005      	movs	r5, r0
    img.header.always_zero = 0;
 8011f28:	400a      	ands	r2, r1
 8011f2a:	4313      	orrs	r3, r2
 8011f2c:	9301      	str	r3, [sp, #4]
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 8011f2e:	232b      	movs	r3, #43	; 0x2b
 8011f30:	5ce2      	ldrb	r2, [r4, r3]
 8011f32:	3354      	adds	r3, #84	; 0x54
 8011f34:	4293      	cmp	r3, r2
 8011f36:	419b      	sbcs	r3, r3
    img.data = draw_ctx->buf;
 8011f38:	ae01      	add	r6, sp, #4
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 8011f3a:	425b      	negs	r3, r3
    lv_img_cache_invalidate_src(&img);
 8011f3c:	0030      	movs	r0, r6
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 8011f3e:	3304      	adds	r3, #4
 8011f40:	7033      	strb	r3, [r6, #0]
    lv_img_cache_invalidate_src(&img);
 8011f42:	f7fe f82f 	bl	800ffa4 <lv_img_cache_invalidate_src>

    /*Restore the original draw_ctx*/
    draw_ctx->buf = layer_ctx->original.buf;
 8011f46:	69a3      	ldr	r3, [r4, #24]
 8011f48:	69e2      	ldr	r2, [r4, #28]
 8011f4a:	6a21      	ldr	r1, [r4, #32]
 8011f4c:	606a      	str	r2, [r5, #4]
 8011f4e:	6029      	str	r1, [r5, #0]
 8011f50:	60ab      	str	r3, [r5, #8]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
    draw_ctx->clip_area = layer_ctx->original.clip_area;
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8011f52:	f7fc fec9 	bl	800ece8 <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8011f56:	2324      	movs	r3, #36	; 0x24
 8011f58:	6801      	ldr	r1, [r0, #0]
 8011f5a:	2040      	movs	r0, #64	; 0x40
 8011f5c:	5ce2      	ldrb	r2, [r4, r3]
 8011f5e:	3b23      	subs	r3, #35	; 0x23
 8011f60:	401a      	ands	r2, r3
 8011f62:	7c0b      	ldrb	r3, [r1, #16]
 8011f64:	0192      	lsls	r2, r2, #6
 8011f66:	4383      	bics	r3, r0
 8011f68:	4313      	orrs	r3, r2

    /*Blend the layer*/
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 8011f6a:	0022      	movs	r2, r4
 8011f6c:	0028      	movs	r0, r5
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8011f6e:	740b      	strb	r3, [r1, #16]
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 8011f70:	3208      	adds	r2, #8
 8011f72:	0033      	movs	r3, r6
 8011f74:	0039      	movs	r1, r7
 8011f76:	f7fd f9cb 	bl	800f310 <lv_draw_img>
    lv_draw_wait_for_finish(draw_ctx);
 8011f7a:	0028      	movs	r0, r5
 8011f7c:	f7fd f9b2 	bl	800f2e4 <lv_draw_wait_for_finish>
}
 8011f80:	b005      	add	sp, #20
 8011f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f84:	0000031f 	.word	0x0000031f

08011f88 <lv_draw_sw_layer_destroy>:

void lv_draw_sw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 8011f88:	b510      	push	{r4, lr}
    LV_UNUSED(draw_ctx);

    lv_mem_free(layer_ctx->buf);
 8011f8a:	6948      	ldr	r0, [r1, #20]
 8011f8c:	f002 ff9a 	bl	8014ec4 <lv_mem_free>
}
 8011f90:	bd10      	pop	{r4, pc}
 8011f92:	46c0      	nop			; (mov r8, r8)

08011f94 <lv_draw_sw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_sw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                       uint32_t letter)
{
 8011f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f96:	4657      	mov	r7, sl
 8011f98:	464e      	mov	r6, r9
 8011f9a:	4645      	mov	r5, r8
 8011f9c:	46de      	mov	lr, fp
 8011f9e:	b5e0      	push	{r5, r6, r7, lr}
 8011fa0:	000e      	movs	r6, r1
 8011fa2:	001d      	movs	r5, r3
 8011fa4:	b09d      	sub	sp, #116	; 0x74
 8011fa6:	0004      	movs	r4, r0
 8011fa8:	0017      	movs	r7, r2
    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(dsc->font, &g, letter, '\0');
 8011faa:	2300      	movs	r3, #0
 8011fac:	002a      	movs	r2, r5
 8011fae:	6830      	ldr	r0, [r6, #0]
 8011fb0:	a911      	add	r1, sp, #68	; 0x44
 8011fb2:	f001 f9bd 	bl	8013330 <lv_font_get_glyph_dsc>
    if(g_ret == false) {
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	d033      	beq.n	8012022 <lv_draw_sw_letter+0x8e>
        }
        return;
    }

    /*Don't draw anything if the character is empty. E.g. space*/
    if((g.box_h == 0) || (g.box_w == 0)) return;
 8011fba:	ab0e      	add	r3, sp, #56	; 0x38
 8011fbc:	8a9b      	ldrh	r3, [r3, #20]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d02f      	beq.n	8012022 <lv_draw_sw_letter+0x8e>
 8011fc2:	aa0e      	add	r2, sp, #56	; 0x38
 8011fc4:	8a52      	ldrh	r2, [r2, #18]
 8011fc6:	2a00      	cmp	r2, #0
 8011fc8:	d02b      	beq.n	8012022 <lv_draw_sw_letter+0x8e>

    lv_point_t gpos;
    gpos.x = pos_p->x + g.ofs_x;
 8011fca:	a80e      	add	r0, sp, #56	; 0x38
 8011fcc:	8ac0      	ldrh	r0, [r0, #22]
 8011fce:	8839      	ldrh	r1, [r7, #0]
 8011fd0:	1809      	adds	r1, r1, r0
 8011fd2:	b288      	uxth	r0, r1
 8011fd4:	b209      	sxth	r1, r1
 8011fd6:	468a      	mov	sl, r1
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;

    /*If the letter is completely out of mask don't draw it*/
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 8011fd8:	4452      	add	r2, sl
 8011fda:	4694      	mov	ip, r2
 8011fdc:	9102      	str	r1, [sp, #8]
 8011fde:	68a1      	ldr	r1, [r4, #8]
    gpos.x = pos_p->x + g.ofs_x;
 8011fe0:	9001      	str	r0, [sp, #4]
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	5e88      	ldrsh	r0, [r1, r2]
 8011fe6:	4584      	cmp	ip, r0
 8011fe8:	db1b      	blt.n	8012022 <lv_draw_sw_letter+0x8e>
 8011fea:	2004      	movs	r0, #4
 8011fec:	5e0a      	ldrsh	r2, [r1, r0]
 8011fee:	4552      	cmp	r2, sl
 8011ff0:	db17      	blt.n	8012022 <lv_draw_sw_letter+0x8e>
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8011ff2:	aa0e      	add	r2, sp, #56	; 0x38
 8011ff4:	8b10      	ldrh	r0, [r2, #24]
 8011ff6:	887a      	ldrh	r2, [r7, #2]
 8011ff8:	1818      	adds	r0, r3, r0
 8011ffa:	1a12      	subs	r2, r2, r0
 8011ffc:	6830      	ldr	r0, [r6, #0]
 8011ffe:	8907      	ldrh	r7, [r0, #8]
 8012000:	8940      	ldrh	r0, [r0, #10]
 8012002:	19d2      	adds	r2, r2, r7
 8012004:	1a12      	subs	r2, r2, r0
 8012006:	b290      	uxth	r0, r2
 8012008:	b212      	sxth	r2, r2
 801200a:	4693      	mov	fp, r2
 801200c:	9003      	str	r0, [sp, #12]
       gpos.x > draw_ctx->clip_area->x2 ||
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 801200e:	0017      	movs	r7, r2
 8012010:	2002      	movs	r0, #2
 8012012:	5e0a      	ldrsh	r2, [r1, r0]
 8012014:	445b      	add	r3, fp
       gpos.x > draw_ctx->clip_area->x2 ||
 8012016:	4293      	cmp	r3, r2
 8012018:	db03      	blt.n	8012022 <lv_draw_sw_letter+0x8e>
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 801201a:	2206      	movs	r2, #6
 801201c:	5e8b      	ldrsh	r3, [r1, r2]
 801201e:	455b      	cmp	r3, fp
 8012020:	da06      	bge.n	8012030 <lv_draw_sw_letter+0x9c>
#endif
    }
    else {
        draw_letter_normal(draw_ctx, dsc, &gpos, &g, map_p);
    }
}
 8012022:	b01d      	add	sp, #116	; 0x74
 8012024:	bcf0      	pop	{r4, r5, r6, r7}
 8012026:	46bb      	mov	fp, r7
 8012028:	46b2      	mov	sl, r6
 801202a:	46a9      	mov	r9, r5
 801202c:	46a0      	mov	r8, r4
 801202e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const uint8_t * map_p = lv_font_get_glyph_bitmap(g.resolved_font, letter);
 8012030:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012032:	0029      	movs	r1, r5
 8012034:	0018      	movs	r0, r3
 8012036:	9304      	str	r3, [sp, #16]
 8012038:	f001 f972 	bl	8013320 <lv_font_get_glyph_bitmap>
 801203c:	4684      	mov	ip, r0
    if(map_p == NULL) {
 801203e:	2800      	cmp	r0, #0
 8012040:	d0ef      	beq.n	8012022 <lv_draw_sw_letter+0x8e>
    if(g.resolved_font->subpx) {
 8012042:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012044:	9304      	str	r3, [sp, #16]
 8012046:	7b1b      	ldrb	r3, [r3, #12]
 8012048:	079b      	lsls	r3, r3, #30
 801204a:	d1ea      	bne.n	8012022 <lv_draw_sw_letter+0x8e>
{

    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 801204c:	ab0e      	add	r3, sp, #56	; 0x38
 801204e:	7e9b      	ldrb	r3, [r3, #26]
    lv_opa_t opa = dsc->opa;
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 8012050:	220f      	movs	r2, #15
    uint32_t bpp = g->bpp;
 8012052:	071b      	lsls	r3, r3, #28
 8012054:	0f1b      	lsrs	r3, r3, #28
    if(bpp == 3) bpp = 4;
 8012056:	0018      	movs	r0, r3
 8012058:	300d      	adds	r0, #13
    lv_opa_t opa = dsc->opa;
 801205a:	7eb1      	ldrb	r1, [r6, #26]
    if(bpp == 3) bpp = 4;
 801205c:	4002      	ands	r2, r0
 801205e:	2a01      	cmp	r2, #1
 8012060:	d800      	bhi.n	8012064 <lv_draw_sw_letter+0xd0>
 8012062:	e159      	b.n	8012318 <lv_draw_sw_letter+0x384>
        lv_draw_img(draw_ctx, &img_dsc, &fill_area, map_p);
        return;
    }
#endif

    switch(bpp) {
 8012064:	2b04      	cmp	r3, #4
 8012066:	d900      	bls.n	801206a <lv_draw_sw_letter+0xd6>
 8012068:	e13d      	b.n	80122e6 <lv_draw_sw_letter+0x352>
 801206a:	2b01      	cmp	r3, #1
 801206c:	d100      	bne.n	8012070 <lv_draw_sw_letter+0xdc>
 801206e:	e15c      	b.n	801232a <lv_draw_sw_letter+0x396>
 8012070:	2b02      	cmp	r3, #2
 8012072:	d1d6      	bne.n	8012022 <lv_draw_sw_letter+0x8e>
 8012074:	2306      	movs	r3, #6
            shades = 2;
            break;
        case 2:
            bpp_opa_table_p = _lv_bpp2_opa_table;
            bitmask_init  = 0xC0;
            shades = 4;
 8012076:	2004      	movs	r0, #4
    switch(bpp) {
 8012078:	930c      	str	r3, [sp, #48]	; 0x30
 801207a:	3b04      	subs	r3, #4
 801207c:	4699      	mov	r9, r3
            bitmask_init  = 0xC0;
 801207e:	33be      	adds	r3, #190	; 0xbe
 8012080:	930d      	str	r3, [sp, #52]	; 0x34
            bpp_opa_table_p = _lv_bpp2_opa_table;
 8012082:	4bb4      	ldr	r3, [pc, #720]	; (8012354 <lv_draw_sw_letter+0x3c0>)
 8012084:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 8012086:	29fc      	cmp	r1, #252	; 0xfc
 8012088:	d81d      	bhi.n	80120c6 <lv_draw_sw_letter+0x132>
        if(prev_opa != opa || prev_bpp != bpp) {
 801208a:	4bb3      	ldr	r3, [pc, #716]	; (8012358 <lv_draw_sw_letter+0x3c4>)
 801208c:	781b      	ldrb	r3, [r3, #0]
 801208e:	428b      	cmp	r3, r1
 8012090:	d100      	bne.n	8012094 <lv_draw_sw_letter+0x100>
 8012092:	e154      	b.n	801233e <lv_draw_sw_letter+0x3aa>
 8012094:	2200      	movs	r2, #0
 8012096:	4bb1      	ldr	r3, [pc, #708]	; (801235c <lv_draw_sw_letter+0x3c8>)
 8012098:	9304      	str	r3, [sp, #16]
 801209a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801209c:	4db0      	ldr	r5, [pc, #704]	; (8012360 <lv_draw_sw_letter+0x3cc>)
 801209e:	4698      	mov	r8, r3
            uint32_t i;
            for(i = 0; i < shades; i++) {
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 80120a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120a2:	5c9b      	ldrb	r3, [r3, r2]
 80120a4:	2bff      	cmp	r3, #255	; 0xff
 80120a6:	d100      	bne.n	80120aa <lv_draw_sw_letter+0x116>
 80120a8:	e117      	b.n	80122da <lv_draw_sw_letter+0x346>
 80120aa:	434b      	muls	r3, r1
 80120ac:	121b      	asrs	r3, r3, #8
 80120ae:	54ab      	strb	r3, [r5, r2]
            for(i = 0; i < shades; i++) {
 80120b0:	3201      	adds	r2, #1
 80120b2:	4282      	cmp	r2, r0
 80120b4:	d1f4      	bne.n	80120a0 <lv_draw_sw_letter+0x10c>
 80120b6:	4643      	mov	r3, r8
 80120b8:	930c      	str	r3, [sp, #48]	; 0x30
            }
        }
        bpp_opa_table_p = opa_table;
        prev_opa = opa;
        prev_bpp = bpp;
 80120ba:	464a      	mov	r2, r9
        prev_opa = opa;
 80120bc:	4ba6      	ldr	r3, [pc, #664]	; (8012358 <lv_draw_sw_letter+0x3c4>)
        bpp_opa_table_p = opa_table;
 80120be:	950b      	str	r5, [sp, #44]	; 0x2c
        prev_opa = opa;
 80120c0:	7019      	strb	r1, [r3, #0]
        prev_bpp = bpp;
 80120c2:	9b04      	ldr	r3, [sp, #16]
 80120c4:	601a      	str	r2, [r3, #0]
    }

    int32_t col, row;
    int32_t box_w = g->box_w;
 80120c6:	ab0e      	add	r3, sp, #56	; 0x38
 80120c8:	8a59      	ldrh	r1, [r3, #18]
 80120ca:	9105      	str	r1, [sp, #20]
    int32_t box_h = g->box_h;
 80120cc:	8a9b      	ldrh	r3, [r3, #20]
 80120ce:	9308      	str	r3, [sp, #32]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/

    /*Calculate the col/row start/end on the map*/
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 80120d0:	68a3      	ldr	r3, [r4, #8]
 80120d2:	2100      	movs	r1, #0
 80120d4:	5e5a      	ldrsh	r2, [r3, r1]
 80120d6:	4592      	cmp	sl, r2
 80120d8:	db00      	blt.n	80120dc <lv_draw_sw_letter+0x148>
 80120da:	e112      	b.n	8012302 <lv_draw_sw_letter+0x36e>
 80120dc:	4651      	mov	r1, sl
 80120de:	1a55      	subs	r5, r2, r1
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
    blend_dsc.mask_buf = mask_buf;
    int32_t mask_p = 0;

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos->x;
 80120e0:	46a8      	mov	r8, r5
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 80120e2:	4648      	mov	r0, r9
    fill_area.x1 = col_start + pos->x;
 80120e4:	9901      	ldr	r1, [sp, #4]
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 80120e6:	4368      	muls	r0, r5
    fill_area.x1 = col_start + pos->x;
 80120e8:	4441      	add	r1, r8
 80120ea:	b20a      	sxth	r2, r1
 80120ec:	4692      	mov	sl, r2
#endif
    blend_dsc.blend_area = &fill_area;
    blend_dsc.mask_area = &fill_area;

    uint32_t col_bit_max = 8 - bpp;
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 80120ee:	9905      	ldr	r1, [sp, #20]
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 80120f0:	9506      	str	r5, [sp, #24]
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 80120f2:	4441      	add	r1, r8
 80120f4:	9109      	str	r1, [sp, #36]	; 0x24
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 80120f6:	2204      	movs	r2, #4
 80120f8:	5e99      	ldrsh	r1, [r3, r2]
 80120fa:	9d02      	ldr	r5, [sp, #8]
 80120fc:	9a05      	ldr	r2, [sp, #20]
 80120fe:	9104      	str	r1, [sp, #16]
 8012100:	4690      	mov	r8, r2
 8012102:	0029      	movs	r1, r5
 8012104:	9a04      	ldr	r2, [sp, #16]
 8012106:	4441      	add	r1, r8
 8012108:	4291      	cmp	r1, r2
 801210a:	dc00      	bgt.n	801210e <lv_draw_sw_letter+0x17a>
 801210c:	e0ff      	b.n	801230e <lv_draw_sw_letter+0x37a>
 801210e:	1b55      	subs	r5, r2, r5
 8012110:	1c6a      	adds	r2, r5, #1
    fill_area.x2 = col_end  + pos->x - 1;
 8012112:	b291      	uxth	r1, r2
 8012114:	910a      	str	r1, [sp, #40]	; 0x28
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 8012116:	9909      	ldr	r1, [sp, #36]	; 0x24
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8012118:	9207      	str	r2, [sp, #28]
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 801211a:	1a89      	subs	r1, r1, r2
 801211c:	464a      	mov	r2, r9
 801211e:	434a      	muls	r2, r1
 8012120:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 8012122:	2102      	movs	r1, #2
 8012124:	5e5a      	ldrsh	r2, [r3, r1]
 8012126:	2100      	movs	r1, #0
 8012128:	9102      	str	r1, [sp, #8]
 801212a:	4593      	cmp	fp, r2
 801212c:	da0c      	bge.n	8012148 <lv_draw_sw_letter+0x1b4>
 801212e:	4659      	mov	r1, fp
 8012130:	1a51      	subs	r1, r2, r1
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 8012132:	464a      	mov	r2, r9
    fill_area.y1 = row_start + pos->y;
 8012134:	4688      	mov	r8, r1
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 8012136:	9d05      	ldr	r5, [sp, #20]
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 8012138:	9102      	str	r1, [sp, #8]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 801213a:	436a      	muls	r2, r5
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 801213c:	434a      	muls	r2, r1
 801213e:	1880      	adds	r0, r0, r2
    fill_area.y1 = row_start + pos->y;
 8012140:	9a03      	ldr	r2, [sp, #12]
 8012142:	4442      	add	r2, r8
 8012144:	b212      	sxth	r2, r2
 8012146:	4693      	mov	fp, r2
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 8012148:	9908      	ldr	r1, [sp, #32]
 801214a:	2206      	movs	r2, #6
 801214c:	5e9a      	ldrsh	r2, [r3, r2]
 801214e:	187b      	adds	r3, r7, r1
 8012150:	9104      	str	r1, [sp, #16]
 8012152:	4293      	cmp	r3, r2
 8012154:	dd02      	ble.n	801215c <lv_draw_sw_letter+0x1c8>
 8012156:	1bd2      	subs	r2, r2, r7
 8012158:	1c53      	adds	r3, r2, #1
 801215a:	9304      	str	r3, [sp, #16]
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 801215c:	2507      	movs	r5, #7
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801215e:	211c      	movs	r1, #28
    map_p += bit_ofs >> 3;
 8012160:	08c7      	lsrs	r7, r0, #3
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 8012162:	4005      	ands	r5, r0
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8012164:	a815      	add	r0, sp, #84	; 0x54
    map_p += bit_ofs >> 3;
 8012166:	4467      	add	r7, ip
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8012168:	f003 fa0c 	bl	8015584 <lv_memset_00>
    blend_dsc.opa = dsc->opa;
 801216c:	2134      	movs	r1, #52	; 0x34
    blend_dsc.color = dsc->color;
 801216e:	89b3      	ldrh	r3, [r6, #12]
 8012170:	aa0e      	add	r2, sp, #56	; 0x38
 8012172:	8493      	strh	r3, [r2, #36]	; 0x24
    blend_dsc.opa = dsc->opa;
 8012174:	7eb3      	ldrb	r3, [r6, #26]
 8012176:	1852      	adds	r2, r2, r1
 8012178:	7013      	strb	r3, [r2, #0]
    blend_dsc.blend_mode = dsc->blend_mode;
 801217a:	7fb3      	ldrb	r3, [r6, #30]
 801217c:	3101      	adds	r1, #1
 801217e:	069b      	lsls	r3, r3, #26
 8012180:	aa0e      	add	r2, sp, #56	; 0x38
 8012182:	0f5b      	lsrs	r3, r3, #29
 8012184:	1852      	adds	r2, r2, r1
 8012186:	7013      	strb	r3, [r2, #0]
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 8012188:	f7fc fdae 	bl	800ece8 <_lv_refr_get_disp_refreshing>
 801218c:	f001 fc5e 	bl	8013a4c <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 8012190:	9a05      	ldr	r2, [sp, #20]
 8012192:	9b08      	ldr	r3, [sp, #32]
 8012194:	4353      	muls	r3, r2
 8012196:	9305      	str	r3, [sp, #20]
 8012198:	4283      	cmp	r3, r0
 801219a:	dd00      	ble.n	801219e <lv_draw_sw_letter+0x20a>
 801219c:	9005      	str	r0, [sp, #20]
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 801219e:	9805      	ldr	r0, [sp, #20]
 80121a0:	f002 feec 	bl	8014f7c <lv_mem_buf_get>
    fill_area.x1 = col_start + pos->x;
 80121a4:	4651      	mov	r1, sl
 80121a6:	ab0e      	add	r3, sp, #56	; 0x38
 80121a8:	8099      	strh	r1, [r3, #4]
    fill_area.x2 = col_end  + pos->x - 1;
 80121aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80121ac:	9b01      	ldr	r3, [sp, #4]
 80121ae:	468c      	mov	ip, r1
 80121b0:	3b01      	subs	r3, #1
 80121b2:	4463      	add	r3, ip
 80121b4:	a90e      	add	r1, sp, #56	; 0x38
 80121b6:	810b      	strh	r3, [r1, #8]
    fill_area.y1 = row_start + pos->y;
 80121b8:	000b      	movs	r3, r1
 80121ba:	4659      	mov	r1, fp
 80121bc:	80d9      	strh	r1, [r3, #6]
    fill_area.y2 = fill_area.y1;
 80121be:	8159      	strh	r1, [r3, #10]
    blend_dsc.blend_area = &fill_area;
 80121c0:	ab0f      	add	r3, sp, #60	; 0x3c
                lv_memset_00(mask_buf + mask_p_start, fill_w);
            }
        }
#endif

        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 80121c2:	9906      	ldr	r1, [sp, #24]
    blend_dsc.blend_area = &fill_area;
 80121c4:	9315      	str	r3, [sp, #84]	; 0x54
    blend_dsc.mask_area = &fill_area;
 80121c6:	931a      	str	r3, [sp, #104]	; 0x68
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 80121c8:	9b07      	ldr	r3, [sp, #28]
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 80121ca:	0002      	movs	r2, r0
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 80121cc:	1a5b      	subs	r3, r3, r1
 80121ce:	4698      	mov	r8, r3
 80121d0:	9301      	str	r3, [sp, #4]
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 80121d2:	23ff      	movs	r3, #255	; 0xff
    int32_t mask_p = 0;
 80121d4:	2100      	movs	r1, #0
 80121d6:	4442      	add	r2, r8
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 80121d8:	469a      	mov	sl, r3
 80121da:	920a      	str	r2, [sp, #40]	; 0x28
    for(row = row_start ; row < row_end; row++) {
 80121dc:	9b02      	ldr	r3, [sp, #8]
 80121de:	9a04      	ldr	r2, [sp, #16]
    int32_t mask_p = 0;
 80121e0:	468c      	mov	ip, r1
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 80121e2:	9008      	str	r0, [sp, #32]
    blend_dsc.mask_buf = mask_buf;
 80121e4:	9018      	str	r0, [sp, #96]	; 0x60
    for(row = row_start ; row < row_end; row++) {
 80121e6:	4293      	cmp	r3, r2
 80121e8:	da5f      	bge.n	80122aa <lv_draw_sw_letter+0x316>
 80121ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121ec:	46cb      	mov	fp, r9
 80121ee:	9303      	str	r3, [sp, #12]
 80121f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121f2:	940b      	str	r4, [sp, #44]	; 0x2c
 80121f4:	4698      	mov	r8, r3
 80121f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
        bitmask = bitmask_init >> col_bit;
 80121f8:	4641      	mov	r1, r8
        for(col = col_start; col < col_end; col++) {
 80121fa:	9b06      	ldr	r3, [sp, #24]
 80121fc:	9a07      	ldr	r2, [sp, #28]
        bitmask = bitmask_init >> col_bit;
 80121fe:	40e9      	lsrs	r1, r5
        for(col = col_start; col < col_end; col++) {
 8012200:	4293      	cmp	r3, r2
 8012202:	da28      	bge.n	8012256 <lv_draw_sw_letter+0x2c2>
 8012204:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012206:	9a08      	ldr	r2, [sp, #32]
 8012208:	9b03      	ldr	r3, [sp, #12]
 801220a:	4460      	add	r0, ip
 801220c:	465e      	mov	r6, fp
 801220e:	4699      	mov	r9, r3
 8012210:	4683      	mov	fp, r0
 8012212:	4462      	add	r2, ip
 8012214:	e00b      	b.n	801222e <lv_draw_sw_letter+0x29a>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 8012216:	4650      	mov	r0, sl
 8012218:	4003      	ands	r3, r0
 801221a:	4648      	mov	r0, r9
 801221c:	5cc3      	ldrb	r3, [r0, r3]
 801221e:	7013      	strb	r3, [r2, #0]
            if(col_bit < col_bit_max) {
 8012220:	42a5      	cmp	r5, r4
 8012222:	d20e      	bcs.n	8012242 <lv_draw_sw_letter+0x2ae>
                bitmask = bitmask >> bpp;
 8012224:	40f1      	lsrs	r1, r6
                col_bit += bpp;
 8012226:	19ad      	adds	r5, r5, r6
        for(col = col_start; col < col_end; col++) {
 8012228:	3201      	adds	r2, #1
 801222a:	4593      	cmp	fp, r2
 801222c:	d00d      	beq.n	801224a <lv_draw_sw_letter+0x2b6>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 801222e:	783b      	ldrb	r3, [r7, #0]
 8012230:	1b60      	subs	r0, r4, r5
 8012232:	400b      	ands	r3, r1
 8012234:	40c3      	lsrs	r3, r0
            if(letter_px) {
 8012236:	b2d8      	uxtb	r0, r3
 8012238:	2800      	cmp	r0, #0
 801223a:	d1ec      	bne.n	8012216 <lv_draw_sw_letter+0x282>
                mask_buf[mask_p] = 0;
 801223c:	7010      	strb	r0, [r2, #0]
            if(col_bit < col_bit_max) {
 801223e:	42a5      	cmp	r5, r4
 8012240:	d3f0      	bcc.n	8012224 <lv_draw_sw_letter+0x290>
                bitmask = bitmask_init;
 8012242:	4641      	mov	r1, r8
                col_bit = 0;
 8012244:	2500      	movs	r5, #0
                map_p++;
 8012246:	3701      	adds	r7, #1
 8012248:	e7ee      	b.n	8012228 <lv_draw_sw_letter+0x294>
            mask_p++;
 801224a:	464b      	mov	r3, r9
 801224c:	9303      	str	r3, [sp, #12]
 801224e:	9b01      	ldr	r3, [sp, #4]
 8012250:	46b3      	mov	fp, r6
 8012252:	4699      	mov	r9, r3
 8012254:	44cc      	add	ip, r9
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 8012256:	9b01      	ldr	r3, [sp, #4]
 8012258:	9a05      	ldr	r2, [sp, #20]
 801225a:	4463      	add	r3, ip
 801225c:	429a      	cmp	r2, r3
 801225e:	d928      	bls.n	80122b2 <lv_draw_sw_letter+0x31e>
            fill_area.y2 ++;
 8012260:	ab0e      	add	r3, sp, #56	; 0x38
 8012262:	220a      	movs	r2, #10
 8012264:	5e9a      	ldrsh	r2, [r3, r2]
 8012266:	a90e      	add	r1, sp, #56	; 0x38
 8012268:	1c53      	adds	r3, r2, #1
 801226a:	b21b      	sxth	r3, r3
 801226c:	814b      	strh	r3, [r1, #10]
            fill_area.y1 = fill_area.y2 + 1;
            fill_area.y2 = fill_area.y1;
            mask_p = 0;
        }

        col_bit += col_bit_row_ofs;
 801226e:	9909      	ldr	r1, [sp, #36]	; 0x24
    for(row = row_start ; row < row_end; row++) {
 8012270:	9804      	ldr	r0, [sp, #16]
        col_bit += col_bit_row_ofs;
 8012272:	4689      	mov	r9, r1
 8012274:	444d      	add	r5, r9
        map_p += (col_bit >> 3);
 8012276:	08e9      	lsrs	r1, r5, #3
 8012278:	187f      	adds	r7, r7, r1
        col_bit = col_bit & 0x7;
 801227a:	2107      	movs	r1, #7
 801227c:	400d      	ands	r5, r1
    for(row = row_start ; row < row_end; row++) {
 801227e:	9902      	ldr	r1, [sp, #8]
 8012280:	3101      	adds	r1, #1
 8012282:	9102      	str	r1, [sp, #8]
 8012284:	4281      	cmp	r1, r0
 8012286:	d1b7      	bne.n	80121f8 <lv_draw_sw_letter+0x264>
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 8012288:	a90e      	add	r1, sp, #56	; 0x38
 801228a:	2006      	movs	r0, #6
 801228c:	5e09      	ldrsh	r1, [r1, r0]
 801228e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012290:	4299      	cmp	r1, r3
 8012292:	d00a      	beq.n	80122aa <lv_draw_sw_letter+0x316>
        fill_area.y2--;
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8012294:	212c      	movs	r1, #44	; 0x2c
        fill_area.y2--;
 8012296:	ab0e      	add	r3, sp, #56	; 0x38
 8012298:	815a      	strh	r2, [r3, #10]
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801229a:	2302      	movs	r3, #2
 801229c:	aa0e      	add	r2, sp, #56	; 0x38
 801229e:	1852      	adds	r2, r2, r1
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80122a0:	0020      	movs	r0, r4
 80122a2:	a915      	add	r1, sp, #84	; 0x54
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80122a4:	7013      	strb	r3, [r2, #0]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80122a6:	f7fe fb6f 	bl	8010988 <lv_draw_sw_blend>
        mask_p = 0;
    }

    lv_mem_buf_release(mask_buf);
 80122aa:	9808      	ldr	r0, [sp, #32]
 80122ac:	f002 ff0a 	bl	80150c4 <lv_mem_buf_release>
 80122b0:	e6b7      	b.n	8012022 <lv_draw_sw_letter+0x8e>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80122b2:	212c      	movs	r1, #44	; 0x2c
 80122b4:	2302      	movs	r3, #2
 80122b6:	aa0e      	add	r2, sp, #56	; 0x38
 80122b8:	1852      	adds	r2, r2, r1
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80122ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80122bc:	a915      	add	r1, sp, #84	; 0x54
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80122be:	7013      	strb	r3, [r2, #0]
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80122c0:	f7fe fb62 	bl	8010988 <lv_draw_sw_blend>
            fill_area.y1 = fill_area.y2 + 1;
 80122c4:	ab0e      	add	r3, sp, #56	; 0x38
 80122c6:	220a      	movs	r2, #10
 80122c8:	5e9a      	ldrsh	r2, [r3, r2]
 80122ca:	a90e      	add	r1, sp, #56	; 0x38
 80122cc:	1c53      	adds	r3, r2, #1
 80122ce:	b21b      	sxth	r3, r3
 80122d0:	80cb      	strh	r3, [r1, #6]
            fill_area.y2 = fill_area.y1;
 80122d2:	814b      	strh	r3, [r1, #10]
            mask_p = 0;
 80122d4:	2100      	movs	r1, #0
 80122d6:	468c      	mov	ip, r1
 80122d8:	e7c9      	b.n	801226e <lv_draw_sw_letter+0x2da>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 80122da:	54a9      	strb	r1, [r5, r2]
            for(i = 0; i < shades; i++) {
 80122dc:	3201      	adds	r2, #1
 80122de:	4290      	cmp	r0, r2
 80122e0:	d000      	beq.n	80122e4 <lv_draw_sw_letter+0x350>
 80122e2:	e6dd      	b.n	80120a0 <lv_draw_sw_letter+0x10c>
 80122e4:	e6e7      	b.n	80120b6 <lv_draw_sw_letter+0x122>
    switch(bpp) {
 80122e6:	2b08      	cmp	r3, #8
 80122e8:	d000      	beq.n	80122ec <lv_draw_sw_letter+0x358>
 80122ea:	e69a      	b.n	8012022 <lv_draw_sw_letter+0x8e>
 80122ec:	2300      	movs	r3, #0
            shades = 256;
 80122ee:	2080      	movs	r0, #128	; 0x80
    switch(bpp) {
 80122f0:	930c      	str	r3, [sp, #48]	; 0x30
 80122f2:	3308      	adds	r3, #8
 80122f4:	4699      	mov	r9, r3
            bitmask_init  = 0xFF;
 80122f6:	33f7      	adds	r3, #247	; 0xf7
 80122f8:	930d      	str	r3, [sp, #52]	; 0x34
            bpp_opa_table_p = _lv_bpp8_opa_table;
 80122fa:	4b1a      	ldr	r3, [pc, #104]	; (8012364 <lv_draw_sw_letter+0x3d0>)
            shades = 256;
 80122fc:	0040      	lsls	r0, r0, #1
            bpp_opa_table_p = _lv_bpp8_opa_table;
 80122fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8012300:	e6c1      	b.n	8012086 <lv_draw_sw_letter+0xf2>
 8012302:	9a05      	ldr	r2, [sp, #20]
 8012304:	2000      	movs	r0, #0
 8012306:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8012308:	2200      	movs	r2, #0
 801230a:	9206      	str	r2, [sp, #24]
 801230c:	e6f3      	b.n	80120f6 <lv_draw_sw_letter+0x162>
 801230e:	9a05      	ldr	r2, [sp, #20]
 8012310:	9009      	str	r0, [sp, #36]	; 0x24
 8012312:	920a      	str	r2, [sp, #40]	; 0x28
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8012314:	9207      	str	r2, [sp, #28]
 8012316:	e704      	b.n	8012122 <lv_draw_sw_letter+0x18e>
 8012318:	2304      	movs	r3, #4
    if(bpp == 3) bpp = 4;
 801231a:	4699      	mov	r9, r3
 801231c:	930c      	str	r3, [sp, #48]	; 0x30
            bitmask_init  = 0xF0;
 801231e:	33ec      	adds	r3, #236	; 0xec
 8012320:	930d      	str	r3, [sp, #52]	; 0x34
            bpp_opa_table_p = _lv_bpp4_opa_table;
 8012322:	4b11      	ldr	r3, [pc, #68]	; (8012368 <lv_draw_sw_letter+0x3d4>)
            shades = 16;
 8012324:	2010      	movs	r0, #16
            bpp_opa_table_p = _lv_bpp4_opa_table;
 8012326:	930b      	str	r3, [sp, #44]	; 0x2c
 8012328:	e6ad      	b.n	8012086 <lv_draw_sw_letter+0xf2>
    switch(bpp) {
 801232a:	2307      	movs	r3, #7
 801232c:	930c      	str	r3, [sp, #48]	; 0x30
 801232e:	3b06      	subs	r3, #6
 8012330:	4699      	mov	r9, r3
 8012332:	337f      	adds	r3, #127	; 0x7f
 8012334:	930d      	str	r3, [sp, #52]	; 0x34
 8012336:	4b0d      	ldr	r3, [pc, #52]	; (801236c <lv_draw_sw_letter+0x3d8>)
 8012338:	2002      	movs	r0, #2
 801233a:	930b      	str	r3, [sp, #44]	; 0x2c
 801233c:	e6a3      	b.n	8012086 <lv_draw_sw_letter+0xf2>
        if(prev_opa != opa || prev_bpp != bpp) {
 801233e:	4b07      	ldr	r3, [pc, #28]	; (801235c <lv_draw_sw_letter+0x3c8>)
 8012340:	2200      	movs	r2, #0
 8012342:	9304      	str	r3, [sp, #16]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	9305      	str	r3, [sp, #20]
 8012348:	454b      	cmp	r3, r9
 801234a:	d000      	beq.n	801234e <lv_draw_sw_letter+0x3ba>
 801234c:	e6a5      	b.n	801209a <lv_draw_sw_letter+0x106>
 801234e:	4d04      	ldr	r5, [pc, #16]	; (8012360 <lv_draw_sw_letter+0x3cc>)
 8012350:	e6b3      	b.n	80120ba <lv_draw_sw_letter+0x126>
 8012352:	46c0      	nop			; (mov r8, r8)
 8012354:	0801b87c 	.word	0x0801b87c
 8012358:	20000574 	.word	0x20000574
 801235c:	20000570 	.word	0x20000570
 8012360:	20000470 	.word	0x20000470
 8012364:	0801b890 	.word	0x0801b890
 8012368:	0801b880 	.word	0x0801b880
 801236c:	0801b878 	.word	0x0801b878

08012370 <lv_draw_sw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                           const lv_point_t * point1, const lv_point_t * point2)
{
 8012370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012372:	4645      	mov	r5, r8
 8012374:	464e      	mov	r6, r9
 8012376:	46de      	mov	lr, fp
 8012378:	4657      	mov	r7, sl
 801237a:	b5e0      	push	{r5, r6, r7, lr}
 801237c:	000c      	movs	r4, r1
 801237e:	001e      	movs	r6, r3
    if(dsc->width == 0) return;
 8012380:	2302      	movs	r3, #2
 8012382:	5ec9      	ldrsh	r1, [r1, r3]
{
 8012384:	4680      	mov	r8, r0
 8012386:	0015      	movs	r5, r2
 8012388:	b093      	sub	sp, #76	; 0x4c
    if(dsc->width == 0) return;
 801238a:	2900      	cmp	r1, #0
 801238c:	d051      	beq.n	8012432 <lv_draw_sw_line+0xc2>
    if(dsc->opa <= LV_OPA_MIN) return;
 801238e:	7a23      	ldrb	r3, [r4, #8]
 8012390:	2b02      	cmp	r3, #2
 8012392:	d94e      	bls.n	8012432 <lv_draw_sw_line+0xc2>

    if(point1->x == point2->x && point1->y == point2->y) return;
 8012394:	2300      	movs	r3, #0
 8012396:	5ed2      	ldrsh	r2, [r2, r3]
 8012398:	2300      	movs	r3, #0
 801239a:	5ef7      	ldrsh	r7, [r6, r3]
 801239c:	2002      	movs	r0, #2
 801239e:	5e2b      	ldrsh	r3, [r5, r0]
 80123a0:	469c      	mov	ip, r3
 80123a2:	2302      	movs	r3, #2
 80123a4:	5ef0      	ldrsh	r0, [r6, r3]
 80123a6:	42ba      	cmp	r2, r7
 80123a8:	d101      	bne.n	80123ae <lv_draw_sw_line+0x3e>
 80123aa:	4584      	cmp	ip, r0
 80123ac:	d041      	beq.n	8012432 <lv_draw_sw_line+0xc2>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 80123ae:	0fcb      	lsrs	r3, r1, #31
 80123b0:	1859      	adds	r1, r3, r1
 80123b2:	1049      	asrs	r1, r1, #1
 80123b4:	b28b      	uxth	r3, r1
 80123b6:	4699      	mov	r9, r3
 80123b8:	1c13      	adds	r3, r2, #0
 80123ba:	42ba      	cmp	r2, r7
 80123bc:	dc53      	bgt.n	8012466 <lv_draw_sw_line+0xf6>
 80123be:	4649      	mov	r1, r9
 80123c0:	1a5b      	subs	r3, r3, r1
 80123c2:	4669      	mov	r1, sp
 80123c4:	800b      	strh	r3, [r1, #0]
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 80123c6:	1c13      	adds	r3, r2, #0
 80123c8:	42ba      	cmp	r2, r7
 80123ca:	db44      	blt.n	8012456 <lv_draw_sw_line+0xe6>
 80123cc:	466a      	mov	r2, sp
 80123ce:	444b      	add	r3, r9
 80123d0:	8093      	strh	r3, [r2, #4]
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 80123d2:	1c03      	adds	r3, r0, #0
 80123d4:	4560      	cmp	r0, ip
 80123d6:	dc35      	bgt.n	8012444 <lv_draw_sw_line+0xd4>
 80123d8:	464a      	mov	r2, r9
 80123da:	1a9b      	subs	r3, r3, r2
 80123dc:	466a      	mov	r2, sp
 80123de:	8053      	strh	r3, [r2, #2]
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 80123e0:	1c03      	adds	r3, r0, #0
 80123e2:	4560      	cmp	r0, ip
 80123e4:	db2c      	blt.n	8012440 <lv_draw_sw_line+0xd0>
 80123e6:	0019      	movs	r1, r3
 80123e8:	466b      	mov	r3, sp
 80123ea:	4449      	add	r1, r9
 80123ec:	80d9      	strh	r1, [r3, #6]

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 80123ee:	4643      	mov	r3, r8
 80123f0:	4669      	mov	r1, sp
 80123f2:	4668      	mov	r0, sp
 80123f4:	689a      	ldr	r2, [r3, #8]
 80123f6:	f001 ff33 	bl	8014260 <_lv_area_intersect>
    if(!is_common) return;
 80123fa:	2800      	cmp	r0, #0
 80123fc:	d019      	beq.n	8012432 <lv_draw_sw_line+0xc2>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80123fe:	4643      	mov	r3, r8
 8012400:	689b      	ldr	r3, [r3, #8]
    draw_ctx->clip_area = &clip_line;
 8012402:	466a      	mov	r2, sp
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8012404:	4699      	mov	r9, r3
    draw_ctx->clip_area = &clip_line;
 8012406:	4643      	mov	r3, r8
 8012408:	609a      	str	r2, [r3, #8]

    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 801240a:	2202      	movs	r2, #2
 801240c:	5eab      	ldrsh	r3, [r5, r2]
 801240e:	2202      	movs	r2, #2
 8012410:	5eb1      	ldrsh	r1, [r6, r2]
 8012412:	428b      	cmp	r3, r1
 8012414:	d05b      	beq.n	80124ce <lv_draw_sw_line+0x15e>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 8012416:	2200      	movs	r2, #0
 8012418:	5ea8      	ldrsh	r0, [r5, r2]
 801241a:	2700      	movs	r7, #0
 801241c:	5ff2      	ldrsh	r2, [r6, r7]
 801241e:	4282      	cmp	r2, r0
 8012420:	d100      	bne.n	8012424 <lv_draw_sw_line+0xb4>
 8012422:	e087      	b.n	8012534 <lv_draw_sw_line+0x1c4>
    else draw_line_skew(draw_ctx, dsc, point1, point2);

    if(dsc->round_end || dsc->round_start) {
 8012424:	220c      	movs	r2, #12
 8012426:	7a63      	ldrb	r3, [r4, #9]
 8012428:	421a      	tst	r2, r3
 801242a:	d125      	bne.n	8012478 <lv_draw_sw_line+0x108>
            cir_area.y2 = point2->y + r - r_corr ;
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 801242c:	4643      	mov	r3, r8
 801242e:	464a      	mov	r2, r9
 8012430:	609a      	str	r2, [r3, #8]
}
 8012432:	b013      	add	sp, #76	; 0x4c
 8012434:	bcf0      	pop	{r4, r5, r6, r7}
 8012436:	46bb      	mov	fp, r7
 8012438:	46b2      	mov	sl, r6
 801243a:	46a9      	mov	r9, r5
 801243c:	46a0      	mov	r8, r4
 801243e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 8012440:	4663      	mov	r3, ip
 8012442:	e7d0      	b.n	80123e6 <lv_draw_sw_line+0x76>
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 8012444:	464a      	mov	r2, r9
 8012446:	4663      	mov	r3, ip
 8012448:	1a9b      	subs	r3, r3, r2
 801244a:	466a      	mov	r2, sp
 801244c:	8053      	strh	r3, [r2, #2]
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 801244e:	1c03      	adds	r3, r0, #0
 8012450:	4560      	cmp	r0, ip
 8012452:	dac8      	bge.n	80123e6 <lv_draw_sw_line+0x76>
 8012454:	e7f4      	b.n	8012440 <lv_draw_sw_line+0xd0>
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 8012456:	466a      	mov	r2, sp
 8012458:	1c3b      	adds	r3, r7, #0
 801245a:	444b      	add	r3, r9
 801245c:	8093      	strh	r3, [r2, #4]
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 801245e:	1c03      	adds	r3, r0, #0
 8012460:	4560      	cmp	r0, ip
 8012462:	ddb9      	ble.n	80123d8 <lv_draw_sw_line+0x68>
 8012464:	e7ee      	b.n	8012444 <lv_draw_sw_line+0xd4>
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 8012466:	4649      	mov	r1, r9
 8012468:	1c3b      	adds	r3, r7, #0
 801246a:	1a5b      	subs	r3, r3, r1
 801246c:	4669      	mov	r1, sp
 801246e:	800b      	strh	r3, [r1, #0]
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 8012470:	1c13      	adds	r3, r2, #0
 8012472:	42ba      	cmp	r2, r7
 8012474:	daaa      	bge.n	80123cc <lv_draw_sw_line+0x5c>
 8012476:	e7ee      	b.n	8012456 <lv_draw_sw_line+0xe6>
        lv_draw_rect_dsc_init(&cir_dsc);
 8012478:	af04      	add	r7, sp, #16
 801247a:	0038      	movs	r0, r7
 801247c:	f7fd fd04 	bl	800fe88 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 8012480:	8823      	ldrh	r3, [r4, #0]
 8012482:	80bb      	strh	r3, [r7, #4]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8012484:	4b50      	ldr	r3, [pc, #320]	; (80125c8 <lv_draw_sw_line+0x258>)
 8012486:	803b      	strh	r3, [r7, #0]
        cir_dsc.bg_opa = dsc->opa;
 8012488:	7a23      	ldrb	r3, [r4, #8]
 801248a:	70fb      	strb	r3, [r7, #3]
        int32_t r = (dsc->width >> 1);
 801248c:	2202      	movs	r2, #2
 801248e:	5ea3      	ldrsh	r3, [r4, r2]
 8012490:	105a      	asrs	r2, r3, #1
 8012492:	4692      	mov	sl, r2
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 8012494:	2201      	movs	r2, #1
 8012496:	439a      	bics	r2, r3
        if(dsc->round_start) {
 8012498:	7a63      	ldrb	r3, [r4, #9]
 801249a:	4693      	mov	fp, r2
 801249c:	075a      	lsls	r2, r3, #29
 801249e:	d47c      	bmi.n	801259a <lv_draw_sw_line+0x22a>
        if(dsc->round_end) {
 80124a0:	071b      	lsls	r3, r3, #28
 80124a2:	d5c3      	bpl.n	801242c <lv_draw_sw_line+0xbc>
            cir_area.x1 = point2->x - r;
 80124a4:	4653      	mov	r3, sl
 80124a6:	8831      	ldrh	r1, [r6, #0]
 80124a8:	b29b      	uxth	r3, r3
 80124aa:	aa02      	add	r2, sp, #8
 80124ac:	1ac8      	subs	r0, r1, r3
 80124ae:	8010      	strh	r0, [r2, #0]
            cir_area.y1 = point2->y - r;
 80124b0:	8870      	ldrh	r0, [r6, #2]
            cir_area.x2 = point2->x + r - r_corr;
 80124b2:	18c9      	adds	r1, r1, r3
            cir_area.y1 = point2->y - r;
 80124b4:	1ac4      	subs	r4, r0, r3
 80124b6:	8054      	strh	r4, [r2, #2]
            cir_area.x2 = point2->x + r - r_corr;
 80124b8:	465c      	mov	r4, fp
            cir_area.y2 = point2->y + r - r_corr ;
 80124ba:	181b      	adds	r3, r3, r0
            cir_area.x2 = point2->x + r - r_corr;
 80124bc:	1b09      	subs	r1, r1, r4
            cir_area.y2 = point2->y + r - r_corr ;
 80124be:	1b1b      	subs	r3, r3, r4
            cir_area.x2 = point2->x + r - r_corr;
 80124c0:	8091      	strh	r1, [r2, #4]
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 80124c2:	4640      	mov	r0, r8
 80124c4:	0039      	movs	r1, r7
            cir_area.y2 = point2->y + r - r_corr ;
 80124c6:	80d3      	strh	r3, [r2, #6]
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 80124c8:	f7fd fd04 	bl	800fed4 <lv_draw_rect>
 80124cc:	e7ae      	b.n	801242c <lv_draw_sw_line+0xbc>
    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 80124ce:	2100      	movs	r1, #0
 80124d0:	5e6a      	ldrsh	r2, [r5, r1]
 80124d2:	2000      	movs	r0, #0
 80124d4:	5e31      	ldrsh	r1, [r6, r0]
    int32_t w = dsc->width - 1;
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 80124d6:	4694      	mov	ip, r2
 80124d8:	468a      	mov	sl, r1
    int32_t w = dsc->width - 1;
 80124da:	2102      	movs	r1, #2
 80124dc:	5e60      	ldrsh	r0, [r4, r1]
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 80124de:	af02      	add	r7, sp, #8
    int32_t w = dsc->width - 1;
 80124e0:	3801      	subs	r0, #1
    int32_t w_half0 = w >> 1;
 80124e2:	1041      	asrs	r1, r0, #1
 80124e4:	468b      	mov	fp, r1
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 80124e6:	4552      	cmp	r2, sl
 80124e8:	dc55      	bgt.n	8012596 <lv_draw_sw_line+0x226>
 80124ea:	4661      	mov	r1, ip
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 80124ec:	4694      	mov	ip, r2
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 80124ee:	8039      	strh	r1, [r7, #0]
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 80124f0:	4552      	cmp	r2, sl
 80124f2:	db4e      	blt.n	8012592 <lv_draw_sw_line+0x222>
 80124f4:	4662      	mov	r2, ip
 80124f6:	3a01      	subs	r2, #1
 80124f8:	80ba      	strh	r2, [r7, #4]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 80124fa:	2201      	movs	r2, #1
 80124fc:	4002      	ands	r2, r0
    blend_area.y1 = point1->y - w_half1;
 80124fe:	b29b      	uxth	r3, r3
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8012500:	445a      	add	r2, fp
    blend_area.y1 = point1->y - w_half1;
 8012502:	1a9a      	subs	r2, r3, r2
    blend_area.y2 = point1->y + w_half0;
 8012504:	445b      	add	r3, fp
    blend_area.y1 = point1->y - w_half1;
 8012506:	807a      	strh	r2, [r7, #2]
    blend_area.y2 = point1->y + w_half0;
 8012508:	80fb      	strh	r3, [r7, #6]
    blend_area.x2 = point1->x + w_half0;
    blend_area.y1 = LV_MIN(point1->y, point2->y);
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 801250a:	466a      	mov	r2, sp
 801250c:	0039      	movs	r1, r7
 801250e:	0038      	movs	r0, r7
 8012510:	f001 fea6 	bl	8014260 <_lv_area_intersect>
    if(!is_common) return;
 8012514:	2800      	cmp	r0, #0
 8012516:	d100      	bne.n	801251a <lv_draw_sw_line+0x1aa>
 8012518:	e784      	b.n	8012424 <lv_draw_sw_line+0xb4>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 801251a:	2206      	movs	r2, #6
 801251c:	5ea3      	ldrsh	r3, [r4, r2]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d026      	beq.n	8012570 <lv_draw_sw_line+0x200>
 8012522:	2204      	movs	r2, #4
 8012524:	5ea3      	ldrsh	r3, [r4, r2]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d022      	beq.n	8012570 <lv_draw_sw_line+0x200>
    bool simple_mode = true;
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
    else if(dashed) simple_mode = false;

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801252a:	211c      	movs	r1, #28
 801252c:	a804      	add	r0, sp, #16
 801252e:	f003 f829 	bl	8015584 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
    blend_dsc.color = dsc->color;
    blend_dsc.opa = dsc->opa;

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 8012532:	e777      	b.n	8012424 <lv_draw_sw_line+0xb4>
    int32_t w = dsc->width - 1;
 8012534:	2702      	movs	r7, #2
 8012536:	5fe0      	ldrsh	r0, [r4, r7]
    blend_area.x1 = point1->x - w_half1;
 8012538:	b292      	uxth	r2, r2
    int32_t w = dsc->width - 1;
 801253a:	3801      	subs	r0, #1
 801253c:	4682      	mov	sl, r0
    int32_t w_half0 = w >> 1;
 801253e:	1040      	asrs	r0, r0, #1
 8012540:	4684      	mov	ip, r0
    blend_area.x1 = point1->x - w_half1;
 8012542:	4693      	mov	fp, r2
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8012544:	2001      	movs	r0, #1
 8012546:	4652      	mov	r2, sl
 8012548:	4010      	ands	r0, r2
    blend_area.x1 = point1->x - w_half1;
 801254a:	465a      	mov	r2, fp
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 801254c:	4460      	add	r0, ip
    blend_area.x1 = point1->x - w_half1;
 801254e:	af02      	add	r7, sp, #8
 8012550:	1a10      	subs	r0, r2, r0
    blend_area.x2 = point1->x + w_half0;
 8012552:	4462      	add	r2, ip
 8012554:	80ba      	strh	r2, [r7, #4]
    blend_area.x1 = point1->x - w_half1;
 8012556:	8038      	strh	r0, [r7, #0]
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 8012558:	1c1a      	adds	r2, r3, #0
 801255a:	428b      	cmp	r3, r1
 801255c:	dd00      	ble.n	8012560 <lv_draw_sw_line+0x1f0>
 801255e:	1c0a      	adds	r2, r1, #0
 8012560:	807a      	strh	r2, [r7, #2]
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 8012562:	1c1a      	adds	r2, r3, #0
 8012564:	428b      	cmp	r3, r1
 8012566:	da00      	bge.n	801256a <lv_draw_sw_line+0x1fa>
 8012568:	1c0a      	adds	r2, r1, #0
 801256a:	3a01      	subs	r2, #1
 801256c:	80fa      	strh	r2, [r7, #6]
 801256e:	e7cc      	b.n	801250a <lv_draw_sw_line+0x19a>
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8012570:	a804      	add	r0, sp, #16
 8012572:	211c      	movs	r1, #28
 8012574:	f003 f806 	bl	8015584 <lv_memset_00>
    blend_dsc.color = dsc->color;
 8012578:	466a      	mov	r2, sp
    blend_dsc.opa = dsc->opa;
 801257a:	2128      	movs	r1, #40	; 0x28
    blend_dsc.color = dsc->color;
 801257c:	8823      	ldrh	r3, [r4, #0]
    blend_dsc.blend_area = &blend_area;
 801257e:	9704      	str	r7, [sp, #16]
    blend_dsc.color = dsc->color;
 8012580:	8313      	strh	r3, [r2, #24]
    blend_dsc.opa = dsc->opa;
 8012582:	7a23      	ldrb	r3, [r4, #8]
 8012584:	1852      	adds	r2, r2, r1
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8012586:	4640      	mov	r0, r8
    blend_dsc.opa = dsc->opa;
 8012588:	7013      	strb	r3, [r2, #0]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801258a:	a904      	add	r1, sp, #16
 801258c:	f7fe f9fc 	bl	8010988 <lv_draw_sw_blend>
 8012590:	e748      	b.n	8012424 <lv_draw_sw_line+0xb4>
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 8012592:	46d4      	mov	ip, sl
 8012594:	e7ae      	b.n	80124f4 <lv_draw_sw_line+0x184>
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 8012596:	46d4      	mov	ip, sl
 8012598:	e7a7      	b.n	80124ea <lv_draw_sw_line+0x17a>
            cir_area.x1 = point1->x - r;
 801259a:	4653      	mov	r3, sl
 801259c:	8829      	ldrh	r1, [r5, #0]
 801259e:	b29b      	uxth	r3, r3
 80125a0:	aa02      	add	r2, sp, #8
 80125a2:	1ac8      	subs	r0, r1, r3
 80125a4:	8010      	strh	r0, [r2, #0]
            cir_area.y1 = point1->y - r;
 80125a6:	8868      	ldrh	r0, [r5, #2]
            cir_area.x2 = point1->x + r - r_corr;
 80125a8:	18c9      	adds	r1, r1, r3
            cir_area.y1 = point1->y - r;
 80125aa:	1ac5      	subs	r5, r0, r3
 80125ac:	8055      	strh	r5, [r2, #2]
            cir_area.x2 = point1->x + r - r_corr;
 80125ae:	465d      	mov	r5, fp
            cir_area.y2 = point1->y + r - r_corr ;
 80125b0:	181b      	adds	r3, r3, r0
 80125b2:	1b5b      	subs	r3, r3, r5
            cir_area.x2 = point1->x + r - r_corr;
 80125b4:	1b49      	subs	r1, r1, r5
 80125b6:	8091      	strh	r1, [r2, #4]
            cir_area.y2 = point1->y + r - r_corr ;
 80125b8:	80d3      	strh	r3, [r2, #6]
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 80125ba:	0039      	movs	r1, r7
 80125bc:	4640      	mov	r0, r8
 80125be:	f7fd fc89 	bl	800fed4 <lv_draw_rect>
        if(dsc->round_end) {
 80125c2:	7a63      	ldrb	r3, [r4, #9]
 80125c4:	e76c      	b.n	80124a0 <lv_draw_sw_line+0x130>
 80125c6:	46c0      	nop			; (mov r8, r8)
 80125c8:	00007fff 	.word	0x00007fff

080125cc <lv_draw_sw_polygon>:
    LV_UNUSED(point_cnt);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(draw_dsc);
    LV_LOG_WARN("Can't draw polygon with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 80125cc:	4770      	bx	lr
 80125ce:	46c0      	nop			; (mov r8, r8)

080125d0 <draw_border_simple>:

#endif /*LV_DRAW_COMPLEX*/
}
static void draw_border_simple(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                               lv_color_t color, lv_opa_t opa)
{
 80125d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125d2:	46de      	mov	lr, fp
 80125d4:	4657      	mov	r7, sl
 80125d6:	464e      	mov	r6, r9
 80125d8:	4645      	mov	r5, r8
 80125da:	4698      	mov	r8, r3
 80125dc:	b5e0      	push	{r5, r6, r7, lr}
 80125de:	b08f      	sub	sp, #60	; 0x3c
 80125e0:	ab18      	add	r3, sp, #96	; 0x60
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	000d      	movs	r5, r1
 80125e6:	0007      	movs	r7, r0
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 80125e8:	211c      	movs	r1, #28
 80125ea:	a807      	add	r0, sp, #28
{
 80125ec:	0016      	movs	r6, r2
 80125ee:	4699      	mov	r9, r3
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 80125f0:	f002 ffc8 	bl	8015584 <lv_memset_00>
    blend_dsc.blend_area = &a;
    blend_dsc.color = color;
 80125f4:	4642      	mov	r2, r8
 80125f6:	ab04      	add	r3, sp, #16
 80125f8:	829a      	strh	r2, [r3, #20]
    blend_dsc.opa = opa;
 80125fa:	2224      	movs	r2, #36	; 0x24
 80125fc:	189b      	adds	r3, r3, r2
 80125fe:	464a      	mov	r2, r9
 8012600:	701a      	strb	r2, [r3, #0]

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 8012602:	2202      	movs	r2, #2
 8012604:	5eab      	ldrsh	r3, [r5, r2]
    blend_dsc.blend_area = &a;
 8012606:	ac05      	add	r4, sp, #20
    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 8012608:	469b      	mov	fp, r3
 801260a:	2202      	movs	r2, #2
 801260c:	5eb3      	ldrsh	r3, [r6, r2]
    blend_dsc.blend_area = &a;
 801260e:	9407      	str	r4, [sp, #28]
    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 8012610:	469a      	mov	sl, r3
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 8012612:	2206      	movs	r2, #6
 8012614:	5eab      	ldrsh	r3, [r5, r2]
 8012616:	4699      	mov	r9, r3
 8012618:	2206      	movs	r2, #6
 801261a:	5eb3      	ldrsh	r3, [r6, r2]
 801261c:	4698      	mov	r8, r3
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 801261e:	2200      	movs	r2, #0
 8012620:	5eab      	ldrsh	r3, [r5, r2]
 8012622:	2100      	movs	r1, #0
 8012624:	5e72      	ldrsh	r2, [r6, r1]
 8012626:	9300      	str	r3, [sp, #0]
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;


    /*Top*/
    a.x1 = outer_area->x1;
 8012628:	8023      	strh	r3, [r4, #0]
    a.x2 = outer_area->x2;
    a.y1 = outer_area->y1;
 801262a:	465b      	mov	r3, fp
 801262c:	8063      	strh	r3, [r4, #2]
    a.y2 = inner_area->y1 - 1;
 801262e:	4653      	mov	r3, sl
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 8012630:	9201      	str	r2, [sp, #4]
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 8012632:	2104      	movs	r1, #4
 8012634:	5e6a      	ldrsh	r2, [r5, r1]
 8012636:	2004      	movs	r0, #4
 8012638:	5e31      	ldrsh	r1, [r6, r0]
    a.y2 = inner_area->y1 - 1;
 801263a:	3b01      	subs	r3, #1
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 801263c:	9202      	str	r2, [sp, #8]
    a.x2 = outer_area->x2;
 801263e:	80a2      	strh	r2, [r4, #4]
    a.y2 = inner_area->y1 - 1;
 8012640:	80e3      	strh	r3, [r4, #6]
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 8012642:	464a      	mov	r2, r9
 8012644:	4643      	mov	r3, r8
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 8012646:	9103      	str	r1, [sp, #12]
    if(top_side) {
 8012648:	45d3      	cmp	fp, sl
 801264a:	dd38      	ble.n	80126be <draw_border_simple+0xee>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 801264c:	3301      	adds	r3, #1
 801264e:	8063      	strh	r3, [r4, #2]
    a.y2 = outer_area->y2;
 8012650:	80e2      	strh	r2, [r4, #6]
    if(bottom_side) {
 8012652:	45c1      	cmp	r9, r8
 8012654:	da40      	bge.n	80126d8 <draw_border_simple+0x108>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    /*Left*/
    a.x1 = outer_area->x1;
 8012656:	882b      	ldrh	r3, [r5, #0]
 8012658:	8023      	strh	r3, [r4, #0]
    a.x2 = inner_area->x1 - 1;
 801265a:	8833      	ldrh	r3, [r6, #0]
 801265c:	3b01      	subs	r3, #1
 801265e:	80a3      	strh	r3, [r4, #4]
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 8012660:	45d3      	cmp	fp, sl
 8012662:	dc1b      	bgt.n	801269c <draw_border_simple+0xcc>
 8012664:	2202      	movs	r2, #2
 8012666:	5eb3      	ldrsh	r3, [r6, r2]
 8012668:	8063      	strh	r3, [r4, #2]
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 801266a:	45c1      	cmp	r9, r8
 801266c:	db1b      	blt.n	80126a6 <draw_border_simple+0xd6>
 801266e:	2206      	movs	r2, #6
 8012670:	5eb3      	ldrsh	r3, [r6, r2]
    if(left_side) {
 8012672:	9a01      	ldr	r2, [sp, #4]
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 8012674:	80e3      	strh	r3, [r4, #6]
    if(left_side) {
 8012676:	9b00      	ldr	r3, [sp, #0]
 8012678:	4293      	cmp	r3, r2
 801267a:	dd1b      	ble.n	80126b4 <draw_border_simple+0xe4>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 801267c:	88b3      	ldrh	r3, [r6, #4]
    a.x2 = outer_area->x2;
    if(right_side) {
 801267e:	9a03      	ldr	r2, [sp, #12]
    a.x1 = inner_area->x2 + 1;
 8012680:	3301      	adds	r3, #1
 8012682:	8023      	strh	r3, [r4, #0]
    a.x2 = outer_area->x2;
 8012684:	88ab      	ldrh	r3, [r5, #4]
 8012686:	80a3      	strh	r3, [r4, #4]
    if(right_side) {
 8012688:	9b02      	ldr	r3, [sp, #8]
 801268a:	4293      	cmp	r3, r2
 801268c:	da29      	bge.n	80126e2 <draw_border_simple+0x112>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }
}
 801268e:	b00f      	add	sp, #60	; 0x3c
 8012690:	bcf0      	pop	{r4, r5, r6, r7}
 8012692:	46bb      	mov	fp, r7
 8012694:	46b2      	mov	sl, r6
 8012696:	46a9      	mov	r9, r5
 8012698:	46a0      	mov	r8, r4
 801269a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 801269c:	2202      	movs	r2, #2
 801269e:	5eab      	ldrsh	r3, [r5, r2]
 80126a0:	8063      	strh	r3, [r4, #2]
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 80126a2:	45c1      	cmp	r9, r8
 80126a4:	dae3      	bge.n	801266e <draw_border_simple+0x9e>
 80126a6:	2206      	movs	r2, #6
 80126a8:	5eab      	ldrsh	r3, [r5, r2]
    if(left_side) {
 80126aa:	9a01      	ldr	r2, [sp, #4]
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 80126ac:	80e3      	strh	r3, [r4, #6]
    if(left_side) {
 80126ae:	9b00      	ldr	r3, [sp, #0]
 80126b0:	4293      	cmp	r3, r2
 80126b2:	dce3      	bgt.n	801267c <draw_border_simple+0xac>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80126b4:	0038      	movs	r0, r7
 80126b6:	a907      	add	r1, sp, #28
 80126b8:	f7fe f966 	bl	8010988 <lv_draw_sw_blend>
 80126bc:	e7de      	b.n	801267c <draw_border_simple+0xac>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80126be:	a907      	add	r1, sp, #28
 80126c0:	0038      	movs	r0, r7
 80126c2:	f7fe f961 	bl	8010988 <lv_draw_sw_blend>
    a.y1 = inner_area->y2 + 1;
 80126c6:	2206      	movs	r2, #6
 80126c8:	5eb3      	ldrsh	r3, [r6, r2]
    a.y2 = outer_area->y2;
 80126ca:	2106      	movs	r1, #6
 80126cc:	5e6a      	ldrsh	r2, [r5, r1]
    a.y1 = inner_area->y2 + 1;
 80126ce:	3301      	adds	r3, #1
 80126d0:	8063      	strh	r3, [r4, #2]
    a.y2 = outer_area->y2;
 80126d2:	80e2      	strh	r2, [r4, #6]
    if(bottom_side) {
 80126d4:	45c1      	cmp	r9, r8
 80126d6:	dbbe      	blt.n	8012656 <draw_border_simple+0x86>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80126d8:	0038      	movs	r0, r7
 80126da:	a907      	add	r1, sp, #28
 80126dc:	f7fe f954 	bl	8010988 <lv_draw_sw_blend>
 80126e0:	e7b9      	b.n	8012656 <draw_border_simple+0x86>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80126e2:	0038      	movs	r0, r7
 80126e4:	a907      	add	r1, sp, #28
 80126e6:	f7fe f94f 	bl	8010988 <lv_draw_sw_blend>
}
 80126ea:	e7d0      	b.n	801268e <draw_border_simple+0xbe>

080126ec <lv_draw_sw_rect>:
{
 80126ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126ee:	4645      	mov	r5, r8
 80126f0:	46de      	mov	lr, fp
 80126f2:	4657      	mov	r7, sl
 80126f4:	464e      	mov	r6, r9
 80126f6:	b5e0      	push	{r5, r6, r7, lr}
 80126f8:	b097      	sub	sp, #92	; 0x5c
 80126fa:	9004      	str	r0, [sp, #16]
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 80126fc:	78cb      	ldrb	r3, [r1, #3]
{
 80126fe:	000c      	movs	r4, r1
 8012700:	0015      	movs	r5, r2
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 8012702:	2b02      	cmp	r3, #2
 8012704:	d962      	bls.n	80127cc <lv_draw_sw_rect+0xe0>
    dest->x1 = src->x1;
 8012706:	2300      	movs	r3, #0
 8012708:	5ed0      	ldrsh	r0, [r2, r3]
 801270a:	ae0a      	add	r6, sp, #40	; 0x28
 801270c:	8030      	strh	r0, [r6, #0]
    dest->y1 = src->y1;
 801270e:	2302      	movs	r3, #2
 8012710:	5ed1      	ldrsh	r1, [r2, r3]
 8012712:	8071      	strh	r1, [r6, #2]
    dest->x2 = src->x2;
 8012714:	2304      	movs	r3, #4
 8012716:	5ed2      	ldrsh	r2, [r2, r3]
 8012718:	80b2      	strh	r2, [r6, #4]
    dest->y2 = src->y2;
 801271a:	2706      	movs	r7, #6
 801271c:	5feb      	ldrsh	r3, [r5, r7]
 801271e:	80f3      	strh	r3, [r6, #6]
 8012720:	469b      	mov	fp, r3
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 8012722:	2320      	movs	r3, #32
 8012724:	5ee7      	ldrsh	r7, [r4, r3]
 8012726:	2f01      	cmp	r7, #1
 8012728:	dd26      	ble.n	8012778 <lv_draw_sw_rect+0x8c>
 801272a:	2722      	movs	r7, #34	; 0x22
 801272c:	5de7      	ldrb	r7, [r4, r7]
 801272e:	2ffc      	cmp	r7, #252	; 0xfc
 8012730:	d922      	bls.n	8012778 <lv_draw_sw_rect+0x8c>
 8012732:	2700      	movs	r7, #0
 8012734:	5fe3      	ldrsh	r3, [r4, r7]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d01e      	beq.n	8012778 <lv_draw_sw_rect+0x8c>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 801273a:	2323      	movs	r3, #35	; 0x23
 801273c:	5ce3      	ldrb	r3, [r4, r3]
 801273e:	069b      	lsls	r3, r3, #26
 8012740:	4699      	mov	r9, r3
 8012742:	0edb      	lsrs	r3, r3, #27
 8012744:	4698      	mov	r8, r3
 8012746:	464b      	mov	r3, r9
 8012748:	0f5b      	lsrs	r3, r3, #29
 801274a:	469a      	mov	sl, r3
 801274c:	2301      	movs	r3, #1
 801274e:	469c      	mov	ip, r3
 8012750:	4653      	mov	r3, sl
 8012752:	4667      	mov	r7, ip
 8012754:	403b      	ands	r3, r7
 8012756:	469a      	mov	sl, r3
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 8012758:	464b      	mov	r3, r9
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 801275a:	4450      	add	r0, sl
 801275c:	8030      	strh	r0, [r6, #0]
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 801275e:	0f18      	lsrs	r0, r3, #28
 8012760:	4038      	ands	r0, r7
 8012762:	1809      	adds	r1, r1, r0
 8012764:	8071      	strh	r1, [r6, #2]
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 8012766:	0f99      	lsrs	r1, r3, #30
 8012768:	4039      	ands	r1, r7
 801276a:	1a52      	subs	r2, r2, r1
 801276c:	80b2      	strh	r2, [r6, #4]
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 801276e:	4642      	mov	r2, r8
 8012770:	465b      	mov	r3, fp
 8012772:	403a      	ands	r2, r7
 8012774:	1a9b      	subs	r3, r3, r2
 8012776:	80f3      	strh	r3, [r6, #6]
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 8012778:	9b04      	ldr	r3, [sp, #16]
 801277a:	0031      	movs	r1, r6
 801277c:	689a      	ldr	r2, [r3, #8]
 801277e:	a80c      	add	r0, sp, #48	; 0x30
 8012780:	f001 fd6e 	bl	8014260 <_lv_area_intersect>
 8012784:	2800      	cmp	r0, #0
 8012786:	d021      	beq.n	80127cc <lv_draw_sw_rect+0xe0>
    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 8012788:	7be3      	ldrb	r3, [r4, #15]
 801278a:	075b      	lsls	r3, r3, #29
 801278c:	0f5a      	lsrs	r2, r3, #29
 801278e:	4692      	mov	sl, r2
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 8012790:	2b00      	cmp	r3, #0
 8012792:	d000      	beq.n	8012796 <lv_draw_sw_rect+0xaa>
 8012794:	e0dd      	b.n	8012952 <lv_draw_sw_rect+0x266>
 8012796:	88a3      	ldrh	r3, [r4, #4]
 8012798:	4699      	mov	r9, r3
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 801279a:	8963      	ldrh	r3, [r4, #10]
 801279c:	454b      	cmp	r3, r9
 801279e:	d100      	bne.n	80127a2 <lv_draw_sw_rect+0xb6>
 80127a0:	e0dd      	b.n	801295e <lv_draw_sw_rect+0x272>
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 80127a2:	ab0e      	add	r3, sp, #56	; 0x38
 80127a4:	4698      	mov	r8, r3
 80127a6:	221c      	movs	r2, #28
 80127a8:	0018      	movs	r0, r3
 80127aa:	2100      	movs	r1, #0
 80127ac:	f008 feb4 	bl	801b518 <memset>
    blend_dsc.blend_mode = dsc->blend_mode;
 80127b0:	4642      	mov	r2, r8
 80127b2:	78a3      	ldrb	r3, [r4, #2]
 80127b4:	7653      	strb	r3, [r2, #25]
    blend_dsc.color = bg_color;
 80127b6:	4643      	mov	r3, r8
 80127b8:	464a      	mov	r2, r9
 80127ba:	811a      	strh	r2, [r3, #8]
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 80127bc:	2200      	movs	r2, #0
 80127be:	5ea3      	ldrsh	r3, [r4, r2]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d103      	bne.n	80127cc <lv_draw_sw_rect+0xe0>
 80127c4:	4653      	mov	r3, sl
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d100      	bne.n	80127cc <lv_draw_sw_rect+0xe0>
 80127ca:	e0da      	b.n	8012982 <lv_draw_sw_rect+0x296>
    if(dsc->bg_img_src == NULL) return;
 80127cc:	6923      	ldr	r3, [r4, #16]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d003      	beq.n	80127da <lv_draw_sw_rect+0xee>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 80127d2:	7ea3      	ldrb	r3, [r4, #26]
 80127d4:	2b02      	cmp	r3, #2
 80127d6:	d900      	bls.n	80127da <lv_draw_sw_rect+0xee>
 80127d8:	e06d      	b.n	80128b6 <lv_draw_sw_rect+0x1ca>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 80127da:	2322      	movs	r3, #34	; 0x22
 80127dc:	5ce1      	ldrb	r1, [r4, r3]
 80127de:	2902      	cmp	r1, #2
 80127e0:	d957      	bls.n	8012892 <lv_draw_sw_rect+0x1a6>
    if(dsc->border_width == 0) return;
 80127e2:	2320      	movs	r3, #32
 80127e4:	5ee2      	ldrsh	r2, [r4, r3]
 80127e6:	2a00      	cmp	r2, #0
 80127e8:	d053      	beq.n	8012892 <lv_draw_sw_rect+0x1a6>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 80127ea:	2323      	movs	r3, #35	; 0x23
 80127ec:	203e      	movs	r0, #62	; 0x3e
 80127ee:	5ce3      	ldrb	r3, [r4, r3]
 80127f0:	4218      	tst	r0, r3
 80127f2:	d04e      	beq.n	8012892 <lv_draw_sw_rect+0x1a6>
    if(dsc->border_post) return;
 80127f4:	07db      	lsls	r3, r3, #31
 80127f6:	d44c      	bmi.n	8012892 <lv_draw_sw_rect+0x1a6>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80127f8:	88ab      	ldrh	r3, [r5, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80127fa:	886e      	ldrh	r6, [r5, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80127fc:	469c      	mov	ip, r3
 80127fe:	882b      	ldrh	r3, [r5, #0]
 8012800:	4699      	mov	r9, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012802:	88eb      	ldrh	r3, [r5, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012804:	464f      	mov	r7, r9
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012806:	469b      	mov	fp, r3
    int32_t rout = dsc->radius;
 8012808:	2300      	movs	r3, #0
 801280a:	5ee0      	ldrsh	r0, [r4, r3]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801280c:	4663      	mov	r3, ip
 801280e:	3301      	adds	r3, #1
 8012810:	1bdb      	subs	r3, r3, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012812:	2701      	movs	r7, #1
 8012814:	445f      	add	r7, fp
 8012816:	1bbf      	subs	r7, r7, r6
    int32_t coords_h = lv_area_get_height(coords);
 8012818:	b23f      	sxth	r7, r7
    int32_t short_side = LV_MIN(coords_w, coords_h);
 801281a:	b21b      	sxth	r3, r3
 801281c:	42bb      	cmp	r3, r7
 801281e:	dd00      	ble.n	8012822 <lv_draw_sw_rect+0x136>
 8012820:	003b      	movs	r3, r7
    if(rout > short_side >> 1) rout = short_side >> 1;
 8012822:	105b      	asrs	r3, r3, #1
 8012824:	4283      	cmp	r3, r0
 8012826:	dd00      	ble.n	801282a <lv_draw_sw_rect+0x13e>
 8012828:	0003      	movs	r3, r0
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 801282a:	2023      	movs	r0, #35	; 0x23
 801282c:	5c20      	ldrb	r0, [r4, r0]
 801282e:	0680      	lsls	r0, r0, #26
 8012830:	0ec7      	lsrs	r7, r0, #27
 8012832:	46ba      	mov	sl, r7
 8012834:	0080      	lsls	r0, r0, #2
 8012836:	d400      	bmi.n	801283a <lv_draw_sw_rect+0x14e>
 8012838:	e0ac      	b.n	8012994 <lv_draw_sw_rect+0x2a8>
 801283a:	b292      	uxth	r2, r2
 801283c:	0010      	movs	r0, r2
 801283e:	af0e      	add	r7, sp, #56	; 0x38
 8012840:	444a      	add	r2, r9
 8012842:	803a      	strh	r2, [r7, #0]
 8012844:	46b8      	mov	r8, r7
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 8012846:	4657      	mov	r7, sl
 8012848:	0002      	movs	r2, r0
 801284a:	073f      	lsls	r7, r7, #28
 801284c:	d402      	bmi.n	8012854 <lv_draw_sw_rect+0x168>
 801284e:	18c2      	adds	r2, r0, r3
 8012850:	4252      	negs	r2, r2
 8012852:	b292      	uxth	r2, r2
 8012854:	4667      	mov	r7, ip
 8012856:	1aba      	subs	r2, r7, r2
 8012858:	4647      	mov	r7, r8
 801285a:	80ba      	strh	r2, [r7, #4]
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 801285c:	4657      	mov	r7, sl
 801285e:	0002      	movs	r2, r0
 8012860:	07bf      	lsls	r7, r7, #30
 8012862:	d402      	bmi.n	801286a <lv_draw_sw_rect+0x17e>
 8012864:	18c2      	adds	r2, r0, r3
 8012866:	4252      	negs	r2, r2
 8012868:	b292      	uxth	r2, r2
 801286a:	18b6      	adds	r6, r6, r2
 801286c:	4642      	mov	r2, r8
 801286e:	8056      	strh	r6, [r2, #2]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 8012870:	4652      	mov	r2, sl
 8012872:	07d2      	lsls	r2, r2, #31
 8012874:	d402      	bmi.n	801287c <lv_draw_sw_rect+0x190>
 8012876:	18c3      	adds	r3, r0, r3
 8012878:	425a      	negs	r2, r3
 801287a:	b290      	uxth	r0, r2
 801287c:	465b      	mov	r3, fp
 801287e:	1a18      	subs	r0, r3, r0
 8012880:	4643      	mov	r3, r8
 8012882:	80d8      	strh	r0, [r3, #6]
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 8012884:	8be3      	ldrh	r3, [r4, #30]
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
 8012886:	4642      	mov	r2, r8
 8012888:	9100      	str	r1, [sp, #0]
 801288a:	9804      	ldr	r0, [sp, #16]
 801288c:	0029      	movs	r1, r5
 801288e:	f7ff fe9f 	bl	80125d0 <draw_border_simple>
    draw_outline(draw_ctx, dsc, coords);
 8012892:	2326      	movs	r3, #38	; 0x26
 8012894:	5ee0      	ldrsh	r0, [r4, r3]
 8012896:	2328      	movs	r3, #40	; 0x28
 8012898:	5ee2      	ldrsh	r2, [r4, r3]
 801289a:	232a      	movs	r3, #42	; 0x2a
 801289c:	5ce6      	ldrb	r6, [r4, r3]
 801289e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 80128a0:	2e02      	cmp	r6, #2
 80128a2:	d901      	bls.n	80128a8 <lv_draw_sw_rect+0x1bc>
    if(dsc->outline_width == 0) return;
 80128a4:	2800      	cmp	r0, #0
 80128a6:	d123      	bne.n	80128f0 <lv_draw_sw_rect+0x204>
}
 80128a8:	b017      	add	sp, #92	; 0x5c
 80128aa:	bcf0      	pop	{r4, r5, r6, r7}
 80128ac:	46bb      	mov	fp, r7
 80128ae:	46b2      	mov	sl, r6
 80128b0:	46a9      	mov	r9, r5
 80128b2:	46a0      	mov	r8, r4
 80128b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 80128b6:	9e04      	ldr	r6, [sp, #16]
 80128b8:	0029      	movs	r1, r5
 80128ba:	68b2      	ldr	r2, [r6, #8]
 80128bc:	a80a      	add	r0, sp, #40	; 0x28
 80128be:	f001 fccf 	bl	8014260 <_lv_area_intersect>
 80128c2:	2800      	cmp	r0, #0
 80128c4:	d100      	bne.n	80128c8 <lv_draw_sw_rect+0x1dc>
 80128c6:	e788      	b.n	80127da <lv_draw_sw_rect+0xee>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80128c8:	68b3      	ldr	r3, [r6, #8]
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 80128ca:	6920      	ldr	r0, [r4, #16]
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80128cc:	4699      	mov	r9, r3
    draw_ctx->clip_area = &clip_area;
 80128ce:	ab0a      	add	r3, sp, #40	; 0x28
 80128d0:	60b3      	str	r3, [r6, #8]
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 80128d2:	f7fc fea1 	bl	800f618 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 80128d6:	2802      	cmp	r0, #2
 80128d8:	d061      	beq.n	801299e <lv_draw_sw_rect+0x2b2>
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 80128da:	6920      	ldr	r0, [r4, #16]
 80128dc:	a909      	add	r1, sp, #36	; 0x24
 80128de:	f7fd ff01 	bl	80106e4 <lv_img_decoder_get_info>
        if(res == LV_RES_OK) {
 80128e2:	2801      	cmp	r0, #1
 80128e4:	d100      	bne.n	80128e8 <lv_draw_sw_rect+0x1fc>
 80128e6:	e0a6      	b.n	8012a36 <lv_draw_sw_rect+0x34a>
    draw_ctx->clip_area = clip_area_ori;
 80128e8:	464b      	mov	r3, r9
 80128ea:	9a04      	ldr	r2, [sp, #16]
 80128ec:	6093      	str	r3, [r2, #8]
 80128ee:	e774      	b.n	80127da <lv_draw_sw_rect+0xee>
    dest->y1 = src->y1;
 80128f0:	2402      	movs	r4, #2
 80128f2:	5f29      	ldrsh	r1, [r5, r4]
    lv_coord_t pad = dsc->outline_pad - 1;
 80128f4:	3a01      	subs	r2, #1
 80128f6:	4688      	mov	r8, r1
    dest->x2 = src->x2;
 80128f8:	2404      	movs	r4, #4
 80128fa:	5f29      	ldrsh	r1, [r5, r4]
    area_outer.x1 -= dsc->outline_width;
 80128fc:	b280      	uxth	r0, r0
 80128fe:	4689      	mov	r9, r1
    dest->y2 = src->y2;
 8012900:	2106      	movs	r1, #6
 8012902:	5e6c      	ldrsh	r4, [r5, r1]
    lv_coord_t pad = dsc->outline_pad - 1;
 8012904:	b291      	uxth	r1, r2
    area_inner.x1 -= pad;
 8012906:	882a      	ldrh	r2, [r5, #0]
    area_inner.y2 += pad;
 8012908:	190c      	adds	r4, r1, r4
    area_inner.x1 -= pad;
 801290a:	1a52      	subs	r2, r2, r1
 801290c:	b292      	uxth	r2, r2
 801290e:	4694      	mov	ip, r2
 8012910:	4665      	mov	r5, ip
 8012912:	aa0c      	add	r2, sp, #48	; 0x30
 8012914:	8015      	strh	r5, [r2, #0]
    area_inner.y1 -= pad;
 8012916:	4645      	mov	r5, r8
 8012918:	1a6d      	subs	r5, r5, r1
 801291a:	b2ad      	uxth	r5, r5
 801291c:	46a8      	mov	r8, r5
 801291e:	8055      	strh	r5, [r2, #2]
    area_inner.x2 += pad;
 8012920:	464d      	mov	r5, r9
 8012922:	194d      	adds	r5, r1, r5
 8012924:	b2ad      	uxth	r5, r5
    area_outer.x1 -= dsc->outline_width;
 8012926:	4661      	mov	r1, ip
    area_inner.x2 += pad;
 8012928:	46a9      	mov	r9, r5
 801292a:	8095      	strh	r5, [r2, #4]
    area_outer.x1 -= dsc->outline_width;
 801292c:	1a09      	subs	r1, r1, r0
 801292e:	ad0e      	add	r5, sp, #56	; 0x38
 8012930:	8029      	strh	r1, [r5, #0]
    area_outer.x2 += dsc->outline_width;
 8012932:	4649      	mov	r1, r9
 8012934:	1809      	adds	r1, r1, r0
 8012936:	80a9      	strh	r1, [r5, #4]
    area_outer.y1 -= dsc->outline_width;
 8012938:	4641      	mov	r1, r8
    area_inner.y2 += pad;
 801293a:	b2a4      	uxth	r4, r4
    area_outer.y1 -= dsc->outline_width;
 801293c:	1a09      	subs	r1, r1, r0
    area_outer.y2 += dsc->outline_width;
 801293e:	1820      	adds	r0, r4, r0
    area_outer.y1 -= dsc->outline_width;
 8012940:	8069      	strh	r1, [r5, #2]
    area_outer.y2 += dsc->outline_width;
 8012942:	80e8      	strh	r0, [r5, #6]
    area_inner.y2 += pad;
 8012944:	80d4      	strh	r4, [r2, #6]
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
 8012946:	0029      	movs	r1, r5
 8012948:	9804      	ldr	r0, [sp, #16]
 801294a:	9600      	str	r6, [sp, #0]
 801294c:	f7ff fe40 	bl	80125d0 <draw_border_simple>
        return;
 8012950:	e7aa      	b.n	80128a8 <lv_draw_sw_rect+0x1bc>
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 8012952:	88e3      	ldrh	r3, [r4, #6]
 8012954:	4699      	mov	r9, r3
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 8012956:	8963      	ldrh	r3, [r4, #10]
 8012958:	454b      	cmp	r3, r9
 801295a:	d000      	beq.n	801295e <lv_draw_sw_rect+0x272>
 801295c:	e721      	b.n	80127a2 <lv_draw_sw_rect+0xb6>
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 801295e:	ab0e      	add	r3, sp, #56	; 0x38
 8012960:	4698      	mov	r8, r3
 8012962:	221c      	movs	r2, #28
 8012964:	0018      	movs	r0, r3
 8012966:	2100      	movs	r1, #0
 8012968:	f008 fdd6 	bl	801b518 <memset>
    blend_dsc.blend_mode = dsc->blend_mode;
 801296c:	4642      	mov	r2, r8
 801296e:	78a3      	ldrb	r3, [r4, #2]
 8012970:	7653      	strb	r3, [r2, #25]
    blend_dsc.color = bg_color;
 8012972:	4643      	mov	r3, r8
 8012974:	464a      	mov	r2, r9
 8012976:	811a      	strh	r2, [r3, #8]
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 8012978:	2200      	movs	r2, #0
 801297a:	5ea3      	ldrsh	r3, [r4, r2]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d000      	beq.n	8012982 <lv_draw_sw_rect+0x296>
 8012980:	e724      	b.n	80127cc <lv_draw_sw_rect+0xe0>
        blend_dsc.opa = dsc->bg_opa;
 8012982:	4642      	mov	r2, r8
        blend_dsc.blend_area = &bg_coords;
 8012984:	960e      	str	r6, [sp, #56]	; 0x38
        blend_dsc.opa = dsc->bg_opa;
 8012986:	78e3      	ldrb	r3, [r4, #3]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8012988:	4641      	mov	r1, r8
 801298a:	9804      	ldr	r0, [sp, #16]
        blend_dsc.opa = dsc->bg_opa;
 801298c:	7613      	strb	r3, [r2, #24]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801298e:	f7fd fffb 	bl	8010988 <lv_draw_sw_blend>
        return;
 8012992:	e71b      	b.n	80127cc <lv_draw_sw_rect+0xe0>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 8012994:	b290      	uxth	r0, r2
 8012996:	18c2      	adds	r2, r0, r3
 8012998:	4252      	negs	r2, r2
 801299a:	b292      	uxth	r2, r2
 801299c:	e74f      	b.n	801283e <lv_draw_sw_rect+0x152>
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801299e:	2300      	movs	r3, #0
 80129a0:	4698      	mov	r8, r3
 80129a2:	9302      	str	r3, [sp, #8]
 80129a4:	4b7f      	ldr	r3, [pc, #508]	; (8012ba4 <lv_draw_sw_rect+0x4b8>)
 80129a6:	a809      	add	r0, sp, #36	; 0x24
 80129a8:	9301      	str	r3, [sp, #4]
 80129aa:	4643      	mov	r3, r8
 80129ac:	9300      	str	r3, [sp, #0]
 80129ae:	6962      	ldr	r2, [r4, #20]
 80129b0:	6921      	ldr	r1, [r4, #16]
 80129b2:	f004 f867 	bl	8016a84 <lv_txt_get_size>
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 80129b6:	aa04      	add	r2, sp, #16
 80129b8:	2014      	movs	r0, #20
 80129ba:	5e10      	ldrsh	r0, [r2, r0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80129bc:	88aa      	ldrh	r2, [r5, #4]
 80129be:	882b      	ldrh	r3, [r5, #0]
 80129c0:	3201      	adds	r2, #1
 80129c2:	1ad2      	subs	r2, r2, r3
 80129c4:	b211      	sxth	r1, r2
 80129c6:	0fca      	lsrs	r2, r1, #31
 80129c8:	1852      	adds	r2, r2, r1
 80129ca:	0fc1      	lsrs	r1, r0, #31
 80129cc:	1809      	adds	r1, r1, r0
 80129ce:	1049      	asrs	r1, r1, #1
 80129d0:	1052      	asrs	r2, r2, #1
 80129d2:	1a5b      	subs	r3, r3, r1
 80129d4:	18d3      	adds	r3, r2, r3
 80129d6:	ae0c      	add	r6, sp, #48	; 0x30
 80129d8:	b29b      	uxth	r3, r3
        a.x2 = a.x1 + size.x - 1;
 80129da:	3801      	subs	r0, #1
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 80129dc:	8033      	strh	r3, [r6, #0]
        a.x2 = a.x1 + size.x - 1;
 80129de:	181b      	adds	r3, r3, r0
 80129e0:	80b3      	strh	r3, [r6, #4]
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 80129e2:	aa04      	add	r2, sp, #16
 80129e4:	2016      	movs	r0, #22
 80129e6:	5e10      	ldrsh	r0, [r2, r0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80129e8:	88ea      	ldrh	r2, [r5, #6]
 80129ea:	886b      	ldrh	r3, [r5, #2]
 80129ec:	3201      	adds	r2, #1
 80129ee:	1ad2      	subs	r2, r2, r3
 80129f0:	b211      	sxth	r1, r2
 80129f2:	0fca      	lsrs	r2, r1, #31
 80129f4:	1852      	adds	r2, r2, r1
 80129f6:	0fc1      	lsrs	r1, r0, #31
 80129f8:	1809      	adds	r1, r1, r0
 80129fa:	1049      	asrs	r1, r1, #1
 80129fc:	1052      	asrs	r2, r2, #1
 80129fe:	1a5b      	subs	r3, r3, r1
 8012a00:	18d3      	adds	r3, r2, r3
 8012a02:	b29b      	uxth	r3, r3
        a.y2 = a.y1 + size.y - 1;
 8012a04:	3801      	subs	r0, #1
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 8012a06:	8073      	strh	r3, [r6, #2]
        a.y2 = a.y1 + size.y - 1;
 8012a08:	181b      	adds	r3, r3, r0
 8012a0a:	80f3      	strh	r3, [r6, #6]
        lv_draw_label_dsc_init(&label_draw_dsc);
 8012a0c:	a80e      	add	r0, sp, #56	; 0x38
 8012a0e:	f7fc fe11 	bl	800f634 <lv_draw_label_dsc_init>
        label_draw_dsc.opa = dsc->bg_img_opa;
 8012a12:	2142      	movs	r1, #66	; 0x42
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 8012a14:	6963      	ldr	r3, [r4, #20]
        label_draw_dsc.color = dsc->bg_img_recolor;
 8012a16:	aa04      	add	r2, sp, #16
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 8012a18:	930e      	str	r3, [sp, #56]	; 0x38
        label_draw_dsc.color = dsc->bg_img_recolor;
 8012a1a:	8b23      	ldrh	r3, [r4, #24]
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 8012a1c:	9804      	ldr	r0, [sp, #16]
        label_draw_dsc.color = dsc->bg_img_recolor;
 8012a1e:	8693      	strh	r3, [r2, #52]	; 0x34
        label_draw_dsc.opa = dsc->bg_img_opa;
 8012a20:	7ea3      	ldrb	r3, [r4, #26]
 8012a22:	1852      	adds	r2, r2, r1
 8012a24:	7013      	strb	r3, [r2, #0]
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 8012a26:	4643      	mov	r3, r8
 8012a28:	9300      	str	r3, [sp, #0]
 8012a2a:	0032      	movs	r2, r6
 8012a2c:	6923      	ldr	r3, [r4, #16]
 8012a2e:	a90e      	add	r1, sp, #56	; 0x38
 8012a30:	f7fc fe18 	bl	800f664 <lv_draw_label>
 8012a34:	e758      	b.n	80128e8 <lv_draw_sw_rect+0x1fc>
            lv_draw_img_dsc_init(&img_dsc);
 8012a36:	ab0e      	add	r3, sp, #56	; 0x38
 8012a38:	4698      	mov	r8, r3
 8012a3a:	0018      	movs	r0, r3
 8012a3c:	f7fc fc58 	bl	800f2f0 <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 8012a40:	4643      	mov	r3, r8
 8012a42:	210f      	movs	r1, #15
 8012a44:	78a2      	ldrb	r2, [r4, #2]
 8012a46:	7b1b      	ldrb	r3, [r3, #12]
 8012a48:	400a      	ands	r2, r1
 8012a4a:	438b      	bics	r3, r1
 8012a4c:	4313      	orrs	r3, r2
 8012a4e:	4642      	mov	r2, r8
 8012a50:	7313      	strb	r3, [r2, #12]
            img_dsc.recolor = dsc->bg_img_recolor;
 8012a52:	8b23      	ldrh	r3, [r4, #24]
 8012a54:	8113      	strh	r3, [r2, #8]
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 8012a56:	8b63      	ldrh	r3, [r4, #26]
 8012a58:	ba5b      	rev16	r3, r3
 8012a5a:	8153      	strh	r3, [r2, #10]
            if(dsc->bg_img_tiled == false) {
 8012a5c:	7f23      	ldrb	r3, [r4, #28]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d069      	beq.n	8012b36 <lv_draw_sw_rect+0x44a>
                area.y1 = coords->y1;
 8012a62:	2302      	movs	r3, #2
 8012a64:	5ee8      	ldrsh	r0, [r5, r3]
                area.y2 = area.y1 + header.h - 1;
 8012a66:	ab04      	add	r3, sp, #16
 8012a68:	8adb      	ldrh	r3, [r3, #22]
                area.y1 = coords->y1;
 8012a6a:	ae0c      	add	r6, sp, #48	; 0x30
                area.y2 = area.y1 + header.h - 1;
 8012a6c:	095b      	lsrs	r3, r3, #5
 8012a6e:	469c      	mov	ip, r3
 8012a70:	3b01      	subs	r3, #1
 8012a72:	18c3      	adds	r3, r0, r3
 8012a74:	b21a      	sxth	r2, r3
                area.y1 = coords->y1;
 8012a76:	8070      	strh	r0, [r6, #2]
                area.y2 = area.y1 + header.h - 1;
 8012a78:	80f2      	strh	r2, [r6, #6]
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 8012a7a:	2106      	movs	r1, #6
 8012a7c:	5e6b      	ldrsh	r3, [r5, r1]
 8012a7e:	469b      	mov	fp, r3
 8012a80:	4298      	cmp	r0, r3
 8012a82:	dd00      	ble.n	8012a86 <lv_draw_sw_rect+0x39a>
 8012a84:	e730      	b.n	80128e8 <lv_draw_sw_rect+0x1fc>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8012a86:	2704      	movs	r7, #4
 8012a88:	5fe9      	ldrsh	r1, [r5, r7]
 8012a8a:	464f      	mov	r7, r9
                    area.x2 = area.x1 + header.w - 1;
 8012a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8012a8e:	9707      	str	r7, [sp, #28]
                    area.x2 = area.x1 + header.w - 1;
 8012a90:	02db      	lsls	r3, r3, #11
 8012a92:	0d5b      	lsrs	r3, r3, #21
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8012a94:	9f04      	ldr	r7, [sp, #16]
 8012a96:	9305      	str	r3, [sp, #20]
 8012a98:	9206      	str	r2, [sp, #24]
                    area.x1 = coords->x1;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	5eea      	ldrsh	r2, [r5, r3]
                    area.x2 = area.x1 + header.w - 1;
 8012a9e:	9b05      	ldr	r3, [sp, #20]
                    area.x1 = coords->x1;
 8012aa0:	4691      	mov	r9, r2
 8012aa2:	8032      	strh	r2, [r6, #0]
                    area.x2 = area.x1 + header.w - 1;
 8012aa4:	2201      	movs	r2, #1
 8012aa6:	4252      	negs	r2, r2
 8012aa8:	444a      	add	r2, r9
 8012aaa:	4692      	mov	sl, r2
 8012aac:	4453      	add	r3, sl
 8012aae:	80b3      	strh	r3, [r6, #4]
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8012ab0:	4589      	cmp	r9, r1
 8012ab2:	dc2b      	bgt.n	8012b0c <lv_draw_sw_rect+0x420>
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8012ab4:	0032      	movs	r2, r6
 8012ab6:	4641      	mov	r1, r8
 8012ab8:	0038      	movs	r0, r7
 8012aba:	6923      	ldr	r3, [r4, #16]
 8012abc:	f7fc fc28 	bl	800f310 <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8012ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ac2:	8832      	ldrh	r2, [r6, #0]
 8012ac4:	02db      	lsls	r3, r3, #11
 8012ac6:	88b1      	ldrh	r1, [r6, #4]
 8012ac8:	0d5b      	lsrs	r3, r3, #21
 8012aca:	189a      	adds	r2, r3, r2
 8012acc:	1859      	adds	r1, r3, r1
 8012ace:	b212      	sxth	r2, r2
 8012ad0:	8032      	strh	r2, [r6, #0]
 8012ad2:	80b1      	strh	r1, [r6, #4]
 8012ad4:	2004      	movs	r0, #4
 8012ad6:	5e29      	ldrsh	r1, [r5, r0]
 8012ad8:	428a      	cmp	r2, r1
 8012ada:	ddeb      	ble.n	8012ab4 <lv_draw_sw_rect+0x3c8>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 8012adc:	aa04      	add	r2, sp, #16
 8012ade:	8ad2      	ldrh	r2, [r2, #22]
 8012ae0:	9305      	str	r3, [sp, #20]
 8012ae2:	0952      	lsrs	r2, r2, #5
 8012ae4:	2306      	movs	r3, #6
 8012ae6:	5ee8      	ldrsh	r0, [r5, r3]
 8012ae8:	4694      	mov	ip, r2
 8012aea:	4683      	mov	fp, r0
 8012aec:	2306      	movs	r3, #6
 8012aee:	5ef2      	ldrsh	r2, [r6, r3]
 8012af0:	8870      	ldrh	r0, [r6, #2]
 8012af2:	4462      	add	r2, ip
 8012af4:	4460      	add	r0, ip
 8012af6:	b213      	sxth	r3, r2
 8012af8:	b200      	sxth	r0, r0
 8012afa:	8070      	strh	r0, [r6, #2]
 8012afc:	9306      	str	r3, [sp, #24]
 8012afe:	80f3      	strh	r3, [r6, #6]
 8012b00:	4558      	cmp	r0, fp
 8012b02:	ddca      	ble.n	8012a9a <lv_draw_sw_rect+0x3ae>
 8012b04:	9b07      	ldr	r3, [sp, #28]
 8012b06:	9704      	str	r7, [sp, #16]
 8012b08:	4699      	mov	r9, r3
 8012b0a:	e6ed      	b.n	80128e8 <lv_draw_sw_rect+0x1fc>
 8012b0c:	9b07      	ldr	r3, [sp, #28]
 8012b0e:	9a06      	ldr	r2, [sp, #24]
 8012b10:	4699      	mov	r9, r3
 8012b12:	0013      	movs	r3, r2
 8012b14:	4460      	add	r0, ip
 8012b16:	4463      	add	r3, ip
 8012b18:	b200      	sxth	r0, r0
 8012b1a:	80f3      	strh	r3, [r6, #6]
 8012b1c:	465a      	mov	r2, fp
 8012b1e:	4663      	mov	r3, ip
 8012b20:	9704      	str	r7, [sp, #16]
 8012b22:	8070      	strh	r0, [r6, #2]
 8012b24:	4558      	cmp	r0, fp
 8012b26:	dd00      	ble.n	8012b2a <lv_draw_sw_rect+0x43e>
 8012b28:	e6de      	b.n	80128e8 <lv_draw_sw_rect+0x1fc>
 8012b2a:	1818      	adds	r0, r3, r0
 8012b2c:	b200      	sxth	r0, r0
 8012b2e:	4282      	cmp	r2, r0
 8012b30:	dafb      	bge.n	8012b2a <lv_draw_sw_rect+0x43e>
 8012b32:	9704      	str	r7, [sp, #16]
 8012b34:	e6d8      	b.n	80128e8 <lv_draw_sw_rect+0x1fc>
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8012b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b38:	8829      	ldrh	r1, [r5, #0]
 8012b3a:	02da      	lsls	r2, r3, #11
 8012b3c:	0d53      	lsrs	r3, r2, #21
 8012b3e:	469a      	mov	sl, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012b40:	88ab      	ldrh	r3, [r5, #4]
 8012b42:	0d92      	lsrs	r2, r2, #22
 8012b44:	3301      	adds	r3, #1
 8012b46:	1a5b      	subs	r3, r3, r1
 8012b48:	b21b      	sxth	r3, r3
 8012b4a:	0fd8      	lsrs	r0, r3, #31
 8012b4c:	18c0      	adds	r0, r0, r3
 8012b4e:	1a89      	subs	r1, r1, r2
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8012b50:	ae04      	add	r6, sp, #16
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8012b52:	1040      	asrs	r0, r0, #1
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8012b54:	46b4      	mov	ip, r6
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8012b56:	1840      	adds	r0, r0, r1
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8012b58:	2116      	movs	r1, #22
 8012b5a:	4461      	add	r1, ip
 8012b5c:	8809      	ldrh	r1, [r1, #0]
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8012b5e:	aa0c      	add	r2, sp, #48	; 0x30
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8012b60:	468b      	mov	fp, r1
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8012b62:	b280      	uxth	r0, r0
 8012b64:	8010      	strh	r0, [r2, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012b66:	88ee      	ldrh	r6, [r5, #6]
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8012b68:	886b      	ldrh	r3, [r5, #2]
 8012b6a:	3601      	adds	r6, #1
 8012b6c:	1af6      	subs	r6, r6, r3
 8012b6e:	b236      	sxth	r6, r6
 8012b70:	0949      	lsrs	r1, r1, #5
 8012b72:	468c      	mov	ip, r1
 8012b74:	0ff1      	lsrs	r1, r6, #31
 8012b76:	1989      	adds	r1, r1, r6
 8012b78:	465e      	mov	r6, fp
 8012b7a:	09b6      	lsrs	r6, r6, #6
 8012b7c:	1049      	asrs	r1, r1, #1
 8012b7e:	1b9b      	subs	r3, r3, r6
 8012b80:	18cb      	adds	r3, r1, r3
                area.x2 = area.x1 + header.w - 1;
 8012b82:	4651      	mov	r1, sl
 8012b84:	3901      	subs	r1, #1
 8012b86:	1840      	adds	r0, r0, r1
                area.y2 = area.y1 + header.h - 1;
 8012b88:	4661      	mov	r1, ip
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8012b8a:	b29b      	uxth	r3, r3
                area.y2 = area.y1 + header.h - 1;
 8012b8c:	3901      	subs	r1, #1
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8012b8e:	8053      	strh	r3, [r2, #2]
                area.y2 = area.y1 + header.h - 1;
 8012b90:	185b      	adds	r3, r3, r1
                area.x2 = area.x1 + header.w - 1;
 8012b92:	8090      	strh	r0, [r2, #4]
                area.y2 = area.y1 + header.h - 1;
 8012b94:	80d3      	strh	r3, [r2, #6]
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8012b96:	4641      	mov	r1, r8
 8012b98:	6923      	ldr	r3, [r4, #16]
 8012b9a:	9804      	ldr	r0, [sp, #16]
 8012b9c:	f7fc fbb8 	bl	800f310 <lv_draw_img>
 8012ba0:	e6a2      	b.n	80128e8 <lv_draw_sw_rect+0x1fc>
 8012ba2:	46c0      	nop			; (mov r8, r8)
 8012ba4:	00001fff 	.word	0x00001fff

08012ba8 <lv_draw_sw_bg>:
{
 8012ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012baa:	4657      	mov	r7, sl
 8012bac:	4645      	mov	r5, r8
 8012bae:	46de      	mov	lr, fp
 8012bb0:	464e      	mov	r6, r9
 8012bb2:	b5e0      	push	{r5, r6, r7, lr}
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 8012bb4:	78cb      	ldrb	r3, [r1, #3]
{
 8012bb6:	0007      	movs	r7, r0
 8012bb8:	000c      	movs	r4, r1
 8012bba:	0015      	movs	r5, r2
 8012bbc:	b095      	sub	sp, #84	; 0x54
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 8012bbe:	2b02      	cmp	r3, #2
 8012bc0:	d961      	bls.n	8012c86 <lv_draw_sw_bg+0xde>
    dest->x1 = src->x1;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	5ed0      	ldrsh	r0, [r2, r3]
 8012bc6:	ae08      	add	r6, sp, #32
 8012bc8:	8030      	strh	r0, [r6, #0]
    dest->y1 = src->y1;
 8012bca:	2302      	movs	r3, #2
 8012bcc:	5ed1      	ldrsh	r1, [r2, r3]
 8012bce:	8071      	strh	r1, [r6, #2]
    dest->x2 = src->x2;
 8012bd0:	2304      	movs	r3, #4
 8012bd2:	5ed2      	ldrsh	r2, [r2, r3]
 8012bd4:	80b2      	strh	r2, [r6, #4]
 8012bd6:	4693      	mov	fp, r2
    dest->y2 = src->y2;
 8012bd8:	2306      	movs	r3, #6
 8012bda:	5eea      	ldrsh	r2, [r5, r3]
 8012bdc:	9204      	str	r2, [sp, #16]
 8012bde:	80f2      	strh	r2, [r6, #6]
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 8012be0:	2220      	movs	r2, #32
 8012be2:	5ea3      	ldrsh	r3, [r4, r2]
 8012be4:	2b01      	cmp	r3, #1
 8012be6:	dd28      	ble.n	8012c3a <lv_draw_sw_bg+0x92>
 8012be8:	2322      	movs	r3, #34	; 0x22
 8012bea:	5ce3      	ldrb	r3, [r4, r3]
 8012bec:	2bfc      	cmp	r3, #252	; 0xfc
 8012bee:	d924      	bls.n	8012c3a <lv_draw_sw_bg+0x92>
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	5ea3      	ldrsh	r3, [r4, r2]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d020      	beq.n	8012c3a <lv_draw_sw_bg+0x92>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 8012bf8:	2323      	movs	r3, #35	; 0x23
 8012bfa:	5ce3      	ldrb	r3, [r4, r3]
 8012bfc:	069b      	lsls	r3, r3, #26
 8012bfe:	4699      	mov	r9, r3
 8012c00:	0edb      	lsrs	r3, r3, #27
 8012c02:	4698      	mov	r8, r3
 8012c04:	464b      	mov	r3, r9
 8012c06:	0f5b      	lsrs	r3, r3, #29
 8012c08:	469a      	mov	sl, r3
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	469c      	mov	ip, r3
 8012c0e:	4653      	mov	r3, sl
 8012c10:	4662      	mov	r2, ip
 8012c12:	4013      	ands	r3, r2
 8012c14:	469a      	mov	sl, r3
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 8012c16:	464b      	mov	r3, r9
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 8012c18:	4450      	add	r0, sl
 8012c1a:	8030      	strh	r0, [r6, #0]
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 8012c1c:	0f18      	lsrs	r0, r3, #28
 8012c1e:	4010      	ands	r0, r2
 8012c20:	1809      	adds	r1, r1, r0
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 8012c22:	4658      	mov	r0, fp
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 8012c24:	8071      	strh	r1, [r6, #2]
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 8012c26:	0f99      	lsrs	r1, r3, #30
 8012c28:	4011      	ands	r1, r2
 8012c2a:	1a42      	subs	r2, r0, r1
 8012c2c:	4663      	mov	r3, ip
 8012c2e:	80b2      	strh	r2, [r6, #4]
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 8012c30:	4642      	mov	r2, r8
 8012c32:	401a      	ands	r2, r3
 8012c34:	9b04      	ldr	r3, [sp, #16]
 8012c36:	1a9b      	subs	r3, r3, r2
 8012c38:	80f3      	strh	r3, [r6, #6]
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 8012c3a:	0031      	movs	r1, r6
 8012c3c:	68ba      	ldr	r2, [r7, #8]
 8012c3e:	a80a      	add	r0, sp, #40	; 0x28
 8012c40:	f001 fb0e 	bl	8014260 <_lv_area_intersect>
 8012c44:	2800      	cmp	r0, #0
 8012c46:	d01e      	beq.n	8012c86 <lv_draw_sw_bg+0xde>
    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 8012c48:	7be3      	ldrb	r3, [r4, #15]
 8012c4a:	075b      	lsls	r3, r3, #29
 8012c4c:	0f5a      	lsrs	r2, r3, #29
 8012c4e:	4692      	mov	sl, r2
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d13e      	bne.n	8012cd2 <lv_draw_sw_bg+0x12a>
 8012c54:	88a3      	ldrh	r3, [r4, #4]
 8012c56:	4699      	mov	r9, r3
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 8012c58:	8963      	ldrh	r3, [r4, #10]
 8012c5a:	454b      	cmp	r3, r9
 8012c5c:	d03e      	beq.n	8012cdc <lv_draw_sw_bg+0x134>
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 8012c5e:	ab0c      	add	r3, sp, #48	; 0x30
 8012c60:	4698      	mov	r8, r3
 8012c62:	221c      	movs	r2, #28
 8012c64:	0018      	movs	r0, r3
 8012c66:	2100      	movs	r1, #0
 8012c68:	f008 fc56 	bl	801b518 <memset>
    blend_dsc.blend_mode = dsc->blend_mode;
 8012c6c:	4642      	mov	r2, r8
 8012c6e:	78a3      	ldrb	r3, [r4, #2]
 8012c70:	7653      	strb	r3, [r2, #25]
    blend_dsc.color = bg_color;
 8012c72:	4643      	mov	r3, r8
 8012c74:	464a      	mov	r2, r9
 8012c76:	811a      	strh	r2, [r3, #8]
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 8012c78:	2200      	movs	r2, #0
 8012c7a:	5ea3      	ldrsh	r3, [r4, r2]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d102      	bne.n	8012c86 <lv_draw_sw_bg+0xde>
 8012c80:	4653      	mov	r3, sl
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d03b      	beq.n	8012cfe <lv_draw_sw_bg+0x156>
    if(dsc->bg_img_src == NULL) return;
 8012c86:	6923      	ldr	r3, [r4, #16]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d002      	beq.n	8012c92 <lv_draw_sw_bg+0xea>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 8012c8c:	7ea3      	ldrb	r3, [r4, #26]
 8012c8e:	2b02      	cmp	r3, #2
 8012c90:	d806      	bhi.n	8012ca0 <lv_draw_sw_bg+0xf8>
}
 8012c92:	b015      	add	sp, #84	; 0x54
 8012c94:	bcf0      	pop	{r4, r5, r6, r7}
 8012c96:	46bb      	mov	fp, r7
 8012c98:	46b2      	mov	sl, r6
 8012c9a:	46a9      	mov	r9, r5
 8012c9c:	46a0      	mov	r8, r4
 8012c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 8012ca0:	0029      	movs	r1, r5
 8012ca2:	68ba      	ldr	r2, [r7, #8]
 8012ca4:	a808      	add	r0, sp, #32
 8012ca6:	f001 fadb 	bl	8014260 <_lv_area_intersect>
 8012caa:	2800      	cmp	r0, #0
 8012cac:	d0f1      	beq.n	8012c92 <lv_draw_sw_bg+0xea>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8012cae:	68bb      	ldr	r3, [r7, #8]
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 8012cb0:	6920      	ldr	r0, [r4, #16]
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8012cb2:	4699      	mov	r9, r3
    draw_ctx->clip_area = &clip_area;
 8012cb4:	ab08      	add	r3, sp, #32
 8012cb6:	60bb      	str	r3, [r7, #8]
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 8012cb8:	f7fc fcae 	bl	800f618 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 8012cbc:	2802      	cmp	r0, #2
 8012cbe:	d027      	beq.n	8012d10 <lv_draw_sw_bg+0x168>
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 8012cc0:	6920      	ldr	r0, [r4, #16]
 8012cc2:	a907      	add	r1, sp, #28
 8012cc4:	f7fd fd0e 	bl	80106e4 <lv_img_decoder_get_info>
        if(res == LV_RES_OK) {
 8012cc8:	2801      	cmp	r0, #1
 8012cca:	d06d      	beq.n	8012da8 <lv_draw_sw_bg+0x200>
    draw_ctx->clip_area = clip_area_ori;
 8012ccc:	464b      	mov	r3, r9
 8012cce:	60bb      	str	r3, [r7, #8]
 8012cd0:	e7df      	b.n	8012c92 <lv_draw_sw_bg+0xea>
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 8012cd2:	88e3      	ldrh	r3, [r4, #6]
 8012cd4:	4699      	mov	r9, r3
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 8012cd6:	8963      	ldrh	r3, [r4, #10]
 8012cd8:	454b      	cmp	r3, r9
 8012cda:	d1c0      	bne.n	8012c5e <lv_draw_sw_bg+0xb6>
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 8012cdc:	ab0c      	add	r3, sp, #48	; 0x30
 8012cde:	4698      	mov	r8, r3
 8012ce0:	221c      	movs	r2, #28
 8012ce2:	0018      	movs	r0, r3
 8012ce4:	2100      	movs	r1, #0
 8012ce6:	f008 fc17 	bl	801b518 <memset>
    blend_dsc.blend_mode = dsc->blend_mode;
 8012cea:	4642      	mov	r2, r8
 8012cec:	78a3      	ldrb	r3, [r4, #2]
 8012cee:	7653      	strb	r3, [r2, #25]
    blend_dsc.color = bg_color;
 8012cf0:	4643      	mov	r3, r8
 8012cf2:	464a      	mov	r2, r9
 8012cf4:	811a      	strh	r2, [r3, #8]
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	5ea3      	ldrsh	r3, [r4, r2]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d1c3      	bne.n	8012c86 <lv_draw_sw_bg+0xde>
        blend_dsc.opa = dsc->bg_opa;
 8012cfe:	4642      	mov	r2, r8
        blend_dsc.blend_area = &bg_coords;
 8012d00:	960c      	str	r6, [sp, #48]	; 0x30
        blend_dsc.opa = dsc->bg_opa;
 8012d02:	78e3      	ldrb	r3, [r4, #3]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8012d04:	4641      	mov	r1, r8
 8012d06:	0038      	movs	r0, r7
        blend_dsc.opa = dsc->bg_opa;
 8012d08:	7613      	strb	r3, [r2, #24]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8012d0a:	f7fd fe3d 	bl	8010988 <lv_draw_sw_blend>
        return;
 8012d0e:	e7ba      	b.n	8012c86 <lv_draw_sw_bg+0xde>
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8012d10:	2300      	movs	r3, #0
 8012d12:	4698      	mov	r8, r3
 8012d14:	9302      	str	r3, [sp, #8]
 8012d16:	4b78      	ldr	r3, [pc, #480]	; (8012ef8 <lv_draw_sw_bg+0x350>)
 8012d18:	a807      	add	r0, sp, #28
 8012d1a:	9301      	str	r3, [sp, #4]
 8012d1c:	4643      	mov	r3, r8
 8012d1e:	9300      	str	r3, [sp, #0]
 8012d20:	6962      	ldr	r2, [r4, #20]
 8012d22:	6921      	ldr	r1, [r4, #16]
 8012d24:	f003 feae 	bl	8016a84 <lv_txt_get_size>
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 8012d28:	aa02      	add	r2, sp, #8
 8012d2a:	2014      	movs	r0, #20
 8012d2c:	5e10      	ldrsh	r0, [r2, r0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012d2e:	88aa      	ldrh	r2, [r5, #4]
 8012d30:	882b      	ldrh	r3, [r5, #0]
 8012d32:	3201      	adds	r2, #1
 8012d34:	1ad2      	subs	r2, r2, r3
 8012d36:	b211      	sxth	r1, r2
 8012d38:	0fca      	lsrs	r2, r1, #31
 8012d3a:	1852      	adds	r2, r2, r1
 8012d3c:	0fc1      	lsrs	r1, r0, #31
 8012d3e:	1809      	adds	r1, r1, r0
 8012d40:	1049      	asrs	r1, r1, #1
 8012d42:	1052      	asrs	r2, r2, #1
 8012d44:	1a5b      	subs	r3, r3, r1
 8012d46:	18d3      	adds	r3, r2, r3
 8012d48:	ae0a      	add	r6, sp, #40	; 0x28
 8012d4a:	b29b      	uxth	r3, r3
        a.x2 = a.x1 + size.x - 1;
 8012d4c:	3801      	subs	r0, #1
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 8012d4e:	8033      	strh	r3, [r6, #0]
        a.x2 = a.x1 + size.x - 1;
 8012d50:	181b      	adds	r3, r3, r0
 8012d52:	80b3      	strh	r3, [r6, #4]
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 8012d54:	aa02      	add	r2, sp, #8
 8012d56:	2016      	movs	r0, #22
 8012d58:	5e10      	ldrsh	r0, [r2, r0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012d5a:	88ea      	ldrh	r2, [r5, #6]
 8012d5c:	886b      	ldrh	r3, [r5, #2]
 8012d5e:	3201      	adds	r2, #1
 8012d60:	1ad2      	subs	r2, r2, r3
 8012d62:	b211      	sxth	r1, r2
 8012d64:	0fca      	lsrs	r2, r1, #31
 8012d66:	1852      	adds	r2, r2, r1
 8012d68:	0fc1      	lsrs	r1, r0, #31
 8012d6a:	1809      	adds	r1, r1, r0
 8012d6c:	1049      	asrs	r1, r1, #1
 8012d6e:	1052      	asrs	r2, r2, #1
 8012d70:	1a5b      	subs	r3, r3, r1
 8012d72:	18d3      	adds	r3, r2, r3
 8012d74:	b29b      	uxth	r3, r3
        a.y2 = a.y1 + size.y - 1;
 8012d76:	3801      	subs	r0, #1
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 8012d78:	8073      	strh	r3, [r6, #2]
        a.y2 = a.y1 + size.y - 1;
 8012d7a:	181b      	adds	r3, r3, r0
 8012d7c:	80f3      	strh	r3, [r6, #6]
        lv_draw_label_dsc_init(&label_draw_dsc);
 8012d7e:	a80c      	add	r0, sp, #48	; 0x30
 8012d80:	f7fc fc58 	bl	800f634 <lv_draw_label_dsc_init>
        label_draw_dsc.opa = dsc->bg_img_opa;
 8012d84:	2142      	movs	r1, #66	; 0x42
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 8012d86:	6963      	ldr	r3, [r4, #20]
        label_draw_dsc.color = dsc->bg_img_recolor;
 8012d88:	aa02      	add	r2, sp, #8
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 8012d8a:	930c      	str	r3, [sp, #48]	; 0x30
        label_draw_dsc.color = dsc->bg_img_recolor;
 8012d8c:	8b23      	ldrh	r3, [r4, #24]
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 8012d8e:	0038      	movs	r0, r7
        label_draw_dsc.color = dsc->bg_img_recolor;
 8012d90:	8693      	strh	r3, [r2, #52]	; 0x34
        label_draw_dsc.opa = dsc->bg_img_opa;
 8012d92:	7ea3      	ldrb	r3, [r4, #26]
 8012d94:	1852      	adds	r2, r2, r1
 8012d96:	7013      	strb	r3, [r2, #0]
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 8012d98:	4642      	mov	r2, r8
 8012d9a:	6923      	ldr	r3, [r4, #16]
 8012d9c:	a90c      	add	r1, sp, #48	; 0x30
 8012d9e:	9200      	str	r2, [sp, #0]
 8012da0:	0032      	movs	r2, r6
 8012da2:	f7fc fc5f 	bl	800f664 <lv_draw_label>
 8012da6:	e791      	b.n	8012ccc <lv_draw_sw_bg+0x124>
            lv_draw_img_dsc_init(&img_dsc);
 8012da8:	ab0c      	add	r3, sp, #48	; 0x30
 8012daa:	4698      	mov	r8, r3
 8012dac:	0018      	movs	r0, r3
 8012dae:	f7fc fa9f 	bl	800f2f0 <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 8012db2:	4643      	mov	r3, r8
 8012db4:	210f      	movs	r1, #15
 8012db6:	78a2      	ldrb	r2, [r4, #2]
 8012db8:	7b1b      	ldrb	r3, [r3, #12]
 8012dba:	400a      	ands	r2, r1
 8012dbc:	438b      	bics	r3, r1
 8012dbe:	4313      	orrs	r3, r2
 8012dc0:	4642      	mov	r2, r8
 8012dc2:	7313      	strb	r3, [r2, #12]
            img_dsc.recolor = dsc->bg_img_recolor;
 8012dc4:	8b23      	ldrh	r3, [r4, #24]
 8012dc6:	8113      	strh	r3, [r2, #8]
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 8012dc8:	8b63      	ldrh	r3, [r4, #26]
 8012dca:	ba5b      	rev16	r3, r3
 8012dcc:	8153      	strh	r3, [r2, #10]
            if(dsc->bg_img_tiled == false) {
 8012dce:	7f23      	ldrb	r3, [r4, #28]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d05c      	beq.n	8012e8e <lv_draw_sw_bg+0x2e6>
                area.y1 = coords->y1;
 8012dd4:	2302      	movs	r3, #2
 8012dd6:	5ee8      	ldrsh	r0, [r5, r3]
                area.y2 = area.y1 + header.h - 1;
 8012dd8:	ab02      	add	r3, sp, #8
 8012dda:	8adb      	ldrh	r3, [r3, #22]
                area.y1 = coords->y1;
 8012ddc:	ae0a      	add	r6, sp, #40	; 0x28
                area.y2 = area.y1 + header.h - 1;
 8012dde:	095b      	lsrs	r3, r3, #5
 8012de0:	469c      	mov	ip, r3
 8012de2:	3b01      	subs	r3, #1
 8012de4:	18c3      	adds	r3, r0, r3
                area.y1 = coords->y1;
 8012de6:	8070      	strh	r0, [r6, #2]
                area.y2 = area.y1 + header.h - 1;
 8012de8:	80f3      	strh	r3, [r6, #6]
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 8012dea:	2206      	movs	r2, #6
 8012dec:	5eab      	ldrsh	r3, [r5, r2]
 8012dee:	469b      	mov	fp, r3
 8012df0:	4298      	cmp	r0, r3
 8012df2:	dd00      	ble.n	8012df6 <lv_draw_sw_bg+0x24e>
 8012df4:	e76a      	b.n	8012ccc <lv_draw_sw_bg+0x124>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8012df6:	2204      	movs	r2, #4
 8012df8:	5ea9      	ldrsh	r1, [r5, r2]
 8012dfa:	4662      	mov	r2, ip
                    area.x2 = area.x1 + header.w - 1;
 8012dfc:	9b07      	ldr	r3, [sp, #28]
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8012dfe:	9405      	str	r4, [sp, #20]
                    area.x2 = area.x1 + header.w - 1;
 8012e00:	02db      	lsls	r3, r3, #11
 8012e02:	0d5b      	lsrs	r3, r3, #21
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8012e04:	9304      	str	r3, [sp, #16]
                    area.x1 = coords->x1;
 8012e06:	2300      	movs	r3, #0
 8012e08:	5eec      	ldrsh	r4, [r5, r3]
                    area.x2 = area.x1 + header.w - 1;
 8012e0a:	9b04      	ldr	r3, [sp, #16]
                    area.x1 = coords->x1;
 8012e0c:	46a4      	mov	ip, r4
 8012e0e:	8034      	strh	r4, [r6, #0]
                    area.x2 = area.x1 + header.w - 1;
 8012e10:	2401      	movs	r4, #1
 8012e12:	4264      	negs	r4, r4
 8012e14:	4464      	add	r4, ip
 8012e16:	46a2      	mov	sl, r4
 8012e18:	4453      	add	r3, sl
 8012e1a:	80b3      	strh	r3, [r6, #4]
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8012e1c:	458c      	cmp	ip, r1
 8012e1e:	dc29      	bgt.n	8012e74 <lv_draw_sw_bg+0x2cc>
 8012e20:	9c05      	ldr	r4, [sp, #20]
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8012e22:	0032      	movs	r2, r6
 8012e24:	4641      	mov	r1, r8
 8012e26:	0038      	movs	r0, r7
 8012e28:	6923      	ldr	r3, [r4, #16]
 8012e2a:	f7fc fa71 	bl	800f310 <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8012e2e:	9b07      	ldr	r3, [sp, #28]
 8012e30:	8832      	ldrh	r2, [r6, #0]
 8012e32:	02db      	lsls	r3, r3, #11
 8012e34:	88b1      	ldrh	r1, [r6, #4]
 8012e36:	0d5b      	lsrs	r3, r3, #21
 8012e38:	189a      	adds	r2, r3, r2
 8012e3a:	1859      	adds	r1, r3, r1
 8012e3c:	b212      	sxth	r2, r2
 8012e3e:	8032      	strh	r2, [r6, #0]
 8012e40:	80b1      	strh	r1, [r6, #4]
 8012e42:	2004      	movs	r0, #4
 8012e44:	5e29      	ldrsh	r1, [r5, r0]
 8012e46:	428a      	cmp	r2, r1
 8012e48:	ddeb      	ble.n	8012e22 <lv_draw_sw_bg+0x27a>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 8012e4a:	9405      	str	r4, [sp, #20]
 8012e4c:	9304      	str	r3, [sp, #16]
 8012e4e:	2306      	movs	r3, #6
 8012e50:	5ef0      	ldrsh	r0, [r6, r3]
 8012e52:	aa02      	add	r2, sp, #8
 8012e54:	4684      	mov	ip, r0
 8012e56:	8ad2      	ldrh	r2, [r2, #22]
 8012e58:	2306      	movs	r3, #6
 8012e5a:	5ee8      	ldrsh	r0, [r5, r3]
 8012e5c:	0952      	lsrs	r2, r2, #5
 8012e5e:	4494      	add	ip, r2
 8012e60:	4683      	mov	fp, r0
 8012e62:	4664      	mov	r4, ip
 8012e64:	8870      	ldrh	r0, [r6, #2]
 8012e66:	80f4      	strh	r4, [r6, #6]
 8012e68:	1810      	adds	r0, r2, r0
 8012e6a:	b200      	sxth	r0, r0
 8012e6c:	8070      	strh	r0, [r6, #2]
 8012e6e:	4583      	cmp	fp, r0
 8012e70:	dac9      	bge.n	8012e06 <lv_draw_sw_bg+0x25e>
 8012e72:	e72b      	b.n	8012ccc <lv_draw_sw_bg+0x124>
 8012e74:	4694      	mov	ip, r2
 8012e76:	4460      	add	r0, ip
 8012e78:	b200      	sxth	r0, r0
 8012e7a:	4558      	cmp	r0, fp
 8012e7c:	dd00      	ble.n	8012e80 <lv_draw_sw_bg+0x2d8>
 8012e7e:	e725      	b.n	8012ccc <lv_draw_sw_bg+0x124>
 8012e80:	0013      	movs	r3, r2
 8012e82:	465a      	mov	r2, fp
 8012e84:	1818      	adds	r0, r3, r0
 8012e86:	b200      	sxth	r0, r0
 8012e88:	4282      	cmp	r2, r0
 8012e8a:	dafb      	bge.n	8012e84 <lv_draw_sw_bg+0x2dc>
 8012e8c:	e71e      	b.n	8012ccc <lv_draw_sw_bg+0x124>
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8012e8e:	9b07      	ldr	r3, [sp, #28]
 8012e90:	8829      	ldrh	r1, [r5, #0]
 8012e92:	02da      	lsls	r2, r3, #11
 8012e94:	0d53      	lsrs	r3, r2, #21
 8012e96:	469c      	mov	ip, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012e98:	88ab      	ldrh	r3, [r5, #4]
 8012e9a:	0d92      	lsrs	r2, r2, #22
 8012e9c:	3301      	adds	r3, #1
 8012e9e:	1a5b      	subs	r3, r3, r1
 8012ea0:	b21b      	sxth	r3, r3
 8012ea2:	0fd8      	lsrs	r0, r3, #31
 8012ea4:	18c0      	adds	r0, r0, r3
 8012ea6:	1a89      	subs	r1, r1, r2
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8012ea8:	ae02      	add	r6, sp, #8
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8012eaa:	1040      	asrs	r0, r0, #1
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8012eac:	46b2      	mov	sl, r6
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8012eae:	1840      	adds	r0, r0, r1
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8012eb0:	2116      	movs	r1, #22
 8012eb2:	4451      	add	r1, sl
 8012eb4:	8809      	ldrh	r1, [r1, #0]
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8012eb6:	aa0a      	add	r2, sp, #40	; 0x28
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8012eb8:	468a      	mov	sl, r1
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8012eba:	b280      	uxth	r0, r0
 8012ebc:	8010      	strh	r0, [r2, #0]
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8012ebe:	094e      	lsrs	r6, r1, #5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012ec0:	88e9      	ldrh	r1, [r5, #6]
 8012ec2:	886b      	ldrh	r3, [r5, #2]
 8012ec4:	3101      	adds	r1, #1
 8012ec6:	1ac9      	subs	r1, r1, r3
 8012ec8:	b20d      	sxth	r5, r1
 8012eca:	0fe9      	lsrs	r1, r5, #31
 8012ecc:	1949      	adds	r1, r1, r5
 8012ece:	4655      	mov	r5, sl
 8012ed0:	09ad      	lsrs	r5, r5, #6
 8012ed2:	1049      	asrs	r1, r1, #1
 8012ed4:	1b5b      	subs	r3, r3, r5
 8012ed6:	18cb      	adds	r3, r1, r3
                area.x2 = area.x1 + header.w - 1;
 8012ed8:	4661      	mov	r1, ip
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8012eda:	b29b      	uxth	r3, r3
                area.x2 = area.x1 + header.w - 1;
 8012edc:	3901      	subs	r1, #1
                area.y2 = area.y1 + header.h - 1;
 8012ede:	3e01      	subs	r6, #1
                area.x2 = area.x1 + header.w - 1;
 8012ee0:	1840      	adds	r0, r0, r1
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8012ee2:	8053      	strh	r3, [r2, #2]
                area.y2 = area.y1 + header.h - 1;
 8012ee4:	199b      	adds	r3, r3, r6
                area.x2 = area.x1 + header.w - 1;
 8012ee6:	8090      	strh	r0, [r2, #4]
                area.y2 = area.y1 + header.h - 1;
 8012ee8:	80d3      	strh	r3, [r2, #6]
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8012eea:	4641      	mov	r1, r8
 8012eec:	0038      	movs	r0, r7
 8012eee:	6923      	ldr	r3, [r4, #16]
 8012ef0:	f7fc fa0e 	bl	800f310 <lv_draw_img>
 8012ef4:	e6ea      	b.n	8012ccc <lv_draw_sw_bg+0x124>
 8012ef6:	46c0      	nop			; (mov r8, r8)
 8012ef8:	00001fff 	.word	0x00001fff

08012efc <lv_extra_init>:
    lv_freetype_init(LV_FREETYPE_CACHE_FT_FACES, LV_FREETYPE_CACHE_FT_SIZES, LV_FREETYPE_CACHE_SIZE);
#  else
    lv_freetype_init(0, 0, 0);
#  endif
#endif
}
 8012efc:	4770      	bx	lr
 8012efe:	46c0      	nop			; (mov r8, r8)

08012f00 <theme_apply>:
    return (lv_theme_t *)&theme;
}


static void theme_apply(lv_theme_t * th, lv_obj_t * obj)
{
 8012f00:	b570      	push	{r4, r5, r6, lr}
    LV_UNUSED(th);

    if(lv_obj_get_parent(obj) == NULL) {
 8012f02:	0008      	movs	r0, r1
{
 8012f04:	000c      	movs	r4, r1
    if(lv_obj_get_parent(obj) == NULL) {
 8012f06:	f7fa ff89 	bl	800de1c <lv_obj_get_parent>
 8012f0a:	2800      	cmp	r0, #0
 8012f0c:	d04c      	beq.n	8012fa8 <theme_apply+0xa8>
        lv_obj_add_style(obj, &styles->scr, 0);
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
        return;
    }

    if(lv_obj_check_type(obj, &lv_obj_class)) {
 8012f0e:	0020      	movs	r0, r4
 8012f10:	493f      	ldr	r1, [pc, #252]	; (8013010 <theme_apply+0x110>)
 8012f12:	f7f5 f83d 	bl	8007f90 <lv_obj_check_type>
 8012f16:	2800      	cmp	r0, #0
 8012f18:	d10d      	bne.n	8012f36 <theme_apply+0x36>
#endif
        lv_obj_add_style(obj, &styles->white, 0);
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
    }
#if LV_USE_BTN
    else if(lv_obj_check_type(obj, &lv_btn_class)) {
 8012f1a:	0020      	movs	r0, r4
 8012f1c:	493d      	ldr	r1, [pc, #244]	; (8013014 <theme_apply+0x114>)
 8012f1e:	f7f5 f837 	bl	8007f90 <lv_obj_check_type>
 8012f22:	2800      	cmp	r0, #0
 8012f24:	d016      	beq.n	8012f54 <theme_apply+0x54>
        lv_obj_add_style(obj, &styles->dark, 0);
 8012f26:	4b3c      	ldr	r3, [pc, #240]	; (8013018 <theme_apply+0x118>)
 8012f28:	2200      	movs	r2, #0
 8012f2a:	6819      	ldr	r1, [r3, #0]
 8012f2c:	0020      	movs	r0, r4
 8012f2e:	3120      	adds	r1, #32
 8012f30:	f7f9 fd08 	bl	800c944 <lv_obj_add_style>
#if LV_USE_LED
    else if(lv_obj_check_type(obj, &lv_led_class)) {
        lv_obj_add_style(obj, &styles->light, 0);
    }
#endif
}
 8012f34:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_add_style(obj, &styles->white, 0);
 8012f36:	2200      	movs	r2, #0
 8012f38:	4d37      	ldr	r5, [pc, #220]	; (8013018 <theme_apply+0x118>)
 8012f3a:	6829      	ldr	r1, [r5, #0]
 8012f3c:	3110      	adds	r1, #16
 8012f3e:	0020      	movs	r0, r4
 8012f40:	f7f9 fd00 	bl	800c944 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8012f44:	2280      	movs	r2, #128	; 0x80
 8012f46:	6829      	ldr	r1, [r5, #0]
 8012f48:	0020      	movs	r0, r4
 8012f4a:	3130      	adds	r1, #48	; 0x30
 8012f4c:	0252      	lsls	r2, r2, #9
 8012f4e:	f7f9 fcf9 	bl	800c944 <lv_obj_add_style>
 8012f52:	e7ef      	b.n	8012f34 <theme_apply+0x34>
    else if(lv_obj_check_type(obj, &lv_switch_class)) {
 8012f54:	0020      	movs	r0, r4
 8012f56:	4931      	ldr	r1, [pc, #196]	; (801301c <theme_apply+0x11c>)
 8012f58:	f7f5 f81a 	bl	8007f90 <lv_obj_check_type>
 8012f5c:	2800      	cmp	r0, #0
 8012f5e:	d114      	bne.n	8012f8a <theme_apply+0x8a>
    else if(lv_obj_check_type(obj, &lv_roller_class)) {
 8012f60:	0020      	movs	r0, r4
 8012f62:	492f      	ldr	r1, [pc, #188]	; (8013020 <theme_apply+0x120>)
 8012f64:	f7f5 f814 	bl	8007f90 <lv_obj_check_type>
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	d021      	beq.n	8012fb0 <theme_apply+0xb0>
        lv_obj_add_style(obj, &styles->light, 0);
 8012f6c:	4d2a      	ldr	r5, [pc, #168]	; (8013018 <theme_apply+0x118>)
 8012f6e:	0020      	movs	r0, r4
 8012f70:	6829      	ldr	r1, [r5, #0]
 8012f72:	2200      	movs	r2, #0
 8012f74:	3118      	adds	r1, #24
 8012f76:	f7f9 fce5 	bl	800c944 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->dark, LV_PART_SELECTED);
 8012f7a:	2280      	movs	r2, #128	; 0x80
 8012f7c:	6829      	ldr	r1, [r5, #0]
 8012f7e:	0020      	movs	r0, r4
 8012f80:	3120      	adds	r1, #32
 8012f82:	02d2      	lsls	r2, r2, #11
 8012f84:	f7f9 fcde 	bl	800c944 <lv_obj_add_style>
 8012f88:	e7d4      	b.n	8012f34 <theme_apply+0x34>
        lv_obj_add_style(obj, &styles->light, 0);
 8012f8a:	4d23      	ldr	r5, [pc, #140]	; (8013018 <theme_apply+0x118>)
 8012f8c:	0020      	movs	r0, r4
 8012f8e:	6829      	ldr	r1, [r5, #0]
 8012f90:	2200      	movs	r2, #0
 8012f92:	3118      	adds	r1, #24
 8012f94:	f7f9 fcd6 	bl	800c944 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->dim, LV_PART_KNOB);
 8012f98:	22c0      	movs	r2, #192	; 0xc0
 8012f9a:	6829      	ldr	r1, [r5, #0]
 8012f9c:	0020      	movs	r0, r4
 8012f9e:	3128      	adds	r1, #40	; 0x28
 8012fa0:	0292      	lsls	r2, r2, #10
 8012fa2:	f7f9 fccf 	bl	800c944 <lv_obj_add_style>
 8012fa6:	e7c5      	b.n	8012f34 <theme_apply+0x34>
        lv_obj_add_style(obj, &styles->scr, 0);
 8012fa8:	4d1b      	ldr	r5, [pc, #108]	; (8013018 <theme_apply+0x118>)
 8012faa:	2200      	movs	r2, #0
 8012fac:	6829      	ldr	r1, [r5, #0]
 8012fae:	e7c6      	b.n	8012f3e <theme_apply+0x3e>
    else if(lv_obj_check_type(obj, &lv_dropdown_class)) {
 8012fb0:	0020      	movs	r0, r4
 8012fb2:	491c      	ldr	r1, [pc, #112]	; (8013024 <theme_apply+0x124>)
 8012fb4:	f7f4 ffec 	bl	8007f90 <lv_obj_check_type>
 8012fb8:	2800      	cmp	r0, #0
 8012fba:	d121      	bne.n	8013000 <theme_apply+0x100>
    else if(lv_obj_check_type(obj, &lv_dropdownlist_class)) {
 8012fbc:	0020      	movs	r0, r4
 8012fbe:	491a      	ldr	r1, [pc, #104]	; (8013028 <theme_apply+0x128>)
 8012fc0:	f7f4 ffe6 	bl	8007f90 <lv_obj_check_type>
 8012fc4:	2800      	cmp	r0, #0
 8012fc6:	d0b5      	beq.n	8012f34 <theme_apply+0x34>
        lv_obj_add_style(obj, &styles->white, 0);
 8012fc8:	4d13      	ldr	r5, [pc, #76]	; (8013018 <theme_apply+0x118>)
 8012fca:	0020      	movs	r0, r4
 8012fcc:	6829      	ldr	r1, [r5, #0]
 8012fce:	2200      	movs	r2, #0
 8012fd0:	3110      	adds	r1, #16
 8012fd2:	f7f9 fcb7 	bl	800c944 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8012fd6:	2280      	movs	r2, #128	; 0x80
 8012fd8:	6829      	ldr	r1, [r5, #0]
 8012fda:	0020      	movs	r0, r4
 8012fdc:	3130      	adds	r1, #48	; 0x30
 8012fde:	0252      	lsls	r2, r2, #9
 8012fe0:	f7f9 fcb0 	bl	800c944 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->light, LV_PART_SELECTED);
 8012fe4:	2280      	movs	r2, #128	; 0x80
 8012fe6:	6829      	ldr	r1, [r5, #0]
 8012fe8:	0020      	movs	r0, r4
 8012fea:	3118      	adds	r1, #24
 8012fec:	02d2      	lsls	r2, r2, #11
 8012fee:	f7f9 fca9 	bl	800c944 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->dark, LV_PART_SELECTED | LV_STATE_CHECKED);
 8012ff2:	6829      	ldr	r1, [r5, #0]
 8012ff4:	0020      	movs	r0, r4
 8012ff6:	4a0d      	ldr	r2, [pc, #52]	; (801302c <theme_apply+0x12c>)
 8012ff8:	3120      	adds	r1, #32
 8012ffa:	f7f9 fca3 	bl	800c944 <lv_obj_add_style>
 8012ffe:	e799      	b.n	8012f34 <theme_apply+0x34>
        lv_obj_add_style(obj, &styles->white, 0);
 8013000:	4b05      	ldr	r3, [pc, #20]	; (8013018 <theme_apply+0x118>)
 8013002:	2200      	movs	r2, #0
 8013004:	6819      	ldr	r1, [r3, #0]
 8013006:	0020      	movs	r0, r4
 8013008:	3110      	adds	r1, #16
 801300a:	f7f9 fc9b 	bl	800c944 <lv_obj_add_style>
 801300e:	e791      	b.n	8012f34 <theme_apply+0x34>
 8013010:	0801b6a8 	.word	0x0801b6a8
 8013014:	0801bde8 	.word	0x0801bde8
 8013018:	20000578 	.word	0x20000578
 801301c:	0801bee8 	.word	0x0801bee8
 8013020:	0801beb8 	.word	0x0801beb8
 8013024:	0801be20 	.word	0x0801be20
 8013028:	0801be38 	.word	0x0801be38
 801302c:	00040001 	.word	0x00040001

08013030 <lv_theme_basic_init>:
{
 8013030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013032:	46c6      	mov	lr, r8
    return  LV_GC_ROOT(_lv_theme_basic_styles) == NULL ? false : true;
 8013034:	4cb4      	ldr	r4, [pc, #720]	; (8013308 <lv_theme_basic_init+0x2d8>)
{
 8013036:	0007      	movs	r7, r0
    if(!lv_theme_basic_is_inited()) {
 8013038:	6823      	ldr	r3, [r4, #0]
{
 801303a:	b500      	push	{lr}
    if(!lv_theme_basic_is_inited()) {
 801303c:	2b00      	cmp	r3, #0
 801303e:	d100      	bne.n	8013042 <lv_theme_basic_init+0x12>
 8013040:	e158      	b.n	80132f4 <lv_theme_basic_init+0x2c4>
    style_init_reset(&styles->scrollbar);
 8013042:	4cb2      	ldr	r4, [pc, #712]	; (801330c <lv_theme_basic_init+0x2dc>)
 8013044:	4db2      	ldr	r5, [pc, #712]	; (8013310 <lv_theme_basic_init+0x2e0>)
 8013046:	6820      	ldr	r0, [r4, #0]
    theme.disp = disp;
 8013048:	4eb2      	ldr	r6, [pc, #712]	; (8013314 <lv_theme_basic_init+0x2e4>)
    theme.font_small = LV_FONT_DEFAULT;
 801304a:	4bb3      	ldr	r3, [pc, #716]	; (8013318 <lv_theme_basic_init+0x2e8>)
    theme.disp = disp;
 801304c:	60f7      	str	r7, [r6, #12]
    theme.font_small = LV_FONT_DEFAULT;
 801304e:	6173      	str	r3, [r6, #20]
    theme.font_normal = LV_FONT_DEFAULT;
 8013050:	61b3      	str	r3, [r6, #24]
    theme.font_large = LV_FONT_DEFAULT;
 8013052:	61f3      	str	r3, [r6, #28]
    theme.apply_cb = theme_apply;
 8013054:	4bb1      	ldr	r3, [pc, #708]	; (801331c <lv_theme_basic_init+0x2ec>)
    style_init_reset(&styles->scrollbar);
 8013056:	3030      	adds	r0, #48	; 0x30
    theme.apply_cb = theme_apply;
 8013058:	6033      	str	r3, [r6, #0]
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
    if(inited) {
 801305a:	782b      	ldrb	r3, [r5, #0]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d100      	bne.n	8013062 <lv_theme_basic_init+0x32>
 8013060:	e145      	b.n	80132ee <lv_theme_basic_init+0x2be>
        lv_style_reset(style);
 8013062:	f002 fb69 	bl	8015738 <lv_style_reset>
    lv_style_set_bg_opa(&styles->scrollbar, LV_OPA_COVER);
 8013066:	6820      	ldr	r0, [r4, #0]
 8013068:	21ff      	movs	r1, #255	; 0xff
 801306a:	3030      	adds	r0, #48	; 0x30
 801306c:	f002 fd2e 	bl	8015acc <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scrollbar, COLOR_DARK);
 8013070:	2230      	movs	r2, #48	; 0x30
 8013072:	4694      	mov	ip, r2
 8013074:	6823      	ldr	r3, [r4, #0]
 8013076:	2012      	movs	r0, #18
 8013078:	4463      	add	r3, ip
 801307a:	4698      	mov	r8, r3
 801307c:	f001 fbfe 	bl	801487c <lv_palette_main>
 8013080:	1c01      	adds	r1, r0, #0
 8013082:	4640      	mov	r0, r8
 8013084:	f002 fd16 	bl	8015ab4 <lv_style_set_bg_color>
    lv_style_set_width(&styles->scrollbar,  SCROLLBAR_WIDTH);
 8013088:	6820      	ldr	r0, [r4, #0]
 801308a:	2102      	movs	r1, #2
 801308c:	3030      	adds	r0, #48	; 0x30
 801308e:	f002 fd0b 	bl	8015aa8 <lv_style_set_width>
    if(inited) {
 8013092:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->scr);
 8013094:	6820      	ldr	r0, [r4, #0]
    if(inited) {
 8013096:	2b00      	cmp	r3, #0
 8013098:	d100      	bne.n	801309c <lv_theme_basic_init+0x6c>
 801309a:	e125      	b.n	80132e8 <lv_theme_basic_init+0x2b8>
        lv_style_reset(style);
 801309c:	f002 fb4c 	bl	8015738 <lv_style_reset>
    lv_style_set_bg_opa(&styles->scr, LV_OPA_COVER);
 80130a0:	21ff      	movs	r1, #255	; 0xff
 80130a2:	6820      	ldr	r0, [r4, #0]
 80130a4:	f002 fd12 	bl	8015acc <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scr, COLOR_SCR);
 80130a8:	6823      	ldr	r3, [r4, #0]
 80130aa:	2104      	movs	r1, #4
 80130ac:	2012      	movs	r0, #18
 80130ae:	4698      	mov	r8, r3
 80130b0:	f001 fbee 	bl	8014890 <lv_palette_lighten>
 80130b4:	1c01      	adds	r1, r0, #0
 80130b6:	4640      	mov	r0, r8
 80130b8:	f002 fcfc 	bl	8015ab4 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->scr, COLOR_DIM);
 80130bc:	6823      	ldr	r3, [r4, #0]
 80130be:	2102      	movs	r1, #2
 80130c0:	2012      	movs	r0, #18
 80130c2:	4698      	mov	r8, r3
 80130c4:	f001 fbf6 	bl	80148b4 <lv_palette_darken>
 80130c8:	1c01      	adds	r1, r0, #0
 80130ca:	4640      	mov	r0, r8
 80130cc:	f002 fd28 	bl	8015b20 <lv_style_set_text_color>
    style_init_reset(&styles->transp);
 80130d0:	6820      	ldr	r0, [r4, #0]
    if(inited) {
 80130d2:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->transp);
 80130d4:	3008      	adds	r0, #8
    if(inited) {
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d100      	bne.n	80130dc <lv_theme_basic_init+0xac>
 80130da:	e102      	b.n	80132e2 <lv_theme_basic_init+0x2b2>
        lv_style_reset(style);
 80130dc:	f002 fb2c 	bl	8015738 <lv_style_reset>
    lv_style_set_bg_opa(&styles->transp, LV_OPA_TRANSP);
 80130e0:	6820      	ldr	r0, [r4, #0]
 80130e2:	2100      	movs	r1, #0
 80130e4:	3008      	adds	r0, #8
 80130e6:	f002 fcf1 	bl	8015acc <lv_style_set_bg_opa>
    style_init_reset(&styles->white);
 80130ea:	6820      	ldr	r0, [r4, #0]
    if(inited) {
 80130ec:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->white);
 80130ee:	3010      	adds	r0, #16
    if(inited) {
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d100      	bne.n	80130f6 <lv_theme_basic_init+0xc6>
 80130f4:	e0f2      	b.n	80132dc <lv_theme_basic_init+0x2ac>
        lv_style_reset(style);
 80130f6:	f002 fb1f 	bl	8015738 <lv_style_reset>
    lv_style_set_bg_opa(&styles->white, LV_OPA_COVER);
 80130fa:	6820      	ldr	r0, [r4, #0]
 80130fc:	21ff      	movs	r1, #255	; 0xff
 80130fe:	3010      	adds	r0, #16
 8013100:	f002 fce4 	bl	8015acc <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->white, COLOR_WHITE);
 8013104:	2301      	movs	r3, #1
 8013106:	6820      	ldr	r0, [r4, #0]
 8013108:	425b      	negs	r3, r3
 801310a:	1c19      	adds	r1, r3, #0
 801310c:	3010      	adds	r0, #16
 801310e:	f002 fcd1 	bl	8015ab4 <lv_style_set_bg_color>
    lv_style_set_line_width(&styles->white, 1);
 8013112:	6820      	ldr	r0, [r4, #0]
 8013114:	2101      	movs	r1, #1
 8013116:	3010      	adds	r0, #16
 8013118:	f002 fcde 	bl	8015ad8 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->white, COLOR_WHITE);
 801311c:	2301      	movs	r3, #1
 801311e:	6820      	ldr	r0, [r4, #0]
 8013120:	425b      	negs	r3, r3
 8013122:	1c19      	adds	r1, r3, #0
 8013124:	3010      	adds	r0, #16
 8013126:	f002 fcdd 	bl	8015ae4 <lv_style_set_line_color>
    lv_style_set_arc_width(&styles->white, 2);
 801312a:	6820      	ldr	r0, [r4, #0]
 801312c:	2102      	movs	r1, #2
 801312e:	3010      	adds	r0, #16
 8013130:	f002 fce4 	bl	8015afc <lv_style_set_arc_width>
    lv_style_set_arc_color(&styles->white, COLOR_WHITE);
 8013134:	2301      	movs	r3, #1
 8013136:	6820      	ldr	r0, [r4, #0]
 8013138:	425b      	negs	r3, r3
 801313a:	3010      	adds	r0, #16
 801313c:	1c19      	adds	r1, r3, #0
 801313e:	f002 fce3 	bl	8015b08 <lv_style_set_arc_color>
    style_init_reset(&styles->light);
 8013142:	6820      	ldr	r0, [r4, #0]
    if(inited) {
 8013144:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->light);
 8013146:	3018      	adds	r0, #24
    if(inited) {
 8013148:	2b00      	cmp	r3, #0
 801314a:	d100      	bne.n	801314e <lv_theme_basic_init+0x11e>
 801314c:	e0c3      	b.n	80132d6 <lv_theme_basic_init+0x2a6>
        lv_style_reset(style);
 801314e:	f002 faf3 	bl	8015738 <lv_style_reset>
    lv_style_set_bg_opa(&styles->light, LV_OPA_COVER);
 8013152:	6820      	ldr	r0, [r4, #0]
 8013154:	21ff      	movs	r1, #255	; 0xff
 8013156:	3018      	adds	r0, #24
 8013158:	f002 fcb8 	bl	8015acc <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->light, COLOR_LIGHT);
 801315c:	2218      	movs	r2, #24
 801315e:	4694      	mov	ip, r2
 8013160:	6823      	ldr	r3, [r4, #0]
 8013162:	2102      	movs	r1, #2
 8013164:	4463      	add	r3, ip
 8013166:	2012      	movs	r0, #18
 8013168:	4698      	mov	r8, r3
 801316a:	f001 fb91 	bl	8014890 <lv_palette_lighten>
 801316e:	1c01      	adds	r1, r0, #0
 8013170:	4640      	mov	r0, r8
 8013172:	f002 fc9f 	bl	8015ab4 <lv_style_set_bg_color>
    lv_style_set_line_width(&styles->light, 1);
 8013176:	6820      	ldr	r0, [r4, #0]
 8013178:	2101      	movs	r1, #1
 801317a:	3018      	adds	r0, #24
 801317c:	f002 fcac 	bl	8015ad8 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->light, COLOR_LIGHT);
 8013180:	2218      	movs	r2, #24
 8013182:	4694      	mov	ip, r2
 8013184:	6823      	ldr	r3, [r4, #0]
 8013186:	2102      	movs	r1, #2
 8013188:	4463      	add	r3, ip
 801318a:	2012      	movs	r0, #18
 801318c:	4698      	mov	r8, r3
 801318e:	f001 fb7f 	bl	8014890 <lv_palette_lighten>
 8013192:	1c01      	adds	r1, r0, #0
 8013194:	4640      	mov	r0, r8
 8013196:	f002 fca5 	bl	8015ae4 <lv_style_set_line_color>
    lv_style_set_arc_width(&styles->light, 2);
 801319a:	6820      	ldr	r0, [r4, #0]
 801319c:	2102      	movs	r1, #2
 801319e:	3018      	adds	r0, #24
 80131a0:	f002 fcac 	bl	8015afc <lv_style_set_arc_width>
    lv_style_set_arc_color(&styles->light, COLOR_LIGHT);
 80131a4:	2218      	movs	r2, #24
 80131a6:	4694      	mov	ip, r2
 80131a8:	6823      	ldr	r3, [r4, #0]
 80131aa:	2102      	movs	r1, #2
 80131ac:	4463      	add	r3, ip
 80131ae:	2012      	movs	r0, #18
 80131b0:	4698      	mov	r8, r3
 80131b2:	f001 fb6d 	bl	8014890 <lv_palette_lighten>
 80131b6:	1c01      	adds	r1, r0, #0
 80131b8:	4640      	mov	r0, r8
 80131ba:	f002 fca5 	bl	8015b08 <lv_style_set_arc_color>
    style_init_reset(&styles->dark);
 80131be:	6820      	ldr	r0, [r4, #0]
    if(inited) {
 80131c0:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->dark);
 80131c2:	3020      	adds	r0, #32
    if(inited) {
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d100      	bne.n	80131ca <lv_theme_basic_init+0x19a>
 80131c8:	e082      	b.n	80132d0 <lv_theme_basic_init+0x2a0>
        lv_style_reset(style);
 80131ca:	f002 fab5 	bl	8015738 <lv_style_reset>
    lv_style_set_bg_opa(&styles->dark, LV_OPA_COVER);
 80131ce:	6820      	ldr	r0, [r4, #0]
 80131d0:	21ff      	movs	r1, #255	; 0xff
 80131d2:	3020      	adds	r0, #32
 80131d4:	f002 fc7a 	bl	8015acc <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->dark, COLOR_DARK);
 80131d8:	2220      	movs	r2, #32
 80131da:	4694      	mov	ip, r2
 80131dc:	6823      	ldr	r3, [r4, #0]
 80131de:	2012      	movs	r0, #18
 80131e0:	4463      	add	r3, ip
 80131e2:	4698      	mov	r8, r3
 80131e4:	f001 fb4a 	bl	801487c <lv_palette_main>
 80131e8:	1c01      	adds	r1, r0, #0
 80131ea:	4640      	mov	r0, r8
 80131ec:	f002 fc62 	bl	8015ab4 <lv_style_set_bg_color>
    lv_style_set_line_width(&styles->dark, 1);
 80131f0:	6820      	ldr	r0, [r4, #0]
 80131f2:	2101      	movs	r1, #1
 80131f4:	3020      	adds	r0, #32
 80131f6:	f002 fc6f 	bl	8015ad8 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->dark, COLOR_DARK);
 80131fa:	2220      	movs	r2, #32
 80131fc:	4694      	mov	ip, r2
 80131fe:	6823      	ldr	r3, [r4, #0]
 8013200:	2012      	movs	r0, #18
 8013202:	4463      	add	r3, ip
 8013204:	4698      	mov	r8, r3
 8013206:	f001 fb39 	bl	801487c <lv_palette_main>
 801320a:	1c01      	adds	r1, r0, #0
 801320c:	4640      	mov	r0, r8
 801320e:	f002 fc69 	bl	8015ae4 <lv_style_set_line_color>
    lv_style_set_arc_width(&styles->dark, 2);
 8013212:	6820      	ldr	r0, [r4, #0]
 8013214:	2102      	movs	r1, #2
 8013216:	3020      	adds	r0, #32
 8013218:	f002 fc70 	bl	8015afc <lv_style_set_arc_width>
    lv_style_set_arc_color(&styles->dark, COLOR_DARK);
 801321c:	2220      	movs	r2, #32
 801321e:	4694      	mov	ip, r2
 8013220:	6823      	ldr	r3, [r4, #0]
 8013222:	2012      	movs	r0, #18
 8013224:	4463      	add	r3, ip
 8013226:	4698      	mov	r8, r3
 8013228:	f001 fb28 	bl	801487c <lv_palette_main>
 801322c:	1c01      	adds	r1, r0, #0
 801322e:	4640      	mov	r0, r8
 8013230:	f002 fc6a 	bl	8015b08 <lv_style_set_arc_color>
    style_init_reset(&styles->dim);
 8013234:	6820      	ldr	r0, [r4, #0]
    if(inited) {
 8013236:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->dim);
 8013238:	3028      	adds	r0, #40	; 0x28
    if(inited) {
 801323a:	2b00      	cmp	r3, #0
 801323c:	d045      	beq.n	80132ca <lv_theme_basic_init+0x29a>
        lv_style_reset(style);
 801323e:	f002 fa7b 	bl	8015738 <lv_style_reset>
    lv_style_set_bg_opa(&styles->dim, LV_OPA_COVER);
 8013242:	6820      	ldr	r0, [r4, #0]
 8013244:	21ff      	movs	r1, #255	; 0xff
 8013246:	3028      	adds	r0, #40	; 0x28
 8013248:	f002 fc40 	bl	8015acc <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->dim, COLOR_DIM);
 801324c:	2228      	movs	r2, #40	; 0x28
 801324e:	4694      	mov	ip, r2
 8013250:	6823      	ldr	r3, [r4, #0]
 8013252:	2102      	movs	r1, #2
 8013254:	4463      	add	r3, ip
 8013256:	2012      	movs	r0, #18
 8013258:	4698      	mov	r8, r3
 801325a:	f001 fb2b 	bl	80148b4 <lv_palette_darken>
 801325e:	1c01      	adds	r1, r0, #0
 8013260:	4640      	mov	r0, r8
 8013262:	f002 fc27 	bl	8015ab4 <lv_style_set_bg_color>
    lv_style_set_line_width(&styles->dim, 1);
 8013266:	6820      	ldr	r0, [r4, #0]
 8013268:	2101      	movs	r1, #1
 801326a:	3028      	adds	r0, #40	; 0x28
 801326c:	f002 fc34 	bl	8015ad8 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->dim, COLOR_DIM);
 8013270:	2228      	movs	r2, #40	; 0x28
 8013272:	4694      	mov	ip, r2
 8013274:	6823      	ldr	r3, [r4, #0]
 8013276:	2102      	movs	r1, #2
 8013278:	4463      	add	r3, ip
 801327a:	2012      	movs	r0, #18
 801327c:	4698      	mov	r8, r3
 801327e:	f001 fb19 	bl	80148b4 <lv_palette_darken>
 8013282:	1c01      	adds	r1, r0, #0
 8013284:	4640      	mov	r0, r8
 8013286:	f002 fc2d 	bl	8015ae4 <lv_style_set_line_color>
    lv_style_set_arc_width(&styles->dim, 2);
 801328a:	6820      	ldr	r0, [r4, #0]
 801328c:	2102      	movs	r1, #2
 801328e:	3028      	adds	r0, #40	; 0x28
 8013290:	f002 fc34 	bl	8015afc <lv_style_set_arc_width>
    lv_style_set_arc_color(&styles->dim, COLOR_DIM);
 8013294:	2102      	movs	r1, #2
 8013296:	2012      	movs	r0, #18
 8013298:	6824      	ldr	r4, [r4, #0]
 801329a:	f001 fb0b 	bl	80148b4 <lv_palette_darken>
 801329e:	3428      	adds	r4, #40	; 0x28
 80132a0:	1c01      	adds	r1, r0, #0
 80132a2:	0020      	movs	r0, r4
 80132a4:	f002 fc30 	bl	8015b08 <lv_style_set_arc_color>
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) {
 80132a8:	2f00      	cmp	r7, #0
 80132aa:	d00a      	beq.n	80132c2 <lv_theme_basic_init+0x292>
 80132ac:	0038      	movs	r0, r7
 80132ae:	f7f1 fa2d 	bl	800470c <lv_disp_get_theme>
 80132b2:	4286      	cmp	r6, r0
 80132b4:	d005      	beq.n	80132c2 <lv_theme_basic_init+0x292>
    inited = true;
 80132b6:	2301      	movs	r3, #1
}
 80132b8:	0030      	movs	r0, r6
    inited = true;
 80132ba:	702b      	strb	r3, [r5, #0]
}
 80132bc:	bc80      	pop	{r7}
 80132be:	46b8      	mov	r8, r7
 80132c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_report_style_change(NULL);
 80132c2:	2000      	movs	r0, #0
 80132c4:	f7f9 ff4e 	bl	800d164 <lv_obj_report_style_change>
 80132c8:	e7f5      	b.n	80132b6 <lv_theme_basic_init+0x286>
    }
    else {
        lv_style_init(style);
 80132ca:	f002 fa2f 	bl	801572c <lv_style_init>
 80132ce:	e7b8      	b.n	8013242 <lv_theme_basic_init+0x212>
 80132d0:	f002 fa2c 	bl	801572c <lv_style_init>
 80132d4:	e77b      	b.n	80131ce <lv_theme_basic_init+0x19e>
 80132d6:	f002 fa29 	bl	801572c <lv_style_init>
 80132da:	e73a      	b.n	8013152 <lv_theme_basic_init+0x122>
 80132dc:	f002 fa26 	bl	801572c <lv_style_init>
 80132e0:	e70b      	b.n	80130fa <lv_theme_basic_init+0xca>
 80132e2:	f002 fa23 	bl	801572c <lv_style_init>
 80132e6:	e6fb      	b.n	80130e0 <lv_theme_basic_init+0xb0>
 80132e8:	f002 fa20 	bl	801572c <lv_style_init>
 80132ec:	e6d8      	b.n	80130a0 <lv_theme_basic_init+0x70>
 80132ee:	f002 fa1d 	bl	801572c <lv_style_init>
 80132f2:	e6b8      	b.n	8013066 <lv_theme_basic_init+0x36>
        inited = false;
 80132f4:	4d06      	ldr	r5, [pc, #24]	; (8013310 <lv_theme_basic_init+0x2e0>)
        LV_GC_ROOT(_lv_theme_basic_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 80132f6:	2038      	movs	r0, #56	; 0x38
        inited = false;
 80132f8:	702b      	strb	r3, [r5, #0]
        LV_GC_ROOT(_lv_theme_basic_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 80132fa:	f001 fdc1 	bl	8014e80 <lv_mem_alloc>
 80132fe:	6020      	str	r0, [r4, #0]
        styles = (my_theme_styles_t *)LV_GC_ROOT(_lv_theme_basic_styles);
 8013300:	4c02      	ldr	r4, [pc, #8]	; (801330c <lv_theme_basic_init+0x2dc>)
 8013302:	6020      	str	r0, [r4, #0]
 8013304:	e6a0      	b.n	8013048 <lv_theme_basic_init+0x18>
 8013306:	46c0      	nop			; (mov r8, r8)
 8013308:	20000648 	.word	0x20000648
 801330c:	20000578 	.word	0x20000578
 8013310:	20000575 	.word	0x20000575
 8013314:	2000057c 	.word	0x2000057c
 8013318:	0801bf40 	.word	0x0801bf40
 801331c:	08012f01 	.word	0x08012f01

08013320 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter a UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 8013320:	b510      	push	{r4, lr}
    LV_ASSERT_NULL(font_p);
 8013322:	2800      	cmp	r0, #0
 8013324:	d002      	beq.n	801332c <lv_font_get_glyph_bitmap+0xc>
    return font_p->get_glyph_bitmap(font_p, letter);
 8013326:	6843      	ldr	r3, [r0, #4]
 8013328:	4798      	blx	r3
}
 801332a:	bd10      	pop	{r4, pc}
    LV_ASSERT_NULL(font_p);
 801332c:	e7fe      	b.n	801332c <lv_font_get_glyph_bitmap+0xc>
 801332e:	46c0      	nop			; (mov r8, r8)

08013330 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 8013330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013332:	46d6      	mov	lr, sl
 8013334:	464f      	mov	r7, r9
 8013336:	4646      	mov	r6, r8
 8013338:	000d      	movs	r5, r1
 801333a:	b5c0      	push	{r6, r7, lr}
 801333c:	4680      	mov	r8, r0
 801333e:	4692      	mov	sl, r2
 8013340:	001f      	movs	r7, r3

    LV_ASSERT_NULL(font_p);
 8013342:	2800      	cmp	r0, #0
 8013344:	d029      	beq.n	801339a <lv_font_get_glyph_dsc+0x6a>
    LV_ASSERT_NULL(dsc_out);
 8013346:	2900      	cmp	r1, #0
 8013348:	d028      	beq.n	801339c <lv_font_get_glyph_dsc+0x6c>
    const lv_font_t * placeholder_font = NULL;
#endif

    const lv_font_t * f = font_p;

    dsc_out->resolved_font = NULL;
 801334a:	2300      	movs	r3, #0
 801334c:	600b      	str	r3, [r1, #0]

    while(f) {
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
        if(found) {
            if(!dsc_out->is_placeholder) {
 801334e:	3310      	adds	r3, #16
    dsc_out->resolved_font = NULL;
 8013350:	0004      	movs	r4, r0
            if(!dsc_out->is_placeholder) {
 8013352:	4699      	mov	r9, r3
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 8013354:	003b      	movs	r3, r7
 8013356:	4652      	mov	r2, sl
 8013358:	0029      	movs	r1, r5
 801335a:	0020      	movs	r0, r4
 801335c:	6826      	ldr	r6, [r4, #0]
 801335e:	47b0      	blx	r6
        if(found) {
 8013360:	2800      	cmp	r0, #0
 8013362:	d003      	beq.n	801336c <lv_font_get_glyph_dsc+0x3c>
            if(!dsc_out->is_placeholder) {
 8013364:	464a      	mov	r2, r9
 8013366:	7bab      	ldrb	r3, [r5, #14]
 8013368:	421a      	tst	r2, r3
 801336a:	d018      	beq.n	801339e <lv_font_get_glyph_dsc+0x6e>
            else if(placeholder_font == NULL) {
                placeholder_font = f;
            }
#endif
        }
        f = f->fallback;
 801336c:	6964      	ldr	r4, [r4, #20]
    while(f) {
 801336e:	2c00      	cmp	r4, #0
 8013370:	d1f0      	bne.n	8013354 <lv_font_get_glyph_dsc+0x24>
        dsc_out->resolved_font = placeholder_font;
        return true;
    }
#endif

    if(letter < 0x20 ||
 8013372:	4643      	mov	r3, r8
 8013374:	606c      	str	r4, [r5, #4]
 8013376:	2208      	movs	r2, #8
 8013378:	5e9b      	ldrsh	r3, [r3, r2]

    dsc_out->resolved_font = NULL;
    dsc_out->box_h = font_p->line_height;
    dsc_out->ofs_x = 0;
    dsc_out->ofs_y = 0;
    dsc_out->bpp   = 1;
 801337a:	221f      	movs	r2, #31
    dsc_out->box_h = font_p->line_height;
 801337c:	812b      	strh	r3, [r5, #8]
    dsc_out->bpp   = 1;
 801337e:	7bab      	ldrb	r3, [r5, #14]
 8013380:	2000      	movs	r0, #0
 8013382:	4393      	bics	r3, r2
 8013384:	2211      	movs	r2, #17
 8013386:	4313      	orrs	r3, r2
    dsc_out->resolved_font = NULL;
 8013388:	602c      	str	r4, [r5, #0]
    dsc_out->ofs_x = 0;
 801338a:	816c      	strh	r4, [r5, #10]
    dsc_out->ofs_y = 0;
 801338c:	81ac      	strh	r4, [r5, #12]
    dsc_out->bpp   = 1;
 801338e:	73ab      	strb	r3, [r5, #14]
    dsc_out->is_placeholder = true;

    return false;
}
 8013390:	bce0      	pop	{r5, r6, r7}
 8013392:	46ba      	mov	sl, r7
 8013394:	46b1      	mov	r9, r6
 8013396:	46a8      	mov	r8, r5
 8013398:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(font_p);
 801339a:	e7fe      	b.n	801339a <lv_font_get_glyph_dsc+0x6a>
    LV_ASSERT_NULL(dsc_out);
 801339c:	e7fe      	b.n	801339c <lv_font_get_glyph_dsc+0x6c>
                dsc_out->resolved_font = f;
 801339e:	602c      	str	r4, [r5, #0]
                return true;
 80133a0:	e7f6      	b.n	8013390 <lv_font_get_glyph_dsc+0x60>
 80133a2:	46c0      	nop			; (mov r8, r8)

080133a4 <lv_font_get_glyph_width>:
 * @param letter a UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 80133a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133a6:	46c6      	mov	lr, r8
 80133a8:	b500      	push	{lr}
 80133aa:	0004      	movs	r4, r0
 80133ac:	000d      	movs	r5, r1
 80133ae:	0016      	movs	r6, r2
 80133b0:	b084      	sub	sp, #16
    LV_ASSERT_NULL(font);
 80133b2:	2800      	cmp	r0, #0
 80133b4:	d018      	beq.n	80133e8 <lv_font_get_glyph_width+0x44>
    dsc_out->resolved_font = NULL;
 80133b6:	2300      	movs	r3, #0
 80133b8:	9300      	str	r3, [sp, #0]
            if(!dsc_out->is_placeholder) {
 80133ba:	3310      	adds	r3, #16
 80133bc:	4698      	mov	r8, r3
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 80133be:	0033      	movs	r3, r6
 80133c0:	002a      	movs	r2, r5
 80133c2:	4669      	mov	r1, sp
 80133c4:	0020      	movs	r0, r4
 80133c6:	6827      	ldr	r7, [r4, #0]
 80133c8:	47b8      	blx	r7
        if(found) {
 80133ca:	2800      	cmp	r0, #0
 80133cc:	d004      	beq.n	80133d8 <lv_font_get_glyph_width+0x34>
            if(!dsc_out->is_placeholder) {
 80133ce:	466b      	mov	r3, sp
 80133d0:	4642      	mov	r2, r8
 80133d2:	7b9b      	ldrb	r3, [r3, #14]
 80133d4:	421a      	tst	r2, r3
 80133d6:	d008      	beq.n	80133ea <lv_font_get_glyph_width+0x46>
        f = f->fallback;
 80133d8:	6964      	ldr	r4, [r4, #20]
    while(f) {
 80133da:	2c00      	cmp	r4, #0
 80133dc:	d1ef      	bne.n	80133be <lv_font_get_glyph_width+0x1a>
 80133de:	2000      	movs	r0, #0
    lv_font_glyph_dsc_t g;
    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
    return g.adv_w;
}
 80133e0:	b004      	add	sp, #16
 80133e2:	bc80      	pop	{r7}
 80133e4:	46b8      	mov	r8, r7
 80133e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(font);
 80133e8:	e7fe      	b.n	80133e8 <lv_font_get_glyph_width+0x44>
    return g.adv_w;
 80133ea:	466b      	mov	r3, sp
 80133ec:	8898      	ldrh	r0, [r3, #4]
 80133ee:	e7f7      	b.n	80133e0 <lv_font_get_glyph_width+0x3c>

080133f0 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 80133f0:	7803      	ldrb	r3, [r0, #0]
 80133f2:	780a      	ldrb	r2, [r1, #0]
 80133f4:	4293      	cmp	r3, r2
 80133f6:	d001      	beq.n	80133fc <kern_pair_8_compare+0xc>
 80133f8:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];

}
 80133fa:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
 80133fc:	7840      	ldrb	r0, [r0, #1]
 80133fe:	784b      	ldrb	r3, [r1, #1]
 8013400:	1ac0      	subs	r0, r0, r3
 8013402:	e7fa      	b.n	80133fa <kern_pair_8_compare+0xa>

08013404 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 8013404:	8803      	ldrh	r3, [r0, #0]
 8013406:	880a      	ldrh	r2, [r1, #0]
 8013408:	4293      	cmp	r3, r2
 801340a:	d001      	beq.n	8013410 <kern_pair_16_compare+0xc>
 801340c:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
}
 801340e:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
 8013410:	8840      	ldrh	r0, [r0, #2]
 8013412:	884b      	ldrh	r3, [r1, #2]
 8013414:	1ac0      	subs	r0, r0, r3
 8013416:	e7fa      	b.n	801340e <kern_pair_16_compare+0xa>

08013418 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 8013418:	8800      	ldrh	r0, [r0, #0]
 801341a:	880b      	ldrh	r3, [r1, #0]
 801341c:	1ac0      	subs	r0, r0, r3
}
 801341e:	4770      	bx	lr

08013420 <lv_font_get_bitmap_fmt_txt>:
{
 8013420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013422:	000d      	movs	r5, r1
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8013424:	6904      	ldr	r4, [r0, #16]
{
 8013426:	b085      	sub	sp, #20
    if(unicode_letter == '\t') unicode_letter = ' ';
 8013428:	2909      	cmp	r1, #9
 801342a:	d03c      	beq.n	80134a6 <lv_font_get_bitmap_fmt_txt+0x86>
    if(letter == '\0') return 0;
 801342c:	2900      	cmp	r1, #0
 801342e:	d037      	beq.n	80134a0 <lv_font_get_bitmap_fmt_txt+0x80>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8013430:	6961      	ldr	r1, [r4, #20]
 8013432:	2900      	cmp	r1, #0
 8013434:	d03b      	beq.n	80134ae <lv_font_get_bitmap_fmt_txt+0x8e>
 8013436:	680b      	ldr	r3, [r1, #0]
 8013438:	429d      	cmp	r5, r3
 801343a:	d049      	beq.n	80134d0 <lv_font_get_bitmap_fmt_txt+0xb0>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801343c:	8a63      	ldrh	r3, [r4, #18]
 801343e:	05db      	lsls	r3, r3, #23
 8013440:	0dda      	lsrs	r2, r3, #23
 8013442:	4694      	mov	ip, r2
 8013444:	2b00      	cmp	r3, #0
 8013446:	d028      	beq.n	801349a <lv_font_get_bitmap_fmt_txt+0x7a>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8013448:	2600      	movs	r6, #0
 801344a:	2000      	movs	r0, #0
 801344c:	68a3      	ldr	r3, [r4, #8]
 801344e:	681a      	ldr	r2, [r3, #0]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8013450:	889f      	ldrh	r7, [r3, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8013452:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8013454:	42ba      	cmp	r2, r7
 8013456:	d831      	bhi.n	80134bc <lv_font_get_bitmap_fmt_txt+0x9c>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8013458:	7c98      	ldrb	r0, [r3, #18]
 801345a:	2802      	cmp	r0, #2
 801345c:	d035      	beq.n	80134ca <lv_font_get_bitmap_fmt_txt+0xaa>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 801345e:	2800      	cmp	r0, #0
 8013460:	d115      	bne.n	801348e <lv_font_get_bitmap_fmt_txt+0x6e>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8013462:	68d8      	ldr	r0, [r3, #12]
 8013464:	88db      	ldrh	r3, [r3, #6]
 8013466:	5c80      	ldrb	r0, [r0, r2]
 8013468:	18c0      	adds	r0, r0, r3
        if(fdsc->cache) {
 801346a:	2900      	cmp	r1, #0
 801346c:	d001      	beq.n	8013472 <lv_font_get_bitmap_fmt_txt+0x52>
            fdsc->cache->last_letter = letter;
 801346e:	600d      	str	r5, [r1, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 8013470:	6048      	str	r0, [r1, #4]
    if(!gid) return NULL;
 8013472:	2800      	cmp	r0, #0
 8013474:	d014      	beq.n	80134a0 <lv_font_get_bitmap_fmt_txt+0x80>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 8013476:	223f      	movs	r2, #63	; 0x3f
 8013478:	7ce3      	ldrb	r3, [r4, #19]
 801347a:	4393      	bics	r3, r2
 801347c:	d110      	bne.n	80134a0 <lv_font_get_bitmap_fmt_txt+0x80>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 801347e:	6863      	ldr	r3, [r4, #4]
 8013480:	00c0      	lsls	r0, r0, #3
 8013482:	58c0      	ldr	r0, [r0, r3]
 8013484:	0300      	lsls	r0, r0, #12
 8013486:	0b03      	lsrs	r3, r0, #12
 8013488:	6820      	ldr	r0, [r4, #0]
 801348a:	18c0      	adds	r0, r0, r3
 801348c:	e009      	b.n	80134a2 <lv_font_get_bitmap_fmt_txt+0x82>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 801348e:	2803      	cmp	r0, #3
 8013490:	d020      	beq.n	80134d4 <lv_font_get_bitmap_fmt_txt+0xb4>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8013492:	2801      	cmp	r0, #1
 8013494:	d034      	beq.n	8013500 <lv_font_get_bitmap_fmt_txt+0xe0>
    if(fdsc->cache) {
 8013496:	2900      	cmp	r1, #0
 8013498:	d002      	beq.n	80134a0 <lv_font_get_bitmap_fmt_txt+0x80>
        fdsc->cache->last_glyph_id = 0;
 801349a:	2300      	movs	r3, #0
        fdsc->cache->last_letter = letter;
 801349c:	600d      	str	r5, [r1, #0]
        fdsc->cache->last_glyph_id = 0;
 801349e:	604b      	str	r3, [r1, #4]
    if(!gid) return NULL;
 80134a0:	2000      	movs	r0, #0
}
 80134a2:	b005      	add	sp, #20
 80134a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 80134a6:	6961      	ldr	r1, [r4, #20]
    if(unicode_letter == '\t') unicode_letter = ' ';
 80134a8:	3517      	adds	r5, #23
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 80134aa:	2900      	cmp	r1, #0
 80134ac:	d1c3      	bne.n	8013436 <lv_font_get_bitmap_fmt_txt+0x16>
    for(i = 0; i < fdsc->cmap_num; i++) {
 80134ae:	8a63      	ldrh	r3, [r4, #18]
 80134b0:	05db      	lsls	r3, r3, #23
 80134b2:	0dda      	lsrs	r2, r3, #23
 80134b4:	4694      	mov	ip, r2
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d1c6      	bne.n	8013448 <lv_font_get_bitmap_fmt_txt+0x28>
 80134ba:	e7f1      	b.n	80134a0 <lv_font_get_bitmap_fmt_txt+0x80>
 80134bc:	3001      	adds	r0, #1
 80134be:	b280      	uxth	r0, r0
 80134c0:	3614      	adds	r6, #20
 80134c2:	3314      	adds	r3, #20
 80134c4:	4560      	cmp	r0, ip
 80134c6:	d3c2      	bcc.n	801344e <lv_font_get_bitmap_fmt_txt+0x2e>
 80134c8:	e7e5      	b.n	8013496 <lv_font_get_bitmap_fmt_txt+0x76>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 80134ca:	88d8      	ldrh	r0, [r3, #6]
 80134cc:	1880      	adds	r0, r0, r2
 80134ce:	e7cc      	b.n	801346a <lv_font_get_bitmap_fmt_txt+0x4a>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 80134d0:	6848      	ldr	r0, [r1, #4]
 80134d2:	e7ce      	b.n	8013472 <lv_font_get_bitmap_fmt_txt+0x52>
            uint16_t key = rcp;
 80134d4:	300b      	adds	r0, #11
 80134d6:	4468      	add	r0, sp
 80134d8:	8002      	strh	r2, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80134da:	8a1a      	ldrh	r2, [r3, #16]
 80134dc:	6899      	ldr	r1, [r3, #8]
 80134de:	4b17      	ldr	r3, [pc, #92]	; (801353c <lv_font_get_bitmap_fmt_txt+0x11c>)
 80134e0:	9300      	str	r3, [sp, #0]
 80134e2:	2302      	movs	r3, #2
 80134e4:	f003 fbb4 	bl	8016c50 <_lv_utils_bsearch>
            if(p) {
 80134e8:	2800      	cmp	r0, #0
 80134ea:	d020      	beq.n	801352e <lv_font_get_bitmap_fmt_txt+0x10e>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80134ec:	68a3      	ldr	r3, [r4, #8]
        if(fdsc->cache) {
 80134ee:	6961      	ldr	r1, [r4, #20]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80134f0:	469c      	mov	ip, r3
 80134f2:	4466      	add	r6, ip
 80134f4:	68b3      	ldr	r3, [r6, #8]
 80134f6:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 80134f8:	88f3      	ldrh	r3, [r6, #6]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80134fa:	1040      	asrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 80134fc:	18c0      	adds	r0, r0, r3
 80134fe:	e7b4      	b.n	801346a <lv_font_get_bitmap_fmt_txt+0x4a>
            uint16_t key = rcp;
 8013500:	200e      	movs	r0, #14
 8013502:	4468      	add	r0, sp
 8013504:	8002      	strh	r2, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8013506:	8a1a      	ldrh	r2, [r3, #16]
 8013508:	6899      	ldr	r1, [r3, #8]
 801350a:	4b0c      	ldr	r3, [pc, #48]	; (801353c <lv_font_get_bitmap_fmt_txt+0x11c>)
 801350c:	9300      	str	r3, [sp, #0]
 801350e:	2302      	movs	r3, #2
 8013510:	f003 fb9e 	bl	8016c50 <_lv_utils_bsearch>
            if(p) {
 8013514:	2800      	cmp	r0, #0
 8013516:	d00a      	beq.n	801352e <lv_font_get_bitmap_fmt_txt+0x10e>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8013518:	68a3      	ldr	r3, [r4, #8]
        if(fdsc->cache) {
 801351a:	6961      	ldr	r1, [r4, #20]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801351c:	469c      	mov	ip, r3
 801351e:	4466      	add	r6, ip
 8013520:	68b3      	ldr	r3, [r6, #8]
 8013522:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8013524:	68f3      	ldr	r3, [r6, #12]
 8013526:	5a18      	ldrh	r0, [r3, r0]
 8013528:	88f3      	ldrh	r3, [r6, #6]
 801352a:	18c0      	adds	r0, r0, r3
 801352c:	e79d      	b.n	801346a <lv_font_get_bitmap_fmt_txt+0x4a>
        if(fdsc->cache) {
 801352e:	6963      	ldr	r3, [r4, #20]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d0b5      	beq.n	80134a0 <lv_font_get_bitmap_fmt_txt+0x80>
            fdsc->cache->last_letter = letter;
 8013534:	601d      	str	r5, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 8013536:	6058      	str	r0, [r3, #4]
    if(!gid) return NULL;
 8013538:	e7b3      	b.n	80134a2 <lv_font_get_bitmap_fmt_txt+0x82>
 801353a:	46c0      	nop			; (mov r8, r8)
 801353c:	08013419 	.word	0x08013419

08013540 <lv_font_get_glyph_dsc_fmt_txt>:
{
 8013540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013542:	464e      	mov	r6, r9
 8013544:	4657      	mov	r7, sl
 8013546:	4645      	mov	r5, r8
 8013548:	46de      	mov	lr, fp
 801354a:	b5e0      	push	{r5, r6, r7, lr}
 801354c:	4699      	mov	r9, r3
 801354e:	0006      	movs	r6, r0
 8013550:	000c      	movs	r4, r1
 8013552:	4692      	mov	sl, r2
    if(unicode_letter == '\t') {
 8013554:	0013      	movs	r3, r2
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8013556:	6905      	ldr	r5, [r0, #16]
{
 8013558:	b087      	sub	sp, #28
    if(unicode_letter == '\t') {
 801355a:	2a09      	cmp	r2, #9
 801355c:	d00b      	beq.n	8013576 <lv_font_get_glyph_dsc_fmt_txt+0x36>
    if(letter == '\0') return 0;
 801355e:	2a00      	cmp	r2, #0
 8013560:	d000      	beq.n	8013564 <lv_font_get_glyph_dsc_fmt_txt+0x24>
 8013562:	e0af      	b.n	80136c4 <lv_font_get_glyph_dsc_fmt_txt+0x184>
    if(!gid) return false;
 8013564:	2700      	movs	r7, #0
}
 8013566:	0038      	movs	r0, r7
 8013568:	b007      	add	sp, #28
 801356a:	bcf0      	pop	{r4, r5, r6, r7}
 801356c:	46bb      	mov	fp, r7
 801356e:	46b2      	mov	sl, r6
 8013570:	46a9      	mov	r9, r5
 8013572:	46a0      	mov	r8, r4
 8013574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8013576:	6969      	ldr	r1, [r5, #20]
        unicode_letter = ' ';
 8013578:	3317      	adds	r3, #23
        is_tab = true;
 801357a:	2701      	movs	r7, #1
        unicode_letter = ' ';
 801357c:	469a      	mov	sl, r3
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 801357e:	2900      	cmp	r1, #0
 8013580:	d100      	bne.n	8013584 <lv_font_get_glyph_dsc_fmt_txt+0x44>
 8013582:	e0a4      	b.n	80136ce <lv_font_get_glyph_dsc_fmt_txt+0x18e>
 8013584:	680b      	ldr	r3, [r1, #0]
 8013586:	4553      	cmp	r3, sl
 8013588:	d100      	bne.n	801358c <lv_font_get_glyph_dsc_fmt_txt+0x4c>
 801358a:	e0df      	b.n	801374c <lv_font_get_glyph_dsc_fmt_txt+0x20c>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801358c:	8a6b      	ldrh	r3, [r5, #18]
 801358e:	05db      	lsls	r3, r3, #23
 8013590:	0dda      	lsrs	r2, r3, #23
 8013592:	4694      	mov	ip, r2
 8013594:	2b00      	cmp	r3, #0
 8013596:	d100      	bne.n	801359a <lv_font_get_glyph_dsc_fmt_txt+0x5a>
 8013598:	e0aa      	b.n	80136f0 <lv_font_get_glyph_dsc_fmt_txt+0x1b0>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801359a:	2200      	movs	r2, #0
 801359c:	2000      	movs	r0, #0
 801359e:	4693      	mov	fp, r2
 80135a0:	4662      	mov	r2, ip
 80135a2:	4680      	mov	r8, r0
 80135a4:	68ab      	ldr	r3, [r5, #8]
 80135a6:	9202      	str	r2, [sp, #8]
 80135a8:	4652      	mov	r2, sl
 80135aa:	6818      	ldr	r0, [r3, #0]
 80135ac:	1a12      	subs	r2, r2, r0
        if(rcp > fdsc->cmaps[i].range_length) continue;
 80135ae:	8898      	ldrh	r0, [r3, #4]
 80135b0:	4282      	cmp	r2, r0
 80135b2:	d900      	bls.n	80135b6 <lv_font_get_glyph_dsc_fmt_txt+0x76>
 80135b4:	e079      	b.n	80136aa <lv_font_get_glyph_dsc_fmt_txt+0x16a>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 80135b6:	7c98      	ldrb	r0, [r3, #18]
 80135b8:	2802      	cmp	r0, #2
 80135ba:	d100      	bne.n	80135be <lv_font_get_glyph_dsc_fmt_txt+0x7e>
 80135bc:	e0c2      	b.n	8013744 <lv_font_get_glyph_dsc_fmt_txt+0x204>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 80135be:	2800      	cmp	r0, #0
 80135c0:	d000      	beq.n	80135c4 <lv_font_get_glyph_dsc_fmt_txt+0x84>
 80135c2:	e08c      	b.n	80136de <lv_font_get_glyph_dsc_fmt_txt+0x19e>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 80135c4:	68d8      	ldr	r0, [r3, #12]
 80135c6:	88db      	ldrh	r3, [r3, #6]
 80135c8:	5c82      	ldrb	r2, [r0, r2]
 80135ca:	4690      	mov	r8, r2
 80135cc:	4498      	add	r8, r3
        if(fdsc->cache) {
 80135ce:	2900      	cmp	r1, #0
 80135d0:	d003      	beq.n	80135da <lv_font_get_glyph_dsc_fmt_txt+0x9a>
            fdsc->cache->last_letter = letter;
 80135d2:	4653      	mov	r3, sl
 80135d4:	600b      	str	r3, [r1, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 80135d6:	4643      	mov	r3, r8
 80135d8:	604b      	str	r3, [r1, #4]
    if(!gid) return false;
 80135da:	4643      	mov	r3, r8
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d0c1      	beq.n	8013564 <lv_font_get_glyph_dsc_fmt_txt+0x24>
    if(fdsc->kern_dsc) {
 80135e0:	68eb      	ldr	r3, [r5, #12]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d036      	beq.n	8013654 <lv_font_get_glyph_dsc_fmt_txt+0x114>
    if(letter == '\0') return 0;
 80135e6:	464b      	mov	r3, r9
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d033      	beq.n	8013654 <lv_font_get_glyph_dsc_fmt_txt+0x114>
 80135ec:	6933      	ldr	r3, [r6, #16]
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 80135ee:	6959      	ldr	r1, [r3, #20]
 80135f0:	469a      	mov	sl, r3
 80135f2:	2900      	cmp	r1, #0
 80135f4:	d100      	bne.n	80135f8 <lv_font_get_glyph_dsc_fmt_txt+0xb8>
 80135f6:	e0b9      	b.n	801376c <lv_font_get_glyph_dsc_fmt_txt+0x22c>
 80135f8:	680b      	ldr	r3, [r1, #0]
 80135fa:	4599      	cmp	r9, r3
 80135fc:	d100      	bne.n	8013600 <lv_font_get_glyph_dsc_fmt_txt+0xc0>
 80135fe:	e10b      	b.n	8013818 <lv_font_get_glyph_dsc_fmt_txt+0x2d8>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8013600:	4653      	mov	r3, sl
 8013602:	8a5b      	ldrh	r3, [r3, #18]
 8013604:	05db      	lsls	r3, r3, #23
 8013606:	0dda      	lsrs	r2, r3, #23
 8013608:	9203      	str	r2, [sp, #12]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d100      	bne.n	8013610 <lv_font_get_glyph_dsc_fmt_txt+0xd0>
 801360e:	e0bd      	b.n	801378c <lv_font_get_glyph_dsc_fmt_txt+0x24c>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8013610:	2200      	movs	r2, #0
 8013612:	2000      	movs	r0, #0
 8013614:	4653      	mov	r3, sl
 8013616:	4693      	mov	fp, r2
 8013618:	4652      	mov	r2, sl
 801361a:	4684      	mov	ip, r0
 801361c:	689b      	ldr	r3, [r3, #8]
 801361e:	9202      	str	r2, [sp, #8]
 8013620:	464a      	mov	r2, r9
 8013622:	6818      	ldr	r0, [r3, #0]
 8013624:	1a12      	subs	r2, r2, r0
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8013626:	8898      	ldrh	r0, [r3, #4]
 8013628:	4282      	cmp	r2, r0
 801362a:	d900      	bls.n	801362e <lv_font_get_glyph_dsc_fmt_txt+0xee>
 801362c:	e091      	b.n	8013752 <lv_font_get_glyph_dsc_fmt_txt+0x212>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 801362e:	9802      	ldr	r0, [sp, #8]
 8013630:	4682      	mov	sl, r0
 8013632:	7c98      	ldrb	r0, [r3, #18]
 8013634:	2802      	cmp	r0, #2
 8013636:	d004      	beq.n	8013642 <lv_font_get_glyph_dsc_fmt_txt+0x102>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8013638:	2800      	cmp	r0, #0
 801363a:	d000      	beq.n	801363e <lv_font_get_glyph_dsc_fmt_txt+0xfe>
 801363c:	e09e      	b.n	801377c <lv_font_get_glyph_dsc_fmt_txt+0x23c>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 801363e:	68d8      	ldr	r0, [r3, #12]
 8013640:	5c82      	ldrb	r2, [r0, r2]
 8013642:	88db      	ldrh	r3, [r3, #6]
 8013644:	18d2      	adds	r2, r2, r3
        if(fdsc->cache) {
 8013646:	2900      	cmp	r1, #0
 8013648:	d002      	beq.n	8013650 <lv_font_get_glyph_dsc_fmt_txt+0x110>
            fdsc->cache->last_letter = letter;
 801364a:	464b      	mov	r3, r9
            fdsc->cache->last_glyph_id = glyph_id;
 801364c:	604a      	str	r2, [r1, #4]
            fdsc->cache->last_letter = letter;
 801364e:	600b      	str	r3, [r1, #0]
        if(gid_next) {
 8013650:	2a00      	cmp	r2, #0
 8013652:	d152      	bne.n	80136fa <lv_font_get_glyph_dsc_fmt_txt+0x1ba>
 8013654:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8013656:	4642      	mov	r2, r8
 8013658:	00d1      	lsls	r1, r2, #3
 801365a:	686a      	ldr	r2, [r5, #4]
 801365c:	4694      	mov	ip, r2
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 801365e:	8a2a      	ldrh	r2, [r5, #16]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8013660:	4461      	add	r1, ip
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8013662:	435a      	muls	r2, r3
    uint32_t adv_w = gdsc->adv_w;
 8013664:	8848      	ldrh	r0, [r1, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8013666:	1112      	asrs	r2, r2, #4
    uint32_t adv_w = gdsc->adv_w;
 8013668:	0900      	lsrs	r0, r0, #4
    if(is_tab) adv_w *= 2;
 801366a:	2f00      	cmp	r7, #0
 801366c:	d000      	beq.n	8013670 <lv_font_get_glyph_dsc_fmt_txt+0x130>
 801366e:	0040      	lsls	r0, r0, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8013670:	0013      	movs	r3, r2
 8013672:	3308      	adds	r3, #8
 8013674:	181b      	adds	r3, r3, r0
 8013676:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 8013678:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_h = gdsc->box_h;
 801367a:	794b      	ldrb	r3, [r1, #5]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 801367c:	7cea      	ldrb	r2, [r5, #19]
    dsc_out->box_h = gdsc->box_h;
 801367e:	8123      	strh	r3, [r4, #8]
    dsc_out->ofs_x = gdsc->ofs_x;
 8013680:	2306      	movs	r3, #6
    dsc_out->box_w = gdsc->box_w;
 8013682:	7908      	ldrb	r0, [r1, #4]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 8013684:	06d2      	lsls	r2, r2, #27
    dsc_out->box_w = gdsc->box_w;
 8013686:	80e0      	strh	r0, [r4, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 8013688:	56cb      	ldrsb	r3, [r1, r3]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 801368a:	0f12      	lsrs	r2, r2, #28
    dsc_out->ofs_x = gdsc->ofs_x;
 801368c:	8163      	strh	r3, [r4, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 801368e:	2307      	movs	r3, #7
 8013690:	56cb      	ldrsb	r3, [r1, r3]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 8013692:	211f      	movs	r1, #31
    dsc_out->ofs_y = gdsc->ofs_y;
 8013694:	81a3      	strh	r3, [r4, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 8013696:	7ba3      	ldrb	r3, [r4, #14]
 8013698:	400a      	ands	r2, r1
 801369a:	438b      	bics	r3, r1
 801369c:	4313      	orrs	r3, r2
 801369e:	73a3      	strb	r3, [r4, #14]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 80136a0:	2f00      	cmp	r7, #0
 80136a2:	d04d      	beq.n	8013740 <lv_font_get_glyph_dsc_fmt_txt+0x200>
 80136a4:	0040      	lsls	r0, r0, #1
 80136a6:	80e0      	strh	r0, [r4, #6]
 80136a8:	e75d      	b.n	8013566 <lv_font_get_glyph_dsc_fmt_txt+0x26>
    for(i = 0; i < fdsc->cmap_num; i++) {
 80136aa:	4642      	mov	r2, r8
 80136ac:	3201      	adds	r2, #1
 80136ae:	b292      	uxth	r2, r2
 80136b0:	4690      	mov	r8, r2
 80136b2:	2214      	movs	r2, #20
 80136b4:	4694      	mov	ip, r2
 80136b6:	9a02      	ldr	r2, [sp, #8]
 80136b8:	44e3      	add	fp, ip
 80136ba:	3314      	adds	r3, #20
 80136bc:	4590      	cmp	r8, r2
 80136be:	d200      	bcs.n	80136c2 <lv_font_get_glyph_dsc_fmt_txt+0x182>
 80136c0:	e772      	b.n	80135a8 <lv_font_get_glyph_dsc_fmt_txt+0x68>
 80136c2:	e012      	b.n	80136ea <lv_font_get_glyph_dsc_fmt_txt+0x1aa>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 80136c4:	6969      	ldr	r1, [r5, #20]
    bool is_tab = false;
 80136c6:	2700      	movs	r7, #0
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 80136c8:	2900      	cmp	r1, #0
 80136ca:	d000      	beq.n	80136ce <lv_font_get_glyph_dsc_fmt_txt+0x18e>
 80136cc:	e75a      	b.n	8013584 <lv_font_get_glyph_dsc_fmt_txt+0x44>
    for(i = 0; i < fdsc->cmap_num; i++) {
 80136ce:	8a6b      	ldrh	r3, [r5, #18]
 80136d0:	05db      	lsls	r3, r3, #23
 80136d2:	0dda      	lsrs	r2, r3, #23
 80136d4:	4694      	mov	ip, r2
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d000      	beq.n	80136dc <lv_font_get_glyph_dsc_fmt_txt+0x19c>
 80136da:	e75e      	b.n	801359a <lv_font_get_glyph_dsc_fmt_txt+0x5a>
 80136dc:	e742      	b.n	8013564 <lv_font_get_glyph_dsc_fmt_txt+0x24>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 80136de:	2803      	cmp	r0, #3
 80136e0:	d100      	bne.n	80136e4 <lv_font_get_glyph_dsc_fmt_txt+0x1a4>
 80136e2:	e084      	b.n	80137ee <lv_font_get_glyph_dsc_fmt_txt+0x2ae>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 80136e4:	2801      	cmp	r0, #1
 80136e6:	d100      	bne.n	80136ea <lv_font_get_glyph_dsc_fmt_txt+0x1aa>
 80136e8:	e098      	b.n	801381c <lv_font_get_glyph_dsc_fmt_txt+0x2dc>
    if(fdsc->cache) {
 80136ea:	2900      	cmp	r1, #0
 80136ec:	d100      	bne.n	80136f0 <lv_font_get_glyph_dsc_fmt_txt+0x1b0>
 80136ee:	e739      	b.n	8013564 <lv_font_get_glyph_dsc_fmt_txt+0x24>
        fdsc->cache->last_letter = letter;
 80136f0:	4653      	mov	r3, sl
 80136f2:	600b      	str	r3, [r1, #0]
        fdsc->cache->last_glyph_id = 0;
 80136f4:	2300      	movs	r3, #0
 80136f6:	604b      	str	r3, [r1, #4]
 80136f8:	e734      	b.n	8013564 <lv_font_get_glyph_dsc_fmt_txt+0x24>
            kvalue = get_kern_value(font, gid, gid_next);
 80136fa:	6933      	ldr	r3, [r6, #16]
    if(fdsc->kern_classes == 0) {
 80136fc:	7cd9      	ldrb	r1, [r3, #19]
 80136fe:	0689      	lsls	r1, r1, #26
 8013700:	d449      	bmi.n	8013796 <lv_font_get_glyph_dsc_fmt_txt+0x256>
        if(kdsc->glyph_ids_size == 0) {
 8013702:	213f      	movs	r1, #63	; 0x3f
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 8013704:	68de      	ldr	r6, [r3, #12]
        if(kdsc->glyph_ids_size == 0) {
 8013706:	7af3      	ldrb	r3, [r6, #11]
 8013708:	438b      	bics	r3, r1
 801370a:	d100      	bne.n	801370e <lv_font_get_glyph_dsc_fmt_txt+0x1ce>
 801370c:	e0a5      	b.n	801385a <lv_font_get_glyph_dsc_fmt_txt+0x31a>
        else if(kdsc->glyph_ids_size == 1) {
 801370e:	2b40      	cmp	r3, #64	; 0x40
 8013710:	d1a0      	bne.n	8013654 <lv_font_get_glyph_dsc_fmt_txt+0x114>
            const uint32_t * g_ids = kdsc->glyph_ids;
 8013712:	6833      	ldr	r3, [r6, #0]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 8013714:	0412      	lsls	r2, r2, #16
            const uint32_t * g_ids = kdsc->glyph_ids;
 8013716:	4699      	mov	r9, r3
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8013718:	68b3      	ldr	r3, [r6, #8]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 801371a:	4442      	add	r2, r8
 801371c:	9205      	str	r2, [sp, #20]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 801371e:	009a      	lsls	r2, r3, #2
 8013720:	4b6a      	ldr	r3, [pc, #424]	; (80138cc <lv_font_get_glyph_dsc_fmt_txt+0x38c>)
 8013722:	4649      	mov	r1, r9
 8013724:	9300      	str	r3, [sp, #0]
 8013726:	0892      	lsrs	r2, r2, #2
 8013728:	2304      	movs	r3, #4
 801372a:	a805      	add	r0, sp, #20
 801372c:	f003 fa90 	bl	8016c50 <_lv_utils_bsearch>
            if(kid_p) {
 8013730:	2800      	cmp	r0, #0
 8013732:	d08f      	beq.n	8013654 <lv_font_get_glyph_dsc_fmt_txt+0x114>
                lv_uintptr_t ofs = kid_p - g_ids;
 8013734:	464b      	mov	r3, r9
 8013736:	1ac0      	subs	r0, r0, r3
                value = kdsc->values[ofs];
 8013738:	6873      	ldr	r3, [r6, #4]
                lv_uintptr_t ofs = kid_p - g_ids;
 801373a:	1080      	asrs	r0, r0, #2
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 801373c:	561b      	ldrsb	r3, [r3, r0]
 801373e:	e78a      	b.n	8013656 <lv_font_get_glyph_dsc_fmt_txt+0x116>
    return true;
 8013740:	2701      	movs	r7, #1
 8013742:	e710      	b.n	8013566 <lv_font_get_glyph_dsc_fmt_txt+0x26>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8013744:	88db      	ldrh	r3, [r3, #6]
 8013746:	4698      	mov	r8, r3
 8013748:	4490      	add	r8, r2
 801374a:	e740      	b.n	80135ce <lv_font_get_glyph_dsc_fmt_txt+0x8e>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 801374c:	684b      	ldr	r3, [r1, #4]
 801374e:	4698      	mov	r8, r3
 8013750:	e743      	b.n	80135da <lv_font_get_glyph_dsc_fmt_txt+0x9a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8013752:	4662      	mov	r2, ip
 8013754:	3201      	adds	r2, #1
 8013756:	b292      	uxth	r2, r2
 8013758:	4694      	mov	ip, r2
 801375a:	2214      	movs	r2, #20
 801375c:	4692      	mov	sl, r2
 801375e:	9a03      	ldr	r2, [sp, #12]
 8013760:	44d3      	add	fp, sl
 8013762:	3314      	adds	r3, #20
 8013764:	4594      	cmp	ip, r2
 8013766:	d200      	bcs.n	801376a <lv_font_get_glyph_dsc_fmt_txt+0x22a>
 8013768:	e75a      	b.n	8013620 <lv_font_get_glyph_dsc_fmt_txt+0xe0>
 801376a:	e00c      	b.n	8013786 <lv_font_get_glyph_dsc_fmt_txt+0x246>
 801376c:	8a5b      	ldrh	r3, [r3, #18]
 801376e:	05db      	lsls	r3, r3, #23
 8013770:	0dda      	lsrs	r2, r3, #23
 8013772:	9203      	str	r2, [sp, #12]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d000      	beq.n	801377a <lv_font_get_glyph_dsc_fmt_txt+0x23a>
 8013778:	e74a      	b.n	8013610 <lv_font_get_glyph_dsc_fmt_txt+0xd0>
 801377a:	e76b      	b.n	8013654 <lv_font_get_glyph_dsc_fmt_txt+0x114>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 801377c:	2803      	cmp	r0, #3
 801377e:	d020      	beq.n	80137c2 <lv_font_get_glyph_dsc_fmt_txt+0x282>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8013780:	2801      	cmp	r0, #1
 8013782:	d100      	bne.n	8013786 <lv_font_get_glyph_dsc_fmt_txt+0x246>
 8013784:	e081      	b.n	801388a <lv_font_get_glyph_dsc_fmt_txt+0x34a>
    if(fdsc->cache) {
 8013786:	2900      	cmp	r1, #0
 8013788:	d100      	bne.n	801378c <lv_font_get_glyph_dsc_fmt_txt+0x24c>
 801378a:	e763      	b.n	8013654 <lv_font_get_glyph_dsc_fmt_txt+0x114>
        fdsc->cache->last_letter = letter;
 801378c:	464b      	mov	r3, r9
 801378e:	600b      	str	r3, [r1, #0]
        fdsc->cache->last_glyph_id = 0;
 8013790:	2300      	movs	r3, #0
 8013792:	604b      	str	r3, [r1, #4]
        if(gid_next) {
 8013794:	e75f      	b.n	8013656 <lv_font_get_glyph_dsc_fmt_txt+0x116>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8013796:	4640      	mov	r0, r8
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 8013798:	68db      	ldr	r3, [r3, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 801379a:	6859      	ldr	r1, [r3, #4]
 801379c:	5c09      	ldrb	r1, [r1, r0]
        if(left_class > 0 && right_class > 0) {
 801379e:	2900      	cmp	r1, #0
 80137a0:	d100      	bne.n	80137a4 <lv_font_get_glyph_dsc_fmt_txt+0x264>
 80137a2:	e757      	b.n	8013654 <lv_font_get_glyph_dsc_fmt_txt+0x114>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 80137a4:	6898      	ldr	r0, [r3, #8]
 80137a6:	5c82      	ldrb	r2, [r0, r2]
        if(left_class > 0 && right_class > 0) {
 80137a8:	2a00      	cmp	r2, #0
 80137aa:	d100      	bne.n	80137ae <lv_font_get_glyph_dsc_fmt_txt+0x26e>
 80137ac:	e752      	b.n	8013654 <lv_font_get_glyph_dsc_fmt_txt+0x114>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 80137ae:	7b58      	ldrb	r0, [r3, #13]
 80137b0:	3901      	subs	r1, #1
 80137b2:	4348      	muls	r0, r1
 80137b4:	6819      	ldr	r1, [r3, #0]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 80137b6:	2301      	movs	r3, #1
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 80137b8:	1889      	adds	r1, r1, r2
 80137ba:	1809      	adds	r1, r1, r0
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 80137bc:	425b      	negs	r3, r3
 80137be:	56cb      	ldrsb	r3, [r1, r3]
 80137c0:	e749      	b.n	8013656 <lv_font_get_glyph_dsc_fmt_txt+0x116>
            uint16_t key = rcp;
 80137c2:	a805      	add	r0, sp, #20
 80137c4:	8002      	strh	r2, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80137c6:	8a1a      	ldrh	r2, [r3, #16]
 80137c8:	6899      	ldr	r1, [r3, #8]
 80137ca:	4b41      	ldr	r3, [pc, #260]	; (80138d0 <lv_font_get_glyph_dsc_fmt_txt+0x390>)
 80137cc:	9300      	str	r3, [sp, #0]
 80137ce:	2302      	movs	r3, #2
 80137d0:	f003 fa3e 	bl	8016c50 <_lv_utils_bsearch>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80137d4:	4653      	mov	r3, sl
            if(p) {
 80137d6:	2800      	cmp	r0, #0
 80137d8:	d06e      	beq.n	80138b8 <lv_font_get_glyph_dsc_fmt_txt+0x378>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80137da:	689b      	ldr	r3, [r3, #8]
 80137dc:	445b      	add	r3, fp
 80137de:	689a      	ldr	r2, [r3, #8]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 80137e0:	88db      	ldrh	r3, [r3, #6]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80137e2:	1a82      	subs	r2, r0, r2
 80137e4:	1052      	asrs	r2, r2, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 80137e6:	18d2      	adds	r2, r2, r3
        if(fdsc->cache) {
 80137e8:	4653      	mov	r3, sl
 80137ea:	6959      	ldr	r1, [r3, #20]
 80137ec:	e72b      	b.n	8013646 <lv_font_get_glyph_dsc_fmt_txt+0x106>
            uint16_t key = rcp;
 80137ee:	a805      	add	r0, sp, #20
 80137f0:	8002      	strh	r2, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80137f2:	8a1a      	ldrh	r2, [r3, #16]
 80137f4:	6899      	ldr	r1, [r3, #8]
 80137f6:	4b36      	ldr	r3, [pc, #216]	; (80138d0 <lv_font_get_glyph_dsc_fmt_txt+0x390>)
 80137f8:	9300      	str	r3, [sp, #0]
 80137fa:	2302      	movs	r3, #2
 80137fc:	f003 fa28 	bl	8016c50 <_lv_utils_bsearch>
            if(p) {
 8013800:	2800      	cmp	r0, #0
 8013802:	d021      	beq.n	8013848 <lv_font_get_glyph_dsc_fmt_txt+0x308>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8013804:	68ab      	ldr	r3, [r5, #8]
        if(fdsc->cache) {
 8013806:	6969      	ldr	r1, [r5, #20]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8013808:	445b      	add	r3, fp
 801380a:	689a      	ldr	r2, [r3, #8]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 801380c:	88db      	ldrh	r3, [r3, #6]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801380e:	1a80      	subs	r0, r0, r2
 8013810:	1040      	asrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8013812:	4680      	mov	r8, r0
 8013814:	4498      	add	r8, r3
 8013816:	e6da      	b.n	80135ce <lv_font_get_glyph_dsc_fmt_txt+0x8e>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8013818:	684a      	ldr	r2, [r1, #4]
 801381a:	e719      	b.n	8013650 <lv_font_get_glyph_dsc_fmt_txt+0x110>
            uint16_t key = rcp;
 801381c:	a805      	add	r0, sp, #20
 801381e:	8002      	strh	r2, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8013820:	8a1a      	ldrh	r2, [r3, #16]
 8013822:	6899      	ldr	r1, [r3, #8]
 8013824:	4b2a      	ldr	r3, [pc, #168]	; (80138d0 <lv_font_get_glyph_dsc_fmt_txt+0x390>)
 8013826:	9300      	str	r3, [sp, #0]
 8013828:	2302      	movs	r3, #2
 801382a:	f003 fa11 	bl	8016c50 <_lv_utils_bsearch>
            if(p) {
 801382e:	2800      	cmp	r0, #0
 8013830:	d00a      	beq.n	8013848 <lv_font_get_glyph_dsc_fmt_txt+0x308>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8013832:	68ab      	ldr	r3, [r5, #8]
        if(fdsc->cache) {
 8013834:	6969      	ldr	r1, [r5, #20]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8013836:	445b      	add	r3, fp
 8013838:	689a      	ldr	r2, [r3, #8]
 801383a:	1a80      	subs	r0, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 801383c:	68da      	ldr	r2, [r3, #12]
 801383e:	88db      	ldrh	r3, [r3, #6]
 8013840:	5a12      	ldrh	r2, [r2, r0]
 8013842:	4690      	mov	r8, r2
 8013844:	4498      	add	r8, r3
 8013846:	e6c2      	b.n	80135ce <lv_font_get_glyph_dsc_fmt_txt+0x8e>
        if(fdsc->cache) {
 8013848:	696b      	ldr	r3, [r5, #20]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d100      	bne.n	8013850 <lv_font_get_glyph_dsc_fmt_txt+0x310>
 801384e:	e689      	b.n	8013564 <lv_font_get_glyph_dsc_fmt_txt+0x24>
            fdsc->cache->last_letter = letter;
 8013850:	4652      	mov	r2, sl
    if(!gid) return false;
 8013852:	2700      	movs	r7, #0
            fdsc->cache->last_letter = letter;
 8013854:	601a      	str	r2, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 8013856:	6058      	str	r0, [r3, #4]
    if(!gid) return false;
 8013858:	e685      	b.n	8013566 <lv_font_get_glyph_dsc_fmt_txt+0x26>
            const uint16_t * g_ids = kdsc->glyph_ids;
 801385a:	6833      	ldr	r3, [r6, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 801385c:	0212      	lsls	r2, r2, #8
            const uint16_t * g_ids = kdsc->glyph_ids;
 801385e:	4699      	mov	r9, r3
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8013860:	68b3      	ldr	r3, [r6, #8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8013862:	4442      	add	r2, r8
 8013864:	a805      	add	r0, sp, #20
 8013866:	8002      	strh	r2, [r0, #0]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8013868:	009a      	lsls	r2, r3, #2
 801386a:	4b1a      	ldr	r3, [pc, #104]	; (80138d4 <lv_font_get_glyph_dsc_fmt_txt+0x394>)
 801386c:	4649      	mov	r1, r9
 801386e:	9300      	str	r3, [sp, #0]
 8013870:	0892      	lsrs	r2, r2, #2
 8013872:	2302      	movs	r3, #2
 8013874:	f003 f9ec 	bl	8016c50 <_lv_utils_bsearch>
            if(kid_p) {
 8013878:	2800      	cmp	r0, #0
 801387a:	d100      	bne.n	801387e <lv_font_get_glyph_dsc_fmt_txt+0x33e>
 801387c:	e6ea      	b.n	8013654 <lv_font_get_glyph_dsc_fmt_txt+0x114>
                lv_uintptr_t ofs = kid_p - g_ids;
 801387e:	464b      	mov	r3, r9
 8013880:	1ac0      	subs	r0, r0, r3
                value = kdsc->values[ofs];
 8013882:	6873      	ldr	r3, [r6, #4]
                lv_uintptr_t ofs = kid_p - g_ids;
 8013884:	1040      	asrs	r0, r0, #1
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8013886:	561b      	ldrsb	r3, [r3, r0]
 8013888:	e6e5      	b.n	8013656 <lv_font_get_glyph_dsc_fmt_txt+0x116>
            uint16_t key = rcp;
 801388a:	a805      	add	r0, sp, #20
 801388c:	8002      	strh	r2, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801388e:	8a1a      	ldrh	r2, [r3, #16]
 8013890:	6899      	ldr	r1, [r3, #8]
 8013892:	4b0f      	ldr	r3, [pc, #60]	; (80138d0 <lv_font_get_glyph_dsc_fmt_txt+0x390>)
 8013894:	9300      	str	r3, [sp, #0]
 8013896:	2302      	movs	r3, #2
 8013898:	f003 f9da 	bl	8016c50 <_lv_utils_bsearch>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801389c:	4653      	mov	r3, sl
            if(p) {
 801389e:	2800      	cmp	r0, #0
 80138a0:	d00a      	beq.n	80138b8 <lv_font_get_glyph_dsc_fmt_txt+0x378>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80138a2:	689b      	ldr	r3, [r3, #8]
 80138a4:	445b      	add	r3, fp
 80138a6:	689a      	ldr	r2, [r3, #8]
 80138a8:	1a80      	subs	r0, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80138aa:	68da      	ldr	r2, [r3, #12]
 80138ac:	88db      	ldrh	r3, [r3, #6]
 80138ae:	5a12      	ldrh	r2, [r2, r0]
 80138b0:	18d2      	adds	r2, r2, r3
        if(fdsc->cache) {
 80138b2:	4653      	mov	r3, sl
 80138b4:	6959      	ldr	r1, [r3, #20]
 80138b6:	e6c6      	b.n	8013646 <lv_font_get_glyph_dsc_fmt_txt+0x106>
 80138b8:	695b      	ldr	r3, [r3, #20]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d100      	bne.n	80138c0 <lv_font_get_glyph_dsc_fmt_txt+0x380>
 80138be:	e6c9      	b.n	8013654 <lv_font_get_glyph_dsc_fmt_txt+0x114>
            fdsc->cache->last_letter = letter;
 80138c0:	464a      	mov	r2, r9
            fdsc->cache->last_glyph_id = glyph_id;
 80138c2:	6058      	str	r0, [r3, #4]
            fdsc->cache->last_letter = letter;
 80138c4:	601a      	str	r2, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 80138c6:	2300      	movs	r3, #0
 80138c8:	e6c5      	b.n	8013656 <lv_font_get_glyph_dsc_fmt_txt+0x116>
 80138ca:	46c0      	nop			; (mov r8, r8)
 80138cc:	08013405 	.word	0x08013405
 80138d0:	08013419 	.word	0x08013419
 80138d4:	080133f1 	.word	0x080133f1

080138d8 <_lv_font_clean_up_fmt_txt>:
}
 80138d8:	4770      	bx	lr
 80138da:	46c0      	nop			; (mov r8, r8)

080138dc <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 80138dc:	b510      	push	{r4, lr}
 80138de:	0004      	movs	r4, r0
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 80138e0:	214c      	movs	r1, #76	; 0x4c
 80138e2:	f001 fe4f 	bl	8015584 <lv_memset_00>

    driver->hor_res          = 320;
 80138e6:	4b0b      	ldr	r3, [pc, #44]	; (8013914 <lv_disp_drv_init+0x38>)
    driver->ver_res          = 240;
    driver->physical_hor_res = -1;
    driver->physical_ver_res = -1;
    driver->offset_x         = 0;
    driver->offset_y         = 0;
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 80138e8:	4a0b      	ldr	r2, [pc, #44]	; (8013918 <lv_disp_drv_init+0x3c>)
    driver->hor_res          = 320;
 80138ea:	6023      	str	r3, [r4, #0]
 80138ec:	2301      	movs	r3, #1
 80138ee:	425b      	negs	r3, r3
 80138f0:	6063      	str	r3, [r4, #4]
 80138f2:	2300      	movs	r3, #0
 80138f4:	60a3      	str	r3, [r4, #8]
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 80138f6:	6923      	ldr	r3, [r4, #16]
 80138f8:	401a      	ands	r2, r3
 80138fa:	4b08      	ldr	r3, [pc, #32]	; (801391c <lv_disp_drv_init+0x40>)
 80138fc:	4313      	orrs	r3, r2
 80138fe:	6123      	str	r3, [r4, #16]
    driver->screen_transp    = 0;
    driver->dpi              = LV_DPI_DEF;
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 8013900:	23fc      	movs	r3, #252	; 0xfc
 8013902:	00db      	lsls	r3, r3, #3
 8013904:	8723      	strh	r3, [r4, #56]	; 0x38
#elif LV_USE_GPU_ARM2D
    driver->draw_ctx_init = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_deinit = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_size = sizeof(lv_draw_arm2d_ctx_t);
#else
    driver->draw_ctx_init = lv_draw_sw_init_ctx;
 8013906:	4b06      	ldr	r3, [pc, #24]	; (8013920 <lv_disp_drv_init+0x44>)
 8013908:	6423      	str	r3, [r4, #64]	; 0x40
    driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
 801390a:	6463      	str	r3, [r4, #68]	; 0x44
    driver->draw_ctx_size = sizeof(lv_draw_sw_ctx_t);
 801390c:	2350      	movs	r3, #80	; 0x50
 801390e:	64a3      	str	r3, [r4, #72]	; 0x48
#endif

}
 8013910:	bd10      	pop	{r4, pc}
 8013912:	46c0      	nop			; (mov r8, r8)
 8013914:	00f00140 	.word	0x00f00140
 8013918:	fffe0037 	.word	0xfffe0037
 801391c:	00004108 	.word	0x00004108
 8013920:	08010901 	.word	0x08010901

08013924 <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 8013924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013926:	0004      	movs	r4, r0
 8013928:	000d      	movs	r5, r1
 801392a:	0017      	movs	r7, r2
 801392c:	001e      	movs	r6, r3
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 801392e:	211c      	movs	r1, #28
 8013930:	f001 fe28 	bl	8015584 <lv_memset_00>

    draw_buf->buf1    = buf1;
 8013934:	6025      	str	r5, [r4, #0]
    draw_buf->buf2    = buf2;
 8013936:	6067      	str	r7, [r4, #4]
    draw_buf->buf_act = draw_buf->buf1;
 8013938:	60a5      	str	r5, [r4, #8]
    draw_buf->size    = size_in_px_cnt;
 801393a:	60e6      	str	r6, [r4, #12]
}
 801393c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801393e:	46c0      	nop			; (mov r8, r8)

08013940 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8013940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013942:	0006      	movs	r6, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 8013944:	483a      	ldr	r0, [pc, #232]	; (8013a30 <lv_disp_drv_register+0xf0>)
 8013946:	f001 f991 	bl	8014c6c <_lv_ll_ins_head>
 801394a:	1e04      	subs	r4, r0, #0
    LV_ASSERT_MALLOC(disp);
 801394c:	d05c      	beq.n	8013a08 <lv_disp_drv_register+0xc8>
    if(!disp) {
        return NULL;
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 801394e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8013950:	2b00      	cmp	r3, #0
 8013952:	d05b      	beq.n	8013a0c <lv_disp_drv_register+0xcc>
        if(draw_ctx == NULL) return NULL;
        driver->draw_ctx_init(driver, draw_ctx);
        driver->draw_ctx = draw_ctx;
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 8013954:	21ae      	movs	r1, #174	; 0xae
 8013956:	0020      	movs	r0, r4
 8013958:	0049      	lsls	r1, r1, #1
 801395a:	f001 fe13 	bl	8015584 <lv_memset_00>

    disp->driver = driver;

    disp->inv_en_cnt = 1;
 801395e:	23aa      	movs	r3, #170	; 0xaa
 8013960:	2201      	movs	r2, #1

    lv_disp_t * disp_def_tmp = disp_def;
 8013962:	4d34      	ldr	r5, [pc, #208]	; (8013a34 <lv_disp_drv_register+0xf4>)
    disp->inv_en_cnt = 1;
 8013964:	005b      	lsls	r3, r3, #1
    disp->driver = driver;
 8013966:	6026      	str	r6, [r4, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 8013968:	211e      	movs	r1, #30
    disp->inv_en_cnt = 1;
 801396a:	50e2      	str	r2, [r4, r3]
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 801396c:	4832      	ldr	r0, [pc, #200]	; (8013a38 <lv_disp_drv_register+0xf8>)
 801396e:	0022      	movs	r2, r4
    lv_disp_t * disp_def_tmp = disp_def;
 8013970:	682f      	ldr	r7, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 8013972:	602c      	str	r4, [r5, #0]
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 8013974:	f002 f9f0 	bl	8015d58 <lv_timer_create>
 8013978:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 801397a:	2800      	cmp	r0, #0
 801397c:	d045      	beq.n	8013a0a <lv_disp_drv_register+0xca>
    if(disp->refr_timer == NULL) {
        lv_mem_free(disp);
        return NULL;
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 801397e:	2202      	movs	r2, #2
 8013980:	7c33      	ldrb	r3, [r6, #16]
 8013982:	421a      	tst	r2, r3
 8013984:	d00a      	beq.n	801399c <lv_disp_drv_register+0x5c>
 8013986:	2100      	movs	r1, #0
 8013988:	5e70      	ldrsh	r0, [r6, r1]
 801398a:	4684      	mov	ip, r0
 801398c:	2002      	movs	r0, #2
 801398e:	5e31      	ldrsh	r1, [r6, r0]
 8013990:	4660      	mov	r0, ip
 8013992:	4341      	muls	r1, r0
 8013994:	68f0      	ldr	r0, [r6, #12]
 8013996:	68c0      	ldr	r0, [r0, #12]
 8013998:	4288      	cmp	r0, r1
 801399a:	d343      	bcc.n	8013a24 <lv_disp_drv_register+0xe4>

    disp->bg_color = lv_color_white();
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 801399c:	22ff      	movs	r2, #255	; 0xff
 801399e:	2329      	movs	r3, #41	; 0x29
 80139a0:	54e2      	strb	r2, [r4, r3]
    disp->bg_color = lv_color_white();
 80139a2:	3b2a      	subs	r3, #42	; 0x2a
 80139a4:	8563      	strh	r3, [r4, #42]	; 0x2a
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 80139a6:	2000      	movs	r0, #0
 80139a8:	f7f4 fa18 	bl	8007ddc <lv_obj_create>
 80139ac:	6120      	str	r0, [r4, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 80139ae:	2000      	movs	r0, #0
 80139b0:	f7f4 fa14 	bl	8007ddc <lv_obj_create>
 80139b4:	61e0      	str	r0, [r4, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 80139b6:	2000      	movs	r0, #0
 80139b8:	f7f4 fa10 	bl	8007ddc <lv_obj_create>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 80139bc:	2100      	movs	r1, #0
 80139be:	4a1f      	ldr	r2, [pc, #124]	; (8013a3c <lv_disp_drv_register+0xfc>)
 80139c0:	6220      	str	r0, [r4, #32]
 80139c2:	69e0      	ldr	r0, [r4, #28]
 80139c4:	f7f9 f8da 	bl	800cb7c <lv_obj_remove_style>
 80139c8:	4a1c      	ldr	r2, [pc, #112]	; (8013a3c <lv_disp_drv_register+0xfc>)
 80139ca:	2100      	movs	r1, #0
 80139cc:	6a20      	ldr	r0, [r4, #32]
 80139ce:	f7f9 f8d5 	bl	800cb7c <lv_obj_remove_style>
    lv_obj_remove_style_all(disp->top_layer);
    lv_obj_remove_style_all(disp->sys_layer);
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 80139d2:	2102      	movs	r1, #2
 80139d4:	69e0      	ldr	r0, [r4, #28]
 80139d6:	f7f4 fa49 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 80139da:	2102      	movs	r1, #2
 80139dc:	6a20      	ldr	r0, [r4, #32]
 80139de:	f7f4 fa45 	bl	8007e6c <lv_obj_clear_flag>

    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 80139e2:	2100      	movs	r1, #0
 80139e4:	69e0      	ldr	r0, [r4, #28]
 80139e6:	f7f7 f893 	bl	800ab10 <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 80139ea:	6a20      	ldr	r0, [r4, #32]
 80139ec:	2100      	movs	r1, #0
 80139ee:	f7f7 f88f 	bl	800ab10 <lv_obj_set_scrollbar_mode>

    lv_obj_invalidate(disp->act_scr);
 80139f2:	6920      	ldr	r0, [r4, #16]
 80139f4:	f7f5 fd0e 	bl	8009414 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 80139f8:	2f00      	cmp	r7, #0
 80139fa:	d016      	beq.n	8013a2a <lv_disp_drv_register+0xea>
    disp_def = disp_def_tmp; /*Revert the default display*/
 80139fc:	602f      	str	r7, [r5, #0]

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 80139fe:	6860      	ldr	r0, [r4, #4]
 8013a00:	f002 f9d6 	bl	8015db0 <lv_timer_ready>

    return disp;
}
 8013a04:	0020      	movs	r0, r4
 8013a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(disp);
 8013a08:	e7fe      	b.n	8013a08 <lv_disp_drv_register+0xc8>
    LV_ASSERT_MALLOC(disp->refr_timer);
 8013a0a:	e7fe      	b.n	8013a0a <lv_disp_drv_register+0xca>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 8013a0c:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8013a0e:	f001 fa37 	bl	8014e80 <lv_mem_alloc>
 8013a12:	1e05      	subs	r5, r0, #0
        LV_ASSERT_MALLOC(draw_ctx);
 8013a14:	d005      	beq.n	8013a22 <lv_disp_drv_register+0xe2>
        driver->draw_ctx_init(driver, draw_ctx);
 8013a16:	0001      	movs	r1, r0
 8013a18:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8013a1a:	0030      	movs	r0, r6
 8013a1c:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 8013a1e:	63f5      	str	r5, [r6, #60]	; 0x3c
 8013a20:	e798      	b.n	8013954 <lv_disp_drv_register+0x14>
        LV_ASSERT_MALLOC(draw_ctx);
 8013a22:	e7fe      	b.n	8013a22 <lv_disp_drv_register+0xe2>
        driver->full_refresh = 0;
 8013a24:	4393      	bics	r3, r2
 8013a26:	7433      	strb	r3, [r6, #16]
 8013a28:	e7b8      	b.n	801399c <lv_disp_drv_register+0x5c>
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 8013a2a:	602c      	str	r4, [r5, #0]
 8013a2c:	e7e7      	b.n	80139fe <lv_disp_drv_register+0xbe>
 8013a2e:	46c0      	nop			; (mov r8, r8)
 8013a30:	200005cc 	.word	0x200005cc
 8013a34:	200005a0 	.word	0x200005a0
 8013a38:	0800ecf5 	.word	0x0800ecf5
 8013a3c:	000fffff 	.word	0x000fffff

08013a40 <lv_disp_get_default>:
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
 8013a40:	4b01      	ldr	r3, [pc, #4]	; (8013a48 <lv_disp_get_default+0x8>)
 8013a42:	6818      	ldr	r0, [r3, #0]
}
 8013a44:	4770      	bx	lr
 8013a46:	46c0      	nop			; (mov r8, r8)
 8013a48:	200005a0 	.word	0x200005a0

08013a4c <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 8013a4c:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 8013a4e:	d009      	beq.n	8013a64 <lv_disp_get_hor_res+0x18>

    if(disp == NULL) {
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	7c1a      	ldrb	r2, [r3, #16]
 8013a54:	06d2      	lsls	r2, r2, #27
 8013a56:	d402      	bmi.n	8013a5e <lv_disp_get_hor_res+0x12>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
            default:
                return disp->driver->hor_res;
 8013a58:	2000      	movs	r0, #0
 8013a5a:	5e18      	ldrsh	r0, [r3, r0]
        }
    }
}
 8013a5c:	4770      	bx	lr
                return disp->driver->ver_res;
 8013a5e:	2002      	movs	r0, #2
 8013a60:	5e18      	ldrsh	r0, [r3, r0]
 8013a62:	e7fb      	b.n	8013a5c <lv_disp_get_hor_res+0x10>
    return disp_def;
 8013a64:	4b02      	ldr	r3, [pc, #8]	; (8013a70 <lv_disp_get_hor_res+0x24>)
        return 0;
 8013a66:	2000      	movs	r0, #0
    return disp_def;
 8013a68:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) {
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d0f6      	beq.n	8013a5c <lv_disp_get_hor_res+0x10>
 8013a6e:	e7ef      	b.n	8013a50 <lv_disp_get_hor_res+0x4>
 8013a70:	200005a0 	.word	0x200005a0

08013a74 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 8013a74:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 8013a76:	d009      	beq.n	8013a8c <lv_disp_get_ver_res+0x18>

    if(disp == NULL) {
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	7c1a      	ldrb	r2, [r3, #16]
 8013a7c:	06d2      	lsls	r2, r2, #27
 8013a7e:	d402      	bmi.n	8013a86 <lv_disp_get_ver_res+0x12>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
            default:
                return disp->driver->ver_res;
 8013a80:	2002      	movs	r0, #2
 8013a82:	5e18      	ldrsh	r0, [r3, r0]
        }
    }
}
 8013a84:	4770      	bx	lr
                return disp->driver->hor_res;
 8013a86:	2000      	movs	r0, #0
 8013a88:	5e18      	ldrsh	r0, [r3, r0]
 8013a8a:	e7fb      	b.n	8013a84 <lv_disp_get_ver_res+0x10>
    return disp_def;
 8013a8c:	4b02      	ldr	r3, [pc, #8]	; (8013a98 <lv_disp_get_ver_res+0x24>)
        return 0;
 8013a8e:	2000      	movs	r0, #0
    return disp_def;
 8013a90:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) {
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d0f6      	beq.n	8013a84 <lv_disp_get_ver_res+0x10>
 8013a96:	e7ef      	b.n	8013a78 <lv_disp_get_ver_res+0x4>
 8013a98:	200005a0 	.word	0x200005a0

08013a9c <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8013a9c:	2800      	cmp	r0, #0
 8013a9e:	d004      	beq.n	8013aaa <lv_disp_get_dpi+0xe>
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
    return disp->driver->dpi;
 8013aa0:	6803      	ldr	r3, [r0, #0]
 8013aa2:	6918      	ldr	r0, [r3, #16]
 8013aa4:	03c0      	lsls	r0, r0, #15
 8013aa6:	0d80      	lsrs	r0, r0, #22
}
 8013aa8:	4770      	bx	lr
    return disp_def;
 8013aaa:	4b03      	ldr	r3, [pc, #12]	; (8013ab8 <lv_disp_get_dpi+0x1c>)
 8013aac:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	d1f6      	bne.n	8013aa0 <lv_disp_get_dpi+0x4>
 8013ab2:	2082      	movs	r0, #130	; 0x82
 8013ab4:	e7f8      	b.n	8013aa8 <lv_disp_get_dpi+0xc>
 8013ab6:	46c0      	nop			; (mov r8, r8)
 8013ab8:	200005a0 	.word	0x200005a0

08013abc <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->draw_buf->flushing = 0;
 8013abc:	2200      	movs	r2, #0
 8013abe:	68c3      	ldr	r3, [r0, #12]
 8013ac0:	611a      	str	r2, [r3, #16]
    disp_drv->draw_buf->flushing_last = 0;
 8013ac2:	615a      	str	r2, [r3, #20]
}
 8013ac4:	4770      	bx	lr
 8013ac6:	46c0      	nop			; (mov r8, r8)

08013ac8 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
 8013ac8:	0001      	movs	r1, r0
 8013aca:	b510      	push	{r4, lr}
    if(disp == NULL)
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8013acc:	4804      	ldr	r0, [pc, #16]	; (8013ae0 <lv_disp_get_next+0x18>)
    if(disp == NULL)
 8013ace:	2900      	cmp	r1, #0
 8013ad0:	d002      	beq.n	8013ad8 <lv_disp_get_next+0x10>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 8013ad2:	f001 f931 	bl	8014d38 <_lv_ll_get_next>
}
 8013ad6:	bd10      	pop	{r4, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8013ad8:	f001 f922 	bl	8014d20 <_lv_ll_get_head>
 8013adc:	e7fb      	b.n	8013ad6 <lv_disp_get_next+0xe>
 8013ade:	46c0      	nop			; (mov r8, r8)
 8013ae0:	200005cc 	.word	0x200005cc

08013ae4 <lv_disp_get_draw_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
    return disp->driver->draw_buf;
 8013ae4:	6803      	ldr	r3, [r0, #0]
 8013ae6:	68d8      	ldr	r0, [r3, #12]
}
 8013ae8:	4770      	bx	lr
 8013aea:	46c0      	nop			; (mov r8, r8)

08013aec <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
 8013aec:	b510      	push	{r4, lr}
    lv_memset_00(driver, sizeof(lv_indev_drv_t));
 8013aee:	211c      	movs	r1, #28
{
 8013af0:	0004      	movs	r4, r0
    lv_memset_00(driver, sizeof(lv_indev_drv_t));
 8013af2:	f001 fd47 	bl	8015584 <lv_memset_00>

    driver->type                 = LV_INDEV_TYPE_NONE;
 8013af6:	2300      	movs	r3, #0
 8013af8:	7023      	strb	r3, [r4, #0]
    driver->scroll_limit         = LV_INDEV_DEF_SCROLL_LIMIT;
    driver->scroll_throw         = LV_INDEV_DEF_SCROLL_THROW;
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
 8013afa:	4b02      	ldr	r3, [pc, #8]	; (8013b04 <lv_indev_drv_init+0x18>)
 8013afc:	61a3      	str	r3, [r4, #24]
    driver->scroll_limit         = LV_INDEV_DEF_SCROLL_LIMIT;
 8013afe:	4b02      	ldr	r3, [pc, #8]	; (8013b08 <lv_indev_drv_init+0x1c>)
 8013b00:	6163      	str	r3, [r4, #20]
    driver->long_press_repeat_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
}
 8013b02:	bd10      	pop	{r4, pc}
 8013b04:	00640190 	.word	0x00640190
 8013b08:	32030a0a 	.word	0x32030a0a

08013b0c <lv_indev_drv_register>:
 * Only pointer is saved, so the driver should be static or dynamically allocated.
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 8013b0c:	68c3      	ldr	r3, [r0, #12]
{
 8013b0e:	b570      	push	{r4, r5, r6, lr}
 8013b10:	0005      	movs	r5, r0
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d015      	beq.n	8013b42 <lv_indev_drv_register+0x36>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 8013b16:	480e      	ldr	r0, [pc, #56]	; (8013b50 <lv_indev_drv_register+0x44>)
 8013b18:	f001 f8a8 	bl	8014c6c <_lv_ll_ins_head>
 8013b1c:	1e04      	subs	r4, r0, #0
    LV_ASSERT_MALLOC(indev);
 8013b1e:	d00f      	beq.n	8013b40 <lv_indev_drv_register+0x34>
    if(!indev) {
        return NULL;
    }

    lv_memset_00(indev, sizeof(lv_indev_t));
 8013b20:	2158      	movs	r1, #88	; 0x58
 8013b22:	f001 fd2f 	bl	8015584 <lv_memset_00>
    indev->driver = driver;

    indev->proc.reset_query  = 1;
 8013b26:	2202      	movs	r2, #2
 8013b28:	7963      	ldrb	r3, [r4, #5]
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 8013b2a:	211e      	movs	r1, #30
    indev->proc.reset_query  = 1;
 8013b2c:	4313      	orrs	r3, r2
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 8013b2e:	4809      	ldr	r0, [pc, #36]	; (8013b54 <lv_indev_drv_register+0x48>)
 8013b30:	0022      	movs	r2, r4
    indev->driver = driver;
 8013b32:	6025      	str	r5, [r4, #0]
    indev->proc.reset_query  = 1;
 8013b34:	7163      	strb	r3, [r4, #5]
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 8013b36:	f002 f90f 	bl	8015d58 <lv_timer_create>
 8013b3a:	6128      	str	r0, [r5, #16]

    return indev;
}
 8013b3c:	0020      	movs	r0, r4
 8013b3e:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MALLOC(indev);
 8013b40:	e7fe      	b.n	8013b40 <lv_indev_drv_register+0x34>
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 8013b42:	f7ff ff7d 	bl	8013a40 <lv_disp_get_default>
 8013b46:	1e04      	subs	r4, r0, #0
 8013b48:	60e8      	str	r0, [r5, #12]
    if(driver->disp == NULL) {
 8013b4a:	d0f7      	beq.n	8013b3c <lv_indev_drv_register+0x30>
 8013b4c:	e7e3      	b.n	8013b16 <lv_indev_drv_register+0xa>
 8013b4e:	46c0      	nop			; (mov r8, r8)
 8013b50:	20000628 	.word	0x20000628
 8013b54:	08005d71 	.word	0x08005d71

08013b58 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 8013b58:	0001      	movs	r1, r0
 8013b5a:	b510      	push	{r4, lr}
    if(indev == NULL)
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8013b5c:	4804      	ldr	r0, [pc, #16]	; (8013b70 <lv_indev_get_next+0x18>)
    if(indev == NULL)
 8013b5e:	2900      	cmp	r1, #0
 8013b60:	d002      	beq.n	8013b68 <lv_indev_get_next+0x10>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 8013b62:	f001 f8e9 	bl	8014d38 <_lv_ll_get_next>
}
 8013b66:	bd10      	pop	{r4, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8013b68:	f001 f8da 	bl	8014d20 <_lv_ll_get_head>
 8013b6c:	e7fb      	b.n	8013b66 <lv_indev_get_next+0xe>
 8013b6e:	46c0      	nop			; (mov r8, r8)
 8013b70:	20000628 	.word	0x20000628

08013b74 <_lv_indev_read>:
 * Read data from an input device.
 * @param indev pointer to an input device
 * @param data input device will write its data here
 */
void _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 8013b74:	b570      	push	{r4, r5, r6, lr}
 8013b76:	000c      	movs	r4, r1
 8013b78:	0005      	movs	r5, r0
    lv_memset_00(data, sizeof(lv_indev_data_t));
 8013b7a:	2110      	movs	r1, #16
 8013b7c:	0020      	movs	r0, r4
 8013b7e:	f001 fd01 	bl	8015584 <lv_memset_00>

    /* For touchpad sometimes users don't set the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver->type == LV_INDEV_TYPE_POINTER) {
 8013b82:	6828      	ldr	r0, [r5, #0]
 8013b84:	7803      	ldrb	r3, [r0, #0]
 8013b86:	2b01      	cmp	r3, #1
 8013b88:	d00e      	beq.n	8013ba8 <_lv_indev_read+0x34>
        data->point.x = indev->proc.types.pointer.last_raw_point.x;
        data->point.y = indev->proc.types.pointer.last_raw_point.y;
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8013b8a:	2b02      	cmp	r3, #2
 8013b8c:	d004      	beq.n	8013b98 <_lv_indev_read+0x24>
        data->key = indev->proc.types.keypad.last_key;
    }
    /*For compatibility assume that used button was enter (encoder push)*/
    else if(indev->driver->type == LV_INDEV_TYPE_ENCODER) {
 8013b8e:	2b04      	cmp	r3, #4
 8013b90:	d104      	bne.n	8013b9c <_lv_indev_read+0x28>
        data->key = LV_KEY_ENTER;
 8013b92:	3306      	adds	r3, #6
 8013b94:	6063      	str	r3, [r4, #4]
 8013b96:	e001      	b.n	8013b9c <_lv_indev_read+0x28>
        data->key = indev->proc.types.keypad.last_key;
 8013b98:	68eb      	ldr	r3, [r5, #12]
 8013b9a:	6063      	str	r3, [r4, #4]
    }

    if(indev->driver->read_cb) {
 8013b9c:	6843      	ldr	r3, [r0, #4]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d001      	beq.n	8013ba6 <_lv_indev_read+0x32>
        INDEV_TRACE("calling indev_read_cb");
        indev->driver->read_cb(indev->driver, data);
 8013ba2:	0021      	movs	r1, r4
 8013ba4:	4798      	blx	r3
    }
    else {
        LV_LOG_WARN("indev_read_cb is not registered");
    }
}
 8013ba6:	bd70      	pop	{r4, r5, r6, pc}
        data->point.x = indev->proc.types.pointer.last_raw_point.x;
 8013ba8:	692b      	ldr	r3, [r5, #16]
 8013baa:	6023      	str	r3, [r4, #0]
 8013bac:	e7f6      	b.n	8013b9c <_lv_indev_read+0x28>
 8013bae:	46c0      	nop			; (mov r8, r8)

08013bb0 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	4b04      	ldr	r3, [pc, #16]	; (8013bc4 <lv_tick_inc+0x14>)
 8013bb4:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 8013bb6:	4b04      	ldr	r3, [pc, #16]	; (8013bc8 <lv_tick_inc+0x18>)
 8013bb8:	681a      	ldr	r2, [r3, #0]
 8013bba:	4694      	mov	ip, r2
 8013bbc:	4460      	add	r0, ip
 8013bbe:	6018      	str	r0, [r3, #0]
}
 8013bc0:	4770      	bx	lr
 8013bc2:	46c0      	nop			; (mov r8, r8)
 8013bc4:	200005a8 	.word	0x200005a8
 8013bc8:	200005a4 	.word	0x200005a4

08013bcc <lv_tick_get>:
     *This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
 8013bcc:	2101      	movs	r1, #1
        result        = sys_time;
 8013bce:	4b04      	ldr	r3, [pc, #16]	; (8013be0 <lv_tick_get+0x14>)
 8013bd0:	6818      	ldr	r0, [r3, #0]
 8013bd2:	4b04      	ldr	r3, [pc, #16]	; (8013be4 <lv_tick_get+0x18>)
        tick_irq_flag = 1;
 8013bd4:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 8013bd6:	781a      	ldrb	r2, [r3, #0]
 8013bd8:	2a00      	cmp	r2, #0
 8013bda:	d0fb      	beq.n	8013bd4 <lv_tick_get+0x8>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 8013bdc:	4770      	bx	lr
 8013bde:	46c0      	nop			; (mov r8, r8)
 8013be0:	200005a4 	.word	0x200005a4
 8013be4:	200005a8 	.word	0x200005a8

08013be8 <lv_tick_elaps>:
        tick_irq_flag = 1;
 8013be8:	2101      	movs	r1, #1
        result        = sys_time;
 8013bea:	4b05      	ldr	r3, [pc, #20]	; (8013c00 <lv_tick_elaps+0x18>)
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8013bec:	b510      	push	{r4, lr}
        result        = sys_time;
 8013bee:	681c      	ldr	r4, [r3, #0]
 8013bf0:	4b04      	ldr	r3, [pc, #16]	; (8013c04 <lv_tick_elaps+0x1c>)
        tick_irq_flag = 1;
 8013bf2:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 8013bf4:	781a      	ldrb	r2, [r3, #0]
 8013bf6:	2a00      	cmp	r2, #0
 8013bf8:	d0fb      	beq.n	8013bf2 <lv_tick_elaps+0xa>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 8013bfa:	1a20      	subs	r0, r4, r0
 8013bfc:	bd10      	pop	{r4, pc}
 8013bfe:	46c0      	nop			; (mov r8, r8)
 8013c00:	200005a4 	.word	0x200005a4
 8013c04:	200005a8 	.word	0x200005a8

08013c08 <lv_anim_path_linear>:
}

int32_t lv_anim_path_linear(const lv_anim_t * a)
{
    /*Calculate the current step*/
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8013c08:	2380      	movs	r3, #128	; 0x80
{
 8013c0a:	b510      	push	{r4, lr}
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8013c0c:	00db      	lsls	r3, r3, #3
{
 8013c0e:	b082      	sub	sp, #8
 8013c10:	0004      	movs	r4, r0
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8013c12:	9300      	str	r3, [sp, #0]
 8013c14:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8013c16:	2300      	movs	r3, #0
 8013c18:	2100      	movs	r1, #0
 8013c1a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8013c1c:	f001 f904 	bl	8014e28 <lv_map>

    /*Get the new value which will be proportional to `step`
     *and the `start` and `end` values*/
    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 8013c20:	69e3      	ldr	r3, [r4, #28]
 8013c22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8013c24:	1ad2      	subs	r2, r2, r3
 8013c26:	4350      	muls	r0, r2
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 8013c28:	1280      	asrs	r0, r0, #10
    new_value += a->start_value;
 8013c2a:	1818      	adds	r0, r3, r0

    return new_value;
}
 8013c2c:	b002      	add	sp, #8
 8013c2e:	bd10      	pop	{r4, pc}

08013c30 <anim_timer>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_timer(lv_timer_t * param)
{
 8013c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c32:	46de      	mov	lr, fp
 8013c34:	4657      	mov	r7, sl
 8013c36:	464e      	mov	r6, r9
 8013c38:	4645      	mov	r5, r8
 8013c3a:	b5e0      	push	{r5, r6, r7, lr}
    LV_UNUSED(param);

    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8013c3c:	4b71      	ldr	r3, [pc, #452]	; (8013e04 <anim_timer+0x1d4>)
{
 8013c3e:	b083      	sub	sp, #12
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8013c40:	6818      	ldr	r0, [r3, #0]
 8013c42:	469a      	mov	sl, r3
 8013c44:	f7ff ffd0 	bl	8013be8 <lv_tick_elaps>

    /*Flip the run round*/
    anim_run_round = anim_run_round ? false : true;
 8013c48:	2201      	movs	r2, #1
 8013c4a:	4e6f      	ldr	r6, [pc, #444]	; (8013e08 <anim_timer+0x1d8>)

    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013c4c:	4f6f      	ldr	r7, [pc, #444]	; (8013e0c <anim_timer+0x1dc>)
    anim_run_round = anim_run_round ? false : true;
 8013c4e:	7833      	ldrb	r3, [r6, #0]
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8013c50:	4680      	mov	r8, r0
    anim_run_round = anim_run_round ? false : true;
 8013c52:	4053      	eors	r3, r2
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013c54:	0038      	movs	r0, r7
    anim_run_round = anim_run_round ? false : true;
 8013c56:	7033      	strb	r3, [r6, #0]
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013c58:	f001 f862 	bl	8014d20 <_lv_ll_get_head>
 8013c5c:	1e04      	subs	r4, r0, #0

    while(a != NULL) {
 8013c5e:	d03c      	beq.n	8013cda <anim_timer+0xaa>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 8013c60:	2300      	movs	r3, #0
 8013c62:	4699      	mov	r9, r3
{
    anim_list_changed = true;
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
        lv_timer_pause(_lv_anim_tmr);
    else
        lv_timer_resume(_lv_anim_tmr);
 8013c64:	4b6a      	ldr	r3, [pc, #424]	; (8013e10 <anim_timer+0x1e0>)
 8013c66:	4d6b      	ldr	r5, [pc, #428]	; (8013e14 <anim_timer+0x1e4>)
 8013c68:	469b      	mov	fp, r3
        anim_list_changed = false;
 8013c6a:	464b      	mov	r3, r9
        if(a->run_round != anim_run_round) {
 8013c6c:	213e      	movs	r1, #62	; 0x3e
        anim_list_changed = false;
 8013c6e:	702b      	strb	r3, [r5, #0]
        if(a->run_round != anim_run_round) {
 8013c70:	5c63      	ldrb	r3, [r4, r1]
 8013c72:	7830      	ldrb	r0, [r6, #0]
 8013c74:	075a      	lsls	r2, r3, #29
 8013c76:	0fd2      	lsrs	r2, r2, #31
 8013c78:	4282      	cmp	r2, r0
 8013c7a:	d05f      	beq.n	8013d3c <anim_timer+0x10c>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 8013c7c:	2201      	movs	r2, #1
 8013c7e:	4010      	ands	r0, r2
 8013c80:	3203      	adds	r2, #3
 8013c82:	4393      	bics	r3, r2
            int32_t new_act_time = a->act_time + elaps;
 8013c84:	4642      	mov	r2, r8
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 8013c86:	0080      	lsls	r0, r0, #2
 8013c88:	4303      	orrs	r3, r0
 8013c8a:	5463      	strb	r3, [r4, r1]
            int32_t new_act_time = a->act_time + elaps;
 8013c8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013c8e:	1881      	adds	r1, r0, r2
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8013c90:	071a      	lsls	r2, r3, #28
 8013c92:	d401      	bmi.n	8013c98 <anim_timer+0x68>
 8013c94:	2800      	cmp	r0, #0
 8013c96:	dd57      	ble.n	8013d48 <anim_timer+0x118>
            a->act_time += elaps;
 8013c98:	62e1      	str	r1, [r4, #44]	; 0x2c
            if(a->act_time >= 0) {
 8013c9a:	2900      	cmp	r1, #0
 8013c9c:	db14      	blt.n	8013cc8 <anim_timer+0x98>
                if(a->act_time > a->time) a->act_time = a->time;
 8013c9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013ca0:	428b      	cmp	r3, r1
 8013ca2:	da00      	bge.n	8013ca6 <anim_timer+0x76>
 8013ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
                new_value = a->path_cb(a);
 8013ca6:	69a3      	ldr	r3, [r4, #24]
 8013ca8:	0020      	movs	r0, r4
 8013caa:	4798      	blx	r3
                if(new_value != a->current_value) {
 8013cac:	6a23      	ldr	r3, [r4, #32]
                new_value = a->path_cb(a);
 8013cae:	0001      	movs	r1, r0
                if(new_value != a->current_value) {
 8013cb0:	4283      	cmp	r3, r0
 8013cb2:	d005      	beq.n	8013cc0 <anim_timer+0x90>
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8013cb4:	6863      	ldr	r3, [r4, #4]
                    a->current_value = new_value;
 8013cb6:	6220      	str	r0, [r4, #32]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d001      	beq.n	8013cc0 <anim_timer+0x90>
 8013cbc:	6820      	ldr	r0, [r4, #0]
 8013cbe:	4798      	blx	r3
                if(a->act_time >= a->time) {
 8013cc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013cc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013cc4:	429a      	cmp	r2, r3
 8013cc6:	da13      	bge.n	8013cf0 <anim_timer+0xc0>
        if(anim_list_changed)
 8013cc8:	782b      	ldrb	r3, [r5, #0]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d036      	beq.n	8013d3c <anim_timer+0x10c>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013cce:	0038      	movs	r0, r7
 8013cd0:	f001 f826 	bl	8014d20 <_lv_ll_get_head>
 8013cd4:	0004      	movs	r4, r0
    while(a != NULL) {
 8013cd6:	2c00      	cmp	r4, #0
 8013cd8:	d1c7      	bne.n	8013c6a <anim_timer+0x3a>
    last_timer_run = lv_tick_get();
 8013cda:	f7ff ff77 	bl	8013bcc <lv_tick_get>
 8013cde:	4653      	mov	r3, sl
 8013ce0:	6018      	str	r0, [r3, #0]
}
 8013ce2:	b003      	add	sp, #12
 8013ce4:	bcf0      	pop	{r4, r5, r6, r7}
 8013ce6:	46bb      	mov	fp, r7
 8013ce8:	46b2      	mov	sl, r6
 8013cea:	46a9      	mov	r9, r5
 8013cec:	46a0      	mov	r8, r4
 8013cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8013cf0:	2002      	movs	r0, #2
 8013cf2:	223e      	movs	r2, #62	; 0x3e
 8013cf4:	0001      	movs	r1, r0
 8013cf6:	5ca2      	ldrb	r2, [r4, r2]
 8013cf8:	4011      	ands	r1, r2
 8013cfa:	4210      	tst	r0, r2
 8013cfc:	d042      	beq.n	8013d84 <anim_timer+0x154>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8013cfe:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8013d00:	2a00      	cmp	r2, #0
 8013d02:	d04a      	beq.n	8013d9a <anim_timer+0x16a>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 8013d04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013d06:	4252      	negs	r2, r2
 8013d08:	62e2      	str	r2, [r4, #44]	; 0x2c
        if(a->playback_time != 0) {
 8013d0a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8013d0c:	2a00      	cmp	r2, #0
 8013d0e:	d0db      	beq.n	8013cc8 <anim_timer+0x98>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 8013d10:	2900      	cmp	r1, #0
 8013d12:	d068      	beq.n	8013de6 <anim_timer+0x1b6>
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8013d14:	4248      	negs	r0, r1
 8013d16:	4141      	adcs	r1, r0
 8013d18:	203e      	movs	r0, #62	; 0x3e
 8013d1a:	0049      	lsls	r1, r1, #1
 8013d1c:	9101      	str	r1, [sp, #4]
 8013d1e:	5c21      	ldrb	r1, [r4, r0]
 8013d20:	383c      	subs	r0, #60	; 0x3c
 8013d22:	4381      	bics	r1, r0
 8013d24:	9801      	ldr	r0, [sp, #4]
 8013d26:	4301      	orrs	r1, r0
 8013d28:	203e      	movs	r0, #62	; 0x3e
 8013d2a:	5421      	strb	r1, [r4, r0]
            int32_t tmp    = a->start_value;
 8013d2c:	69e1      	ldr	r1, [r4, #28]
            a->start_value = a->end_value;
 8013d2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            a->time = a->playback_time;
 8013d30:	62a2      	str	r2, [r4, #40]	; 0x28
            a->start_value = a->end_value;
 8013d32:	61e0      	str	r0, [r4, #28]
            a->end_value   = tmp;
 8013d34:	6261      	str	r1, [r4, #36]	; 0x24
            a->playback_time = tmp;
 8013d36:	6363      	str	r3, [r4, #52]	; 0x34
 8013d38:	e7c6      	b.n	8013cc8 <anim_timer+0x98>
            a->act_time += elaps;
 8013d3a:	62e1      	str	r1, [r4, #44]	; 0x2c
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013d3c:	0021      	movs	r1, r4
 8013d3e:	0038      	movs	r0, r7
 8013d40:	f000 fffa 	bl	8014d38 <_lv_ll_get_next>
 8013d44:	0004      	movs	r4, r0
 8013d46:	e7c6      	b.n	8013cd6 <anim_timer+0xa6>
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8013d48:	2900      	cmp	r1, #0
 8013d4a:	dbf6      	blt.n	8013d3a <anim_timer+0x10a>
                if(a->early_apply == 0 && a->get_value_cb) {
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	421a      	tst	r2, r3
 8013d50:	d10b      	bne.n	8013d6a <anim_timer+0x13a>
 8013d52:	6963      	ldr	r3, [r4, #20]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d008      	beq.n	8013d6a <anim_timer+0x13a>
                    int32_t v_ofs = a->get_value_cb(a);
 8013d58:	0020      	movs	r0, r4
 8013d5a:	4798      	blx	r3
                    a->start_value += v_ofs;
 8013d5c:	69e3      	ldr	r3, [r4, #28]
 8013d5e:	181b      	adds	r3, r3, r0
 8013d60:	61e3      	str	r3, [r4, #28]
                    a->end_value += v_ofs;
 8013d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d64:	469c      	mov	ip, r3
 8013d66:	4460      	add	r0, ip
 8013d68:	6260      	str	r0, [r4, #36]	; 0x24
                if(a->start_cb) a->start_cb(a);
 8013d6a:	68a3      	ldr	r3, [r4, #8]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d001      	beq.n	8013d74 <anim_timer+0x144>
 8013d70:	0020      	movs	r0, r4
 8013d72:	4798      	blx	r3
                a->start_cb_called = 1;
 8013d74:	223e      	movs	r2, #62	; 0x3e
 8013d76:	2108      	movs	r1, #8
 8013d78:	5ca3      	ldrb	r3, [r4, r2]
 8013d7a:	430b      	orrs	r3, r1
 8013d7c:	54a3      	strb	r3, [r4, r2]
            a->act_time += elaps;
 8013d7e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013d80:	4441      	add	r1, r8
 8013d82:	e789      	b.n	8013c98 <anim_timer+0x68>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8013d84:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8013d86:	2a00      	cmp	r2, #0
 8013d88:	d02a      	beq.n	8013de0 <anim_timer+0x1b0>
 8013d8a:	4823      	ldr	r0, [pc, #140]	; (8013e18 <anim_timer+0x1e8>)
 8013d8c:	4282      	cmp	r2, r0
 8013d8e:	d02e      	beq.n	8013dee <anim_timer+0x1be>
        a->repeat_cnt--;
 8013d90:	3a01      	subs	r2, #1
 8013d92:	b292      	uxth	r2, r2
 8013d94:	87a2      	strh	r2, [r4, #60]	; 0x3c
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8013d96:	2a00      	cmp	r2, #0
 8013d98:	d1b4      	bne.n	8013d04 <anim_timer+0xd4>
 8013d9a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8013d9c:	2a00      	cmp	r2, #0
 8013d9e:	d001      	beq.n	8013da4 <anim_timer+0x174>
 8013da0:	2900      	cmp	r1, #0
 8013da2:	d020      	beq.n	8013de6 <anim_timer+0x1b6>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8013da4:	0021      	movs	r1, r4
 8013da6:	0038      	movs	r0, r7
 8013da8:	f000 ff90 	bl	8014ccc <_lv_ll_remove>
    anim_list_changed = true;
 8013dac:	2301      	movs	r3, #1
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013dae:	0038      	movs	r0, r7
    anim_list_changed = true;
 8013db0:	702b      	strb	r3, [r5, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013db2:	f000 ffb5 	bl	8014d20 <_lv_ll_get_head>
        lv_timer_pause(_lv_anim_tmr);
 8013db6:	465b      	mov	r3, fp
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013db8:	2800      	cmp	r0, #0
 8013dba:	d01f      	beq.n	8013dfc <anim_timer+0x1cc>
        lv_timer_resume(_lv_anim_tmr);
 8013dbc:	6818      	ldr	r0, [r3, #0]
 8013dbe:	f001 fff1 	bl	8015da4 <lv_timer_resume>
        if(a->ready_cb != NULL) a->ready_cb(a);
 8013dc2:	68e3      	ldr	r3, [r4, #12]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d001      	beq.n	8013dcc <anim_timer+0x19c>
 8013dc8:	0020      	movs	r0, r4
 8013dca:	4798      	blx	r3
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 8013dcc:	6923      	ldr	r3, [r4, #16]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d001      	beq.n	8013dd6 <anim_timer+0x1a6>
 8013dd2:	0020      	movs	r0, r4
 8013dd4:	4798      	blx	r3
        lv_mem_free(a);
 8013dd6:	0020      	movs	r0, r4
 8013dd8:	f001 f874 	bl	8014ec4 <lv_mem_free>
        if(anim_list_changed)
 8013ddc:	782b      	ldrb	r3, [r5, #0]
        lv_mem_free(a);
 8013dde:	e774      	b.n	8013cca <anim_timer+0x9a>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8013de0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8013de2:	2a00      	cmp	r2, #0
 8013de4:	d0de      	beq.n	8013da4 <anim_timer+0x174>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 8013de6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013de8:	4240      	negs	r0, r0
 8013dea:	62e0      	str	r0, [r4, #44]	; 0x2c
 8013dec:	e792      	b.n	8013d14 <anim_timer+0xe4>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 8013dee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013df0:	4252      	negs	r2, r2
 8013df2:	62e2      	str	r2, [r4, #44]	; 0x2c
        if(a->playback_time != 0) {
 8013df4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8013df6:	2a00      	cmp	r2, #0
 8013df8:	d1f5      	bne.n	8013de6 <anim_timer+0x1b6>
 8013dfa:	e765      	b.n	8013cc8 <anim_timer+0x98>
        lv_timer_pause(_lv_anim_tmr);
 8013dfc:	6818      	ldr	r0, [r3, #0]
 8013dfe:	f001 ffcb 	bl	8015d98 <lv_timer_pause>
}
 8013e02:	e7de      	b.n	8013dc2 <anim_timer+0x192>
 8013e04:	200005b4 	.word	0x200005b4
 8013e08:	200005b1 	.word	0x200005b1
 8013e0c:	200005c0 	.word	0x200005c0
 8013e10:	200005ac 	.word	0x200005ac
 8013e14:	200005b0 	.word	0x200005b0
 8013e18:	0000ffff 	.word	0x0000ffff

08013e1c <_lv_anim_core_init>:
{
 8013e1c:	b570      	push	{r4, r5, r6, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8013e1e:	4e0f      	ldr	r6, [pc, #60]	; (8013e5c <_lv_anim_core_init+0x40>)
 8013e20:	2140      	movs	r1, #64	; 0x40
 8013e22:	0030      	movs	r0, r6
 8013e24:	f000 ff1a 	bl	8014c5c <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 8013e28:	2200      	movs	r2, #0
 8013e2a:	211e      	movs	r1, #30
 8013e2c:	480c      	ldr	r0, [pc, #48]	; (8013e60 <_lv_anim_core_init+0x44>)
 8013e2e:	f001 ff93 	bl	8015d58 <lv_timer_create>
    anim_list_changed = true;
 8013e32:	2301      	movs	r3, #1
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 8013e34:	4d0b      	ldr	r5, [pc, #44]	; (8013e64 <_lv_anim_core_init+0x48>)
    anim_list_changed = true;
 8013e36:	4c0c      	ldr	r4, [pc, #48]	; (8013e68 <_lv_anim_core_init+0x4c>)
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 8013e38:	6028      	str	r0, [r5, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013e3a:	0030      	movs	r0, r6
    anim_list_changed = true;
 8013e3c:	7023      	strb	r3, [r4, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013e3e:	f000 ff6f 	bl	8014d20 <_lv_ll_get_head>
 8013e42:	2800      	cmp	r0, #0
 8013e44:	d005      	beq.n	8013e52 <_lv_anim_core_init+0x36>
        lv_timer_resume(_lv_anim_tmr);
 8013e46:	6828      	ldr	r0, [r5, #0]
 8013e48:	f001 ffac 	bl	8015da4 <lv_timer_resume>
    anim_list_changed = false;
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	7023      	strb	r3, [r4, #0]
}
 8013e50:	bd70      	pop	{r4, r5, r6, pc}
        lv_timer_pause(_lv_anim_tmr);
 8013e52:	6828      	ldr	r0, [r5, #0]
 8013e54:	f001 ffa0 	bl	8015d98 <lv_timer_pause>
}
 8013e58:	e7f8      	b.n	8013e4c <_lv_anim_core_init+0x30>
 8013e5a:	46c0      	nop			; (mov r8, r8)
 8013e5c:	200005c0 	.word	0x200005c0
 8013e60:	08013c31 	.word	0x08013c31
 8013e64:	200005ac 	.word	0x200005ac
 8013e68:	200005b0 	.word	0x200005b0

08013e6c <lv_anim_init>:
{
 8013e6c:	b510      	push	{r4, lr}
    lv_memset_00(a, sizeof(lv_anim_t));
 8013e6e:	2140      	movs	r1, #64	; 0x40
{
 8013e70:	0004      	movs	r4, r0
    lv_memset_00(a, sizeof(lv_anim_t));
 8013e72:	f001 fb87 	bl	8015584 <lv_memset_00>
    a->time = 500;
 8013e76:	23fa      	movs	r3, #250	; 0xfa
 8013e78:	005b      	lsls	r3, r3, #1
 8013e7a:	62a3      	str	r3, [r4, #40]	; 0x28
    a->start_value = 0;
 8013e7c:	2300      	movs	r3, #0
    a->early_apply = 1;
 8013e7e:	223e      	movs	r2, #62	; 0x3e
 8013e80:	2101      	movs	r1, #1
    a->start_value = 0;
 8013e82:	61e3      	str	r3, [r4, #28]
    a->end_value = 100;
 8013e84:	3364      	adds	r3, #100	; 0x64
 8013e86:	6263      	str	r3, [r4, #36]	; 0x24
    a->repeat_cnt = 1;
 8013e88:	3b63      	subs	r3, #99	; 0x63
 8013e8a:	87a3      	strh	r3, [r4, #60]	; 0x3c
    a->path_cb = lv_anim_path_linear;
 8013e8c:	4b02      	ldr	r3, [pc, #8]	; (8013e98 <lv_anim_init+0x2c>)
 8013e8e:	61a3      	str	r3, [r4, #24]
    a->early_apply = 1;
 8013e90:	5ca3      	ldrb	r3, [r4, r2]
 8013e92:	430b      	orrs	r3, r1
 8013e94:	54a3      	strb	r3, [r4, r2]
}
 8013e96:	bd10      	pop	{r4, pc}
 8013e98:	08013c09 	.word	0x08013c09

08013e9c <lv_anim_del>:
{
 8013e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e9e:	46de      	mov	lr, fp
 8013ea0:	4657      	mov	r7, sl
 8013ea2:	464e      	mov	r6, r9
 8013ea4:	4645      	mov	r5, r8
 8013ea6:	b5e0      	push	{r5, r6, r7, lr}
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013ea8:	4e6e      	ldr	r6, [pc, #440]	; (8014064 <lv_anim_del+0x1c8>)
{
 8013eaa:	0007      	movs	r7, r0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013eac:	0030      	movs	r0, r6
{
 8013eae:	4688      	mov	r8, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8013eb0:	f000 ff36 	bl	8014d20 <_lv_ll_get_head>
 8013eb4:	1e04      	subs	r4, r0, #0
    while(a != NULL) {
 8013eb6:	d100      	bne.n	8013eba <lv_anim_del+0x1e>
 8013eb8:	e0c6      	b.n	8014048 <lv_anim_del+0x1ac>
 8013eba:	4643      	mov	r3, r8
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d039      	beq.n	8013f34 <lv_anim_del+0x98>
    bool del = false;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	4699      	mov	r9, r3
    anim_list_changed = true;
 8013ec4:	4b68      	ldr	r3, [pc, #416]	; (8014068 <lv_anim_del+0x1cc>)
 8013ec6:	2f00      	cmp	r7, #0
 8013ec8:	d069      	beq.n	8013f9e <lv_anim_del+0x102>
 8013eca:	469b      	mov	fp, r3
        lv_timer_resume(_lv_anim_tmr);
 8013ecc:	4b67      	ldr	r3, [pc, #412]	; (801406c <lv_anim_del+0x1d0>)
 8013ece:	469a      	mov	sl, r3
 8013ed0:	e001      	b.n	8013ed6 <lv_anim_del+0x3a>
    while(a != NULL) {
 8013ed2:	2c00      	cmp	r4, #0
 8013ed4:	d027      	beq.n	8013f26 <lv_anim_del+0x8a>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013ed6:	0025      	movs	r5, r4
 8013ed8:	0021      	movs	r1, r4
 8013eda:	0030      	movs	r0, r6
 8013edc:	f000 ff2c 	bl	8014d38 <_lv_ll_get_next>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8013ee0:	682b      	ldr	r3, [r5, #0]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013ee2:	0004      	movs	r4, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8013ee4:	429f      	cmp	r7, r3
 8013ee6:	d1f4      	bne.n	8013ed2 <lv_anim_del+0x36>
 8013ee8:	686b      	ldr	r3, [r5, #4]
 8013eea:	4598      	cmp	r8, r3
 8013eec:	d1f1      	bne.n	8013ed2 <lv_anim_del+0x36>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8013eee:	0029      	movs	r1, r5
 8013ef0:	0030      	movs	r0, r6
 8013ef2:	f000 feeb 	bl	8014ccc <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 8013ef6:	692b      	ldr	r3, [r5, #16]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d001      	beq.n	8013f00 <lv_anim_del+0x64>
 8013efc:	0028      	movs	r0, r5
 8013efe:	4798      	blx	r3
            lv_mem_free(a);
 8013f00:	0028      	movs	r0, r5
 8013f02:	f000 ffdf 	bl	8014ec4 <lv_mem_free>
    anim_list_changed = true;
 8013f06:	2301      	movs	r3, #1
 8013f08:	465a      	mov	r2, fp
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013f0a:	0030      	movs	r0, r6
    anim_list_changed = true;
 8013f0c:	7013      	strb	r3, [r2, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013f0e:	f000 ff07 	bl	8014d20 <_lv_ll_get_head>
        lv_timer_pause(_lv_anim_tmr);
 8013f12:	4653      	mov	r3, sl
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013f14:	2800      	cmp	r0, #0
 8013f16:	d03c      	beq.n	8013f92 <lv_anim_del+0xf6>
        lv_timer_resume(_lv_anim_tmr);
 8013f18:	6818      	ldr	r0, [r3, #0]
 8013f1a:	f001 ff43 	bl	8015da4 <lv_timer_resume>
            del = true;
 8013f1e:	2301      	movs	r3, #1
 8013f20:	4699      	mov	r9, r3
    while(a != NULL) {
 8013f22:	2c00      	cmp	r4, #0
 8013f24:	d1d7      	bne.n	8013ed6 <lv_anim_del+0x3a>
}
 8013f26:	4648      	mov	r0, r9
 8013f28:	bcf0      	pop	{r4, r5, r6, r7}
 8013f2a:	46bb      	mov	fp, r7
 8013f2c:	46b2      	mov	sl, r6
 8013f2e:	46a9      	mov	r9, r5
 8013f30:	46a0      	mov	r8, r4
 8013f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f34:	2f00      	cmp	r7, #0
 8013f36:	d05a      	beq.n	8013fee <lv_anim_del+0x152>
    bool del = false;
 8013f38:	2300      	movs	r3, #0
 8013f3a:	4699      	mov	r9, r3
    anim_list_changed = true;
 8013f3c:	4b4a      	ldr	r3, [pc, #296]	; (8014068 <lv_anim_del+0x1cc>)
 8013f3e:	469a      	mov	sl, r3
        lv_timer_pause(_lv_anim_tmr);
 8013f40:	4b4a      	ldr	r3, [pc, #296]	; (801406c <lv_anim_del+0x1d0>)
 8013f42:	4698      	mov	r8, r3
 8013f44:	e001      	b.n	8013f4a <lv_anim_del+0xae>
    while(a != NULL) {
 8013f46:	2c00      	cmp	r4, #0
 8013f48:	d0ed      	beq.n	8013f26 <lv_anim_del+0x8a>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013f4a:	0025      	movs	r5, r4
 8013f4c:	0021      	movs	r1, r4
 8013f4e:	0030      	movs	r0, r6
 8013f50:	f000 fef2 	bl	8014d38 <_lv_ll_get_next>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8013f54:	682b      	ldr	r3, [r5, #0]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013f56:	0004      	movs	r4, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8013f58:	429f      	cmp	r7, r3
 8013f5a:	d1f4      	bne.n	8013f46 <lv_anim_del+0xaa>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8013f5c:	0029      	movs	r1, r5
 8013f5e:	0030      	movs	r0, r6
 8013f60:	f000 feb4 	bl	8014ccc <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 8013f64:	692b      	ldr	r3, [r5, #16]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d001      	beq.n	8013f6e <lv_anim_del+0xd2>
 8013f6a:	0028      	movs	r0, r5
 8013f6c:	4798      	blx	r3
            lv_mem_free(a);
 8013f6e:	0028      	movs	r0, r5
 8013f70:	f000 ffa8 	bl	8014ec4 <lv_mem_free>
    anim_list_changed = true;
 8013f74:	2301      	movs	r3, #1
 8013f76:	4652      	mov	r2, sl
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013f78:	0030      	movs	r0, r6
    anim_list_changed = true;
 8013f7a:	7013      	strb	r3, [r2, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013f7c:	f000 fed0 	bl	8014d20 <_lv_ll_get_head>
        lv_timer_pause(_lv_anim_tmr);
 8013f80:	4643      	mov	r3, r8
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013f82:	2800      	cmp	r0, #0
 8013f84:	d05a      	beq.n	801403c <lv_anim_del+0x1a0>
        lv_timer_resume(_lv_anim_tmr);
 8013f86:	6818      	ldr	r0, [r3, #0]
 8013f88:	f001 ff0c 	bl	8015da4 <lv_timer_resume>
            del = true;
 8013f8c:	2301      	movs	r3, #1
 8013f8e:	4699      	mov	r9, r3
 8013f90:	e7d9      	b.n	8013f46 <lv_anim_del+0xaa>
        lv_timer_pause(_lv_anim_tmr);
 8013f92:	6818      	ldr	r0, [r3, #0]
 8013f94:	f001 ff00 	bl	8015d98 <lv_timer_pause>
            del = true;
 8013f98:	2301      	movs	r3, #1
 8013f9a:	4699      	mov	r9, r3
 8013f9c:	e799      	b.n	8013ed2 <lv_anim_del+0x36>
    anim_list_changed = true;
 8013f9e:	469a      	mov	sl, r3
        lv_timer_pause(_lv_anim_tmr);
 8013fa0:	4f32      	ldr	r7, [pc, #200]	; (801406c <lv_anim_del+0x1d0>)
 8013fa2:	e001      	b.n	8013fa8 <lv_anim_del+0x10c>
    while(a != NULL) {
 8013fa4:	2c00      	cmp	r4, #0
 8013fa6:	d0be      	beq.n	8013f26 <lv_anim_del+0x8a>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013fa8:	0025      	movs	r5, r4
 8013faa:	0021      	movs	r1, r4
 8013fac:	0030      	movs	r0, r6
 8013fae:	f000 fec3 	bl	8014d38 <_lv_ll_get_next>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8013fb2:	686b      	ldr	r3, [r5, #4]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013fb4:	0004      	movs	r4, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8013fb6:	4598      	cmp	r8, r3
 8013fb8:	d1f4      	bne.n	8013fa4 <lv_anim_del+0x108>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8013fba:	0029      	movs	r1, r5
 8013fbc:	0030      	movs	r0, r6
 8013fbe:	f000 fe85 	bl	8014ccc <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 8013fc2:	692b      	ldr	r3, [r5, #16]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d001      	beq.n	8013fcc <lv_anim_del+0x130>
 8013fc8:	0028      	movs	r0, r5
 8013fca:	4798      	blx	r3
            lv_mem_free(a);
 8013fcc:	0028      	movs	r0, r5
 8013fce:	f000 ff79 	bl	8014ec4 <lv_mem_free>
    anim_list_changed = true;
 8013fd2:	2301      	movs	r3, #1
 8013fd4:	4652      	mov	r2, sl
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013fd6:	0030      	movs	r0, r6
    anim_list_changed = true;
 8013fd8:	7013      	strb	r3, [r2, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8013fda:	f000 fea1 	bl	8014d20 <_lv_ll_get_head>
 8013fde:	2800      	cmp	r0, #0
 8013fe0:	d035      	beq.n	801404e <lv_anim_del+0x1b2>
        lv_timer_resume(_lv_anim_tmr);
 8013fe2:	6838      	ldr	r0, [r7, #0]
 8013fe4:	f001 fede 	bl	8015da4 <lv_timer_resume>
            del = true;
 8013fe8:	2301      	movs	r3, #1
 8013fea:	4699      	mov	r9, r3
 8013fec:	e7da      	b.n	8013fa4 <lv_anim_del+0x108>
 8013fee:	4b1e      	ldr	r3, [pc, #120]	; (8014068 <lv_anim_del+0x1cc>)
    anim_list_changed = true;
 8013ff0:	3701      	adds	r7, #1
 8013ff2:	4699      	mov	r9, r3
 8013ff4:	4b1d      	ldr	r3, [pc, #116]	; (801406c <lv_anim_del+0x1d0>)
 8013ff6:	4698      	mov	r8, r3
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8013ff8:	0021      	movs	r1, r4
 8013ffa:	0030      	movs	r0, r6
 8013ffc:	f000 fe9c 	bl	8014d38 <_lv_ll_get_next>
 8014000:	0025      	movs	r5, r4
 8014002:	0004      	movs	r4, r0
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8014004:	0029      	movs	r1, r5
 8014006:	0030      	movs	r0, r6
 8014008:	f000 fe60 	bl	8014ccc <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 801400c:	692b      	ldr	r3, [r5, #16]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d001      	beq.n	8014016 <lv_anim_del+0x17a>
 8014012:	0028      	movs	r0, r5
 8014014:	4798      	blx	r3
            lv_mem_free(a);
 8014016:	0028      	movs	r0, r5
 8014018:	f000 ff54 	bl	8014ec4 <lv_mem_free>
    anim_list_changed = true;
 801401c:	464b      	mov	r3, r9
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 801401e:	0030      	movs	r0, r6
    anim_list_changed = true;
 8014020:	701f      	strb	r7, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8014022:	f000 fe7d 	bl	8014d20 <_lv_ll_get_head>
        lv_timer_pause(_lv_anim_tmr);
 8014026:	4643      	mov	r3, r8
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8014028:	2800      	cmp	r0, #0
 801402a:	d016      	beq.n	801405a <lv_anim_del+0x1be>
        lv_timer_resume(_lv_anim_tmr);
 801402c:	6818      	ldr	r0, [r3, #0]
 801402e:	f001 feb9 	bl	8015da4 <lv_timer_resume>
    while(a != NULL) {
 8014032:	2c00      	cmp	r4, #0
 8014034:	d1e0      	bne.n	8013ff8 <lv_anim_del+0x15c>
 8014036:	2301      	movs	r3, #1
 8014038:	4699      	mov	r9, r3
 801403a:	e774      	b.n	8013f26 <lv_anim_del+0x8a>
        lv_timer_pause(_lv_anim_tmr);
 801403c:	6818      	ldr	r0, [r3, #0]
 801403e:	f001 feab 	bl	8015d98 <lv_timer_pause>
            del = true;
 8014042:	2301      	movs	r3, #1
 8014044:	4699      	mov	r9, r3
 8014046:	e77e      	b.n	8013f46 <lv_anim_del+0xaa>
    bool del = false;
 8014048:	2300      	movs	r3, #0
 801404a:	4699      	mov	r9, r3
 801404c:	e76b      	b.n	8013f26 <lv_anim_del+0x8a>
        lv_timer_pause(_lv_anim_tmr);
 801404e:	6838      	ldr	r0, [r7, #0]
 8014050:	f001 fea2 	bl	8015d98 <lv_timer_pause>
            del = true;
 8014054:	2301      	movs	r3, #1
 8014056:	4699      	mov	r9, r3
 8014058:	e7a4      	b.n	8013fa4 <lv_anim_del+0x108>
        lv_timer_pause(_lv_anim_tmr);
 801405a:	6818      	ldr	r0, [r3, #0]
 801405c:	f001 fe9c 	bl	8015d98 <lv_timer_pause>
}
 8014060:	e7e7      	b.n	8014032 <lv_anim_del+0x196>
 8014062:	46c0      	nop			; (mov r8, r8)
 8014064:	200005c0 	.word	0x200005c0
 8014068:	200005b0 	.word	0x200005b0
 801406c:	200005ac 	.word	0x200005ac

08014070 <lv_anim_start>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 8014070:	6841      	ldr	r1, [r0, #4]
{
 8014072:	b570      	push	{r4, r5, r6, lr}
 8014074:	0005      	movs	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 8014076:	2900      	cmp	r1, #0
 8014078:	d002      	beq.n	8014080 <lv_anim_start+0x10>
 801407a:	6800      	ldr	r0, [r0, #0]
 801407c:	f7ff ff0e 	bl	8013e9c <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 8014080:	4e26      	ldr	r6, [pc, #152]	; (801411c <lv_anim_start+0xac>)
 8014082:	0030      	movs	r0, r6
 8014084:	f000 fe70 	bl	8014d68 <_lv_ll_is_empty>
 8014088:	2800      	cmp	r0, #0
 801408a:	d13b      	bne.n	8014104 <lv_anim_start+0x94>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 801408c:	0030      	movs	r0, r6
 801408e:	f000 fded 	bl	8014c6c <_lv_ll_ins_head>
 8014092:	1e04      	subs	r4, r0, #0
    LV_ASSERT_MALLOC(new_anim);
 8014094:	d035      	beq.n	8014102 <lv_anim_start+0x92>
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8014096:	2240      	movs	r2, #64	; 0x40
 8014098:	0029      	movs	r1, r5
 801409a:	f001 f8a5 	bl	80151e8 <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 801409e:	682b      	ldr	r3, [r5, #0]
 80140a0:	42ab      	cmp	r3, r5
 80140a2:	d034      	beq.n	801410e <lv_anim_start+0x9e>
    new_anim->run_round = anim_run_round;
 80140a4:	2101      	movs	r1, #1
 80140a6:	203e      	movs	r0, #62	; 0x3e
 80140a8:	2504      	movs	r5, #4
 80140aa:	4b1d      	ldr	r3, [pc, #116]	; (8014120 <lv_anim_start+0xb0>)
 80140ac:	781b      	ldrb	r3, [r3, #0]
 80140ae:	400b      	ands	r3, r1
 80140b0:	009a      	lsls	r2, r3, #2
 80140b2:	5c23      	ldrb	r3, [r4, r0]
 80140b4:	43ab      	bics	r3, r5
 80140b6:	4313      	orrs	r3, r2
 80140b8:	5423      	strb	r3, [r4, r0]
    if(new_anim->early_apply) {
 80140ba:	4219      	tst	r1, r3
 80140bc:	d013      	beq.n	80140e6 <lv_anim_start+0x76>
        if(new_anim->get_value_cb) {
 80140be:	6963      	ldr	r3, [r4, #20]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d008      	beq.n	80140d6 <lv_anim_start+0x66>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 80140c4:	0020      	movs	r0, r4
 80140c6:	4798      	blx	r3
            new_anim->start_value += v_ofs;
 80140c8:	69e3      	ldr	r3, [r4, #28]
 80140ca:	181b      	adds	r3, r3, r0
 80140cc:	61e3      	str	r3, [r4, #28]
            new_anim->end_value += v_ofs;
 80140ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140d0:	469c      	mov	ip, r3
 80140d2:	4460      	add	r0, ip
 80140d4:	6260      	str	r0, [r4, #36]	; 0x24
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 80140d6:	6863      	ldr	r3, [r4, #4]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d004      	beq.n	80140e6 <lv_anim_start+0x76>
 80140dc:	6820      	ldr	r0, [r4, #0]
 80140de:	2800      	cmp	r0, #0
 80140e0:	d001      	beq.n	80140e6 <lv_anim_start+0x76>
 80140e2:	69e1      	ldr	r1, [r4, #28]
 80140e4:	4798      	blx	r3
    anim_list_changed = true;
 80140e6:	2201      	movs	r2, #1
 80140e8:	4b0e      	ldr	r3, [pc, #56]	; (8014124 <lv_anim_start+0xb4>)
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 80140ea:	0030      	movs	r0, r6
    anim_list_changed = true;
 80140ec:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 80140ee:	f000 fe17 	bl	8014d20 <_lv_ll_get_head>
        lv_timer_pause(_lv_anim_tmr);
 80140f2:	4b0d      	ldr	r3, [pc, #52]	; (8014128 <lv_anim_start+0xb8>)
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 80140f4:	2800      	cmp	r0, #0
 80140f6:	d00c      	beq.n	8014112 <lv_anim_start+0xa2>
        lv_timer_resume(_lv_anim_tmr);
 80140f8:	6818      	ldr	r0, [r3, #0]
 80140fa:	f001 fe53 	bl	8015da4 <lv_timer_resume>
}
 80140fe:	0020      	movs	r0, r4
 8014100:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MALLOC(new_anim);
 8014102:	e7fe      	b.n	8014102 <lv_anim_start+0x92>
        last_timer_run = lv_tick_get();
 8014104:	f7ff fd62 	bl	8013bcc <lv_tick_get>
 8014108:	4b08      	ldr	r3, [pc, #32]	; (801412c <lv_anim_start+0xbc>)
 801410a:	6018      	str	r0, [r3, #0]
 801410c:	e7be      	b.n	801408c <lv_anim_start+0x1c>
    if(a->var == a) new_anim->var = new_anim;
 801410e:	6024      	str	r4, [r4, #0]
 8014110:	e7c8      	b.n	80140a4 <lv_anim_start+0x34>
        lv_timer_pause(_lv_anim_tmr);
 8014112:	6818      	ldr	r0, [r3, #0]
 8014114:	f001 fe40 	bl	8015d98 <lv_timer_pause>
}
 8014118:	e7f1      	b.n	80140fe <lv_anim_start+0x8e>
 801411a:	46c0      	nop			; (mov r8, r8)
 801411c:	200005c0 	.word	0x200005c0
 8014120:	200005b1 	.word	0x200005b1
 8014124:	200005b0 	.word	0x200005b0
 8014128:	200005ac 	.word	0x200005ac
 801412c:	200005b4 	.word	0x200005b4

08014130 <lv_anim_get>:
{
 8014130:	b570      	push	{r4, r5, r6, lr}
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8014132:	4d11      	ldr	r5, [pc, #68]	; (8014178 <lv_anim_get+0x48>)
{
 8014134:	0004      	movs	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8014136:	0028      	movs	r0, r5
{
 8014138:	000e      	movs	r6, r1
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 801413a:	f000 fdf1 	bl	8014d20 <_lv_ll_get_head>
 801413e:	1e01      	subs	r1, r0, #0
 8014140:	d018      	beq.n	8014174 <lv_anim_get+0x44>
 8014142:	2e00      	cmp	r6, #0
 8014144:	d105      	bne.n	8014152 <lv_anim_get+0x22>
 8014146:	e011      	b.n	801416c <lv_anim_get+0x3c>
 8014148:	0028      	movs	r0, r5
 801414a:	f000 fdf5 	bl	8014d38 <_lv_ll_get_next>
 801414e:	1e01      	subs	r1, r0, #0
 8014150:	d010      	beq.n	8014174 <lv_anim_get+0x44>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8014152:	680b      	ldr	r3, [r1, #0]
 8014154:	429c      	cmp	r4, r3
 8014156:	d1f7      	bne.n	8014148 <lv_anim_get+0x18>
 8014158:	684b      	ldr	r3, [r1, #4]
 801415a:	429e      	cmp	r6, r3
 801415c:	d1f4      	bne.n	8014148 <lv_anim_get+0x18>
}
 801415e:	0008      	movs	r0, r1
 8014160:	bd70      	pop	{r4, r5, r6, pc}
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8014162:	0028      	movs	r0, r5
 8014164:	f000 fde8 	bl	8014d38 <_lv_ll_get_next>
 8014168:	1e01      	subs	r1, r0, #0
 801416a:	d003      	beq.n	8014174 <lv_anim_get+0x44>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 801416c:	680b      	ldr	r3, [r1, #0]
 801416e:	42a3      	cmp	r3, r4
 8014170:	d1f7      	bne.n	8014162 <lv_anim_get+0x32>
 8014172:	e7f4      	b.n	801415e <lv_anim_get+0x2e>
    return NULL;
 8014174:	2100      	movs	r1, #0
 8014176:	e7f2      	b.n	801415e <lv_anim_get+0x2e>
 8014178:	200005c0 	.word	0x200005c0

0801417c <lv_anim_speed_to_time>:
{
 801417c:	b570      	push	{r4, r5, r6, lr}
 801417e:	0005      	movs	r5, r0
    uint32_t d    = LV_ABS(start - end);
 8014180:	1a8a      	subs	r2, r1, r2
 8014182:	17d3      	asrs	r3, r2, #31
 8014184:	18d2      	adds	r2, r2, r3
 8014186:	405a      	eors	r2, r3
    uint32_t time = (d * 1000) / speed;
 8014188:	0153      	lsls	r3, r2, #5
 801418a:	1a9b      	subs	r3, r3, r2
 801418c:	009c      	lsls	r4, r3, #2
 801418e:	18a4      	adds	r4, r4, r2
 8014190:	00e4      	lsls	r4, r4, #3
 8014192:	0001      	movs	r1, r0
 8014194:	0020      	movs	r0, r4
        time++;
 8014196:	42ac      	cmp	r4, r5
 8014198:	41a4      	sbcs	r4, r4
    uint32_t time = (d * 1000) / speed;
 801419a:	f7eb ffc5 	bl	8000128 <__udivsi3>
        time++;
 801419e:	4264      	negs	r4, r4
 80141a0:	1900      	adds	r0, r0, r4
}
 80141a2:	bd70      	pop	{r4, r5, r6, pc}

080141a4 <lv_anim_path_ease_out>:
{
 80141a4:	b530      	push	{r4, r5, lr}
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 80141a6:	2580      	movs	r5, #128	; 0x80
{
 80141a8:	b083      	sub	sp, #12
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 80141aa:	00ed      	lsls	r5, r5, #3
 80141ac:	9500      	str	r5, [sp, #0]
{
 80141ae:	0004      	movs	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 80141b0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80141b2:	2300      	movs	r3, #0
 80141b4:	2100      	movs	r1, #0
 80141b6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80141b8:	f000 fe36 	bl	8014e28 <lv_map>
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 80141bc:	22e1      	movs	r2, #225	; 0xe1
 80141be:	2100      	movs	r1, #0
 80141c0:	4b06      	ldr	r3, [pc, #24]	; (80141dc <lv_anim_path_ease_out+0x38>)
 80141c2:	9500      	str	r5, [sp, #0]
 80141c4:	0092      	lsls	r2, r2, #2
 80141c6:	f000 fe0d 	bl	8014de4 <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 80141ca:	69e3      	ldr	r3, [r4, #28]
 80141cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80141ce:	1ad2      	subs	r2, r2, r3
 80141d0:	4350      	muls	r0, r2
    new_value = new_value >> LV_BEZIER_VAL_SHIFT;
 80141d2:	1280      	asrs	r0, r0, #10
    new_value += a->start_value;
 80141d4:	1818      	adds	r0, r3, r0
}
 80141d6:	b003      	add	sp, #12
 80141d8:	bd30      	pop	{r4, r5, pc}
 80141da:	46c0      	nop			; (mov r8, r8)
 80141dc:	000003b6 	.word	0x000003b6

080141e0 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 80141e0:	b530      	push	{r4, r5, lr}
 80141e2:	ac03      	add	r4, sp, #12
 80141e4:	2500      	movs	r5, #0
 80141e6:	5f64      	ldrsh	r4, [r4, r5]
    area_p->x1 = x1;
 80141e8:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 80141ea:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
 80141ec:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 80141ee:	80c4      	strh	r4, [r0, #6]
}
 80141f0:	bd30      	pop	{r4, r5, pc}
 80141f2:	46c0      	nop			; (mov r8, r8)

080141f4 <lv_area_set_height>:
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
    area_p->y2 = area_p->y1 + h - 1;
 80141f4:	1e4b      	subs	r3, r1, #1
 80141f6:	8841      	ldrh	r1, [r0, #2]
 80141f8:	18c9      	adds	r1, r1, r3
 80141fa:	80c1      	strh	r1, [r0, #6]
}
 80141fc:	4770      	bx	lr
 80141fe:	46c0      	nop			; (mov r8, r8)

08014200 <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 8014200:	0002      	movs	r2, r0
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 8014202:	2304      	movs	r3, #4
 8014204:	5ec0      	ldrsh	r0, [r0, r3]
 8014206:	2300      	movs	r3, #0
 8014208:	5ed1      	ldrsh	r1, [r2, r3]
 801420a:	1a41      	subs	r1, r0, r1
 801420c:	2006      	movs	r0, #6
 801420e:	5e13      	ldrsh	r3, [r2, r0]
 8014210:	2002      	movs	r0, #2
 8014212:	5e10      	ldrsh	r0, [r2, r0]
 8014214:	3101      	adds	r1, #1
 8014216:	1a18      	subs	r0, r3, r0
 8014218:	3001      	adds	r0, #1
 801421a:	4348      	muls	r0, r1

    return size;
}
 801421c:	4770      	bx	lr
 801421e:	46c0      	nop			; (mov r8, r8)

08014220 <lv_area_increase>:

void lv_area_increase(lv_area_t * area, lv_coord_t w_extra, lv_coord_t h_extra)
{
    area->x1 -= w_extra;
 8014220:	8803      	ldrh	r3, [r0, #0]
 8014222:	b289      	uxth	r1, r1
 8014224:	1a5b      	subs	r3, r3, r1
 8014226:	8003      	strh	r3, [r0, #0]
    area->x2 += w_extra;
 8014228:	8883      	ldrh	r3, [r0, #4]
    area->y1 -= h_extra;
 801422a:	b292      	uxth	r2, r2
    area->x2 += w_extra;
 801422c:	18c9      	adds	r1, r1, r3
    area->y1 -= h_extra;
 801422e:	8843      	ldrh	r3, [r0, #2]
    area->x2 += w_extra;
 8014230:	8081      	strh	r1, [r0, #4]
    area->y1 -= h_extra;
 8014232:	1a9b      	subs	r3, r3, r2
 8014234:	8043      	strh	r3, [r0, #2]
    area->y2 += h_extra;
 8014236:	88c3      	ldrh	r3, [r0, #6]
 8014238:	18d2      	adds	r2, r2, r3
 801423a:	80c2      	strh	r2, [r0, #6]
}
 801423c:	4770      	bx	lr
 801423e:	46c0      	nop			; (mov r8, r8)

08014240 <lv_area_move>:

void lv_area_move(lv_area_t * area, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
    area->x1 += x_ofs;
 8014240:	8803      	ldrh	r3, [r0, #0]
 8014242:	b289      	uxth	r1, r1
 8014244:	18cb      	adds	r3, r1, r3
 8014246:	8003      	strh	r3, [r0, #0]
    area->x2 += x_ofs;
 8014248:	8883      	ldrh	r3, [r0, #4]
    area->y1 += y_ofs;
 801424a:	b292      	uxth	r2, r2
    area->x2 += x_ofs;
 801424c:	18c9      	adds	r1, r1, r3
    area->y1 += y_ofs;
 801424e:	8843      	ldrh	r3, [r0, #2]
    area->x2 += x_ofs;
 8014250:	8081      	strh	r1, [r0, #4]
    area->y1 += y_ofs;
 8014252:	18d3      	adds	r3, r2, r3
 8014254:	8043      	strh	r3, [r0, #2]
    area->y2 += y_ofs;
 8014256:	88c3      	ldrh	r3, [r0, #6]
 8014258:	18d2      	adds	r2, r2, r3
 801425a:	80c2      	strh	r2, [r0, #6]
}
 801425c:	4770      	bx	lr
 801425e:	46c0      	nop			; (mov r8, r8)

08014260 <_lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8014260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014262:	46c6      	mov	lr, r8
    /*Get the smaller area from 'a1_p' and 'a2_p'*/
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8014264:	8813      	ldrh	r3, [r2, #0]
 8014266:	2700      	movs	r7, #0
 8014268:	5fcd      	ldrsh	r5, [r1, r7]
 801426a:	1c1c      	adds	r4, r3, #0
 801426c:	b21b      	sxth	r3, r3
{
 801426e:	b500      	push	{lr}
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8014270:	880e      	ldrh	r6, [r1, #0]
 8014272:	42ab      	cmp	r3, r5
 8014274:	da00      	bge.n	8014278 <_lv_area_intersect+0x18>
 8014276:	1c34      	adds	r4, r6, #0
 8014278:	8004      	strh	r4, [r0, #0]
 801427a:	b223      	sxth	r3, r4
 801427c:	4698      	mov	r8, r3
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 801427e:	8853      	ldrh	r3, [r2, #2]
 8014280:	2502      	movs	r5, #2
 8014282:	5f4e      	ldrsh	r6, [r1, r5]
 8014284:	1c1c      	adds	r4, r3, #0
 8014286:	b21b      	sxth	r3, r3
 8014288:	884f      	ldrh	r7, [r1, #2]
 801428a:	42b3      	cmp	r3, r6
 801428c:	da00      	bge.n	8014290 <_lv_area_intersect+0x30>
 801428e:	1c3c      	adds	r4, r7, #0
 8014290:	8044      	strh	r4, [r0, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8014292:	888b      	ldrh	r3, [r1, #4]
 8014294:	2504      	movs	r5, #4
 8014296:	5f4f      	ldrsh	r7, [r1, r5]
 8014298:	469c      	mov	ip, r3
 801429a:	8893      	ldrh	r3, [r2, #4]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 801429c:	b226      	sxth	r6, r4
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 801429e:	1c1c      	adds	r4, r3, #0
 80142a0:	b21b      	sxth	r3, r3
 80142a2:	42bb      	cmp	r3, r7
 80142a4:	dd00      	ble.n	80142a8 <_lv_area_intersect+0x48>
 80142a6:	4664      	mov	r4, ip
 80142a8:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 80142aa:	88d3      	ldrh	r3, [r2, #6]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 80142ac:	b227      	sxth	r7, r4
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 80142ae:	88cc      	ldrh	r4, [r1, #6]
 80142b0:	2506      	movs	r5, #6
 80142b2:	5f49      	ldrsh	r1, [r1, r5]
 80142b4:	1c1a      	adds	r2, r3, #0
 80142b6:	b21b      	sxth	r3, r3
 80142b8:	428b      	cmp	r3, r1
 80142ba:	dd00      	ble.n	80142be <_lv_area_intersect+0x5e>
 80142bc:	1c22      	adds	r2, r4, #0
 80142be:	80c2      	strh	r2, [r0, #6]
 80142c0:	b213      	sxth	r3, r2

    /*If x1 or y1 greater than x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
        union_ok = false;
 80142c2:	2000      	movs	r0, #0
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 80142c4:	45b8      	cmp	r8, r7
 80142c6:	dc04      	bgt.n	80142d2 <_lv_area_intersect+0x72>
 80142c8:	0ff0      	lsrs	r0, r6, #31
 80142ca:	17da      	asrs	r2, r3, #31
 80142cc:	42b3      	cmp	r3, r6
 80142ce:	4150      	adcs	r0, r2
 80142d0:	b2c0      	uxtb	r0, r0
    }

    return union_ok;
}
 80142d2:	bc80      	pop	{r7}
 80142d4:	46b8      	mov	r8, r7
 80142d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080142d8 <_lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 80142d8:	8813      	ldrh	r3, [r2, #0]
{
 80142da:	b5f0      	push	{r4, r5, r6, r7, lr}
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 80142dc:	2700      	movs	r7, #0
 80142de:	5fcd      	ldrsh	r5, [r1, r7]
 80142e0:	1c1c      	adds	r4, r3, #0
 80142e2:	b21b      	sxth	r3, r3
 80142e4:	880e      	ldrh	r6, [r1, #0]
 80142e6:	42ab      	cmp	r3, r5
 80142e8:	dd00      	ble.n	80142ec <_lv_area_join+0x14>
 80142ea:	1c34      	adds	r4, r6, #0
 80142ec:	8004      	strh	r4, [r0, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 80142ee:	8853      	ldrh	r3, [r2, #2]
 80142f0:	2702      	movs	r7, #2
 80142f2:	5fcd      	ldrsh	r5, [r1, r7]
 80142f4:	1c1c      	adds	r4, r3, #0
 80142f6:	b21b      	sxth	r3, r3
 80142f8:	884e      	ldrh	r6, [r1, #2]
 80142fa:	42ab      	cmp	r3, r5
 80142fc:	dd00      	ble.n	8014300 <_lv_area_join+0x28>
 80142fe:	1c34      	adds	r4, r6, #0
 8014300:	8044      	strh	r4, [r0, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 8014302:	8893      	ldrh	r3, [r2, #4]
 8014304:	2704      	movs	r7, #4
 8014306:	5fcd      	ldrsh	r5, [r1, r7]
 8014308:	1c1c      	adds	r4, r3, #0
 801430a:	b21b      	sxth	r3, r3
 801430c:	888e      	ldrh	r6, [r1, #4]
 801430e:	42ab      	cmp	r3, r5
 8014310:	da00      	bge.n	8014314 <_lv_area_join+0x3c>
 8014312:	1c34      	adds	r4, r6, #0
 8014314:	8084      	strh	r4, [r0, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 8014316:	88d3      	ldrh	r3, [r2, #6]
 8014318:	88cc      	ldrh	r4, [r1, #6]
 801431a:	2506      	movs	r5, #6
 801431c:	5f49      	ldrsh	r1, [r1, r5]
 801431e:	1c1a      	adds	r2, r3, #0
 8014320:	b21b      	sxth	r3, r3
 8014322:	428b      	cmp	r3, r1
 8014324:	da00      	bge.n	8014328 <_lv_area_join+0x50>
 8014326:	1c22      	adds	r2, r4, #0
 8014328:	80c2      	strh	r2, [r0, #6]
}
 801432a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801432c <_lv_area_is_point_on>:
 * @param p_p pointer to a point
 * @param radius radius of area (e.g. for rounded rectangle)
 * @return false:the point is out of the area
 */
bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius)
{
 801432c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801432e:	464e      	mov	r6, r9
 8014330:	4645      	mov	r5, r8
 8014332:	46de      	mov	lr, fp
 8014334:	4657      	mov	r7, sl
 8014336:	b5e0      	push	{r5, r6, r7, lr}
    /*First check the basic area*/
    bool is_on_rect = false;
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8014338:	2300      	movs	r3, #0
 801433a:	5ecd      	ldrsh	r5, [r1, r3]
 801433c:	2300      	movs	r3, #0
 801433e:	5ec6      	ldrsh	r6, [r0, r3]
{
 8014340:	000c      	movs	r4, r1
 8014342:	b089      	sub	sp, #36	; 0x24
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8014344:	42b5      	cmp	r5, r6
 8014346:	db62      	blt.n	801440e <_lv_area_is_point_on+0xe2>
 8014348:	2104      	movs	r1, #4
 801434a:	5e43      	ldrsh	r3, [r0, r1]
 801434c:	4699      	mov	r9, r3
 801434e:	429d      	cmp	r5, r3
 8014350:	dc5d      	bgt.n	801440e <_lv_area_is_point_on+0xe2>
 8014352:	2302      	movs	r3, #2
 8014354:	5ee7      	ldrsh	r7, [r4, r3]
 8014356:	2102      	movs	r1, #2
 8014358:	5e43      	ldrsh	r3, [r0, r1]
 801435a:	469a      	mov	sl, r3
 801435c:	429f      	cmp	r7, r3
 801435e:	db56      	blt.n	801440e <_lv_area_is_point_on+0xe2>
 8014360:	2306      	movs	r3, #6
 8014362:	5ec1      	ldrsh	r1, [r0, r3]
 8014364:	9100      	str	r1, [sp, #0]
 8014366:	428f      	cmp	r7, r1
 8014368:	dc51      	bgt.n	801440e <_lv_area_is_point_on+0xe2>
        is_on_rect = true;
    }
    if(!is_on_rect)
        return false;
    /*Now handle potential rounded rectangles*/
    if(radius <= 0) {
 801436a:	2a00      	cmp	r2, #0
 801436c:	dc00      	bgt.n	8014370 <_lv_area_is_point_on+0x44>
 801436e:	e081      	b.n	8014474 <_lv_area_is_point_on+0x148>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014370:	b2b1      	uxth	r1, r6
 8014372:	468b      	mov	fp, r1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014374:	4669      	mov	r1, sp
 8014376:	4650      	mov	r0, sl
 8014378:	8809      	ldrh	r1, [r1, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801437a:	464b      	mov	r3, r9
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801437c:	9102      	str	r1, [sp, #8]
 801437e:	b281      	uxth	r1, r0
        radius = max_radius;

    /*Check if it's in one of the corners*/
    lv_area_t corner_area;
    /*Top left*/
    corner_area.x1 = a_p->x1;
 8014380:	a806      	add	r0, sp, #24
 8014382:	8006      	strh	r6, [r0, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014384:	4658      	mov	r0, fp
 8014386:	b29b      	uxth	r3, r3
 8014388:	9304      	str	r3, [sp, #16]
 801438a:	3301      	adds	r3, #1
 801438c:	1a1b      	subs	r3, r3, r0
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 801438e:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014390:	9101      	str	r1, [sp, #4]
 8014392:	0fd9      	lsrs	r1, r3, #31
 8014394:	18c9      	adds	r1, r1, r3
 8014396:	9b02      	ldr	r3, [sp, #8]
 8014398:	9801      	ldr	r0, [sp, #4]
 801439a:	3301      	adds	r3, #1
 801439c:	1a1b      	subs	r3, r3, r0
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 801439e:	b21b      	sxth	r3, r3
 80143a0:	0fd8      	lsrs	r0, r3, #31
 80143a2:	4684      	mov	ip, r0
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 80143a4:	1049      	asrs	r1, r1, #1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 80143a6:	4463      	add	r3, ip
    lv_coord_t max_radius = LV_MIN(w, h);
 80143a8:	4688      	mov	r8, r1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 80143aa:	1058      	asrs	r0, r3, #1
    lv_coord_t max_radius = LV_MIN(w, h);
 80143ac:	4281      	cmp	r1, r0
 80143ae:	dd00      	ble.n	80143b2 <_lv_area_is_point_on+0x86>
 80143b0:	4680      	mov	r8, r0
    corner_area.x2 = a_p->x1 + radius;
 80143b2:	4643      	mov	r3, r8
 80143b4:	b219      	sxth	r1, r3
 80143b6:	4291      	cmp	r1, r2
 80143b8:	dd00      	ble.n	80143bc <_lv_area_is_point_on+0x90>
 80143ba:	1c13      	adds	r3, r2, #0
 80143bc:	b29b      	uxth	r3, r3
 80143be:	4698      	mov	r8, r3
 80143c0:	445b      	add	r3, fp
 80143c2:	b29a      	uxth	r2, r3
 80143c4:	a906      	add	r1, sp, #24
 80143c6:	b21b      	sxth	r3, r3
 80143c8:	808b      	strh	r3, [r1, #4]
    corner_area.y1 = a_p->y1;
    corner_area.y2 = a_p->y1 + radius;
 80143ca:	9901      	ldr	r1, [sp, #4]
    corner_area.x2 = a_p->x1 + radius;
 80143cc:	9203      	str	r2, [sp, #12]
    corner_area.y2 = a_p->y1 + radius;
 80143ce:	000a      	movs	r2, r1
 80143d0:	4442      	add	r2, r8
 80143d2:	b210      	sxth	r0, r2
 80143d4:	9005      	str	r0, [sp, #20]
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 80143d6:	429d      	cmp	r5, r3
 80143d8:	dc21      	bgt.n	801441e <_lv_area_is_point_on+0xf2>
 80143da:	4287      	cmp	r7, r0
 80143dc:	dc1f      	bgt.n	801441e <_lv_area_is_point_on+0xf2>
    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
 80143de:	465a      	mov	r2, fp
    lv_coord_t py = p->y - cy;

    uint32_t r_sqrd = r * r;
    uint32_t dist = (px * px) + (py * py);

    if(dist <= r_sqrd)
 80143e0:	2000      	movs	r0, #0
        corner_area.x2 += radius;
 80143e2:	9b03      	ldr	r3, [sp, #12]
    lv_coord_t px = p->x - cx;
 80143e4:	1aad      	subs	r5, r5, r2
        corner_area.x2 += radius;
 80143e6:	4443      	add	r3, r8
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80143e8:	b21b      	sxth	r3, r3
 80143ea:	1b9b      	subs	r3, r3, r6
 80143ec:	0fde      	lsrs	r6, r3, #31
 80143ee:	18f6      	adds	r6, r6, r3
 80143f0:	1076      	asrs	r6, r6, #1
    lv_coord_t cx = area->x1 + r;
 80143f2:	b2b3      	uxth	r3, r6
    lv_coord_t py = p->y - cy;
 80143f4:	1a7f      	subs	r7, r7, r1
    lv_coord_t px = p->x - cx;
 80143f6:	1aed      	subs	r5, r5, r3
    lv_coord_t py = p->y - cy;
 80143f8:	1aff      	subs	r7, r7, r3
    uint32_t dist = (px * px) + (py * py);
 80143fa:	b22d      	sxth	r5, r5
 80143fc:	b23f      	sxth	r7, r7
 80143fe:	436d      	muls	r5, r5
 8014400:	437f      	muls	r7, r7
    uint32_t r_sqrd = r * r;
 8014402:	4376      	muls	r6, r6
    uint32_t dist = (px * px) + (py * py);
 8014404:	19ed      	adds	r5, r5, r7
    if(dist <= r_sqrd)
 8014406:	42ae      	cmp	r6, r5
 8014408:	4140      	adcs	r0, r0
 801440a:	b2c0      	uxtb	r0, r0
 801440c:	e000      	b.n	8014410 <_lv_area_is_point_on+0xe4>
        return false;
 801440e:	2000      	movs	r0, #0
}
 8014410:	b009      	add	sp, #36	; 0x24
 8014412:	bcf0      	pop	{r4, r5, r6, r7}
 8014414:	46bb      	mov	fp, r7
 8014416:	46b2      	mov	sl, r6
 8014418:	46a9      	mov	r9, r5
 801441a:	46a0      	mov	r8, r4
 801441c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    corner_area.y1 = a_p->y2 - radius;
 801441e:	4641      	mov	r1, r8
 8014420:	9b02      	ldr	r3, [sp, #8]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8014422:	2200      	movs	r2, #0
    corner_area.y1 = a_p->y2 - radius;
 8014424:	1a5b      	subs	r3, r3, r1
 8014426:	a906      	add	r1, sp, #24
 8014428:	804b      	strh	r3, [r1, #2]
    corner_area.y2 = a_p->y2;
 801442a:	9b00      	ldr	r3, [sp, #0]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801442c:	a806      	add	r0, sp, #24
    corner_area.y2 = a_p->y2;
 801442e:	80cb      	strh	r3, [r1, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8014430:	0021      	movs	r1, r4
 8014432:	f7ff ff7b 	bl	801432c <_lv_area_is_point_on>
 8014436:	9000      	str	r0, [sp, #0]
 8014438:	2800      	cmp	r0, #0
 801443a:	d01d      	beq.n	8014478 <_lv_area_is_point_on+0x14c>
    lv_coord_t px = p->x - cx;
 801443c:	4658      	mov	r0, fp
        corner_area.x2 += radius;
 801443e:	9903      	ldr	r1, [sp, #12]
    lv_coord_t py = p->y - cy;
 8014440:	9a02      	ldr	r2, [sp, #8]
        corner_area.x2 += radius;
 8014442:	4441      	add	r1, r8
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8014444:	b20b      	sxth	r3, r1
 8014446:	1b9e      	subs	r6, r3, r6
 8014448:	0ff3      	lsrs	r3, r6, #31
 801444a:	199e      	adds	r6, r3, r6
    lv_coord_t px = p->x - cx;
 801444c:	1a2b      	subs	r3, r5, r0
    lv_coord_t py = p->y - cy;
 801444e:	4640      	mov	r0, r8
 8014450:	1aba      	subs	r2, r7, r2
 8014452:	0047      	lsls	r7, r0, #1
    if(dist <= r_sqrd)
 8014454:	2000      	movs	r0, #0
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8014456:	1076      	asrs	r6, r6, #1
    lv_coord_t cx = area->x1 + r;
 8014458:	b2b1      	uxth	r1, r6
    lv_coord_t py = p->y - cy;
 801445a:	19d2      	adds	r2, r2, r7
    lv_coord_t px = p->x - cx;
 801445c:	1a5b      	subs	r3, r3, r1
    lv_coord_t py = p->y - cy;
 801445e:	1a52      	subs	r2, r2, r1
    uint32_t dist = (px * px) + (py * py);
 8014460:	b21b      	sxth	r3, r3
 8014462:	b212      	sxth	r2, r2
 8014464:	435b      	muls	r3, r3
 8014466:	4352      	muls	r2, r2
    uint32_t r_sqrd = r * r;
 8014468:	4376      	muls	r6, r6
    uint32_t dist = (px * px) + (py * py);
 801446a:	189b      	adds	r3, r3, r2
    if(dist <= r_sqrd)
 801446c:	429e      	cmp	r6, r3
 801446e:	4140      	adcs	r0, r0
 8014470:	b2c0      	uxtb	r0, r0
 8014472:	e7cd      	b.n	8014410 <_lv_area_is_point_on+0xe4>
        return true;
 8014474:	2001      	movs	r0, #1
 8014476:	e7cb      	b.n	8014410 <_lv_area_is_point_on+0xe4>
    corner_area.x1 = a_p->x2 - radius;
 8014478:	4642      	mov	r2, r8
    corner_area.x2 = a_p->x2;
 801447a:	4648      	mov	r0, r9
    corner_area.x1 = a_p->x2 - radius;
 801447c:	9b04      	ldr	r3, [sp, #16]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801447e:	0021      	movs	r1, r4
    corner_area.x1 = a_p->x2 - radius;
 8014480:	1a9e      	subs	r6, r3, r2
 8014482:	b2b6      	uxth	r6, r6
 8014484:	aa06      	add	r2, sp, #24
    corner_area.x2 = a_p->x2;
 8014486:	8090      	strh	r0, [r2, #4]
    corner_area.x1 = a_p->x2 - radius;
 8014488:	8016      	strh	r6, [r2, #0]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801448a:	a806      	add	r0, sp, #24
 801448c:	2200      	movs	r2, #0
 801448e:	f7ff ff4d 	bl	801432c <_lv_area_is_point_on>
 8014492:	4683      	mov	fp, r0
 8014494:	2800      	cmp	r0, #0
 8014496:	d01e      	beq.n	80144d6 <_lv_area_is_point_on+0x1aa>
        corner_area.x1 -= radius;
 8014498:	4642      	mov	r2, r8
 801449a:	1ab3      	subs	r3, r6, r2
    lv_coord_t r = (area->x2 - area->x1) / 2;
 801449c:	464a      	mov	r2, r9
 801449e:	4644      	mov	r4, r8
 80144a0:	b21b      	sxth	r3, r3
 80144a2:	1ad3      	subs	r3, r2, r3
 80144a4:	0fda      	lsrs	r2, r3, #31
 80144a6:	18d2      	adds	r2, r2, r3
    lv_coord_t px = p->x - cx;
 80144a8:	9904      	ldr	r1, [sp, #16]
 80144aa:	0063      	lsls	r3, r4, #1
    lv_coord_t py = p->y - cy;
 80144ac:	9c02      	ldr	r4, [sp, #8]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80144ae:	1052      	asrs	r2, r2, #1
    lv_coord_t cx = area->x1 + r;
 80144b0:	b29b      	uxth	r3, r3
    lv_coord_t px = p->x - cx;
 80144b2:	1a69      	subs	r1, r5, r1
    lv_coord_t py = p->y - cy;
 80144b4:	1b3f      	subs	r7, r7, r4
    lv_coord_t cx = area->x1 + r;
 80144b6:	b290      	uxth	r0, r2
    lv_coord_t px = p->x - cx;
 80144b8:	1859      	adds	r1, r3, r1
    lv_coord_t py = p->y - cy;
 80144ba:	19db      	adds	r3, r3, r7
    lv_coord_t px = p->x - cx;
 80144bc:	1a09      	subs	r1, r1, r0
    lv_coord_t py = p->y - cy;
 80144be:	1a1b      	subs	r3, r3, r0
    uint32_t dist = (px * px) + (py * py);
 80144c0:	b209      	sxth	r1, r1
 80144c2:	b21b      	sxth	r3, r3
 80144c4:	4349      	muls	r1, r1
 80144c6:	435b      	muls	r3, r3
    uint32_t r_sqrd = r * r;
 80144c8:	4352      	muls	r2, r2
    if(dist <= r_sqrd)
 80144ca:	9800      	ldr	r0, [sp, #0]
    uint32_t dist = (px * px) + (py * py);
 80144cc:	18cb      	adds	r3, r1, r3
    if(dist <= r_sqrd)
 80144ce:	429a      	cmp	r2, r3
 80144d0:	4140      	adcs	r0, r0
 80144d2:	b2c0      	uxtb	r0, r0
 80144d4:	e79c      	b.n	8014410 <_lv_area_is_point_on+0xe4>
    corner_area.y1 = a_p->y1;
 80144d6:	4652      	mov	r2, sl
 80144d8:	ab06      	add	r3, sp, #24
 80144da:	805a      	strh	r2, [r3, #2]
    corner_area.y2 = a_p->y1 + radius;
 80144dc:	9a05      	ldr	r2, [sp, #20]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80144de:	0021      	movs	r1, r4
    corner_area.y2 = a_p->y1 + radius;
 80144e0:	80da      	strh	r2, [r3, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80144e2:	0018      	movs	r0, r3
 80144e4:	2200      	movs	r2, #0
 80144e6:	f7ff ff21 	bl	801432c <_lv_area_is_point_on>
 80144ea:	2800      	cmp	r0, #0
 80144ec:	d0c2      	beq.n	8014474 <_lv_area_is_point_on+0x148>
        corner_area.x1 -= radius;
 80144ee:	4643      	mov	r3, r8
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80144f0:	464a      	mov	r2, r9
        corner_area.x1 -= radius;
 80144f2:	1af3      	subs	r3, r6, r3
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80144f4:	b21b      	sxth	r3, r3
 80144f6:	1ad3      	subs	r3, r2, r3
 80144f8:	0fda      	lsrs	r2, r3, #31
 80144fa:	18d3      	adds	r3, r2, r3
    lv_coord_t px = p->x - cx;
 80144fc:	4642      	mov	r2, r8
    if(dist <= r_sqrd)
 80144fe:	465e      	mov	r6, fp
    lv_coord_t px = p->x - cx;
 8014500:	0051      	lsls	r1, r2, #1
 8014502:	9a04      	ldr	r2, [sp, #16]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8014504:	105b      	asrs	r3, r3, #1
    lv_coord_t px = p->x - cx;
 8014506:	1aad      	subs	r5, r5, r2
    lv_coord_t py = p->y - cy;
 8014508:	9a01      	ldr	r2, [sp, #4]
    lv_coord_t cx = area->x1 + r;
 801450a:	b298      	uxth	r0, r3
    lv_coord_t px = p->x - cx;
 801450c:	1949      	adds	r1, r1, r5
    lv_coord_t py = p->y - cy;
 801450e:	1aba      	subs	r2, r7, r2
    lv_coord_t px = p->x - cx;
 8014510:	1a09      	subs	r1, r1, r0
    lv_coord_t py = p->y - cy;
 8014512:	1a12      	subs	r2, r2, r0
    uint32_t dist = (px * px) + (py * py);
 8014514:	b209      	sxth	r1, r1
 8014516:	b212      	sxth	r2, r2
 8014518:	4349      	muls	r1, r1
 801451a:	4352      	muls	r2, r2
    uint32_t r_sqrd = r * r;
 801451c:	435b      	muls	r3, r3
    uint32_t dist = (px * px) + (py * py);
 801451e:	188a      	adds	r2, r1, r2
    if(dist <= r_sqrd)
 8014520:	4293      	cmp	r3, r2
 8014522:	4176      	adcs	r6, r6
 8014524:	b2f0      	uxtb	r0, r6
 8014526:	e773      	b.n	8014410 <_lv_area_is_point_on+0xe4>

08014528 <_lv_area_is_on>:
{
 8014528:	b510      	push	{r4, lr}
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 801452a:	2300      	movs	r3, #0
 801452c:	5ec2      	ldrsh	r2, [r0, r3]
 801452e:	2404      	movs	r4, #4
 8014530:	5f0b      	ldrsh	r3, [r1, r4]
 8014532:	429a      	cmp	r2, r3
 8014534:	dc15      	bgt.n	8014562 <_lv_area_is_on+0x3a>
 8014536:	2304      	movs	r3, #4
 8014538:	5ec2      	ldrsh	r2, [r0, r3]
 801453a:	2400      	movs	r4, #0
 801453c:	5f0b      	ldrsh	r3, [r1, r4]
 801453e:	429a      	cmp	r2, r3
 8014540:	db0f      	blt.n	8014562 <_lv_area_is_on+0x3a>
 8014542:	2302      	movs	r3, #2
 8014544:	5ec2      	ldrsh	r2, [r0, r3]
 8014546:	2406      	movs	r4, #6
 8014548:	5f0b      	ldrsh	r3, [r1, r4]
 801454a:	429a      	cmp	r2, r3
 801454c:	dc09      	bgt.n	8014562 <_lv_area_is_on+0x3a>
 801454e:	2306      	movs	r3, #6
 8014550:	5ec2      	ldrsh	r2, [r0, r3]
 8014552:	2302      	movs	r3, #2
 8014554:	5ecb      	ldrsh	r3, [r1, r3]
 8014556:	17d0      	asrs	r0, r2, #31
 8014558:	0fd9      	lsrs	r1, r3, #31
 801455a:	429a      	cmp	r2, r3
 801455c:	4148      	adcs	r0, r1
 801455e:	b2c0      	uxtb	r0, r0
 8014560:	e000      	b.n	8014564 <_lv_area_is_on+0x3c>
        return false;
 8014562:	2000      	movs	r0, #0
}
 8014564:	bd10      	pop	{r4, pc}
 8014566:	46c0      	nop			; (mov r8, r8)

08014568 <_lv_area_is_in>:
{
 8014568:	b5f0      	push	{r4, r5, r6, r7, lr}
 801456a:	46ce      	mov	lr, r9
 801456c:	4647      	mov	r7, r8
 801456e:	b580      	push	{r7, lr}
 8014570:	0015      	movs	r5, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8014572:	2300      	movs	r3, #0
 8014574:	5ec6      	ldrsh	r6, [r0, r3]
 8014576:	2200      	movs	r2, #0
 8014578:	5e8b      	ldrsh	r3, [r1, r2]
{
 801457a:	000c      	movs	r4, r1
 801457c:	b083      	sub	sp, #12
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801457e:	42b3      	cmp	r3, r6
 8014580:	dc20      	bgt.n	80145c4 <_lv_area_is_in+0x5c>
 8014582:	2202      	movs	r2, #2
 8014584:	5e83      	ldrsh	r3, [r0, r2]
 8014586:	2102      	movs	r1, #2
 8014588:	5e62      	ldrsh	r2, [r4, r1]
 801458a:	429a      	cmp	r2, r3
 801458c:	dc1a      	bgt.n	80145c4 <_lv_area_is_in+0x5c>
 801458e:	2104      	movs	r1, #4
 8014590:	5e42      	ldrsh	r2, [r0, r1]
 8014592:	4690      	mov	r8, r2
 8014594:	2104      	movs	r1, #4
 8014596:	5e62      	ldrsh	r2, [r4, r1]
 8014598:	4542      	cmp	r2, r8
 801459a:	db13      	blt.n	80145c4 <_lv_area_is_in+0x5c>
       ain_p->y2 <= aholder_p->y2) {
 801459c:	2106      	movs	r1, #6
 801459e:	5e42      	ldrsh	r2, [r0, r1]
 80145a0:	4691      	mov	r9, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80145a2:	2106      	movs	r1, #6
 80145a4:	5e62      	ldrsh	r2, [r4, r1]
 80145a6:	454a      	cmp	r2, r9
 80145a8:	db0c      	blt.n	80145c4 <_lv_area_is_in+0x5c>
    if(radius == 0) return true;
 80145aa:	2001      	movs	r0, #1
 80145ac:	2d00      	cmp	r5, #0
 80145ae:	d00a      	beq.n	80145c6 <_lv_area_is_in+0x5e>
    p.x = ain_p->x1;
 80145b0:	af01      	add	r7, sp, #4
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80145b2:	002a      	movs	r2, r5
 80145b4:	0039      	movs	r1, r7
 80145b6:	0020      	movs	r0, r4
    p.x = ain_p->x1;
 80145b8:	803e      	strh	r6, [r7, #0]
    p.y = ain_p->y1;
 80145ba:	807b      	strh	r3, [r7, #2]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80145bc:	f7ff feb6 	bl	801432c <_lv_area_is_point_on>
 80145c0:	2800      	cmp	r0, #0
 80145c2:	d105      	bne.n	80145d0 <_lv_area_is_in+0x68>
    if(!is_in) return false;
 80145c4:	2000      	movs	r0, #0
}
 80145c6:	b003      	add	sp, #12
 80145c8:	bcc0      	pop	{r6, r7}
 80145ca:	46b9      	mov	r9, r7
 80145cc:	46b0      	mov	r8, r6
 80145ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p.x = ain_p->x2;
 80145d0:	4643      	mov	r3, r8
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80145d2:	002a      	movs	r2, r5
 80145d4:	0039      	movs	r1, r7
 80145d6:	0020      	movs	r0, r4
    p.x = ain_p->x2;
 80145d8:	803b      	strh	r3, [r7, #0]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80145da:	f7ff fea7 	bl	801432c <_lv_area_is_point_on>
 80145de:	2800      	cmp	r0, #0
 80145e0:	d0f0      	beq.n	80145c4 <_lv_area_is_in+0x5c>
    p.y = ain_p->y2;
 80145e2:	464b      	mov	r3, r9
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80145e4:	002a      	movs	r2, r5
 80145e6:	0039      	movs	r1, r7
 80145e8:	0020      	movs	r0, r4
    p.x = ain_p->x1;
 80145ea:	803e      	strh	r6, [r7, #0]
    p.y = ain_p->y2;
 80145ec:	807b      	strh	r3, [r7, #2]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80145ee:	f7ff fe9d 	bl	801432c <_lv_area_is_point_on>
 80145f2:	2800      	cmp	r0, #0
 80145f4:	d0e6      	beq.n	80145c4 <_lv_area_is_in+0x5c>
    p.x = ain_p->x2;
 80145f6:	4643      	mov	r3, r8
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80145f8:	002a      	movs	r2, r5
 80145fa:	0039      	movs	r1, r7
 80145fc:	0020      	movs	r0, r4
    p.x = ain_p->x2;
 80145fe:	803b      	strh	r3, [r7, #0]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8014600:	f7ff fe94 	bl	801432c <_lv_area_is_point_on>
 8014604:	e7df      	b.n	80145c6 <_lv_area_is_in+0x5e>
 8014606:	46c0      	nop			; (mov r8, r8)

08014608 <lv_point_transform>:
{
 8014608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801460a:	4645      	mov	r5, r8
 801460c:	4657      	mov	r7, sl
 801460e:	46de      	mov	lr, fp
 8014610:	464e      	mov	r6, r9
 8014612:	b5e0      	push	{r5, r6, r7, lr}
 8014614:	0004      	movs	r4, r0
 8014616:	000f      	movs	r7, r1
 8014618:	4690      	mov	r8, r2
 801461a:	001d      	movs	r5, r3
 801461c:	b085      	sub	sp, #20
    if(angle == 0 && zoom == 256) {
 801461e:	2900      	cmp	r1, #0
 8014620:	d120      	bne.n	8014664 <lv_point_transform+0x5c>
 8014622:	2380      	movs	r3, #128	; 0x80
 8014624:	005b      	lsls	r3, r3, #1
 8014626:	429a      	cmp	r2, r3
 8014628:	d015      	beq.n	8014656 <lv_point_transform+0x4e>
    p->x -= pivot->x;
 801462a:	882a      	ldrh	r2, [r5, #0]
 801462c:	8803      	ldrh	r3, [r0, #0]
 801462e:	1a9b      	subs	r3, r3, r2
 8014630:	b21b      	sxth	r3, r3
 8014632:	8003      	strh	r3, [r0, #0]
    p->y -= pivot->y;
 8014634:	8869      	ldrh	r1, [r5, #2]
 8014636:	8842      	ldrh	r2, [r0, #2]
 8014638:	1a52      	subs	r2, r2, r1
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 801463a:	4641      	mov	r1, r8
 801463c:	434b      	muls	r3, r1
    p->y -= pivot->y;
 801463e:	b212      	sxth	r2, r2
 8014640:	8042      	strh	r2, [r0, #2]
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 8014642:	8829      	ldrh	r1, [r5, #0]
 8014644:	121b      	asrs	r3, r3, #8
 8014646:	185b      	adds	r3, r3, r1
 8014648:	8003      	strh	r3, [r0, #0]
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 801464a:	4643      	mov	r3, r8
 801464c:	435a      	muls	r2, r3
 801464e:	886b      	ldrh	r3, [r5, #2]
 8014650:	1212      	asrs	r2, r2, #8
 8014652:	18d2      	adds	r2, r2, r3
 8014654:	8042      	strh	r2, [r0, #2]
}
 8014656:	b005      	add	sp, #20
 8014658:	bcf0      	pop	{r4, r5, r6, r7}
 801465a:	46bb      	mov	fp, r7
 801465c:	46b2      	mov	sl, r6
 801465e:	46a9      	mov	r9, r5
 8014660:	46a0      	mov	r8, r4
 8014662:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p->x -= pivot->x;
 8014664:	881b      	ldrh	r3, [r3, #0]
 8014666:	8800      	ldrh	r0, [r0, #0]
 8014668:	1ac0      	subs	r0, r0, r3
 801466a:	b200      	sxth	r0, r0
 801466c:	8020      	strh	r0, [r4, #0]
    p->y -= pivot->y;
 801466e:	886a      	ldrh	r2, [r5, #2]
 8014670:	8863      	ldrh	r3, [r4, #2]
 8014672:	1a9b      	subs	r3, r3, r2
    if(angle_prev != angle) {
 8014674:	4a47      	ldr	r2, [pc, #284]	; (8014794 <lv_point_transform+0x18c>)
    p->y -= pivot->y;
 8014676:	b21b      	sxth	r3, r3
    if(angle_prev != angle) {
 8014678:	4692      	mov	sl, r2
 801467a:	6812      	ldr	r2, [r2, #0]
    p->y -= pivot->y;
 801467c:	8063      	strh	r3, [r4, #2]
    if(angle_prev != angle) {
 801467e:	428a      	cmp	r2, r1
 8014680:	d066      	beq.n	8014750 <lv_point_transform+0x148>
        if(angle_limited > 3600) angle_limited -= 3600;
 8014682:	23e1      	movs	r3, #225	; 0xe1
 8014684:	011b      	lsls	r3, r3, #4
 8014686:	429f      	cmp	r7, r3
 8014688:	dd00      	ble.n	801468c <lv_point_transform+0x84>
 801468a:	e080      	b.n	801478e <lv_point_transform+0x186>
        if(angle_limited < 0) angle_limited += 3600;
 801468c:	1e3e      	subs	r6, r7, #0
 801468e:	da02      	bge.n	8014696 <lv_point_transform+0x8e>
 8014690:	23e1      	movs	r3, #225	; 0xe1
 8014692:	011b      	lsls	r3, r3, #4
 8014694:	18fe      	adds	r6, r7, r3
        int32_t angle_low = angle_limited / 10;
 8014696:	210a      	movs	r1, #10
 8014698:	0030      	movs	r0, r6
 801469a:	f7eb fdcf 	bl	800023c <__divsi3>
        int32_t angle_high = angle_low + 1;
 801469e:	2301      	movs	r3, #1
        int32_t angle_low = angle_limited / 10;
 80146a0:	4681      	mov	r9, r0
        int32_t angle_high = angle_low + 1;
 80146a2:	444b      	add	r3, r9
 80146a4:	469b      	mov	fp, r3
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 80146a6:	0003      	movs	r3, r0
 80146a8:	0740      	lsls	r0, r0, #29
 80146aa:	1ac0      	subs	r0, r0, r3
 80146ac:	0080      	lsls	r0, r0, #2
 80146ae:	1ac0      	subs	r0, r0, r3
 80146b0:	0040      	lsls	r0, r0, #1
 80146b2:	1986      	adds	r6, r0, r6
        int32_t s1 = lv_trigo_sin(angle_low);
 80146b4:	b218      	sxth	r0, r3
 80146b6:	f000 fb65 	bl	8014d84 <lv_trigo_sin>
        int32_t s2 = lv_trigo_sin(angle_high);
 80146ba:	465a      	mov	r2, fp
        int32_t s1 = lv_trigo_sin(angle_low);
 80146bc:	9001      	str	r0, [sp, #4]
        int32_t s2 = lv_trigo_sin(angle_high);
 80146be:	b210      	sxth	r0, r2
 80146c0:	f000 fb60 	bl	8014d84 <lv_trigo_sin>
        int32_t c1 = lv_trigo_sin(angle_low + 90);
 80146c4:	464b      	mov	r3, r9
 80146c6:	335a      	adds	r3, #90	; 0x5a
        int32_t s2 = lv_trigo_sin(angle_high);
 80146c8:	4683      	mov	fp, r0
        int32_t c1 = lv_trigo_sin(angle_low + 90);
 80146ca:	b218      	sxth	r0, r3
 80146cc:	f000 fb5a 	bl	8014d84 <lv_trigo_sin>
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 80146d0:	464b      	mov	r3, r9
 80146d2:	335b      	adds	r3, #91	; 0x5b
        int32_t c1 = lv_trigo_sin(angle_low + 90);
 80146d4:	9002      	str	r0, [sp, #8]
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 80146d6:	b218      	sxth	r0, r3
 80146d8:	f000 fb54 	bl	8014d84 <lv_trigo_sin>
 80146dc:	9003      	str	r0, [sp, #12]
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80146de:	200a      	movs	r0, #10
 80146e0:	9b01      	ldr	r3, [sp, #4]
 80146e2:	1b82      	subs	r2, r0, r6
 80146e4:	4353      	muls	r3, r2
 80146e6:	0018      	movs	r0, r3
 80146e8:	465b      	mov	r3, fp
 80146ea:	4373      	muls	r3, r6
 80146ec:	210a      	movs	r1, #10
 80146ee:	18c0      	adds	r0, r0, r3
 80146f0:	4691      	mov	r9, r2
 80146f2:	f7eb fda3 	bl	800023c <__divsi3>
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 80146f6:	4b28      	ldr	r3, [pc, #160]	; (8014798 <lv_point_transform+0x190>)
 80146f8:	1142      	asrs	r2, r0, #5
 80146fa:	601a      	str	r2, [r3, #0]
 80146fc:	4693      	mov	fp, r2
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 80146fe:	464a      	mov	r2, r9
 8014700:	9b02      	ldr	r3, [sp, #8]
 8014702:	210a      	movs	r1, #10
 8014704:	4353      	muls	r3, r2
 8014706:	0018      	movs	r0, r3
 8014708:	9b03      	ldr	r3, [sp, #12]
 801470a:	435e      	muls	r6, r3
 801470c:	1980      	adds	r0, r0, r6
 801470e:	f7eb fd95 	bl	800023c <__divsi3>
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8014712:	4b22      	ldr	r3, [pc, #136]	; (801479c <lv_point_transform+0x194>)
 8014714:	1142      	asrs	r2, r0, #5
 8014716:	601a      	str	r2, [r3, #0]
        angle_prev = angle;
 8014718:	4653      	mov	r3, sl
 801471a:	601f      	str	r7, [r3, #0]
    int32_t x = p->x;
 801471c:	2300      	movs	r3, #0
 801471e:	5ee0      	ldrsh	r0, [r4, r3]
    int32_t y = p->y;
 8014720:	2102      	movs	r1, #2
 8014722:	5e63      	ldrsh	r3, [r4, r1]
    if(zoom == 256) {
 8014724:	2180      	movs	r1, #128	; 0x80
 8014726:	0049      	lsls	r1, r1, #1
 8014728:	4588      	cmp	r8, r1
 801472a:	d11a      	bne.n	8014762 <lv_point_transform+0x15a>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801472c:	0011      	movs	r1, r2
 801472e:	465e      	mov	r6, fp
 8014730:	4341      	muls	r1, r0
 8014732:	435e      	muls	r6, r3
 8014734:	1b89      	subs	r1, r1, r6
 8014736:	882e      	ldrh	r6, [r5, #0]
 8014738:	1289      	asrs	r1, r1, #10
 801473a:	1989      	adds	r1, r1, r6
 801473c:	8021      	strh	r1, [r4, #0]
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801473e:	4659      	mov	r1, fp
 8014740:	435a      	muls	r2, r3
 8014742:	4341      	muls	r1, r0
 8014744:	886b      	ldrh	r3, [r5, #2]
 8014746:	188a      	adds	r2, r1, r2
 8014748:	1292      	asrs	r2, r2, #10
 801474a:	18d2      	adds	r2, r2, r3
 801474c:	8062      	strh	r2, [r4, #2]
 801474e:	e782      	b.n	8014656 <lv_point_transform+0x4e>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8014750:	4911      	ldr	r1, [pc, #68]	; (8014798 <lv_point_transform+0x190>)
 8014752:	4a12      	ldr	r2, [pc, #72]	; (801479c <lv_point_transform+0x194>)
 8014754:	6809      	ldr	r1, [r1, #0]
 8014756:	6812      	ldr	r2, [r2, #0]
 8014758:	468b      	mov	fp, r1
    if(zoom == 256) {
 801475a:	2180      	movs	r1, #128	; 0x80
 801475c:	0049      	lsls	r1, r1, #1
 801475e:	4588      	cmp	r8, r1
 8014760:	d0e4      	beq.n	801472c <lv_point_transform+0x124>
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 8014762:	0011      	movs	r1, r2
 8014764:	465e      	mov	r6, fp
 8014766:	4341      	muls	r1, r0
 8014768:	435e      	muls	r6, r3
 801476a:	1b89      	subs	r1, r1, r6
 801476c:	4646      	mov	r6, r8
 801476e:	4371      	muls	r1, r6
 8014770:	882e      	ldrh	r6, [r5, #0]
 8014772:	1489      	asrs	r1, r1, #18
 8014774:	1989      	adds	r1, r1, r6
 8014776:	8021      	strh	r1, [r4, #0]
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 8014778:	4659      	mov	r1, fp
 801477a:	435a      	muls	r2, r3
 801477c:	4643      	mov	r3, r8
 801477e:	4341      	muls	r1, r0
 8014780:	188a      	adds	r2, r1, r2
 8014782:	435a      	muls	r2, r3
 8014784:	8868      	ldrh	r0, [r5, #2]
 8014786:	1492      	asrs	r2, r2, #18
 8014788:	1812      	adds	r2, r2, r0
 801478a:	8062      	strh	r2, [r4, #2]
 801478c:	e763      	b.n	8014656 <lv_point_transform+0x4e>
        if(angle_limited > 3600) angle_limited -= 3600;
 801478e:	4b04      	ldr	r3, [pc, #16]	; (80147a0 <lv_point_transform+0x198>)
 8014790:	18fe      	adds	r6, r7, r3
        if(angle_limited < 0) angle_limited += 3600;
 8014792:	e780      	b.n	8014696 <lv_point_transform+0x8e>
 8014794:	20000074 	.word	0x20000074
 8014798:	200005bc 	.word	0x200005bc
 801479c:	200005b8 	.word	0x200005b8
 80147a0:	fffff1f0 	.word	0xfffff1f0

080147a4 <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
 80147a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147a6:	b28c      	uxth	r4, r1
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t)buf;
    if(buf_int & 0x3) {
 80147a8:	0783      	lsls	r3, r0, #30
 80147aa:	d002      	beq.n	80147b2 <lv_color_fill+0xe>
        *buf = color;
 80147ac:	8001      	strh	r1, [r0, #0]
        buf++;
        px_num--;
 80147ae:	3a01      	subs	r2, #1
        buf++;
 80147b0:	3002      	adds	r0, #2
    }

    uint32_t c32 = (uint32_t)color.full + ((uint32_t)color.full << 16);
 80147b2:	0423      	lsls	r3, r4, #16
 80147b4:	191b      	adds	r3, r3, r4
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
 80147b6:	2a10      	cmp	r2, #16
 80147b8:	d95c      	bls.n	8014874 <lv_color_fill+0xd0>
 80147ba:	0016      	movs	r6, r2
 80147bc:	3e11      	subs	r6, #17
 80147be:	0744      	lsls	r4, r0, #29
 80147c0:	d148      	bne.n	8014854 <lv_color_fill+0xb0>
 80147c2:	2e2f      	cmp	r6, #47	; 0x2f
 80147c4:	d946      	bls.n	8014854 <lv_color_fill+0xb0>
 80147c6:	0004      	movs	r4, r0
 80147c8:	2500      	movs	r5, #0
 80147ca:	0936      	lsrs	r6, r6, #4
 80147cc:	1c77      	adds	r7, r6, #1
        buf32++;
        *buf32 = c32;
        buf32++;
        *buf32 = c32;
        buf32++;
        *buf32 = c32;
 80147ce:	3501      	adds	r5, #1
        *buf32 = c32;
 80147d0:	6023      	str	r3, [r4, #0]
 80147d2:	6063      	str	r3, [r4, #4]
 80147d4:	60a3      	str	r3, [r4, #8]
 80147d6:	60e3      	str	r3, [r4, #12]
 80147d8:	6123      	str	r3, [r4, #16]
 80147da:	6163      	str	r3, [r4, #20]
 80147dc:	61a3      	str	r3, [r4, #24]
 80147de:	61e3      	str	r3, [r4, #28]
    while(px_num > 16) {
 80147e0:	3420      	adds	r4, #32
 80147e2:	42af      	cmp	r7, r5
 80147e4:	d8f3      	bhi.n	80147ce <lv_color_fill+0x2a>
        buf32++;
 80147e6:	1c73      	adds	r3, r6, #1
 80147e8:	015b      	lsls	r3, r3, #5
 80147ea:	3a10      	subs	r2, #16

        px_num -= 16;
 80147ec:	0136      	lsls	r6, r6, #4
        buf32++;
 80147ee:	18c0      	adds	r0, r0, r3
        px_num -= 16;
 80147f0:	1b92      	subs	r2, r2, r6
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
        *buf = color;
 80147f2:	8001      	strh	r1, [r0, #0]
    while(px_num) {
 80147f4:	2a01      	cmp	r2, #1
 80147f6:	d02c      	beq.n	8014852 <lv_color_fill+0xae>
        *buf = color;
 80147f8:	8041      	strh	r1, [r0, #2]
    while(px_num) {
 80147fa:	2a02      	cmp	r2, #2
 80147fc:	d029      	beq.n	8014852 <lv_color_fill+0xae>
        *buf = color;
 80147fe:	8081      	strh	r1, [r0, #4]
    while(px_num) {
 8014800:	2a03      	cmp	r2, #3
 8014802:	d026      	beq.n	8014852 <lv_color_fill+0xae>
        *buf = color;
 8014804:	80c1      	strh	r1, [r0, #6]
    while(px_num) {
 8014806:	2a04      	cmp	r2, #4
 8014808:	d023      	beq.n	8014852 <lv_color_fill+0xae>
        *buf = color;
 801480a:	8101      	strh	r1, [r0, #8]
    while(px_num) {
 801480c:	2a05      	cmp	r2, #5
 801480e:	d020      	beq.n	8014852 <lv_color_fill+0xae>
        *buf = color;
 8014810:	8141      	strh	r1, [r0, #10]
    while(px_num) {
 8014812:	2a06      	cmp	r2, #6
 8014814:	d01d      	beq.n	8014852 <lv_color_fill+0xae>
        *buf = color;
 8014816:	8181      	strh	r1, [r0, #12]
    while(px_num) {
 8014818:	2a07      	cmp	r2, #7
 801481a:	d01a      	beq.n	8014852 <lv_color_fill+0xae>
        *buf = color;
 801481c:	81c1      	strh	r1, [r0, #14]
    while(px_num) {
 801481e:	2a08      	cmp	r2, #8
 8014820:	d017      	beq.n	8014852 <lv_color_fill+0xae>
        *buf = color;
 8014822:	8201      	strh	r1, [r0, #16]
    while(px_num) {
 8014824:	2a09      	cmp	r2, #9
 8014826:	d014      	beq.n	8014852 <lv_color_fill+0xae>
        *buf = color;
 8014828:	8241      	strh	r1, [r0, #18]
    while(px_num) {
 801482a:	2a0a      	cmp	r2, #10
 801482c:	d011      	beq.n	8014852 <lv_color_fill+0xae>
        *buf = color;
 801482e:	8281      	strh	r1, [r0, #20]
    while(px_num) {
 8014830:	2a0b      	cmp	r2, #11
 8014832:	d00e      	beq.n	8014852 <lv_color_fill+0xae>
        *buf = color;
 8014834:	82c1      	strh	r1, [r0, #22]
    while(px_num) {
 8014836:	2a0c      	cmp	r2, #12
 8014838:	d00b      	beq.n	8014852 <lv_color_fill+0xae>
        *buf = color;
 801483a:	8301      	strh	r1, [r0, #24]
    while(px_num) {
 801483c:	2a0d      	cmp	r2, #13
 801483e:	d008      	beq.n	8014852 <lv_color_fill+0xae>
        buf++;
        px_num--;
 8014840:	0013      	movs	r3, r2
        *buf = color;
 8014842:	8341      	strh	r1, [r0, #26]
        px_num--;
 8014844:	3b0e      	subs	r3, #14
    while(px_num) {
 8014846:	2a0e      	cmp	r2, #14
 8014848:	d003      	beq.n	8014852 <lv_color_fill+0xae>
        *buf = color;
 801484a:	8381      	strh	r1, [r0, #28]
    while(px_num) {
 801484c:	2b01      	cmp	r3, #1
 801484e:	d000      	beq.n	8014852 <lv_color_fill+0xae>
        *buf = color;
 8014850:	83c1      	strh	r1, [r0, #30]
        *buf = color;
        buf++;
        px_num--;
    }
#endif
}
 8014852:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t * buf32 = (uint32_t *)buf;
 8014854:	0004      	movs	r4, r0
    while(px_num > 16) {
 8014856:	0015      	movs	r5, r2
        px_num -= 16;
 8014858:	3d10      	subs	r5, #16
        *buf32 = c32;
 801485a:	6023      	str	r3, [r4, #0]
        *buf32 = c32;
 801485c:	6063      	str	r3, [r4, #4]
        *buf32 = c32;
 801485e:	60a3      	str	r3, [r4, #8]
        *buf32 = c32;
 8014860:	60e3      	str	r3, [r4, #12]
        *buf32 = c32;
 8014862:	6123      	str	r3, [r4, #16]
        *buf32 = c32;
 8014864:	6163      	str	r3, [r4, #20]
        *buf32 = c32;
 8014866:	61a3      	str	r3, [r4, #24]
        *buf32 = c32;
 8014868:	61e3      	str	r3, [r4, #28]
        buf32++;
 801486a:	3420      	adds	r4, #32
    while(px_num > 16) {
 801486c:	2d10      	cmp	r5, #16
 801486e:	d8f3      	bhi.n	8014858 <lv_color_fill+0xb4>
 8014870:	0936      	lsrs	r6, r6, #4
 8014872:	e7b8      	b.n	80147e6 <lv_color_fill+0x42>
    while(px_num) {
 8014874:	2a00      	cmp	r2, #0
 8014876:	d0ec      	beq.n	8014852 <lv_color_fill+0xae>
 8014878:	e7bb      	b.n	80147f2 <lv_color_fill+0x4e>
 801487a:	46c0      	nop			; (mov r8, r8)

0801487c <lv_palette_main>:
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 801487c:	2812      	cmp	r0, #18
 801487e:	d803      	bhi.n	8014888 <lv_palette_main+0xc>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    return colors[p];
 8014880:	4b02      	ldr	r3, [pc, #8]	; (801488c <lv_palette_main+0x10>)
 8014882:	0040      	lsls	r0, r0, #1
 8014884:	5a18      	ldrh	r0, [r3, r0]

}
 8014886:	4770      	bx	lr
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8014888:	2000      	movs	r0, #0
        return lv_color_black();
 801488a:	e7fc      	b.n	8014886 <lv_palette_main+0xa>
 801488c:	0801bae8 	.word	0x0801bae8

08014890 <lv_palette_lighten>:
        {LV_COLOR_MAKE(0x8D, 0x6E, 0x63), LV_COLOR_MAKE(0xA1, 0x88, 0x7F), LV_COLOR_MAKE(0xBC, 0xAA, 0xA4), LV_COLOR_MAKE(0xD7, 0xCC, 0xC8), LV_COLOR_MAKE(0xEF, 0xEB, 0xE9)},
        {LV_COLOR_MAKE(0x78, 0x90, 0x9C), LV_COLOR_MAKE(0x90, 0xA4, 0xAE), LV_COLOR_MAKE(0xB0, 0xBE, 0xC5), LV_COLOR_MAKE(0xCF, 0xD8, 0xDC), LV_COLOR_MAKE(0xEC, 0xEF, 0xF1)},
        {LV_COLOR_MAKE(0xBD, 0xBD, 0xBD), LV_COLOR_MAKE(0xE0, 0xE0, 0xE0), LV_COLOR_MAKE(0xEE, 0xEE, 0xEE), LV_COLOR_MAKE(0xF5, 0xF5, 0xF5), LV_COLOR_MAKE(0xFA, 0xFA, 0xFA)},
    };

    if(p >= _LV_PALETTE_LAST) {
 8014890:	2812      	cmp	r0, #18
 8014892:	d80a      	bhi.n	80148aa <lv_palette_lighten+0x1a>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    if(lvl == 0 || lvl > 5) {
 8014894:	3901      	subs	r1, #1
 8014896:	b2c9      	uxtb	r1, r1
 8014898:	2904      	cmp	r1, #4
 801489a:	d806      	bhi.n	80148aa <lv_palette_lighten+0x1a>
        return lv_color_black();
    }

    lvl--;

    return colors[p][lvl];
 801489c:	0083      	lsls	r3, r0, #2
 801489e:	1818      	adds	r0, r3, r0
 80148a0:	1841      	adds	r1, r0, r1
 80148a2:	4b03      	ldr	r3, [pc, #12]	; (80148b0 <lv_palette_lighten+0x20>)
 80148a4:	0049      	lsls	r1, r1, #1
 80148a6:	5a58      	ldrh	r0, [r3, r1]
 80148a8:	e000      	b.n	80148ac <lv_palette_lighten+0x1c>
 80148aa:	2000      	movs	r0, #0
}
 80148ac:	4770      	bx	lr
 80148ae:	46c0      	nop			; (mov r8, r8)
 80148b0:	0801ba28 	.word	0x0801ba28

080148b4 <lv_palette_darken>:
        {LV_COLOR_MAKE(0x6D, 0x4C, 0x41), LV_COLOR_MAKE(0x5D, 0x40, 0x37), LV_COLOR_MAKE(0x4E, 0x34, 0x2E), LV_COLOR_MAKE(0x3E, 0x27, 0x23)},
        {LV_COLOR_MAKE(0x54, 0x6E, 0x7A), LV_COLOR_MAKE(0x45, 0x5A, 0x64), LV_COLOR_MAKE(0x37, 0x47, 0x4F), LV_COLOR_MAKE(0x26, 0x32, 0x38)},
        {LV_COLOR_MAKE(0x75, 0x75, 0x75), LV_COLOR_MAKE(0x61, 0x61, 0x61), LV_COLOR_MAKE(0x42, 0x42, 0x42), LV_COLOR_MAKE(0x21, 0x21, 0x21)},
    };

    if(p >= _LV_PALETTE_LAST) {
 80148b4:	2812      	cmp	r0, #18
 80148b6:	d809      	bhi.n	80148cc <lv_palette_darken+0x18>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    if(lvl == 0 || lvl > 4) {
 80148b8:	3901      	subs	r1, #1
 80148ba:	b2c9      	uxtb	r1, r1
 80148bc:	2903      	cmp	r1, #3
 80148be:	d805      	bhi.n	80148cc <lv_palette_darken+0x18>
        return lv_color_black();
    }

    lvl--;

    return colors[p][lvl];
 80148c0:	0080      	lsls	r0, r0, #2
 80148c2:	4b03      	ldr	r3, [pc, #12]	; (80148d0 <lv_palette_darken+0x1c>)
 80148c4:	1840      	adds	r0, r0, r1
 80148c6:	0040      	lsls	r0, r0, #1
 80148c8:	5a18      	ldrh	r0, [r3, r0]
 80148ca:	e000      	b.n	80148ce <lv_palette_darken+0x1a>
 80148cc:	2000      	movs	r0, #0
}
 80148ce:	4770      	bx	lr
 80148d0:	0801b990 	.word	0x0801b990

080148d4 <_lv_fs_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
 80148d4:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 80148d6:	2104      	movs	r1, #4
 80148d8:	4801      	ldr	r0, [pc, #4]	; (80148e0 <_lv_fs_init+0xc>)
 80148da:	f000 f9bf 	bl	8014c5c <_lv_ll_init>
}
 80148de:	bd10      	pop	{r4, pc}
 80148e0:	200005d8 	.word	0x200005d8

080148e4 <lv_fs_open>:

    return drv->ready_cb(drv);
}

lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 80148e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148e6:	46ce      	mov	lr, r9
 80148e8:	4647      	mov	r7, r8
 80148ea:	4681      	mov	r9, r0
 80148ec:	000e      	movs	r6, r1
 80148ee:	4690      	mov	r8, r2
 80148f0:	b580      	push	{r7, lr}
    if(path == NULL) {
 80148f2:	2900      	cmp	r1, #0
 80148f4:	d037      	beq.n	8014966 <lv_fs_open+0x82>

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 80148f6:	4c27      	ldr	r4, [pc, #156]	; (8014994 <lv_fs_open+0xb0>)
    char letter = path[0];
 80148f8:	780d      	ldrb	r5, [r1, #0]
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 80148fa:	0020      	movs	r0, r4
 80148fc:	f000 fa10 	bl	8014d20 <_lv_ll_get_head>
 8014900:	1e01      	subs	r1, r0, #0
 8014902:	d105      	bne.n	8014910 <lv_fs_open+0x2c>
 8014904:	e029      	b.n	801495a <lv_fs_open+0x76>
 8014906:	0020      	movs	r0, r4
 8014908:	f000 fa16 	bl	8014d38 <_lv_ll_get_next>
 801490c:	1e01      	subs	r1, r0, #0
 801490e:	d024      	beq.n	801495a <lv_fs_open+0x76>
        if((*drv)->letter == letter) {
 8014910:	680f      	ldr	r7, [r1, #0]
 8014912:	783b      	ldrb	r3, [r7, #0]
 8014914:	42ab      	cmp	r3, r5
 8014916:	d1f6      	bne.n	8014906 <lv_fs_open+0x22>
    if(drv->ready_cb) {
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d003      	beq.n	8014926 <lv_fs_open+0x42>
        if(drv->ready_cb(drv) == false) {
 801491e:	0038      	movs	r0, r7
 8014920:	4798      	blx	r3
 8014922:	2800      	cmp	r0, #0
 8014924:	d01b      	beq.n	801495e <lv_fs_open+0x7a>
    if(drv->open_cb == NULL) {
 8014926:	68bb      	ldr	r3, [r7, #8]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d01a      	beq.n	8014962 <lv_fs_open+0x7e>
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
    path++; /*Ignore the driver letter*/
    if(*path == ':') path++;
 801492c:	7871      	ldrb	r1, [r6, #1]
    void * file_d = drv->open_cb(drv, real_path, mode);
 801492e:	0038      	movs	r0, r7
    path++; /*Ignore the driver letter*/
 8014930:	393a      	subs	r1, #58	; 0x3a
 8014932:	424a      	negs	r2, r1
 8014934:	4151      	adcs	r1, r2
 8014936:	1871      	adds	r1, r6, r1
    void * file_d = drv->open_cb(drv, real_path, mode);
 8014938:	4642      	mov	r2, r8
    path++; /*Ignore the driver letter*/
 801493a:	3101      	adds	r1, #1
    void * file_d = drv->open_cb(drv, real_path, mode);
 801493c:	4798      	blx	r3
    if(file_d == NULL || file_d == (void *)(-1)) {
 801493e:	1e43      	subs	r3, r0, #1
 8014940:	3303      	adds	r3, #3
 8014942:	d825      	bhi.n	8014990 <lv_fs_open+0xac>
    file_p->drv = drv;
 8014944:	464b      	mov	r3, r9
    file_p->file_d = file_d;
 8014946:	c381      	stmia	r3!, {r0, r7}
    if(drv->cache_size) {
 8014948:	887b      	ldrh	r3, [r7, #2]
    return LV_FS_RES_OK;
 801494a:	2400      	movs	r4, #0
    if(drv->cache_size) {
 801494c:	2b00      	cmp	r3, #0
 801494e:	d10c      	bne.n	801496a <lv_fs_open+0x86>
}
 8014950:	0020      	movs	r0, r4
 8014952:	bcc0      	pop	{r6, r7}
 8014954:	46b9      	mov	r9, r7
 8014956:	46b0      	mov	r8, r6
 8014958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LV_FS_RES_NOT_EX;
 801495a:	2403      	movs	r4, #3
 801495c:	e7f8      	b.n	8014950 <lv_fs_open+0x6c>
            return LV_FS_RES_HW_ERR;
 801495e:	2401      	movs	r4, #1
 8014960:	e7f6      	b.n	8014950 <lv_fs_open+0x6c>
        return LV_FS_RES_NOT_IMP;
 8014962:	2409      	movs	r4, #9
 8014964:	e7f4      	b.n	8014950 <lv_fs_open+0x6c>
        return LV_FS_RES_INV_PARAM;
 8014966:	240b      	movs	r4, #11
 8014968:	e7f2      	b.n	8014950 <lv_fs_open+0x6c>
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 801496a:	2010      	movs	r0, #16
 801496c:	f000 fa88 	bl	8014e80 <lv_mem_alloc>
 8014970:	464b      	mov	r3, r9
 8014972:	6098      	str	r0, [r3, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 8014974:	2800      	cmp	r0, #0
 8014976:	d00a      	beq.n	801498e <lv_fs_open+0xaa>
        lv_memset_00(file_p->cache, sizeof(lv_fs_file_cache_t));
 8014978:	2110      	movs	r1, #16
 801497a:	f000 fe03 	bl	8015584 <lv_memset_00>
        file_p->cache->start = UINT32_MAX;  /*Set an invalid range by default*/
 801497e:	464b      	mov	r3, r9
 8014980:	2201      	movs	r2, #1
 8014982:	689b      	ldr	r3, [r3, #8]
 8014984:	4252      	negs	r2, r2
 8014986:	601a      	str	r2, [r3, #0]
        file_p->cache->end = UINT32_MAX - 1;
 8014988:	1892      	adds	r2, r2, r2
 801498a:	605a      	str	r2, [r3, #4]
 801498c:	e7e0      	b.n	8014950 <lv_fs_open+0x6c>
        LV_ASSERT_MALLOC(file_p->cache);
 801498e:	e7fe      	b.n	801498e <lv_fs_open+0xaa>
        return LV_FS_RES_UNKNOWN;
 8014990:	240c      	movs	r4, #12
 8014992:	e7dd      	b.n	8014950 <lv_fs_open+0x6c>
 8014994:	200005d8 	.word	0x200005d8

08014998 <lv_fs_close>:
{
 8014998:	b570      	push	{r4, r5, r6, lr}
 801499a:	0004      	movs	r4, r0
    if(file_p->drv == NULL) {
 801499c:	6840      	ldr	r0, [r0, #4]
 801499e:	2800      	cmp	r0, #0
 80149a0:	d01b      	beq.n	80149da <lv_fs_close+0x42>
    if(file_p->drv->close_cb == NULL) {
 80149a2:	68c3      	ldr	r3, [r0, #12]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d01a      	beq.n	80149de <lv_fs_close+0x46>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 80149a8:	6821      	ldr	r1, [r4, #0]
 80149aa:	4798      	blx	r3
    if(file_p->drv->cache_size && file_p->cache) {
 80149ac:	6863      	ldr	r3, [r4, #4]
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 80149ae:	0005      	movs	r5, r0
    if(file_p->drv->cache_size && file_p->cache) {
 80149b0:	885b      	ldrh	r3, [r3, #2]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d00b      	beq.n	80149ce <lv_fs_close+0x36>
 80149b6:	68a0      	ldr	r0, [r4, #8]
 80149b8:	2800      	cmp	r0, #0
 80149ba:	d008      	beq.n	80149ce <lv_fs_close+0x36>
        if(file_p->cache->buffer) {
 80149bc:	68c3      	ldr	r3, [r0, #12]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d003      	beq.n	80149ca <lv_fs_close+0x32>
            lv_mem_free(file_p->cache->buffer);
 80149c2:	0018      	movs	r0, r3
 80149c4:	f000 fa7e 	bl	8014ec4 <lv_mem_free>
        lv_mem_free(file_p->cache);
 80149c8:	68a0      	ldr	r0, [r4, #8]
 80149ca:	f000 fa7b 	bl	8014ec4 <lv_mem_free>
    file_p->file_d = NULL;
 80149ce:	2300      	movs	r3, #0
 80149d0:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
 80149d2:	6063      	str	r3, [r4, #4]
    file_p->cache  = NULL;
 80149d4:	60a3      	str	r3, [r4, #8]
}
 80149d6:	0028      	movs	r0, r5
 80149d8:	bd70      	pop	{r4, r5, r6, pc}
        return LV_FS_RES_INV_PARAM;
 80149da:	250b      	movs	r5, #11
 80149dc:	e7fb      	b.n	80149d6 <lv_fs_close+0x3e>
        return LV_FS_RES_NOT_IMP;
 80149de:	2509      	movs	r5, #9
 80149e0:	e7f9      	b.n	80149d6 <lv_fs_close+0x3e>
 80149e2:	46c0      	nop			; (mov r8, r8)

080149e4 <lv_fs_read>:
{
 80149e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149e6:	4657      	mov	r7, sl
 80149e8:	464e      	mov	r6, r9
 80149ea:	4645      	mov	r5, r8
 80149ec:	46de      	mov	lr, fp
 80149ee:	b5e0      	push	{r5, r6, r7, lr}
 80149f0:	001c      	movs	r4, r3
 80149f2:	0005      	movs	r5, r0
 80149f4:	000f      	movs	r7, r1
 80149f6:	0016      	movs	r6, r2
 80149f8:	b087      	sub	sp, #28
    if(br != NULL) *br = 0;
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d001      	beq.n	8014a02 <lv_fs_read+0x1e>
 80149fe:	2300      	movs	r3, #0
 8014a00:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8014a02:	6868      	ldr	r0, [r5, #4]
 8014a04:	2800      	cmp	r0, #0
 8014a06:	d069      	beq.n	8014adc <lv_fs_read+0xf8>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8014a08:	6903      	ldr	r3, [r0, #16]
 8014a0a:	4698      	mov	r8, r3
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d100      	bne.n	8014a12 <lv_fs_read+0x2e>
 8014a10:	e082      	b.n	8014b18 <lv_fs_read+0x134>
    uint32_t br_tmp = 0;
 8014a12:	2300      	movs	r3, #0
 8014a14:	9304      	str	r3, [sp, #16]
    if(file_p->drv->cache_size) {
 8014a16:	8843      	ldrh	r3, [r0, #2]
 8014a18:	4699      	mov	r9, r3
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d112      	bne.n	8014a44 <lv_fs_read+0x60>
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 8014a1e:	ab04      	add	r3, sp, #16
 8014a20:	9300      	str	r3, [sp, #0]
 8014a22:	003a      	movs	r2, r7
 8014a24:	0033      	movs	r3, r6
 8014a26:	6829      	ldr	r1, [r5, #0]
 8014a28:	47c0      	blx	r8
 8014a2a:	4680      	mov	r8, r0
    if(br != NULL) *br = br_tmp;
 8014a2c:	2c00      	cmp	r4, #0
 8014a2e:	d001      	beq.n	8014a34 <lv_fs_read+0x50>
 8014a30:	9b04      	ldr	r3, [sp, #16]
 8014a32:	6023      	str	r3, [r4, #0]
}
 8014a34:	4640      	mov	r0, r8
 8014a36:	b007      	add	sp, #28
 8014a38:	bcf0      	pop	{r4, r5, r6, r7}
 8014a3a:	46bb      	mov	fp, r7
 8014a3c:	46b2      	mov	sl, r6
 8014a3e:	46a9      	mov	r9, r5
 8014a40:	46a0      	mov	r8, r4
 8014a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t file_position = file_p->cache->file_position;
 8014a44:	68ab      	ldr	r3, [r5, #8]
 8014a46:	469a      	mov	sl, r3
 8014a48:	689b      	ldr	r3, [r3, #8]
 8014a4a:	469b      	mov	fp, r3
    uint32_t start = file_p->cache->start;
 8014a4c:	4653      	mov	r3, sl
 8014a4e:	6819      	ldr	r1, [r3, #0]
    char * buffer = file_p->cache->buffer;
 8014a50:	68db      	ldr	r3, [r3, #12]
 8014a52:	9303      	str	r3, [sp, #12]
    if(start <= file_position && file_position < end) {
 8014a54:	458b      	cmp	fp, r1
 8014a56:	d214      	bcs.n	8014a82 <lv_fs_read+0x9e>
        if(btr > buffer_size) {
 8014a58:	454e      	cmp	r6, r9
 8014a5a:	d942      	bls.n	8014ae2 <lv_fs_read+0xfe>
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 8014a5c:	ab04      	add	r3, sp, #16
 8014a5e:	9300      	str	r3, [sp, #0]
 8014a60:	003a      	movs	r2, r7
 8014a62:	0033      	movs	r3, r6
 8014a64:	6829      	ldr	r1, [r5, #0]
 8014a66:	47c0      	blx	r8
 8014a68:	4680      	mov	r8, r0
    if(res == LV_FS_RES_OK) {
 8014a6a:	4643      	mov	r3, r8
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d1dd      	bne.n	8014a2c <lv_fs_read+0x48>
        file_p->cache->file_position += *br;
 8014a70:	9e04      	ldr	r6, [sp, #16]
 8014a72:	68ab      	ldr	r3, [r5, #8]
 8014a74:	689a      	ldr	r2, [r3, #8]
 8014a76:	4694      	mov	ip, r2
 8014a78:	4466      	add	r6, ip
 8014a7a:	609e      	str	r6, [r3, #8]
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	4698      	mov	r8, r3
 8014a80:	e7d4      	b.n	8014a2c <lv_fs_read+0x48>
    uint32_t end = file_p->cache->end;
 8014a82:	4653      	mov	r3, sl
 8014a84:	685a      	ldr	r2, [r3, #4]
    if(start <= file_position && file_position < end) {
 8014a86:	4593      	cmp	fp, r2
 8014a88:	d2e6      	bcs.n	8014a58 <lv_fs_read+0x74>
        uint16_t buffer_offset = file_position - start;
 8014a8a:	465b      	mov	r3, fp
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 8014a8c:	4658      	mov	r0, fp
        uint16_t buffer_offset = file_position - start;
 8014a8e:	1a59      	subs	r1, r3, r1
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 8014a90:	464b      	mov	r3, r9
 8014a92:	b289      	uxth	r1, r1
 8014a94:	1a12      	subs	r2, r2, r0
 8014a96:	4693      	mov	fp, r2
 8014a98:	1a5b      	subs	r3, r3, r1
 8014a9a:	429a      	cmp	r2, r3
 8014a9c:	d847      	bhi.n	8014b2e <lv_fs_read+0x14a>
            lv_memcpy(buf, buffer + buffer_offset, btr);
 8014a9e:	9b03      	ldr	r3, [sp, #12]
 8014aa0:	469c      	mov	ip, r3
 8014aa2:	4461      	add	r1, ip
        if(btr <= buffer_remaining_length) {
 8014aa4:	455e      	cmp	r6, fp
 8014aa6:	d93c      	bls.n	8014b22 <lv_fs_read+0x13e>
            lv_memcpy(buf, buffer + buffer_offset, buffer_remaining_length);
 8014aa8:	465a      	mov	r2, fp
 8014aaa:	0038      	movs	r0, r7
 8014aac:	f000 fb9c 	bl	80151e8 <lv_memcpy>
            uint32_t bytes_read_to_buffer = 0;
 8014ab0:	2300      	movs	r3, #0
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 8014ab2:	6868      	ldr	r0, [r5, #4]
            uint32_t bytes_read_to_buffer = 0;
 8014ab4:	9305      	str	r3, [sp, #20]
            if(btr > buffer_size) {
 8014ab6:	454e      	cmp	r6, r9
 8014ab8:	d94a      	bls.n	8014b50 <lv_fs_read+0x16c>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 8014aba:	003a      	movs	r2, r7
 8014abc:	465b      	mov	r3, fp
 8014abe:	a905      	add	r1, sp, #20
 8014ac0:	9100      	str	r1, [sp, #0]
 8014ac2:	6907      	ldr	r7, [r0, #16]
 8014ac4:	6829      	ldr	r1, [r5, #0]
 8014ac6:	1af3      	subs	r3, r6, r3
 8014ac8:	445a      	add	r2, fp
 8014aca:	47b8      	blx	r7
 8014acc:	4680      	mov	r8, r0
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 8014ace:	9b05      	ldr	r3, [sp, #20]
 8014ad0:	445b      	add	r3, fp
 8014ad2:	42b3      	cmp	r3, r6
 8014ad4:	d900      	bls.n	8014ad8 <lv_fs_read+0xf4>
 8014ad6:	0033      	movs	r3, r6
 8014ad8:	9304      	str	r3, [sp, #16]
 8014ada:	e7c6      	b.n	8014a6a <lv_fs_read+0x86>
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8014adc:	230b      	movs	r3, #11
 8014ade:	4698      	mov	r8, r3
 8014ae0:	e7a8      	b.n	8014a34 <lv_fs_read+0x50>
            if(buffer == NULL) {
 8014ae2:	9b03      	ldr	r3, [sp, #12]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d024      	beq.n	8014b32 <lv_fs_read+0x14e>
            uint32_t bytes_read_to_buffer = 0;
 8014ae8:	2300      	movs	r3, #0
 8014aea:	9305      	str	r3, [sp, #20]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8014aec:	ab05      	add	r3, sp, #20
 8014aee:	9a03      	ldr	r2, [sp, #12]
 8014af0:	6829      	ldr	r1, [r5, #0]
 8014af2:	9300      	str	r3, [sp, #0]
 8014af4:	464b      	mov	r3, r9
 8014af6:	47c0      	blx	r8
            file_p->cache->start = file_position;
 8014af8:	465b      	mov	r3, fp
 8014afa:	68aa      	ldr	r2, [r5, #8]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8014afc:	4680      	mov	r8, r0
            file_p->cache->start = file_position;
 8014afe:	6013      	str	r3, [r2, #0]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8014b00:	9905      	ldr	r1, [sp, #20]
 8014b02:	185b      	adds	r3, r3, r1
 8014b04:	6053      	str	r3, [r2, #4]
            *br = LV_MIN(btr, bytes_read_to_buffer);
 8014b06:	0032      	movs	r2, r6
 8014b08:	428e      	cmp	r6, r1
 8014b0a:	d808      	bhi.n	8014b1e <lv_fs_read+0x13a>
            lv_memcpy(buf, buffer, *br);
 8014b0c:	0038      	movs	r0, r7
 8014b0e:	9903      	ldr	r1, [sp, #12]
            *br = LV_MIN(btr, bytes_read_to_buffer);
 8014b10:	9204      	str	r2, [sp, #16]
            lv_memcpy(buf, buffer, *br);
 8014b12:	f000 fb69 	bl	80151e8 <lv_memcpy>
 8014b16:	e7a8      	b.n	8014a6a <lv_fs_read+0x86>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8014b18:	2309      	movs	r3, #9
 8014b1a:	4698      	mov	r8, r3
 8014b1c:	e78a      	b.n	8014a34 <lv_fs_read+0x50>
            *br = LV_MIN(btr, bytes_read_to_buffer);
 8014b1e:	000a      	movs	r2, r1
 8014b20:	e7f4      	b.n	8014b0c <lv_fs_read+0x128>
            lv_memcpy(buf, buffer + buffer_offset, btr);
 8014b22:	0032      	movs	r2, r6
 8014b24:	0038      	movs	r0, r7
 8014b26:	f000 fb5f 	bl	80151e8 <lv_memcpy>
            *br = btr;
 8014b2a:	9604      	str	r6, [sp, #16]
    if(res == LV_FS_RES_OK) {
 8014b2c:	e7a1      	b.n	8014a72 <lv_fs_read+0x8e>
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 8014b2e:	469b      	mov	fp, r3
 8014b30:	e7b5      	b.n	8014a9e <lv_fs_read+0xba>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 8014b32:	4648      	mov	r0, r9
 8014b34:	f000 f9a4 	bl	8014e80 <lv_mem_alloc>
 8014b38:	4653      	mov	r3, sl
 8014b3a:	60d8      	str	r0, [r3, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 8014b3c:	68ab      	ldr	r3, [r5, #8]
 8014b3e:	68db      	ldr	r3, [r3, #12]
 8014b40:	9303      	str	r3, [sp, #12]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d003      	beq.n	8014b4e <lv_fs_read+0x16a>
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8014b46:	6868      	ldr	r0, [r5, #4]
 8014b48:	6903      	ldr	r3, [r0, #16]
 8014b4a:	4698      	mov	r8, r3
 8014b4c:	e7cc      	b.n	8014ae8 <lv_fs_read+0x104>
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 8014b4e:	e7fe      	b.n	8014b4e <lv_fs_read+0x16a>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8014b50:	ab05      	add	r3, sp, #20
 8014b52:	9300      	str	r3, [sp, #0]
 8014b54:	6903      	ldr	r3, [r0, #16]
 8014b56:	9a03      	ldr	r2, [sp, #12]
 8014b58:	4698      	mov	r8, r3
 8014b5a:	6829      	ldr	r1, [r5, #0]
 8014b5c:	464b      	mov	r3, r9
 8014b5e:	47c0      	blx	r8
                file_p->cache->start = file_p->cache->end;
 8014b60:	68aa      	ldr	r2, [r5, #8]
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8014b62:	4680      	mov	r8, r0
                file_p->cache->start = file_p->cache->end;
 8014b64:	6853      	ldr	r3, [r2, #4]
 8014b66:	6013      	str	r3, [r2, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8014b68:	9905      	ldr	r1, [sp, #20]
 8014b6a:	185b      	adds	r3, r3, r1
 8014b6c:	6053      	str	r3, [r2, #4]
                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 8014b6e:	465b      	mov	r3, fp
 8014b70:	1af3      	subs	r3, r6, r3
 8014b72:	428b      	cmp	r3, r1
 8014b74:	d900      	bls.n	8014b78 <lv_fs_read+0x194>
 8014b76:	000b      	movs	r3, r1
                lv_memcpy(buf + buffer_remaining_length, buffer, data_chunk_remaining);
 8014b78:	0038      	movs	r0, r7
 8014b7a:	041b      	lsls	r3, r3, #16
 8014b7c:	9903      	ldr	r1, [sp, #12]
 8014b7e:	0c1a      	lsrs	r2, r3, #16
 8014b80:	4458      	add	r0, fp
 8014b82:	f000 fb31 	bl	80151e8 <lv_memcpy>
 8014b86:	e7a2      	b.n	8014ace <lv_fs_read+0xea>

08014b88 <lv_fs_seek>:
{
 8014b88:	b570      	push	{r4, r5, r6, lr}
    if(file_p->drv == NULL) {
 8014b8a:	6845      	ldr	r5, [r0, #4]
{
 8014b8c:	0004      	movs	r4, r0
 8014b8e:	0013      	movs	r3, r2
 8014b90:	b082      	sub	sp, #8
    if(file_p->drv == NULL) {
 8014b92:	2d00      	cmp	r5, #0
 8014b94:	d01f      	beq.n	8014bd6 <lv_fs_seek+0x4e>
    if(file_p->drv->seek_cb == NULL) {
 8014b96:	69ae      	ldr	r6, [r5, #24]
 8014b98:	2e00      	cmp	r6, #0
 8014b9a:	d03c      	beq.n	8014c16 <lv_fs_seek+0x8e>
    if(file_p->drv->cache_size) {
 8014b9c:	886a      	ldrh	r2, [r5, #2]
 8014b9e:	2a00      	cmp	r2, #0
 8014ba0:	d012      	beq.n	8014bc8 <lv_fs_seek+0x40>
        switch(whence) {
 8014ba2:	2b01      	cmp	r3, #1
 8014ba4:	d02b      	beq.n	8014bfe <lv_fs_seek+0x76>
 8014ba6:	2b02      	cmp	r3, #2
 8014ba8:	d017      	beq.n	8014bda <lv_fs_seek+0x52>
 8014baa:	2000      	movs	r0, #0
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d110      	bne.n	8014bd2 <lv_fs_seek+0x4a>
                    file_p->cache->file_position = pos;
 8014bb0:	68a3      	ldr	r3, [r4, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8014bb2:	681a      	ldr	r2, [r3, #0]
                    file_p->cache->file_position = pos;
 8014bb4:	6099      	str	r1, [r3, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8014bb6:	428a      	cmp	r2, r1
 8014bb8:	d934      	bls.n	8014c24 <lv_fs_seek+0x9c>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8014bba:	6820      	ldr	r0, [r4, #0]
 8014bbc:	000a      	movs	r2, r1
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	0001      	movs	r1, r0
 8014bc2:	0028      	movs	r0, r5
 8014bc4:	47b0      	blx	r6
 8014bc6:	e004      	b.n	8014bd2 <lv_fs_seek+0x4a>
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8014bc8:	6800      	ldr	r0, [r0, #0]
 8014bca:	000a      	movs	r2, r1
 8014bcc:	0001      	movs	r1, r0
 8014bce:	0028      	movs	r0, r5
 8014bd0:	47b0      	blx	r6
}
 8014bd2:	b002      	add	sp, #8
 8014bd4:	bd70      	pop	{r4, r5, r6, pc}
        return LV_FS_RES_INV_PARAM;
 8014bd6:	200b      	movs	r0, #11
 8014bd8:	e7fb      	b.n	8014bd2 <lv_fs_seek+0x4a>
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8014bda:	000a      	movs	r2, r1
 8014bdc:	2302      	movs	r3, #2
 8014bde:	6801      	ldr	r1, [r0, #0]
 8014be0:	0028      	movs	r0, r5
 8014be2:	47b0      	blx	r6
                    if(res == LV_FS_RES_OK) {
 8014be4:	2800      	cmp	r0, #0
 8014be6:	d1f4      	bne.n	8014bd2 <lv_fs_seek+0x4a>
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 8014be8:	6860      	ldr	r0, [r4, #4]
 8014bea:	6821      	ldr	r1, [r4, #0]
 8014bec:	69c3      	ldr	r3, [r0, #28]
 8014bee:	aa01      	add	r2, sp, #4
 8014bf0:	4798      	blx	r3
                        if(res == LV_FS_RES_OK) {
 8014bf2:	2800      	cmp	r0, #0
 8014bf4:	d1ed      	bne.n	8014bd2 <lv_fs_seek+0x4a>
                            file_p->cache->file_position = tmp_position;
 8014bf6:	68a3      	ldr	r3, [r4, #8]
 8014bf8:	9a01      	ldr	r2, [sp, #4]
 8014bfa:	609a      	str	r2, [r3, #8]
 8014bfc:	e7e9      	b.n	8014bd2 <lv_fs_seek+0x4a>
                    file_p->cache->file_position += pos;
 8014bfe:	6883      	ldr	r3, [r0, #8]
 8014c00:	689a      	ldr	r2, [r3, #8]
 8014c02:	188a      	adds	r2, r1, r2
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8014c04:	6819      	ldr	r1, [r3, #0]
                    file_p->cache->file_position += pos;
 8014c06:	609a      	str	r2, [r3, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8014c08:	428a      	cmp	r2, r1
 8014c0a:	d206      	bcs.n	8014c1a <lv_fs_seek+0x92>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	0028      	movs	r0, r5
 8014c10:	6821      	ldr	r1, [r4, #0]
 8014c12:	47b0      	blx	r6
 8014c14:	e7dd      	b.n	8014bd2 <lv_fs_seek+0x4a>
        return LV_FS_RES_NOT_IMP;
 8014c16:	2009      	movs	r0, #9
 8014c18:	e7db      	b.n	8014bd2 <lv_fs_seek+0x4a>
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8014c1a:	685b      	ldr	r3, [r3, #4]
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d8f5      	bhi.n	8014c0c <lv_fs_seek+0x84>
    lv_fs_res_t res = LV_FS_RES_OK;
 8014c20:	2000      	movs	r0, #0
 8014c22:	e7d6      	b.n	8014bd2 <lv_fs_seek+0x4a>
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8014c24:	685b      	ldr	r3, [r3, #4]
 8014c26:	428b      	cmp	r3, r1
 8014c28:	d3c7      	bcc.n	8014bba <lv_fs_seek+0x32>
 8014c2a:	e7f9      	b.n	8014c20 <lv_fs_seek+0x98>

08014c2c <lv_fs_get_ext>:
{
 8014c2c:	b510      	push	{r4, lr}
 8014c2e:	0004      	movs	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 8014c30:	f7eb fa72 	bl	8000118 <strlen>
 8014c34:	1e03      	subs	r3, r0, #0
 8014c36:	d107      	bne.n	8014c48 <lv_fs_get_ext+0x1c>
 8014c38:	e00c      	b.n	8014c54 <lv_fs_get_ext+0x28>
        else if(fn[i] == '/' || fn[i] == '\\') {
 8014c3a:	2a2f      	cmp	r2, #47	; 0x2f
 8014c3c:	d00a      	beq.n	8014c54 <lv_fs_get_ext+0x28>
 8014c3e:	2a5c      	cmp	r2, #92	; 0x5c
 8014c40:	d008      	beq.n	8014c54 <lv_fs_get_ext+0x28>
    for(i = strlen(fn); i > 0; i--) {
 8014c42:	3b01      	subs	r3, #1
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d005      	beq.n	8014c54 <lv_fs_get_ext+0x28>
        if(fn[i] == '.') {
 8014c48:	5ce2      	ldrb	r2, [r4, r3]
 8014c4a:	2a2e      	cmp	r2, #46	; 0x2e
 8014c4c:	d1f5      	bne.n	8014c3a <lv_fs_get_ext+0xe>
            return &fn[i + 1];
 8014c4e:	3301      	adds	r3, #1
 8014c50:	18e0      	adds	r0, r4, r3
 8014c52:	e000      	b.n	8014c56 <lv_fs_get_ext+0x2a>
    return ""; /*Empty string if no '.' in the file name.*/
 8014c54:	4800      	ldr	r0, [pc, #0]	; (8014c58 <lv_fs_get_ext+0x2c>)
}
 8014c56:	bd10      	pop	{r4, pc}
 8014c58:	0801d900 	.word	0x0801d900

08014c5c <_lv_ll_init>:
 * @param ll_p pointer to lv_ll_t variable
 * @param node_size the size of 1 node in bytes
 */
void _lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
    ll_p->head = NULL;
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 8014c60:	6083      	str	r3, [r0, #8]
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    node_size = (node_size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    node_size = (node_size + 3) & (~0x3);
 8014c62:	3103      	adds	r1, #3
 8014c64:	3303      	adds	r3, #3
 8014c66:	4399      	bics	r1, r3
#endif

    ll_p->n_size = node_size;
 8014c68:	6001      	str	r1, [r0, #0]
}
 8014c6a:	4770      	bx	lr

08014c6c <_lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * _lv_ll_ins_head(lv_ll_t * ll_p)
{
 8014c6c:	b510      	push	{r4, lr}
 8014c6e:	0004      	movs	r4, r0
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8014c70:	6800      	ldr	r0, [r0, #0]
 8014c72:	3008      	adds	r0, #8
 8014c74:	f000 f904 	bl	8014e80 <lv_mem_alloc>

    if(n_new != NULL) {
 8014c78:	2800      	cmp	r0, #0
 8014c7a:	d00c      	beq.n	8014c96 <_lv_ll_ins_head+0x2a>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 8014c7c:	2200      	movs	r2, #0
    act8 += LL_PREV_P_OFFSET(ll_p);
 8014c7e:	6823      	ldr	r3, [r4, #0]
    *act_node_p = *prev_node_p;
 8014c80:	50c2      	str	r2, [r0, r3]
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8014c82:	6862      	ldr	r2, [r4, #4]

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 8014c84:	18c1      	adds	r1, r0, r3
 8014c86:	604a      	str	r2, [r1, #4]
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8014c88:	2a00      	cmp	r2, #0
 8014c8a:	d000      	beq.n	8014c8e <_lv_ll_ins_head+0x22>
    *act_node_p = *prev_node_p;
 8014c8c:	50d0      	str	r0, [r2, r3]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8014c8e:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8014c90:	6060      	str	r0, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d000      	beq.n	8014c98 <_lv_ll_ins_head+0x2c>
}
 8014c96:	bd10      	pop	{r4, pc}
            ll_p->tail = n_new;
 8014c98:	60a0      	str	r0, [r4, #8]
    return n_new;
 8014c9a:	e7fc      	b.n	8014c96 <_lv_ll_ins_head+0x2a>

08014c9c <_lv_ll_ins_tail>:
{
 8014c9c:	b510      	push	{r4, lr}
 8014c9e:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8014ca0:	6800      	ldr	r0, [r0, #0]
 8014ca2:	3008      	adds	r0, #8
 8014ca4:	f000 f8ec 	bl	8014e80 <lv_mem_alloc>
    if(n_new != NULL) {
 8014ca8:	2800      	cmp	r0, #0
 8014caa:	d00c      	beq.n	8014cc6 <_lv_ll_ins_tail+0x2a>
    *act_node_p = *next_node_p;
 8014cac:	2300      	movs	r3, #0
    act8 += LL_NEXT_P_OFFSET(ll_p);
 8014cae:	6822      	ldr	r2, [r4, #0]
 8014cb0:	1d11      	adds	r1, r2, #4
    *act_node_p = *next_node_p;
 8014cb2:	5043      	str	r3, [r0, r1]
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 8014cb4:	68a3      	ldr	r3, [r4, #8]
    *act_node_p = *prev_node_p;
 8014cb6:	5083      	str	r3, [r0, r2]
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d000      	beq.n	8014cbe <_lv_ll_ins_tail+0x22>
    *act_node_p = *next_node_p;
 8014cbc:	5058      	str	r0, [r3, r1]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8014cbe:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8014cc0:	60a0      	str	r0, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d000      	beq.n	8014cc8 <_lv_ll_ins_tail+0x2c>
}
 8014cc6:	bd10      	pop	{r4, pc}
            ll_p->head = n_new;
 8014cc8:	6060      	str	r0, [r4, #4]
    return n_new;
 8014cca:	e7fc      	b.n	8014cc6 <_lv_ll_ins_tail+0x2a>

08014ccc <_lv_ll_remove>:
{
 8014ccc:	b510      	push	{r4, lr}
    if(ll_p == NULL) return;
 8014cce:	2800      	cmp	r0, #0
 8014cd0:	d00f      	beq.n	8014cf2 <_lv_ll_remove+0x26>
    if(_lv_ll_get_head(ll_p) == node_p) {
 8014cd2:	6843      	ldr	r3, [r0, #4]
 8014cd4:	4299      	cmp	r1, r3
 8014cd6:	d00d      	beq.n	8014cf4 <_lv_ll_remove+0x28>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8014cd8:	6883      	ldr	r3, [r0, #8]
 8014cda:	4299      	cmp	r1, r3
 8014cdc:	d013      	beq.n	8014d06 <_lv_ll_remove+0x3a>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8014cde:	6803      	ldr	r3, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
 8014ce0:	58c8      	ldr	r0, [r1, r3]
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8014ce2:	1d1c      	adds	r4, r3, #4
    return *((lv_ll_node_t **)n_act_d);
 8014ce4:	590a      	ldr	r2, [r1, r4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8014ce6:	2800      	cmp	r0, #0
 8014ce8:	d000      	beq.n	8014cec <_lv_ll_remove+0x20>
    *act_node_p = *next_node_p;
 8014cea:	5102      	str	r2, [r0, r4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8014cec:	2a00      	cmp	r2, #0
 8014cee:	d000      	beq.n	8014cf2 <_lv_ll_remove+0x26>
    *act_node_p = *prev_node_p;
 8014cf0:	50d0      	str	r0, [r2, r3]
}
 8014cf2:	bd10      	pop	{r4, pc}
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8014cf4:	6802      	ldr	r2, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
 8014cf6:	1889      	adds	r1, r1, r2
 8014cf8:	684b      	ldr	r3, [r1, #4]
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 8014cfa:	6043      	str	r3, [r0, #4]
        if(ll_p->head == NULL) {
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d00b      	beq.n	8014d18 <_lv_ll_remove+0x4c>
    *act_node_p = *prev_node_p;
 8014d00:	2100      	movs	r1, #0
 8014d02:	5099      	str	r1, [r3, r2]
 8014d04:	e7f5      	b.n	8014cf2 <_lv_ll_remove+0x26>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8014d06:	6802      	ldr	r2, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
 8014d08:	588b      	ldr	r3, [r1, r2]
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8014d0a:	6083      	str	r3, [r0, #8]
        if(ll_p->tail == NULL) {
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d005      	beq.n	8014d1c <_lv_ll_remove+0x50>
    *act_node_p = *next_node_p;
 8014d10:	189b      	adds	r3, r3, r2
 8014d12:	2200      	movs	r2, #0
 8014d14:	605a      	str	r2, [r3, #4]
 8014d16:	e7ec      	b.n	8014cf2 <_lv_ll_remove+0x26>
            ll_p->tail = NULL;
 8014d18:	6083      	str	r3, [r0, #8]
 8014d1a:	e7ea      	b.n	8014cf2 <_lv_ll_remove+0x26>
            ll_p->head = NULL;
 8014d1c:	6043      	str	r3, [r0, #4]
 8014d1e:	e7e8      	b.n	8014cf2 <_lv_ll_remove+0x26>

08014d20 <_lv_ll_get_head>:
    if(ll_p == NULL) return NULL;
 8014d20:	2800      	cmp	r0, #0
 8014d22:	d001      	beq.n	8014d28 <_lv_ll_get_head+0x8>
    return ll_p->head;
 8014d24:	6840      	ldr	r0, [r0, #4]
}
 8014d26:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
 8014d28:	2000      	movs	r0, #0
 8014d2a:	e7fc      	b.n	8014d26 <_lv_ll_get_head+0x6>

08014d2c <_lv_ll_get_tail>:
    if(ll_p == NULL) return NULL;
 8014d2c:	2800      	cmp	r0, #0
 8014d2e:	d001      	beq.n	8014d34 <_lv_ll_get_tail+0x8>
    return ll_p->tail;
 8014d30:	6880      	ldr	r0, [r0, #8]
}
 8014d32:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
 8014d34:	2000      	movs	r0, #0
 8014d36:	e7fc      	b.n	8014d32 <_lv_ll_get_tail+0x6>

08014d38 <_lv_ll_get_next>:
    return *((lv_ll_node_t **)n_act_d);
 8014d38:	6803      	ldr	r3, [r0, #0]
 8014d3a:	18c9      	adds	r1, r1, r3
 8014d3c:	6848      	ldr	r0, [r1, #4]
}
 8014d3e:	4770      	bx	lr

08014d40 <_lv_ll_get_prev>:
    return *((lv_ll_node_t **)n_act_d);
 8014d40:	6803      	ldr	r3, [r0, #0]
 8014d42:	58c8      	ldr	r0, [r1, r3]
}
 8014d44:	4770      	bx	lr
 8014d46:	46c0      	nop			; (mov r8, r8)

08014d48 <_lv_ll_get_len>:
    if(ll_p == NULL) return NULL;
 8014d48:	2800      	cmp	r0, #0
 8014d4a:	d00a      	beq.n	8014d62 <_lv_ll_get_len+0x1a>
    return ll_p->head;
 8014d4c:	6843      	ldr	r3, [r0, #4]
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d007      	beq.n	8014d62 <_lv_ll_get_len+0x1a>
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8014d52:	6802      	ldr	r2, [r0, #0]
 8014d54:	2000      	movs	r0, #0
 8014d56:	3204      	adds	r2, #4
    return *((lv_ll_node_t **)n_act_d);
 8014d58:	589b      	ldr	r3, [r3, r2]
        len++;
 8014d5a:	3001      	adds	r0, #1
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d1fb      	bne.n	8014d58 <_lv_ll_get_len+0x10>
}
 8014d60:	4770      	bx	lr
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 8014d62:	2000      	movs	r0, #0
    return len;
 8014d64:	e7fc      	b.n	8014d60 <_lv_ll_get_len+0x18>
 8014d66:	46c0      	nop			; (mov r8, r8)

08014d68 <_lv_ll_is_empty>:
{
 8014d68:	1e03      	subs	r3, r0, #0
    if(ll_p == NULL) return true;
 8014d6a:	d009      	beq.n	8014d80 <_lv_ll_is_empty+0x18>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8014d6c:	685a      	ldr	r2, [r3, #4]
    return false;
 8014d6e:	2000      	movs	r0, #0
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8014d70:	2a00      	cmp	r2, #0
 8014d72:	d000      	beq.n	8014d76 <_lv_ll_is_empty+0xe>
}
 8014d74:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8014d76:	6898      	ldr	r0, [r3, #8]
 8014d78:	4243      	negs	r3, r0
 8014d7a:	4158      	adcs	r0, r3
 8014d7c:	b2c0      	uxtb	r0, r0
 8014d7e:	e7f9      	b.n	8014d74 <_lv_ll_is_empty+0xc>
    if(ll_p == NULL) return true;
 8014d80:	2001      	movs	r0, #1
 8014d82:	e7f7      	b.n	8014d74 <_lv_ll_is_empty+0xc>

08014d84 <lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 8014d84:	21b4      	movs	r1, #180	; 0xb4
{
 8014d86:	b510      	push	{r4, lr}
    angle       = angle % 360;
 8014d88:	0049      	lsls	r1, r1, #1
 8014d8a:	f7eb fb3d 	bl	8000408 <__aeabi_idivmod>
 8014d8e:	b20b      	sxth	r3, r1

    if(angle < 0) angle = 360 + angle;
 8014d90:	040a      	lsls	r2, r1, #16
 8014d92:	d502      	bpl.n	8014d9a <lv_trigo_sin+0x16>
 8014d94:	3369      	adds	r3, #105	; 0x69
 8014d96:	33ff      	adds	r3, #255	; 0xff
 8014d98:	b21b      	sxth	r3, r3

    if(angle < 90) {
 8014d9a:	2b59      	cmp	r3, #89	; 0x59
 8014d9c:	dd07      	ble.n	8014dae <lv_trigo_sin+0x2a>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
 8014d9e:	b29b      	uxth	r3, r3
 8014da0:	001a      	movs	r2, r3
 8014da2:	3a5a      	subs	r2, #90	; 0x5a
 8014da4:	2a59      	cmp	r2, #89	; 0x59
 8014da6:	d806      	bhi.n	8014db6 <lv_trigo_sin+0x32>
        angle = 180 - angle;
 8014da8:	22b4      	movs	r2, #180	; 0xb4
 8014daa:	1ad3      	subs	r3, r2, r3
        ret   = sin0_90_table[angle];
 8014dac:	b29b      	uxth	r3, r3
 8014dae:	4a0c      	ldr	r2, [pc, #48]	; (8014de0 <lv_trigo_sin+0x5c>)
 8014db0:	005b      	lsls	r3, r3, #1
 8014db2:	5e98      	ldrsh	r0, [r3, r2]
        angle = 360 - angle;
        ret   = -sin0_90_table[angle];
    }

    return ret;
}
 8014db4:	bd10      	pop	{r4, pc}
    else if(angle >= 180 && angle < 270) {
 8014db6:	001a      	movs	r2, r3
 8014db8:	3ab4      	subs	r2, #180	; 0xb4
 8014dba:	b292      	uxth	r2, r2
 8014dbc:	2a59      	cmp	r2, #89	; 0x59
 8014dbe:	d805      	bhi.n	8014dcc <lv_trigo_sin+0x48>
        ret   = -sin0_90_table[angle];
 8014dc0:	4b07      	ldr	r3, [pc, #28]	; (8014de0 <lv_trigo_sin+0x5c>)
 8014dc2:	0052      	lsls	r2, r2, #1
 8014dc4:	5ad0      	ldrh	r0, [r2, r3]
 8014dc6:	4240      	negs	r0, r0
 8014dc8:	b200      	sxth	r0, r0
 8014dca:	e7f3      	b.n	8014db4 <lv_trigo_sin+0x30>
        angle = 360 - angle;
 8014dcc:	22b4      	movs	r2, #180	; 0xb4
 8014dce:	0052      	lsls	r2, r2, #1
 8014dd0:	1ad3      	subs	r3, r2, r3
        ret   = -sin0_90_table[angle];
 8014dd2:	b29b      	uxth	r3, r3
 8014dd4:	4a02      	ldr	r2, [pc, #8]	; (8014de0 <lv_trigo_sin+0x5c>)
 8014dd6:	005b      	lsls	r3, r3, #1
 8014dd8:	5a98      	ldrh	r0, [r3, r2]
 8014dda:	4240      	negs	r0, r0
 8014ddc:	b200      	sxth	r0, r0
 8014dde:	e7e9      	b.n	8014db4 <lv_trigo_sin+0x30>
 8014de0:	0801bb10 	.word	0x0801bb10

08014de4 <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 8014de4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t t_rem  = 1024 - t;
 8014de6:	2780      	movs	r7, #128	; 0x80
 8014de8:	00ff      	lsls	r7, r7, #3
 8014dea:	1a3f      	subs	r7, r7, r0
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8014dec:	003d      	movs	r5, r7
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
    uint32_t t2     = (t * t) >> 10;
 8014dee:	0006      	movs	r6, r0
{
 8014df0:	0004      	movs	r4, r0
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8014df2:	437d      	muls	r5, r7
    uint32_t t3     = (t2 * t) >> 10;

    uint32_t v1 = (t_rem3 * u0) >> 10;
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8014df4:	4342      	muls	r2, r0
    uint32_t t2     = (t * t) >> 10;
 8014df6:	4346      	muls	r6, r0
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8014df8:	0aad      	lsrs	r5, r5, #10
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8014dfa:	436a      	muls	r2, r5
    uint32_t t2     = (t * t) >> 10;
 8014dfc:	0ab6      	lsrs	r6, r6, #10
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8014dfe:	437b      	muls	r3, r7
    uint32_t t3     = (t2 * t) >> 10;
 8014e00:	4374      	muls	r4, r6
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8014e02:	437d      	muls	r5, r7
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8014e04:	0050      	lsls	r0, r2, #1
 8014e06:	1880      	adds	r0, r0, r2
    uint32_t v4 = (t3 * u3) >> 10;
 8014e08:	9a05      	ldr	r2, [sp, #20]
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8014e0a:	4373      	muls	r3, r6
    uint32_t t3     = (t2 * t) >> 10;
 8014e0c:	0aa4      	lsrs	r4, r4, #10
    uint32_t v4 = (t3 * u3) >> 10;
 8014e0e:	4354      	muls	r4, r2
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8014e10:	0aad      	lsrs	r5, r5, #10
    uint32_t v1 = (t_rem3 * u0) >> 10;
 8014e12:	4369      	muls	r1, r5
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8014e14:	005e      	lsls	r6, r3, #1
    uint32_t v4 = (t3 * u3) >> 10;
 8014e16:	0aa4      	lsrs	r4, r4, #10
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8014e18:	18f6      	adds	r6, r6, r3
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8014e1a:	0d00      	lsrs	r0, r0, #20
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8014e1c:	0d36      	lsrs	r6, r6, #20

    return v1 + v2 + v3 + v4;
 8014e1e:	1900      	adds	r0, r0, r4
 8014e20:	1980      	adds	r0, r0, r6
    uint32_t v1 = (t_rem3 * u0) >> 10;
 8014e22:	0a89      	lsrs	r1, r1, #10
    return v1 + v2 + v3 + v4;
 8014e24:	1840      	adds	r0, r0, r1
}
 8014e26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e28 <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
 8014e28:	b570      	push	{r4, r5, r6, lr}
 8014e2a:	0004      	movs	r4, r0
 8014e2c:	001d      	movs	r5, r3
    if(max_in >= min_in && x >= max_in) return max_out;
 8014e2e:	9804      	ldr	r0, [sp, #16]
 8014e30:	428a      	cmp	r2, r1
 8014e32:	da0d      	bge.n	8014e50 <lv_map+0x28>
    if(max_in >= min_in && x <= min_in) return min_out;

    if(max_in <= min_in && x <= max_in) return max_out;
 8014e34:	42a2      	cmp	r2, r4
 8014e36:	da0a      	bge.n	8014e4e <lv_map+0x26>
    if(max_in >= min_in && x <= min_in) return min_out;
 8014e38:	0018      	movs	r0, r3
    if(max_in <= min_in && x >= min_in) return min_out;
 8014e3a:	42a1      	cmp	r1, r4
 8014e3c:	dd07      	ble.n	8014e4e <lv_map+0x26>
     * To avoid rounding error reorder the operations:
     *   (x - min_in) * (delta_out / delta_min) + min_out
     */

    int32_t delta_in = max_in - min_in;
    int32_t delta_out = max_out - min_out;
 8014e3e:	9b04      	ldr	r3, [sp, #16]

    return ((x - min_in) * delta_out) / delta_in + min_out;
 8014e40:	1a60      	subs	r0, r4, r1
    int32_t delta_out = max_out - min_out;
 8014e42:	1b5c      	subs	r4, r3, r5
    return ((x - min_in) * delta_out) / delta_in + min_out;
 8014e44:	4360      	muls	r0, r4
    int32_t delta_in = max_in - min_in;
 8014e46:	1a51      	subs	r1, r2, r1
    return ((x - min_in) * delta_out) / delta_in + min_out;
 8014e48:	f7eb f9f8 	bl	800023c <__divsi3>
 8014e4c:	1940      	adds	r0, r0, r5
}
 8014e4e:	bd70      	pop	{r4, r5, r6, pc}
    if(max_in >= min_in && x >= max_in) return max_out;
 8014e50:	42a2      	cmp	r2, r4
 8014e52:	ddfc      	ble.n	8014e4e <lv_map+0x26>
    if(max_in >= min_in && x <= min_in) return min_out;
 8014e54:	0018      	movs	r0, r3
 8014e56:	42a1      	cmp	r1, r4
 8014e58:	daf9      	bge.n	8014e4e <lv_map+0x26>
    if(max_in <= min_in && x <= max_in) return max_out;
 8014e5a:	428a      	cmp	r2, r1
 8014e5c:	d1ef      	bne.n	8014e3e <lv_map+0x16>
    if(max_in >= min_in && x >= max_in) return max_out;
 8014e5e:	9804      	ldr	r0, [sp, #16]
 8014e60:	e7f5      	b.n	8014e4e <lv_map+0x26>
 8014e62:	46c0      	nop			; (mov r8, r8)

08014e64 <lv_mem_init>:
#ifdef LV_MEM_POOL_ALLOC
    tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_POOL_ALLOC(LV_MEM_SIZE), LV_MEM_SIZE);
#else
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_ATTRIBUTE_LARGE_RAM_ARRAY MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 8014e64:	2190      	movs	r1, #144	; 0x90
{
 8014e66:	b510      	push	{r4, lr}
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 8014e68:	4803      	ldr	r0, [pc, #12]	; (8014e78 <lv_mem_init+0x14>)
 8014e6a:	01c9      	lsls	r1, r1, #7
 8014e6c:	f001 f8b2 	bl	8015fd4 <lv_tlsf_create_with_pool>
 8014e70:	4b02      	ldr	r3, [pc, #8]	; (8014e7c <lv_mem_init+0x18>)
 8014e72:	6018      	str	r0, [r3, #0]
#endif

#if LV_MEM_ADD_JUNK
    LV_LOG_WARN("LV_MEM_ADD_JUNK is enabled which makes LVGL much slower");
#endif
}
 8014e74:	bd10      	pop	{r4, pc}
 8014e76:	46c0      	nop			; (mov r8, r8)
 8014e78:	200006e8 	.word	0x200006e8
 8014e7c:	200006e4 	.word	0x200006e4

08014e80 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
 8014e80:	b510      	push	{r4, lr}
 8014e82:	1e04      	subs	r4, r0, #0
    MEM_TRACE("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 8014e84:	d101      	bne.n	8014e8a <lv_mem_alloc+0xa>
        MEM_TRACE("using zero_mem");
        return &zero_mem;
 8014e86:	480b      	ldr	r0, [pc, #44]	; (8014eb4 <lv_mem_alloc+0x34>)
        max_used = LV_MAX(cur_used, max_used);
#endif
        MEM_TRACE("allocated at %p", alloc);
    }
    return alloc;
}
 8014e88:	bd10      	pop	{r4, pc}
    void * alloc = lv_tlsf_malloc(tlsf, size);
 8014e8a:	4b0b      	ldr	r3, [pc, #44]	; (8014eb8 <lv_mem_alloc+0x38>)
 8014e8c:	0021      	movs	r1, r4
 8014e8e:	6818      	ldr	r0, [r3, #0]
 8014e90:	f001 f93a 	bl	8016108 <lv_tlsf_malloc>
    if(alloc) {
 8014e94:	2800      	cmp	r0, #0
 8014e96:	d0f7      	beq.n	8014e88 <lv_mem_alloc+0x8>
        cur_used += size;
 8014e98:	4b08      	ldr	r3, [pc, #32]	; (8014ebc <lv_mem_alloc+0x3c>)
 8014e9a:	681a      	ldr	r2, [r3, #0]
 8014e9c:	4694      	mov	ip, r2
        max_used = LV_MAX(cur_used, max_used);
 8014e9e:	4a08      	ldr	r2, [pc, #32]	; (8014ec0 <lv_mem_alloc+0x40>)
        cur_used += size;
 8014ea0:	4464      	add	r4, ip
 8014ea2:	601c      	str	r4, [r3, #0]
        max_used = LV_MAX(cur_used, max_used);
 8014ea4:	6813      	ldr	r3, [r2, #0]
 8014ea6:	42a3      	cmp	r3, r4
 8014ea8:	d301      	bcc.n	8014eae <lv_mem_alloc+0x2e>
 8014eaa:	6013      	str	r3, [r2, #0]
 8014eac:	e7ec      	b.n	8014e88 <lv_mem_alloc+0x8>
 8014eae:	0023      	movs	r3, r4
 8014eb0:	6013      	str	r3, [r2, #0]
 8014eb2:	e7e9      	b.n	8014e88 <lv_mem_alloc+0x8>
 8014eb4:	20000078 	.word	0x20000078
 8014eb8:	200006e4 	.word	0x200006e4
 8014ebc:	200006dc 	.word	0x200006dc
 8014ec0:	200006e0 	.word	0x200006e0

08014ec4 <lv_mem_free>:
 * @param data pointer to an allocated memory
 */
void lv_mem_free(void * data)
{
    MEM_TRACE("freeing %p", data);
    if(data == &zero_mem) return;
 8014ec4:	4b0a      	ldr	r3, [pc, #40]	; (8014ef0 <lv_mem_free+0x2c>)
{
 8014ec6:	0001      	movs	r1, r0
 8014ec8:	b510      	push	{r4, lr}
    if(data == &zero_mem) return;
 8014eca:	4298      	cmp	r0, r3
 8014ecc:	d00b      	beq.n	8014ee6 <lv_mem_free+0x22>
    if(data == NULL) return;
 8014ece:	2800      	cmp	r0, #0
 8014ed0:	d009      	beq.n	8014ee6 <lv_mem_free+0x22>

#if LV_MEM_CUSTOM == 0
#  if LV_MEM_ADD_JUNK
    lv_memset(data, 0xbb, lv_tlsf_block_size(data));
#  endif
    size_t size = lv_tlsf_free(tlsf, data);
 8014ed2:	4b08      	ldr	r3, [pc, #32]	; (8014ef4 <lv_mem_free+0x30>)
 8014ed4:	6818      	ldr	r0, [r3, #0]
 8014ed6:	f001 f99d 	bl	8016214 <lv_tlsf_free>
    if(cur_used > size) cur_used -= size;
 8014eda:	4a07      	ldr	r2, [pc, #28]	; (8014ef8 <lv_mem_free+0x34>)
 8014edc:	6813      	ldr	r3, [r2, #0]
 8014ede:	4298      	cmp	r0, r3
 8014ee0:	d202      	bcs.n	8014ee8 <lv_mem_free+0x24>
 8014ee2:	1a18      	subs	r0, r3, r0
 8014ee4:	6010      	str	r0, [r2, #0]
    else cur_used = 0;
#else
    LV_MEM_CUSTOM_FREE(data);
#endif
}
 8014ee6:	bd10      	pop	{r4, pc}
    else cur_used = 0;
 8014ee8:	2300      	movs	r3, #0
 8014eea:	6013      	str	r3, [r2, #0]
 8014eec:	e7fb      	b.n	8014ee6 <lv_mem_free+0x22>
 8014eee:	46c0      	nop			; (mov r8, r8)
 8014ef0:	20000078 	.word	0x20000078
 8014ef4:	200006e4 	.word	0x200006e4
 8014ef8:	200006dc 	.word	0x200006dc

08014efc <lv_mem_realloc>:
 * Its content will be copied to the new memory block and freed
 * @param new_size the desired new size in byte
 * @return pointer to the new memory
 */
void * lv_mem_realloc(void * data_p, size_t new_size)
{
 8014efc:	b570      	push	{r4, r5, r6, lr}
 8014efe:	0003      	movs	r3, r0
 8014f00:	1e0c      	subs	r4, r1, #0
    if(data == &zero_mem) return;
 8014f02:	4a1a      	ldr	r2, [pc, #104]	; (8014f6c <lv_mem_realloc+0x70>)
    MEM_TRACE("reallocating %p with %lu size", data_p, (unsigned long)new_size);
    if(new_size == 0) {
 8014f04:	d00a      	beq.n	8014f1c <lv_mem_realloc+0x20>
        MEM_TRACE("using zero_mem");
        lv_mem_free(data_p);
        return &zero_mem;
    }

    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 8014f06:	4290      	cmp	r0, r2
 8014f08:	d01a      	beq.n	8014f40 <lv_mem_realloc+0x44>

#if LV_MEM_CUSTOM == 0
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 8014f0a:	4a19      	ldr	r2, [pc, #100]	; (8014f70 <lv_mem_realloc+0x74>)
 8014f0c:	6810      	ldr	r0, [r2, #0]
 8014f0e:	000a      	movs	r2, r1
 8014f10:	0019      	movs	r1, r3
 8014f12:	f001 fa07 	bl	8016324 <lv_tlsf_realloc>
 8014f16:	0005      	movs	r5, r0
        return NULL;
    }

    MEM_TRACE("allocated at %p", new_p);
    return new_p;
}
 8014f18:	0028      	movs	r0, r5
 8014f1a:	bd70      	pop	{r4, r5, r6, pc}
    if(data == &zero_mem) return;
 8014f1c:	0005      	movs	r5, r0
 8014f1e:	4290      	cmp	r0, r2
 8014f20:	d0fa      	beq.n	8014f18 <lv_mem_realloc+0x1c>
    if(data == NULL) return;
 8014f22:	0015      	movs	r5, r2
 8014f24:	2800      	cmp	r0, #0
 8014f26:	d0f7      	beq.n	8014f18 <lv_mem_realloc+0x1c>
    size_t size = lv_tlsf_free(tlsf, data);
 8014f28:	4a11      	ldr	r2, [pc, #68]	; (8014f70 <lv_mem_realloc+0x74>)
 8014f2a:	0019      	movs	r1, r3
 8014f2c:	6810      	ldr	r0, [r2, #0]
 8014f2e:	f001 f971 	bl	8016214 <lv_tlsf_free>
    if(cur_used > size) cur_used -= size;
 8014f32:	4a10      	ldr	r2, [pc, #64]	; (8014f74 <lv_mem_realloc+0x78>)
 8014f34:	6813      	ldr	r3, [r2, #0]
 8014f36:	4298      	cmp	r0, r3
 8014f38:	d213      	bcs.n	8014f62 <lv_mem_realloc+0x66>
 8014f3a:	1a18      	subs	r0, r3, r0
 8014f3c:	6010      	str	r0, [r2, #0]
 8014f3e:	e7eb      	b.n	8014f18 <lv_mem_realloc+0x1c>
    void * alloc = lv_tlsf_malloc(tlsf, size);
 8014f40:	4b0b      	ldr	r3, [pc, #44]	; (8014f70 <lv_mem_realloc+0x74>)
 8014f42:	6818      	ldr	r0, [r3, #0]
 8014f44:	f001 f8e0 	bl	8016108 <lv_tlsf_malloc>
 8014f48:	1e05      	subs	r5, r0, #0
    if(alloc) {
 8014f4a:	d0e5      	beq.n	8014f18 <lv_mem_realloc+0x1c>
        cur_used += size;
 8014f4c:	4b09      	ldr	r3, [pc, #36]	; (8014f74 <lv_mem_realloc+0x78>)
 8014f4e:	681a      	ldr	r2, [r3, #0]
 8014f50:	4694      	mov	ip, r2
        max_used = LV_MAX(cur_used, max_used);
 8014f52:	4a09      	ldr	r2, [pc, #36]	; (8014f78 <lv_mem_realloc+0x7c>)
        cur_used += size;
 8014f54:	4464      	add	r4, ip
 8014f56:	601c      	str	r4, [r3, #0]
        max_used = LV_MAX(cur_used, max_used);
 8014f58:	6813      	ldr	r3, [r2, #0]
 8014f5a:	42a3      	cmp	r3, r4
 8014f5c:	d303      	bcc.n	8014f66 <lv_mem_realloc+0x6a>
 8014f5e:	6013      	str	r3, [r2, #0]
 8014f60:	e7da      	b.n	8014f18 <lv_mem_realloc+0x1c>
    else cur_used = 0;
 8014f62:	6014      	str	r4, [r2, #0]
 8014f64:	e7d8      	b.n	8014f18 <lv_mem_realloc+0x1c>
        max_used = LV_MAX(cur_used, max_used);
 8014f66:	0023      	movs	r3, r4
 8014f68:	6013      	str	r3, [r2, #0]
 8014f6a:	e7d5      	b.n	8014f18 <lv_mem_realloc+0x1c>
 8014f6c:	20000078 	.word	0x20000078
 8014f70:	200006e4 	.word	0x200006e4
 8014f74:	200006dc 	.word	0x200006dc
 8014f78:	200006e0 	.word	0x200006e0

08014f7c <lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * lv_mem_buf_get(uint32_t size)
{
 8014f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f7e:	1e07      	subs	r7, r0, #0
    if(size == 0) return NULL;
 8014f80:	d100      	bne.n	8014f84 <lv_mem_buf_get+0x8>
 8014f82:	e07a      	b.n	801507a <lv_mem_buf_get+0xfe>

    MEM_TRACE("begin, getting %d bytes", size);

    /*Try to find a free buffer with suitable size*/
    int8_t i_guess = -1;
 8014f84:	2201      	movs	r2, #1
 8014f86:	4252      	negs	r2, r2
    if(size == 0) return NULL;
 8014f88:	2300      	movs	r3, #0
    int8_t i_guess = -1;
 8014f8a:	4694      	mov	ip, r2
 8014f8c:	494c      	ldr	r1, [pc, #304]	; (80150c0 <lv_mem_buf_get+0x144>)
 8014f8e:	1f0e      	subs	r6, r1, #4
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 8014f90:	00dc      	lsls	r4, r3, #3
 8014f92:	1935      	adds	r5, r6, r4
 8014f94:	79aa      	ldrb	r2, [r5, #6]
 8014f96:	1c10      	adds	r0, r2, #0
 8014f98:	07d2      	lsls	r2, r2, #31
 8014f9a:	d40f      	bmi.n	8014fbc <lv_mem_buf_get+0x40>
 8014f9c:	880a      	ldrh	r2, [r1, #0]
 8014f9e:	42ba      	cmp	r2, r7
 8014fa0:	d30c      	bcc.n	8014fbc <lv_mem_buf_get+0x40>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 8014fa2:	d100      	bne.n	8014fa6 <lv_mem_buf_get+0x2a>
 8014fa4:	e06b      	b.n	801507e <lv_mem_buf_get+0x102>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
                return LV_GC_ROOT(lv_mem_buf[i]).p;
            }
            else if(i_guess < 0) {
 8014fa6:	4660      	mov	r0, ip
 8014fa8:	3001      	adds	r0, #1
 8014faa:	d005      	beq.n	8014fb8 <lv_mem_buf_get+0x3c>
                i_guess = i;
            }
            /*If size of `i` is closer to `size` prefer it*/
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 8014fac:	4660      	mov	r0, ip
 8014fae:	00c0      	lsls	r0, r0, #3
 8014fb0:	1830      	adds	r0, r6, r0
 8014fb2:	8880      	ldrh	r0, [r0, #4]
 8014fb4:	4290      	cmp	r0, r2
 8014fb6:	d901      	bls.n	8014fbc <lv_mem_buf_get+0x40>
                i_guess = i;
 8014fb8:	b25a      	sxtb	r2, r3
 8014fba:	4694      	mov	ip, r2
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8014fbc:	3301      	adds	r3, #1
 8014fbe:	3108      	adds	r1, #8
 8014fc0:	2b10      	cmp	r3, #16
 8014fc2:	d1e5      	bne.n	8014f90 <lv_mem_buf_get+0x14>
            }
        }
    }

    if(i_guess >= 0) {
 8014fc4:	4663      	mov	r3, ip
 8014fc6:	3301      	adds	r3, #1
 8014fc8:	d13d      	bne.n	8015046 <lv_mem_buf_get+0xca>
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
    }

    /*Reallocate a free buffer*/
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 8014fca:	79b3      	ldrb	r3, [r6, #6]
 8014fcc:	07db      	lsls	r3, r3, #31
 8014fce:	d543      	bpl.n	8015058 <lv_mem_buf_get+0xdc>
 8014fd0:	7bb3      	ldrb	r3, [r6, #14]
 8014fd2:	07db      	lsls	r3, r3, #31
 8014fd4:	d55a      	bpl.n	801508c <lv_mem_buf_get+0x110>
 8014fd6:	7db3      	ldrb	r3, [r6, #22]
 8014fd8:	07db      	lsls	r3, r3, #31
 8014fda:	d559      	bpl.n	8015090 <lv_mem_buf_get+0x114>
 8014fdc:	7fb3      	ldrb	r3, [r6, #30]
 8014fde:	07db      	lsls	r3, r3, #31
 8014fe0:	d558      	bpl.n	8015094 <lv_mem_buf_get+0x118>
 8014fe2:	2326      	movs	r3, #38	; 0x26
 8014fe4:	5cf3      	ldrb	r3, [r6, r3]
 8014fe6:	07db      	lsls	r3, r3, #31
 8014fe8:	d556      	bpl.n	8015098 <lv_mem_buf_get+0x11c>
 8014fea:	232e      	movs	r3, #46	; 0x2e
 8014fec:	5cf3      	ldrb	r3, [r6, r3]
 8014fee:	07db      	lsls	r3, r3, #31
 8014ff0:	d554      	bpl.n	801509c <lv_mem_buf_get+0x120>
 8014ff2:	2336      	movs	r3, #54	; 0x36
 8014ff4:	5cf3      	ldrb	r3, [r6, r3]
 8014ff6:	07db      	lsls	r3, r3, #31
 8014ff8:	d556      	bpl.n	80150a8 <lv_mem_buf_get+0x12c>
 8014ffa:	233e      	movs	r3, #62	; 0x3e
 8014ffc:	5cf3      	ldrb	r3, [r6, r3]
 8014ffe:	07db      	lsls	r3, r3, #31
 8015000:	d54e      	bpl.n	80150a0 <lv_mem_buf_get+0x124>
 8015002:	2346      	movs	r3, #70	; 0x46
 8015004:	5cf3      	ldrb	r3, [r6, r3]
 8015006:	07db      	lsls	r3, r3, #31
 8015008:	d54c      	bpl.n	80150a4 <lv_mem_buf_get+0x128>
 801500a:	234e      	movs	r3, #78	; 0x4e
 801500c:	5cf3      	ldrb	r3, [r6, r3]
 801500e:	07db      	lsls	r3, r3, #31
 8015010:	d54e      	bpl.n	80150b0 <lv_mem_buf_get+0x134>
 8015012:	2356      	movs	r3, #86	; 0x56
 8015014:	5cf3      	ldrb	r3, [r6, r3]
 8015016:	07db      	lsls	r3, r3, #31
 8015018:	d548      	bpl.n	80150ac <lv_mem_buf_get+0x130>
 801501a:	235e      	movs	r3, #94	; 0x5e
 801501c:	5cf3      	ldrb	r3, [r6, r3]
 801501e:	07db      	lsls	r3, r3, #31
 8015020:	d532      	bpl.n	8015088 <lv_mem_buf_get+0x10c>
 8015022:	2366      	movs	r3, #102	; 0x66
 8015024:	5cf3      	ldrb	r3, [r6, r3]
 8015026:	07db      	lsls	r3, r3, #31
 8015028:	d544      	bpl.n	80150b4 <lv_mem_buf_get+0x138>
 801502a:	236e      	movs	r3, #110	; 0x6e
 801502c:	5cf3      	ldrb	r3, [r6, r3]
 801502e:	07db      	lsls	r3, r3, #31
 8015030:	d544      	bpl.n	80150bc <lv_mem_buf_get+0x140>
 8015032:	2376      	movs	r3, #118	; 0x76
 8015034:	5cf3      	ldrb	r3, [r6, r3]
 8015036:	07db      	lsls	r3, r3, #31
 8015038:	d53e      	bpl.n	80150b8 <lv_mem_buf_get+0x13c>
 801503a:	237e      	movs	r3, #126	; 0x7e
 801503c:	5cf3      	ldrb	r3, [r6, r3]
 801503e:	240f      	movs	r4, #15
 8015040:	07db      	lsls	r3, r3, #31
 8015042:	d50a      	bpl.n	801505a <lv_mem_buf_get+0xde>
            return LV_GC_ROOT(lv_mem_buf[i]).p;
        }
    }

    LV_LOG_ERROR("no more buffers. (increase LV_MEM_BUF_MAX_NUM)");
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 8015044:	e7fe      	b.n	8015044 <lv_mem_buf_get+0xc8>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8015046:	4663      	mov	r3, ip
 8015048:	2001      	movs	r0, #1
 801504a:	00db      	lsls	r3, r3, #3
 801504c:	18f1      	adds	r1, r6, r3
 801504e:	798a      	ldrb	r2, [r1, #6]
 8015050:	4302      	orrs	r2, r0
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 8015052:	58f0      	ldr	r0, [r6, r3]
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8015054:	718a      	strb	r2, [r1, #6]
    return NULL;
}
 8015056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 8015058:	2400      	movs	r4, #0
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 801505a:	00e4      	lsls	r4, r4, #3
 801505c:	0039      	movs	r1, r7
 801505e:	5930      	ldr	r0, [r6, r4]
 8015060:	f7ff ff4c 	bl	8014efc <lv_mem_realloc>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 8015064:	2800      	cmp	r0, #0
 8015066:	d007      	beq.n	8015078 <lv_mem_buf_get+0xfc>
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8015068:	2101      	movs	r1, #1
 801506a:	1933      	adds	r3, r6, r4
 801506c:	799a      	ldrb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 801506e:	809f      	strh	r7, [r3, #4]
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8015070:	430a      	orrs	r2, r1
 8015072:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 8015074:	5130      	str	r0, [r6, r4]
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 8015076:	e7ee      	b.n	8015056 <lv_mem_buf_get+0xda>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 8015078:	e7fe      	b.n	8015078 <lv_mem_buf_get+0xfc>
    if(size == 0) return NULL;
 801507a:	2000      	movs	r0, #0
 801507c:	e7eb      	b.n	8015056 <lv_mem_buf_get+0xda>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 801507e:	2301      	movs	r3, #1
 8015080:	4318      	orrs	r0, r3
 8015082:	71a8      	strb	r0, [r5, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 8015084:	5930      	ldr	r0, [r6, r4]
 8015086:	e7e6      	b.n	8015056 <lv_mem_buf_get+0xda>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 8015088:	240b      	movs	r4, #11
 801508a:	e7e6      	b.n	801505a <lv_mem_buf_get+0xde>
 801508c:	2401      	movs	r4, #1
 801508e:	e7e4      	b.n	801505a <lv_mem_buf_get+0xde>
 8015090:	2402      	movs	r4, #2
 8015092:	e7e2      	b.n	801505a <lv_mem_buf_get+0xde>
 8015094:	2403      	movs	r4, #3
 8015096:	e7e0      	b.n	801505a <lv_mem_buf_get+0xde>
 8015098:	2404      	movs	r4, #4
 801509a:	e7de      	b.n	801505a <lv_mem_buf_get+0xde>
 801509c:	2405      	movs	r4, #5
 801509e:	e7dc      	b.n	801505a <lv_mem_buf_get+0xde>
 80150a0:	2407      	movs	r4, #7
 80150a2:	e7da      	b.n	801505a <lv_mem_buf_get+0xde>
 80150a4:	2408      	movs	r4, #8
 80150a6:	e7d8      	b.n	801505a <lv_mem_buf_get+0xde>
 80150a8:	2406      	movs	r4, #6
 80150aa:	e7d6      	b.n	801505a <lv_mem_buf_get+0xde>
 80150ac:	240a      	movs	r4, #10
 80150ae:	e7d4      	b.n	801505a <lv_mem_buf_get+0xde>
 80150b0:	2409      	movs	r4, #9
 80150b2:	e7d2      	b.n	801505a <lv_mem_buf_get+0xde>
 80150b4:	240c      	movs	r4, #12
 80150b6:	e7d0      	b.n	801505a <lv_mem_buf_get+0xde>
 80150b8:	240e      	movs	r4, #14
 80150ba:	e7ce      	b.n	801505a <lv_mem_buf_get+0xde>
 80150bc:	240d      	movs	r4, #13
 80150be:	e7cc      	b.n	801505a <lv_mem_buf_get+0xde>
 80150c0:	20000660 	.word	0x20000660

080150c4 <lv_mem_buf_release>:
void lv_mem_buf_release(void * p)
{
    MEM_TRACE("begin (address: %p)", p);

    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 80150c4:	4b2b      	ldr	r3, [pc, #172]	; (8015174 <lv_mem_buf_release+0xb0>)
 80150c6:	681a      	ldr	r2, [r3, #0]
 80150c8:	4290      	cmp	r0, r2
 80150ca:	d02d      	beq.n	8015128 <lv_mem_buf_release+0x64>
 80150cc:	689a      	ldr	r2, [r3, #8]
 80150ce:	4290      	cmp	r0, r2
 80150d0:	d032      	beq.n	8015138 <lv_mem_buf_release+0x74>
 80150d2:	691a      	ldr	r2, [r3, #16]
 80150d4:	4290      	cmp	r0, r2
 80150d6:	d033      	beq.n	8015140 <lv_mem_buf_release+0x7c>
 80150d8:	699a      	ldr	r2, [r3, #24]
 80150da:	4290      	cmp	r0, r2
 80150dc:	d032      	beq.n	8015144 <lv_mem_buf_release+0x80>
 80150de:	6a1a      	ldr	r2, [r3, #32]
 80150e0:	4290      	cmp	r0, r2
 80150e2:	d031      	beq.n	8015148 <lv_mem_buf_release+0x84>
 80150e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80150e6:	4290      	cmp	r0, r2
 80150e8:	d030      	beq.n	801514c <lv_mem_buf_release+0x88>
 80150ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80150ec:	4290      	cmp	r0, r2
 80150ee:	d02f      	beq.n	8015150 <lv_mem_buf_release+0x8c>
 80150f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80150f2:	4290      	cmp	r0, r2
 80150f4:	d02e      	beq.n	8015154 <lv_mem_buf_release+0x90>
 80150f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80150f8:	4290      	cmp	r0, r2
 80150fa:	d02d      	beq.n	8015158 <lv_mem_buf_release+0x94>
 80150fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80150fe:	4290      	cmp	r0, r2
 8015100:	d02c      	beq.n	801515c <lv_mem_buf_release+0x98>
 8015102:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015104:	4290      	cmp	r0, r2
 8015106:	d02b      	beq.n	8015160 <lv_mem_buf_release+0x9c>
 8015108:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801510a:	4290      	cmp	r0, r2
 801510c:	d02a      	beq.n	8015164 <lv_mem_buf_release+0xa0>
 801510e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8015110:	4290      	cmp	r0, r2
 8015112:	d013      	beq.n	801513c <lv_mem_buf_release+0x78>
 8015114:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8015116:	4290      	cmp	r0, r2
 8015118:	d026      	beq.n	8015168 <lv_mem_buf_release+0xa4>
 801511a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801511c:	4290      	cmp	r0, r2
 801511e:	d025      	beq.n	801516c <lv_mem_buf_release+0xa8>
 8015120:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8015122:	4282      	cmp	r2, r0
 8015124:	d024      	beq.n	8015170 <lv_mem_buf_release+0xac>
            return;
        }
    }

    LV_LOG_ERROR("p is not a known buffer");
}
 8015126:	4770      	bx	lr
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8015128:	2200      	movs	r2, #0
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 801512a:	2101      	movs	r1, #1
 801512c:	00d2      	lsls	r2, r2, #3
 801512e:	189b      	adds	r3, r3, r2
 8015130:	799a      	ldrb	r2, [r3, #6]
 8015132:	438a      	bics	r2, r1
 8015134:	719a      	strb	r2, [r3, #6]
            return;
 8015136:	e7f6      	b.n	8015126 <lv_mem_buf_release+0x62>
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8015138:	2201      	movs	r2, #1
 801513a:	e7f6      	b.n	801512a <lv_mem_buf_release+0x66>
 801513c:	220c      	movs	r2, #12
 801513e:	e7f4      	b.n	801512a <lv_mem_buf_release+0x66>
 8015140:	2202      	movs	r2, #2
 8015142:	e7f2      	b.n	801512a <lv_mem_buf_release+0x66>
 8015144:	2203      	movs	r2, #3
 8015146:	e7f0      	b.n	801512a <lv_mem_buf_release+0x66>
 8015148:	2204      	movs	r2, #4
 801514a:	e7ee      	b.n	801512a <lv_mem_buf_release+0x66>
 801514c:	2205      	movs	r2, #5
 801514e:	e7ec      	b.n	801512a <lv_mem_buf_release+0x66>
 8015150:	2206      	movs	r2, #6
 8015152:	e7ea      	b.n	801512a <lv_mem_buf_release+0x66>
 8015154:	2207      	movs	r2, #7
 8015156:	e7e8      	b.n	801512a <lv_mem_buf_release+0x66>
 8015158:	2208      	movs	r2, #8
 801515a:	e7e6      	b.n	801512a <lv_mem_buf_release+0x66>
 801515c:	2209      	movs	r2, #9
 801515e:	e7e4      	b.n	801512a <lv_mem_buf_release+0x66>
 8015160:	220a      	movs	r2, #10
 8015162:	e7e2      	b.n	801512a <lv_mem_buf_release+0x66>
 8015164:	220b      	movs	r2, #11
 8015166:	e7e0      	b.n	801512a <lv_mem_buf_release+0x66>
 8015168:	220d      	movs	r2, #13
 801516a:	e7de      	b.n	801512a <lv_mem_buf_release+0x66>
 801516c:	220e      	movs	r2, #14
 801516e:	e7dc      	b.n	801512a <lv_mem_buf_release+0x66>
 8015170:	220f      	movs	r2, #15
 8015172:	e7da      	b.n	801512a <lv_mem_buf_release+0x66>
 8015174:	2000065c 	.word	0x2000065c

08015178 <lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void lv_mem_buf_free_all(void)
{
 8015178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801517a:	4647      	mov	r7, r8
 801517c:	46ce      	mov	lr, r9
    if(data == &zero_mem) return;
 801517e:	4b16      	ldr	r3, [pc, #88]	; (80151d8 <lv_mem_buf_free_all+0x60>)
{
 8015180:	b580      	push	{r7, lr}
    if(data == &zero_mem) return;
 8015182:	4698      	mov	r8, r3
 8015184:	4f15      	ldr	r7, [pc, #84]	; (80151dc <lv_mem_buf_free_all+0x64>)
    size_t size = lv_tlsf_free(tlsf, data);
 8015186:	4b16      	ldr	r3, [pc, #88]	; (80151e0 <lv_mem_buf_free_all+0x68>)
 8015188:	003c      	movs	r4, r7
{
 801518a:	2500      	movs	r5, #0
    size_t size = lv_tlsf_free(tlsf, data);
 801518c:	4699      	mov	r9, r3
    if(cur_used > size) cur_used -= size;
 801518e:	4e15      	ldr	r6, [pc, #84]	; (80151e4 <lv_mem_buf_free_all+0x6c>)
 8015190:	e00e      	b.n	80151b0 <lv_mem_buf_free_all+0x38>
 8015192:	1a18      	subs	r0, r3, r0
 8015194:	6030      	str	r0, [r6, #0]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 8015196:	2100      	movs	r1, #0
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8015198:	2001      	movs	r0, #1
 801519a:	00eb      	lsls	r3, r5, #3
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 801519c:	6021      	str	r1, [r4, #0]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 801519e:	18fb      	adds	r3, r7, r3
 80151a0:	799a      	ldrb	r2, [r3, #6]
 80151a2:	4382      	bics	r2, r0
 80151a4:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 80151a6:	80a1      	strh	r1, [r4, #4]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80151a8:	3501      	adds	r5, #1
 80151aa:	3408      	adds	r4, #8
 80151ac:	2d10      	cmp	r5, #16
 80151ae:	d00e      	beq.n	80151ce <lv_mem_buf_free_all+0x56>
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 80151b0:	6821      	ldr	r1, [r4, #0]
 80151b2:	2900      	cmp	r1, #0
 80151b4:	d0f8      	beq.n	80151a8 <lv_mem_buf_free_all+0x30>
    if(data == &zero_mem) return;
 80151b6:	4541      	cmp	r1, r8
 80151b8:	d0ed      	beq.n	8015196 <lv_mem_buf_free_all+0x1e>
    size_t size = lv_tlsf_free(tlsf, data);
 80151ba:	464b      	mov	r3, r9
 80151bc:	6818      	ldr	r0, [r3, #0]
 80151be:	f001 f829 	bl	8016214 <lv_tlsf_free>
    if(cur_used > size) cur_used -= size;
 80151c2:	6833      	ldr	r3, [r6, #0]
 80151c4:	4298      	cmp	r0, r3
 80151c6:	d3e4      	bcc.n	8015192 <lv_mem_buf_free_all+0x1a>
    else cur_used = 0;
 80151c8:	2300      	movs	r3, #0
 80151ca:	6033      	str	r3, [r6, #0]
 80151cc:	e7e3      	b.n	8015196 <lv_mem_buf_free_all+0x1e>
        }
    }
}
 80151ce:	bcc0      	pop	{r6, r7}
 80151d0:	46b9      	mov	r9, r7
 80151d2:	46b0      	mov	r8, r6
 80151d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151d6:	46c0      	nop			; (mov r8, r8)
 80151d8:	20000078 	.word	0x20000078
 80151dc:	2000065c 	.word	0x2000065c
 80151e0:	200006e4 	.word	0x200006e4
 80151e4:	200006dc 	.word	0x200006dc

080151e8 <lv_memcpy>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * lv_memcpy(void * dst, const void * src, size_t len)
{
 80151e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151ea:	468c      	mov	ip, r1
 80151ec:	46de      	mov	lr, fp
 80151ee:	4645      	mov	r5, r8
 80151f0:	4657      	mov	r7, sl
 80151f2:	464e      	mov	r6, r9
    uint8_t * d8 = dst;
    const uint8_t * s8 = src;

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 80151f4:	2103      	movs	r1, #3
{
 80151f6:	b5e0      	push	{r5, r6, r7, lr}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 80151f8:	0004      	movs	r4, r0
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 80151fa:	4665      	mov	r5, ip
{
 80151fc:	4683      	mov	fp, r0
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 80151fe:	4663      	mov	r3, ip
{
 8015200:	b087      	sub	sp, #28
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8015202:	400c      	ands	r4, r1
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 8015204:	400d      	ands	r5, r1

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 8015206:	42ac      	cmp	r4, r5
 8015208:	d100      	bne.n	801520c <lv_memcpy+0x24>
 801520a:	e097      	b.n	801533c <lv_memcpy+0x154>
        while(len > 32) {
 801520c:	2a20      	cmp	r2, #32
 801520e:	d800      	bhi.n	8015212 <lv_memcpy+0x2a>
 8015210:	e132      	b.n	8015478 <lv_memcpy+0x290>
 8015212:	4664      	mov	r4, ip
 8015214:	4304      	orrs	r4, r0
 8015216:	4221      	tst	r1, r4
 8015218:	d000      	beq.n	801521c <lv_memcpy+0x34>
 801521a:	e140      	b.n	801549e <lv_memcpy+0x2b6>
 801521c:	0001      	movs	r1, r0
 801521e:	311f      	adds	r1, #31
 8015220:	1ac9      	subs	r1, r1, r3
 8015222:	293e      	cmp	r1, #62	; 0x3e
 8015224:	d800      	bhi.n	8015228 <lv_memcpy+0x40>
 8015226:	e13a      	b.n	801549e <lv_memcpy+0x2b6>
 8015228:	2121      	movs	r1, #33	; 0x21
 801522a:	4249      	negs	r1, r1
 801522c:	4688      	mov	r8, r1
 801522e:	4490      	add	r8, r2
 8015230:	4641      	mov	r1, r8
 8015232:	9104      	str	r1, [sp, #16]
 8015234:	0949      	lsrs	r1, r1, #5
 8015236:	3101      	adds	r1, #1
 8015238:	9103      	str	r1, [sp, #12]
 801523a:	4682      	mov	sl, r0
 801523c:	2100      	movs	r1, #0
 801523e:	4693      	mov	fp, r2
            REPEAT8(COPY8);
 8015240:	685a      	ldr	r2, [r3, #4]
 8015242:	691f      	ldr	r7, [r3, #16]
 8015244:	4691      	mov	r9, r2
 8015246:	689a      	ldr	r2, [r3, #8]
 8015248:	695e      	ldr	r6, [r3, #20]
 801524a:	4690      	mov	r8, r2
 801524c:	68da      	ldr	r2, [r3, #12]
 801524e:	699d      	ldr	r5, [r3, #24]
 8015250:	9200      	str	r2, [sp, #0]
 8015252:	681a      	ldr	r2, [r3, #0]
 8015254:	69dc      	ldr	r4, [r3, #28]
 8015256:	6002      	str	r2, [r0, #0]
 8015258:	464a      	mov	r2, r9
 801525a:	6042      	str	r2, [r0, #4]
 801525c:	4642      	mov	r2, r8
 801525e:	6082      	str	r2, [r0, #8]
 8015260:	9a00      	ldr	r2, [sp, #0]
 8015262:	3101      	adds	r1, #1
 8015264:	60c2      	str	r2, [r0, #12]
 8015266:	9a03      	ldr	r2, [sp, #12]
 8015268:	6107      	str	r7, [r0, #16]
 801526a:	6146      	str	r6, [r0, #20]
 801526c:	6185      	str	r5, [r0, #24]
 801526e:	61c4      	str	r4, [r0, #28]
        while(len > 32) {
 8015270:	3320      	adds	r3, #32
 8015272:	3020      	adds	r0, #32
 8015274:	428a      	cmp	r2, r1
 8015276:	d8e3      	bhi.n	8015240 <lv_memcpy+0x58>
 8015278:	465a      	mov	r2, fp
 801527a:	46d3      	mov	fp, sl
 801527c:	9b04      	ldr	r3, [sp, #16]
 801527e:	3a20      	subs	r2, #32
 8015280:	0959      	lsrs	r1, r3, #5
            REPEAT8(COPY8);
            REPEAT8(COPY8);
            REPEAT8(COPY8);
            len -= 32;
 8015282:	014b      	lsls	r3, r1, #5
 8015284:	1ad2      	subs	r2, r2, r3
            REPEAT8(COPY8);
 8015286:	465b      	mov	r3, fp
 8015288:	3101      	adds	r1, #1
 801528a:	0149      	lsls	r1, r1, #5
 801528c:	185b      	adds	r3, r3, r1
 801528e:	448c      	add	ip, r1
 8015290:	4660      	mov	r0, ip
 8015292:	2103      	movs	r1, #3
 8015294:	4318      	orrs	r0, r3
 8015296:	4001      	ands	r1, r0
 8015298:	4248      	negs	r0, r1
 801529a:	4141      	adcs	r1, r0
 801529c:	4660      	mov	r0, ip
 801529e:	1c44      	adds	r4, r0, #1
 80152a0:	2002      	movs	r0, #2
 80152a2:	1b1c      	subs	r4, r3, r4
 80152a4:	42a0      	cmp	r0, r4
 80152a6:	4180      	sbcs	r0, r0
 80152a8:	4240      	negs	r0, r0
 80152aa:	4208      	tst	r0, r1
 80152ac:	d100      	bne.n	80152b0 <lv_memcpy+0xc8>
 80152ae:	e0ee      	b.n	801548e <lv_memcpy+0x2a6>
 80152b0:	1e51      	subs	r1, r2, #1
 80152b2:	2908      	cmp	r1, #8
 80152b4:	d800      	bhi.n	80152b8 <lv_memcpy+0xd0>
 80152b6:	e0ea      	b.n	801548e <lv_memcpy+0x2a6>
        }
        while(len) {
            COPY8
 80152b8:	4660      	mov	r0, ip
 80152ba:	6800      	ldr	r0, [r0, #0]
 80152bc:	0891      	lsrs	r1, r2, #2
 80152be:	6018      	str	r0, [r3, #0]
        while(len) {
 80152c0:	2901      	cmp	r1, #1
 80152c2:	d020      	beq.n	8015306 <lv_memcpy+0x11e>
            COPY8
 80152c4:	4660      	mov	r0, ip
 80152c6:	6840      	ldr	r0, [r0, #4]
 80152c8:	6058      	str	r0, [r3, #4]
        while(len) {
 80152ca:	2902      	cmp	r1, #2
 80152cc:	d01b      	beq.n	8015306 <lv_memcpy+0x11e>
            COPY8
 80152ce:	4660      	mov	r0, ip
 80152d0:	6880      	ldr	r0, [r0, #8]
 80152d2:	6098      	str	r0, [r3, #8]
        while(len) {
 80152d4:	2903      	cmp	r1, #3
 80152d6:	d016      	beq.n	8015306 <lv_memcpy+0x11e>
            COPY8
 80152d8:	4660      	mov	r0, ip
 80152da:	68c0      	ldr	r0, [r0, #12]
 80152dc:	60d8      	str	r0, [r3, #12]
        while(len) {
 80152de:	2904      	cmp	r1, #4
 80152e0:	d011      	beq.n	8015306 <lv_memcpy+0x11e>
            COPY8
 80152e2:	4660      	mov	r0, ip
 80152e4:	6900      	ldr	r0, [r0, #16]
 80152e6:	6118      	str	r0, [r3, #16]
        while(len) {
 80152e8:	2905      	cmp	r1, #5
 80152ea:	d00c      	beq.n	8015306 <lv_memcpy+0x11e>
            COPY8
 80152ec:	4660      	mov	r0, ip
 80152ee:	6940      	ldr	r0, [r0, #20]
 80152f0:	6158      	str	r0, [r3, #20]
        while(len) {
 80152f2:	2906      	cmp	r1, #6
 80152f4:	d007      	beq.n	8015306 <lv_memcpy+0x11e>
            COPY8
 80152f6:	4660      	mov	r0, ip
 80152f8:	6980      	ldr	r0, [r0, #24]
 80152fa:	6198      	str	r0, [r3, #24]
        while(len) {
 80152fc:	2907      	cmp	r1, #7
 80152fe:	d002      	beq.n	8015306 <lv_memcpy+0x11e>
            COPY8
 8015300:	4661      	mov	r1, ip
 8015302:	69c9      	ldr	r1, [r1, #28]
 8015304:	61d9      	str	r1, [r3, #28]
        while(len) {
 8015306:	2103      	movs	r1, #3
 8015308:	0010      	movs	r0, r2
 801530a:	4388      	bics	r0, r1
 801530c:	4661      	mov	r1, ip
 801530e:	1a14      	subs	r4, r2, r0
 8015310:	181b      	adds	r3, r3, r0
 8015312:	1809      	adds	r1, r1, r0
 8015314:	4282      	cmp	r2, r0
 8015316:	d009      	beq.n	801532c <lv_memcpy+0x144>
            COPY8
 8015318:	780a      	ldrb	r2, [r1, #0]
 801531a:	701a      	strb	r2, [r3, #0]
        while(len) {
 801531c:	2c01      	cmp	r4, #1
 801531e:	d005      	beq.n	801532c <lv_memcpy+0x144>
            COPY8
 8015320:	784a      	ldrb	r2, [r1, #1]
 8015322:	705a      	strb	r2, [r3, #1]
        while(len) {
 8015324:	2c02      	cmp	r4, #2
 8015326:	d001      	beq.n	801532c <lv_memcpy+0x144>
            COPY8
 8015328:	788a      	ldrb	r2, [r1, #2]
 801532a:	709a      	strb	r2, [r3, #2]
        COPY8
        len--;
    }

    return dst;
}
 801532c:	4658      	mov	r0, fp
 801532e:	b007      	add	sp, #28
 8015330:	bcf0      	pop	{r4, r5, r6, r7}
 8015332:	46bb      	mov	fp, r7
 8015334:	46b2      	mov	sl, r6
 8015336:	46a9      	mov	r9, r5
 8015338:	46a0      	mov	r8, r4
 801533a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(d_align) {
 801533c:	4681      	mov	r9, r0
 801533e:	2c00      	cmp	r4, #0
 8015340:	d029      	beq.n	8015396 <lv_memcpy+0x1ae>
        while(d_align && len) {
 8015342:	2a00      	cmp	r2, #0
 8015344:	d0f2      	beq.n	801532c <lv_memcpy+0x144>
            COPY8;
 8015346:	781b      	ldrb	r3, [r3, #0]
 8015348:	7003      	strb	r3, [r0, #0]
 801534a:	2301      	movs	r3, #1
 801534c:	445b      	add	r3, fp
 801534e:	4699      	mov	r9, r3
 8015350:	4663      	mov	r3, ip
            d_align--;
 8015352:	1b08      	subs	r0, r1, r4
            COPY8;
 8015354:	1c5d      	adds	r5, r3, #1
            len--;
 8015356:	1e53      	subs	r3, r2, #1
        while(d_align && len) {
 8015358:	42a1      	cmp	r1, r4
 801535a:	d100      	bne.n	801535e <lv_memcpy+0x176>
 801535c:	e10f      	b.n	801557e <lv_memcpy+0x396>
 801535e:	2b00      	cmp	r3, #0
 8015360:	d0e4      	beq.n	801532c <lv_memcpy+0x144>
            COPY8;
 8015362:	4663      	mov	r3, ip
 8015364:	4659      	mov	r1, fp
 8015366:	785b      	ldrb	r3, [r3, #1]
 8015368:	704b      	strb	r3, [r1, #1]
 801536a:	2302      	movs	r3, #2
 801536c:	445b      	add	r3, fp
 801536e:	4699      	mov	r9, r3
 8015370:	4663      	mov	r3, ip
 8015372:	1c99      	adds	r1, r3, #2
            len--;
 8015374:	1e93      	subs	r3, r2, #2
        while(d_align && len) {
 8015376:	2801      	cmp	r0, #1
 8015378:	d100      	bne.n	801537c <lv_memcpy+0x194>
 801537a:	e0fd      	b.n	8015578 <lv_memcpy+0x390>
 801537c:	2b00      	cmp	r3, #0
 801537e:	d0d5      	beq.n	801532c <lv_memcpy+0x144>
            COPY8;
 8015380:	4663      	mov	r3, ip
 8015382:	4659      	mov	r1, fp
 8015384:	789b      	ldrb	r3, [r3, #2]
            len--;
 8015386:	3a03      	subs	r2, #3
            COPY8;
 8015388:	708b      	strb	r3, [r1, #2]
 801538a:	2303      	movs	r3, #3
 801538c:	445b      	add	r3, fp
 801538e:	4699      	mov	r9, r3
 8015390:	2303      	movs	r3, #3
 8015392:	4698      	mov	r8, r3
 8015394:	44c4      	add	ip, r8
    while(len > 32) {
 8015396:	2a20      	cmp	r2, #32
 8015398:	d973      	bls.n	8015482 <lv_memcpy+0x29a>
 801539a:	464b      	mov	r3, r9
 801539c:	4661      	mov	r1, ip
 801539e:	4319      	orrs	r1, r3
 80153a0:	2307      	movs	r3, #7
 80153a2:	4660      	mov	r0, ip
 80153a4:	400b      	ands	r3, r1
 80153a6:	4259      	negs	r1, r3
 80153a8:	414b      	adcs	r3, r1
 80153aa:	4649      	mov	r1, r9
 80153ac:	301f      	adds	r0, #31
 80153ae:	1a40      	subs	r0, r0, r1
 80153b0:	213e      	movs	r1, #62	; 0x3e
 80153b2:	4281      	cmp	r1, r0
 80153b4:	4189      	sbcs	r1, r1
 80153b6:	0014      	movs	r4, r2
 80153b8:	4249      	negs	r1, r1
 80153ba:	3c21      	subs	r4, #33	; 0x21
 80153bc:	4219      	tst	r1, r3
 80153be:	d100      	bne.n	80153c2 <lv_memcpy+0x1da>
 80153c0:	e0be      	b.n	8015540 <lv_memcpy+0x358>
 80153c2:	2c1f      	cmp	r4, #31
 80153c4:	d800      	bhi.n	80153c8 <lv_memcpy+0x1e0>
 80153c6:	e0bb      	b.n	8015540 <lv_memcpy+0x358>
 80153c8:	2100      	movs	r1, #0
 80153ca:	468a      	mov	sl, r1
 80153cc:	4661      	mov	r1, ip
 80153ce:	9105      	str	r1, [sp, #20]
 80153d0:	0011      	movs	r1, r2
 80153d2:	0963      	lsrs	r3, r4, #5
 80153d4:	9304      	str	r3, [sp, #16]
 80153d6:	3301      	adds	r3, #1
 80153d8:	464a      	mov	r2, r9
 80153da:	46c8      	mov	r8, r9
 80153dc:	9303      	str	r3, [sp, #12]
 80153de:	4689      	mov	r9, r1
 80153e0:	4663      	mov	r3, ip
        REPEAT8(COPY32)
 80153e2:	6998      	ldr	r0, [r3, #24]
 80153e4:	69d9      	ldr	r1, [r3, #28]
 80153e6:	689e      	ldr	r6, [r3, #8]
 80153e8:	68df      	ldr	r7, [r3, #12]
 80153ea:	691c      	ldr	r4, [r3, #16]
 80153ec:	695d      	ldr	r5, [r3, #20]
 80153ee:	9000      	str	r0, [sp, #0]
 80153f0:	9101      	str	r1, [sp, #4]
 80153f2:	6818      	ldr	r0, [r3, #0]
 80153f4:	6859      	ldr	r1, [r3, #4]
 80153f6:	6010      	str	r0, [r2, #0]
 80153f8:	6051      	str	r1, [r2, #4]
 80153fa:	9800      	ldr	r0, [sp, #0]
 80153fc:	9901      	ldr	r1, [sp, #4]
 80153fe:	6190      	str	r0, [r2, #24]
 8015400:	61d1      	str	r1, [r2, #28]
    while(len > 32) {
 8015402:	2101      	movs	r1, #1
 8015404:	468c      	mov	ip, r1
 8015406:	9903      	ldr	r1, [sp, #12]
 8015408:	44e2      	add	sl, ip
        REPEAT8(COPY32)
 801540a:	6096      	str	r6, [r2, #8]
 801540c:	60d7      	str	r7, [r2, #12]
 801540e:	6114      	str	r4, [r2, #16]
 8015410:	6155      	str	r5, [r2, #20]
 8015412:	3320      	adds	r3, #32
 8015414:	3220      	adds	r2, #32
 8015416:	4551      	cmp	r1, sl
 8015418:	d8e3      	bhi.n	80153e2 <lv_memcpy+0x1fa>
 801541a:	9b05      	ldr	r3, [sp, #20]
 801541c:	464a      	mov	r2, r9
 801541e:	469c      	mov	ip, r3
 8015420:	46c1      	mov	r9, r8
 8015422:	9904      	ldr	r1, [sp, #16]
 8015424:	3a20      	subs	r2, #32
 8015426:	1c4b      	adds	r3, r1, #1
 8015428:	015b      	lsls	r3, r3, #5
 801542a:	4499      	add	r9, r3
 801542c:	449c      	add	ip, r3
        len -= 32;
 801542e:	014b      	lsls	r3, r1, #5
 8015430:	1ad2      	subs	r2, r2, r3
    while(len > 4) {
 8015432:	2a04      	cmp	r2, #4
 8015434:	d908      	bls.n	8015448 <lv_memcpy+0x260>
 8015436:	464b      	mov	r3, r9
 8015438:	4661      	mov	r1, ip
        COPY32;
 801543a:	c901      	ldmia	r1!, {r0}
        len -= 4;
 801543c:	3a04      	subs	r2, #4
        COPY32;
 801543e:	c301      	stmia	r3!, {r0}
    while(len > 4) {
 8015440:	2a04      	cmp	r2, #4
 8015442:	d8fa      	bhi.n	801543a <lv_memcpy+0x252>
 8015444:	4699      	mov	r9, r3
 8015446:	468c      	mov	ip, r1
        COPY8
 8015448:	4663      	mov	r3, ip
 801544a:	4649      	mov	r1, r9
 801544c:	781b      	ldrb	r3, [r3, #0]
 801544e:	700b      	strb	r3, [r1, #0]
    while(len) {
 8015450:	2a01      	cmp	r2, #1
 8015452:	d100      	bne.n	8015456 <lv_memcpy+0x26e>
 8015454:	e76a      	b.n	801532c <lv_memcpy+0x144>
        COPY8
 8015456:	4663      	mov	r3, ip
 8015458:	785b      	ldrb	r3, [r3, #1]
 801545a:	704b      	strb	r3, [r1, #1]
        len--;
 801545c:	1e93      	subs	r3, r2, #2
    while(len) {
 801545e:	2a02      	cmp	r2, #2
 8015460:	d100      	bne.n	8015464 <lv_memcpy+0x27c>
 8015462:	e763      	b.n	801532c <lv_memcpy+0x144>
        COPY8
 8015464:	4662      	mov	r2, ip
 8015466:	7892      	ldrb	r2, [r2, #2]
 8015468:	708a      	strb	r2, [r1, #2]
    while(len) {
 801546a:	2b01      	cmp	r3, #1
 801546c:	d100      	bne.n	8015470 <lv_memcpy+0x288>
 801546e:	e75d      	b.n	801532c <lv_memcpy+0x144>
        COPY8
 8015470:	4663      	mov	r3, ip
 8015472:	78db      	ldrb	r3, [r3, #3]
 8015474:	70cb      	strb	r3, [r1, #3]
    while(len) {
 8015476:	e759      	b.n	801532c <lv_memcpy+0x144>
        while(len) {
 8015478:	2a00      	cmp	r2, #0
 801547a:	d100      	bne.n	801547e <lv_memcpy+0x296>
 801547c:	e756      	b.n	801532c <lv_memcpy+0x144>
 801547e:	0003      	movs	r3, r0
 8015480:	e706      	b.n	8015290 <lv_memcpy+0xa8>
    while(len > 4) {
 8015482:	2a04      	cmp	r2, #4
 8015484:	d8d7      	bhi.n	8015436 <lv_memcpy+0x24e>
    while(len) {
 8015486:	2a00      	cmp	r2, #0
 8015488:	d100      	bne.n	801548c <lv_memcpy+0x2a4>
 801548a:	e74f      	b.n	801532c <lv_memcpy+0x144>
 801548c:	e7dc      	b.n	8015448 <lv_memcpy+0x260>
        while(len) {
 801548e:	2100      	movs	r1, #0
 8015490:	4664      	mov	r4, ip
            COPY8
 8015492:	5c60      	ldrb	r0, [r4, r1]
 8015494:	5458      	strb	r0, [r3, r1]
        while(len) {
 8015496:	3101      	adds	r1, #1
 8015498:	428a      	cmp	r2, r1
 801549a:	d1fa      	bne.n	8015492 <lv_memcpy+0x2aa>
 801549c:	e746      	b.n	801532c <lv_memcpy+0x144>
 801549e:	2321      	movs	r3, #33	; 0x21
 80154a0:	425b      	negs	r3, r3
 80154a2:	4698      	mov	r8, r3
 80154a4:	4490      	add	r8, r2
 80154a6:	4643      	mov	r3, r8
        while(len > 32) {
 80154a8:	4661      	mov	r1, ip
 80154aa:	095c      	lsrs	r4, r3, #5
 80154ac:	9304      	str	r3, [sp, #16]
 80154ae:	465b      	mov	r3, fp
 80154b0:	3401      	adds	r4, #1
 80154b2:	0164      	lsls	r4, r4, #5
 80154b4:	445c      	add	r4, fp
            REPEAT8(COPY8);
 80154b6:	7808      	ldrb	r0, [r1, #0]
 80154b8:	7018      	strb	r0, [r3, #0]
 80154ba:	7848      	ldrb	r0, [r1, #1]
 80154bc:	7058      	strb	r0, [r3, #1]
 80154be:	7888      	ldrb	r0, [r1, #2]
 80154c0:	7098      	strb	r0, [r3, #2]
 80154c2:	78c8      	ldrb	r0, [r1, #3]
 80154c4:	70d8      	strb	r0, [r3, #3]
 80154c6:	7908      	ldrb	r0, [r1, #4]
 80154c8:	7118      	strb	r0, [r3, #4]
 80154ca:	7948      	ldrb	r0, [r1, #5]
 80154cc:	7158      	strb	r0, [r3, #5]
 80154ce:	7988      	ldrb	r0, [r1, #6]
 80154d0:	7198      	strb	r0, [r3, #6]
 80154d2:	79c8      	ldrb	r0, [r1, #7]
 80154d4:	71d8      	strb	r0, [r3, #7]
            REPEAT8(COPY8);
 80154d6:	7a08      	ldrb	r0, [r1, #8]
 80154d8:	7218      	strb	r0, [r3, #8]
 80154da:	7a48      	ldrb	r0, [r1, #9]
 80154dc:	7258      	strb	r0, [r3, #9]
 80154de:	7a88      	ldrb	r0, [r1, #10]
 80154e0:	7298      	strb	r0, [r3, #10]
 80154e2:	7ac8      	ldrb	r0, [r1, #11]
 80154e4:	72d8      	strb	r0, [r3, #11]
 80154e6:	7b08      	ldrb	r0, [r1, #12]
 80154e8:	7318      	strb	r0, [r3, #12]
 80154ea:	7b48      	ldrb	r0, [r1, #13]
 80154ec:	7358      	strb	r0, [r3, #13]
 80154ee:	7b88      	ldrb	r0, [r1, #14]
 80154f0:	7398      	strb	r0, [r3, #14]
 80154f2:	7bc8      	ldrb	r0, [r1, #15]
 80154f4:	73d8      	strb	r0, [r3, #15]
            REPEAT8(COPY8);
 80154f6:	7c08      	ldrb	r0, [r1, #16]
 80154f8:	7418      	strb	r0, [r3, #16]
 80154fa:	7c48      	ldrb	r0, [r1, #17]
 80154fc:	7458      	strb	r0, [r3, #17]
 80154fe:	7c88      	ldrb	r0, [r1, #18]
 8015500:	7498      	strb	r0, [r3, #18]
 8015502:	7cc8      	ldrb	r0, [r1, #19]
 8015504:	74d8      	strb	r0, [r3, #19]
 8015506:	7d08      	ldrb	r0, [r1, #20]
 8015508:	7518      	strb	r0, [r3, #20]
 801550a:	7d48      	ldrb	r0, [r1, #21]
 801550c:	7558      	strb	r0, [r3, #21]
 801550e:	7d88      	ldrb	r0, [r1, #22]
 8015510:	7598      	strb	r0, [r3, #22]
 8015512:	7dc8      	ldrb	r0, [r1, #23]
 8015514:	75d8      	strb	r0, [r3, #23]
            REPEAT8(COPY8);
 8015516:	7e08      	ldrb	r0, [r1, #24]
 8015518:	7618      	strb	r0, [r3, #24]
 801551a:	7e48      	ldrb	r0, [r1, #25]
 801551c:	7658      	strb	r0, [r3, #25]
 801551e:	7e88      	ldrb	r0, [r1, #26]
 8015520:	7698      	strb	r0, [r3, #26]
 8015522:	7ec8      	ldrb	r0, [r1, #27]
 8015524:	76d8      	strb	r0, [r3, #27]
 8015526:	7f08      	ldrb	r0, [r1, #28]
 8015528:	7718      	strb	r0, [r3, #28]
 801552a:	7f48      	ldrb	r0, [r1, #29]
 801552c:	7758      	strb	r0, [r3, #29]
 801552e:	7f88      	ldrb	r0, [r1, #30]
 8015530:	7798      	strb	r0, [r3, #30]
 8015532:	7fc8      	ldrb	r0, [r1, #31]
 8015534:	3120      	adds	r1, #32
 8015536:	77d8      	strb	r0, [r3, #31]
 8015538:	3320      	adds	r3, #32
        while(len > 32) {
 801553a:	429c      	cmp	r4, r3
 801553c:	d1bb      	bne.n	80154b6 <lv_memcpy+0x2ce>
 801553e:	e69d      	b.n	801527c <lv_memcpy+0x94>
 8015540:	0963      	lsrs	r3, r4, #5
 8015542:	1c58      	adds	r0, r3, #1
 8015544:	9304      	str	r3, [sp, #16]
    while(len > 32) {
 8015546:	4661      	mov	r1, ip
 8015548:	464b      	mov	r3, r9
 801554a:	0140      	lsls	r0, r0, #5
 801554c:	4448      	add	r0, r9
        REPEAT8(COPY32)
 801554e:	680c      	ldr	r4, [r1, #0]
 8015550:	601c      	str	r4, [r3, #0]
 8015552:	684c      	ldr	r4, [r1, #4]
 8015554:	605c      	str	r4, [r3, #4]
 8015556:	688c      	ldr	r4, [r1, #8]
 8015558:	609c      	str	r4, [r3, #8]
 801555a:	68cc      	ldr	r4, [r1, #12]
 801555c:	60dc      	str	r4, [r3, #12]
 801555e:	690c      	ldr	r4, [r1, #16]
 8015560:	611c      	str	r4, [r3, #16]
 8015562:	694c      	ldr	r4, [r1, #20]
 8015564:	615c      	str	r4, [r3, #20]
 8015566:	698c      	ldr	r4, [r1, #24]
 8015568:	619c      	str	r4, [r3, #24]
 801556a:	69cc      	ldr	r4, [r1, #28]
 801556c:	3120      	adds	r1, #32
 801556e:	61dc      	str	r4, [r3, #28]
 8015570:	3320      	adds	r3, #32
    while(len > 32) {
 8015572:	4298      	cmp	r0, r3
 8015574:	d1eb      	bne.n	801554e <lv_memcpy+0x366>
 8015576:	e754      	b.n	8015422 <lv_memcpy+0x23a>
            COPY8;
 8015578:	468c      	mov	ip, r1
            len--;
 801557a:	001a      	movs	r2, r3
 801557c:	e70b      	b.n	8015396 <lv_memcpy+0x1ae>
            COPY8;
 801557e:	46ac      	mov	ip, r5
            len--;
 8015580:	001a      	movs	r2, r3
 8015582:	e708      	b.n	8015396 <lv_memcpy+0x1ae>

08015584 <lv_memset_00>:
 * Same as `memset(dst, 0x00, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_00(void * dst, size_t len)
{
 8015584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t * d8 = (uint8_t *)dst;
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 8015586:	2303      	movs	r3, #3
{
 8015588:	000a      	movs	r2, r1
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 801558a:	0019      	movs	r1, r3
 801558c:	4001      	ands	r1, r0

    /*Make the address aligned*/
    if(d_align) {
 801558e:	4218      	tst	r0, r3
 8015590:	d014      	beq.n	80155bc <lv_memset_00+0x38>
        d_align = ALIGN_MASK + 1 - d_align;
        while(d_align && len) {
 8015592:	2a00      	cmp	r2, #0
 8015594:	d03c      	beq.n	8015610 <lv_memset_00+0x8c>
            SET8(0);
 8015596:	2400      	movs	r4, #0
 8015598:	1c47      	adds	r7, r0, #1
 801559a:	7004      	strb	r4, [r0, #0]
            len--;
 801559c:	1e55      	subs	r5, r2, #1
            d_align--;
 801559e:	1a5e      	subs	r6, r3, r1
        while(d_align && len) {
 80155a0:	428b      	cmp	r3, r1
 80155a2:	d055      	beq.n	8015650 <lv_memset_00+0xcc>
 80155a4:	2d00      	cmp	r5, #0
 80155a6:	d033      	beq.n	8015610 <lv_memset_00+0x8c>
            SET8(0);
 80155a8:	7044      	strb	r4, [r0, #1]
 80155aa:	1c81      	adds	r1, r0, #2
            len--;
 80155ac:	1e93      	subs	r3, r2, #2
        while(d_align && len) {
 80155ae:	2e01      	cmp	r6, #1
 80155b0:	d051      	beq.n	8015656 <lv_memset_00+0xd2>
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d02c      	beq.n	8015610 <lv_memset_00+0x8c>
            SET8(0);
 80155b6:	7084      	strb	r4, [r0, #2]
            len--;
 80155b8:	3a03      	subs	r2, #3
            SET8(0);
 80155ba:	3003      	adds	r0, #3
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
    while(len > 32) {
 80155bc:	2a20      	cmp	r2, #32
 80155be:	d928      	bls.n	8015612 <lv_memset_00+0x8e>
 80155c0:	0017      	movs	r7, r2
 80155c2:	3f21      	subs	r7, #33	; 0x21
 80155c4:	0743      	lsls	r3, r0, #29
 80155c6:	d129      	bne.n	801561c <lv_memset_00+0x98>
 80155c8:	2f5f      	cmp	r7, #95	; 0x5f
 80155ca:	d927      	bls.n	801561c <lv_memset_00+0x98>
 80155cc:	0003      	movs	r3, r0
 80155ce:	2100      	movs	r1, #0
        REPEAT8(SET32(0));
 80155d0:	2400      	movs	r4, #0
 80155d2:	2500      	movs	r5, #0
 80155d4:	097f      	lsrs	r7, r7, #5
 80155d6:	1c7e      	adds	r6, r7, #1
 80155d8:	3101      	adds	r1, #1
 80155da:	601c      	str	r4, [r3, #0]
 80155dc:	605d      	str	r5, [r3, #4]
 80155de:	609c      	str	r4, [r3, #8]
 80155e0:	60dd      	str	r5, [r3, #12]
 80155e2:	611c      	str	r4, [r3, #16]
 80155e4:	615d      	str	r5, [r3, #20]
 80155e6:	619c      	str	r4, [r3, #24]
 80155e8:	61dd      	str	r5, [r3, #28]
    while(len > 32) {
 80155ea:	3320      	adds	r3, #32
 80155ec:	428e      	cmp	r6, r1
 80155ee:	d8f3      	bhi.n	80155d8 <lv_memset_00+0x54>
        REPEAT8(SET32(0));
 80155f0:	1c7b      	adds	r3, r7, #1
 80155f2:	015b      	lsls	r3, r3, #5
 80155f4:	3a20      	subs	r2, #32
        len -= 32;
 80155f6:	017f      	lsls	r7, r7, #5
        REPEAT8(SET32(0));
 80155f8:	18c0      	adds	r0, r0, r3
        len -= 32;
 80155fa:	1bd2      	subs	r2, r2, r7
    }

    while(len > 4) {
 80155fc:	2a04      	cmp	r2, #4
 80155fe:	d904      	bls.n	801560a <lv_memset_00+0x86>
        SET32(0);
 8015600:	2300      	movs	r3, #0
        len -= 4;
 8015602:	3a04      	subs	r2, #4
        SET32(0);
 8015604:	c008      	stmia	r0!, {r3}
    while(len > 4) {
 8015606:	2a04      	cmp	r2, #4
 8015608:	d8fb      	bhi.n	8015602 <lv_memset_00+0x7e>
    }

    d8 = (uint8_t *)d32;
    while(len) {
        SET8(0);
 801560a:	2100      	movs	r1, #0
 801560c:	f005 ff84 	bl	801b518 <memset>
        len--;
    }
}
 8015610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(len > 4) {
 8015612:	2a04      	cmp	r2, #4
 8015614:	d8f4      	bhi.n	8015600 <lv_memset_00+0x7c>
    while(len) {
 8015616:	2a00      	cmp	r2, #0
 8015618:	d0fa      	beq.n	8015610 <lv_memset_00+0x8c>
 801561a:	e7f6      	b.n	801560a <lv_memset_00+0x86>
    while(len > 32) {
 801561c:	0003      	movs	r3, r0
        REPEAT8(SET32(0));
 801561e:	2100      	movs	r1, #0
 8015620:	097f      	lsrs	r7, r7, #5
 8015622:	1c7c      	adds	r4, r7, #1
 8015624:	0164      	lsls	r4, r4, #5
 8015626:	1904      	adds	r4, r0, r4
 8015628:	6019      	str	r1, [r3, #0]
 801562a:	6059      	str	r1, [r3, #4]
 801562c:	6099      	str	r1, [r3, #8]
 801562e:	60d9      	str	r1, [r3, #12]
 8015630:	6119      	str	r1, [r3, #16]
 8015632:	6159      	str	r1, [r3, #20]
 8015634:	6199      	str	r1, [r3, #24]
 8015636:	61d9      	str	r1, [r3, #28]
 8015638:	3320      	adds	r3, #32
    while(len > 32) {
 801563a:	429c      	cmp	r4, r3
 801563c:	d1f4      	bne.n	8015628 <lv_memset_00+0xa4>
        REPEAT8(SET32(0));
 801563e:	1c7b      	adds	r3, r7, #1
 8015640:	015b      	lsls	r3, r3, #5
 8015642:	3a20      	subs	r2, #32
        len -= 32;
 8015644:	017f      	lsls	r7, r7, #5
        REPEAT8(SET32(0));
 8015646:	18c0      	adds	r0, r0, r3
        len -= 32;
 8015648:	1bd2      	subs	r2, r2, r7
    while(len > 4) {
 801564a:	2a04      	cmp	r2, #4
 801564c:	d8d8      	bhi.n	8015600 <lv_memset_00+0x7c>
 801564e:	e7dc      	b.n	801560a <lv_memset_00+0x86>
            SET8(0);
 8015650:	0038      	movs	r0, r7
            len--;
 8015652:	002a      	movs	r2, r5
 8015654:	e7b2      	b.n	80155bc <lv_memset_00+0x38>
            SET8(0);
 8015656:	0008      	movs	r0, r1
            len--;
 8015658:	001a      	movs	r2, r3
 801565a:	e7af      	b.n	80155bc <lv_memset_00+0x38>

0801565c <lv_memset_ff>:
 * Same as `memset(dst, 0xFF, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_ff(void * dst, size_t len)
{
 801565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t * d8 = (uint8_t *)dst;
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 801565e:	2303      	movs	r3, #3
{
 8015660:	000a      	movs	r2, r1
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 8015662:	0019      	movs	r1, r3
 8015664:	4001      	ands	r1, r0

    /*Make the address aligned*/
    if(d_align) {
 8015666:	4218      	tst	r0, r3
 8015668:	d014      	beq.n	8015694 <lv_memset_ff+0x38>
        d_align = ALIGN_MASK + 1 - d_align;
        while(d_align && len) {
 801566a:	2a00      	cmp	r2, #0
 801566c:	d03e      	beq.n	80156ec <lv_memset_ff+0x90>
            SET8(0xFF);
 801566e:	24ff      	movs	r4, #255	; 0xff
 8015670:	1c47      	adds	r7, r0, #1
 8015672:	7004      	strb	r4, [r0, #0]
            len--;
 8015674:	1e55      	subs	r5, r2, #1
            d_align--;
 8015676:	1a5e      	subs	r6, r3, r1
        while(d_align && len) {
 8015678:	428b      	cmp	r3, r1
 801567a:	d050      	beq.n	801571e <lv_memset_ff+0xc2>
 801567c:	2d00      	cmp	r5, #0
 801567e:	d035      	beq.n	80156ec <lv_memset_ff+0x90>
            SET8(0xFF);
 8015680:	7044      	strb	r4, [r0, #1]
 8015682:	1c81      	adds	r1, r0, #2
            len--;
 8015684:	1e93      	subs	r3, r2, #2
        while(d_align && len) {
 8015686:	2e01      	cmp	r6, #1
 8015688:	d04c      	beq.n	8015724 <lv_memset_ff+0xc8>
 801568a:	2b00      	cmp	r3, #0
 801568c:	d02e      	beq.n	80156ec <lv_memset_ff+0x90>
            SET8(0xFF);
 801568e:	7084      	strb	r4, [r0, #2]
            len--;
 8015690:	3a03      	subs	r2, #3
            SET8(0xFF);
 8015692:	3003      	adds	r0, #3
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
    while(len > 32) {
 8015694:	2a20      	cmp	r2, #32
 8015696:	d92a      	bls.n	80156ee <lv_memset_ff+0x92>
 8015698:	0017      	movs	r7, r2
 801569a:	3f21      	subs	r7, #33	; 0x21
 801569c:	0743      	lsls	r3, r0, #29
 801569e:	d12b      	bne.n	80156f8 <lv_memset_ff+0x9c>
 80156a0:	2f5f      	cmp	r7, #95	; 0x5f
 80156a2:	d929      	bls.n	80156f8 <lv_memset_ff+0x9c>
 80156a4:	0003      	movs	r3, r0
 80156a6:	2100      	movs	r1, #0
        REPEAT8(SET32(0xFFFFFFFF));
 80156a8:	2401      	movs	r4, #1
 80156aa:	4264      	negs	r4, r4
 80156ac:	17e5      	asrs	r5, r4, #31
 80156ae:	097f      	lsrs	r7, r7, #5
 80156b0:	1c7e      	adds	r6, r7, #1
 80156b2:	3101      	adds	r1, #1
 80156b4:	601c      	str	r4, [r3, #0]
 80156b6:	605d      	str	r5, [r3, #4]
 80156b8:	609c      	str	r4, [r3, #8]
 80156ba:	60dd      	str	r5, [r3, #12]
 80156bc:	611c      	str	r4, [r3, #16]
 80156be:	615d      	str	r5, [r3, #20]
 80156c0:	619c      	str	r4, [r3, #24]
 80156c2:	61dd      	str	r5, [r3, #28]
    while(len > 32) {
 80156c4:	3320      	adds	r3, #32
 80156c6:	428e      	cmp	r6, r1
 80156c8:	d8f3      	bhi.n	80156b2 <lv_memset_ff+0x56>
        REPEAT8(SET32(0xFFFFFFFF));
 80156ca:	1c7b      	adds	r3, r7, #1
 80156cc:	015b      	lsls	r3, r3, #5
 80156ce:	3a20      	subs	r2, #32
        len -= 32;
 80156d0:	017f      	lsls	r7, r7, #5
        REPEAT8(SET32(0xFFFFFFFF));
 80156d2:	18c0      	adds	r0, r0, r3
        len -= 32;
 80156d4:	1bd2      	subs	r2, r2, r7
    }

    while(len > 4) {
 80156d6:	2a04      	cmp	r2, #4
 80156d8:	d905      	bls.n	80156e6 <lv_memset_ff+0x8a>
        SET32(0xFFFFFFFF);
 80156da:	2301      	movs	r3, #1
 80156dc:	425b      	negs	r3, r3
        len -= 4;
 80156de:	3a04      	subs	r2, #4
        SET32(0xFFFFFFFF);
 80156e0:	c008      	stmia	r0!, {r3}
    while(len > 4) {
 80156e2:	2a04      	cmp	r2, #4
 80156e4:	d8fb      	bhi.n	80156de <lv_memset_ff+0x82>
    }

    d8 = (uint8_t *)d32;
    while(len) {
        SET8(0xFF);
 80156e6:	21ff      	movs	r1, #255	; 0xff
 80156e8:	f005 ff16 	bl	801b518 <memset>
        len--;
    }
}
 80156ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(len > 4) {
 80156ee:	2a04      	cmp	r2, #4
 80156f0:	d8f3      	bhi.n	80156da <lv_memset_ff+0x7e>
    while(len) {
 80156f2:	2a00      	cmp	r2, #0
 80156f4:	d0fa      	beq.n	80156ec <lv_memset_ff+0x90>
 80156f6:	e7f6      	b.n	80156e6 <lv_memset_ff+0x8a>
        REPEAT8(SET32(0xFFFFFFFF));
 80156f8:	2101      	movs	r1, #1
    while(len > 32) {
 80156fa:	0003      	movs	r3, r0
 80156fc:	097f      	lsrs	r7, r7, #5
 80156fe:	1c7c      	adds	r4, r7, #1
 8015700:	0164      	lsls	r4, r4, #5
 8015702:	1904      	adds	r4, r0, r4
        REPEAT8(SET32(0xFFFFFFFF));
 8015704:	4249      	negs	r1, r1
 8015706:	6019      	str	r1, [r3, #0]
 8015708:	6059      	str	r1, [r3, #4]
 801570a:	6099      	str	r1, [r3, #8]
 801570c:	60d9      	str	r1, [r3, #12]
 801570e:	6119      	str	r1, [r3, #16]
 8015710:	6159      	str	r1, [r3, #20]
 8015712:	6199      	str	r1, [r3, #24]
 8015714:	61d9      	str	r1, [r3, #28]
 8015716:	3320      	adds	r3, #32
    while(len > 32) {
 8015718:	429c      	cmp	r4, r3
 801571a:	d1f4      	bne.n	8015706 <lv_memset_ff+0xaa>
 801571c:	e7d5      	b.n	80156ca <lv_memset_ff+0x6e>
            SET8(0xFF);
 801571e:	0038      	movs	r0, r7
            len--;
 8015720:	002a      	movs	r2, r5
 8015722:	e7b7      	b.n	8015694 <lv_memset_ff+0x38>
            SET8(0xFF);
 8015724:	0008      	movs	r0, r1
            len--;
 8015726:	001a      	movs	r2, r3
 8015728:	e7b4      	b.n	8015694 <lv_memset_ff+0x38>
 801572a:	46c0      	nop			; (mov r8, r8)

0801572c <lv_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_style_init(lv_style_t * style)
{
 801572c:	b510      	push	{r4, lr}
    if(style->sentinel == LV_STYLE_SENTINEL_VALUE && style->prop_cnt > 1) {
        LV_LOG_WARN("Style might be already inited. (Potential memory leak)");
    }
#endif

    lv_memset_00(style, sizeof(lv_style_t));
 801572e:	2108      	movs	r1, #8
 8015730:	f7ff ff28 	bl	8015584 <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
#endif
}
 8015734:	bd10      	pop	{r4, pc}
 8015736:	46c0      	nop			; (mov r8, r8)

08015738 <lv_style_reset>:

void lv_style_reset(lv_style_t * style)
{
 8015738:	b510      	push	{r4, lr}
    LV_ASSERT_STYLE(style);

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 801573a:	4b08      	ldr	r3, [pc, #32]	; (801575c <lv_style_reset+0x24>)
 801573c:	8882      	ldrh	r2, [r0, #4]
{
 801573e:	0004      	movs	r4, r0
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8015740:	429a      	cmp	r2, r3
 8015742:	d006      	beq.n	8015752 <lv_style_reset+0x1a>
        LV_LOG_ERROR("Cannot reset const style");
        return;
    }

    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8015744:	79c3      	ldrb	r3, [r0, #7]
 8015746:	2b01      	cmp	r3, #1
 8015748:	d804      	bhi.n	8015754 <lv_style_reset+0x1c>
    lv_memset_00(style, sizeof(lv_style_t));
 801574a:	2108      	movs	r1, #8
 801574c:	0020      	movs	r0, r4
 801574e:	f7ff ff19 	bl	8015584 <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
#endif
}
 8015752:	bd10      	pop	{r4, pc}
    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8015754:	6800      	ldr	r0, [r0, #0]
 8015756:	f7ff fbb5 	bl	8014ec4 <lv_mem_free>
 801575a:	e7f6      	b.n	801574a <lv_style_reset+0x12>
 801575c:	0000ffff 	.word	0x0000ffff

08015760 <lv_style_remove_prop>:
{
    return last_custom_prop_id - _LV_STYLE_LAST_BUILT_IN_PROP;
}

bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop)
{
 8015760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015762:	46ce      	mov	lr, r9
 8015764:	4647      	mov	r7, r8
 8015766:	b580      	push	{r7, lr}
    LV_ASSERT_STYLE(style);

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8015768:	4a2f      	ldr	r2, [pc, #188]	; (8015828 <lv_style_remove_prop+0xc8>)
 801576a:	8883      	ldrh	r3, [r0, #4]
{
 801576c:	0006      	movs	r6, r0
 801576e:	000c      	movs	r4, r1
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8015770:	4293      	cmp	r3, r2
 8015772:	d011      	beq.n	8015798 <lv_style_remove_prop+0x38>
        LV_LOG_ERROR("Cannot remove prop from const style");
        return false;
    }

    if(style->prop_cnt == 0)  return false;
 8015774:	79c0      	ldrb	r0, [r0, #7]
 8015776:	2800      	cmp	r0, #0
 8015778:	d00e      	beq.n	8015798 <lv_style_remove_prop+0x38>

    if(style->prop_cnt == 1) {
 801577a:	2801      	cmp	r0, #1
 801577c:	d011      	beq.n	80157a2 <lv_style_remove_prop+0x42>
    }

    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
    uint16_t * old_props = (uint16_t *)tmp;
    uint32_t i;
    for(i = 0; i < style->prop_cnt; i++) {
 801577e:	2200      	movs	r2, #0
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8015780:	6837      	ldr	r7, [r6, #0]
 8015782:	0085      	lsls	r5, r0, #2
 8015784:	197d      	adds	r5, r7, r5
        if(LV_STYLE_PROP_ID_MASK(old_props[i]) == prop) {
 8015786:	0053      	lsls	r3, r2, #1
 8015788:	5aeb      	ldrh	r3, [r5, r3]
 801578a:	049b      	lsls	r3, r3, #18
 801578c:	0c9b      	lsrs	r3, r3, #18
 801578e:	42a3      	cmp	r3, r4
 8015790:	d00f      	beq.n	80157b2 <lv_style_remove_prop+0x52>
    for(i = 0; i < style->prop_cnt; i++) {
 8015792:	3201      	adds	r2, #1
 8015794:	4290      	cmp	r0, r2
 8015796:	d8f6      	bhi.n	8015786 <lv_style_remove_prop+0x26>
        return false;
 8015798:	2000      	movs	r0, #0
            return true;
        }
    }

    return false;
}
 801579a:	bcc0      	pop	{r6, r7}
 801579c:	46b9      	mov	r9, r7
 801579e:	46b0      	mov	r8, r6
 80157a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 80157a2:	049b      	lsls	r3, r3, #18
 80157a4:	0c9b      	lsrs	r3, r3, #18
 80157a6:	428b      	cmp	r3, r1
 80157a8:	d1f6      	bne.n	8015798 <lv_style_remove_prop+0x38>
            style->prop1 = LV_STYLE_PROP_INV;
 80157aa:	2300      	movs	r3, #0
 80157ac:	80b3      	strh	r3, [r6, #4]
            style->prop_cnt = 0;
 80157ae:	71f3      	strb	r3, [r6, #7]
            return true;
 80157b0:	e7f3      	b.n	801579a <lv_style_remove_prop+0x3a>
            if(style->prop_cnt == 2) {
 80157b2:	2802      	cmp	r0, #2
 80157b4:	d029      	beq.n	801580a <lv_style_remove_prop+0xaa>
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 80157b6:	3801      	subs	r0, #1
 80157b8:	0043      	lsls	r3, r0, #1
 80157ba:	1818      	adds	r0, r3, r0
 80157bc:	0040      	lsls	r0, r0, #1
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 80157be:	f7ff fb5f 	bl	8014e80 <lv_mem_alloc>
 80157c2:	4681      	mov	r9, r0
                if(new_values_and_props == NULL) return false;
 80157c4:	2800      	cmp	r0, #0
 80157c6:	d0e7      	beq.n	8015798 <lv_style_remove_prop+0x38>
                style->prop_cnt--;
 80157c8:	79f3      	ldrb	r3, [r6, #7]
                for(i = j = 0; j <= style->prop_cnt;
 80157ca:	2200      	movs	r2, #0
                style->prop_cnt--;
 80157cc:	3b01      	subs	r3, #1
 80157ce:	b2db      	uxtb	r3, r3
 80157d0:	469c      	mov	ip, r3
 80157d2:	71f3      	strb	r3, [r6, #7]
                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80157d4:	009b      	lsls	r3, r3, #2
 80157d6:	4698      	mov	r8, r3
                for(i = j = 0; j <= style->prop_cnt;
 80157d8:	2300      	movs	r3, #0
                style->v_p.values_and_props = new_values_and_props;
 80157da:	6030      	str	r0, [r6, #0]
                    if(old_props[j] != prop) {
 80157dc:	8829      	ldrh	r1, [r5, #0]
 80157de:	42a1      	cmp	r1, r4
 80157e0:	d00a      	beq.n	80157f8 <lv_style_remove_prop+0x98>
                        new_values[i] = old_values[j];
 80157e2:	4648      	mov	r0, r9
 80157e4:	009e      	lsls	r6, r3, #2
 80157e6:	59be      	ldr	r6, [r7, r6]
 80157e8:	0091      	lsls	r1, r2, #2
 80157ea:	500e      	str	r6, [r1, r0]
                        new_props[i++] = old_props[j];
 80157ec:	4640      	mov	r0, r8
 80157ee:	0051      	lsls	r1, r2, #1
 80157f0:	882e      	ldrh	r6, [r5, #0]
 80157f2:	4449      	add	r1, r9
 80157f4:	520e      	strh	r6, [r1, r0]
 80157f6:	3201      	adds	r2, #1
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 80157f8:	3301      	adds	r3, #1
                for(i = j = 0; j <= style->prop_cnt;
 80157fa:	3502      	adds	r5, #2
 80157fc:	459c      	cmp	ip, r3
 80157fe:	d2ed      	bcs.n	80157dc <lv_style_remove_prop+0x7c>
            lv_mem_free(old_values);
 8015800:	0038      	movs	r0, r7
 8015802:	f7ff fb5f 	bl	8014ec4 <lv_mem_free>
            return true;
 8015806:	2001      	movs	r0, #1
 8015808:	e7c7      	b.n	801579a <lv_style_remove_prop+0x3a>
                style->prop_cnt = 1;
 801580a:	2301      	movs	r3, #1
 801580c:	71f3      	strb	r3, [r6, #7]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 801580e:	2a00      	cmp	r2, #0
 8015810:	d104      	bne.n	801581c <lv_style_remove_prop+0xbc>
 8015812:	886b      	ldrh	r3, [r5, #2]
 8015814:	80b3      	strh	r3, [r6, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	6033      	str	r3, [r6, #0]
 801581a:	e7f1      	b.n	8015800 <lv_style_remove_prop+0xa0>
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 801581c:	882b      	ldrh	r3, [r5, #0]
 801581e:	80b3      	strh	r3, [r6, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8015820:	683b      	ldr	r3, [r7, #0]
 8015822:	6033      	str	r3, [r6, #0]
 8015824:	e7ec      	b.n	8015800 <lv_style_remove_prop+0xa0>
 8015826:	46c0      	nop			; (mov r8, r8)
 8015828:	0000ffff 	.word	0x0000ffff

0801582c <lv_style_set_prop>:

void lv_style_set_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t value)
{
 801582c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801582e:	4646      	mov	r6, r8
 8015830:	46d6      	mov	lr, sl
 8015832:	464f      	mov	r7, r9
 8015834:	b5c0      	push	{r6, r7, lr}
 8015836:	4692      	mov	sl, r2
static void lv_style_set_prop_internal(lv_style_t * style, lv_style_prop_t prop_and_meta, lv_style_value_t value,
                                       void (*value_adjustment_helper)(lv_style_prop_t, lv_style_value_t, uint16_t *, lv_style_value_t *))
{
    LV_ASSERT_STYLE(style);

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8015838:	8883      	ldrh	r3, [r0, #4]
 801583a:	4a45      	ldr	r2, [pc, #276]	; (8015950 <lv_style_set_prop+0x124>)
{
 801583c:	0006      	movs	r6, r0
 801583e:	4688      	mov	r8, r1
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8015840:	4293      	cmp	r3, r2
 8015842:	d046      	beq.n	80158d2 <lv_style_set_prop+0xa6>
        LV_LOG_ERROR("Cannot set property of constant style");
        return;
    }

    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 8015844:	048d      	lsls	r5, r1, #18
 8015846:	000a      	movs	r2, r1

    if(style->prop_cnt > 1) {
 8015848:	79c1      	ldrb	r1, [r0, #7]
    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 801584a:	0cad      	lsrs	r5, r5, #18
    if(style->prop_cnt > 1) {
 801584c:	2901      	cmp	r1, #1
 801584e:	d945      	bls.n	80158dc <lv_style_set_prop+0xb0>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8015850:	6800      	ldr	r0, [r0, #0]
 8015852:	008a      	lsls	r2, r1, #2
        uint16_t * props = (uint16_t *)tmp;
        int32_t i;
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8015854:	1e4c      	subs	r4, r1, #1
 8015856:	1882      	adds	r2, r0, r2
            if(LV_STYLE_PROP_ID_MASK(props[i]) == prop_id) {
 8015858:	0063      	lsls	r3, r4, #1
 801585a:	18d7      	adds	r7, r2, r3
 801585c:	5ad3      	ldrh	r3, [r2, r3]
 801585e:	049b      	lsls	r3, r3, #18
 8015860:	0c9b      	lsrs	r3, r3, #18
 8015862:	429d      	cmp	r5, r3
 8015864:	d04e      	beq.n	8015904 <lv_style_set_prop+0xd8>
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8015866:	3c01      	subs	r4, #1
 8015868:	d2f6      	bcs.n	8015858 <lv_style_set_prop+0x2c>
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
                return;
            }
        }

        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 801586a:	1c4b      	adds	r3, r1, #1
 801586c:	0059      	lsls	r1, r3, #1
 801586e:	18c9      	adds	r1, r1, r3
 8015870:	0049      	lsls	r1, r1, #1
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 8015872:	f7ff fb43 	bl	8014efc <lv_mem_realloc>
 8015876:	4681      	mov	r9, r0
        if(values_and_props == NULL) return;
 8015878:	2800      	cmp	r0, #0
 801587a:	d02a      	beq.n	80158d2 <lv_style_set_prop+0xa6>
        style->v_p.values_and_props = values_and_props;

        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 801587c:	79f2      	ldrb	r2, [r6, #7]
        style->v_p.values_and_props = values_and_props;
 801587e:	6030      	str	r0, [r6, #0]
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8015880:	0094      	lsls	r4, r2, #2
 8015882:	444c      	add	r4, r9
        props = (uint16_t *)tmp;
        /*Shift all props to make place for the value before them*/
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8015884:	2a00      	cmp	r2, #0
 8015886:	d060      	beq.n	801594a <lv_style_set_prop+0x11e>
 8015888:	1c57      	adds	r7, r2, #1
 801588a:	0050      	lsls	r0, r2, #1
 801588c:	007b      	lsls	r3, r7, #1
 801588e:	0052      	lsls	r2, r2, #1
 8015890:	18e3      	adds	r3, r4, r3
 8015892:	4240      	negs	r0, r0
 8015894:	3402      	adds	r4, #2
 8015896:	3a04      	subs	r2, #4
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 8015898:	18c1      	adds	r1, r0, r3
 801589a:	5a89      	ldrh	r1, [r1, r2]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 801589c:	3b02      	subs	r3, #2
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 801589e:	8059      	strh	r1, [r3, #2]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80158a0:	429c      	cmp	r4, r3
 80158a2:	d1f9      	bne.n	8015898 <lv_style_set_prop+0x6c>
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
        props = (uint16_t *)tmp;
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;

        /*Set the new property and value*/
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 80158a4:	4a2b      	ldr	r2, [pc, #172]	; (8015954 <lv_style_set_prop+0x128>)
        style->prop_cnt++;
 80158a6:	b2f8      	uxtb	r0, r7
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 80158a8:	4694      	mov	ip, r2
    *prop_storage = prop;
 80158aa:	4642      	mov	r2, r8
        style->prop_cnt++;
 80158ac:	71f0      	strb	r0, [r6, #7]
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80158ae:	0083      	lsls	r3, r0, #2
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 80158b0:	4460      	add	r0, ip
    *prop_storage = prop;
 80158b2:	0040      	lsls	r0, r0, #1
 80158b4:	4448      	add	r0, r9
 80158b6:	52c2      	strh	r2, [r0, r3]
    *value_storage = value;
 80158b8:	4652      	mov	r2, sl
 80158ba:	444b      	add	r3, r9
 80158bc:	3b04      	subs	r3, #4
 80158be:	601a      	str	r2, [r3, #0]
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 80158c0:	2318      	movs	r3, #24
    uint16_t group = (prop & 0x1FF) >> 4;
 80158c2:	092d      	lsrs	r5, r5, #4
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 80158c4:	422b      	tst	r3, r5
 80158c6:	d014      	beq.n	80158f2 <lv_style_set_prop+0xc6>
 80158c8:	2380      	movs	r3, #128	; 0x80
        style->prop_cnt = 1;
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
    }

    uint8_t group = _lv_style_get_prop_group(prop_id);
    style->has_group |= 1 << group;
 80158ca:	79b2      	ldrb	r2, [r6, #6]
 80158cc:	425b      	negs	r3, r3
 80158ce:	4313      	orrs	r3, r2
 80158d0:	71b3      	strb	r3, [r6, #6]
}
 80158d2:	bce0      	pop	{r5, r6, r7}
 80158d4:	46ba      	mov	sl, r7
 80158d6:	46b1      	mov	r9, r6
 80158d8:	46a8      	mov	r8, r5
 80158da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(style->prop_cnt == 1) {
 80158dc:	2901      	cmp	r1, #1
 80158de:	d017      	beq.n	8015910 <lv_style_set_prop+0xe4>
        style->prop_cnt = 1;
 80158e0:	2301      	movs	r3, #1
 80158e2:	71c3      	strb	r3, [r0, #7]
    *value_storage = value;
 80158e4:	4653      	mov	r3, sl
    *prop_storage = prop;
 80158e6:	80b2      	strh	r2, [r6, #4]
    *value_storage = value;
 80158e8:	6003      	str	r3, [r0, #0]
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 80158ea:	2318      	movs	r3, #24
    uint16_t group = (prop & 0x1FF) >> 4;
 80158ec:	092d      	lsrs	r5, r5, #4
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 80158ee:	422b      	tst	r3, r5
 80158f0:	d1ea      	bne.n	80158c8 <lv_style_set_prop+0x9c>
    style->has_group |= 1 << group;
 80158f2:	3307      	adds	r3, #7
 80158f4:	401d      	ands	r5, r3
 80158f6:	3b1e      	subs	r3, #30
 80158f8:	40ab      	lsls	r3, r5
 80158fa:	79b2      	ldrb	r2, [r6, #6]
 80158fc:	b25b      	sxtb	r3, r3
 80158fe:	4313      	orrs	r3, r2
 8015900:	71b3      	strb	r3, [r6, #6]
}
 8015902:	e7e6      	b.n	80158d2 <lv_style_set_prop+0xa6>
    *prop_storage = prop;
 8015904:	4643      	mov	r3, r8
 8015906:	803b      	strh	r3, [r7, #0]
    *value_storage = value;
 8015908:	4653      	mov	r3, sl
 801590a:	00a4      	lsls	r4, r4, #2
 801590c:	5023      	str	r3, [r4, r0]
                return;
 801590e:	e7e0      	b.n	80158d2 <lv_style_set_prop+0xa6>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
 8015910:	049b      	lsls	r3, r3, #18
 8015912:	0c9b      	lsrs	r3, r3, #18
 8015914:	429d      	cmp	r5, r3
 8015916:	d014      	beq.n	8015942 <lv_style_set_prop+0x116>
        uint8_t * values_and_props = lv_mem_alloc(size);
 8015918:	200c      	movs	r0, #12
 801591a:	f7ff fab1 	bl	8014e80 <lv_mem_alloc>
        if(values_and_props == NULL) return;
 801591e:	2800      	cmp	r0, #0
 8015920:	d0d7      	beq.n	80158d2 <lv_style_set_prop+0xa6>
        style->prop_cnt++;
 8015922:	79f3      	ldrb	r3, [r6, #7]
        lv_style_value_t value_tmp = style->v_p.value1;
 8015924:	6832      	ldr	r2, [r6, #0]
        style->prop_cnt++;
 8015926:	3301      	adds	r3, #1
 8015928:	b2db      	uxtb	r3, r3
 801592a:	71f3      	strb	r3, [r6, #7]
        props[0] = style->prop1;
 801592c:	88b1      	ldrh	r1, [r6, #4]
        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 801592e:	009b      	lsls	r3, r3, #2
 8015930:	18c3      	adds	r3, r0, r3
        style->v_p.values_and_props = values_and_props;
 8015932:	6030      	str	r0, [r6, #0]
        props[0] = style->prop1;
 8015934:	8019      	strh	r1, [r3, #0]
        values[0] = value_tmp;
 8015936:	6002      	str	r2, [r0, #0]
    *prop_storage = prop;
 8015938:	4642      	mov	r2, r8
 801593a:	805a      	strh	r2, [r3, #2]
    *value_storage = value;
 801593c:	4653      	mov	r3, sl
 801593e:	6043      	str	r3, [r0, #4]
 8015940:	e7d3      	b.n	80158ea <lv_style_set_prop+0xbe>
 8015942:	4653      	mov	r3, sl
    *prop_storage = prop;
 8015944:	80b2      	strh	r2, [r6, #4]
    *value_storage = value;
 8015946:	6003      	str	r3, [r0, #0]
            return;
 8015948:	e7c3      	b.n	80158d2 <lv_style_set_prop+0xa6>
 801594a:	2701      	movs	r7, #1
 801594c:	e7aa      	b.n	80158a4 <lv_style_set_prop+0x78>
 801594e:	46c0      	nop			; (mov r8, r8)
 8015950:	0000ffff 	.word	0x0000ffff
 8015954:	7fffffff 	.word	0x7fffffff

08015958 <lv_style_prop_get_default>:
    switch(prop) {
 8015958:	3803      	subs	r0, #3
 801595a:	b280      	uxth	r0, r0
 801595c:	2869      	cmp	r0, #105	; 0x69
 801595e:	d803      	bhi.n	8015968 <lv_style_prop_get_default+0x10>
 8015960:	4b09      	ldr	r3, [pc, #36]	; (8015988 <lv_style_prop_get_default+0x30>)
 8015962:	0080      	lsls	r0, r0, #2
 8015964:	581b      	ldr	r3, [r3, r0]
 8015966:	469f      	mov	pc, r3
            value.ptr = NULL;
 8015968:	2000      	movs	r0, #0
}
 801596a:	4770      	bx	lr
            value.num = LV_OPA_COVER;
 801596c:	20ff      	movs	r0, #255	; 0xff
            break;
 801596e:	e7fc      	b.n	801596a <lv_style_prop_get_default+0x12>
            value.num = LV_COORD_MAX;
 8015970:	4806      	ldr	r0, [pc, #24]	; (801598c <lv_style_prop_get_default+0x34>)
            break;
 8015972:	e7fa      	b.n	801596a <lv_style_prop_get_default+0x12>
            value.num = LV_BORDER_SIDE_FULL;
 8015974:	200f      	movs	r0, #15
            break;
 8015976:	e7f8      	b.n	801596a <lv_style_prop_get_default+0x12>
            value.ptr = LV_FONT_DEFAULT;
 8015978:	4805      	ldr	r0, [pc, #20]	; (8015990 <lv_style_prop_get_default+0x38>)
            break;
 801597a:	e7f6      	b.n	801596a <lv_style_prop_get_default+0x12>
 801597c:	4805      	ldr	r0, [pc, #20]	; (8015994 <lv_style_prop_get_default+0x3c>)
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
 801597e:	e7f4      	b.n	801596a <lv_style_prop_get_default+0x12>
            value.num = LV_IMG_ZOOM_NONE;
 8015980:	2080      	movs	r0, #128	; 0x80
 8015982:	0040      	lsls	r0, r0, #1
            break;
 8015984:	e7f1      	b.n	801596a <lv_style_prop_get_default+0x12>
 8015986:	46c0      	nop			; (mov r8, r8)
 8015988:	0801bbc8 	.word	0x0801bbc8
 801598c:	00001fff 	.word	0x00001fff
 8015990:	0801bf40 	.word	0x0801bf40
 8015994:	0000ffff 	.word	0x0000ffff

08015998 <lv_style_get_prop>:
{
 8015998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801599a:	0016      	movs	r6, r2
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 801599c:	8883      	ldrh	r3, [r0, #4]
 801599e:	4a28      	ldr	r2, [pc, #160]	; (8015a40 <lv_style_get_prop+0xa8>)
 80159a0:	4293      	cmp	r3, r2
 80159a2:	d014      	beq.n	80159ce <lv_style_get_prop+0x36>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 80159a4:	79c4      	ldrb	r4, [r0, #7]
 80159a6:	2c00      	cmp	r4, #0
 80159a8:	d00f      	beq.n	80159ca <lv_style_get_prop+0x32>

    if(style->prop_cnt > 1) {
 80159aa:	2c01      	cmp	r4, #1
 80159ac:	d025      	beq.n	80159fa <lv_style_get_prop+0x62>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80159ae:	6807      	ldr	r7, [r0, #0]
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 80159b0:	2000      	movs	r0, #0
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80159b2:	00a2      	lsls	r2, r4, #2
 80159b4:	18ba      	adds	r2, r7, r2
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 80159b6:	8815      	ldrh	r5, [r2, #0]
 80159b8:	04ab      	lsls	r3, r5, #18
 80159ba:	0c9b      	lsrs	r3, r3, #18
            if(prop_id == prop) {
 80159bc:	4299      	cmp	r1, r3
 80159be:	d02a      	beq.n	8015a16 <lv_style_get_prop+0x7e>
        for(i = 0; i < style->prop_cnt; i++) {
 80159c0:	3001      	adds	r0, #1
 80159c2:	3202      	adds	r2, #2
 80159c4:	4284      	cmp	r4, r0
 80159c6:	d8f6      	bhi.n	80159b6 <lv_style_get_prop+0x1e>
        return LV_STYLE_RES_NOT_FOUND;
 80159c8:	2400      	movs	r4, #0
}
 80159ca:	0020      	movs	r0, r4
 80159cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 80159ce:	6805      	ldr	r5, [r0, #0]
 80159d0:	882c      	ldrh	r4, [r5, #0]
 80159d2:	2c00      	cmp	r4, #0
 80159d4:	d104      	bne.n	80159e0 <lv_style_get_prop+0x48>
 80159d6:	e7f7      	b.n	80159c8 <lv_style_get_prop+0x30>
 80159d8:	892c      	ldrh	r4, [r5, #8]
 80159da:	3508      	adds	r5, #8
 80159dc:	2c00      	cmp	r4, #0
 80159de:	d0f4      	beq.n	80159ca <lv_style_get_prop+0x32>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 80159e0:	04a3      	lsls	r3, r4, #18
 80159e2:	0c9b      	lsrs	r3, r3, #18
            if(prop_id == prop) {
 80159e4:	4299      	cmp	r1, r3
 80159e6:	d1f7      	bne.n	80159d8 <lv_style_get_prop+0x40>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 80159e8:	b223      	sxth	r3, r4
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	db11      	blt.n	8015a12 <lv_style_get_prop+0x7a>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 80159ee:	0463      	lsls	r3, r4, #17
 80159f0:	d41b      	bmi.n	8015a2a <lv_style_get_prop+0x92>
 80159f2:	686b      	ldr	r3, [r5, #4]
                return LV_STYLE_RES_FOUND;
 80159f4:	2401      	movs	r4, #1
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 80159f6:	6033      	str	r3, [r6, #0]
 80159f8:	e7e7      	b.n	80159ca <lv_style_get_prop+0x32>
                }
                return LV_STYLE_RES_FOUND;
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 80159fa:	049a      	lsls	r2, r3, #18
 80159fc:	0c92      	lsrs	r2, r2, #18
 80159fe:	4291      	cmp	r1, r2
 8015a00:	d1e2      	bne.n	80159c8 <lv_style_get_prop+0x30>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8015a02:	b21a      	sxth	r2, r3
 8015a04:	2a00      	cmp	r2, #0
 8015a06:	db04      	blt.n	8015a12 <lv_style_get_prop+0x7a>
            return LV_STYLE_RES_INHERIT;
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8015a08:	045b      	lsls	r3, r3, #17
 8015a0a:	d414      	bmi.n	8015a36 <lv_style_get_prop+0x9e>
 8015a0c:	6803      	ldr	r3, [r0, #0]
 8015a0e:	6033      	str	r3, [r6, #0]
 8015a10:	e7db      	b.n	80159ca <lv_style_get_prop+0x32>
                    return LV_STYLE_RES_INHERIT;
 8015a12:	2402      	movs	r4, #2
 8015a14:	e7d9      	b.n	80159ca <lv_style_get_prop+0x32>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8015a16:	b22b      	sxth	r3, r5
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	dbfa      	blt.n	8015a12 <lv_style_get_prop+0x7a>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8015a1c:	046b      	lsls	r3, r5, #17
 8015a1e:	d404      	bmi.n	8015a2a <lv_style_get_prop+0x92>
                    *value = values[i];
 8015a20:	0080      	lsls	r0, r0, #2
 8015a22:	59c3      	ldr	r3, [r0, r7]
                return LV_STYLE_RES_FOUND;
 8015a24:	2401      	movs	r4, #1
                    *value = values[i];
 8015a26:	6033      	str	r3, [r6, #0]
 8015a28:	e7cf      	b.n	80159ca <lv_style_get_prop+0x32>
                    *value = lv_style_prop_get_default(prop_id);
 8015a2a:	0008      	movs	r0, r1
 8015a2c:	f7ff ff94 	bl	8015958 <lv_style_prop_get_default>
                return LV_STYLE_RES_FOUND;
 8015a30:	2401      	movs	r4, #1
                    *value = lv_style_prop_get_default(prop_id);
 8015a32:	6030      	str	r0, [r6, #0]
 8015a34:	e7c9      	b.n	80159ca <lv_style_get_prop+0x32>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8015a36:	0008      	movs	r0, r1
 8015a38:	f7ff ff8e 	bl	8015958 <lv_style_prop_get_default>
 8015a3c:	6030      	str	r0, [r6, #0]
 8015a3e:	e7c4      	b.n	80159ca <lv_style_get_prop+0x32>
 8015a40:	0000ffff 	.word	0x0000ffff

08015a44 <lv_style_is_empty>:
    return style->prop_cnt == 0 ? true : false;
 8015a44:	79c0      	ldrb	r0, [r0, #7]
 8015a46:	4243      	negs	r3, r0
 8015a48:	4158      	adcs	r0, r3
 8015a4a:	b2c0      	uxtb	r0, r0
}
 8015a4c:	4770      	bx	lr
 8015a4e:	46c0      	nop			; (mov r8, r8)

08015a50 <_lv_style_get_prop_group>:
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8015a50:	2218      	movs	r2, #24
    uint16_t group = (prop & 0x1FF) >> 4;
 8015a52:	0903      	lsrs	r3, r0, #4
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8015a54:	2007      	movs	r0, #7
 8015a56:	421a      	tst	r2, r3
 8015a58:	d101      	bne.n	8015a5e <_lv_style_get_prop_group+0xe>
    return (uint8_t)group;
 8015a5a:	3018      	adds	r0, #24
 8015a5c:	4018      	ands	r0, r3
}
 8015a5e:	4770      	bx	lr

08015a60 <_lv_style_prop_lookup_flags>:
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 8015a60:	4b0d      	ldr	r3, [pc, #52]	; (8015a98 <_lv_style_prop_lookup_flags+0x38>)
 8015a62:	4298      	cmp	r0, r3
 8015a64:	d016      	beq.n	8015a94 <_lv_style_prop_lookup_flags+0x34>
    if(prop == LV_STYLE_PROP_INV) return 0;
 8015a66:	2800      	cmp	r0, #0
 8015a68:	d00d      	beq.n	8015a86 <_lv_style_prop_lookup_flags+0x26>
    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS)
 8015a6a:	286f      	cmp	r0, #111	; 0x6f
 8015a6c:	d90d      	bls.n	8015a8a <_lv_style_prop_lookup_flags+0x2a>
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 8015a6e:	4b0b      	ldr	r3, [pc, #44]	; (8015a9c <_lv_style_prop_lookup_flags+0x3c>)
 8015a70:	681a      	ldr	r2, [r3, #0]
 8015a72:	2a00      	cmp	r2, #0
 8015a74:	d007      	beq.n	8015a86 <_lv_style_prop_lookup_flags+0x26>
 8015a76:	490a      	ldr	r1, [pc, #40]	; (8015aa0 <_lv_style_prop_lookup_flags+0x40>)
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
 8015a78:	3870      	subs	r0, #112	; 0x70
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 8015a7a:	6809      	ldr	r1, [r1, #0]
 8015a7c:	b283      	uxth	r3, r0
    if(prop == LV_STYLE_PROP_INV) return 0;
 8015a7e:	2000      	movs	r0, #0
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 8015a80:	428b      	cmp	r3, r1
 8015a82:	d305      	bcc.n	8015a90 <_lv_style_prop_lookup_flags+0x30>
}
 8015a84:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_INV) return 0;
 8015a86:	2000      	movs	r0, #0
 8015a88:	e7fc      	b.n	8015a84 <_lv_style_prop_lookup_flags+0x24>
        return _lv_style_builtin_prop_flag_lookup_table[prop];
 8015a8a:	4b06      	ldr	r3, [pc, #24]	; (8015aa4 <_lv_style_prop_lookup_flags+0x44>)
 8015a8c:	5c18      	ldrb	r0, [r3, r0]
 8015a8e:	e7f9      	b.n	8015a84 <_lv_style_prop_lookup_flags+0x24>
        return LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[prop];
 8015a90:	5cd0      	ldrb	r0, [r2, r3]
 8015a92:	e7f7      	b.n	8015a84 <_lv_style_prop_lookup_flags+0x24>
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 8015a94:	201f      	movs	r0, #31
 8015a96:	e7f5      	b.n	8015a84 <_lv_style_prop_lookup_flags+0x24>
 8015a98:	0000ffff 	.word	0x0000ffff
 8015a9c:	20000644 	.word	0x20000644
 8015aa0:	20004ee8 	.word	0x20004ee8
 8015aa4:	0801bd70 	.word	0x0801bd70

08015aa8 <lv_style_set_width>:
#include "lv_style.h"

void lv_style_set_width(lv_style_t * style, lv_coord_t value)
{
 8015aa8:	b510      	push	{r4, lr}
 8015aaa:	000a      	movs	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_WIDTH, v);
 8015aac:	2101      	movs	r1, #1
 8015aae:	f7ff febd 	bl	801582c <lv_style_set_prop>
}
 8015ab2:	bd10      	pop	{r4, pc}

08015ab4 <lv_style_set_bg_color>:
    };
    lv_style_set_prop(style, LV_STYLE_PAD_COLUMN, v);
}

void lv_style_set_bg_color(lv_style_t * style, lv_color_t value)
{
 8015ab4:	b500      	push	{lr}
 8015ab6:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8015ab8:	2300      	movs	r3, #0
 8015aba:	466a      	mov	r2, sp
 8015abc:	8013      	strh	r3, [r2, #0]
 8015abe:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8015ac0:	2120      	movs	r1, #32
 8015ac2:	f7ff feb3 	bl	801582c <lv_style_set_prop>
}
 8015ac6:	b003      	add	sp, #12
 8015ac8:	bd00      	pop	{pc}
 8015aca:	46c0      	nop			; (mov r8, r8)

08015acc <lv_style_set_bg_opa>:

void lv_style_set_bg_opa(lv_style_t * style, lv_opa_t value)
{
 8015acc:	b510      	push	{r4, lr}
 8015ace:	000a      	movs	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BG_OPA, v);
 8015ad0:	2121      	movs	r1, #33	; 0x21
 8015ad2:	f7ff feab 	bl	801582c <lv_style_set_prop>
}
 8015ad6:	bd10      	pop	{r4, pc}

08015ad8 <lv_style_set_line_width>:
    };
    lv_style_set_prop(style, LV_STYLE_IMG_RECOLOR_OPA, v);
}

void lv_style_set_line_width(lv_style_t * style, lv_coord_t value)
{
 8015ad8:	b510      	push	{r4, lr}
 8015ada:	000a      	movs	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_WIDTH, v);
 8015adc:	2149      	movs	r1, #73	; 0x49
 8015ade:	f7ff fea5 	bl	801582c <lv_style_set_prop>
}
 8015ae2:	bd10      	pop	{r4, pc}

08015ae4 <lv_style_set_line_color>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_ROUNDED, v);
}

void lv_style_set_line_color(lv_style_t * style, lv_color_t value)
{
 8015ae4:	b500      	push	{lr}
 8015ae6:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8015ae8:	2300      	movs	r3, #0
 8015aea:	466a      	mov	r2, sp
 8015aec:	8013      	strh	r3, [r2, #0]
 8015aee:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 8015af0:	214d      	movs	r1, #77	; 0x4d
 8015af2:	f7ff fe9b 	bl	801582c <lv_style_set_prop>
}
 8015af6:	b003      	add	sp, #12
 8015af8:	bd00      	pop	{pc}
 8015afa:	46c0      	nop			; (mov r8, r8)

08015afc <lv_style_set_arc_width>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_OPA, v);
}

void lv_style_set_arc_width(lv_style_t * style, lv_coord_t value)
{
 8015afc:	b510      	push	{r4, lr}
 8015afe:	000a      	movs	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_WIDTH, v);
 8015b00:	2150      	movs	r1, #80	; 0x50
 8015b02:	f7ff fe93 	bl	801582c <lv_style_set_prop>
}
 8015b06:	bd10      	pop	{r4, pc}

08015b08 <lv_style_set_arc_color>:
    };
    lv_style_set_prop(style, LV_STYLE_ARC_ROUNDED, v);
}

void lv_style_set_arc_color(lv_style_t * style, lv_color_t value)
{
 8015b08:	b500      	push	{lr}
 8015b0a:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	466a      	mov	r2, sp
 8015b10:	8013      	strh	r3, [r2, #0]
 8015b12:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8015b14:	2152      	movs	r1, #82	; 0x52
 8015b16:	f7ff fe89 	bl	801582c <lv_style_set_prop>
}
 8015b1a:	b003      	add	sp, #12
 8015b1c:	bd00      	pop	{pc}
 8015b1e:	46c0      	nop			; (mov r8, r8)

08015b20 <lv_style_set_text_color>:
    };
    lv_style_set_prop(style, LV_STYLE_ARC_IMG_SRC, v);
}

void lv_style_set_text_color(lv_style_t * style, lv_color_t value)
{
 8015b20:	b500      	push	{lr}
 8015b22:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8015b24:	2300      	movs	r3, #0
 8015b26:	466a      	mov	r2, sp
 8015b28:	8013      	strh	r3, [r2, #0]
 8015b2a:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 8015b2c:	2155      	movs	r1, #85	; 0x55
 8015b2e:	f7ff fe7d 	bl	801582c <lv_style_set_prop>
}
 8015b32:	b003      	add	sp, #12
 8015b34:	bd00      	pop	{pc}
 8015b36:	46c0      	nop			; (mov r8, r8)

08015b38 <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 8015b38:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 8015b3a:	2118      	movs	r1, #24
 8015b3c:	4803      	ldr	r0, [pc, #12]	; (8015b4c <_lv_timer_core_init+0x14>)
 8015b3e:	f7ff f88d 	bl	8014c5c <_lv_ll_init>
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
    lv_timer_run = en;
 8015b42:	2201      	movs	r2, #1
 8015b44:	4b02      	ldr	r3, [pc, #8]	; (8015b50 <_lv_timer_core_init+0x18>)
 8015b46:	701a      	strb	r2, [r3, #0]
}
 8015b48:	bd10      	pop	{r4, pc}
 8015b4a:	46c0      	nop			; (mov r8, r8)
 8015b4c:	20000650 	.word	0x20000650
 8015b50:	20004efc 	.word	0x20004efc

08015b54 <lv_timer_handler>:
{
 8015b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b56:	46de      	mov	lr, fp
 8015b58:	4657      	mov	r7, sl
 8015b5a:	464e      	mov	r6, r9
 8015b5c:	4645      	mov	r5, r8
 8015b5e:	b5e0      	push	{r5, r6, r7, lr}
    if(already_running) {
 8015b60:	4b73      	ldr	r3, [pc, #460]	; (8015d30 <lv_timer_handler+0x1dc>)
{
 8015b62:	b083      	sub	sp, #12
    if(already_running) {
 8015b64:	781b      	ldrb	r3, [r3, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d000      	beq.n	8015b6c <lv_timer_handler+0x18>
 8015b6a:	e0ca      	b.n	8015d02 <lv_timer_handler+0x1ae>
    already_running = true;
 8015b6c:	4a70      	ldr	r2, [pc, #448]	; (8015d30 <lv_timer_handler+0x1dc>)
 8015b6e:	3301      	adds	r3, #1
 8015b70:	7013      	strb	r3, [r2, #0]
    if(lv_timer_run == false) {
 8015b72:	4b70      	ldr	r3, [pc, #448]	; (8015d34 <lv_timer_handler+0x1e0>)
 8015b74:	781b      	ldrb	r3, [r3, #0]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d109      	bne.n	8015b8e <lv_timer_handler+0x3a>
        return 1;
 8015b7a:	2501      	movs	r5, #1
        already_running = false; /*Release mutex*/
 8015b7c:	7013      	strb	r3, [r2, #0]
}
 8015b7e:	0028      	movs	r0, r5
 8015b80:	b003      	add	sp, #12
 8015b82:	bcf0      	pop	{r4, r5, r6, r7}
 8015b84:	46bb      	mov	fp, r7
 8015b86:	46b2      	mov	sl, r6
 8015b88:	46a9      	mov	r9, r5
 8015b8a:	46a0      	mov	r8, r4
 8015b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t handler_start = lv_tick_get();
 8015b8e:	f7fe f81d 	bl	8013bcc <lv_tick_get>
 8015b92:	9001      	str	r0, [sp, #4]
    if(handler_start == 0) {
 8015b94:	2800      	cmp	r0, #0
 8015b96:	d100      	bne.n	8015b9a <lv_timer_handler+0x46>
 8015b98:	e0b7      	b.n	8015d0a <lv_timer_handler+0x1b6>
 8015b9a:	4b67      	ldr	r3, [pc, #412]	; (8015d38 <lv_timer_handler+0x1e4>)
 8015b9c:	4f67      	ldr	r7, [pc, #412]	; (8015d3c <lv_timer_handler+0x1e8>)
 8015b9e:	4698      	mov	r8, r3
 8015ba0:	4b67      	ldr	r3, [pc, #412]	; (8015d40 <lv_timer_handler+0x1ec>)
 8015ba2:	4e68      	ldr	r6, [pc, #416]	; (8015d44 <lv_timer_handler+0x1f0>)
 8015ba4:	469b      	mov	fp, r3
 * @param timer pointer to lv_timer
 * @return true: execute, false: not executed
 */
static bool lv_timer_exec(lv_timer_t * timer)
{
    if(timer->paused) return false;
 8015ba6:	2301      	movs	r3, #1
 8015ba8:	4699      	mov	r9, r3
        timer_deleted             = false;
 8015baa:	2300      	movs	r3, #0
 8015bac:	4642      	mov	r2, r8
 8015bae:	7013      	strb	r3, [r2, #0]
        timer_created             = false;
 8015bb0:	465a      	mov	r2, fp
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8015bb2:	0038      	movs	r0, r7
        timer_created             = false;
 8015bb4:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8015bb6:	f7ff f8b3 	bl	8014d20 <_lv_ll_get_head>
 8015bba:	0004      	movs	r4, r0
 8015bbc:	6034      	str	r4, [r6, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8015bbe:	2c00      	cmp	r4, #0
 8015bc0:	d023      	beq.n	8015c0a <lv_timer_handler+0xb6>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8015bc2:	0021      	movs	r1, r4
 8015bc4:	0038      	movs	r0, r7
 8015bc6:	f7ff f8b7 	bl	8014d38 <_lv_ll_get_next>
    if(timer->paused) return false;
 8015bca:	464a      	mov	r2, r9
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 8015bcc:	6835      	ldr	r5, [r6, #0]
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8015bce:	0004      	movs	r4, r0
    if(timer->paused) return false;
 8015bd0:	7d2b      	ldrb	r3, [r5, #20]
 8015bd2:	421a      	tst	r2, r3
 8015bd4:	d1f2      	bne.n	8015bbc <lv_timer_handler+0x68>
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8015bd6:	6868      	ldr	r0, [r5, #4]
 8015bd8:	f7fe f806 	bl	8013be8 <lv_tick_elaps>
    if(elp >= timer->period)
 8015bdc:	682b      	ldr	r3, [r5, #0]
 8015bde:	4298      	cmp	r0, r3
 8015be0:	d25e      	bcs.n	8015ca0 <lv_timer_handler+0x14c>
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 8015be2:	4643      	mov	r3, r8
 8015be4:	781b      	ldrb	r3, [r3, #0]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d1e8      	bne.n	8015bbc <lv_timer_handler+0x68>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8015bea:	692b      	ldr	r3, [r5, #16]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d1e5      	bne.n	8015bbc <lv_timer_handler+0x68>
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 8015bf0:	0029      	movs	r1, r5
 8015bf2:	0038      	movs	r0, r7
 8015bf4:	f7ff f86a 	bl	8014ccc <_lv_ll_remove>
    timer_deleted = true;
 8015bf8:	4643      	mov	r3, r8
 8015bfa:	464a      	mov	r2, r9
    lv_mem_free(timer);
 8015bfc:	0028      	movs	r0, r5
    timer_deleted = true;
 8015bfe:	701a      	strb	r2, [r3, #0]
    lv_mem_free(timer);
 8015c00:	f7ff f960 	bl	8014ec4 <lv_mem_free>
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8015c04:	6034      	str	r4, [r6, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8015c06:	2c00      	cmp	r4, #0
 8015c08:	d1db      	bne.n	8015bc2 <lv_timer_handler+0x6e>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8015c0a:	0038      	movs	r0, r7
 8015c0c:	f7ff f888 	bl	8014d20 <_lv_ll_get_head>
    uint32_t time_till_next = LV_NO_TIMER_READY;
 8015c10:	2501      	movs	r5, #1
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8015c12:	0004      	movs	r4, r0
        if(!next->paused) {
 8015c14:	2601      	movs	r6, #1
    uint32_t time_till_next = LV_NO_TIMER_READY;
 8015c16:	426d      	negs	r5, r5
    while(next) {
 8015c18:	2800      	cmp	r0, #0
 8015c1a:	d106      	bne.n	8015c2a <lv_timer_handler+0xd6>
 8015c1c:	e018      	b.n	8015c50 <lv_timer_handler+0xfc>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8015c1e:	0021      	movs	r1, r4
 8015c20:	0038      	movs	r0, r7
 8015c22:	f7ff f889 	bl	8014d38 <_lv_ll_get_next>
 8015c26:	1e04      	subs	r4, r0, #0
    while(next) {
 8015c28:	d012      	beq.n	8015c50 <lv_timer_handler+0xfc>
        if(!next->paused) {
 8015c2a:	7d23      	ldrb	r3, [r4, #20]
 8015c2c:	421e      	tst	r6, r3
 8015c2e:	d1f6      	bne.n	8015c1e <lv_timer_handler+0xca>
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8015c30:	6860      	ldr	r0, [r4, #4]
 8015c32:	f7fd ffd9 	bl	8013be8 <lv_tick_elaps>
    if(elp >= timer->period)
 8015c36:	6823      	ldr	r3, [r4, #0]
 8015c38:	4298      	cmp	r0, r3
 8015c3a:	d264      	bcs.n	8015d06 <lv_timer_handler+0x1b2>
        return 0;
    return timer->period - elp;
 8015c3c:	1a18      	subs	r0, r3, r0
 8015c3e:	4285      	cmp	r5, r0
 8015c40:	d9ed      	bls.n	8015c1e <lv_timer_handler+0xca>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8015c42:	0021      	movs	r1, r4
 8015c44:	0005      	movs	r5, r0
 8015c46:	0038      	movs	r0, r7
 8015c48:	f7ff f876 	bl	8014d38 <_lv_ll_get_next>
 8015c4c:	1e04      	subs	r4, r0, #0
    while(next) {
 8015c4e:	d1ec      	bne.n	8015c2a <lv_timer_handler+0xd6>
    busy_time += lv_tick_elaps(handler_start);
 8015c50:	9801      	ldr	r0, [sp, #4]
 8015c52:	f7fd ffc9 	bl	8013be8 <lv_tick_elaps>
 8015c56:	4c3c      	ldr	r4, [pc, #240]	; (8015d48 <lv_timer_handler+0x1f4>)
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8015c58:	4e3c      	ldr	r6, [pc, #240]	; (8015d4c <lv_timer_handler+0x1f8>)
    busy_time += lv_tick_elaps(handler_start);
 8015c5a:	6823      	ldr	r3, [r4, #0]
 8015c5c:	469c      	mov	ip, r3
 8015c5e:	4460      	add	r0, ip
 8015c60:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8015c62:	6830      	ldr	r0, [r6, #0]
 8015c64:	f7fd ffc0 	bl	8013be8 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8015c68:	23fa      	movs	r3, #250	; 0xfa
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8015c6a:	0001      	movs	r1, r0
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8015c6c:	005b      	lsls	r3, r3, #1
 8015c6e:	4298      	cmp	r0, r3
 8015c70:	d312      	bcc.n	8015c98 <lv_timer_handler+0x144>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 8015c72:	2064      	movs	r0, #100	; 0x64
 8015c74:	6823      	ldr	r3, [r4, #0]
 8015c76:	4358      	muls	r0, r3
 8015c78:	f7ea fa56 	bl	8000128 <__udivsi3>
 8015c7c:	b2c0      	uxtb	r0, r0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8015c7e:	2300      	movs	r3, #0
 8015c80:	2864      	cmp	r0, #100	; 0x64
 8015c82:	d802      	bhi.n	8015c8a <lv_timer_handler+0x136>
 8015c84:	2364      	movs	r3, #100	; 0x64
 8015c86:	1a1b      	subs	r3, r3, r0
 8015c88:	b2db      	uxtb	r3, r3
 8015c8a:	4a31      	ldr	r2, [pc, #196]	; (8015d50 <lv_timer_handler+0x1fc>)
 8015c8c:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 8015c92:	f7fd ff9b 	bl	8013bcc <lv_tick_get>
 8015c96:	6030      	str	r0, [r6, #0]
    already_running = false; /*Release the mutex*/
 8015c98:	2300      	movs	r3, #0
 8015c9a:	4a25      	ldr	r2, [pc, #148]	; (8015d30 <lv_timer_handler+0x1dc>)
 8015c9c:	7013      	strb	r3, [r2, #0]
    return time_till_next;
 8015c9e:	e76e      	b.n	8015b7e <lv_timer_handler+0x2a>
        int32_t original_repeat_count = timer->repeat_count;
 8015ca0:	692b      	ldr	r3, [r5, #16]
 8015ca2:	469a      	mov	sl, r3
        if(timer->repeat_count > 0) timer->repeat_count--;
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	dd12      	ble.n	8015cce <lv_timer_handler+0x17a>
 8015ca8:	3b01      	subs	r3, #1
 8015caa:	612b      	str	r3, [r5, #16]
        timer->last_run = lv_tick_get();
 8015cac:	f7fd ff8e 	bl	8013bcc <lv_tick_get>
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8015cb0:	68ab      	ldr	r3, [r5, #8]
        timer->last_run = lv_tick_get();
 8015cb2:	6068      	str	r0, [r5, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d013      	beq.n	8015ce0 <lv_timer_handler+0x18c>
 8015cb8:	0028      	movs	r0, r5
 8015cba:	4798      	blx	r3
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 8015cbc:	4643      	mov	r3, r8
 8015cbe:	781b      	ldrb	r3, [r3, #0]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d011      	beq.n	8015ce8 <lv_timer_handler+0x194>
    } while(LV_GC_ROOT(_lv_timer_act));
 8015cc4:	6833      	ldr	r3, [r6, #0]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d000      	beq.n	8015ccc <lv_timer_handler+0x178>
 8015cca:	e76e      	b.n	8015baa <lv_timer_handler+0x56>
 8015ccc:	e79d      	b.n	8015c0a <lv_timer_handler+0xb6>
        timer->last_run = lv_tick_get();
 8015cce:	f7fd ff7d 	bl	8013bcc <lv_tick_get>
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8015cd2:	68ab      	ldr	r3, [r5, #8]
        timer->last_run = lv_tick_get();
 8015cd4:	6068      	str	r0, [r5, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d002      	beq.n	8015ce0 <lv_timer_handler+0x18c>
 8015cda:	4652      	mov	r2, sl
 8015cdc:	2a00      	cmp	r2, #0
 8015cde:	d1eb      	bne.n	8015cb8 <lv_timer_handler+0x164>
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 8015ce0:	4643      	mov	r3, r8
 8015ce2:	781b      	ldrb	r3, [r3, #0]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d1ed      	bne.n	8015cc4 <lv_timer_handler+0x170>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8015ce8:	692b      	ldr	r3, [r5, #16]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d015      	beq.n	8015d1a <lv_timer_handler+0x1c6>
                if(timer_created || timer_deleted) {
 8015cee:	465b      	mov	r3, fp
 8015cf0:	781b      	ldrb	r3, [r3, #0]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d1e6      	bne.n	8015cc4 <lv_timer_handler+0x170>
 8015cf6:	4643      	mov	r3, r8
 8015cf8:	781b      	ldrb	r3, [r3, #0]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d100      	bne.n	8015d00 <lv_timer_handler+0x1ac>
 8015cfe:	e75d      	b.n	8015bbc <lv_timer_handler+0x68>
 8015d00:	e7e0      	b.n	8015cc4 <lv_timer_handler+0x170>
        return 1;
 8015d02:	2501      	movs	r5, #1
 8015d04:	e73b      	b.n	8015b7e <lv_timer_handler+0x2a>
 8015d06:	2500      	movs	r5, #0
            if(delay < time_till_next)
 8015d08:	e789      	b.n	8015c1e <lv_timer_handler+0xca>
        run_cnt++;
 8015d0a:	4a12      	ldr	r2, [pc, #72]	; (8015d54 <lv_timer_handler+0x200>)
 8015d0c:	6813      	ldr	r3, [r2, #0]
 8015d0e:	3301      	adds	r3, #1
        if(run_cnt > 100) {
 8015d10:	2b64      	cmp	r3, #100	; 0x64
 8015d12:	d900      	bls.n	8015d16 <lv_timer_handler+0x1c2>
            run_cnt = 0;
 8015d14:	9b01      	ldr	r3, [sp, #4]
 8015d16:	6013      	str	r3, [r2, #0]
 8015d18:	e73f      	b.n	8015b9a <lv_timer_handler+0x46>
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 8015d1a:	0038      	movs	r0, r7
 8015d1c:	0029      	movs	r1, r5
 8015d1e:	f7fe ffd5 	bl	8014ccc <_lv_ll_remove>
    timer_deleted = true;
 8015d22:	4643      	mov	r3, r8
 8015d24:	464a      	mov	r2, r9
    lv_mem_free(timer);
 8015d26:	0028      	movs	r0, r5
    timer_deleted = true;
 8015d28:	701a      	strb	r2, [r3, #0]
    lv_mem_free(timer);
 8015d2a:	f7ff f8cb 	bl	8014ec4 <lv_mem_free>
 8015d2e:	e7de      	b.n	8015cee <lv_timer_handler+0x19a>
 8015d30:	20004eec 	.word	0x20004eec
 8015d34:	20004efc 	.word	0x20004efc
 8015d38:	20004f05 	.word	0x20004f05
 8015d3c:	20000650 	.word	0x20000650
 8015d40:	20004f04 	.word	0x20004f04
 8015d44:	2000064c 	.word	0x2000064c
 8015d48:	20004ef0 	.word	0x20004ef0
 8015d4c:	20004ef8 	.word	0x20004ef8
 8015d50:	20004ef4 	.word	0x20004ef4
 8015d54:	20004f00 	.word	0x20004f00

08015d58 <lv_timer_create>:
{
 8015d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d5a:	0005      	movs	r5, r0
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8015d5c:	480c      	ldr	r0, [pc, #48]	; (8015d90 <lv_timer_create+0x38>)
{
 8015d5e:	000e      	movs	r6, r1
 8015d60:	0017      	movs	r7, r2
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8015d62:	f7fe ff83 	bl	8014c6c <_lv_ll_ins_head>
 8015d66:	1e04      	subs	r4, r0, #0
    LV_ASSERT_MALLOC(new_timer);
 8015d68:	d010      	beq.n	8015d8c <lv_timer_create+0x34>
    new_timer->repeat_count = -1;
 8015d6a:	2301      	movs	r3, #1
    new_timer->timer_cb = timer_xcb;
 8015d6c:	6085      	str	r5, [r0, #8]
    new_timer->paused = 0;
 8015d6e:	2501      	movs	r5, #1
    new_timer->repeat_count = -1;
 8015d70:	425b      	negs	r3, r3
 8015d72:	6103      	str	r3, [r0, #16]
    new_timer->paused = 0;
 8015d74:	7d03      	ldrb	r3, [r0, #20]
    new_timer->period = period;
 8015d76:	6006      	str	r6, [r0, #0]
    new_timer->paused = 0;
 8015d78:	43ab      	bics	r3, r5
 8015d7a:	7503      	strb	r3, [r0, #20]
    new_timer->last_run = lv_tick_get();
 8015d7c:	f7fd ff26 	bl	8013bcc <lv_tick_get>
    timer_created = true;
 8015d80:	4b04      	ldr	r3, [pc, #16]	; (8015d94 <lv_timer_create+0x3c>)
    new_timer->last_run = lv_tick_get();
 8015d82:	6060      	str	r0, [r4, #4]
    new_timer->user_data = user_data;
 8015d84:	60e7      	str	r7, [r4, #12]
}
 8015d86:	0020      	movs	r0, r4
    timer_created = true;
 8015d88:	701d      	strb	r5, [r3, #0]
}
 8015d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(new_timer);
 8015d8c:	e7fe      	b.n	8015d8c <lv_timer_create+0x34>
 8015d8e:	46c0      	nop			; (mov r8, r8)
 8015d90:	20000650 	.word	0x20000650
 8015d94:	20004f04 	.word	0x20004f04

08015d98 <lv_timer_pause>:
    timer->paused = true;
 8015d98:	2201      	movs	r2, #1
 8015d9a:	7d03      	ldrb	r3, [r0, #20]
 8015d9c:	4313      	orrs	r3, r2
 8015d9e:	7503      	strb	r3, [r0, #20]
}
 8015da0:	4770      	bx	lr
 8015da2:	46c0      	nop			; (mov r8, r8)

08015da4 <lv_timer_resume>:
    timer->paused = false;
 8015da4:	2201      	movs	r2, #1
 8015da6:	7d03      	ldrb	r3, [r0, #20]
 8015da8:	4393      	bics	r3, r2
 8015daa:	7503      	strb	r3, [r0, #20]
}
 8015dac:	4770      	bx	lr
 8015dae:	46c0      	nop			; (mov r8, r8)

08015db0 <lv_timer_ready>:
{
 8015db0:	b510      	push	{r4, lr}
 8015db2:	0004      	movs	r4, r0
    timer->last_run = lv_tick_get() - timer->period - 1;
 8015db4:	f7fd ff0a 	bl	8013bcc <lv_tick_get>
 8015db8:	6823      	ldr	r3, [r4, #0]
 8015dba:	43db      	mvns	r3, r3
 8015dbc:	181b      	adds	r3, r3, r0
 8015dbe:	6063      	str	r3, [r4, #4]
}
 8015dc0:	bd10      	pop	{r4, pc}
 8015dc2:	46c0      	nop			; (mov r8, r8)

08015dc4 <block_split>:
                     tlsf_cast(unsigned char *, ptr) - block_start_offset);
}

static void * block_to_ptr(const block_header_t * block)
{
    return tlsf_cast(void *,
 8015dc4:	1843      	adds	r3, r0, r1
    return block_size(block) >= sizeof(block_header_t) + size;
}

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 8015dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
    return tlsf_cast(void *,
 8015dc8:	001c      	movs	r4, r3
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8015dca:	2203      	movs	r2, #3
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8015dcc:	1d1d      	adds	r5, r3, #4
    return tlsf_cast(void *,
 8015dce:	340c      	adds	r4, #12
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8015dd0:	330f      	adds	r3, #15
 8015dd2:	4393      	bics	r3, r2
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);

    const size_t remain_size = block_size(block) - (size + block_header_overhead);

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 8015dd4:	429c      	cmp	r4, r3
 8015dd6:	d000      	beq.n	8015dda <block_split+0x16>
 8015dd8:	e7fe      	b.n	8015dd8 <block_split+0x14>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015dda:	6843      	ldr	r3, [r0, #4]
 8015ddc:	4393      	bics	r3, r2
    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 8015dde:	1a5e      	subs	r6, r3, r1
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 8015de0:	1f37      	subs	r7, r6, #4
 8015de2:	198e      	adds	r6, r1, r6
 8015de4:	429e      	cmp	r6, r3
 8015de6:	d000      	beq.n	8015dea <block_split+0x26>
 8015de8:	e7fe      	b.n	8015de8 <block_split+0x24>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8015dea:	686b      	ldr	r3, [r5, #4]
 8015dec:	4013      	ands	r3, r2
 8015dee:	433b      	orrs	r3, r7
 8015df0:	606b      	str	r3, [r5, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015df2:	4393      	bics	r3, r2
    block_set_size(remaining, remain_size);
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8015df4:	2b0b      	cmp	r3, #11
 8015df6:	d907      	bls.n	8015e08 <block_split+0x44>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8015df8:	6843      	ldr	r3, [r0, #4]
 8015dfa:	4013      	ands	r3, r2
 8015dfc:	4319      	orrs	r1, r3
 8015dfe:	6041      	str	r1, [r0, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015e00:	686b      	ldr	r3, [r5, #4]
 8015e02:	4393      	bics	r3, r2
    tlsf_assert(!block_is_last(block));
 8015e04:	d101      	bne.n	8015e0a <block_split+0x46>
 8015e06:	e7fe      	b.n	8015e06 <block_split+0x42>
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8015e08:	e7fe      	b.n	8015e08 <block_split+0x44>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8015e0a:	18e4      	adds	r4, r4, r3
    block->size |= block_header_prev_free_bit;
 8015e0c:	2302      	movs	r3, #2
 8015e0e:	6822      	ldr	r2, [r4, #0]
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8015e10:	3c04      	subs	r4, #4
    block->size |= block_header_prev_free_bit;
 8015e12:	4313      	orrs	r3, r2
 8015e14:	6063      	str	r3, [r4, #4]
    block->size |= block_header_free_bit;
 8015e16:	2301      	movs	r3, #1
 8015e18:	686a      	ldr	r2, [r5, #4]

    block_set_size(block, size);
    block_mark_as_free(remaining);

    return remaining;
}
 8015e1a:	0028      	movs	r0, r5
    block->size |= block_header_free_bit;
 8015e1c:	4313      	orrs	r3, r2
    next->prev_phys_block = block;
 8015e1e:	6025      	str	r5, [r4, #0]
    block->size |= block_header_free_bit;
 8015e20:	606b      	str	r3, [r5, #4]
}
 8015e22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015e24 <block_insert>:
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015e24:	2303      	movs	r3, #3
{
 8015e26:	b570      	push	{r4, r5, r6, lr}
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015e28:	684c      	ldr	r4, [r1, #4]
{
 8015e2a:	0006      	movs	r6, r0
 8015e2c:	000d      	movs	r5, r1
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015e2e:	439c      	bics	r4, r3
    if(size < SMALL_BLOCK_SIZE) {
 8015e30:	2c7f      	cmp	r4, #127	; 0x7f
 8015e32:	d809      	bhi.n	8015e48 <block_insert+0x24>
        fl = 0;
 8015e34:	2200      	movs	r2, #0
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8015e36:	10a4      	asrs	r4, r4, #2
    block_header_t * current = control->blocks[fl][sl];
 8015e38:	0153      	lsls	r3, r2, #5
 8015e3a:	191b      	adds	r3, r3, r4
 8015e3c:	009b      	lsls	r3, r3, #2
 8015e3e:	18f3      	adds	r3, r6, r3
 8015e40:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tlsf_assert(current && "free list cannot have a null entry");
 8015e42:	2900      	cmp	r1, #0
 8015e44:	d111      	bne.n	8015e6a <block_insert+0x46>
 8015e46:	e7fe      	b.n	8015e46 <block_insert+0x22>
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8015e48:	0020      	movs	r0, r4
 8015e4a:	f7ea fae3 	bl	8000414 <__clzsi2>
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8015e4e:	231a      	movs	r3, #26
        fl -= (FL_INDEX_SHIFT - 1);
 8015e50:	2219      	movs	r2, #25
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8015e52:	1a1b      	subs	r3, r3, r0
 8015e54:	40dc      	lsrs	r4, r3
 8015e56:	2320      	movs	r3, #32
        fl -= (FL_INDEX_SHIFT - 1);
 8015e58:	1a12      	subs	r2, r2, r0
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8015e5a:	405c      	eors	r4, r3
    block_header_t * current = control->blocks[fl][sl];
 8015e5c:	0153      	lsls	r3, r2, #5
 8015e5e:	191b      	adds	r3, r3, r4
 8015e60:	009b      	lsls	r3, r3, #2
 8015e62:	18f3      	adds	r3, r6, r3
 8015e64:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tlsf_assert(current && "free list cannot have a null entry");
 8015e66:	2900      	cmp	r1, #0
 8015e68:	d0ed      	beq.n	8015e46 <block_insert+0x22>
    block->next_free = current;
 8015e6a:	60a9      	str	r1, [r5, #8]
    block->prev_free = &control->block_null;
 8015e6c:	60ee      	str	r6, [r5, #12]
    current->prev_free = block;
 8015e6e:	60cd      	str	r5, [r1, #12]
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8015e70:	0029      	movs	r1, r5
 8015e72:	2003      	movs	r0, #3
 8015e74:	310b      	adds	r1, #11
 8015e76:	4381      	bics	r1, r0
    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8015e78:	0028      	movs	r0, r5
 8015e7a:	3008      	adds	r0, #8
 8015e7c:	4288      	cmp	r0, r1
 8015e7e:	d000      	beq.n	8015e82 <block_insert+0x5e>
 8015e80:	e7fe      	b.n	8015e80 <block_insert+0x5c>
    control->blocks[fl][sl] = block;
 8015e82:	639d      	str	r5, [r3, #56]	; 0x38
    control->fl_bitmap |= (1U << fl);
 8015e84:	2301      	movs	r3, #1
 8015e86:	0019      	movs	r1, r3
 8015e88:	4091      	lsls	r1, r2
    control->sl_bitmap[fl] |= (1U << sl);
 8015e8a:	40a3      	lsls	r3, r4
    control->fl_bitmap |= (1U << fl);
 8015e8c:	6930      	ldr	r0, [r6, #16]
 8015e8e:	0092      	lsls	r2, r2, #2
 8015e90:	4301      	orrs	r1, r0
 8015e92:	6131      	str	r1, [r6, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 8015e94:	18b6      	adds	r6, r6, r2
 8015e96:	6972      	ldr	r2, [r6, #20]
 8015e98:	4313      	orrs	r3, r2
 8015e9a:	6173      	str	r3, [r6, #20]
}
 8015e9c:	bd70      	pop	{r4, r5, r6, pc}
 8015e9e:	46c0      	nop			; (mov r8, r8)

08015ea0 <block_prepare_used.part.0>:
    }

    return block;
}

static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
 8015ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return tlsf_cast(int, block->size & block_header_free_bit);
 8015ea2:	684b      	ldr	r3, [r1, #4]
static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
 8015ea4:	0005      	movs	r5, r0
 8015ea6:	000c      	movs	r4, r1
    tlsf_assert(block_is_free(block) && "block must be free");
 8015ea8:	07d9      	lsls	r1, r3, #31
 8015eaa:	d514      	bpl.n	8015ed6 <block_prepare_used.part.0+0x36>
    return block_size(block) >= sizeof(block_header_t) + size;
 8015eac:	0011      	movs	r1, r2
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015eae:	2603      	movs	r6, #3
    return block_size(block) >= sizeof(block_header_t) + size;
 8015eb0:	3110      	adds	r1, #16
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015eb2:	43b3      	bics	r3, r6
    if(block_can_split(block, size)) {
 8015eb4:	428b      	cmp	r3, r1
 8015eb6:	d210      	bcs.n	8015eda <block_prepare_used.part.0+0x3a>
    return tlsf_cast(void *,
 8015eb8:	0027      	movs	r7, r4
 8015eba:	3708      	adds	r7, #8
    tlsf_assert(!block_is_last(block));
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d00b      	beq.n	8015ed8 <block_prepare_used.part.0+0x38>
    block->size &= ~block_header_prev_free_bit;
 8015ec0:	2202      	movs	r2, #2
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8015ec2:	18fb      	adds	r3, r7, r3
    block->size &= ~block_header_prev_free_bit;
 8015ec4:	6819      	ldr	r1, [r3, #0]
        block_trim_free(control, block, size);
        block_mark_as_used(block);
        p = block_to_ptr(block);
    }
    return p;
}
 8015ec6:	0038      	movs	r0, r7
    block->size &= ~block_header_prev_free_bit;
 8015ec8:	4391      	bics	r1, r2
 8015eca:	6019      	str	r1, [r3, #0]
    block->size &= ~block_header_free_bit;
 8015ecc:	2301      	movs	r3, #1
 8015ece:	6862      	ldr	r2, [r4, #4]
 8015ed0:	439a      	bics	r2, r3
 8015ed2:	6062      	str	r2, [r4, #4]
}
 8015ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tlsf_assert(block_is_free(block) && "block must be free");
 8015ed6:	e7fe      	b.n	8015ed6 <block_prepare_used.part.0+0x36>
    tlsf_assert(!block_is_last(block));
 8015ed8:	e7fe      	b.n	8015ed8 <block_prepare_used.part.0+0x38>
        block_header_t * remaining_block = block_split(block, size);
 8015eda:	0011      	movs	r1, r2
 8015edc:	0020      	movs	r0, r4
 8015ede:	f7ff ff71 	bl	8015dc4 <block_split>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015ee2:	6863      	ldr	r3, [r4, #4]
        block_header_t * remaining_block = block_split(block, size);
 8015ee4:	0001      	movs	r1, r0
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015ee6:	43b3      	bics	r3, r6
    tlsf_assert(!block_is_last(block));
 8015ee8:	d00e      	beq.n	8015f08 <block_prepare_used.part.0+0x68>
    return tlsf_cast(void *,
 8015eea:	0027      	movs	r7, r4
 8015eec:	3708      	adds	r7, #8
    next->prev_phys_block = block;
 8015eee:	19db      	adds	r3, r3, r7
 8015ef0:	3b04      	subs	r3, #4
 8015ef2:	601c      	str	r4, [r3, #0]
    block->size |= block_header_prev_free_bit;
 8015ef4:	2302      	movs	r3, #2
 8015ef6:	6842      	ldr	r2, [r0, #4]
 8015ef8:	4313      	orrs	r3, r2
 8015efa:	6043      	str	r3, [r0, #4]
        block_insert(control, remaining_block);
 8015efc:	0028      	movs	r0, r5
 8015efe:	f7ff ff91 	bl	8015e24 <block_insert>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015f02:	6863      	ldr	r3, [r4, #4]
 8015f04:	43b3      	bics	r3, r6
 8015f06:	e7d9      	b.n	8015ebc <block_prepare_used.part.0+0x1c>
    tlsf_assert(!block_is_last(block));
 8015f08:	e7fe      	b.n	8015f08 <block_prepare_used.part.0+0x68>
 8015f0a:	46c0      	nop			; (mov r8, r8)

08015f0c <block_merge_next>:
{
 8015f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015f0e:	684d      	ldr	r5, [r1, #4]
{
 8015f10:	4647      	mov	r7, r8
 8015f12:	46ce      	mov	lr, r9
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015f14:	2203      	movs	r2, #3
 8015f16:	002b      	movs	r3, r5
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	000c      	movs	r4, r1
 8015f1c:	0007      	movs	r7, r0
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015f1e:	4393      	bics	r3, r2
    tlsf_assert(!block_is_last(block));
 8015f20:	d007      	beq.n	8015f32 <block_merge_next+0x26>
    return tlsf_cast(void *,
 8015f22:	000e      	movs	r6, r1
 8015f24:	3608      	adds	r6, #8
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8015f26:	199b      	adds	r3, r3, r6
 8015f28:	1f19      	subs	r1, r3, #4
 8015f2a:	4688      	mov	r8, r1
    tlsf_assert(next && "next physical block can't be null");
 8015f2c:	2b04      	cmp	r3, #4
 8015f2e:	d101      	bne.n	8015f34 <block_merge_next+0x28>
 8015f30:	e7fe      	b.n	8015f30 <block_merge_next+0x24>
    tlsf_assert(!block_is_last(block));
 8015f32:	e7fe      	b.n	8015f32 <block_merge_next+0x26>
    return tlsf_cast(int, block->size & block_header_free_bit);
 8015f34:	684b      	ldr	r3, [r1, #4]
    if(block_is_free(next)) {
 8015f36:	07d9      	lsls	r1, r3, #31
 8015f38:	d404      	bmi.n	8015f44 <block_merge_next+0x38>
}
 8015f3a:	0020      	movs	r0, r4
 8015f3c:	bcc0      	pop	{r6, r7}
 8015f3e:	46b9      	mov	r9, r7
 8015f40:	46b0      	mov	r8, r6
 8015f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015f44:	4393      	bics	r3, r2
 8015f46:	4699      	mov	r9, r3
    if(size < SMALL_BLOCK_SIZE) {
 8015f48:	2b7f      	cmp	r3, #127	; 0x7f
 8015f4a:	d92a      	bls.n	8015fa2 <block_merge_next+0x96>
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8015f4c:	0018      	movs	r0, r3
 8015f4e:	f7ea fa61 	bl	8000414 <__clzsi2>
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8015f52:	231a      	movs	r3, #26
 8015f54:	4649      	mov	r1, r9
 8015f56:	1a1b      	subs	r3, r3, r0
 8015f58:	40d9      	lsrs	r1, r3
        fl -= (FL_INDEX_SHIFT - 1);
 8015f5a:	2219      	movs	r2, #25
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8015f5c:	2320      	movs	r3, #32
 8015f5e:	4059      	eors	r1, r3
        fl -= (FL_INDEX_SHIFT - 1);
 8015f60:	1a13      	subs	r3, r2, r0
 8015f62:	469c      	mov	ip, r3
    block_header_t * prev = block->prev_free;
 8015f64:	4643      	mov	r3, r8
 8015f66:	68db      	ldr	r3, [r3, #12]
    tlsf_assert(prev && "prev_free field can not be null");
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d017      	beq.n	8015f9c <block_merge_next+0x90>
    block_header_t * next = block->next_free;
 8015f6c:	4642      	mov	r2, r8
 8015f6e:	6890      	ldr	r0, [r2, #8]
    tlsf_assert(next && "next_free field can not be null");
 8015f70:	2800      	cmp	r0, #0
 8015f72:	d014      	beq.n	8015f9e <block_merge_next+0x92>
    next->prev_free = prev;
 8015f74:	60c3      	str	r3, [r0, #12]
    prev->next_free = next;
 8015f76:	6098      	str	r0, [r3, #8]
    if(control->blocks[fl][sl] == block) {
 8015f78:	4663      	mov	r3, ip
 8015f7a:	015b      	lsls	r3, r3, #5
 8015f7c:	185b      	adds	r3, r3, r1
 8015f7e:	009b      	lsls	r3, r3, #2
 8015f80:	18fb      	adds	r3, r7, r3
 8015f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015f84:	4542      	cmp	r2, r8
 8015f86:	d010      	beq.n	8015faa <block_merge_next+0x9e>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015f88:	2203      	movs	r2, #3
    prev->size += block_size(block) + block_header_overhead;
 8015f8a:	1d2b      	adds	r3, r5, #4
 8015f8c:	444b      	add	r3, r9
 8015f8e:	6063      	str	r3, [r4, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8015f90:	4393      	bics	r3, r2
    tlsf_assert(!block_is_last(block));
 8015f92:	d005      	beq.n	8015fa0 <block_merge_next+0x94>
    next->prev_phys_block = block;
 8015f94:	18f3      	adds	r3, r6, r3
 8015f96:	3b04      	subs	r3, #4
 8015f98:	601c      	str	r4, [r3, #0]
    return prev;
 8015f9a:	e7ce      	b.n	8015f3a <block_merge_next+0x2e>
    tlsf_assert(prev && "prev_free field can not be null");
 8015f9c:	e7fe      	b.n	8015f9c <block_merge_next+0x90>
    tlsf_assert(next && "next_free field can not be null");
 8015f9e:	e7fe      	b.n	8015f9e <block_merge_next+0x92>
    tlsf_assert(!block_is_last(block));
 8015fa0:	e7fe      	b.n	8015fa0 <block_merge_next+0x94>
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8015fa2:	1099      	asrs	r1, r3, #2
        fl = 0;
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	469c      	mov	ip, r3
 8015fa8:	e7dc      	b.n	8015f64 <block_merge_next+0x58>
        control->blocks[fl][sl] = next;
 8015faa:	6398      	str	r0, [r3, #56]	; 0x38
        if(next == &control->block_null) {
 8015fac:	42b8      	cmp	r0, r7
 8015fae:	d1eb      	bne.n	8015f88 <block_merge_next+0x7c>
            control->sl_bitmap[fl] &= ~(1U << sl);
 8015fb0:	4663      	mov	r3, ip
 8015fb2:	0098      	lsls	r0, r3, #2
 8015fb4:	2301      	movs	r3, #1
 8015fb6:	001a      	movs	r2, r3
 8015fb8:	408a      	lsls	r2, r1
 8015fba:	0011      	movs	r1, r2
 8015fbc:	1838      	adds	r0, r7, r0
 8015fbe:	6942      	ldr	r2, [r0, #20]
 8015fc0:	438a      	bics	r2, r1
 8015fc2:	6142      	str	r2, [r0, #20]
            if(!control->sl_bitmap[fl]) {
 8015fc4:	d1e0      	bne.n	8015f88 <block_merge_next+0x7c>
                control->fl_bitmap &= ~(1U << fl);
 8015fc6:	4662      	mov	r2, ip
 8015fc8:	4093      	lsls	r3, r2
 8015fca:	693a      	ldr	r2, [r7, #16]
 8015fcc:	439a      	bics	r2, r3
 8015fce:	613a      	str	r2, [r7, #16]
}
 8015fd0:	e7da      	b.n	8015f88 <block_merge_next+0x7c>
 8015fd2:	46c0      	nop			; (mov r8, r8)

08015fd4 <lv_tlsf_create_with_pool>:
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8015fd4:	2303      	movs	r3, #3

    return tlsf_cast(lv_tlsf_t, mem);
}

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 8015fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8015fd8:	001a      	movs	r2, r3
{
 8015fda:	464f      	mov	r7, r9
 8015fdc:	46d6      	mov	lr, sl
 8015fde:	4646      	mov	r6, r8
 8015fe0:	0004      	movs	r4, r0
 8015fe2:	4689      	mov	r9, r1
 8015fe4:	b5c0      	push	{r6, r7, lr}
    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8015fe6:	4002      	ands	r2, r0
 8015fe8:	4218      	tst	r0, r3
 8015fea:	d000      	beq.n	8015fee <lv_tlsf_create_with_pool+0x1a>
 8015fec:	e083      	b.n	80160f6 <lv_tlsf_create_with_pool+0x122>
    control->fl_bitmap = 0;
 8015fee:	6102      	str	r2, [r0, #16]
        control->sl_bitmap[i] = 0;
 8015ff0:	2100      	movs	r1, #0
    control->block_null.next_free = &control->block_null;
 8015ff2:	6080      	str	r0, [r0, #8]
    control->block_null.prev_free = &control->block_null;
 8015ff4:	60c0      	str	r0, [r0, #12]
        control->sl_bitmap[i] = 0;
 8015ff6:	2224      	movs	r2, #36	; 0x24
 8015ff8:	3014      	adds	r0, #20
 8015ffa:	f005 fa8d 	bl	801b518 <memset>
 8015ffe:	2301      	movs	r3, #1
 8016000:	0020      	movs	r0, r4
 8016002:	469a      	mov	sl, r3
 8016004:	331f      	adds	r3, #31
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8016006:	2100      	movs	r1, #0
 8016008:	469c      	mov	ip, r3
 801600a:	3038      	adds	r0, #56	; 0x38
 801600c:	e030      	b.n	8016070 <lv_tlsf_create_with_pool+0x9c>
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 801600e:	2501      	movs	r5, #1
            control->blocks[i][j] = &control->block_null;
 8016010:	6004      	str	r4, [r0, #0]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8016012:	014b      	lsls	r3, r1, #5
 8016014:	001a      	movs	r2, r3
 8016016:	4666      	mov	r6, ip
 8016018:	320e      	adds	r2, #14
 801601a:	19d2      	adds	r2, r2, r7
 801601c:	0092      	lsls	r2, r2, #2
 801601e:	18a2      	adds	r2, r4, r2
            control->blocks[i][j] = &control->block_null;
 8016020:	1bf7      	subs	r7, r6, r7
 8016022:	6014      	str	r4, [r2, #0]
 8016024:	6054      	str	r4, [r2, #4]
 8016026:	6094      	str	r4, [r2, #8]
 8016028:	60d4      	str	r4, [r2, #12]
 801602a:	6114      	str	r4, [r2, #16]
 801602c:	6154      	str	r4, [r2, #20]
 801602e:	6194      	str	r4, [r2, #24]
 8016030:	61d4      	str	r4, [r2, #28]
 8016032:	6214      	str	r4, [r2, #32]
 8016034:	6254      	str	r4, [r2, #36]	; 0x24
 8016036:	6294      	str	r4, [r2, #40]	; 0x28
 8016038:	62d4      	str	r4, [r2, #44]	; 0x2c
 801603a:	6314      	str	r4, [r2, #48]	; 0x30
 801603c:	6354      	str	r4, [r2, #52]	; 0x34
 801603e:	6394      	str	r4, [r2, #56]	; 0x38
 8016040:	63d4      	str	r4, [r2, #60]	; 0x3c
 8016042:	6414      	str	r4, [r2, #64]	; 0x40
 8016044:	6454      	str	r4, [r2, #68]	; 0x44
 8016046:	6494      	str	r4, [r2, #72]	; 0x48
 8016048:	64d4      	str	r4, [r2, #76]	; 0x4c
 801604a:	6514      	str	r4, [r2, #80]	; 0x50
 801604c:	6554      	str	r4, [r2, #84]	; 0x54
 801604e:	6594      	str	r4, [r2, #88]	; 0x58
 8016050:	65d4      	str	r4, [r2, #92]	; 0x5c
 8016052:	6614      	str	r4, [r2, #96]	; 0x60
 8016054:	6654      	str	r4, [r2, #100]	; 0x64
 8016056:	6694      	str	r4, [r2, #104]	; 0x68
 8016058:	66d4      	str	r4, [r2, #108]	; 0x6c
 801605a:	6714      	str	r4, [r2, #112]	; 0x70
 801605c:	6754      	str	r4, [r2, #116]	; 0x74
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 801605e:	087e      	lsrs	r6, r7, #1
 8016060:	2e10      	cmp	r6, #16
 8016062:	d10e      	bne.n	8016082 <lv_tlsf_create_with_pool+0xae>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8016064:	3101      	adds	r1, #1
            control->blocks[i][j] = &control->block_null;
 8016066:	6794      	str	r4, [r2, #120]	; 0x78
 8016068:	67d4      	str	r4, [r2, #124]	; 0x7c
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 801606a:	3080      	adds	r0, #128	; 0x80
 801606c:	2909      	cmp	r1, #9
 801606e:	d010      	beq.n	8016092 <lv_tlsf_create_with_pool+0xbe>
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8016070:	4657      	mov	r7, sl
 8016072:	4652      	mov	r2, sl
 8016074:	0883      	lsrs	r3, r0, #2
 8016076:	425b      	negs	r3, r3
 8016078:	401f      	ands	r7, r3
 801607a:	421a      	tst	r2, r3
 801607c:	d1c7      	bne.n	801600e <lv_tlsf_create_with_pool+0x3a>
 801607e:	2500      	movs	r5, #0
 8016080:	e7c7      	b.n	8016012 <lv_tlsf_create_with_pool+0x3e>
            control->blocks[i][j] = &control->block_null;
 8016082:	195b      	adds	r3, r3, r5
 8016084:	332c      	adds	r3, #44	; 0x2c
 8016086:	009b      	lsls	r3, r3, #2
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8016088:	3101      	adds	r1, #1
            control->blocks[i][j] = &control->block_null;
 801608a:	511c      	str	r4, [r3, r4]
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 801608c:	3080      	adds	r0, #128	; 0x80
 801608e:	2909      	cmp	r1, #9
 8016090:	d1ee      	bne.n	8016070 <lv_tlsf_create_with_pool+0x9c>
 8016092:	0026      	movs	r6, r4
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 8016094:	2397      	movs	r3, #151	; 0x97
    return x - (x & (align - 1));
 8016096:	2703      	movs	r7, #3
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 8016098:	4d18      	ldr	r5, [pc, #96]	; (80160fc <lv_tlsf_create_with_pool+0x128>)
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 801609a:	00db      	lsls	r3, r3, #3
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 801609c:	444d      	add	r5, r9
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 801609e:	18e3      	adds	r3, r4, r3
    return x - (x & (align - 1));
 80160a0:	43bd      	bics	r5, r7
    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 80160a2:	423b      	tst	r3, r7
 80160a4:	d121      	bne.n	80160ea <lv_tlsf_create_with_pool+0x116>
    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 80160a6:	002b      	movs	r3, r5
 80160a8:	4a15      	ldr	r2, [pc, #84]	; (8016100 <lv_tlsf_create_with_pool+0x12c>)
 80160aa:	3b0c      	subs	r3, #12
 80160ac:	4293      	cmp	r3, r2
 80160ae:	d81c      	bhi.n	80160ea <lv_tlsf_create_with_pool+0x116>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 80160b0:	4b14      	ldr	r3, [pc, #80]	; (8016104 <lv_tlsf_create_with_pool+0x130>)
    block->size &= ~block_header_prev_free_bit;
 80160b2:	2201      	movs	r2, #1
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 80160b4:	4698      	mov	r8, r3
 80160b6:	44a0      	add	r8, r4
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 80160b8:	4643      	mov	r3, r8
 80160ba:	685b      	ldr	r3, [r3, #4]
    block_insert(tlsf_cast(control_t *, tlsf), block);
 80160bc:	4641      	mov	r1, r8
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 80160be:	403b      	ands	r3, r7
 80160c0:	432b      	orrs	r3, r5
    block->size &= ~block_header_prev_free_bit;
 80160c2:	2502      	movs	r5, #2
 80160c4:	43ab      	bics	r3, r5
 80160c6:	4313      	orrs	r3, r2
 80160c8:	4642      	mov	r2, r8
    block_insert(tlsf_cast(control_t *, tlsf), block);
 80160ca:	0030      	movs	r0, r6
    block->size &= ~block_header_prev_free_bit;
 80160cc:	6053      	str	r3, [r2, #4]
    block_insert(tlsf_cast(control_t *, tlsf), block);
 80160ce:	f7ff fea9 	bl	8015e24 <block_insert>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80160d2:	4643      	mov	r3, r8
 80160d4:	685b      	ldr	r3, [r3, #4]
 80160d6:	43bb      	bics	r3, r7
    tlsf_assert(!block_is_last(block));
 80160d8:	d100      	bne.n	80160dc <lv_tlsf_create_with_pool+0x108>
 80160da:	e7fe      	b.n	80160da <lv_tlsf_create_with_pool+0x106>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 80160dc:	18e4      	adds	r4, r4, r3
 80160de:	2397      	movs	r3, #151	; 0x97
 80160e0:	00db      	lsls	r3, r3, #3
 80160e2:	469c      	mov	ip, r3
    next->prev_phys_block = block;
 80160e4:	4643      	mov	r3, r8
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 80160e6:	4464      	add	r4, ip
    block->size |= block_header_prev_free_bit;
 80160e8:	c428      	stmia	r4!, {r3, r5}
    return tlsf;
}
 80160ea:	0030      	movs	r0, r6
 80160ec:	bce0      	pop	{r5, r6, r7}
 80160ee:	46ba      	mov	sl, r7
 80160f0:	46b1      	mov	r9, r6
 80160f2:	46a8      	mov	r8, r5
 80160f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 0;
 80160f6:	2600      	movs	r6, #0
 80160f8:	e7cc      	b.n	8016094 <lv_tlsf_create_with_pool+0xc0>
 80160fa:	46c0      	nop			; (mov r8, r8)
 80160fc:	fffffb40 	.word	0xfffffb40
 8016100:	00007ff4 	.word	0x00007ff4
 8016104:	000004b4 	.word	0x000004b4

08016108 <lv_tlsf_malloc>:
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 8016108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801610a:	46c6      	mov	lr, r8
 801610c:	0004      	movs	r4, r0
 801610e:	b500      	push	{lr}
    if(size) {
 8016110:	2900      	cmp	r1, #0
 8016112:	d024      	beq.n	801615e <lv_tlsf_malloc+0x56>
    return (x + (align - 1)) & ~(align - 1);
 8016114:	2303      	movs	r3, #3
        if(aligned < block_size_max) {
 8016116:	2280      	movs	r2, #128	; 0x80
    return (x + (align - 1)) & ~(align - 1);
 8016118:	3103      	adds	r1, #3
 801611a:	4399      	bics	r1, r3
        if(aligned < block_size_max) {
 801611c:	0212      	lsls	r2, r2, #8
 801611e:	4291      	cmp	r1, r2
 8016120:	d21d      	bcs.n	801615e <lv_tlsf_malloc+0x56>
            adjust = tlsf_max(aligned, block_size_min);
 8016122:	000d      	movs	r5, r1
 8016124:	290c      	cmp	r1, #12
 8016126:	d200      	bcs.n	801612a <lv_tlsf_malloc+0x22>
 8016128:	250c      	movs	r5, #12
    if(size >= SMALL_BLOCK_SIZE) {
 801612a:	297f      	cmp	r1, #127	; 0x7f
 801612c:	d91c      	bls.n	8016168 <lv_tlsf_malloc+0x60>
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 801612e:	0028      	movs	r0, r5
 8016130:	f7ea f970 	bl	8000414 <__clzsi2>
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 8016134:	271a      	movs	r7, #26
 8016136:	1a3b      	subs	r3, r7, r0
 8016138:	2001      	movs	r0, #1
 801613a:	4098      	lsls	r0, r3
 801613c:	3801      	subs	r0, #1
        size += round;
 801613e:	4680      	mov	r8, r0
 8016140:	44a8      	add	r8, r5
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8016142:	4640      	mov	r0, r8
 8016144:	f7ea f966 	bl	8000414 <__clzsi2>
        fl -= (FL_INDEX_SHIFT - 1);
 8016148:	2619      	movs	r6, #25
    void * p = 0;
 801614a:	2100      	movs	r1, #0
        fl -= (FL_INDEX_SHIFT - 1);
 801614c:	1a36      	subs	r6, r6, r0
        if(fl < FL_INDEX_COUNT) {
 801614e:	2e09      	cmp	r6, #9
 8016150:	d006      	beq.n	8016160 <lv_tlsf_malloc+0x58>
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8016152:	4642      	mov	r2, r8
 8016154:	1a39      	subs	r1, r7, r0
 8016156:	40ca      	lsrs	r2, r1
 8016158:	2320      	movs	r3, #32
 801615a:	405a      	eors	r2, r3
 801615c:	e007      	b.n	801616e <lv_tlsf_malloc+0x66>
    void * p = 0;
 801615e:	2100      	movs	r1, #0
    control_t * control = tlsf_cast(control_t *, tlsf);
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
    block_header_t * block = block_locate_free(control, adjust);
    return block_prepare_used(control, block, adjust);
}
 8016160:	0008      	movs	r0, r1
 8016162:	bc80      	pop	{r7}
 8016164:	46b8      	mov	r8, r7
 8016166:	bdf0      	pop	{r4, r5, r6, r7, pc}
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8016168:	2101      	movs	r1, #1
        fl = 0;
 801616a:	2600      	movs	r6, #0
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 801616c:	10aa      	asrs	r2, r5, #2
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 801616e:	1d33      	adds	r3, r6, #4
 8016170:	009b      	lsls	r3, r3, #2
 8016172:	18e3      	adds	r3, r4, r3
 8016174:	685f      	ldr	r7, [r3, #4]
 8016176:	2301      	movs	r3, #1
 8016178:	425b      	negs	r3, r3
 801617a:	0018      	movs	r0, r3
 801617c:	4090      	lsls	r0, r2
 801617e:	0002      	movs	r2, r0
 8016180:	0038      	movs	r0, r7
 8016182:	4010      	ands	r0, r2
    if(!sl_map) {
 8016184:	4217      	tst	r7, r2
 8016186:	d110      	bne.n	80161aa <lv_tlsf_malloc+0xa2>
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 8016188:	6922      	ldr	r2, [r4, #16]
 801618a:	408b      	lsls	r3, r1
 801618c:	0010      	movs	r0, r2
 801618e:	4018      	ands	r0, r3
        if(!fl_map) {
 8016190:	421a      	tst	r2, r3
 8016192:	d0e4      	beq.n	801615e <lv_tlsf_malloc+0x56>
    return __builtin_ffs(word) - 1;
 8016194:	f7ea f95c 	bl	8000450 <__ffssi2>
 8016198:	1e46      	subs	r6, r0, #1
        sl_map = control->sl_bitmap[fl];
 801619a:	3003      	adds	r0, #3
 801619c:	0080      	lsls	r0, r0, #2
 801619e:	1820      	adds	r0, r4, r0
 80161a0:	6840      	ldr	r0, [r0, #4]
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 80161a2:	2800      	cmp	r0, #0
 80161a4:	d100      	bne.n	80161a8 <lv_tlsf_malloc+0xa0>
 80161a6:	e7fe      	b.n	80161a6 <lv_tlsf_malloc+0x9e>
 80161a8:	0007      	movs	r7, r0
    return __builtin_ffs(word) - 1;
 80161aa:	f7ea f951 	bl	8000450 <__ffssi2>
 80161ae:	0173      	lsls	r3, r6, #5
 80161b0:	3801      	subs	r0, #1
    return control->blocks[fl][sl];
 80161b2:	181b      	adds	r3, r3, r0
 80161b4:	009b      	lsls	r3, r3, #2
 80161b6:	4698      	mov	r8, r3
 80161b8:	44a0      	add	r8, r4
 80161ba:	4643      	mov	r3, r8
 80161bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
    if(block) {
 80161be:	2900      	cmp	r1, #0
 80161c0:	d0ce      	beq.n	8016160 <lv_tlsf_malloc+0x58>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80161c2:	2203      	movs	r2, #3
 80161c4:	684b      	ldr	r3, [r1, #4]
 80161c6:	4393      	bics	r3, r2
        tlsf_assert(block_size(block) >= size);
 80161c8:	429d      	cmp	r5, r3
 80161ca:	d900      	bls.n	80161ce <lv_tlsf_malloc+0xc6>
 80161cc:	e7fe      	b.n	80161cc <lv_tlsf_malloc+0xc4>
    block_header_t * prev = block->prev_free;
 80161ce:	68cb      	ldr	r3, [r1, #12]
    tlsf_assert(prev && "prev_free field can not be null");
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d00e      	beq.n	80161f2 <lv_tlsf_malloc+0xea>
    block_header_t * next = block->next_free;
 80161d4:	688a      	ldr	r2, [r1, #8]
    tlsf_assert(next && "next_free field can not be null");
 80161d6:	2a00      	cmp	r2, #0
 80161d8:	d00c      	beq.n	80161f4 <lv_tlsf_malloc+0xec>
    next->prev_free = prev;
 80161da:	60d3      	str	r3, [r2, #12]
    prev->next_free = next;
 80161dc:	609a      	str	r2, [r3, #8]
        control->blocks[fl][sl] = next;
 80161de:	4643      	mov	r3, r8
 80161e0:	639a      	str	r2, [r3, #56]	; 0x38
        if(next == &control->block_null) {
 80161e2:	42a2      	cmp	r2, r4
 80161e4:	d007      	beq.n	80161f6 <lv_tlsf_malloc+0xee>
        tlsf_assert(size && "size must be non-zero");
 80161e6:	002a      	movs	r2, r5
 80161e8:	0020      	movs	r0, r4
 80161ea:	f7ff fe59 	bl	8015ea0 <block_prepare_used.part.0>
 80161ee:	0001      	movs	r1, r0
 80161f0:	e7b6      	b.n	8016160 <lv_tlsf_malloc+0x58>
    tlsf_assert(prev && "prev_free field can not be null");
 80161f2:	e7fe      	b.n	80161f2 <lv_tlsf_malloc+0xea>
    tlsf_assert(next && "next_free field can not be null");
 80161f4:	e7fe      	b.n	80161f4 <lv_tlsf_malloc+0xec>
            control->sl_bitmap[fl] &= ~(1U << sl);
 80161f6:	2201      	movs	r2, #1
 80161f8:	0013      	movs	r3, r2
 80161fa:	4083      	lsls	r3, r0
 80161fc:	439f      	bics	r7, r3
 80161fe:	1d33      	adds	r3, r6, #4
 8016200:	009b      	lsls	r3, r3, #2
 8016202:	18e3      	adds	r3, r4, r3
 8016204:	605f      	str	r7, [r3, #4]
            if(!control->sl_bitmap[fl]) {
 8016206:	2f00      	cmp	r7, #0
 8016208:	d1ed      	bne.n	80161e6 <lv_tlsf_malloc+0xde>
                control->fl_bitmap &= ~(1U << fl);
 801620a:	40b2      	lsls	r2, r6
 801620c:	6923      	ldr	r3, [r4, #16]
 801620e:	4393      	bics	r3, r2
 8016210:	6123      	str	r3, [r4, #16]
}
 8016212:	e7e8      	b.n	80161e6 <lv_tlsf_malloc+0xde>

08016214 <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 8016214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016216:	46d6      	mov	lr, sl
 8016218:	464f      	mov	r7, r9
 801621a:	4646      	mov	r6, r8
 801621c:	0005      	movs	r5, r0
 801621e:	b5c0      	push	{r6, r7, lr}
    size_t size = 0;
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 8016220:	2900      	cmp	r1, #0
 8016222:	d027      	beq.n	8016274 <lv_tlsf_free+0x60>
    return tlsf_cast(int, block->size & block_header_free_bit);
 8016224:	2301      	movs	r3, #1
 8016226:	000a      	movs	r2, r1
 8016228:	0018      	movs	r0, r3
 801622a:	3a08      	subs	r2, #8
 801622c:	6854      	ldr	r4, [r2, #4]
 801622e:	4020      	ands	r0, r4
        control_t * control = tlsf_cast(control_t *, tlsf);
        block_header_t * block = block_from_ptr(ptr);
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8016230:	4223      	tst	r3, r4
 8016232:	d000      	beq.n	8016236 <lv_tlsf_free+0x22>
 8016234:	e7fe      	b.n	8016234 <lv_tlsf_free+0x20>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8016236:	2603      	movs	r6, #3
 8016238:	0027      	movs	r7, r4
 801623a:	46b4      	mov	ip, r6
 801623c:	43b7      	bics	r7, r6
    tlsf_assert(!block_is_last(block));
 801623e:	d018      	beq.n	8016272 <lv_tlsf_free+0x5e>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8016240:	3904      	subs	r1, #4
 8016242:	19c9      	adds	r1, r1, r7
    block->size |= block_header_prev_free_bit;
 8016244:	2702      	movs	r7, #2
 8016246:	46b8      	mov	r8, r7
 8016248:	4646      	mov	r6, r8
 801624a:	684f      	ldr	r7, [r1, #4]
    next->prev_phys_block = block;
 801624c:	600a      	str	r2, [r1, #0]
    block->size |= block_header_prev_free_bit;
 801624e:	4337      	orrs	r7, r6
 8016250:	604f      	str	r7, [r1, #4]
    block->size |= block_header_free_bit;
 8016252:	6857      	ldr	r7, [r2, #4]
    return tlsf_cast(block_header_t *,
 8016254:	4692      	mov	sl, r2
    block->size |= block_header_free_bit;
 8016256:	0039      	movs	r1, r7
 8016258:	4319      	orrs	r1, r3
 801625a:	6051      	str	r1, [r2, #4]
    if(block_is_prev_free(block)) {
 801625c:	420e      	tst	r6, r1
 801625e:	d042      	beq.n	80162e6 <lv_tlsf_free+0xd2>
    return block->prev_phys_block;
 8016260:	6812      	ldr	r2, [r2, #0]
 8016262:	4692      	mov	sl, r2
        tlsf_assert(prev && "prev physical block can't be null");
 8016264:	2a00      	cmp	r2, #0
 8016266:	d00c      	beq.n	8016282 <lv_tlsf_free+0x6e>
    return tlsf_cast(int, block->size & block_header_free_bit);
 8016268:	6852      	ldr	r2, [r2, #4]
 801626a:	4691      	mov	r9, r2
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 801626c:	4213      	tst	r3, r2
 801626e:	d109      	bne.n	8016284 <lv_tlsf_free+0x70>
 8016270:	e7fe      	b.n	8016270 <lv_tlsf_free+0x5c>
    tlsf_assert(!block_is_last(block));
 8016272:	e7fe      	b.n	8016272 <lv_tlsf_free+0x5e>
    size_t size = 0;
 8016274:	2400      	movs	r4, #0
        block = block_merge_next(control, block);
        block_insert(control, block);
    }

    return size;
}
 8016276:	0020      	movs	r0, r4
 8016278:	bce0      	pop	{r5, r6, r7}
 801627a:	46ba      	mov	sl, r7
 801627c:	46b1      	mov	r9, r6
 801627e:	46a8      	mov	r8, r5
 8016280:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tlsf_assert(prev && "prev physical block can't be null");
 8016282:	e7fe      	b.n	8016282 <lv_tlsf_free+0x6e>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8016284:	0013      	movs	r3, r2
 8016286:	4662      	mov	r2, ip
 8016288:	4393      	bics	r3, r2
 801628a:	4698      	mov	r8, r3
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 801628c:	109a      	asrs	r2, r3, #2
    if(size < SMALL_BLOCK_SIZE) {
 801628e:	2b7f      	cmp	r3, #127	; 0x7f
 8016290:	d90a      	bls.n	80162a8 <lv_tlsf_free+0x94>
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8016292:	0018      	movs	r0, r3
 8016294:	f7ea f8be 	bl	8000414 <__clzsi2>
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8016298:	231a      	movs	r3, #26
 801629a:	4642      	mov	r2, r8
 801629c:	1a1b      	subs	r3, r3, r0
 801629e:	40da      	lsrs	r2, r3
 80162a0:	2320      	movs	r3, #32
 80162a2:	405a      	eors	r2, r3
        fl -= (FL_INDEX_SHIFT - 1);
 80162a4:	3b07      	subs	r3, #7
 80162a6:	1a18      	subs	r0, r3, r0
    block_header_t * prev = block->prev_free;
 80162a8:	4653      	mov	r3, sl
 80162aa:	68db      	ldr	r3, [r3, #12]
    tlsf_assert(prev && "prev_free field can not be null");
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d023      	beq.n	80162f8 <lv_tlsf_free+0xe4>
    block_header_t * next = block->next_free;
 80162b0:	4651      	mov	r1, sl
 80162b2:	6889      	ldr	r1, [r1, #8]
    tlsf_assert(next && "next_free field can not be null");
 80162b4:	2900      	cmp	r1, #0
 80162b6:	d021      	beq.n	80162fc <lv_tlsf_free+0xe8>
    next->prev_free = prev;
 80162b8:	60cb      	str	r3, [r1, #12]
    prev->next_free = next;
 80162ba:	6099      	str	r1, [r3, #8]
    if(control->blocks[fl][sl] == block) {
 80162bc:	0143      	lsls	r3, r0, #5
 80162be:	189b      	adds	r3, r3, r2
 80162c0:	009b      	lsls	r3, r3, #2
 80162c2:	18eb      	adds	r3, r5, r3
 80162c4:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 80162c6:	45b2      	cmp	sl, r6
 80162c8:	d01a      	beq.n	8016300 <lv_tlsf_free+0xec>
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 80162ca:	4643      	mov	r3, r8
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d014      	beq.n	80162fa <lv_tlsf_free+0xe6>
    prev->size += block_size(block) + block_header_overhead;
 80162d0:	2203      	movs	r2, #3
 80162d2:	003b      	movs	r3, r7
 80162d4:	4651      	mov	r1, sl
 80162d6:	4393      	bics	r3, r2
 80162d8:	444b      	add	r3, r9
 80162da:	3304      	adds	r3, #4
 80162dc:	604b      	str	r3, [r1, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80162de:	4393      	bics	r3, r2
    tlsf_assert(!block_is_last(block));
 80162e0:	d00d      	beq.n	80162fe <lv_tlsf_free+0xea>
    next->prev_phys_block = block;
 80162e2:	4453      	add	r3, sl
 80162e4:	6059      	str	r1, [r3, #4]
        block = block_merge_next(control, block);
 80162e6:	4651      	mov	r1, sl
 80162e8:	0028      	movs	r0, r5
 80162ea:	f7ff fe0f 	bl	8015f0c <block_merge_next>
 80162ee:	0001      	movs	r1, r0
        block_insert(control, block);
 80162f0:	0028      	movs	r0, r5
 80162f2:	f7ff fd97 	bl	8015e24 <block_insert>
 80162f6:	e7be      	b.n	8016276 <lv_tlsf_free+0x62>
    tlsf_assert(prev && "prev_free field can not be null");
 80162f8:	e7fe      	b.n	80162f8 <lv_tlsf_free+0xe4>
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 80162fa:	e7fe      	b.n	80162fa <lv_tlsf_free+0xe6>
    tlsf_assert(next && "next_free field can not be null");
 80162fc:	e7fe      	b.n	80162fc <lv_tlsf_free+0xe8>
    tlsf_assert(!block_is_last(block));
 80162fe:	e7fe      	b.n	80162fe <lv_tlsf_free+0xea>
        control->blocks[fl][sl] = next;
 8016300:	6399      	str	r1, [r3, #56]	; 0x38
        if(next == &control->block_null) {
 8016302:	42a9      	cmp	r1, r5
 8016304:	d1e1      	bne.n	80162ca <lv_tlsf_free+0xb6>
            control->sl_bitmap[fl] &= ~(1U << sl);
 8016306:	2301      	movs	r3, #1
 8016308:	001e      	movs	r6, r3
 801630a:	4096      	lsls	r6, r2
 801630c:	0032      	movs	r2, r6
 801630e:	0081      	lsls	r1, r0, #2
 8016310:	1869      	adds	r1, r5, r1
 8016312:	694e      	ldr	r6, [r1, #20]
 8016314:	4396      	bics	r6, r2
 8016316:	614e      	str	r6, [r1, #20]
            if(!control->sl_bitmap[fl]) {
 8016318:	d1d7      	bne.n	80162ca <lv_tlsf_free+0xb6>
                control->fl_bitmap &= ~(1U << fl);
 801631a:	4083      	lsls	r3, r0
 801631c:	692a      	ldr	r2, [r5, #16]
 801631e:	439a      	bics	r2, r3
 8016320:	612a      	str	r2, [r5, #16]
}
 8016322:	e7d2      	b.n	80162ca <lv_tlsf_free+0xb6>

08016324 <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 8016324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016326:	464e      	mov	r6, r9
 8016328:	4645      	mov	r5, r8
 801632a:	46de      	mov	lr, fp
 801632c:	4657      	mov	r7, sl
 801632e:	000c      	movs	r4, r1
 8016330:	b5e0      	push	{r5, r6, r7, lr}
 8016332:	0006      	movs	r6, r0
 8016334:	0015      	movs	r5, r2
    control_t * control = tlsf_cast(control_t *, tlsf);
    void * p = 0;

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 8016336:	2900      	cmp	r1, #0
 8016338:	d06b      	beq.n	8016412 <lv_tlsf_realloc+0xee>
 801633a:	2a00      	cmp	r2, #0
 801633c:	d100      	bne.n	8016340 <lv_tlsf_realloc+0x1c>
 801633e:	e06d      	b.n	801641c <lv_tlsf_realloc+0xf8>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8016340:	2308      	movs	r3, #8
 8016342:	425b      	negs	r3, r3
 8016344:	4699      	mov	r9, r3
 8016346:	4489      	add	r9, r1
 8016348:	464b      	mov	r3, r9
 801634a:	685b      	ldr	r3, [r3, #4]
 801634c:	2203      	movs	r2, #3
 801634e:	0019      	movs	r1, r3
 8016350:	4391      	bics	r1, r2
 8016352:	4688      	mov	r8, r1
    tlsf_assert(!block_is_last(block));
 8016354:	d100      	bne.n	8016358 <lv_tlsf_realloc+0x34>
 8016356:	e7fe      	b.n	8016356 <lv_tlsf_realloc+0x32>
    return (x + (align - 1)) & ~(align - 1);
 8016358:	1cef      	adds	r7, r5, #3
 801635a:	4397      	bics	r7, r2
        if(aligned < block_size_max) {
 801635c:	2280      	movs	r2, #128	; 0x80
 801635e:	0212      	lsls	r2, r2, #8
 8016360:	4297      	cmp	r7, r2
 8016362:	d22d      	bcs.n	80163c0 <lv_tlsf_realloc+0x9c>
        if(size > cursize && adjust == 0) {
            /* The request is probably too large, fail */
            return NULL;
        }

        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8016364:	07da      	lsls	r2, r3, #31
 8016366:	d453      	bmi.n	8016410 <lv_tlsf_realloc+0xec>
            adjust = tlsf_max(aligned, block_size_min);
 8016368:	46ba      	mov	sl, r7
 801636a:	2f0c      	cmp	r7, #12
 801636c:	d35a      	bcc.n	8016424 <lv_tlsf_realloc+0x100>

        /*
        ** If the next block is used, or when combined with the current
        ** block, does not offer enough space, we must reallocate and copy.
        */
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 801636e:	45d0      	cmp	r8, sl
 8016370:	d22c      	bcs.n	80163cc <lv_tlsf_realloc+0xa8>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8016372:	1f23      	subs	r3, r4, #4
 8016374:	469b      	mov	fp, r3
 8016376:	4643      	mov	r3, r8
    return tlsf_cast(int, block->size & block_header_free_bit);
 8016378:	2701      	movs	r7, #1
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801637a:	58e3      	ldr	r3, [r4, r3]
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 801637c:	421f      	tst	r7, r3
 801637e:	d006      	beq.n	801638e <lv_tlsf_realloc+0x6a>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8016380:	2203      	movs	r2, #3
 8016382:	4393      	bics	r3, r2
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 8016384:	4642      	mov	r2, r8
 8016386:	3204      	adds	r2, #4
 8016388:	189b      	adds	r3, r3, r2
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 801638a:	4553      	cmp	r3, sl
 801638c:	d236      	bcs.n	80163fc <lv_tlsf_realloc+0xd8>
            p = lv_tlsf_malloc(tlsf, size);
 801638e:	0029      	movs	r1, r5
 8016390:	0030      	movs	r0, r6
 8016392:	f7ff feb9 	bl	8016108 <lv_tlsf_malloc>
 8016396:	1e07      	subs	r7, r0, #0
            if(p) {
 8016398:	d00b      	beq.n	80163b2 <lv_tlsf_realloc+0x8e>
                const size_t minsize = tlsf_min(cursize, size);
 801639a:	002a      	movs	r2, r5
 801639c:	4545      	cmp	r5, r8
 801639e:	d900      	bls.n	80163a2 <lv_tlsf_realloc+0x7e>
 80163a0:	4642      	mov	r2, r8
                lv_memcpy(p, ptr, minsize);
 80163a2:	0021      	movs	r1, r4
 80163a4:	0038      	movs	r0, r7
 80163a6:	f7fe ff1f 	bl	80151e8 <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 80163aa:	0021      	movs	r1, r4
 80163ac:	0030      	movs	r0, r6
 80163ae:	f7ff ff31 	bl	8016214 <lv_tlsf_free>
            p = ptr;
        }
    }

    return p;
}
 80163b2:	0038      	movs	r0, r7
 80163b4:	bcf0      	pop	{r4, r5, r6, r7}
 80163b6:	46bb      	mov	fp, r7
 80163b8:	46b2      	mov	sl, r6
 80163ba:	46a9      	mov	r9, r5
 80163bc:	46a0      	mov	r8, r4
 80163be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(size > cursize && adjust == 0) {
 80163c0:	428d      	cmp	r5, r1
 80163c2:	d832      	bhi.n	801642a <lv_tlsf_realloc+0x106>
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 80163c4:	07da      	lsls	r2, r3, #31
 80163c6:	d423      	bmi.n	8016410 <lv_tlsf_realloc+0xec>
 80163c8:	2200      	movs	r2, #0
 80163ca:	4692      	mov	sl, r2
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80163cc:	2203      	movs	r2, #3
 80163ce:	4393      	bics	r3, r2
    if(block_can_split(block, size)) {
 80163d0:	4652      	mov	r2, sl
 80163d2:	3210      	adds	r2, #16
 80163d4:	0027      	movs	r7, r4
 80163d6:	4293      	cmp	r3, r2
 80163d8:	d3eb      	bcc.n	80163b2 <lv_tlsf_realloc+0x8e>
        block_header_t * remaining_block = block_split(block, size);
 80163da:	4651      	mov	r1, sl
 80163dc:	4648      	mov	r0, r9
 80163de:	f7ff fcf1 	bl	8015dc4 <block_split>
    block->size &= ~block_header_prev_free_bit;
 80163e2:	2302      	movs	r3, #2
 80163e4:	6842      	ldr	r2, [r0, #4]
        block_header_t * remaining_block = block_split(block, size);
 80163e6:	0001      	movs	r1, r0
    block->size &= ~block_header_prev_free_bit;
 80163e8:	439a      	bics	r2, r3
 80163ea:	6042      	str	r2, [r0, #4]
        remaining_block = block_merge_next(control, remaining_block);
 80163ec:	0030      	movs	r0, r6
 80163ee:	f7ff fd8d 	bl	8015f0c <block_merge_next>
 80163f2:	0001      	movs	r1, r0
        block_insert(control, remaining_block);
 80163f4:	0030      	movs	r0, r6
 80163f6:	f7ff fd15 	bl	8015e24 <block_insert>
 80163fa:	e7da      	b.n	80163b2 <lv_tlsf_realloc+0x8e>
                block_merge_next(control, block);
 80163fc:	4649      	mov	r1, r9
 80163fe:	0030      	movs	r0, r6
 8016400:	f7ff fd84 	bl	8015f0c <block_merge_next>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8016404:	464b      	mov	r3, r9
 8016406:	2203      	movs	r2, #3
 8016408:	685b      	ldr	r3, [r3, #4]
 801640a:	4393      	bics	r3, r2
    tlsf_assert(!block_is_last(block));
 801640c:	d10f      	bne.n	801642e <lv_tlsf_realloc+0x10a>
 801640e:	e7fe      	b.n	801640e <lv_tlsf_realloc+0xea>
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8016410:	e7fe      	b.n	8016410 <lv_tlsf_realloc+0xec>
        p = lv_tlsf_malloc(tlsf, size);
 8016412:	0011      	movs	r1, r2
 8016414:	f7ff fe78 	bl	8016108 <lv_tlsf_malloc>
 8016418:	0007      	movs	r7, r0
 801641a:	e7ca      	b.n	80163b2 <lv_tlsf_realloc+0x8e>
        lv_tlsf_free(tlsf, ptr);
 801641c:	f7ff fefa 	bl	8016214 <lv_tlsf_free>
    void * p = 0;
 8016420:	2700      	movs	r7, #0
        lv_tlsf_free(tlsf, ptr);
 8016422:	e7c6      	b.n	80163b2 <lv_tlsf_realloc+0x8e>
            adjust = tlsf_max(aligned, block_size_min);
 8016424:	220c      	movs	r2, #12
 8016426:	4692      	mov	sl, r2
 8016428:	e7a1      	b.n	801636e <lv_tlsf_realloc+0x4a>
            return NULL;
 801642a:	2700      	movs	r7, #0
 801642c:	e7c1      	b.n	80163b2 <lv_tlsf_realloc+0x8e>
    block->size &= ~block_header_prev_free_bit;
 801642e:	2202      	movs	r2, #2
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8016430:	445b      	add	r3, fp
    block->size &= ~block_header_prev_free_bit;
 8016432:	6859      	ldr	r1, [r3, #4]
 8016434:	4391      	bics	r1, r2
 8016436:	6059      	str	r1, [r3, #4]
    block->size &= ~block_header_free_bit;
 8016438:	464b      	mov	r3, r9
 801643a:	464a      	mov	r2, r9
 801643c:	685b      	ldr	r3, [r3, #4]
 801643e:	43bb      	bics	r3, r7
 8016440:	6053      	str	r3, [r2, #4]
    return tlsf_cast(int, block->size & block_header_free_bit);
 8016442:	e7c3      	b.n	80163cc <lv_tlsf_realloc+0xa8>

08016444 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4), 0 on invalid code.
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if(LV_IS_ASCII(str[0]))
 8016444:	2200      	movs	r2, #0
 8016446:	5682      	ldrsb	r2, [r0, r2]
 8016448:	7803      	ldrb	r3, [r0, #0]
        return 1;
 801644a:	2001      	movs	r0, #1
    if(LV_IS_ASCII(str[0]))
 801644c:	2a00      	cmp	r2, #0
 801644e:	da0f      	bge.n	8016470 <lv_txt_utf8_size+0x2c>
    else if(LV_IS_2BYTES_UTF8_CODE(str[0]))
 8016450:	221f      	movs	r2, #31
 8016452:	0019      	movs	r1, r3
 8016454:	4391      	bics	r1, r2
 8016456:	29c0      	cmp	r1, #192	; 0xc0
 8016458:	d00d      	beq.n	8016476 <lv_txt_utf8_size+0x32>
        return 2;
    else if(LV_IS_3BYTES_UTF8_CODE(str[0]))
 801645a:	220f      	movs	r2, #15
 801645c:	0019      	movs	r1, r3
 801645e:	4391      	bics	r1, r2
 8016460:	29e0      	cmp	r1, #224	; 0xe0
 8016462:	d006      	beq.n	8016472 <lv_txt_utf8_size+0x2e>
        return 3;
    else if(LV_IS_4BYTES_UTF8_CODE(str[0]))
 8016464:	2207      	movs	r2, #7
 8016466:	4393      	bics	r3, r2
        return 4;
 8016468:	3bf0      	subs	r3, #240	; 0xf0
 801646a:	425a      	negs	r2, r3
 801646c:	4153      	adcs	r3, r2
 801646e:	0098      	lsls	r0, r3, #2
    return 0;
}
 8016470:	4770      	bx	lr
        return 3;
 8016472:	2003      	movs	r0, #3
 8016474:	e7fc      	b.n	8016470 <lv_txt_utf8_size+0x2c>
        return 2;
 8016476:	2002      	movs	r0, #2
 8016478:	e7fa      	b.n	8016470 <lv_txt_utf8_size+0x2c>
 801647a:	46c0      	nop			; (mov r8, r8)

0801647c <lv_txt_utf8_next>:
     */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 801647c:	2300      	movs	r3, #0
{
 801647e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016480:	b083      	sub	sp, #12
 8016482:	0002      	movs	r2, r0
    uint32_t i_tmp = 0;
 8016484:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 8016486:	2900      	cmp	r1, #0
 8016488:	d01e      	beq.n	80164c8 <lv_txt_utf8_next+0x4c>

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
 801648a:	680b      	ldr	r3, [r1, #0]
 801648c:	18c4      	adds	r4, r0, r3
        result = txt[*i];
        (*i)++;
 801648e:	1c5d      	adds	r5, r3, #1
    if(LV_IS_ASCII(txt[*i])) {
 8016490:	7820      	ldrb	r0, [r4, #0]
 8016492:	7824      	ldrb	r4, [r4, #0]
 8016494:	b264      	sxtb	r4, r4
 8016496:	2c00      	cmp	r4, #0
 8016498:	db02      	blt.n	80164a0 <lv_txt_utf8_next+0x24>
        (*i)++;
 801649a:	600d      	str	r5, [r1, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 801649c:	b003      	add	sp, #12
 801649e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 80164a0:	241f      	movs	r4, #31
 80164a2:	0006      	movs	r6, r0
 80164a4:	43a6      	bics	r6, r4
 80164a6:	2ec0      	cmp	r6, #192	; 0xc0
 80164a8:	d054      	beq.n	8016554 <lv_txt_utf8_next+0xd8>
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 80164aa:	240f      	movs	r4, #15
 80164ac:	0006      	movs	r6, r0
 80164ae:	43a6      	bics	r6, r4
 80164b0:	0034      	movs	r4, r6
 80164b2:	2ee0      	cmp	r6, #224	; 0xe0
 80164b4:	d00d      	beq.n	80164d2 <lv_txt_utf8_next+0x56>
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 80164b6:	2407      	movs	r4, #7
 80164b8:	0006      	movs	r6, r0
 80164ba:	43a6      	bics	r6, r4
 80164bc:	0034      	movs	r4, r6
            (*i)++;
 80164be:	600d      	str	r5, [r1, #0]
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 80164c0:	2ef0      	cmp	r6, #240	; 0xf0
 80164c2:	d020      	beq.n	8016506 <lv_txt_utf8_next+0x8a>
    uint32_t result = 0;
 80164c4:	2000      	movs	r0, #0
 80164c6:	e7e9      	b.n	801649c <lv_txt_utf8_next+0x20>
 80164c8:	0004      	movs	r4, r0
 80164ca:	2501      	movs	r5, #1
 80164cc:	2300      	movs	r3, #0
    if(i == NULL) i = &i_tmp;
 80164ce:	a901      	add	r1, sp, #4
 80164d0:	e7de      	b.n	8016490 <lv_txt_utf8_next+0x14>
            (*i)++;
 80164d2:	600d      	str	r5, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80164d4:	5d55      	ldrb	r5, [r2, r5]
 80164d6:	3ca1      	subs	r4, #161	; 0xa1
 80164d8:	002e      	movs	r6, r5
 80164da:	43a6      	bics	r6, r4
 80164dc:	2e80      	cmp	r6, #128	; 0x80
 80164de:	d1f1      	bne.n	80164c4 <lv_txt_utf8_next+0x48>
            (*i)++;
 80164e0:	1c9e      	adds	r6, r3, #2
 80164e2:	600e      	str	r6, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80164e4:	5d92      	ldrb	r2, [r2, r6]
 80164e6:	0016      	movs	r6, r2
 80164e8:	43a6      	bics	r6, r4
 80164ea:	2e80      	cmp	r6, #128	; 0x80
 80164ec:	d1ea      	bne.n	80164c4 <lv_txt_utf8_next+0x48>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 80164ee:	0700      	lsls	r0, r0, #28
 80164f0:	0c06      	lsrs	r6, r0, #16
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80164f2:	01a8      	lsls	r0, r5, #6
 80164f4:	25fc      	movs	r5, #252	; 0xfc
 80164f6:	012d      	lsls	r5, r5, #4
 80164f8:	4028      	ands	r0, r5
            result += (txt[*i] & 0x3F);
 80164fa:	4014      	ands	r4, r2
 80164fc:	1900      	adds	r0, r0, r4
            (*i)++;
 80164fe:	3303      	adds	r3, #3
            result += (txt[*i] & 0x3F);
 8016500:	1980      	adds	r0, r0, r6
            (*i)++;
 8016502:	600b      	str	r3, [r1, #0]
 8016504:	e7ca      	b.n	801649c <lv_txt_utf8_next+0x20>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8016506:	5d55      	ldrb	r5, [r2, r5]
 8016508:	3cb1      	subs	r4, #177	; 0xb1
 801650a:	002e      	movs	r6, r5
 801650c:	43a6      	bics	r6, r4
 801650e:	2e80      	cmp	r6, #128	; 0x80
 8016510:	d1d8      	bne.n	80164c4 <lv_txt_utf8_next+0x48>
            (*i)++;
 8016512:	1c9e      	adds	r6, r3, #2
 8016514:	600e      	str	r6, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8016516:	5d96      	ldrb	r6, [r2, r6]
 8016518:	0037      	movs	r7, r6
 801651a:	43a7      	bics	r7, r4
 801651c:	2f80      	cmp	r7, #128	; 0x80
 801651e:	d1d1      	bne.n	80164c4 <lv_txt_utf8_next+0x48>
            (*i)++;
 8016520:	1cdf      	adds	r7, r3, #3
 8016522:	600f      	str	r7, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8016524:	5dd2      	ldrb	r2, [r2, r7]
 8016526:	0017      	movs	r7, r2
 8016528:	43a7      	bics	r7, r4
 801652a:	2f80      	cmp	r7, #128	; 0x80
 801652c:	d1ca      	bne.n	80164c4 <lv_txt_utf8_next+0x48>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 801652e:	27e0      	movs	r7, #224	; 0xe0
 8016530:	0480      	lsls	r0, r0, #18
 8016532:	037f      	lsls	r7, r7, #13
 8016534:	4007      	ands	r7, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8016536:	0328      	lsls	r0, r5, #12
 8016538:	25fc      	movs	r5, #252	; 0xfc
 801653a:	02ad      	lsls	r5, r5, #10
 801653c:	4028      	ands	r0, r5
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 801653e:	25fc      	movs	r5, #252	; 0xfc
 8016540:	01b6      	lsls	r6, r6, #6
 8016542:	012d      	lsls	r5, r5, #4
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8016544:	4338      	orrs	r0, r7
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8016546:	402e      	ands	r6, r5
 8016548:	1980      	adds	r0, r0, r6
            result += txt[*i] & 0x3F;
 801654a:	4014      	ands	r4, r2
            (*i)++;
 801654c:	3304      	adds	r3, #4
            result += txt[*i] & 0x3F;
 801654e:	1820      	adds	r0, r4, r0
            (*i)++;
 8016550:	600b      	str	r3, [r1, #0]
 8016552:	e7a3      	b.n	801649c <lv_txt_utf8_next+0x20>
            (*i)++;
 8016554:	600d      	str	r5, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8016556:	5d54      	ldrb	r4, [r2, r5]
 8016558:	223f      	movs	r2, #63	; 0x3f
 801655a:	0025      	movs	r5, r4
 801655c:	4395      	bics	r5, r2
 801655e:	2d80      	cmp	r5, #128	; 0x80
 8016560:	d1b0      	bne.n	80164c4 <lv_txt_utf8_next+0x48>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8016562:	25f8      	movs	r5, #248	; 0xf8
 8016564:	0180      	lsls	r0, r0, #6
 8016566:	00ed      	lsls	r5, r5, #3
 8016568:	4028      	ands	r0, r5
            result += (txt[*i] & 0x3F);
 801656a:	4022      	ands	r2, r4
            (*i)++;
 801656c:	3302      	adds	r3, #2
            result += (txt[*i] & 0x3F);
 801656e:	1810      	adds	r0, r2, r0
            (*i)++;
 8016570:	600b      	str	r3, [r1, #0]
 8016572:	e793      	b.n	801649c <lv_txt_utf8_next+0x20>

08016574 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8016574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016576:	46c6      	mov	lr, r8
 8016578:	0006      	movs	r6, r0
 801657a:	000f      	movs	r7, r1
    uint32_t i;
    uint32_t byte_cnt = 0;
 801657c:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 801657e:	2500      	movs	r5, #0
{
 8016580:	b500      	push	{lr}
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8016582:	2900      	cmp	r1, #0
 8016584:	d012      	beq.n	80165ac <lv_txt_utf8_get_byte_id+0x38>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8016586:	4b0b      	ldr	r3, [pc, #44]	; (80165b4 <lv_txt_utf8_get_byte_id+0x40>)
 8016588:	4698      	mov	r8, r3
 801658a:	e00b      	b.n	80165a4 <lv_txt_utf8_get_byte_id+0x30>
 801658c:	4643      	mov	r3, r8
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	4798      	blx	r3
        /* If the char was invalid tell it's 1 byte long*/
        byte_cnt += c_size ? c_size : 1;
 8016592:	1c03      	adds	r3, r0, #0
 8016594:	2800      	cmp	r0, #0
 8016596:	d100      	bne.n	801659a <lv_txt_utf8_get_byte_id+0x26>
 8016598:	2301      	movs	r3, #1
 801659a:	b2db      	uxtb	r3, r3
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 801659c:	3501      	adds	r5, #1
        byte_cnt += c_size ? c_size : 1;
 801659e:	18e4      	adds	r4, r4, r3
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80165a0:	42af      	cmp	r7, r5
 80165a2:	d003      	beq.n	80165ac <lv_txt_utf8_get_byte_id+0x38>
 80165a4:	5d33      	ldrb	r3, [r6, r4]
 80165a6:	1930      	adds	r0, r6, r4
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d1ef      	bne.n	801658c <lv_txt_utf8_get_byte_id+0x18>
    }

    return byte_cnt;
}
 80165ac:	0020      	movs	r0, r4
 80165ae:	bc80      	pop	{r7}
 80165b0:	46b8      	mov	r8, r7
 80165b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165b4:	2000008c 	.word	0x2000008c

080165b8 <lv_txt_utf8_get_char_id>:
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
    uint32_t i        = 0;
 80165b8:	2300      	movs	r3, #0
{
 80165ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165bc:	b083      	sub	sp, #12
 80165be:	0006      	movs	r6, r0
 80165c0:	000d      	movs	r5, r1
    uint32_t char_cnt = 0;
 80165c2:	2400      	movs	r4, #0
    uint32_t i        = 0;
 80165c4:	9301      	str	r3, [sp, #4]

    while(i < byte_id) {
 80165c6:	2900      	cmp	r1, #0
 80165c8:	d008      	beq.n	80165dc <lv_txt_utf8_get_char_id+0x24>
 80165ca:	4f06      	ldr	r7, [pc, #24]	; (80165e4 <lv_txt_utf8_get_char_id+0x2c>)
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80165cc:	683b      	ldr	r3, [r7, #0]
 80165ce:	0030      	movs	r0, r6
 80165d0:	a901      	add	r1, sp, #4
 80165d2:	4798      	blx	r3
    while(i < byte_id) {
 80165d4:	9b01      	ldr	r3, [sp, #4]
        char_cnt++;
 80165d6:	3401      	adds	r4, #1
    while(i < byte_id) {
 80165d8:	42ab      	cmp	r3, r5
 80165da:	d3f7      	bcc.n	80165cc <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
}
 80165dc:	0020      	movs	r0, r4
 80165de:	b003      	add	sp, #12
 80165e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165e2:	46c0      	nop			; (mov r8, r8)
 80165e4:	20000084 	.word	0x20000084

080165e8 <lv_txt_utf8_get_length>:
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
    uint32_t len = 0;
    uint32_t i   = 0;
 80165e8:	2300      	movs	r3, #0
{
 80165ea:	b570      	push	{r4, r5, r6, lr}
 80165ec:	b082      	sub	sp, #8
    uint32_t i   = 0;
 80165ee:	9301      	str	r3, [sp, #4]

    while(txt[i] != '\0') {
 80165f0:	7803      	ldrb	r3, [r0, #0]
{
 80165f2:	0004      	movs	r4, r0
    uint32_t len = 0;
 80165f4:	2500      	movs	r5, #0
    while(txt[i] != '\0') {
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d009      	beq.n	801660e <lv_txt_utf8_get_length+0x26>
 80165fa:	4e06      	ldr	r6, [pc, #24]	; (8016614 <lv_txt_utf8_get_length+0x2c>)
        _lv_txt_encoded_next(txt, &i);
 80165fc:	6833      	ldr	r3, [r6, #0]
 80165fe:	0020      	movs	r0, r4
 8016600:	a901      	add	r1, sp, #4
 8016602:	4798      	blx	r3
    while(txt[i] != '\0') {
 8016604:	9b01      	ldr	r3, [sp, #4]
        len++;
 8016606:	3501      	adds	r5, #1
    while(txt[i] != '\0') {
 8016608:	5ce3      	ldrb	r3, [r4, r3]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d1f6      	bne.n	80165fc <lv_txt_utf8_get_length+0x14>
    }

    return len;
}
 801660e:	0028      	movs	r0, r5
 8016610:	b002      	add	sp, #8
 8016612:	bd70      	pop	{r4, r5, r6, pc}
 8016614:	20000084 	.word	0x20000084

08016618 <lv_txt_get_width.part.0>:
lv_coord_t lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
 8016618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801661a:	464e      	mov	r6, r9
 801661c:	4645      	mov	r5, r8
 801661e:	46de      	mov	lr, fp
 8016620:	4657      	mov	r7, sl
 8016622:	4691      	mov	r9, r2
    uint32_t i                   = 0;
 8016624:	2200      	movs	r2, #0
lv_coord_t lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
 8016626:	b5e0      	push	{r5, r6, r7, lr}
 8016628:	b085      	sub	sp, #20
 801662a:	9300      	str	r3, [sp, #0]
 801662c:	ab0e      	add	r3, sp, #56	; 0x38
 801662e:	0005      	movs	r5, r0
 8016630:	4688      	mov	r8, r1
    lv_coord_t width             = 0;
 8016632:	2600      	movs	r6, #0
lv_coord_t lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
 8016634:	781b      	ldrb	r3, [r3, #0]
    uint32_t i                   = 0;
 8016636:	9203      	str	r2, [sp, #12]
    if(length != 0) {
 8016638:	2900      	cmp	r1, #0
 801663a:	d03b      	beq.n	80166b4 <lv_txt_get_width.part.0+0x9c>
 801663c:	2201      	movs	r2, #1
 801663e:	0011      	movs	r1, r2
 8016640:	4019      	ands	r1, r3
 8016642:	9101      	str	r1, [sp, #4]
 8016644:	421a      	tst	r2, r3
 8016646:	d040      	beq.n	80166ca <lv_txt_get_width.part.0+0xb2>
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8016648:	2300      	movs	r3, #0
 801664a:	469b      	mov	fp, r3
 801664c:	ab03      	add	r3, sp, #12
 801664e:	469a      	mov	sl, r3
 8016650:	4f33      	ldr	r7, [pc, #204]	; (8016720 <lv_txt_get_width.part.0+0x108>)
 8016652:	e011      	b.n	8016678 <lv_txt_get_width.part.0+0x60>
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8016654:	9b03      	ldr	r3, [sp, #12]
 8016656:	2100      	movs	r1, #0
 8016658:	18e8      	adds	r0, r5, r3
 801665a:	683b      	ldr	r3, [r7, #0]
 801665c:	4798      	blx	r3
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 801665e:	465b      	mov	r3, fp
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8016660:	0002      	movs	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8016662:	2c23      	cmp	r4, #35	; 0x23
 8016664:	d155      	bne.n	8016712 <lv_txt_get_width.part.0+0xfa>
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 8016666:	2b00      	cmp	r3, #0
 8016668:	d02c      	beq.n	80166c4 <lv_txt_get_width.part.0+0xac>
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 801666a:	2b01      	cmp	r3, #1
 801666c:	d04e      	beq.n	801670c <lv_txt_get_width.part.0+0xf4>
            *state = LV_TEXT_CMD_STATE_WAIT;
 801666e:	2300      	movs	r3, #0
 8016670:	469b      	mov	fp, r3
        while(i < length) {
 8016672:	9b03      	ldr	r3, [sp, #12]
 8016674:	4598      	cmp	r8, r3
 8016676:	d918      	bls.n	80166aa <lv_txt_get_width.part.0+0x92>
    *letter = _lv_txt_encoded_next(txt, ofs);
 8016678:	4651      	mov	r1, sl
 801667a:	0028      	movs	r0, r5
 801667c:	683b      	ldr	r3, [r7, #0]
 801667e:	4798      	blx	r3
 8016680:	1e04      	subs	r4, r0, #0
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8016682:	d1e7      	bne.n	8016654 <lv_txt_get_width.part.0+0x3c>
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8016684:	465b      	mov	r3, fp
 8016686:	2b01      	cmp	r3, #1
 8016688:	d0f3      	beq.n	8016672 <lv_txt_get_width.part.0+0x5a>
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 801668a:	2200      	movs	r2, #0
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 801668c:	0021      	movs	r1, r4
 801668e:	4648      	mov	r0, r9
 8016690:	f7fc fe88 	bl	80133a4 <lv_font_get_glyph_width>
            if(char_width > 0) {
 8016694:	b203      	sxth	r3, r0
 8016696:	2b00      	cmp	r3, #0
 8016698:	ddeb      	ble.n	8016672 <lv_txt_get_width.part.0+0x5a>
                width += letter_space;
 801669a:	9b00      	ldr	r3, [sp, #0]
 801669c:	469c      	mov	ip, r3
        while(i < length) {
 801669e:	9b03      	ldr	r3, [sp, #12]
                width += letter_space;
 80166a0:	4466      	add	r6, ip
 80166a2:	1986      	adds	r6, r0, r6
 80166a4:	b236      	sxth	r6, r6
        while(i < length) {
 80166a6:	4598      	cmp	r8, r3
 80166a8:	d8e6      	bhi.n	8016678 <lv_txt_get_width.part.0+0x60>
        if(width > 0) {
 80166aa:	2e00      	cmp	r6, #0
 80166ac:	dd02      	ble.n	80166b4 <lv_txt_get_width.part.0+0x9c>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 80166ae:	9b00      	ldr	r3, [sp, #0]
 80166b0:	1af6      	subs	r6, r6, r3
 80166b2:	b236      	sxth	r6, r6
}
 80166b4:	0030      	movs	r0, r6
 80166b6:	b005      	add	sp, #20
 80166b8:	bcf0      	pop	{r4, r5, r6, r7}
 80166ba:	46bb      	mov	fp, r7
 80166bc:	46b2      	mov	sl, r6
 80166be:	46a9      	mov	r9, r5
 80166c0:	46a0      	mov	r8, r4
 80166c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166c4:	9b01      	ldr	r3, [sp, #4]
 80166c6:	469b      	mov	fp, r3
 80166c8:	e7d3      	b.n	8016672 <lv_txt_get_width.part.0+0x5a>
 80166ca:	ab03      	add	r3, sp, #12
 80166cc:	469a      	mov	sl, r3
 80166ce:	4f14      	ldr	r7, [pc, #80]	; (8016720 <lv_txt_get_width.part.0+0x108>)
 80166d0:	e00f      	b.n	80166f2 <lv_txt_get_width.part.0+0xda>
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 80166d2:	2200      	movs	r2, #0
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 80166d4:	0021      	movs	r1, r4
 80166d6:	4648      	mov	r0, r9
 80166d8:	f7fc fe64 	bl	80133a4 <lv_font_get_glyph_width>
            if(char_width > 0) {
 80166dc:	b203      	sxth	r3, r0
 80166de:	2b00      	cmp	r3, #0
 80166e0:	dd04      	ble.n	80166ec <lv_txt_get_width.part.0+0xd4>
                width += letter_space;
 80166e2:	9b00      	ldr	r3, [sp, #0]
 80166e4:	469c      	mov	ip, r3
 80166e6:	4466      	add	r6, ip
 80166e8:	1986      	adds	r6, r0, r6
 80166ea:	b236      	sxth	r6, r6
        while(i < length) {
 80166ec:	9b03      	ldr	r3, [sp, #12]
 80166ee:	4598      	cmp	r8, r3
 80166f0:	d9db      	bls.n	80166aa <lv_txt_get_width.part.0+0x92>
    *letter = _lv_txt_encoded_next(txt, ofs);
 80166f2:	4651      	mov	r1, sl
 80166f4:	0028      	movs	r0, r5
 80166f6:	683b      	ldr	r3, [r7, #0]
 80166f8:	4798      	blx	r3
 80166fa:	1e04      	subs	r4, r0, #0
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 80166fc:	d0e9      	beq.n	80166d2 <lv_txt_get_width.part.0+0xba>
 80166fe:	9b03      	ldr	r3, [sp, #12]
 8016700:	2100      	movs	r1, #0
 8016702:	18e8      	adds	r0, r5, r3
 8016704:	683b      	ldr	r3, [r7, #0]
 8016706:	4798      	blx	r3
 8016708:	0002      	movs	r2, r0
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801670a:	e7e3      	b.n	80166d4 <lv_txt_get_width.part.0+0xbc>
            *state = LV_TEXT_CMD_STATE_WAIT;
 801670c:	2300      	movs	r3, #0
 801670e:	469b      	mov	fp, r3
 8016710:	e7bc      	b.n	801668c <lv_txt_get_width.part.0+0x74>
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8016712:	2b01      	cmp	r3, #1
 8016714:	d1ba      	bne.n	801668c <lv_txt_get_width.part.0+0x74>
        if(c == ' ') {
 8016716:	2c20      	cmp	r4, #32
 8016718:	d1ab      	bne.n	8016672 <lv_txt_get_width.part.0+0x5a>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 801671a:	3301      	adds	r3, #1
 801671c:	469b      	mov	fp, r3
 801671e:	e7a8      	b.n	8016672 <lv_txt_get_width.part.0+0x5a>
 8016720:	20000084 	.word	0x20000084

08016724 <lv_txt_utf8_prev>:
{
 8016724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016726:	000d      	movs	r5, r1
    (*i)--;
 8016728:	2404      	movs	r4, #4
 801672a:	680b      	ldr	r3, [r1, #0]
{
 801672c:	0006      	movs	r6, r0
 801672e:	4f0e      	ldr	r7, [pc, #56]	; (8016768 <lv_txt_utf8_prev+0x44>)
    (*i)--;
 8016730:	1e58      	subs	r0, r3, #1
{
 8016732:	b083      	sub	sp, #12
    (*i)--;
 8016734:	6008      	str	r0, [r1, #0]
        c_size = _lv_txt_encoded_size(&txt[*i]);
 8016736:	683b      	ldr	r3, [r7, #0]
 8016738:	1830      	adds	r0, r6, r0
 801673a:	4798      	blx	r3
        if(c_size == 0) {
 801673c:	2800      	cmp	r0, #0
 801673e:	d008      	beq.n	8016752 <lv_txt_utf8_prev+0x2e>
    uint32_t i_tmp  = *i;
 8016740:	682b      	ldr	r3, [r5, #0]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8016742:	0030      	movs	r0, r6
    uint32_t i_tmp  = *i;
 8016744:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8016746:	4b09      	ldr	r3, [pc, #36]	; (801676c <lv_txt_utf8_prev+0x48>)
 8016748:	a901      	add	r1, sp, #4
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	4798      	blx	r3
}
 801674e:	b003      	add	sp, #12
 8016750:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(*i != 0)
 8016752:	6828      	ldr	r0, [r5, #0]
 8016754:	2800      	cmp	r0, #0
 8016756:	d005      	beq.n	8016764 <lv_txt_utf8_prev+0x40>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8016758:	3c01      	subs	r4, #1
                (*i)--;
 801675a:	3801      	subs	r0, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 801675c:	b2e4      	uxtb	r4, r4
                (*i)--;
 801675e:	6028      	str	r0, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8016760:	2c00      	cmp	r4, #0
 8016762:	d1e8      	bne.n	8016736 <lv_txt_utf8_prev+0x12>
                return 0;
 8016764:	2000      	movs	r0, #0
 8016766:	e7f2      	b.n	801674e <lv_txt_utf8_prev+0x2a>
 8016768:	2000008c 	.word	0x2000008c
 801676c:	20000084 	.word	0x20000084

08016770 <_lv_txt_get_next_line>:
{
 8016770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016772:	46de      	mov	lr, fp
 8016774:	4657      	mov	r7, sl
 8016776:	464e      	mov	r6, r9
 8016778:	4645      	mov	r5, r8
 801677a:	b5e0      	push	{r5, r6, r7, lr}
 801677c:	b093      	sub	sp, #76	; 0x4c
 801677e:	9304      	str	r3, [sp, #16]
 8016780:	ab1c      	add	r3, sp, #112	; 0x70
 8016782:	9107      	str	r1, [sp, #28]
 8016784:	cb02      	ldmia	r3!, {r1}
 8016786:	9209      	str	r2, [sp, #36]	; 0x24
 8016788:	9006      	str	r0, [sp, #24]
 801678a:	781a      	ldrb	r2, [r3, #0]
 801678c:	910c      	str	r1, [sp, #48]	; 0x30
    if(used_width) *used_width = 0;
 801678e:	2900      	cmp	r1, #0
 8016790:	d001      	beq.n	8016796 <_lv_txt_get_next_line+0x26>
 8016792:	2300      	movs	r3, #0
 8016794:	800b      	strh	r3, [r1, #0]
    if(txt == NULL) return 0;
 8016796:	9b06      	ldr	r3, [sp, #24]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d100      	bne.n	801679e <_lv_txt_get_next_line+0x2e>
 801679c:	e0a3      	b.n	80168e6 <_lv_txt_get_next_line+0x176>
    if(txt[0] == '\0') return 0;
 801679e:	781b      	ldrb	r3, [r3, #0]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d100      	bne.n	80167a6 <_lv_txt_get_next_line+0x36>
 80167a4:	e09f      	b.n	80168e6 <_lv_txt_get_next_line+0x176>
    if(font == NULL) return 0;
 80167a6:	9907      	ldr	r1, [sp, #28]
 80167a8:	2900      	cmp	r1, #0
 80167aa:	d100      	bne.n	80167ae <_lv_txt_get_next_line+0x3e>
 80167ac:	e09b      	b.n	80168e6 <_lv_txt_get_next_line+0x176>
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 80167ae:	2106      	movs	r1, #6
 80167b0:	4211      	tst	r1, r2
 80167b2:	d000      	beq.n	80167b6 <_lv_txt_get_next_line+0x46>
 80167b4:	e120      	b.n	80169f8 <_lv_txt_get_next_line+0x288>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80167b6:	2302      	movs	r3, #2
 80167b8:	0019      	movs	r1, r3
 80167ba:	4011      	ands	r1, r2
 80167bc:	910d      	str	r1, [sp, #52]	; 0x34
 80167be:	4213      	tst	r3, r2
 80167c0:	d000      	beq.n	80167c4 <_lv_txt_get_next_line+0x54>
 80167c2:	e116      	b.n	80169f2 <_lv_txt_get_next_line+0x282>
    uint32_t i = 0;                                        /*Iterating index into txt*/
 80167c4:	2300      	movs	r3, #0
 80167c6:	930f      	str	r3, [sp, #60]	; 0x3c
    while(txt[i] != '\0' && max_width > 0) {
 80167c8:	3301      	adds	r3, #1
 80167ca:	4013      	ands	r3, r2
 80167cc:	9302      	str	r3, [sp, #8]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80167ce:	2300      	movs	r3, #0
 80167d0:	9301      	str	r3, [sp, #4]
    uint32_t i = 0;                                        /*Iterating index into txt*/
 80167d2:	9b06      	ldr	r3, [sp, #24]
 80167d4:	4698      	mov	r8, r3
    lv_coord_t line_w = 0;
 80167d6:	2300      	movs	r3, #0
    while(txt[i] != '\0' && max_width > 0) {
 80167d8:	469b      	mov	fp, r3
    lv_coord_t line_w = 0;
 80167da:	9308      	str	r3, [sp, #32]
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
        return true;
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80167dc:	4ba4      	ldr	r3, [pc, #656]	; (8016a70 <_lv_txt_get_next_line+0x300>)
 80167de:	4647      	mov	r7, r8
 80167e0:	4699      	mov	r9, r3
 80167e2:	46da      	mov	sl, fp
    while(txt[i] != '\0' && max_width > 0) {
 80167e4:	9b04      	ldr	r3, [sp, #16]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	dc00      	bgt.n	80167ec <_lv_txt_get_next_line+0x7c>
 80167ea:	e0f5      	b.n	80169d8 <_lv_txt_get_next_line+0x268>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80167ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d000      	beq.n	80167f4 <_lv_txt_get_next_line+0x84>
 80167f2:	e0c5      	b.n	8016980 <_lv_txt_get_next_line+0x210>
 80167f4:	9b04      	ldr	r3, [sp, #16]
 80167f6:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 80167f8:	2300      	movs	r3, #0
 80167fa:	9310      	str	r3, [sp, #64]	; 0x40
 80167fc:	9311      	str	r3, [sp, #68]	; 0x44
    letter = _lv_txt_encoded_next(txt, &i_next);
 80167fe:	4b9d      	ldr	r3, [pc, #628]	; (8016a74 <_lv_txt_get_next_line+0x304>)
 8016800:	0038      	movs	r0, r7
 8016802:	469b      	mov	fp, r3
 8016804:	a910      	add	r1, sp, #64	; 0x40
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	4798      	blx	r3
    i_next_next = i_next;
 801680a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    letter = _lv_txt_encoded_next(txt, &i_next);
 801680c:	0005      	movs	r5, r0
    i_next_next = i_next;
 801680e:	9300      	str	r3, [sp, #0]
 8016810:	9311      	str	r3, [sp, #68]	; 0x44
    while(txt[i] != '\0') {
 8016812:	783b      	ldrb	r3, [r7, #0]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d100      	bne.n	801681a <_lv_txt_get_next_line+0xaa>
 8016818:	e125      	b.n	8016a66 <_lv_txt_get_next_line+0x2f6>
        uint32_t word_w = 0;
 801681a:	2300      	movs	r3, #0
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 801681c:	4698      	mov	r8, r3
        uint32_t word_w = 0;
 801681e:	930a      	str	r3, [sp, #40]	; 0x28
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 8016820:	3b01      	subs	r3, #1
 8016822:	9300      	str	r3, [sp, #0]
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 8016824:	2300      	movs	r3, #0
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 8016826:	2600      	movs	r6, #0
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 8016828:	9303      	str	r3, [sp, #12]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 801682a:	465b      	mov	r3, fp
 801682c:	0038      	movs	r0, r7
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	a911      	add	r1, sp, #68	; 0x44
 8016832:	4798      	blx	r3
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8016834:	9b02      	ldr	r3, [sp, #8]
 8016836:	002c      	movs	r4, r5
 8016838:	9605      	str	r6, [sp, #20]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 801683a:	0005      	movs	r5, r0
        word_len++;
 801683c:	3601      	adds	r6, #1
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801683e:	2b00      	cmp	r3, #0
 8016840:	d005      	beq.n	801684e <_lv_txt_get_next_line+0xde>
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 8016842:	9b01      	ldr	r3, [sp, #4]
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8016844:	2c23      	cmp	r4, #35	; 0x23
 8016846:	d058      	beq.n	80168fa <_lv_txt_get_next_line+0x18a>
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8016848:	2b01      	cmp	r3, #1
 801684a:	d100      	bne.n	801684e <_lv_txt_get_next_line+0xde>
 801684c:	e093      	b.n	8016976 <_lv_txt_get_next_line+0x206>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 801684e:	002a      	movs	r2, r5
 8016850:	0021      	movs	r1, r4
 8016852:	9807      	ldr	r0, [sp, #28]
 8016854:	f7fc fda6 	bl	80133a4 <lv_font_get_glyph_width>
        cur_w += letter_w;
 8016858:	9b03      	ldr	r3, [sp, #12]
 801685a:	18c3      	adds	r3, r0, r3
        if(letter_w > 0) {
 801685c:	b200      	sxth	r0, r0
        cur_w += letter_w;
 801685e:	b29b      	uxth	r3, r3
        if(letter_w > 0) {
 8016860:	2800      	cmp	r0, #0
 8016862:	dd03      	ble.n	801686c <_lv_txt_get_next_line+0xfc>
            cur_w += letter_space;
 8016864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016866:	4694      	mov	ip, r2
 8016868:	4463      	add	r3, ip
 801686a:	b29b      	uxth	r3, r3
 801686c:	b21b      	sxth	r3, r3
 801686e:	9303      	str	r3, [sp, #12]
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8016870:	9b00      	ldr	r3, [sp, #0]
 8016872:	3301      	adds	r3, #1
 8016874:	d100      	bne.n	8016878 <_lv_txt_get_next_line+0x108>
 8016876:	e074      	b.n	8016962 <_lv_txt_get_next_line+0x1f2>
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 8016878:	2c0a      	cmp	r4, #10
 801687a:	d011      	beq.n	80168a0 <_lv_txt_get_next_line+0x130>
 801687c:	2c0d      	cmp	r4, #13
 801687e:	d00f      	beq.n	80168a0 <_lv_txt_get_next_line+0x130>
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 8016880:	4b7d      	ldr	r3, [pc, #500]	; (8016a78 <_lv_txt_get_next_line+0x308>)
 8016882:	4a7e      	ldr	r2, [pc, #504]	; (8016a7c <_lv_txt_get_next_line+0x30c>)
 8016884:	18e3      	adds	r3, r4, r3
 8016886:	4293      	cmp	r3, r2
 8016888:	d90a      	bls.n	80168a0 <_lv_txt_get_next_line+0x130>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 801688a:	2300      	movs	r3, #0
 801688c:	2220      	movs	r2, #32
 801688e:	e005      	b.n	801689c <_lv_txt_get_next_line+0x12c>
 8016890:	464a      	mov	r2, r9
 8016892:	3301      	adds	r3, #1
 8016894:	b2db      	uxtb	r3, r3
 8016896:	5cd2      	ldrb	r2, [r2, r3]
 8016898:	2a00      	cmp	r2, #0
 801689a:	d050      	beq.n	801693e <_lv_txt_get_next_line+0x1ce>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 801689c:	42a2      	cmp	r2, r4
 801689e:	d1f7      	bne.n	8016890 <_lv_txt_get_next_line+0x120>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 80168a0:	4643      	mov	r3, r8
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d13c      	bne.n	8016920 <_lv_txt_get_next_line+0x1b0>
 80168a6:	9b00      	ldr	r3, [sp, #0]
 80168a8:	3301      	adds	r3, #1
 80168aa:	d100      	bne.n	80168ae <_lv_txt_get_next_line+0x13e>
 80168ac:	e0bf      	b.n	8016a2e <_lv_txt_get_next_line+0x2be>
    if(force) return break_index;
 80168ae:	4653      	mov	r3, sl
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d06b      	beq.n	801698c <_lv_txt_get_next_line+0x21c>
    if(i == 0) {
 80168b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168b6:	469b      	mov	fp, r3
 80168b8:	465b      	mov	r3, fp
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d000      	beq.n	80168c0 <_lv_txt_get_next_line+0x150>
 80168be:	e090      	b.n	80169e2 <_lv_txt_get_next_line+0x272>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 80168c0:	4b6c      	ldr	r3, [pc, #432]	; (8016a74 <_lv_txt_get_next_line+0x304>)
 80168c2:	a90f      	add	r1, sp, #60	; 0x3c
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	9806      	ldr	r0, [sp, #24]
 80168c8:	4798      	blx	r3
        if(used_width != NULL) {
 80168ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 80168cc:	0001      	movs	r1, r0
        if(used_width != NULL) {
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d100      	bne.n	80168d4 <_lv_txt_get_next_line+0x164>
 80168d2:	e0be      	b.n	8016a52 <_lv_txt_get_next_line+0x2e2>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 80168d4:	2200      	movs	r2, #0
 80168d6:	9807      	ldr	r0, [sp, #28]
 80168d8:	f7fc fd64 	bl	80133a4 <lv_font_get_glyph_width>
 80168dc:	b203      	sxth	r3, r0
 80168de:	9308      	str	r3, [sp, #32]
    return i;
 80168e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168e2:	469b      	mov	fp, r3
 80168e4:	e081      	b.n	80169ea <_lv_txt_get_next_line+0x27a>
    if(txt == NULL) return 0;
 80168e6:	2300      	movs	r3, #0
 80168e8:	469b      	mov	fp, r3
}
 80168ea:	4658      	mov	r0, fp
 80168ec:	b013      	add	sp, #76	; 0x4c
 80168ee:	bcf0      	pop	{r4, r5, r6, r7}
 80168f0:	46bb      	mov	fp, r7
 80168f2:	46b2      	mov	sl, r6
 80168f4:	46a9      	mov	r9, r5
 80168f6:	46a0      	mov	r8, r4
 80168f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d02e      	beq.n	801695c <_lv_txt_get_next_line+0x1ec>
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 80168fe:	2b01      	cmp	r3, #1
 8016900:	d041      	beq.n	8016986 <_lv_txt_get_next_line+0x216>
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 8016902:	2b02      	cmp	r3, #2
 8016904:	d1a3      	bne.n	801684e <_lv_txt_get_next_line+0xde>
 8016906:	2300      	movs	r3, #0
 8016908:	9301      	str	r3, [sp, #4]
        i = i_next;
 801690a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801690c:	4698      	mov	r8, r3
        i_next = i_next_next;
 801690e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016910:	9310      	str	r3, [sp, #64]	; 0x40
    while(txt[i] != '\0') {
 8016912:	4643      	mov	r3, r8
 8016914:	5cfb      	ldrb	r3, [r7, r3]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d000      	beq.n	801691c <_lv_txt_get_next_line+0x1ac>
 801691a:	e786      	b.n	801682a <_lv_txt_get_next_line+0xba>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 801691c:	002c      	movs	r4, r5
 801691e:	9605      	str	r6, [sp, #20]
    if(break_index == NO_BREAK_FOUND) {
 8016920:	9b00      	ldr	r3, [sp, #0]
 8016922:	3301      	adds	r3, #1
 8016924:	d1c3      	bne.n	80168ae <_lv_txt_get_next_line+0x13e>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8016926:	9b05      	ldr	r3, [sp, #20]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d100      	bne.n	801692e <_lv_txt_get_next_line+0x1be>
 801692c:	e085      	b.n	8016a3a <_lv_txt_get_next_line+0x2ca>
 801692e:	2c0d      	cmp	r4, #13
 8016930:	d100      	bne.n	8016934 <_lv_txt_get_next_line+0x1c4>
 8016932:	e07f      	b.n	8016a34 <_lv_txt_get_next_line+0x2c4>
        max_width -= word_w;
 8016934:	466b      	mov	r3, sp
 8016936:	4642      	mov	r2, r8
 8016938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801693a:	9200      	str	r2, [sp, #0]
 801693c:	e028      	b.n	8016990 <_lv_txt_get_next_line+0x220>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 801693e:	9b00      	ldr	r3, [sp, #0]
 8016940:	3301      	adds	r3, #1
 8016942:	d101      	bne.n	8016948 <_lv_txt_get_next_line+0x1d8>
 8016944:	9b03      	ldr	r3, [sp, #12]
 8016946:	930a      	str	r3, [sp, #40]	; 0x28
        i = i_next;
 8016948:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801694a:	4698      	mov	r8, r3
        i_next = i_next_next;
 801694c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801694e:	9310      	str	r3, [sp, #64]	; 0x40
    while(txt[i] != '\0') {
 8016950:	4643      	mov	r3, r8
 8016952:	5cfb      	ldrb	r3, [r7, r3]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d000      	beq.n	801695a <_lv_txt_get_next_line+0x1ea>
 8016958:	e767      	b.n	801682a <_lv_txt_get_next_line+0xba>
 801695a:	e7df      	b.n	801691c <_lv_txt_get_next_line+0x1ac>
 801695c:	9b02      	ldr	r3, [sp, #8]
 801695e:	9301      	str	r3, [sp, #4]
 8016960:	e7f2      	b.n	8016948 <_lv_txt_get_next_line+0x1d8>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8016962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016964:	9b03      	ldr	r3, [sp, #12]
 8016966:	1a9b      	subs	r3, r3, r2
 8016968:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801696a:	4293      	cmp	r3, r2
 801696c:	dc00      	bgt.n	8016970 <_lv_txt_get_next_line+0x200>
 801696e:	e783      	b.n	8016878 <_lv_txt_get_next_line+0x108>
 8016970:	4643      	mov	r3, r8
 8016972:	9300      	str	r3, [sp, #0]
 8016974:	e780      	b.n	8016878 <_lv_txt_get_next_line+0x108>
        if(c == ' ') {
 8016976:	2c20      	cmp	r4, #32
 8016978:	d1e6      	bne.n	8016948 <_lv_txt_get_next_line+0x1d8>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 801697a:	3301      	adds	r3, #1
 801697c:	9301      	str	r3, [sp, #4]
 801697e:	e7e3      	b.n	8016948 <_lv_txt_get_next_line+0x1d8>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8016980:	4b3f      	ldr	r3, [pc, #252]	; (8016a80 <_lv_txt_get_next_line+0x310>)
 8016982:	930b      	str	r3, [sp, #44]	; 0x2c
 8016984:	e738      	b.n	80167f8 <_lv_txt_get_next_line+0x88>
 8016986:	2300      	movs	r3, #0
 8016988:	9301      	str	r3, [sp, #4]
 801698a:	e760      	b.n	801684e <_lv_txt_get_next_line+0xde>
        max_width -= word_w;
 801698c:	466b      	mov	r3, sp
 801698e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016990:	9a04      	ldr	r2, [sp, #16]
 8016992:	1ad2      	subs	r2, r2, r3
 8016994:	b212      	sxth	r2, r2
 8016996:	9204      	str	r2, [sp, #16]
        line_w += word_w;
 8016998:	9a08      	ldr	r2, [sp, #32]
 801699a:	4694      	mov	ip, r2
 801699c:	4463      	add	r3, ip
 801699e:	b21b      	sxth	r3, r3
 80169a0:	9308      	str	r3, [sp, #32]
        if(advance == 0) {
 80169a2:	9b00      	ldr	r3, [sp, #0]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d100      	bne.n	80169aa <_lv_txt_get_next_line+0x23a>
 80169a8:	e784      	b.n	80168b4 <_lv_txt_get_next_line+0x144>
        i += advance;
 80169aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80169ac:	4694      	mov	ip, r2
        if(txt[0] == '\n' || txt[0] == '\r') break;
 80169ae:	9a06      	ldr	r2, [sp, #24]
        i += advance;
 80169b0:	4463      	add	r3, ip
 80169b2:	469a      	mov	sl, r3
 80169b4:	930f      	str	r3, [sp, #60]	; 0x3c
        if(txt[0] == '\n' || txt[0] == '\r') break;
 80169b6:	7813      	ldrb	r3, [r2, #0]
 80169b8:	2b0a      	cmp	r3, #10
 80169ba:	d00d      	beq.n	80169d8 <_lv_txt_get_next_line+0x268>
 80169bc:	2b0d      	cmp	r3, #13
 80169be:	d00b      	beq.n	80169d8 <_lv_txt_get_next_line+0x268>
        if(txt[i] == '\n' || txt[i] == '\r') {
 80169c0:	0017      	movs	r7, r2
 80169c2:	0013      	movs	r3, r2
 80169c4:	4652      	mov	r2, sl
 80169c6:	5c9b      	ldrb	r3, [r3, r2]
 80169c8:	4457      	add	r7, sl
 80169ca:	2b0a      	cmp	r3, #10
 80169cc:	d03a      	beq.n	8016a44 <_lv_txt_get_next_line+0x2d4>
 80169ce:	2b0d      	cmp	r3, #13
 80169d0:	d038      	beq.n	8016a44 <_lv_txt_get_next_line+0x2d4>
    while(txt[i] != '\0' && max_width > 0) {
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d000      	beq.n	80169d8 <_lv_txt_get_next_line+0x268>
 80169d6:	e705      	b.n	80167e4 <_lv_txt_get_next_line+0x74>
 80169d8:	46d3      	mov	fp, sl
    if(i == 0) {
 80169da:	465b      	mov	r3, fp
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d100      	bne.n	80169e2 <_lv_txt_get_next_line+0x272>
 80169e0:	e76e      	b.n	80168c0 <_lv_txt_get_next_line+0x150>
    if(used_width != NULL) {
 80169e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d100      	bne.n	80169ea <_lv_txt_get_next_line+0x27a>
 80169e8:	e77f      	b.n	80168ea <_lv_txt_get_next_line+0x17a>
        *used_width = line_w;
 80169ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169ec:	9a08      	ldr	r2, [sp, #32]
 80169ee:	801a      	strh	r2, [r3, #0]
    return i;
 80169f0:	e77b      	b.n	80168ea <_lv_txt_get_next_line+0x17a>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80169f2:	4b23      	ldr	r3, [pc, #140]	; (8016a80 <_lv_txt_get_next_line+0x310>)
 80169f4:	9304      	str	r3, [sp, #16]
 80169f6:	e6e5      	b.n	80167c4 <_lv_txt_get_next_line+0x54>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 80169f8:	2200      	movs	r2, #0
 80169fa:	2b0a      	cmp	r3, #10
 80169fc:	d035      	beq.n	8016a6a <_lv_txt_get_next_line+0x2fa>
 80169fe:	0011      	movs	r1, r2
 8016a00:	9806      	ldr	r0, [sp, #24]
 8016a02:	e006      	b.n	8016a12 <_lv_txt_get_next_line+0x2a2>
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d027      	beq.n	8016a58 <_lv_txt_get_next_line+0x2e8>
 8016a08:	1c4a      	adds	r2, r1, #1
 8016a0a:	5c83      	ldrb	r3, [r0, r2]
 8016a0c:	2b0a      	cmp	r3, #10
 8016a0e:	d025      	beq.n	8016a5c <_lv_txt_get_next_line+0x2ec>
 8016a10:	0011      	movs	r1, r2
 8016a12:	2b0d      	cmp	r3, #13
 8016a14:	d1f6      	bne.n	8016a04 <_lv_txt_get_next_line+0x294>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 8016a16:	3b0c      	subs	r3, #12
 8016a18:	468b      	mov	fp, r1
 8016a1a:	469c      	mov	ip, r3
 8016a1c:	44e3      	add	fp, ip
        if(used_width) *used_width = -1;
 8016a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016a20:	2a00      	cmp	r2, #0
 8016a22:	d100      	bne.n	8016a26 <_lv_txt_get_next_line+0x2b6>
 8016a24:	e761      	b.n	80168ea <_lv_txt_get_next_line+0x17a>
 8016a26:	2301      	movs	r3, #1
 8016a28:	425b      	negs	r3, r3
 8016a2a:	8013      	strh	r3, [r2, #0]
 8016a2c:	e75d      	b.n	80168ea <_lv_txt_get_next_line+0x17a>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8016a2e:	9b03      	ldr	r3, [sp, #12]
 8016a30:	930a      	str	r3, [sp, #40]	; 0x28
    if(break_index == NO_BREAK_FOUND) {
 8016a32:	e778      	b.n	8016926 <_lv_txt_get_next_line+0x1b6>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8016a34:	2d0a      	cmp	r5, #10
 8016a36:	d000      	beq.n	8016a3a <_lv_txt_get_next_line+0x2ca>
 8016a38:	e77c      	b.n	8016934 <_lv_txt_get_next_line+0x1c4>
 8016a3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a3c:	9300      	str	r3, [sp, #0]
        max_width -= word_w;
 8016a3e:	466b      	mov	r3, sp
 8016a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a42:	e7a5      	b.n	8016990 <_lv_txt_get_next_line+0x220>
            i++;  /*Include the following newline in the current line*/
 8016a44:	2301      	movs	r3, #1
 8016a46:	46d3      	mov	fp, sl
 8016a48:	469c      	mov	ip, r3
 8016a4a:	44e3      	add	fp, ip
 8016a4c:	465b      	mov	r3, fp
 8016a4e:	930f      	str	r3, [sp, #60]	; 0x3c
            break;
 8016a50:	e732      	b.n	80168b8 <_lv_txt_get_next_line+0x148>
    return i;
 8016a52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a54:	469b      	mov	fp, r3
 8016a56:	e748      	b.n	80168ea <_lv_txt_get_next_line+0x17a>
 8016a58:	468b      	mov	fp, r1
 8016a5a:	e7e0      	b.n	8016a1e <_lv_txt_get_next_line+0x2ae>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 8016a5c:	3b08      	subs	r3, #8
 8016a5e:	468b      	mov	fp, r1
 8016a60:	469c      	mov	ip, r3
 8016a62:	44e3      	add	fp, ip
 8016a64:	e7db      	b.n	8016a1e <_lv_txt_get_next_line+0x2ae>
    while(txt[i] != '\0') {
 8016a66:	2300      	movs	r3, #0
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8016a68:	e792      	b.n	8016990 <_lv_txt_get_next_line+0x220>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8016a6a:	3b09      	subs	r3, #9
 8016a6c:	469b      	mov	fp, r3
 8016a6e:	e7d6      	b.n	8016a1e <_lv_txt_get_next_line+0x2ae>
 8016a70:	0801bde0 	.word	0x0801bde0
 8016a74:	20000084 	.word	0x20000084
 8016a78:	ffffb200 	.word	0xffffb200
 8016a7c:	000051a5 	.word	0x000051a5
 8016a80:	00001fff 	.word	0x00001fff

08016a84 <lv_txt_get_size>:
{
 8016a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a86:	4657      	mov	r7, sl
 8016a88:	46de      	mov	lr, fp
 8016a8a:	464e      	mov	r6, r9
 8016a8c:	4645      	mov	r5, r8
 8016a8e:	b5e0      	push	{r5, r6, r7, lr}
 8016a90:	b087      	sub	sp, #28
 8016a92:	4698      	mov	r8, r3
 8016a94:	ab10      	add	r3, sp, #64	; 0x40
 8016a96:	0017      	movs	r7, r2
 8016a98:	2200      	movs	r2, #0
 8016a9a:	5e9a      	ldrsh	r2, [r3, r2]
 8016a9c:	ab11      	add	r3, sp, #68	; 0x44
 8016a9e:	468a      	mov	sl, r1
 8016aa0:	2100      	movs	r1, #0
 8016aa2:	5e5b      	ldrsh	r3, [r3, r1]
 8016aa4:	0004      	movs	r4, r0
 8016aa6:	469b      	mov	fp, r3
 8016aa8:	ab12      	add	r3, sp, #72	; 0x48
 8016aaa:	781b      	ldrb	r3, [r3, #0]
 8016aac:	4699      	mov	r9, r3
    size_res->x = 0;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	8003      	strh	r3, [r0, #0]
    size_res->y = 0;
 8016ab2:	8043      	strh	r3, [r0, #2]
    if(text == NULL) return;
 8016ab4:	4653      	mov	r3, sl
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d054      	beq.n	8016b64 <lv_txt_get_size+0xe0>
    if(font == NULL) return;
 8016aba:	2f00      	cmp	r7, #0
 8016abc:	d052      	beq.n	8016b64 <lv_txt_get_size+0xe0>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8016abe:	464b      	mov	r3, r9
 8016ac0:	079b      	lsls	r3, r3, #30
 8016ac2:	d466      	bmi.n	8016b92 <lv_txt_get_size+0x10e>
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 8016ac4:	2108      	movs	r1, #8
 8016ac6:	5e7b      	ldrsh	r3, [r7, r1]
    while(text[line_start] != '\0') {
 8016ac8:	4651      	mov	r1, sl
 8016aca:	7809      	ldrb	r1, [r1, #0]
 8016acc:	9304      	str	r3, [sp, #16]
    uint16_t letter_height = lv_font_get_line_height(font);
 8016ace:	893b      	ldrh	r3, [r7, #8]
    while(text[line_start] != '\0') {
 8016ad0:	2900      	cmp	r1, #0
 8016ad2:	d061      	beq.n	8016b98 <lv_txt_get_size+0x114>
 8016ad4:	1899      	adds	r1, r3, r2
            size_res->y += line_space;
 8016ad6:	b292      	uxth	r2, r2
 8016ad8:	4694      	mov	ip, r2
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8016ada:	4655      	mov	r5, sl
    uint32_t line_start     = 0;
 8016adc:	2600      	movs	r6, #0
 8016ade:	4463      	add	r3, ip
 8016ae0:	b29b      	uxth	r3, r3
 8016ae2:	9102      	str	r1, [sp, #8]
            size_res->y += line_space;
 8016ae4:	9205      	str	r2, [sp, #20]
 8016ae6:	9303      	str	r3, [sp, #12]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 8016ae8:	464b      	mov	r3, r9
 8016aea:	9301      	str	r3, [sp, #4]
 8016aec:	2300      	movs	r3, #0
 8016aee:	4642      	mov	r2, r8
 8016af0:	0039      	movs	r1, r7
 8016af2:	9300      	str	r3, [sp, #0]
 8016af4:	0028      	movs	r0, r5
 8016af6:	465b      	mov	r3, fp
 8016af8:	f7ff fe3a 	bl	8016770 <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8016afc:	2202      	movs	r2, #2
 8016afe:	5ea3      	ldrsh	r3, [r4, r2]
 8016b00:	9a02      	ldr	r2, [sp, #8]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 8016b02:	0001      	movs	r1, r0
 8016b04:	1836      	adds	r6, r6, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8016b06:	1898      	adds	r0, r3, r2
 8016b08:	2280      	movs	r2, #128	; 0x80
 8016b0a:	0212      	lsls	r2, r2, #8
 8016b0c:	4290      	cmp	r0, r2
 8016b0e:	d229      	bcs.n	8016b64 <lv_txt_get_size+0xe0>
            size_res->y += line_space;
 8016b10:	9a03      	ldr	r2, [sp, #12]
 8016b12:	4694      	mov	ip, r2
 8016b14:	4463      	add	r3, ip
 8016b16:	8063      	strh	r3, [r4, #2]
    if(txt[0] == '\0') return 0;
 8016b18:	782b      	ldrb	r3, [r5, #0]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d029      	beq.n	8016b72 <lv_txt_get_size+0xee>
 8016b1e:	464b      	mov	r3, r9
 8016b20:	003a      	movs	r2, r7
 8016b22:	9300      	str	r3, [sp, #0]
 8016b24:	0028      	movs	r0, r5
 8016b26:	4643      	mov	r3, r8
 8016b28:	f7ff fd76 	bl	8016618 <lv_txt_get_width.part.0>
        size_res->x = LV_MAX(act_line_length, size_res->x);
 8016b2c:	8823      	ldrh	r3, [r4, #0]
 8016b2e:	1c1a      	adds	r2, r3, #0
 8016b30:	b21b      	sxth	r3, r3
 8016b32:	4283      	cmp	r3, r0
 8016b34:	da00      	bge.n	8016b38 <lv_txt_get_size+0xb4>
 8016b36:	1c02      	adds	r2, r0, #0
    while(text[line_start] != '\0') {
 8016b38:	4653      	mov	r3, sl
        size_res->x = LV_MAX(act_line_length, size_res->x);
 8016b3a:	8022      	strh	r2, [r4, #0]
    while(text[line_start] != '\0') {
 8016b3c:	199b      	adds	r3, r3, r6
 8016b3e:	781a      	ldrb	r2, [r3, #0]
 8016b40:	001d      	movs	r5, r3
 8016b42:	2a00      	cmp	r2, #0
 8016b44:	d1d0      	bne.n	8016ae8 <lv_txt_get_size+0x64>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8016b46:	2e00      	cmp	r6, #0
 8016b48:	d005      	beq.n	8016b56 <lv_txt_get_size+0xd2>
 8016b4a:	3b01      	subs	r3, #1
 8016b4c:	781b      	ldrb	r3, [r3, #0]
 8016b4e:	2b0a      	cmp	r3, #10
 8016b50:	d025      	beq.n	8016b9e <lv_txt_get_size+0x11a>
 8016b52:	2b0d      	cmp	r3, #13
 8016b54:	d023      	beq.n	8016b9e <lv_txt_get_size+0x11a>
    if(size_res->y == 0)
 8016b56:	2202      	movs	r2, #2
 8016b58:	5ea3      	ldrsh	r3, [r4, r2]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d01c      	beq.n	8016b98 <lv_txt_get_size+0x114>
        size_res->y -= line_space;
 8016b5e:	9a05      	ldr	r2, [sp, #20]
 8016b60:	1a9b      	subs	r3, r3, r2
 8016b62:	8063      	strh	r3, [r4, #2]
}
 8016b64:	b007      	add	sp, #28
 8016b66:	bcf0      	pop	{r4, r5, r6, r7}
 8016b68:	46bb      	mov	fp, r7
 8016b6a:	46b2      	mov	sl, r6
 8016b6c:	46a9      	mov	r9, r5
 8016b6e:	46a0      	mov	r8, r4
 8016b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
        size_res->x = LV_MAX(act_line_length, size_res->x);
 8016b72:	2100      	movs	r1, #0
 8016b74:	5e63      	ldrsh	r3, [r4, r1]
 8016b76:	8822      	ldrh	r2, [r4, #0]
 8016b78:	43db      	mvns	r3, r3
 8016b7a:	17db      	asrs	r3, r3, #31
 8016b7c:	4013      	ands	r3, r2
 8016b7e:	8023      	strh	r3, [r4, #0]
    while(text[line_start] != '\0') {
 8016b80:	4653      	mov	r3, sl
 8016b82:	199d      	adds	r5, r3, r6
 8016b84:	782a      	ldrb	r2, [r5, #0]
 8016b86:	002b      	movs	r3, r5
 8016b88:	2a00      	cmp	r2, #0
 8016b8a:	d1ad      	bne.n	8016ae8 <lv_txt_get_size+0x64>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8016b8c:	2e00      	cmp	r6, #0
 8016b8e:	d1dc      	bne.n	8016b4a <lv_txt_get_size+0xc6>
 8016b90:	e7e1      	b.n	8016b56 <lv_txt_get_size+0xd2>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8016b92:	4b06      	ldr	r3, [pc, #24]	; (8016bac <lv_txt_get_size+0x128>)
 8016b94:	469b      	mov	fp, r3
 8016b96:	e795      	b.n	8016ac4 <lv_txt_get_size+0x40>
        size_res->y = letter_height;
 8016b98:	9b04      	ldr	r3, [sp, #16]
 8016b9a:	8063      	strh	r3, [r4, #2]
 8016b9c:	e7e2      	b.n	8016b64 <lv_txt_get_size+0xe0>
        size_res->y += letter_height + line_space;
 8016b9e:	9a03      	ldr	r2, [sp, #12]
 8016ba0:	8863      	ldrh	r3, [r4, #2]
 8016ba2:	4694      	mov	ip, r2
 8016ba4:	4463      	add	r3, ip
 8016ba6:	b21b      	sxth	r3, r3
 8016ba8:	e7d7      	b.n	8016b5a <lv_txt_get_size+0xd6>
 8016baa:	46c0      	nop			; (mov r8, r8)
 8016bac:	00001fff 	.word	0x00001fff

08016bb0 <lv_txt_get_width>:
{
 8016bb0:	b530      	push	{r4, r5, lr}
 8016bb2:	b083      	sub	sp, #12
 8016bb4:	ac06      	add	r4, sp, #24
 8016bb6:	7824      	ldrb	r4, [r4, #0]
    if(txt == NULL) return 0;
 8016bb8:	2800      	cmp	r0, #0
 8016bba:	d008      	beq.n	8016bce <lv_txt_get_width+0x1e>
    if(font == NULL) return 0;
 8016bbc:	2a00      	cmp	r2, #0
 8016bbe:	d006      	beq.n	8016bce <lv_txt_get_width+0x1e>
    if(txt[0] == '\0') return 0;
 8016bc0:	7805      	ldrb	r5, [r0, #0]
 8016bc2:	2d00      	cmp	r5, #0
 8016bc4:	d003      	beq.n	8016bce <lv_txt_get_width+0x1e>
 8016bc6:	9400      	str	r4, [sp, #0]
 8016bc8:	f7ff fd26 	bl	8016618 <lv_txt_get_width.part.0>
 8016bcc:	e000      	b.n	8016bd0 <lv_txt_get_width+0x20>
    if(txt == NULL) return 0;
 8016bce:	2000      	movs	r0, #0
}
 8016bd0:	b003      	add	sp, #12
 8016bd2:	bd30      	pop	{r4, r5, pc}

08016bd4 <_lv_txt_is_cmd>:
{
 8016bd4:	0003      	movs	r3, r0
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 8016bd6:	7802      	ldrb	r2, [r0, #0]
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8016bd8:	2923      	cmp	r1, #35	; 0x23
 8016bda:	d003      	beq.n	8016be4 <_lv_txt_is_cmd+0x10>
    bool ret = false;
 8016bdc:	2000      	movs	r0, #0
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8016bde:	2a01      	cmp	r2, #1
 8016be0:	d00e      	beq.n	8016c00 <_lv_txt_is_cmd+0x2c>
}
 8016be2:	4770      	bx	lr
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 8016be4:	2a00      	cmp	r2, #0
 8016be6:	d007      	beq.n	8016bf8 <_lv_txt_is_cmd+0x24>
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 8016be8:	2a01      	cmp	r2, #1
 8016bea:	d00f      	beq.n	8016c0c <_lv_txt_is_cmd+0x38>
    bool ret = false;
 8016bec:	2000      	movs	r0, #0
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 8016bee:	2a02      	cmp	r2, #2
 8016bf0:	d1f7      	bne.n	8016be2 <_lv_txt_is_cmd+0xe>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8016bf2:	7018      	strb	r0, [r3, #0]
            ret    = true;
 8016bf4:	3001      	adds	r0, #1
 8016bf6:	e7f4      	b.n	8016be2 <_lv_txt_is_cmd+0xe>
            *state = LV_TEXT_CMD_STATE_PAR;
 8016bf8:	3201      	adds	r2, #1
 8016bfa:	7002      	strb	r2, [r0, #0]
        ret = true;
 8016bfc:	2001      	movs	r0, #1
 8016bfe:	e7f0      	b.n	8016be2 <_lv_txt_is_cmd+0xe>
        if(c == ' ') {
 8016c00:	2920      	cmp	r1, #32
 8016c02:	d107      	bne.n	8016c14 <_lv_txt_is_cmd+0x40>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8016c04:	3201      	adds	r2, #1
 8016c06:	701a      	strb	r2, [r3, #0]
        ret = true;
 8016c08:	3001      	adds	r0, #1
 8016c0a:	e7ea      	b.n	8016be2 <_lv_txt_is_cmd+0xe>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	7002      	strb	r2, [r0, #0]
    bool ret = false;
 8016c10:	2000      	movs	r0, #0
 8016c12:	e7e6      	b.n	8016be2 <_lv_txt_is_cmd+0xe>
        ret = true;
 8016c14:	2001      	movs	r0, #1
 8016c16:	e7e4      	b.n	8016be2 <_lv_txt_is_cmd+0xe>

08016c18 <_lv_txt_encoded_letter_next_2>:
{
 8016c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c1a:	46c6      	mov	lr, r8
 8016c1c:	001d      	movs	r5, r3
    *letter = _lv_txt_encoded_next(txt, ofs);
 8016c1e:	4b0b      	ldr	r3, [pc, #44]	; (8016c4c <_lv_txt_encoded_letter_next_2+0x34>)
{
 8016c20:	000f      	movs	r7, r1
    *letter = _lv_txt_encoded_next(txt, ofs);
 8016c22:	4698      	mov	r8, r3
 8016c24:	0029      	movs	r1, r5
{
 8016c26:	b500      	push	{lr}
    *letter = _lv_txt_encoded_next(txt, ofs);
 8016c28:	681b      	ldr	r3, [r3, #0]
{
 8016c2a:	0004      	movs	r4, r0
 8016c2c:	0016      	movs	r6, r2
    *letter = _lv_txt_encoded_next(txt, ofs);
 8016c2e:	4798      	blx	r3
 8016c30:	6038      	str	r0, [r7, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8016c32:	2800      	cmp	r0, #0
 8016c34:	d005      	beq.n	8016c42 <_lv_txt_encoded_letter_next_2+0x2a>
 8016c36:	4643      	mov	r3, r8
 8016c38:	6828      	ldr	r0, [r5, #0]
 8016c3a:	2100      	movs	r1, #0
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	1820      	adds	r0, r4, r0
 8016c40:	4798      	blx	r3
 8016c42:	6030      	str	r0, [r6, #0]
}
 8016c44:	bc80      	pop	{r7}
 8016c46:	46b8      	mov	r8, r7
 8016c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c4a:	46c0      	nop			; (mov r8, r8)
 8016c4c:	20000084 	.word	0x20000084

08016c50 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8016c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c52:	4657      	mov	r7, sl
 8016c54:	464e      	mov	r6, r9
 8016c56:	4645      	mov	r5, r8
 8016c58:	46de      	mov	lr, fp
 8016c5a:	b5e0      	push	{r5, r6, r7, lr}
 8016c5c:	4698      	mov	r8, r3
 8016c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c60:	4681      	mov	r9, r0
 8016c62:	000f      	movs	r7, r1
 8016c64:	1e14      	subs	r4, r2, #0
 8016c66:	469a      	mov	sl, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8016c68:	d014      	beq.n	8016c94 <_lv_utils_bsearch+0x44>
 8016c6a:	2301      	movs	r3, #1
 8016c6c:	469b      	mov	fp, r3
 8016c6e:	e005      	b.n	8016c7c <_lv_utils_bsearch+0x2c>
        middle += (n / 2) * size;
        if((c = (*cmp)(key, middle)) > 0) {
            n    = (n / 2) - ((n & 1) == 0);
 8016c70:	465b      	mov	r3, fp
            base = (middle += size);
 8016c72:	4445      	add	r5, r8
 8016c74:	43a3      	bics	r3, r4
 8016c76:	002f      	movs	r7, r5
            n    = (n / 2) - ((n & 1) == 0);
 8016c78:	1af4      	subs	r4, r6, r3
    for(middle = base; n != 0;) {
 8016c7a:	d00b      	beq.n	8016c94 <_lv_utils_bsearch+0x44>
        middle += (n / 2) * size;
 8016c7c:	4645      	mov	r5, r8
 8016c7e:	0866      	lsrs	r6, r4, #1
 8016c80:	4375      	muls	r5, r6
 8016c82:	197d      	adds	r5, r7, r5
        if((c = (*cmp)(key, middle)) > 0) {
 8016c84:	0029      	movs	r1, r5
 8016c86:	4648      	mov	r0, r9
 8016c88:	47d0      	blx	sl
 8016c8a:	2800      	cmp	r0, #0
 8016c8c:	dcf0      	bgt.n	8016c70 <_lv_utils_bsearch+0x20>
        }
        else if(c < 0) {
 8016c8e:	d002      	beq.n	8016c96 <_lv_utils_bsearch+0x46>
            n /= 2;
 8016c90:	1e34      	subs	r4, r6, #0
    for(middle = base; n != 0;) {
 8016c92:	d1f3      	bne.n	8016c7c <_lv_utils_bsearch+0x2c>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 8016c94:	2500      	movs	r5, #0
}
 8016c96:	0028      	movs	r0, r5
 8016c98:	bcf0      	pop	{r4, r5, r6, r7}
 8016c9a:	46bb      	mov	fp, r7
 8016c9c:	46b2      	mov	sl, r6
 8016c9e:	46a9      	mov	r9, r5
 8016ca0:	46a0      	mov	r8, r4
 8016ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016ca4 <lv_btn_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_btn_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8016ca4:	b510      	push	{r4, lr}
 8016ca6:	000c      	movs	r4, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8016ca8:	0020      	movs	r0, r4
 8016caa:	2110      	movs	r1, #16
 8016cac:	f7f1 f8de 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8016cb0:	2180      	movs	r1, #128	; 0x80
 8016cb2:	0020      	movs	r0, r4
 8016cb4:	00c9      	lsls	r1, r1, #3
 8016cb6:	f7f1 f89d 	bl	8007df4 <lv_obj_add_flag>

    LV_TRACE_OBJ_CREATE("finished");
}
 8016cba:	bd10      	pop	{r4, pc}

08016cbc <lv_btn_create>:
{
 8016cbc:	b510      	push	{r4, lr}
 8016cbe:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8016cc0:	4803      	ldr	r0, [pc, #12]	; (8016cd0 <lv_btn_create+0x14>)
 8016cc2:	f7f1 f9a5 	bl	8008010 <lv_obj_class_create_obj>
 8016cc6:	0004      	movs	r4, r0
    lv_obj_class_init_obj(obj);
 8016cc8:	f7f1 fa1a 	bl	8008100 <lv_obj_class_init_obj>
}
 8016ccc:	0020      	movs	r0, r4
 8016cce:	bd10      	pop	{r4, pc}
 8016cd0:	0801bde8 	.word	0x0801bde8

08016cd4 <lv_dropdownlist_destructor>:
{
    LV_UNUSED(class_p);
    lv_dropdown_list_t * list = (lv_dropdown_list_t *)list_obj;
    lv_obj_t * dropdown_obj = list->dropdown;
    lv_dropdown_t * dropdown = (lv_dropdown_t *)dropdown_obj;
    dropdown->list = NULL;
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	6a0b      	ldr	r3, [r1, #32]
 8016cd8:	621a      	str	r2, [r3, #32]
}
 8016cda:	4770      	bx	lr

08016cdc <position_to_selected>:
/**
 * Set the position of list when it is closed to show the selected item
 * @param ddlist pointer to a drop down list
 */
static void position_to_selected(lv_obj_t * dropdown_obj)
{
 8016cdc:	b570      	push	{r4, r5, r6, lr}
 8016cde:	0004      	movs	r4, r0
}

static lv_obj_t * get_label(const lv_obj_t * obj)
{
    lv_dropdown_t * dropdown = (lv_dropdown_t *)obj;
    if(dropdown->list == NULL) return NULL;
 8016ce0:	6a00      	ldr	r0, [r0, #32]
 8016ce2:	2800      	cmp	r0, #0
 8016ce4:	d00c      	beq.n	8016d00 <position_to_selected+0x24>

    return lv_obj_get_child(dropdown->list, 0);
 8016ce6:	2100      	movs	r1, #0
 8016ce8:	f7f7 f89e 	bl	800de28 <lv_obj_get_child>
 8016cec:	1e05      	subs	r5, r0, #0
    if(label == NULL) return;
 8016cee:	d007      	beq.n	8016d00 <position_to_selected+0x24>
    if(lv_obj_get_height(label) <= lv_obj_get_content_height(dropdown_obj)) return;
 8016cf0:	f7f1 fffa 	bl	8008ce8 <lv_obj_get_height>
 8016cf4:	0006      	movs	r6, r0
 8016cf6:	0020      	movs	r0, r4
 8016cf8:	f7f2 f81c 	bl	8008d34 <lv_obj_get_content_height>
 8016cfc:	4286      	cmp	r6, r0
 8016cfe:	dc00      	bgt.n	8016d02 <position_to_selected+0x26>
}
 8016d00:	bd70      	pop	{r4, r5, r6, pc}
    return (lv_opa_t)v.num;
}

static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8016d02:	2257      	movs	r2, #87	; 0x57
 8016d04:	2100      	movs	r1, #0
 8016d06:	0028      	movs	r0, r5
 8016d08:	f7f5 fc5c 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8016d0c:	2259      	movs	r2, #89	; 0x59
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 8016d0e:	2308      	movs	r3, #8
 8016d10:	5ec6      	ldrsh	r6, [r0, r3]
 8016d12:	2100      	movs	r1, #0
 8016d14:	0028      	movs	r0, r5
 8016d16:	f7f5 fc55 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 8016d1a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    lv_coord_t unit_h = font_h + line_space;
 8016d1c:	1836      	adds	r6, r6, r0
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 8016d1e:	4371      	muls	r1, r6
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 8016d20:	6a20      	ldr	r0, [r4, #32]
 8016d22:	2200      	movs	r2, #0
 8016d24:	b209      	sxth	r1, r1
 8016d26:	f7f5 f851 	bl	800bdcc <lv_obj_scroll_to_y>
    lv_obj_invalidate(dropdown->list);
 8016d2a:	6a20      	ldr	r0, [r4, #32]
 8016d2c:	f7f2 fb72 	bl	8009414 <lv_obj_invalidate>
 8016d30:	e7e6      	b.n	8016d00 <position_to_selected+0x24>
 8016d32:	46c0      	nop			; (mov r8, r8)

08016d34 <draw_box>:
{
 8016d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d36:	46de      	mov	lr, fp
 8016d38:	4657      	mov	r7, sl
 8016d3a:	464e      	mov	r6, r9
 8016d3c:	4645      	mov	r5, r8
 8016d3e:	4693      	mov	fp, r2
 8016d40:	b5e0      	push	{r5, r6, r7, lr}
    if(id == LV_DROPDOWN_PR_NONE) return;
 8016d42:	4a2f      	ldr	r2, [pc, #188]	; (8016e00 <draw_box+0xcc>)
{
 8016d44:	0006      	movs	r6, r0
 8016d46:	000f      	movs	r7, r1
 8016d48:	b091      	sub	sp, #68	; 0x44
    if(id == LV_DROPDOWN_PR_NONE) return;
 8016d4a:	4593      	cmp	fp, r2
 8016d4c:	d04f      	beq.n	8016dee <draw_box+0xba>
    lv_obj_t * list_obj = dropdown->list;
 8016d4e:	6a04      	ldr	r4, [r0, #32]
    lv_state_t state_ori = list_obj->state;
 8016d50:	8ba2      	ldrh	r2, [r4, #28]
 8016d52:	4690      	mov	r8, r2
    if(state != list_obj->state) {
 8016d54:	429a      	cmp	r2, r3
 8016d56:	d004      	beq.n	8016d62 <draw_box+0x2e>
        list_obj->skip_trans = 1;
 8016d58:	2204      	movs	r2, #4
        list_obj->state = state;
 8016d5a:	83a3      	strh	r3, [r4, #28]
        list_obj->skip_trans = 1;
 8016d5c:	7fa3      	ldrb	r3, [r4, #30]
 8016d5e:	4313      	orrs	r3, r2
 8016d60:	77a3      	strb	r3, [r4, #30]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8016d62:	2180      	movs	r1, #128	; 0x80
 8016d64:	2257      	movs	r2, #87	; 0x57
 8016d66:	02c9      	lsls	r1, r1, #11
 8016d68:	0020      	movs	r0, r4
 8016d6a:	f7f5 fc2b 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8016d6e:	2180      	movs	r1, #128	; 0x80
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8016d70:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8016d72:	2259      	movs	r2, #89	; 0x59
 8016d74:	0020      	movs	r0, r4
 8016d76:	02c9      	lsls	r1, r1, #11
 8016d78:	f7f5 fc24 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016d7c:	b203      	sxth	r3, r0
 8016d7e:	469a      	mov	sl, r3
 8016d80:	464b      	mov	r3, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8016d82:	0005      	movs	r5, r0
 8016d84:	2208      	movs	r2, #8
 8016d86:	5e9b      	ldrsh	r3, [r3, r2]
    if(dropdown->list == NULL) return NULL;
 8016d88:	6a30      	ldr	r0, [r6, #32]
 8016d8a:	4699      	mov	r9, r3
 8016d8c:	2800      	cmp	r0, #0
 8016d8e:	d035      	beq.n	8016dfc <draw_box+0xc8>
    return lv_obj_get_child(dropdown->list, 0);
 8016d90:	2100      	movs	r1, #0
 8016d92:	f7f7 f849 	bl	800de28 <lv_obj_get_child>
    rect_area.y1 += id * (font_h + line_space);
 8016d96:	464a      	mov	r2, r9
 8016d98:	465b      	mov	r3, fp
 8016d9a:	4452      	add	r2, sl
 8016d9c:	435a      	muls	r2, r3
    rect_area.y1 -= line_space / 2;
 8016d9e:	4653      	mov	r3, sl
 8016da0:	0fdb      	lsrs	r3, r3, #31
 8016da2:	4453      	add	r3, sl
 8016da4:	105b      	asrs	r3, r3, #1
 8016da6:	1ad3      	subs	r3, r2, r3
 8016da8:	8a42      	ldrh	r2, [r0, #18]
    rect_area.x1 = dropdown->list->coords.x1;
 8016daa:	4669      	mov	r1, sp
    rect_area.y1 -= line_space / 2;
 8016dac:	189b      	adds	r3, r3, r2
 8016dae:	466a      	mov	r2, sp
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 8016db0:	3d01      	subs	r5, #1
    rect_area.y1 -= line_space / 2;
 8016db2:	b29b      	uxth	r3, r3
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 8016db4:	444d      	add	r5, r9
    rect_area.y1 -= line_space / 2;
 8016db6:	8053      	strh	r3, [r2, #2]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 8016db8:	195b      	adds	r3, r3, r5
 8016dba:	80d3      	strh	r3, [r2, #6]
    rect_area.x1 = dropdown->list->coords.x1;
 8016dbc:	6a33      	ldr	r3, [r6, #32]
    lv_draw_rect_dsc_init(&sel_rect);
 8016dbe:	a802      	add	r0, sp, #8
    rect_area.x1 = dropdown->list->coords.x1;
 8016dc0:	8a1a      	ldrh	r2, [r3, #16]
 8016dc2:	800a      	strh	r2, [r1, #0]
    rect_area.x2 = dropdown->list->coords.x2;
 8016dc4:	8a9b      	ldrh	r3, [r3, #20]
 8016dc6:	808b      	strh	r3, [r1, #4]
    lv_draw_rect_dsc_init(&sel_rect);
 8016dc8:	f7f9 f85e 	bl	800fe88 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(list_obj,  LV_PART_SELECTED, &sel_rect);
 8016dcc:	2180      	movs	r1, #128	; 0x80
 8016dce:	0020      	movs	r0, r4
 8016dd0:	aa02      	add	r2, sp, #8
 8016dd2:	02c9      	lsls	r1, r1, #11
 8016dd4:	f7f1 fa30 	bl	8008238 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &sel_rect, &rect_area);
 8016dd8:	466a      	mov	r2, sp
 8016dda:	0038      	movs	r0, r7
 8016ddc:	a902      	add	r1, sp, #8
 8016dde:	f7f9 f879 	bl	800fed4 <lv_draw_rect>
    list_obj->state = state_ori;
 8016de2:	4643      	mov	r3, r8
    list_obj->skip_trans = 0;
 8016de4:	2204      	movs	r2, #4
    list_obj->state = state_ori;
 8016de6:	83a3      	strh	r3, [r4, #28]
    list_obj->skip_trans = 0;
 8016de8:	7fa3      	ldrb	r3, [r4, #30]
 8016dea:	4393      	bics	r3, r2
 8016dec:	77a3      	strb	r3, [r4, #30]
}
 8016dee:	b011      	add	sp, #68	; 0x44
 8016df0:	bcf0      	pop	{r4, r5, r6, r7}
 8016df2:	46bb      	mov	fp, r7
 8016df4:	46b2      	mov	sl, r6
 8016df6:	46a9      	mov	r9, r5
 8016df8:	46a0      	mov	r8, r4
 8016dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rect_area.y1 = label->coords.y1;
 8016dfc:	8a43      	ldrh	r3, [r0, #18]
 8016dfe:	deff      	udf	#255	; 0xff
 8016e00:	0000ffff 	.word	0x0000ffff

08016e04 <draw_box_label>:
{
 8016e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e06:	46c6      	mov	lr, r8
 8016e08:	4690      	mov	r8, r2
 8016e0a:	b500      	push	{lr}
    if(id == LV_DROPDOWN_PR_NONE) return;
 8016e0c:	4a32      	ldr	r2, [pc, #200]	; (8016ed8 <draw_box_label+0xd4>)
{
 8016e0e:	0006      	movs	r6, r0
 8016e10:	000d      	movs	r5, r1
 8016e12:	b090      	sub	sp, #64	; 0x40
    if(id == LV_DROPDOWN_PR_NONE) return;
 8016e14:	4590      	cmp	r8, r2
 8016e16:	d047      	beq.n	8016ea8 <draw_box_label+0xa4>
    lv_obj_t * list_obj = dropdown->list;
 8016e18:	6a04      	ldr	r4, [r0, #32]
    lv_state_t state_orig = list_obj->state;
 8016e1a:	8ba7      	ldrh	r7, [r4, #28]
    if(state != list_obj->state) {
 8016e1c:	429f      	cmp	r7, r3
 8016e1e:	d004      	beq.n	8016e2a <draw_box_label+0x26>
        list_obj->skip_trans = 1;
 8016e20:	2204      	movs	r2, #4
        list_obj->state = state;
 8016e22:	83a3      	strh	r3, [r4, #28]
        list_obj->skip_trans = 1;
 8016e24:	7fa3      	ldrb	r3, [r4, #30]
 8016e26:	4313      	orrs	r3, r2
 8016e28:	77a3      	strb	r3, [r4, #30]
    lv_draw_label_dsc_init(&label_dsc);
 8016e2a:	a808      	add	r0, sp, #32
 8016e2c:	f7f8 fc02 	bl	800f634 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(list_obj, LV_PART_SELECTED, &label_dsc);
 8016e30:	2180      	movs	r1, #128	; 0x80
 8016e32:	0020      	movs	r0, r4
 8016e34:	aa08      	add	r2, sp, #32
 8016e36:	02c9      	lsls	r1, r1, #11
 8016e38:	f7f1 fae6 	bl	8008408 <lv_obj_init_draw_label_dsc>
 8016e3c:	2180      	movs	r1, #128	; 0x80
 8016e3e:	2259      	movs	r2, #89	; 0x59
 8016e40:	0020      	movs	r0, r4
 8016e42:	02c9      	lsls	r1, r1, #11
 8016e44:	f7f5 fbbe 	bl	800c5c4 <lv_obj_get_style_prop>
    label_dsc.line_space = lv_obj_get_style_text_line_space(list_obj,
 8016e48:	ab02      	add	r3, sp, #8
 8016e4a:	8558      	strh	r0, [r3, #42]	; 0x2a
    if(dropdown->list == NULL) return NULL;
 8016e4c:	6a30      	ldr	r0, [r6, #32]
 8016e4e:	2800      	cmp	r0, #0
 8016e50:	d02a      	beq.n	8016ea8 <draw_box_label+0xa4>
    return lv_obj_get_child(dropdown->list, 0);
 8016e52:	2100      	movs	r1, #0
 8016e54:	f7f6 ffe8 	bl	800de28 <lv_obj_get_child>
 8016e58:	1e06      	subs	r6, r0, #0
    if(label == NULL) return;
 8016e5a:	d025      	beq.n	8016ea8 <draw_box_label+0xa4>
 8016e5c:	9b08      	ldr	r3, [sp, #32]
 8016e5e:	9303      	str	r3, [sp, #12]
 8016e60:	2008      	movs	r0, #8
 8016e62:	5e18      	ldrsh	r0, [r3, r0]
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 8016e64:	ab02      	add	r3, sp, #8
 8016e66:	212a      	movs	r1, #42	; 0x2a
 8016e68:	5e59      	ldrsh	r1, [r3, r1]
 8016e6a:	4643      	mov	r3, r8
 8016e6c:	1842      	adds	r2, r0, r1
 8016e6e:	435a      	muls	r2, r3
    area_sel.y1 -= label_dsc.line_space / 2;
 8016e70:	0fcb      	lsrs	r3, r1, #31
 8016e72:	185b      	adds	r3, r3, r1
 8016e74:	105b      	asrs	r3, r3, #1
 8016e76:	1ad2      	subs	r2, r2, r3
 8016e78:	8a73      	ldrh	r3, [r6, #18]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 8016e7a:	3901      	subs	r1, #1
    area_sel.y1 -= label_dsc.line_space / 2;
 8016e7c:	18d3      	adds	r3, r2, r3
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 8016e7e:	1809      	adds	r1, r1, r0
    area_sel.y1 -= label_dsc.line_space / 2;
 8016e80:	aa04      	add	r2, sp, #16
 8016e82:	b29b      	uxth	r3, r3
 8016e84:	8053      	strh	r3, [r2, #2]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 8016e86:	185b      	adds	r3, r3, r1
 8016e88:	80d3      	strh	r3, [r2, #6]
    area_sel.x1 = list_obj->coords.x1;
 8016e8a:	8a23      	ldrh	r3, [r4, #16]
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 8016e8c:	68a9      	ldr	r1, [r5, #8]
    area_sel.x1 = list_obj->coords.x1;
 8016e8e:	8013      	strh	r3, [r2, #0]
    area_sel.x2 = list_obj->coords.x2;
 8016e90:	8aa3      	ldrh	r3, [r4, #20]
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 8016e92:	a806      	add	r0, sp, #24
    area_sel.x2 = list_obj->coords.x2;
 8016e94:	8093      	strh	r3, [r2, #4]
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 8016e96:	f7fd f9e3 	bl	8014260 <_lv_area_intersect>
    if(area_ok) {
 8016e9a:	2800      	cmp	r0, #0
 8016e9c:	d108      	bne.n	8016eb0 <draw_box_label+0xac>
    list_obj->skip_trans = 0;
 8016e9e:	2204      	movs	r2, #4
 8016ea0:	7fa3      	ldrb	r3, [r4, #30]
    list_obj->state = state_orig;
 8016ea2:	83a7      	strh	r7, [r4, #28]
    list_obj->skip_trans = 0;
 8016ea4:	4393      	bics	r3, r2
 8016ea6:	77a3      	strb	r3, [r4, #30]
}
 8016ea8:	b010      	add	sp, #64	; 0x40
 8016eaa:	bc80      	pop	{r7}
 8016eac:	46b8      	mov	r8, r7
 8016eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8016eb0:	68ab      	ldr	r3, [r5, #8]
        lv_draw_label(draw_ctx, &label_dsc, &label->coords, lv_label_get_text(label), NULL);
 8016eb2:	0030      	movs	r0, r6
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8016eb4:	4698      	mov	r8, r3
        draw_ctx->clip_area = &mask_sel;
 8016eb6:	ab06      	add	r3, sp, #24
 8016eb8:	60ab      	str	r3, [r5, #8]
        lv_draw_label(draw_ctx, &label_dsc, &label->coords, lv_label_get_text(label), NULL);
 8016eba:	f002 f987 	bl	80191cc <lv_label_get_text>
 8016ebe:	2100      	movs	r1, #0
 8016ec0:	0032      	movs	r2, r6
 8016ec2:	0003      	movs	r3, r0
 8016ec4:	9100      	str	r1, [sp, #0]
 8016ec6:	0028      	movs	r0, r5
 8016ec8:	3210      	adds	r2, #16
 8016eca:	a908      	add	r1, sp, #32
 8016ecc:	f7f8 fbca 	bl	800f664 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8016ed0:	4643      	mov	r3, r8
 8016ed2:	60ab      	str	r3, [r5, #8]
 8016ed4:	e7e3      	b.n	8016e9e <draw_box_label+0x9a>
 8016ed6:	46c0      	nop			; (mov r8, r8)
 8016ed8:	0000ffff 	.word	0x0000ffff

08016edc <lv_dropdownlist_constructor>:
{
 8016edc:	b510      	push	{r4, lr}
 8016ede:	000c      	movs	r4, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8016ee0:	2180      	movs	r1, #128	; 0x80
 8016ee2:	0020      	movs	r0, r4
 8016ee4:	00c9      	lsls	r1, r1, #3
 8016ee6:	f7f0 ffc1 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 8016eea:	0020      	movs	r0, r4
 8016eec:	2104      	movs	r1, #4
 8016eee:	f7f0 ffbd 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_IGNORE_LAYOUT);
 8016ef2:	2180      	movs	r1, #128	; 0x80
 8016ef4:	0020      	movs	r0, r4
 8016ef6:	0289      	lsls	r1, r1, #10
 8016ef8:	f7f0 ff7c 	bl	8007df4 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_HIDDEN);
 8016efc:	2101      	movs	r1, #1
 8016efe:	0020      	movs	r0, r4
 8016f00:	f7f0 ff78 	bl	8007df4 <lv_obj_add_flag>
    lv_label_create(obj);
 8016f04:	0020      	movs	r0, r4
 8016f06:	f002 f8b3 	bl	8019070 <lv_label_create>
}
 8016f0a:	bd10      	pop	{r4, pc}

08016f0c <lv_dropdown_destructor>:
    if(dropdown->list) {
 8016f0c:	6a08      	ldr	r0, [r1, #32]
{
 8016f0e:	b570      	push	{r4, r5, r6, lr}
 8016f10:	000c      	movs	r4, r1
    if(dropdown->list) {
 8016f12:	2800      	cmp	r0, #0
 8016f14:	d003      	beq.n	8016f1e <lv_dropdown_destructor+0x12>
        lv_obj_del(dropdown->list);
 8016f16:	f7f6 fde3 	bl	800dae0 <lv_obj_del>
        dropdown->list = NULL;
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	6223      	str	r3, [r4, #32]
    if(!dropdown->static_txt) {
 8016f1e:	2210      	movs	r2, #16
 8016f20:	2338      	movs	r3, #56	; 0x38
 8016f22:	0015      	movs	r5, r2
 8016f24:	5ce3      	ldrb	r3, [r4, r3]
 8016f26:	401d      	ands	r5, r3
 8016f28:	421a      	tst	r2, r3
 8016f2a:	d000      	beq.n	8016f2e <lv_dropdown_destructor+0x22>
}
 8016f2c:	bd70      	pop	{r4, r5, r6, pc}
        lv_mem_free(dropdown->options);
 8016f2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016f30:	f7fd ffc8 	bl	8014ec4 <lv_mem_free>
        dropdown->options = NULL;
 8016f34:	62e5      	str	r5, [r4, #44]	; 0x2c
}
 8016f36:	e7f9      	b.n	8016f2c <lv_dropdown_destructor+0x20>

08016f38 <lv_dropdown_constructor>:
{
 8016f38:	b570      	push	{r4, r5, r6, lr}
    dropdown->list          = NULL;
 8016f3a:	2500      	movs	r5, #0
    dropdown->dir = LV_DIR_BOTTOM;
 8016f3c:	2238      	movs	r2, #56	; 0x38
    dropdown->symbol         = LV_SYMBOL_DOWN;
 8016f3e:	4b29      	ldr	r3, [pc, #164]	; (8016fe4 <lv_dropdown_constructor+0xac>)
    dropdown->list          = NULL;
 8016f40:	620d      	str	r5, [r1, #32]
    dropdown->symbol         = LV_SYMBOL_DOWN;
 8016f42:	628b      	str	r3, [r1, #40]	; 0x28
    dropdown->option_cnt      = 0;
 8016f44:	4b28      	ldr	r3, [pc, #160]	; (8016fe8 <lv_dropdown_constructor+0xb0>)
    dropdown->text         = NULL;
 8016f46:	624d      	str	r5, [r1, #36]	; 0x24
    dropdown->options     = NULL;
 8016f48:	62cd      	str	r5, [r1, #44]	; 0x2c
    dropdown->option_cnt      = 0;
 8016f4a:	630d      	str	r5, [r1, #48]	; 0x30
 8016f4c:	634b      	str	r3, [r1, #52]	; 0x34
    dropdown->dir = LV_DIR_BOTTOM;
 8016f4e:	5c8b      	ldrb	r3, [r1, r2]
{
 8016f50:	000c      	movs	r4, r1
    dropdown->dir = LV_DIR_BOTTOM;
 8016f52:	213f      	movs	r1, #63	; 0x3f
 8016f54:	438b      	bics	r3, r1
 8016f56:	2138      	movs	r1, #56	; 0x38
 8016f58:	430b      	orrs	r3, r1
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8016f5a:	2180      	movs	r1, #128	; 0x80
    dropdown->dir = LV_DIR_BOTTOM;
 8016f5c:	54a3      	strb	r3, [r4, r2]
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8016f5e:	00c9      	lsls	r1, r1, #3
 8016f60:	0020      	movs	r0, r4
 8016f62:	f7f0 ff47 	bl	8007df4 <lv_obj_add_flag>
    dropdown->option_cnt = 0;
 8016f66:	2100      	movs	r1, #0
    for(i = 0; options[i] != '\0'; i++) {
 8016f68:	2370      	movs	r3, #112	; 0x70
 8016f6a:	4a20      	ldr	r2, [pc, #128]	; (8016fec <lv_dropdown_constructor+0xb4>)
    dropdown->option_cnt = 0;
 8016f6c:	8625      	strh	r5, [r4, #48]	; 0x30
        if(options[i] == '\n') dropdown->option_cnt++;
 8016f6e:	2b0a      	cmp	r3, #10
 8016f70:	d02e      	beq.n	8016fd0 <lv_dropdown_constructor+0x98>
    for(i = 0; options[i] != '\0'; i++) {
 8016f72:	3201      	adds	r2, #1
 8016f74:	1e53      	subs	r3, r2, #1
 8016f76:	781b      	ldrb	r3, [r3, #0]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d1f8      	bne.n	8016f6e <lv_dropdown_constructor+0x36>
    dropdown->sel_opt_id      = 0;
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	8663      	strh	r3, [r4, #50]	; 0x32
    dropdown->sel_opt_id_orig = 0;
 8016f80:	86a3      	strh	r3, [r4, #52]	; 0x34
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 8016f82:	3338      	adds	r3, #56	; 0x38
 8016f84:	5ce3      	ldrb	r3, [r4, r3]
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 8016f86:	3101      	adds	r1, #1
 8016f88:	8621      	strh	r1, [r4, #48]	; 0x30
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 8016f8a:	06db      	lsls	r3, r3, #27
 8016f8c:	d404      	bmi.n	8016f98 <lv_dropdown_constructor+0x60>
 8016f8e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016f90:	2800      	cmp	r0, #0
 8016f92:	d001      	beq.n	8016f98 <lv_dropdown_constructor+0x60>
        lv_mem_free(dropdown->options);
 8016f94:	f7fd ff96 	bl	8014ec4 <lv_mem_free>
    dropdown->static_txt = 1;
 8016f98:	2238      	movs	r2, #56	; 0x38
 8016f9a:	2110      	movs	r1, #16
 8016f9c:	5ca3      	ldrb	r3, [r4, r2]
    lv_obj_invalidate(obj);
 8016f9e:	0020      	movs	r0, r4
    dropdown->static_txt = 1;
 8016fa0:	430b      	orrs	r3, r1
 8016fa2:	54a3      	strb	r3, [r4, r2]
    dropdown->options = (char *)options;
 8016fa4:	4b12      	ldr	r3, [pc, #72]	; (8016ff0 <lv_dropdown_constructor+0xb8>)
 8016fa6:	62e3      	str	r3, [r4, #44]	; 0x2c
    lv_obj_invalidate(obj);
 8016fa8:	f7f2 fa34 	bl	8009414 <lv_obj_invalidate>
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 8016fac:	6a20      	ldr	r0, [r4, #32]
 8016fae:	2800      	cmp	r0, #0
 8016fb0:	d001      	beq.n	8016fb6 <lv_dropdown_constructor+0x7e>
 8016fb2:	f7f2 fa2f 	bl	8009414 <lv_obj_invalidate>
    dropdown->list = lv_dropdown_list_create(lv_obj_get_screen(obj));
 8016fb6:	0020      	movs	r0, r4
 8016fb8:	f7f6 ff00 	bl	800ddbc <lv_obj_get_screen>
 8016fbc:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdownlist_class, parent);
 8016fbe:	480d      	ldr	r0, [pc, #52]	; (8016ff4 <lv_dropdown_constructor+0xbc>)
 8016fc0:	f7f1 f826 	bl	8008010 <lv_obj_class_create_obj>
 8016fc4:	0005      	movs	r5, r0
    lv_obj_class_init_obj(obj);
 8016fc6:	f7f1 f89b 	bl	8008100 <lv_obj_class_init_obj>
    dropdown->list = lv_dropdown_list_create(lv_obj_get_screen(obj));
 8016fca:	6225      	str	r5, [r4, #32]
    list->dropdown = obj;
 8016fcc:	622c      	str	r4, [r5, #32]
}
 8016fce:	bd70      	pop	{r4, r5, r6, pc}
        if(options[i] == '\n') dropdown->option_cnt++;
 8016fd0:	3101      	adds	r1, #1
 8016fd2:	b289      	uxth	r1, r1
    for(i = 0; options[i] != '\0'; i++) {
 8016fd4:	3201      	adds	r2, #1
        if(options[i] == '\n') dropdown->option_cnt++;
 8016fd6:	8621      	strh	r1, [r4, #48]	; 0x30
    for(i = 0; options[i] != '\0'; i++) {
 8016fd8:	1e53      	subs	r3, r2, #1
 8016fda:	781b      	ldrb	r3, [r3, #0]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d1c6      	bne.n	8016f6e <lv_dropdown_constructor+0x36>
 8016fe0:	e7cc      	b.n	8016f7c <lv_dropdown_constructor+0x44>
 8016fe2:	46c0      	nop			; (mov r8, r8)
 8016fe4:	0801be00 	.word	0x0801be00
 8016fe8:	ffff0000 	.word	0xffff0000
 8016fec:	0801be06 	.word	0x0801be06
 8016ff0:	0801be04 	.word	0x0801be04
 8016ff4:	0801be38 	.word	0x0801be38

08016ff8 <lv_dropdown_list_event>:
{
 8016ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ffa:	46ce      	mov	lr, r9
 8016ffc:	4647      	mov	r7, r8
 8016ffe:	b580      	push	{r7, lr}
    lv_event_code_t code = lv_event_get_code(e);
 8017000:	0008      	movs	r0, r1
{
 8017002:	b083      	sub	sp, #12
 8017004:	000c      	movs	r4, r1
    lv_event_code_t code = lv_event_get_code(e);
 8017006:	f7ed fe4f 	bl	8004ca8 <lv_event_get_code>
 801700a:	0005      	movs	r5, r0
    if(code != LV_EVENT_DRAW_POST) {
 801700c:	2818      	cmp	r0, #24
 801700e:	d01c      	beq.n	801704a <lv_dropdown_list_event+0x52>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 8017010:	0021      	movs	r1, r4
 8017012:	489b      	ldr	r0, [pc, #620]	; (8017280 <lv_dropdown_list_event+0x288>)
 8017014:	f7ed fe2c 	bl	8004c70 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8017018:	2801      	cmp	r0, #1
 801701a:	d004      	beq.n	8017026 <lv_dropdown_list_event+0x2e>
}
 801701c:	b003      	add	sp, #12
 801701e:	bcc0      	pop	{r6, r7}
 8017020:	46b9      	mov	r9, r7
 8017022:	46b0      	mov	r8, r6
 8017024:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_obj_t * list = lv_event_get_target(e);
 8017026:	0020      	movs	r0, r4
 8017028:	f7ed fe3a 	bl	8004ca0 <lv_event_get_target>
 801702c:	0004      	movs	r4, r0
    lv_obj_t * dropdown_obj = ((lv_dropdown_list_t *)list)->dropdown;
 801702e:	6a06      	ldr	r6, [r0, #32]
    if(code == LV_EVENT_RELEASED) {
 8017030:	2d08      	cmp	r5, #8
 8017032:	d047      	beq.n	80170c4 <lv_dropdown_list_event+0xcc>
    else if(code == LV_EVENT_PRESSED) {
 8017034:	2d01      	cmp	r5, #1
 8017036:	d100      	bne.n	801703a <lv_dropdown_list_event+0x42>
 8017038:	e07a      	b.n	8017130 <lv_dropdown_list_event+0x138>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 801703a:	2d09      	cmp	r5, #9
 801703c:	d1ee      	bne.n	801701c <lv_dropdown_list_event+0x24>
        dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 801703e:	2301      	movs	r3, #1
 8017040:	425b      	negs	r3, r3
 8017042:	86f3      	strh	r3, [r6, #54]	; 0x36
        lv_obj_invalidate(list);
 8017044:	f7f2 f9e6 	bl	8009414 <lv_obj_invalidate>
 8017048:	e7e8      	b.n	801701c <lv_dropdown_list_event+0x24>
    lv_obj_t * list = lv_event_get_target(e);
 801704a:	0020      	movs	r0, r4
 801704c:	f7ed fe28 	bl	8004ca0 <lv_event_get_target>
    lv_obj_t * list_obj = lv_event_get_target(e);
 8017050:	0020      	movs	r0, r4
 8017052:	f7ed fe25 	bl	8004ca0 <lv_event_get_target>
    lv_obj_t * dropdown_obj = list->dropdown;
 8017056:	6a06      	ldr	r6, [r0, #32]
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8017058:	0020      	movs	r0, r4
 801705a:	f7ed fe87 	bl	8004d6c <lv_event_get_draw_ctx>
    has_common = _lv_area_intersect(&clip_area_core, draw_ctx->clip_area, &dropdown->list->coords);
 801705e:	6a32      	ldr	r2, [r6, #32]
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8017060:	0005      	movs	r5, r0
    has_common = _lv_area_intersect(&clip_area_core, draw_ctx->clip_area, &dropdown->list->coords);
 8017062:	6881      	ldr	r1, [r0, #8]
 8017064:	3210      	adds	r2, #16
 8017066:	4668      	mov	r0, sp
 8017068:	f7fd f8fa 	bl	8014260 <_lv_area_intersect>
    if(has_common) {
 801706c:	2800      	cmp	r0, #0
 801706e:	d024      	beq.n	80170ba <lv_dropdown_list_event+0xc2>
        draw_ctx->clip_area = &clip_area_core;
 8017070:	466b      	mov	r3, sp
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8017072:	68af      	ldr	r7, [r5, #8]
        draw_ctx->clip_area = &clip_area_core;
 8017074:	60ab      	str	r3, [r5, #8]
        if(dropdown->selected_highlight) {
 8017076:	2338      	movs	r3, #56	; 0x38
 8017078:	5cf3      	ldrb	r3, [r6, r3]
            if(dropdown->pr_opt_id == dropdown->sel_opt_id) {
 801707a:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
        if(dropdown->selected_highlight) {
 801707c:	069b      	lsls	r3, r3, #26
 801707e:	d400      	bmi.n	8017082 <lv_dropdown_list_event+0x8a>
 8017080:	e0cc      	b.n	801721c <lv_dropdown_list_event+0x224>
            if(dropdown->pr_opt_id == dropdown->sel_opt_id) {
 8017082:	8e71      	ldrh	r1, [r6, #50]	; 0x32
 8017084:	4291      	cmp	r1, r2
 8017086:	d100      	bne.n	801708a <lv_dropdown_list_event+0x92>
 8017088:	e0d5      	b.n	8017236 <lv_dropdown_list_event+0x23e>
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801708a:	2320      	movs	r3, #32
 801708c:	0029      	movs	r1, r5
 801708e:	0030      	movs	r0, r6
 8017090:	f7ff fe50 	bl	8016d34 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8017094:	2320      	movs	r3, #32
 8017096:	0029      	movs	r1, r5
 8017098:	0030      	movs	r0, r6
 801709a:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
 801709c:	f7ff feb2 	bl	8016e04 <draw_box_label>
                draw_box(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 80170a0:	2301      	movs	r3, #1
 80170a2:	0029      	movs	r1, r5
 80170a4:	0030      	movs	r0, r6
 80170a6:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 80170a8:	f7ff fe44 	bl	8016d34 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 80170ac:	2301      	movs	r3, #1
 80170ae:	0029      	movs	r1, r5
 80170b0:	0030      	movs	r0, r6
 80170b2:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 80170b4:	f7ff fea6 	bl	8016e04 <draw_box_label>
        draw_ctx->clip_area = clip_area_ori;
 80170b8:	60af      	str	r7, [r5, #8]
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 80170ba:	0021      	movs	r1, r4
 80170bc:	4870      	ldr	r0, [pc, #448]	; (8017280 <lv_dropdown_list_event+0x288>)
 80170be:	f7ed fdd7 	bl	8004c70 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 80170c2:	e7ab      	b.n	801701c <lv_dropdown_list_event+0x24>
        if(lv_indev_get_scroll_obj(lv_indev_get_act()) == NULL) {
 80170c4:	f7ee fad2 	bl	800566c <lv_indev_get_act>
 80170c8:	f7ee fb80 	bl	80057cc <lv_indev_get_scroll_obj>
 80170cc:	2800      	cmp	r0, #0
 80170ce:	d1a5      	bne.n	801701c <lv_dropdown_list_event+0x24>
    lv_obj_t * dropdown_obj = list->dropdown;
 80170d0:	6a24      	ldr	r4, [r4, #32]
    lv_indev_t * indev = lv_indev_get_act();
 80170d2:	f7ee facb 	bl	800566c <lv_indev_get_act>
 80170d6:	0005      	movs	r5, r0
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 80170d8:	f7ee face 	bl	8005678 <lv_indev_get_type>
 80170dc:	2804      	cmp	r0, #4
 80170de:	d100      	bne.n	80170e2 <lv_dropdown_list_event+0xea>
 80170e0:	e0b9      	b.n	8017256 <lv_dropdown_list_event+0x25e>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 80170e2:	0028      	movs	r0, r5
 80170e4:	f7ee fac8 	bl	8005678 <lv_indev_get_type>
        lv_indev_get_point(indev, &p);
 80170e8:	466e      	mov	r6, sp
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 80170ea:	2801      	cmp	r0, #1
 80170ec:	d065      	beq.n	80171ba <lv_dropdown_list_event+0x1c2>
 80170ee:	0028      	movs	r0, r5
 80170f0:	f7ee fac2 	bl	8005678 <lv_indev_get_type>
 80170f4:	2803      	cmp	r0, #3
 80170f6:	d060      	beq.n	80171ba <lv_dropdown_list_event+0x1c2>
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 80170f8:	2101      	movs	r1, #1
 80170fa:	0020      	movs	r0, r4
 80170fc:	f7f0 ff00 	bl	8007f00 <lv_obj_clear_state>
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8017100:	2301      	movs	r3, #1
 8017102:	425b      	negs	r3, r3
 8017104:	86e3      	strh	r3, [r4, #54]	; 0x36
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8017106:	2101      	movs	r1, #1
 8017108:	6a20      	ldr	r0, [r4, #32]
 801710a:	f7f0 fe73 	bl	8007df4 <lv_obj_add_flag>
    lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 801710e:	2200      	movs	r2, #0
 8017110:	2120      	movs	r1, #32
 8017112:	0020      	movs	r0, r4
 8017114:	f7ed fd8c 	bl	8004c30 <lv_event_send>
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 8017118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801711a:	2b00      	cmp	r3, #0
 801711c:	d100      	bne.n	8017120 <lv_dropdown_list_event+0x128>
 801711e:	e0aa      	b.n	8017276 <lv_dropdown_list_event+0x27e>
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 8017120:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 8017122:	0032      	movs	r2, r6
 8017124:	211c      	movs	r1, #28
 8017126:	0020      	movs	r0, r4
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 8017128:	9300      	str	r3, [sp, #0]
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 801712a:	f7ed fd81 	bl	8004c30 <lv_event_send>
    if(res != LV_RES_OK) return res;
 801712e:	e775      	b.n	801701c <lv_dropdown_list_event+0x24>
    lv_indev_t * indev = lv_indev_get_act();
 8017130:	f7ee fa9c 	bl	800566c <lv_indev_get_act>
 8017134:	1e05      	subs	r5, r0, #0
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 8017136:	d100      	bne.n	801713a <lv_dropdown_list_event+0x142>
 8017138:	e770      	b.n	801701c <lv_dropdown_list_event+0x24>
 801713a:	f7ee fa9d 	bl	8005678 <lv_indev_get_type>
 801713e:	2801      	cmp	r0, #1
 8017140:	d005      	beq.n	801714e <lv_dropdown_list_event+0x156>
 8017142:	0028      	movs	r0, r5
 8017144:	f7ee fa98 	bl	8005678 <lv_indev_get_type>
 8017148:	2803      	cmp	r0, #3
 801714a:	d000      	beq.n	801714e <lv_dropdown_list_event+0x156>
 801714c:	e766      	b.n	801701c <lv_dropdown_list_event+0x24>
        lv_indev_get_point(indev, &p);
 801714e:	0028      	movs	r0, r5
 8017150:	4669      	mov	r1, sp
 8017152:	f7ee fb13 	bl	800577c <lv_indev_get_point>
        dropdown->pr_opt_id = get_id_on_point(dropdown_obj, p.y);
 8017156:	466b      	mov	r3, sp
    if(dropdown->list == NULL) return NULL;
 8017158:	6a30      	ldr	r0, [r6, #32]
        dropdown->pr_opt_id = get_id_on_point(dropdown_obj, p.y);
 801715a:	2202      	movs	r2, #2
 801715c:	5e9b      	ldrsh	r3, [r3, r2]
 801715e:	4698      	mov	r8, r3
    if(dropdown->list == NULL) return NULL;
 8017160:	2800      	cmp	r0, #0
 8017162:	d028      	beq.n	80171b6 <lv_dropdown_list_event+0x1be>
    return lv_obj_get_child(dropdown->list, 0);
 8017164:	2100      	movs	r1, #0
 8017166:	f7f6 fe5f 	bl	800de28 <lv_obj_get_child>
 801716a:	1e05      	subs	r5, r0, #0
    if(label == NULL) return 0;
 801716c:	d023      	beq.n	80171b6 <lv_dropdown_list_event+0x1be>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801716e:	2257      	movs	r2, #87	; 0x57
 8017170:	2100      	movs	r1, #0
    y -= label->coords.y1;
 8017172:	8a47      	ldrh	r7, [r0, #18]
 8017174:	f7f5 fa26 	bl	800c5c4 <lv_obj_get_style_prop>
 8017178:	2208      	movs	r2, #8
 801717a:	5e83      	ldrsh	r3, [r0, r2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801717c:	2100      	movs	r1, #0
 801717e:	2259      	movs	r2, #89	; 0x59
 8017180:	0028      	movs	r0, r5
 8017182:	4699      	mov	r9, r3
 8017184:	f7f5 fa1e 	bl	800c5c4 <lv_obj_get_style_prop>
 8017188:	0001      	movs	r1, r0
    y += line_space / 2;
 801718a:	b202      	sxth	r2, r0
 801718c:	0fd3      	lsrs	r3, r2, #31
 801718e:	189b      	adds	r3, r3, r2
 8017190:	105b      	asrs	r3, r3, #1
 8017192:	4443      	add	r3, r8
 8017194:	1bdb      	subs	r3, r3, r7
    lv_coord_t h = font_h + line_space;
 8017196:	4449      	add	r1, r9
    uint16_t opt = y / h;
 8017198:	b218      	sxth	r0, r3
 801719a:	b209      	sxth	r1, r1
 801719c:	f7e9 f84e 	bl	800023c <__divsi3>
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 80171a0:	8e33      	ldrh	r3, [r6, #48]	; 0x30
    uint16_t opt = y / h;
 80171a2:	b280      	uxth	r0, r0
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 80171a4:	4298      	cmp	r0, r3
 80171a6:	d301      	bcc.n	80171ac <lv_dropdown_list_event+0x1b4>
 80171a8:	3b01      	subs	r3, #1
 80171aa:	b298      	uxth	r0, r3
        dropdown->pr_opt_id = get_id_on_point(dropdown_obj, p.y);
 80171ac:	86f0      	strh	r0, [r6, #54]	; 0x36
        lv_obj_invalidate(list_obj);
 80171ae:	0020      	movs	r0, r4
 80171b0:	f7f2 f930 	bl	8009414 <lv_obj_invalidate>
 80171b4:	e732      	b.n	801701c <lv_dropdown_list_event+0x24>
    if(label == NULL) return 0;
 80171b6:	2000      	movs	r0, #0
 80171b8:	e7f8      	b.n	80171ac <lv_dropdown_list_event+0x1b4>
        lv_indev_get_point(indev, &p);
 80171ba:	0028      	movs	r0, r5
 80171bc:	0031      	movs	r1, r6
 80171be:	f7ee fadd 	bl	800577c <lv_indev_get_point>
        dropdown->sel_opt_id     = get_id_on_point(dropdown_obj, p.y);
 80171c2:	2202      	movs	r2, #2
 80171c4:	5eb3      	ldrsh	r3, [r6, r2]
    if(dropdown->list == NULL) return NULL;
 80171c6:	6a20      	ldr	r0, [r4, #32]
        dropdown->sel_opt_id     = get_id_on_point(dropdown_obj, p.y);
 80171c8:	4698      	mov	r8, r3
    if(dropdown->list == NULL) return NULL;
 80171ca:	2800      	cmp	r0, #0
 80171cc:	d041      	beq.n	8017252 <lv_dropdown_list_event+0x25a>
    return lv_obj_get_child(dropdown->list, 0);
 80171ce:	2100      	movs	r1, #0
 80171d0:	f7f6 fe2a 	bl	800de28 <lv_obj_get_child>
 80171d4:	1e05      	subs	r5, r0, #0
    if(label == NULL) return 0;
 80171d6:	d03c      	beq.n	8017252 <lv_dropdown_list_event+0x25a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80171d8:	2257      	movs	r2, #87	; 0x57
 80171da:	2100      	movs	r1, #0
    y -= label->coords.y1;
 80171dc:	8a47      	ldrh	r7, [r0, #18]
 80171de:	f7f5 f9f1 	bl	800c5c4 <lv_obj_get_style_prop>
 80171e2:	2208      	movs	r2, #8
 80171e4:	5e83      	ldrsh	r3, [r0, r2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80171e6:	2100      	movs	r1, #0
 80171e8:	2259      	movs	r2, #89	; 0x59
 80171ea:	0028      	movs	r0, r5
 80171ec:	4699      	mov	r9, r3
 80171ee:	f7f5 f9e9 	bl	800c5c4 <lv_obj_get_style_prop>
 80171f2:	0001      	movs	r1, r0
    y += line_space / 2;
 80171f4:	b202      	sxth	r2, r0
 80171f6:	0fd3      	lsrs	r3, r2, #31
 80171f8:	189b      	adds	r3, r3, r2
 80171fa:	105b      	asrs	r3, r3, #1
 80171fc:	4443      	add	r3, r8
 80171fe:	1bdb      	subs	r3, r3, r7
    lv_coord_t h = font_h + line_space;
 8017200:	4449      	add	r1, r9
    uint16_t opt = y / h;
 8017202:	b218      	sxth	r0, r3
 8017204:	b209      	sxth	r1, r1
 8017206:	f7e9 f819 	bl	800023c <__divsi3>
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 801720a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    uint16_t opt = y / h;
 801720c:	b280      	uxth	r0, r0
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 801720e:	4298      	cmp	r0, r3
 8017210:	d301      	bcc.n	8017216 <lv_dropdown_list_event+0x21e>
 8017212:	3b01      	subs	r3, #1
 8017214:	b298      	uxth	r0, r3
        dropdown->sel_opt_id     = get_id_on_point(dropdown_obj, p.y);
 8017216:	8660      	strh	r0, [r4, #50]	; 0x32
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8017218:	86a0      	strh	r0, [r4, #52]	; 0x34
 801721a:	e76d      	b.n	80170f8 <lv_dropdown_list_event+0x100>
            draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801721c:	2320      	movs	r3, #32
 801721e:	0029      	movs	r1, r5
 8017220:	0030      	movs	r0, r6
 8017222:	f7ff fd87 	bl	8016d34 <draw_box>
            draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8017226:	2320      	movs	r3, #32
 8017228:	0029      	movs	r1, r5
 801722a:	0030      	movs	r0, r6
 801722c:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
 801722e:	f7ff fde9 	bl	8016e04 <draw_box_label>
        draw_ctx->clip_area = clip_area_ori;
 8017232:	60af      	str	r7, [r5, #8]
 8017234:	e741      	b.n	80170ba <lv_dropdown_list_event+0xc2>
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 8017236:	000a      	movs	r2, r1
 8017238:	2321      	movs	r3, #33	; 0x21
 801723a:	0029      	movs	r1, r5
 801723c:	0030      	movs	r0, r6
 801723e:	f7ff fd79 	bl	8016d34 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 8017242:	2321      	movs	r3, #33	; 0x21
 8017244:	0029      	movs	r1, r5
 8017246:	0030      	movs	r0, r6
 8017248:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
 801724a:	f7ff fddb 	bl	8016e04 <draw_box_label>
        draw_ctx->clip_area = clip_area_ori;
 801724e:	60af      	str	r7, [r5, #8]
 8017250:	e733      	b.n	80170ba <lv_dropdown_list_event+0xc2>
    if(label == NULL) return 0;
 8017252:	2000      	movs	r0, #0
 8017254:	e7df      	b.n	8017216 <lv_dropdown_list_event+0x21e>
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8017256:	8e63      	ldrh	r3, [r4, #50]	; 0x32
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 8017258:	0020      	movs	r0, r4
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 801725a:	86a3      	strh	r3, [r4, #52]	; 0x34
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 801725c:	f7f0 fe70 	bl	8007f40 <lv_obj_get_group>
 8017260:	0006      	movs	r6, r0
        if(lv_group_get_editing(g)) {
 8017262:	f7ee f987 	bl	8005574 <lv_group_get_editing>
 8017266:	2800      	cmp	r0, #0
 8017268:	d100      	bne.n	801726c <lv_dropdown_list_event+0x274>
 801726a:	e73a      	b.n	80170e2 <lv_dropdown_list_event+0xea>
            lv_group_set_editing(g, false);
 801726c:	2100      	movs	r1, #0
 801726e:	0030      	movs	r0, r6
 8017270:	f7ee f922 	bl	80054b8 <lv_group_set_editing>
 8017274:	e735      	b.n	80170e2 <lv_dropdown_list_event+0xea>
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 8017276:	0020      	movs	r0, r4
 8017278:	f7f2 f8cc 	bl	8009414 <lv_obj_invalidate>
 801727c:	e750      	b.n	8017120 <lv_dropdown_list_event+0x128>
 801727e:	46c0      	nop			; (mov r8, r8)
 8017280:	0801be38 	.word	0x0801be38

08017284 <lv_dropdown_create>:
{
 8017284:	b510      	push	{r4, lr}
 8017286:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdown_class, parent);
 8017288:	4803      	ldr	r0, [pc, #12]	; (8017298 <lv_dropdown_create+0x14>)
 801728a:	f7f0 fec1 	bl	8008010 <lv_obj_class_create_obj>
 801728e:	0004      	movs	r4, r0
    lv_obj_class_init_obj(obj);
 8017290:	f7f0 ff36 	bl	8008100 <lv_obj_class_init_obj>
}
 8017294:	0020      	movs	r0, r4
 8017296:	bd10      	pop	{r4, pc}
 8017298:	0801be20 	.word	0x0801be20

0801729c <lv_dropdown_set_options>:
{
 801729c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801729e:	0005      	movs	r5, r0
 80172a0:	1e0e      	subs	r6, r1, #0
    LV_ASSERT_NULL(options);
 80172a2:	d038      	beq.n	8017316 <lv_dropdown_set_options+0x7a>
    dropdown->option_cnt = 0;
 80172a4:	2300      	movs	r3, #0
 80172a6:	8603      	strh	r3, [r0, #48]	; 0x30
    for(i = 0; options[i] != '\0'; i++) {
 80172a8:	780b      	ldrb	r3, [r1, #0]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d048      	beq.n	8017340 <lv_dropdown_set_options+0xa4>
 80172ae:	2400      	movs	r4, #0
 80172b0:	1c4a      	adds	r2, r1, #1
        if(options[i] == '\n') dropdown->option_cnt++;
 80172b2:	2b0a      	cmp	r3, #10
 80172b4:	d031      	beq.n	801731a <lv_dropdown_set_options+0x7e>
    for(i = 0; options[i] != '\0'; i++) {
 80172b6:	3201      	adds	r2, #1
 80172b8:	1e53      	subs	r3, r2, #1
 80172ba:	781b      	ldrb	r3, [r3, #0]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d1f8      	bne.n	80172b2 <lv_dropdown_set_options+0x16>
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 80172c0:	3401      	adds	r4, #1
 80172c2:	b2a4      	uxth	r4, r4
    dropdown->sel_opt_id      = 0;
 80172c4:	2300      	movs	r3, #0
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 80172c6:	862c      	strh	r4, [r5, #48]	; 0x30
    size_t len = strlen(options) + 1;
 80172c8:	0030      	movs	r0, r6
    dropdown->sel_opt_id      = 0;
 80172ca:	866b      	strh	r3, [r5, #50]	; 0x32
    dropdown->sel_opt_id_orig = 0;
 80172cc:	86ab      	strh	r3, [r5, #52]	; 0x34
    size_t len = strlen(options) + 1;
 80172ce:	f7e8 ff23 	bl	8000118 <strlen>
 80172d2:	1c44      	adds	r4, r0, #1
    if(dropdown->options != NULL && dropdown->static_txt == 0) {
 80172d4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80172d6:	2800      	cmp	r0, #0
 80172d8:	d006      	beq.n	80172e8 <lv_dropdown_set_options+0x4c>
 80172da:	2210      	movs	r2, #16
 80172dc:	2338      	movs	r3, #56	; 0x38
 80172de:	0017      	movs	r7, r2
 80172e0:	5ceb      	ldrb	r3, [r5, r3]
 80172e2:	401f      	ands	r7, r3
 80172e4:	421a      	tst	r2, r3
 80172e6:	d021      	beq.n	801732c <lv_dropdown_set_options+0x90>
    dropdown->options = lv_mem_alloc(len);
 80172e8:	0020      	movs	r0, r4
 80172ea:	f7fd fdc9 	bl	8014e80 <lv_mem_alloc>
 80172ee:	62e8      	str	r0, [r5, #44]	; 0x2c
    LV_ASSERT_MALLOC(dropdown->options);
 80172f0:	2800      	cmp	r0, #0
 80172f2:	d011      	beq.n	8017318 <lv_dropdown_set_options+0x7c>
    strcpy(dropdown->options, options);
 80172f4:	0031      	movs	r1, r6
 80172f6:	f004 f917 	bl	801b528 <strcpy>
    dropdown->static_txt = 0;
 80172fa:	2238      	movs	r2, #56	; 0x38
 80172fc:	2110      	movs	r1, #16
 80172fe:	5cab      	ldrb	r3, [r5, r2]
    lv_obj_invalidate(obj);
 8017300:	0028      	movs	r0, r5
    dropdown->static_txt = 0;
 8017302:	438b      	bics	r3, r1
 8017304:	54ab      	strb	r3, [r5, r2]
    lv_obj_invalidate(obj);
 8017306:	f7f2 f885 	bl	8009414 <lv_obj_invalidate>
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 801730a:	6a28      	ldr	r0, [r5, #32]
 801730c:	2800      	cmp	r0, #0
 801730e:	d001      	beq.n	8017314 <lv_dropdown_set_options+0x78>
 8017310:	f7f2 f880 	bl	8009414 <lv_obj_invalidate>
}
 8017314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(options);
 8017316:	e7fe      	b.n	8017316 <lv_dropdown_set_options+0x7a>
    LV_ASSERT_MALLOC(dropdown->options);
 8017318:	e7fe      	b.n	8017318 <lv_dropdown_set_options+0x7c>
        if(options[i] == '\n') dropdown->option_cnt++;
 801731a:	3401      	adds	r4, #1
 801731c:	b2a4      	uxth	r4, r4
    for(i = 0; options[i] != '\0'; i++) {
 801731e:	3201      	adds	r2, #1
        if(options[i] == '\n') dropdown->option_cnt++;
 8017320:	862c      	strh	r4, [r5, #48]	; 0x30
    for(i = 0; options[i] != '\0'; i++) {
 8017322:	1e53      	subs	r3, r2, #1
 8017324:	781b      	ldrb	r3, [r3, #0]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d1c3      	bne.n	80172b2 <lv_dropdown_set_options+0x16>
 801732a:	e7c9      	b.n	80172c0 <lv_dropdown_set_options+0x24>
        lv_mem_free(dropdown->options);
 801732c:	f7fd fdca 	bl	8014ec4 <lv_mem_free>
    dropdown->options = lv_mem_alloc(len);
 8017330:	0020      	movs	r0, r4
        dropdown->options = NULL;
 8017332:	62ef      	str	r7, [r5, #44]	; 0x2c
    dropdown->options = lv_mem_alloc(len);
 8017334:	f7fd fda4 	bl	8014e80 <lv_mem_alloc>
 8017338:	62e8      	str	r0, [r5, #44]	; 0x2c
    LV_ASSERT_MALLOC(dropdown->options);
 801733a:	2800      	cmp	r0, #0
 801733c:	d1da      	bne.n	80172f4 <lv_dropdown_set_options+0x58>
 801733e:	e7eb      	b.n	8017318 <lv_dropdown_set_options+0x7c>
    for(i = 0; options[i] != '\0'; i++) {
 8017340:	2401      	movs	r4, #1
 8017342:	e7bf      	b.n	80172c4 <lv_dropdown_set_options+0x28>

08017344 <lv_dropdown_get_list>:
    return dropdown->list;
 8017344:	6a00      	ldr	r0, [r0, #32]
}
 8017346:	4770      	bx	lr

08017348 <lv_dropdown_open>:
{
 8017348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801734a:	46ce      	mov	lr, r9
 801734c:	4647      	mov	r7, r8
 801734e:	0004      	movs	r4, r0
 8017350:	b580      	push	{r7, lr}
    lv_obj_add_state(dropdown_obj, LV_STATE_CHECKED);
 8017352:	2101      	movs	r1, #1
{
 8017354:	b083      	sub	sp, #12
    lv_obj_add_state(dropdown_obj, LV_STATE_CHECKED);
 8017356:	f7f0 fdcb 	bl	8007ef0 <lv_obj_add_state>
    lv_obj_set_parent(dropdown->list, lv_obj_get_screen(dropdown_obj));
 801735a:	0020      	movs	r0, r4
 801735c:	6a25      	ldr	r5, [r4, #32]
 801735e:	f7f6 fd2d 	bl	800ddbc <lv_obj_get_screen>
 8017362:	0001      	movs	r1, r0
 8017364:	0028      	movs	r0, r5
 8017366:	f7f6 fc1d 	bl	800dba4 <lv_obj_set_parent>
    lv_obj_move_to_index(dropdown->list, -1);
 801736a:	2101      	movs	r1, #1
 801736c:	6a20      	ldr	r0, [r4, #32]
 801736e:	4249      	negs	r1, r1
 8017370:	f7f6 fcae 	bl	800dcd0 <lv_obj_move_to_index>
    lv_obj_clear_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8017374:	2101      	movs	r1, #1
 8017376:	6a20      	ldr	r0, [r4, #32]
 8017378:	f7f0 fd78 	bl	8007e6c <lv_obj_clear_flag>
    lv_event_send(dropdown_obj, LV_EVENT_READY, NULL);
 801737c:	2200      	movs	r2, #0
 801737e:	211f      	movs	r1, #31
 8017380:	0020      	movs	r0, r4
 8017382:	f7ed fc55 	bl	8004c30 <lv_event_send>
    if(dropdown->list == NULL) return NULL;
 8017386:	6a27      	ldr	r7, [r4, #32]
 8017388:	2f00      	cmp	r7, #0
 801738a:	d004      	beq.n	8017396 <lv_dropdown_open+0x4e>
    return lv_obj_get_child(dropdown->list, 0);
 801738c:	0038      	movs	r0, r7
 801738e:	2100      	movs	r1, #0
 8017390:	f7f6 fd4a 	bl	800de28 <lv_obj_get_child>
 8017394:	0007      	movs	r7, r0
    lv_label_set_text_static(label, dropdown->options);
 8017396:	0038      	movs	r0, r7
 8017398:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801739a:	f001 fef5 	bl	8019188 <lv_label_set_text_static>
    lv_obj_set_width(dropdown->list, LV_SIZE_CONTENT);
 801739e:	498c      	ldr	r1, [pc, #560]	; (80175d0 <lv_dropdown_open+0x288>)
 80173a0:	6a20      	ldr	r0, [r4, #32]
 80173a2:	f7f1 fb9b 	bl	8008adc <lv_obj_set_width>
    lv_obj_update_layout(label);
 80173a6:	0038      	movs	r0, r7
 80173a8:	f7f3 f9f4 	bl	800a794 <lv_obj_update_layout>
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 80173ac:	6a20      	ldr	r0, [r4, #32]
 80173ae:	f7f1 fc93 	bl	8008cd8 <lv_obj_get_width>
 80173b2:	0005      	movs	r5, r0
 80173b4:	0020      	movs	r0, r4
 80173b6:	f7f1 fc8f 	bl	8008cd8 <lv_obj_get_width>
 80173ba:	4285      	cmp	r5, r0
 80173bc:	dc07      	bgt.n	80173ce <lv_dropdown_open+0x86>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 80173be:	2338      	movs	r3, #56	; 0x38
 80173c0:	5ce2      	ldrb	r2, [r4, r3]
 80173c2:	3b29      	subs	r3, #41	; 0x29
 80173c4:	4013      	ands	r3, r2
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 80173c6:	22fb      	movs	r2, #251	; 0xfb
 80173c8:	3b04      	subs	r3, #4
 80173ca:	4213      	tst	r3, r2
 80173cc:	d056      	beq.n	801747c <lv_dropdown_open+0x134>
    lv_coord_t label_h = lv_obj_get_height(label);
 80173ce:	0038      	movs	r0, r7
 80173d0:	f7f1 fc8a 	bl	8008ce8 <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80173d4:	2232      	movs	r2, #50	; 0x32
 80173d6:	4681      	mov	r9, r0
 80173d8:	2100      	movs	r1, #0
 80173da:	6a20      	ldr	r0, [r4, #32]
 80173dc:	f7f5 f8f2 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80173e0:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80173e2:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80173e4:	2100      	movs	r1, #0
 80173e6:	6a20      	ldr	r0, [r4, #32]
 80173e8:	f7f5 f8ec 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80173ec:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80173ee:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80173f0:	2100      	movs	r1, #0
 80173f2:	6a20      	ldr	r0, [r4, #32]
 80173f4:	f7f5 f8e6 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_coord_t list_fit_h = label_h + top + bottom;
 80173f8:	4643      	mov	r3, r8
 80173fa:	005e      	lsls	r6, r3, #1
    lv_dir_t dir = dropdown->dir;
 80173fc:	2338      	movs	r3, #56	; 0x38
    lv_coord_t list_fit_h = label_h + top + bottom;
 80173fe:	182d      	adds	r5, r5, r0
    lv_dir_t dir = dropdown->dir;
 8017400:	5ce2      	ldrb	r2, [r4, r3]
    lv_coord_t list_fit_h = label_h + top + bottom;
 8017402:	19ad      	adds	r5, r5, r6
 8017404:	444d      	add	r5, r9
    lv_dir_t dir = dropdown->dir;
 8017406:	0716      	lsls	r6, r2, #28
    if(dropdown->dir == LV_DIR_BOTTOM) {
 8017408:	3b29      	subs	r3, #41	; 0x29
    lv_coord_t list_fit_h = label_h + top + bottom;
 801740a:	b22d      	sxth	r5, r5
    lv_dir_t dir = dropdown->dir;
 801740c:	0f36      	lsrs	r6, r6, #28
    if(dropdown->dir == LV_DIR_BOTTOM) {
 801740e:	4013      	ands	r3, r2
 8017410:	2b08      	cmp	r3, #8
 8017412:	d100      	bne.n	8017416 <lv_dropdown_open+0xce>
 8017414:	e077      	b.n	8017506 <lv_dropdown_open+0x1be>
    else if(dropdown->dir == LV_DIR_TOP) {
 8017416:	2b04      	cmp	r3, #4
 8017418:	d043      	beq.n	80174a2 <lv_dropdown_open+0x15a>
    lv_obj_set_height(dropdown->list, list_h);
 801741a:	6a20      	ldr	r0, [r4, #32]
 801741c:	0029      	movs	r1, r5
 801741e:	f7f1 fb75 	bl	8008b0c <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 8017422:	0020      	movs	r0, r4
 8017424:	f7ff fc5a 	bl	8016cdc <position_to_selected>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8017428:	2e08      	cmp	r6, #8
 801742a:	d100      	bne.n	801742e <lv_dropdown_open+0xe6>
 801742c:	e0aa      	b.n	8017584 <lv_dropdown_open+0x23c>
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 801742e:	2e04      	cmp	r6, #4
 8017430:	d100      	bne.n	8017434 <lv_dropdown_open+0xec>
 8017432:	e08d      	b.n	8017550 <lv_dropdown_open+0x208>
    else if(dir == LV_DIR_LEFT)  lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_LEFT_TOP, 0, 0);
 8017434:	2e01      	cmp	r6, #1
 8017436:	d100      	bne.n	801743a <lv_dropdown_open+0xf2>
 8017438:	e0b4      	b.n	80175a4 <lv_dropdown_open+0x25c>
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 801743a:	2e02      	cmp	r6, #2
 801743c:	d100      	bne.n	8017440 <lv_dropdown_open+0xf8>
 801743e:	e0a9      	b.n	8017594 <lv_dropdown_open+0x24c>
    lv_obj_update_layout(dropdown->list);
 8017440:	6a20      	ldr	r0, [r4, #32]
 8017442:	f7f3 f9a7 	bl	800a794 <lv_obj_update_layout>
    if(dropdown->dir == LV_DIR_LEFT || dropdown->dir == LV_DIR_RIGHT) {
 8017446:	2338      	movs	r3, #56	; 0x38
 8017448:	5ce2      	ldrb	r2, [r4, r3]
 801744a:	3b29      	subs	r3, #41	; 0x29
 801744c:	4013      	ands	r3, r2
 801744e:	3b01      	subs	r3, #1
 8017450:	2b01      	cmp	r3, #1
 8017452:	d93c      	bls.n	80174ce <lv_dropdown_open+0x186>
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, dropdown->options);
 8017454:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017456:	2100      	movs	r1, #0
 8017458:	0038      	movs	r0, r7
 801745a:	f7f6 f96d 	bl	800d738 <lv_obj_calculate_style_text_align>
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 801745e:	2300      	movs	r3, #0
 8017460:	2200      	movs	r2, #0
    switch(align) {
 8017462:	2802      	cmp	r0, #2
 8017464:	d018      	beq.n	8017498 <lv_dropdown_open+0x150>
 8017466:	2803      	cmp	r0, #3
 8017468:	d011      	beq.n	801748e <lv_dropdown_open+0x146>
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 801746a:	2101      	movs	r1, #1
 801746c:	0038      	movs	r0, r7
 801746e:	f7f1 fb99 	bl	8008ba4 <lv_obj_align>
}
 8017472:	b003      	add	sp, #12
 8017474:	bcc0      	pop	{r6, r7}
 8017476:	46b9      	mov	r9, r7
 8017478:	46b0      	mov	r8, r6
 801747a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_set_width(dropdown->list, lv_obj_get_width(dropdown_obj));
 801747c:	0020      	movs	r0, r4
 801747e:	6a25      	ldr	r5, [r4, #32]
 8017480:	f7f1 fc2a 	bl	8008cd8 <lv_obj_get_width>
 8017484:	0001      	movs	r1, r0
 8017486:	0028      	movs	r0, r5
 8017488:	f7f1 fb28 	bl	8008adc <lv_obj_set_width>
 801748c:	e79f      	b.n	80173ce <lv_dropdown_open+0x86>
            lv_obj_align(label, LV_ALIGN_TOP_RIGHT, 0, 0);
 801748e:	2103      	movs	r1, #3
 8017490:	0038      	movs	r0, r7
 8017492:	f7f1 fb87 	bl	8008ba4 <lv_obj_align>
            break;
 8017496:	e7ec      	b.n	8017472 <lv_dropdown_open+0x12a>
            lv_obj_align(label, LV_ALIGN_TOP_MID, 0, 0);
 8017498:	2102      	movs	r1, #2
 801749a:	0038      	movs	r0, r7
 801749c:	f7f1 fb82 	bl	8008ba4 <lv_obj_align>
}
 80174a0:	e7e7      	b.n	8017472 <lv_dropdown_open+0x12a>
        if(dropdown_obj->coords.y1 - list_h < 0) {
 80174a2:	2212      	movs	r2, #18
 80174a4:	5ea3      	ldrsh	r3, [r4, r2]
 80174a6:	4698      	mov	r8, r3
 80174a8:	1b5b      	subs	r3, r3, r5
 80174aa:	d5b6      	bpl.n	801741a <lv_dropdown_open+0xd2>
            if(dropdown_obj->coords.y1 < LV_VER_RES - dropdown_obj->coords.y2) {
 80174ac:	f7fc fac8 	bl	8013a40 <lv_disp_get_default>
 80174b0:	f7fc fae0 	bl	8013a74 <lv_disp_get_ver_res>
 80174b4:	2216      	movs	r2, #22
 80174b6:	5ea3      	ldrsh	r3, [r4, r2]
 80174b8:	1ac0      	subs	r0, r0, r3
 80174ba:	4580      	cmp	r8, r0
 80174bc:	db50      	blt.n	8017560 <lv_dropdown_open+0x218>
                list_h = dropdown_obj->coords.y1;
 80174be:	8a63      	ldrh	r3, [r4, #18]
 80174c0:	1c1a      	adds	r2, r3, #0
 80174c2:	b21b      	sxth	r3, r3
 80174c4:	42ab      	cmp	r3, r5
 80174c6:	dd00      	ble.n	80174ca <lv_dropdown_open+0x182>
 80174c8:	1c2a      	adds	r2, r5, #0
 80174ca:	b215      	sxth	r5, r2
 80174cc:	e7a5      	b.n	801741a <lv_dropdown_open+0xd2>
        lv_coord_t y1 = lv_obj_get_y(dropdown->list);
 80174ce:	6a20      	ldr	r0, [r4, #32]
 80174d0:	f7f1 fbae 	bl	8008c30 <lv_obj_get_y>
 80174d4:	0005      	movs	r5, r0
        lv_coord_t y2 = lv_obj_get_y2(dropdown->list);
 80174d6:	6a20      	ldr	r0, [r4, #32]
 80174d8:	f7f1 fbd0 	bl	8008c7c <lv_obj_get_y2>
 80174dc:	0006      	movs	r6, r0
        if(y2 >= LV_VER_RES) {
 80174de:	f7fc faaf 	bl	8013a40 <lv_disp_get_default>
 80174e2:	f7fc fac7 	bl	8013a74 <lv_disp_get_ver_res>
 80174e6:	42b0      	cmp	r0, r6
 80174e8:	dcb4      	bgt.n	8017454 <lv_dropdown_open+0x10c>
            lv_obj_set_y(dropdown->list, y1 - (y2 - LV_VER_RES) - 1);
 80174ea:	6a23      	ldr	r3, [r4, #32]
 80174ec:	3d01      	subs	r5, #1
 80174ee:	4698      	mov	r8, r3
 80174f0:	f7fc faa6 	bl	8013a40 <lv_disp_get_default>
 80174f4:	f7fc fabe 	bl	8013a74 <lv_disp_get_ver_res>
 80174f8:	1ba9      	subs	r1, r5, r6
 80174fa:	1809      	adds	r1, r1, r0
 80174fc:	b209      	sxth	r1, r1
 80174fe:	4640      	mov	r0, r8
 8017500:	f7f1 fad4 	bl	8008aac <lv_obj_set_y>
 8017504:	e7a6      	b.n	8017454 <lv_dropdown_open+0x10c>
        if(dropdown_obj->coords.y2 + list_h > LV_VER_RES) {
 8017506:	2216      	movs	r2, #22
 8017508:	5ea3      	ldrsh	r3, [r4, r2]
 801750a:	4698      	mov	r8, r3
 801750c:	44a8      	add	r8, r5
 801750e:	f7fc fa97 	bl	8013a40 <lv_disp_get_default>
 8017512:	f7fc faaf 	bl	8013a74 <lv_disp_get_ver_res>
 8017516:	4580      	cmp	r8, r0
 8017518:	dc00      	bgt.n	801751c <lv_dropdown_open+0x1d4>
 801751a:	e77e      	b.n	801741a <lv_dropdown_open+0xd2>
            if(dropdown_obj->coords.y1 > LV_VER_RES - dropdown_obj->coords.y2) {
 801751c:	2212      	movs	r2, #18
 801751e:	5ea3      	ldrsh	r3, [r4, r2]
 8017520:	4698      	mov	r8, r3
 8017522:	f7fc fa8d 	bl	8013a40 <lv_disp_get_default>
 8017526:	f7fc faa5 	bl	8013a74 <lv_disp_get_ver_res>
 801752a:	2216      	movs	r2, #22
 801752c:	5ea3      	ldrsh	r3, [r4, r2]
 801752e:	1ac0      	subs	r0, r0, r3
 8017530:	4580      	cmp	r8, r0
 8017532:	dd3f      	ble.n	80175b4 <lv_dropdown_open+0x26c>
                list_h = dropdown_obj->coords.y1 - 1;
 8017534:	8a63      	ldrh	r3, [r4, #18]
    lv_obj_set_height(dropdown->list, list_h);
 8017536:	1c29      	adds	r1, r5, #0
                list_h = dropdown_obj->coords.y1 - 1;
 8017538:	3b01      	subs	r3, #1
 801753a:	b21b      	sxth	r3, r3
    lv_obj_set_height(dropdown->list, list_h);
 801753c:	429d      	cmp	r5, r3
 801753e:	dd00      	ble.n	8017542 <lv_dropdown_open+0x1fa>
 8017540:	1c19      	adds	r1, r3, #0
 8017542:	6a20      	ldr	r0, [r4, #32]
 8017544:	b209      	sxth	r1, r1
 8017546:	f7f1 fae1 	bl	8008b0c <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 801754a:	0020      	movs	r0, r4
 801754c:	f7ff fbc6 	bl	8016cdc <position_to_selected>
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 8017550:	2300      	movs	r3, #0
 8017552:	220a      	movs	r2, #10
 8017554:	0021      	movs	r1, r4
 8017556:	6a20      	ldr	r0, [r4, #32]
 8017558:	9300      	str	r3, [sp, #0]
 801755a:	f7f2 fe55 	bl	800a208 <lv_obj_align_to>
 801755e:	e76f      	b.n	8017440 <lv_dropdown_open+0xf8>
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 8017560:	f7fc fa6e 	bl	8013a40 <lv_disp_get_default>
 8017564:	f7fc fa86 	bl	8013a74 <lv_disp_get_ver_res>
 8017568:	8ae3      	ldrh	r3, [r4, #22]
    lv_obj_set_height(dropdown->list, list_h);
 801756a:	1c29      	adds	r1, r5, #0
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 801756c:	1ac3      	subs	r3, r0, r3
 801756e:	b21b      	sxth	r3, r3
    lv_obj_set_height(dropdown->list, list_h);
 8017570:	429d      	cmp	r5, r3
 8017572:	dd00      	ble.n	8017576 <lv_dropdown_open+0x22e>
 8017574:	1c19      	adds	r1, r3, #0
 8017576:	6a20      	ldr	r0, [r4, #32]
 8017578:	b209      	sxth	r1, r1
 801757a:	f7f1 fac7 	bl	8008b0c <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 801757e:	0020      	movs	r0, r4
 8017580:	f7ff fbac 	bl	8016cdc <position_to_selected>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8017584:	2300      	movs	r3, #0
 8017586:	220d      	movs	r2, #13
 8017588:	0021      	movs	r1, r4
 801758a:	6a20      	ldr	r0, [r4, #32]
 801758c:	9300      	str	r3, [sp, #0]
 801758e:	f7f2 fe3b 	bl	800a208 <lv_obj_align_to>
 8017592:	e755      	b.n	8017440 <lv_dropdown_open+0xf8>
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 8017594:	2300      	movs	r3, #0
 8017596:	2213      	movs	r2, #19
 8017598:	0021      	movs	r1, r4
 801759a:	6a20      	ldr	r0, [r4, #32]
 801759c:	9300      	str	r3, [sp, #0]
 801759e:	f7f2 fe33 	bl	800a208 <lv_obj_align_to>
 80175a2:	e74d      	b.n	8017440 <lv_dropdown_open+0xf8>
    else if(dir == LV_DIR_LEFT)  lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_LEFT_TOP, 0, 0);
 80175a4:	2300      	movs	r3, #0
 80175a6:	2210      	movs	r2, #16
 80175a8:	0021      	movs	r1, r4
 80175aa:	6a20      	ldr	r0, [r4, #32]
 80175ac:	9300      	str	r3, [sp, #0]
 80175ae:	f7f2 fe2b 	bl	800a208 <lv_obj_align_to>
 80175b2:	e745      	b.n	8017440 <lv_dropdown_open+0xf8>
                list_h = LV_VER_RES - dropdown_obj->coords.y2 - 1 ;
 80175b4:	f7fc fa44 	bl	8013a40 <lv_disp_get_default>
 80175b8:	f7fc fa5c 	bl	8013a74 <lv_disp_get_ver_res>
 80175bc:	8ae3      	ldrh	r3, [r4, #22]
 80175be:	43db      	mvns	r3, r3
 80175c0:	1818      	adds	r0, r3, r0
 80175c2:	1c03      	adds	r3, r0, #0
 80175c4:	b200      	sxth	r0, r0
 80175c6:	42a8      	cmp	r0, r5
 80175c8:	dd00      	ble.n	80175cc <lv_dropdown_open+0x284>
 80175ca:	1c2b      	adds	r3, r5, #0
 80175cc:	b21d      	sxth	r5, r3
 80175ce:	e724      	b.n	801741a <lv_dropdown_open+0xd2>
 80175d0:	000027d1 	.word	0x000027d1

080175d4 <btn_release_handler.isra.0>:
static lv_res_t btn_release_handler(lv_obj_t * obj)
 80175d4:	b530      	push	{r4, r5, lr}
 80175d6:	b083      	sub	sp, #12
 80175d8:	0004      	movs	r4, r0
    lv_indev_t * indev = lv_indev_get_act();
 80175da:	f7ee f847 	bl	800566c <lv_indev_get_act>
 80175de:	0005      	movs	r5, r0
    if(lv_indev_get_scroll_obj(indev) == NULL) {
 80175e0:	f7ee f8f4 	bl	80057cc <lv_indev_get_scroll_obj>
 80175e4:	2800      	cmp	r0, #0
 80175e6:	d006      	beq.n	80175f6 <btn_release_handler.isra.0+0x22>
        dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 80175e8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
        lv_obj_invalidate(obj);
 80175ea:	0020      	movs	r0, r4
        dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 80175ec:	8663      	strh	r3, [r4, #50]	; 0x32
        lv_obj_invalidate(obj);
 80175ee:	f7f1 ff11 	bl	8009414 <lv_obj_invalidate>
}
 80175f2:	b003      	add	sp, #12
 80175f4:	bd30      	pop	{r4, r5, pc}
    return lv_obj_has_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN) ? false : true;
 80175f6:	2101      	movs	r1, #1
 80175f8:	6a20      	ldr	r0, [r4, #32]
 80175fa:	f7f0 fc8b 	bl	8007f14 <lv_obj_has_flag>
        if(lv_dropdown_is_open(obj)) {
 80175fe:	2800      	cmp	r0, #0
 8017600:	d12b      	bne.n	801765a <btn_release_handler.isra.0+0x86>
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8017602:	2101      	movs	r1, #1
 8017604:	0020      	movs	r0, r4
 8017606:	f7f0 fc7b 	bl	8007f00 <lv_obj_clear_state>
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 801760a:	2301      	movs	r3, #1
 801760c:	425b      	negs	r3, r3
 801760e:	86e3      	strh	r3, [r4, #54]	; 0x36
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8017610:	2101      	movs	r1, #1
 8017612:	6a20      	ldr	r0, [r4, #32]
 8017614:	f7f0 fbee 	bl	8007df4 <lv_obj_add_flag>
    lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 8017618:	2200      	movs	r2, #0
 801761a:	2120      	movs	r1, #32
 801761c:	0020      	movs	r0, r4
 801761e:	f7ed fb07 	bl	8004c30 <lv_event_send>
            if(dropdown->sel_opt_id_orig != dropdown->sel_opt_id) {
 8017622:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8017624:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8017626:	429a      	cmp	r2, r3
 8017628:	d00b      	beq.n	8017642 <btn_release_handler.isra.0+0x6e>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801762a:	211c      	movs	r1, #28
 801762c:	0020      	movs	r0, r4
                dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 801762e:	86a3      	strh	r3, [r4, #52]	; 0x34
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8017630:	aa01      	add	r2, sp, #4
                uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 8017632:	9301      	str	r3, [sp, #4]
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8017634:	f7ed fafc 	bl	8004c30 <lv_event_send>
                if(res != LV_RES_OK) return res;
 8017638:	2801      	cmp	r0, #1
 801763a:	d1da      	bne.n	80175f2 <btn_release_handler.isra.0+0x1e>
                lv_obj_invalidate(obj);
 801763c:	0020      	movs	r0, r4
 801763e:	f7f1 fee9 	bl	8009414 <lv_obj_invalidate>
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8017642:	0028      	movs	r0, r5
 8017644:	f7ee f818 	bl	8005678 <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8017648:	2804      	cmp	r0, #4
 801764a:	d1d2      	bne.n	80175f2 <btn_release_handler.isra.0+0x1e>
                lv_group_set_editing(lv_obj_get_group(obj), false);
 801764c:	0020      	movs	r0, r4
 801764e:	f7f0 fc77 	bl	8007f40 <lv_obj_get_group>
 8017652:	2100      	movs	r1, #0
 8017654:	f7ed ff30 	bl	80054b8 <lv_group_set_editing>
 8017658:	e7cb      	b.n	80175f2 <btn_release_handler.isra.0+0x1e>
            lv_dropdown_open(obj);
 801765a:	0020      	movs	r0, r4
 801765c:	f7ff fe74 	bl	8017348 <lv_dropdown_open>
 8017660:	e7c7      	b.n	80175f2 <btn_release_handler.isra.0+0x1e>
 8017662:	46c0      	nop			; (mov r8, r8)

08017664 <lv_dropdown_event>:
{
 8017664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017666:	4645      	mov	r5, r8
 8017668:	46de      	mov	lr, fp
 801766a:	4657      	mov	r7, sl
 801766c:	464e      	mov	r6, r9
 801766e:	b5e0      	push	{r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8017670:	48cc      	ldr	r0, [pc, #816]	; (80179a4 <lv_dropdown_event+0x340>)
{
 8017672:	b09f      	sub	sp, #124	; 0x7c
 8017674:	000d      	movs	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8017676:	f7ed fafb 	bl	8004c70 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801767a:	2801      	cmp	r0, #1
 801767c:	d006      	beq.n	801768c <lv_dropdown_event+0x28>
}
 801767e:	b01f      	add	sp, #124	; 0x7c
 8017680:	bcf0      	pop	{r4, r5, r6, r7}
 8017682:	46bb      	mov	fp, r7
 8017684:	46b2      	mov	sl, r6
 8017686:	46a9      	mov	r9, r5
 8017688:	46a0      	mov	r8, r4
 801768a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_event_code_t code = lv_event_get_code(e);
 801768c:	0028      	movs	r0, r5
 801768e:	f7ed fb0b 	bl	8004ca8 <lv_event_get_code>
 8017692:	0004      	movs	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8017694:	0028      	movs	r0, r5
 8017696:	f7ed fb03 	bl	8004ca0 <lv_event_get_target>
 801769a:	0006      	movs	r6, r0
    if(code == LV_EVENT_FOCUSED) {
 801769c:	2c0e      	cmp	r4, #14
 801769e:	d100      	bne.n	80176a2 <lv_dropdown_event+0x3e>
 80176a0:	e0fa      	b.n	8017898 <lv_dropdown_event+0x234>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 80176a2:	0023      	movs	r3, r4
 80176a4:	3b0f      	subs	r3, #15
 80176a6:	b2db      	uxtb	r3, r3
 80176a8:	2b01      	cmp	r3, #1
 80176aa:	d800      	bhi.n	80176ae <lv_dropdown_event+0x4a>
 80176ac:	e104      	b.n	80178b8 <lv_dropdown_event+0x254>
    else if(code == LV_EVENT_RELEASED) {
 80176ae:	2c08      	cmp	r4, #8
 80176b0:	d100      	bne.n	80176b4 <lv_dropdown_event+0x50>
 80176b2:	e12c      	b.n	801790e <lv_dropdown_event+0x2aa>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 80176b4:	2c2a      	cmp	r4, #42	; 0x2a
 80176b6:	d100      	bne.n	80176ba <lv_dropdown_event+0x56>
 80176b8:	e10f      	b.n	80178da <lv_dropdown_event+0x276>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 80176ba:	2c29      	cmp	r4, #41	; 0x29
 80176bc:	d100      	bne.n	80176c0 <lv_dropdown_event+0x5c>
 80176be:	e10c      	b.n	80178da <lv_dropdown_event+0x276>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 80176c0:	2c2c      	cmp	r4, #44	; 0x2c
 80176c2:	d100      	bne.n	80176c6 <lv_dropdown_event+0x62>
 80176c4:	e127      	b.n	8017916 <lv_dropdown_event+0x2b2>
    else if(code == LV_EVENT_KEY) {
 80176c6:	2c0d      	cmp	r4, #13
 80176c8:	d100      	bne.n	80176cc <lv_dropdown_event+0x68>
 80176ca:	e10a      	b.n	80178e2 <lv_dropdown_event+0x27e>
    else if(code == LV_EVENT_DRAW_MAIN) {
 80176cc:	2c15      	cmp	r4, #21
 80176ce:	d1d6      	bne.n	801767e <lv_dropdown_event+0x1a>
    lv_obj_t * obj = lv_event_get_target(e);
 80176d0:	0028      	movs	r0, r5
 80176d2:	f7ed fae5 	bl	8004ca0 <lv_event_get_target>
 80176d6:	0004      	movs	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80176d8:	0028      	movs	r0, r5
 80176da:	f7ed fb47 	bl	8004d6c <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80176de:	2232      	movs	r2, #50	; 0x32
 80176e0:	2100      	movs	r1, #0
 80176e2:	4682      	mov	sl, r0
 80176e4:	0020      	movs	r0, r4
 80176e6:	f7f4 ff6d 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80176ea:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80176ec:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80176ee:	2100      	movs	r1, #0
 80176f0:	0020      	movs	r0, r4
 80176f2:	f7f4 ff67 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 80176f6:	b2ad      	uxth	r5, r5
 80176f8:	1828      	adds	r0, r5, r0
 80176fa:	b283      	uxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80176fc:	2213      	movs	r2, #19
 80176fe:	2100      	movs	r1, #0
 8017700:	0020      	movs	r0, r4
 8017702:	9305      	str	r3, [sp, #20]
 8017704:	f7f4 ff5e 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8017708:	1828      	adds	r0, r5, r0
 801770a:	b283      	uxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801770c:	2210      	movs	r2, #16
 801770e:	2100      	movs	r1, #0
 8017710:	0020      	movs	r0, r4
 8017712:	9306      	str	r3, [sp, #24]
 8017714:	f7f4 ff56 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8017718:	182d      	adds	r5, r5, r0
    lv_draw_label_dsc_init(&symbol_dsc);
 801771a:	a80e      	add	r0, sp, #56	; 0x38
 801771c:	f7f7 ff8a 	bl	800f634 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_INDICATOR, &symbol_dsc);
 8017720:	2180      	movs	r1, #128	; 0x80
 8017722:	0020      	movs	r0, r4
 8017724:	aa0e      	add	r2, sp, #56	; 0x38
 8017726:	0289      	lsls	r1, r1, #10
 8017728:	f7f0 fe6e 	bl	8008408 <lv_obj_init_draw_label_dsc>
    if(dropdown->text) opt_txt = dropdown->text;
 801772c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 801772e:	b2ad      	uxth	r5, r5
    if(dropdown->text) opt_txt = dropdown->text;
 8017730:	4699      	mov	r9, r3
 8017732:	2b00      	cmp	r3, #0
 8017734:	d100      	bne.n	8017738 <lv_dropdown_event+0xd4>
 8017736:	e17c      	b.n	8017a32 <lv_dropdown_event+0x3ce>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 8017738:	2338      	movs	r3, #56	; 0x38
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801773a:	2216      	movs	r2, #22
 801773c:	2100      	movs	r1, #0
 801773e:	0020      	movs	r0, r4
 8017740:	5ce6      	ldrb	r6, [r4, r3]
 8017742:	f7f4 ff3f 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8017746:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 8017748:	2801      	cmp	r0, #1
 801774a:	d100      	bne.n	801774e <lv_dropdown_event+0xea>
 801774c:	e111      	b.n	8017972 <lv_dropdown_event+0x30e>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 801774e:	230f      	movs	r3, #15
 8017750:	4033      	ands	r3, r6
 8017752:	3b01      	subs	r3, #1
 8017754:	425a      	negs	r2, r3
 8017756:	4153      	adcs	r3, r2
 8017758:	b2db      	uxtb	r3, r3
 801775a:	4698      	mov	r8, r3
    if(dropdown->symbol) {
 801775c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801775e:	2800      	cmp	r0, #0
 8017760:	d100      	bne.n	8017764 <lv_dropdown_event+0x100>
 8017762:	e0e8      	b.n	8017936 <lv_dropdown_event+0x2d2>
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 8017764:	f7f7 ff58 	bl	800f618 <lv_img_src_get_type>
 8017768:	4683      	mov	fp, r0
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 801776a:	2802      	cmp	r0, #2
 801776c:	d100      	bne.n	8017770 <lv_dropdown_event+0x10c>
 801776e:	e11f      	b.n	80179b0 <lv_dropdown_event+0x34c>
            lv_res_t res = lv_img_decoder_get_info(dropdown->symbol, &header);
 8017770:	ae16      	add	r6, sp, #88	; 0x58
 8017772:	0031      	movs	r1, r6
 8017774:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017776:	f7f8 ffb5 	bl	80106e4 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 801777a:	2801      	cmp	r0, #1
 801777c:	d100      	bne.n	8017780 <lv_dropdown_event+0x11c>
 801777e:	e18a      	b.n	8017a96 <lv_dropdown_event+0x432>
 8017780:	4b89      	ldr	r3, [pc, #548]	; (80179a8 <lv_dropdown_event+0x344>)
 8017782:	0019      	movs	r1, r3
 8017784:	9308      	str	r3, [sp, #32]
                symbol_h = -1;
 8017786:	2301      	movs	r3, #1
 8017788:	425b      	negs	r3, r3
 801778a:	9307      	str	r3, [sp, #28]
                symbol_w = -1;
 801778c:	9309      	str	r3, [sp, #36]	; 0x24
        if(symbol_to_left) {
 801778e:	4643      	mov	r3, r8
 8017790:	2b00      	cmp	r3, #0
 8017792:	d100      	bne.n	8017796 <lv_dropdown_event+0x132>
 8017794:	e0fd      	b.n	8017992 <lv_dropdown_event+0x32e>
            symbol_area.x1 = obj->coords.x1 + left;
 8017796:	9b05      	ldr	r3, [sp, #20]
 8017798:	8a22      	ldrh	r2, [r4, #16]
 801779a:	469c      	mov	ip, r3
 801779c:	4462      	add	r2, ip
 801779e:	b293      	uxth	r3, r2
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 80177a0:	3b01      	subs	r3, #1
 80177a2:	18cb      	adds	r3, r1, r3
            symbol_area.x1 = obj->coords.x1 + left;
 80177a4:	b212      	sxth	r2, r2
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 80177a6:	b21b      	sxth	r3, r3
 80177a8:	af0c      	add	r7, sp, #48	; 0x30
 80177aa:	80bb      	strh	r3, [r7, #4]
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 80177ac:	465b      	mov	r3, fp
 80177ae:	803a      	strh	r2, [r7, #0]
 80177b0:	2b02      	cmp	r3, #2
 80177b2:	d100      	bne.n	80177b6 <lv_dropdown_event+0x152>
 80177b4:	e11a      	b.n	80179ec <lv_dropdown_event+0x388>
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 80177b6:	8a63      	ldrh	r3, [r4, #18]
 80177b8:	0020      	movs	r0, r4
 80177ba:	469b      	mov	fp, r3
 80177bc:	f7f1 fa94 	bl	8008ce8 <lv_obj_get_height>
 80177c0:	9a07      	ldr	r2, [sp, #28]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 80177c2:	9908      	ldr	r1, [sp, #32]
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 80177c4:	1a80      	subs	r0, r0, r2
 80177c6:	0fc3      	lsrs	r3, r0, #31
 80177c8:	181b      	adds	r3, r3, r0
 80177ca:	105b      	asrs	r3, r3, #1
 80177cc:	445b      	add	r3, fp
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 80177ce:	3901      	subs	r1, #1
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 80177d0:	b29b      	uxth	r3, r3
 80177d2:	807b      	strh	r3, [r7, #2]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 80177d4:	185b      	adds	r3, r3, r1
 80177d6:	80fb      	strh	r3, [r7, #6]
            lv_draw_img_dsc_init(&img_dsc);
 80177d8:	0030      	movs	r0, r6
 80177da:	f7f7 fd89 	bl	800f2f0 <lv_draw_img_dsc_init>
            lv_obj_init_draw_img_dsc(obj, LV_PART_INDICATOR, &img_dsc);
 80177de:	2180      	movs	r1, #128	; 0x80
 80177e0:	0032      	movs	r2, r6
 80177e2:	0020      	movs	r0, r4
 80177e4:	0289      	lsls	r1, r1, #10
 80177e6:	f7f0 fe61 	bl	80084ac <lv_obj_init_draw_img_dsc>
            img_dsc.pivot.x = symbol_w / 2;
 80177ea:	9909      	ldr	r1, [sp, #36]	; 0x24
            img_dsc.pivot.y = symbol_h / 2;
 80177ec:	9a07      	ldr	r2, [sp, #28]
            img_dsc.pivot.x = symbol_w / 2;
 80177ee:	468c      	mov	ip, r1
 80177f0:	0fcb      	lsrs	r3, r1, #31
 80177f2:	4463      	add	r3, ip
            img_dsc.pivot.y = symbol_h / 2;
 80177f4:	4694      	mov	ip, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 80177f6:	2180      	movs	r1, #128	; 0x80
            img_dsc.pivot.x = symbol_w / 2;
 80177f8:	105b      	asrs	r3, r3, #1
 80177fa:	80b3      	strh	r3, [r6, #4]
            img_dsc.pivot.y = symbol_h / 2;
 80177fc:	0fd3      	lsrs	r3, r2, #31
 80177fe:	4463      	add	r3, ip
 8017800:	105b      	asrs	r3, r3, #1
 8017802:	226d      	movs	r2, #109	; 0x6d
 8017804:	80f3      	strh	r3, [r6, #6]
 8017806:	0289      	lsls	r1, r1, #10
 8017808:	0020      	movs	r0, r4
 801780a:	f7f4 fedb 	bl	800c5c4 <lv_obj_get_style_prop>
            lv_draw_img(draw_ctx, &img_dsc, &symbol_area, dropdown->symbol);
 801780e:	003a      	movs	r2, r7
            img_dsc.angle = lv_obj_get_style_transform_angle(obj, LV_PART_INDICATOR);
 8017810:	8030      	strh	r0, [r6, #0]
            lv_draw_img(draw_ctx, &img_dsc, &symbol_area, dropdown->symbol);
 8017812:	0031      	movs	r1, r6
 8017814:	4650      	mov	r0, sl
 8017816:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017818:	f7f7 fd7a 	bl	800f310 <lv_draw_img>
    lv_draw_label_dsc_init(&label_dsc);
 801781c:	0030      	movs	r0, r6
 801781e:	f7f7 ff09 	bl	800f634 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 8017822:	0032      	movs	r2, r6
 8017824:	2100      	movs	r1, #0
 8017826:	0020      	movs	r0, r4
 8017828:	f7f0 fdee 	bl	8008408 <lv_obj_init_draw_label_dsc>
    lv_txt_get_size(&size, opt_txt, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 801782c:	2214      	movs	r2, #20
 801782e:	5eb3      	ldrsh	r3, [r6, r2]
 8017830:	7f72      	ldrb	r2, [r6, #29]
 8017832:	a80b      	add	r0, sp, #44	; 0x2c
 8017834:	9202      	str	r2, [sp, #8]
 8017836:	4a5d      	ldr	r2, [pc, #372]	; (80179ac <lv_dropdown_event+0x348>)
 8017838:	9201      	str	r2, [sp, #4]
 801783a:	2112      	movs	r1, #18
 801783c:	5e72      	ldrsh	r2, [r6, r1]
 801783e:	4649      	mov	r1, r9
 8017840:	9200      	str	r2, [sp, #0]
 8017842:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017844:	f7ff f91e 	bl	8016a84 <lv_txt_get_size>
    txt_area.y1 = obj->coords.y1 + top;
 8017848:	8a63      	ldrh	r3, [r4, #18]
 801784a:	18ed      	adds	r5, r5, r3
 801784c:	b2ad      	uxth	r5, r5
 801784e:	807d      	strh	r5, [r7, #2]
    txt_area.y2 = txt_area.y1 + size.y;
 8017850:	ab06      	add	r3, sp, #24
 8017852:	8adb      	ldrh	r3, [r3, #22]
 8017854:	18ed      	adds	r5, r5, r3
    if(dropdown->symbol == NULL) {
 8017856:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    txt_area.y2 = txt_area.y1 + size.y;
 8017858:	80fd      	strh	r5, [r7, #6]
    if(dropdown->symbol == NULL) {
 801785a:	2b00      	cmp	r3, #0
 801785c:	d100      	bne.n	8017860 <lv_dropdown_event+0x1fc>
 801785e:	e0d7      	b.n	8017a10 <lv_dropdown_event+0x3ac>
        if(symbol_to_left) {
 8017860:	4643      	mov	r3, r8
 8017862:	2b00      	cmp	r3, #0
 8017864:	d07a      	beq.n	801795c <lv_dropdown_event+0x2f8>
            txt_area.x1 = obj->coords.x2 - right - size.x;
 8017866:	8aa3      	ldrh	r3, [r4, #20]
 8017868:	9a06      	ldr	r2, [sp, #24]
 801786a:	1a9b      	subs	r3, r3, r2
 801786c:	aa06      	add	r2, sp, #24
 801786e:	8a92      	ldrh	r2, [r2, #20]
 8017870:	b29b      	uxth	r3, r3
 8017872:	1a9a      	subs	r2, r3, r2
 8017874:	803a      	strh	r2, [r7, #0]
            txt_area.x2 = txt_area.x1 + size.x;
 8017876:	80bb      	strh	r3, [r7, #4]
    lv_draw_label(draw_ctx, &label_dsc, &txt_area, opt_txt, NULL);
 8017878:	2300      	movs	r3, #0
 801787a:	003a      	movs	r2, r7
 801787c:	9300      	str	r3, [sp, #0]
 801787e:	0031      	movs	r1, r6
 8017880:	464b      	mov	r3, r9
 8017882:	4650      	mov	r0, sl
 8017884:	f7f7 feee 	bl	800f664 <lv_draw_label>
    if(dropdown->text == NULL) {
 8017888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801788a:	2b00      	cmp	r3, #0
 801788c:	d000      	beq.n	8017890 <lv_dropdown_event+0x22c>
 801788e:	e6f6      	b.n	801767e <lv_dropdown_event+0x1a>
        lv_mem_buf_release((char *)opt_txt);
 8017890:	4648      	mov	r0, r9
 8017892:	f7fd fc17 	bl	80150c4 <lv_mem_buf_release>
}
 8017896:	e6f2      	b.n	801767e <lv_dropdown_event+0x1a>
        lv_group_t * g             = lv_obj_get_group(obj);
 8017898:	f7f0 fb52 	bl	8007f40 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 801789c:	f7ed fe6a 	bl	8005574 <lv_group_get_editing>
 80178a0:	0004      	movs	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80178a2:	f7ed fee3 	bl	800566c <lv_indev_get_act>
 80178a6:	f7ed fee7 	bl	8005678 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 80178aa:	2804      	cmp	r0, #4
 80178ac:	d000      	beq.n	80178b0 <lv_dropdown_event+0x24c>
 80178ae:	e6e6      	b.n	801767e <lv_dropdown_event+0x1a>
            if(editing) {
 80178b0:	2c00      	cmp	r4, #0
 80178b2:	d13c      	bne.n	801792e <lv_dropdown_event+0x2ca>
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 80178b4:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 80178b6:	8673      	strh	r3, [r6, #50]	; 0x32
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 80178b8:	0030      	movs	r0, r6
 80178ba:	2101      	movs	r1, #1
 80178bc:	f7f0 fb20 	bl	8007f00 <lv_obj_clear_state>
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 80178c0:	2301      	movs	r3, #1
 80178c2:	425b      	negs	r3, r3
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 80178c4:	6a30      	ldr	r0, [r6, #32]
 80178c6:	2101      	movs	r1, #1
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 80178c8:	86f3      	strh	r3, [r6, #54]	; 0x36
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 80178ca:	f7f0 fa93 	bl	8007df4 <lv_obj_add_flag>
    lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 80178ce:	2200      	movs	r2, #0
 80178d0:	2120      	movs	r1, #32
 80178d2:	0030      	movs	r0, r6
 80178d4:	f7ed f9ac 	bl	8004c30 <lv_event_send>
}
 80178d8:	e6d1      	b.n	801767e <lv_dropdown_event+0x1a>
        lv_obj_refresh_self_size(obj);
 80178da:	0030      	movs	r0, r6
 80178dc:	f7f1 faa2 	bl	8008e24 <lv_obj_refresh_self_size>
 80178e0:	e6cd      	b.n	801767e <lv_dropdown_event+0x1a>
        char c = *((char *)lv_event_get_param(e));
 80178e2:	0028      	movs	r0, r5
 80178e4:	f7ed f9e4 	bl	8004cb0 <lv_event_get_param>
 80178e8:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 80178ea:	001a      	movs	r2, r3
 80178ec:	3a12      	subs	r2, #18
 80178ee:	2a01      	cmp	r2, #1
 80178f0:	d942      	bls.n	8017978 <lv_dropdown_event+0x314>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 80178f2:	2b14      	cmp	r3, #20
 80178f4:	d022      	beq.n	801793c <lv_dropdown_event+0x2d8>
 80178f6:	2b11      	cmp	r3, #17
 80178f8:	d020      	beq.n	801793c <lv_dropdown_event+0x2d8>
        else if(c == LV_KEY_ESC) {
 80178fa:	2b1b      	cmp	r3, #27
 80178fc:	d0da      	beq.n	80178b4 <lv_dropdown_event+0x250>
        else if(c == LV_KEY_ENTER) {
 80178fe:	2b0a      	cmp	r3, #10
 8017900:	d000      	beq.n	8017904 <lv_dropdown_event+0x2a0>
 8017902:	e6bc      	b.n	801767e <lv_dropdown_event+0x1a>
            lv_obj_t * indev_obj = lv_indev_get_obj_act();
 8017904:	f7ed ff82 	bl	800580c <lv_indev_get_obj_act>
            if(indev_obj != obj) {
 8017908:	4286      	cmp	r6, r0
 801790a:	d100      	bne.n	801790e <lv_dropdown_event+0x2aa>
 801790c:	e6b7      	b.n	801767e <lv_dropdown_event+0x1a>
                res = btn_release_handler(obj);
 801790e:	0030      	movs	r0, r6
 8017910:	f7ff fe60 	bl	80175d4 <btn_release_handler.isra.0>
                if(res != LV_RES_OK) return;
 8017914:	e6b3      	b.n	801767e <lv_dropdown_event+0x1a>
        lv_point_t * p = lv_event_get_param(e);
 8017916:	0028      	movs	r0, r5
 8017918:	f7ed f9ca 	bl	8004cb0 <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801791c:	2257      	movs	r2, #87	; 0x57
 801791e:	0004      	movs	r4, r0
 8017920:	2100      	movs	r1, #0
 8017922:	0030      	movs	r0, r6
 8017924:	f7f4 fe4e 	bl	800c5c4 <lv_obj_get_style_prop>
        p->y = lv_font_get_line_height(font);
 8017928:	8903      	ldrh	r3, [r0, #8]
 801792a:	8063      	strh	r3, [r4, #2]
 801792c:	e6a7      	b.n	801767e <lv_dropdown_event+0x1a>
                lv_dropdown_open(obj);
 801792e:	0030      	movs	r0, r6
 8017930:	f7ff fd0a 	bl	8017348 <lv_dropdown_open>
 8017934:	e6a3      	b.n	801767e <lv_dropdown_event+0x1a>
 8017936:	ae16      	add	r6, sp, #88	; 0x58
 8017938:	af0c      	add	r7, sp, #48	; 0x30
 801793a:	e76f      	b.n	801781c <lv_dropdown_event+0x1b8>
    return lv_obj_has_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN) ? false : true;
 801793c:	2101      	movs	r1, #1
 801793e:	6a30      	ldr	r0, [r6, #32]
 8017940:	f7f0 fae8 	bl	8007f14 <lv_obj_has_flag>
            if(!lv_dropdown_is_open(obj)) {
 8017944:	2800      	cmp	r0, #0
 8017946:	d1f2      	bne.n	801792e <lv_dropdown_event+0x2ca>
            else if(dropdown->sel_opt_id > 0) {
 8017948:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 801794a:	2b00      	cmp	r3, #0
 801794c:	d100      	bne.n	8017950 <lv_dropdown_event+0x2ec>
 801794e:	e696      	b.n	801767e <lv_dropdown_event+0x1a>
                dropdown->sel_opt_id--;
 8017950:	3b01      	subs	r3, #1
                position_to_selected(obj);
 8017952:	0030      	movs	r0, r6
                dropdown->sel_opt_id--;
 8017954:	8673      	strh	r3, [r6, #50]	; 0x32
                position_to_selected(obj);
 8017956:	f7ff f9c1 	bl	8016cdc <position_to_selected>
 801795a:	e690      	b.n	801767e <lv_dropdown_event+0x1a>
            txt_area.x1 = obj->coords.x1 + left;
 801795c:	9a05      	ldr	r2, [sp, #20]
 801795e:	8a23      	ldrh	r3, [r4, #16]
 8017960:	4694      	mov	ip, r2
            txt_area.x2 = txt_area.x1 + size.x;
 8017962:	aa06      	add	r2, sp, #24
 8017964:	8a92      	ldrh	r2, [r2, #20]
            txt_area.x1 = obj->coords.x1 + left;
 8017966:	4463      	add	r3, ip
 8017968:	b29b      	uxth	r3, r3
 801796a:	803b      	strh	r3, [r7, #0]
            txt_area.x2 = txt_area.x1 + size.x;
 801796c:	189b      	adds	r3, r3, r2
 801796e:	80bb      	strh	r3, [r7, #4]
 8017970:	e782      	b.n	8017878 <lv_dropdown_event+0x214>
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 8017972:	2301      	movs	r3, #1
 8017974:	4698      	mov	r8, r3
 8017976:	e6f1      	b.n	801775c <lv_dropdown_event+0xf8>
    return lv_obj_has_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN) ? false : true;
 8017978:	2101      	movs	r1, #1
 801797a:	6a30      	ldr	r0, [r6, #32]
 801797c:	f7f0 faca 	bl	8007f14 <lv_obj_has_flag>
            if(!lv_dropdown_is_open(obj)) {
 8017980:	2800      	cmp	r0, #0
 8017982:	d1d4      	bne.n	801792e <lv_dropdown_event+0x2ca>
            else if(dropdown->sel_opt_id + 1 < dropdown->option_cnt) {
 8017984:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8017986:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8017988:	3301      	adds	r3, #1
 801798a:	4293      	cmp	r3, r2
 801798c:	db00      	blt.n	8017990 <lv_dropdown_event+0x32c>
 801798e:	e676      	b.n	801767e <lv_dropdown_event+0x1a>
 8017990:	e7df      	b.n	8017952 <lv_dropdown_event+0x2ee>
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 8017992:	9a06      	ldr	r2, [sp, #24]
 8017994:	8aa3      	ldrh	r3, [r4, #20]
 8017996:	1a9b      	subs	r3, r3, r2
 8017998:	b29b      	uxth	r3, r3
 801799a:	1a5a      	subs	r2, r3, r1
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 801799c:	3b01      	subs	r3, #1
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 801799e:	b212      	sxth	r2, r2
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 80179a0:	b21b      	sxth	r3, r3
 80179a2:	e701      	b.n	80177a8 <lv_dropdown_event+0x144>
 80179a4:	0801be20 	.word	0x0801be20
 80179a8:	0000ffff 	.word	0x0000ffff
 80179ac:	00001fff 	.word	0x00001fff
            lv_txt_get_size(&size, dropdown->symbol, symbol_dsc.font, symbol_dsc.letter_space, symbol_dsc.line_space, LV_COORD_MAX,
 80179b0:	203d      	movs	r0, #61	; 0x3d
 80179b2:	ab06      	add	r3, sp, #24
 80179b4:	2234      	movs	r2, #52	; 0x34
 80179b6:	5e9b      	ldrsh	r3, [r3, r2]
 80179b8:	aa06      	add	r2, sp, #24
 80179ba:	1812      	adds	r2, r2, r0
 80179bc:	7812      	ldrb	r2, [r2, #0]
 80179be:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80179c0:	9202      	str	r2, [sp, #8]
 80179c2:	4a3f      	ldr	r2, [pc, #252]	; (8017ac0 <lv_dropdown_event+0x45c>)
 80179c4:	ae16      	add	r6, sp, #88	; 0x58
 80179c6:	9201      	str	r2, [sp, #4]
 80179c8:	aa06      	add	r2, sp, #24
 80179ca:	2032      	movs	r0, #50	; 0x32
 80179cc:	5e12      	ldrsh	r2, [r2, r0]
 80179ce:	0030      	movs	r0, r6
 80179d0:	9200      	str	r2, [sp, #0]
 80179d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80179d4:	f7ff f856 	bl	8016a84 <lv_txt_get_size>
            symbol_w = size.x;
 80179d8:	2200      	movs	r2, #0
 80179da:	5eb3      	ldrsh	r3, [r6, r2]
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 80179dc:	8831      	ldrh	r1, [r6, #0]
            symbol_w = size.x;
 80179de:	9309      	str	r3, [sp, #36]	; 0x24
            symbol_h = size.y;
 80179e0:	2202      	movs	r2, #2
 80179e2:	5eb3      	ldrsh	r3, [r6, r2]
 80179e4:	9307      	str	r3, [sp, #28]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 80179e6:	8873      	ldrh	r3, [r6, #2]
 80179e8:	9308      	str	r3, [sp, #32]
 80179ea:	e6d0      	b.n	801778e <lv_dropdown_event+0x12a>
 80179ec:	9a08      	ldr	r2, [sp, #32]
            symbol_area.y1 = obj->coords.y1 + top;
 80179ee:	8a63      	ldrh	r3, [r4, #18]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 80179f0:	4694      	mov	ip, r2
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 80179f2:	2200      	movs	r2, #0
            symbol_area.y1 = obj->coords.y1 + top;
 80179f4:	18eb      	adds	r3, r5, r3
 80179f6:	b29b      	uxth	r3, r3
 80179f8:	807b      	strh	r3, [r7, #2]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 80179fa:	3b01      	subs	r3, #1
 80179fc:	4463      	add	r3, ip
 80179fe:	80fb      	strh	r3, [r7, #6]
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 8017a00:	4650      	mov	r0, sl
 8017a02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017a04:	a90e      	add	r1, sp, #56	; 0x38
 8017a06:	9200      	str	r2, [sp, #0]
 8017a08:	003a      	movs	r2, r7
 8017a0a:	f7f7 fe2b 	bl	800f664 <lv_draw_label>
 8017a0e:	e705      	b.n	801781c <lv_dropdown_event+0x1b8>
        txt_area.x1 = obj->coords.x1 + (lv_obj_get_width(obj) - size.x) / 2;
 8017a10:	0020      	movs	r0, r4
 8017a12:	8a25      	ldrh	r5, [r4, #16]
 8017a14:	f7f1 f960 	bl	8008cd8 <lv_obj_get_width>
 8017a18:	ab06      	add	r3, sp, #24
 8017a1a:	2214      	movs	r2, #20
 8017a1c:	5e9a      	ldrsh	r2, [r3, r2]
 8017a1e:	1a80      	subs	r0, r0, r2
 8017a20:	0fc3      	lsrs	r3, r0, #31
 8017a22:	181b      	adds	r3, r3, r0
 8017a24:	105b      	asrs	r3, r3, #1
 8017a26:	18eb      	adds	r3, r5, r3
 8017a28:	b29b      	uxth	r3, r3
 8017a2a:	803b      	strh	r3, [r7, #0]
        txt_area.x2 = txt_area.x1 + size.x;
 8017a2c:	189b      	adds	r3, r3, r2
 8017a2e:	80bb      	strh	r3, [r7, #4]
 8017a30:	e722      	b.n	8017878 <lv_dropdown_event+0x214>
        char * buf = lv_mem_buf_get(128);
 8017a32:	2080      	movs	r0, #128	; 0x80
 8017a34:	f7fd faa2 	bl	8014f7c <lv_mem_buf_get>
    if(dropdown->options)  {
 8017a38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
        char * buf = lv_mem_buf_get(128);
 8017a3a:	4681      	mov	r9, r0
    if(dropdown->options)  {
 8017a3c:	2e00      	cmp	r6, #0
 8017a3e:	d03b      	beq.n	8017ab8 <lv_dropdown_event+0x454>
        txt_len     = strlen(dropdown->options);
 8017a40:	0030      	movs	r0, r6
 8017a42:	f7e8 fb69 	bl	8000118 <strlen>
 8017a46:	1e03      	subs	r3, r0, #0
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8017a48:	d021      	beq.n	8017a8e <lv_dropdown_event+0x42a>
    uint32_t line        = 0;
 8017a4a:	2100      	movs	r1, #0
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	46a4      	mov	ip, r4
 8017a50:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8017a52:	e007      	b.n	8017a64 <lv_dropdown_event+0x400>
        if(dropdown->options[i] == '\n') line++;
 8017a54:	5cb3      	ldrb	r3, [r6, r2]
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8017a56:	3201      	adds	r2, #1
        if(dropdown->options[i] == '\n') line++;
 8017a58:	3b0a      	subs	r3, #10
 8017a5a:	425c      	negs	r4, r3
 8017a5c:	4163      	adcs	r3, r4
 8017a5e:	18c9      	adds	r1, r1, r3
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8017a60:	4290      	cmp	r0, r2
 8017a62:	d026      	beq.n	8017ab2 <lv_dropdown_event+0x44e>
 8017a64:	428f      	cmp	r7, r1
 8017a66:	d1f5      	bne.n	8017a54 <lv_dropdown_event+0x3f0>
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 8017a68:	4664      	mov	r4, ip
 8017a6a:	4290      	cmp	r0, r2
 8017a6c:	d926      	bls.n	8017abc <lv_dropdown_event+0x458>
 8017a6e:	2300      	movs	r3, #0
 8017a70:	464f      	mov	r7, r9
 8017a72:	1a80      	subs	r0, r0, r2
 8017a74:	e006      	b.n	8017a84 <lv_dropdown_event+0x420>
        if(buf_size && c >= buf_size - 1) {
 8017a76:	2b7f      	cmp	r3, #127	; 0x7f
 8017a78:	d008      	beq.n	8017a8c <lv_dropdown_event+0x428>
        buf[c] = dropdown->options[i];
 8017a7a:	54f9      	strb	r1, [r7, r3]
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 8017a7c:	3301      	adds	r3, #1
 8017a7e:	4298      	cmp	r0, r3
 8017a80:	d004      	beq.n	8017a8c <lv_dropdown_event+0x428>
 8017a82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a84:	18b6      	adds	r6, r6, r2
 8017a86:	5cf1      	ldrb	r1, [r6, r3]
 8017a88:	290a      	cmp	r1, #10
 8017a8a:	d1f4      	bne.n	8017a76 <lv_dropdown_event+0x412>
 8017a8c:	46b9      	mov	r9, r7
    buf[c] = '\0';
 8017a8e:	2200      	movs	r2, #0
 8017a90:	4649      	mov	r1, r9
 8017a92:	54ca      	strb	r2, [r1, r3]
 8017a94:	e650      	b.n	8017738 <lv_dropdown_event+0xd4>
                symbol_w = header.w;
 8017a96:	9b16      	ldr	r3, [sp, #88]	; 0x58
                symbol_h = header.h;
 8017a98:	2242      	movs	r2, #66	; 0x42
                symbol_w = header.w;
 8017a9a:	02d9      	lsls	r1, r3, #11
 8017a9c:	0d4b      	lsrs	r3, r1, #21
 8017a9e:	9309      	str	r3, [sp, #36]	; 0x24
                symbol_h = header.h;
 8017aa0:	ab06      	add	r3, sp, #24
 8017aa2:	469c      	mov	ip, r3
 8017aa4:	4462      	add	r2, ip
 8017aa6:	8812      	ldrh	r2, [r2, #0]
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8017aa8:	0d49      	lsrs	r1, r1, #21
                symbol_h = header.h;
 8017aaa:	0953      	lsrs	r3, r2, #5
 8017aac:	9307      	str	r3, [sp, #28]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8017aae:	9308      	str	r3, [sp, #32]
 8017ab0:	e66d      	b.n	801778e <lv_dropdown_event+0x12a>
 8017ab2:	4664      	mov	r4, ip
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	e7ea      	b.n	8017a8e <lv_dropdown_event+0x42a>
        buf[0] = '\0';
 8017ab8:	7006      	strb	r6, [r0, #0]
        return;
 8017aba:	e63d      	b.n	8017738 <lv_dropdown_event+0xd4>
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 8017abc:	2300      	movs	r3, #0
 8017abe:	e7e6      	b.n	8017a8e <lv_dropdown_event+0x42a>
 8017ac0:	00001fff 	.word	0x00001fff

08017ac4 <lv_img_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_img_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8017ac4:	b570      	push	{r4, r5, r6, lr}
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_img_t * img = (lv_img_t *)obj;

    img->src       = NULL;
 8017ac6:	2500      	movs	r5, #0
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 8017ac8:	2234      	movs	r2, #52	; 0x34
    img->src       = NULL;
 8017aca:	620d      	str	r5, [r1, #32]
{
 8017acc:	000c      	movs	r4, r1
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 8017ace:	5c8b      	ldrb	r3, [r1, r2]
 8017ad0:	217f      	movs	r1, #127	; 0x7f
 8017ad2:	438b      	bics	r3, r1
 8017ad4:	2103      	movs	r1, #3
 8017ad6:	430b      	orrs	r3, r1
 8017ad8:	54a3      	strb	r3, [r4, r2]
    img->cf        = LV_IMG_CF_UNKNOWN;
    img->w         = lv_obj_get_width(obj);
 8017ada:	0020      	movs	r0, r4
 8017adc:	f7f1 f8fc 	bl	8008cd8 <lv_obj_get_width>
 8017ae0:	8520      	strh	r0, [r4, #40]	; 0x28
    img->h         = lv_obj_get_height(obj);
 8017ae2:	0020      	movs	r0, r4
 8017ae4:	f7f1 f900 	bl	8008ce8 <lv_obj_get_height>
    img->zoom = LV_IMG_ZOOM_NONE;
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
    img->offset.x  = 0;
    img->offset.y  = 0;
    img->pivot.x = 0;
    img->pivot.y = 0;
 8017ae8:	2380      	movs	r3, #128	; 0x80
 8017aea:	045b      	lsls	r3, r3, #17
 8017aec:	6323      	str	r3, [r4, #48]	; 0x30
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8017aee:	4a09      	ldr	r2, [pc, #36]	; (8017b14 <lv_img_constructor+0x50>)
 8017af0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    img->h         = lv_obj_get_height(obj);
 8017af2:	8560      	strh	r0, [r4, #42]	; 0x2a
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8017af4:	4013      	ands	r3, r2
 8017af6:	2280      	movs	r2, #128	; 0x80
 8017af8:	4313      	orrs	r3, r2
    img->obj_size_mode = LV_IMG_SIZE_MODE_VIRTUAL;

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8017afa:	0020      	movs	r0, r4
    img->offset.x  = 0;
 8017afc:	6265      	str	r5, [r4, #36]	; 0x24
    img->angle = 0;
 8017afe:	62e5      	str	r5, [r4, #44]	; 0x2c
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8017b00:	86a3      	strh	r3, [r4, #52]	; 0x34
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8017b02:	2102      	movs	r1, #2
 8017b04:	f7f0 f9b2 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8017b08:	2180      	movs	r1, #128	; 0x80
 8017b0a:	0020      	movs	r0, r4
 8017b0c:	0249      	lsls	r1, r1, #9
 8017b0e:	f7f0 f971 	bl	8007df4 <lv_obj_add_flag>

    LV_TRACE_OBJ_CREATE("finished");
}
 8017b12:	bd70      	pop	{r4, r5, r6, pc}
 8017b14:	fffffc7f 	.word	0xfffffc7f

08017b18 <lv_img_destructor>:

static void lv_img_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8017b18:	b570      	push	{r4, r5, r6, lr}
    LV_UNUSED(class_p);
    lv_img_t * img = (lv_img_t *)obj;
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8017b1a:	2534      	movs	r5, #52	; 0x34
 8017b1c:	2303      	movs	r3, #3
 8017b1e:	5d4a      	ldrb	r2, [r1, r5]
{
 8017b20:	000c      	movs	r4, r1
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8017b22:	4013      	ands	r3, r2
 8017b24:	3b01      	subs	r3, #1
 8017b26:	2b01      	cmp	r3, #1
 8017b28:	d900      	bls.n	8017b2c <lv_img_destructor+0x14>
        lv_mem_free((void *)img->src);
        img->src      = NULL;
        img->src_type = LV_IMG_SRC_UNKNOWN;
    }
}
 8017b2a:	bd70      	pop	{r4, r5, r6, pc}
        lv_mem_free((void *)img->src);
 8017b2c:	6a08      	ldr	r0, [r1, #32]
 8017b2e:	f7fd f9c9 	bl	8014ec4 <lv_mem_free>
        img->src      = NULL;
 8017b32:	2300      	movs	r3, #0
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8017b34:	2203      	movs	r2, #3
        img->src      = NULL;
 8017b36:	6223      	str	r3, [r4, #32]
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8017b38:	5d63      	ldrb	r3, [r4, r5]
 8017b3a:	4313      	orrs	r3, r2
 8017b3c:	5563      	strb	r3, [r4, r5]
}
 8017b3e:	e7f4      	b.n	8017b2a <lv_img_destructor+0x12>

08017b40 <lv_img_create>:
{
 8017b40:	b510      	push	{r4, lr}
 8017b42:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8017b44:	4803      	ldr	r0, [pc, #12]	; (8017b54 <lv_img_create+0x14>)
 8017b46:	f7f0 fa63 	bl	8008010 <lv_obj_class_create_obj>
 8017b4a:	0004      	movs	r4, r0
    lv_obj_class_init_obj(obj);
 8017b4c:	f7f0 fad8 	bl	8008100 <lv_obj_class_init_obj>
}
 8017b50:	0020      	movs	r0, r4
 8017b52:	bd10      	pop	{r4, pc}
 8017b54:	0801be50 	.word	0x0801be50

08017b58 <lv_img_set_src>:
{
 8017b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b5a:	46c6      	mov	lr, r8
 8017b5c:	000e      	movs	r6, r1
 8017b5e:	b500      	push	{lr}
 8017b60:	b086      	sub	sp, #24
 8017b62:	0004      	movs	r4, r0
    lv_obj_invalidate(obj);
 8017b64:	f7f1 fc56 	bl	8009414 <lv_obj_invalidate>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8017b68:	0030      	movs	r0, r6
 8017b6a:	f7f7 fd55 	bl	800f618 <lv_img_src_get_type>
 8017b6e:	0005      	movs	r5, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8017b70:	2803      	cmp	r0, #3
 8017b72:	d100      	bne.n	8017b76 <lv_img_set_src+0x1e>
 8017b74:	e077      	b.n	8017c66 <lv_img_set_src+0x10e>
    lv_img_decoder_get_info(src, &header);
 8017b76:	0030      	movs	r0, r6
 8017b78:	a904      	add	r1, sp, #16
 8017b7a:	f7f8 fdb3 	bl	80106e4 <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8017b7e:	2d00      	cmp	r5, #0
 8017b80:	d137      	bne.n	8017bf2 <lv_img_set_src+0x9a>
        if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8017b82:	2334      	movs	r3, #52	; 0x34
 8017b84:	5ce2      	ldrb	r2, [r4, r3]
 8017b86:	3b31      	subs	r3, #49	; 0x31
 8017b88:	4013      	ands	r3, r2
 8017b8a:	3b01      	subs	r3, #1
 8017b8c:	2b01      	cmp	r3, #1
 8017b8e:	d800      	bhi.n	8017b92 <lv_img_set_src+0x3a>
 8017b90:	e08a      	b.n	8017ca8 <lv_img_set_src+0x150>
        img->src = src;
 8017b92:	6226      	str	r6, [r4, #32]
    img->w        = header.w;
 8017b94:	9b04      	ldr	r3, [sp, #16]
 8017b96:	02da      	lsls	r2, r3, #11
    img->h        = header.h;
 8017b98:	2312      	movs	r3, #18
 8017b9a:	446b      	add	r3, sp
 8017b9c:	8819      	ldrh	r1, [r3, #0]
    img->w        = header.w;
 8017b9e:	0d52      	lsrs	r2, r2, #21
    img->h        = header.h;
 8017ba0:	0949      	lsrs	r1, r1, #5
    img->cf       = header.cf;
 8017ba2:	466b      	mov	r3, sp
    img->src_type = src_type;
 8017ba4:	2003      	movs	r0, #3
    img->cf       = header.cf;
 8017ba6:	7c1b      	ldrb	r3, [r3, #16]
    img->src_type = src_type;
 8017ba8:	2634      	movs	r6, #52	; 0x34
    img->cf       = header.cf;
 8017baa:	06db      	lsls	r3, r3, #27
    img->src_type = src_type;
 8017bac:	0e5b      	lsrs	r3, r3, #25
 8017bae:	4005      	ands	r5, r0
 8017bb0:	431d      	orrs	r5, r3
 8017bb2:	237f      	movs	r3, #127	; 0x7f
    img->w        = header.w;
 8017bb4:	8522      	strh	r2, [r4, #40]	; 0x28
    img->h        = header.h;
 8017bb6:	8561      	strh	r1, [r4, #42]	; 0x2a
    img->src_type = src_type;
 8017bb8:	5da0      	ldrb	r0, [r4, r6]
    img->pivot.x = header.w / 2;
 8017bba:	1052      	asrs	r2, r2, #1
    img->src_type = src_type;
 8017bbc:	4398      	bics	r0, r3
 8017bbe:	4305      	orrs	r5, r0
    img->pivot.y = header.h / 2;
 8017bc0:	1049      	asrs	r1, r1, #1
    img->src_type = src_type;
 8017bc2:	55a5      	strb	r5, [r4, r6]
    lv_obj_refresh_self_size(obj);
 8017bc4:	0020      	movs	r0, r4
    img->pivot.x = header.w / 2;
 8017bc6:	85e2      	strh	r2, [r4, #46]	; 0x2e
    img->pivot.y = header.h / 2;
 8017bc8:	8621      	strh	r1, [r4, #48]	; 0x30
    lv_obj_refresh_self_size(obj);
 8017bca:	f7f1 f92b 	bl	8008e24 <lv_obj_refresh_self_size>
    if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_size(obj);
 8017bce:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d104      	bne.n	8017bde <lv_img_set_src+0x86>
 8017bd4:	3301      	adds	r3, #1
 8017bd6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8017bd8:	33ff      	adds	r3, #255	; 0xff
 8017bda:	429a      	cmp	r2, r3
 8017bdc:	d002      	beq.n	8017be4 <lv_img_set_src+0x8c>
 8017bde:	0020      	movs	r0, r4
 8017be0:	f7f0 fd2e 	bl	8008640 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 8017be4:	0020      	movs	r0, r4
 8017be6:	f7f1 fc15 	bl	8009414 <lv_obj_invalidate>
}
 8017bea:	b006      	add	sp, #24
 8017bec:	bc80      	pop	{r7}
 8017bee:	46b8      	mov	r8, r7
 8017bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 8017bf2:	1e6b      	subs	r3, r5, #1
 8017bf4:	b2db      	uxtb	r3, r3
 8017bf6:	2b01      	cmp	r3, #1
 8017bf8:	d943      	bls.n	8017c82 <lv_img_set_src+0x12a>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 8017bfa:	2d02      	cmp	r5, #2
 8017bfc:	d1ca      	bne.n	8017b94 <lv_img_set_src+0x3c>
 8017bfe:	2257      	movs	r2, #87	; 0x57
 8017c00:	2100      	movs	r1, #0
 8017c02:	0020      	movs	r0, r4
 8017c04:	f7f4 fcde 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8017c08:	2258      	movs	r2, #88	; 0x58
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8017c0a:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8017c0c:	2100      	movs	r1, #0
 8017c0e:	0020      	movs	r0, r4
 8017c10:	f7f4 fcd8 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8017c14:	2259      	movs	r2, #89	; 0x59
    return (lv_coord_t)v.num;
 8017c16:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8017c18:	2100      	movs	r1, #0
 8017c1a:	0020      	movs	r0, r4
    return (lv_coord_t)v.num;
 8017c1c:	4698      	mov	r8, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8017c1e:	f7f4 fcd1 	bl	800c5c4 <lv_obj_get_style_prop>
        lv_txt_get_size(&size, src, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8017c22:	2300      	movs	r3, #0
 8017c24:	9302      	str	r3, [sp, #8]
 8017c26:	4b31      	ldr	r3, [pc, #196]	; (8017cec <lv_img_set_src+0x194>)
    return (lv_coord_t)v.num;
 8017c28:	b200      	sxth	r0, r0
 8017c2a:	003a      	movs	r2, r7
 8017c2c:	0031      	movs	r1, r6
 8017c2e:	9301      	str	r3, [sp, #4]
 8017c30:	9000      	str	r0, [sp, #0]
 8017c32:	4643      	mov	r3, r8
 8017c34:	a805      	add	r0, sp, #20
 8017c36:	f7fe ff25 	bl	8016a84 <lv_txt_get_size>
        header.w = size.x;
 8017c3a:	466b      	mov	r3, sp
 8017c3c:	8a9b      	ldrh	r3, [r3, #20]
 8017c3e:	9804      	ldr	r0, [sp, #16]
 8017c40:	055b      	lsls	r3, r3, #21
 8017c42:	0ad9      	lsrs	r1, r3, #11
 8017c44:	0d5a      	lsrs	r2, r3, #21
 8017c46:	4b2a      	ldr	r3, [pc, #168]	; (8017cf0 <lv_img_set_src+0x198>)
 8017c48:	4003      	ands	r3, r0
 8017c4a:	430b      	orrs	r3, r1
        header.h = size.y;
 8017c4c:	4669      	mov	r1, sp
        header.w = size.x;
 8017c4e:	9304      	str	r3, [sp, #16]
        header.h = size.y;
 8017c50:	8ac8      	ldrh	r0, [r1, #22]
 8017c52:	02db      	lsls	r3, r3, #11
 8017c54:	0540      	lsls	r0, r0, #21
 8017c56:	0d41      	lsrs	r1, r0, #21
 8017c58:	0edb      	lsrs	r3, r3, #27
 8017c5a:	0c00      	lsrs	r0, r0, #16
 8017c5c:	4303      	orrs	r3, r0
 8017c5e:	2012      	movs	r0, #18
 8017c60:	4468      	add	r0, sp
 8017c62:	8003      	strh	r3, [r0, #0]
 8017c64:	e79d      	b.n	8017ba2 <lv_img_set_src+0x4a>
        if(img->src_type == LV_IMG_SRC_SYMBOL || img->src_type == LV_IMG_SRC_FILE) {
 8017c66:	2334      	movs	r3, #52	; 0x34
 8017c68:	5ce0      	ldrb	r0, [r4, r3]
 8017c6a:	4005      	ands	r5, r0
 8017c6c:	3d01      	subs	r5, #1
 8017c6e:	2d01      	cmp	r5, #1
 8017c70:	d91e      	bls.n	8017cb0 <lv_img_set_src+0x158>
        img->src      = NULL;
 8017c72:	2300      	movs	r3, #0
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8017c74:	2234      	movs	r2, #52	; 0x34
 8017c76:	2103      	movs	r1, #3
        img->src      = NULL;
 8017c78:	6223      	str	r3, [r4, #32]
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8017c7a:	5ca3      	ldrb	r3, [r4, r2]
 8017c7c:	430b      	orrs	r3, r1
 8017c7e:	54a3      	strb	r3, [r4, r2]
        return;
 8017c80:	e7b3      	b.n	8017bea <lv_img_set_src+0x92>
        if(img->src != src) {
 8017c82:	6a27      	ldr	r7, [r4, #32]
 8017c84:	42b7      	cmp	r7, r6
 8017c86:	d0b8      	beq.n	8017bfa <lv_img_set_src+0xa2>
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8017c88:	2334      	movs	r3, #52	; 0x34
 8017c8a:	5ce2      	ldrb	r2, [r4, r3]
 8017c8c:	3b31      	subs	r3, #49	; 0x31
 8017c8e:	4013      	ands	r3, r2
 8017c90:	3b01      	subs	r3, #1
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8017c92:	0030      	movs	r0, r6
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8017c94:	2b01      	cmp	r3, #1
 8017c96:	d915      	bls.n	8017cc4 <lv_img_set_src+0x16c>
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8017c98:	f7e8 fa3e 	bl	8000118 <strlen>
 8017c9c:	3001      	adds	r0, #1
 8017c9e:	f7fd f8ef 	bl	8014e80 <lv_mem_alloc>
 8017ca2:	1e07      	subs	r7, r0, #0
            LV_ASSERT_MALLOC(new_str);
 8017ca4:	d108      	bne.n	8017cb8 <lv_img_set_src+0x160>
 8017ca6:	e7fe      	b.n	8017ca6 <lv_img_set_src+0x14e>
            lv_mem_free((void *)img->src);
 8017ca8:	6a20      	ldr	r0, [r4, #32]
 8017caa:	f7fd f90b 	bl	8014ec4 <lv_mem_free>
 8017cae:	e770      	b.n	8017b92 <lv_img_set_src+0x3a>
            lv_mem_free((void *)img->src);
 8017cb0:	6a20      	ldr	r0, [r4, #32]
 8017cb2:	f7fd f907 	bl	8014ec4 <lv_mem_free>
 8017cb6:	e7dc      	b.n	8017c72 <lv_img_set_src+0x11a>
            strcpy(new_str, src);
 8017cb8:	0031      	movs	r1, r6
 8017cba:	0038      	movs	r0, r7
 8017cbc:	f003 fc34 	bl	801b528 <strcpy>
            img->src = new_str;
 8017cc0:	6227      	str	r7, [r4, #32]
            if(old_src) lv_mem_free((void *)old_src);
 8017cc2:	e79a      	b.n	8017bfa <lv_img_set_src+0xa2>
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8017cc4:	f7e8 fa28 	bl	8000118 <strlen>
 8017cc8:	3001      	adds	r0, #1
 8017cca:	f7fd f8d9 	bl	8014e80 <lv_mem_alloc>
 8017cce:	4680      	mov	r8, r0
            LV_ASSERT_MALLOC(new_str);
 8017cd0:	2800      	cmp	r0, #0
 8017cd2:	d0e8      	beq.n	8017ca6 <lv_img_set_src+0x14e>
            strcpy(new_str, src);
 8017cd4:	0031      	movs	r1, r6
 8017cd6:	f003 fc27 	bl	801b528 <strcpy>
            img->src = new_str;
 8017cda:	4643      	mov	r3, r8
 8017cdc:	6223      	str	r3, [r4, #32]
            if(old_src) lv_mem_free((void *)old_src);
 8017cde:	2f00      	cmp	r7, #0
 8017ce0:	d08b      	beq.n	8017bfa <lv_img_set_src+0xa2>
 8017ce2:	0038      	movs	r0, r7
 8017ce4:	f7fd f8ee 	bl	8014ec4 <lv_mem_free>
 8017ce8:	e787      	b.n	8017bfa <lv_img_set_src+0xa2>
 8017cea:	46c0      	nop			; (mov r8, r8)
 8017cec:	00001fff 	.word	0x00001fff
 8017cf0:	ffe003ff 	.word	0xffe003ff

08017cf4 <lv_img_event>:
        lv_area_get_width(&area_transform), lv_area_get_height(&area_transform)
    };
}

static void lv_img_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8017cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cf6:	46de      	mov	lr, fp
 8017cf8:	4645      	mov	r5, r8
 8017cfa:	4657      	mov	r7, sl
 8017cfc:	464e      	mov	r6, r9
 8017cfe:	b5e0      	push	{r5, r6, r7, lr}
    LV_UNUSED(class_p);

    lv_event_code_t code = lv_event_get_code(e);
 8017d00:	0008      	movs	r0, r1
{
 8017d02:	b09d      	sub	sp, #116	; 0x74
 8017d04:	000c      	movs	r4, r1
    lv_event_code_t code = lv_event_get_code(e);
 8017d06:	f7ec ffcf 	bl	8004ca8 <lv_event_get_code>
 8017d0a:	0005      	movs	r5, r0

    /*Ancestor events will be called during drawing*/
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 8017d0c:	2815      	cmp	r0, #21
 8017d0e:	d032      	beq.n	8017d76 <lv_img_event+0x82>
 8017d10:	2818      	cmp	r0, #24
 8017d12:	d10e      	bne.n	8017d32 <lv_img_event+0x3e>
        /*Call the ancestor's event handler*/
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
        if(res != LV_RES_OK) return;
    }

    lv_obj_t * obj = lv_event_get_target(e);
 8017d14:	0020      	movs	r0, r4
 8017d16:	f7ec ffc3 	bl	8004ca0 <lv_event_get_target>
        else {
            p->x = img->w;
            p->y = img->h;
        }
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8017d1a:	2392      	movs	r3, #146	; 0x92
 8017d1c:	045b      	lsls	r3, r3, #17
 8017d1e:	40eb      	lsrs	r3, r5
 8017d20:	07db      	lsls	r3, r3, #31
 8017d22:	d42b      	bmi.n	8017d7c <lv_img_event+0x88>
        draw_img(e);
    }
}
 8017d24:	b01d      	add	sp, #116	; 0x74
 8017d26:	bcf0      	pop	{r4, r5, r6, r7}
 8017d28:	46bb      	mov	fp, r7
 8017d2a:	46b2      	mov	sl, r6
 8017d2c:	46a9      	mov	r9, r5
 8017d2e:	46a0      	mov	r8, r4
 8017d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8017d32:	0021      	movs	r1, r4
 8017d34:	48c6      	ldr	r0, [pc, #792]	; (8018050 <lv_img_event+0x35c>)
 8017d36:	f7ec ff9b 	bl	8004c70 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8017d3a:	2801      	cmp	r0, #1
 8017d3c:	d1f2      	bne.n	8017d24 <lv_img_event+0x30>
    lv_obj_t * obj = lv_event_get_target(e);
 8017d3e:	0020      	movs	r0, r4
 8017d40:	f7ec ffae 	bl	8004ca0 <lv_event_get_target>
 8017d44:	0007      	movs	r7, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8017d46:	2d2a      	cmp	r5, #42	; 0x2a
 8017d48:	d109      	bne.n	8017d5e <lv_img_event+0x6a>
        if(img->src_type == LV_IMG_SRC_SYMBOL) {
 8017d4a:	2334      	movs	r3, #52	; 0x34
 8017d4c:	5cc2      	ldrb	r2, [r0, r3]
 8017d4e:	3b31      	subs	r3, #49	; 0x31
 8017d50:	4013      	ands	r3, r2
 8017d52:	2b02      	cmp	r3, #2
 8017d54:	d100      	bne.n	8017d58 <lv_img_event+0x64>
 8017d56:	e105      	b.n	8017f64 <lv_img_event+0x270>
            lv_obj_refresh_ext_draw_size(obj);
 8017d58:	f7f0 fc72 	bl	8008640 <lv_obj_refresh_ext_draw_size>
 8017d5c:	e7e2      	b.n	8017d24 <lv_img_event+0x30>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8017d5e:	2d13      	cmp	r5, #19
 8017d60:	d100      	bne.n	8017d64 <lv_img_event+0x70>
 8017d62:	e113      	b.n	8017f8c <lv_img_event+0x298>
    else if(code == LV_EVENT_HIT_TEST) {
 8017d64:	2d11      	cmp	r5, #17
 8017d66:	d100      	bne.n	8017d6a <lv_img_event+0x76>
 8017d68:	e152      	b.n	8018010 <lv_img_event+0x31c>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8017d6a:	2d2c      	cmp	r5, #44	; 0x2c
 8017d6c:	d100      	bne.n	8017d70 <lv_img_event+0x7c>
 8017d6e:	e0fd      	b.n	8017f6c <lv_img_event+0x278>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8017d70:	2d18      	cmp	r5, #24
 8017d72:	d8d7      	bhi.n	8017d24 <lv_img_event+0x30>
 8017d74:	e7d1      	b.n	8017d1a <lv_img_event+0x26>
    lv_obj_t * obj = lv_event_get_target(e);
 8017d76:	0020      	movs	r0, r4
 8017d78:	f7ec ff92 	bl	8004ca0 <lv_event_get_target>

static void draw_img(lv_event_t * e)
{
    lv_event_code_t code = lv_event_get_code(e);
 8017d7c:	0020      	movs	r0, r4
 8017d7e:	f7ec ff93 	bl	8004ca8 <lv_event_get_code>
 8017d82:	0006      	movs	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8017d84:	0020      	movs	r0, r4
 8017d86:	f7ec ff8b 	bl	8004ca0 <lv_event_get_target>
 8017d8a:	0005      	movs	r5, r0
    lv_img_t * img = (lv_img_t *)obj;
    if(code == LV_EVENT_COVER_CHECK) {
 8017d8c:	2e12      	cmp	r6, #18
 8017d8e:	d100      	bne.n	8017d92 <lv_img_event+0x9e>
 8017d90:	e160      	b.n	8018054 <lv_img_event+0x360>
                info->res = LV_COVER_RES_NOT_COVER;
                return;
            }
        }
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 8017d92:	2e15      	cmp	r6, #21
 8017d94:	d001      	beq.n	8017d9a <lv_img_event+0xa6>
 8017d96:	2e18      	cmp	r6, #24
 8017d98:	d1c4      	bne.n	8017d24 <lv_img_event+0x30>

        lv_coord_t obj_w = lv_obj_get_width(obj);
 8017d9a:	0028      	movs	r0, r5
 8017d9c:	f7f0 ff9c 	bl	8008cd8 <lv_obj_get_width>
 8017da0:	4680      	mov	r8, r0
        lv_coord_t obj_h = lv_obj_get_height(obj);
 8017da2:	0028      	movs	r0, r5
 8017da4:	f7f0 ffa0 	bl	8008ce8 <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8017da8:	2232      	movs	r2, #50	; 0x32
 8017daa:	2100      	movs	r1, #0
 8017dac:	4681      	mov	r9, r0
 8017dae:	0028      	movs	r0, r5
 8017db0:	f7f4 fc08 	bl	800c5c4 <lv_obj_get_style_prop>
 8017db4:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8017db6:	2212      	movs	r2, #18
 8017db8:	2100      	movs	r1, #0
 8017dba:	0028      	movs	r0, r5
 8017dbc:	f7f4 fc02 	bl	800c5c4 <lv_obj_get_style_prop>

        lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
        lv_coord_t pleft = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8017dc0:	b2bb      	uxth	r3, r7
 8017dc2:	469a      	mov	sl, r3
 8017dc4:	4450      	add	r0, sl
 8017dc6:	b283      	uxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8017dc8:	2213      	movs	r2, #19
 8017dca:	2100      	movs	r1, #0
 8017dcc:	0028      	movs	r0, r5
 8017dce:	469b      	mov	fp, r3
 8017dd0:	f7f4 fbf8 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017dd4:	2210      	movs	r2, #16
 8017dd6:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8017dd8:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017dda:	0028      	movs	r0, r5
 8017ddc:	f7f4 fbf2 	bl	800c5c4 <lv_obj_get_style_prop>
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
        lv_coord_t ptop = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8017de0:	4450      	add	r0, sl
 8017de2:	b287      	uxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017de4:	2211      	movs	r2, #17
 8017de6:	2100      	movs	r1, #0
 8017de8:	0028      	movs	r0, r5
 8017dea:	9705      	str	r7, [sp, #20]
 8017dec:	f7f4 fbea 	bl	800c5c4 <lv_obj_get_style_prop>
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;

        lv_point_t bg_pivot;
        bg_pivot.x = img->pivot.x + pleft;
        bg_pivot.y = img->pivot.y + ptop;
 8017df0:	46bc      	mov	ip, r7
 8017df2:	9007      	str	r0, [sp, #28]
        bg_pivot.x = img->pivot.x + pleft;
 8017df4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
 8017df6:	aa0d      	add	r2, sp, #52	; 0x34
 8017df8:	445b      	add	r3, fp
 8017dfa:	8013      	strh	r3, [r2, #0]
        bg_pivot.y = img->pivot.y + ptop;
 8017dfc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8017dfe:	4463      	add	r3, ip
 8017e00:	8053      	strh	r3, [r2, #2]
        lv_area_t bg_coords;

        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8017e02:	2335      	movs	r3, #53	; 0x35
 8017e04:	5ce9      	ldrb	r1, [r5, r3]
 8017e06:	3b32      	subs	r3, #50	; 0x32
 8017e08:	400b      	ands	r3, r1
 8017e0a:	2b01      	cmp	r3, #1
 8017e0c:	d100      	bne.n	8017e10 <lv_img_event+0x11c>
 8017e0e:	e174      	b.n	80180fa <lv_img_event+0x406>
            /*Object size equals to transformed image size*/
            lv_obj_get_coords(obj, &bg_coords);
        }
        else {
            _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
 8017e10:	212c      	movs	r1, #44	; 0x2c
 8017e12:	5e6b      	ldrsh	r3, [r5, r1]
 8017e14:	9201      	str	r2, [sp, #4]
 8017e16:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 8017e18:	af0e      	add	r7, sp, #56	; 0x38
 8017e1a:	4641      	mov	r1, r8
 8017e1c:	0038      	movs	r0, r7
 8017e1e:	9200      	str	r2, [sp, #0]
 8017e20:	464a      	mov	r2, r9
 8017e22:	f7f8 f887 	bl	800ff34 <_lv_img_buf_get_transformed_area>
                                             img->angle, img->zoom, &bg_pivot);

            /*Modify the coordinates to draw the background for the rotated and scaled coordinates*/
            bg_coords.x1 += obj->coords.x1;
 8017e26:	2210      	movs	r2, #16
 8017e28:	5eab      	ldrsh	r3, [r5, r2]
 8017e2a:	8838      	ldrh	r0, [r7, #0]
 8017e2c:	9303      	str	r3, [sp, #12]
 8017e2e:	8a2a      	ldrh	r2, [r5, #16]
 8017e30:	1810      	adds	r0, r2, r0
 8017e32:	b200      	sxth	r0, r0
 8017e34:	8038      	strh	r0, [r7, #0]
            bg_coords.y1 += obj->coords.y1;
 8017e36:	2112      	movs	r1, #18
 8017e38:	5e6b      	ldrsh	r3, [r5, r1]
 8017e3a:	9304      	str	r3, [sp, #16]
 8017e3c:	8a6b      	ldrh	r3, [r5, #18]
 8017e3e:	8879      	ldrh	r1, [r7, #2]
 8017e40:	1859      	adds	r1, r3, r1
 8017e42:	b209      	sxth	r1, r1
 8017e44:	9102      	str	r1, [sp, #8]
 8017e46:	8079      	strh	r1, [r7, #2]
            bg_coords.x2 += obj->coords.x1;
 8017e48:	88b9      	ldrh	r1, [r7, #4]
 8017e4a:	468c      	mov	ip, r1
            bg_coords.y2 += obj->coords.y1;
 8017e4c:	88f9      	ldrh	r1, [r7, #6]
            bg_coords.x2 += obj->coords.x1;
 8017e4e:	4462      	add	r2, ip
            bg_coords.y2 += obj->coords.y1;
 8017e50:	468c      	mov	ip, r1
 8017e52:	4463      	add	r3, ip
 8017e54:	b21b      	sxth	r3, r3
 8017e56:	469c      	mov	ip, r3
            bg_coords.x2 += obj->coords.x1;
 8017e58:	b212      	sxth	r2, r2
 8017e5a:	80ba      	strh	r2, [r7, #4]
            bg_coords.y2 += obj->coords.y1;
 8017e5c:	80fb      	strh	r3, [r7, #6]
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
    dest->y1 = src->y1;
    dest->x2 = src->x2;
 8017e5e:	2314      	movs	r3, #20
 8017e60:	5ee9      	ldrsh	r1, [r5, r3]
    dest->x1 = src->x1;
 8017e62:	8228      	strh	r0, [r5, #16]
    dest->x2 = src->x2;
 8017e64:	4689      	mov	r9, r1
    dest->y2 = src->y2;
 8017e66:	2316      	movs	r3, #22
 8017e68:	5ee9      	ldrsh	r1, [r5, r3]
    dest->y1 = src->y1;
 8017e6a:	9b02      	ldr	r3, [sp, #8]
    dest->y2 = src->y2;
 8017e6c:	4688      	mov	r8, r1
    dest->y1 = src->y1;
 8017e6e:	826b      	strh	r3, [r5, #18]
    dest->y2 = src->y2;
 8017e70:	4663      	mov	r3, ip

        lv_area_t ori_coords;
        lv_area_copy(&ori_coords, &obj->coords);
        lv_area_copy(&obj->coords, &bg_coords);

        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8017e72:	0021      	movs	r1, r4
 8017e74:	4876      	ldr	r0, [pc, #472]	; (8018050 <lv_img_event+0x35c>)
    dest->x2 = src->x2;
 8017e76:	82aa      	strh	r2, [r5, #20]
    dest->y2 = src->y2;
 8017e78:	82eb      	strh	r3, [r5, #22]
 8017e7a:	f7ec fef9 	bl	8004c70 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8017e7e:	2801      	cmp	r0, #1
 8017e80:	d000      	beq.n	8017e84 <lv_img_event+0x190>
 8017e82:	e74f      	b.n	8017d24 <lv_img_event+0x30>
    dest->x1 = src->x1;
 8017e84:	9b03      	ldr	r3, [sp, #12]
 8017e86:	822b      	strh	r3, [r5, #16]
    dest->y1 = src->y1;
 8017e88:	9b04      	ldr	r3, [sp, #16]
 8017e8a:	826b      	strh	r3, [r5, #18]
    dest->x2 = src->x2;
 8017e8c:	464b      	mov	r3, r9
 8017e8e:	82ab      	strh	r3, [r5, #20]
    dest->y2 = src->y2;
 8017e90:	4643      	mov	r3, r8
 8017e92:	82eb      	strh	r3, [r5, #22]

        lv_area_copy(&obj->coords, &ori_coords);

        if(code == LV_EVENT_DRAW_MAIN) {
 8017e94:	2e15      	cmp	r6, #21
 8017e96:	d000      	beq.n	8017e9a <lv_img_event+0x1a6>
 8017e98:	e744      	b.n	8017d24 <lv_img_event+0x30>
            if(img->h == 0 || img->w == 0) return;
 8017e9a:	222a      	movs	r2, #42	; 0x2a
 8017e9c:	5eab      	ldrsh	r3, [r5, r2]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d100      	bne.n	8017ea4 <lv_img_event+0x1b0>
 8017ea2:	e73f      	b.n	8017d24 <lv_img_event+0x30>
 8017ea4:	2228      	movs	r2, #40	; 0x28
 8017ea6:	5eab      	ldrsh	r3, [r5, r2]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d100      	bne.n	8017eae <lv_img_event+0x1ba>
 8017eac:	e73a      	b.n	8017d24 <lv_img_event+0x30>
            if(img->zoom == 0) return;
 8017eae:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d100      	bne.n	8017eb6 <lv_img_event+0x1c2>
 8017eb4:	e736      	b.n	8017d24 <lv_img_event+0x30>

            lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8017eb6:	0020      	movs	r0, r4
 8017eb8:	f7ec ff58 	bl	8004d6c <lv_event_get_draw_ctx>
    dest->x1 = src->x1;
 8017ebc:	2310      	movs	r3, #16
 8017ebe:	5eec      	ldrsh	r4, [r5, r3]
    dest->y1 = src->y1;
 8017ec0:	2212      	movs	r2, #18
 8017ec2:	5eab      	ldrsh	r3, [r5, r2]
 8017ec4:	4680      	mov	r8, r0
 8017ec6:	9303      	str	r3, [sp, #12]
    dest->x2 = src->x2;
 8017ec8:	2214      	movs	r2, #20
 8017eca:	5eab      	ldrsh	r3, [r5, r2]
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
 8017ecc:	ae14      	add	r6, sp, #80	; 0x50
 8017ece:	9304      	str	r3, [sp, #16]
    dest->y2 = src->y2;
 8017ed0:	2216      	movs	r2, #22
 8017ed2:	5eab      	ldrsh	r3, [r5, r2]
 8017ed4:	9308      	str	r3, [sp, #32]
 8017ed6:	222c      	movs	r2, #44	; 0x2c
 8017ed8:	5eab      	ldrsh	r3, [r5, r2]
 8017eda:	212a      	movs	r1, #42	; 0x2a
 8017edc:	5e6a      	ldrsh	r2, [r5, r1]
 8017ede:	2028      	movs	r0, #40	; 0x28
 8017ee0:	5e29      	ldrsh	r1, [r5, r0]
                                     img->angle, img->zoom, &img->pivot);
 8017ee2:	0028      	movs	r0, r5
 8017ee4:	302e      	adds	r0, #46	; 0x2e
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
 8017ee6:	9001      	str	r0, [sp, #4]
 8017ee8:	8e68      	ldrh	r0, [r5, #50]	; 0x32
 8017eea:	9000      	str	r0, [sp, #0]
 8017eec:	0030      	movs	r0, r6
 8017eee:	f7f8 f821 	bl	800ff34 <_lv_img_buf_get_transformed_area>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8017ef2:	88b3      	ldrh	r3, [r6, #4]
 8017ef4:	8832      	ldrh	r2, [r6, #0]
 8017ef6:	3301      	adds	r3, #1
 8017ef8:	1a9b      	subs	r3, r3, r2
 8017efa:	b29b      	uxth	r3, r3
 8017efc:	4699      	mov	r9, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8017efe:	88f3      	ldrh	r3, [r6, #6]
 8017f00:	8872      	ldrh	r2, [r6, #2]
 8017f02:	3301      	adds	r3, #1
 8017f04:	1a9b      	subs	r3, r3, r2
 8017f06:	b29b      	uxth	r3, r3
 8017f08:	9302      	str	r3, [sp, #8]
            lv_area_t img_max_area;
            lv_area_copy(&img_max_area, &obj->coords);

            lv_point_t img_size_final = lv_img_get_transformed_size(obj);

            if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8017f0a:	2335      	movs	r3, #53	; 0x35
 8017f0c:	5cea      	ldrb	r2, [r5, r3]
 8017f0e:	3b32      	subs	r3, #50	; 0x32
 8017f10:	4013      	ands	r3, r2
 8017f12:	2b01      	cmp	r3, #1
 8017f14:	d100      	bne.n	8017f18 <lv_img_event+0x224>
 8017f16:	e216      	b.n	8018346 <lv_img_event+0x652>
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
                img_max_area.y2 -= ((img->h - img_size_final.y) + 1) / 2;
            }
            else {
                img_max_area.x2 = img_max_area.x1 + lv_area_get_width(&bg_coords) - 1;
 8017f18:	b2a1      	uxth	r1, r4
 8017f1a:	468c      	mov	ip, r1
 8017f1c:	9109      	str	r1, [sp, #36]	; 0x24
 8017f1e:	88bb      	ldrh	r3, [r7, #4]
 8017f20:	883a      	ldrh	r2, [r7, #0]
 8017f22:	1a9b      	subs	r3, r3, r2
 8017f24:	4463      	add	r3, ip
 8017f26:	b29b      	uxth	r3, r3
 8017f28:	930a      	str	r3, [sp, #40]	; 0x28
                img_max_area.y2 = img_max_area.y1 + lv_area_get_height(&bg_coords) - 1;
 8017f2a:	466b      	mov	r3, sp
 8017f2c:	8999      	ldrh	r1, [r3, #12]
 8017f2e:	468c      	mov	ip, r1
 8017f30:	910b      	str	r1, [sp, #44]	; 0x2c
 8017f32:	88fb      	ldrh	r3, [r7, #6]
 8017f34:	887a      	ldrh	r2, [r7, #2]
 8017f36:	1a9b      	subs	r3, r3, r2
 8017f38:	4463      	add	r3, ip
 8017f3a:	b29b      	uxth	r3, r3
 8017f3c:	9308      	str	r3, [sp, #32]
            img_max_area.x1 += pleft;
            img_max_area.y1 += ptop;
            img_max_area.x2 -= pright;
            img_max_area.y2 -= pbottom;

            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_VARIABLE) {
 8017f3e:	2434      	movs	r4, #52	; 0x34
 8017f40:	5d2b      	ldrb	r3, [r5, r4]
 8017f42:	079a      	lsls	r2, r3, #30
 8017f44:	d400      	bmi.n	8017f48 <lv_img_event+0x254>
 8017f46:	e15d      	b.n	8018204 <lv_img_event+0x510>
        lv_area_copy(&obj->coords, &bg_coords);
 8017f48:	002c      	movs	r4, r5
                        lv_draw_img(draw_ctx, &img_dsc, &coords_tmp, img->src);
                    }
                }
                draw_ctx->clip_area = clip_area_ori;
            }
            else if(img->src_type == LV_IMG_SRC_SYMBOL) {
 8017f4a:	2203      	movs	r2, #3
        lv_area_copy(&obj->coords, &bg_coords);
 8017f4c:	3410      	adds	r4, #16
            else if(img->src_type == LV_IMG_SRC_SYMBOL) {
 8017f4e:	4013      	ands	r3, r2
 8017f50:	2b02      	cmp	r3, #2
 8017f52:	d100      	bne.n	8017f56 <lv_img_event+0x262>
 8017f54:	e22e      	b.n	80183b4 <lv_img_event+0x6c0>
                lv_draw_label(draw_ctx, &label_dsc, &obj->coords, img->src, NULL);
            }
            else {
                /*Trigger the error handler of image draw*/
                LV_LOG_WARN("draw_img: image source type is unknown");
                lv_draw_img(draw_ctx, NULL, &obj->coords, NULL);
 8017f56:	2300      	movs	r3, #0
 8017f58:	0022      	movs	r2, r4
 8017f5a:	2100      	movs	r1, #0
 8017f5c:	4640      	mov	r0, r8
 8017f5e:	f7f7 f9d7 	bl	800f310 <lv_draw_img>
 8017f62:	e6df      	b.n	8017d24 <lv_img_event+0x30>
            lv_img_set_src(obj, img->src);
 8017f64:	6a01      	ldr	r1, [r0, #32]
 8017f66:	f7ff fdf7 	bl	8017b58 <lv_img_set_src>
 8017f6a:	e6db      	b.n	8017d24 <lv_img_event+0x30>
        lv_point_t * p = lv_event_get_param(e);
 8017f6c:	0020      	movs	r0, r4
 8017f6e:	f7ec fe9f 	bl	8004cb0 <lv_event_get_param>
        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8017f72:	2335      	movs	r3, #53	; 0x35
 8017f74:	5cfa      	ldrb	r2, [r7, r3]
 8017f76:	3b32      	subs	r3, #50	; 0x32
        lv_point_t * p = lv_event_get_param(e);
 8017f78:	0004      	movs	r4, r0
        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8017f7a:	4013      	ands	r3, r2
 8017f7c:	2b01      	cmp	r3, #1
 8017f7e:	d100      	bne.n	8017f82 <lv_img_event+0x28e>
 8017f80:	e113      	b.n	80181aa <lv_img_event+0x4b6>
            p->x = img->w;
 8017f82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017f84:	8003      	strh	r3, [r0, #0]
            p->y = img->h;
 8017f86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017f88:	8043      	strh	r3, [r0, #2]
 8017f8a:	e6cb      	b.n	8017d24 <lv_img_event+0x30>
        lv_coord_t * s = lv_event_get_param(e);
 8017f8c:	0020      	movs	r0, r4
 8017f8e:	f7ec fe8f 	bl	8004cb0 <lv_event_get_param>
        if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) {
 8017f92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
        lv_coord_t * s = lv_event_get_param(e);
 8017f94:	0005      	movs	r5, r0
        if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) {
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d105      	bne.n	8017fa6 <lv_img_event+0x2b2>
 8017f9a:	3301      	adds	r3, #1
 8017f9c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8017f9e:	33ff      	adds	r3, #255	; 0xff
 8017fa0:	429a      	cmp	r2, r3
 8017fa2:	d100      	bne.n	8017fa6 <lv_img_event+0x2b2>
 8017fa4:	e6be      	b.n	8017d24 <lv_img_event+0x30>
            lv_coord_t w = lv_obj_get_width(obj);
 8017fa6:	0038      	movs	r0, r7
 8017fa8:	f7f0 fe96 	bl	8008cd8 <lv_obj_get_width>
 8017fac:	4681      	mov	r9, r0
            lv_coord_t h = lv_obj_get_height(obj);
 8017fae:	0038      	movs	r0, r7
 8017fb0:	f7f0 fe9a 	bl	8008ce8 <lv_obj_get_height>
            _lv_img_buf_get_transformed_area(&a, w, h, img->angle, img->zoom, &img->pivot);
 8017fb4:	222c      	movs	r2, #44	; 0x2c
 8017fb6:	5ebb      	ldrsh	r3, [r7, r2]
 8017fb8:	003a      	movs	r2, r7
 8017fba:	322e      	adds	r2, #46	; 0x2e
 8017fbc:	9201      	str	r2, [sp, #4]
 8017fbe:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8017fc0:	ae14      	add	r6, sp, #80	; 0x50
 8017fc2:	4649      	mov	r1, r9
 8017fc4:	9200      	str	r2, [sp, #0]
            lv_coord_t h = lv_obj_get_height(obj);
 8017fc6:	4680      	mov	r8, r0
            _lv_img_buf_get_transformed_area(&a, w, h, img->angle, img->zoom, &img->pivot);
 8017fc8:	0002      	movs	r2, r0
 8017fca:	0030      	movs	r0, r6
 8017fcc:	f7f7 ffb2 	bl	800ff34 <_lv_img_buf_get_transformed_area>
            *s = LV_MAX(*s, -a.x1);
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	5eb3      	ldrsh	r3, [r6, r2]
 8017fd4:	2100      	movs	r1, #0
 8017fd6:	5e6a      	ldrsh	r2, [r5, r1]
 8017fd8:	425b      	negs	r3, r3
 8017fda:	4293      	cmp	r3, r2
 8017fdc:	db36      	blt.n	801804c <lv_img_event+0x358>
 8017fde:	b21b      	sxth	r3, r3
 8017fe0:	802b      	strh	r3, [r5, #0]
            *s = LV_MAX(*s, -a.y1);
 8017fe2:	2202      	movs	r2, #2
 8017fe4:	5eb4      	ldrsh	r4, [r6, r2]
 8017fe6:	4264      	negs	r4, r4
 8017fe8:	429c      	cmp	r4, r3
 8017fea:	db2d      	blt.n	8018048 <lv_img_event+0x354>
 8017fec:	b224      	sxth	r4, r4
 8017fee:	802c      	strh	r4, [r5, #0]
            *s = LV_MAX(*s, a.x2 - w);
 8017ff0:	2204      	movs	r2, #4
 8017ff2:	5eb3      	ldrsh	r3, [r6, r2]
 8017ff4:	464a      	mov	r2, r9
 8017ff6:	1a9b      	subs	r3, r3, r2
 8017ff8:	42a3      	cmp	r3, r4
 8017ffa:	db23      	blt.n	8018044 <lv_img_event+0x350>
 8017ffc:	b21b      	sxth	r3, r3
 8017ffe:	802b      	strh	r3, [r5, #0]
            *s = LV_MAX(*s, a.y2 - h);
 8018000:	2206      	movs	r2, #6
 8018002:	5eb0      	ldrsh	r0, [r6, r2]
 8018004:	4642      	mov	r2, r8
 8018006:	1a80      	subs	r0, r0, r2
 8018008:	4298      	cmp	r0, r3
 801800a:	db18      	blt.n	801803e <lv_img_event+0x34a>
 801800c:	8028      	strh	r0, [r5, #0]
 801800e:	e689      	b.n	8017d24 <lv_img_event+0x30>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 8018010:	0020      	movs	r0, r4
 8018012:	f7ec fe4d 	bl	8004cb0 <lv_event_get_param>
 8018016:	0004      	movs	r4, r0
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8018018:	0038      	movs	r0, r7
 801801a:	2328      	movs	r3, #40	; 0x28
 801801c:	5efd      	ldrsh	r5, [r7, r3]
 801801e:	f7f0 fe5b 	bl	8008cd8 <lv_obj_get_width>
 8018022:	4285      	cmp	r5, r0
 8018024:	d100      	bne.n	8018028 <lv_img_event+0x334>
 8018026:	e07e      	b.n	8018126 <lv_img_event+0x432>
            lv_obj_get_click_area(obj, &a);
 8018028:	0038      	movs	r0, r7
 801802a:	a914      	add	r1, sp, #80	; 0x50
 801802c:	f7f2 fbd0 	bl	800a7d0 <lv_obj_get_click_area>
            info->res = _lv_area_is_point_on(&a, info->point, 0);
 8018030:	2200      	movs	r2, #0
 8018032:	6821      	ldr	r1, [r4, #0]
 8018034:	a814      	add	r0, sp, #80	; 0x50
 8018036:	f7fc f979 	bl	801432c <_lv_area_is_point_on>
 801803a:	7120      	strb	r0, [r4, #4]
 801803c:	e672      	b.n	8017d24 <lv_img_event+0x30>
            *s = LV_MAX(*s, a.y2 - h);
 801803e:	0018      	movs	r0, r3
 8018040:	8028      	strh	r0, [r5, #0]
 8018042:	e66f      	b.n	8017d24 <lv_img_event+0x30>
            *s = LV_MAX(*s, a.x2 - w);
 8018044:	0023      	movs	r3, r4
 8018046:	e7d9      	b.n	8017ffc <lv_img_event+0x308>
            *s = LV_MAX(*s, -a.y1);
 8018048:	001c      	movs	r4, r3
 801804a:	e7cf      	b.n	8017fec <lv_img_event+0x2f8>
            *s = LV_MAX(*s, -a.x1);
 801804c:	0013      	movs	r3, r2
 801804e:	e7c6      	b.n	8017fde <lv_img_event+0x2ea>
 8018050:	0801be50 	.word	0x0801be50
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8018054:	0020      	movs	r0, r4
 8018056:	f7ec fe2b 	bl	8004cb0 <lv_event_get_param>
        if(info->res == LV_COVER_RES_MASKED) return;
 801805a:	7803      	ldrb	r3, [r0, #0]
        lv_cover_check_info_t * info = lv_event_get_param(e);
 801805c:	0006      	movs	r6, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 801805e:	2b02      	cmp	r3, #2
 8018060:	d100      	bne.n	8018064 <lv_img_event+0x370>
 8018062:	e65f      	b.n	8017d24 <lv_img_event+0x30>
        if(img->src_type == LV_IMG_SRC_UNKNOWN || img->src_type == LV_IMG_SRC_SYMBOL) {
 8018064:	2334      	movs	r3, #52	; 0x34
 8018066:	5cea      	ldrb	r2, [r5, r3]
 8018068:	0793      	lsls	r3, r2, #30
 801806a:	d443      	bmi.n	80180f4 <lv_img_event+0x400>
        if(img->cf != LV_IMG_CF_TRUE_COLOR && img->cf != LV_IMG_CF_RAW) {
 801806c:	237c      	movs	r3, #124	; 0x7c
 801806e:	4013      	ands	r3, r2
 8018070:	2b10      	cmp	r3, #16
 8018072:	d001      	beq.n	8018078 <lv_img_event+0x384>
 8018074:	2b04      	cmp	r3, #4
 8018076:	d13d      	bne.n	80180f4 <lv_img_event+0x400>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 8018078:	2246      	movs	r2, #70	; 0x46
 801807a:	2100      	movs	r1, #0
 801807c:	0028      	movs	r0, r5
 801807e:	f7f4 faa1 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8018082:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_img_opa(obj, LV_PART_MAIN) != LV_OPA_COVER) {
 8018084:	28ff      	cmp	r0, #255	; 0xff
 8018086:	d135      	bne.n	80180f4 <lv_img_event+0x400>
        if(img->angle != 0) {
 8018088:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 801808a:	2b00      	cmp	r3, #0
 801808c:	d132      	bne.n	80180f4 <lv_img_event+0x400>
        const lv_area_t * clip_area = lv_event_get_param(e);
 801808e:	0020      	movs	r0, r4
 8018090:	f7ec fe0e 	bl	8004cb0 <lv_event_get_param>
        if(img->zoom == LV_IMG_ZOOM_NONE) {
 8018094:	2380      	movs	r3, #128	; 0x80
 8018096:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
        const lv_area_t * clip_area = lv_event_get_param(e);
 8018098:	0007      	movs	r7, r0
        if(img->zoom == LV_IMG_ZOOM_NONE) {
 801809a:	005b      	lsls	r3, r3, #1
 801809c:	429a      	cmp	r2, r3
 801809e:	d100      	bne.n	80180a2 <lv_img_event+0x3ae>
 80180a0:	e09d      	b.n	80181de <lv_img_event+0x4ea>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(obj), lv_obj_get_height(obj), 0, img->zoom, &img->pivot);
 80180a2:	0028      	movs	r0, r5
 80180a4:	f7f0 fe18 	bl	8008cd8 <lv_obj_get_width>
 80180a8:	4680      	mov	r8, r0
 80180aa:	0028      	movs	r0, r5
 80180ac:	f7f0 fe1c 	bl	8008ce8 <lv_obj_get_height>
 80180b0:	002b      	movs	r3, r5
 80180b2:	332e      	adds	r3, #46	; 0x2e
 80180b4:	9301      	str	r3, [sp, #4]
 80180b6:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 80180b8:	ac14      	add	r4, sp, #80	; 0x50
 80180ba:	0002      	movs	r2, r0
 80180bc:	4641      	mov	r1, r8
 80180be:	0020      	movs	r0, r4
 80180c0:	9300      	str	r3, [sp, #0]
 80180c2:	2300      	movs	r3, #0
 80180c4:	f7f7 ff36 	bl	800ff34 <_lv_img_buf_get_transformed_area>
            a.x1 += obj->coords.x1;
 80180c8:	8a2a      	ldrh	r2, [r5, #16]
 80180ca:	8823      	ldrh	r3, [r4, #0]
            a.y1 += obj->coords.y1;
 80180cc:	8861      	ldrh	r1, [r4, #2]
            a.x1 += obj->coords.x1;
 80180ce:	18d3      	adds	r3, r2, r3
 80180d0:	8023      	strh	r3, [r4, #0]
            a.y1 += obj->coords.y1;
 80180d2:	8a6b      	ldrh	r3, [r5, #18]
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 80180d4:	0038      	movs	r0, r7
            a.y1 += obj->coords.y1;
 80180d6:	1859      	adds	r1, r3, r1
 80180d8:	8061      	strh	r1, [r4, #2]
            a.x2 += obj->coords.x1;
 80180da:	88a1      	ldrh	r1, [r4, #4]
 80180dc:	1852      	adds	r2, r2, r1
 80180de:	80a2      	strh	r2, [r4, #4]
            a.y2 += obj->coords.y1;
 80180e0:	88e2      	ldrh	r2, [r4, #6]
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 80180e2:	0021      	movs	r1, r4
            a.y2 += obj->coords.y1;
 80180e4:	189b      	adds	r3, r3, r2
 80180e6:	80e3      	strh	r3, [r4, #6]
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 80180e8:	2200      	movs	r2, #0
 80180ea:	f7fc fa3d 	bl	8014568 <_lv_area_is_in>
 80180ee:	2800      	cmp	r0, #0
 80180f0:	d000      	beq.n	80180f4 <lv_img_event+0x400>
 80180f2:	e617      	b.n	8017d24 <lv_img_event+0x30>
                info->res = LV_COVER_RES_NOT_COVER;
 80180f4:	2301      	movs	r3, #1
 80180f6:	7033      	strb	r3, [r6, #0]
                return;
 80180f8:	e614      	b.n	8017d24 <lv_img_event+0x30>
            lv_obj_get_coords(obj, &bg_coords);
 80180fa:	af0e      	add	r7, sp, #56	; 0x38
 80180fc:	0039      	movs	r1, r7
 80180fe:	0028      	movs	r0, r5
 8018100:	f7f0 fd88 	bl	8008c14 <lv_obj_get_coords>
    dest->x1 = src->x1;
 8018104:	2210      	movs	r2, #16
 8018106:	5eab      	ldrsh	r3, [r5, r2]
 8018108:	9303      	str	r3, [sp, #12]
    dest->y1 = src->y1;
 801810a:	2212      	movs	r2, #18
 801810c:	5eab      	ldrsh	r3, [r5, r2]
 801810e:	9304      	str	r3, [sp, #16]
 8018110:	2302      	movs	r3, #2
 8018112:	5efa      	ldrsh	r2, [r7, r3]
    dest->x1 = src->x1;
 8018114:	2300      	movs	r3, #0
 8018116:	5ef8      	ldrsh	r0, [r7, r3]
    dest->y1 = src->y1;
 8018118:	9202      	str	r2, [sp, #8]
    dest->y2 = src->y2;
 801811a:	2306      	movs	r3, #6
 801811c:	5ef9      	ldrsh	r1, [r7, r3]
    dest->x2 = src->x2;
 801811e:	2304      	movs	r3, #4
 8018120:	5efa      	ldrsh	r2, [r7, r3]
    dest->y2 = src->y2;
 8018122:	468c      	mov	ip, r1
 8018124:	e69b      	b.n	8017e5e <lv_img_event+0x16a>
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8018126:	0038      	movs	r0, r7
 8018128:	232a      	movs	r3, #42	; 0x2a
 801812a:	5efd      	ldrsh	r5, [r7, r3]
 801812c:	f7f0 fddc 	bl	8008ce8 <lv_obj_get_height>
 8018130:	4285      	cmp	r5, r0
 8018132:	d000      	beq.n	8018136 <lv_img_event+0x442>
 8018134:	e778      	b.n	8018028 <lv_img_event+0x334>
 8018136:	2380      	movs	r3, #128	; 0x80
 8018138:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801813a:	005b      	lsls	r3, r3, #1
 801813c:	429a      	cmp	r2, r3
 801813e:	d10b      	bne.n	8018158 <lv_img_event+0x464>
           (img->zoom != LV_IMG_ZOOM_NONE || img->angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 8018140:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018142:	2b00      	cmp	r3, #0
 8018144:	d108      	bne.n	8018158 <lv_img_event+0x464>
 8018146:	2328      	movs	r3, #40	; 0x28
 8018148:	5efa      	ldrsh	r2, [r7, r3]
 801814a:	0fd3      	lsrs	r3, r2, #31
 801814c:	189b      	adds	r3, r3, r2
 801814e:	212e      	movs	r1, #46	; 0x2e
 8018150:	5e7a      	ldrsh	r2, [r7, r1]
 8018152:	105b      	asrs	r3, r3, #1
 8018154:	429a      	cmp	r2, r3
 8018156:	d04b      	beq.n	80181f0 <lv_img_event+0x4fc>
            lv_coord_t w = lv_obj_get_width(obj);
 8018158:	0038      	movs	r0, r7
 801815a:	f7f0 fdbd 	bl	8008cd8 <lv_obj_get_width>
 801815e:	0006      	movs	r6, r0
            lv_coord_t h = lv_obj_get_height(obj);
 8018160:	0038      	movs	r0, r7
 8018162:	f7f0 fdc1 	bl	8008ce8 <lv_obj_get_height>
            _lv_img_buf_get_transformed_area(&coords, w, h, img->angle, img->zoom, &img->pivot);
 8018166:	212c      	movs	r1, #44	; 0x2c
 8018168:	5e7b      	ldrsh	r3, [r7, r1]
 801816a:	0039      	movs	r1, r7
 801816c:	312e      	adds	r1, #46	; 0x2e
 801816e:	9101      	str	r1, [sp, #4]
 8018170:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8018172:	ad14      	add	r5, sp, #80	; 0x50
            lv_coord_t h = lv_obj_get_height(obj);
 8018174:	0002      	movs	r2, r0
            _lv_img_buf_get_transformed_area(&coords, w, h, img->angle, img->zoom, &img->pivot);
 8018176:	9100      	str	r1, [sp, #0]
 8018178:	0028      	movs	r0, r5
 801817a:	0031      	movs	r1, r6
 801817c:	f7f7 feda 	bl	800ff34 <_lv_img_buf_get_transformed_area>
            coords.x1 += obj->coords.x1;
 8018180:	8a3a      	ldrh	r2, [r7, #16]
 8018182:	882b      	ldrh	r3, [r5, #0]
            coords.y1 += obj->coords.y1;
 8018184:	8869      	ldrh	r1, [r5, #2]
            coords.x1 += obj->coords.x1;
 8018186:	18d3      	adds	r3, r2, r3
 8018188:	802b      	strh	r3, [r5, #0]
            coords.y1 += obj->coords.y1;
 801818a:	8a7b      	ldrh	r3, [r7, #18]
            info->res = _lv_area_is_point_on(&coords, info->point, 0);
 801818c:	0028      	movs	r0, r5
            coords.y1 += obj->coords.y1;
 801818e:	1859      	adds	r1, r3, r1
 8018190:	8069      	strh	r1, [r5, #2]
            coords.x2 += obj->coords.x1;
 8018192:	88a9      	ldrh	r1, [r5, #4]
 8018194:	1852      	adds	r2, r2, r1
 8018196:	80aa      	strh	r2, [r5, #4]
            coords.y2 += obj->coords.y1;
 8018198:	88ea      	ldrh	r2, [r5, #6]
            info->res = _lv_area_is_point_on(&coords, info->point, 0);
 801819a:	6821      	ldr	r1, [r4, #0]
            coords.y2 += obj->coords.y1;
 801819c:	189b      	adds	r3, r3, r2
 801819e:	80eb      	strh	r3, [r5, #6]
            info->res = _lv_area_is_point_on(&coords, info->point, 0);
 80181a0:	2200      	movs	r2, #0
 80181a2:	f7fc f8c3 	bl	801432c <_lv_area_is_point_on>
 80181a6:	7120      	strb	r0, [r4, #4]
           (img->zoom != LV_IMG_ZOOM_NONE || img->angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 80181a8:	e5bc      	b.n	8017d24 <lv_img_event+0x30>
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
 80181aa:	222c      	movs	r2, #44	; 0x2c
 80181ac:	5ebb      	ldrsh	r3, [r7, r2]
 80181ae:	212a      	movs	r1, #42	; 0x2a
 80181b0:	5e7a      	ldrsh	r2, [r7, r1]
 80181b2:	2028      	movs	r0, #40	; 0x28
 80181b4:	5e39      	ldrsh	r1, [r7, r0]
                                     img->angle, img->zoom, &img->pivot);
 80181b6:	0038      	movs	r0, r7
 80181b8:	302e      	adds	r0, #46	; 0x2e
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
 80181ba:	9001      	str	r0, [sp, #4]
 80181bc:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 80181be:	ad14      	add	r5, sp, #80	; 0x50
 80181c0:	9000      	str	r0, [sp, #0]
 80181c2:	0028      	movs	r0, r5
 80181c4:	f7f7 feb6 	bl	800ff34 <_lv_img_buf_get_transformed_area>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80181c8:	88aa      	ldrh	r2, [r5, #4]
 80181ca:	882b      	ldrh	r3, [r5, #0]
 80181cc:	3201      	adds	r2, #1
 80181ce:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80181d0:	88eb      	ldrh	r3, [r5, #6]
 80181d2:	8869      	ldrh	r1, [r5, #2]
 80181d4:	3301      	adds	r3, #1
 80181d6:	1a5b      	subs	r3, r3, r1
            *p = lv_img_get_transformed_size(obj);
 80181d8:	8022      	strh	r2, [r4, #0]
 80181da:	8063      	strh	r3, [r4, #2]
 80181dc:	e5a2      	b.n	8017d24 <lv_img_event+0x30>
            if(_lv_area_is_in(clip_area, &obj->coords, 0) == false) {
 80181de:	0029      	movs	r1, r5
 80181e0:	2200      	movs	r2, #0
 80181e2:	3110      	adds	r1, #16
 80181e4:	f7fc f9c0 	bl	8014568 <_lv_area_is_in>
 80181e8:	2800      	cmp	r0, #0
 80181ea:	d000      	beq.n	80181ee <lv_img_event+0x4fa>
 80181ec:	e59a      	b.n	8017d24 <lv_img_event+0x30>
 80181ee:	e781      	b.n	80180f4 <lv_img_event+0x400>
           (img->zoom != LV_IMG_ZOOM_NONE || img->angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 80181f0:	232a      	movs	r3, #42	; 0x2a
 80181f2:	5efa      	ldrsh	r2, [r7, r3]
 80181f4:	0fd3      	lsrs	r3, r2, #31
 80181f6:	189b      	adds	r3, r3, r2
 80181f8:	2130      	movs	r1, #48	; 0x30
 80181fa:	5e7a      	ldrsh	r2, [r7, r1]
 80181fc:	105b      	asrs	r3, r3, #1
 80181fe:	429a      	cmp	r2, r3
 8018200:	d1aa      	bne.n	8018158 <lv_img_event+0x464>
 8018202:	e711      	b.n	8018028 <lv_img_event+0x334>
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8018204:	9806      	ldr	r0, [sp, #24]
 8018206:	4450      	add	r0, sl
 8018208:	b283      	uxth	r3, r0
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 801820a:	9807      	ldr	r0, [sp, #28]
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 801820c:	9304      	str	r3, [sp, #16]
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 801820e:	4450      	add	r0, sl
 8018210:	b281      	uxth	r1, r0
                lv_draw_img_dsc_init(&img_dsc);
 8018212:	0030      	movs	r0, r6
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8018214:	9103      	str	r1, [sp, #12]
                lv_draw_img_dsc_init(&img_dsc);
 8018216:	f7f7 f86b 	bl	800f2f0 <lv_draw_img_dsc_init>
                lv_obj_init_draw_img_dsc(obj, LV_PART_MAIN, &img_dsc);
 801821a:	0032      	movs	r2, r6
 801821c:	2100      	movs	r1, #0
 801821e:	0028      	movs	r0, r5
 8018220:	f7f0 f944 	bl	80084ac <lv_obj_init_draw_img_dsc>
                img_dsc.antialias = img->antialias;
 8018224:	2101      	movs	r1, #1
                img_dsc.zoom = img->zoom;
 8018226:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
                img_dsc.antialias = img->antialias;
 8018228:	5d2a      	ldrb	r2, [r5, r4]
                img_dsc.zoom = img->zoom;
 801822a:	8073      	strh	r3, [r6, #2]
                img_dsc.angle = img->angle;
 801822c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
                img_dsc.antialias = img->antialias;
 801822e:	09d2      	lsrs	r2, r2, #7
                img_dsc.angle = img->angle;
 8018230:	8033      	strh	r3, [r6, #0]
                img_dsc.pivot.x = img->pivot.x;
 8018232:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
                img_clip_area.x1 = bg_coords.x1 + pleft;
 8018234:	ac10      	add	r4, sp, #64	; 0x40
                img_dsc.pivot.x = img->pivot.x;
 8018236:	80b3      	strh	r3, [r6, #4]
                img_dsc.pivot.y = img->pivot.y;
 8018238:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 801823a:	0020      	movs	r0, r4
                img_dsc.pivot.y = img->pivot.y;
 801823c:	80f3      	strh	r3, [r6, #6]
                img_dsc.antialias = img->antialias;
 801823e:	7d33      	ldrb	r3, [r6, #20]
 8018240:	438b      	bics	r3, r1
 8018242:	4313      	orrs	r3, r2
                img_clip_area.y1 = bg_coords.y1 + ptop;
 8018244:	9a05      	ldr	r2, [sp, #20]
                img_dsc.antialias = img->antialias;
 8018246:	7533      	strb	r3, [r6, #20]
                img_clip_area.y1 = bg_coords.y1 + ptop;
 8018248:	4694      	mov	ip, r2
                img_clip_area.x1 = bg_coords.x1 + pleft;
 801824a:	883b      	ldrh	r3, [r7, #0]
                img_clip_area.x2 = bg_coords.x2 - pright;
 801824c:	9a04      	ldr	r2, [sp, #16]
                img_clip_area.x1 = bg_coords.x1 + pleft;
 801824e:	445b      	add	r3, fp
 8018250:	8023      	strh	r3, [r4, #0]
                img_clip_area.y1 = bg_coords.y1 + ptop;
 8018252:	887b      	ldrh	r3, [r7, #2]
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 8018254:	9903      	ldr	r1, [sp, #12]
                img_clip_area.y1 = bg_coords.y1 + ptop;
 8018256:	4463      	add	r3, ip
 8018258:	8063      	strh	r3, [r4, #2]
                img_clip_area.x2 = bg_coords.x2 - pright;
 801825a:	88bb      	ldrh	r3, [r7, #4]
 801825c:	1a9b      	subs	r3, r3, r2
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801825e:	4642      	mov	r2, r8
                img_clip_area.x2 = bg_coords.x2 - pright;
 8018260:	80a3      	strh	r3, [r4, #4]
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 8018262:	88fb      	ldrh	r3, [r7, #6]
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8018264:	6892      	ldr	r2, [r2, #8]
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 8018266:	1a5b      	subs	r3, r3, r1
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8018268:	9206      	str	r2, [sp, #24]
 801826a:	0011      	movs	r1, r2
                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 801826c:	0022      	movs	r2, r4
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 801826e:	80e3      	strh	r3, [r4, #6]
                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 8018270:	f7fb fff6 	bl	8014260 <_lv_area_intersect>
 8018274:	2800      	cmp	r0, #0
 8018276:	d100      	bne.n	801827a <lv_img_event+0x586>
 8018278:	e554      	b.n	8017d24 <lv_img_event+0x30>
            img_max_area.y1 += ptop;
 801827a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801827c:	9b05      	ldr	r3, [sp, #20]
 801827e:	4694      	mov	ip, r2
                draw_ctx->clip_area = &img_clip_area;
 8018280:	4642      	mov	r2, r8
 8018282:	6094      	str	r4, [r2, #8]
                coords_tmp.y1 = img_max_area.y1 + img->offset.y;
 8018284:	8cea      	ldrh	r2, [r5, #38]	; 0x26
            img_max_area.y1 += ptop;
 8018286:	4463      	add	r3, ip
 8018288:	b29b      	uxth	r3, r3
                coords_tmp.y1 = img_max_area.y1 + img->offset.y;
 801828a:	189a      	adds	r2, r3, r2
 801828c:	b291      	uxth	r1, r2
 801828e:	ac12      	add	r4, sp, #72	; 0x48
 8018290:	b212      	sxth	r2, r2
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 8018292:	b21b      	sxth	r3, r3
                coords_tmp.y1 = img_max_area.y1 + img->offset.y;
 8018294:	8062      	strh	r2, [r4, #2]
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 8018296:	4293      	cmp	r3, r2
 8018298:	da02      	bge.n	80182a0 <lv_img_event+0x5ac>
 801829a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801829c:	1acb      	subs	r3, r1, r3
 801829e:	8063      	strh	r3, [r4, #2]
            img_max_area.y2 -= pbottom;
 80182a0:	9a03      	ldr	r2, [sp, #12]
 80182a2:	9b08      	ldr	r3, [sp, #32]
 80182a4:	1a9b      	subs	r3, r3, r2
 80182a6:	b21b      	sxth	r3, r3
 80182a8:	469a      	mov	sl, r3
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 80182aa:	2302      	movs	r3, #2
 80182ac:	5ee2      	ldrsh	r2, [r4, r3]
 80182ae:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80182b0:	1e51      	subs	r1, r2, #1
 80182b2:	185b      	adds	r3, r3, r1
 80182b4:	80e3      	strh	r3, [r4, #6]
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 80182b6:	4592      	cmp	sl, r2
 80182b8:	dd3b      	ble.n	8018332 <lv_img_event+0x63e>
            img_max_area.x1 += pleft;
 80182ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182bc:	445b      	add	r3, fp
 80182be:	b29a      	uxth	r2, r3
 80182c0:	b21b      	sxth	r3, r3
 80182c2:	4693      	mov	fp, r2
 80182c4:	9303      	str	r3, [sp, #12]
            img_max_area.x2 -= pright;
 80182c6:	9a04      	ldr	r2, [sp, #16]
 80182c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182ca:	1a9f      	subs	r7, r3, r2
 80182cc:	0033      	movs	r3, r6
 80182ce:	002e      	movs	r6, r5
 80182d0:	464d      	mov	r5, r9
 80182d2:	4699      	mov	r9, r3
 80182d4:	b23f      	sxth	r7, r7
                    coords_tmp.x1 = img_max_area.x1 + img->offset.x;
 80182d6:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 80182d8:	9a03      	ldr	r2, [sp, #12]
                    coords_tmp.x1 = img_max_area.x1 + img->offset.x;
 80182da:	445b      	add	r3, fp
 80182dc:	b299      	uxth	r1, r3
 80182de:	b21b      	sxth	r3, r3
 80182e0:	8023      	strh	r3, [r4, #0]
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 80182e2:	429a      	cmp	r2, r3
 80182e4:	db29      	blt.n	801833a <lv_img_event+0x646>
 80182e6:	8d32      	ldrh	r2, [r6, #40]	; 0x28
                    coords_tmp.x2 = coords_tmp.x1 + img->w - 1;
 80182e8:	1852      	adds	r2, r2, r1
 80182ea:	3a01      	subs	r2, #1
 80182ec:	80a2      	strh	r2, [r4, #4]
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 80182ee:	429f      	cmp	r7, r3
 80182f0:	dd52      	ble.n	8018398 <lv_img_event+0x6a4>
 80182f2:	003b      	movs	r3, r7
 80182f4:	4647      	mov	r7, r8
 80182f6:	4698      	mov	r8, r3
                        lv_draw_img(draw_ctx, &img_dsc, &coords_tmp, img->src);
 80182f8:	0022      	movs	r2, r4
 80182fa:	6a33      	ldr	r3, [r6, #32]
 80182fc:	4649      	mov	r1, r9
 80182fe:	0038      	movs	r0, r7
 8018300:	f7f7 f806 	bl	800f310 <lv_draw_img>
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 8018304:	8823      	ldrh	r3, [r4, #0]
 8018306:	88a2      	ldrh	r2, [r4, #4]
 8018308:	18eb      	adds	r3, r5, r3
 801830a:	b21b      	sxth	r3, r3
 801830c:	18aa      	adds	r2, r5, r2
 801830e:	8023      	strh	r3, [r4, #0]
 8018310:	80a2      	strh	r2, [r4, #4]
 8018312:	4598      	cmp	r8, r3
 8018314:	dcf0      	bgt.n	80182f8 <lv_img_event+0x604>
 8018316:	4643      	mov	r3, r8
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 8018318:	9902      	ldr	r1, [sp, #8]
 801831a:	46b8      	mov	r8, r7
 801831c:	468c      	mov	ip, r1
 801831e:	001f      	movs	r7, r3
 8018320:	8863      	ldrh	r3, [r4, #2]
 8018322:	88e2      	ldrh	r2, [r4, #6]
 8018324:	4463      	add	r3, ip
 8018326:	b21b      	sxth	r3, r3
 8018328:	4462      	add	r2, ip
 801832a:	8063      	strh	r3, [r4, #2]
 801832c:	80e2      	strh	r2, [r4, #6]
 801832e:	459a      	cmp	sl, r3
 8018330:	dcd1      	bgt.n	80182d6 <lv_img_event+0x5e2>
                draw_ctx->clip_area = clip_area_ori;
 8018332:	4643      	mov	r3, r8
 8018334:	9a06      	ldr	r2, [sp, #24]
 8018336:	609a      	str	r2, [r3, #8]
 8018338:	e4f4      	b.n	8017d24 <lv_img_event+0x30>
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 801833a:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 801833c:	1a8b      	subs	r3, r1, r2
 801833e:	b299      	uxth	r1, r3
 8018340:	b21b      	sxth	r3, r3
 8018342:	8023      	strh	r3, [r4, #0]
 8018344:	e7d0      	b.n	80182e8 <lv_img_event+0x5f4>
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 8018346:	2228      	movs	r2, #40	; 0x28
 8018348:	5eab      	ldrsh	r3, [r5, r2]
 801834a:	464a      	mov	r2, r9
 801834c:	b212      	sxth	r2, r2
 801834e:	1a9a      	subs	r2, r3, r2
 8018350:	3201      	adds	r2, #1
 8018352:	0fd3      	lsrs	r3, r2, #31
 8018354:	189b      	adds	r3, r3, r2
 8018356:	105b      	asrs	r3, r3, #1
 8018358:	425b      	negs	r3, r3
 801835a:	b29b      	uxth	r3, r3
 801835c:	191c      	adds	r4, r3, r4
 801835e:	b2a2      	uxth	r2, r4
 8018360:	9209      	str	r2, [sp, #36]	; 0x24
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
 8018362:	9a04      	ldr	r2, [sp, #16]
 8018364:	4694      	mov	ip, r2
 8018366:	4463      	add	r3, ip
 8018368:	b29b      	uxth	r3, r3
 801836a:	930a      	str	r3, [sp, #40]	; 0x28
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 801836c:	222a      	movs	r2, #42	; 0x2a
 801836e:	5eab      	ldrsh	r3, [r5, r2]
 8018370:	466a      	mov	r2, sp
 8018372:	2108      	movs	r1, #8
 8018374:	5e52      	ldrsh	r2, [r2, r1]
 8018376:	1a9a      	subs	r2, r3, r2
 8018378:	3201      	adds	r2, #1
 801837a:	0fd3      	lsrs	r3, r2, #31
 801837c:	189b      	adds	r3, r3, r2
 801837e:	105b      	asrs	r3, r3, #1
 8018380:	9a03      	ldr	r2, [sp, #12]
 8018382:	425b      	negs	r3, r3
 8018384:	b29b      	uxth	r3, r3
 8018386:	189a      	adds	r2, r3, r2
 8018388:	b292      	uxth	r2, r2
 801838a:	920b      	str	r2, [sp, #44]	; 0x2c
                img_max_area.y2 -= ((img->h - img_size_final.y) + 1) / 2;
 801838c:	9a08      	ldr	r2, [sp, #32]
 801838e:	4694      	mov	ip, r2
 8018390:	4463      	add	r3, ip
 8018392:	b29b      	uxth	r3, r3
 8018394:	9308      	str	r3, [sp, #32]
 8018396:	e5d2      	b.n	8017f3e <lv_img_event+0x24a>
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 8018398:	9a02      	ldr	r2, [sp, #8]
 801839a:	8863      	ldrh	r3, [r4, #2]
 801839c:	4694      	mov	ip, r2
 801839e:	4463      	add	r3, ip
 80183a0:	b21b      	sxth	r3, r3
 80183a2:	4652      	mov	r2, sl
 80183a4:	9902      	ldr	r1, [sp, #8]
 80183a6:	459a      	cmp	sl, r3
 80183a8:	ddc3      	ble.n	8018332 <lv_img_event+0x63e>
 80183aa:	18cb      	adds	r3, r1, r3
 80183ac:	b21b      	sxth	r3, r3
 80183ae:	4293      	cmp	r3, r2
 80183b0:	dbfb      	blt.n	80183aa <lv_img_event+0x6b6>
 80183b2:	e7be      	b.n	8018332 <lv_img_event+0x63e>
                lv_draw_label_dsc_init(&label_dsc);
 80183b4:	0030      	movs	r0, r6
 80183b6:	f7f7 f93d 	bl	800f634 <lv_draw_label_dsc_init>
                lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 80183ba:	0032      	movs	r2, r6
 80183bc:	0028      	movs	r0, r5
 80183be:	2100      	movs	r1, #0
 80183c0:	f7f0 f822 	bl	8008408 <lv_obj_init_draw_label_dsc>
                lv_draw_label(draw_ctx, &label_dsc, &obj->coords, img->src, NULL);
 80183c4:	2300      	movs	r3, #0
 80183c6:	9300      	str	r3, [sp, #0]
 80183c8:	0022      	movs	r2, r4
 80183ca:	0031      	movs	r1, r6
 80183cc:	4640      	mov	r0, r8
 80183ce:	6a2b      	ldr	r3, [r5, #32]
 80183d0:	f7f7 f948 	bl	800f664 <lv_draw_label>
 80183d4:	e4a6      	b.n	8017d24 <lv_img_event+0x30>
 80183d6:	46c0      	nop			; (mov r8, r8)

080183d8 <lv_label_destructor>:
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 80183d8:	2330      	movs	r3, #48	; 0x30
 80183da:	5ccb      	ldrb	r3, [r1, r3]
{
 80183dc:	b510      	push	{r4, lr}
 80183de:	000c      	movs	r4, r1
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 80183e0:	065b      	lsls	r3, r3, #25
 80183e2:	d504      	bpl.n	80183ee <lv_label_destructor+0x16>
 80183e4:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80183e6:	2800      	cmp	r0, #0
 80183e8:	d001      	beq.n	80183ee <lv_label_destructor+0x16>
        lv_mem_free(label->dot.tmp_ptr);
 80183ea:	f7fc fd6b 	bl	8014ec4 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 80183ee:	2230      	movs	r2, #48	; 0x30
 80183f0:	2140      	movs	r1, #64	; 0x40
 80183f2:	5ca3      	ldrb	r3, [r4, r2]
 80183f4:	438b      	bics	r3, r1
 80183f6:	54a3      	strb	r3, [r4, r2]
    label->dot.tmp_ptr   = NULL;
 80183f8:	2200      	movs	r2, #0
 80183fa:	6262      	str	r2, [r4, #36]	; 0x24
    if(!label->static_txt) lv_mem_free(label->text);
 80183fc:	071b      	lsls	r3, r3, #28
 80183fe:	d502      	bpl.n	8018406 <lv_label_destructor+0x2e>
    label->text = NULL;
 8018400:	2300      	movs	r3, #0
 8018402:	6223      	str	r3, [r4, #32]
}
 8018404:	bd10      	pop	{r4, pc}
    if(!label->static_txt) lv_mem_free(label->text);
 8018406:	6a20      	ldr	r0, [r4, #32]
 8018408:	f7fc fd5c 	bl	8014ec4 <lv_mem_free>
 801840c:	e7f8      	b.n	8018400 <lv_label_destructor+0x28>
 801840e:	46c0      	nop			; (mov r8, r8)

08018410 <set_ofs_y_anim>:
    label->offset.x    = v;
    lv_obj_invalidate(obj);
}

static void set_ofs_y_anim(void * obj, int32_t v)
{
 8018410:	b510      	push	{r4, lr}
    lv_label_t * label = (lv_label_t *)obj;
    label->offset.y    = v;
 8018412:	85c1      	strh	r1, [r0, #46]	; 0x2e
    lv_obj_invalidate(obj);
 8018414:	f7f0 fffe 	bl	8009414 <lv_obj_invalidate>
}
 8018418:	bd10      	pop	{r4, pc}
 801841a:	46c0      	nop			; (mov r8, r8)

0801841c <set_ofs_x_anim>:
{
 801841c:	b510      	push	{r4, lr}
    label->offset.x    = v;
 801841e:	8581      	strh	r1, [r0, #44]	; 0x2c
    lv_obj_invalidate(obj);
 8018420:	f7f0 fff8 	bl	8009414 <lv_obj_invalidate>
}
 8018424:	bd10      	pop	{r4, pc}
 8018426:	46c0      	nop			; (mov r8, r8)

08018428 <lv_label_revert_dots.part.0>:
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 8018428:	6a81      	ldr	r1, [r0, #40]	; 0x28
static void lv_label_revert_dots(lv_obj_t * obj)
 801842a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801842c:	0004      	movs	r4, r0
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 801842e:	1c4b      	adds	r3, r1, #1
 8018430:	d031      	beq.n	8018496 <lv_label_revert_dots.part.0+0x6e>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 8018432:	4b1a      	ldr	r3, [pc, #104]	; (801849c <lv_label_revert_dots.part.0+0x74>)
 8018434:	6a00      	ldr	r0, [r0, #32]
 8018436:	681b      	ldr	r3, [r3, #0]
    uint32_t letter_i = label->dot_end - LV_LABEL_DOT_NUM;
 8018438:	3903      	subs	r1, #3
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 801843a:	4798      	blx	r3
    if(label->dot_tmp_alloc) {
 801843c:	2330      	movs	r3, #48	; 0x30
        return label->dot.tmp;
 801843e:	0027      	movs	r7, r4
    if(label->dot_tmp_alloc) {
 8018440:	5ce3      	ldrb	r3, [r4, r3]
        return label->dot.tmp;
 8018442:	3724      	adds	r7, #36	; 0x24
    if(label->dot_tmp_alloc) {
 8018444:	065b      	lsls	r3, r3, #25
 8018446:	d427      	bmi.n	8018498 <lv_label_revert_dots.part.0+0x70>
    while(label->text[byte_i + i] != '\0') {
 8018448:	6a23      	ldr	r3, [r4, #32]
 801844a:	181d      	adds	r5, r3, r0
 801844c:	5c1b      	ldrb	r3, [r3, r0]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d00d      	beq.n	801846e <lv_label_revert_dots.part.0+0x46>
    uint8_t i      = 0;
 8018452:	2300      	movs	r3, #0
    while(label->text[byte_i + i] != '\0') {
 8018454:	2600      	movs	r6, #0
        label->text[byte_i + i] = dot_tmp[i];
 8018456:	5dba      	ldrb	r2, [r7, r6]
        i++;
 8018458:	3301      	adds	r3, #1
        label->text[byte_i + i] = dot_tmp[i];
 801845a:	702a      	strb	r2, [r5, #0]
    while(label->text[byte_i + i] != '\0') {
 801845c:	6a21      	ldr	r1, [r4, #32]
        i++;
 801845e:	b2db      	uxtb	r3, r3
    while(label->text[byte_i + i] != '\0') {
 8018460:	18c2      	adds	r2, r0, r3
 8018462:	188d      	adds	r5, r1, r2
 8018464:	5c8a      	ldrb	r2, [r1, r2]
 8018466:	001e      	movs	r6, r3
 8018468:	2a00      	cmp	r2, #0
 801846a:	d1f4      	bne.n	8018456 <lv_label_revert_dots.part.0+0x2e>
    label->text[byte_i + i] = dot_tmp[i];
 801846c:	18ff      	adds	r7, r7, r3
 801846e:	783b      	ldrb	r3, [r7, #0]
 8018470:	702b      	strb	r3, [r5, #0]
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8018472:	2330      	movs	r3, #48	; 0x30
 8018474:	5ce3      	ldrb	r3, [r4, r3]
 8018476:	065b      	lsls	r3, r3, #25
 8018478:	d504      	bpl.n	8018484 <lv_label_revert_dots.part.0+0x5c>
 801847a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801847c:	2800      	cmp	r0, #0
 801847e:	d001      	beq.n	8018484 <lv_label_revert_dots.part.0+0x5c>
        lv_mem_free(label->dot.tmp_ptr);
 8018480:	f7fc fd20 	bl	8014ec4 <lv_mem_free>
    label->dot_tmp_alloc = false;
 8018484:	2230      	movs	r2, #48	; 0x30
 8018486:	2140      	movs	r1, #64	; 0x40
 8018488:	5ca3      	ldrb	r3, [r4, r2]
 801848a:	438b      	bics	r3, r1
 801848c:	54a3      	strb	r3, [r4, r2]
    label->dot.tmp_ptr   = NULL;
 801848e:	2300      	movs	r3, #0
 8018490:	6263      	str	r3, [r4, #36]	; 0x24
    label->dot_end = LV_LABEL_DOT_END_INV;
 8018492:	3b01      	subs	r3, #1
 8018494:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8018496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return label->dot.tmp_ptr;
 8018498:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801849a:	e7d5      	b.n	8018448 <lv_label_revert_dots.part.0+0x20>
 801849c:	2000007c 	.word	0x2000007c

080184a0 <lv_label_get_letter_on.part.0>:
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 80184a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184a2:	46de      	mov	lr, fp
 80184a4:	4657      	mov	r7, sl
 80184a6:	4645      	mov	r5, r8
 80184a8:	464e      	mov	r6, r9
 80184aa:	b5e0      	push	{r5, r6, r7, lr}
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80184ac:	2200      	movs	r2, #0
 80184ae:	5e8b      	ldrsh	r3, [r1, r2]
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 80184b0:	b091      	sub	sp, #68	; 0x44
 80184b2:	000d      	movs	r5, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80184b4:	2212      	movs	r2, #18
 80184b6:	2100      	movs	r1, #0
 80184b8:	0004      	movs	r4, r0
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80184ba:	9308      	str	r3, [sp, #32]
 80184bc:	f7f4 f882 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80184c0:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80184c2:	9009      	str	r0, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80184c4:	2100      	movs	r1, #0
 80184c6:	0020      	movs	r0, r4
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80184c8:	886d      	ldrh	r5, [r5, #2]
 80184ca:	f7f4 f87b 	bl	800c5c4 <lv_obj_get_style_prop>
 80184ce:	1a2d      	subs	r5, r5, r0
 80184d0:	b22b      	sxth	r3, r5
    lv_obj_get_content_coords(obj, &txt_coords);
 80184d2:	0020      	movs	r0, r4
 80184d4:	a90e      	add	r1, sp, #56	; 0x38
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80184d6:	9304      	str	r3, [sp, #16]
    lv_obj_get_content_coords(obj, &txt_coords);
 80184d8:	f7f0 fc4a 	bl	8008d70 <lv_obj_get_content_coords>
    return label->text;
 80184dc:	6a23      	ldr	r3, [r4, #32]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80184de:	aa08      	add	r2, sp, #32
 80184e0:	4699      	mov	r9, r3
 80184e2:	ab08      	add	r3, sp, #32
 80184e4:	8b9b      	ldrh	r3, [r3, #28]
 80184e6:	8b12      	ldrh	r2, [r2, #24]
 80184e8:	3301      	adds	r3, #1
 80184ea:	1a9b      	subs	r3, r3, r2
 80184ec:	b21b      	sxth	r3, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80184ee:	2257      	movs	r2, #87	; 0x57
 80184f0:	2100      	movs	r1, #0
 80184f2:	0020      	movs	r0, r4
 80184f4:	4698      	mov	r8, r3
 80184f6:	f7f4 f865 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80184fa:	2259      	movs	r2, #89	; 0x59
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80184fc:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80184fe:	2100      	movs	r1, #0
 8018500:	0020      	movs	r0, r4
 8018502:	f7f4 f85f 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8018506:	2258      	movs	r2, #88	; 0x58
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8018508:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801850a:	2100      	movs	r1, #0
 801850c:	0020      	movs	r0, r4
 801850e:	f7f4 f859 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8018512:	b203      	sxth	r3, r0
 8018514:	469a      	mov	sl, r3
 8018516:	465b      	mov	r3, fp
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8018518:	9006      	str	r0, [sp, #24]
 801851a:	2208      	movs	r2, #8
 801851c:	5e9b      	ldrsh	r3, [r3, r2]
 801851e:	9305      	str	r3, [sp, #20]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8018520:	2330      	movs	r3, #48	; 0x30
 8018522:	5ce3      	ldrb	r3, [r4, r3]
 8018524:	06da      	lsls	r2, r3, #27
 8018526:	0fd2      	lsrs	r2, r2, #31
 8018528:	9203      	str	r2, [sp, #12]
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801852a:	069b      	lsls	r3, r3, #26
 801852c:	d502      	bpl.n	8018534 <lv_label_get_letter_on.part.0+0x94>
 801852e:	2302      	movs	r3, #2
 8018530:	431a      	orrs	r2, r3
 8018532:	9203      	str	r2, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8018534:	2201      	movs	r2, #1
 8018536:	2100      	movs	r1, #0
 8018538:	0020      	movs	r0, r4
 801853a:	f7f4 f843 	bl	800c5c4 <lv_obj_get_style_prop>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801853e:	4b9e      	ldr	r3, [pc, #632]	; (80187b8 <lv_label_get_letter_on.part.0+0x318>)
    return (lv_coord_t)v.num;
 8018540:	b200      	sxth	r0, r0
 8018542:	4298      	cmp	r0, r3
 8018544:	d100      	bne.n	8018548 <lv_label_get_letter_on.part.0+0xa8>
 8018546:	e0c0      	b.n	80186ca <lv_label_get_letter_on.part.0+0x22a>
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8018548:	2100      	movs	r1, #0
 801854a:	0020      	movs	r0, r4
 801854c:	6a22      	ldr	r2, [r4, #32]
 801854e:	f7f5 f8f3 	bl	800d738 <lv_obj_calculate_style_text_align>
    while(txt[line_start] != '\0') {
 8018552:	464b      	mov	r3, r9
 8018554:	781b      	ldrb	r3, [r3, #0]
        if(pos.y <= y + letter_height) {
 8018556:	464e      	mov	r6, r9
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8018558:	9007      	str	r0, [sp, #28]
    while(txt[line_start] != '\0') {
 801855a:	2b00      	cmp	r3, #0
 801855c:	d100      	bne.n	8018560 <lv_label_get_letter_on.part.0+0xc0>
 801855e:	e125      	b.n	80187ac <lv_label_get_letter_on.part.0+0x30c>
        y += letter_height + line_space;
 8018560:	9b05      	ldr	r3, [sp, #20]
    lv_coord_t y             = 0;
 8018562:	2500      	movs	r5, #0
        y += letter_height + line_space;
 8018564:	469c      	mov	ip, r3
 8018566:	4467      	add	r7, ip
 8018568:	9705      	str	r7, [sp, #20]
    uint32_t line_start      = 0;
 801856a:	2400      	movs	r4, #0
        y += letter_height + line_space;
 801856c:	464f      	mov	r7, r9
 801856e:	4699      	mov	r9, r3
 8018570:	e008      	b.n	8018584 <lv_label_get_letter_on.part.0+0xe4>
 8018572:	9b05      	ldr	r3, [sp, #20]
    while(txt[line_start] != '\0') {
 8018574:	193e      	adds	r6, r7, r4
 8018576:	469c      	mov	ip, r3
 8018578:	5d3b      	ldrb	r3, [r7, r4]
 801857a:	4465      	add	r5, ip
 801857c:	b22d      	sxth	r5, r5
 801857e:	2b00      	cmp	r3, #0
 8018580:	d100      	bne.n	8018584 <lv_label_get_letter_on.part.0+0xe4>
 8018582:	e085      	b.n	8018690 <lv_label_get_letter_on.part.0+0x1f0>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8018584:	9b03      	ldr	r3, [sp, #12]
 8018586:	4652      	mov	r2, sl
 8018588:	9301      	str	r3, [sp, #4]
 801858a:	2300      	movs	r3, #0
 801858c:	4659      	mov	r1, fp
 801858e:	9300      	str	r3, [sp, #0]
 8018590:	0030      	movs	r0, r6
 8018592:	4643      	mov	r3, r8
 8018594:	f7fe f8ec 	bl	8016770 <_lv_txt_get_next_line>
        if(pos.y <= y + letter_height) {
 8018598:	464b      	mov	r3, r9
 801859a:	9904      	ldr	r1, [sp, #16]
 801859c:	18eb      	adds	r3, r5, r3
 801859e:	0022      	movs	r2, r4
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80185a0:	1824      	adds	r4, r4, r0
        if(pos.y <= y + letter_height) {
 80185a2:	428b      	cmp	r3, r1
 80185a4:	dbe5      	blt.n	8018572 <lv_label_get_letter_on.part.0+0xd2>
            letter = _lv_txt_encoded_prev(txt, &tmp);
 80185a6:	ab0d      	add	r3, sp, #52	; 0x34
            uint32_t tmp = new_line_start;
 80185a8:	46b9      	mov	r9, r7
            letter = _lv_txt_encoded_prev(txt, &tmp);
 80185aa:	4698      	mov	r8, r3
 80185ac:	4b83      	ldr	r3, [pc, #524]	; (80187bc <lv_label_get_letter_on.part.0+0x31c>)
 80185ae:	4641      	mov	r1, r8
 80185b0:	4648      	mov	r0, r9
 80185b2:	681b      	ldr	r3, [r3, #0]
            uint32_t tmp = new_line_start;
 80185b4:	940d      	str	r4, [sp, #52]	; 0x34
 80185b6:	0017      	movs	r7, r2
            letter = _lv_txt_encoded_prev(txt, &tmp);
 80185b8:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 80185ba:	280a      	cmp	r0, #10
 80185bc:	d004      	beq.n	80185c8 <lv_label_get_letter_on.part.0+0x128>
 80185be:	464b      	mov	r3, r9
 80185c0:	5d1b      	ldrb	r3, [r3, r4]
 80185c2:	425a      	negs	r2, r3
 80185c4:	4153      	adcs	r3, r2
 80185c6:	18e4      	adds	r4, r4, r3
    if(align == LV_TEXT_ALIGN_CENTER) {
 80185c8:	9b07      	ldr	r3, [sp, #28]
 80185ca:	2b02      	cmp	r3, #2
 80185cc:	d065      	beq.n	801869a <lv_label_get_letter_on.part.0+0x1fa>
    lv_coord_t x = 0;
 80185ce:	2500      	movs	r5, #0
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 80185d0:	2b03      	cmp	r3, #3
 80185d2:	d100      	bne.n	80185d6 <lv_label_get_letter_on.part.0+0x136>
 80185d4:	e0c2      	b.n	801875c <lv_label_get_letter_on.part.0+0x2bc>
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80185d6:	2300      	movs	r3, #0
 80185d8:	aa08      	add	r2, sp, #32
 80185da:	72d3      	strb	r3, [r2, #11]
    uint32_t i = 0;
 80185dc:	930b      	str	r3, [sp, #44]	; 0x2c
    if(new_line_start > 0) {
 80185de:	2c00      	cmp	r4, #0
 80185e0:	d044      	beq.n	801866c <lv_label_get_letter_on.part.0+0x1cc>
        while(i + line_start < new_line_start) {
 80185e2:	42bc      	cmp	r4, r7
 80185e4:	d800      	bhi.n	80185e8 <lv_label_get_letter_on.part.0+0x148>
 80185e6:	e0e4      	b.n	80187b2 <lv_label_get_letter_on.part.0+0x312>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80185e8:	9b08      	ldr	r3, [sp, #32]
 80185ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80185ec:	1a98      	subs	r0, r3, r2
 80185ee:	b203      	sxth	r3, r0
 80185f0:	9304      	str	r3, [sp, #16]
 80185f2:	9b03      	ldr	r3, [sp, #12]
 80185f4:	07db      	lsls	r3, r3, #31
 80185f6:	d500      	bpl.n	80185fa <lv_label_get_letter_on.part.0+0x15a>
 80185f8:	e071      	b.n	80186de <lv_label_get_letter_on.part.0+0x23e>
 80185fa:	464a      	mov	r2, r9
    uint32_t i_act = i;
 80185fc:	2300      	movs	r3, #0
 80185fe:	9207      	str	r2, [sp, #28]
 8018600:	465a      	mov	r2, fp
 8018602:	9303      	str	r3, [sp, #12]
 8018604:	ab0d      	add	r3, sp, #52	; 0x34
 8018606:	4698      	mov	r8, r3
 8018608:	ab0b      	add	r3, sp, #44	; 0x2c
 801860a:	469a      	mov	sl, r3
 801860c:	ab0c      	add	r3, sp, #48	; 0x30
 801860e:	4699      	mov	r9, r3
 8018610:	46b3      	mov	fp, r6
 8018612:	9205      	str	r2, [sp, #20]
 8018614:	e014      	b.n	8018640 <lv_label_get_letter_on.part.0+0x1a0>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 8018616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018618:	18fa      	adds	r2, r7, r3
 801861a:	4294      	cmp	r4, r2
 801861c:	d020      	beq.n	8018660 <lv_label_get_letter_on.part.0+0x1c0>
 801861e:	9e03      	ldr	r6, [sp, #12]
 8018620:	9907      	ldr	r1, [sp, #28]
 8018622:	46b4      	mov	ip, r6
 8018624:	4461      	add	r1, ip
 8018626:	5dc9      	ldrb	r1, [r1, r7]
 8018628:	2900      	cmp	r1, #0
 801862a:	d100      	bne.n	801862e <lv_label_get_letter_on.part.0+0x18e>
 801862c:	e0b2      	b.n	8018794 <lv_label_get_letter_on.part.0+0x2f4>
            x += letter_space;
 801862e:	9906      	ldr	r1, [sp, #24]
 8018630:	468c      	mov	ip, r1
 8018632:	4460      	add	r0, ip
 8018634:	1945      	adds	r5, r0, r5
 8018636:	b22d      	sxth	r5, r5
        while(i + line_start < new_line_start) {
 8018638:	4294      	cmp	r4, r2
 801863a:	d800      	bhi.n	801863e <lv_label_get_letter_on.part.0+0x19e>
 801863c:	e0a1      	b.n	8018782 <lv_label_get_letter_on.part.0+0x2e2>
 801863e:	9303      	str	r3, [sp, #12]
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8018640:	4653      	mov	r3, sl
 8018642:	4642      	mov	r2, r8
 8018644:	4649      	mov	r1, r9
 8018646:	4658      	mov	r0, fp
 8018648:	f7fe fae6 	bl	8016c18 <_lv_txt_encoded_letter_next_2>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 801864c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801864e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018650:	9805      	ldr	r0, [sp, #20]
 8018652:	f7fa fea7 	bl	80133a4 <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 8018656:	9a04      	ldr	r2, [sp, #16]
 8018658:	b203      	sxth	r3, r0
 801865a:	18eb      	adds	r3, r5, r3
 801865c:	429a      	cmp	r2, r3
 801865e:	dada      	bge.n	8018616 <lv_label_get_letter_on.part.0+0x176>
 8018660:	9b07      	ldr	r3, [sp, #28]
 8018662:	465e      	mov	r6, fp
 8018664:	4699      	mov	r9, r3
 8018666:	9c03      	ldr	r4, [sp, #12]
 8018668:	0023      	movs	r3, r4
                i = i_act;
 801866a:	930b      	str	r3, [sp, #44]	; 0x2c
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 801866c:	4d54      	ldr	r5, [pc, #336]	; (80187c0 <lv_label_get_letter_on.part.0+0x320>)
 801866e:	0021      	movs	r1, r4
 8018670:	682b      	ldr	r3, [r5, #0]
 8018672:	0030      	movs	r0, r6
 8018674:	4798      	blx	r3
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 8018676:	0039      	movs	r1, r7
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 8018678:	0004      	movs	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 801867a:	682b      	ldr	r3, [r5, #0]
 801867c:	4648      	mov	r0, r9
 801867e:	4798      	blx	r3
 8018680:	1820      	adds	r0, r4, r0
}
 8018682:	b011      	add	sp, #68	; 0x44
 8018684:	bcf0      	pop	{r4, r5, r6, r7}
 8018686:	46bb      	mov	fp, r7
 8018688:	46b2      	mov	sl, r6
 801868a:	46a9      	mov	r9, r5
 801868c:	46a0      	mov	r8, r4
 801868e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(align == LV_TEXT_ALIGN_CENTER) {
 8018690:	9b07      	ldr	r3, [sp, #28]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8018692:	46b9      	mov	r9, r7
 8018694:	0027      	movs	r7, r4
    if(align == LV_TEXT_ALIGN_CENTER) {
 8018696:	2b02      	cmp	r3, #2
 8018698:	d199      	bne.n	80185ce <lv_label_get_letter_on.part.0+0x12e>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801869a:	9b03      	ldr	r3, [sp, #12]
 801869c:	465a      	mov	r2, fp
 801869e:	9300      	str	r3, [sp, #0]
 80186a0:	0030      	movs	r0, r6
 80186a2:	4653      	mov	r3, sl
 80186a4:	1be1      	subs	r1, r4, r7
 80186a6:	f7fe fa83 	bl	8016bb0 <lv_txt_get_width>
 80186aa:	ab08      	add	r3, sp, #32
 80186ac:	8b9b      	ldrh	r3, [r3, #28]
 80186ae:	aa08      	add	r2, sp, #32
 80186b0:	8b12      	ldrh	r2, [r2, #24]
 80186b2:	3301      	adds	r3, #1
 80186b4:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 80186b6:	b21b      	sxth	r3, r3
 80186b8:	0fda      	lsrs	r2, r3, #31
 80186ba:	18d3      	adds	r3, r2, r3
 80186bc:	0fc2      	lsrs	r2, r0, #31
 80186be:	1810      	adds	r0, r2, r0
 80186c0:	105b      	asrs	r3, r3, #1
 80186c2:	1045      	asrs	r5, r0, #1
 80186c4:	1b5d      	subs	r5, r3, r5
 80186c6:	b22d      	sxth	r5, r5
 80186c8:	e785      	b.n	80185d6 <lv_label_get_letter_on.part.0+0x136>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80186ca:	7fe3      	ldrb	r3, [r4, #31]
 80186cc:	075b      	lsls	r3, r3, #29
 80186ce:	d500      	bpl.n	80186d2 <lv_label_get_letter_on.part.0+0x232>
 80186d0:	e73a      	b.n	8018548 <lv_label_get_letter_on.part.0+0xa8>
 80186d2:	2304      	movs	r3, #4
 80186d4:	9a03      	ldr	r2, [sp, #12]
 80186d6:	431a      	orrs	r2, r3
 80186d8:	b2d3      	uxtb	r3, r2
 80186da:	9303      	str	r3, [sp, #12]
 80186dc:	e734      	b.n	8018548 <lv_label_get_letter_on.part.0+0xa8>
    uint32_t i_act = i;
 80186de:	2300      	movs	r3, #0
 80186e0:	464a      	mov	r2, r9
 80186e2:	9303      	str	r3, [sp, #12]
 80186e4:	ab0d      	add	r3, sp, #52	; 0x34
 80186e6:	4698      	mov	r8, r3
 80186e8:	ab0b      	add	r3, sp, #44	; 0x2c
 80186ea:	469a      	mov	sl, r3
 80186ec:	ab0c      	add	r3, sp, #48	; 0x30
 80186ee:	4699      	mov	r9, r3
 80186f0:	9207      	str	r2, [sp, #28]
 80186f2:	9405      	str	r4, [sp, #20]
 80186f4:	e01e      	b.n	8018734 <lv_label_get_letter_on.part.0+0x294>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 80186f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80186f8:	4658      	mov	r0, fp
 80186fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80186fc:	f7fa fe52 	bl	80133a4 <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 8018700:	9a04      	ldr	r2, [sp, #16]
 8018702:	b203      	sxth	r3, r0
 8018704:	18eb      	adds	r3, r5, r3
 8018706:	429a      	cmp	r2, r3
 8018708:	db38      	blt.n	801877c <lv_label_get_letter_on.part.0+0x2dc>
 801870a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801870c:	9905      	ldr	r1, [sp, #20]
 801870e:	19da      	adds	r2, r3, r7
 8018710:	4291      	cmp	r1, r2
 8018712:	d033      	beq.n	801877c <lv_label_get_letter_on.part.0+0x2dc>
 8018714:	9c03      	ldr	r4, [sp, #12]
 8018716:	9907      	ldr	r1, [sp, #28]
 8018718:	46a4      	mov	ip, r4
 801871a:	4461      	add	r1, ip
 801871c:	5dc9      	ldrb	r1, [r1, r7]
 801871e:	2900      	cmp	r1, #0
 8018720:	d03f      	beq.n	80187a2 <lv_label_get_letter_on.part.0+0x302>
            x += letter_space;
 8018722:	9906      	ldr	r1, [sp, #24]
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 8018724:	9303      	str	r3, [sp, #12]
            x += letter_space;
 8018726:	468c      	mov	ip, r1
 8018728:	4465      	add	r5, ip
 801872a:	1945      	adds	r5, r0, r5
 801872c:	b22d      	sxth	r5, r5
        while(i + line_start < new_line_start) {
 801872e:	9905      	ldr	r1, [sp, #20]
 8018730:	4291      	cmp	r1, r2
 8018732:	d92b      	bls.n	801878c <lv_label_get_letter_on.part.0+0x2ec>
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8018734:	4653      	mov	r3, sl
 8018736:	4642      	mov	r2, r8
 8018738:	4649      	mov	r1, r9
 801873a:	0030      	movs	r0, r6
 801873c:	f7fe fa6c 	bl	8016c18 <_lv_txt_encoded_letter_next_2>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 8018740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018742:	aa08      	add	r2, sp, #32
 8018744:	4694      	mov	ip, r2
 8018746:	5cf1      	ldrb	r1, [r6, r3]
 8018748:	230b      	movs	r3, #11
 801874a:	4463      	add	r3, ip
 801874c:	0018      	movs	r0, r3
 801874e:	f7fe fa41 	bl	8016bd4 <_lv_txt_is_cmd>
 8018752:	2800      	cmp	r0, #0
 8018754:	d0cf      	beq.n	80186f6 <lv_label_get_letter_on.part.0+0x256>
        while(i + line_start < new_line_start) {
 8018756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018758:	19da      	adds	r2, r3, r7
 801875a:	e7e8      	b.n	801872e <lv_label_get_letter_on.part.0+0x28e>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801875c:	9b03      	ldr	r3, [sp, #12]
 801875e:	465a      	mov	r2, fp
 8018760:	9300      	str	r3, [sp, #0]
 8018762:	0030      	movs	r0, r6
 8018764:	4653      	mov	r3, sl
 8018766:	1be1      	subs	r1, r4, r7
 8018768:	f7fe fa22 	bl	8016bb0 <lv_txt_get_width>
 801876c:	ab08      	add	r3, sp, #32
 801876e:	8b9d      	ldrh	r5, [r3, #28]
 8018770:	8b1b      	ldrh	r3, [r3, #24]
 8018772:	3501      	adds	r5, #1
 8018774:	1aed      	subs	r5, r5, r3
        x += lv_area_get_width(&txt_coords) - line_w;
 8018776:	1a2d      	subs	r5, r5, r0
 8018778:	b22d      	sxth	r5, r5
 801877a:	e72c      	b.n	80185d6 <lv_label_get_letter_on.part.0+0x136>
 801877c:	9b07      	ldr	r3, [sp, #28]
 801877e:	4699      	mov	r9, r3
 8018780:	e771      	b.n	8018666 <lv_label_get_letter_on.part.0+0x1c6>
        while(i + line_start < new_line_start) {
 8018782:	9a07      	ldr	r2, [sp, #28]
 8018784:	465e      	mov	r6, fp
 8018786:	4691      	mov	r9, r2
 8018788:	001c      	movs	r4, r3
 801878a:	e76f      	b.n	801866c <lv_label_get_letter_on.part.0+0x1cc>
 801878c:	9a07      	ldr	r2, [sp, #28]
 801878e:	001c      	movs	r4, r3
 8018790:	4691      	mov	r9, r2
 8018792:	e76b      	b.n	801866c <lv_label_get_letter_on.part.0+0x1cc>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 8018794:	9b07      	ldr	r3, [sp, #28]
 8018796:	0034      	movs	r4, r6
 8018798:	4699      	mov	r9, r3
 801879a:	4663      	mov	r3, ip
 801879c:	465e      	mov	r6, fp
                i = i_act;
 801879e:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
 80187a0:	e764      	b.n	801866c <lv_label_get_letter_on.part.0+0x1cc>
 80187a2:	9b07      	ldr	r3, [sp, #28]
 80187a4:	4699      	mov	r9, r3
 80187a6:	0023      	movs	r3, r4
                i = i_act;
 80187a8:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
 80187aa:	e75f      	b.n	801866c <lv_label_get_letter_on.part.0+0x1cc>
    uint32_t line_start      = 0;
 80187ac:	2700      	movs	r7, #0
 80187ae:	2400      	movs	r4, #0
 80187b0:	e70a      	b.n	80185c8 <lv_label_get_letter_on.part.0+0x128>
        while(i + line_start < new_line_start) {
 80187b2:	2400      	movs	r4, #0
 80187b4:	e75a      	b.n	801866c <lv_label_get_letter_on.part.0+0x1cc>
 80187b6:	46c0      	nop			; (mov r8, r8)
 80187b8:	000027d1 	.word	0x000027d1
 80187bc:	20000088 	.word	0x20000088
 80187c0:	20000080 	.word	0x20000080

080187c4 <lv_label_refr_text.part.0>:
static void lv_label_refr_text(lv_obj_t * obj)
 80187c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187c6:	46de      	mov	lr, fp
 80187c8:	4657      	mov	r7, sl
 80187ca:	464e      	mov	r6, r9
 80187cc:	4645      	mov	r5, r8
 80187ce:	0004      	movs	r4, r0
 80187d0:	b5e0      	push	{r5, r6, r7, lr}
 80187d2:	b09b      	sub	sp, #108	; 0x6c
    lv_obj_get_content_coords(obj, &txt_coords);
 80187d4:	ae08      	add	r6, sp, #32
 80187d6:	0031      	movs	r1, r6
 80187d8:	f7f0 faca 	bl	8008d70 <lv_obj_get_content_coords>
 80187dc:	88b5      	ldrh	r5, [r6, #4]
 80187de:	8833      	ldrh	r3, [r6, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80187e0:	2257      	movs	r2, #87	; 0x57
 80187e2:	2100      	movs	r1, #0
 80187e4:	0020      	movs	r0, r4
 80187e6:	3501      	adds	r5, #1
 80187e8:	1aed      	subs	r5, r5, r3
 80187ea:	f7f3 feeb 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80187ee:	2259      	movs	r2, #89	; 0x59
 80187f0:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80187f2:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80187f4:	0020      	movs	r0, r4
 80187f6:	f7f3 fee5 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80187fa:	2258      	movs	r2, #88	; 0x58
    return (lv_coord_t)v.num;
 80187fc:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80187fe:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8018800:	2100      	movs	r1, #0
 8018802:	0020      	movs	r0, r4
    return (lv_coord_t)v.num;
 8018804:	469a      	mov	sl, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8018806:	f7f3 fedd 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801880a:	b203      	sxth	r3, r0
 801880c:	4698      	mov	r8, r3
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801880e:	2330      	movs	r3, #48	; 0x30
 8018810:	5ce3      	ldrb	r3, [r4, r3]
 8018812:	b22d      	sxth	r5, r5
 8018814:	06da      	lsls	r2, r3, #27
 8018816:	0fd2      	lsrs	r2, r2, #31
 8018818:	4693      	mov	fp, r2
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 801881a:	069b      	lsls	r3, r3, #26
 801881c:	d502      	bpl.n	8018824 <lv_label_refr_text.part.0+0x60>
 801881e:	2302      	movs	r3, #2
 8018820:	431a      	orrs	r2, r3
 8018822:	4693      	mov	fp, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8018824:	2201      	movs	r2, #1
 8018826:	2100      	movs	r1, #0
 8018828:	0020      	movs	r0, r4
 801882a:	f7f3 fecb 	bl	800c5c4 <lv_obj_get_style_prop>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801882e:	4bb8      	ldr	r3, [pc, #736]	; (8018b10 <lv_label_refr_text.part.0+0x34c>)
    return (lv_coord_t)v.num;
 8018830:	b200      	sxth	r0, r0
 8018832:	4298      	cmp	r0, r3
 8018834:	d03b      	beq.n	80188ae <lv_label_refr_text.part.0+0xea>
    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 8018836:	465b      	mov	r3, fp
 8018838:	9302      	str	r3, [sp, #8]
 801883a:	4653      	mov	r3, sl
 801883c:	003a      	movs	r2, r7
 801883e:	6a21      	ldr	r1, [r4, #32]
 8018840:	9501      	str	r5, [sp, #4]
 8018842:	9300      	str	r3, [sp, #0]
 8018844:	a806      	add	r0, sp, #24
 8018846:	4643      	mov	r3, r8
 8018848:	f7fe f91c 	bl	8016a84 <lv_txt_get_size>
    lv_obj_refresh_self_size(obj);
 801884c:	0020      	movs	r0, r4
 801884e:	f7f0 fae9 	bl	8008e24 <lv_obj_refresh_self_size>
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 8018852:	2330      	movs	r3, #48	; 0x30
 8018854:	2507      	movs	r5, #7
 8018856:	5ce3      	ldrb	r3, [r4, r3]
 8018858:	401d      	ands	r5, r3
 801885a:	2d02      	cmp	r5, #2
 801885c:	d030      	beq.n	80188c0 <lv_label_refr_text.part.0+0xfc>
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 801885e:	2d03      	cmp	r5, #3
 8018860:	d100      	bne.n	8018864 <lv_label_refr_text.part.0+0xa0>
 8018862:	e0b9      	b.n	80189d8 <lv_label_refr_text.part.0+0x214>
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 8018864:	2d01      	cmp	r5, #1
 8018866:	d009      	beq.n	801887c <lv_label_refr_text.part.0+0xb8>
    lv_obj_invalidate(obj);
 8018868:	0020      	movs	r0, r4
 801886a:	f7f0 fdd3 	bl	8009414 <lv_obj_invalidate>
}
 801886e:	b01b      	add	sp, #108	; 0x6c
 8018870:	bcf0      	pop	{r4, r5, r6, r7}
 8018872:	46bb      	mov	fp, r7
 8018874:	46b2      	mov	sl, r6
 8018876:	46a9      	mov	r9, r5
 8018878:	46a0      	mov	r8, r4
 801887a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 801887c:	ab02      	add	r3, sp, #8
 801887e:	2212      	movs	r2, #18
 8018880:	5e9a      	ldrsh	r2, [r3, r2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8018882:	88f3      	ldrh	r3, [r6, #6]
 8018884:	8871      	ldrh	r1, [r6, #2]
 8018886:	3301      	adds	r3, #1
 8018888:	1a5b      	subs	r3, r3, r1
 801888a:	b21b      	sxth	r3, r3
 801888c:	429a      	cmp	r2, r3
 801888e:	dd0a      	ble.n	80188a6 <lv_label_refr_text.part.0+0xe2>
        else if(size.y <= lv_font_get_line_height(font)) { /*No dots are required for one-line texts*/
 8018890:	2108      	movs	r1, #8
 8018892:	5e7b      	ldrsh	r3, [r7, r1]
 8018894:	4293      	cmp	r3, r2
 8018896:	da06      	bge.n	80188a6 <lv_label_refr_text.part.0+0xe2>
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 8018898:	4b9e      	ldr	r3, [pc, #632]	; (8018b14 <lv_label_refr_text.part.0+0x350>)
 801889a:	6a20      	ldr	r0, [r4, #32]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	4798      	blx	r3
 80188a0:	2803      	cmp	r0, #3
 80188a2:	d900      	bls.n	80188a6 <lv_label_refr_text.part.0+0xe2>
 80188a4:	e13c      	b.n	8018b20 <lv_label_refr_text.part.0+0x35c>
            label->dot_end = LV_LABEL_DOT_END_INV;
 80188a6:	2301      	movs	r3, #1
 80188a8:	425b      	negs	r3, r3
 80188aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80188ac:	e7dc      	b.n	8018868 <lv_label_refr_text.part.0+0xa4>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80188ae:	7fe3      	ldrb	r3, [r4, #31]
 80188b0:	075b      	lsls	r3, r3, #29
 80188b2:	d4c0      	bmi.n	8018836 <lv_label_refr_text.part.0+0x72>
 80188b4:	2304      	movs	r3, #4
 80188b6:	465a      	mov	r2, fp
 80188b8:	431a      	orrs	r2, r3
 80188ba:	b2d3      	uxtb	r3, r2
 80188bc:	469b      	mov	fp, r3
 80188be:	e7ba      	b.n	8018836 <lv_label_refr_text.part.0+0x72>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 80188c0:	2265      	movs	r2, #101	; 0x65
 80188c2:	2100      	movs	r1, #0
 80188c4:	0020      	movs	r0, r4
 80188c6:	f7f3 fe7d 	bl	800c5c4 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 80188ca:	b283      	uxth	r3, r0
 80188cc:	4698      	mov	r8, r3
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d077      	beq.n	80189c2 <lv_label_refr_text.part.0+0x1fe>
        lv_anim_init(&a);
 80188d2:	ad0a      	add	r5, sp, #40	; 0x28
 80188d4:	0028      	movs	r0, r5
 80188d6:	f7fb fac9 	bl	8013e6c <lv_anim_init>
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
 80188da:	2301      	movs	r3, #1
 80188dc:	425b      	negs	r3, r3
    a->var = var;
 80188de:	940a      	str	r4, [sp, #40]	; 0x28
    a->repeat_cnt = cnt;
 80188e0:	87ab      	strh	r3, [r5, #60]	; 0x3c
    a->playback_delay = delay;
 80188e2:	332e      	adds	r3, #46	; 0x2e
 80188e4:	33ff      	adds	r3, #255	; 0xff
 80188e6:	632b      	str	r3, [r5, #48]	; 0x30
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
    a->repeat_delay = delay;
 80188e8:	63ab      	str	r3, [r5, #56]	; 0x38
        if(size.x > lv_area_get_width(&txt_coords)) {
 80188ea:	ab02      	add	r3, sp, #8
 80188ec:	2210      	movs	r2, #16
 80188ee:	5e9a      	ldrsh	r2, [r3, r2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80188f0:	88b3      	ldrh	r3, [r6, #4]
 80188f2:	8831      	ldrh	r1, [r6, #0]
 80188f4:	3301      	adds	r3, #1
 80188f6:	1a5b      	subs	r3, r3, r1
 80188f8:	b21b      	sxth	r3, r3
 80188fa:	429a      	cmp	r2, r3
 80188fc:	dd22      	ble.n	8018944 <lv_label_refr_text.part.0+0x180>
    a->start_value = start;
 80188fe:	2100      	movs	r1, #0
 8018900:	61e9      	str	r1, [r5, #28]
    a->current_value = start;
 8018902:	6229      	str	r1, [r5, #32]
    a->exec_cb = exec_cb;
 8018904:	4984      	ldr	r1, [pc, #528]	; (8018b18 <lv_label_refr_text.part.0+0x354>)
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 8018906:	1a9b      	subs	r3, r3, r2
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8018908:	0020      	movs	r0, r4
    a->end_value = end;
 801890a:	626b      	str	r3, [r5, #36]	; 0x24
    a->exec_cb = exec_cb;
 801890c:	6069      	str	r1, [r5, #4]
 801890e:	f7fb fc0f 	bl	8014130 <lv_anim_get>
            if(anim_cur) {
 8018912:	2800      	cmp	r0, #0
 8018914:	d100      	bne.n	8018918 <lv_label_refr_text.part.0+0x154>
 8018916:	e1c4      	b.n	8018ca2 <lv_label_refr_text.part.0+0x4de>
                act_time = anim_cur->act_time;
 8018918:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
            if(act_time < a.time) {
 801891a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801891c:	429a      	cmp	r2, r3
 801891e:	da00      	bge.n	8018922 <lv_label_refr_text.part.0+0x15e>
 8018920:	e0e2      	b.n	8018ae8 <lv_label_refr_text.part.0+0x324>
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8018922:	69e9      	ldr	r1, [r5, #28]
 8018924:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8018926:	4640      	mov	r0, r8
 8018928:	f7fb fc28 	bl	801417c <lv_anim_speed_to_time>
    a->time = duration;
 801892c:	62a8      	str	r0, [r5, #40]	; 0x28
    a->playback_time = time;
 801892e:	6368      	str	r0, [r5, #52]	; 0x34
            lv_anim_start(&a);
 8018930:	0028      	movs	r0, r5
 8018932:	f7fb fb9d 	bl	8014070 <lv_anim_start>
            lv_anim_del(obj, set_ofs_y_anim);
 8018936:	0020      	movs	r0, r4
 8018938:	4978      	ldr	r1, [pc, #480]	; (8018b1c <lv_label_refr_text.part.0+0x358>)
 801893a:	f7fb faaf 	bl	8013e9c <lv_anim_del>
            label->offset.y = 0;
 801893e:	2300      	movs	r3, #0
 8018940:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8018942:	e791      	b.n	8018868 <lv_label_refr_text.part.0+0xa4>
            lv_anim_del(obj, set_ofs_x_anim);
 8018944:	4974      	ldr	r1, [pc, #464]	; (8018b18 <lv_label_refr_text.part.0+0x354>)
 8018946:	0020      	movs	r0, r4
 8018948:	f7fb faa8 	bl	8013e9c <lv_anim_del>
            label->offset.x = 0;
 801894c:	2200      	movs	r2, #0
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 801894e:	ab02      	add	r3, sp, #8
            label->offset.x = 0;
 8018950:	85a2      	strh	r2, [r4, #44]	; 0x2c
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8018952:	2112      	movs	r1, #18
 8018954:	5e59      	ldrsh	r1, [r3, r1]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8018956:	88f3      	ldrh	r3, [r6, #6]
 8018958:	8870      	ldrh	r0, [r6, #2]
 801895a:	3301      	adds	r3, #1
 801895c:	1a1b      	subs	r3, r3, r0
 801895e:	b21b      	sxth	r3, r3
 8018960:	4299      	cmp	r1, r3
 8018962:	dde8      	ble.n	8018936 <lv_label_refr_text.part.0+0x172>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 8018964:	1a5b      	subs	r3, r3, r1
 8018966:	2008      	movs	r0, #8
 8018968:	5e39      	ldrsh	r1, [r7, r0]
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 801896a:	0020      	movs	r0, r4
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 801896c:	1a5b      	subs	r3, r3, r1
    a->exec_cb = exec_cb;
 801896e:	496b      	ldr	r1, [pc, #428]	; (8018b1c <lv_label_refr_text.part.0+0x358>)
    a->start_value = start;
 8018970:	61ea      	str	r2, [r5, #28]
    a->current_value = start;
 8018972:	622a      	str	r2, [r5, #32]
    a->end_value = end;
 8018974:	626b      	str	r3, [r5, #36]	; 0x24
    a->exec_cb = exec_cb;
 8018976:	6069      	str	r1, [r5, #4]
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8018978:	f7fb fbda 	bl	8014130 <lv_anim_get>
            if(anim_cur) {
 801897c:	2800      	cmp	r0, #0
 801897e:	d100      	bne.n	8018982 <lv_label_refr_text.part.0+0x1be>
 8018980:	e181      	b.n	8018c86 <lv_label_refr_text.part.0+0x4c2>
                act_time = anim_cur->act_time;
 8018982:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
            if(act_time < a.time) {
 8018984:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8018986:	429a      	cmp	r2, r3
 8018988:	db00      	blt.n	801898c <lv_label_refr_text.part.0+0x1c8>
 801898a:	e185      	b.n	8018c98 <lv_label_refr_text.part.0+0x4d4>
                playback_now = anim_cur->playback_now;
 801898c:	233e      	movs	r3, #62	; 0x3e
 801898e:	5cc1      	ldrb	r1, [r0, r3]
                a.early_apply = 0;
 8018990:	2001      	movs	r0, #1
                a.act_time = act_time;      /*To keep the old position*/
 8018992:	62ea      	str	r2, [r5, #44]	; 0x2c
                a.early_apply = 0;
 8018994:	5cea      	ldrb	r2, [r5, r3]
 8018996:	4382      	bics	r2, r0
 8018998:	54ea      	strb	r2, [r5, r3]
                if(playback_now) {
 801899a:	078a      	lsls	r2, r1, #30
 801899c:	d400      	bmi.n	80189a0 <lv_label_refr_text.part.0+0x1dc>
 801899e:	e17b      	b.n	8018c98 <lv_label_refr_text.part.0+0x4d4>
                    a.playback_now = 1;
 80189a0:	2102      	movs	r1, #2
 80189a2:	5cea      	ldrb	r2, [r5, r3]
 80189a4:	430a      	orrs	r2, r1
 80189a6:	54ea      	strb	r2, [r5, r3]
                    tmp      = a.start_value;
 80189a8:	69ea      	ldr	r2, [r5, #28]
                    a.start_value = a.end_value;
 80189aa:	6a69      	ldr	r1, [r5, #36]	; 0x24
                    a.end_value   = tmp;
 80189ac:	626a      	str	r2, [r5, #36]	; 0x24
                    a.start_value = a.end_value;
 80189ae:	61e9      	str	r1, [r5, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 80189b0:	4640      	mov	r0, r8
 80189b2:	f7fb fbe3 	bl	801417c <lv_anim_speed_to_time>
    a->time = duration;
 80189b6:	62a8      	str	r0, [r5, #40]	; 0x28
    a->playback_time = time;
 80189b8:	6368      	str	r0, [r5, #52]	; 0x34
            lv_anim_start(&a);
 80189ba:	0028      	movs	r0, r5
 80189bc:	f7fb fb58 	bl	8014070 <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 80189c0:	e752      	b.n	8018868 <lv_label_refr_text.part.0+0xa4>
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 80189c2:	0020      	movs	r0, r4
 80189c4:	f7f5 fa02 	bl	800ddcc <lv_obj_get_disp>
 80189c8:	f7fb f868 	bl	8013a9c <lv_disp_get_dpi>
 80189cc:	2103      	movs	r1, #3
 80189ce:	f7e7 fc35 	bl	800023c <__divsi3>
 80189d2:	b283      	uxth	r3, r0
 80189d4:	4698      	mov	r8, r3
 80189d6:	e77c      	b.n	80188d2 <lv_label_refr_text.part.0+0x10e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 80189d8:	2263      	movs	r2, #99	; 0x63
 80189da:	2100      	movs	r1, #0
 80189dc:	0020      	movs	r0, r4
 80189de:	f7f3 fdf1 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 80189e2:	2265      	movs	r2, #101	; 0x65
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 80189e4:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 80189e6:	2100      	movs	r1, #0
 80189e8:	0020      	movs	r0, r4
 80189ea:	f7f3 fdeb 	bl	800c5c4 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 80189ee:	b283      	uxth	r3, r0
 80189f0:	4698      	mov	r8, r3
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d06d      	beq.n	8018ad2 <lv_label_refr_text.part.0+0x30e>
        lv_anim_init(&a);
 80189f6:	ad0a      	add	r5, sp, #40	; 0x28
 80189f8:	0028      	movs	r0, r5
 80189fa:	f7fb fa37 	bl	8013e6c <lv_anim_init>
    a->repeat_cnt = cnt;
 80189fe:	2301      	movs	r3, #1
 8018a00:	425b      	negs	r3, r3
    a->var = var;
 8018a02:	940a      	str	r4, [sp, #40]	; 0x28
    a->repeat_cnt = cnt;
 8018a04:	87ab      	strh	r3, [r5, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8018a06:	88b3      	ldrh	r3, [r6, #4]
 8018a08:	8832      	ldrh	r2, [r6, #0]
 8018a0a:	3301      	adds	r3, #1
 8018a0c:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 8018a0e:	aa02      	add	r2, sp, #8
 8018a10:	2110      	movs	r1, #16
 8018a12:	5e52      	ldrsh	r2, [r2, r1]
 8018a14:	b21b      	sxth	r3, r3
 8018a16:	429a      	cmp	r2, r3
 8018a18:	dd29      	ble.n	8018a6e <lv_label_refr_text.part.0+0x2aa>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 8018a1a:	2220      	movs	r2, #32
 8018a1c:	2120      	movs	r1, #32
 8018a1e:	0038      	movs	r0, r7
 8018a20:	f7fa fcc0 	bl	80133a4 <lv_font_get_glyph_width>
 8018a24:	ab02      	add	r3, sp, #8
 8018a26:	0082      	lsls	r2, r0, #2
 8018a28:	1a82      	subs	r2, r0, r2
 8018a2a:	2010      	movs	r0, #16
 8018a2c:	5e18      	ldrsh	r0, [r3, r0]
    a->start_value = start;
 8018a2e:	2300      	movs	r3, #0
    a->exec_cb = exec_cb;
 8018a30:	4e39      	ldr	r6, [pc, #228]	; (8018b18 <lv_label_refr_text.part.0+0x354>)
 8018a32:	1a12      	subs	r2, r2, r0
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8018a34:	2100      	movs	r1, #0
 8018a36:	4640      	mov	r0, r8
    a->start_value = start;
 8018a38:	61eb      	str	r3, [r5, #28]
    a->current_value = start;
 8018a3a:	622b      	str	r3, [r5, #32]
    a->end_value = end;
 8018a3c:	626a      	str	r2, [r5, #36]	; 0x24
    a->exec_cb = exec_cb;
 8018a3e:	606e      	str	r6, [r5, #4]
 8018a40:	f7fb fb9c 	bl	801417c <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8018a44:	0031      	movs	r1, r6
    a->time = duration;
 8018a46:	62a8      	str	r0, [r5, #40]	; 0x28
 8018a48:	0020      	movs	r0, r4
 8018a4a:	f7fb fb71 	bl	8014130 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8018a4e:	2800      	cmp	r0, #0
 8018a50:	d100      	bne.n	8018a54 <lv_label_refr_text.part.0+0x290>
 8018a52:	e13c      	b.n	8018cce <lv_label_refr_text.part.0+0x50a>
 8018a54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
            if(anim_template) {
 8018a56:	464a      	mov	r2, r9
 8018a58:	2a00      	cmp	r2, #0
 8018a5a:	d100      	bne.n	8018a5e <lv_label_refr_text.part.0+0x29a>
 8018a5c:	e12c      	b.n	8018cb8 <lv_label_refr_text.part.0+0x4f4>
                a.act_time = anim_template->act_time;
 8018a5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8018a60:	62eb      	str	r3, [r5, #44]	; 0x2c
                a.repeat_delay = anim_template->repeat_delay;
 8018a62:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8018a64:	63ab      	str	r3, [r5, #56]	; 0x38
            lv_anim_start(&a);
 8018a66:	0028      	movs	r0, r5
 8018a68:	f7fb fb02 	bl	8014070 <lv_anim_start>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8018a6c:	e763      	b.n	8018936 <lv_label_refr_text.part.0+0x172>
            lv_anim_del(obj, set_ofs_x_anim);
 8018a6e:	492a      	ldr	r1, [pc, #168]	; (8018b18 <lv_label_refr_text.part.0+0x354>)
 8018a70:	0020      	movs	r0, r4
 8018a72:	f7fb fa13 	bl	8013e9c <lv_anim_del>
            label->offset.x = 0;
 8018a76:	2100      	movs	r1, #0
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8018a78:	ab02      	add	r3, sp, #8
            label->offset.x = 0;
 8018a7a:	85a1      	strh	r1, [r4, #44]	; 0x2c
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8018a7c:	2212      	movs	r2, #18
 8018a7e:	5e9a      	ldrsh	r2, [r3, r2]
 8018a80:	88f3      	ldrh	r3, [r6, #6]
 8018a82:	8870      	ldrh	r0, [r6, #2]
 8018a84:	3301      	adds	r3, #1
 8018a86:	1a1b      	subs	r3, r3, r0
 8018a88:	b21b      	sxth	r3, r3
 8018a8a:	429a      	cmp	r2, r3
 8018a8c:	dc00      	bgt.n	8018a90 <lv_label_refr_text.part.0+0x2cc>
 8018a8e:	e752      	b.n	8018936 <lv_label_refr_text.part.0+0x172>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 8018a90:	2008      	movs	r0, #8
 8018a92:	5e3b      	ldrsh	r3, [r7, r0]
    a->exec_cb = exec_cb;
 8018a94:	4e21      	ldr	r6, [pc, #132]	; (8018b1c <lv_label_refr_text.part.0+0x358>)
 8018a96:	4252      	negs	r2, r2
 8018a98:	1ad2      	subs	r2, r2, r3
    a->start_value = start;
 8018a9a:	61e9      	str	r1, [r5, #28]
    a->current_value = start;
 8018a9c:	6229      	str	r1, [r5, #32]
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8018a9e:	4640      	mov	r0, r8
    a->end_value = end;
 8018aa0:	626a      	str	r2, [r5, #36]	; 0x24
    a->exec_cb = exec_cb;
 8018aa2:	606e      	str	r6, [r5, #4]
 8018aa4:	f7fb fb6a 	bl	801417c <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8018aa8:	0031      	movs	r1, r6
    a->time = duration;
 8018aaa:	62a8      	str	r0, [r5, #40]	; 0x28
 8018aac:	0020      	movs	r0, r4
 8018aae:	f7fb fb3f 	bl	8014130 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8018ab2:	2800      	cmp	r0, #0
 8018ab4:	d100      	bne.n	8018ab8 <lv_label_refr_text.part.0+0x2f4>
 8018ab6:	e0f2      	b.n	8018c9e <lv_label_refr_text.part.0+0x4da>
 8018ab8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
            if(anim_template) {
 8018aba:	464a      	mov	r2, r9
 8018abc:	2a00      	cmp	r2, #0
 8018abe:	d100      	bne.n	8018ac2 <lv_label_refr_text.part.0+0x2fe>
 8018ac0:	e107      	b.n	8018cd2 <lv_label_refr_text.part.0+0x50e>
                a.act_time = anim_template->act_time;
 8018ac2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8018ac4:	62eb      	str	r3, [r5, #44]	; 0x2c
                a.repeat_delay = anim_template->repeat_delay;
 8018ac6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8018ac8:	63ab      	str	r3, [r5, #56]	; 0x38
            lv_anim_start(&a);
 8018aca:	0028      	movs	r0, r5
 8018acc:	f7fb fad0 	bl	8014070 <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8018ad0:	e6ca      	b.n	8018868 <lv_label_refr_text.part.0+0xa4>
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8018ad2:	0020      	movs	r0, r4
 8018ad4:	f7f5 f97a 	bl	800ddcc <lv_obj_get_disp>
 8018ad8:	f7fa ffe0 	bl	8013a9c <lv_disp_get_dpi>
 8018adc:	2103      	movs	r1, #3
 8018ade:	f7e7 fbad 	bl	800023c <__divsi3>
 8018ae2:	b283      	uxth	r3, r0
 8018ae4:	4698      	mov	r8, r3
 8018ae6:	e786      	b.n	80189f6 <lv_label_refr_text.part.0+0x232>
                playback_now = anim_cur->playback_now;
 8018ae8:	233e      	movs	r3, #62	; 0x3e
 8018aea:	5cc1      	ldrb	r1, [r0, r3]
                a.early_apply = 0;
 8018aec:	2001      	movs	r0, #1
                a.act_time = act_time;      /*To keep the old position*/
 8018aee:	62ea      	str	r2, [r5, #44]	; 0x2c
                a.early_apply = 0;
 8018af0:	5cea      	ldrb	r2, [r5, r3]
 8018af2:	4382      	bics	r2, r0
 8018af4:	54ea      	strb	r2, [r5, r3]
                if(playback_now) {
 8018af6:	078a      	lsls	r2, r1, #30
 8018af8:	d400      	bmi.n	8018afc <lv_label_refr_text.part.0+0x338>
 8018afa:	e712      	b.n	8018922 <lv_label_refr_text.part.0+0x15e>
                    a.playback_now = 1;
 8018afc:	2102      	movs	r1, #2
 8018afe:	5cea      	ldrb	r2, [r5, r3]
 8018b00:	430a      	orrs	r2, r1
 8018b02:	54ea      	strb	r2, [r5, r3]
                    tmp      = a.start_value;
 8018b04:	69ea      	ldr	r2, [r5, #28]
                    a.start_value = a.end_value;
 8018b06:	6a69      	ldr	r1, [r5, #36]	; 0x24
                    a.end_value   = tmp;
 8018b08:	626a      	str	r2, [r5, #36]	; 0x24
                    a.start_value = a.end_value;
 8018b0a:	61e9      	str	r1, [r5, #28]
                    a.end_value   = tmp;
 8018b0c:	e70b      	b.n	8018926 <lv_label_refr_text.part.0+0x162>
 8018b0e:	46c0      	nop			; (mov r8, r8)
 8018b10:	000027d1 	.word	0x000027d1
 8018b14:	20000090 	.word	0x20000090
 8018b18:	0801841d 	.word	0x0801841d
 8018b1c:	08018411 	.word	0x08018411
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8018b20:	88b5      	ldrh	r5, [r6, #4]
 8018b22:	8833      	ldrh	r3, [r6, #0]
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 8018b24:	222e      	movs	r2, #46	; 0x2e
 8018b26:	212e      	movs	r1, #46	; 0x2e
 8018b28:	0038      	movs	r0, r7
 8018b2a:	3501      	adds	r5, #1
 8018b2c:	1aed      	subs	r5, r5, r3
 8018b2e:	f7fa fc39 	bl	80133a4 <lv_font_get_glyph_width>
 8018b32:	4440      	add	r0, r8
            p.x = lv_area_get_width(&txt_coords) -
 8018b34:	0383      	lsls	r3, r0, #14
 8018b36:	1a1b      	subs	r3, r3, r0
 8018b38:	009b      	lsls	r3, r3, #2
 8018b3a:	b2ad      	uxth	r5, r5
 8018b3c:	18c0      	adds	r0, r0, r3
 8018b3e:	1828      	adds	r0, r5, r0
 8018b40:	ab02      	add	r3, sp, #8
 8018b42:	8298      	strh	r0, [r3, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8018b44:	88f0      	ldrh	r0, [r6, #6]
 8018b46:	8873      	ldrh	r3, [r6, #2]
 8018b48:	3001      	adds	r0, #1
 8018b4a:	1ac0      	subs	r0, r0, r3
 8018b4c:	2308      	movs	r3, #8
 8018b4e:	5efe      	ldrsh	r6, [r7, r3]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 8018b50:	4653      	mov	r3, sl
 8018b52:	b285      	uxth	r5, r0
 8018b54:	18f1      	adds	r1, r6, r3
            y_overed = p.y %
 8018b56:	b200      	sxth	r0, r0
 8018b58:	f7e7 fc56 	bl	8000408 <__aeabi_idivmod>
            if(y_overed >= lv_font_get_line_height(font)) {
 8018b5c:	b20b      	sxth	r3, r1
 8018b5e:	429e      	cmp	r6, r3
 8018b60:	dd00      	ble.n	8018b64 <lv_label_refr_text.part.0+0x3a0>
 8018b62:	e0c1      	b.n	8018ce8 <lv_label_refr_text.part.0+0x524>
                p.y += lv_font_get_line_height(font);
 8018b64:	19ad      	adds	r5, r5, r6
 8018b66:	1a6b      	subs	r3, r5, r1
 8018b68:	b21b      	sxth	r3, r3
 8018b6a:	aa02      	add	r2, sp, #8
 8018b6c:	a907      	add	r1, sp, #28
 8018b6e:	0020      	movs	r0, r4
 8018b70:	82d3      	strh	r3, [r2, #22]
    LV_ASSERT_NULL(pos_in);
 8018b72:	f7ff fc95 	bl	80184a0 <lv_label_get_letter_on.part.0>
            size_t txt_len = strlen(label->text);
 8018b76:	6a25      	ldr	r5, [r4, #32]
 8018b78:	0007      	movs	r7, r0
 8018b7a:	0028      	movs	r0, r5
 8018b7c:	f7e7 facc 	bl	8000118 <strlen>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8018b80:	4b67      	ldr	r3, [pc, #412]	; (8018d20 <lv_label_refr_text.part.0+0x55c>)
            size_t txt_len = strlen(label->text);
 8018b82:	4681      	mov	r9, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	0028      	movs	r0, r5
 8018b88:	0039      	movs	r1, r7
 8018b8a:	4798      	blx	r3
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8018b8c:	1cc3      	adds	r3, r0, #3
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8018b8e:	0006      	movs	r6, r0
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8018b90:	4698      	mov	r8, r3
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8018b92:	900a      	str	r0, [sp, #40]	; 0x28
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8018b94:	ad0a      	add	r5, sp, #40	; 0x28
 8018b96:	4599      	cmp	r9, r3
 8018b98:	d20c      	bcs.n	8018bb4 <lv_label_refr_text.part.0+0x3f0>
 8018b9a:	4b62      	ldr	r3, [pc, #392]	; (8018d24 <lv_label_refr_text.part.0+0x560>)
 8018b9c:	469a      	mov	sl, r3
                _lv_txt_encoded_prev(label->text, &byte_id);
 8018b9e:	4653      	mov	r3, sl
 8018ba0:	0029      	movs	r1, r5
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	6a20      	ldr	r0, [r4, #32]
 8018ba6:	4798      	blx	r3
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8018ba8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
                letter_id--;
 8018baa:	3f01      	subs	r7, #1
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8018bac:	1cf3      	adds	r3, r6, #3
 8018bae:	4698      	mov	r8, r3
 8018bb0:	4599      	cmp	r9, r3
 8018bb2:	d3f4      	bcc.n	8018b9e <lv_label_refr_text.part.0+0x3da>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8018bb4:	2304      	movs	r3, #4
 8018bb6:	9305      	str	r3, [sp, #20]
            uint8_t len = 0;
 8018bb8:	2300      	movs	r3, #0
 8018bba:	9304      	str	r3, [sp, #16]
 8018bbc:	4b5a      	ldr	r3, [pc, #360]	; (8018d28 <lv_label_refr_text.part.0+0x564>)
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8018bbe:	0030      	movs	r0, r6
 8018bc0:	469b      	mov	fp, r3
 8018bc2:	4b5a      	ldr	r3, [pc, #360]	; (8018d2c <lv_label_refr_text.part.0+0x568>)
 8018bc4:	469a      	mov	sl, r3
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8018bc6:	6a23      	ldr	r3, [r4, #32]
 8018bc8:	469c      	mov	ip, r3
 8018bca:	465b      	mov	r3, fp
 8018bcc:	4460      	add	r0, ip
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	4798      	blx	r3
 8018bd2:	9b04      	ldr	r3, [sp, #16]
                _lv_txt_encoded_next(label->text, &byte_id);
 8018bd4:	4652      	mov	r2, sl
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8018bd6:	469c      	mov	ip, r3
 8018bd8:	4460      	add	r0, ip
 8018bda:	b2c3      	uxtb	r3, r0
                _lv_txt_encoded_next(label->text, &byte_id);
 8018bdc:	0029      	movs	r1, r5
 8018bde:	6a20      	ldr	r0, [r4, #32]
 8018be0:	6812      	ldr	r2, [r2, #0]
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8018be2:	9304      	str	r3, [sp, #16]
                _lv_txt_encoded_next(label->text, &byte_id);
 8018be4:	4790      	blx	r2
                if(len > LV_LABEL_DOT_NUM || byte_id > txt_len) {
 8018be6:	9b04      	ldr	r3, [sp, #16]
 8018be8:	2b03      	cmp	r3, #3
 8018bea:	d900      	bls.n	8018bee <lv_label_refr_text.part.0+0x42a>
 8018bec:	e08b      	b.n	8018d06 <lv_label_refr_text.part.0+0x542>
 8018bee:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018bf0:	4581      	cmp	r9, r0
 8018bf2:	d304      	bcc.n	8018bfe <lv_label_refr_text.part.0+0x43a>
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8018bf4:	9b05      	ldr	r3, [sp, #20]
 8018bf6:	3b01      	subs	r3, #1
 8018bf8:	9305      	str	r3, [sp, #20]
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d1e3      	bne.n	8018bc6 <lv_label_refr_text.part.0+0x402>
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8018bfe:	2240      	movs	r2, #64	; 0x40
 8018c00:	2130      	movs	r1, #48	; 0x30
 8018c02:	0010      	movs	r0, r2
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 8018c04:	6a23      	ldr	r3, [r4, #32]
 8018c06:	199d      	adds	r5, r3, r6
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8018c08:	5c63      	ldrb	r3, [r4, r1]
 8018c0a:	4018      	ands	r0, r3
 8018c0c:	421a      	tst	r2, r3
 8018c0e:	d070      	beq.n	8018cf2 <lv_label_refr_text.part.0+0x52e>
 8018c10:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018c12:	2800      	cmp	r0, #0
 8018c14:	d100      	bne.n	8018c18 <lv_label_refr_text.part.0+0x454>
 8018c16:	e080      	b.n	8018d1a <lv_label_refr_text.part.0+0x556>
        lv_mem_free(label->dot.tmp_ptr);
 8018c18:	f7fc f954 	bl	8014ec4 <lv_mem_free>
    label->dot_tmp_alloc = false;
 8018c1c:	2330      	movs	r3, #48	; 0x30
 8018c1e:	2240      	movs	r2, #64	; 0x40
 8018c20:	4699      	mov	r9, r3
 8018c22:	5ce3      	ldrb	r3, [r4, r3]
 8018c24:	4393      	bics	r3, r2
 8018c26:	464a      	mov	r2, r9
 8018c28:	54a3      	strb	r3, [r4, r2]
    label->dot.tmp_ptr   = NULL;
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	469a      	mov	sl, r3
 8018c2e:	6263      	str	r3, [r4, #36]	; 0x24
    if(len > sizeof(char *)) {
 8018c30:	9b04      	ldr	r3, [sp, #16]
 8018c32:	2b04      	cmp	r3, #4
 8018c34:	d960      	bls.n	8018cf8 <lv_label_refr_text.part.0+0x534>
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 8018c36:	1c58      	adds	r0, r3, #1
 8018c38:	f7fc f922 	bl	8014e80 <lv_mem_alloc>
 8018c3c:	6260      	str	r0, [r4, #36]	; 0x24
        if(label->dot.tmp_ptr == NULL) {
 8018c3e:	2800      	cmp	r0, #0
 8018c40:	d100      	bne.n	8018c44 <lv_label_refr_text.part.0+0x480>
 8018c42:	e611      	b.n	8018868 <lv_label_refr_text.part.0+0xa4>
        lv_memcpy(label->dot.tmp_ptr, data, len);
 8018c44:	9b04      	ldr	r3, [sp, #16]
 8018c46:	0029      	movs	r1, r5
 8018c48:	469b      	mov	fp, r3
 8018c4a:	001a      	movs	r2, r3
 8018c4c:	f7fc facc 	bl	80151e8 <lv_memcpy>
        label->dot.tmp_ptr[len] = '\0';
 8018c50:	465b      	mov	r3, fp
 8018c52:	4652      	mov	r2, sl
 8018c54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018c56:	54ca      	strb	r2, [r1, r3]
        label->dot_tmp_alloc    = true;
 8018c58:	464b      	mov	r3, r9
 8018c5a:	2240      	movs	r2, #64	; 0x40
 8018c5c:	5ce3      	ldrb	r3, [r4, r3]
 8018c5e:	4313      	orrs	r3, r2
 8018c60:	464a      	mov	r2, r9
 8018c62:	54a3      	strb	r3, [r4, r2]
                    label->text[byte_id_ori + i] = '.';
 8018c64:	232e      	movs	r3, #46	; 0x2e
 8018c66:	6a22      	ldr	r2, [r4, #32]
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8018c68:	4641      	mov	r1, r8
                    label->text[byte_id_ori + i] = '.';
 8018c6a:	5593      	strb	r3, [r2, r6]
 8018c6c:	6a22      	ldr	r2, [r4, #32]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8018c6e:	3703      	adds	r7, #3
                    label->text[byte_id_ori + i] = '.';
 8018c70:	1992      	adds	r2, r2, r6
 8018c72:	7053      	strb	r3, [r2, #1]
 8018c74:	6a22      	ldr	r2, [r4, #32]
 8018c76:	4694      	mov	ip, r2
 8018c78:	4466      	add	r6, ip
 8018c7a:	70b3      	strb	r3, [r6, #2]
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	6a22      	ldr	r2, [r4, #32]
 8018c80:	5453      	strb	r3, [r2, r1]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8018c82:	62a7      	str	r7, [r4, #40]	; 0x28
 8018c84:	e5f0      	b.n	8018868 <lv_label_refr_text.part.0+0xa4>
            if(act_time < a.time) {
 8018c86:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	dd05      	ble.n	8018c98 <lv_label_refr_text.part.0+0x4d4>
                a.early_apply = 0;
 8018c8c:	223e      	movs	r2, #62	; 0x3e
 8018c8e:	2101      	movs	r1, #1
                a.act_time = act_time;      /*To keep the old position*/
 8018c90:	62e8      	str	r0, [r5, #44]	; 0x2c
                a.early_apply = 0;
 8018c92:	5cab      	ldrb	r3, [r5, r2]
 8018c94:	438b      	bics	r3, r1
 8018c96:	54ab      	strb	r3, [r5, r2]
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8018c98:	69e9      	ldr	r1, [r5, #28]
 8018c9a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8018c9c:	e688      	b.n	80189b0 <lv_label_refr_text.part.0+0x1ec>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	e70b      	b.n	8018aba <lv_label_refr_text.part.0+0x2f6>
            if(act_time < a.time) {
 8018ca2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	dc00      	bgt.n	8018caa <lv_label_refr_text.part.0+0x4e6>
 8018ca8:	e63b      	b.n	8018922 <lv_label_refr_text.part.0+0x15e>
                a.early_apply = 0;
 8018caa:	223e      	movs	r2, #62	; 0x3e
 8018cac:	2101      	movs	r1, #1
                a.act_time = act_time;      /*To keep the old position*/
 8018cae:	62e8      	str	r0, [r5, #44]	; 0x2c
                a.early_apply = 0;
 8018cb0:	5cab      	ldrb	r3, [r5, r2]
 8018cb2:	438b      	bics	r3, r1
 8018cb4:	54ab      	strb	r3, [r5, r2]
 8018cb6:	e634      	b.n	8018922 <lv_label_refr_text.part.0+0x15e>
            else if(act_time < a.time) {
 8018cb8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8018cba:	429a      	cmp	r2, r3
 8018cbc:	dc00      	bgt.n	8018cc0 <lv_label_refr_text.part.0+0x4fc>
 8018cbe:	e6d2      	b.n	8018a66 <lv_label_refr_text.part.0+0x2a2>
                a.early_apply = 0;
 8018cc0:	223e      	movs	r2, #62	; 0x3e
 8018cc2:	2101      	movs	r1, #1
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8018cc4:	62eb      	str	r3, [r5, #44]	; 0x2c
                a.early_apply = 0;
 8018cc6:	5cab      	ldrb	r3, [r5, r2]
 8018cc8:	438b      	bics	r3, r1
 8018cca:	54ab      	strb	r3, [r5, r2]
 8018ccc:	e6cb      	b.n	8018a66 <lv_label_refr_text.part.0+0x2a2>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8018cce:	2300      	movs	r3, #0
 8018cd0:	e6c1      	b.n	8018a56 <lv_label_refr_text.part.0+0x292>
            else if(act_time < a.time) {
 8018cd2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8018cd4:	429a      	cmp	r2, r3
 8018cd6:	dc00      	bgt.n	8018cda <lv_label_refr_text.part.0+0x516>
 8018cd8:	e6f7      	b.n	8018aca <lv_label_refr_text.part.0+0x306>
                a.early_apply = 0;
 8018cda:	223e      	movs	r2, #62	; 0x3e
 8018cdc:	2101      	movs	r1, #1
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8018cde:	62eb      	str	r3, [r5, #44]	; 0x2c
                a.early_apply = 0;
 8018ce0:	5cab      	ldrb	r3, [r5, r2]
 8018ce2:	438b      	bics	r3, r1
 8018ce4:	54ab      	strb	r3, [r5, r2]
 8018ce6:	e6f0      	b.n	8018aca <lv_label_refr_text.part.0+0x306>
                p.y -= line_space;
 8018ce8:	464b      	mov	r3, r9
 8018cea:	1aed      	subs	r5, r5, r3
 8018cec:	1a6b      	subs	r3, r5, r1
 8018cee:	b21b      	sxth	r3, r3
 8018cf0:	e73b      	b.n	8018b6a <lv_label_refr_text.part.0+0x3a6>
    label->dot_tmp_alloc = false;
 8018cf2:	4393      	bics	r3, r2
 8018cf4:	5463      	strb	r3, [r4, r1]
    label->dot.tmp_ptr   = NULL;
 8018cf6:	6260      	str	r0, [r4, #36]	; 0x24
        lv_memcpy(label->dot.tmp, data, len);
 8018cf8:	0020      	movs	r0, r4
 8018cfa:	0029      	movs	r1, r5
 8018cfc:	9a04      	ldr	r2, [sp, #16]
 8018cfe:	3024      	adds	r0, #36	; 0x24
 8018d00:	f7fc fa72 	bl	80151e8 <lv_memcpy>
 8018d04:	e7ae      	b.n	8018c64 <lv_label_refr_text.part.0+0x4a0>
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 8018d06:	6a23      	ldr	r3, [r4, #32]
 8018d08:	199d      	adds	r5, r3, r6
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8018d0a:	2330      	movs	r3, #48	; 0x30
 8018d0c:	5ce3      	ldrb	r3, [r4, r3]
 8018d0e:	065b      	lsls	r3, r3, #25
 8018d10:	d584      	bpl.n	8018c1c <lv_label_refr_text.part.0+0x458>
 8018d12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018d14:	2800      	cmp	r0, #0
 8018d16:	d081      	beq.n	8018c1c <lv_label_refr_text.part.0+0x458>
 8018d18:	e77e      	b.n	8018c18 <lv_label_refr_text.part.0+0x454>
    label->dot_tmp_alloc = false;
 8018d1a:	4393      	bics	r3, r2
 8018d1c:	5463      	strb	r3, [r4, r1]
    if(len > sizeof(char *)) {
 8018d1e:	e7eb      	b.n	8018cf8 <lv_label_refr_text.part.0+0x534>
 8018d20:	2000007c 	.word	0x2000007c
 8018d24:	20000088 	.word	0x20000088
 8018d28:	2000008c 	.word	0x2000008c
 8018d2c:	20000084 	.word	0x20000084

08018d30 <lv_label_event>:
{
 8018d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d32:	46d6      	mov	lr, sl
 8018d34:	464f      	mov	r7, r9
 8018d36:	4646      	mov	r6, r8
 8018d38:	b5c0      	push	{r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8018d3a:	48c9      	ldr	r0, [pc, #804]	; (8019060 <lv_label_event+0x330>)
{
 8018d3c:	b092      	sub	sp, #72	; 0x48
 8018d3e:	000c      	movs	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8018d40:	f7eb ff96 	bl	8004c70 <lv_obj_event_base>
 8018d44:	0005      	movs	r5, r0
    if(res != LV_RES_OK) return;
 8018d46:	2801      	cmp	r0, #1
 8018d48:	d005      	beq.n	8018d56 <lv_label_event+0x26>
}
 8018d4a:	b012      	add	sp, #72	; 0x48
 8018d4c:	bce0      	pop	{r5, r6, r7}
 8018d4e:	46ba      	mov	sl, r7
 8018d50:	46b1      	mov	r9, r6
 8018d52:	46a8      	mov	r8, r5
 8018d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8018d56:	0020      	movs	r0, r4
 8018d58:	f7eb ffa6 	bl	8004ca8 <lv_event_get_code>
 8018d5c:	0006      	movs	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8018d5e:	0020      	movs	r0, r4
 8018d60:	f7eb ff9e 	bl	8004ca0 <lv_event_get_target>
 8018d64:	0007      	movs	r7, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8018d66:	2e2a      	cmp	r6, #42	; 0x2a
 8018d68:	d069      	beq.n	8018e3e <lv_label_event+0x10e>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8018d6a:	2e13      	cmp	r6, #19
 8018d6c:	d078      	beq.n	8018e60 <lv_label_event+0x130>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8018d6e:	2e29      	cmp	r6, #41	; 0x29
 8018d70:	d065      	beq.n	8018e3e <lv_label_event+0x10e>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8018d72:	2e2c      	cmp	r6, #44	; 0x2c
 8018d74:	d100      	bne.n	8018d78 <lv_label_event+0x48>
 8018d76:	e082      	b.n	8018e7e <lv_label_event+0x14e>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8018d78:	2e15      	cmp	r6, #21
 8018d7a:	d1e6      	bne.n	8018d4a <lv_label_event+0x1a>
    lv_obj_t * obj = lv_event_get_target(e);
 8018d7c:	0020      	movs	r0, r4
 8018d7e:	f7eb ff8f 	bl	8004ca0 <lv_event_get_target>
 8018d82:	0007      	movs	r7, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8018d84:	0020      	movs	r0, r4
 8018d86:	f7eb fff1 	bl	8004d6c <lv_event_get_draw_ctx>
    lv_obj_get_content_coords(obj, &txt_coords);
 8018d8a:	a906      	add	r1, sp, #24
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8018d8c:	0004      	movs	r4, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 8018d8e:	0038      	movs	r0, r7
 8018d90:	f7ef ffee 	bl	8008d70 <lv_obj_get_content_coords>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8018d94:	2330      	movs	r3, #48	; 0x30
 8018d96:	5cfb      	ldrb	r3, [r7, r3]
 8018d98:	0918      	lsrs	r0, r3, #4
 8018d9a:	4005      	ands	r5, r0
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8018d9c:	069b      	lsls	r3, r3, #26
 8018d9e:	d501      	bpl.n	8018da4 <lv_label_event+0x74>
 8018da0:	2302      	movs	r3, #2
 8018da2:	431d      	orrs	r5, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8018da4:	2201      	movs	r2, #1
 8018da6:	2100      	movs	r1, #0
 8018da8:	0038      	movs	r0, r7
 8018daa:	f7f3 fc0b 	bl	800c5c4 <lv_obj_get_style_prop>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8018dae:	4bad      	ldr	r3, [pc, #692]	; (8019064 <lv_label_event+0x334>)
    return (lv_coord_t)v.num;
 8018db0:	b200      	sxth	r0, r0
 8018db2:	4298      	cmp	r0, r3
 8018db4:	d100      	bne.n	8018db8 <lv_label_event+0x88>
 8018db6:	e0e0      	b.n	8018f7a <lv_label_event+0x24a>
    lv_draw_label_dsc_init(&label_draw_dsc);
 8018db8:	ae0a      	add	r6, sp, #40	; 0x28
 8018dba:	0030      	movs	r0, r6
 8018dbc:	f7f6 fc3a 	bl	800f634 <lv_draw_label_dsc_init>
    label_draw_dsc.ofs_x = label->offset.x;
 8018dc0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8018dc2:	2100      	movs	r1, #0
    label_draw_dsc.ofs_x = label->offset.x;
 8018dc4:	82f3      	strh	r3, [r6, #22]
    label_draw_dsc.ofs_y = label->offset.y;
 8018dc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8018dc8:	0032      	movs	r2, r6
    label_draw_dsc.ofs_y = label->offset.y;
 8018dca:	8333      	strh	r3, [r6, #24]
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8018dcc:	0038      	movs	r0, r7
    label_draw_dsc.flag = flag;
 8018dce:	7775      	strb	r5, [r6, #29]
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8018dd0:	f7ef fb1a 	bl	8008408 <lv_obj_init_draw_label_dsc>
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8018dd4:	7f33      	ldrb	r3, [r6, #28]
    lv_bidi_calculate_align(&label_draw_dsc.align, &label_draw_dsc.bidi_dir, label->text);
 8018dd6:	6a39      	ldr	r1, [r7, #32]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d000      	beq.n	8018dde <lv_label_event+0xae>
 8018ddc:	e0a1      	b.n	8018f22 <lv_label_event+0x1f2>
 8018dde:	3301      	adds	r3, #1
 8018de0:	7733      	strb	r3, [r6, #28]
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 8018de2:	4ba1      	ldr	r3, [pc, #644]	; (8019068 <lv_label_event+0x338>)
 8018de4:	6073      	str	r3, [r6, #4]
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 8018de6:	60b3      	str	r3, [r6, #8]
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8018de8:	ab08      	add	r3, sp, #32
 8018dea:	4698      	mov	r8, r3
    bool is_common = _lv_area_intersect(&txt_clip, &txt_coords, draw_ctx->clip_area);
 8018dec:	4640      	mov	r0, r8
 8018dee:	68a2      	ldr	r2, [r4, #8]
 8018df0:	a906      	add	r1, sp, #24
 8018df2:	f7fb fa35 	bl	8014260 <_lv_area_intersect>
    if(!is_common) return;
 8018df6:	2800      	cmp	r0, #0
 8018df8:	d0a7      	beq.n	8018d4a <lv_label_event+0x1a>
    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 8018dfa:	2330      	movs	r3, #48	; 0x30
 8018dfc:	5cfa      	ldrb	r2, [r7, r3]
 8018dfe:	4699      	mov	r9, r3
 8018e00:	0753      	lsls	r3, r2, #29
 8018e02:	d100      	bne.n	8018e06 <lv_label_event+0xd6>
 8018e04:	e0ce      	b.n	8018fa4 <lv_label_event+0x274>
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8018e06:	2306      	movs	r3, #6
 8018e08:	4013      	ands	r3, r2
 8018e0a:	2b02      	cmp	r3, #2
 8018e0c:	d100      	bne.n	8018e10 <lv_label_event+0xe0>
 8018e0e:	e0bc      	b.n	8018f8a <lv_label_event+0x25a>
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8018e10:	2200      	movs	r2, #0
 8018e12:	6a3b      	ldr	r3, [r7, #32]
 8018e14:	0031      	movs	r1, r6
 8018e16:	9200      	str	r2, [sp, #0]
 8018e18:	0020      	movs	r0, r4
 8018e1a:	aa06      	add	r2, sp, #24
 8018e1c:	f7f6 fc22 	bl	800f664 <lv_draw_label>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8018e20:	68a3      	ldr	r3, [r4, #8]
 8018e22:	4699      	mov	r9, r3
    draw_ctx->clip_area = &txt_clip;
 8018e24:	4643      	mov	r3, r8
 8018e26:	60a3      	str	r3, [r4, #8]
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8018e28:	2330      	movs	r3, #48	; 0x30
 8018e2a:	2207      	movs	r2, #7
 8018e2c:	5cfb      	ldrb	r3, [r7, r3]
 8018e2e:	401a      	ands	r2, r3
 8018e30:	4690      	mov	r8, r2
 8018e32:	2a03      	cmp	r2, #3
 8018e34:	d100      	bne.n	8018e38 <lv_label_event+0x108>
 8018e36:	e0c4      	b.n	8018fc2 <lv_label_event+0x292>
    draw_ctx->clip_area = clip_area_ori;
 8018e38:	464b      	mov	r3, r9
 8018e3a:	60a3      	str	r3, [r4, #8]
 8018e3c:	e785      	b.n	8018d4a <lv_label_event+0x1a>
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 8018e3e:	2330      	movs	r3, #48	; 0x30
 8018e40:	5cfa      	ldrb	r2, [r7, r3]
 8018e42:	3b29      	subs	r3, #41	; 0x29
 8018e44:	4013      	ands	r3, r2
 8018e46:	2b01      	cmp	r3, #1
 8018e48:	d102      	bne.n	8018e50 <lv_label_event+0x120>
 8018e4a:	0038      	movs	r0, r7
 8018e4c:	f7ff faec 	bl	8018428 <lv_label_revert_dots.part.0>
    if(label->text == NULL) return;
 8018e50:	6a3b      	ldr	r3, [r7, #32]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d100      	bne.n	8018e58 <lv_label_event+0x128>
 8018e56:	e778      	b.n	8018d4a <lv_label_event+0x1a>
 8018e58:	0038      	movs	r0, r7
 8018e5a:	f7ff fcb3 	bl	80187c4 <lv_label_refr_text.part.0>
 8018e5e:	e774      	b.n	8018d4a <lv_label_event+0x1a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8018e60:	2257      	movs	r2, #87	; 0x57
 8018e62:	2100      	movs	r1, #0
 8018e64:	f7f3 fbae 	bl	800c5c4 <lv_obj_get_style_prop>
        lv_event_set_ext_draw_size(e, font_h / 4);
 8018e68:	2103      	movs	r1, #3
 8018e6a:	2208      	movs	r2, #8
 8018e6c:	5e83      	ldrsh	r3, [r0, r2]
 8018e6e:	0020      	movs	r0, r4
 8018e70:	17da      	asrs	r2, r3, #31
 8018e72:	4011      	ands	r1, r2
 8018e74:	18c9      	adds	r1, r1, r3
 8018e76:	1089      	asrs	r1, r1, #2
 8018e78:	f7eb ff80 	bl	8004d7c <lv_event_set_ext_draw_size>
 8018e7c:	e765      	b.n	8018d4a <lv_label_event+0x1a>
 8018e7e:	2257      	movs	r2, #87	; 0x57
 8018e80:	2100      	movs	r1, #0
 8018e82:	f7f3 fb9f 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8018e86:	2258      	movs	r2, #88	; 0x58
 8018e88:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8018e8a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8018e8c:	0038      	movs	r0, r7
 8018e8e:	f7f3 fb99 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8018e92:	2259      	movs	r2, #89	; 0x59
    return (lv_coord_t)v.num;
 8018e94:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8018e96:	2100      	movs	r1, #0
 8018e98:	0038      	movs	r0, r7
    return (lv_coord_t)v.num;
 8018e9a:	4699      	mov	r9, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8018e9c:	f7f3 fb92 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8018ea0:	b203      	sxth	r3, r0
 8018ea2:	469a      	mov	sl, r3
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8018ea4:	2330      	movs	r3, #48	; 0x30
 8018ea6:	5cfb      	ldrb	r3, [r7, r3]
 8018ea8:	0918      	lsrs	r0, r3, #4
 8018eaa:	4005      	ands	r5, r0
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8018eac:	069b      	lsls	r3, r3, #26
 8018eae:	d501      	bpl.n	8018eb4 <lv_label_event+0x184>
 8018eb0:	2302      	movs	r3, #2
 8018eb2:	431d      	orrs	r5, r3
        lv_coord_t w = lv_obj_get_content_width(obj);
 8018eb4:	0038      	movs	r0, r7
 8018eb6:	f7ef ff1f 	bl	8008cf8 <lv_obj_get_content_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8018eba:	2201      	movs	r2, #1
 8018ebc:	2100      	movs	r1, #0
 8018ebe:	0038      	movs	r0, r7
 8018ec0:	f7f3 fb80 	bl	800c5c4 <lv_obj_get_style_prop>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8018ec4:	4b67      	ldr	r3, [pc, #412]	; (8019064 <lv_label_event+0x334>)
    return (lv_coord_t)v.num;
 8018ec6:	b200      	sxth	r0, r0
 8018ec8:	4298      	cmp	r0, r3
 8018eca:	d126      	bne.n	8018f1a <lv_label_event+0x1ea>
 8018ecc:	7ffb      	ldrb	r3, [r7, #31]
 8018ece:	075b      	lsls	r3, r3, #29
 8018ed0:	d423      	bmi.n	8018f1a <lv_label_event+0x1ea>
 8018ed2:	4866      	ldr	r0, [pc, #408]	; (801906c <lv_label_event+0x33c>)
        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 8018ed4:	4653      	mov	r3, sl
 8018ed6:	ae0a      	add	r6, sp, #40	; 0x28
 8018ed8:	6a39      	ldr	r1, [r7, #32]
 8018eda:	4642      	mov	r2, r8
 8018edc:	9502      	str	r5, [sp, #8]
 8018ede:	9001      	str	r0, [sp, #4]
 8018ee0:	9300      	str	r3, [sp, #0]
 8018ee2:	0030      	movs	r0, r6
 8018ee4:	464b      	mov	r3, r9
 8018ee6:	f7fd fdcd 	bl	8016a84 <lv_txt_get_size>
        lv_point_t * self_size = lv_event_get_param(e);
 8018eea:	0020      	movs	r0, r4
 8018eec:	f7eb fee0 	bl	8004cb0 <lv_event_get_param>
        self_size->x = LV_MAX(self_size->x, size.x);
 8018ef0:	8833      	ldrh	r3, [r6, #0]
 8018ef2:	2500      	movs	r5, #0
 8018ef4:	5f41      	ldrsh	r1, [r0, r5]
 8018ef6:	1c1a      	adds	r2, r3, #0
 8018ef8:	b21b      	sxth	r3, r3
 8018efa:	8804      	ldrh	r4, [r0, #0]
 8018efc:	428b      	cmp	r3, r1
 8018efe:	da00      	bge.n	8018f02 <lv_label_event+0x1d2>
 8018f00:	1c22      	adds	r2, r4, #0
 8018f02:	8002      	strh	r2, [r0, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 8018f04:	8873      	ldrh	r3, [r6, #2]
 8018f06:	2502      	movs	r5, #2
 8018f08:	5f41      	ldrsh	r1, [r0, r5]
 8018f0a:	1c1a      	adds	r2, r3, #0
 8018f0c:	b21b      	sxth	r3, r3
 8018f0e:	8844      	ldrh	r4, [r0, #2]
 8018f10:	428b      	cmp	r3, r1
 8018f12:	da00      	bge.n	8018f16 <lv_label_event+0x1e6>
 8018f14:	1c22      	adds	r2, r4, #0
 8018f16:	8042      	strh	r2, [r0, #2]
 8018f18:	e717      	b.n	8018d4a <lv_label_event+0x1a>
        else w = lv_obj_get_content_width(obj);
 8018f1a:	0038      	movs	r0, r7
 8018f1c:	f7ef feec 	bl	8008cf8 <lv_obj_get_content_width>
 8018f20:	e7d8      	b.n	8018ed4 <lv_label_event+0x1a4>
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 8018f22:	4a51      	ldr	r2, [pc, #324]	; (8019068 <lv_label_event+0x338>)
 8018f24:	6072      	str	r2, [r6, #4]
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 8018f26:	60b2      	str	r2, [r6, #8]
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8018f28:	2230      	movs	r2, #48	; 0x30
 8018f2a:	5cb8      	ldrb	r0, [r7, r2]
 8018f2c:	3a2a      	subs	r2, #42	; 0x2a
 8018f2e:	4002      	ands	r2, r0
 8018f30:	a808      	add	r0, sp, #32
 8018f32:	4680      	mov	r8, r0
 8018f34:	2a02      	cmp	r2, #2
 8018f36:	d000      	beq.n	8018f3a <lv_label_event+0x20a>
 8018f38:	e758      	b.n	8018dec <lv_label_event+0xbc>
 8018f3a:	3b02      	subs	r3, #2
 8018f3c:	2b01      	cmp	r3, #1
 8018f3e:	d900      	bls.n	8018f42 <lv_label_event+0x212>
 8018f40:	e754      	b.n	8018dec <lv_label_event+0xbc>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8018f42:	2214      	movs	r2, #20
 8018f44:	5eb3      	ldrsh	r3, [r6, r2]
 8018f46:	4a49      	ldr	r2, [pc, #292]	; (801906c <lv_label_event+0x33c>)
 8018f48:	9502      	str	r5, [sp, #8]
 8018f4a:	9201      	str	r2, [sp, #4]
 8018f4c:	2012      	movs	r0, #18
 8018f4e:	5e32      	ldrsh	r2, [r6, r0]
 8018f50:	4640      	mov	r0, r8
 8018f52:	9200      	str	r2, [sp, #0]
 8018f54:	6832      	ldr	r2, [r6, #0]
 8018f56:	f7fd fd95 	bl	8016a84 <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8018f5a:	466b      	mov	r3, sp
 8018f5c:	466a      	mov	r2, sp
 8018f5e:	8b9b      	ldrh	r3, [r3, #28]
 8018f60:	8b12      	ldrh	r2, [r2, #24]
 8018f62:	3301      	adds	r3, #1
 8018f64:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 8018f66:	4642      	mov	r2, r8
 8018f68:	2100      	movs	r1, #0
 8018f6a:	5e52      	ldrsh	r2, [r2, r1]
 8018f6c:	b21b      	sxth	r3, r3
 8018f6e:	429a      	cmp	r2, r3
 8018f70:	dc00      	bgt.n	8018f74 <lv_label_event+0x244>
 8018f72:	e73b      	b.n	8018dec <lv_label_event+0xbc>
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 8018f74:	2301      	movs	r3, #1
 8018f76:	7733      	strb	r3, [r6, #28]
 8018f78:	e738      	b.n	8018dec <lv_label_event+0xbc>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8018f7a:	7ffb      	ldrb	r3, [r7, #31]
 8018f7c:	075b      	lsls	r3, r3, #29
 8018f7e:	d500      	bpl.n	8018f82 <lv_label_event+0x252>
 8018f80:	e71a      	b.n	8018db8 <lv_label_event+0x88>
 8018f82:	2304      	movs	r3, #4
 8018f84:	431d      	orrs	r5, r3
 8018f86:	b2ed      	uxtb	r5, r5
 8018f88:	e716      	b.n	8018db8 <lv_label_event+0x88>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8018f8a:	68a3      	ldr	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8018f8c:	2200      	movs	r2, #0
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8018f8e:	4699      	mov	r9, r3
        draw_ctx->clip_area = &txt_clip;
 8018f90:	4643      	mov	r3, r8
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8018f92:	0031      	movs	r1, r6
        draw_ctx->clip_area = &txt_clip;
 8018f94:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8018f96:	0020      	movs	r0, r4
 8018f98:	6a3b      	ldr	r3, [r7, #32]
 8018f9a:	9200      	str	r2, [sp, #0]
 8018f9c:	aa06      	add	r2, sp, #24
 8018f9e:	f7f6 fb61 	bl	800f664 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8018fa2:	e73f      	b.n	8018e24 <lv_label_event+0xf4>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 8018fa4:	0038      	movs	r0, r7
 8018fa6:	f7f1 fe03 	bl	800abb0 <lv_obj_get_scroll_top>
        lv_area_move(&txt_coords, 0, -s);
 8018faa:	4242      	negs	r2, r0
 8018fac:	b212      	sxth	r2, r2
 8018fae:	2100      	movs	r1, #0
 8018fb0:	a806      	add	r0, sp, #24
 8018fb2:	f7fb f945 	bl	8014240 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 8018fb6:	466a      	mov	r2, sp
 8018fb8:	8afb      	ldrh	r3, [r7, #22]
 8018fba:	83d3      	strh	r3, [r2, #30]
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8018fbc:	464b      	mov	r3, r9
 8018fbe:	5cfa      	ldrb	r2, [r7, r3]
 8018fc0:	e721      	b.n	8018e06 <lv_label_event+0xd6>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8018fc2:	2214      	movs	r2, #20
 8018fc4:	5eb3      	ldrsh	r3, [r6, r2]
 8018fc6:	4a29      	ldr	r2, [pc, #164]	; (801906c <lv_label_event+0x33c>)
 8018fc8:	6a39      	ldr	r1, [r7, #32]
 8018fca:	9502      	str	r5, [sp, #8]
 8018fcc:	9201      	str	r2, [sp, #4]
 8018fce:	2012      	movs	r0, #18
 8018fd0:	5e32      	ldrsh	r2, [r6, r0]
 8018fd2:	a805      	add	r0, sp, #20
 8018fd4:	9200      	str	r2, [sp, #0]
 8018fd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018fd8:	f7fd fd54 	bl	8016a84 <lv_txt_get_size>
        if(size.x > lv_area_get_width(&txt_coords)) {
 8018fdc:	466b      	mov	r3, sp
 8018fde:	2214      	movs	r2, #20
 8018fe0:	5e9a      	ldrsh	r2, [r3, r2]
 8018fe2:	466b      	mov	r3, sp
 8018fe4:	4669      	mov	r1, sp
 8018fe6:	8b9b      	ldrh	r3, [r3, #28]
 8018fe8:	8b09      	ldrh	r1, [r1, #24]
 8018fea:	3301      	adds	r3, #1
 8018fec:	1a5b      	subs	r3, r3, r1
 8018fee:	b21b      	sxth	r3, r3
 8018ff0:	429a      	cmp	r2, r3
 8018ff2:	dc1d      	bgt.n	8019030 <lv_label_event+0x300>
        if(size.y > lv_area_get_height(&txt_coords)) {
 8018ff4:	466b      	mov	r3, sp
 8018ff6:	2216      	movs	r2, #22
 8018ff8:	5e9a      	ldrsh	r2, [r3, r2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8018ffa:	466b      	mov	r3, sp
 8018ffc:	4669      	mov	r1, sp
 8018ffe:	8bdb      	ldrh	r3, [r3, #30]
 8019000:	8b49      	ldrh	r1, [r1, #26]
 8019002:	3301      	adds	r3, #1
 8019004:	1a5b      	subs	r3, r3, r1
 8019006:	b21b      	sxth	r3, r3
 8019008:	429a      	cmp	r2, r3
 801900a:	dc00      	bgt.n	801900e <lv_label_event+0x2de>
 801900c:	e714      	b.n	8018e38 <lv_label_event+0x108>
            label_draw_dsc.ofs_x = label->offset.x;
 801900e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8019010:	0031      	movs	r1, r6
            label_draw_dsc.ofs_x = label->offset.x;
 8019012:	82f3      	strh	r3, [r6, #22]
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8019014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8019016:	0020      	movs	r0, r4
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8019018:	891b      	ldrh	r3, [r3, #8]
 801901a:	189b      	adds	r3, r3, r2
 801901c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801901e:	189b      	adds	r3, r3, r2
 8019020:	8333      	strh	r3, [r6, #24]
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8019022:	2300      	movs	r3, #0
 8019024:	9300      	str	r3, [sp, #0]
 8019026:	6a3b      	ldr	r3, [r7, #32]
 8019028:	aa06      	add	r2, sp, #24
 801902a:	f7f6 fb1b 	bl	800f664 <lv_draw_label>
 801902e:	e703      	b.n	8018e38 <lv_label_event+0x108>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8019030:	8dbd      	ldrh	r5, [r7, #44]	; 0x2c
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8019032:	980a      	ldr	r0, [sp, #40]	; 0x28
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8019034:	18ad      	adds	r5, r5, r2
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8019036:	2220      	movs	r2, #32
 8019038:	0011      	movs	r1, r2
 801903a:	f7fa f9b3 	bl	80133a4 <lv_font_get_glyph_width>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801903e:	4643      	mov	r3, r8
 8019040:	4343      	muls	r3, r0
 8019042:	b2ad      	uxth	r5, r5
 8019044:	18e8      	adds	r0, r5, r3
 8019046:	82f0      	strh	r0, [r6, #22]
            label_draw_dsc.ofs_y = label->offset.y;
 8019048:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 801904a:	0031      	movs	r1, r6
            label_draw_dsc.ofs_y = label->offset.y;
 801904c:	8333      	strh	r3, [r6, #24]
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 801904e:	2300      	movs	r3, #0
 8019050:	9300      	str	r3, [sp, #0]
 8019052:	0020      	movs	r0, r4
 8019054:	6a3b      	ldr	r3, [r7, #32]
 8019056:	aa06      	add	r2, sp, #24
 8019058:	f7f6 fb04 	bl	800f664 <lv_draw_label>
 801905c:	e7ca      	b.n	8018ff4 <lv_label_event+0x2c4>
 801905e:	46c0      	nop			; (mov r8, r8)
 8019060:	0801be70 	.word	0x0801be70
 8019064:	000027d1 	.word	0x000027d1
 8019068:	0000ffff 	.word	0x0000ffff
 801906c:	00001fff 	.word	0x00001fff

08019070 <lv_label_create>:
{
 8019070:	b510      	push	{r4, lr}
 8019072:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8019074:	4803      	ldr	r0, [pc, #12]	; (8019084 <lv_label_create+0x14>)
 8019076:	f7ee ffcb 	bl	8008010 <lv_obj_class_create_obj>
 801907a:	0004      	movs	r4, r0
    lv_obj_class_init_obj(obj);
 801907c:	f7ef f840 	bl	8008100 <lv_obj_class_init_obj>
}
 8019080:	0020      	movs	r0, r4
 8019082:	bd10      	pop	{r4, pc}
 8019084:	0801be70 	.word	0x0801be70

08019088 <lv_label_set_text>:
{
 8019088:	b570      	push	{r4, r5, r6, lr}
 801908a:	000d      	movs	r5, r1
 801908c:	0004      	movs	r4, r0
    lv_obj_invalidate(obj);
 801908e:	f7f0 f9c1 	bl	8009414 <lv_obj_invalidate>
    if(text == NULL) text = label->text;
 8019092:	2d00      	cmp	r5, #0
 8019094:	d027      	beq.n	80190e6 <lv_label_set_text+0x5e>
    if(label->text == text && label->static_txt == 0) {
 8019096:	6a20      	ldr	r0, [r4, #32]
 8019098:	42a8      	cmp	r0, r5
 801909a:	d025      	beq.n	80190e8 <lv_label_set_text+0x60>
        if(label->text != NULL && label->static_txt == 0) {
 801909c:	2800      	cmp	r0, #0
 801909e:	d009      	beq.n	80190b4 <lv_label_set_text+0x2c>
 80190a0:	2208      	movs	r2, #8
 80190a2:	2330      	movs	r3, #48	; 0x30
 80190a4:	0016      	movs	r6, r2
 80190a6:	5ce3      	ldrb	r3, [r4, r3]
 80190a8:	401e      	ands	r6, r3
 80190aa:	421a      	tst	r2, r3
 80190ac:	d102      	bne.n	80190b4 <lv_label_set_text+0x2c>
            lv_mem_free(label->text);
 80190ae:	f7fb ff09 	bl	8014ec4 <lv_mem_free>
            label->text = NULL;
 80190b2:	6226      	str	r6, [r4, #32]
        size_t len = strlen(text) + 1;
 80190b4:	0028      	movs	r0, r5
 80190b6:	f7e7 f82f 	bl	8000118 <strlen>
 80190ba:	3001      	adds	r0, #1
        label->text = lv_mem_alloc(len);
 80190bc:	f7fb fee0 	bl	8014e80 <lv_mem_alloc>
 80190c0:	6220      	str	r0, [r4, #32]
        LV_ASSERT_MALLOC(label->text);
 80190c2:	2800      	cmp	r0, #0
 80190c4:	d00e      	beq.n	80190e4 <lv_label_set_text+0x5c>
        strcpy(label->text, text);
 80190c6:	0029      	movs	r1, r5
 80190c8:	f002 fa2e 	bl	801b528 <strcpy>
        label->static_txt = 0;
 80190cc:	2230      	movs	r2, #48	; 0x30
 80190ce:	2108      	movs	r1, #8
 80190d0:	5ca3      	ldrb	r3, [r4, r2]
 80190d2:	438b      	bics	r3, r1
 80190d4:	54a3      	strb	r3, [r4, r2]
    if(label->text == NULL) return;
 80190d6:	6a23      	ldr	r3, [r4, #32]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d002      	beq.n	80190e2 <lv_label_set_text+0x5a>
 80190dc:	0020      	movs	r0, r4
 80190de:	f7ff fb71 	bl	80187c4 <lv_label_refr_text.part.0>
}
 80190e2:	bd70      	pop	{r4, r5, r6, pc}
        LV_ASSERT_MALLOC(label->text);
 80190e4:	e7fe      	b.n	80190e4 <lv_label_set_text+0x5c>
    if(text == NULL) text = label->text;
 80190e6:	6a25      	ldr	r5, [r4, #32]
    if(label->text == text && label->static_txt == 0) {
 80190e8:	2330      	movs	r3, #48	; 0x30
 80190ea:	5ce3      	ldrb	r3, [r4, r3]
 80190ec:	071b      	lsls	r3, r3, #28
 80190ee:	d4e1      	bmi.n	80190b4 <lv_label_set_text+0x2c>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 80190f0:	0028      	movs	r0, r5
 80190f2:	f7e7 f811 	bl	8000118 <strlen>
 80190f6:	1c41      	adds	r1, r0, #1
 80190f8:	0028      	movs	r0, r5
 80190fa:	f7fb feff 	bl	8014efc <lv_mem_realloc>
        LV_ASSERT_MALLOC(label->text);
 80190fe:	2800      	cmp	r0, #0
 8019100:	d001      	beq.n	8019106 <lv_label_set_text+0x7e>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 8019102:	6220      	str	r0, [r4, #32]
 8019104:	e7ea      	b.n	80190dc <lv_label_set_text+0x54>
        LV_ASSERT_MALLOC(label->text);
 8019106:	e7fe      	b.n	8019106 <lv_label_set_text+0x7e>

08019108 <lv_label_constructor>:
    label->dot_end    = LV_LABEL_DOT_END_INV;
 8019108:	2301      	movs	r3, #1
{
 801910a:	b570      	push	{r4, r5, r6, lr}
    label->text       = NULL;
 801910c:	2600      	movs	r6, #0
    label->long_mode  = LV_LABEL_LONG_WRAP;
 801910e:	2530      	movs	r5, #48	; 0x30
 8019110:	225f      	movs	r2, #95	; 0x5f
{
 8019112:	000c      	movs	r4, r1
    label->dot_end    = LV_LABEL_DOT_END_INV;
 8019114:	425b      	negs	r3, r3
    label->text       = NULL;
 8019116:	620e      	str	r6, [r1, #32]
    label->dot.tmp_ptr   = NULL;
 8019118:	624e      	str	r6, [r1, #36]	; 0x24
    label->dot_end    = LV_LABEL_DOT_END_INV;
 801911a:	628b      	str	r3, [r1, #40]	; 0x28
    label->offset.x = 0;
 801911c:	62ce      	str	r6, [r1, #44]	; 0x2c
    label->long_mode  = LV_LABEL_LONG_WRAP;
 801911e:	5d4b      	ldrb	r3, [r1, r5]
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8019120:	0020      	movs	r0, r4
    label->long_mode  = LV_LABEL_LONG_WRAP;
 8019122:	4393      	bics	r3, r2
 8019124:	554b      	strb	r3, [r1, r5]
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8019126:	2102      	movs	r1, #2
 8019128:	f7ee fea0 	bl	8007e6c <lv_obj_clear_flag>
    lv_anim_del(obj, set_ofs_x_anim);
 801912c:	4913      	ldr	r1, [pc, #76]	; (801917c <lv_label_constructor+0x74>)
 801912e:	0020      	movs	r0, r4
 8019130:	f7fa feb4 	bl	8013e9c <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 8019134:	0020      	movs	r0, r4
 8019136:	4912      	ldr	r1, [pc, #72]	; (8019180 <lv_label_constructor+0x78>)
 8019138:	f7fa feb0 	bl	8013e9c <lv_anim_del>
        label->expand = 0;
 801913c:	2220      	movs	r2, #32
    label->offset.x = 0;
 801913e:	62e6      	str	r6, [r4, #44]	; 0x2c
        label->expand = 0;
 8019140:	5d63      	ldrb	r3, [r4, r5]
 8019142:	4393      	bics	r3, r2
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 8019144:	3a19      	subs	r2, #25
        label->expand = 0;
 8019146:	5563      	strb	r3, [r4, r5]
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 8019148:	4013      	ands	r3, r2
 801914a:	2b01      	cmp	r3, #1
 801914c:	d00f      	beq.n	801916e <lv_label_constructor+0x66>
    label->long_mode = long_mode;
 801914e:	2230      	movs	r2, #48	; 0x30
 8019150:	2107      	movs	r1, #7
 8019152:	5ca3      	ldrb	r3, [r4, r2]
 8019154:	438b      	bics	r3, r1
 8019156:	54a3      	strb	r3, [r4, r2]
    if(label->text == NULL) return;
 8019158:	6a23      	ldr	r3, [r4, #32]
 801915a:	2b00      	cmp	r3, #0
 801915c:	d002      	beq.n	8019164 <lv_label_constructor+0x5c>
 801915e:	0020      	movs	r0, r4
 8019160:	f7ff fb30 	bl	80187c4 <lv_label_refr_text.part.0>
    lv_label_set_text(obj, "Text");
 8019164:	0020      	movs	r0, r4
 8019166:	4907      	ldr	r1, [pc, #28]	; (8019184 <lv_label_constructor+0x7c>)
 8019168:	f7ff ff8e 	bl	8019088 <lv_label_set_text>
}
 801916c:	bd70      	pop	{r4, r5, r6, pc}
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 801916e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019170:	3301      	adds	r3, #1
 8019172:	d0ec      	beq.n	801914e <lv_label_constructor+0x46>
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 8019174:	0020      	movs	r0, r4
 8019176:	f7ff f957 	bl	8018428 <lv_label_revert_dots.part.0>
 801917a:	e7e8      	b.n	801914e <lv_label_constructor+0x46>
 801917c:	0801841d 	.word	0x0801841d
 8019180:	08018411 	.word	0x08018411
 8019184:	0801be68 	.word	0x0801be68

08019188 <lv_label_set_text_static>:
    if(label->static_txt == 0 && label->text != NULL) {
 8019188:	2208      	movs	r2, #8
 801918a:	2330      	movs	r3, #48	; 0x30
{
 801918c:	b570      	push	{r4, r5, r6, lr}
    if(label->static_txt == 0 && label->text != NULL) {
 801918e:	0016      	movs	r6, r2
 8019190:	5cc3      	ldrb	r3, [r0, r3]
{
 8019192:	0004      	movs	r4, r0
 8019194:	000d      	movs	r5, r1
    if(label->static_txt == 0 && label->text != NULL) {
 8019196:	401e      	ands	r6, r3
 8019198:	421a      	tst	r2, r3
 801919a:	d111      	bne.n	80191c0 <lv_label_set_text_static+0x38>
 801919c:	6a00      	ldr	r0, [r0, #32]
 801919e:	2800      	cmp	r0, #0
 80191a0:	d002      	beq.n	80191a8 <lv_label_set_text_static+0x20>
        lv_mem_free(label->text);
 80191a2:	f7fb fe8f 	bl	8014ec4 <lv_mem_free>
        label->text = NULL;
 80191a6:	6226      	str	r6, [r4, #32]
    if(text != NULL) {
 80191a8:	2d00      	cmp	r5, #0
 80191aa:	d008      	beq.n	80191be <lv_label_set_text_static+0x36>
        label->static_txt = 1;
 80191ac:	2230      	movs	r2, #48	; 0x30
 80191ae:	2108      	movs	r1, #8
 80191b0:	5ca3      	ldrb	r3, [r4, r2]
 80191b2:	430b      	orrs	r3, r1
 80191b4:	54a3      	strb	r3, [r4, r2]
        label->text       = (char *)text;
 80191b6:	6225      	str	r5, [r4, #32]
    if(label->text == NULL) return;
 80191b8:	0020      	movs	r0, r4
 80191ba:	f7ff fb03 	bl	80187c4 <lv_label_refr_text.part.0>
}
 80191be:	bd70      	pop	{r4, r5, r6, pc}
    if(text != NULL) {
 80191c0:	2900      	cmp	r1, #0
 80191c2:	d1f3      	bne.n	80191ac <lv_label_set_text_static+0x24>
    if(label->text == NULL) return;
 80191c4:	6a03      	ldr	r3, [r0, #32]
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d0f9      	beq.n	80191be <lv_label_set_text_static+0x36>
 80191ca:	e7f5      	b.n	80191b8 <lv_label_set_text_static+0x30>

080191cc <lv_label_get_text>:
    return label->text;
 80191cc:	6a00      	ldr	r0, [r0, #32]
}
 80191ce:	4770      	bx	lr

080191d0 <lv_label_get_letter_on>:
{
 80191d0:	b510      	push	{r4, lr}
    LV_ASSERT_NULL(pos_in);
 80191d2:	2900      	cmp	r1, #0
 80191d4:	d002      	beq.n	80191dc <lv_label_get_letter_on+0xc>
}
 80191d6:	f7ff f963 	bl	80184a0 <lv_label_get_letter_on.part.0>
 80191da:	bd10      	pop	{r4, pc}
    LV_ASSERT_NULL(pos_in);
 80191dc:	e7fe      	b.n	80191dc <lv_label_get_letter_on+0xc>
 80191de:	46c0      	nop			; (mov r8, r8)

080191e0 <set_y_anim>:
    inf_normalize(obj);
}


static void set_y_anim(void * obj, int32_t v)
{
 80191e0:	b510      	push	{r4, lr}
    lv_obj_set_y(obj, v);
 80191e2:	b209      	sxth	r1, r1
 80191e4:	f7ef fc62 	bl	8008aac <lv_obj_set_y>
}
 80191e8:	bd10      	pop	{r4, pc}
 80191ea:	46c0      	nop			; (mov r8, r8)

080191ec <get_sel_area>:
{
 80191ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80191ee:	2257      	movs	r2, #87	; 0x57
 80191f0:	b083      	sub	sp, #12
 80191f2:	000f      	movs	r7, r1
 80191f4:	2100      	movs	r1, #0
 80191f6:	0006      	movs	r6, r0
 80191f8:	f7f3 f9e4 	bl	800c5c4 <lv_obj_get_style_prop>
 80191fc:	2180      	movs	r1, #128	; 0x80
 80191fe:	0004      	movs	r4, r0
 8019200:	2257      	movs	r2, #87	; 0x57
 8019202:	0030      	movs	r0, r6
 8019204:	02c9      	lsls	r1, r1, #11
 8019206:	f7f3 f9dd 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801920a:	2259      	movs	r2, #89	; 0x59
 801920c:	2308      	movs	r3, #8
 801920e:	5ec5      	ldrsh	r5, [r0, r3]
 8019210:	2100      	movs	r1, #0
 8019212:	0030      	movs	r0, r6
 8019214:	2308      	movs	r3, #8
 8019216:	5ee4      	ldrsh	r4, [r4, r3]
 8019218:	f7f3 f9d4 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_coord_t d = (font_sel_h + font_main_h) / 2 + line_space;
 801921c:	192d      	adds	r5, r5, r4
 801921e:	0fec      	lsrs	r4, r5, #31
 8019220:	1964      	adds	r4, r4, r5
 8019222:	1064      	asrs	r4, r4, #1
 8019224:	1824      	adds	r4, r4, r0
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 8019226:	0030      	movs	r0, r6
 8019228:	8a75      	ldrh	r5, [r6, #18]
 801922a:	f7ef fd5d 	bl	8008ce8 <lv_obj_get_height>
    lv_coord_t d = (font_sel_h + font_main_h) / 2 + line_space;
 801922e:	b2a4      	uxth	r4, r4
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 8019230:	b222      	sxth	r2, r4
 8019232:	0be3      	lsrs	r3, r4, #15
 8019234:	189b      	adds	r3, r3, r2
 8019236:	105b      	asrs	r3, r3, #1
 8019238:	1aeb      	subs	r3, r5, r3
 801923a:	0fc5      	lsrs	r5, r0, #31
 801923c:	182d      	adds	r5, r5, r0
 801923e:	106d      	asrs	r5, r5, #1
 8019240:	195b      	adds	r3, r3, r5
 8019242:	b29b      	uxth	r3, r3
 8019244:	807b      	strh	r3, [r7, #2]
    sel_area->y2 = sel_area->y1 + d;
 8019246:	18e3      	adds	r3, r4, r3
 8019248:	80fb      	strh	r3, [r7, #6]
    lv_obj_get_coords(obj, &roller_coords);
 801924a:	4669      	mov	r1, sp
 801924c:	0030      	movs	r0, r6
 801924e:	f7ef fce1 	bl	8008c14 <lv_obj_get_coords>
    sel_area->x1 = roller_coords.x1;
 8019252:	466b      	mov	r3, sp
 8019254:	881b      	ldrh	r3, [r3, #0]
 8019256:	803b      	strh	r3, [r7, #0]
    sel_area->x2 = roller_coords.x2;
 8019258:	466b      	mov	r3, sp
 801925a:	889b      	ldrh	r3, [r3, #4]
 801925c:	80bb      	strh	r3, [r7, #4]
}
 801925e:	b003      	add	sp, #12
 8019260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019262:	46c0      	nop			; (mov r8, r8)

08019264 <inf_normalize.part.0>:
static void inf_normalize(lv_obj_t * obj)
 8019264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 8019266:	2103      	movs	r1, #3
static void inf_normalize(lv_obj_t * obj)
 8019268:	0004      	movs	r4, r0
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 801926a:	8c00      	ldrh	r0, [r0, #32]
 801926c:	f7e6 ff5c 	bl	8000128 <__udivsi3>
 8019270:	b285      	uxth	r5, r0
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 8019272:	0029      	movs	r1, r5
 8019274:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8019276:	f7e6 ffdd 	bl	8000234 <__aeabi_uidivmod>
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801927a:	1869      	adds	r1, r5, r1
 801927c:	b288      	uxth	r0, r1
 801927e:	8460      	strh	r0, [r4, #34]	; 0x22
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 8019280:	0029      	movs	r1, r5
 8019282:	f7e6 ffd7 	bl	8000234 <__aeabi_uidivmod>
        roller->sel_opt_id_ori += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 8019286:	186d      	adds	r5, r5, r1
 8019288:	84a5      	strh	r5, [r4, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801928a:	2257      	movs	r2, #87	; 0x57
 801928c:	2100      	movs	r1, #0
 801928e:	0020      	movs	r0, r4
 8019290:	f7f3 f998 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8019294:	2259      	movs	r2, #89	; 0x59
 8019296:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8019298:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801929a:	0020      	movs	r0, r4
 801929c:	f7f3 f992 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80192a0:	b206      	sxth	r6, r0
        lv_coord_t h                   = lv_obj_get_content_height(obj);
 80192a2:	0020      	movs	r0, r4
 80192a4:	2308      	movs	r3, #8
 80192a6:	5eed      	ldrsh	r5, [r5, r3]
 80192a8:	f7ef fd44 	bl	8008d34 <lv_obj_get_content_height>
 80192ac:	0007      	movs	r7, r0
    return lv_obj_get_child(obj, 0);
 80192ae:	2100      	movs	r1, #0
 80192b0:	0020      	movs	r0, r4
 80192b2:	f7f4 fdb9 	bl	800de28 <lv_obj_get_child>
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80192b6:	0ff9      	lsrs	r1, r7, #31
 80192b8:	19c9      	adds	r1, r1, r7
 80192ba:	104b      	asrs	r3, r1, #1
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 80192bc:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80192be:	19ae      	adds	r6, r5, r6
 80192c0:	4371      	muls	r1, r6
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80192c2:	0fea      	lsrs	r2, r5, #31
 80192c4:	1952      	adds	r2, r2, r5
 80192c6:	1052      	asrs	r2, r2, #1
        lv_coord_t new_y = mid_y1 - sel_y1;
 80192c8:	1889      	adds	r1, r1, r2
 80192ca:	1a59      	subs	r1, r3, r1
        lv_obj_set_y(label, new_y);
 80192cc:	b209      	sxth	r1, r1
 80192ce:	f7ef fbed 	bl	8008aac <lv_obj_set_y>
}
 80192d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080192d4 <scroll_anim_ready_cb>:
{
 80192d4:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_get_parent(a->var); /*The label is animated*/
 80192d6:	6800      	ldr	r0, [r0, #0]
 80192d8:	f7f4 fda0 	bl	800de1c <lv_obj_get_parent>
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 80192dc:	2326      	movs	r3, #38	; 0x26
 80192de:	5cc3      	ldrb	r3, [r0, r3]
 80192e0:	07db      	lsls	r3, r3, #31
 80192e2:	d400      	bmi.n	80192e6 <scroll_anim_ready_cb+0x12>
}
 80192e4:	bd10      	pop	{r4, pc}
 80192e6:	f7ff ffbd 	bl	8019264 <inf_normalize.part.0>
 80192ea:	e7fb      	b.n	80192e4 <scroll_anim_ready_cb+0x10>

080192ec <refr_position>:
{
 80192ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192ee:	46de      	mov	lr, fp
 80192f0:	464e      	mov	r6, r9
 80192f2:	4645      	mov	r5, r8
 80192f4:	4657      	mov	r7, sl
 80192f6:	b5e0      	push	{r5, r6, r7, lr}
 80192f8:	000e      	movs	r6, r1
 80192fa:	b091      	sub	sp, #68	; 0x44
    return lv_obj_get_child(obj, 0);
 80192fc:	2100      	movs	r1, #0
{
 80192fe:	0004      	movs	r4, r0
    return lv_obj_get_child(obj, 0);
 8019300:	f7f4 fd92 	bl	800de28 <lv_obj_get_child>
 8019304:	1e05      	subs	r5, r0, #0
    if(label == NULL) return;
 8019306:	d04c      	beq.n	80193a2 <refr_position+0xb6>
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, lv_label_get_text(label));
 8019308:	f7ff ff60 	bl	80191cc <lv_label_get_text>
 801930c:	2100      	movs	r1, #0
 801930e:	0002      	movs	r2, r0
 8019310:	0028      	movs	r0, r5
 8019312:	f7f4 fa11 	bl	800d738 <lv_obj_calculate_style_text_align>
    switch(align) {
 8019316:	2802      	cmp	r0, #2
 8019318:	d100      	bne.n	801931c <refr_position+0x30>
 801931a:	e087      	b.n	801942c <refr_position+0x140>
 801931c:	2803      	cmp	r0, #3
 801931e:	d100      	bne.n	8019322 <refr_position+0x36>
 8019320:	e073      	b.n	801940a <refr_position+0x11e>
 8019322:	2801      	cmp	r0, #1
 8019324:	d06c      	beq.n	8019400 <refr_position+0x114>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8019326:	2257      	movs	r2, #87	; 0x57
 8019328:	2100      	movs	r1, #0
 801932a:	0020      	movs	r0, r4
 801932c:	f7f3 f94a 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8019330:	2259      	movs	r2, #89	; 0x59
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8019332:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8019334:	2100      	movs	r1, #0
 8019336:	0020      	movs	r0, r4
 8019338:	f7f3 f944 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801933c:	b203      	sxth	r3, r0
 801933e:	4699      	mov	r9, r3
 8019340:	2208      	movs	r2, #8
 8019342:	5ebb      	ldrsh	r3, [r7, r2]
    lv_coord_t h                   = lv_obj_get_content_height(obj);
 8019344:	0020      	movs	r0, r4
 8019346:	469a      	mov	sl, r3
 8019348:	f7ef fcf4 	bl	8008d34 <lv_obj_get_content_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801934c:	2264      	movs	r2, #100	; 0x64
 801934e:	4683      	mov	fp, r0
 8019350:	2100      	movs	r1, #0
 8019352:	0020      	movs	r0, r4
 8019354:	f7f3 f936 	bl	800c5c4 <lv_obj_get_style_prop>
    uint16_t anim_time             = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);
 8019358:	b283      	uxth	r3, r0
 801935a:	0007      	movs	r7, r0
 801935c:	4698      	mov	r8, r3
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801935e:	2e00      	cmp	r6, #0
 8019360:	d126      	bne.n	80193b0 <refr_position+0xc4>
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8019362:	2326      	movs	r3, #38	; 0x26
 8019364:	5ce3      	ldrb	r3, [r4, r3]
 8019366:	07db      	lsls	r3, r3, #31
 8019368:	d45c      	bmi.n	8019424 <refr_position+0x138>
    lv_coord_t sel_y1 = id * (font_h + line_space);
 801936a:	4648      	mov	r0, r9
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801936c:	4652      	mov	r2, sl
 801936e:	465b      	mov	r3, fp
    lv_coord_t sel_y1 = id * (font_h + line_space);
 8019370:	8c64      	ldrh	r4, [r4, #34]	; 0x22
 8019372:	4450      	add	r0, sl
 8019374:	4344      	muls	r4, r0
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8019376:	0fd0      	lsrs	r0, r2, #31
 8019378:	0fdb      	lsrs	r3, r3, #31
 801937a:	4450      	add	r0, sl
 801937c:	445b      	add	r3, fp
 801937e:	1040      	asrs	r0, r0, #1
 8019380:	105b      	asrs	r3, r3, #1
    lv_coord_t new_y = mid_y1 - sel_y1;
 8019382:	1824      	adds	r4, r4, r0
 8019384:	1b1c      	subs	r4, r3, r4
 8019386:	b224      	sxth	r4, r4
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 8019388:	2e00      	cmp	r6, #0
 801938a:	d002      	beq.n	8019392 <refr_position+0xa6>
 801938c:	4643      	mov	r3, r8
 801938e:	2b00      	cmp	r3, #0
 8019390:	d11f      	bne.n	80193d2 <refr_position+0xe6>
        lv_anim_del(label, set_y_anim);
 8019392:	492e      	ldr	r1, [pc, #184]	; (801944c <refr_position+0x160>)
 8019394:	0028      	movs	r0, r5
 8019396:	f7fa fd81 	bl	8013e9c <lv_anim_del>
        lv_obj_set_y(label, new_y);
 801939a:	0021      	movs	r1, r4
 801939c:	0028      	movs	r0, r5
 801939e:	f7ef fb85 	bl	8008aac <lv_obj_set_y>
}
 80193a2:	b011      	add	sp, #68	; 0x44
 80193a4:	bcf0      	pop	{r4, r5, r6, r7}
 80193a6:	46bb      	mov	fp, r7
 80193a8:	46b2      	mov	sl, r6
 80193aa:	46a9      	mov	r9, r5
 80193ac:	46a0      	mov	r8, r4
 80193ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d0d6      	beq.n	8019362 <refr_position+0x76>
    lv_coord_t sel_y1 = id * (font_h + line_space);
 80193b4:	4648      	mov	r0, r9
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80193b6:	4652      	mov	r2, sl
 80193b8:	465b      	mov	r3, fp
    lv_coord_t sel_y1 = id * (font_h + line_space);
 80193ba:	8c64      	ldrh	r4, [r4, #34]	; 0x22
 80193bc:	4450      	add	r0, sl
 80193be:	4344      	muls	r4, r0
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80193c0:	0fd0      	lsrs	r0, r2, #31
 80193c2:	0fdb      	lsrs	r3, r3, #31
 80193c4:	4450      	add	r0, sl
 80193c6:	445b      	add	r3, fp
 80193c8:	1040      	asrs	r0, r0, #1
 80193ca:	105b      	asrs	r3, r3, #1
    lv_coord_t new_y = mid_y1 - sel_y1;
 80193cc:	1824      	adds	r4, r4, r0
 80193ce:	1b1c      	subs	r4, r3, r4
 80193d0:	b224      	sxth	r4, r4
        lv_anim_init(&a);
 80193d2:	4668      	mov	r0, sp
 80193d4:	f7fa fd4a 	bl	8013e6c <lv_anim_init>
    a->exec_cb = exec_cb;
 80193d8:	4b1c      	ldr	r3, [pc, #112]	; (801944c <refr_position+0x160>)
        lv_anim_set_values(&a, lv_obj_get_y(label), new_y);
 80193da:	0028      	movs	r0, r5
 80193dc:	9301      	str	r3, [sp, #4]
    a->var = var;
 80193de:	9500      	str	r5, [sp, #0]
 80193e0:	f7ef fc26 	bl	8008c30 <lv_obj_get_y>
    a->ready_cb = ready_cb;
 80193e4:	4b1a      	ldr	r3, [pc, #104]	; (8019450 <refr_position+0x164>)
    a->time = duration;
 80193e6:	043f      	lsls	r7, r7, #16
    a->ready_cb = ready_cb;
 80193e8:	9303      	str	r3, [sp, #12]
    a->path_cb = path_cb;
 80193ea:	4b1a      	ldr	r3, [pc, #104]	; (8019454 <refr_position+0x168>)
    a->start_value = start;
 80193ec:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 80193ee:	9008      	str	r0, [sp, #32]
    a->time = duration;
 80193f0:	0c3f      	lsrs	r7, r7, #16
        lv_anim_start(&a);
 80193f2:	4668      	mov	r0, sp
        lv_anim_set_values(&a, lv_obj_get_y(label), new_y);
 80193f4:	9409      	str	r4, [sp, #36]	; 0x24
 80193f6:	970a      	str	r7, [sp, #40]	; 0x28
    a->path_cb = path_cb;
 80193f8:	9306      	str	r3, [sp, #24]
        lv_anim_start(&a);
 80193fa:	f7fa fe39 	bl	8014070 <lv_anim_start>
 80193fe:	e7d0      	b.n	80193a2 <refr_position+0xb6>
            lv_obj_set_x(label, 0);
 8019400:	2100      	movs	r1, #0
 8019402:	0028      	movs	r0, r5
 8019404:	f7ef fb3a 	bl	8008a7c <lv_obj_set_x>
            break;
 8019408:	e78d      	b.n	8019326 <refr_position+0x3a>
            lv_obj_set_x(label, lv_obj_get_content_width(obj) - lv_obj_get_width(label));
 801940a:	0020      	movs	r0, r4
 801940c:	f7ef fc74 	bl	8008cf8 <lv_obj_get_content_width>
 8019410:	0007      	movs	r7, r0
 8019412:	0028      	movs	r0, r5
 8019414:	f7ef fc60 	bl	8008cd8 <lv_obj_get_width>
 8019418:	1a39      	subs	r1, r7, r0
 801941a:	b209      	sxth	r1, r1
 801941c:	0028      	movs	r0, r5
 801941e:	f7ef fb2d 	bl	8008a7c <lv_obj_set_x>
            break;
 8019422:	e780      	b.n	8019326 <refr_position+0x3a>
 8019424:	0020      	movs	r0, r4
 8019426:	f7ff ff1d 	bl	8019264 <inf_normalize.part.0>
 801942a:	e79e      	b.n	801936a <refr_position+0x7e>
            lv_obj_set_x(label, (lv_obj_get_content_width(obj) - lv_obj_get_width(label)) / 2);
 801942c:	0020      	movs	r0, r4
 801942e:	f7ef fc63 	bl	8008cf8 <lv_obj_get_content_width>
 8019432:	0007      	movs	r7, r0
 8019434:	0028      	movs	r0, r5
 8019436:	f7ef fc4f 	bl	8008cd8 <lv_obj_get_width>
 801943a:	1a38      	subs	r0, r7, r0
 801943c:	0fc1      	lsrs	r1, r0, #31
 801943e:	1809      	adds	r1, r1, r0
 8019440:	1049      	asrs	r1, r1, #1
 8019442:	0028      	movs	r0, r5
 8019444:	b209      	sxth	r1, r1
 8019446:	f7ef fb19 	bl	8008a7c <lv_obj_set_x>
            break;
 801944a:	e76c      	b.n	8019326 <refr_position+0x3a>
 801944c:	080191e1 	.word	0x080191e1
 8019450:	080192d5 	.word	0x080192d5
 8019454:	080141a5 	.word	0x080141a5

08019458 <lv_roller_constructor>:
    roller->mode = LV_ROLLER_MODE_NORMAL;
 8019458:	2226      	movs	r2, #38	; 0x26
{
 801945a:	b570      	push	{r4, r5, r6, lr}
    roller->mode = LV_ROLLER_MODE_NORMAL;
 801945c:	5c8b      	ldrb	r3, [r1, r2]
{
 801945e:	000c      	movs	r4, r1
    roller->mode = LV_ROLLER_MODE_NORMAL;
 8019460:	2101      	movs	r1, #1
    roller->option_cnt = 0;
 8019462:	2600      	movs	r6, #0
    roller->mode = LV_ROLLER_MODE_NORMAL;
 8019464:	438b      	bics	r3, r1
 8019466:	54a3      	strb	r3, [r4, r2]
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8019468:	0020      	movs	r0, r4
 801946a:	310f      	adds	r1, #15
    roller->option_cnt = 0;
 801946c:	6226      	str	r6, [r4, #32]
    roller->sel_opt_id_ori = 0;
 801946e:	84a6      	strh	r6, [r4, #36]	; 0x24
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8019470:	f7ee fcfc 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN_VER);
 8019474:	2180      	movs	r1, #128	; 0x80
 8019476:	0020      	movs	r0, r4
 8019478:	0089      	lsls	r1, r1, #2
 801947a:	f7ee fcf7 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_t * label = lv_obj_class_create_obj(&lv_roller_label_class, obj);
 801947e:	0021      	movs	r1, r4
 8019480:	4817      	ldr	r0, [pc, #92]	; (80194e0 <lv_roller_constructor+0x88>)
 8019482:	f7ee fdc5 	bl	8008010 <lv_obj_class_create_obj>
    lv_obj_class_init_obj(label);
 8019486:	f7ee fe3b 	bl	8008100 <lv_obj_class_init_obj>
    return lv_obj_get_child(obj, 0);
 801948a:	2100      	movs	r1, #0
 801948c:	0020      	movs	r0, r4
 801948e:	f7f4 fccb 	bl	800de28 <lv_obj_get_child>
    roller->option_cnt = 0;
 8019492:	2100      	movs	r1, #0
    return lv_obj_get_child(obj, 0);
 8019494:	0005      	movs	r5, r0
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 8019496:	2370      	movs	r3, #112	; 0x70
 8019498:	4a12      	ldr	r2, [pc, #72]	; (80194e4 <lv_roller_constructor+0x8c>)
    roller->sel_opt_id_ori = 0;
 801949a:	84a6      	strh	r6, [r4, #36]	; 0x24
    roller->option_cnt = 0;
 801949c:	6226      	str	r6, [r4, #32]
        if(options[cnt] == '\n') roller->option_cnt++;
 801949e:	2b0a      	cmp	r3, #10
 80194a0:	d015      	beq.n	80194ce <lv_roller_constructor+0x76>
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80194a2:	3201      	adds	r2, #1
 80194a4:	1e53      	subs	r3, r2, #1
 80194a6:	781b      	ldrb	r3, [r3, #0]
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d1f8      	bne.n	801949e <lv_roller_constructor+0x46>
        roller->mode = LV_ROLLER_MODE_NORMAL;
 80194ac:	2226      	movs	r2, #38	; 0x26
    roller->option_cnt++; /*Last option has no `\n`*/
 80194ae:	3101      	adds	r1, #1
 80194b0:	8421      	strh	r1, [r4, #32]
        roller->mode = LV_ROLLER_MODE_NORMAL;
 80194b2:	2101      	movs	r1, #1
 80194b4:	5ca3      	ldrb	r3, [r4, r2]
        lv_label_set_text(label, options);
 80194b6:	0028      	movs	r0, r5
        roller->mode = LV_ROLLER_MODE_NORMAL;
 80194b8:	438b      	bics	r3, r1
 80194ba:	54a3      	strb	r3, [r4, r2]
        lv_label_set_text(label, options);
 80194bc:	490a      	ldr	r1, [pc, #40]	; (80194e8 <lv_roller_constructor+0x90>)
 80194be:	f7ff fde3 	bl	8019088 <lv_label_set_text>
    roller->sel_opt_id_ori = roller->sel_opt_id;
 80194c2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    lv_obj_refresh_ext_draw_size(label);
 80194c4:	0028      	movs	r0, r5
    roller->sel_opt_id_ori = roller->sel_opt_id;
 80194c6:	84a3      	strh	r3, [r4, #36]	; 0x24
    lv_obj_refresh_ext_draw_size(label);
 80194c8:	f7ef f8ba 	bl	8008640 <lv_obj_refresh_ext_draw_size>
}
 80194cc:	bd70      	pop	{r4, r5, r6, pc}
        if(options[cnt] == '\n') roller->option_cnt++;
 80194ce:	3101      	adds	r1, #1
 80194d0:	b289      	uxth	r1, r1
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80194d2:	3201      	adds	r2, #1
        if(options[cnt] == '\n') roller->option_cnt++;
 80194d4:	8421      	strh	r1, [r4, #32]
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80194d6:	1e53      	subs	r3, r2, #1
 80194d8:	781b      	ldrb	r3, [r3, #0]
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d1df      	bne.n	801949e <lv_roller_constructor+0x46>
 80194de:	e7e5      	b.n	80194ac <lv_roller_constructor+0x54>
 80194e0:	0801bed0 	.word	0x0801bed0
 80194e4:	0801be8a 	.word	0x0801be8a
 80194e8:	0801be88 	.word	0x0801be88

080194ec <lv_roller_label_event>:
{
 80194ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194ee:	46c6      	mov	lr, r8
 80194f0:	b500      	push	{lr}
    lv_event_code_t code = lv_event_get_code(e);
 80194f2:	0008      	movs	r0, r1
{
 80194f4:	b092      	sub	sp, #72	; 0x48
 80194f6:	000c      	movs	r4, r1
    lv_event_code_t code = lv_event_get_code(e);
 80194f8:	f7eb fbd6 	bl	8004ca8 <lv_event_get_code>
 80194fc:	0005      	movs	r5, r0
    if(code != LV_EVENT_DRAW_MAIN) {
 80194fe:	2815      	cmp	r0, #21
 8019500:	d018      	beq.n	8019534 <lv_roller_label_event+0x48>
        res = lv_obj_event_base(MY_CLASS_LABEL, e);
 8019502:	0021      	movs	r1, r4
 8019504:	485e      	ldr	r0, [pc, #376]	; (8019680 <lv_roller_label_event+0x194>)
 8019506:	f7eb fbb3 	bl	8004c70 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801950a:	2801      	cmp	r0, #1
 801950c:	d003      	beq.n	8019516 <lv_roller_label_event+0x2a>
}
 801950e:	b012      	add	sp, #72	; 0x48
 8019510:	bc80      	pop	{r7}
 8019512:	46b8      	mov	r8, r7
 8019514:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_obj_t * label = lv_event_get_target(e);
 8019516:	0020      	movs	r0, r4
 8019518:	f7eb fbc2 	bl	8004ca0 <lv_event_get_target>
 801951c:	0006      	movs	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801951e:	2d13      	cmp	r5, #19
 8019520:	d054      	beq.n	80195cc <lv_roller_label_event+0xe0>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8019522:	2d29      	cmp	r5, #41	; 0x29
 8019524:	d1f3      	bne.n	801950e <lv_roller_label_event+0x22>
        refr_position(lv_obj_get_parent(label), LV_ANIM_OFF);
 8019526:	0030      	movs	r0, r6
 8019528:	f7f4 fc78 	bl	800de1c <lv_obj_get_parent>
 801952c:	2100      	movs	r1, #0
 801952e:	f7ff fedd 	bl	80192ec <refr_position>
 8019532:	e7ec      	b.n	801950e <lv_roller_label_event+0x22>
    lv_obj_t * label = lv_event_get_target(e);
 8019534:	0020      	movs	r0, r4
 8019536:	f7eb fbb3 	bl	8004ca0 <lv_event_get_target>
    lv_obj_t * label_obj = lv_event_get_target(e);
 801953a:	0020      	movs	r0, r4
 801953c:	f7eb fbb0 	bl	8004ca0 <lv_event_get_target>
 8019540:	0006      	movs	r6, r0
    lv_obj_t * roller = lv_obj_get_parent(label_obj);
 8019542:	f7f4 fc6b 	bl	800de1c <lv_obj_get_parent>
 8019546:	0005      	movs	r5, r0
    lv_draw_label_dsc_init(&label_draw_dsc);
 8019548:	a80a      	add	r0, sp, #40	; 0x28
 801954a:	f7f6 f873 	bl	800f634 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(roller, LV_PART_MAIN, &label_draw_dsc);
 801954e:	2100      	movs	r1, #0
 8019550:	aa0a      	add	r2, sp, #40	; 0x28
 8019552:	0028      	movs	r0, r5
 8019554:	f7ee ff58 	bl	8008408 <lv_obj_init_draw_label_dsc>
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8019558:	0020      	movs	r0, r4
 801955a:	f7eb fc07 	bl	8004d6c <lv_event_get_draw_ctx>
    if(!_lv_area_intersect(&roller_clip_area, draw_ctx->clip_area, &roller->coords)) return;
 801955e:	002a      	movs	r2, r5
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8019560:	6887      	ldr	r7, [r0, #8]
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8019562:	0004      	movs	r4, r0
    if(!_lv_area_intersect(&roller_clip_area, draw_ctx->clip_area, &roller->coords)) return;
 8019564:	0039      	movs	r1, r7
 8019566:	3210      	adds	r2, #16
 8019568:	a806      	add	r0, sp, #24
 801956a:	f7fa fe79 	bl	8014260 <_lv_area_intersect>
 801956e:	2800      	cmp	r0, #0
 8019570:	d0cd      	beq.n	801950e <lv_roller_label_event+0x22>
    draw_ctx->clip_area = &roller_clip_area;
 8019572:	ab06      	add	r3, sp, #24
    get_sel_area(roller, &sel_area);
 8019574:	0028      	movs	r0, r5
    draw_ctx->clip_area = &roller_clip_area;
 8019576:	60a3      	str	r3, [r4, #8]
    get_sel_area(roller, &sel_area);
 8019578:	a908      	add	r1, sp, #32
 801957a:	f7ff fe37 	bl	80191ec <get_sel_area>
    clip2.x1 = label_obj->coords.x1;
 801957e:	8a73      	ldrh	r3, [r6, #18]
 8019580:	8a32      	ldrh	r2, [r6, #16]
 8019582:	041b      	lsls	r3, r3, #16
 8019584:	431a      	orrs	r2, r3
 8019586:	466b      	mov	r3, sp
 8019588:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801958a:	8ab3      	ldrh	r3, [r6, #20]
 801958c:	0409      	lsls	r1, r1, #16
 801958e:	9204      	str	r2, [sp, #16]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8019590:	aa04      	add	r2, sp, #16
    clip2.x1 = label_obj->coords.x1;
 8019592:	430b      	orrs	r3, r1
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8019594:	0010      	movs	r0, r2
 8019596:	68a1      	ldr	r1, [r4, #8]
    clip2.x1 = label_obj->coords.x1;
 8019598:	9305      	str	r3, [sp, #20]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 801959a:	f7fa fe61 	bl	8014260 <_lv_area_intersect>
        const lv_area_t * clip_area_ori2 = draw_ctx->clip_area;
 801959e:	68a5      	ldr	r5, [r4, #8]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80195a0:	2800      	cmp	r0, #0
 80195a2:	d15c      	bne.n	801965e <lv_roller_label_event+0x172>
    clip2.x1 = label_obj->coords.x1;
 80195a4:	466b      	mov	r3, sp
 80195a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80195a8:	8a32      	ldrh	r2, [r6, #16]
 80195aa:	8af1      	ldrh	r1, [r6, #22]
 80195ac:	041b      	lsls	r3, r3, #16
 80195ae:	431a      	orrs	r2, r3
 80195b0:	8ab3      	ldrh	r3, [r6, #20]
 80195b2:	0409      	lsls	r1, r1, #16
 80195b4:	9204      	str	r2, [sp, #16]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80195b6:	aa04      	add	r2, sp, #16
    clip2.x1 = label_obj->coords.x1;
 80195b8:	430b      	orrs	r3, r1
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80195ba:	0010      	movs	r0, r2
 80195bc:	0029      	movs	r1, r5
    clip2.x1 = label_obj->coords.x1;
 80195be:	9305      	str	r3, [sp, #20]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80195c0:	f7fa fe4e 	bl	8014260 <_lv_area_intersect>
 80195c4:	2800      	cmp	r0, #0
 80195c6:	d138      	bne.n	801963a <lv_roller_label_event+0x14e>
    draw_ctx->clip_area = clip_area_ori;
 80195c8:	60a7      	str	r7, [r4, #8]
 80195ca:	e7a0      	b.n	801950e <lv_roller_label_event+0x22>
        lv_coord_t * s = lv_event_get_param(e);
 80195cc:	0020      	movs	r0, r4
 80195ce:	f7eb fb6f 	bl	8004cb0 <lv_event_get_param>
 80195d2:	0005      	movs	r5, r0
        lv_obj_t * obj = lv_obj_get_parent(label);
 80195d4:	0030      	movs	r0, r6
 80195d6:	f7f4 fc21 	bl	800de1c <lv_obj_get_parent>
    return lv_obj_get_child(obj, 0);
 80195da:	2100      	movs	r1, #0
        lv_obj_t * obj = lv_obj_get_parent(label);
 80195dc:	0004      	movs	r4, r0
    return lv_obj_get_child(obj, 0);
 80195de:	f7f4 fc23 	bl	800de28 <lv_obj_get_child>
 80195e2:	1e07      	subs	r7, r0, #0
    if(label == NULL) return 0;
 80195e4:	d039      	beq.n	801965a <lv_roller_label_event+0x16e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80195e6:	2180      	movs	r1, #128	; 0x80
 80195e8:	2257      	movs	r2, #87	; 0x57
 80195ea:	0020      	movs	r0, r4
 80195ec:	02c9      	lsls	r1, r1, #11
 80195ee:	f7f2 ffe9 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80195f2:	2180      	movs	r1, #128	; 0x80
 80195f4:	2258      	movs	r2, #88	; 0x58
 80195f6:	02c9      	lsls	r1, r1, #11
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80195f8:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80195fa:	0020      	movs	r0, r4
 80195fc:	f7f2 ffe2 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8019600:	b204      	sxth	r4, r0
    const char * txt = lv_label_get_text(label);
 8019602:	0038      	movs	r0, r7
 8019604:	f7ff fde2 	bl	80191cc <lv_label_get_text>
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 8019608:	2300      	movs	r3, #0
 801960a:	4a1e      	ldr	r2, [pc, #120]	; (8019684 <lv_roller_label_event+0x198>)
 801960c:	af0a      	add	r7, sp, #40	; 0x28
    const char * txt = lv_label_get_text(label);
 801960e:	0001      	movs	r1, r0
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 8019610:	9302      	str	r3, [sp, #8]
 8019612:	9201      	str	r2, [sp, #4]
 8019614:	9300      	str	r3, [sp, #0]
 8019616:	4642      	mov	r2, r8
 8019618:	0023      	movs	r3, r4
 801961a:	0038      	movs	r0, r7
 801961c:	f7fd fa32 	bl	8016a84 <lv_txt_get_size>
        *s = LV_MAX(*s, sel_w - label_w);
 8019620:	2300      	movs	r3, #0
 8019622:	5efc      	ldrsh	r4, [r7, r3]
        lv_coord_t label_w = lv_obj_get_width(label);
 8019624:	0030      	movs	r0, r6
 8019626:	f7ef fb57 	bl	8008cd8 <lv_obj_get_width>
        *s = LV_MAX(*s, sel_w - label_w);
 801962a:	2300      	movs	r3, #0
 801962c:	5eea      	ldrsh	r2, [r5, r3]
 801962e:	1a20      	subs	r0, r4, r0
 8019630:	4290      	cmp	r0, r2
 8019632:	da00      	bge.n	8019636 <lv_roller_label_event+0x14a>
 8019634:	0010      	movs	r0, r2
 8019636:	8028      	strh	r0, [r5, #0]
 8019638:	e769      	b.n	801950e <lv_roller_label_event+0x22>
        draw_ctx->clip_area = &clip2;
 801963a:	ab04      	add	r3, sp, #16
 801963c:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 801963e:	0030      	movs	r0, r6
 8019640:	f7ff fdc4 	bl	80191cc <lv_label_get_text>
 8019644:	2100      	movs	r1, #0
 8019646:	0032      	movs	r2, r6
 8019648:	0003      	movs	r3, r0
 801964a:	9100      	str	r1, [sp, #0]
 801964c:	0020      	movs	r0, r4
 801964e:	3210      	adds	r2, #16
 8019650:	a90a      	add	r1, sp, #40	; 0x28
 8019652:	f7f6 f807 	bl	800f664 <lv_draw_label>
    draw_ctx->clip_area = clip_area_ori;
 8019656:	60a7      	str	r7, [r4, #8]
 8019658:	e759      	b.n	801950e <lv_roller_label_event+0x22>
 801965a:	2400      	movs	r4, #0
 801965c:	e7e2      	b.n	8019624 <lv_roller_label_event+0x138>
        draw_ctx->clip_area = &clip2;
 801965e:	ab04      	add	r3, sp, #16
 8019660:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 8019662:	0030      	movs	r0, r6
 8019664:	f7ff fdb2 	bl	80191cc <lv_label_get_text>
 8019668:	2200      	movs	r2, #0
 801966a:	9200      	str	r2, [sp, #0]
 801966c:	0032      	movs	r2, r6
 801966e:	0003      	movs	r3, r0
 8019670:	3210      	adds	r2, #16
 8019672:	0020      	movs	r0, r4
 8019674:	a90a      	add	r1, sp, #40	; 0x28
 8019676:	f7f5 fff5 	bl	800f664 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori2;
 801967a:	60a5      	str	r5, [r4, #8]
 801967c:	e792      	b.n	80195a4 <lv_roller_label_event+0xb8>
 801967e:	46c0      	nop			; (mov r8, r8)
 8019680:	0801bed0 	.word	0x0801bed0
 8019684:	00001fff 	.word	0x00001fff

08019688 <lv_roller_create>:
{
 8019688:	b510      	push	{r4, lr}
 801968a:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801968c:	4803      	ldr	r0, [pc, #12]	; (801969c <lv_roller_create+0x14>)
 801968e:	f7ee fcbf 	bl	8008010 <lv_obj_class_create_obj>
 8019692:	0004      	movs	r4, r0
    lv_obj_class_init_obj(obj);
 8019694:	f7ee fd34 	bl	8008100 <lv_obj_class_init_obj>
}
 8019698:	0020      	movs	r0, r4
 801969a:	bd10      	pop	{r4, pc}
 801969c:	0801beb8 	.word	0x0801beb8

080196a0 <lv_roller_set_options>:
{
 80196a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196a2:	464e      	mov	r6, r9
 80196a4:	4645      	mov	r5, r8
 80196a6:	46de      	mov	lr, fp
 80196a8:	4657      	mov	r7, sl
 80196aa:	b5e0      	push	{r5, r6, r7, lr}
 80196ac:	0004      	movs	r4, r0
 80196ae:	000d      	movs	r5, r1
 80196b0:	0016      	movs	r6, r2
 80196b2:	b083      	sub	sp, #12
    LV_ASSERT_NULL(options);
 80196b4:	2900      	cmp	r1, #0
 80196b6:	d02c      	beq.n	8019712 <lv_roller_set_options+0x72>
    return lv_obj_get_child(obj, 0);
 80196b8:	2100      	movs	r1, #0
 80196ba:	f7f4 fbb5 	bl	800de28 <lv_obj_get_child>
    roller->sel_opt_id_ori = 0;
 80196be:	2300      	movs	r3, #0
 80196c0:	84a3      	strh	r3, [r4, #36]	; 0x24
    roller->option_cnt = 0;
 80196c2:	6223      	str	r3, [r4, #32]
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80196c4:	782b      	ldrb	r3, [r5, #0]
    return lv_obj_get_child(obj, 0);
 80196c6:	4680      	mov	r8, r0
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d064      	beq.n	8019796 <lv_roller_set_options+0xf6>
 80196cc:	2000      	movs	r0, #0
 80196ce:	1c69      	adds	r1, r5, #1
        if(options[cnt] == '\n') roller->option_cnt++;
 80196d0:	2b0a      	cmp	r3, #10
 80196d2:	d01f      	beq.n	8019714 <lv_roller_set_options+0x74>
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80196d4:	3101      	adds	r1, #1
 80196d6:	1e4b      	subs	r3, r1, #1
 80196d8:	781b      	ldrb	r3, [r3, #0]
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d1f8      	bne.n	80196d0 <lv_roller_set_options+0x30>
    roller->option_cnt++; /*Last option has no `\n`*/
 80196de:	3001      	adds	r0, #1
 80196e0:	b280      	uxth	r0, r0
        roller->mode = LV_ROLLER_MODE_NORMAL;
 80196e2:	2226      	movs	r2, #38	; 0x26
    roller->option_cnt++; /*Last option has no `\n`*/
 80196e4:	8420      	strh	r0, [r4, #32]
        roller->mode = LV_ROLLER_MODE_NORMAL;
 80196e6:	5ca3      	ldrb	r3, [r4, r2]
    if(mode == LV_ROLLER_MODE_NORMAL) {
 80196e8:	2e00      	cmp	r6, #0
 80196ea:	d11c      	bne.n	8019726 <lv_roller_set_options+0x86>
        roller->mode = LV_ROLLER_MODE_NORMAL;
 80196ec:	2101      	movs	r1, #1
 80196ee:	438b      	bics	r3, r1
 80196f0:	54a3      	strb	r3, [r4, r2]
        lv_label_set_text(label, options);
 80196f2:	0029      	movs	r1, r5
 80196f4:	4640      	mov	r0, r8
 80196f6:	f7ff fcc7 	bl	8019088 <lv_label_set_text>
    roller->sel_opt_id_ori = roller->sel_opt_id;
 80196fa:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    lv_obj_refresh_ext_draw_size(label);
 80196fc:	4640      	mov	r0, r8
    roller->sel_opt_id_ori = roller->sel_opt_id;
 80196fe:	84a3      	strh	r3, [r4, #36]	; 0x24
    lv_obj_refresh_ext_draw_size(label);
 8019700:	f7ee ff9e 	bl	8008640 <lv_obj_refresh_ext_draw_size>
}
 8019704:	b003      	add	sp, #12
 8019706:	bcf0      	pop	{r4, r5, r6, r7}
 8019708:	46bb      	mov	fp, r7
 801970a:	46b2      	mov	sl, r6
 801970c:	46a9      	mov	r9, r5
 801970e:	46a0      	mov	r8, r4
 8019710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(options);
 8019712:	e7fe      	b.n	8019712 <lv_roller_set_options+0x72>
        if(options[cnt] == '\n') roller->option_cnt++;
 8019714:	3001      	adds	r0, #1
 8019716:	b280      	uxth	r0, r0
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 8019718:	3101      	adds	r1, #1
        if(options[cnt] == '\n') roller->option_cnt++;
 801971a:	8420      	strh	r0, [r4, #32]
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 801971c:	1e4b      	subs	r3, r1, #1
 801971e:	781b      	ldrb	r3, [r3, #0]
 8019720:	2b00      	cmp	r3, #0
 8019722:	d1d5      	bne.n	80196d0 <lv_roller_set_options+0x30>
 8019724:	e7db      	b.n	80196de <lv_roller_set_options+0x3e>
        roller->mode = LV_ROLLER_MODE_INFINITE;
 8019726:	2101      	movs	r1, #1
 8019728:	430b      	orrs	r3, r1
 801972a:	54a3      	strb	r3, [r4, r2]
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 801972c:	0028      	movs	r0, r5
 801972e:	f7e6 fcf3 	bl	8000118 <strlen>
 8019732:	2301      	movs	r3, #1
 8019734:	4681      	mov	r9, r0
 8019736:	444b      	add	r3, r9
 8019738:	469b      	mov	fp, r3
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 801973a:	005b      	lsls	r3, r3, #1
 801973c:	445b      	add	r3, fp
 801973e:	0018      	movs	r0, r3
 8019740:	9301      	str	r3, [sp, #4]
 8019742:	f7fb fc1b 	bl	8014f7c <lv_mem_buf_get>
 8019746:	2603      	movs	r6, #3
 8019748:	4682      	mov	sl, r0
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801974a:	0007      	movs	r7, r0
            strcpy(&opt_extra[opt_len * i], options);
 801974c:	0038      	movs	r0, r7
 801974e:	0029      	movs	r1, r5
 8019750:	f001 feea 	bl	801b528 <strcpy>
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 8019754:	464b      	mov	r3, r9
 8019756:	220a      	movs	r2, #10
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 8019758:	3e01      	subs	r6, #1
 801975a:	b2f6      	uxtb	r6, r6
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 801975c:	54fa      	strb	r2, [r7, r3]
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801975e:	445f      	add	r7, fp
 8019760:	2e00      	cmp	r6, #0
 8019762:	d1f3      	bne.n	801974c <lv_roller_set_options+0xac>
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 8019764:	9b01      	ldr	r3, [sp, #4]
        lv_label_set_text(label, opt_extra);
 8019766:	4651      	mov	r1, sl
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 8019768:	4453      	add	r3, sl
 801976a:	3b01      	subs	r3, #1
 801976c:	701e      	strb	r6, [r3, #0]
        lv_label_set_text(label, opt_extra);
 801976e:	4640      	mov	r0, r8
 8019770:	f7ff fc8a 	bl	8019088 <lv_label_set_text>
        lv_mem_buf_release(opt_extra);
 8019774:	4650      	mov	r0, sl
 8019776:	f7fb fca5 	bl	80150c4 <lv_mem_buf_release>
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 801977a:	8c23      	ldrh	r3, [r4, #32]
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 801977c:	005a      	lsls	r2, r3, #1
 801977e:	189a      	adds	r2, r3, r2
 8019780:	8422      	strh	r2, [r4, #32]
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8019782:	2226      	movs	r2, #38	; 0x26
 8019784:	5ca2      	ldrb	r2, [r4, r2]
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 8019786:	8463      	strh	r3, [r4, #34]	; 0x22
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8019788:	07d2      	lsls	r2, r2, #31
 801978a:	d5b7      	bpl.n	80196fc <lv_roller_set_options+0x5c>
 801978c:	0020      	movs	r0, r4
 801978e:	f7ff fd69 	bl	8019264 <inf_normalize.part.0>
    roller->sel_opt_id_ori = roller->sel_opt_id;
 8019792:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8019794:	e7b2      	b.n	80196fc <lv_roller_set_options+0x5c>
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 8019796:	2001      	movs	r0, #1
 8019798:	e7a3      	b.n	80196e2 <lv_roller_set_options+0x42>
 801979a:	46c0      	nop			; (mov r8, r8)

0801979c <lv_roller_set_selected>:
{
 801979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801979e:	4647      	mov	r7, r8
 80197a0:	46ce      	mov	lr, r9
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 80197a2:	2326      	movs	r3, #38	; 0x26
{
 80197a4:	b580      	push	{r7, lr}
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 80197a6:	5cc3      	ldrb	r3, [r0, r3]
{
 80197a8:	0004      	movs	r4, r0
 80197aa:	000d      	movs	r5, r1
 80197ac:	0016      	movs	r6, r2
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 80197ae:	8c07      	ldrh	r7, [r0, #32]
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 80197b0:	07db      	lsls	r3, r3, #31
 80197b2:	d509      	bpl.n	80197c8 <lv_roller_set_selected+0x2c>
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 80197b4:	2103      	movs	r1, #3
 80197b6:	0038      	movs	r0, r7
 80197b8:	f7e6 fcb6 	bl	8000128 <__udivsi3>
 80197bc:	b283      	uxth	r3, r0
 80197be:	4699      	mov	r9, r3
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 80197c0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80197c2:	4698      	mov	r8, r3
        if(sel_opt < real_option_cnt) {
 80197c4:	45a9      	cmp	r9, r5
 80197c6:	d80d      	bhi.n	80197e4 <lv_roller_set_selected+0x48>
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 80197c8:	42bd      	cmp	r5, r7
 80197ca:	d301      	bcc.n	80197d0 <lv_roller_set_selected+0x34>
 80197cc:	3f01      	subs	r7, #1
 80197ce:	b2bd      	uxth	r5, r7
    refr_position(obj, anim);
 80197d0:	0031      	movs	r1, r6
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 80197d2:	8465      	strh	r5, [r4, #34]	; 0x22
    roller->sel_opt_id_ori = roller->sel_opt_id;
 80197d4:	84a5      	strh	r5, [r4, #36]	; 0x24
    refr_position(obj, anim);
 80197d6:	0020      	movs	r0, r4
 80197d8:	f7ff fd88 	bl	80192ec <refr_position>
}
 80197dc:	bcc0      	pop	{r6, r7}
 80197de:	46b9      	mov	r9, r7
 80197e0:	46b0      	mov	r8, r6
 80197e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 80197e4:	4649      	mov	r1, r9
 80197e6:	0018      	movs	r0, r3
 80197e8:	f7e6 fc9e 	bl	8000128 <__udivsi3>
            uint16_t act_opt = roller->sel_opt_id - current_page * real_option_cnt;
 80197ec:	464b      	mov	r3, r9
 80197ee:	4358      	muls	r0, r3
 80197f0:	4643      	mov	r3, r8
 80197f2:	b282      	uxth	r2, r0
 80197f4:	1a9b      	subs	r3, r3, r2
 80197f6:	b298      	uxth	r0, r3
            if(LV_ABS((int16_t)act_opt - sel_opt) > real_option_cnt / 2) {
 80197f8:	b21b      	sxth	r3, r3
 80197fa:	1b5b      	subs	r3, r3, r5
 80197fc:	17d9      	asrs	r1, r3, #31
 80197fe:	185b      	adds	r3, r3, r1
 8019800:	404b      	eors	r3, r1
 8019802:	4649      	mov	r1, r9
 8019804:	0849      	lsrs	r1, r1, #1
 8019806:	428b      	cmp	r3, r1
 8019808:	d903      	bls.n	8019812 <lv_roller_set_selected+0x76>
                if(act_opt > sel_opt) sel_opt_signed += real_option_cnt;
 801980a:	4285      	cmp	r5, r0
 801980c:	d204      	bcs.n	8019818 <lv_roller_set_selected+0x7c>
            sel_opt = sel_opt_signed + real_option_cnt * current_page;
 801980e:	444d      	add	r5, r9
 8019810:	b2ad      	uxth	r5, r5
 8019812:	1955      	adds	r5, r2, r5
 8019814:	b2ad      	uxth	r5, r5
 8019816:	e7d7      	b.n	80197c8 <lv_roller_set_selected+0x2c>
 8019818:	464b      	mov	r3, r9
 801981a:	1aed      	subs	r5, r5, r3
 801981c:	b2ad      	uxth	r5, r5
 801981e:	e7f8      	b.n	8019812 <lv_roller_set_selected+0x76>

08019820 <lv_roller_event>:
{
 8019820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019822:	4645      	mov	r5, r8
 8019824:	46de      	mov	lr, fp
 8019826:	4657      	mov	r7, sl
 8019828:	464e      	mov	r6, r9
 801982a:	b5e0      	push	{r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801982c:	48c9      	ldr	r0, [pc, #804]	; (8019b54 <lv_roller_event+0x334>)
{
 801982e:	b09f      	sub	sp, #124	; 0x7c
 8019830:	000d      	movs	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8019832:	f7eb fa1d 	bl	8004c70 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8019836:	2801      	cmp	r0, #1
 8019838:	d006      	beq.n	8019848 <lv_roller_event+0x28>
}
 801983a:	b01f      	add	sp, #124	; 0x7c
 801983c:	bcf0      	pop	{r4, r5, r6, r7}
 801983e:	46bb      	mov	fp, r7
 8019840:	46b2      	mov	sl, r6
 8019842:	46a9      	mov	r9, r5
 8019844:	46a0      	mov	r8, r4
 8019846:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8019848:	0028      	movs	r0, r5
 801984a:	f7eb fa2d 	bl	8004ca8 <lv_event_get_code>
 801984e:	0004      	movs	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8019850:	0028      	movs	r0, r5
 8019852:	f7eb fa25 	bl	8004ca0 <lv_event_get_target>
 8019856:	0006      	movs	r6, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 8019858:	2c2c      	cmp	r4, #44	; 0x2c
 801985a:	d100      	bne.n	801985e <lv_roller_event+0x3e>
 801985c:	e0d6      	b.n	8019a0c <lv_roller_event+0x1ec>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 801985e:	2c2a      	cmp	r4, #42	; 0x2a
 8019860:	d100      	bne.n	8019864 <lv_roller_event+0x44>
 8019862:	e0ff      	b.n	8019a64 <lv_roller_event+0x244>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8019864:	2c29      	cmp	r4, #41	; 0x29
 8019866:	d100      	bne.n	801986a <lv_roller_event+0x4a>
 8019868:	e134      	b.n	8019ad4 <lv_roller_event+0x2b4>
    else if(code == LV_EVENT_PRESSED) {
 801986a:	2c01      	cmp	r4, #1
 801986c:	d100      	bne.n	8019870 <lv_roller_event+0x50>
 801986e:	e146      	b.n	8019afe <lv_roller_event+0x2de>
    else if(code == LV_EVENT_PRESSING) {
 8019870:	2c02      	cmp	r4, #2
 8019872:	d100      	bne.n	8019876 <lv_roller_event+0x56>
 8019874:	e14f      	b.n	8019b16 <lv_roller_event+0x2f6>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 8019876:	2c08      	cmp	r4, #8
 8019878:	d100      	bne.n	801987c <lv_roller_event+0x5c>
 801987a:	e104      	b.n	8019a86 <lv_roller_event+0x266>
 801987c:	2c03      	cmp	r4, #3
 801987e:	d100      	bne.n	8019882 <lv_roller_event+0x62>
 8019880:	e101      	b.n	8019a86 <lv_roller_event+0x266>
    else if(code == LV_EVENT_FOCUSED) {
 8019882:	2c0e      	cmp	r4, #14
 8019884:	d100      	bne.n	8019888 <lv_roller_event+0x68>
 8019886:	e12c      	b.n	8019ae2 <lv_roller_event+0x2c2>
    else if(code == LV_EVENT_DEFOCUSED) {
 8019888:	2c0f      	cmp	r4, #15
 801988a:	d100      	bne.n	801988e <lv_roller_event+0x6e>
 801988c:	e1ad      	b.n	8019bea <lv_roller_event+0x3ca>
    else if(code == LV_EVENT_KEY) {
 801988e:	2c0d      	cmp	r4, #13
 8019890:	d100      	bne.n	8019894 <lv_roller_event+0x74>
 8019892:	e21d      	b.n	8019cd0 <lv_roller_event+0x4b0>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8019894:	2c13      	cmp	r4, #19
 8019896:	d100      	bne.n	801989a <lv_roller_event+0x7a>
 8019898:	e234      	b.n	8019d04 <lv_roller_event+0x4e4>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 801989a:	2c15      	cmp	r4, #21
 801989c:	d001      	beq.n	80198a2 <lv_roller_event+0x82>
 801989e:	2c18      	cmp	r4, #24
 80198a0:	d1cb      	bne.n	801983a <lv_roller_event+0x1a>
    lv_event_code_t code = lv_event_get_code(e);
 80198a2:	0028      	movs	r0, r5
 80198a4:	f7eb fa00 	bl	8004ca8 <lv_event_get_code>
 80198a8:	0006      	movs	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80198aa:	0028      	movs	r0, r5
 80198ac:	f7eb f9f8 	bl	8004ca0 <lv_event_get_target>
 80198b0:	0004      	movs	r4, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 80198b2:	2e15      	cmp	r6, #21
 80198b4:	d100      	bne.n	80198b8 <lv_roller_event+0x98>
 80198b6:	e249      	b.n	8019d4c <lv_roller_event+0x52c>
    else if(code == LV_EVENT_DRAW_POST) {
 80198b8:	2e18      	cmp	r6, #24
 80198ba:	d1be      	bne.n	801983a <lv_roller_event+0x1a>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80198bc:	0028      	movs	r0, r5
 80198be:	f7eb fa55 	bl	8004d6c <lv_event_get_draw_ctx>
        lv_draw_label_dsc_init(&label_dsc);
 80198c2:	ad10      	add	r5, sp, #64	; 0x40
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80198c4:	4680      	mov	r8, r0
        lv_draw_label_dsc_init(&label_dsc);
 80198c6:	0028      	movs	r0, r5
 80198c8:	f7f5 feb4 	bl	800f634 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_SELECTED, &label_dsc);
 80198cc:	2180      	movs	r1, #128	; 0x80
 80198ce:	002a      	movs	r2, r5
 80198d0:	0020      	movs	r0, r4
 80198d2:	02c9      	lsls	r1, r1, #11
 80198d4:	f7ee fd98 	bl	8008408 <lv_obj_init_draw_label_dsc>
        get_sel_area(obj, &sel_area);
 80198d8:	0020      	movs	r0, r4
 80198da:	a90a      	add	r1, sp, #40	; 0x28
 80198dc:	f7ff fc86 	bl	80191ec <get_sel_area>
        area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &sel_area);
 80198e0:	ab0c      	add	r3, sp, #48	; 0x30
 80198e2:	469a      	mov	sl, r3
 80198e4:	4643      	mov	r3, r8
 80198e6:	4650      	mov	r0, sl
 80198e8:	6899      	ldr	r1, [r3, #8]
 80198ea:	aa0a      	add	r2, sp, #40	; 0x28
 80198ec:	f7fa fcb8 	bl	8014260 <_lv_area_intersect>
        if(area_ok) {
 80198f0:	2800      	cmp	r0, #0
 80198f2:	d0a2      	beq.n	801983a <lv_roller_event+0x1a>
    return lv_obj_get_child(obj, 0);
 80198f4:	2100      	movs	r1, #0
 80198f6:	0020      	movs	r0, r4
 80198f8:	f7f4 fa96 	bl	800de28 <lv_obj_get_child>
 80198fc:	4681      	mov	r9, r0
            lv_txt_get_size(&res_p, lv_label_get_text(label), label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 80198fe:	f7ff fc65 	bl	80191cc <lv_label_get_text>
 8019902:	9005      	str	r0, [sp, #20]
 8019904:	2214      	movs	r2, #20
 8019906:	5eab      	ldrsh	r3, [r5, r2]
 8019908:	0020      	movs	r0, r4
 801990a:	9306      	str	r3, [sp, #24]
 801990c:	2712      	movs	r7, #18
 801990e:	5fea      	ldrsh	r2, [r5, r7]
 8019910:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8019912:	9207      	str	r2, [sp, #28]
 8019914:	f7ef f9e0 	bl	8008cd8 <lv_obj_get_width>
 8019918:	2102      	movs	r1, #2
 801991a:	9a07      	ldr	r2, [sp, #28]
 801991c:	af09      	add	r7, sp, #36	; 0x24
 801991e:	9b06      	ldr	r3, [sp, #24]
 8019920:	468b      	mov	fp, r1
 8019922:	9102      	str	r1, [sp, #8]
 8019924:	9001      	str	r0, [sp, #4]
 8019926:	9905      	ldr	r1, [sp, #20]
 8019928:	0038      	movs	r0, r7
 801992a:	9200      	str	r2, [sp, #0]
 801992c:	0032      	movs	r2, r6
 801992e:	f7fd f8a9 	bl	8016a84 <lv_txt_get_size>
            lv_coord_t roller_h = lv_obj_get_height(obj);
 8019932:	0020      	movs	r0, r4
 8019934:	f7ef f9d8 	bl	8008ce8 <lv_obj_get_height>
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 8019938:	0fc3      	lsrs	r3, r0, #31
 801993a:	181b      	adds	r3, r3, r0
 801993c:	105b      	asrs	r3, r3, #1
 801993e:	b21a      	sxth	r2, r3
 8019940:	464b      	mov	r3, r9
 8019942:	4694      	mov	ip, r2
 8019944:	2612      	movs	r6, #18
 8019946:	5f9e      	ldrsh	r6, [r3, r6]
                                                       obj->coords.y1); /*label offset from the middle line of the roller*/
 8019948:	2112      	movs	r1, #18
 801994a:	5e63      	ldrsh	r3, [r4, r1]
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 801994c:	4648      	mov	r0, r9
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 801994e:	4463      	add	r3, ip
 8019950:	1af6      	subs	r6, r6, r3
 8019952:	9205      	str	r2, [sp, #20]
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 8019954:	f7ef f9c8 	bl	8008ce8 <lv_obj_get_height>
 8019958:	03b6      	lsls	r6, r6, #14
 801995a:	0001      	movs	r1, r0
 801995c:	0030      	movs	r0, r6
 801995e:	f7e6 fc6d 	bl	800023c <__divsi3>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8019962:	2100      	movs	r1, #0
 8019964:	0006      	movs	r6, r0
 8019966:	2257      	movs	r2, #87	; 0x57
 8019968:	0020      	movs	r0, r4
 801996a:	f7f2 fe2b 	bl	800c5c4 <lv_obj_get_style_prop>
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 801996e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019970:	2108      	movs	r1, #8
 8019972:	5e42      	ldrsh	r2, [r0, r1]
 8019974:	2108      	movs	r1, #8
 8019976:	5e5b      	ldrsh	r3, [r3, r1]
 8019978:	1a9b      	subs	r3, r3, r2
 801997a:	0fda      	lsrs	r2, r3, #31
 801997c:	18d2      	adds	r2, r2, r3
            res_p.y -= corr;
 801997e:	887b      	ldrh	r3, [r7, #2]
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 8019980:	1052      	asrs	r2, r2, #1
            res_p.y -= corr;
 8019982:	1a9b      	subs	r3, r3, r2
 8019984:	b21b      	sxth	r3, r3
 8019986:	807b      	strh	r3, [r7, #2]
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 8019988:	2012      	movs	r0, #18
 801998a:	5e21      	ldrsh	r1, [r4, r0]
 801998c:	9805      	ldr	r0, [sp, #20]
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 801998e:	4373      	muls	r3, r6
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 8019990:	4684      	mov	ip, r0
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 8019992:	139b      	asrs	r3, r3, #14
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 8019994:	4461      	add	r1, ip
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 8019996:	185b      	adds	r3, r3, r1
            label_sel_y -= corr;
 8019998:	1a99      	subs	r1, r3, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801999a:	0020      	movs	r0, r4
 801999c:	2232      	movs	r2, #50	; 0x32
 801999e:	9105      	str	r1, [sp, #20]
 80199a0:	2100      	movs	r1, #0
 80199a2:	f7f2 fe0f 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80199a6:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80199a8:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80199aa:	2100      	movs	r1, #0
 80199ac:	0020      	movs	r0, r4
 80199ae:	f7f2 fe09 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80199b2:	2213      	movs	r2, #19
 80199b4:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80199b6:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80199b8:	0020      	movs	r0, r4
 80199ba:	f7f2 fe03 	bl	800c5c4 <lv_obj_get_style_prop>
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 80199be:	9a06      	ldr	r2, [sp, #24]
 80199c0:	8a21      	ldrh	r1, [r4, #16]
 80199c2:	b2b3      	uxth	r3, r6
 80199c4:	189a      	adds	r2, r3, r2
 80199c6:	1852      	adds	r2, r2, r1
            label_sel_area.y1 = label_sel_y;
 80199c8:	9905      	ldr	r1, [sp, #20]
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 80199ca:	ae0e      	add	r6, sp, #56	; 0x38
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 80199cc:	468c      	mov	ip, r1
            label_sel_area.y1 = label_sel_y;
 80199ce:	8071      	strh	r1, [r6, #2]
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 80199d0:	8032      	strh	r2, [r6, #0]
            label_sel_area.x2 = obj->coords.x2 - pright - bwidth;
 80199d2:	8aa2      	ldrh	r2, [r4, #20]
 80199d4:	181b      	adds	r3, r3, r0
 80199d6:	1ad3      	subs	r3, r2, r3
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 80199d8:	465a      	mov	r2, fp
            label_sel_area.x2 = obj->coords.x2 - pright - bwidth;
 80199da:	80b3      	strh	r3, [r6, #4]
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 80199dc:	887b      	ldrh	r3, [r7, #2]
            lv_draw_label(draw_ctx, &label_dsc, &label_sel_area, lv_label_get_text(label), NULL);
 80199de:	4648      	mov	r0, r9
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 80199e0:	4463      	add	r3, ip
 80199e2:	80f3      	strh	r3, [r6, #6]
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 80199e4:	7f6b      	ldrb	r3, [r5, #29]
 80199e6:	4313      	orrs	r3, r2
 80199e8:	776b      	strb	r3, [r5, #29]
            draw_ctx->clip_area = &mask_sel;
 80199ea:	4652      	mov	r2, sl
            const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80199ec:	4643      	mov	r3, r8
 80199ee:	689c      	ldr	r4, [r3, #8]
            draw_ctx->clip_area = &mask_sel;
 80199f0:	609a      	str	r2, [r3, #8]
            lv_draw_label(draw_ctx, &label_dsc, &label_sel_area, lv_label_get_text(label), NULL);
 80199f2:	f7ff fbeb 	bl	80191cc <lv_label_get_text>
 80199f6:	2200      	movs	r2, #0
 80199f8:	0003      	movs	r3, r0
 80199fa:	9200      	str	r2, [sp, #0]
 80199fc:	0029      	movs	r1, r5
 80199fe:	0032      	movs	r2, r6
 8019a00:	4640      	mov	r0, r8
 8019a02:	f7f5 fe2f 	bl	800f664 <lv_draw_label>
            draw_ctx->clip_area = clip_area_ori;
 8019a06:	4643      	mov	r3, r8
 8019a08:	609c      	str	r4, [r3, #8]
 8019a0a:	e716      	b.n	801983a <lv_roller_event+0x1a>
        lv_point_t * p = lv_event_get_param(e);
 8019a0c:	0028      	movs	r0, r5
 8019a0e:	f7eb f94f 	bl	8004cb0 <lv_event_get_param>
    return lv_obj_get_child(obj, 0);
 8019a12:	2100      	movs	r1, #0
        lv_point_t * p = lv_event_get_param(e);
 8019a14:	0005      	movs	r5, r0
    return lv_obj_get_child(obj, 0);
 8019a16:	0030      	movs	r0, r6
 8019a18:	f7f4 fa06 	bl	800de28 <lv_obj_get_child>
 8019a1c:	1e04      	subs	r4, r0, #0
    if(label == NULL) return 0;
 8019a1e:	d05d      	beq.n	8019adc <lv_roller_event+0x2bc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8019a20:	2180      	movs	r1, #128	; 0x80
 8019a22:	2257      	movs	r2, #87	; 0x57
 8019a24:	0030      	movs	r0, r6
 8019a26:	02c9      	lsls	r1, r1, #11
 8019a28:	f7f2 fdcc 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8019a2c:	2180      	movs	r1, #128	; 0x80
 8019a2e:	2258      	movs	r2, #88	; 0x58
 8019a30:	02c9      	lsls	r1, r1, #11
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8019a32:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8019a34:	0030      	movs	r0, r6
 8019a36:	f7f2 fdc5 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8019a3a:	b203      	sxth	r3, r0
    const char * txt = lv_label_get_text(label);
 8019a3c:	0020      	movs	r0, r4
 8019a3e:	4698      	mov	r8, r3
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 8019a40:	2600      	movs	r6, #0
    const char * txt = lv_label_get_text(label);
 8019a42:	f7ff fbc3 	bl	80191cc <lv_label_get_text>
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 8019a46:	4b44      	ldr	r3, [pc, #272]	; (8019b58 <lv_roller_event+0x338>)
 8019a48:	ac10      	add	r4, sp, #64	; 0x40
    const char * txt = lv_label_get_text(label);
 8019a4a:	0001      	movs	r1, r0
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 8019a4c:	003a      	movs	r2, r7
 8019a4e:	9301      	str	r3, [sp, #4]
 8019a50:	0020      	movs	r0, r4
 8019a52:	4643      	mov	r3, r8
 8019a54:	9602      	str	r6, [sp, #8]
 8019a56:	9600      	str	r6, [sp, #0]
 8019a58:	f7fd f814 	bl	8016a84 <lv_txt_get_size>
    return size.x;
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	5ea3      	ldrsh	r3, [r4, r2]
        p->x = get_selected_label_width(obj);
 8019a60:	802b      	strh	r3, [r5, #0]
 8019a62:	e6ea      	b.n	801983a <lv_roller_event+0x1a>
    return lv_obj_get_child(obj, 0);
 8019a64:	2100      	movs	r1, #0
 8019a66:	f7f4 f9df 	bl	800de28 <lv_obj_get_child>
        if(label) lv_event_send(label, LV_EVENT_STYLE_CHANGED, NULL);
 8019a6a:	2800      	cmp	r0, #0
 8019a6c:	d003      	beq.n	8019a76 <lv_roller_event+0x256>
 8019a6e:	2200      	movs	r2, #0
 8019a70:	212a      	movs	r1, #42	; 0x2a
 8019a72:	f7eb f8dd 	bl	8004c30 <lv_event_send>
        lv_obj_refresh_self_size(obj);
 8019a76:	0030      	movs	r0, r6
 8019a78:	f7ef f9d4 	bl	8008e24 <lv_obj_refresh_self_size>
        refr_position(obj, LV_ANIM_OFF);
 8019a7c:	2100      	movs	r1, #0
 8019a7e:	0030      	movs	r0, r6
 8019a80:	f7ff fc34 	bl	80192ec <refr_position>
 8019a84:	e6d9      	b.n	801983a <lv_roller_event+0x1a>
    return lv_obj_get_child(obj, 0);
 8019a86:	2100      	movs	r1, #0
 8019a88:	0030      	movs	r0, r6
 8019a8a:	f7f4 f9cd 	bl	800de28 <lv_obj_get_child>
 8019a8e:	1e04      	subs	r4, r0, #0
    if(label == NULL) return LV_RES_OK;
 8019a90:	d100      	bne.n	8019a94 <lv_roller_event+0x274>
 8019a92:	e6d2      	b.n	801983a <lv_roller_event+0x1a>
    lv_indev_t * indev = lv_indev_get_act();
 8019a94:	f7eb fdea 	bl	800566c <lv_indev_get_act>
 8019a98:	0005      	movs	r5, r0
    lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8019a9a:	f7eb fded 	bl	8005678 <lv_indev_get_type>
    if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 8019a9e:	2804      	cmp	r0, #4
 8019aa0:	d100      	bne.n	8019aa4 <lv_roller_event+0x284>
 8019aa2:	e135      	b.n	8019d10 <lv_roller_event+0x4f0>
 8019aa4:	2802      	cmp	r0, #2
 8019aa6:	d101      	bne.n	8019aac <lv_roller_event+0x28c>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 8019aa8:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 8019aaa:	84b3      	strh	r3, [r6, #36]	; 0x24
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8019aac:	0028      	movs	r0, r5
 8019aae:	f7eb fde3 	bl	8005678 <lv_indev_get_type>
 8019ab2:	2801      	cmp	r0, #1
 8019ab4:	d054      	beq.n	8019b60 <lv_roller_event+0x340>
 8019ab6:	0028      	movs	r0, r5
 8019ab8:	f7eb fdde 	bl	8005678 <lv_indev_get_type>
 8019abc:	2803      	cmp	r0, #3
 8019abe:	d04f      	beq.n	8019b60 <lv_roller_event+0x340>
 8019ac0:	ab10      	add	r3, sp, #64	; 0x40
 8019ac2:	4698      	mov	r8, r3
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 8019ac4:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8019ac6:	4642      	mov	r2, r8
 8019ac8:	211c      	movs	r1, #28
 8019aca:	0030      	movs	r0, r6
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 8019acc:	9310      	str	r3, [sp, #64]	; 0x40
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8019ace:	f7eb f8af 	bl	8004c30 <lv_event_send>
    return res;
 8019ad2:	e6b2      	b.n	801983a <lv_roller_event+0x1a>
        refr_position(obj, LV_ANIM_OFF);
 8019ad4:	2100      	movs	r1, #0
 8019ad6:	f7ff fc09 	bl	80192ec <refr_position>
 8019ada:	e6ae      	b.n	801983a <lv_roller_event+0x1a>
    if(label == NULL) return 0;
 8019adc:	2300      	movs	r3, #0
        p->x = get_selected_label_width(obj);
 8019ade:	802b      	strh	r3, [r5, #0]
 8019ae0:	e6ab      	b.n	801983a <lv_roller_event+0x1a>
        lv_group_t * g             = lv_obj_get_group(obj);
 8019ae2:	f7ee fa2d 	bl	8007f40 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 8019ae6:	f7eb fd45 	bl	8005574 <lv_group_get_editing>
 8019aea:	0004      	movs	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8019aec:	f7eb fdbe 	bl	800566c <lv_indev_get_act>
 8019af0:	f7eb fdc2 	bl	8005678 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8019af4:	2804      	cmp	r0, #4
 8019af6:	d075      	beq.n	8019be4 <lv_roller_event+0x3c4>
            roller->sel_opt_id_ori = roller->sel_opt_id; /*Save the current value. Used to revert this state if
 8019af8:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 8019afa:	84b3      	strh	r3, [r6, #36]	; 0x24
 8019afc:	e69d      	b.n	801983a <lv_roller_event+0x1a>
        roller->moved = 0;
 8019afe:	2226      	movs	r2, #38	; 0x26
 8019b00:	2102      	movs	r1, #2
 8019b02:	5c83      	ldrb	r3, [r0, r2]
 8019b04:	438b      	bics	r3, r1
 8019b06:	5483      	strb	r3, [r0, r2]
    return lv_obj_get_child(obj, 0);
 8019b08:	2100      	movs	r1, #0
 8019b0a:	f7f4 f98d 	bl	800de28 <lv_obj_get_child>
        lv_anim_del(get_label(obj), set_y_anim);
 8019b0e:	4913      	ldr	r1, [pc, #76]	; (8019b5c <lv_roller_event+0x33c>)
 8019b10:	f7fa f9c4 	bl	8013e9c <lv_anim_del>
 8019b14:	e691      	b.n	801983a <lv_roller_event+0x1a>
        lv_indev_t * indev = lv_indev_get_act();
 8019b16:	f7eb fda9 	bl	800566c <lv_indev_get_act>
        lv_indev_get_vect(indev, &p);
 8019b1a:	a910      	add	r1, sp, #64	; 0x40
 8019b1c:	f7eb fe64 	bl	80057e8 <lv_indev_get_vect>
        if(p.y) {
 8019b20:	ab04      	add	r3, sp, #16
 8019b22:	2232      	movs	r2, #50	; 0x32
 8019b24:	5e9b      	ldrsh	r3, [r3, r2]
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d100      	bne.n	8019b2c <lv_roller_event+0x30c>
 8019b2a:	e686      	b.n	801983a <lv_roller_event+0x1a>
    return lv_obj_get_child(obj, 0);
 8019b2c:	2100      	movs	r1, #0
 8019b2e:	0030      	movs	r0, r6
 8019b30:	f7f4 f97a 	bl	800de28 <lv_obj_get_child>
 8019b34:	0004      	movs	r4, r0
            lv_obj_set_y(label, lv_obj_get_y(label) + p.y);
 8019b36:	f7ef f87b 	bl	8008c30 <lv_obj_get_y>
 8019b3a:	ab04      	add	r3, sp, #16
 8019b3c:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 8019b3e:	1809      	adds	r1, r1, r0
 8019b40:	b209      	sxth	r1, r1
 8019b42:	0020      	movs	r0, r4
 8019b44:	f7ee ffb2 	bl	8008aac <lv_obj_set_y>
            roller->moved = 1;
 8019b48:	2226      	movs	r2, #38	; 0x26
 8019b4a:	2102      	movs	r1, #2
 8019b4c:	5cb3      	ldrb	r3, [r6, r2]
 8019b4e:	430b      	orrs	r3, r1
 8019b50:	54b3      	strb	r3, [r6, r2]
 8019b52:	e672      	b.n	801983a <lv_roller_event+0x1a>
 8019b54:	0801beb8 	.word	0x0801beb8
 8019b58:	00001fff 	.word	0x00001fff
 8019b5c:	080191e1 	.word	0x080191e1
        if(roller->moved == 0) {
 8019b60:	2202      	movs	r2, #2
 8019b62:	2326      	movs	r3, #38	; 0x26
 8019b64:	0011      	movs	r1, r2
 8019b66:	5cf3      	ldrb	r3, [r6, r3]
 8019b68:	4019      	ands	r1, r3
 8019b6a:	4688      	mov	r8, r1
 8019b6c:	421a      	tst	r2, r3
 8019b6e:	d147      	bne.n	8019c00 <lv_roller_event+0x3e0>
            lv_indev_get_point(indev, &p);
 8019b70:	af0e      	add	r7, sp, #56	; 0x38
 8019b72:	0039      	movs	r1, r7
 8019b74:	0028      	movs	r0, r5
 8019b76:	f7eb fe01 	bl	800577c <lv_indev_get_point>
            p.y -= label->coords.y1;
 8019b7a:	8a62      	ldrh	r2, [r4, #18]
 8019b7c:	887b      	ldrh	r3, [r7, #2]
            letter_i = lv_label_get_letter_on(label, &p);
 8019b7e:	0039      	movs	r1, r7
            p.y -= label->coords.y1;
 8019b80:	1a9b      	subs	r3, r3, r2
 8019b82:	807b      	strh	r3, [r7, #2]
            p.x -= label->coords.x1;
 8019b84:	8a22      	ldrh	r2, [r4, #16]
 8019b86:	883b      	ldrh	r3, [r7, #0]
            letter_i = lv_label_get_letter_on(label, &p);
 8019b88:	0020      	movs	r0, r4
            p.x -= label->coords.x1;
 8019b8a:	1a9b      	subs	r3, r3, r2
 8019b8c:	803b      	strh	r3, [r7, #0]
            letter_i = lv_label_get_letter_on(label, &p);
 8019b8e:	f7ff fb1f 	bl	80191d0 <lv_label_get_letter_on>
 8019b92:	0007      	movs	r7, r0
            const char * txt  = lv_label_get_text(label);
 8019b94:	0020      	movs	r0, r4
 8019b96:	f7ff fb19 	bl	80191cc <lv_label_get_text>
            uint32_t i        = 0;
 8019b9a:	4643      	mov	r3, r8
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8019b9c:	2400      	movs	r4, #0
            new_opt = 0;
 8019b9e:	2500      	movs	r5, #0
            uint32_t i        = 0;
 8019ba0:	9310      	str	r3, [sp, #64]	; 0x40
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8019ba2:	2f00      	cmp	r7, #0
 8019ba4:	d100      	bne.n	8019ba8 <lv_roller_event+0x388>
 8019ba6:	e0e8      	b.n	8019d7a <lv_roller_event+0x55a>
            uint32_t i_prev   = 0;
 8019ba8:	2300      	movs	r3, #0
 8019baa:	4699      	mov	r9, r3
 8019bac:	ab10      	add	r3, sp, #64	; 0x40
 8019bae:	4698      	mov	r8, r3
 8019bb0:	4b75      	ldr	r3, [pc, #468]	; (8019d88 <lv_roller_event+0x568>)
 8019bb2:	46b2      	mov	sl, r6
 8019bb4:	469b      	mov	fp, r3
 8019bb6:	003e      	movs	r6, r7
 8019bb8:	0005      	movs	r5, r0
 8019bba:	464f      	mov	r7, r9
 8019bbc:	e004      	b.n	8019bc8 <lv_roller_event+0x3a8>
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8019bbe:	3401      	adds	r4, #1
                i_prev = i;
 8019bc0:	9f10      	ldr	r7, [sp, #64]	; 0x40
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8019bc2:	42a6      	cmp	r6, r4
 8019bc4:	d100      	bne.n	8019bc8 <lv_roller_event+0x3a8>
 8019bc6:	e080      	b.n	8019cca <lv_roller_event+0x4aa>
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 8019bc8:	465b      	mov	r3, fp
 8019bca:	4641      	mov	r1, r8
 8019bcc:	0028      	movs	r0, r5
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	4798      	blx	r3
                if(letter == '\n' && i_prev != letter_i) new_opt++;
 8019bd2:	280a      	cmp	r0, #10
 8019bd4:	d1f3      	bne.n	8019bbe <lv_roller_event+0x39e>
 8019bd6:	42b7      	cmp	r7, r6
 8019bd8:	d0f1      	beq.n	8019bbe <lv_roller_event+0x39e>
 8019bda:	464b      	mov	r3, r9
 8019bdc:	3301      	adds	r3, #1
 8019bde:	b21b      	sxth	r3, r3
 8019be0:	4699      	mov	r9, r3
 8019be2:	e7ec      	b.n	8019bbe <lv_roller_event+0x39e>
            if(!editing) {
 8019be4:	2c00      	cmp	r4, #0
 8019be6:	d000      	beq.n	8019bea <lv_roller_event+0x3ca>
 8019be8:	e786      	b.n	8019af8 <lv_roller_event+0x2d8>
        if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 8019bea:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
 8019bec:	8c72      	ldrh	r2, [r6, #34]	; 0x22
 8019bee:	429a      	cmp	r2, r3
 8019bf0:	d100      	bne.n	8019bf4 <lv_roller_event+0x3d4>
 8019bf2:	e622      	b.n	801983a <lv_roller_event+0x1a>
            refr_position(obj, LV_ANIM_ON);
 8019bf4:	2101      	movs	r1, #1
 8019bf6:	0030      	movs	r0, r6
            roller->sel_opt_id = roller->sel_opt_id_ori;
 8019bf8:	8473      	strh	r3, [r6, #34]	; 0x22
            refr_position(obj, LV_ANIM_ON);
 8019bfa:	f7ff fb77 	bl	80192ec <refr_position>
 8019bfe:	e61c      	b.n	801983a <lv_roller_event+0x1a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8019c00:	2257      	movs	r2, #87	; 0x57
 8019c02:	2100      	movs	r1, #0
 8019c04:	0030      	movs	r0, r6
 8019c06:	f7f2 fcdd 	bl	800c5c4 <lv_obj_get_style_prop>
 8019c0a:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8019c0c:	2259      	movs	r2, #89	; 0x59
 8019c0e:	2100      	movs	r1, #0
 8019c10:	0030      	movs	r0, r6
 8019c12:	f7f2 fcd7 	bl	800c5c4 <lv_obj_get_style_prop>
            lv_coord_t label_unit = font_h + line_space;
 8019c16:	893b      	ldrh	r3, [r7, #8]
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8019c18:	210c      	movs	r1, #12
            lv_coord_t label_unit = font_h + line_space;
 8019c1a:	181b      	adds	r3, r3, r0
 8019c1c:	b21b      	sxth	r3, r3
 8019c1e:	4698      	mov	r8, r3
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8019c20:	2312      	movs	r3, #18
 8019c22:	5ef0      	ldrsh	r0, [r6, r3]
 8019c24:	2216      	movs	r2, #22
 8019c26:	5eb3      	ldrsh	r3, [r6, r2]
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8019c28:	8a64      	ldrh	r4, [r4, #18]
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8019c2a:	1a1b      	subs	r3, r3, r0
 8019c2c:	0fdf      	lsrs	r7, r3, #31
 8019c2e:	18ff      	adds	r7, r7, r3
 8019c30:	107f      	asrs	r7, r7, #1
 8019c32:	183f      	adds	r7, r7, r0
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8019c34:	0028      	movs	r0, r5
 8019c36:	f7ed fb43 	bl	80072c0 <lv_indev_scroll_throw_predict>
 8019c3a:	1820      	adds	r0, r4, r0
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8019c3c:	b23f      	sxth	r7, r7
            int32_t id = (mid - label_y1) / label_unit;
 8019c3e:	b200      	sxth	r0, r0
 8019c40:	4641      	mov	r1, r8
 8019c42:	1a38      	subs	r0, r7, r0
 8019c44:	f7e6 fafa 	bl	800023c <__divsi3>
            if(id < 0) id = 0;
 8019c48:	43c3      	mvns	r3, r0
 8019c4a:	17db      	asrs	r3, r3, #31
 8019c4c:	4018      	ands	r0, r3
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 8019c4e:	8c33      	ldrh	r3, [r6, #32]
 8019c50:	4298      	cmp	r0, r3
 8019c52:	db00      	blt.n	8019c56 <lv_roller_event+0x436>
 8019c54:	1e58      	subs	r0, r3, #1
            new_opt = id;
 8019c56:	ab10      	add	r3, sp, #64	; 0x40
 8019c58:	4698      	mov	r8, r3
 8019c5a:	b205      	sxth	r5, r0
        if(new_opt >= 0) {
 8019c5c:	2d00      	cmp	r5, #0
 8019c5e:	da00      	bge.n	8019c62 <lv_roller_event+0x442>
 8019c60:	e730      	b.n	8019ac4 <lv_roller_event+0x2a4>
            lv_roller_set_selected(obj, new_opt, LV_ANIM_ON);
 8019c62:	b2ac      	uxth	r4, r5
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8019c64:	2326      	movs	r3, #38	; 0x26
 8019c66:	5cf3      	ldrb	r3, [r6, r3]
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 8019c68:	8c37      	ldrh	r7, [r6, #32]
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8019c6a:	07db      	lsls	r3, r3, #31
 8019c6c:	d522      	bpl.n	8019cb4 <lv_roller_event+0x494>
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 8019c6e:	2103      	movs	r1, #3
 8019c70:	0038      	movs	r0, r7
 8019c72:	f7e6 fa59 	bl	8000128 <__udivsi3>
 8019c76:	b283      	uxth	r3, r0
 8019c78:	469a      	mov	sl, r3
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 8019c7a:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 8019c7c:	4699      	mov	r9, r3
        if(sel_opt < real_option_cnt) {
 8019c7e:	45a2      	cmp	sl, r4
 8019c80:	d918      	bls.n	8019cb4 <lv_roller_event+0x494>
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 8019c82:	4651      	mov	r1, sl
 8019c84:	0018      	movs	r0, r3
 8019c86:	f7e6 fa4f 	bl	8000128 <__udivsi3>
            uint16_t act_opt = roller->sel_opt_id - current_page * real_option_cnt;
 8019c8a:	4652      	mov	r2, sl
 8019c8c:	464b      	mov	r3, r9
 8019c8e:	4342      	muls	r2, r0
 8019c90:	b292      	uxth	r2, r2
 8019c92:	1a9b      	subs	r3, r3, r2
 8019c94:	b298      	uxth	r0, r3
            if(LV_ABS((int16_t)act_opt - sel_opt) > real_option_cnt / 2) {
 8019c96:	b21b      	sxth	r3, r3
 8019c98:	1b1b      	subs	r3, r3, r4
 8019c9a:	17d9      	asrs	r1, r3, #31
 8019c9c:	185b      	adds	r3, r3, r1
 8019c9e:	404b      	eors	r3, r1
 8019ca0:	4651      	mov	r1, sl
 8019ca2:	0849      	lsrs	r1, r1, #1
 8019ca4:	428b      	cmp	r3, r1
 8019ca6:	d903      	bls.n	8019cb0 <lv_roller_event+0x490>
                if(act_opt > sel_opt) sel_opt_signed += real_option_cnt;
 8019ca8:	42a0      	cmp	r0, r4
 8019caa:	d969      	bls.n	8019d80 <lv_roller_event+0x560>
 8019cac:	4455      	add	r5, sl
            sel_opt = sel_opt_signed + real_option_cnt * current_page;
 8019cae:	b2ac      	uxth	r4, r5
 8019cb0:	1914      	adds	r4, r2, r4
 8019cb2:	b2a4      	uxth	r4, r4
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 8019cb4:	42bc      	cmp	r4, r7
 8019cb6:	d301      	bcc.n	8019cbc <lv_roller_event+0x49c>
 8019cb8:	3f01      	subs	r7, #1
 8019cba:	b2bc      	uxth	r4, r7
    refr_position(obj, anim);
 8019cbc:	2101      	movs	r1, #1
 8019cbe:	0030      	movs	r0, r6
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 8019cc0:	8474      	strh	r4, [r6, #34]	; 0x22
    roller->sel_opt_id_ori = roller->sel_opt_id;
 8019cc2:	84b4      	strh	r4, [r6, #36]	; 0x24
    refr_position(obj, anim);
 8019cc4:	f7ff fb12 	bl	80192ec <refr_position>
}
 8019cc8:	e6fc      	b.n	8019ac4 <lv_roller_event+0x2a4>
 8019cca:	4656      	mov	r6, sl
 8019ccc:	464d      	mov	r5, r9
 8019cce:	e7c5      	b.n	8019c5c <lv_roller_event+0x43c>
        char c = *((char *)lv_event_get_param(e));
 8019cd0:	0028      	movs	r0, r5
 8019cd2:	f7ea ffed 	bl	8004cb0 <lv_event_get_param>
 8019cd6:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8019cd8:	001a      	movs	r2, r3
 8019cda:	3a12      	subs	r2, #18
 8019cdc:	2a01      	cmp	r2, #1
 8019cde:	d927      	bls.n	8019d30 <lv_roller_event+0x510>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8019ce0:	2b14      	cmp	r3, #20
 8019ce2:	d002      	beq.n	8019cea <lv_roller_event+0x4ca>
 8019ce4:	2b11      	cmp	r3, #17
 8019ce6:	d000      	beq.n	8019cea <lv_roller_event+0x4ca>
 8019ce8:	e5a7      	b.n	801983a <lv_roller_event+0x1a>
            if(roller->sel_opt_id > 0) {
 8019cea:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d100      	bne.n	8019cf2 <lv_roller_event+0x4d2>
 8019cf0:	e5a3      	b.n	801983a <lv_roller_event+0x1a>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 8019cf2:	8cb4      	ldrh	r4, [r6, #36]	; 0x24
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, LV_ANIM_ON);
 8019cf4:	3b01      	subs	r3, #1
 8019cf6:	2201      	movs	r2, #1
 8019cf8:	0030      	movs	r0, r6
 8019cfa:	b299      	uxth	r1, r3
 8019cfc:	f7ff fd4e 	bl	801979c <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 8019d00:	84b4      	strh	r4, [r6, #36]	; 0x24
 8019d02:	e59a      	b.n	801983a <lv_roller_event+0x1a>
    return lv_obj_get_child(obj, 0);
 8019d04:	2100      	movs	r1, #0
 8019d06:	f7f4 f88f 	bl	800de28 <lv_obj_get_child>
        lv_obj_refresh_ext_draw_size(label);
 8019d0a:	f7ee fc99 	bl	8008640 <lv_obj_refresh_ext_draw_size>
 8019d0e:	e594      	b.n	801983a <lv_roller_event+0x1a>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 8019d10:	8c73      	ldrh	r3, [r6, #34]	; 0x22
            lv_group_t * g      = lv_obj_get_group(obj);
 8019d12:	0030      	movs	r0, r6
        roller->sel_opt_id_ori = roller->sel_opt_id;
 8019d14:	84b3      	strh	r3, [r6, #36]	; 0x24
            lv_group_t * g      = lv_obj_get_group(obj);
 8019d16:	f7ee f913 	bl	8007f40 <lv_obj_get_group>
 8019d1a:	0007      	movs	r7, r0
            if(lv_group_get_editing(g)) {
 8019d1c:	f7eb fc2a 	bl	8005574 <lv_group_get_editing>
 8019d20:	2800      	cmp	r0, #0
 8019d22:	d100      	bne.n	8019d26 <lv_roller_event+0x506>
 8019d24:	e6c2      	b.n	8019aac <lv_roller_event+0x28c>
                lv_group_set_editing(g, false);
 8019d26:	2100      	movs	r1, #0
 8019d28:	0038      	movs	r0, r7
 8019d2a:	f7eb fbc5 	bl	80054b8 <lv_group_set_editing>
 8019d2e:	e6bd      	b.n	8019aac <lv_roller_event+0x28c>
            if(roller->sel_opt_id + 1 < roller->option_cnt) {
 8019d30:	8c71      	ldrh	r1, [r6, #34]	; 0x22
 8019d32:	8c33      	ldrh	r3, [r6, #32]
 8019d34:	3101      	adds	r1, #1
 8019d36:	4299      	cmp	r1, r3
 8019d38:	db00      	blt.n	8019d3c <lv_roller_event+0x51c>
 8019d3a:	e57e      	b.n	801983a <lv_roller_event+0x1a>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 8019d3c:	8cb4      	ldrh	r4, [r6, #36]	; 0x24
                lv_roller_set_selected(obj, roller->sel_opt_id + 1, LV_ANIM_ON);
 8019d3e:	2201      	movs	r2, #1
 8019d40:	0030      	movs	r0, r6
 8019d42:	b289      	uxth	r1, r1
 8019d44:	f7ff fd2a 	bl	801979c <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 8019d48:	84b4      	strh	r4, [r6, #36]	; 0x24
 8019d4a:	e576      	b.n	801983a <lv_roller_event+0x1a>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8019d4c:	0028      	movs	r0, r5
 8019d4e:	f7eb f80d 	bl	8004d6c <lv_event_get_draw_ctx>
        get_sel_area(obj, &sel_area);
 8019d52:	a90e      	add	r1, sp, #56	; 0x38
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8019d54:	0005      	movs	r5, r0
        get_sel_area(obj, &sel_area);
 8019d56:	0020      	movs	r0, r4
 8019d58:	f7ff fa48 	bl	80191ec <get_sel_area>
        lv_draw_rect_dsc_init(&sel_dsc);
 8019d5c:	a810      	add	r0, sp, #64	; 0x40
 8019d5e:	f7f6 f893 	bl	800fe88 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_SELECTED, &sel_dsc);
 8019d62:	2180      	movs	r1, #128	; 0x80
 8019d64:	0020      	movs	r0, r4
 8019d66:	aa10      	add	r2, sp, #64	; 0x40
 8019d68:	02c9      	lsls	r1, r1, #11
 8019d6a:	f7ee fa65 	bl	8008238 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(draw_ctx, &sel_dsc, &sel_area);
 8019d6e:	0028      	movs	r0, r5
 8019d70:	aa0e      	add	r2, sp, #56	; 0x38
 8019d72:	a910      	add	r1, sp, #64	; 0x40
 8019d74:	f7f6 f8ae 	bl	800fed4 <lv_draw_rect>
 8019d78:	e55f      	b.n	801983a <lv_roller_event+0x1a>
        if(new_opt >= 0) {
 8019d7a:	ab10      	add	r3, sp, #64	; 0x40
 8019d7c:	4698      	mov	r8, r3
 8019d7e:	e771      	b.n	8019c64 <lv_roller_event+0x444>
                else sel_opt_signed -= real_option_cnt;
 8019d80:	4653      	mov	r3, sl
 8019d82:	1aed      	subs	r5, r5, r3
            sel_opt = sel_opt_signed + real_option_cnt * current_page;
 8019d84:	b2ac      	uxth	r4, r5
 8019d86:	e793      	b.n	8019cb0 <lv_roller_event+0x490>
 8019d88:	20000084 	.word	0x20000084

08019d8c <lv_switch_anim_ready>:
 * Resets the switch's animation state to "no animation in progress".
 */
static void lv_switch_anim_ready(lv_anim_t * a)
{
    lv_switch_t * sw = a->var;
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 8019d8c:	2301      	movs	r3, #1
{
 8019d8e:	b510      	push	{r4, lr}
    lv_switch_t * sw = a->var;
 8019d90:	6800      	ldr	r0, [r0, #0]
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 8019d92:	425b      	negs	r3, r3
 8019d94:	6203      	str	r3, [r0, #32]
    lv_obj_invalidate((lv_obj_t *)sw);
 8019d96:	f7ef fb3d 	bl	8009414 <lv_obj_invalidate>
}
 8019d9a:	bd10      	pop	{r4, pc}

08019d9c <lv_switch_anim_exec_cb>:
{
 8019d9c:	b510      	push	{r4, lr}
    sw->anim_state = value;
 8019d9e:	6201      	str	r1, [r0, #32]
    lv_obj_invalidate((lv_obj_t *)sw);
 8019da0:	f7ef fb38 	bl	8009414 <lv_obj_invalidate>
}
 8019da4:	bd10      	pop	{r4, pc}
 8019da6:	46c0      	nop			; (mov r8, r8)

08019da8 <lv_switch_destructor>:
{
 8019da8:	b510      	push	{r4, lr}
 8019daa:	0008      	movs	r0, r1
    lv_anim_del(sw, NULL);
 8019dac:	2100      	movs	r1, #0
 8019dae:	f7fa f875 	bl	8013e9c <lv_anim_del>
}
 8019db2:	bd10      	pop	{r4, pc}

08019db4 <lv_switch_constructor>:
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 8019db4:	2301      	movs	r3, #1
{
 8019db6:	b510      	push	{r4, lr}
 8019db8:	000c      	movs	r4, r1
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 8019dba:	425b      	negs	r3, r3
 8019dbc:	620b      	str	r3, [r1, #32]
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8019dbe:	0020      	movs	r0, r4
 8019dc0:	2110      	movs	r1, #16
 8019dc2:	f7ee f853 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 8019dc6:	0020      	movs	r0, r4
 8019dc8:	2108      	movs	r1, #8
 8019dca:	f7ee f813 	bl	8007df4 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8019dce:	2180      	movs	r1, #128	; 0x80
 8019dd0:	0020      	movs	r0, r4
 8019dd2:	00c9      	lsls	r1, r1, #3
 8019dd4:	f7ee f80e 	bl	8007df4 <lv_obj_add_flag>
}
 8019dd8:	bd10      	pop	{r4, pc}
 8019dda:	46c0      	nop			; (mov r8, r8)

08019ddc <lv_switch_event>:
{
 8019ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019dde:	46de      	mov	lr, fp
 8019de0:	4657      	mov	r7, sl
 8019de2:	464e      	mov	r6, r9
 8019de4:	4645      	mov	r5, r8
 8019de6:	b5e0      	push	{r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8019de8:	48b4      	ldr	r0, [pc, #720]	; (801a0bc <lv_switch_event+0x2e0>)
{
 8019dea:	b0a3      	sub	sp, #140	; 0x8c
 8019dec:	000c      	movs	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8019dee:	f7ea ff3f 	bl	8004c70 <lv_obj_event_base>
 8019df2:	0007      	movs	r7, r0
    if(res != LV_RES_OK) return;
 8019df4:	2801      	cmp	r0, #1
 8019df6:	d006      	beq.n	8019e06 <lv_switch_event+0x2a>
}
 8019df8:	b023      	add	sp, #140	; 0x8c
 8019dfa:	bcf0      	pop	{r4, r5, r6, r7}
 8019dfc:	46bb      	mov	fp, r7
 8019dfe:	46b2      	mov	sl, r6
 8019e00:	46a9      	mov	r9, r5
 8019e02:	46a0      	mov	r8, r4
 8019e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8019e06:	0020      	movs	r0, r4
 8019e08:	f7ea ff4e 	bl	8004ca8 <lv_event_get_code>
 8019e0c:	0005      	movs	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8019e0e:	0020      	movs	r0, r4
 8019e10:	f7ea ff46 	bl	8004ca0 <lv_event_get_target>
 8019e14:	0006      	movs	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8019e16:	2d13      	cmp	r5, #19
 8019e18:	d100      	bne.n	8019e1c <lv_switch_event+0x40>
 8019e1a:	e0ac      	b.n	8019f76 <lv_switch_event+0x19a>
    else if(code == LV_EVENT_VALUE_CHANGED) {
 8019e1c:	2d1c      	cmp	r5, #28
 8019e1e:	d100      	bne.n	8019e22 <lv_switch_event+0x46>
 8019e20:	e0ee      	b.n	801a000 <lv_switch_event+0x224>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8019e22:	2d15      	cmp	r5, #21
 8019e24:	d1e8      	bne.n	8019df8 <lv_switch_event+0x1c>
    lv_obj_t * obj = lv_event_get_target(e);
 8019e26:	0020      	movs	r0, r4
 8019e28:	f7ea ff3a 	bl	8004ca0 <lv_event_get_target>
 8019e2c:	0005      	movs	r5, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8019e2e:	0020      	movs	r0, r4
 8019e30:	f7ea ff9c 	bl	8004d6c <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8019e34:	2212      	movs	r2, #18
 8019e36:	4682      	mov	sl, r0
 8019e38:	2100      	movs	r1, #0
 8019e3a:	0028      	movs	r0, r5
 8019e3c:	f7f2 fbc2 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8019e40:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8019e42:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8019e44:	2100      	movs	r1, #0
 8019e46:	0028      	movs	r0, r5
 8019e48:	f7f2 fbbc 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8019e4c:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8019e4e:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8019e50:	2100      	movs	r1, #0
 8019e52:	0028      	movs	r0, r5
 8019e54:	f7f2 fbb6 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8019e58:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8019e5a:	0004      	movs	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8019e5c:	2100      	movs	r1, #0
 8019e5e:	0028      	movs	r0, r5
 8019e60:	f7f2 fbb0 	bl	800c5c4 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 8019e64:	2312      	movs	r3, #18
 8019e66:	5eea      	ldrsh	r2, [r5, r3]
    dest->x2 = src->x2;
 8019e68:	2314      	movs	r3, #20
 8019e6a:	5ee9      	ldrsh	r1, [r5, r3]
    dest->y1 = src->y1;
 8019e6c:	4691      	mov	r9, r2
    dest->y2 = src->y2;
 8019e6e:	2316      	movs	r3, #22
 8019e70:	5eea      	ldrsh	r2, [r5, r3]
    indic_area.x1 += bg_left;
 8019e72:	8a2b      	ldrh	r3, [r5, #16]
 8019e74:	4693      	mov	fp, r2
 8019e76:	469c      	mov	ip, r3
 8019e78:	44e0      	add	r8, ip
 8019e7a:	466b      	mov	r3, sp
 8019e7c:	4642      	mov	r2, r8
 8019e7e:	801a      	strh	r2, [r3, #0]
    indic_area.y1 += bg_top;
 8019e80:	0022      	movs	r2, r4
    indic_area.x2 -= bg_right;
 8019e82:	1b89      	subs	r1, r1, r6
    indic_area.y1 += bg_top;
 8019e84:	444a      	add	r2, r9
    indic_area.x2 -= bg_right;
 8019e86:	8099      	strh	r1, [r3, #4]
    indic_area.y1 += bg_top;
 8019e88:	805a      	strh	r2, [r3, #2]
    indic_area.y2 -= bg_bottom;
 8019e8a:	465b      	mov	r3, fp
 8019e8c:	466a      	mov	r2, sp
 8019e8e:	1a1b      	subs	r3, r3, r0
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 8019e90:	a804      	add	r0, sp, #16
    indic_area.y2 -= bg_bottom;
 8019e92:	80d3      	strh	r3, [r2, #6]
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 8019e94:	f7f5 fff8 	bl	800fe88 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_indic_dsc);
 8019e98:	2180      	movs	r1, #128	; 0x80
 8019e9a:	0028      	movs	r0, r5
 8019e9c:	aa04      	add	r2, sp, #16
 8019e9e:	0289      	lsls	r1, r1, #10
 8019ea0:	f7ee f9ca 	bl	8008238 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &draw_indic_dsc, &indic_area);
 8019ea4:	466a      	mov	r2, sp
 8019ea6:	4650      	mov	r0, sl
 8019ea8:	a904      	add	r1, sp, #16
 8019eaa:	f7f6 f813 	bl	800fed4 <lv_draw_rect>
    lv_coord_t knob_size = lv_obj_get_height(obj);
 8019eae:	0028      	movs	r0, r5
 8019eb0:	f7ee ff1a 	bl	8008ce8 <lv_obj_get_height>
    lv_coord_t anim_length = lv_area_get_width(&obj->coords) - knob_size;
 8019eb4:	8aac      	ldrh	r4, [r5, #20]
 8019eb6:	b286      	uxth	r6, r0
 8019eb8:	8a2b      	ldrh	r3, [r5, #16]
 8019eba:	1ba4      	subs	r4, r4, r6
 8019ebc:	3401      	adds	r4, #1
 8019ebe:	1ae4      	subs	r4, r4, r3
 8019ec0:	b2a3      	uxth	r3, r4
 8019ec2:	4698      	mov	r8, r3
    if(LV_SWITCH_IS_ANIMATING(sw)) {
 8019ec4:	6a2b      	ldr	r3, [r5, #32]
    lv_coord_t anim_length = lv_area_get_width(&obj->coords) - knob_size;
 8019ec6:	b224      	sxth	r4, r4
    if(LV_SWITCH_IS_ANIMATING(sw)) {
 8019ec8:	1c5a      	adds	r2, r3, #1
 8019eca:	d100      	bne.n	8019ece <lv_switch_event+0xf2>
 8019ecc:	e0da      	b.n	801a084 <lv_switch_event+0x2a8>
        anim_value_x = (anim_length * sw->anim_state) / LV_SWITCH_ANIM_STATE_END;
 8019ece:	4363      	muls	r3, r4
 8019ed0:	24ff      	movs	r4, #255	; 0xff
 8019ed2:	17da      	asrs	r2, r3, #31
 8019ed4:	4014      	ands	r4, r2
 8019ed6:	18e4      	adds	r4, r4, r3
 8019ed8:	1224      	asrs	r4, r4, #8
        anim_value_x = anim_length - anim_value_x;
 8019eda:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8019edc:	2216      	movs	r2, #22
 8019ede:	2100      	movs	r1, #0
 8019ee0:	0028      	movs	r0, r5
 8019ee2:	f7f2 fb6f 	bl	800c5c4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8019ee6:	b2c0      	uxtb	r0, r0
    if(LV_BASE_DIR_RTL == lv_obj_get_style_base_dir(obj, LV_PART_MAIN)) {
 8019ee8:	2801      	cmp	r0, #1
 8019eea:	d102      	bne.n	8019ef2 <lv_switch_event+0x116>
        anim_value_x = anim_length - anim_value_x;
 8019eec:	4643      	mov	r3, r8
 8019eee:	1b1c      	subs	r4, r3, r4
 8019ef0:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8019ef2:	21c0      	movs	r1, #192	; 0xc0
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 8019ef4:	8a2b      	ldrh	r3, [r5, #16]
 8019ef6:	2212      	movs	r2, #18
 8019ef8:	18e3      	adds	r3, r4, r3
 8019efa:	b29b      	uxth	r3, r3
 8019efc:	ac02      	add	r4, sp, #8
 8019efe:	8023      	strh	r3, [r4, #0]
    knob_area.x2 = knob_area.x1 + knob_size;
 8019f00:	18f3      	adds	r3, r6, r3
 8019f02:	80a3      	strh	r3, [r4, #4]
    knob_area.y1 = obj->coords.y1;
 8019f04:	8a6b      	ldrh	r3, [r5, #18]
 8019f06:	0028      	movs	r0, r5
 8019f08:	8063      	strh	r3, [r4, #2]
    knob_area.y2 = obj->coords.y2;
 8019f0a:	8aeb      	ldrh	r3, [r5, #22]
 8019f0c:	0289      	lsls	r1, r1, #10
 8019f0e:	80e3      	strh	r3, [r4, #6]
 8019f10:	f7f2 fb58 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8019f14:	21c0      	movs	r1, #192	; 0xc0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8019f16:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8019f18:	2213      	movs	r2, #19
 8019f1a:	0028      	movs	r0, r5
 8019f1c:	0289      	lsls	r1, r1, #10
 8019f1e:	f7f2 fb51 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8019f22:	21c0      	movs	r1, #192	; 0xc0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8019f24:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8019f26:	2210      	movs	r2, #16
 8019f28:	0028      	movs	r0, r5
 8019f2a:	0289      	lsls	r1, r1, #10
 8019f2c:	f7f2 fb4a 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8019f30:	21c0      	movs	r1, #192	; 0xc0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8019f32:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8019f34:	2211      	movs	r2, #17
 8019f36:	0028      	movs	r0, r5
 8019f38:	0289      	lsls	r1, r1, #10
 8019f3a:	f7f2 fb43 	bl	800c5c4 <lv_obj_get_style_prop>
    knob_area.x1 -= knob_left;
 8019f3e:	464b      	mov	r3, r9
    knob_area.x2 += knob_right;
 8019f40:	88a2      	ldrh	r2, [r4, #4]
    knob_area.x1 -= knob_left;
 8019f42:	8821      	ldrh	r1, [r4, #0]
    knob_area.x2 += knob_right;
 8019f44:	4442      	add	r2, r8
    knob_area.x1 -= knob_left;
 8019f46:	1ac9      	subs	r1, r1, r3
    knob_area.x2 += knob_right;
 8019f48:	80a2      	strh	r2, [r4, #4]
    knob_area.y2 += knob_bottom;
 8019f4a:	88e3      	ldrh	r3, [r4, #6]
    knob_area.y1 -= knob_top;
 8019f4c:	8862      	ldrh	r2, [r4, #2]
    knob_area.y2 += knob_bottom;
 8019f4e:	181b      	adds	r3, r3, r0
    knob_area.y1 -= knob_top;
 8019f50:	1b92      	subs	r2, r2, r6
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8019f52:	a812      	add	r0, sp, #72	; 0x48
    knob_area.x1 -= knob_left;
 8019f54:	8021      	strh	r1, [r4, #0]
    knob_area.y1 -= knob_top;
 8019f56:	8062      	strh	r2, [r4, #2]
    knob_area.y2 += knob_bottom;
 8019f58:	80e3      	strh	r3, [r4, #6]
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8019f5a:	f7f5 ff95 	bl	800fe88 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 8019f5e:	21c0      	movs	r1, #192	; 0xc0
 8019f60:	0028      	movs	r0, r5
 8019f62:	aa12      	add	r2, sp, #72	; 0x48
 8019f64:	0289      	lsls	r1, r1, #10
 8019f66:	f7ee f967 	bl	8008238 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &knob_rect_dsc, &knob_area);
 8019f6a:	0022      	movs	r2, r4
 8019f6c:	4650      	mov	r0, sl
 8019f6e:	a912      	add	r1, sp, #72	; 0x48
 8019f70:	f7f5 ffb0 	bl	800fed4 <lv_draw_rect>
}
 8019f74:	e740      	b.n	8019df8 <lv_switch_event+0x1c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8019f76:	21c0      	movs	r1, #192	; 0xc0
 8019f78:	2212      	movs	r2, #18
 8019f7a:	0289      	lsls	r1, r1, #10
 8019f7c:	f7f2 fb22 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8019f80:	21c0      	movs	r1, #192	; 0xc0
 8019f82:	2213      	movs	r2, #19
    return (lv_coord_t)v.num;
 8019f84:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8019f86:	0289      	lsls	r1, r1, #10
 8019f88:	0030      	movs	r0, r6
 8019f8a:	f7f2 fb1b 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8019f8e:	21c0      	movs	r1, #192	; 0xc0
    return (lv_coord_t)v.num;
 8019f90:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8019f92:	2210      	movs	r2, #16
 8019f94:	0289      	lsls	r1, r1, #10
 8019f96:	0030      	movs	r0, r6
    return (lv_coord_t)v.num;
 8019f98:	4699      	mov	r9, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8019f9a:	f7f2 fb13 	bl	800c5c4 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8019f9e:	21c0      	movs	r1, #192	; 0xc0
    return (lv_coord_t)v.num;
 8019fa0:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8019fa2:	2211      	movs	r2, #17
 8019fa4:	0289      	lsls	r1, r1, #10
 8019fa6:	0030      	movs	r0, r6
    return (lv_coord_t)v.num;
 8019fa8:	4698      	mov	r8, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8019faa:	f7f2 fb0b 	bl	800c5c4 <lv_obj_get_style_prop>
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 8019fae:	21c0      	movs	r1, #192	; 0xc0
    return (lv_coord_t)v.num;
 8019fb0:	b205      	sxth	r5, r0
 8019fb2:	0289      	lsls	r1, r1, #10
 8019fb4:	0030      	movs	r0, r6
 8019fb6:	f7ee fac5 	bl	8008544 <lv_obj_calculate_ext_draw_size>
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
 8019fba:	1c3b      	adds	r3, r7, #0
 8019fbc:	454f      	cmp	r7, r9
 8019fbe:	db2f      	blt.n	801a020 <lv_switch_event+0x244>
 8019fc0:	b21a      	sxth	r2, r3
 8019fc2:	4542      	cmp	r2, r8
 8019fc4:	db28      	blt.n	801a018 <lv_switch_event+0x23c>
 8019fc6:	b21a      	sxth	r2, r3
 8019fc8:	42aa      	cmp	r2, r5
 8019fca:	db23      	blt.n	801a014 <lv_switch_event+0x238>
        knob_size += _LV_SWITCH_KNOB_EXT_AREA_CORRECTION;
 8019fcc:	3302      	adds	r3, #2
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 8019fce:	181b      	adds	r3, r3, r0
        lv_coord_t * s = lv_event_get_param(e);
 8019fd0:	0020      	movs	r0, r4
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 8019fd2:	b29d      	uxth	r5, r3
        lv_coord_t * s = lv_event_get_param(e);
 8019fd4:	f7ea fe6c 	bl	8004cb0 <lv_event_get_param>
        *s = LV_MAX(*s, knob_size);
 8019fd8:	8803      	ldrh	r3, [r0, #0]
 8019fda:	b229      	sxth	r1, r5
 8019fdc:	1c1a      	adds	r2, r3, #0
 8019fde:	b21b      	sxth	r3, r3
        lv_coord_t * s = lv_event_get_param(e);
 8019fe0:	0004      	movs	r4, r0
        *s = LV_MAX(*s, knob_size);
 8019fe2:	428b      	cmp	r3, r1
 8019fe4:	db1a      	blt.n	801a01c <lv_switch_event+0x240>
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 8019fe6:	2180      	movs	r1, #128	; 0x80
 8019fe8:	0030      	movs	r0, r6
        *s = LV_MAX(*s, knob_size);
 8019fea:	8022      	strh	r2, [r4, #0]
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 8019fec:	0289      	lsls	r1, r1, #10
        *s = LV_MAX(*s, knob_size);
 8019fee:	b215      	sxth	r5, r2
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 8019ff0:	f7ee faa8 	bl	8008544 <lv_obj_calculate_ext_draw_size>
 8019ff4:	4285      	cmp	r5, r0
 8019ff6:	dd15      	ble.n	801a024 <lv_switch_event+0x248>
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	5ee0      	ldrsh	r0, [r4, r3]
 8019ffc:	8020      	strh	r0, [r4, #0]
 8019ffe:	e6fb      	b.n	8019df8 <lv_switch_event+0x1c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801a000:	2264      	movs	r2, #100	; 0x64
 801a002:	2100      	movs	r1, #0
 801a004:	f7f2 fade 	bl	800c5c4 <lv_obj_get_style_prop>
 801a008:	1e05      	subs	r5, r0, #0
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_switch_t * sw = (lv_switch_t *)obj;

    uint32_t anim_dur_full = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);

    if(anim_dur_full > 0) {
 801a00a:	d112      	bne.n	801a032 <lv_switch_event+0x256>
        lv_obj_invalidate(obj);
 801a00c:	0030      	movs	r0, r6
 801a00e:	f7ef fa01 	bl	8009414 <lv_obj_invalidate>
 801a012:	e6f1      	b.n	8019df8 <lv_switch_event+0x1c>
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
 801a014:	1c2b      	adds	r3, r5, #0
 801a016:	e7d9      	b.n	8019fcc <lv_switch_event+0x1f0>
 801a018:	4643      	mov	r3, r8
 801a01a:	e7d4      	b.n	8019fc6 <lv_switch_event+0x1ea>
        *s = LV_MAX(*s, knob_size);
 801a01c:	1c2a      	adds	r2, r5, #0
 801a01e:	e7e2      	b.n	8019fe6 <lv_switch_event+0x20a>
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
 801a020:	464b      	mov	r3, r9
 801a022:	e7cd      	b.n	8019fc0 <lv_switch_event+0x1e4>
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801a024:	2180      	movs	r1, #128	; 0x80
 801a026:	0030      	movs	r0, r6
 801a028:	0289      	lsls	r1, r1, #10
 801a02a:	f7ee fa8b 	bl	8008544 <lv_obj_calculate_ext_draw_size>
 801a02e:	8020      	strh	r0, [r4, #0]
 801a030:	e6e2      	b.n	8019df8 <lv_switch_event+0x1c>
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 801a032:	0030      	movs	r0, r6
 801a034:	f7ed ff7c 	bl	8007f30 <lv_obj_get_state>
 801a038:	4038      	ands	r0, r7
        int32_t anim_start;
        int32_t anim_end;
        /*No animation in progress -> simply set the values*/
        if(sw->anim_state == LV_SWITCH_ANIM_STATE_INV) {
 801a03a:	6a37      	ldr	r7, [r6, #32]
 801a03c:	b280      	uxth	r0, r0
 801a03e:	1c7b      	adds	r3, r7, #1
 801a040:	d02a      	beq.n	801a098 <lv_switch_event+0x2bc>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
        }
        /*Animation in progress. Start from the animation end value*/
        else {
            anim_start = sw->anim_state;
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 801a042:	2800      	cmp	r0, #0
 801a044:	d02f      	beq.n	801a0a6 <lv_switch_event+0x2ca>
        }
        /*Calculate actual animation duration*/
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;
 801a046:	1e7c      	subs	r4, r7, #1
 801a048:	3cff      	subs	r4, #255	; 0xff
 801a04a:	17e3      	asrs	r3, r4, #31
 801a04c:	18e4      	adds	r4, r4, r3
 801a04e:	405c      	eors	r4, r3
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 801a050:	2380      	movs	r3, #128	; 0x80
 801a052:	005b      	lsls	r3, r3, #1
 801a054:	4698      	mov	r8, r3

        /*Stop the previous animation if it exists*/
        lv_anim_del(sw, NULL);
 801a056:	2100      	movs	r1, #0
 801a058:	0030      	movs	r0, r6
 801a05a:	f7f9 ff1f 	bl	8013e9c <lv_anim_del>

        lv_anim_t a;
        lv_anim_init(&a);
 801a05e:	a812      	add	r0, sp, #72	; 0x48
 801a060:	f7f9 ff04 	bl	8013e6c <lv_anim_init>
    a->exec_cb = exec_cb;
 801a064:	4b16      	ldr	r3, [pc, #88]	; (801a0c0 <lv_switch_event+0x2e4>)
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;
 801a066:	436c      	muls	r4, r5
 801a068:	9313      	str	r3, [sp, #76]	; 0x4c
    a->end_value = end;
 801a06a:	4643      	mov	r3, r8
 801a06c:	931b      	str	r3, [sp, #108]	; 0x6c
    a->ready_cb = ready_cb;
 801a06e:	4b15      	ldr	r3, [pc, #84]	; (801a0c4 <lv_switch_event+0x2e8>)
 801a070:	0a24      	lsrs	r4, r4, #8
        lv_anim_set_var(&a, sw);
        lv_anim_set_exec_cb(&a, lv_switch_anim_exec_cb);
        lv_anim_set_values(&a, anim_start, anim_end);
        lv_anim_set_ready_cb(&a, lv_switch_anim_ready);
        lv_anim_set_time(&a, anim_dur);
        lv_anim_start(&a);
 801a072:	a812      	add	r0, sp, #72	; 0x48
    a->var = var;
 801a074:	9612      	str	r6, [sp, #72]	; 0x48
    a->start_value = start;
 801a076:	9719      	str	r7, [sp, #100]	; 0x64
    a->current_value = start;
 801a078:	971a      	str	r7, [sp, #104]	; 0x68
    a->ready_cb = ready_cb;
 801a07a:	9315      	str	r3, [sp, #84]	; 0x54
    a->time = duration;
 801a07c:	941c      	str	r4, [sp, #112]	; 0x70
 801a07e:	f7f9 fff7 	bl	8014070 <lv_anim_start>
 801a082:	e7c3      	b.n	801a00c <lv_switch_event+0x230>
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 801a084:	0028      	movs	r0, r5
 801a086:	f7ed ff53 	bl	8007f30 <lv_obj_get_state>
 801a08a:	4038      	ands	r0, r7
 801a08c:	b284      	uxth	r4, r0
        anim_value_x = chk ? anim_length : 0;
 801a08e:	2c00      	cmp	r4, #0
 801a090:	d100      	bne.n	801a094 <lv_switch_event+0x2b8>
 801a092:	e723      	b.n	8019edc <lv_switch_event+0x100>
 801a094:	4644      	mov	r4, r8
 801a096:	e721      	b.n	8019edc <lv_switch_event+0x100>
            anim_start = chk ? LV_SWITCH_ANIM_STATE_START : LV_SWITCH_ANIM_STATE_END;
 801a098:	2480      	movs	r4, #128	; 0x80
 801a09a:	0064      	lsls	r4, r4, #1
 801a09c:	2800      	cmp	r0, #0
 801a09e:	d008      	beq.n	801a0b2 <lv_switch_event+0x2d6>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 801a0a0:	46a0      	mov	r8, r4
            anim_start = chk ? LV_SWITCH_ANIM_STATE_START : LV_SWITCH_ANIM_STATE_END;
 801a0a2:	2700      	movs	r7, #0
 801a0a4:	e7d7      	b.n	801a056 <lv_switch_event+0x27a>
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;
 801a0a6:	17fb      	asrs	r3, r7, #31
 801a0a8:	18fc      	adds	r4, r7, r3
 801a0aa:	405c      	eors	r4, r3
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 801a0ac:	2300      	movs	r3, #0
 801a0ae:	4698      	mov	r8, r3
 801a0b0:	e7d1      	b.n	801a056 <lv_switch_event+0x27a>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 801a0b2:	2300      	movs	r3, #0
            anim_start = chk ? LV_SWITCH_ANIM_STATE_START : LV_SWITCH_ANIM_STATE_END;
 801a0b4:	0027      	movs	r7, r4
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 801a0b6:	4698      	mov	r8, r3
 801a0b8:	e7cd      	b.n	801a056 <lv_switch_event+0x27a>
 801a0ba:	46c0      	nop			; (mov r8, r8)
 801a0bc:	0801bee8 	.word	0x0801bee8
 801a0c0:	08019d9d 	.word	0x08019d9d
 801a0c4:	08019d8d 	.word	0x08019d8d

0801a0c8 <lv_switch_create>:
{
 801a0c8:	b510      	push	{r4, lr}
 801a0ca:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 801a0cc:	4803      	ldr	r0, [pc, #12]	; (801a0dc <lv_switch_create+0x14>)
 801a0ce:	f7ed ff9f 	bl	8008010 <lv_obj_class_create_obj>
 801a0d2:	0004      	movs	r4, r0
    lv_obj_class_init_obj(obj);
 801a0d4:	f7ee f814 	bl	8008100 <lv_obj_class_init_obj>
}
 801a0d8:	0020      	movs	r0, r4
 801a0da:	bd10      	pop	{r4, pc}
 801a0dc:	0801bee8 	.word	0x0801bee8

0801a0e0 <flush_cb>:

/**********************
 *   STATIC FUNCTIONS
 **********************/
static void flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color)
{
 801a0e0:	b530      	push	{r4, r5, lr}
 801a0e2:	0005      	movs	r5, r0
	BSP_LCD_FillRGBRect(0, 1, color, area->x1, area->y1, lv_area_get_width(area), lv_area_get_height(area));
 801a0e4:	2000      	movs	r0, #0
 801a0e6:	5e0b      	ldrsh	r3, [r1, r0]
 801a0e8:	2402      	movs	r4, #2
 801a0ea:	5f08      	ldrsh	r0, [r1, r4]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801a0ec:	88cc      	ldrh	r4, [r1, #6]
{
 801a0ee:	b085      	sub	sp, #20
 801a0f0:	3401      	adds	r4, #1
 801a0f2:	1a24      	subs	r4, r4, r0
	BSP_LCD_FillRGBRect(0, 1, color, area->x1, area->y1, lv_area_get_width(area), lv_area_get_height(area));
 801a0f4:	b224      	sxth	r4, r4
 801a0f6:	9402      	str	r4, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801a0f8:	8889      	ldrh	r1, [r1, #4]
 801a0fa:	9000      	str	r0, [sp, #0]
 801a0fc:	3101      	adds	r1, #1
 801a0fe:	1ac9      	subs	r1, r1, r3
 801a100:	b209      	sxth	r1, r1
 801a102:	9101      	str	r1, [sp, #4]
 801a104:	2000      	movs	r0, #0
 801a106:	2101      	movs	r1, #1
 801a108:	f7e6 ffe4 	bl	80010d4 <BSP_LCD_FillRGBRect>
	BSP_LCD_WaitForTransferToBeDone(0);
 801a10c:	2000      	movs	r0, #0
 801a10e:	f7e7 f857 	bl	80011c0 <BSP_LCD_WaitForTransferToBeDone>
	lv_disp_flush_ready(drv);
 801a112:	0028      	movs	r0, r5
 801a114:	f7f9 fcd2 	bl	8013abc <lv_disp_flush_ready>
}
 801a118:	b005      	add	sp, #20
 801a11a:	bd30      	pop	{r4, r5, pc}

0801a11c <disp_init>:
	lv_disp_draw_buf_init(&draw_buf, buf1, NULL, BUF_SIZE);
 801a11c:	23b4      	movs	r3, #180	; 0xb4
{
 801a11e:	b570      	push	{r4, r5, r6, lr}
	lv_disp_draw_buf_init(&draw_buf, buf1, NULL, BUF_SIZE);
 801a120:	4d0d      	ldr	r5, [pc, #52]	; (801a158 <disp_init+0x3c>)
 801a122:	2200      	movs	r2, #0
 801a124:	490d      	ldr	r1, [pc, #52]	; (801a15c <disp_init+0x40>)
 801a126:	0028      	movs	r0, r5
 801a128:	015b      	lsls	r3, r3, #5
 801a12a:	f7f9 fbfb 	bl	8013924 <lv_disp_draw_buf_init>
	lv_disp_drv_init(&disp_drv);
 801a12e:	4c0c      	ldr	r4, [pc, #48]	; (801a160 <disp_init+0x44>)
 801a130:	0020      	movs	r0, r4
 801a132:	f7f9 fbd3 	bl	80138dc <lv_disp_drv_init>
	disp_drv.hor_res = 240;
 801a136:	4b0b      	ldr	r3, [pc, #44]	; (801a164 <disp_init+0x48>)
	lv_disp_t * disp = lv_disp_drv_register(&disp_drv);
 801a138:	0020      	movs	r0, r4
	disp_drv.hor_res = 240;
 801a13a:	6023      	str	r3, [r4, #0]
	disp_drv.flush_cb = flush_cb;
 801a13c:	4b0a      	ldr	r3, [pc, #40]	; (801a168 <disp_init+0x4c>)
	disp_drv.draw_buf = &draw_buf;
 801a13e:	60e5      	str	r5, [r4, #12]
	disp_drv.flush_cb = flush_cb;
 801a140:	6163      	str	r3, [r4, #20]
	lv_disp_t * disp = lv_disp_drv_register(&disp_drv);
 801a142:	f7f9 fbfd 	bl	8013940 <lv_disp_drv_register>
 801a146:	0004      	movs	r4, r0
	lv_disp_set_theme(disp, lv_theme_basic_init(disp));
 801a148:	f7f8 ff72 	bl	8013030 <lv_theme_basic_init>
 801a14c:	0001      	movs	r1, r0
 801a14e:	0020      	movs	r0, r4
 801a150:	f7ea fab6 	bl	80046c0 <lv_disp_set_theme>
}
 801a154:	bd70      	pop	{r4, r5, r6, pc}
 801a156:	46c0      	nop			; (mov r8, r8)
 801a158:	20007c54 	.word	0x20007c54
 801a15c:	20004f08 	.word	0x20004f08
 801a160:	20007c08 	.word	0x20007c08
 801a164:	014000f0 	.word	0x014000f0
 801a168:	0801a0e1 	.word	0x0801a0e1

0801a16c <joy_read_cb>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void joy_read_cb(lv_indev_drv_t * drv, lv_indev_data_t * data)
{
 801a16c:	b510      	push	{r4, lr}
 801a16e:	b082      	sub	sp, #8
	uint8_t key;
	if(BSP_KEY_GetState(0, &key) == BSP_ERROR_NONE)
 801a170:	466b      	mov	r3, sp
{
 801a172:	000c      	movs	r4, r1
	if(BSP_KEY_GetState(0, &key) == BSP_ERROR_NONE)
 801a174:	2000      	movs	r0, #0
 801a176:	1dd9      	adds	r1, r3, #7
 801a178:	f7e6 fdde 	bl	8000d38 <BSP_KEY_GetState>
 801a17c:	2800      	cmp	r0, #0
 801a17e:	d107      	bne.n	801a190 <joy_read_cb+0x24>
	{
		switch(key)
 801a180:	466b      	mov	r3, sp
 801a182:	79db      	ldrb	r3, [r3, #7]
 801a184:	2b05      	cmp	r3, #5
 801a186:	d805      	bhi.n	801a194 <joy_read_cb+0x28>
 801a188:	4a10      	ldr	r2, [pc, #64]	; (801a1cc <joy_read_cb+0x60>)
 801a18a:	009b      	lsls	r3, r3, #2
 801a18c:	58d3      	ldr	r3, [r2, r3]
 801a18e:	469f      	mov	pc, r3
			break;
		default:
			break;
		}
	} else {
		data->state = LV_INDEV_STATE_RELEASED;
 801a190:	2300      	movs	r3, #0
 801a192:	73a3      	strb	r3, [r4, #14]
	}
}
 801a194:	b002      	add	sp, #8
 801a196:	bd10      	pop	{r4, pc}
			data->key = LV_KEY_RIGHT;
 801a198:	2313      	movs	r3, #19
 801a19a:	6063      	str	r3, [r4, #4]
			data->state = LV_INDEV_STATE_PRESSED;
 801a19c:	3b12      	subs	r3, #18
 801a19e:	73a3      	strb	r3, [r4, #14]
			break;
 801a1a0:	e7f8      	b.n	801a194 <joy_read_cb+0x28>
			data->key = LV_KEY_ENTER;
 801a1a2:	230a      	movs	r3, #10
 801a1a4:	6063      	str	r3, [r4, #4]
			data->state = LV_INDEV_STATE_PRESSED;
 801a1a6:	3b09      	subs	r3, #9
 801a1a8:	73a3      	strb	r3, [r4, #14]
			break;
 801a1aa:	e7f3      	b.n	801a194 <joy_read_cb+0x28>
			data->key = LV_KEY_PREV;
 801a1ac:	230b      	movs	r3, #11
 801a1ae:	6063      	str	r3, [r4, #4]
			data->state = LV_INDEV_STATE_PRESSED;
 801a1b0:	3b0a      	subs	r3, #10
 801a1b2:	73a3      	strb	r3, [r4, #14]
			break;
 801a1b4:	e7ee      	b.n	801a194 <joy_read_cb+0x28>
			data->key = LV_KEY_NEXT;
 801a1b6:	2309      	movs	r3, #9
 801a1b8:	6063      	str	r3, [r4, #4]
			data->state = LV_INDEV_STATE_PRESSED;
 801a1ba:	3b08      	subs	r3, #8
 801a1bc:	73a3      	strb	r3, [r4, #14]
			break;
 801a1be:	e7e9      	b.n	801a194 <joy_read_cb+0x28>
			data->key = LV_KEY_LEFT;
 801a1c0:	2314      	movs	r3, #20
 801a1c2:	6063      	str	r3, [r4, #4]
			data->state = LV_INDEV_STATE_PRESSED;
 801a1c4:	3b13      	subs	r3, #19
 801a1c6:	73a3      	strb	r3, [r4, #14]
			break;
 801a1c8:	e7e4      	b.n	801a194 <joy_read_cb+0x28>
 801a1ca:	46c0      	nop			; (mov r8, r8)
 801a1cc:	0801bf00 	.word	0x0801bf00

0801a1d0 <indev_init>:
{
 801a1d0:	b510      	push	{r4, lr}
	lv_indev_drv_init(&indev_drv);
 801a1d2:	4c07      	ldr	r4, [pc, #28]	; (801a1f0 <indev_init+0x20>)
 801a1d4:	0020      	movs	r0, r4
 801a1d6:	f7f9 fc89 	bl	8013aec <lv_indev_drv_init>
	indev_drv.read_cb = joy_read_cb;
 801a1da:	4b06      	ldr	r3, [pc, #24]	; (801a1f4 <indev_init+0x24>)
	joy_indev = lv_indev_drv_register(&indev_drv);
 801a1dc:	0020      	movs	r0, r4
	indev_drv.read_cb = joy_read_cb;
 801a1de:	6063      	str	r3, [r4, #4]
	indev_drv.type = LV_INDEV_TYPE_KEYPAD;
 801a1e0:	2302      	movs	r3, #2
 801a1e2:	7023      	strb	r3, [r4, #0]
	joy_indev = lv_indev_drv_register(&indev_drv);
 801a1e4:	f7f9 fc92 	bl	8013b0c <lv_indev_drv_register>
 801a1e8:	4b03      	ldr	r3, [pc, #12]	; (801a1f8 <indev_init+0x28>)
 801a1ea:	6018      	str	r0, [r3, #0]
}
 801a1ec:	bd10      	pop	{r4, pc}
 801a1ee:	46c0      	nop			; (mov r8, r8)
 801a1f0:	20007c70 	.word	0x20007c70
 801a1f4:	0801a16d 	.word	0x0801a16d
 801a1f8:	20007c8c 	.word	0x20007c8c

0801a1fc <ui_event_Menu>:
///////////////////// ANIMATIONS ////////////////////
extern lv_indev_t * joy_indev;

///////////////////// FUNCTIONS ////////////////////
void ui_event_Menu(lv_event_t * e)
{
 801a1fc:	b570      	push	{r4, r5, r6, lr}
 801a1fe:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 801a200:	f7ea fd52 	bl	8004ca8 <lv_event_get_code>
 801a204:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 801a206:	0020      	movs	r0, r4
 801a208:	f7ea fd4a 	bl	8004ca0 <lv_event_get_target>
    if(event_code == LV_EVENT_SCREEN_LOADED) {
 801a20c:	2d27      	cmp	r5, #39	; 0x27
 801a20e:	d000      	beq.n	801a212 <ui_event_Menu+0x16>
        lv_indev_set_group(joy_indev, group_main);
    }
}
 801a210:	bd70      	pop	{r4, r5, r6, pc}
        lv_indev_set_group(joy_indev, group_main);
 801a212:	4b03      	ldr	r3, [pc, #12]	; (801a220 <ui_event_Menu+0x24>)
 801a214:	6819      	ldr	r1, [r3, #0]
 801a216:	4b03      	ldr	r3, [pc, #12]	; (801a224 <ui_event_Menu+0x28>)
 801a218:	6818      	ldr	r0, [r3, #0]
 801a21a:	f7eb faa7 	bl	800576c <lv_indev_set_group>
}
 801a21e:	e7f7      	b.n	801a210 <ui_event_Menu+0x14>
 801a220:	20007ca4 	.word	0x20007ca4
 801a224:	20007c8c 	.word	0x20007c8c

0801a228 <ui_event_Aircon>:

void ui_event_Aircon(lv_event_t * e)
{
 801a228:	b570      	push	{r4, r5, r6, lr}
 801a22a:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 801a22c:	f7ea fd3c 	bl	8004ca8 <lv_event_get_code>
 801a230:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 801a232:	0020      	movs	r0, r4
 801a234:	f7ea fd34 	bl	8004ca0 <lv_event_get_target>
    if(event_code == LV_EVENT_SCREEN_LOADED) {
 801a238:	2d27      	cmp	r5, #39	; 0x27
 801a23a:	d000      	beq.n	801a23e <ui_event_Aircon+0x16>
        lv_indev_set_group(joy_indev, group_aircon);
    }
}
 801a23c:	bd70      	pop	{r4, r5, r6, pc}
        lv_indev_set_group(joy_indev, group_aircon);
 801a23e:	4b03      	ldr	r3, [pc, #12]	; (801a24c <ui_event_Aircon+0x24>)
 801a240:	6819      	ldr	r1, [r3, #0]
 801a242:	4b03      	ldr	r3, [pc, #12]	; (801a250 <ui_event_Aircon+0x28>)
 801a244:	6818      	ldr	r0, [r3, #0]
 801a246:	f7eb fa91 	bl	800576c <lv_indev_set_group>
}
 801a24a:	e7f7      	b.n	801a23c <ui_event_Aircon+0x14>
 801a24c:	20007c9c 	.word	0x20007c9c
 801a250:	20007c8c 	.word	0x20007c8c

0801a254 <ui_event_Clock>:

void ui_event_Clock(lv_event_t * e)
{
 801a254:	b570      	push	{r4, r5, r6, lr}
 801a256:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 801a258:	f7ea fd26 	bl	8004ca8 <lv_event_get_code>
 801a25c:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 801a25e:	0020      	movs	r0, r4
 801a260:	f7ea fd1e 	bl	8004ca0 <lv_event_get_target>
    if(event_code == LV_EVENT_SCREEN_LOADED) {
 801a264:	2d27      	cmp	r5, #39	; 0x27
 801a266:	d000      	beq.n	801a26a <ui_event_Clock+0x16>
        lv_indev_set_group(joy_indev, group_clock);
    }
}
 801a268:	bd70      	pop	{r4, r5, r6, pc}
        lv_indev_set_group(joy_indev, group_clock);
 801a26a:	4b03      	ldr	r3, [pc, #12]	; (801a278 <ui_event_Clock+0x24>)
 801a26c:	6819      	ldr	r1, [r3, #0]
 801a26e:	4b03      	ldr	r3, [pc, #12]	; (801a27c <ui_event_Clock+0x28>)
 801a270:	6818      	ldr	r0, [r3, #0]
 801a272:	f7eb fa7b 	bl	800576c <lv_indev_set_group>
}
 801a276:	e7f7      	b.n	801a268 <ui_event_Clock+0x14>
 801a278:	20007ca0 	.word	0x20007ca0
 801a27c:	20007c8c 	.word	0x20007c8c

0801a280 <ui_event_About>:

void ui_event_About(lv_event_t * e)
{
 801a280:	b570      	push	{r4, r5, r6, lr}
 801a282:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 801a284:	f7ea fd10 	bl	8004ca8 <lv_event_get_code>
 801a288:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 801a28a:	0020      	movs	r0, r4
 801a28c:	f7ea fd08 	bl	8004ca0 <lv_event_get_target>
    if(event_code == LV_EVENT_SCREEN_LOADED) {
 801a290:	2d27      	cmp	r5, #39	; 0x27
 801a292:	d000      	beq.n	801a296 <ui_event_About+0x16>
        lv_indev_set_group(joy_indev, group_about);
    }
}
 801a294:	bd70      	pop	{r4, r5, r6, pc}
        lv_indev_set_group(joy_indev, group_about);
 801a296:	4b03      	ldr	r3, [pc, #12]	; (801a2a4 <ui_event_About+0x24>)
 801a298:	6819      	ldr	r1, [r3, #0]
 801a29a:	4b03      	ldr	r3, [pc, #12]	; (801a2a8 <ui_event_About+0x28>)
 801a29c:	6818      	ldr	r0, [r3, #0]
 801a29e:	f7eb fa65 	bl	800576c <lv_indev_set_group>
}
 801a2a2:	e7f7      	b.n	801a294 <ui_event_About+0x14>
 801a2a4:	20007c98 	.word	0x20007c98
 801a2a8:	20007c8c 	.word	0x20007c8c

0801a2ac <ui_event_Button_Aircon>:

void ui_event_Button_Aircon(lv_event_t * e)
{
 801a2ac:	b570      	push	{r4, r5, r6, lr}
 801a2ae:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 801a2b0:	f7ea fcfa 	bl	8004ca8 <lv_event_get_code>
 801a2b4:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 801a2b6:	0020      	movs	r0, r4
 801a2b8:	f7ea fcf2 	bl	8004ca0 <lv_event_get_target>
    if(event_code == LV_EVENT_CLICKED) {
 801a2bc:	2d07      	cmp	r5, #7
 801a2be:	d000      	beq.n	801a2c2 <ui_event_Button_Aircon+0x16>
        _ui_screen_change(ui_AirCon, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
    }
}
 801a2c0:	bd70      	pop	{r4, r5, r6, pc}
        _ui_screen_change(ui_AirCon, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
 801a2c2:	4b04      	ldr	r3, [pc, #16]	; (801a2d4 <ui_event_Button_Aircon+0x28>)
 801a2c4:	2200      	movs	r2, #0
 801a2c6:	6818      	ldr	r0, [r3, #0]
 801a2c8:	2109      	movs	r1, #9
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	f001 f8dc 	bl	801b488 <_ui_screen_change>
}
 801a2d0:	e7f6      	b.n	801a2c0 <ui_event_Button_Aircon+0x14>
 801a2d2:	46c0      	nop			; (mov r8, r8)
 801a2d4:	20007cac 	.word	0x20007cac

0801a2d8 <ui_event_Button_Time>:
void ui_event_Button_Time(lv_event_t * e)
{
 801a2d8:	b570      	push	{r4, r5, r6, lr}
 801a2da:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 801a2dc:	f7ea fce4 	bl	8004ca8 <lv_event_get_code>
 801a2e0:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 801a2e2:	0020      	movs	r0, r4
 801a2e4:	f7ea fcdc 	bl	8004ca0 <lv_event_get_target>
    if(event_code == LV_EVENT_CLICKED) {
 801a2e8:	2d07      	cmp	r5, #7
 801a2ea:	d000      	beq.n	801a2ee <ui_event_Button_Time+0x16>
        _ui_screen_change(ui_SetTime, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
    }
}
 801a2ec:	bd70      	pop	{r4, r5, r6, pc}
        _ui_screen_change(ui_SetTime, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
 801a2ee:	4b04      	ldr	r3, [pc, #16]	; (801a300 <ui_event_Button_Time+0x28>)
 801a2f0:	2200      	movs	r2, #0
 801a2f2:	6818      	ldr	r0, [r3, #0]
 801a2f4:	2109      	movs	r1, #9
 801a2f6:	2300      	movs	r3, #0
 801a2f8:	f001 f8c6 	bl	801b488 <_ui_screen_change>
}
 801a2fc:	e7f6      	b.n	801a2ec <ui_event_Button_Time+0x14>
 801a2fe:	46c0      	nop			; (mov r8, r8)
 801a300:	20007cfc 	.word	0x20007cfc

0801a304 <ui_event_Button_About>:
void ui_event_Button_About(lv_event_t * e)
{
 801a304:	b570      	push	{r4, r5, r6, lr}
 801a306:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 801a308:	f7ea fcce 	bl	8004ca8 <lv_event_get_code>
 801a30c:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 801a30e:	0020      	movs	r0, r4
 801a310:	f7ea fcc6 	bl	8004ca0 <lv_event_get_target>
    if(event_code == LV_EVENT_CLICKED) {
 801a314:	2d07      	cmp	r5, #7
 801a316:	d000      	beq.n	801a31a <ui_event_Button_About+0x16>
        _ui_screen_change(ui_About, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
    }
}
 801a318:	bd70      	pop	{r4, r5, r6, pc}
        _ui_screen_change(ui_About, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
 801a31a:	4b04      	ldr	r3, [pc, #16]	; (801a32c <ui_event_Button_About+0x28>)
 801a31c:	2200      	movs	r2, #0
 801a31e:	6818      	ldr	r0, [r3, #0]
 801a320:	2109      	movs	r1, #9
 801a322:	2300      	movs	r3, #0
 801a324:	f001 f8b0 	bl	801b488 <_ui_screen_change>
}
 801a328:	e7f6      	b.n	801a318 <ui_event_Button_About+0x14>
 801a32a:	46c0      	nop			; (mov r8, r8)
 801a32c:	20007ca8 	.word	0x20007ca8

0801a330 <ui_event_Header_Sub_Back_Back>:
void ui_event_Header_Sub_Back_Back(lv_event_t * e)
{
 801a330:	b570      	push	{r4, r5, r6, lr}
 801a332:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 801a334:	f7ea fcb8 	bl	8004ca8 <lv_event_get_code>
 801a338:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 801a33a:	0020      	movs	r0, r4
 801a33c:	f7ea fcb0 	bl	8004ca0 <lv_event_get_target>
    if(event_code == LV_EVENT_CLICKED) {
 801a340:	2d07      	cmp	r5, #7
 801a342:	d000      	beq.n	801a346 <ui_event_Header_Sub_Back_Back+0x16>
        _ui_screen_change(ui_Menu, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
    }
}
 801a344:	bd70      	pop	{r4, r5, r6, pc}
        _ui_screen_change(ui_Menu, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
 801a346:	4b04      	ldr	r3, [pc, #16]	; (801a358 <ui_event_Header_Sub_Back_Back+0x28>)
 801a348:	2200      	movs	r2, #0
 801a34a:	6818      	ldr	r0, [r3, #0]
 801a34c:	2109      	movs	r1, #9
 801a34e:	2300      	movs	r3, #0
 801a350:	f001 f89a 	bl	801b488 <_ui_screen_change>
}
 801a354:	e7f6      	b.n	801a344 <ui_event_Header_Sub_Back_Back+0x14>
 801a356:	46c0      	nop			; (mov r8, r8)
 801a358:	20007ce8 	.word	0x20007ce8

0801a35c <ui_event_Header_Sub2_Back_Back>:
 801a35c:	b570      	push	{r4, r5, r6, lr}
 801a35e:	0004      	movs	r4, r0
 801a360:	f7ea fca2 	bl	8004ca8 <lv_event_get_code>
 801a364:	0005      	movs	r5, r0
 801a366:	0020      	movs	r0, r4
 801a368:	f7ea fc9a 	bl	8004ca0 <lv_event_get_target>
 801a36c:	2d07      	cmp	r5, #7
 801a36e:	d000      	beq.n	801a372 <ui_event_Header_Sub2_Back_Back+0x16>
 801a370:	bd70      	pop	{r4, r5, r6, pc}
 801a372:	4b04      	ldr	r3, [pc, #16]	; (801a384 <ui_event_Header_Sub2_Back_Back+0x28>)
 801a374:	2200      	movs	r2, #0
 801a376:	6818      	ldr	r0, [r3, #0]
 801a378:	2109      	movs	r1, #9
 801a37a:	2300      	movs	r3, #0
 801a37c:	f001 f884 	bl	801b488 <_ui_screen_change>
 801a380:	e7f6      	b.n	801a370 <ui_event_Header_Sub2_Back_Back+0x14>
 801a382:	46c0      	nop			; (mov r8, r8)
 801a384:	20007ce8 	.word	0x20007ce8

0801a388 <ui_event_Header_Sub1_Back_Back>:
 801a388:	b570      	push	{r4, r5, r6, lr}
 801a38a:	0004      	movs	r4, r0
 801a38c:	f7ea fc8c 	bl	8004ca8 <lv_event_get_code>
 801a390:	0005      	movs	r5, r0
 801a392:	0020      	movs	r0, r4
 801a394:	f7ea fc84 	bl	8004ca0 <lv_event_get_target>
 801a398:	2d07      	cmp	r5, #7
 801a39a:	d000      	beq.n	801a39e <ui_event_Header_Sub1_Back_Back+0x16>
 801a39c:	bd70      	pop	{r4, r5, r6, pc}
 801a39e:	4b04      	ldr	r3, [pc, #16]	; (801a3b0 <ui_event_Header_Sub1_Back_Back+0x28>)
 801a3a0:	2200      	movs	r2, #0
 801a3a2:	6818      	ldr	r0, [r3, #0]
 801a3a4:	2109      	movs	r1, #9
 801a3a6:	2300      	movs	r3, #0
 801a3a8:	f001 f86e 	bl	801b488 <_ui_screen_change>
 801a3ac:	e7f6      	b.n	801a39c <ui_event_Header_Sub1_Back_Back+0x14>
 801a3ae:	46c0      	nop			; (mov r8, r8)
 801a3b0:	20007ce8 	.word	0x20007ce8

0801a3b4 <ui_Menu_screen_init>:
    }
}

///////////////////// SCREENS ////////////////////
void ui_Menu_screen_init(void)
{
 801a3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ui_Menu = lv_obj_create(NULL);
 801a3b6:	2000      	movs	r0, #0
 801a3b8:	f7ed fd10 	bl	8007ddc <lv_obj_create>
 801a3bc:	4c37      	ldr	r4, [pc, #220]	; (801a49c <ui_Menu_screen_init+0xe8>)
    lv_obj_clear_flag(ui_Menu, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801a3be:	2110      	movs	r1, #16
    ui_Menu = lv_obj_create(NULL);
 801a3c0:	6020      	str	r0, [r4, #0]
    lv_obj_clear_flag(ui_Menu, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801a3c2:	f7ed fd53 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_set_style_bg_img_tiled(ui_Menu, true, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	2101      	movs	r1, #1
 801a3ca:	6820      	ldr	r0, [r4, #0]
 801a3cc:	f7f3 fa3e 	bl	800d84c <lv_obj_set_style_bg_img_tiled>

    ui_Header = ui_Header_create(ui_Menu);
 801a3d0:	6820      	ldr	r0, [r4, #0]
 801a3d2:	f000 fdc1 	bl	801af58 <ui_Header_create>
 801a3d6:	4d32      	ldr	r5, [pc, #200]	; (801a4a0 <ui_Menu_screen_init+0xec>)
    lv_obj_set_x(ui_Header, 0);
 801a3d8:	2100      	movs	r1, #0
    ui_Header = ui_Header_create(ui_Menu);
 801a3da:	6028      	str	r0, [r5, #0]
    lv_obj_set_x(ui_Header, 0);
 801a3dc:	f7ee fb4e 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_Header, 0);
 801a3e0:	2100      	movs	r1, #0
 801a3e2:	6828      	ldr	r0, [r5, #0]
 801a3e4:	f7ee fb62 	bl	8008aac <lv_obj_set_y>

    ui_Button_Aircon = ui_Button_create(ui_Menu);
 801a3e8:	6820      	ldr	r0, [r4, #0]
 801a3ea:	f000 fc5f 	bl	801acac <ui_Button_create>
 801a3ee:	4f2d      	ldr	r7, [pc, #180]	; (801a4a4 <ui_Menu_screen_init+0xf0>)
    lv_obj_set_x(ui_Button_Aircon, 0);
 801a3f0:	2100      	movs	r1, #0
    ui_Button_Aircon = ui_Button_create(ui_Menu);
 801a3f2:	6038      	str	r0, [r7, #0]
    lv_obj_set_x(ui_Button_Aircon, 0);
 801a3f4:	f7ee fb42 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_Button_Aircon, 39);
 801a3f8:	6838      	ldr	r0, [r7, #0]
 801a3fa:	2127      	movs	r1, #39	; 0x27
 801a3fc:	f7ee fb56 	bl	8008aac <lv_obj_set_y>

    ui_Button_Time = ui_Button_create(ui_Menu);
 801a400:	6820      	ldr	r0, [r4, #0]
 801a402:	f000 fc53 	bl	801acac <ui_Button_create>
 801a406:	4e28      	ldr	r6, [pc, #160]	; (801a4a8 <ui_Menu_screen_init+0xf4>)
    lv_obj_set_x(ui_Button_Time, 0);
 801a408:	2100      	movs	r1, #0
    ui_Button_Time = ui_Button_create(ui_Menu);
 801a40a:	6030      	str	r0, [r6, #0]
    lv_obj_set_x(ui_Button_Time, 0);
 801a40c:	f7ee fb36 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_Button_Time, 132);
 801a410:	6830      	ldr	r0, [r6, #0]
 801a412:	2184      	movs	r1, #132	; 0x84
 801a414:	f7ee fb4a 	bl	8008aac <lv_obj_set_y>

    lv_label_set_text(ui_comp_get_child(ui_Button_Time, UI_COMP_BUTTON_BUTTON_TEXT), "Set Time");
 801a418:	6830      	ldr	r0, [r6, #0]
 801a41a:	2105      	movs	r1, #5
 801a41c:	f000 fc36 	bl	801ac8c <ui_comp_get_child>
 801a420:	4922      	ldr	r1, [pc, #136]	; (801a4ac <ui_Menu_screen_init+0xf8>)
 801a422:	f7fe fe31 	bl	8019088 <lv_label_set_text>

    lv_img_set_src(ui_comp_get_child(ui_Button_Time, UI_COMP_BUTTON_BUTTON_IMAGE), &ui_img_time_png);
 801a426:	6830      	ldr	r0, [r6, #0]
 801a428:	2106      	movs	r1, #6
 801a42a:	f000 fc2f 	bl	801ac8c <ui_comp_get_child>
 801a42e:	4920      	ldr	r1, [pc, #128]	; (801a4b0 <ui_Menu_screen_init+0xfc>)
 801a430:	f7fd fb92 	bl	8017b58 <lv_img_set_src>

    ui_Button_About = ui_Button_create(ui_Menu);
 801a434:	6820      	ldr	r0, [r4, #0]
 801a436:	f000 fc39 	bl	801acac <ui_Button_create>
 801a43a:	4d1e      	ldr	r5, [pc, #120]	; (801a4b4 <ui_Menu_screen_init+0x100>)
    lv_obj_set_x(ui_Button_About, 0);
 801a43c:	2100      	movs	r1, #0
    ui_Button_About = ui_Button_create(ui_Menu);
 801a43e:	6028      	str	r0, [r5, #0]
    lv_obj_set_x(ui_Button_About, 0);
 801a440:	f7ee fb1c 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_Button_About, 225);
 801a444:	6828      	ldr	r0, [r5, #0]
 801a446:	21e1      	movs	r1, #225	; 0xe1
 801a448:	f7ee fb30 	bl	8008aac <lv_obj_set_y>

    lv_label_set_text(ui_comp_get_child(ui_Button_About, UI_COMP_BUTTON_BUTTON_TEXT), "About");
 801a44c:	6828      	ldr	r0, [r5, #0]
 801a44e:	2105      	movs	r1, #5
 801a450:	f000 fc1c 	bl	801ac8c <ui_comp_get_child>
 801a454:	4918      	ldr	r1, [pc, #96]	; (801a4b8 <ui_Menu_screen_init+0x104>)
 801a456:	f7fe fe17 	bl	8019088 <lv_label_set_text>

    lv_img_set_src(ui_comp_get_child(ui_Button_About, UI_COMP_BUTTON_BUTTON_IMAGE), &ui_img_info_png);
 801a45a:	6828      	ldr	r0, [r5, #0]
 801a45c:	2106      	movs	r1, #6
 801a45e:	f000 fc15 	bl	801ac8c <ui_comp_get_child>
 801a462:	4916      	ldr	r1, [pc, #88]	; (801a4bc <ui_Menu_screen_init+0x108>)
 801a464:	f7fd fb78 	bl	8017b58 <lv_img_set_src>

    lv_obj_add_event_cb(ui_Button_Aircon, ui_event_Button_Aircon, LV_EVENT_ALL, NULL);
 801a468:	6838      	ldr	r0, [r7, #0]
 801a46a:	2300      	movs	r3, #0
 801a46c:	2200      	movs	r2, #0
 801a46e:	4914      	ldr	r1, [pc, #80]	; (801a4c0 <ui_Menu_screen_init+0x10c>)
 801a470:	f7ea fc42 	bl	8004cf8 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(ui_Button_Time, ui_event_Button_Time, LV_EVENT_ALL, NULL);
 801a474:	6830      	ldr	r0, [r6, #0]
 801a476:	2300      	movs	r3, #0
 801a478:	2200      	movs	r2, #0
 801a47a:	4912      	ldr	r1, [pc, #72]	; (801a4c4 <ui_Menu_screen_init+0x110>)
 801a47c:	f7ea fc3c 	bl	8004cf8 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(ui_Button_About, ui_event_Button_About, LV_EVENT_ALL, NULL);
 801a480:	6828      	ldr	r0, [r5, #0]
 801a482:	2300      	movs	r3, #0
 801a484:	2200      	movs	r2, #0
 801a486:	4910      	ldr	r1, [pc, #64]	; (801a4c8 <ui_Menu_screen_init+0x114>)
 801a488:	f7ea fc36 	bl	8004cf8 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(ui_Menu, ui_event_Menu, LV_EVENT_ALL, NULL);
 801a48c:	2300      	movs	r3, #0
 801a48e:	2200      	movs	r2, #0
 801a490:	6820      	ldr	r0, [r4, #0]
 801a492:	490e      	ldr	r1, [pc, #56]	; (801a4cc <ui_Menu_screen_init+0x118>)
 801a494:	f7ea fc30 	bl	8004cf8 <lv_obj_add_event_cb>

}
 801a498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a49a:	46c0      	nop			; (mov r8, r8)
 801a49c:	20007ce8 	.word	0x20007ce8
 801a4a0:	20007cc4 	.word	0x20007cc4
 801a4a4:	20007cb4 	.word	0x20007cb4
 801a4a8:	20007cb8 	.word	0x20007cb8
 801a4ac:	0801d5c8 	.word	0x0801d5c8
 801a4b0:	0801f070 	.word	0x0801f070
 801a4b4:	20007cb0 	.word	0x20007cb0
 801a4b8:	0801d5d4 	.word	0x0801d5d4
 801a4bc:	0801eecc 	.word	0x0801eecc
 801a4c0:	0801a2ad 	.word	0x0801a2ad
 801a4c4:	0801a2d9 	.word	0x0801a2d9
 801a4c8:	0801a305 	.word	0x0801a305
 801a4cc:	0801a1fd 	.word	0x0801a1fd

0801a4d0 <ui_AirCon_screen_init>:
void ui_AirCon_screen_init(void)
{
 801a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ui_AirCon = lv_obj_create(NULL);
 801a4d2:	2000      	movs	r0, #0
 801a4d4:	f7ed fc82 	bl	8007ddc <lv_obj_create>
 801a4d8:	4f96      	ldr	r7, [pc, #600]	; (801a734 <ui_AirCon_screen_init+0x264>)
 801a4da:	4d97      	ldr	r5, [pc, #604]	; (801a738 <ui_AirCon_screen_init+0x268>)
    lv_obj_clear_flag(ui_AirCon, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801a4dc:	2110      	movs	r1, #16
    ui_AirCon = lv_obj_create(NULL);
 801a4de:	6028      	str	r0, [r5, #0]
    lv_obj_clear_flag(ui_AirCon, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801a4e0:	f7ed fcc4 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_set_style_bg_color(ui_AirCon, lv_color_hex(0x191F2B), LV_PART_MAIN | LV_STATE_DEFAULT);
 801a4e4:	2200      	movs	r2, #0
 801a4e6:	6828      	ldr	r0, [r5, #0]
 801a4e8:	1c39      	adds	r1, r7, #0
 801a4ea:	f7f3 f97f 	bl	800d7ec <lv_obj_set_style_bg_color>

    ui_Header_Sub = ui_Header_Sub_create(ui_AirCon);
 801a4ee:	6828      	ldr	r0, [r5, #0]
 801a4f0:	f000 fc86 	bl	801ae00 <ui_Header_Sub_create>
 801a4f4:	4e91      	ldr	r6, [pc, #580]	; (801a73c <ui_AirCon_screen_init+0x26c>)
    lv_obj_set_x(ui_Header_Sub, 0);
 801a4f6:	2100      	movs	r1, #0
    ui_Header_Sub = ui_Header_Sub_create(ui_AirCon);
 801a4f8:	6030      	str	r0, [r6, #0]
    lv_obj_set_x(ui_Header_Sub, 0);
 801a4fa:	f7ee fabf 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_Header_Sub, 0);
 801a4fe:	6830      	ldr	r0, [r6, #0]
 801a500:	2100      	movs	r1, #0
 801a502:	f7ee fad3 	bl	8008aac <lv_obj_set_y>

    ui_List_Switch1 = ui_List_Switch_create(ui_AirCon);
 801a506:	6828      	ldr	r0, [r5, #0]
 801a508:	f000 fe3e 	bl	801b188 <ui_List_Switch_create>
 801a50c:	4c8c      	ldr	r4, [pc, #560]	; (801a740 <ui_AirCon_screen_init+0x270>)
    lv_obj_set_x(ui_List_Switch1, 0);
 801a50e:	2100      	movs	r1, #0
    ui_List_Switch1 = ui_List_Switch_create(ui_AirCon);
 801a510:	6020      	str	r0, [r4, #0]
    lv_obj_set_x(ui_List_Switch1, 0);
 801a512:	f7ee fab3 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_List_Switch1, 35);
 801a516:	2123      	movs	r1, #35	; 0x23
 801a518:	6820      	ldr	r0, [r4, #0]
 801a51a:	f7ee fac7 	bl	8008aac <lv_obj_set_y>

    ui_List_Switch2 = ui_List_Switch_create(ui_AirCon);
 801a51e:	6828      	ldr	r0, [r5, #0]
 801a520:	f000 fe32 	bl	801b188 <ui_List_Switch_create>
 801a524:	4c87      	ldr	r4, [pc, #540]	; (801a744 <ui_AirCon_screen_init+0x274>)
    lv_obj_set_x(ui_List_Switch2, 0);
 801a526:	2100      	movs	r1, #0
    ui_List_Switch2 = ui_List_Switch_create(ui_AirCon);
 801a528:	6020      	str	r0, [r4, #0]
    lv_obj_set_x(ui_List_Switch2, 0);
 801a52a:	f7ee faa7 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_List_Switch2, 85);
 801a52e:	6820      	ldr	r0, [r4, #0]
 801a530:	2155      	movs	r1, #85	; 0x55
 801a532:	f7ee fabb 	bl	8008aac <lv_obj_set_y>

    lv_label_set_text(ui_comp_get_child(ui_List_Switch2, UI_COMP_LIST_SWITCH_LIST_TEXT), "Turbo");
 801a536:	2101      	movs	r1, #1
 801a538:	6820      	ldr	r0, [r4, #0]
 801a53a:	f000 fba7 	bl	801ac8c <ui_comp_get_child>
 801a53e:	4982      	ldr	r1, [pc, #520]	; (801a748 <ui_AirCon_screen_init+0x278>)
 801a540:	f7fe fda2 	bl	8019088 <lv_label_set_text>

    lv_obj_add_state(ui_comp_get_child(ui_List_Switch2, UI_COMP_LIST_SWITCH_SWITCH1), LV_STATE_CHECKED);       /// States
 801a544:	2102      	movs	r1, #2
 801a546:	6820      	ldr	r0, [r4, #0]
 801a548:	f000 fba0 	bl	801ac8c <ui_comp_get_child>
 801a54c:	2101      	movs	r1, #1
 801a54e:	f7ed fccf 	bl	8007ef0 <lv_obj_add_state>
    lv_obj_clear_state(ui_comp_get_child(ui_List_Switch2, UI_COMP_LIST_SWITCH_SWITCH1), LV_STATE_CHECKED);     /// States
 801a552:	2102      	movs	r1, #2
 801a554:	6820      	ldr	r0, [r4, #0]
 801a556:	f000 fb99 	bl	801ac8c <ui_comp_get_child>
 801a55a:	2101      	movs	r1, #1
 801a55c:	f7ed fcd0 	bl	8007f00 <lv_obj_clear_state>

    ui_List_Switch3 = ui_List_Switch_create(ui_AirCon);
 801a560:	6828      	ldr	r0, [r5, #0]
 801a562:	f000 fe11 	bl	801b188 <ui_List_Switch_create>
 801a566:	4c79      	ldr	r4, [pc, #484]	; (801a74c <ui_AirCon_screen_init+0x27c>)
    lv_obj_set_x(ui_List_Switch3, 0);
 801a568:	2100      	movs	r1, #0
    ui_List_Switch3 = ui_List_Switch_create(ui_AirCon);
 801a56a:	6020      	str	r0, [r4, #0]
    lv_obj_set_x(ui_List_Switch3, 0);
 801a56c:	f7ee fa86 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_List_Switch3, 135);
 801a570:	6820      	ldr	r0, [r4, #0]
 801a572:	2187      	movs	r1, #135	; 0x87
 801a574:	f7ee fa9a 	bl	8008aac <lv_obj_set_y>

    lv_label_set_text(ui_comp_get_child(ui_List_Switch3, UI_COMP_LIST_SWITCH_LIST_TEXT), "Fan Swing");
 801a578:	2101      	movs	r1, #1
 801a57a:	6820      	ldr	r0, [r4, #0]
 801a57c:	f000 fb86 	bl	801ac8c <ui_comp_get_child>
 801a580:	4973      	ldr	r1, [pc, #460]	; (801a750 <ui_AirCon_screen_init+0x280>)
 801a582:	f7fe fd81 	bl	8019088 <lv_label_set_text>

    lv_obj_add_flag(ui_comp_get_child(ui_List_Switch3, UI_COMP_LIST_SWITCH_SWITCH1),
 801a586:	2102      	movs	r1, #2
 801a588:	6820      	ldr	r0, [r4, #0]
 801a58a:	f000 fb7f 	bl	801ac8c <ui_comp_get_child>
 801a58e:	2103      	movs	r1, #3
 801a590:	f7ed fc30 	bl	8007df4 <lv_obj_add_flag>
                    LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_CLICKABLE);    /// Flags

    ui_Dropdown1 = lv_dropdown_create(ui_List_Switch3);
 801a594:	6820      	ldr	r0, [r4, #0]
 801a596:	f7fc fe75 	bl	8017284 <lv_dropdown_create>
 801a59a:	4c6e      	ldr	r4, [pc, #440]	; (801a754 <ui_AirCon_screen_init+0x284>)
    lv_dropdown_set_options(ui_Dropdown1, "Off\nLow\nMid\nHigh");
 801a59c:	496e      	ldr	r1, [pc, #440]	; (801a758 <ui_AirCon_screen_init+0x288>)
    ui_Dropdown1 = lv_dropdown_create(ui_List_Switch3);
 801a59e:	6020      	str	r0, [r4, #0]
    lv_dropdown_set_options(ui_Dropdown1, "Off\nLow\nMid\nHigh");
 801a5a0:	f7fc fe7c 	bl	801729c <lv_dropdown_set_options>
    lv_obj_set_width(ui_Dropdown1, 100);
 801a5a4:	6820      	ldr	r0, [r4, #0]
 801a5a6:	2164      	movs	r1, #100	; 0x64
 801a5a8:	f7ee fa98 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_height(ui_Dropdown1, 26);
 801a5ac:	6820      	ldr	r0, [r4, #0]
 801a5ae:	211a      	movs	r1, #26
 801a5b0:	f7ee faac 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_x(ui_Dropdown1, 0);
 801a5b4:	6820      	ldr	r0, [r4, #0]
 801a5b6:	2100      	movs	r1, #0
 801a5b8:	f7ee fa60 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_Dropdown1, -1);
 801a5bc:	2101      	movs	r1, #1
 801a5be:	6820      	ldr	r0, [r4, #0]
 801a5c0:	4249      	negs	r1, r1
 801a5c2:	f7ee fa73 	bl	8008aac <lv_obj_set_y>
    lv_obj_set_align(ui_Dropdown1, LV_ALIGN_RIGHT_MID);
 801a5c6:	6820      	ldr	r0, [r4, #0]
 801a5c8:	2108      	movs	r1, #8
 801a5ca:	f7ee fae5 	bl	8008b98 <lv_obj_set_align>
    lv_obj_add_flag(ui_Dropdown1, LV_OBJ_FLAG_SCROLL_ON_FOCUS);     /// Flags
 801a5ce:	2180      	movs	r1, #128	; 0x80
 801a5d0:	6820      	ldr	r0, [r4, #0]
 801a5d2:	00c9      	lsls	r1, r1, #3
 801a5d4:	f7ed fc0e 	bl	8007df4 <lv_obj_add_flag>
    lv_obj_set_style_text_color(ui_Dropdown1, lv_color_hex(0x181C29), LV_PART_MAIN | LV_STATE_DEFAULT);
 801a5d8:	6820      	ldr	r0, [r4, #0]
 801a5da:	1c39      	adds	r1, r7, #0
 801a5dc:	2200      	movs	r2, #0
 801a5de:	f7f3 f975 	bl	800d8cc <lv_obj_set_style_text_color>
    lv_obj_set_style_text_opa(ui_Dropdown1, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a5e2:	6820      	ldr	r0, [r4, #0]
 801a5e4:	2200      	movs	r2, #0
 801a5e6:	21ff      	movs	r1, #255	; 0xff
 801a5e8:	f7f3 f97c 	bl	800d8e4 <lv_obj_set_style_text_opa>
    lv_obj_set_style_pad_left(ui_Dropdown1, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a5ec:	6820      	ldr	r0, [r4, #0]
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	2105      	movs	r1, #5
 801a5f2:	f7f3 f8eb 	bl	800d7cc <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(ui_Dropdown1, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a5f6:	6820      	ldr	r0, [r4, #0]
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	2105      	movs	r1, #5
 801a5fc:	f7f3 f8ee 	bl	800d7dc <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(ui_Dropdown1, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a600:	6820      	ldr	r0, [r4, #0]
 801a602:	2200      	movs	r2, #0
 801a604:	2105      	movs	r1, #5
 801a606:	f7f3 f8d1 	bl	800d7ac <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(ui_Dropdown1, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a60a:	6820      	ldr	r0, [r4, #0]
 801a60c:	2200      	movs	r2, #0
 801a60e:	2100      	movs	r1, #0
 801a610:	f7f3 f8d4 	bl	800d7bc <lv_obj_set_style_pad_bottom>

    lv_obj_set_style_outline_color(ui_Dropdown1, lv_color_hex(0xe0a721), LV_PART_MAIN | LV_STATE_FOCUSED);
 801a614:	4b51      	ldr	r3, [pc, #324]	; (801a75c <ui_AirCon_screen_init+0x28c>)
 801a616:	6820      	ldr	r0, [r4, #0]
 801a618:	1c19      	adds	r1, r3, #0
 801a61a:	2202      	movs	r2, #2
 801a61c:	f7f3 f942 	bl	800d8a4 <lv_obj_set_style_outline_color>
    lv_obj_set_style_outline_width(ui_Dropdown1, 2, LV_PART_MAIN | LV_STATE_FOCUSED);
 801a620:	6820      	ldr	r0, [r4, #0]
 801a622:	2202      	movs	r2, #2
 801a624:	2102      	movs	r1, #2
 801a626:	f7f3 f935 	bl	800d894 <lv_obj_set_style_outline_width>
    lv_obj_set_style_outline_pad(ui_Dropdown1, 3, LV_PART_MAIN | LV_STATE_FOCUSED);
 801a62a:	2202      	movs	r2, #2
 801a62c:	2103      	movs	r1, #3
 801a62e:	6820      	ldr	r0, [r4, #0]
 801a630:	f7f3 f944 	bl	800d8bc <lv_obj_set_style_outline_pad>

    lv_obj_set_style_text_color(lv_dropdown_get_list(ui_Dropdown1), lv_color_hex(0x181C29), LV_PART_MAIN | LV_STATE_DEFAULT);
 801a634:	6820      	ldr	r0, [r4, #0]
 801a636:	f7fc fe85 	bl	8017344 <lv_dropdown_get_list>
 801a63a:	1c39      	adds	r1, r7, #0
 801a63c:	2200      	movs	r2, #0
 801a63e:	f7f3 f945 	bl	800d8cc <lv_obj_set_style_text_color>
    lv_obj_set_style_text_line_space(lv_dropdown_get_list(ui_Dropdown1), 8, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a642:	6820      	ldr	r0, [r4, #0]
 801a644:	f7fc fe7e 	bl	8017344 <lv_dropdown_get_list>
 801a648:	2200      	movs	r2, #0
 801a64a:	2108      	movs	r1, #8
 801a64c:	f7f3 f95a 	bl	800d904 <lv_obj_set_style_text_line_space>
    lv_obj_set_style_pad_hor(lv_dropdown_get_list(ui_Dropdown1), 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a650:	6820      	ldr	r0, [r4, #0]
 801a652:	f7fc fe77 	bl	8017344 <lv_dropdown_get_list>
 801a656:	0007      	movs	r7, r0
    lv_obj_set_style_pad_bottom(obj, value, selector);
}

static inline void lv_obj_set_style_pad_hor(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_obj_set_style_pad_left(obj, value, selector);
 801a658:	2200      	movs	r2, #0
 801a65a:	2105      	movs	r1, #5
 801a65c:	f7f3 f8b6 	bl	800d7cc <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(obj, value, selector);
 801a660:	2200      	movs	r2, #0
 801a662:	2105      	movs	r1, #5
 801a664:	0038      	movs	r0, r7
 801a666:	f7f3 f8b9 	bl	800d7dc <lv_obj_set_style_pad_right>
    lv_obj_set_style_size(lv_dropdown_get_list(ui_Dropdown1), 3, LV_PART_SCROLLBAR);
 801a66a:	6820      	ldr	r0, [r4, #0]
 801a66c:	f7fc fe6a 	bl	8017344 <lv_dropdown_get_list>
    lv_obj_set_style_pad_column(obj, value, selector);
}

static inline void lv_obj_set_style_size(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_obj_set_style_width(obj, value, selector);
 801a670:	2780      	movs	r7, #128	; 0x80
 801a672:	0004      	movs	r4, r0
 801a674:	027f      	lsls	r7, r7, #9
 801a676:	003a      	movs	r2, r7
 801a678:	2103      	movs	r1, #3
 801a67a:	f7f3 f86f 	bl	800d75c <lv_obj_set_style_width>
    lv_obj_set_style_height(obj, value, selector);
 801a67e:	003a      	movs	r2, r7
 801a680:	2103      	movs	r1, #3
 801a682:	0020      	movs	r0, r4
 801a684:	f7f3 f872 	bl	800d76c <lv_obj_set_style_height>


    ui_List_Switch4 = ui_List_Switch_create(ui_AirCon);
 801a688:	6828      	ldr	r0, [r5, #0]
 801a68a:	f000 fd7d 	bl	801b188 <ui_List_Switch_create>
 801a68e:	4c34      	ldr	r4, [pc, #208]	; (801a760 <ui_AirCon_screen_init+0x290>)
    lv_obj_set_height(ui_List_Switch4, 137);
 801a690:	2189      	movs	r1, #137	; 0x89
    ui_List_Switch4 = ui_List_Switch_create(ui_AirCon);
 801a692:	6020      	str	r0, [r4, #0]
    lv_obj_set_height(ui_List_Switch4, 137);
 801a694:	f7ee fa3a 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_width(ui_List_Switch4, lv_pct(100));
 801a698:	6820      	ldr	r0, [r4, #0]
 801a69a:	4932      	ldr	r1, [pc, #200]	; (801a764 <ui_AirCon_screen_init+0x294>)
 801a69c:	f7ee fa1e 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_x(ui_List_Switch4, 0);
 801a6a0:	6820      	ldr	r0, [r4, #0]
 801a6a2:	2100      	movs	r1, #0
 801a6a4:	f7ee f9ea 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_List_Switch4, 185);
 801a6a8:	6820      	ldr	r0, [r4, #0]
 801a6aa:	21b9      	movs	r1, #185	; 0xb9
 801a6ac:	f7ee f9fe 	bl	8008aac <lv_obj_set_y>
    lv_obj_set_style_pad_left(ui_List_Switch4, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a6b0:	6820      	ldr	r0, [r4, #0]
 801a6b2:	2200      	movs	r2, #0
 801a6b4:	210a      	movs	r1, #10
 801a6b6:	f7f3 f889 	bl	800d7cc <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(ui_List_Switch4, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a6ba:	6820      	ldr	r0, [r4, #0]
 801a6bc:	2200      	movs	r2, #0
 801a6be:	210a      	movs	r1, #10
 801a6c0:	f7f3 f88c 	bl	800d7dc <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(ui_List_Switch4, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a6c4:	6820      	ldr	r0, [r4, #0]
 801a6c6:	2200      	movs	r2, #0
 801a6c8:	210a      	movs	r1, #10
 801a6ca:	f7f3 f86f 	bl	800d7ac <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(ui_List_Switch4, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	6820      	ldr	r0, [r4, #0]
 801a6d2:	210a      	movs	r1, #10
 801a6d4:	f7f3 f872 	bl	800d7bc <lv_obj_set_style_pad_bottom>

    lv_obj_set_align(ui_comp_get_child(ui_List_Switch4, UI_COMP_LIST_SWITCH_LIST_TEXT), LV_ALIGN_TOP_MID);
 801a6d8:	2101      	movs	r1, #1
 801a6da:	6820      	ldr	r0, [r4, #0]
 801a6dc:	f000 fad6 	bl	801ac8c <ui_comp_get_child>
 801a6e0:	2102      	movs	r1, #2
 801a6e2:	f7ee fa59 	bl	8008b98 <lv_obj_set_align>
    lv_label_set_text(ui_comp_get_child(ui_List_Switch4, UI_COMP_LIST_SWITCH_LIST_TEXT), "Mode selection");
 801a6e6:	2101      	movs	r1, #1
 801a6e8:	6820      	ldr	r0, [r4, #0]
 801a6ea:	f000 facf 	bl	801ac8c <ui_comp_get_child>
 801a6ee:	491e      	ldr	r1, [pc, #120]	; (801a768 <ui_AirCon_screen_init+0x298>)
 801a6f0:	f7fe fcca 	bl	8019088 <lv_label_set_text>

    lv_obj_add_flag(ui_comp_get_child(ui_List_Switch4, UI_COMP_LIST_SWITCH_SWITCH1),
 801a6f4:	2102      	movs	r1, #2
 801a6f6:	6820      	ldr	r0, [r4, #0]
 801a6f8:	f000 fac8 	bl	801ac8c <ui_comp_get_child>
 801a6fc:	2103      	movs	r1, #3
 801a6fe:	f7ed fb79 	bl	8007df4 <lv_obj_add_flag>
                    LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_CLICKABLE);    /// Flags

    ui_Roller = ui_Roller_create(ui_List_Switch4);
 801a702:	6820      	ldr	r0, [r4, #0]
 801a704:	f000 fe4a 	bl	801b39c <ui_Roller_create>
 801a708:	4c18      	ldr	r4, [pc, #96]	; (801a76c <ui_AirCon_screen_init+0x29c>)
    lv_obj_set_x(ui_Roller, 0);
 801a70a:	2100      	movs	r1, #0
    ui_Roller = ui_Roller_create(ui_List_Switch4);
 801a70c:	6020      	str	r0, [r4, #0]
    lv_obj_set_x(ui_Roller, 0);
 801a70e:	f7ee f9b5 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_Roller, 0);
 801a712:	6820      	ldr	r0, [r4, #0]
 801a714:	2100      	movs	r1, #0
 801a716:	f7ee f9c9 	bl	8008aac <lv_obj_set_y>

    lv_obj_add_event_cb(ui_Header_Sub, ui_event_Header_Sub_Back_Back,
 801a71a:	6830      	ldr	r0, [r6, #0]
 801a71c:	2300      	movs	r3, #0
 801a71e:	2200      	movs	r2, #0
 801a720:	4913      	ldr	r1, [pc, #76]	; (801a770 <ui_AirCon_screen_init+0x2a0>)
 801a722:	f7ea fae9 	bl	8004cf8 <lv_obj_add_event_cb>
                        LV_EVENT_ALL, NULL);

    lv_obj_add_event_cb(ui_AirCon, ui_event_Aircon, LV_EVENT_ALL, NULL);
 801a726:	6828      	ldr	r0, [r5, #0]
 801a728:	2300      	movs	r3, #0
 801a72a:	2200      	movs	r2, #0
 801a72c:	4911      	ldr	r1, [pc, #68]	; (801a774 <ui_AirCon_screen_init+0x2a4>)
 801a72e:	f7ea fae3 	bl	8004cf8 <lv_obj_add_event_cb>

}
 801a732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a734:	000018e5 	.word	0x000018e5
 801a738:	20007cac 	.word	0x20007cac
 801a73c:	20007cc8 	.word	0x20007cc8
 801a740:	20007cd4 	.word	0x20007cd4
 801a744:	20007cd8 	.word	0x20007cd8
 801a748:	0801d5dc 	.word	0x0801d5dc
 801a74c:	20007cdc 	.word	0x20007cdc
 801a750:	0801d5e4 	.word	0x0801d5e4
 801a754:	20007cbc 	.word	0x20007cbc
 801a758:	0801d5f0 	.word	0x0801d5f0
 801a75c:	ffffe524 	.word	0xffffe524
 801a760:	20007ce0 	.word	0x20007ce0
 801a764:	00002064 	.word	0x00002064
 801a768:	0801d604 	.word	0x0801d604
 801a76c:	20007cf0 	.word	0x20007cf0
 801a770:	0801a331 	.word	0x0801a331
 801a774:	0801a229 	.word	0x0801a229

0801a778 <ui_SetTime_screen_init>:
void ui_SetTime_screen_init(void)
{
 801a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a77a:	46ce      	mov	lr, r9
 801a77c:	4647      	mov	r7, r8
    ui_SetTime = lv_obj_create(NULL);
 801a77e:	2000      	movs	r0, #0
{
 801a780:	b580      	push	{r7, lr}
    ui_SetTime = lv_obj_create(NULL);
 801a782:	f7ed fb2b 	bl	8007ddc <lv_obj_create>
 801a786:	4db4      	ldr	r5, [pc, #720]	; (801aa58 <ui_SetTime_screen_init+0x2e0>)
 801a788:	4fb4      	ldr	r7, [pc, #720]	; (801aa5c <ui_SetTime_screen_init+0x2e4>)
    lv_obj_clear_flag(ui_SetTime, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801a78a:	2110      	movs	r1, #16
    ui_SetTime = lv_obj_create(NULL);
 801a78c:	6028      	str	r0, [r5, #0]
    lv_obj_clear_flag(ui_SetTime, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801a78e:	f7ed fb6d 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_set_style_bg_color(ui_SetTime, lv_color_hex(0x181C29), LV_PART_MAIN | LV_STATE_DEFAULT);
 801a792:	2200      	movs	r2, #0
 801a794:	6828      	ldr	r0, [r5, #0]
 801a796:	1c39      	adds	r1, r7, #0
 801a798:	f7f3 f828 	bl	800d7ec <lv_obj_set_style_bg_color>

    ui_Header_Sub1 = ui_Header_Sub_create(ui_SetTime);
 801a79c:	6828      	ldr	r0, [r5, #0]
 801a79e:	f000 fb2f 	bl	801ae00 <ui_Header_Sub_create>
 801a7a2:	4eaf      	ldr	r6, [pc, #700]	; (801aa60 <ui_SetTime_screen_init+0x2e8>)
    lv_obj_set_x(ui_Header_Sub1, 0);
 801a7a4:	2100      	movs	r1, #0
    ui_Header_Sub1 = ui_Header_Sub_create(ui_SetTime);
 801a7a6:	6030      	str	r0, [r6, #0]
    lv_obj_set_x(ui_Header_Sub1, 0);
 801a7a8:	f7ee f968 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_Header_Sub1, 0);
 801a7ac:	6830      	ldr	r0, [r6, #0]
 801a7ae:	2100      	movs	r1, #0
 801a7b0:	f7ee f97c 	bl	8008aac <lv_obj_set_y>

    lv_label_set_text(ui_comp_get_child(ui_Header_Sub1, UI_COMP_HEADER_SUB_LABEL1), "Set Time");
 801a7b4:	6830      	ldr	r0, [r6, #0]
 801a7b6:	2101      	movs	r1, #1
 801a7b8:	f000 fa68 	bl	801ac8c <ui_comp_get_child>
 801a7bc:	49a9      	ldr	r1, [pc, #676]	; (801aa64 <ui_SetTime_screen_init+0x2ec>)
 801a7be:	f7fe fc63 	bl	8019088 <lv_label_set_text>

    ui_Set_Hours = lv_label_create(ui_SetTime);
 801a7c2:	6828      	ldr	r0, [r5, #0]
 801a7c4:	f7fe fc54 	bl	8019070 <lv_label_create>
    lv_obj_set_width(ui_Set_Hours, LV_SIZE_CONTENT);   /// 1
 801a7c8:	4ba7      	ldr	r3, [pc, #668]	; (801aa68 <ui_SetTime_screen_init+0x2f0>)
    ui_Set_Hours = lv_label_create(ui_SetTime);
 801a7ca:	4ca8      	ldr	r4, [pc, #672]	; (801aa6c <ui_SetTime_screen_init+0x2f4>)
    lv_obj_set_width(ui_Set_Hours, LV_SIZE_CONTENT);   /// 1
 801a7cc:	4698      	mov	r8, r3
 801a7ce:	0019      	movs	r1, r3
    ui_Set_Hours = lv_label_create(ui_SetTime);
 801a7d0:	6020      	str	r0, [r4, #0]
    lv_obj_set_width(ui_Set_Hours, LV_SIZE_CONTENT);   /// 1
 801a7d2:	f7ee f983 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_height(ui_Set_Hours, LV_SIZE_CONTENT);    /// 1
 801a7d6:	4641      	mov	r1, r8
 801a7d8:	6820      	ldr	r0, [r4, #0]
 801a7da:	f7ee f997 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_x(ui_Set_Hours, 44);
 801a7de:	6820      	ldr	r0, [r4, #0]
 801a7e0:	212c      	movs	r1, #44	; 0x2c
 801a7e2:	f7ee f94b 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_Set_Hours, 52);
 801a7e6:	6820      	ldr	r0, [r4, #0]
 801a7e8:	2134      	movs	r1, #52	; 0x34
 801a7ea:	f7ee f95f 	bl	8008aac <lv_obj_set_y>
    lv_label_set_text(ui_Set_Hours, "Hours");
 801a7ee:	6820      	ldr	r0, [r4, #0]
 801a7f0:	499f      	ldr	r1, [pc, #636]	; (801aa70 <ui_SetTime_screen_init+0x2f8>)
 801a7f2:	f7fe fc49 	bl	8019088 <lv_label_set_text>
    lv_obj_set_style_text_color(ui_Set_Hours, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 801a7f6:	2301      	movs	r3, #1
 801a7f8:	425b      	negs	r3, r3
 801a7fa:	1c19      	adds	r1, r3, #0
 801a7fc:	2200      	movs	r2, #0
 801a7fe:	6820      	ldr	r0, [r4, #0]
    r.full = (uint16_t)(((c & 0xF80000) >> 8) | ((c & 0xFC00) >> 5) | ((c & 0xFF) >> 3));
#else
    /* We want: rrrr rrrr GGGg gggg bbbb bbbb => gggb bbbb rrrr rGGG */
    r.full = (uint16_t)(((c & 0xF80000) >> 16) | ((c & 0xFC00) >> 13) | ((c & 0x1C00) << 3) | ((c & 0xF8) << 5));
#endif
    return r;
 801a800:	4699      	mov	r9, r3
 801a802:	f7f3 f863 	bl	800d8cc <lv_obj_set_style_text_color>

    ui_Set_Minutes = lv_label_create(ui_SetTime);
 801a806:	6828      	ldr	r0, [r5, #0]
 801a808:	f7fe fc32 	bl	8019070 <lv_label_create>
 801a80c:	4c99      	ldr	r4, [pc, #612]	; (801aa74 <ui_SetTime_screen_init+0x2fc>)
    lv_obj_set_width(ui_Set_Minutes, LV_SIZE_CONTENT);   /// 1
 801a80e:	4641      	mov	r1, r8
    ui_Set_Minutes = lv_label_create(ui_SetTime);
 801a810:	6020      	str	r0, [r4, #0]
    lv_obj_set_width(ui_Set_Minutes, LV_SIZE_CONTENT);   /// 1
 801a812:	f7ee f963 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_height(ui_Set_Minutes, LV_SIZE_CONTENT);    /// 1
 801a816:	4641      	mov	r1, r8
 801a818:	6820      	ldr	r0, [r4, #0]
 801a81a:	f7ee f977 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_x(ui_Set_Minutes, -39);
 801a81e:	2127      	movs	r1, #39	; 0x27
 801a820:	6820      	ldr	r0, [r4, #0]
 801a822:	4249      	negs	r1, r1
 801a824:	f7ee f92a 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_Set_Minutes, 52);
 801a828:	6820      	ldr	r0, [r4, #0]
 801a82a:	2134      	movs	r1, #52	; 0x34
 801a82c:	f7ee f93e 	bl	8008aac <lv_obj_set_y>
    lv_obj_set_align(ui_Set_Minutes, LV_ALIGN_TOP_RIGHT);
 801a830:	6820      	ldr	r0, [r4, #0]
 801a832:	2103      	movs	r1, #3
 801a834:	f7ee f9b0 	bl	8008b98 <lv_obj_set_align>
    lv_label_set_text(ui_Set_Minutes, "Minutes");
 801a838:	6820      	ldr	r0, [r4, #0]
 801a83a:	498f      	ldr	r1, [pc, #572]	; (801aa78 <ui_SetTime_screen_init+0x300>)
 801a83c:	f7fe fc24 	bl	8019088 <lv_label_set_text>
    lv_obj_set_style_text_color(ui_Set_Minutes, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 801a840:	4649      	mov	r1, r9
 801a842:	2200      	movs	r2, #0
 801a844:	6820      	ldr	r0, [r4, #0]
 801a846:	f7f3 f841 	bl	800d8cc <lv_obj_set_style_text_color>

    ui_Roller_Hour = ui_Roller_create(ui_SetTime);
 801a84a:	6828      	ldr	r0, [r5, #0]
 801a84c:	f000 fda6 	bl	801b39c <ui_Roller_create>
 801a850:	4c8a      	ldr	r4, [pc, #552]	; (801aa7c <ui_SetTime_screen_init+0x304>)
    lv_roller_set_options(ui_Roller_Hour,
 801a852:	2200      	movs	r2, #0
 801a854:	498a      	ldr	r1, [pc, #552]	; (801aa80 <ui_SetTime_screen_init+0x308>)
    ui_Roller_Hour = ui_Roller_create(ui_SetTime);
 801a856:	6020      	str	r0, [r4, #0]
    lv_roller_set_options(ui_Roller_Hour,
 801a858:	f7fe ff22 	bl	80196a0 <lv_roller_set_options>
                          "01\n02\n03\n04\n05\n06\n07\n08\n09\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24",
                          0);
    lv_obj_set_height(ui_Roller_Hour, 85);
 801a85c:	6820      	ldr	r0, [r4, #0]
 801a85e:	2155      	movs	r1, #85	; 0x55
 801a860:	f7ee f954 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_width(ui_Roller_Hour, lv_pct(30));
 801a864:	4b87      	ldr	r3, [pc, #540]	; (801aa84 <ui_SetTime_screen_init+0x30c>)
 801a866:	6820      	ldr	r0, [r4, #0]
 801a868:	0019      	movs	r1, r3
 801a86a:	4698      	mov	r8, r3
 801a86c:	f7ee f936 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_x(ui_Roller_Hour, 30);
 801a870:	6820      	ldr	r0, [r4, #0]
 801a872:	211e      	movs	r1, #30
 801a874:	f7ee f902 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_Roller_Hour, 70);
 801a878:	6820      	ldr	r0, [r4, #0]
 801a87a:	2146      	movs	r1, #70	; 0x46
 801a87c:	f7ee f916 	bl	8008aac <lv_obj_set_y>
    lv_obj_set_align(ui_Roller_Hour, LV_ALIGN_TOP_LEFT);
 801a880:	2101      	movs	r1, #1
 801a882:	6820      	ldr	r0, [r4, #0]
 801a884:	f7ee f988 	bl	8008b98 <lv_obj_set_align>

    ui_Roller_Minute = ui_Roller_create(ui_SetTime);
 801a888:	6828      	ldr	r0, [r5, #0]
 801a88a:	f000 fd87 	bl	801b39c <ui_Roller_create>
 801a88e:	4c7e      	ldr	r4, [pc, #504]	; (801aa88 <ui_SetTime_screen_init+0x310>)
    lv_roller_set_options(ui_Roller_Minute,
 801a890:	2200      	movs	r2, #0
 801a892:	497e      	ldr	r1, [pc, #504]	; (801aa8c <ui_SetTime_screen_init+0x314>)
    ui_Roller_Minute = ui_Roller_create(ui_SetTime);
 801a894:	6020      	str	r0, [r4, #0]
    lv_roller_set_options(ui_Roller_Minute,
 801a896:	f7fe ff03 	bl	80196a0 <lv_roller_set_options>
                          "01\n02\n03\n04\n05\n06\n07\n08\n09\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59",
                          0);
    lv_obj_set_height(ui_Roller_Minute, 85);
 801a89a:	6820      	ldr	r0, [r4, #0]
 801a89c:	2155      	movs	r1, #85	; 0x55
 801a89e:	f7ee f935 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_width(ui_Roller_Minute, lv_pct(30));
 801a8a2:	4641      	mov	r1, r8
 801a8a4:	6820      	ldr	r0, [r4, #0]
 801a8a6:	f7ee f919 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_x(ui_Roller_Minute, -30);
 801a8aa:	211e      	movs	r1, #30
 801a8ac:	6820      	ldr	r0, [r4, #0]
 801a8ae:	4249      	negs	r1, r1
 801a8b0:	f7ee f8e4 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_Roller_Minute, 70);
 801a8b4:	6820      	ldr	r0, [r4, #0]
 801a8b6:	2146      	movs	r1, #70	; 0x46
 801a8b8:	f7ee f8f8 	bl	8008aac <lv_obj_set_y>
    lv_obj_set_align(ui_Roller_Minute, LV_ALIGN_TOP_RIGHT);
 801a8bc:	2103      	movs	r1, #3
 801a8be:	6820      	ldr	r0, [r4, #0]
 801a8c0:	f7ee f96a 	bl	8008b98 <lv_obj_set_align>

    ui_List_Switch5 = ui_List_Switch_create(ui_SetTime);
 801a8c4:	6828      	ldr	r0, [r5, #0]
 801a8c6:	f000 fc5f 	bl	801b188 <ui_List_Switch_create>
 801a8ca:	4c71      	ldr	r4, [pc, #452]	; (801aa90 <ui_SetTime_screen_init+0x318>)
    lv_obj_set_height(ui_List_Switch5, 78);
 801a8cc:	214e      	movs	r1, #78	; 0x4e
    ui_List_Switch5 = ui_List_Switch_create(ui_SetTime);
 801a8ce:	6020      	str	r0, [r4, #0]
    lv_obj_set_height(ui_List_Switch5, 78);
 801a8d0:	f7ee f91c 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_width(ui_List_Switch5, lv_pct(100));
 801a8d4:	4b6f      	ldr	r3, [pc, #444]	; (801aa94 <ui_SetTime_screen_init+0x31c>)
 801a8d6:	6820      	ldr	r0, [r4, #0]
 801a8d8:	0019      	movs	r1, r3
 801a8da:	4698      	mov	r8, r3
 801a8dc:	f7ee f8fe 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_x(ui_List_Switch5, 0);
 801a8e0:	6820      	ldr	r0, [r4, #0]
 801a8e2:	2100      	movs	r1, #0
 801a8e4:	f7ee f8ca 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_List_Switch5, 172);
 801a8e8:	6820      	ldr	r0, [r4, #0]
 801a8ea:	21ac      	movs	r1, #172	; 0xac
 801a8ec:	f7ee f8de 	bl	8008aac <lv_obj_set_y>
    lv_obj_set_style_border_side(ui_List_Switch5, LV_BORDER_SIDE_TOP, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a8f0:	6820      	ldr	r0, [r4, #0]
 801a8f2:	2200      	movs	r2, #0
 801a8f4:	2102      	movs	r1, #2
 801a8f6:	f7f2 ffc5 	bl	800d884 <lv_obj_set_style_border_side>
    lv_obj_set_style_pad_left(ui_List_Switch5, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a8fa:	6820      	ldr	r0, [r4, #0]
 801a8fc:	2200      	movs	r2, #0
 801a8fe:	210a      	movs	r1, #10
 801a900:	f7f2 ff64 	bl	800d7cc <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(ui_List_Switch5, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a904:	6820      	ldr	r0, [r4, #0]
 801a906:	2200      	movs	r2, #0
 801a908:	210a      	movs	r1, #10
 801a90a:	f7f2 ff67 	bl	800d7dc <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(ui_List_Switch5, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a90e:	6820      	ldr	r0, [r4, #0]
 801a910:	2200      	movs	r2, #0
 801a912:	210a      	movs	r1, #10
 801a914:	f7f2 ff4a 	bl	800d7ac <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(ui_List_Switch5, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a918:	2200      	movs	r2, #0
 801a91a:	6820      	ldr	r0, [r4, #0]
 801a91c:	210a      	movs	r1, #10
 801a91e:	f7f2 ff4d 	bl	800d7bc <lv_obj_set_style_pad_bottom>

    lv_obj_set_align(ui_comp_get_child(ui_List_Switch5, UI_COMP_LIST_SWITCH_LIST_TEXT), LV_ALIGN_TOP_LEFT);
 801a922:	2101      	movs	r1, #1
 801a924:	6820      	ldr	r0, [r4, #0]
 801a926:	f000 f9b1 	bl	801ac8c <ui_comp_get_child>
 801a92a:	2101      	movs	r1, #1
 801a92c:	f7ee f934 	bl	8008b98 <lv_obj_set_align>
    lv_label_set_text(ui_comp_get_child(ui_List_Switch5, UI_COMP_LIST_SWITCH_LIST_TEXT), "Timezone");
 801a930:	2101      	movs	r1, #1
 801a932:	6820      	ldr	r0, [r4, #0]
 801a934:	f000 f9aa 	bl	801ac8c <ui_comp_get_child>
 801a938:	4957      	ldr	r1, [pc, #348]	; (801aa98 <ui_SetTime_screen_init+0x320>)
 801a93a:	f7fe fba5 	bl	8019088 <lv_label_set_text>

    lv_obj_add_flag(ui_comp_get_child(ui_List_Switch5, UI_COMP_LIST_SWITCH_SWITCH1),
 801a93e:	2102      	movs	r1, #2
 801a940:	6820      	ldr	r0, [r4, #0]
 801a942:	f000 f9a3 	bl	801ac8c <ui_comp_get_child>
 801a946:	2103      	movs	r1, #3
 801a948:	f7ed fa54 	bl	8007df4 <lv_obj_add_flag>
                    LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_CLICKABLE);    /// Flags

    ui_Dropdown2 = lv_dropdown_create(ui_List_Switch5);
 801a94c:	6820      	ldr	r0, [r4, #0]
 801a94e:	f7fc fc99 	bl	8017284 <lv_dropdown_create>
 801a952:	4c52      	ldr	r4, [pc, #328]	; (801aa9c <ui_SetTime_screen_init+0x324>)
    lv_dropdown_set_options(ui_Dropdown2,
 801a954:	4952      	ldr	r1, [pc, #328]	; (801aaa0 <ui_SetTime_screen_init+0x328>)
    ui_Dropdown2 = lv_dropdown_create(ui_List_Switch5);
 801a956:	6020      	str	r0, [r4, #0]
    lv_dropdown_set_options(ui_Dropdown2,
 801a958:	f7fc fca0 	bl	801729c <lv_dropdown_set_options>
                            "China\nNepal\nIndia\nCrimea\nSpain\nVenezuela\nSamoa\nUSA\nCanada\nSudan\nIran\nNew Zealand\nAustralia");
    lv_obj_set_height(ui_Dropdown2, 26);
 801a95c:	6820      	ldr	r0, [r4, #0]
 801a95e:	211a      	movs	r1, #26
 801a960:	f7ee f8d4 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_width(ui_Dropdown2, lv_pct(100));
 801a964:	4641      	mov	r1, r8
 801a966:	6820      	ldr	r0, [r4, #0]
 801a968:	f7ee f8b8 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_x(ui_Dropdown2, 0);
 801a96c:	6820      	ldr	r0, [r4, #0]
 801a96e:	2100      	movs	r1, #0
 801a970:	f7ee f884 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_Dropdown2, 27);
 801a974:	6820      	ldr	r0, [r4, #0]
 801a976:	211b      	movs	r1, #27
 801a978:	f7ee f898 	bl	8008aac <lv_obj_set_y>
    lv_obj_add_flag(ui_Dropdown2, LV_OBJ_FLAG_SCROLL_ON_FOCUS);     /// Flags
 801a97c:	2180      	movs	r1, #128	; 0x80
 801a97e:	6820      	ldr	r0, [r4, #0]
 801a980:	00c9      	lsls	r1, r1, #3
 801a982:	f7ed fa37 	bl	8007df4 <lv_obj_add_flag>
    lv_obj_set_style_text_color(ui_Dropdown2, lv_color_hex(0x181C29), LV_PART_MAIN | LV_STATE_DEFAULT);
 801a986:	6820      	ldr	r0, [r4, #0]
 801a988:	1c39      	adds	r1, r7, #0
 801a98a:	2200      	movs	r2, #0
 801a98c:	f7f2 ff9e 	bl	800d8cc <lv_obj_set_style_text_color>
    lv_obj_set_style_text_opa(ui_Dropdown2, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a990:	6820      	ldr	r0, [r4, #0]
 801a992:	2200      	movs	r2, #0
 801a994:	21ff      	movs	r1, #255	; 0xff
 801a996:	f7f2 ffa5 	bl	800d8e4 <lv_obj_set_style_text_opa>
    lv_obj_set_style_pad_left(ui_Dropdown2, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a99a:	6820      	ldr	r0, [r4, #0]
 801a99c:	2200      	movs	r2, #0
 801a99e:	2105      	movs	r1, #5
 801a9a0:	f7f2 ff14 	bl	800d7cc <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(ui_Dropdown2, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a9a4:	6820      	ldr	r0, [r4, #0]
 801a9a6:	2200      	movs	r2, #0
 801a9a8:	2105      	movs	r1, #5
 801a9aa:	f7f2 ff17 	bl	800d7dc <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(ui_Dropdown2, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a9ae:	6820      	ldr	r0, [r4, #0]
 801a9b0:	2200      	movs	r2, #0
 801a9b2:	2105      	movs	r1, #5
 801a9b4:	f7f2 fefa 	bl	800d7ac <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(ui_Dropdown2, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a9b8:	6820      	ldr	r0, [r4, #0]
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	2100      	movs	r1, #0
 801a9be:	f7f2 fefd 	bl	800d7bc <lv_obj_set_style_pad_bottom>

    lv_obj_set_style_outline_color(ui_Dropdown2, lv_color_hex(0xe0a721), LV_PART_MAIN | LV_STATE_FOCUSED);
 801a9c2:	4b38      	ldr	r3, [pc, #224]	; (801aaa4 <ui_SetTime_screen_init+0x32c>)
 801a9c4:	6820      	ldr	r0, [r4, #0]
 801a9c6:	1c19      	adds	r1, r3, #0
 801a9c8:	2202      	movs	r2, #2
 801a9ca:	f7f2 ff6b 	bl	800d8a4 <lv_obj_set_style_outline_color>
    lv_obj_set_style_outline_width(ui_Dropdown2, 2, LV_PART_MAIN | LV_STATE_FOCUSED);
 801a9ce:	6820      	ldr	r0, [r4, #0]
 801a9d0:	2202      	movs	r2, #2
 801a9d2:	2102      	movs	r1, #2
 801a9d4:	f7f2 ff5e 	bl	800d894 <lv_obj_set_style_outline_width>
    lv_obj_set_style_outline_pad(ui_Dropdown2, 3, LV_PART_MAIN | LV_STATE_FOCUSED);
 801a9d8:	2202      	movs	r2, #2
 801a9da:	2103      	movs	r1, #3
 801a9dc:	6820      	ldr	r0, [r4, #0]
 801a9de:	f7f2 ff6d 	bl	800d8bc <lv_obj_set_style_outline_pad>

    lv_obj_set_style_text_color(lv_dropdown_get_list(ui_Dropdown2), lv_color_hex(0x181C29), LV_PART_MAIN | LV_STATE_DEFAULT);
 801a9e2:	6820      	ldr	r0, [r4, #0]
 801a9e4:	f7fc fcae 	bl	8017344 <lv_dropdown_get_list>
 801a9e8:	1c39      	adds	r1, r7, #0
 801a9ea:	2200      	movs	r2, #0
 801a9ec:	f7f2 ff6e 	bl	800d8cc <lv_obj_set_style_text_color>
    lv_obj_set_style_text_line_space(lv_dropdown_get_list(ui_Dropdown2), 8, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a9f0:	6820      	ldr	r0, [r4, #0]
 801a9f2:	f7fc fca7 	bl	8017344 <lv_dropdown_get_list>
 801a9f6:	2200      	movs	r2, #0
 801a9f8:	2108      	movs	r1, #8
 801a9fa:	f7f2 ff83 	bl	800d904 <lv_obj_set_style_text_line_space>
    lv_obj_set_style_pad_hor(lv_dropdown_get_list(ui_Dropdown2), 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 801a9fe:	6820      	ldr	r0, [r4, #0]
 801aa00:	f7fc fca0 	bl	8017344 <lv_dropdown_get_list>
 801aa04:	0007      	movs	r7, r0
    lv_obj_set_style_pad_left(obj, value, selector);
 801aa06:	2200      	movs	r2, #0
 801aa08:	2105      	movs	r1, #5
 801aa0a:	f7f2 fedf 	bl	800d7cc <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(obj, value, selector);
 801aa0e:	2200      	movs	r2, #0
 801aa10:	2105      	movs	r1, #5
 801aa12:	0038      	movs	r0, r7
 801aa14:	f7f2 fee2 	bl	800d7dc <lv_obj_set_style_pad_right>
    lv_obj_set_style_size(lv_dropdown_get_list(ui_Dropdown2), 3, LV_PART_SCROLLBAR);
 801aa18:	6820      	ldr	r0, [r4, #0]
 801aa1a:	f7fc fc93 	bl	8017344 <lv_dropdown_get_list>
    lv_obj_set_style_width(obj, value, selector);
 801aa1e:	2780      	movs	r7, #128	; 0x80
 801aa20:	0004      	movs	r4, r0
 801aa22:	027f      	lsls	r7, r7, #9
 801aa24:	003a      	movs	r2, r7
 801aa26:	2103      	movs	r1, #3
 801aa28:	f7f2 fe98 	bl	800d75c <lv_obj_set_style_width>
    lv_obj_set_style_height(obj, value, selector);
 801aa2c:	003a      	movs	r2, r7
 801aa2e:	0020      	movs	r0, r4
 801aa30:	2103      	movs	r1, #3
 801aa32:	f7f2 fe9b 	bl	800d76c <lv_obj_set_style_height>

    lv_obj_add_event_cb(ui_Header_Sub1, ui_event_Header_Sub1_Back_Back,
 801aa36:	6830      	ldr	r0, [r6, #0]
 801aa38:	2300      	movs	r3, #0
 801aa3a:	2200      	movs	r2, #0
 801aa3c:	491a      	ldr	r1, [pc, #104]	; (801aaa8 <ui_SetTime_screen_init+0x330>)
 801aa3e:	f7ea f95b 	bl	8004cf8 <lv_obj_add_event_cb>
                        LV_EVENT_ALL, NULL);

    lv_obj_add_event_cb(ui_SetTime, ui_event_Clock, LV_EVENT_ALL, NULL);
 801aa42:	6828      	ldr	r0, [r5, #0]
 801aa44:	2300      	movs	r3, #0
 801aa46:	2200      	movs	r2, #0
 801aa48:	4918      	ldr	r1, [pc, #96]	; (801aaac <ui_SetTime_screen_init+0x334>)
 801aa4a:	f7ea f955 	bl	8004cf8 <lv_obj_add_event_cb>

}
 801aa4e:	bcc0      	pop	{r6, r7}
 801aa50:	46b9      	mov	r9, r7
 801aa52:	46b0      	mov	r8, r6
 801aa54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa56:	46c0      	nop			; (mov r8, r8)
 801aa58:	20007cfc 	.word	0x20007cfc
 801aa5c:	000018e5 	.word	0x000018e5
 801aa60:	20007ccc 	.word	0x20007ccc
 801aa64:	0801d5c8 	.word	0x0801d5c8
 801aa68:	000027d1 	.word	0x000027d1
 801aa6c:	20007d00 	.word	0x20007d00
 801aa70:	0801d614 	.word	0x0801d614
 801aa74:	20007d04 	.word	0x20007d04
 801aa78:	0801d61c 	.word	0x0801d61c
 801aa7c:	20007cf4 	.word	0x20007cf4
 801aa80:	0801d624 	.word	0x0801d624
 801aa84:	0000201e 	.word	0x0000201e
 801aa88:	20007cf8 	.word	0x20007cf8
 801aa8c:	0801d66c 	.word	0x0801d66c
 801aa90:	20007ce4 	.word	0x20007ce4
 801aa94:	00002064 	.word	0x00002064
 801aa98:	0801d720 	.word	0x0801d720
 801aa9c:	20007cc0 	.word	0x20007cc0
 801aaa0:	0801d72c 	.word	0x0801d72c
 801aaa4:	ffffe524 	.word	0xffffe524
 801aaa8:	0801a389 	.word	0x0801a389
 801aaac:	0801a255 	.word	0x0801a255

0801aab0 <ui_About_screen_init>:
void ui_About_screen_init(void)
{
 801aab0:	b570      	push	{r4, r5, r6, lr}
    ui_About = lv_obj_create(NULL);
 801aab2:	2000      	movs	r0, #0
 801aab4:	f7ed f992 	bl	8007ddc <lv_obj_create>
 801aab8:	4d3a      	ldr	r5, [pc, #232]	; (801aba4 <ui_About_screen_init+0xf4>)
    lv_obj_clear_flag(ui_About, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801aaba:	2110      	movs	r1, #16
    ui_About = lv_obj_create(NULL);
 801aabc:	6028      	str	r0, [r5, #0]
    lv_obj_clear_flag(ui_About, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801aabe:	f7ed f9d5 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_set_style_bg_color(ui_About, lv_color_hex(0x181C29), LV_PART_MAIN | LV_STATE_DEFAULT);
 801aac2:	4b39      	ldr	r3, [pc, #228]	; (801aba8 <ui_About_screen_init+0xf8>)
 801aac4:	2200      	movs	r2, #0
 801aac6:	1c19      	adds	r1, r3, #0
 801aac8:	6828      	ldr	r0, [r5, #0]
 801aaca:	f7f2 fe8f 	bl	800d7ec <lv_obj_set_style_bg_color>

    ui_Panel2 = lv_obj_create(ui_About);
 801aace:	6828      	ldr	r0, [r5, #0]
 801aad0:	f7ed f984 	bl	8007ddc <lv_obj_create>
    lv_obj_set_height(ui_Panel2, 288);
 801aad4:	2190      	movs	r1, #144	; 0x90
    ui_Panel2 = lv_obj_create(ui_About);
 801aad6:	4c35      	ldr	r4, [pc, #212]	; (801abac <ui_About_screen_init+0xfc>)
    lv_obj_set_width(ui_Panel2, lv_pct(100));
 801aad8:	4e35      	ldr	r6, [pc, #212]	; (801abb0 <ui_About_screen_init+0x100>)
    lv_obj_set_height(ui_Panel2, 288);
 801aada:	0049      	lsls	r1, r1, #1
    ui_Panel2 = lv_obj_create(ui_About);
 801aadc:	6020      	str	r0, [r4, #0]
    lv_obj_set_height(ui_Panel2, 288);
 801aade:	f7ee f815 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_width(ui_Panel2, lv_pct(100));
 801aae2:	0031      	movs	r1, r6
 801aae4:	6820      	ldr	r0, [r4, #0]
 801aae6:	f7ed fff9 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_align(ui_Panel2, LV_ALIGN_BOTTOM_MID);
 801aaea:	6820      	ldr	r0, [r4, #0]
 801aaec:	2105      	movs	r1, #5
 801aaee:	f7ee f853 	bl	8008b98 <lv_obj_set_align>
    lv_obj_set_style_bg_opa(ui_Panel2, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 801aaf2:	6820      	ldr	r0, [r4, #0]
 801aaf4:	2200      	movs	r2, #0
 801aaf6:	2100      	movs	r1, #0
 801aaf8:	f7f2 fe84 	bl	800d804 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_pad_left(ui_Panel2, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801aafc:	6820      	ldr	r0, [r4, #0]
 801aafe:	2200      	movs	r2, #0
 801ab00:	210a      	movs	r1, #10
 801ab02:	f7f2 fe63 	bl	800d7cc <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(ui_Panel2, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801ab06:	6820      	ldr	r0, [r4, #0]
 801ab08:	2200      	movs	r2, #0
 801ab0a:	210a      	movs	r1, #10
 801ab0c:	f7f2 fe66 	bl	800d7dc <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(ui_Panel2, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801ab10:	6820      	ldr	r0, [r4, #0]
 801ab12:	2200      	movs	r2, #0
 801ab14:	210a      	movs	r1, #10
 801ab16:	f7f2 fe49 	bl	800d7ac <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(ui_Panel2, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801ab1a:	2200      	movs	r2, #0
 801ab1c:	6820      	ldr	r0, [r4, #0]
 801ab1e:	210a      	movs	r1, #10
 801ab20:	f7f2 fe4c 	bl	800d7bc <lv_obj_set_style_pad_bottom>
    lv_obj_clear_flag(ui_Panel2, LV_OBJ_FLAG_SCROLLABLE);
 801ab24:	2110      	movs	r1, #16
 801ab26:	6820      	ldr	r0, [r4, #0]
 801ab28:	f7ed f9a0 	bl	8007e6c <lv_obj_clear_flag>

    ui_Set_Minutes1 = lv_label_create(ui_Panel2);
 801ab2c:	6820      	ldr	r0, [r4, #0]
 801ab2e:	f7fe fa9f 	bl	8019070 <lv_label_create>
 801ab32:	4c20      	ldr	r4, [pc, #128]	; (801abb4 <ui_About_screen_init+0x104>)
    lv_obj_set_width(ui_Set_Minutes1, lv_pct(100));   /// 1
 801ab34:	0031      	movs	r1, r6
    ui_Set_Minutes1 = lv_label_create(ui_Panel2);
 801ab36:	6020      	str	r0, [r4, #0]
    lv_obj_set_width(ui_Set_Minutes1, lv_pct(100));   /// 1
 801ab38:	f7ed ffd0 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_height(ui_Set_Minutes1, LV_SIZE_CONTENT);    /// 1
 801ab3c:	6820      	ldr	r0, [r4, #0]
 801ab3e:	491e      	ldr	r1, [pc, #120]	; (801abb8 <ui_About_screen_init+0x108>)
 801ab40:	f7ed ffe4 	bl	8008b0c <lv_obj_set_height>
    lv_label_set_text(ui_Set_Minutes1, "A minimal demo to control an Air Conditioner using an STM32G071 with 128kB Flash and 36 kB RAM running at 64MHz. No external memory is used.\n\n"
 801ab44:	6820      	ldr	r0, [r4, #0]
 801ab46:	491d      	ldr	r1, [pc, #116]	; (801abbc <ui_About_screen_init+0x10c>)
 801ab48:	f7fe fa9e 	bl	8019088 <lv_label_set_text>
"The board has no touchpad therefore the UI can be navigated by a joystick. Up/down selects the previous/next widget, left/right changes the selected widget's value. On press the selected value is applied or a button widget is clicked.");
    lv_obj_set_style_text_color(ui_Set_Minutes1, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 801ab4c:	2101      	movs	r1, #1
 801ab4e:	6820      	ldr	r0, [r4, #0]
 801ab50:	2200      	movs	r2, #0
 801ab52:	4249      	negs	r1, r1
 801ab54:	f7f2 feba 	bl	800d8cc <lv_obj_set_style_text_color>
    lv_obj_set_style_text_opa(ui_Set_Minutes1, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 801ab58:	2200      	movs	r2, #0
 801ab5a:	21ff      	movs	r1, #255	; 0xff
 801ab5c:	6820      	ldr	r0, [r4, #0]
 801ab5e:	f7f2 fec1 	bl	800d8e4 <lv_obj_set_style_text_opa>

    ui_Header_Sub2 = ui_Header_Sub_create(ui_About);
 801ab62:	6828      	ldr	r0, [r5, #0]
 801ab64:	f000 f94c 	bl	801ae00 <ui_Header_Sub_create>
 801ab68:	4c15      	ldr	r4, [pc, #84]	; (801abc0 <ui_About_screen_init+0x110>)
    lv_obj_set_x(ui_Header_Sub2, 0);
 801ab6a:	2100      	movs	r1, #0
    ui_Header_Sub2 = ui_Header_Sub_create(ui_About);
 801ab6c:	6020      	str	r0, [r4, #0]
    lv_obj_set_x(ui_Header_Sub2, 0);
 801ab6e:	f7ed ff85 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(ui_Header_Sub2, 0);
 801ab72:	6820      	ldr	r0, [r4, #0]
 801ab74:	2100      	movs	r1, #0
 801ab76:	f7ed ff99 	bl	8008aac <lv_obj_set_y>

    lv_label_set_text(ui_comp_get_child(ui_Header_Sub2, UI_COMP_HEADER_SUB_LABEL1), "About");
 801ab7a:	2101      	movs	r1, #1
 801ab7c:	6820      	ldr	r0, [r4, #0]
 801ab7e:	f000 f885 	bl	801ac8c <ui_comp_get_child>
 801ab82:	4910      	ldr	r1, [pc, #64]	; (801abc4 <ui_About_screen_init+0x114>)
 801ab84:	f7fe fa80 	bl	8019088 <lv_label_set_text>

    lv_obj_add_event_cb(ui_Header_Sub2, ui_event_Header_Sub2_Back_Back,
 801ab88:	2300      	movs	r3, #0
 801ab8a:	2200      	movs	r2, #0
 801ab8c:	6820      	ldr	r0, [r4, #0]
 801ab8e:	490e      	ldr	r1, [pc, #56]	; (801abc8 <ui_About_screen_init+0x118>)
 801ab90:	f7ea f8b2 	bl	8004cf8 <lv_obj_add_event_cb>
                        LV_EVENT_ALL, NULL);

    lv_obj_add_event_cb(ui_About, ui_event_About, LV_EVENT_ALL, NULL);
 801ab94:	6828      	ldr	r0, [r5, #0]
 801ab96:	2300      	movs	r3, #0
 801ab98:	2200      	movs	r2, #0
 801ab9a:	490c      	ldr	r1, [pc, #48]	; (801abcc <ui_About_screen_init+0x11c>)
 801ab9c:	f7ea f8ac 	bl	8004cf8 <lv_obj_add_event_cb>

}
 801aba0:	bd70      	pop	{r4, r5, r6, pc}
 801aba2:	46c0      	nop			; (mov r8, r8)
 801aba4:	20007ca8 	.word	0x20007ca8
 801aba8:	000018e5 	.word	0x000018e5
 801abac:	20007cec 	.word	0x20007cec
 801abb0:	00002064 	.word	0x00002064
 801abb4:	20007d08 	.word	0x20007d08
 801abb8:	000027d1 	.word	0x000027d1
 801abbc:	0801d788 	.word	0x0801d788
 801abc0:	20007cd0 	.word	0x20007cd0
 801abc4:	0801d5d4 	.word	0x0801d5d4
 801abc8:	0801a35d 	.word	0x0801a35d
 801abcc:	0801a281 	.word	0x0801a281

0801abd0 <ui_init>:



void ui_init(void)
{
 801abd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abd2:	46c6      	mov	lr, r8
 801abd4:	b500      	push	{lr}
    LV_EVENT_GET_COMP_CHILD = lv_event_register_id();
 801abd6:	f7ea f86f 	bl	8004cb8 <lv_event_register_id>
 801abda:	4b1c      	ldr	r3, [pc, #112]	; (801ac4c <ui_init+0x7c>)
 801abdc:	6018      	str	r0, [r3, #0]

    group_main = lv_group_create();
 801abde:	f7ea fafd 	bl	80051dc <lv_group_create>
 801abe2:	4b1b      	ldr	r3, [pc, #108]	; (801ac50 <ui_init+0x80>)
 801abe4:	4698      	mov	r8, r3
 801abe6:	6018      	str	r0, [r3, #0]
    group_aircon = lv_group_create();
 801abe8:	f7ea faf8 	bl	80051dc <lv_group_create>
 801abec:	4f19      	ldr	r7, [pc, #100]	; (801ac54 <ui_init+0x84>)
 801abee:	6038      	str	r0, [r7, #0]
    group_clock = lv_group_create();
 801abf0:	f7ea faf4 	bl	80051dc <lv_group_create>
 801abf4:	4e18      	ldr	r6, [pc, #96]	; (801ac58 <ui_init+0x88>)
 801abf6:	6030      	str	r0, [r6, #0]
    group_about = lv_group_create();
 801abf8:	f7ea faf0 	bl	80051dc <lv_group_create>
 801abfc:	4d17      	ldr	r5, [pc, #92]	; (801ac5c <ui_init+0x8c>)
 801abfe:	6028      	str	r0, [r5, #0]

    lv_disp_t * dispp = lv_disp_get_default();
 801ac00:	f7f8 ff1e 	bl	8013a40 <lv_disp_get_default>
 801ac04:	0004      	movs	r4, r0
    lv_theme_t * theme = lv_theme_basic_init(dispp);
 801ac06:	f7f8 fa13 	bl	8013030 <lv_theme_basic_init>
 801ac0a:	0001      	movs	r1, r0
    lv_disp_set_theme(dispp, theme);
 801ac0c:	0020      	movs	r0, r4
 801ac0e:	f7e9 fd57 	bl	80046c0 <lv_disp_set_theme>
    lv_group_set_default(group_main);
 801ac12:	4643      	mov	r3, r8
 801ac14:	6818      	ldr	r0, [r3, #0]
 801ac16:	f7ea faf9 	bl	800520c <lv_group_set_default>
    ui_Menu_screen_init();
 801ac1a:	f7ff fbcb 	bl	801a3b4 <ui_Menu_screen_init>
    lv_group_set_default(group_aircon);
 801ac1e:	6838      	ldr	r0, [r7, #0]
 801ac20:	f7ea faf4 	bl	800520c <lv_group_set_default>
    ui_AirCon_screen_init();
 801ac24:	f7ff fc54 	bl	801a4d0 <ui_AirCon_screen_init>
    lv_group_set_default(group_clock);
 801ac28:	6830      	ldr	r0, [r6, #0]
 801ac2a:	f7ea faef 	bl	800520c <lv_group_set_default>
    ui_SetTime_screen_init();
 801ac2e:	f7ff fda3 	bl	801a778 <ui_SetTime_screen_init>
    lv_group_set_default(group_about);
 801ac32:	6828      	ldr	r0, [r5, #0]
 801ac34:	f7ea faea 	bl	800520c <lv_group_set_default>
    ui_About_screen_init();
 801ac38:	f7ff ff3a 	bl	801aab0 <ui_About_screen_init>
    lv_disp_load_scr(ui_Menu);
 801ac3c:	4b08      	ldr	r3, [pc, #32]	; (801ac60 <ui_init+0x90>)
 801ac3e:	6818      	ldr	r0, [r3, #0]
 801ac40:	f7e9 fef4 	bl	8004a2c <lv_disp_load_scr>
}
 801ac44:	bc80      	pop	{r7}
 801ac46:	46b8      	mov	r8, r7
 801ac48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac4a:	46c0      	nop			; (mov r8, r8)
 801ac4c:	20007d0c 	.word	0x20007d0c
 801ac50:	20007ca4 	.word	0x20007ca4
 801ac54:	20007c9c 	.word	0x20007c9c
 801ac58:	20007ca0 	.word	0x20007ca0
 801ac5c:	20007c98 	.word	0x20007c98
 801ac60:	20007ce8 	.word	0x20007ce8

0801ac64 <get_component_child_event_cb>:
    lv_event_send(comp, LV_EVENT_GET_COMP_CHILD, &info);
    return info.child;
}

void get_component_child_event_cb(lv_event_t * e)
{
 801ac64:	b570      	push	{r4, r5, r6, lr}
 801ac66:	0004      	movs	r4, r0
    lv_obj_t ** c = lv_event_get_user_data(e);
 801ac68:	f7ea f824 	bl	8004cb4 <lv_event_get_user_data>
 801ac6c:	0005      	movs	r5, r0
    ui_comp_get_child_t * info = lv_event_get_param(e);
 801ac6e:	0020      	movs	r0, r4
 801ac70:	f7ea f81e 	bl	8004cb0 <lv_event_get_param>
    info->child = c[info->child_idx];
 801ac74:	6803      	ldr	r3, [r0, #0]
 801ac76:	009b      	lsls	r3, r3, #2
 801ac78:	595b      	ldr	r3, [r3, r5]
 801ac7a:	6043      	str	r3, [r0, #4]
}
 801ac7c:	bd70      	pop	{r4, r5, r6, pc}
 801ac7e:	46c0      	nop			; (mov r8, r8)

0801ac80 <del_component_child_event_cb>:

void del_component_child_event_cb(lv_event_t * e)
{
 801ac80:	b510      	push	{r4, lr}
    lv_obj_t ** c = lv_event_get_user_data(e);
 801ac82:	f7ea f817 	bl	8004cb4 <lv_event_get_user_data>
    lv_mem_free(c);
 801ac86:	f7fa f91d 	bl	8014ec4 <lv_mem_free>
}
 801ac8a:	bd10      	pop	{r4, pc}

0801ac8c <ui_comp_get_child>:
    info.child = NULL;
 801ac8c:	2300      	movs	r3, #0
{
 801ac8e:	b500      	push	{lr}
 801ac90:	b083      	sub	sp, #12
    info.child = NULL;
 801ac92:	9301      	str	r3, [sp, #4]
    lv_event_send(comp, LV_EVENT_GET_COMP_CHILD, &info);
 801ac94:	4b04      	ldr	r3, [pc, #16]	; (801aca8 <ui_comp_get_child+0x1c>)
    info.child_idx = child_idx;
 801ac96:	9100      	str	r1, [sp, #0]
    lv_event_send(comp, LV_EVENT_GET_COMP_CHILD, &info);
 801ac98:	466a      	mov	r2, sp
 801ac9a:	7819      	ldrb	r1, [r3, #0]
 801ac9c:	f7e9 ffc8 	bl	8004c30 <lv_event_send>
    return info.child;
 801aca0:	9801      	ldr	r0, [sp, #4]
}
 801aca2:	b003      	add	sp, #12
 801aca4:	bd00      	pop	{pc}
 801aca6:	46c0      	nop			; (mov r8, r8)
 801aca8:	20007d0c 	.word	0x20007d0c

0801acac <ui_Button_create>:


// COMPONENT Button

lv_obj_t * ui_Button_create(lv_obj_t * comp_parent)
{
 801acac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    lv_obj_t * cui_Button;
    cui_Button = lv_btn_create(comp_parent);
 801acae:	f7fc f805 	bl	8016cbc <lv_btn_create>
 801acb2:	0004      	movs	r4, r0
    lv_obj_set_width(cui_Button, 160);
 801acb4:	21a0      	movs	r1, #160	; 0xa0
 801acb6:	f7ed ff11 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_height(cui_Button, 81);
 801acba:	0020      	movs	r0, r4
 801acbc:	2151      	movs	r1, #81	; 0x51
 801acbe:	f7ed ff25 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_x(cui_Button, 0);
 801acc2:	0020      	movs	r0, r4
 801acc4:	2100      	movs	r1, #0
 801acc6:	f7ed fed9 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(cui_Button, 41);
 801acca:	0020      	movs	r0, r4
 801accc:	2129      	movs	r1, #41	; 0x29
 801acce:	f7ed feed 	bl	8008aac <lv_obj_set_y>
    lv_obj_set_align(cui_Button, LV_ALIGN_TOP_MID);
 801acd2:	0020      	movs	r0, r4
 801acd4:	2102      	movs	r1, #2
 801acd6:	f7ed ff5f 	bl	8008b98 <lv_obj_set_align>
    lv_obj_clear_flag(cui_Button, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801acda:	0020      	movs	r0, r4
 801acdc:	2110      	movs	r1, #16
 801acde:	f7ed f8c5 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_set_style_bg_color(cui_Button, lv_color_hex(0x20345A), LV_PART_MAIN | LV_STATE_DEFAULT);
 801ace2:	4b3f      	ldr	r3, [pc, #252]	; (801ade0 <ui_Button_create+0x134>)
 801ace4:	0020      	movs	r0, r4
 801ace6:	1c19      	adds	r1, r3, #0
 801ace8:	2200      	movs	r2, #0
 801acea:	f7f2 fd7f 	bl	800d7ec <lv_obj_set_style_bg_color>
    lv_obj_set_style_bg_opa(cui_Button, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 801acee:	2200      	movs	r2, #0
 801acf0:	21ff      	movs	r1, #255	; 0xff
 801acf2:	0020      	movs	r0, r4
 801acf4:	f7f2 fd86 	bl	800d804 <lv_obj_set_style_bg_opa>

    lv_obj_t * cui_Button_Text;
    cui_Button_Text = lv_label_create(cui_Button);
 801acf8:	0020      	movs	r0, r4
 801acfa:	f7fe f9b9 	bl	8019070 <lv_label_create>
 801acfe:	0006      	movs	r6, r0
    lv_obj_set_width(cui_Button_Text, LV_SIZE_CONTENT);   /// 1
 801ad00:	4f38      	ldr	r7, [pc, #224]	; (801ade4 <ui_Button_create+0x138>)
 801ad02:	0039      	movs	r1, r7
 801ad04:	f7ed feea 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_height(cui_Button_Text, LV_SIZE_CONTENT);    /// 1
 801ad08:	0030      	movs	r0, r6
 801ad0a:	0039      	movs	r1, r7
 801ad0c:	f7ed fefe 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_x(cui_Button_Text, 0);
 801ad10:	0030      	movs	r0, r6
 801ad12:	2100      	movs	r1, #0
 801ad14:	f7ed feb2 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(cui_Button_Text, -8);
 801ad18:	2108      	movs	r1, #8
 801ad1a:	0030      	movs	r0, r6
 801ad1c:	4249      	negs	r1, r1
 801ad1e:	f7ed fec5 	bl	8008aac <lv_obj_set_y>
    lv_obj_set_align(cui_Button_Text, LV_ALIGN_BOTTOM_MID);
 801ad22:	0030      	movs	r0, r6
 801ad24:	2105      	movs	r1, #5
 801ad26:	f7ed ff37 	bl	8008b98 <lv_obj_set_align>
    lv_label_set_text(cui_Button_Text, "Air Conditioner");
 801ad2a:	0030      	movs	r0, r6
 801ad2c:	492e      	ldr	r1, [pc, #184]	; (801ade8 <ui_Button_create+0x13c>)
 801ad2e:	f7fe f9ab 	bl	8019088 <lv_label_set_text>
    lv_obj_set_style_text_color(cui_Button_Text, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 801ad32:	2101      	movs	r1, #1
 801ad34:	0030      	movs	r0, r6
 801ad36:	2200      	movs	r2, #0
 801ad38:	4249      	negs	r1, r1
 801ad3a:	f7f2 fdc7 	bl	800d8cc <lv_obj_set_style_text_color>
    lv_obj_set_style_text_opa(cui_Button_Text, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 801ad3e:	0030      	movs	r0, r6
 801ad40:	2200      	movs	r2, #0
 801ad42:	21ff      	movs	r1, #255	; 0xff
 801ad44:	f7f2 fdce 	bl	800d8e4 <lv_obj_set_style_text_opa>

    lv_obj_set_style_outline_color(cui_Button, lv_color_hex(0xe0a721), LV_PART_MAIN | LV_STATE_FOCUSED);
 801ad48:	4b28      	ldr	r3, [pc, #160]	; (801adec <ui_Button_create+0x140>)
 801ad4a:	0020      	movs	r0, r4
 801ad4c:	1c19      	adds	r1, r3, #0
 801ad4e:	2202      	movs	r2, #2
 801ad50:	f7f2 fda8 	bl	800d8a4 <lv_obj_set_style_outline_color>
    lv_obj_set_style_outline_width(cui_Button, 2, LV_PART_MAIN | LV_STATE_FOCUSED);
 801ad54:	0020      	movs	r0, r4
 801ad56:	2202      	movs	r2, #2
 801ad58:	2102      	movs	r1, #2
 801ad5a:	f7f2 fd9b 	bl	800d894 <lv_obj_set_style_outline_width>
    lv_obj_set_style_outline_pad(cui_Button, 3, LV_PART_MAIN | LV_STATE_FOCUSED);
 801ad5e:	2202      	movs	r2, #2
 801ad60:	2103      	movs	r1, #3
 801ad62:	0020      	movs	r0, r4
 801ad64:	f7f2 fdaa 	bl	800d8bc <lv_obj_set_style_outline_pad>


    lv_obj_t * cui_Button_Image;
    cui_Button_Image = lv_img_create(cui_Button);
 801ad68:	0020      	movs	r0, r4
 801ad6a:	f7fc fee9 	bl	8017b40 <lv_img_create>
 801ad6e:	0005      	movs	r5, r0
    lv_img_set_src(cui_Button_Image, &ui_img_aircon_png);
 801ad70:	491f      	ldr	r1, [pc, #124]	; (801adf0 <ui_Button_create+0x144>)
 801ad72:	f7fc fef1 	bl	8017b58 <lv_img_set_src>
    lv_obj_set_width(cui_Button_Image, LV_SIZE_CONTENT);   /// 1
 801ad76:	0028      	movs	r0, r5
 801ad78:	0039      	movs	r1, r7
 801ad7a:	f7ed feaf 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_height(cui_Button_Image, LV_SIZE_CONTENT);    /// 1
 801ad7e:	0028      	movs	r0, r5
 801ad80:	0039      	movs	r1, r7
 801ad82:	f7ed fec3 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_x(cui_Button_Image, 0);
 801ad86:	0028      	movs	r0, r5
 801ad88:	2100      	movs	r1, #0
 801ad8a:	f7ed fe77 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(cui_Button_Image, -11);
 801ad8e:	210b      	movs	r1, #11
 801ad90:	0028      	movs	r0, r5
 801ad92:	4249      	negs	r1, r1
 801ad94:	f7ed fe8a 	bl	8008aac <lv_obj_set_y>
    lv_obj_set_align(cui_Button_Image, LV_ALIGN_CENTER);
 801ad98:	0028      	movs	r0, r5
 801ad9a:	2109      	movs	r1, #9
 801ad9c:	f7ed fefc 	bl	8008b98 <lv_obj_set_align>
    lv_obj_add_flag(cui_Button_Image, LV_OBJ_FLAG_ADV_HITTEST);     /// Flags
 801ada0:	2180      	movs	r1, #128	; 0x80
 801ada2:	0028      	movs	r0, r5
 801ada4:	0249      	lsls	r1, r1, #9
 801ada6:	f7ed f825 	bl	8007df4 <lv_obj_add_flag>
    lv_obj_clear_flag(cui_Button_Image, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801adaa:	0028      	movs	r0, r5
 801adac:	2110      	movs	r1, #16
 801adae:	f7ed f85d 	bl	8007e6c <lv_obj_clear_flag>

    lv_obj_t ** children = lv_mem_alloc(sizeof(lv_obj_t *) * _UI_COMP_BUTTON_NUM);
 801adb2:	201c      	movs	r0, #28
 801adb4:	f7fa f864 	bl	8014e80 <lv_mem_alloc>
 801adb8:	0007      	movs	r7, r0
    children[UI_COMP_BUTTON_BUTTON] = cui_Button;
    children[UI_COMP_BUTTON_BUTTON_TEXT] = cui_Button_Text;
    children[UI_COMP_BUTTON_BUTTON_IMAGE] = cui_Button_Image;
    lv_obj_add_event_cb(cui_Button, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801adba:	4b0e      	ldr	r3, [pc, #56]	; (801adf4 <ui_Button_create+0x148>)
    children[UI_COMP_BUTTON_BUTTON_TEXT] = cui_Button_Text;
 801adbc:	6146      	str	r6, [r0, #20]
    children[UI_COMP_BUTTON_BUTTON_IMAGE] = cui_Button_Image;
 801adbe:	6185      	str	r5, [r0, #24]
    lv_obj_add_event_cb(cui_Button, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801adc0:	781a      	ldrb	r2, [r3, #0]
    children[UI_COMP_BUTTON_BUTTON] = cui_Button;
 801adc2:	6004      	str	r4, [r0, #0]
    lv_obj_add_event_cb(cui_Button, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801adc4:	0003      	movs	r3, r0
 801adc6:	490c      	ldr	r1, [pc, #48]	; (801adf8 <ui_Button_create+0x14c>)
 801adc8:	0020      	movs	r0, r4
 801adca:	f7e9 ff95 	bl	8004cf8 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(cui_Button, del_component_child_event_cb, LV_EVENT_DELETE, children);
 801adce:	003b      	movs	r3, r7
 801add0:	2221      	movs	r2, #33	; 0x21
 801add2:	0020      	movs	r0, r4
 801add4:	4909      	ldr	r1, [pc, #36]	; (801adfc <ui_Button_create+0x150>)
 801add6:	f7e9 ff8f 	bl	8004cf8 <lv_obj_add_event_cb>
    return cui_Button;
}
 801adda:	0020      	movs	r0, r4
 801addc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801adde:	46c0      	nop			; (mov r8, r8)
 801ade0:	000021ab 	.word	0x000021ab
 801ade4:	000027d1 	.word	0x000027d1
 801ade8:	0801d904 	.word	0x0801d904
 801adec:	ffffe524 	.word	0xffffe524
 801adf0:	0801d944 	.word	0x0801d944
 801adf4:	20007d0c 	.word	0x20007d0c
 801adf8:	0801ac65 	.word	0x0801ac65
 801adfc:	0801ac81 	.word	0x0801ac81

0801ae00 <ui_Header_Sub_create>:


// COMPONENT Header Sub

lv_obj_t * ui_Header_Sub_create(lv_obj_t * comp_parent)
{
 801ae00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae02:	46c6      	mov	lr, r8
 801ae04:	b500      	push	{lr}

    lv_obj_t * cui_Header_Sub;
    cui_Header_Sub = lv_btn_create(comp_parent);
 801ae06:	f7fb ff59 	bl	8016cbc <lv_btn_create>
 801ae0a:	0004      	movs	r4, r0
    lv_obj_set_height(cui_Header_Sub, 32);
 801ae0c:	2120      	movs	r1, #32
 801ae0e:	f7ed fe7d 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_width(cui_Header_Sub, lv_pct(100));
 801ae12:	0020      	movs	r0, r4
 801ae14:	4946      	ldr	r1, [pc, #280]	; (801af30 <ui_Header_Sub_create+0x130>)
 801ae16:	f7ed fe61 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_align(cui_Header_Sub, LV_ALIGN_TOP_MID);
 801ae1a:	0020      	movs	r0, r4
 801ae1c:	2102      	movs	r1, #2
 801ae1e:	f7ed febb 	bl	8008b98 <lv_obj_set_align>
    lv_obj_clear_flag(cui_Header_Sub, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801ae22:	0020      	movs	r0, r4
 801ae24:	2110      	movs	r1, #16
 801ae26:	f7ed f821 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_set_style_bg_color(cui_Header_Sub, lv_color_hex(0x20345A), LV_PART_MAIN | LV_STATE_DEFAULT);
 801ae2a:	4b42      	ldr	r3, [pc, #264]	; (801af34 <ui_Header_Sub_create+0x134>)
 801ae2c:	0020      	movs	r0, r4
 801ae2e:	1c19      	adds	r1, r3, #0
 801ae30:	2200      	movs	r2, #0
 801ae32:	f7f2 fcdb 	bl	800d7ec <lv_obj_set_style_bg_color>
    lv_obj_set_style_bg_opa(cui_Header_Sub, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 801ae36:	0020      	movs	r0, r4
 801ae38:	2200      	movs	r2, #0
 801ae3a:	21ff      	movs	r1, #255	; 0xff
 801ae3c:	f7f2 fce2 	bl	800d804 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_pad_left(cui_Header_Sub, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801ae40:	0020      	movs	r0, r4
 801ae42:	2200      	movs	r2, #0
 801ae44:	210a      	movs	r1, #10
 801ae46:	f7f2 fcc1 	bl	800d7cc <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(cui_Header_Sub, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801ae4a:	0020      	movs	r0, r4
 801ae4c:	2200      	movs	r2, #0
 801ae4e:	210a      	movs	r1, #10
 801ae50:	f7f2 fcc4 	bl	800d7dc <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(cui_Header_Sub, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 801ae54:	0020      	movs	r0, r4
 801ae56:	2200      	movs	r2, #0
 801ae58:	2100      	movs	r1, #0
 801ae5a:	f7f2 fca7 	bl	800d7ac <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(cui_Header_Sub, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 801ae5e:	0020      	movs	r0, r4
 801ae60:	2200      	movs	r2, #0
 801ae62:	2100      	movs	r1, #0
 801ae64:	f7f2 fcaa 	bl	800d7bc <lv_obj_set_style_pad_bottom>

    lv_obj_set_style_border_color(cui_Header_Sub, lv_color_hex(0xe0a721), LV_PART_MAIN | LV_STATE_FOCUSED);
 801ae68:	4b33      	ldr	r3, [pc, #204]	; (801af38 <ui_Header_Sub_create+0x138>)
 801ae6a:	0020      	movs	r0, r4
 801ae6c:	1c19      	adds	r1, r3, #0
 801ae6e:	2202      	movs	r2, #2
 801ae70:	f7f2 fcf4 	bl	800d85c <lv_obj_set_style_border_color>
    lv_obj_set_style_border_width(cui_Header_Sub, 2, LV_PART_MAIN | LV_STATE_FOCUSED);
 801ae74:	2202      	movs	r2, #2
 801ae76:	2102      	movs	r1, #2
 801ae78:	0020      	movs	r0, r4
 801ae7a:	f7f2 fcfb 	bl	800d874 <lv_obj_set_style_border_width>


    lv_obj_t * cui_Label1;
    cui_Label1 = lv_label_create(cui_Header_Sub);
 801ae7e:	0020      	movs	r0, r4
 801ae80:	f7fe f8f6 	bl	8019070 <lv_label_create>
 801ae84:	0006      	movs	r6, r0
    lv_obj_set_width(cui_Label1, LV_SIZE_CONTENT);   /// 1
 801ae86:	4f2d      	ldr	r7, [pc, #180]	; (801af3c <ui_Header_Sub_create+0x13c>)
 801ae88:	0039      	movs	r1, r7
 801ae8a:	f7ed fe27 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_height(cui_Label1, LV_SIZE_CONTENT);    /// 1
 801ae8e:	0030      	movs	r0, r6
 801ae90:	0039      	movs	r1, r7
 801ae92:	f7ed fe3b 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_align(cui_Label1, LV_ALIGN_CENTER);
 801ae96:	0030      	movs	r0, r6
 801ae98:	2109      	movs	r1, #9
 801ae9a:	f7ed fe7d 	bl	8008b98 <lv_obj_set_align>
    lv_label_set_text(cui_Label1, "Air Conditioner");
 801ae9e:	0030      	movs	r0, r6
 801aea0:	4927      	ldr	r1, [pc, #156]	; (801af40 <ui_Header_Sub_create+0x140>)
 801aea2:	f7fe f8f1 	bl	8019088 <lv_label_set_text>
 801aea6:	2301      	movs	r3, #1
 801aea8:	425b      	negs	r3, r3
    lv_obj_set_style_text_color(cui_Label1, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 801aeaa:	1c19      	adds	r1, r3, #0
 801aeac:	0030      	movs	r0, r6
 801aeae:	2200      	movs	r2, #0
 801aeb0:	4698      	mov	r8, r3
 801aeb2:	f7f2 fd0b 	bl	800d8cc <lv_obj_set_style_text_color>
    lv_obj_set_style_text_opa(cui_Label1, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 801aeb6:	2200      	movs	r2, #0
 801aeb8:	0030      	movs	r0, r6
 801aeba:	21ff      	movs	r1, #255	; 0xff
 801aebc:	f7f2 fd12 	bl	800d8e4 <lv_obj_set_style_text_opa>

    lv_obj_t * cui_Back;
    cui_Back = lv_img_create(cui_Header_Sub);
 801aec0:	0020      	movs	r0, r4
 801aec2:	f7fc fe3d 	bl	8017b40 <lv_img_create>
 801aec6:	0005      	movs	r5, r0
    lv_img_set_src(cui_Back, LV_SYMBOL_LEFT);
 801aec8:	491e      	ldr	r1, [pc, #120]	; (801af44 <ui_Header_Sub_create+0x144>)
 801aeca:	f7fc fe45 	bl	8017b58 <lv_img_set_src>
    lv_obj_set_width(cui_Back, LV_SIZE_CONTENT);   /// 1
 801aece:	0028      	movs	r0, r5
 801aed0:	0039      	movs	r1, r7
 801aed2:	f7ed fe03 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_height(cui_Back, LV_SIZE_CONTENT);    /// 1
 801aed6:	0028      	movs	r0, r5
 801aed8:	0039      	movs	r1, r7
 801aeda:	f7ed fe17 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_align(cui_Back, LV_ALIGN_LEFT_MID);
 801aede:	0028      	movs	r0, r5
 801aee0:	2107      	movs	r1, #7
 801aee2:	f7ed fe59 	bl	8008b98 <lv_obj_set_align>
    lv_obj_add_flag(cui_Back, LV_OBJ_FLAG_CLICKABLE | LV_OBJ_FLAG_ADV_HITTEST);     /// Flags
 801aee6:	0028      	movs	r0, r5
 801aee8:	4917      	ldr	r1, [pc, #92]	; (801af48 <ui_Header_Sub_create+0x148>)
 801aeea:	f7ec ff83 	bl	8007df4 <lv_obj_add_flag>
    lv_obj_clear_flag(cui_Back, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801aeee:	0028      	movs	r0, r5
 801aef0:	2110      	movs	r1, #16
 801aef2:	f7ec ffbb 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_set_style_text_color(cui_Back, lv_color_hex(0xFFFFFF), 0);
 801aef6:	4641      	mov	r1, r8
 801aef8:	0028      	movs	r0, r5
 801aefa:	2200      	movs	r2, #0
 801aefc:	f7f2 fce6 	bl	800d8cc <lv_obj_set_style_text_color>

    lv_obj_t ** children = lv_mem_alloc(sizeof(lv_obj_t *) * _UI_COMP_HEADER_SUB_NUM);
 801af00:	200c      	movs	r0, #12
 801af02:	f7f9 ffbd 	bl	8014e80 <lv_mem_alloc>
 801af06:	0007      	movs	r7, r0
    children[UI_COMP_HEADER_SUB_HEADER_SUB] = cui_Header_Sub;
    children[UI_COMP_HEADER_SUB_LABEL1] = cui_Label1;
    children[UI_COMP_HEADER_SUB_BACK] = cui_Back;
    lv_obj_add_event_cb(cui_Header_Sub, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801af08:	4b10      	ldr	r3, [pc, #64]	; (801af4c <ui_Header_Sub_create+0x14c>)
    children[UI_COMP_HEADER_SUB_LABEL1] = cui_Label1;
 801af0a:	6046      	str	r6, [r0, #4]
    children[UI_COMP_HEADER_SUB_BACK] = cui_Back;
 801af0c:	6085      	str	r5, [r0, #8]
    lv_obj_add_event_cb(cui_Header_Sub, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801af0e:	781a      	ldrb	r2, [r3, #0]
    children[UI_COMP_HEADER_SUB_HEADER_SUB] = cui_Header_Sub;
 801af10:	6004      	str	r4, [r0, #0]
    lv_obj_add_event_cb(cui_Header_Sub, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801af12:	0003      	movs	r3, r0
 801af14:	490e      	ldr	r1, [pc, #56]	; (801af50 <ui_Header_Sub_create+0x150>)
 801af16:	0020      	movs	r0, r4
 801af18:	f7e9 feee 	bl	8004cf8 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(cui_Header_Sub, del_component_child_event_cb, LV_EVENT_DELETE, children);
 801af1c:	003b      	movs	r3, r7
 801af1e:	2221      	movs	r2, #33	; 0x21
 801af20:	0020      	movs	r0, r4
 801af22:	490c      	ldr	r1, [pc, #48]	; (801af54 <ui_Header_Sub_create+0x154>)
 801af24:	f7e9 fee8 	bl	8004cf8 <lv_obj_add_event_cb>
    return cui_Header_Sub;
}
 801af28:	0020      	movs	r0, r4
 801af2a:	bc80      	pop	{r7}
 801af2c:	46b8      	mov	r8, r7
 801af2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af30:	00002064 	.word	0x00002064
 801af34:	000021ab 	.word	0x000021ab
 801af38:	ffffe524 	.word	0xffffe524
 801af3c:	000027d1 	.word	0x000027d1
 801af40:	0801d904 	.word	0x0801d904
 801af44:	0801d914 	.word	0x0801d914
 801af48:	00010002 	.word	0x00010002
 801af4c:	20007d0c 	.word	0x20007d0c
 801af50:	0801ac65 	.word	0x0801ac65
 801af54:	0801ac81 	.word	0x0801ac81

0801af58 <ui_Header_create>:


// COMPONENT Header

lv_obj_t * ui_Header_create(lv_obj_t * comp_parent)
{
 801af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af5a:	46de      	mov	lr, fp
 801af5c:	4657      	mov	r7, sl
 801af5e:	464e      	mov	r6, r9
 801af60:	4645      	mov	r5, r8
 801af62:	b5e0      	push	{r5, r6, r7, lr}

    lv_obj_t * cui_Header;
    cui_Header = lv_obj_create(comp_parent);
 801af64:	f7ec ff3a 	bl	8007ddc <lv_obj_create>
 801af68:	0004      	movs	r4, r0
    lv_obj_set_height(cui_Header, 26);
 801af6a:	211a      	movs	r1, #26
 801af6c:	f7ed fdce 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_width(cui_Header, lv_pct(100));
 801af70:	0020      	movs	r0, r4
 801af72:	497a      	ldr	r1, [pc, #488]	; (801b15c <ui_Header_create+0x204>)
 801af74:	f7ed fdb2 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_align(cui_Header, LV_ALIGN_TOP_MID);
 801af78:	0020      	movs	r0, r4
 801af7a:	2102      	movs	r1, #2
 801af7c:	f7ed fe0c 	bl	8008b98 <lv_obj_set_align>
    lv_obj_add_flag(cui_Header, LV_OBJ_FLAG_FLOATING);     /// Flags
 801af80:	2180      	movs	r1, #128	; 0x80
 801af82:	0020      	movs	r0, r4
 801af84:	02c9      	lsls	r1, r1, #11
 801af86:	f7ec ff35 	bl	8007df4 <lv_obj_add_flag>
    lv_obj_clear_flag(cui_Header, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801af8a:	0020      	movs	r0, r4
 801af8c:	2110      	movs	r1, #16
 801af8e:	f7ec ff6d 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_set_style_bg_color(cui_Header, lv_color_hex(0x233458), LV_PART_MAIN | LV_STATE_DEFAULT);
 801af92:	4b73      	ldr	r3, [pc, #460]	; (801b160 <ui_Header_create+0x208>)
 801af94:	0020      	movs	r0, r4
 801af96:	1c19      	adds	r1, r3, #0
 801af98:	2200      	movs	r2, #0
 801af9a:	f7f2 fc27 	bl	800d7ec <lv_obj_set_style_bg_color>
    lv_obj_set_style_bg_opa(cui_Header, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 801af9e:	0020      	movs	r0, r4
 801afa0:	2200      	movs	r2, #0
 801afa2:	21ff      	movs	r1, #255	; 0xff
 801afa4:	f7f2 fc2e 	bl	800d804 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_pad_left(cui_Header, 4, LV_PART_MAIN | LV_STATE_DEFAULT);
 801afa8:	0020      	movs	r0, r4
 801afaa:	2200      	movs	r2, #0
 801afac:	2104      	movs	r1, #4
 801afae:	f7f2 fc0d 	bl	800d7cc <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(cui_Header, 4, LV_PART_MAIN | LV_STATE_DEFAULT);
 801afb2:	0020      	movs	r0, r4
 801afb4:	2200      	movs	r2, #0
 801afb6:	2104      	movs	r1, #4
 801afb8:	f7f2 fc10 	bl	800d7dc <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(cui_Header, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 801afbc:	0020      	movs	r0, r4
 801afbe:	2200      	movs	r2, #0
 801afc0:	2100      	movs	r1, #0
 801afc2:	f7f2 fbf3 	bl	800d7ac <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(cui_Header, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 801afc6:	2200      	movs	r2, #0
 801afc8:	2100      	movs	r1, #0
 801afca:	0020      	movs	r0, r4
 801afcc:	f7f2 fbf6 	bl	800d7bc <lv_obj_set_style_pad_bottom>

    lv_obj_t * cui_Battery;
    cui_Battery = lv_img_create(cui_Header);
 801afd0:	0020      	movs	r0, r4
 801afd2:	f7fc fdb5 	bl	8017b40 <lv_img_create>
 801afd6:	4682      	mov	sl, r0
    lv_img_set_src(cui_Battery, &ui_img_battery_png);
    lv_obj_set_width(cui_Battery, LV_SIZE_CONTENT);   /// 89
 801afd8:	4f62      	ldr	r7, [pc, #392]	; (801b164 <ui_Header_create+0x20c>)
    lv_img_set_src(cui_Battery, &ui_img_battery_png);
 801afda:	4963      	ldr	r1, [pc, #396]	; (801b168 <ui_Header_create+0x210>)
 801afdc:	f7fc fdbc 	bl	8017b58 <lv_img_set_src>
    lv_obj_set_width(cui_Battery, LV_SIZE_CONTENT);   /// 89
 801afe0:	4650      	mov	r0, sl
 801afe2:	0039      	movs	r1, r7
 801afe4:	f7ed fd7a 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_height(cui_Battery, LV_SIZE_CONTENT);    /// 14
 801afe8:	4650      	mov	r0, sl
 801afea:	0039      	movs	r1, r7
 801afec:	f7ed fd8e 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_align(cui_Battery, LV_ALIGN_RIGHT_MID);
 801aff0:	4650      	mov	r0, sl
 801aff2:	2108      	movs	r1, #8
 801aff4:	f7ed fdd0 	bl	8008b98 <lv_obj_set_align>
    lv_obj_add_flag(cui_Battery, LV_OBJ_FLAG_ADV_HITTEST);     /// Flags
 801aff8:	2380      	movs	r3, #128	; 0x80
 801affa:	025b      	lsls	r3, r3, #9
 801affc:	0019      	movs	r1, r3
 801affe:	4650      	mov	r0, sl
 801b000:	4698      	mov	r8, r3
 801b002:	f7ec fef7 	bl	8007df4 <lv_obj_add_flag>
    lv_obj_clear_flag(cui_Battery, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801b006:	4650      	mov	r0, sl
 801b008:	2110      	movs	r1, #16
 801b00a:	f7ec ff2f 	bl	8007e6c <lv_obj_clear_flag>

    lv_obj_t * cui_Wifi;
    cui_Wifi = lv_img_create(cui_Header);
 801b00e:	0020      	movs	r0, r4
 801b010:	f7fc fd96 	bl	8017b40 <lv_img_create>
 801b014:	0006      	movs	r6, r0
    lv_img_set_src(cui_Wifi, &ui_img_wifi_png);
 801b016:	4955      	ldr	r1, [pc, #340]	; (801b16c <ui_Header_create+0x214>)
 801b018:	f7fc fd9e 	bl	8017b58 <lv_img_set_src>
    lv_obj_set_width(cui_Wifi, LV_SIZE_CONTENT);   /// 1
 801b01c:	0030      	movs	r0, r6
 801b01e:	0039      	movs	r1, r7
 801b020:	f7ed fd5c 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_height(cui_Wifi, LV_SIZE_CONTENT);    /// 1
 801b024:	0030      	movs	r0, r6
 801b026:	0039      	movs	r1, r7
 801b028:	f7ed fd70 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_x(cui_Wifi, -30);
 801b02c:	211e      	movs	r1, #30
 801b02e:	0030      	movs	r0, r6
 801b030:	4249      	negs	r1, r1
 801b032:	f7ed fd23 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(cui_Wifi, 0);
 801b036:	0030      	movs	r0, r6
 801b038:	2100      	movs	r1, #0
 801b03a:	f7ed fd37 	bl	8008aac <lv_obj_set_y>
    lv_obj_set_align(cui_Wifi, LV_ALIGN_RIGHT_MID);
 801b03e:	0030      	movs	r0, r6
 801b040:	2108      	movs	r1, #8
 801b042:	f7ed fda9 	bl	8008b98 <lv_obj_set_align>
    lv_obj_add_flag(cui_Wifi, LV_OBJ_FLAG_ADV_HITTEST);     /// Flags
 801b046:	0030      	movs	r0, r6
 801b048:	4641      	mov	r1, r8
 801b04a:	f7ec fed3 	bl	8007df4 <lv_obj_add_flag>
    lv_obj_clear_flag(cui_Wifi, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801b04e:	0030      	movs	r0, r6
 801b050:	2110      	movs	r1, #16
 801b052:	f7ec ff0b 	bl	8007e6c <lv_obj_clear_flag>

    lv_obj_t * cui_BLE;
    cui_BLE = lv_img_create(cui_Header);
 801b056:	0020      	movs	r0, r4
 801b058:	f7fc fd72 	bl	8017b40 <lv_img_create>
 801b05c:	0005      	movs	r5, r0
    lv_img_set_src(cui_BLE, &ui_img_ble_png);
 801b05e:	4944      	ldr	r1, [pc, #272]	; (801b170 <ui_Header_create+0x218>)
 801b060:	f7fc fd7a 	bl	8017b58 <lv_img_set_src>
    lv_obj_set_width(cui_BLE, LV_SIZE_CONTENT);   /// 1
 801b064:	0028      	movs	r0, r5
 801b066:	0039      	movs	r1, r7
 801b068:	f7ed fd38 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_height(cui_BLE, LV_SIZE_CONTENT);    /// 1
 801b06c:	0028      	movs	r0, r5
 801b06e:	0039      	movs	r1, r7
 801b070:	f7ed fd4c 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_x(cui_BLE, -57);
 801b074:	2139      	movs	r1, #57	; 0x39
 801b076:	0028      	movs	r0, r5
 801b078:	4249      	negs	r1, r1
 801b07a:	f7ed fcff 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(cui_BLE, 0);
 801b07e:	0028      	movs	r0, r5
 801b080:	2100      	movs	r1, #0
 801b082:	f7ed fd13 	bl	8008aac <lv_obj_set_y>
    lv_obj_set_align(cui_BLE, LV_ALIGN_RIGHT_MID);
 801b086:	0028      	movs	r0, r5
 801b088:	2108      	movs	r1, #8
 801b08a:	f7ed fd85 	bl	8008b98 <lv_obj_set_align>
    lv_obj_add_flag(cui_BLE, LV_OBJ_FLAG_ADV_HITTEST);     /// Flags
 801b08e:	0028      	movs	r0, r5
 801b090:	4641      	mov	r1, r8
 801b092:	f7ec feaf 	bl	8007df4 <lv_obj_add_flag>
    lv_obj_clear_flag(cui_BLE, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801b096:	0028      	movs	r0, r5
 801b098:	2110      	movs	r1, #16
 801b09a:	f7ec fee7 	bl	8007e6c <lv_obj_clear_flag>

    lv_obj_t * cui_Time;
    cui_Time = lv_label_create(cui_Header);
 801b09e:	0020      	movs	r0, r4
 801b0a0:	f7fd ffe6 	bl	8019070 <lv_label_create>
 801b0a4:	4681      	mov	r9, r0
    lv_obj_set_width(cui_Time, LV_SIZE_CONTENT);   /// 1
 801b0a6:	0039      	movs	r1, r7
 801b0a8:	f7ed fd18 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_height(cui_Time, LV_SIZE_CONTENT);    /// 1
 801b0ac:	4648      	mov	r0, r9
 801b0ae:	0039      	movs	r1, r7
 801b0b0:	f7ed fd2c 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_align(cui_Time, LV_ALIGN_CENTER);
 801b0b4:	4648      	mov	r0, r9
 801b0b6:	2109      	movs	r1, #9
 801b0b8:	f7ed fd6e 	bl	8008b98 <lv_obj_set_align>
    lv_label_set_text(cui_Time, "14:37");
 801b0bc:	4648      	mov	r0, r9
 801b0be:	492d      	ldr	r1, [pc, #180]	; (801b174 <ui_Header_create+0x21c>)
 801b0c0:	f7fd ffe2 	bl	8019088 <lv_label_set_text>
 801b0c4:	2301      	movs	r3, #1
 801b0c6:	425b      	negs	r3, r3
    lv_obj_set_style_text_color(cui_Time, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 801b0c8:	1c19      	adds	r1, r3, #0
 801b0ca:	4648      	mov	r0, r9
 801b0cc:	2200      	movs	r2, #0
 801b0ce:	469b      	mov	fp, r3
 801b0d0:	f7f2 fbfc 	bl	800d8cc <lv_obj_set_style_text_color>
    lv_obj_set_style_text_opa(cui_Time, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b0d4:	2200      	movs	r2, #0
 801b0d6:	4648      	mov	r0, r9
 801b0d8:	21ff      	movs	r1, #255	; 0xff
 801b0da:	f7f2 fc03 	bl	800d8e4 <lv_obj_set_style_text_opa>

    lv_obj_t * cui_Date;
    cui_Date = lv_label_create(cui_Header);
 801b0de:	0020      	movs	r0, r4
 801b0e0:	f7fd ffc6 	bl	8019070 <lv_label_create>
 801b0e4:	4680      	mov	r8, r0
    lv_obj_set_width(cui_Date, LV_SIZE_CONTENT);   /// 1
 801b0e6:	0039      	movs	r1, r7
 801b0e8:	f7ed fcf8 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_height(cui_Date, LV_SIZE_CONTENT);    /// 1
 801b0ec:	4640      	mov	r0, r8
 801b0ee:	0039      	movs	r1, r7
 801b0f0:	f7ed fd0c 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_align(cui_Date, LV_ALIGN_LEFT_MID);
 801b0f4:	4640      	mov	r0, r8
 801b0f6:	2107      	movs	r1, #7
 801b0f8:	f7ed fd4e 	bl	8008b98 <lv_obj_set_align>
    lv_label_set_text(cui_Date, "10 June");
 801b0fc:	4640      	mov	r0, r8
 801b0fe:	491e      	ldr	r1, [pc, #120]	; (801b178 <ui_Header_create+0x220>)
 801b100:	f7fd ffc2 	bl	8019088 <lv_label_set_text>
    lv_obj_set_style_text_color(cui_Date, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 801b104:	4659      	mov	r1, fp
 801b106:	4640      	mov	r0, r8
 801b108:	2200      	movs	r2, #0
 801b10a:	f7f2 fbdf 	bl	800d8cc <lv_obj_set_style_text_color>
    lv_obj_set_style_text_opa(cui_Date, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b10e:	4640      	mov	r0, r8
 801b110:	2200      	movs	r2, #0
 801b112:	21ff      	movs	r1, #255	; 0xff
 801b114:	f7f2 fbe6 	bl	800d8e4 <lv_obj_set_style_text_opa>

    lv_obj_t ** children = lv_mem_alloc(sizeof(lv_obj_t *) * _UI_COMP_HEADER_NUM);
 801b118:	2018      	movs	r0, #24
 801b11a:	f7f9 feb1 	bl	8014e80 <lv_mem_alloc>
    children[UI_COMP_HEADER_HEADER] = cui_Header;
    children[UI_COMP_HEADER_BATTERY] = cui_Battery;
 801b11e:	4653      	mov	r3, sl
 801b120:	6043      	str	r3, [r0, #4]
    children[UI_COMP_HEADER_WIFI] = cui_Wifi;
    children[UI_COMP_HEADER_BLE] = cui_BLE;
    children[UI_COMP_HEADER_TIME] = cui_Time;
 801b122:	464b      	mov	r3, r9
 801b124:	6103      	str	r3, [r0, #16]
    children[UI_COMP_HEADER_DATE] = cui_Date;
 801b126:	4643      	mov	r3, r8
    lv_obj_t ** children = lv_mem_alloc(sizeof(lv_obj_t *) * _UI_COMP_HEADER_NUM);
 801b128:	0007      	movs	r7, r0
    children[UI_COMP_HEADER_DATE] = cui_Date;
 801b12a:	6143      	str	r3, [r0, #20]
    lv_obj_add_event_cb(cui_Header, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801b12c:	4b13      	ldr	r3, [pc, #76]	; (801b17c <ui_Header_create+0x224>)
    children[UI_COMP_HEADER_WIFI] = cui_Wifi;
 801b12e:	6086      	str	r6, [r0, #8]
    children[UI_COMP_HEADER_BLE] = cui_BLE;
 801b130:	60c5      	str	r5, [r0, #12]
    lv_obj_add_event_cb(cui_Header, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801b132:	781a      	ldrb	r2, [r3, #0]
    children[UI_COMP_HEADER_HEADER] = cui_Header;
 801b134:	6004      	str	r4, [r0, #0]
    lv_obj_add_event_cb(cui_Header, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801b136:	0003      	movs	r3, r0
 801b138:	4911      	ldr	r1, [pc, #68]	; (801b180 <ui_Header_create+0x228>)
 801b13a:	0020      	movs	r0, r4
 801b13c:	f7e9 fddc 	bl	8004cf8 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(cui_Header, del_component_child_event_cb, LV_EVENT_DELETE, children);
 801b140:	003b      	movs	r3, r7
 801b142:	2221      	movs	r2, #33	; 0x21
 801b144:	0020      	movs	r0, r4
 801b146:	490f      	ldr	r1, [pc, #60]	; (801b184 <ui_Header_create+0x22c>)
 801b148:	f7e9 fdd6 	bl	8004cf8 <lv_obj_add_event_cb>
    return cui_Header;
}
 801b14c:	0020      	movs	r0, r4
 801b14e:	bcf0      	pop	{r4, r5, r6, r7}
 801b150:	46bb      	mov	fp, r7
 801b152:	46b2      	mov	sl, r6
 801b154:	46a9      	mov	r9, r5
 801b156:	46a0      	mov	r8, r4
 801b158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b15a:	46c0      	nop			; (mov r8, r8)
 801b15c:	00002064 	.word	0x00002064
 801b160:	000021ab 	.word	0x000021ab
 801b164:	000027d1 	.word	0x000027d1
 801b168:	0801db10 	.word	0x0801db10
 801b16c:	0801f214 	.word	0x0801f214
 801b170:	0801db80 	.word	0x0801db80
 801b174:	0801d918 	.word	0x0801d918
 801b178:	0801d920 	.word	0x0801d920
 801b17c:	20007d0c 	.word	0x20007d0c
 801b180:	0801ac65 	.word	0x0801ac65
 801b184:	0801ac81 	.word	0x0801ac81

0801b188 <ui_List_Switch_create>:


// COMPONENT List Switch

lv_obj_t * ui_List_Switch_create(lv_obj_t * comp_parent)
{
 801b188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b18a:	46c6      	mov	lr, r8
 801b18c:	b500      	push	{lr}

    lv_obj_t * cui_List_Switch;
    cui_List_Switch = lv_obj_create(comp_parent);
 801b18e:	f7ec fe25 	bl	8007ddc <lv_obj_create>
 801b192:	0005      	movs	r5, r0
    lv_obj_set_height(cui_List_Switch, 50);
 801b194:	2132      	movs	r1, #50	; 0x32
 801b196:	f7ed fcb9 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_width(cui_List_Switch, lv_pct(100));
 801b19a:	0028      	movs	r0, r5
 801b19c:	4973      	ldr	r1, [pc, #460]	; (801b36c <ui_List_Switch_create+0x1e4>)
 801b19e:	f7ed fc9d 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_x(cui_List_Switch, 0);
 801b1a2:	0028      	movs	r0, r5
 801b1a4:	2100      	movs	r1, #0
 801b1a6:	f7ed fc69 	bl	8008a7c <lv_obj_set_x>
    lv_obj_set_y(cui_List_Switch, 28);
 801b1aa:	0028      	movs	r0, r5
 801b1ac:	211c      	movs	r1, #28
 801b1ae:	f7ed fc7d 	bl	8008aac <lv_obj_set_y>
    lv_obj_set_align(cui_List_Switch, LV_ALIGN_TOP_MID);
 801b1b2:	0028      	movs	r0, r5
 801b1b4:	2102      	movs	r1, #2
 801b1b6:	f7ed fcef 	bl	8008b98 <lv_obj_set_align>
    lv_obj_clear_flag(cui_List_Switch, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801b1ba:	4e6d      	ldr	r6, [pc, #436]	; (801b370 <ui_List_Switch_create+0x1e8>)
 801b1bc:	0028      	movs	r0, r5
 801b1be:	2110      	movs	r1, #16
 801b1c0:	f7ec fe54 	bl	8007e6c <lv_obj_clear_flag>
    lv_obj_set_style_bg_opa(cui_List_Switch, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b1c4:	0028      	movs	r0, r5
 801b1c6:	2200      	movs	r2, #0
 801b1c8:	2100      	movs	r1, #0
 801b1ca:	f7f2 fb1b 	bl	800d804 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_border_color(cui_List_Switch, lv_color_hex(0x20345A), LV_PART_MAIN | LV_STATE_DEFAULT);
 801b1ce:	0028      	movs	r0, r5
 801b1d0:	1c31      	adds	r1, r6, #0
 801b1d2:	2200      	movs	r2, #0
 801b1d4:	f7f2 fb42 	bl	800d85c <lv_obj_set_style_border_color>
    lv_obj_set_style_border_width(cui_List_Switch, 2, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b1d8:	0028      	movs	r0, r5
 801b1da:	2200      	movs	r2, #0
 801b1dc:	2102      	movs	r1, #2
 801b1de:	f7f2 fb49 	bl	800d874 <lv_obj_set_style_border_width>
    lv_obj_set_style_border_side(cui_List_Switch, LV_BORDER_SIDE_BOTTOM, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b1e2:	0028      	movs	r0, r5
 801b1e4:	2200      	movs	r2, #0
 801b1e6:	2101      	movs	r1, #1
 801b1e8:	f7f2 fb4c 	bl	800d884 <lv_obj_set_style_border_side>
    lv_obj_set_style_pad_left(cui_List_Switch, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b1ec:	0028      	movs	r0, r5
 801b1ee:	2200      	movs	r2, #0
 801b1f0:	210a      	movs	r1, #10
 801b1f2:	f7f2 faeb 	bl	800d7cc <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(cui_List_Switch, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b1f6:	0028      	movs	r0, r5
 801b1f8:	2200      	movs	r2, #0
 801b1fa:	210a      	movs	r1, #10
 801b1fc:	f7f2 faee 	bl	800d7dc <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(cui_List_Switch, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b200:	0028      	movs	r0, r5
 801b202:	2200      	movs	r2, #0
 801b204:	2100      	movs	r1, #0
 801b206:	f7f2 fad1 	bl	800d7ac <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(cui_List_Switch, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b20a:	2200      	movs	r2, #0
 801b20c:	0028      	movs	r0, r5
 801b20e:	2100      	movs	r1, #0
 801b210:	f7f2 fad4 	bl	800d7bc <lv_obj_set_style_pad_bottom>

    lv_obj_t * cui_List_Text;
    cui_List_Text = lv_label_create(cui_List_Switch);
 801b214:	0028      	movs	r0, r5
 801b216:	f7fd ff2b 	bl	8019070 <lv_label_create>
 801b21a:	0007      	movs	r7, r0
    lv_obj_set_align(cui_List_Text, LV_ALIGN_LEFT_MID);
 801b21c:	2107      	movs	r1, #7
 801b21e:	f7ed fcbb 	bl	8008b98 <lv_obj_set_align>
    lv_label_set_text(cui_List_Text, "Quiet");
 801b222:	0038      	movs	r0, r7
 801b224:	4953      	ldr	r1, [pc, #332]	; (801b374 <ui_List_Switch_create+0x1ec>)
 801b226:	f7fd ff2f 	bl	8019088 <lv_label_set_text>
    lv_obj_set_style_text_color(cui_List_Text, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 801b22a:	2101      	movs	r1, #1
 801b22c:	2200      	movs	r2, #0
 801b22e:	0038      	movs	r0, r7
 801b230:	4249      	negs	r1, r1
 801b232:	f7f2 fb4b 	bl	800d8cc <lv_obj_set_style_text_color>

    lv_obj_t * cui_Switch1;
    cui_Switch1 = lv_switch_create(cui_List_Switch);
 801b236:	0028      	movs	r0, r5
 801b238:	f7fe ff46 	bl	801a0c8 <lv_switch_create>
 801b23c:	0004      	movs	r4, r0
    lv_obj_set_width(cui_Switch1, 50);
 801b23e:	2132      	movs	r1, #50	; 0x32
 801b240:	f7ed fc4c 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_height(cui_Switch1, 25);
 801b244:	0020      	movs	r0, r4
 801b246:	2119      	movs	r1, #25
 801b248:	f7ed fc60 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_align(cui_Switch1, LV_ALIGN_RIGHT_MID);
 801b24c:	0020      	movs	r0, r4
 801b24e:	2108      	movs	r1, #8
 801b250:	f7ed fca2 	bl	8008b98 <lv_obj_set_align>
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b254:	0020      	movs	r0, r4
 801b256:	2200      	movs	r2, #0
 801b258:	2100      	movs	r1, #0
 801b25a:	f7f2 fad3 	bl	800d804 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_bg_img_src(cui_Switch1, &ui_img_ellips_png, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b25e:	4b46      	ldr	r3, [pc, #280]	; (801b378 <ui_List_Switch_create+0x1f0>)
 801b260:	0020      	movs	r0, r4
 801b262:	0019      	movs	r1, r3
 801b264:	2200      	movs	r2, #0
 801b266:	4698      	mov	r8, r3
 801b268:	f7f2 fad4 	bl	800d814 <lv_obj_set_style_bg_img_src>
    lv_obj_set_style_bg_img_recolor(cui_Switch1, lv_color_hex(0x20345A), LV_PART_MAIN | LV_STATE_DEFAULT);
 801b26c:	1c31      	adds	r1, r6, #0
    lv_obj_set_style_bg_img_recolor_opa(cui_Switch1, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_MAIN | LV_STATE_CHECKED);
    lv_obj_set_style_bg_img_src(cui_Switch1, &ui_img_ellips_png, LV_PART_MAIN | LV_STATE_CHECKED);

    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_INDICATOR | LV_STATE_DEFAULT);
 801b26e:	2680      	movs	r6, #128	; 0x80
    lv_obj_set_style_bg_img_recolor(cui_Switch1, lv_color_hex(0x20345A), LV_PART_MAIN | LV_STATE_DEFAULT);
 801b270:	0020      	movs	r0, r4
 801b272:	2200      	movs	r2, #0
 801b274:	f7f2 fad6 	bl	800d824 <lv_obj_set_style_bg_img_recolor>
    lv_obj_set_style_bg_img_recolor_opa(cui_Switch1, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b278:	0020      	movs	r0, r4
 801b27a:	2200      	movs	r2, #0
 801b27c:	21ff      	movs	r1, #255	; 0xff
 801b27e:	f7f2 fadd 	bl	800d83c <lv_obj_set_style_bg_img_recolor_opa>
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_MAIN | LV_STATE_CHECKED);
 801b282:	0020      	movs	r0, r4
 801b284:	2201      	movs	r2, #1
 801b286:	2100      	movs	r1, #0
 801b288:	f7f2 fabc 	bl	800d804 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_INDICATOR | LV_STATE_DEFAULT);
 801b28c:	02b6      	lsls	r6, r6, #10
    lv_obj_set_style_bg_img_src(cui_Switch1, &ui_img_ellips_png, LV_PART_MAIN | LV_STATE_CHECKED);
 801b28e:	4641      	mov	r1, r8
 801b290:	0020      	movs	r0, r4
 801b292:	2201      	movs	r2, #1
 801b294:	f7f2 fabe 	bl	800d814 <lv_obj_set_style_bg_img_src>
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_INDICATOR | LV_STATE_DEFAULT);
 801b298:	0032      	movs	r2, r6
 801b29a:	0020      	movs	r0, r4
 801b29c:	2100      	movs	r1, #0
 801b29e:	f7f2 fab1 	bl	800d804 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_bg_img_tiled(cui_Switch1, true, LV_PART_INDICATOR | LV_STATE_DEFAULT);
 801b2a2:	0032      	movs	r2, r6
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_INDICATOR | LV_STATE_CHECKED);
 801b2a4:	4e35      	ldr	r6, [pc, #212]	; (801b37c <ui_List_Switch_create+0x1f4>)
    lv_obj_set_style_bg_img_tiled(cui_Switch1, true, LV_PART_INDICATOR | LV_STATE_DEFAULT);
 801b2a6:	0020      	movs	r0, r4
 801b2a8:	2101      	movs	r1, #1
 801b2aa:	f7f2 facf 	bl	800d84c <lv_obj_set_style_bg_img_tiled>
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_INDICATOR | LV_STATE_CHECKED);
 801b2ae:	0032      	movs	r2, r6
 801b2b0:	0020      	movs	r0, r4
 801b2b2:	2100      	movs	r1, #0
 801b2b4:	f7f2 faa6 	bl	800d804 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_bg_img_src(cui_Switch1, &ui_img_ellips_png, LV_PART_INDICATOR | LV_STATE_CHECKED);
 801b2b8:	4641      	mov	r1, r8
 801b2ba:	0032      	movs	r2, r6
 801b2bc:	0020      	movs	r0, r4
 801b2be:	f7f2 faa9 	bl	800d814 <lv_obj_set_style_bg_img_src>
    lv_obj_set_style_bg_img_recolor(cui_Switch1, lv_color_hex(0x4DD549), LV_PART_INDICATOR | LV_STATE_CHECKED);
 801b2c2:	4b2f      	ldr	r3, [pc, #188]	; (801b380 <ui_List_Switch_create+0x1f8>)
 801b2c4:	0032      	movs	r2, r6
 801b2c6:	1c19      	adds	r1, r3, #0
 801b2c8:	0020      	movs	r0, r4
 801b2ca:	f7f2 faab 	bl	800d824 <lv_obj_set_style_bg_img_recolor>
    lv_obj_set_style_bg_img_recolor_opa(cui_Switch1, 255, LV_PART_INDICATOR | LV_STATE_CHECKED);
 801b2ce:	0032      	movs	r2, r6

    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_KNOB | LV_STATE_DEFAULT);
 801b2d0:	26c0      	movs	r6, #192	; 0xc0
    lv_obj_set_style_bg_img_recolor_opa(cui_Switch1, 255, LV_PART_INDICATOR | LV_STATE_CHECKED);
 801b2d2:	0020      	movs	r0, r4
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_KNOB | LV_STATE_DEFAULT);
 801b2d4:	02b6      	lsls	r6, r6, #10
    lv_obj_set_style_bg_img_recolor_opa(cui_Switch1, 255, LV_PART_INDICATOR | LV_STATE_CHECKED);
 801b2d6:	21ff      	movs	r1, #255	; 0xff
 801b2d8:	f7f2 fab0 	bl	800d83c <lv_obj_set_style_bg_img_recolor_opa>
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_KNOB | LV_STATE_DEFAULT);
 801b2dc:	0032      	movs	r2, r6
 801b2de:	0020      	movs	r0, r4
 801b2e0:	2100      	movs	r1, #0
 801b2e2:	f7f2 fa8f 	bl	800d804 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_bg_img_src(cui_Switch1, &ui_img_circle_png, LV_PART_KNOB | LV_STATE_DEFAULT);
 801b2e6:	0032      	movs	r2, r6
    lv_obj_set_style_pad_left(cui_Switch1, 0, LV_PART_KNOB | LV_STATE_CHECKED);
 801b2e8:	4e26      	ldr	r6, [pc, #152]	; (801b384 <ui_List_Switch_create+0x1fc>)
    lv_obj_set_style_bg_img_src(cui_Switch1, &ui_img_circle_png, LV_PART_KNOB | LV_STATE_DEFAULT);
 801b2ea:	0020      	movs	r0, r4
 801b2ec:	4926      	ldr	r1, [pc, #152]	; (801b388 <ui_List_Switch_create+0x200>)
 801b2ee:	f7f2 fa91 	bl	800d814 <lv_obj_set_style_bg_img_src>
    lv_obj_set_style_pad_left(cui_Switch1, 0, LV_PART_KNOB | LV_STATE_CHECKED);
 801b2f2:	0032      	movs	r2, r6
 801b2f4:	0020      	movs	r0, r4
 801b2f6:	2100      	movs	r1, #0
 801b2f8:	f7f2 fa68 	bl	800d7cc <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(cui_Switch1, -3, LV_PART_KNOB | LV_STATE_CHECKED);
 801b2fc:	2103      	movs	r1, #3
 801b2fe:	0032      	movs	r2, r6
 801b300:	0020      	movs	r0, r4
 801b302:	4249      	negs	r1, r1
 801b304:	f7f2 fa6a 	bl	800d7dc <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(cui_Switch1, 0, LV_PART_KNOB | LV_STATE_CHECKED);
 801b308:	0032      	movs	r2, r6
 801b30a:	0020      	movs	r0, r4
 801b30c:	2100      	movs	r1, #0
 801b30e:	f7f2 fa4d 	bl	800d7ac <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(cui_Switch1, 0, LV_PART_KNOB | LV_STATE_CHECKED);
 801b312:	0032      	movs	r2, r6
 801b314:	0020      	movs	r0, r4
 801b316:	2100      	movs	r1, #0
 801b318:	f7f2 fa50 	bl	800d7bc <lv_obj_set_style_pad_bottom>


    lv_obj_set_style_outline_color(cui_Switch1, lv_color_hex(0xe0a721), LV_PART_MAIN | LV_STATE_FOCUSED);
 801b31c:	4b1b      	ldr	r3, [pc, #108]	; (801b38c <ui_List_Switch_create+0x204>)
 801b31e:	0020      	movs	r0, r4
 801b320:	1c19      	adds	r1, r3, #0
 801b322:	2202      	movs	r2, #2
 801b324:	f7f2 fabe 	bl	800d8a4 <lv_obj_set_style_outline_color>
    lv_obj_set_style_outline_width(cui_Switch1, 2, LV_PART_MAIN | LV_STATE_FOCUSED);
 801b328:	0020      	movs	r0, r4
 801b32a:	2202      	movs	r2, #2
 801b32c:	2102      	movs	r1, #2
 801b32e:	f7f2 fab1 	bl	800d894 <lv_obj_set_style_outline_width>
    lv_obj_set_style_outline_pad(cui_Switch1, 3, LV_PART_MAIN | LV_STATE_FOCUSED);
 801b332:	2202      	movs	r2, #2
 801b334:	2103      	movs	r1, #3
 801b336:	0020      	movs	r0, r4
 801b338:	f7f2 fac0 	bl	800d8bc <lv_obj_set_style_outline_pad>

    lv_obj_t ** children = lv_mem_alloc(sizeof(lv_obj_t *) * _UI_COMP_LIST_SWITCH_NUM);
 801b33c:	200c      	movs	r0, #12
 801b33e:	f7f9 fd9f 	bl	8014e80 <lv_mem_alloc>
 801b342:	0006      	movs	r6, r0
    children[UI_COMP_LIST_SWITCH_LIST_SWITCH] = cui_List_Switch;
    children[UI_COMP_LIST_SWITCH_LIST_TEXT] = cui_List_Text;
    children[UI_COMP_LIST_SWITCH_SWITCH1] = cui_Switch1;
    lv_obj_add_event_cb(cui_List_Switch, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801b344:	4b12      	ldr	r3, [pc, #72]	; (801b390 <ui_List_Switch_create+0x208>)
    children[UI_COMP_LIST_SWITCH_LIST_SWITCH] = cui_List_Switch;
 801b346:	6005      	str	r5, [r0, #0]
    children[UI_COMP_LIST_SWITCH_LIST_TEXT] = cui_List_Text;
 801b348:	6047      	str	r7, [r0, #4]
    lv_obj_add_event_cb(cui_List_Switch, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801b34a:	781a      	ldrb	r2, [r3, #0]
    children[UI_COMP_LIST_SWITCH_SWITCH1] = cui_Switch1;
 801b34c:	6084      	str	r4, [r0, #8]
    lv_obj_add_event_cb(cui_List_Switch, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801b34e:	0003      	movs	r3, r0
 801b350:	4910      	ldr	r1, [pc, #64]	; (801b394 <ui_List_Switch_create+0x20c>)
 801b352:	0028      	movs	r0, r5
 801b354:	f7e9 fcd0 	bl	8004cf8 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(cui_List_Switch, del_component_child_event_cb, LV_EVENT_DELETE, children);
 801b358:	0033      	movs	r3, r6
 801b35a:	0028      	movs	r0, r5
 801b35c:	2221      	movs	r2, #33	; 0x21
 801b35e:	490e      	ldr	r1, [pc, #56]	; (801b398 <ui_List_Switch_create+0x210>)
 801b360:	f7e9 fcca 	bl	8004cf8 <lv_obj_add_event_cb>
    return cui_List_Switch;
}
 801b364:	0028      	movs	r0, r5
 801b366:	bc80      	pop	{r7}
 801b368:	46b8      	mov	r8, r7
 801b36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b36c:	00002064 	.word	0x00002064
 801b370:	000021ab 	.word	0x000021ab
 801b374:	0801d928 	.word	0x0801d928
 801b378:	0801e018 	.word	0x0801e018
 801b37c:	00020001 	.word	0x00020001
 801b380:	00004ea9 	.word	0x00004ea9
 801b384:	00030001 	.word	0x00030001
 801b388:	0801dbd0 	.word	0x0801dbd0
 801b38c:	ffffe524 	.word	0xffffe524
 801b390:	20007d0c 	.word	0x20007d0c
 801b394:	0801ac65 	.word	0x0801ac65
 801b398:	0801ac81 	.word	0x0801ac81

0801b39c <ui_Roller_create>:


// COMPONENT Roller

lv_obj_t * ui_Roller_create(lv_obj_t * comp_parent)
{
 801b39c:	b570      	push	{r4, r5, r6, lr}
    lv_obj_t * cui_Roller;
    cui_Roller = lv_roller_create(comp_parent);
 801b39e:	f7fe f973 	bl	8019688 <lv_roller_create>
 801b3a2:	0004      	movs	r4, r0
    lv_roller_set_options(cui_Roller, "Auto\nCool\nHeat\nFan", LV_ROLLER_MODE_NORMAL);
 801b3a4:	2200      	movs	r2, #0
 801b3a6:	4930      	ldr	r1, [pc, #192]	; (801b468 <ui_Roller_create+0xcc>)
 801b3a8:	f7fe f97a 	bl	80196a0 <lv_roller_set_options>
    lv_obj_set_height(cui_Roller, 85);
 801b3ac:	0020      	movs	r0, r4
 801b3ae:	2155      	movs	r1, #85	; 0x55
 801b3b0:	f7ed fbac 	bl	8008b0c <lv_obj_set_height>
    lv_obj_set_width(cui_Roller, lv_pct(59));
 801b3b4:	0020      	movs	r0, r4
 801b3b6:	492d      	ldr	r1, [pc, #180]	; (801b46c <ui_Roller_create+0xd0>)
 801b3b8:	f7ed fb90 	bl	8008adc <lv_obj_set_width>
    lv_obj_set_align(cui_Roller, LV_ALIGN_BOTTOM_MID);
 801b3bc:	0020      	movs	r0, r4
 801b3be:	2105      	movs	r1, #5
 801b3c0:	f7ed fbea 	bl	8008b98 <lv_obj_set_align>
    lv_obj_set_style_text_color(cui_Roller, lv_color_hex(0x7286AB), LV_PART_MAIN | LV_STATE_DEFAULT);
 801b3c4:	4b2a      	ldr	r3, [pc, #168]	; (801b470 <ui_Roller_create+0xd4>)
 801b3c6:	0020      	movs	r0, r4
 801b3c8:	1c19      	adds	r1, r3, #0
 801b3ca:	2200      	movs	r2, #0
 801b3cc:	f7f2 fa7e 	bl	800d8cc <lv_obj_set_style_text_color>
    lv_obj_set_style_text_letter_space(cui_Roller, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b3d0:	0020      	movs	r0, r4
 801b3d2:	2200      	movs	r2, #0
 801b3d4:	2100      	movs	r1, #0
 801b3d6:	f7f2 fa8d 	bl	800d8f4 <lv_obj_set_style_text_letter_space>
    lv_obj_set_style_text_line_space(cui_Roller, 8, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b3da:	0020      	movs	r0, r4
 801b3dc:	2200      	movs	r2, #0
 801b3de:	2108      	movs	r1, #8
 801b3e0:	f7f2 fa90 	bl	800d904 <lv_obj_set_style_text_line_space>
    lv_obj_set_style_text_align(cui_Roller, LV_TEXT_ALIGN_CENTER, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b3e4:	0020      	movs	r0, r4
 801b3e6:	2200      	movs	r2, #0
 801b3e8:	2102      	movs	r1, #2
 801b3ea:	f7f2 fa93 	bl	800d914 <lv_obj_set_style_text_align>
    lv_obj_set_style_bg_opa(cui_Roller, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b3ee:	0020      	movs	r0, r4
 801b3f0:	2200      	movs	r2, #0
 801b3f2:	2100      	movs	r1, #0
 801b3f4:	f7f2 fa06 	bl	800d804 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_anim_time(cui_Roller, 300, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b3f8:	2196      	movs	r1, #150	; 0x96

    lv_obj_set_style_text_color(cui_Roller, lv_color_hex(0x181C29), LV_PART_SELECTED | LV_STATE_DEFAULT);
 801b3fa:	2580      	movs	r5, #128	; 0x80
    lv_obj_set_style_anim_time(cui_Roller, 300, LV_PART_MAIN | LV_STATE_DEFAULT);
 801b3fc:	0020      	movs	r0, r4
 801b3fe:	2200      	movs	r2, #0
 801b400:	0049      	lsls	r1, r1, #1
 801b402:	f7f2 fa97 	bl	800d934 <lv_obj_set_style_anim_time>
    lv_obj_set_style_text_color(cui_Roller, lv_color_hex(0x181C29), LV_PART_SELECTED | LV_STATE_DEFAULT);
 801b406:	4b1b      	ldr	r3, [pc, #108]	; (801b474 <ui_Roller_create+0xd8>)
 801b408:	02ed      	lsls	r5, r5, #11
 801b40a:	1c19      	adds	r1, r3, #0
 801b40c:	002a      	movs	r2, r5
 801b40e:	0020      	movs	r0, r4
 801b410:	f7f2 fa5c 	bl	800d8cc <lv_obj_set_style_text_color>
    lv_obj_set_style_bg_color(cui_Roller, lv_color_hex(0xFFFFFF), LV_PART_SELECTED | LV_STATE_DEFAULT);
 801b414:	2101      	movs	r1, #1
 801b416:	002a      	movs	r2, r5
 801b418:	0020      	movs	r0, r4
 801b41a:	4249      	negs	r1, r1
 801b41c:	f7f2 f9e6 	bl	800d7ec <lv_obj_set_style_bg_color>

    lv_obj_set_style_outline_color(cui_Roller, lv_color_hex(0xe0a721), LV_PART_MAIN | LV_STATE_FOCUSED);
 801b420:	4b15      	ldr	r3, [pc, #84]	; (801b478 <ui_Roller_create+0xdc>)
 801b422:	0020      	movs	r0, r4
 801b424:	1c19      	adds	r1, r3, #0
 801b426:	2202      	movs	r2, #2
 801b428:	f7f2 fa3c 	bl	800d8a4 <lv_obj_set_style_outline_color>
    lv_obj_set_style_outline_width(cui_Roller, 2, LV_PART_MAIN | LV_STATE_FOCUSED);
 801b42c:	0020      	movs	r0, r4
 801b42e:	2202      	movs	r2, #2
 801b430:	2102      	movs	r1, #2
 801b432:	f7f2 fa2f 	bl	800d894 <lv_obj_set_style_outline_width>
    lv_obj_set_style_outline_pad(cui_Roller, 3, LV_PART_MAIN | LV_STATE_FOCUSED);
 801b436:	2202      	movs	r2, #2
 801b438:	2103      	movs	r1, #3
 801b43a:	0020      	movs	r0, r4
 801b43c:	f7f2 fa3e 	bl	800d8bc <lv_obj_set_style_outline_pad>

    lv_obj_t ** children = lv_mem_alloc(sizeof(lv_obj_t *) * _UI_COMP_ROLLER_NUM);
 801b440:	2004      	movs	r0, #4
 801b442:	f7f9 fd1d 	bl	8014e80 <lv_mem_alloc>
 801b446:	0005      	movs	r5, r0
    children[UI_COMP_ROLLER_ROLLER] = cui_Roller;
    lv_obj_add_event_cb(cui_Roller, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801b448:	4b0c      	ldr	r3, [pc, #48]	; (801b47c <ui_Roller_create+0xe0>)
    children[UI_COMP_ROLLER_ROLLER] = cui_Roller;
 801b44a:	6004      	str	r4, [r0, #0]
    lv_obj_add_event_cb(cui_Roller, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801b44c:	781a      	ldrb	r2, [r3, #0]
 801b44e:	490c      	ldr	r1, [pc, #48]	; (801b480 <ui_Roller_create+0xe4>)
 801b450:	0003      	movs	r3, r0
 801b452:	0020      	movs	r0, r4
 801b454:	f7e9 fc50 	bl	8004cf8 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(cui_Roller, del_component_child_event_cb, LV_EVENT_DELETE, children);
 801b458:	002b      	movs	r3, r5
 801b45a:	2221      	movs	r2, #33	; 0x21
 801b45c:	0020      	movs	r0, r4
 801b45e:	4909      	ldr	r1, [pc, #36]	; (801b484 <ui_Roller_create+0xe8>)
 801b460:	f7e9 fc4a 	bl	8004cf8 <lv_obj_add_event_cb>
    return cui_Roller;
}
 801b464:	0020      	movs	r0, r4
 801b466:	bd70      	pop	{r4, r5, r6, pc}
 801b468:	0801d930 	.word	0x0801d930
 801b46c:	0000203b 	.word	0x0000203b
 801b470:	00007435 	.word	0x00007435
 801b474:	000018e5 	.word	0x000018e5
 801b478:	ffffe524 	.word	0xffffe524
 801b47c:	20007d0c 	.word	0x20007d0c
 801b480:	0801ac65 	.word	0x0801ac65
 801b484:	0801ac81 	.word	0x0801ac81

0801b488 <_ui_screen_change>:
    if(id == _UI_SLIDER_PROPERTY_VALUE) lv_slider_set_value(target, val, LV_ANIM_OFF);
}


void _ui_screen_change(lv_obj_t * target, lv_scr_load_anim_t fademode, int spd, int delay)
{
 801b488:	b510      	push	{r4, lr}
    lv_scr_load_anim(target, fademode, spd, delay, false);
 801b48a:	2400      	movs	r4, #0
{
 801b48c:	b082      	sub	sp, #8
    lv_scr_load_anim(target, fademode, spd, delay, false);
 801b48e:	9400      	str	r4, [sp, #0]
 801b490:	f7e9 f944 	bl	800471c <lv_scr_load_anim>
}
 801b494:	b002      	add	sp, #8
 801b496:	bd10      	pop	{r4, pc}

0801b498 <__libc_init_array>:
 801b498:	b570      	push	{r4, r5, r6, lr}
 801b49a:	2600      	movs	r6, #0
 801b49c:	4d0c      	ldr	r5, [pc, #48]	; (801b4d0 <__libc_init_array+0x38>)
 801b49e:	4c0d      	ldr	r4, [pc, #52]	; (801b4d4 <__libc_init_array+0x3c>)
 801b4a0:	1b64      	subs	r4, r4, r5
 801b4a2:	10a4      	asrs	r4, r4, #2
 801b4a4:	42a6      	cmp	r6, r4
 801b4a6:	d109      	bne.n	801b4bc <__libc_init_array+0x24>
 801b4a8:	2600      	movs	r6, #0
 801b4aa:	f000 f845 	bl	801b538 <_init>
 801b4ae:	4d0a      	ldr	r5, [pc, #40]	; (801b4d8 <__libc_init_array+0x40>)
 801b4b0:	4c0a      	ldr	r4, [pc, #40]	; (801b4dc <__libc_init_array+0x44>)
 801b4b2:	1b64      	subs	r4, r4, r5
 801b4b4:	10a4      	asrs	r4, r4, #2
 801b4b6:	42a6      	cmp	r6, r4
 801b4b8:	d105      	bne.n	801b4c6 <__libc_init_array+0x2e>
 801b4ba:	bd70      	pop	{r4, r5, r6, pc}
 801b4bc:	00b3      	lsls	r3, r6, #2
 801b4be:	58eb      	ldr	r3, [r5, r3]
 801b4c0:	4798      	blx	r3
 801b4c2:	3601      	adds	r6, #1
 801b4c4:	e7ee      	b.n	801b4a4 <__libc_init_array+0xc>
 801b4c6:	00b3      	lsls	r3, r6, #2
 801b4c8:	58eb      	ldr	r3, [r5, r3]
 801b4ca:	4798      	blx	r3
 801b4cc:	3601      	adds	r6, #1
 801b4ce:	e7f2      	b.n	801b4b6 <__libc_init_array+0x1e>
 801b4d0:	0801f27c 	.word	0x0801f27c
 801b4d4:	0801f27c 	.word	0x0801f27c
 801b4d8:	0801f27c 	.word	0x0801f27c
 801b4dc:	0801f280 	.word	0x0801f280

0801b4e0 <memcpy>:
 801b4e0:	2300      	movs	r3, #0
 801b4e2:	b510      	push	{r4, lr}
 801b4e4:	429a      	cmp	r2, r3
 801b4e6:	d100      	bne.n	801b4ea <memcpy+0xa>
 801b4e8:	bd10      	pop	{r4, pc}
 801b4ea:	5ccc      	ldrb	r4, [r1, r3]
 801b4ec:	54c4      	strb	r4, [r0, r3]
 801b4ee:	3301      	adds	r3, #1
 801b4f0:	e7f8      	b.n	801b4e4 <memcpy+0x4>

0801b4f2 <memmove>:
 801b4f2:	b510      	push	{r4, lr}
 801b4f4:	4288      	cmp	r0, r1
 801b4f6:	d902      	bls.n	801b4fe <memmove+0xc>
 801b4f8:	188b      	adds	r3, r1, r2
 801b4fa:	4298      	cmp	r0, r3
 801b4fc:	d303      	bcc.n	801b506 <memmove+0x14>
 801b4fe:	2300      	movs	r3, #0
 801b500:	e007      	b.n	801b512 <memmove+0x20>
 801b502:	5c8b      	ldrb	r3, [r1, r2]
 801b504:	5483      	strb	r3, [r0, r2]
 801b506:	3a01      	subs	r2, #1
 801b508:	d2fb      	bcs.n	801b502 <memmove+0x10>
 801b50a:	bd10      	pop	{r4, pc}
 801b50c:	5ccc      	ldrb	r4, [r1, r3]
 801b50e:	54c4      	strb	r4, [r0, r3]
 801b510:	3301      	adds	r3, #1
 801b512:	429a      	cmp	r2, r3
 801b514:	d1fa      	bne.n	801b50c <memmove+0x1a>
 801b516:	e7f8      	b.n	801b50a <memmove+0x18>

0801b518 <memset>:
 801b518:	0003      	movs	r3, r0
 801b51a:	1882      	adds	r2, r0, r2
 801b51c:	4293      	cmp	r3, r2
 801b51e:	d100      	bne.n	801b522 <memset+0xa>
 801b520:	4770      	bx	lr
 801b522:	7019      	strb	r1, [r3, #0]
 801b524:	3301      	adds	r3, #1
 801b526:	e7f9      	b.n	801b51c <memset+0x4>

0801b528 <strcpy>:
 801b528:	0003      	movs	r3, r0
 801b52a:	780a      	ldrb	r2, [r1, #0]
 801b52c:	3101      	adds	r1, #1
 801b52e:	701a      	strb	r2, [r3, #0]
 801b530:	3301      	adds	r3, #1
 801b532:	2a00      	cmp	r2, #0
 801b534:	d1f9      	bne.n	801b52a <strcpy+0x2>
 801b536:	4770      	bx	lr

0801b538 <_init>:
 801b538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b53a:	46c0      	nop			; (mov r8, r8)
 801b53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b53e:	bc08      	pop	{r3}
 801b540:	469e      	mov	lr, r3
 801b542:	4770      	bx	lr

0801b544 <_fini>:
 801b544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b546:	46c0      	nop			; (mov r8, r8)
 801b548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b54a:	bc08      	pop	{r3}
 801b54c:	469e      	mov	lr, r3
 801b54e:	4770      	bx	lr
