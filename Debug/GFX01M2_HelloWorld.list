
GFX01M2_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b5b8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d2c  0801b674  0801b674  0002b674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f3a0  0801f3a0  00030094  2**0
                  CONTENTS
  4 .ARM          00000000  0801f3a0  0801f3a0  00030094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801f3a0  0801f3a0  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f3a0  0801f3a0  0002f3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f3a4  0801f3a4  0002f3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801f3a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007ca0  20000094  0801f43c  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20007d34  0801f43c  00037d34  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .ExtFlashSection 00000000  90000000  90000000  000300bc  2**0
                  CONTENTS
 13 .debug_info   000b8fe4  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000138e6  00000000  00000000  000e90a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000638a6  00000000  00000000  000fc986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002f50  00000000  00000000  00160230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 0000e948  00000000  00000000  00163180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000327a8  00000000  00000000  00171ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000d9e43  00000000  00000000  001a4270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000acb49  00000000  00000000  0027e0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0032abfc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008574  00000000  00000000  0032ac4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000094 	.word	0x20000094
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801b65c 	.word	0x0801b65c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000098 	.word	0x20000098
 8000100:	0801b65c 	.word	0x0801b65c

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__clzsi2>:
 8000414:	211c      	movs	r1, #28
 8000416:	2301      	movs	r3, #1
 8000418:	041b      	lsls	r3, r3, #16
 800041a:	4298      	cmp	r0, r3
 800041c:	d301      	bcc.n	8000422 <__clzsi2+0xe>
 800041e:	0c00      	lsrs	r0, r0, #16
 8000420:	3910      	subs	r1, #16
 8000422:	0a1b      	lsrs	r3, r3, #8
 8000424:	4298      	cmp	r0, r3
 8000426:	d301      	bcc.n	800042c <__clzsi2+0x18>
 8000428:	0a00      	lsrs	r0, r0, #8
 800042a:	3908      	subs	r1, #8
 800042c:	091b      	lsrs	r3, r3, #4
 800042e:	4298      	cmp	r0, r3
 8000430:	d301      	bcc.n	8000436 <__clzsi2+0x22>
 8000432:	0900      	lsrs	r0, r0, #4
 8000434:	3904      	subs	r1, #4
 8000436:	a202      	add	r2, pc, #8	; (adr r2, 8000440 <__clzsi2+0x2c>)
 8000438:	5c10      	ldrb	r0, [r2, r0]
 800043a:	1840      	adds	r0, r0, r1
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	02020304 	.word	0x02020304
 8000444:	01010101 	.word	0x01010101
	...

08000450 <__ffssi2>:
 8000450:	b510      	push	{r4, lr}
 8000452:	2800      	cmp	r0, #0
 8000454:	d003      	beq.n	800045e <__ffssi2+0xe>
 8000456:	f000 f805 	bl	8000464 <__ctzsi2>
 800045a:	3001      	adds	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2000      	movs	r0, #0
 8000460:	e7fc      	b.n	800045c <__ffssi2+0xc>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__ctzsi2>:
 8000464:	4241      	negs	r1, r0
 8000466:	4008      	ands	r0, r1
 8000468:	211c      	movs	r1, #28
 800046a:	2301      	movs	r3, #1
 800046c:	041b      	lsls	r3, r3, #16
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__ctzsi2+0x12>
 8000472:	0c00      	lsrs	r0, r0, #16
 8000474:	3910      	subs	r1, #16
 8000476:	0a1b      	lsrs	r3, r3, #8
 8000478:	4298      	cmp	r0, r3
 800047a:	d301      	bcc.n	8000480 <__ctzsi2+0x1c>
 800047c:	0a00      	lsrs	r0, r0, #8
 800047e:	3908      	subs	r1, #8
 8000480:	091b      	lsrs	r3, r3, #4
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__ctzsi2+0x26>
 8000486:	0900      	lsrs	r0, r0, #4
 8000488:	3904      	subs	r1, #4
 800048a:	a202      	add	r2, pc, #8	; (adr r2, 8000494 <__ctzsi2+0x30>)
 800048c:	5c10      	ldrb	r0, [r2, r0]
 800048e:	1a40      	subs	r0, r0, r1
 8000490:	4770      	bx	lr
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	1d1d1c1b 	.word	0x1d1d1c1b
 8000498:	1e1e1e1e 	.word	0x1e1e1e1e
 800049c:	1f1f1f1f 	.word	0x1f1f1f1f
 80004a0:	1f1f1f1f 	.word	0x1f1f1f1f

080004a4 <joy_read_cb>:
	lv_disp_flush_ready(drv);
}


static void joy_read_cb(lv_indev_drv_t * drv, lv_indev_data_t * data)
{
 80004a4:	b510      	push	{r4, lr}
 80004a6:	b082      	sub	sp, #8
	uint8_t key;
	if(BSP_KEY_GetState(0, &key) == BSP_ERROR_NONE)
 80004a8:	466b      	mov	r3, sp
{
 80004aa:	000c      	movs	r4, r1
	if(BSP_KEY_GetState(0, &key) == BSP_ERROR_NONE)
 80004ac:	2000      	movs	r0, #0
 80004ae:	1dd9      	adds	r1, r3, #7
 80004b0:	f000 fcfa 	bl	8000ea8 <BSP_KEY_GetState>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d107      	bne.n	80004c8 <joy_read_cb+0x24>
	{
		switch(key)
 80004b8:	466b      	mov	r3, sp
 80004ba:	79db      	ldrb	r3, [r3, #7]
 80004bc:	2b05      	cmp	r3, #5
 80004be:	d805      	bhi.n	80004cc <joy_read_cb+0x28>
 80004c0:	4a10      	ldr	r2, [pc, #64]	; (8000504 <joy_read_cb+0x60>)
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	58d3      	ldr	r3, [r2, r3]
 80004c6:	469f      	mov	pc, r3
			break;
		default:
			break;
		}
	} else {
		data->state = LV_INDEV_STATE_RELEASED;
 80004c8:	2300      	movs	r3, #0
 80004ca:	73a3      	strb	r3, [r4, #14]
	}
}
 80004cc:	b002      	add	sp, #8
 80004ce:	bd10      	pop	{r4, pc}
			data->key = LV_KEY_RIGHT;
 80004d0:	2313      	movs	r3, #19
 80004d2:	6063      	str	r3, [r4, #4]
			data->state = LV_INDEV_STATE_PRESSED;
 80004d4:	3b12      	subs	r3, #18
 80004d6:	73a3      	strb	r3, [r4, #14]
			break;
 80004d8:	e7f8      	b.n	80004cc <joy_read_cb+0x28>
			data->key = LV_KEY_ENTER;
 80004da:	230a      	movs	r3, #10
 80004dc:	6063      	str	r3, [r4, #4]
			data->state = LV_INDEV_STATE_PRESSED;
 80004de:	3b09      	subs	r3, #9
 80004e0:	73a3      	strb	r3, [r4, #14]
			break;
 80004e2:	e7f3      	b.n	80004cc <joy_read_cb+0x28>
			data->key = LV_KEY_PREV;
 80004e4:	230b      	movs	r3, #11
 80004e6:	6063      	str	r3, [r4, #4]
			data->state = LV_INDEV_STATE_PRESSED;
 80004e8:	3b0a      	subs	r3, #10
 80004ea:	73a3      	strb	r3, [r4, #14]
			break;
 80004ec:	e7ee      	b.n	80004cc <joy_read_cb+0x28>
			data->key = LV_KEY_NEXT;
 80004ee:	2309      	movs	r3, #9
 80004f0:	6063      	str	r3, [r4, #4]
			data->state = LV_INDEV_STATE_PRESSED;
 80004f2:	3b08      	subs	r3, #8
 80004f4:	73a3      	strb	r3, [r4, #14]
			break;
 80004f6:	e7e9      	b.n	80004cc <joy_read_cb+0x28>
			data->key = LV_KEY_LEFT;
 80004f8:	2314      	movs	r3, #20
 80004fa:	6063      	str	r3, [r4, #4]
			data->state = LV_INDEV_STATE_PRESSED;
 80004fc:	3b13      	subs	r3, #19
 80004fe:	73a3      	strb	r3, [r4, #14]
			break;
 8000500:	e7e4      	b.n	80004cc <joy_read_cb+0x28>
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	0801b684 	.word	0x0801b684

08000508 <flush_cb>:
{
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	0005      	movs	r5, r0
	BSP_LCD_FillRGBRect(0, 1, color, area->x1, area->y1, lv_area_get_width(area), lv_area_get_height(area));
 800050c:	2000      	movs	r0, #0
 800050e:	5e0b      	ldrsh	r3, [r1, r0]
 8000510:	2402      	movs	r4, #2
 8000512:	5f08      	ldrsh	r0, [r1, r4]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8000514:	88cc      	ldrh	r4, [r1, #6]
{
 8000516:	b087      	sub	sp, #28
 8000518:	3401      	adds	r4, #1
 800051a:	1a24      	subs	r4, r4, r0
	BSP_LCD_FillRGBRect(0, 1, color, area->x1, area->y1, lv_area_get_width(area), lv_area_get_height(area));
 800051c:	b224      	sxth	r4, r4
 800051e:	9402      	str	r4, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8000520:	8889      	ldrh	r1, [r1, #4]
 8000522:	9000      	str	r0, [sp, #0]
 8000524:	3101      	adds	r1, #1
 8000526:	1ac9      	subs	r1, r1, r3
 8000528:	b209      	sxth	r1, r1
 800052a:	9101      	str	r1, [sp, #4]
 800052c:	2000      	movs	r0, #0
 800052e:	2101      	movs	r1, #1
 8000530:	f000 fe88 	bl	8001244 <BSP_LCD_FillRGBRect>
	volatile uint32_t t = lv_tick_get();
 8000534:	f010 fbe0 	bl	8010cf8 <lv_tick_get>
 8000538:	9005      	str	r0, [sp, #20]
	BSP_LCD_WaitForTransferToBeDone(0);
 800053a:	2000      	movs	r0, #0
 800053c:	f000 fef8 	bl	8001330 <BSP_LCD_WaitForTransferToBeDone>
	t = lv_tick_elaps(t);
 8000540:	9805      	ldr	r0, [sp, #20]
 8000542:	f010 fbe7 	bl	8010d14 <lv_tick_elaps>
 8000546:	9005      	str	r0, [sp, #20]
	lv_disp_flush_ready(drv);
 8000548:	0028      	movs	r0, r5
 800054a:	f010 fb4d 	bl	8010be8 <lv_disp_flush_ready>
}
 800054e:	b007      	add	sp, #28
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	46c0      	nop			; (mov r8, r8)

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b500      	push	{lr}
 8000556:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000558:	2238      	movs	r2, #56	; 0x38
 800055a:	2100      	movs	r1, #0
 800055c:	a804      	add	r0, sp, #16
 800055e:	f01b f86d 	bl	801b63c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000562:	2210      	movs	r2, #16
 8000564:	2100      	movs	r1, #0
 8000566:	4668      	mov	r0, sp
 8000568:	f01b f868 	bl	801b63c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2080      	movs	r0, #128	; 0x80
 800056e:	0080      	lsls	r0, r0, #2
 8000570:	f019 f8e4 	bl	801973c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 16;
 800057c:	330e      	adds	r3, #14
 800057e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	029b      	lsls	r3, r3, #10
 8000584:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000586:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2280      	movs	r2, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058a:	049b      	lsls	r3, r3, #18
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	0052      	lsls	r2, r2, #1
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000590:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2140      	movs	r1, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000596:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000598:	05db      	lsls	r3, r3, #23
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800059c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059e:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005a0:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80005a2:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f019 f8fa 	bl	801979c <HAL_RCC_OscConfig>
 80005a8:	2800      	cmp	r0, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ac:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ae:	e7fe      	b.n	80005ae <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	2207      	movs	r2, #7
 80005b2:	2302      	movs	r3, #2
 80005b4:	9200      	str	r2, [sp, #0]
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005bc:	2102      	movs	r1, #2
 80005be:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	9202      	str	r2, [sp, #8]
 80005c2:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c4:	f019 fba8 	bl	8019d18 <HAL_RCC_ClockConfig>
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x7c>
 80005cc:	b672      	cpsid	i
  while (1)
 80005ce:	e7fe      	b.n	80005ce <SystemClock_Config+0x7a>
}
 80005d0:	b013      	add	sp, #76	; 0x4c
 80005d2:	bd00      	pop	{pc}

080005d4 <main>:
{
 80005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d6:	46ce      	mov	lr, r9
 80005d8:	4647      	mov	r7, r8
 80005da:	b580      	push	{r7, lr}
 80005dc:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80005de:	f018 fbbb 	bl	8018d58 <HAL_Init>
  SystemClock_Config();
 80005e2:	f7ff ffb7 	bl	8000554 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	2214      	movs	r2, #20
 80005e8:	2100      	movs	r1, #0
 80005ea:	a804      	add	r0, sp, #16
 80005ec:	f01b f826 	bl	801b63c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f0:	2304      	movs	r3, #4
 80005f2:	4c7e      	ldr	r4, [pc, #504]	; (80007ec <main+0x218>)
  HAL_GPIO_WritePin(GPIOA, DISP_NRESET_Pin|SPIB_NCS_Pin|SPIA_NCS_Pin, GPIO_PIN_SET);
 80005f4:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, DISP_NRESET_Pin|SPIB_NCS_Pin|SPIA_NCS_Pin, GPIO_PIN_SET);
 80005f8:	497d      	ldr	r1, [pc, #500]	; (80007f0 <main+0x21c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	431a      	orrs	r2, r3
 80005fc:	6362      	str	r2, [r4, #52]	; 0x34
 80005fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, DISP_NRESET_Pin|SPIB_NCS_Pin|SPIA_NCS_Pin, GPIO_PIN_SET);
 8000600:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4013      	ands	r3, r2
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000608:	2320      	movs	r3, #32
 800060a:	6b62      	ldr	r2, [r4, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2500      	movs	r5, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060e:	431a      	orrs	r2, r3
 8000610:	6362      	str	r2, [r4, #52]	; 0x34
 8000612:	6b62      	ldr	r2, [r4, #52]	; 0x34
  GPIO_InitStruct.Pin = SPIA_DCX_Pin;
 8000614:	2600      	movs	r6, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000616:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	2201      	movs	r2, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000620:	4690      	mov	r8, r2
 8000622:	4313      	orrs	r3, r2
 8000624:	6363      	str	r3, [r4, #52]	; 0x34
 8000626:	6b63      	ldr	r3, [r4, #52]	; 0x34
  GPIO_InitStruct.Pin = SPIA_DCX_Pin;
 8000628:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4013      	ands	r3, r2
 800062c:	9302      	str	r3, [sp, #8]
 800062e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000630:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000632:	3201      	adds	r2, #1
 8000634:	4313      	orrs	r3, r2
 8000636:	6363      	str	r3, [r4, #52]	; 0x34
 8000638:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800063a:	4691      	mov	r9, r2
 800063c:	4013      	ands	r3, r2
 800063e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, DISP_NRESET_Pin|SPIB_NCS_Pin|SPIA_NCS_Pin, GPIO_PIN_SET);
 8000640:	3a01      	subs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, DISP_NRESET_Pin|SPIB_NCS_Pin|SPIA_NCS_Pin, GPIO_PIN_SET);
 8000644:	f019 f874 	bl	8019730 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPIA_DCX_GPIO_Port, SPIA_DCX_Pin, GPIO_PIN_SET);
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	2201      	movs	r2, #1
 800064c:	4869      	ldr	r0, [pc, #420]	; (80007f4 <main+0x220>)
 800064e:	01c9      	lsls	r1, r1, #7
 8000650:	f019 f86e 	bl	8019730 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUTTON_USER_Pin|KEY_CENTER_Pin;
 8000654:	2282      	movs	r2, #130	; 0x82
 8000656:	2300      	movs	r3, #0
 8000658:	0192      	lsls	r2, r2, #6
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065a:	4867      	ldr	r0, [pc, #412]	; (80007f8 <main+0x224>)
 800065c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BUTTON_USER_Pin|KEY_CENTER_Pin;
 800065e:	9204      	str	r2, [sp, #16]
 8000660:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000664:	f018 fec6 	bl	80193f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DISP_TE_Pin;
 8000668:	23c4      	movs	r3, #196	; 0xc4
  HAL_GPIO_Init(DISP_TE_GPIO_Port, &GPIO_InitStruct);
 800066a:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = DISP_TE_Pin;
 800066c:	2201      	movs	r2, #1
 800066e:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(DISP_TE_GPIO_Port, &GPIO_InitStruct);
 8000670:	a904      	add	r1, sp, #16
 8000672:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DISP_TE_Pin;
 8000674:	9204      	str	r2, [sp, #16]
 8000676:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(DISP_TE_GPIO_Port, &GPIO_InitStruct);
 800067a:	f018 febb 	bl	80193f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DISP_NRESET_Pin;
 800067e:	2202      	movs	r2, #2
 8000680:	2301      	movs	r3, #1
  HAL_GPIO_Init(DISP_NRESET_GPIO_Port, &GPIO_InitStruct);
 8000682:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = DISP_NRESET_Pin;
 8000684:	9204      	str	r2, [sp, #16]
 8000686:	9305      	str	r3, [sp, #20]
 8000688:	2201      	movs	r2, #1
 800068a:	2302      	movs	r3, #2
  HAL_GPIO_Init(DISP_NRESET_GPIO_Port, &GPIO_InitStruct);
 800068c:	a904      	add	r1, sp, #16
 800068e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DISP_NRESET_Pin;
 8000690:	9206      	str	r2, [sp, #24]
 8000692:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISP_NRESET_GPIO_Port, &GPIO_InitStruct);
 8000694:	f018 feae 	bl	80193f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEY_LEFT_Pin|KEY_RIGHT_Pin|KEY_UP_Pin|KEY_DOWN_Pin;
 8000698:	2300      	movs	r3, #0
 800069a:	4a58      	ldr	r2, [pc, #352]	; (80007fc <main+0x228>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069c:	4855      	ldr	r0, [pc, #340]	; (80007f4 <main+0x220>)
 800069e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = KEY_LEFT_Pin|KEY_RIGHT_Pin|KEY_UP_Pin|KEY_DOWN_Pin;
 80006a0:	9204      	str	r2, [sp, #16]
 80006a2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f018 fea5 	bl	80193f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPIA_DCX_Pin;
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	2301      	movs	r3, #1
 80006ae:	01d2      	lsls	r2, r2, #7
  HAL_GPIO_Init(SPIA_DCX_GPIO_Port, &GPIO_InitStruct);
 80006b0:	4850      	ldr	r0, [pc, #320]	; (80007f4 <main+0x220>)
 80006b2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SPIA_DCX_Pin;
 80006b4:	9204      	str	r2, [sp, #16]
 80006b6:	9305      	str	r3, [sp, #20]
 80006b8:	9606      	str	r6, [sp, #24]
 80006ba:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(SPIA_DCX_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f018 fe9a 	bl	80193f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPIB_NCS_Pin|SPIA_NCS_Pin;
 80006c0:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = SPIB_NCS_Pin|SPIA_NCS_Pin;
 80006c4:	2301      	movs	r3, #1
 80006c6:	0092      	lsls	r2, r2, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	a904      	add	r1, sp, #16
 80006ca:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = SPIB_NCS_Pin|SPIA_NCS_Pin;
 80006cc:	9204      	str	r2, [sp, #16]
 80006ce:	9305      	str	r3, [sp, #20]
 80006d0:	9606      	str	r6, [sp, #24]
 80006d2:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f018 fe8e 	bl	80193f4 <HAL_GPIO_Init>
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	4a49      	ldr	r2, [pc, #292]	; (8000800 <main+0x22c>)
 80006dc:	03db      	lsls	r3, r3, #15
 80006de:	6811      	ldr	r1, [r2, #0]
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 80006e0:	2005      	movs	r0, #5
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 80006e2:	430b      	orrs	r3, r1
 80006e4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 80006e6:	2103      	movs	r1, #3
 80006e8:	2200      	movs	r2, #0
 80006ea:	f018 fb79 	bl	8018de0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80006ee:	2005      	movs	r0, #5
 80006f0:	f018 fba8 	bl	8018e44 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f4:	4642      	mov	r2, r8
 80006f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80006f8:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006fa:	4313      	orrs	r3, r2
 80006fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80006fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000700:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000702:	4013      	ands	r3, r2
 8000704:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000706:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000708:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800070a:	f018 fb69 	bl	8018de0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800070e:	2009      	movs	r0, #9
 8000710:	f018 fb98 	bl	8018e44 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2101      	movs	r1, #1
 8000718:	200a      	movs	r0, #10
 800071a:	f018 fb61 	bl	8018de0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800071e:	200a      	movs	r0, #10
 8000720:	f018 fb90 	bl	8018e44 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	200b      	movs	r0, #11
 800072a:	f018 fb59 	bl	8018de0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 800072e:	200b      	movs	r0, #11
 8000730:	f018 fb88 	bl	8018e44 <HAL_NVIC_EnableIRQ>
  hcrc.Instance = CRC;
 8000734:	4833      	ldr	r0, [pc, #204]	; (8000804 <main+0x230>)
 8000736:	4b34      	ldr	r3, [pc, #208]	; (8000808 <main+0x234>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000738:	8085      	strh	r5, [r0, #4]
  hcrc.Instance = CRC;
 800073a:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800073c:	4643      	mov	r3, r8
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800073e:	6145      	str	r5, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000740:	6185      	str	r5, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000742:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000744:	f018 fbb4 	bl	8018eb0 <HAL_CRC_Init>
 8000748:	2800      	cmp	r0, #0
 800074a:	d001      	beq.n	8000750 <main+0x17c>
 800074c:	b672      	cpsid	i
  while (1)
 800074e:	e7fe      	b.n	800074e <main+0x17a>
    if(BSP_LCD_Init(0, LCD_ORIENTATION_PORTRAIT) != BSP_ERROR_NONE)
 8000750:	2100      	movs	r1, #0
 8000752:	0008      	movs	r0, r1
 8000754:	f000 fcb0 	bl	80010b8 <BSP_LCD_Init>
 8000758:	2800      	cmp	r0, #0
 800075a:	d001      	beq.n	8000760 <main+0x18c>
 800075c:	b672      	cpsid	i
  while (1)
 800075e:	e7fe      	b.n	800075e <main+0x18a>
    if(BSP_MEM_Init(0) != BSP_ERROR_NONE)
 8000760:	f000 ff02 	bl	8001568 <BSP_MEM_Init>
 8000764:	2800      	cmp	r0, #0
 8000766:	d001      	beq.n	800076c <main+0x198>
 8000768:	b672      	cpsid	i
  while (1)
 800076a:	e7fe      	b.n	800076a <main+0x196>
    if(BSP_KEY_Init(0, KEY_ORIENTATION_PORTRAIT) != BSP_ERROR_NONE)
 800076c:	0001      	movs	r1, r0
 800076e:	f000 fb93 	bl	8000e98 <BSP_KEY_Init>
 8000772:	2800      	cmp	r0, #0
 8000774:	d001      	beq.n	800077a <main+0x1a6>
 8000776:	b672      	cpsid	i
  while (1)
 8000778:	e7fe      	b.n	8000778 <main+0x1a4>
    if(BSP_LCD_DisplayOn(0) != BSP_ERROR_NONE) {
 800077a:	f000 fd3f 	bl	80011fc <BSP_LCD_DisplayOn>
 800077e:	1e04      	subs	r4, r0, #0
 8000780:	d001      	beq.n	8000786 <main+0x1b2>
 8000782:	b672      	cpsid	i
  while (1)
 8000784:	e7fe      	b.n	8000784 <main+0x1b0>
  lv_init();
 8000786:	f004 fb93 	bl	8004eb0 <lv_init>
  lv_disp_draw_buf_init(&draw_buf, buf1, NULL, BUF_SIZE);
 800078a:	23b4      	movs	r3, #180	; 0xb4
 800078c:	4d1f      	ldr	r5, [pc, #124]	; (800080c <main+0x238>)
 800078e:	0022      	movs	r2, r4
 8000790:	491f      	ldr	r1, [pc, #124]	; (8000810 <main+0x23c>)
 8000792:	015b      	lsls	r3, r3, #5
 8000794:	0028      	movs	r0, r5
 8000796:	f010 f95b 	bl	8010a50 <lv_disp_draw_buf_init>
  lv_disp_drv_init(&disp_drv);
 800079a:	4c1e      	ldr	r4, [pc, #120]	; (8000814 <main+0x240>)
 800079c:	0020      	movs	r0, r4
 800079e:	f010 f933 	bl	8010a08 <lv_disp_drv_init>
  disp_drv.hor_res = 240;
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <main+0x244>)
  lv_disp_t * disp = lv_disp_drv_register(&disp_drv);
 80007a4:	0020      	movs	r0, r4
  disp_drv.hor_res = 240;
 80007a6:	6023      	str	r3, [r4, #0]
  disp_drv.flush_cb = flush_cb;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <main+0x248>)
  disp_drv.draw_buf = &draw_buf;
 80007aa:	60e5      	str	r5, [r4, #12]
  disp_drv.flush_cb = flush_cb;
 80007ac:	6163      	str	r3, [r4, #20]
  lv_disp_t * disp = lv_disp_drv_register(&disp_drv);
 80007ae:	f010 f95d 	bl	8010a6c <lv_disp_drv_register>
 80007b2:	0004      	movs	r4, r0
  lv_disp_set_theme(disp, lv_theme_basic_init(disp));
 80007b4:	f00f fcd2 	bl	801015c <lv_theme_basic_init>
 80007b8:	0001      	movs	r1, r0
 80007ba:	0020      	movs	r0, r4
 80007bc:	f001 f816 	bl	80017ec <lv_disp_set_theme>
  lv_indev_drv_init(&indev_drv);
 80007c0:	4c17      	ldr	r4, [pc, #92]	; (8000820 <main+0x24c>)
 80007c2:	0020      	movs	r0, r4
 80007c4:	f010 fa28 	bl	8010c18 <lv_indev_drv_init>
  indev_drv.read_cb = joy_read_cb;
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <main+0x250>)
  joy_indev = lv_indev_drv_register(&indev_drv);
 80007ca:	0020      	movs	r0, r4
  indev_drv.read_cb = joy_read_cb;
 80007cc:	6063      	str	r3, [r4, #4]
  indev_drv.type = LV_INDEV_TYPE_KEYPAD;
 80007ce:	464b      	mov	r3, r9
 80007d0:	7023      	strb	r3, [r4, #0]
  joy_indev = lv_indev_drv_register(&indev_drv);
 80007d2:	f010 fa31 	bl	8010c38 <lv_indev_drv_register>
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <main+0x254>)
	  HAL_Delay(2);
 80007d8:	2402      	movs	r4, #2
  joy_indev = lv_indev_drv_register(&indev_drv);
 80007da:	6018      	str	r0, [r3, #0]
  ui_init();
 80007dc:	f017 fa00 	bl	8017be0 <ui_init>
	  lv_timer_handler();
 80007e0:	f012 fa4e 	bl	8012c80 <lv_timer_handler>
	  HAL_Delay(2);
 80007e4:	0020      	movs	r0, r4
 80007e6:	f018 fadd 	bl	8018da4 <HAL_Delay>
  while (1)
 80007ea:	e7f9      	b.n	80007e0 <main+0x20c>
 80007ec:	40021000 	.word	0x40021000
 80007f0:	00000302 	.word	0x00000302
 80007f4:	50000400 	.word	0x50000400
 80007f8:	50000800 	.word	0x50000800
 80007fc:	00001013 	.word	0x00001013
 8000800:	40010000 	.word	0x40010000
 8000804:	20002e18 	.word	0x20002e18
 8000808:	40023000 	.word	0x40023000
 800080c:	20002dfc 	.word	0x20002dfc
 8000810:	200000b0 	.word	0x200000b0
 8000814:	20002db0 	.word	0x20002db0
 8000818:	014000f0 	.word	0x014000f0
 800081c:	08000509 	.word	0x08000509
 8000820:	20002e3c 	.word	0x20002e3c
 8000824:	080004a5 	.word	0x080004a5
 8000828:	20002e58 	.word	0x20002e58

0800082c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082c:	2201      	movs	r2, #1
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_MspInit+0x34>)
{
 8000830:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	6c19      	ldr	r1, [r3, #64]	; 0x40

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000834:	20c0      	movs	r0, #192	; 0xc0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4311      	orrs	r1, r2
 8000838:	6419      	str	r1, [r3, #64]	; 0x40
 800083a:	6c19      	ldr	r1, [r3, #64]	; 0x40
{
 800083c:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	9200      	str	r2, [sp, #0]
 8000844:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000848:	0549      	lsls	r1, r1, #21
 800084a:	430a      	orrs	r2, r1
 800084c:	63da      	str	r2, [r3, #60]	; 0x3c
 800084e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000850:	00c0      	lsls	r0, r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	400b      	ands	r3, r1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000858:	f018 fab6 	bl	8018dc8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085c:	b003      	add	sp, #12
 800085e:	bd00      	pop	{pc}
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_CRC_MspInit+0x24>)
 8000866:	6802      	ldr	r2, [r0, #0]
{
 8000868:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800086a:	429a      	cmp	r2, r3
 800086c:	d001      	beq.n	8000872 <HAL_CRC_MspInit+0xe>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800086e:	b002      	add	sp, #8
 8000870:	4770      	bx	lr
    __HAL_RCC_CRC_CLK_ENABLE();
 8000872:	2080      	movs	r0, #128	; 0x80
 8000874:	4a05      	ldr	r2, [pc, #20]	; (800088c <HAL_CRC_MspInit+0x28>)
 8000876:	0140      	lsls	r0, r0, #5
 8000878:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800087a:	4301      	orrs	r1, r0
 800087c:	6391      	str	r1, [r2, #56]	; 0x38
 800087e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000880:	4003      	ands	r3, r0
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	9b01      	ldr	r3, [sp, #4]
}
 8000886:	e7f2      	b.n	800086e <HAL_CRC_MspInit+0xa>
 8000888:	40023000 	.word	0x40023000
 800088c:	40021000 	.word	0x40021000

08000890 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <NMI_Handler>
 8000892:	46c0      	nop			; (mov r8, r8)

08000894 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <HardFault_Handler>
 8000896:	46c0      	nop			; (mov r8, r8)

08000898 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000898:	4770      	bx	lr
 800089a:	46c0      	nop			; (mov r8, r8)

0800089c <PendSV_Handler>:
 800089c:	4770      	bx	lr
 800089e:	46c0      	nop			; (mov r8, r8)

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a2:	f018 fa6d 	bl	8018d80 <HAL_IncTick>
  lv_tick_inc(1);
 80008a6:	2001      	movs	r0, #1
 80008a8:	f010 fa18 	bl	8010cdc <lv_tick_inc>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ac:	bd10      	pop	{r4, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)

080008b0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80008b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80008b2:	4802      	ldr	r0, [pc, #8]	; (80008bc <EXTI0_1_IRQHandler+0xc>)
 80008b4:	f018 fd60 	bl	8019378 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80008b8:	bd10      	pop	{r4, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	20003180 	.word	0x20003180

080008c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80008c2:	4802      	ldr	r0, [pc, #8]	; (80008cc <DMA1_Channel1_IRQHandler+0xc>)
 80008c4:	f018 fce0 	bl	8019288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008c8:	bd10      	pop	{r4, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	20002ec8 	.word	0x20002ec8

080008d0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80008d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <DMA1_Channel2_3_IRQHandler+0x10>)
 80008d4:	f018 fcd8 	bl	8019288 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80008da:	f018 fcd5 	bl	8019288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80008de:	bd10      	pop	{r4, pc}
 80008e0:	20002e6c 	.word	0x20002e6c
 80008e4:	20002f80 	.word	0x20002f80

080008e8 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 80008e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80008ea:	4802      	ldr	r0, [pc, #8]	; (80008f4 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0xc>)
 80008ec:	f018 fccc 	bl	8019288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 80008f0:	bd10      	pop	{r4, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	20002f24 	.word	0x20002f24

080008f8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80008f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80008fa:	4802      	ldr	r0, [pc, #8]	; (8000904 <SPI1_IRQHandler+0xc>)
 80008fc:	f01a fdac 	bl	801b458 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000900:	bd10      	pop	{r4, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	20002fdc 	.word	0x20002fdc

08000908 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000908:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800090a:	4802      	ldr	r0, [pc, #8]	; (8000914 <SPI2_IRQHandler+0xc>)
 800090c:	f01a fda4 	bl	801b458 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000910:	bd10      	pop	{r4, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	20003068 	.word	0x20003068

08000918 <SPI1_MspDeInit>:

  /* USER CODE END SPI1_MspInit 1 */
}

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000918:	b570      	push	{r4, r5, r6, lr}
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 800091a:	25a0      	movs	r5, #160	; 0xa0
{
 800091c:	0004      	movs	r4, r0
    __HAL_RCC_SPI1_CLK_DISABLE();
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <SPI1_MspDeInit+0x40>)
 8000920:	490e      	ldr	r1, [pc, #56]	; (800095c <SPI1_MspDeInit+0x44>)
 8000922:	6c13      	ldr	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 8000924:	05ed      	lsls	r5, r5, #23
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000926:	400b      	ands	r3, r1
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 800092a:	0028      	movs	r0, r5
 800092c:	2120      	movs	r1, #32
 800092e:	f018 fe6d 	bl	801960c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 8000932:	0028      	movs	r0, r5
 8000934:	2140      	movs	r1, #64	; 0x40
 8000936:	f018 fe69 	bl	801960c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	0028      	movs	r0, r5
 800093e:	f018 fe65 	bl	801960c <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(spiHandle->hdmatx);
 8000942:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000944:	f018 fb92 	bl	801906c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmarx);
 8000948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800094a:	f018 fb8f 	bl	801906c <HAL_DMA_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 800094e:	2019      	movs	r0, #25
 8000950:	f018 fa84 	bl	8018e5c <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 8000954:	bd70      	pop	{r4, r5, r6, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	40021000 	.word	0x40021000
 800095c:	ffffefff 	.word	0xffffefff

08000960 <SPI2_MspDeInit>:
{
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8000960:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <SPI2_MspDeInit+0x40>)
 8000962:	4910      	ldr	r1, [pc, #64]	; (80009a4 <SPI2_MspDeInit+0x44>)
 8000964:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
{
 8000966:	b570      	push	{r4, r5, r6, lr}
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(BUS_SPI2_MISO_GPIO_PORT, BUS_SPI2_MISO_GPIO_PIN);
 8000968:	4d0f      	ldr	r5, [pc, #60]	; (80009a8 <SPI2_MspDeInit+0x48>)
    __HAL_RCC_SPI2_CLK_DISABLE();
 800096a:	400b      	ands	r3, r1
 800096c:	63d3      	str	r3, [r2, #60]	; 0x3c
{
 800096e:	0004      	movs	r4, r0
    HAL_GPIO_DeInit(BUS_SPI2_MISO_GPIO_PORT, BUS_SPI2_MISO_GPIO_PIN);
 8000970:	0028      	movs	r0, r5
 8000972:	2104      	movs	r1, #4
 8000974:	f018 fe4a 	bl	801960c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_MOSI_GPIO_PORT, BUS_SPI2_MOSI_GPIO_PIN);
 8000978:	0028      	movs	r0, r5
 800097a:	2108      	movs	r1, #8
 800097c:	f018 fe46 	bl	801960c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_SCK_GPIO_PORT, BUS_SPI2_SCK_GPIO_PIN);
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	480a      	ldr	r0, [pc, #40]	; (80009ac <SPI2_MspDeInit+0x4c>)
 8000984:	0189      	lsls	r1, r1, #6
 8000986:	f018 fe41 	bl	801960c <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(spiHandle->hdmatx);
 800098a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800098c:	f018 fb6e 	bl	801906c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmarx);
 8000990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000992:	f018 fb6b 	bl	801906c <HAL_DMA_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8000996:	201a      	movs	r0, #26
 8000998:	f018 fa60 	bl	8018e5c <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
}
 800099c:	bd70      	pop	{r4, r5, r6, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	40021000 	.word	0x40021000
 80009a4:	ffffbfff 	.word	0xffffbfff
 80009a8:	50000800 	.word	0x50000800
 80009ac:	50000400 	.word	0x50000400

080009b0 <SPI1_MspInit>:
{
 80009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b2:	46d6      	mov	lr, sl
 80009b4:	464f      	mov	r7, r9
 80009b6:	4646      	mov	r6, r8
 80009b8:	4680      	mov	r8, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ba:	2080      	movs	r0, #128	; 0x80
 80009bc:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <SPI1_MspInit+0xf8>)
{
 80009be:	b5c0      	push	{r6, r7, lr}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009c0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80009c2:	0140      	lsls	r0, r0, #5
 80009c4:	4301      	orrs	r1, r0
 80009c6:	6419      	str	r1, [r3, #64]	; 0x40
 80009c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80009ca:	b088      	sub	sp, #32
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009cc:	4002      	ands	r2, r0
 80009ce:	9200      	str	r2, [sp, #0]
 80009d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2201      	movs	r2, #1
 80009d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80009d6:	24a0      	movs	r4, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4311      	orrs	r1, r2
 80009da:	6359      	str	r1, [r3, #52]	; 0x34
 80009dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80009de:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	401a      	ands	r2, r3
 80009e2:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80009e4:	2602      	movs	r6, #2
 80009e6:	2703      	movs	r7, #3
 80009e8:	2220      	movs	r2, #32
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80009ec:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80009ee:	05e4      	lsls	r4, r4, #23
 80009f0:	0020      	movs	r0, r4
 80009f2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80009f4:	9202      	str	r2, [sp, #8]
 80009f6:	9303      	str	r3, [sp, #12]
 80009f8:	9604      	str	r6, [sp, #16]
 80009fa:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80009fc:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80009fe:	f018 fcf9 	bl	80193f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000a02:	2240      	movs	r2, #64	; 0x40
 8000a04:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000a06:	0020      	movs	r0, r4
 8000a08:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000a0a:	9202      	str	r2, [sp, #8]
 8000a0c:	9303      	str	r3, [sp, #12]
 8000a0e:	9604      	str	r6, [sp, #16]
 8000a10:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000a12:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000a14:	f018 fcee 	bl	80193f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000a1c:	a902      	add	r1, sp, #8
 8000a1e:	0020      	movs	r0, r4
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000a20:	9202      	str	r2, [sp, #8]
 8000a22:	9303      	str	r3, [sp, #12]
 8000a24:	9604      	str	r6, [sp, #16]
 8000a26:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000a28:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000a2a:	f018 fce3 	bl	80193f4 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8000a2e:	4c1f      	ldr	r4, [pc, #124]	; (8000aac <SPI1_MspInit+0xfc>)
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <SPI1_MspInit+0x100>)
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a32:	2780      	movs	r7, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8000a34:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000a36:	2311      	movs	r3, #17
 8000a38:	6063      	str	r3, [r4, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	469a      	mov	sl, r3
 8000a3e:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a40:	3370      	adds	r3, #112	; 0x70
 8000a42:	4699      	mov	r9, r3
 8000a44:	6123      	str	r3, [r4, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a46:	2680      	movs	r6, #128	; 0x80
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a48:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a4a:	007f      	lsls	r7, r7, #1
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a4c:	00f6      	lsls	r6, r6, #3
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a4e:	019b      	lsls	r3, r3, #6
    HAL_DMA_Init(&hdma_spi1_tx);
 8000a50:	0020      	movs	r0, r4
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a52:	60e5      	str	r5, [r4, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a54:	6167      	str	r7, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a56:	61a6      	str	r6, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000a58:	61e5      	str	r5, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a5a:	6223      	str	r3, [r4, #32]
    HAL_DMA_Init(&hdma_spi1_tx);
 8000a5c:	f018 fa8e 	bl	8018f7c <HAL_DMA_Init>
  __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000a60:	4643      	mov	r3, r8
 8000a62:	655c      	str	r4, [r3, #84]	; 0x54
 8000a64:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000a66:	4c13      	ldr	r4, [pc, #76]	; (8000ab4 <SPI1_MspInit+0x104>)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <SPI1_MspInit+0x108>)
    HAL_DMA_Init(&hdma_spi1_rx);
 8000a6a:	0020      	movs	r0, r4
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000a6c:	6023      	str	r3, [r4, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000a6e:	4653      	mov	r3, sl
 8000a70:	6063      	str	r3, [r4, #4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a72:	464b      	mov	r3, r9
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a74:	60a5      	str	r5, [r4, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a76:	6123      	str	r3, [r4, #16]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a78:	60e5      	str	r5, [r4, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a7a:	6167      	str	r7, [r4, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a7c:	61a6      	str	r6, [r4, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000a7e:	61e5      	str	r5, [r4, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a80:	6225      	str	r5, [r4, #32]
    HAL_DMA_Init(&hdma_spi1_rx);
 8000a82:	f018 fa7b 	bl	8018f7c <HAL_DMA_Init>
  __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000a86:	4643      	mov	r3, r8
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2102      	movs	r1, #2
  __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000a8c:	659c      	str	r4, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8000a8e:	2019      	movs	r0, #25
  __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000a90:	62a3      	str	r3, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8000a92:	f018 f9a5 	bl	8018de0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a96:	2019      	movs	r0, #25
 8000a98:	f018 f9d4 	bl	8018e44 <HAL_NVIC_EnableIRQ>
}
 8000a9c:	b008      	add	sp, #32
 8000a9e:	bce0      	pop	{r5, r6, r7}
 8000aa0:	46ba      	mov	sl, r7
 8000aa2:	46b1      	mov	r9, r6
 8000aa4:	46a8      	mov	r8, r5
 8000aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	20002ec8 	.word	0x20002ec8
 8000ab0:	40020008 	.word	0x40020008
 8000ab4:	20002e6c 	.word	0x20002e6c
 8000ab8:	4002001c 	.word	0x4002001c

08000abc <SPI2_MspInit>:
{
 8000abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000abe:	46ce      	mov	lr, r9
 8000ac0:	4647      	mov	r7, r8
 8000ac2:	0006      	movs	r6, r0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ac4:	2080      	movs	r0, #128	; 0x80
 8000ac6:	4b3f      	ldr	r3, [pc, #252]	; (8000bc4 <SPI2_MspInit+0x108>)
{
 8000ac8:	b580      	push	{r7, lr}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000acc:	01c0      	lsls	r0, r0, #7
 8000ace:	4301      	orrs	r1, r0
 8000ad0:	63d9      	str	r1, [r3, #60]	; 0x3c
 8000ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
{
 8000ad4:	b08b      	sub	sp, #44	; 0x2c
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ad6:	4002      	ands	r2, r0
 8000ad8:	9201      	str	r2, [sp, #4]
 8000ada:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000adc:	2204      	movs	r2, #4
 8000ade:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8000ae0:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4311      	orrs	r1, r2
 8000ae4:	6359      	str	r1, [r3, #52]	; 0x34
 8000ae6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8000ae8:	2503      	movs	r5, #3
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	400a      	ands	r2, r1
 8000aec:	9202      	str	r2, [sp, #8]
 8000aee:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af0:	2202      	movs	r2, #2
 8000af2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000af4:	4f34      	ldr	r7, [pc, #208]	; (8000bc8 <SPI2_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	4311      	orrs	r1, r2
 8000af8:	6359      	str	r1, [r3, #52]	; 0x34
 8000afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000afc:	0038      	movs	r0, r7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	401a      	ands	r2, r3
 8000b00:	9203      	str	r2, [sp, #12]
 8000b02:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8000b04:	2204      	movs	r2, #4
 8000b06:	2302      	movs	r3, #2
 8000b08:	9204      	str	r2, [sp, #16]
 8000b0a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8000b0c:	2301      	movs	r3, #1
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000b0e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8000b10:	4698      	mov	r8, r3
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8000b12:	9406      	str	r4, [sp, #24]
 8000b14:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8000b16:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000b18:	f018 fc6c 	bl	80193f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	2302      	movs	r3, #2
 8000b20:	9204      	str	r2, [sp, #16]
 8000b22:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8000b24:	4643      	mov	r3, r8
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000b26:	0038      	movs	r0, r7
 8000b28:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8000b2a:	9406      	str	r4, [sp, #24]
 8000b2c:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8000b2e:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000b30:	f018 fc60 	bl	80193f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8000b34:	2280      	movs	r2, #128	; 0x80
 8000b36:	9406      	str	r4, [sp, #24]
 8000b38:	9507      	str	r5, [sp, #28]
 8000b3a:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 8000b3c:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8000b3e:	0192      	lsls	r2, r2, #6
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000b40:	a904      	add	r1, sp, #16
 8000b42:	4822      	ldr	r0, [pc, #136]	; (8000bcc <SPI2_MspInit+0x110>)
    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8000b44:	9204      	str	r2, [sp, #16]
 8000b46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 8000b48:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000b4a:	f018 fc53 	bl	80193f4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8000b4e:	4c20      	ldr	r4, [pc, #128]	; (8000bd0 <SPI2_MspInit+0x114>)
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <SPI2_MspInit+0x118>)
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b52:	2780      	movs	r7, #128	; 0x80
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8000b54:	6023      	str	r3, [r4, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000b56:	2313      	movs	r3, #19
 8000b58:	6063      	str	r3, [r4, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b5a:	3b03      	subs	r3, #3
 8000b5c:	60a3      	str	r3, [r4, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b5e:	3370      	adds	r3, #112	; 0x70
 8000b60:	4699      	mov	r9, r3
 8000b62:	6123      	str	r3, [r4, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b64:	00ff      	lsls	r7, r7, #3
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b66:	3380      	adds	r3, #128	; 0x80
    HAL_DMA_Init(&hdma_spi2_tx);
 8000b68:	0020      	movs	r0, r4
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b6a:	4698      	mov	r8, r3
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6c:	60e5      	str	r5, [r4, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b6e:	6163      	str	r3, [r4, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b70:	61a7      	str	r7, [r4, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000b72:	61e5      	str	r5, [r4, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b74:	6225      	str	r5, [r4, #32]
    HAL_DMA_Init(&hdma_spi2_tx);
 8000b76:	f018 fa01 	bl	8018f7c <HAL_DMA_Init>
  __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000b7a:	6574      	str	r4, [r6, #84]	; 0x54
 8000b7c:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <SPI2_MspInit+0x11c>)
 8000b80:	4c16      	ldr	r4, [pc, #88]	; (8000bdc <SPI2_MspInit+0x120>)
 8000b82:	6023      	str	r3, [r4, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8000b84:	2312      	movs	r3, #18
 8000b86:	6063      	str	r3, [r4, #4]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b88:	464b      	mov	r3, r9
 8000b8a:	6123      	str	r3, [r4, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	6163      	str	r3, [r4, #20]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000b90:	2380      	movs	r3, #128	; 0x80
    HAL_DMA_Init(&hdma_spi2_rx);
 8000b92:	0020      	movs	r0, r4
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000b94:	015b      	lsls	r3, r3, #5
 8000b96:	6223      	str	r3, [r4, #32]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b98:	60a5      	str	r5, [r4, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b9a:	60e5      	str	r5, [r4, #12]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b9c:	61a7      	str	r7, [r4, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000b9e:	61e5      	str	r5, [r4, #28]
    HAL_DMA_Init(&hdma_spi2_rx);
 8000ba0:	f018 f9ec 	bl	8018f7c <HAL_DMA_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	201a      	movs	r0, #26
  __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000baa:	65b4      	str	r4, [r6, #88]	; 0x58
 8000bac:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8000bae:	f018 f917 	bl	8018de0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000bb2:	201a      	movs	r0, #26
 8000bb4:	f018 f946 	bl	8018e44 <HAL_NVIC_EnableIRQ>
}
 8000bb8:	b00b      	add	sp, #44	; 0x2c
 8000bba:	bcc0      	pop	{r6, r7}
 8000bbc:	46b9      	mov	r9, r7
 8000bbe:	46b0      	mov	r8, r6
 8000bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	50000800 	.word	0x50000800
 8000bcc:	50000400 	.word	0x50000400
 8000bd0:	20002f80 	.word	0x20002f80
 8000bd4:	40020030 	.word	0x40020030
 8000bd8:	40020044 	.word	0x40020044
 8000bdc:	20002f24 	.word	0x20002f24

08000be0 <BSP_SPI1_DeInit>:
  if (SPI1InitCounter > 0)
 8000be0:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <BSP_SPI1_DeInit+0x24>)
{
 8000be2:	b510      	push	{r4, lr}
  if (SPI1InitCounter > 0)
 8000be4:	6813      	ldr	r3, [r2, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d009      	beq.n	8000bfe <BSP_SPI1_DeInit+0x1e>
    if (--SPI1InitCounter == 0)
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d105      	bne.n	8000bfe <BSP_SPI1_DeInit+0x1e>
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <BSP_SPI1_DeInit+0x28>)
 8000bf4:	f019 fd4c 	bl	801a690 <HAL_SPI_DeInit>
 8000bf8:	2800      	cmp	r0, #0
 8000bfa:	d100      	bne.n	8000bfe <BSP_SPI1_DeInit+0x1e>
}
 8000bfc:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8000bfe:	2008      	movs	r0, #8
 8000c00:	4240      	negs	r0, r0
 8000c02:	e7fb      	b.n	8000bfc <BSP_SPI1_DeInit+0x1c>
 8000c04:	20002e64 	.word	0x20002e64
 8000c08:	20002fdc 	.word	0x20002fdc

08000c0c <BSP_SPI1_Send>:
  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000c0c:	2380      	movs	r3, #128	; 0x80
{
 8000c0e:	000a      	movs	r2, r1
  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000c10:	015b      	lsls	r3, r3, #5
 8000c12:	0001      	movs	r1, r0
{
 8000c14:	b510      	push	{r4, lr}
  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <BSP_SPI1_Send+0x20>)
 8000c18:	f019 fdb6 	bl	801a788 <HAL_SPI_Transmit>
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000c1c:	4243      	negs	r3, r0
 8000c1e:	4158      	adcs	r0, r3
 8000c20:	4243      	negs	r3, r0
 8000c22:	2006      	movs	r0, #6
 8000c24:	4018      	ands	r0, r3
 8000c26:	3806      	subs	r0, #6
}
 8000c28:	bd10      	pop	{r4, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	20002fdc 	.word	0x20002fdc

08000c30 <BSP_SPI1_Recv>:
  if(HAL_SPI_Receive(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000c30:	2380      	movs	r3, #128	; 0x80
{
 8000c32:	000a      	movs	r2, r1
  if(HAL_SPI_Receive(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000c34:	015b      	lsls	r3, r3, #5
 8000c36:	0001      	movs	r1, r0
{
 8000c38:	b510      	push	{r4, lr}
  if(HAL_SPI_Receive(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <BSP_SPI1_Recv+0x20>)
 8000c3c:	f01a f824 	bl	801ac88 <HAL_SPI_Receive>
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000c40:	4243      	negs	r3, r0
 8000c42:	4158      	adcs	r0, r3
 8000c44:	4243      	negs	r3, r0
 8000c46:	2006      	movs	r0, #6
 8000c48:	4018      	ands	r0, r3
 8000c4a:	3806      	subs	r0, #6
}
 8000c4c:	bd10      	pop	{r4, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	20002fdc 	.word	0x20002fdc

08000c54 <BSP_SPI1_Send_DMA>:
{
 8000c54:	000a      	movs	r2, r1
 8000c56:	b510      	push	{r4, lr}
  if(HAL_SPI_Transmit_DMA(&hspi1, pData, Length) != HAL_OK)
 8000c58:	0001      	movs	r1, r0
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <BSP_SPI1_Send_DMA+0x1c>)
 8000c5c:	f01a f9d4 	bl	801b008 <HAL_SPI_Transmit_DMA>
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000c60:	4243      	negs	r3, r0
 8000c62:	4158      	adcs	r0, r3
 8000c64:	4243      	negs	r3, r0
 8000c66:	2006      	movs	r0, #6
 8000c68:	4018      	ands	r0, r3
 8000c6a:	3806      	subs	r0, #6
}
 8000c6c:	bd10      	pop	{r4, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	20002fdc 	.word	0x20002fdc

08000c74 <BSP_SPI2_DeInit>:
  if (SPI2InitCounter > 0)
 8000c74:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <BSP_SPI2_DeInit+0x24>)
{
 8000c76:	b510      	push	{r4, lr}
  if (SPI2InitCounter > 0)
 8000c78:	6813      	ldr	r3, [r2, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d009      	beq.n	8000c92 <BSP_SPI2_DeInit+0x1e>
    if (--SPI2InitCounter == 0)
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d105      	bne.n	8000c92 <BSP_SPI2_DeInit+0x1e>
      if (HAL_SPI_DeInit(&hspi2) == HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <BSP_SPI2_DeInit+0x28>)
 8000c88:	f019 fd02 	bl	801a690 <HAL_SPI_DeInit>
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	d100      	bne.n	8000c92 <BSP_SPI2_DeInit+0x1e>
}
 8000c90:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8000c92:	2008      	movs	r0, #8
 8000c94:	4240      	negs	r0, r0
 8000c96:	e7fb      	b.n	8000c90 <BSP_SPI2_DeInit+0x1c>
 8000c98:	20002e68 	.word	0x20002e68
 8000c9c:	20003068 	.word	0x20003068

08000ca0 <BSP_SPI2_Send>:
  if(HAL_SPI_Transmit(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000ca0:	2380      	movs	r3, #128	; 0x80
{
 8000ca2:	000a      	movs	r2, r1
  if(HAL_SPI_Transmit(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000ca4:	015b      	lsls	r3, r3, #5
 8000ca6:	0001      	movs	r1, r0
{
 8000ca8:	b510      	push	{r4, lr}
  if(HAL_SPI_Transmit(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <BSP_SPI2_Send+0x20>)
 8000cac:	f019 fd6c 	bl	801a788 <HAL_SPI_Transmit>
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000cb0:	4243      	negs	r3, r0
 8000cb2:	4158      	adcs	r0, r3
 8000cb4:	4243      	negs	r3, r0
 8000cb6:	2006      	movs	r0, #6
 8000cb8:	4018      	ands	r0, r3
 8000cba:	3806      	subs	r0, #6
}
 8000cbc:	bd10      	pop	{r4, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	20003068 	.word	0x20003068

08000cc4 <BSP_SPI2_Recv>:
  if(HAL_SPI_Receive(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000cc4:	2380      	movs	r3, #128	; 0x80
{
 8000cc6:	000a      	movs	r2, r1
  if(HAL_SPI_Receive(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000cc8:	015b      	lsls	r3, r3, #5
 8000cca:	0001      	movs	r1, r0
{
 8000ccc:	b510      	push	{r4, lr}
  if(HAL_SPI_Receive(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <BSP_SPI2_Recv+0x20>)
 8000cd0:	f019 ffda 	bl	801ac88 <HAL_SPI_Receive>
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000cd4:	4243      	negs	r3, r0
 8000cd6:	4158      	adcs	r0, r3
 8000cd8:	4243      	negs	r3, r0
 8000cda:	2006      	movs	r0, #6
 8000cdc:	4018      	ands	r0, r3
 8000cde:	3806      	subs	r0, #6
}
 8000ce0:	bd10      	pop	{r4, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	20003068 	.word	0x20003068

08000ce8 <BSP_SPI2_Recv_DMA>:
{
 8000ce8:	000a      	movs	r2, r1
 8000cea:	b510      	push	{r4, lr}
  if(HAL_SPI_Receive_DMA(&hspi2, pData, Length) != HAL_OK)
 8000cec:	0001      	movs	r1, r0
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <BSP_SPI2_Recv_DMA+0x1c>)
 8000cf0:	f01a fafc 	bl	801b2ec <HAL_SPI_Receive_DMA>
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000cf4:	4243      	negs	r3, r0
 8000cf6:	4158      	adcs	r0, r3
 8000cf8:	4243      	negs	r3, r0
 8000cfa:	2006      	movs	r0, #6
 8000cfc:	4018      	ands	r0, r3
 8000cfe:	3806      	subs	r0, #6
}
 8000d00:	bd10      	pop	{r4, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	20003068 	.word	0x20003068

08000d08 <MX_SPI1_Init>:
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000d08:	22e0      	movs	r2, #224	; 0xe0
  hspi->Instance = SPI1;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_SPI1_Init+0x40>)
{
 8000d0c:	b510      	push	{r4, lr}
  hspi->Instance = SPI1;
 8000d0e:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000d10:	2382      	movs	r3, #130	; 0x82
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000d12:	00d2      	lsls	r2, r2, #3
 8000d14:	60c2      	str	r2, [r0, #12]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000d16:	2280      	movs	r2, #128	; 0x80
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	6043      	str	r3, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000d1c:	2300      	movs	r3, #0
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000d1e:	0092      	lsls	r2, r2, #2
 8000d20:	6182      	str	r2, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d22:	3af9      	subs	r2, #249	; 0xf9
 8000d24:	3aff      	subs	r2, #255	; 0xff
 8000d26:	61c2      	str	r2, [r0, #28]
  hspi->Init.CRCPolynomial = 7;
 8000d28:	3a01      	subs	r2, #1
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000d2a:	6083      	str	r3, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d2c:	6103      	str	r3, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d2e:	6143      	str	r3, [r0, #20]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d30:	6203      	str	r3, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000d32:	6243      	str	r3, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d34:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d36:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d38:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->Init.CRCPolynomial = 7;
 8000d3a:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000d3c:	f019 fbe4 	bl	801a508 <HAL_SPI_Init>
 8000d40:	1e43      	subs	r3, r0, #1
 8000d42:	4198      	sbcs	r0, r3
  return ret;
 8000d44:	b2c0      	uxtb	r0, r0
}
 8000d46:	bd10      	pop	{r4, pc}
 8000d48:	40013000 	.word	0x40013000

08000d4c <BSP_SPI1_Init>:
{
 8000d4c:	b570      	push	{r4, r5, r6, lr}
  hspi1.Instance  = SPI1;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <BSP_SPI1_Init+0x6c>)
  if(SPI1InitCounter++ == 0)
 8000d50:	4a1a      	ldr	r2, [pc, #104]	; (8000dbc <BSP_SPI1_Init+0x70>)
  hspi1.Instance  = SPI1;
 8000d52:	4c1b      	ldr	r4, [pc, #108]	; (8000dc0 <BSP_SPI1_Init+0x74>)
 8000d54:	6023      	str	r3, [r4, #0]
  if(SPI1InitCounter++ == 0)
 8000d56:	6813      	ldr	r3, [r2, #0]
 8000d58:	1c59      	adds	r1, r3, #1
 8000d5a:	6011      	str	r1, [r2, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <BSP_SPI1_Init+0x18>
  int32_t ret = BSP_ERROR_NONE;
 8000d60:	2000      	movs	r0, #0
}
 8000d62:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000d64:	0020      	movs	r0, r4
 8000d66:	f01a fc25 	bl	801b5b4 <HAL_SPI_GetState>
 8000d6a:	2800      	cmp	r0, #0
 8000d6c:	d1f8      	bne.n	8000d60 <BSP_SPI1_Init+0x14>
        if(IsSPI1MspCbValid == 0U)
 8000d6e:	4d15      	ldr	r5, [pc, #84]	; (8000dc4 <BSP_SPI1_Init+0x78>)
 8000d70:	682b      	ldr	r3, [r5, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d115      	bne.n	8000da2 <BSP_SPI1_Init+0x56>
  __HAL_SPI_RESET_HANDLE_STATE(&hspi1);
 8000d76:	225d      	movs	r2, #93	; 0x5d
 8000d78:	54a3      	strb	r3, [r4, r2]
 8000d7a:	3227      	adds	r2, #39	; 0x27
 8000d7c:	50a3      	str	r3, [r4, r2]
 8000d7e:	3204      	adds	r2, #4
 8000d80:	50a3      	str	r3, [r4, r2]
  if (HAL_SPI_RegisterCallback(&hspi1, HAL_SPI_MSPINIT_CB_ID, SPI1_MspInit)  != HAL_OK)
 8000d82:	2108      	movs	r1, #8
 8000d84:	0020      	movs	r0, r4
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <BSP_SPI1_Init+0x7c>)
 8000d88:	f019 fca2 	bl	801a6d0 <HAL_SPI_RegisterCallback>
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d110      	bne.n	8000db2 <BSP_SPI1_Init+0x66>
  if (HAL_SPI_RegisterCallback(&hspi1, HAL_SPI_MSPDEINIT_CB_ID, SPI1_MspDeInit) != HAL_OK)
 8000d90:	2109      	movs	r1, #9
 8000d92:	0020      	movs	r0, r4
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <BSP_SPI1_Init+0x80>)
 8000d96:	f019 fc9b 	bl	801a6d0 <HAL_SPI_RegisterCallback>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d109      	bne.n	8000db2 <BSP_SPI1_Init+0x66>
  IsSPI1MspCbValid = 1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	602b      	str	r3, [r5, #0]
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000da2:	0020      	movs	r0, r4
 8000da4:	f7ff ffb0 	bl	8000d08 <MX_SPI1_Init>
 8000da8:	2800      	cmp	r0, #0
 8000daa:	d0d9      	beq.n	8000d60 <BSP_SPI1_Init+0x14>
                ret = BSP_ERROR_BUS_FAILURE;
 8000dac:	2008      	movs	r0, #8
 8000dae:	4240      	negs	r0, r0
 8000db0:	e7d7      	b.n	8000d62 <BSP_SPI1_Init+0x16>
                return BSP_ERROR_MSP_FAILURE;
 8000db2:	200a      	movs	r0, #10
 8000db4:	4240      	negs	r0, r0
 8000db6:	e7d4      	b.n	8000d62 <BSP_SPI1_Init+0x16>
 8000db8:	40013000 	.word	0x40013000
 8000dbc:	20002e64 	.word	0x20002e64
 8000dc0:	20002fdc 	.word	0x20002fdc
 8000dc4:	20002e5c 	.word	0x20002e5c
 8000dc8:	080009b1 	.word	0x080009b1
 8000dcc:	08000919 	.word	0x08000919

08000dd0 <MX_SPI2_Init>:
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd0:	22e0      	movs	r2, #224	; 0xe0
  hspi->Instance = SPI2;
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_SPI2_Init+0x40>)
{
 8000dd4:	b510      	push	{r4, lr}
  hspi->Instance = SPI2;
 8000dd6:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000dd8:	2382      	movs	r3, #130	; 0x82
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000dda:	00d2      	lsls	r2, r2, #3
 8000ddc:	60c2      	str	r2, [r0, #12]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000dde:	2280      	movs	r2, #128	; 0x80
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	6043      	str	r3, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000de4:	2300      	movs	r3, #0
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	6182      	str	r2, [r0, #24]
  hspi->Init.CRCPolynomial = 7;
 8000dea:	3afa      	subs	r2, #250	; 0xfa
 8000dec:	3aff      	subs	r2, #255	; 0xff
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000dee:	6083      	str	r3, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df0:	6103      	str	r3, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df2:	6143      	str	r3, [r0, #20]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000df4:	61c3      	str	r3, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df6:	6203      	str	r3, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000df8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dfa:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dfc:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000dfe:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->Init.CRCPolynomial = 7;
 8000e00:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000e02:	f019 fb81 	bl	801a508 <HAL_SPI_Init>
 8000e06:	1e43      	subs	r3, r0, #1
 8000e08:	4198      	sbcs	r0, r3
  return ret;
 8000e0a:	b2c0      	uxtb	r0, r0
}
 8000e0c:	bd10      	pop	{r4, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	40003800 	.word	0x40003800

08000e14 <BSP_SPI2_Init>:
{
 8000e14:	b570      	push	{r4, r5, r6, lr}
  hspi2.Instance  = SPI2;
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <BSP_SPI2_Init+0x6c>)
  if(SPI2InitCounter++ == 0)
 8000e18:	4a1a      	ldr	r2, [pc, #104]	; (8000e84 <BSP_SPI2_Init+0x70>)
  hspi2.Instance  = SPI2;
 8000e1a:	4c1b      	ldr	r4, [pc, #108]	; (8000e88 <BSP_SPI2_Init+0x74>)
 8000e1c:	6023      	str	r3, [r4, #0]
  if(SPI2InitCounter++ == 0)
 8000e1e:	6813      	ldr	r3, [r2, #0]
 8000e20:	1c59      	adds	r1, r3, #1
 8000e22:	6011      	str	r1, [r2, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <BSP_SPI2_Init+0x18>
  int32_t ret = BSP_ERROR_NONE;
 8000e28:	2000      	movs	r0, #0
}
 8000e2a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8000e2c:	0020      	movs	r0, r4
 8000e2e:	f01a fbc1 	bl	801b5b4 <HAL_SPI_GetState>
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d1f8      	bne.n	8000e28 <BSP_SPI2_Init+0x14>
        if(IsSPI2MspCbValid == 0U)
 8000e36:	4d15      	ldr	r5, [pc, #84]	; (8000e8c <BSP_SPI2_Init+0x78>)
 8000e38:	682b      	ldr	r3, [r5, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d115      	bne.n	8000e6a <BSP_SPI2_Init+0x56>
  __HAL_SPI_RESET_HANDLE_STATE(&hspi2);
 8000e3e:	225d      	movs	r2, #93	; 0x5d
 8000e40:	54a3      	strb	r3, [r4, r2]
 8000e42:	3227      	adds	r2, #39	; 0x27
 8000e44:	50a3      	str	r3, [r4, r2]
 8000e46:	3204      	adds	r2, #4
 8000e48:	50a3      	str	r3, [r4, r2]
  if (HAL_SPI_RegisterCallback(&hspi2, HAL_SPI_MSPINIT_CB_ID, SPI2_MspInit)  != HAL_OK)
 8000e4a:	2108      	movs	r1, #8
 8000e4c:	0020      	movs	r0, r4
 8000e4e:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <BSP_SPI2_Init+0x7c>)
 8000e50:	f019 fc3e 	bl	801a6d0 <HAL_SPI_RegisterCallback>
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d110      	bne.n	8000e7a <BSP_SPI2_Init+0x66>
  if (HAL_SPI_RegisterCallback(&hspi2, HAL_SPI_MSPDEINIT_CB_ID, SPI2_MspDeInit) != HAL_OK)
 8000e58:	2109      	movs	r1, #9
 8000e5a:	0020      	movs	r0, r4
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <BSP_SPI2_Init+0x80>)
 8000e5e:	f019 fc37 	bl	801a6d0 <HAL_SPI_RegisterCallback>
 8000e62:	2800      	cmp	r0, #0
 8000e64:	d109      	bne.n	8000e7a <BSP_SPI2_Init+0x66>
  IsSPI2MspCbValid = 1;
 8000e66:	2301      	movs	r3, #1
 8000e68:	602b      	str	r3, [r5, #0]
            if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8000e6a:	0020      	movs	r0, r4
 8000e6c:	f7ff ffb0 	bl	8000dd0 <MX_SPI2_Init>
 8000e70:	2800      	cmp	r0, #0
 8000e72:	d0d9      	beq.n	8000e28 <BSP_SPI2_Init+0x14>
                ret = BSP_ERROR_BUS_FAILURE;
 8000e74:	2008      	movs	r0, #8
 8000e76:	4240      	negs	r0, r0
 8000e78:	e7d7      	b.n	8000e2a <BSP_SPI2_Init+0x16>
                return BSP_ERROR_MSP_FAILURE;
 8000e7a:	200a      	movs	r0, #10
 8000e7c:	4240      	negs	r0, r0
 8000e7e:	e7d4      	b.n	8000e2a <BSP_SPI2_Init+0x16>
 8000e80:	40003800 	.word	0x40003800
 8000e84:	20002e68 	.word	0x20002e68
 8000e88:	20003068 	.word	0x20003068
 8000e8c:	20002e60 	.word	0x20002e60
 8000e90:	08000abd 	.word	0x08000abd
 8000e94:	08000961 	.word	0x08000961

08000e98 <BSP_KEY_Init>:
{
  int32_t ret = BSP_ERROR_NONE;

  BSP_KEY_CHECK_PARAMS(Instance);

  KeyCtx[Instance].Orientation = Orientation;
 8000e98:	4b02      	ldr	r3, [pc, #8]	; (8000ea4 <BSP_KEY_Init+0xc>)
 8000e9a:	0080      	lsls	r0, r0, #2
 8000e9c:	5019      	str	r1, [r3, r0]

  return ret;
}
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	4770      	bx	lr
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	200030f4 	.word	0x200030f4

08000ea8 <BSP_KEY_GetState>:
  */
int32_t BSP_KEY_GetState(uint32_t Instance, uint8_t *State)
{
  BSP_KEY_CHECK_PARAMS(Instance);

  *State = BSP_KEY_INVALID;
 8000ea8:	2300      	movs	r3, #0
{
 8000eaa:	b570      	push	{r4, r5, r6, lr}
 8000eac:	0005      	movs	r5, r0
 8000eae:	000c      	movs	r4, r1
  *State = BSP_KEY_INVALID;
 8000eb0:	700b      	strb	r3, [r1, #0]

#if defined(KEY_CENTER_GPIO_PIN)
  if (HAL_GPIO_ReadPin(KEY_CENTER_GPIO_PORT, KEY_CENTER_GPIO_PIN) == KEY_PRESSED_STATE)
 8000eb2:	482f      	ldr	r0, [pc, #188]	; (8000f70 <BSP_KEY_GetState+0xc8>)
 8000eb4:	2180      	movs	r1, #128	; 0x80
 8000eb6:	f018 fc35 	bl	8019724 <HAL_GPIO_ReadPin>
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	d102      	bne.n	8000ec4 <BSP_KEY_GetState+0x1c>
    *State = BSP_KEY_CENTER;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	7023      	strb	r3, [r4, #0]
  {
    return BSP_ERROR_PERIPH_FAILURE;
  }

  return BSP_ERROR_NONE;
}
 8000ec2:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_GPIO_ReadPin(KEY_UP_GPIO_PORT, KEY_UP_GPIO_PIN) == KEY_PRESSED_STATE)
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	482b      	ldr	r0, [pc, #172]	; (8000f74 <BSP_KEY_GetState+0xcc>)
 8000ec8:	0149      	lsls	r1, r1, #5
 8000eca:	f018 fc2b 	bl	8019724 <HAL_GPIO_ReadPin>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d121      	bne.n	8000f16 <BSP_KEY_GetState+0x6e>
    *State =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT         ? BSP_KEY_UP :
 8000ed2:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <BSP_KEY_GetState+0xd0>)
 8000ed4:	00ad      	lsls	r5, r5, #2
 8000ed6:	58eb      	ldr	r3, [r5, r3]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d018      	beq.n	8000f0e <BSP_KEY_GetState+0x66>
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d03e      	beq.n	8000f5e <BSP_KEY_GetState+0xb6>
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d029      	beq.n	8000f38 <BSP_KEY_GetState+0x90>
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d113      	bne.n	8000f10 <BSP_KEY_GetState+0x68>
    *State =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT         ? BSP_KEY_RIGHT :
 8000ee8:	2004      	movs	r0, #4
 8000eea:	e011      	b.n	8000f10 <BSP_KEY_GetState+0x68>
  if (HAL_GPIO_ReadPin(KEY_LEFT_GPIO_PORT, KEY_LEFT_GPIO_PIN) == KEY_PRESSED_STATE)
 8000eec:	2101      	movs	r1, #1
 8000eee:	4821      	ldr	r0, [pc, #132]	; (8000f74 <BSP_KEY_GetState+0xcc>)
 8000ef0:	f018 fc18 	bl	8019724 <HAL_GPIO_ReadPin>
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	d121      	bne.n	8000f3c <BSP_KEY_GetState+0x94>
    *State =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT         ? BSP_KEY_LEFT :
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <BSP_KEY_GetState+0xd0>)
 8000efa:	00ad      	lsls	r5, r5, #2
 8000efc:	58eb      	ldr	r3, [r5, r3]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f2      	beq.n	8000ee8 <BSP_KEY_GetState+0x40>
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d018      	beq.n	8000f38 <BSP_KEY_GetState+0x90>
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d029      	beq.n	8000f5e <BSP_KEY_GetState+0xb6>
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d100      	bne.n	8000f10 <BSP_KEY_GetState+0x68>
    *State =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT         ? BSP_KEY_RIGHT :
 8000f0e:	2002      	movs	r0, #2
 8000f10:	7020      	strb	r0, [r4, #0]
  return BSP_ERROR_NONE;
 8000f12:	2000      	movs	r0, #0
 8000f14:	e7d5      	b.n	8000ec2 <BSP_KEY_GetState+0x1a>
  if (HAL_GPIO_ReadPin(KEY_DOWN_GPIO_PORT, KEY_DOWN_GPIO_PIN) == KEY_PRESSED_STATE)
 8000f16:	2110      	movs	r1, #16
 8000f18:	4816      	ldr	r0, [pc, #88]	; (8000f74 <BSP_KEY_GetState+0xcc>)
 8000f1a:	f018 fc03 	bl	8019724 <HAL_GPIO_ReadPin>
 8000f1e:	2800      	cmp	r0, #0
 8000f20:	d1e4      	bne.n	8000eec <BSP_KEY_GetState+0x44>
    *State =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT         ? BSP_KEY_DOWN :
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <BSP_KEY_GetState+0xd0>)
 8000f24:	00ad      	lsls	r5, r5, #2
 8000f26:	58eb      	ldr	r3, [r5, r3]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d018      	beq.n	8000f5e <BSP_KEY_GetState+0xb6>
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d0ee      	beq.n	8000f0e <BSP_KEY_GetState+0x66>
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d0d9      	beq.n	8000ee8 <BSP_KEY_GetState+0x40>
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d1eb      	bne.n	8000f10 <BSP_KEY_GetState+0x68>
    *State =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT         ? BSP_KEY_RIGHT :
 8000f38:	2005      	movs	r0, #5
 8000f3a:	e7e9      	b.n	8000f10 <BSP_KEY_GetState+0x68>
  if (HAL_GPIO_ReadPin(KEY_RIGHT_GPIO_PORT, KEY_RIGHT_GPIO_PIN) == KEY_PRESSED_STATE)
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	480d      	ldr	r0, [pc, #52]	; (8000f74 <BSP_KEY_GetState+0xcc>)
 8000f40:	f018 fbf0 	bl	8019724 <HAL_GPIO_ReadPin>
 8000f44:	2800      	cmp	r0, #0
 8000f46:	d10c      	bne.n	8000f62 <BSP_KEY_GetState+0xba>
    *State =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT         ? BSP_KEY_RIGHT :
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <BSP_KEY_GetState+0xd0>)
 8000f4a:	00ad      	lsls	r5, r5, #2
 8000f4c:	58eb      	ldr	r3, [r5, r3]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f2      	beq.n	8000f38 <BSP_KEY_GetState+0x90>
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d0c8      	beq.n	8000ee8 <BSP_KEY_GetState+0x40>
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d0d9      	beq.n	8000f0e <BSP_KEY_GetState+0x66>
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d1d8      	bne.n	8000f10 <BSP_KEY_GetState+0x68>
 8000f5e:	2003      	movs	r0, #3
 8000f60:	e7d6      	b.n	8000f10 <BSP_KEY_GetState+0x68>
  if(*State == BSP_KEY_INVALID)
 8000f62:	7820      	ldrb	r0, [r4, #0]
    return BSP_ERROR_PERIPH_FAILURE;
 8000f64:	1e43      	subs	r3, r0, #1
 8000f66:	4198      	sbcs	r0, r3
 8000f68:	0080      	lsls	r0, r0, #2
 8000f6a:	3804      	subs	r0, #4
 8000f6c:	e7a9      	b.n	8000ec2 <BSP_KEY_GetState+0x1a>
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	50000800 	.word	0x50000800
 8000f74:	50000400 	.word	0x50000400
 8000f78:	200030f4 	.word	0x200030f4

08000f7c <LCD_IO_ReadReg>:
  * @param  Length length of data be read from the LCD GRAM
  * @retval BSP status
  */
static int32_t LCD_IO_ReadReg(uint8_t *Reg, uint32_t Length)
{
  return BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8000f7c:	200b      	movs	r0, #11
}
 8000f7e:	4240      	negs	r0, r0
 8000f80:	4770      	bx	lr
 8000f82:	46c0      	nop			; (mov r8, r8)

08000f84 <LCD_IO_Delay>:
{
 8000f84:	b510      	push	{r4, lr}
  HAL_Delay(Delay);
 8000f86:	f017 ff0d 	bl	8018da4 <HAL_Delay>
}
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	bd10      	pop	{r4, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)

08000f90 <LCD_IO_GetTick>:
{
 8000f90:	b510      	push	{r4, lr}
  ret = HAL_GetTick();
 8000f92:	f017 ff01 	bl	8018d98 <HAL_GetTick>
}
 8000f96:	bd10      	pop	{r4, pc}

08000f98 <LCD_IO_SendData>:
  * @param  pData  pointer to data to write to LCD GRAM.
  * @param  Length length of data to write to LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_SendData(uint8_t *pData, uint32_t Length)
{
 8000f98:	b570      	push	{r4, r5, r6, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Select : Chip Select low */
  LCD_CS_LOW();
 8000f9a:	24a0      	movs	r4, #160	; 0xa0
 8000f9c:	2580      	movs	r5, #128	; 0x80
 8000f9e:	05e4      	lsls	r4, r4, #23
 8000fa0:	00ad      	lsls	r5, r5, #2
 8000fa2:	62a5      	str	r5, [r4, #40]	; 0x28

  /* Send Data */
  ret = LCD_SPI_Send(pData, Length);
 8000fa4:	b289      	uxth	r1, r1
 8000fa6:	f7ff fe31 	bl	8000c0c <BSP_SPI1_Send>

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 8000faa:	61a5      	str	r5, [r4, #24]

  return ret;
}
 8000fac:	bd70      	pop	{r4, r5, r6, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)

08000fb0 <LCD_IO_WriteReg>:
{
 8000fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LCD_CS_LOW();
 8000fb2:	24a0      	movs	r4, #160	; 0xa0
 8000fb4:	2580      	movs	r5, #128	; 0x80
  LCD_DC_HIGH();
 8000fb6:	2780      	movs	r7, #128	; 0x80
 8000fb8:	4e05      	ldr	r6, [pc, #20]	; (8000fd0 <LCD_IO_WriteReg+0x20>)
  LCD_CS_LOW();
 8000fba:	00ad      	lsls	r5, r5, #2
  LCD_DC_HIGH();
 8000fbc:	01ff      	lsls	r7, r7, #7
  LCD_CS_LOW();
 8000fbe:	05e4      	lsls	r4, r4, #23
 8000fc0:	62a5      	str	r5, [r4, #40]	; 0x28
  ret = LCD_SPI_Send(Reg, Length);
 8000fc2:	b289      	uxth	r1, r1
  LCD_DC_HIGH();
 8000fc4:	62b7      	str	r7, [r6, #40]	; 0x28
  ret = LCD_SPI_Send(Reg, Length);
 8000fc6:	f7ff fe21 	bl	8000c0c <BSP_SPI1_Send>
  LCD_DC_LOW();
 8000fca:	61b7      	str	r7, [r6, #24]
  LCD_CS_HIGH();
 8000fcc:	61a5      	str	r5, [r4, #24]
}
 8000fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fd0:	50000400 	.word	0x50000400

08000fd4 <LCD_IO_RecvData>:
  * @param  pData  pointer to data to read to from selected LCD GRAM.
  * @param  Length length of data to read from selected LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_RecvData(uint8_t *pData, uint32_t Length)
{
 8000fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Select : Chip Select low */
  LCD_CS_LOW();

  LCD_DC_HIGH();
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <LCD_IO_RecvData+0x44>)
{
 8000fd8:	4647      	mov	r7, r8
  LCD_DC_HIGH();
 8000fda:	4698      	mov	r8, r3
 8000fdc:	2380      	movs	r3, #128	; 0x80
{
 8000fde:	46ce      	mov	lr, r9
  LCD_DC_HIGH();
 8000fe0:	01db      	lsls	r3, r3, #7
 8000fe2:	4699      	mov	r9, r3
{
 8000fe4:	b580      	push	{r7, lr}
  LCD_CS_LOW();
 8000fe6:	26a0      	movs	r6, #160	; 0xa0
 8000fe8:	2780      	movs	r7, #128	; 0x80
  LCD_DC_HIGH();
 8000fea:	4643      	mov	r3, r8
 8000fec:	464a      	mov	r2, r9
  LCD_CS_LOW();
 8000fee:	05f6      	lsls	r6, r6, #23
 8000ff0:	00bf      	lsls	r7, r7, #2
 8000ff2:	62b7      	str	r7, [r6, #40]	; 0x28
{
 8000ff4:	000c      	movs	r4, r1
  LCD_DC_HIGH();
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Write Register to read */
  ret = LCD_SPI_Send(pData, 1);
 8000ff8:	2101      	movs	r1, #1
{
 8000ffa:	0005      	movs	r5, r0
  ret = LCD_SPI_Send(pData, 1);
 8000ffc:	f7ff fe06 	bl	8000c0c <BSP_SPI1_Send>

  LCD_DC_LOW();
 8001000:	4643      	mov	r3, r8
 8001002:	464a      	mov	r2, r9

  /* Receive the Data */
  ret = LCD_SPI_Recv(pData, Length);
 8001004:	0028      	movs	r0, r5
  LCD_DC_LOW();
 8001006:	619a      	str	r2, [r3, #24]
  ret = LCD_SPI_Recv(pData, Length);
 8001008:	b2a1      	uxth	r1, r4
 800100a:	f7ff fe11 	bl	8000c30 <BSP_SPI1_Recv>

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 800100e:	61b7      	str	r7, [r6, #24]

  return ret;
}
 8001010:	bcc0      	pop	{r6, r7}
 8001012:	46b9      	mov	r9, r7
 8001014:	46b0      	mov	r8, r6
 8001016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001018:	50000400 	.word	0x50000400

0800101c <LCD_IO_SendDataDMA>:
  LCD_CS_LOW();
 800101c:	23a0      	movs	r3, #160	; 0xa0
 800101e:	2280      	movs	r2, #128	; 0x80
{
 8001020:	b510      	push	{r4, lr}
  LCD_CS_LOW();
 8001022:	05db      	lsls	r3, r3, #23
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
  ret = LCD_SPI_Send_DMA(pData, Length);
 8001028:	b289      	uxth	r1, r1
 800102a:	f7ff fe13 	bl	8000c54 <BSP_SPI1_Send_DMA>
}
 800102e:	bd10      	pop	{r4, pc}

08001030 <LCD_IO_DeInit>:
{
 8001030:	b510      	push	{r4, lr}
  ret = LCD_SPI_DeInit();
 8001032:	f7ff fdd5 	bl	8000be0 <BSP_SPI1_DeInit>
}
 8001036:	bd10      	pop	{r4, pc}

08001038 <LCD_IO_Init>:
{
 8001038:	b570      	push	{r4, r5, r6, lr}
  LCD_RST_LOW();
 800103a:	24a0      	movs	r4, #160	; 0xa0
 800103c:	2502      	movs	r5, #2
 800103e:	05e4      	lsls	r4, r4, #23
  HAL_Delay(100);
 8001040:	2064      	movs	r0, #100	; 0x64
  LCD_RST_LOW();
 8001042:	62a5      	str	r5, [r4, #40]	; 0x28
  HAL_Delay(100);
 8001044:	f017 feae 	bl	8018da4 <HAL_Delay>
  HAL_Delay(100);
 8001048:	2064      	movs	r0, #100	; 0x64
  LCD_RST_HIGH();
 800104a:	61a5      	str	r5, [r4, #24]
  HAL_Delay(100);
 800104c:	f017 feaa 	bl	8018da4 <HAL_Delay>
  LCD_CS_HIGH();
 8001050:	2380      	movs	r3, #128	; 0x80
  LCD_DC_HIGH();
 8001052:	2280      	movs	r2, #128	; 0x80
  LCD_CS_HIGH();
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	61a3      	str	r3, [r4, #24]
  LCD_DC_HIGH();
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <LCD_IO_Init+0x60>)
 800105a:	01d2      	lsls	r2, r2, #7
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  ret = LCD_SPI_Init();
 800105e:	f7ff fe75 	bl	8000d4c <BSP_SPI1_Init>
 8001062:	1e04      	subs	r4, r0, #0
  if(ret == BSP_ERROR_NONE)
 8001064:	d001      	beq.n	800106a <LCD_IO_Init+0x32>
}
 8001066:	0020      	movs	r0, r4
 8001068:	bd70      	pop	{r4, r5, r6, pc}
    HAL_EXTI_GetHandle(&hexti_lcd_te, LCD_TE_GPIO_LINE);
 800106a:	21c0      	movs	r1, #192	; 0xc0
 800106c:	4d0b      	ldr	r5, [pc, #44]	; (800109c <LCD_IO_Init+0x64>)
 800106e:	04c9      	lsls	r1, r1, #19
 8001070:	0028      	movs	r0, r5
 8001072:	f018 f979 	bl	8019368 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hexti_lcd_te, HAL_EXTI_RISING_CB_ID, LCD_TERisingCallback);
 8001076:	2101      	movs	r1, #1
 8001078:	0028      	movs	r0, r5
 800107a:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <LCD_IO_Init+0x68>)
 800107c:	f018 f960 	bl	8019340 <HAL_EXTI_RegisterCallback>
    HAL_EXTI_RegisterCallback(&hexti_lcd_te, HAL_EXTI_FALLING_CB_ID, LCD_TEFallingCallback);
 8001080:	2102      	movs	r1, #2
 8001082:	0028      	movs	r0, r5
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <LCD_IO_Init+0x6c>)
 8001086:	f018 f95b 	bl	8019340 <HAL_EXTI_RegisterCallback>
    HAL_SPI_RegisterCallback(&hLCDSPI, HAL_SPI_TX_COMPLETE_CB_ID, SPI_TxCpltCallback);
 800108a:	2100      	movs	r1, #0
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <LCD_IO_Init+0x70>)
 800108e:	4807      	ldr	r0, [pc, #28]	; (80010ac <LCD_IO_Init+0x74>)
 8001090:	f019 fb1e 	bl	801a6d0 <HAL_SPI_RegisterCallback>
  return ret;
 8001094:	e7e7      	b.n	8001066 <LCD_IO_Init+0x2e>
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	50000400 	.word	0x50000400
 800109c:	20003180 	.word	0x20003180
 80010a0:	08001395 	.word	0x08001395
 80010a4:	08001379 	.word	0x08001379
 80010a8:	08001345 	.word	0x08001345
 80010ac:	20002fdc 	.word	0x20002fdc

080010b0 <LCD_IO_RecvDataDMA>:
 80010b0:	200b      	movs	r0, #11
 80010b2:	4240      	negs	r0, r0
 80010b4:	4770      	bx	lr
 80010b6:	46c0      	nop			; (mov r8, r8)

080010b8 <BSP_LCD_Init>:
{
 80010b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ba:	46ce      	mov	lr, r9
 80010bc:	4647      	mov	r7, r8
 80010be:	b580      	push	{r7, lr}
 80010c0:	000d      	movs	r5, r1
 80010c2:	b08f      	sub	sp, #60	; 0x3c
  if ((Instance >= LCD_INSTANCES_NBR ) || (Orientation > LCD_ORIENTATION_LANDSCAPE_ROT180))
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d000      	beq.n	80010ca <BSP_LCD_Init+0x12>
 80010c8:	e06d      	b.n	80011a6 <BSP_LCD_Init+0xee>
 80010ca:	2903      	cmp	r1, #3
 80010cc:	d86b      	bhi.n	80011a6 <BSP_LCD_Init+0xee>
    if(LCD_OS_Initialize(0) == LCD_OS_ERROR_NONE)
 80010ce:	f000 f96f 	bl	80013b0 <LCD_OS_Initialize>
  int32_t ret = BSP_ERROR_NONE;
 80010d2:	2400      	movs	r4, #0
    if(LCD_OS_Initialize(0) == LCD_OS_ERROR_NONE)
 80010d4:	2800      	cmp	r0, #0
 80010d6:	d005      	beq.n	80010e4 <BSP_LCD_Init+0x2c>
}
 80010d8:	0020      	movs	r0, r4
 80010da:	b00f      	add	sp, #60	; 0x3c
 80010dc:	bcc0      	pop	{r6, r7}
 80010de:	46b9      	mov	r9, r7
 80010e0:	46b0      	mov	r8, r6
 80010e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  IOCtx.Init             = LCD_IO_Init;
 80010e4:	4934      	ldr	r1, [pc, #208]	; (80011b8 <BSP_LCD_Init+0x100>)
 80010e6:	4b35      	ldr	r3, [pc, #212]	; (80011bc <BSP_LCD_Init+0x104>)
  if(ST7789V_RegisterBusIO(&ObjCtx, &IOCtx) != ST7789V_OK)
 80010e8:	4f35      	ldr	r7, [pc, #212]	; (80011c0 <BSP_LCD_Init+0x108>)
  IOCtx.Init             = LCD_IO_Init;
 80010ea:	600b      	str	r3, [r1, #0]
  IOCtx.DeInit           = LCD_IO_DeInit;
 80010ec:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <BSP_LCD_Init+0x10c>)
  if(ST7789V_RegisterBusIO(&ObjCtx, &IOCtx) != ST7789V_OK)
 80010ee:	0038      	movs	r0, r7
  IOCtx.DeInit           = LCD_IO_DeInit;
 80010f0:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg          = LCD_IO_ReadReg;
 80010f2:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <BSP_LCD_Init+0x110>)
  uint32_t id = 0;
 80010f4:	9401      	str	r4, [sp, #4]
  IOCtx.ReadReg          = LCD_IO_ReadReg;
 80010f6:	610b      	str	r3, [r1, #16]
  IOCtx.WriteReg         = LCD_IO_WriteReg;
 80010f8:	4b34      	ldr	r3, [pc, #208]	; (80011cc <BSP_LCD_Init+0x114>)
 80010fa:	60cb      	str	r3, [r1, #12]
  IOCtx.SendData         = LCD_IO_SendData;
 80010fc:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <BSP_LCD_Init+0x118>)
 80010fe:	614b      	str	r3, [r1, #20]
  IOCtx.SendDataDMA      = LCD_IO_SendDataDMA;
 8001100:	4b34      	ldr	r3, [pc, #208]	; (80011d4 <BSP_LCD_Init+0x11c>)
 8001102:	618b      	str	r3, [r1, #24]
  IOCtx.RecvData         = LCD_IO_RecvData;
 8001104:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <BSP_LCD_Init+0x120>)
 8001106:	61cb      	str	r3, [r1, #28]
  IOCtx.RecvDataDMA      = LCD_IO_RecvDataDMA;
 8001108:	4b34      	ldr	r3, [pc, #208]	; (80011dc <BSP_LCD_Init+0x124>)
 800110a:	620b      	str	r3, [r1, #32]
  IOCtx.GetTick          = LCD_IO_GetTick;
 800110c:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <BSP_LCD_Init+0x128>)
 800110e:	624b      	str	r3, [r1, #36]	; 0x24
  IOCtx.Delay            = LCD_IO_Delay;
 8001110:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <BSP_LCD_Init+0x12c>)
 8001112:	628b      	str	r3, [r1, #40]	; 0x28
  if(ST7789V_RegisterBusIO(&ObjCtx, &IOCtx) != ST7789V_OK)
 8001114:	f017 fdae 	bl	8018c74 <ST7789V_RegisterBusIO>
 8001118:	2800      	cmp	r0, #0
 800111a:	d147      	bne.n	80011ac <BSP_LCD_Init+0xf4>
    LcdCompObj = &ObjCtx;
 800111c:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <BSP_LCD_Init+0x130>)
  hLCDSPI.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800111e:	4e33      	ldr	r6, [pc, #204]	; (80011ec <BSP_LCD_Init+0x134>)
    LcdCompObj = &ObjCtx;
 8001120:	4698      	mov	r8, r3
 8001122:	601f      	str	r7, [r3, #0]
  hLCDSPI.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001124:	2328      	movs	r3, #40	; 0x28
  if (HAL_SPI_Init(&hLCDSPI) != HAL_OK)
 8001126:	0030      	movs	r0, r6
  hLCDSPI.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001128:	61f3      	str	r3, [r6, #28]
  if (HAL_SPI_Init(&hLCDSPI) != HAL_OK)
 800112a:	f019 f9ed 	bl	801a508 <HAL_SPI_Init>
 800112e:	2800      	cmp	r0, #0
 8001130:	d13f      	bne.n	80011b2 <BSP_LCD_Init+0xfa>
      if((ST7789V_LCD_Driver.ReadID(LcdCompObj, &id) == ST7789V_OK) && (id == ST7789V_ID))
 8001132:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <BSP_LCD_Init+0x138>)
 8001134:	a901      	add	r1, sp, #4
 8001136:	4699      	mov	r9, r3
 8001138:	4643      	mov	r3, r8
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	464b      	mov	r3, r9
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4798      	blx	r3
 8001142:	2800      	cmp	r0, #0
 8001144:	d132      	bne.n	80011ac <BSP_LCD_Init+0xf4>
 8001146:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <BSP_LCD_Init+0x13c>)
 8001148:	9a01      	ldr	r2, [sp, #4]
 800114a:	429a      	cmp	r2, r3
 800114c:	d12e      	bne.n	80011ac <BSP_LCD_Init+0xf4>
  if (HAL_SPI_Init(&hLCDSPI) != HAL_OK)
 800114e:	0030      	movs	r0, r6
  hLCDSPI.Init.BaudRatePrescaler = UserBaudRatePrescaler;
 8001150:	61f4      	str	r4, [r6, #28]
  if (HAL_SPI_Init(&hLCDSPI) != HAL_OK)
 8001152:	f019 f9d9 	bl	801a508 <HAL_SPI_Init>
 8001156:	2800      	cmp	r0, #0
 8001158:	d12b      	bne.n	80011b2 <BSP_LCD_Init+0xfa>
          LcdDrv = (LCD_Drv_t *)&ST7789V_LCD_Driver;
 800115a:	464a      	mov	r2, r9
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <BSP_LCD_Init+0x140>)
          ST7789V_InitParams.SwapRB         = 0;
 800115e:	9403      	str	r4, [sp, #12]
          LcdDrv = (LCD_Drv_t *)&ST7789V_LCD_Driver;
 8001160:	601a      	str	r2, [r3, #0]
          ObjCtx.IsInitialized = 0;
 8001162:	2348      	movs	r3, #72	; 0x48
 8001164:	54fc      	strb	r4, [r7, r3]
          ST7789V_InitParams.Endian         = ST7789V_ENDIAN_BIG;
 8001166:	466b      	mov	r3, sp
 8001168:	721c      	strb	r4, [r3, #8]
          ST7789V_InitParams.ColorCoding    = ST7789V_FORMAT_DEFAULT;
 800116a:	2355      	movs	r3, #85	; 0x55
          ST7789V_InitParams.TEMode         = ST7789V_TE_MODE_1;
 800116c:	466a      	mov	r2, sp
          ST7789V_InitParams.ColorCoding    = ST7789V_FORMAT_DEFAULT;
 800116e:	9304      	str	r3, [sp, #16]
          ST7789V_InitParams.TEMode         = ST7789V_TE_MODE_1;
 8001170:	3b54      	subs	r3, #84	; 0x54
 8001172:	7713      	strb	r3, [r2, #28]
          ST7789V_InitParams.Timings.hsync  = ST7789V_HSYNC;
 8001174:	2209      	movs	r2, #9
 8001176:	231d      	movs	r3, #29
 8001178:	9208      	str	r2, [sp, #32]
 800117a:	9309      	str	r3, [sp, #36]	; 0x24
 800117c:	2202      	movs	r2, #2
 800117e:	2301      	movs	r3, #1
 8001180:	920a      	str	r2, [sp, #40]	; 0x28
 8001182:	930b      	str	r3, [sp, #44]	; 0x2c
 8001184:	2203      	movs	r2, #3
 8001186:	2302      	movs	r3, #2
 8001188:	920c      	str	r2, [sp, #48]	; 0x30
 800118a:	930d      	str	r3, [sp, #52]	; 0x34
          if(LcdDrv->Init(LcdCompObj, &ST7789V_InitParams) != ST7789V_OK)
 800118c:	4643      	mov	r3, r8
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	464b      	mov	r3, r9
          ST7789V_InitParams.TEScanline     = 0;
 8001192:	9406      	str	r4, [sp, #24]
          if(LcdDrv->Init(LcdCompObj, &ST7789V_InitParams) != ST7789V_OK)
 8001194:	681b      	ldr	r3, [r3, #0]
          ST7789V_InitParams.Orientation    = Orientation;
 8001196:	9505      	str	r5, [sp, #20]
          if(LcdDrv->Init(LcdCompObj, &ST7789V_InitParams) != ST7789V_OK)
 8001198:	a902      	add	r1, sp, #8
 800119a:	4798      	blx	r3
 800119c:	1e04      	subs	r4, r0, #0
 800119e:	d09b      	beq.n	80010d8 <BSP_LCD_Init+0x20>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80011a0:	2405      	movs	r4, #5
 80011a2:	4264      	negs	r4, r4
  return ret;
 80011a4:	e798      	b.n	80010d8 <BSP_LCD_Init+0x20>
    ret = BSP_ERROR_WRONG_PARAM;
 80011a6:	2402      	movs	r4, #2
 80011a8:	4264      	negs	r4, r4
 80011aa:	e795      	b.n	80010d8 <BSP_LCD_Init+0x20>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80011ac:	2407      	movs	r4, #7
 80011ae:	4264      	negs	r4, r4
 80011b0:	e792      	b.n	80010d8 <BSP_LCD_Init+0x20>
    ret = BSP_ERROR_BUS_FAILURE;
 80011b2:	2408      	movs	r4, #8
 80011b4:	4264      	negs	r4, r4
 80011b6:	e78f      	b.n	80010d8 <BSP_LCD_Init+0x20>
 80011b8:	200030f8 	.word	0x200030f8
 80011bc:	08001039 	.word	0x08001039
 80011c0:	2000312c 	.word	0x2000312c
 80011c4:	08001031 	.word	0x08001031
 80011c8:	08000f7d 	.word	0x08000f7d
 80011cc:	08000fb1 	.word	0x08000fb1
 80011d0:	08000f99 	.word	0x08000f99
 80011d4:	0800101d 	.word	0x0800101d
 80011d8:	08000fd5 	.word	0x08000fd5
 80011dc:	080010b1 	.word	0x080010b1
 80011e0:	08000f91 	.word	0x08000f91
 80011e4:	08000f85 	.word	0x08000f85
 80011e8:	20003124 	.word	0x20003124
 80011ec:	20002fdc 	.word	0x20002fdc
 80011f0:	20000038 	.word	0x20000038
 80011f4:	00858552 	.word	0x00858552
 80011f8:	20003128 	.word	0x20003128

080011fc <BSP_LCD_DisplayOn>:
{
 80011fc:	b570      	push	{r4, r5, r6, lr}
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 80011fe:	2100      	movs	r1, #0
{
 8001200:	0005      	movs	r5, r0
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 8001202:	f000 f8ed 	bl	80013e0 <LCD_OS_TryLock>
 8001206:	2800      	cmp	r0, #0
 8001208:	d111      	bne.n	800122e <BSP_LCD_DisplayOn+0x32>
  else if(LcdDrv->DisplayOn != NULL)
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <BSP_LCD_DisplayOn+0x40>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00f      	beq.n	8001234 <BSP_LCD_DisplayOn+0x38>
    if(LcdDrv->DisplayOn(LcdCompObj) < 0)
 8001214:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <BSP_LCD_DisplayOn+0x44>)
 8001216:	6810      	ldr	r0, [r2, #0]
 8001218:	4798      	blx	r3
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800121a:	43c4      	mvns	r4, r0
 800121c:	2305      	movs	r3, #5
 800121e:	17e4      	asrs	r4, r4, #31
 8001220:	401c      	ands	r4, r3
    LCD_OS_Unlock(Instance);
 8001222:	0028      	movs	r0, r5
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001224:	3c05      	subs	r4, #5
    LCD_OS_Unlock(Instance);
 8001226:	f000 f8cb 	bl	80013c0 <LCD_OS_Unlock>
}
 800122a:	0020      	movs	r0, r4
 800122c:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_BUSY;
 800122e:	2403      	movs	r4, #3
 8001230:	4264      	negs	r4, r4
 8001232:	e7fa      	b.n	800122a <BSP_LCD_DisplayOn+0x2e>
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001234:	240b      	movs	r4, #11
 8001236:	4264      	negs	r4, r4
  return ret;
 8001238:	e7f7      	b.n	800122a <BSP_LCD_DisplayOn+0x2e>
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	20003128 	.word	0x20003128
 8001240:	20003124 	.word	0x20003124

08001244 <BSP_LCD_FillRGBRect>:
{
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001246:	46c6      	mov	lr, r8
 8001248:	000c      	movs	r4, r1
 800124a:	0019      	movs	r1, r3
  if(LcdDrv->SetDisplayWindow != NULL)
 800124c:	4b34      	ldr	r3, [pc, #208]	; (8001320 <BSP_LCD_FillRGBRect+0xdc>)
{
 800124e:	b500      	push	{lr}
  if(LcdDrv->SetDisplayWindow != NULL)
 8001250:	681b      	ldr	r3, [r3, #0]
{
 8001252:	0005      	movs	r5, r0
  if(LcdDrv->SetDisplayWindow != NULL)
 8001254:	695f      	ldr	r7, [r3, #20]
{
 8001256:	0016      	movs	r6, r2
 8001258:	b082      	sub	sp, #8
  if(LcdDrv->SetDisplayWindow != NULL)
 800125a:	2f00      	cmp	r7, #0
 800125c:	d056      	beq.n	800130c <BSP_LCD_FillRGBRect+0xc8>
    if (LcdDrv->SetDisplayWindow(LcdCompObj, Xpos, Ypos, Width, Height) < 0)
 800125e:	4b31      	ldr	r3, [pc, #196]	; (8001324 <BSP_LCD_FillRGBRect+0xe0>)
 8001260:	9a08      	ldr	r2, [sp, #32]
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800126a:	47b8      	blx	r7
 800126c:	2800      	cmp	r0, #0
 800126e:	db4d      	blt.n	800130c <BSP_LCD_FillRGBRect+0xc8>
    if(UseDMA)
 8001270:	2c00      	cmp	r4, #0
 8001272:	d12d      	bne.n	80012d0 <BSP_LCD_FillRGBRect+0x8c>
      ret = BSP_LCD_WriteData(Instance, pData, (2*Width*Height));
 8001274:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001276:	9b09      	ldr	r3, [sp, #36]	; 0x24
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 8001278:	2100      	movs	r1, #0
      ret = BSP_LCD_WriteData(Instance, pData, (2*Width*Height));
 800127a:	435c      	muls	r4, r3
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 800127c:	0028      	movs	r0, r5
      ret = BSP_LCD_WriteData(Instance, pData, (2*Width*Height));
 800127e:	0064      	lsls	r4, r4, #1
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 8001280:	f000 f8ae 	bl	80013e0 <LCD_OS_TryLock>
 8001284:	2800      	cmp	r0, #0
 8001286:	d144      	bne.n	8001312 <BSP_LCD_FillRGBRect+0xce>
  else if(IOCtx.SendData)
 8001288:	4b27      	ldr	r3, [pc, #156]	; (8001328 <BSP_LCD_FillRGBRect+0xe4>)
 800128a:	4698      	mov	r8, r3
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d042      	beq.n	8001318 <BSP_LCD_FillRGBRect+0xd4>
    hLCDSPI.Init.DataSize = SPI_DATASIZE_16BIT;
 8001292:	23f0      	movs	r3, #240	; 0xf0
 8001294:	4f25      	ldr	r7, [pc, #148]	; (800132c <BSP_LCD_FillRGBRect+0xe8>)
 8001296:	011b      	lsls	r3, r3, #4
    HAL_SPI_Init(&hLCDSPI);
 8001298:	0038      	movs	r0, r7
    hLCDSPI.Init.DataSize = SPI_DATASIZE_16BIT;
 800129a:	60fb      	str	r3, [r7, #12]
    HAL_SPI_Init(&hLCDSPI);
 800129c:	f019 f934 	bl	801a508 <HAL_SPI_Init>
    if(IOCtx.SendData(pData, (Length / 2)) < 0)
 80012a0:	4643      	mov	r3, r8
 80012a2:	0861      	lsrs	r1, r4, #1
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	0030      	movs	r0, r6
 80012a8:	4798      	blx	r3
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80012aa:	43c4      	mvns	r4, r0
 80012ac:	2305      	movs	r3, #5
 80012ae:	17e4      	asrs	r4, r4, #31
 80012b0:	401c      	ands	r4, r3
    hLCDSPI.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b2:	23e0      	movs	r3, #224	; 0xe0
    HAL_SPI_Init(&hLCDSPI);
 80012b4:	0038      	movs	r0, r7
    hLCDSPI.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	60fb      	str	r3, [r7, #12]
    HAL_SPI_Init(&hLCDSPI);
 80012ba:	f019 f925 	bl	801a508 <HAL_SPI_Init>
    LCD_OS_Unlock(Instance);
 80012be:	0028      	movs	r0, r5
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80012c0:	3c05      	subs	r4, #5
    LCD_OS_Unlock(Instance);
 80012c2:	f000 f87d 	bl	80013c0 <LCD_OS_Unlock>
}
 80012c6:	0020      	movs	r0, r4
 80012c8:	b002      	add	sp, #8
 80012ca:	bc80      	pop	{r7}
 80012cc:	46b8      	mov	r8, r7
 80012ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = BSP_LCD_WriteDataDMA(Instance, pData, (2*Width*Height));
 80012d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80012d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 80012d4:	2100      	movs	r1, #0
      ret = BSP_LCD_WriteDataDMA(Instance, pData, (2*Width*Height));
 80012d6:	435c      	muls	r4, r3
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 80012d8:	0028      	movs	r0, r5
      ret = BSP_LCD_WriteDataDMA(Instance, pData, (2*Width*Height));
 80012da:	0064      	lsls	r4, r4, #1
  if(LCD_OS_TryLock(Instance, LCD_OS_NO_WAIT) != LCD_OS_ERROR_NONE)
 80012dc:	f000 f880 	bl	80013e0 <LCD_OS_TryLock>
 80012e0:	2800      	cmp	r0, #0
 80012e2:	d116      	bne.n	8001312 <BSP_LCD_FillRGBRect+0xce>
  else if(IOCtx.SendDataDMA)
 80012e4:	4d10      	ldr	r5, [pc, #64]	; (8001328 <BSP_LCD_FillRGBRect+0xe4>)
 80012e6:	69ab      	ldr	r3, [r5, #24]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d015      	beq.n	8001318 <BSP_LCD_FillRGBRect+0xd4>
    hLCDSPI.Init.DataSize = SPI_DATASIZE_16BIT;
 80012ec:	23f0      	movs	r3, #240	; 0xf0
 80012ee:	480f      	ldr	r0, [pc, #60]	; (800132c <BSP_LCD_FillRGBRect+0xe8>)
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	60c3      	str	r3, [r0, #12]
    HAL_SPI_Init(&hLCDSPI);
 80012f4:	f019 f908 	bl	801a508 <HAL_SPI_Init>
    if(IOCtx.SendDataDMA(pData, (Length / 2)) < 0)
 80012f8:	69ab      	ldr	r3, [r5, #24]
 80012fa:	0861      	lsrs	r1, r4, #1
 80012fc:	0030      	movs	r0, r6
 80012fe:	4798      	blx	r3
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001300:	43c4      	mvns	r4, r0
 8001302:	2305      	movs	r3, #5
 8001304:	17e4      	asrs	r4, r4, #31
 8001306:	401c      	ands	r4, r3
 8001308:	3c05      	subs	r4, #5
 800130a:	e7dc      	b.n	80012c6 <BSP_LCD_FillRGBRect+0x82>
    ret = BSP_ERROR_BUS_FAILURE;
 800130c:	2408      	movs	r4, #8
 800130e:	4264      	negs	r4, r4
 8001310:	e7d9      	b.n	80012c6 <BSP_LCD_FillRGBRect+0x82>
    ret = BSP_ERROR_BUSY;
 8001312:	2403      	movs	r4, #3
 8001314:	4264      	negs	r4, r4
 8001316:	e7d6      	b.n	80012c6 <BSP_LCD_FillRGBRect+0x82>
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001318:	240b      	movs	r4, #11
 800131a:	4264      	negs	r4, r4
 800131c:	e7d3      	b.n	80012c6 <BSP_LCD_FillRGBRect+0x82>
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	20003128 	.word	0x20003128
 8001324:	20003124 	.word	0x20003124
 8001328:	200030f8 	.word	0x200030f8
 800132c:	20002fdc 	.word	0x20002fdc

08001330 <BSP_LCD_WaitForTransferToBeDone>:
{
 8001330:	b510      	push	{r4, lr}
  if (Instance < LCD_INSTANCES_NBR)
 8001332:	2800      	cmp	r0, #0
 8001334:	d000      	beq.n	8001338 <BSP_LCD_WaitForTransferToBeDone+0x8>
}
 8001336:	bd10      	pop	{r4, pc}
    LCD_OS_WaitForTransferToBeDone(Instance);
 8001338:	f000 f870 	bl	800141c <LCD_OS_WaitForTransferToBeDone>
}
 800133c:	e7fb      	b.n	8001336 <BSP_LCD_WaitForTransferToBeDone+0x6>
 800133e:	46c0      	nop			; (mov r8, r8)

08001340 <BSP_LCD_SignalTransferDone>:
}
 8001340:	4770      	bx	lr
 8001342:	46c0      	nop			; (mov r8, r8)

08001344 <SPI_TxCpltCallback>:
  if(hspi == &hLCDSPI)
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <SPI_TxCpltCallback+0x2c>)
{
 8001346:	b510      	push	{r4, lr}
  if(hspi == &hLCDSPI)
 8001348:	4298      	cmp	r0, r3
 800134a:	d000      	beq.n	800134e <SPI_TxCpltCallback+0xa>
}
 800134c:	bd10      	pop	{r4, pc}
    LCD_CS_HIGH();
 800134e:	23a0      	movs	r3, #160	; 0xa0
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	05db      	lsls	r3, r3, #23
 8001354:	0092      	lsls	r2, r2, #2
 8001356:	619a      	str	r2, [r3, #24]
    hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001358:	23e0      	movs	r3, #224	; 0xe0
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	60c3      	str	r3, [r0, #12]
    HAL_SPI_Init(hspi);
 800135e:	f019 f8d3 	bl	801a508 <HAL_SPI_Init>
    LCD_OS_UnlockFromISR(0);
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f834 	bl	80013d0 <LCD_OS_UnlockFromISR>
    BSP_LCD_SignalTransferDone(0);
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff ffe9 	bl	8001340 <BSP_LCD_SignalTransferDone>
}
 800136e:	e7ed      	b.n	800134c <SPI_TxCpltCallback+0x8>
 8001370:	20002fdc 	.word	0x20002fdc

08001374 <BSP_LCD_SignalTearingEffectEvent>:
}
 8001374:	4770      	bx	lr
 8001376:	46c0      	nop			; (mov r8, r8)

08001378 <LCD_TEFallingCallback>:
{
 8001378:	b510      	push	{r4, lr}
  HAL_EXTI_ClearPending(&hexti_lcd_te, EXTI_TRIGGER_FALLING);
 800137a:	2102      	movs	r1, #2
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <LCD_TEFallingCallback+0x18>)
 800137e:	f018 f821 	bl	80193c4 <HAL_EXTI_ClearPending>
  BSP_LCD_SignalTearingEffectEvent(0, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff fff4 	bl	8001374 <BSP_LCD_SignalTearingEffectEvent>
}
 800138c:	bd10      	pop	{r4, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	20003180 	.word	0x20003180

08001394 <LCD_TERisingCallback>:
{
 8001394:	b510      	push	{r4, lr}
  HAL_EXTI_ClearPending(&hexti_lcd_te, EXTI_TRIGGER_RISING);
 8001396:	2101      	movs	r1, #1
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <LCD_TERisingCallback+0x18>)
 800139a:	f018 f813 	bl	80193c4 <HAL_EXTI_ClearPending>
  BSP_LCD_SignalTearingEffectEvent(0, 1, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2101      	movs	r1, #1
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff ffe6 	bl	8001374 <BSP_LCD_SignalTearingEffectEvent>
}
 80013a8:	bd10      	pop	{r4, pc}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	20003180 	.word	0x20003180

080013b0 <LCD_OS_Initialize>:
uint8_t LCD_OS_Initialize(uint32_t Instance)
{
  uint8_t i;
  for(i = 0; i < LCD_INSTANCES_NBR; i++)
  {
    lcd_sem[i] = 0;
 80013b0:	2200      	movs	r2, #0
 80013b2:	4b02      	ldr	r3, [pc, #8]	; (80013bc <LCD_OS_Initialize+0xc>)
  }
  return LCD_OS_ERROR_NONE;
}
 80013b4:	2000      	movs	r0, #0
    lcd_sem[i] = 0;
 80013b6:	701a      	strb	r2, [r3, #0]
}
 80013b8:	4770      	bx	lr
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	2000318c 	.word	0x2000318c

080013c0 <LCD_OS_Unlock>:
  * @param  Instance LCD Instance
  * @retval LCD_OS_Error_t
  */
uint8_t LCD_OS_Unlock(uint32_t Instance)
{
  lcd_sem[Instance] = 0;
 80013c0:	2200      	movs	r2, #0
 80013c2:	4b02      	ldr	r3, [pc, #8]	; (80013cc <LCD_OS_Unlock+0xc>)
 80013c4:	541a      	strb	r2, [r3, r0]
  return LCD_OS_ERROR_NONE;
}
 80013c6:	2000      	movs	r0, #0
 80013c8:	4770      	bx	lr
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	2000318c 	.word	0x2000318c

080013d0 <LCD_OS_UnlockFromISR>:
 80013d0:	2200      	movs	r2, #0
 80013d2:	4b02      	ldr	r3, [pc, #8]	; (80013dc <LCD_OS_UnlockFromISR+0xc>)
 80013d4:	541a      	strb	r2, [r3, r0]
 80013d6:	2000      	movs	r0, #0
 80013d8:	4770      	bx	lr
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	2000318c 	.word	0x2000318c

080013e0 <LCD_OS_TryLock>:
  * @param  Instance LCD Instance
  * @param  Timeout timeout in ms
  * @retval LCD_OS_Error_t
  */
uint8_t LCD_OS_TryLock(uint32_t Instance, uint32_t Timeout)
{
 80013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e2:	0004      	movs	r4, r0
 80013e4:	000d      	movs	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80013e6:	f017 fcd7 	bl	8018d98 <HAL_GetTick>

  if(lcd_sem[Instance] == 0)
 80013ea:	4f0b      	ldr	r7, [pc, #44]	; (8001418 <LCD_OS_TryLock+0x38>)
  uint32_t tickstart = HAL_GetTick();
 80013ec:	0006      	movs	r6, r0
  if(lcd_sem[Instance] == 0)
 80013ee:	5d3b      	ldrb	r3, [r7, r4]
 80013f0:	b2d8      	uxtb	r0, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <LCD_OS_TryLock+0x2e>
  {
    lcd_sem[Instance] = 1;
    return LCD_OS_ERROR_NONE;
  }
  else if(Timeout == 0)
 80013f6:	2d00      	cmp	r5, #0
 80013f8:	d105      	bne.n	8001406 <LCD_OS_TryLock+0x26>
 80013fa:	e00b      	b.n	8001414 <LCD_OS_TryLock+0x34>
      if(lcd_sem[Instance] == 0)
      {
        lcd_sem[Instance] = 1;
        return LCD_OS_ERROR_NONE;
      }
    } while ((HAL_GetTick() - tickstart) < Timeout);
 80013fc:	f017 fccc 	bl	8018d98 <HAL_GetTick>
 8001400:	1b80      	subs	r0, r0, r6
 8001402:	42a8      	cmp	r0, r5
 8001404:	d206      	bcs.n	8001414 <LCD_OS_TryLock+0x34>
      if(lcd_sem[Instance] == 0)
 8001406:	5d3b      	ldrb	r3, [r7, r4]
 8001408:	b2d8      	uxtb	r0, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f6      	bne.n	80013fc <LCD_OS_TryLock+0x1c>
        lcd_sem[Instance] = 1;
 800140e:	3301      	adds	r3, #1
 8001410:	553b      	strb	r3, [r7, r4]
    return LCD_OS_ERROR_BUSY;
  }
}
 8001412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LCD_OS_ERROR_BUSY;
 8001414:	2003      	movs	r0, #3
 8001416:	e7fc      	b.n	8001412 <LCD_OS_TryLock+0x32>
 8001418:	2000318c 	.word	0x2000318c

0800141c <LCD_OS_WaitForTransferToBeDone>:
  * @param  Instance LCD Instance
  * @retval LCD_OS_Error_t
  */
uint8_t LCD_OS_WaitForTransferToBeDone(uint32_t Instance)
{
  while(lcd_sem[Instance]);
 800141c:	4a02      	ldr	r2, [pc, #8]	; (8001428 <LCD_OS_WaitForTransferToBeDone+0xc>)
 800141e:	5c13      	ldrb	r3, [r2, r0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1fc      	bne.n	800141e <LCD_OS_WaitForTransferToBeDone+0x2>
  return LCD_OS_ERROR_NONE;
}
 8001424:	2000      	movs	r0, #0
 8001426:	4770      	bx	lr
 8001428:	2000318c 	.word	0x2000318c

0800142c <MEM_IO_SendData>:
  * @param  Size length of data to write to the the specified address memory
  * @retval BSP status
  */
static int32_t MEM_IO_SendData(uint8_t *pData, uint32_t Address, uint32_t Size)
{
  return BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800142c:	200b      	movs	r0, #11
}
 800142e:	4240      	negs	r0, r0
 8001430:	4770      	bx	lr
 8001432:	46c0      	nop			; (mov r8, r8)

08001434 <MEM_IO_RecvDataDMA>:
  * @retval BSP status
  */
static int32_t MEM_IO_RecvDataDMA(uint8_t *pData, uint32_t Address, uint32_t Size)
{
  int32_t ret = BSP_ERROR_NONE;
  uint8_t cmd[4] = { MEM_READ_CMD
 8001434:	2303      	movs	r3, #3
{
 8001436:	b530      	push	{r4, r5, lr}
 8001438:	b083      	sub	sp, #12
 800143a:	0005      	movs	r5, r0
  uint8_t cmd[4] = { MEM_READ_CMD
 800143c:	a801      	add	r0, sp, #4
 800143e:	7003      	strb	r3, [r0, #0]
                   , ((Address >> 16) & 0xFF)
 8001440:	0c0b      	lsrs	r3, r1, #16
  uint8_t cmd[4] = { MEM_READ_CMD
 8001442:	7043      	strb	r3, [r0, #1]
                   , ((Address >>  8) & 0xFF)
 8001444:	0a0b      	lsrs	r3, r1, #8
  uint8_t cmd[4] = { MEM_READ_CMD
 8001446:	7083      	strb	r3, [r0, #2]
{
 8001448:	0014      	movs	r4, r2
                   , (Address & 0xFF)
                   };

  /* Reset the nCS pin */
  MEM_CS_LOW();
 800144a:	23a0      	movs	r3, #160	; 0xa0
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	05db      	lsls	r3, r3, #23
 8001450:	0052      	lsls	r2, r2, #1
  uint8_t cmd[4] = { MEM_READ_CMD
 8001452:	70c1      	strb	r1, [r0, #3]

  ret = MEM_SPI_Send(cmd, 4);
 8001454:	2104      	movs	r1, #4
  MEM_CS_LOW();
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
  ret = MEM_SPI_Send(cmd, 4);
 8001458:	f7ff fc22 	bl	8000ca0 <BSP_SPI2_Send>
  if(ret == BSP_ERROR_NONE)
 800145c:	2800      	cmp	r0, #0
 800145e:	d001      	beq.n	8001464 <MEM_IO_RecvDataDMA+0x30>
  {
    ret = MEM_SPI_Recv_DMA(pData, Size);
  }

  return ret;
}
 8001460:	b003      	add	sp, #12
 8001462:	bd30      	pop	{r4, r5, pc}
    ret = MEM_SPI_Recv_DMA(pData, Size);
 8001464:	0028      	movs	r0, r5
 8001466:	b2a1      	uxth	r1, r4
 8001468:	f7ff fc3e 	bl	8000ce8 <BSP_SPI2_Recv_DMA>
  return ret;
 800146c:	e7f8      	b.n	8001460 <MEM_IO_RecvDataDMA+0x2c>
 800146e:	46c0      	nop			; (mov r8, r8)

08001470 <MEM_IO_RecvData>:
  uint8_t cmd[4] = { MEM_READ_CMD
 8001470:	2303      	movs	r3, #3
{
 8001472:	b530      	push	{r4, r5, lr}
 8001474:	b083      	sub	sp, #12
 8001476:	0005      	movs	r5, r0
  uint8_t cmd[4] = { MEM_READ_CMD
 8001478:	a801      	add	r0, sp, #4
 800147a:	7003      	strb	r3, [r0, #0]
                   , ((Address >> 16) & 0xFF)
 800147c:	0c0b      	lsrs	r3, r1, #16
  uint8_t cmd[4] = { MEM_READ_CMD
 800147e:	7043      	strb	r3, [r0, #1]
                   , ((Address >>  8) & 0xFF)
 8001480:	0a0b      	lsrs	r3, r1, #8
  uint8_t cmd[4] = { MEM_READ_CMD
 8001482:	7083      	strb	r3, [r0, #2]
{
 8001484:	0014      	movs	r4, r2
  MEM_CS_LOW();
 8001486:	23a0      	movs	r3, #160	; 0xa0
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	05db      	lsls	r3, r3, #23
 800148c:	0052      	lsls	r2, r2, #1
  uint8_t cmd[4] = { MEM_READ_CMD
 800148e:	70c1      	strb	r1, [r0, #3]
  ret = MEM_SPI_Send(cmd, 4);
 8001490:	2104      	movs	r1, #4
  MEM_CS_LOW();
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
  ret = MEM_SPI_Send(cmd, 4);
 8001494:	f7ff fc04 	bl	8000ca0 <BSP_SPI2_Send>
  if(ret == BSP_ERROR_NONE)
 8001498:	2800      	cmp	r0, #0
 800149a:	d006      	beq.n	80014aa <MEM_IO_RecvData+0x3a>
  MEM_CS_HIGH();
 800149c:	23a0      	movs	r3, #160	; 0xa0
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	05db      	lsls	r3, r3, #23
 80014a2:	0052      	lsls	r2, r2, #1
 80014a4:	619a      	str	r2, [r3, #24]
}
 80014a6:	b003      	add	sp, #12
 80014a8:	bd30      	pop	{r4, r5, pc}
    ret = MEM_SPI_Recv(pData, Size);
 80014aa:	0028      	movs	r0, r5
 80014ac:	b2a1      	uxth	r1, r4
 80014ae:	f7ff fc09 	bl	8000cc4 <BSP_SPI2_Recv>
 80014b2:	e7f3      	b.n	800149c <MEM_IO_RecvData+0x2c>

080014b4 <MEM_IO_DeInit>:
{
 80014b4:	b510      	push	{r4, lr}
  ret = MEM_SPI_DeInit();
 80014b6:	f7ff fbdd 	bl	8000c74 <BSP_SPI2_DeInit>
}
 80014ba:	bd10      	pop	{r4, pc}

080014bc <MEM_IO_Init>:
{
 80014bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014be:	b085      	sub	sp, #20
  ret = MEM_SPI_Init();
 80014c0:	f7ff fca8 	bl	8000e14 <BSP_SPI2_Init>
 80014c4:	1e04      	subs	r4, r0, #0
  if(ret == BSP_ERROR_NONE)
 80014c6:	d002      	beq.n	80014ce <MEM_IO_Init+0x12>
}
 80014c8:	0020      	movs	r0, r4
 80014ca:	b005      	add	sp, #20
 80014cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MEM_CS_LOW();
 80014ce:	25a0      	movs	r5, #160	; 0xa0
 80014d0:	2680      	movs	r6, #128	; 0x80
  cmd = MX25L6433F_RESET_ENABLE_CMD;
 80014d2:	2366      	movs	r3, #102	; 0x66
  MEM_CS_LOW();
 80014d4:	05ed      	lsls	r5, r5, #23
 80014d6:	0076      	lsls	r6, r6, #1
  cmd = MX25L6433F_RESET_ENABLE_CMD;
 80014d8:	aa02      	add	r2, sp, #8
  MEM_CS_LOW();
 80014da:	62ae      	str	r6, [r5, #40]	; 0x28
  ret = MEM_SPI_Send( &cmd, 1 );
 80014dc:	2101      	movs	r1, #1
  cmd = MX25L6433F_RESET_ENABLE_CMD;
 80014de:	7113      	strb	r3, [r2, #4]
  ret = MEM_SPI_Send( &cmd, 1 );
 80014e0:	a803      	add	r0, sp, #12
 80014e2:	f7ff fbdd 	bl	8000ca0 <BSP_SPI2_Send>
  MEM_CS_HIGH();
 80014e6:	61ae      	str	r6, [r5, #24]
  ret = MEM_SPI_Send( &cmd, 1 );
 80014e8:	1e04      	subs	r4, r0, #0
  if(ret == BSP_ERROR_NONE)
 80014ea:	d1ed      	bne.n	80014c8 <MEM_IO_Init+0xc>
    cmd = MX25L6433F_RESET_MEMORY_CMD;
 80014ec:	2399      	movs	r3, #153	; 0x99
 80014ee:	aa02      	add	r2, sp, #8
    MEM_CS_LOW();
 80014f0:	62ae      	str	r6, [r5, #40]	; 0x28
    ret = MEM_SPI_Send( &cmd, 1 );
 80014f2:	2101      	movs	r1, #1
    cmd = MX25L6433F_RESET_MEMORY_CMD;
 80014f4:	7113      	strb	r3, [r2, #4]
    ret = MEM_SPI_Send( &cmd, 1 );
 80014f6:	a803      	add	r0, sp, #12
 80014f8:	f7ff fbd2 	bl	8000ca0 <BSP_SPI2_Send>
    MEM_CS_HIGH();
 80014fc:	61ae      	str	r6, [r5, #24]
    ret = MEM_SPI_Send( &cmd, 1 );
 80014fe:	0004      	movs	r4, r0
    HAL_Delay(20);
 8001500:	2014      	movs	r0, #20
 8001502:	f017 fc4f 	bl	8018da4 <HAL_Delay>
  if(ret == BSP_ERROR_NONE)
 8001506:	2c00      	cmp	r4, #0
 8001508:	d1de      	bne.n	80014c8 <MEM_IO_Init+0xc>
    MemCompObj = &ObjCtx;
 800150a:	4f10      	ldr	r7, [pc, #64]	; (800154c <MEM_IO_Init+0x90>)
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MEM_IO_Init+0x94>)
    MemDrv = (MEM_Drv_t *)&MX25L6433F_MEM_Driver;
 800150e:	4a11      	ldr	r2, [pc, #68]	; (8001554 <MEM_IO_Init+0x98>)
    MemCompObj = &ObjCtx;
 8001510:	601f      	str	r7, [r3, #0]
    MemDrv = (MEM_Drv_t *)&MX25L6433F_MEM_Driver;
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <MEM_IO_Init+0x9c>)
    if(MemDrv->Init(MemCompObj) < 0)
 8001514:	0038      	movs	r0, r7
    MemDrv = (MEM_Drv_t *)&MX25L6433F_MEM_Driver;
 8001516:	6013      	str	r3, [r2, #0]
    ObjCtx.IsInitialized = 0;
 8001518:	2220      	movs	r2, #32
    if(MemDrv->Init(MemCompObj) < 0)
 800151a:	681b      	ldr	r3, [r3, #0]
    ObjCtx.IsInitialized = 0;
 800151c:	54bc      	strb	r4, [r7, r2]
    if(MemDrv->Init(MemCompObj) < 0)
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	4798      	blx	r3
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001522:	3c05      	subs	r4, #5
    if(MemDrv->Init(MemCompObj) < 0)
 8001524:	2800      	cmp	r0, #0
 8001526:	dbcf      	blt.n	80014c8 <MEM_IO_Init+0xc>
    HAL_SPI_RegisterCallback((SPI_HandleTypeDef *)ObjCtx.handle, HAL_SPI_RX_COMPLETE_CB_ID, SPI_RxCpltCallback);
 8001528:	2101      	movs	r1, #1
 800152a:	4a0c      	ldr	r2, [pc, #48]	; (800155c <MEM_IO_Init+0xa0>)
 800152c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800152e:	f019 f8cf 	bl	801a6d0 <HAL_SPI_RegisterCallback>
  uint8_t cmd[2] = { MEM_SET_BURST_LENGTH_CMD
 8001532:	23f0      	movs	r3, #240	; 0xf0
 8001534:	aa02      	add	r2, sp, #8
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	8093      	strh	r3, [r2, #4]
  ret = MEM_SPI_Send( cmd, 2 );
 800153a:	2102      	movs	r1, #2
  MEM_CS_LOW();
 800153c:	62ae      	str	r6, [r5, #40]	; 0x28
  ret = MEM_SPI_Send( cmd, 2 );
 800153e:	a803      	add	r0, sp, #12
 8001540:	f7ff fbae 	bl	8000ca0 <BSP_SPI2_Send>
  MEM_CS_HIGH();
 8001544:	61ae      	str	r6, [r5, #24]
  ret = MEM_SPI_Send( cmd, 2 );
 8001546:	0004      	movs	r4, r0
  return ret;
 8001548:	e7be      	b.n	80014c8 <MEM_IO_Init+0xc>
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	200031b8 	.word	0x200031b8
 8001550:	200031b0 	.word	0x200031b0
 8001554:	200031b4 	.word	0x200031b4
 8001558:	0801f304 	.word	0x0801f304
 800155c:	080015e5 	.word	0x080015e5

08001560 <MEM_IO_SendDataDMA>:
 8001560:	200b      	movs	r0, #11
 8001562:	4240      	negs	r0, r0
 8001564:	4770      	bx	lr
 8001566:	46c0      	nop			; (mov r8, r8)

08001568 <BSP_MEM_Init>:
{
 8001568:	b510      	push	{r4, lr}
  if(MEM_OS_Initialize(0) == MEM_OS_ERROR_NONE)
 800156a:	2000      	movs	r0, #0
 800156c:	f000 f84e 	bl	800160c <MEM_OS_Initialize>
 8001570:	2800      	cmp	r0, #0
 8001572:	d001      	beq.n	8001578 <BSP_MEM_Init+0x10>
  int32_t ret = BSP_ERROR_NONE;
 8001574:	2000      	movs	r0, #0
}
 8001576:	bd10      	pop	{r4, pc}
    MemCompObj = NULL;
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <BSP_MEM_Init+0x4c>)
static int32_t MEM_Probe(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the lcd driver : map to MEM_IO function*/
  IOCtx.Init              = MEM_IO_Init;
 800157a:	490f      	ldr	r1, [pc, #60]	; (80015b8 <BSP_MEM_Init+0x50>)
    MemCompObj = NULL;
 800157c:	6018      	str	r0, [r3, #0]
    MemDrv = NULL;
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <BSP_MEM_Init+0x54>)
 8001580:	6018      	str	r0, [r3, #0]
  IOCtx.Init              = MEM_IO_Init;
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <BSP_MEM_Init+0x58>)

  /* Set Base Address */
  IOCtx.Address           = MEM_BASE_ADDRESS;

  /* Register OSPI handle */
  ObjCtx.handle           = &hMEMSPI;
 8001584:	480f      	ldr	r0, [pc, #60]	; (80015c4 <BSP_MEM_Init+0x5c>)
  IOCtx.Init              = MEM_IO_Init;
 8001586:	600b      	str	r3, [r1, #0]
  IOCtx.DeInit            = MEM_IO_DeInit;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <BSP_MEM_Init+0x60>)
 800158a:	604b      	str	r3, [r1, #4]
  IOCtx.SendData          = MEM_IO_SendData;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <BSP_MEM_Init+0x64>)
 800158e:	60cb      	str	r3, [r1, #12]
  IOCtx.SendDataDMA       = MEM_IO_SendDataDMA;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <BSP_MEM_Init+0x68>)
 8001592:	610b      	str	r3, [r1, #16]
  IOCtx.RecvData          = MEM_IO_RecvData;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <BSP_MEM_Init+0x6c>)
 8001596:	614b      	str	r3, [r1, #20]
  IOCtx.RecvDataDMA       = MEM_IO_RecvDataDMA;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <BSP_MEM_Init+0x70>)
 800159a:	618b      	str	r3, [r1, #24]
  IOCtx.Address           = MEM_BASE_ADDRESS;
 800159c:	2390      	movs	r3, #144	; 0x90
 800159e:	061b      	lsls	r3, r3, #24
 80015a0:	608b      	str	r3, [r1, #8]
  ObjCtx.handle           = &hMEMSPI;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <BSP_MEM_Init+0x74>)
 80015a4:	6243      	str	r3, [r0, #36]	; 0x24

  if(MX25L6433F_RegisterBusIO(&ObjCtx, &IOCtx) != MX25L6433F_OK)
 80015a6:	f016 fff5 	bl	8018594 <MX25L6433F_RegisterBusIO>
 80015aa:	2800      	cmp	r0, #0
 80015ac:	d0e2      	beq.n	8001574 <BSP_MEM_Init+0xc>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80015ae:	2005      	movs	r0, #5
 80015b0:	4240      	negs	r0, r0
  return ret;
 80015b2:	e7e0      	b.n	8001576 <BSP_MEM_Init+0xe>
 80015b4:	200031b0 	.word	0x200031b0
 80015b8:	20003190 	.word	0x20003190
 80015bc:	200031b4 	.word	0x200031b4
 80015c0:	080014bd 	.word	0x080014bd
 80015c4:	200031b8 	.word	0x200031b8
 80015c8:	080014b5 	.word	0x080014b5
 80015cc:	0800142d 	.word	0x0800142d
 80015d0:	08001561 	.word	0x08001561
 80015d4:	08001471 	.word	0x08001471
 80015d8:	08001435 	.word	0x08001435
 80015dc:	20003068 	.word	0x20003068

080015e0 <BSP_MEM_SignalTransferDone>:
}
 80015e0:	4770      	bx	lr
 80015e2:	46c0      	nop			; (mov r8, r8)

080015e4 <SPI_RxCpltCallback>:
  if(hspi == ObjCtx.handle)
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <SPI_RxCpltCallback+0x24>)
{
 80015e6:	b510      	push	{r4, lr}
  if(hspi == ObjCtx.handle)
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	4283      	cmp	r3, r0
 80015ec:	d000      	beq.n	80015f0 <SPI_RxCpltCallback+0xc>
}
 80015ee:	bd10      	pop	{r4, pc}
    MEM_CS_HIGH();
 80015f0:	23a0      	movs	r3, #160	; 0xa0
 80015f2:	2280      	movs	r2, #128	; 0x80
 80015f4:	05db      	lsls	r3, r3, #23
 80015f6:	0052      	lsls	r2, r2, #1
 80015f8:	619a      	str	r2, [r3, #24]
    MEM_OS_UnlockFromISR(0);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 f80e 	bl	800161c <MEM_OS_UnlockFromISR>
    BSP_MEM_SignalTransferDone(0);
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff ffed 	bl	80015e0 <BSP_MEM_SignalTransferDone>
}
 8001606:	e7f2      	b.n	80015ee <SPI_RxCpltCallback+0xa>
 8001608:	200031b8 	.word	0x200031b8

0800160c <MEM_OS_Initialize>:
uint8_t MEM_OS_Initialize(uint32_t Instance)
{
  uint8_t i;
  for(i = 0; i < MEM_INSTANCES_NBR; i++)
  {
    mem_sem[i] = 0;
 800160c:	2200      	movs	r2, #0
 800160e:	4b02      	ldr	r3, [pc, #8]	; (8001618 <MEM_OS_Initialize+0xc>)
  }
  return MEM_OS_ERROR_NONE;
}
 8001610:	2000      	movs	r0, #0
    mem_sem[i] = 0;
 8001612:	701a      	strb	r2, [r3, #0]
}
 8001614:	4770      	bx	lr
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	200031e0 	.word	0x200031e0

0800161c <MEM_OS_UnlockFromISR>:
 800161c:	2200      	movs	r2, #0
 800161e:	4b02      	ldr	r3, [pc, #8]	; (8001628 <MEM_OS_UnlockFromISR+0xc>)
 8001620:	541a      	strb	r2, [r3, r0]
 8001622:	2000      	movs	r0, #0
 8001624:	4770      	bx	lr
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	200031e0 	.word	0x200031e0

0800162c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800162e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001630:	f017 fb6a 	bl	8018d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001634:	480c      	ldr	r0, [pc, #48]	; (8001668 <LoopForever+0x6>)
  ldr r1, =_edata
 8001636:	490d      	ldr	r1, [pc, #52]	; (800166c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <LoopForever+0xe>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800164c:	4c0a      	ldr	r4, [pc, #40]	; (8001678 <LoopForever+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800165a:	f019 ffaf 	bl	801b5bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800165e:	f7fe ffb9 	bl	80005d4 <main>

08001662 <LoopForever>:

LoopForever:
  b LoopForever
 8001662:	e7fe      	b.n	8001662 <LoopForever>
  ldr   r0, =_estack
 8001664:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001670:	0801f3a8 	.word	0x0801f3a8
  ldr r2, =_sbss
 8001674:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001678:	20007d34 	.word	0x20007d34

0800167c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC1_COMP_IRQHandler>
	...

08001680 <opa_scale_anim>:

    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOAD_START, NULL);
}

static void opa_scale_anim(void * obj, int32_t v)
{
 8001680:	b510      	push	{r4, lr}
    lv_obj_set_style_opa(obj, v, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	b2c9      	uxtb	r1, r1
 8001686:	f009 f9e3 	bl	800aa50 <lv_obj_set_style_opa>
}
 800168a:	bd10      	pop	{r4, pc}

0800168c <set_y_anim>:
{
    lv_obj_set_x(obj, v);
}

static void set_y_anim(void * obj, int32_t v)
{
 800168c:	b510      	push	{r4, lr}
    lv_obj_set_y(obj, v);
 800168e:	b209      	sxth	r1, r1
 8001690:	f004 faa2 	bl	8005bd8 <lv_obj_set_y>
}
 8001694:	bd10      	pop	{r4, pc}
 8001696:	46c0      	nop			; (mov r8, r8)

08001698 <set_x_anim>:
{
 8001698:	b510      	push	{r4, lr}
    lv_obj_set_x(obj, v);
 800169a:	b209      	sxth	r1, r1
 800169c:	f004 fa84 	bl	8005ba8 <lv_obj_set_x>
}
 80016a0:	bd10      	pop	{r4, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)

080016a4 <scr_anim_ready>:

static void scr_anim_ready(lv_anim_t * a)
{
 80016a4:	b570      	push	{r4, r5, r6, lr}
 80016a6:	0005      	movs	r5, r0
    lv_disp_t * d = lv_obj_get_disp(a->var);
 80016a8:	6800      	ldr	r0, [r0, #0]
 80016aa:	f009 fc25 	bl	800aef8 <lv_obj_get_disp>
 80016ae:	0004      	movs	r4, r0

    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOADED, NULL);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2127      	movs	r1, #39	; 0x27
 80016b4:	6900      	ldr	r0, [r0, #16]
 80016b6:	f000 fb51 	bl	8001d5c <lv_event_send>
    lv_event_send(d->prev_scr, LV_EVENT_SCREEN_UNLOADED, NULL);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2128      	movs	r1, #40	; 0x28
 80016be:	6960      	ldr	r0, [r4, #20]
 80016c0:	f000 fb4c 	bl	8001d5c <lv_event_send>

    if(d->prev_scr && d->del_prev) lv_obj_del(d->prev_scr);
 80016c4:	6960      	ldr	r0, [r4, #20]
 80016c6:	2800      	cmp	r0, #0
 80016c8:	d003      	beq.n	80016d2 <scr_anim_ready+0x2e>
 80016ca:	2328      	movs	r3, #40	; 0x28
 80016cc:	5ce3      	ldrb	r3, [r4, r3]
 80016ce:	079b      	lsls	r3, r3, #30
 80016d0:	d40f      	bmi.n	80016f2 <scr_anim_ready+0x4e>
    d->prev_scr = NULL;
 80016d2:	2200      	movs	r2, #0
    d->draw_prev_over_act = false;
 80016d4:	2128      	movs	r1, #40	; 0x28
 80016d6:	2001      	movs	r0, #1
    d->prev_scr = NULL;
 80016d8:	6162      	str	r2, [r4, #20]
    d->draw_prev_over_act = false;
 80016da:	5c63      	ldrb	r3, [r4, r1]
 80016dc:	4383      	bics	r3, r0
 80016de:	5463      	strb	r3, [r4, r1]
    d->scr_to_load = NULL;
    lv_obj_remove_local_style_prop(a->var, LV_STYLE_OPA, 0);
 80016e0:	6828      	ldr	r0, [r5, #0]
    d->scr_to_load = NULL;
 80016e2:	61a2      	str	r2, [r4, #24]
    lv_obj_remove_local_style_prop(a->var, LV_STYLE_OPA, 0);
 80016e4:	3138      	adds	r1, #56	; 0x38
 80016e6:	f008 fe7f 	bl	800a3e8 <lv_obj_remove_local_style_prop>
    lv_obj_invalidate(d->act_scr);
 80016ea:	6920      	ldr	r0, [r4, #16]
 80016ec:	f004 ff28 	bl	8006540 <lv_obj_invalidate>
}
 80016f0:	bd70      	pop	{r4, r5, r6, pc}
    if(d->prev_scr && d->del_prev) lv_obj_del(d->prev_scr);
 80016f2:	f009 fa8b 	bl	800ac0c <lv_obj_del>
 80016f6:	e7ec      	b.n	80016d2 <scr_anim_ready+0x2e>

080016f8 <scr_load_internal>:
{
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	0004      	movs	r4, r0
    lv_disp_t * d = lv_obj_get_disp(scr);
 80016fc:	f009 fbfc 	bl	800aef8 <lv_obj_get_disp>
 8001700:	1e05      	subs	r5, r0, #0
    if(!d) return;  /*Shouldn't happen, just to be sure*/
 8001702:	d022      	beq.n	800174a <scr_load_internal+0x52>
    lv_obj_t * old_scr = d->act_scr;
 8001704:	6906      	ldr	r6, [r0, #16]
    if(d->act_scr) lv_event_send(old_scr, LV_EVENT_SCREEN_UNLOAD_START, NULL);
 8001706:	2e00      	cmp	r6, #0
 8001708:	d00c      	beq.n	8001724 <scr_load_internal+0x2c>
 800170a:	2200      	movs	r2, #0
 800170c:	2125      	movs	r1, #37	; 0x25
 800170e:	0030      	movs	r0, r6
 8001710:	f000 fb24 	bl	8001d5c <lv_event_send>
    if(d->act_scr) lv_event_send(scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 8001714:	692b      	ldr	r3, [r5, #16]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <scr_load_internal+0x2c>
 800171a:	2200      	movs	r2, #0
 800171c:	2126      	movs	r1, #38	; 0x26
 800171e:	0020      	movs	r0, r4
 8001720:	f000 fb1c 	bl	8001d5c <lv_event_send>
    d->act_scr = scr;
 8001724:	612c      	str	r4, [r5, #16]
    if(d->act_scr) lv_event_send(scr, LV_EVENT_SCREEN_LOADED, NULL);
 8001726:	2c00      	cmp	r4, #0
 8001728:	d00c      	beq.n	8001744 <scr_load_internal+0x4c>
 800172a:	2200      	movs	r2, #0
 800172c:	2127      	movs	r1, #39	; 0x27
 800172e:	0020      	movs	r0, r4
 8001730:	f000 fb14 	bl	8001d5c <lv_event_send>
    if(d->act_scr) lv_event_send(old_scr, LV_EVENT_SCREEN_UNLOADED, NULL);
 8001734:	692b      	ldr	r3, [r5, #16]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d004      	beq.n	8001744 <scr_load_internal+0x4c>
 800173a:	2200      	movs	r2, #0
 800173c:	2128      	movs	r1, #40	; 0x28
 800173e:	0030      	movs	r0, r6
 8001740:	f000 fb0c 	bl	8001d5c <lv_event_send>
    lv_obj_invalidate(scr);
 8001744:	0020      	movs	r0, r4
 8001746:	f004 fefb 	bl	8006540 <lv_obj_invalidate>
}
 800174a:	bd70      	pop	{r4, r5, r6, pc}

0800174c <scr_load_anim_start>:
{
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	0005      	movs	r5, r0
    lv_disp_t * d = lv_obj_get_disp(a->var);
 8001750:	6800      	ldr	r0, [r0, #0]
 8001752:	f009 fbd1 	bl	800aef8 <lv_obj_get_disp>
 8001756:	0004      	movs	r4, r0
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
 8001758:	f00f fa08 	bl	8010b6c <lv_disp_get_default>
    if(!disp) disp = lv_disp_get_default();
 800175c:	2800      	cmp	r0, #0
 800175e:	d008      	beq.n	8001772 <scr_load_anim_start+0x26>
    return disp->act_scr;
 8001760:	6900      	ldr	r0, [r0, #16]
    d->prev_scr = lv_scr_act();
 8001762:	6160      	str	r0, [r4, #20]
    d->act_scr = a->var;
 8001764:	6828      	ldr	r0, [r5, #0]
    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 8001766:	2200      	movs	r2, #0
 8001768:	2126      	movs	r1, #38	; 0x26
    d->act_scr = a->var;
 800176a:	6120      	str	r0, [r4, #16]
    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 800176c:	f000 faf6 	bl	8001d5c <lv_event_send>
}
 8001770:	bd70      	pop	{r4, r5, r6, pc}
    if(!disp) disp = lv_disp_get_default();
 8001772:	f00f f9fb 	bl	8010b6c <lv_disp_get_default>
    if(!disp) {
 8001776:	2800      	cmp	r0, #0
 8001778:	d1f2      	bne.n	8001760 <scr_load_anim_start+0x14>
 800177a:	e7f2      	b.n	8001762 <scr_load_anim_start+0x16>

0800177c <lv_disp_get_scr_act>:
{
 800177c:	0003      	movs	r3, r0
 800177e:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8001780:	2800      	cmp	r0, #0
 8001782:	d001      	beq.n	8001788 <lv_disp_get_scr_act+0xc>
    return disp->act_scr;
 8001784:	6918      	ldr	r0, [r3, #16]
}
 8001786:	bd10      	pop	{r4, pc}
    if(!disp) disp = lv_disp_get_default();
 8001788:	f00f f9f0 	bl	8010b6c <lv_disp_get_default>
 800178c:	0003      	movs	r3, r0
        return NULL;
 800178e:	2000      	movs	r0, #0
    if(!disp) {
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f7      	bne.n	8001784 <lv_disp_get_scr_act+0x8>
 8001794:	e7f7      	b.n	8001786 <lv_disp_get_scr_act+0xa>
 8001796:	46c0      	nop			; (mov r8, r8)

08001798 <lv_disp_get_scr_prev>:
{
 8001798:	0003      	movs	r3, r0
 800179a:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 800179c:	2800      	cmp	r0, #0
 800179e:	d001      	beq.n	80017a4 <lv_disp_get_scr_prev+0xc>
    return disp->prev_scr;
 80017a0:	6958      	ldr	r0, [r3, #20]
}
 80017a2:	bd10      	pop	{r4, pc}
    if(!disp) disp = lv_disp_get_default();
 80017a4:	f00f f9e2 	bl	8010b6c <lv_disp_get_default>
 80017a8:	0003      	movs	r3, r0
        return NULL;
 80017aa:	2000      	movs	r0, #0
    if(!disp) {
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f7      	bne.n	80017a0 <lv_disp_get_scr_prev+0x8>
 80017b0:	e7f7      	b.n	80017a2 <lv_disp_get_scr_prev+0xa>
 80017b2:	46c0      	nop			; (mov r8, r8)

080017b4 <lv_disp_get_layer_top>:
{
 80017b4:	0003      	movs	r3, r0
 80017b6:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 80017b8:	2800      	cmp	r0, #0
 80017ba:	d001      	beq.n	80017c0 <lv_disp_get_layer_top+0xc>
    return disp->top_layer;
 80017bc:	69d8      	ldr	r0, [r3, #28]
}
 80017be:	bd10      	pop	{r4, pc}
    if(!disp) disp = lv_disp_get_default();
 80017c0:	f00f f9d4 	bl	8010b6c <lv_disp_get_default>
 80017c4:	0003      	movs	r3, r0
        return NULL;
 80017c6:	2000      	movs	r0, #0
    if(!disp) {
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f7      	bne.n	80017bc <lv_disp_get_layer_top+0x8>
 80017cc:	e7f7      	b.n	80017be <lv_disp_get_layer_top+0xa>
 80017ce:	46c0      	nop			; (mov r8, r8)

080017d0 <lv_disp_get_layer_sys>:
{
 80017d0:	0003      	movs	r3, r0
 80017d2:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 80017d4:	2800      	cmp	r0, #0
 80017d6:	d001      	beq.n	80017dc <lv_disp_get_layer_sys+0xc>
    return disp->sys_layer;
 80017d8:	6a18      	ldr	r0, [r3, #32]
}
 80017da:	bd10      	pop	{r4, pc}
    if(!disp) disp = lv_disp_get_default();
 80017dc:	f00f f9c6 	bl	8010b6c <lv_disp_get_default>
 80017e0:	0003      	movs	r3, r0
        return NULL;
 80017e2:	2000      	movs	r0, #0
    if(!disp) {
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f7      	bne.n	80017d8 <lv_disp_get_layer_sys+0x8>
 80017e8:	e7f7      	b.n	80017da <lv_disp_get_layer_sys+0xa>
 80017ea:	46c0      	nop			; (mov r8, r8)

080017ec <lv_disp_set_theme>:
{
 80017ec:	b570      	push	{r4, r5, r6, lr}
 80017ee:	0004      	movs	r4, r0
 80017f0:	000d      	movs	r5, r1
    if(!disp) disp = lv_disp_get_default();
 80017f2:	2800      	cmp	r0, #0
 80017f4:	d004      	beq.n	8001800 <lv_disp_set_theme+0x14>
    if(disp->screen_cnt == 3 &&
 80017f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    disp->theme = th;
 80017f8:	60a5      	str	r5, [r4, #8]
    if(disp->screen_cnt == 3 &&
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d005      	beq.n	800180a <lv_disp_set_theme+0x1e>
}
 80017fe:	bd70      	pop	{r4, r5, r6, pc}
    if(!disp) disp = lv_disp_get_default();
 8001800:	f00f f9b4 	bl	8010b6c <lv_disp_get_default>
 8001804:	1e04      	subs	r4, r0, #0
    if(!disp) {
 8001806:	d0fa      	beq.n	80017fe <lv_disp_set_theme+0x12>
 8001808:	e7f5      	b.n	80017f6 <lv_disp_set_theme+0xa>
       lv_obj_get_child_cnt(disp->screens[0]) == 0 &&
 800180a:	68e3      	ldr	r3, [r4, #12]
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	f009 fbb1 	bl	800af74 <lv_obj_get_child_cnt>
    if(disp->screen_cnt == 3 &&
 8001812:	2800      	cmp	r0, #0
 8001814:	d1f3      	bne.n	80017fe <lv_disp_set_theme+0x12>
       lv_obj_get_child_cnt(disp->screens[1]) == 0 &&
 8001816:	68e3      	ldr	r3, [r4, #12]
 8001818:	6858      	ldr	r0, [r3, #4]
 800181a:	f009 fbab 	bl	800af74 <lv_obj_get_child_cnt>
       lv_obj_get_child_cnt(disp->screens[0]) == 0 &&
 800181e:	2800      	cmp	r0, #0
 8001820:	d1ed      	bne.n	80017fe <lv_disp_set_theme+0x12>
       lv_obj_get_child_cnt(disp->screens[2]) == 0) {
 8001822:	68e3      	ldr	r3, [r4, #12]
 8001824:	6898      	ldr	r0, [r3, #8]
 8001826:	f009 fba5 	bl	800af74 <lv_obj_get_child_cnt>
       lv_obj_get_child_cnt(disp->screens[1]) == 0 &&
 800182a:	2800      	cmp	r0, #0
 800182c:	d1e7      	bne.n	80017fe <lv_disp_set_theme+0x12>
        lv_theme_apply(disp->screens[0]);
 800182e:	68e3      	ldr	r3, [r4, #12]
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	f00a fda9 	bl	800c388 <lv_theme_apply>
 8001836:	e7e2      	b.n	80017fe <lv_disp_set_theme+0x12>

08001838 <lv_disp_get_theme>:
{
 8001838:	b510      	push	{r4, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 800183a:	2800      	cmp	r0, #0
 800183c:	d001      	beq.n	8001842 <lv_disp_get_theme+0xa>
    return disp->theme;
 800183e:	6880      	ldr	r0, [r0, #8]
}
 8001840:	bd10      	pop	{r4, pc}
    if(disp == NULL) disp = lv_disp_get_default();
 8001842:	f00f f993 	bl	8010b6c <lv_disp_get_default>
 8001846:	e7fa      	b.n	800183e <lv_disp_get_theme+0x6>

08001848 <lv_scr_load_anim>:
{
 8001848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184a:	46de      	mov	lr, fp
 800184c:	4657      	mov	r7, sl
 800184e:	464e      	mov	r6, r9
 8001850:	4645      	mov	r5, r8
 8001852:	b5e0      	push	{r5, r6, r7, lr}
 8001854:	b0a1      	sub	sp, #132	; 0x84
 8001856:	4699      	mov	r9, r3
 8001858:	ab2a      	add	r3, sp, #168	; 0xa8
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4688      	mov	r8, r1
 800185e:	4692      	mov	sl, r2
 8001860:	469b      	mov	fp, r3
 8001862:	0006      	movs	r6, r0
    lv_disp_t * d = lv_obj_get_disp(new_scr);
 8001864:	f009 fb48 	bl	800aef8 <lv_obj_get_disp>
 8001868:	0004      	movs	r4, r0
 800186a:	f00f f97f 	bl	8010b6c <lv_disp_get_default>
 800186e:	1e07      	subs	r7, r0, #0
    if(!disp) disp = lv_disp_get_default();
 8001870:	d100      	bne.n	8001874 <lv_scr_load_anim+0x2c>
 8001872:	e087      	b.n	8001984 <lv_scr_load_anim+0x13c>
    if(d->scr_to_load && act_scr != d->scr_to_load) {
 8001874:	69a0      	ldr	r0, [r4, #24]
    return disp->act_scr;
 8001876:	693f      	ldr	r7, [r7, #16]
    if(d->scr_to_load && act_scr != d->scr_to_load) {
 8001878:	2800      	cmp	r0, #0
 800187a:	d002      	beq.n	8001882 <lv_scr_load_anim+0x3a>
 800187c:	42b8      	cmp	r0, r7
 800187e:	d000      	beq.n	8001882 <lv_scr_load_anim+0x3a>
 8001880:	e089      	b.n	8001996 <lv_scr_load_anim+0x14e>
    if(d->prev_scr && d->del_prev) {
 8001882:	6960      	ldr	r0, [r4, #20]
    d->scr_to_load = new_scr;
 8001884:	61a6      	str	r6, [r4, #24]
    if(d->prev_scr && d->del_prev) {
 8001886:	2800      	cmp	r0, #0
 8001888:	d004      	beq.n	8001894 <lv_scr_load_anim+0x4c>
 800188a:	2328      	movs	r3, #40	; 0x28
 800188c:	5ce3      	ldrb	r3, [r4, r3]
 800188e:	079b      	lsls	r3, r3, #30
 8001890:	d500      	bpl.n	8001894 <lv_scr_load_anim+0x4c>
 8001892:	e096      	b.n	80019c2 <lv_scr_load_anim+0x17a>
static bool is_out_anim(lv_scr_load_anim_t anim_type)
{
    return anim_type == LV_SCR_LOAD_ANIM_FADE_OUT  ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_LEFT  ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_RIGHT ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_TOP   ||
 8001894:	4642      	mov	r2, r8
 8001896:	2104      	movs	r1, #4
 8001898:	2500      	movs	r5, #0
 800189a:	3a0a      	subs	r2, #10
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	4291      	cmp	r1, r2
 80018a0:	416d      	adcs	r5, r5
    d->draw_prev_over_act = is_out_anim(anim_type);
 80018a2:	465a      	mov	r2, fp
 80018a4:	2328      	movs	r3, #40	; 0x28
 80018a6:	0052      	lsls	r2, r2, #1
 80018a8:	4315      	orrs	r5, r2
 80018aa:	5ce2      	ldrb	r2, [r4, r3]
 80018ac:	3901      	subs	r1, #1
 80018ae:	438a      	bics	r2, r1
 80018b0:	400d      	ands	r5, r1
 80018b2:	4315      	orrs	r5, r2
    lv_anim_del(new_scr, NULL);
 80018b4:	2100      	movs	r1, #0
    d->draw_prev_over_act = is_out_anim(anim_type);
 80018b6:	54e5      	strb	r5, [r4, r3]
    lv_anim_del(new_scr, NULL);
 80018b8:	0030      	movs	r0, r6
 80018ba:	f00f fb85 	bl	8010fc8 <lv_anim_del>
 80018be:	f00f f955 	bl	8010b6c <lv_disp_get_default>
    if(!disp) disp = lv_disp_get_default();
 80018c2:	2800      	cmp	r0, #0
 80018c4:	d100      	bne.n	80018c8 <lv_scr_load_anim+0x80>
 80018c6:	e085      	b.n	80019d4 <lv_scr_load_anim+0x18c>
    return disp->act_scr;
 80018c8:	6900      	ldr	r0, [r0, #16]
    lv_anim_del(lv_scr_act(), NULL);
 80018ca:	2100      	movs	r1, #0
 80018cc:	f00f fb7c 	bl	8010fc8 <lv_anim_del>
    lv_obj_set_pos(new_scr, 0, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2100      	movs	r1, #0
 80018d4:	0030      	movs	r0, r6
 80018d6:	f004 f933 	bl	8005b40 <lv_obj_set_pos>
 80018da:	f00f f947 	bl	8010b6c <lv_disp_get_default>
    if(!disp) disp = lv_disp_get_default();
 80018de:	2800      	cmp	r0, #0
 80018e0:	d100      	bne.n	80018e4 <lv_scr_load_anim+0x9c>
 80018e2:	e07d      	b.n	80019e0 <lv_scr_load_anim+0x198>
    return disp->act_scr;
 80018e4:	6900      	ldr	r0, [r0, #16]
    lv_obj_set_pos(lv_scr_act(), 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	f004 f929 	bl	8005b40 <lv_obj_set_pos>
    lv_obj_remove_local_style_prop(new_scr, LV_STYLE_OPA, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2160      	movs	r1, #96	; 0x60
 80018f2:	0030      	movs	r0, r6
 80018f4:	f008 fd78 	bl	800a3e8 <lv_obj_remove_local_style_prop>
 80018f8:	f00f f938 	bl	8010b6c <lv_disp_get_default>
    if(!disp) disp = lv_disp_get_default();
 80018fc:	2800      	cmp	r0, #0
 80018fe:	d100      	bne.n	8001902 <lv_scr_load_anim+0xba>
 8001900:	e074      	b.n	80019ec <lv_scr_load_anim+0x1a4>
    return disp->act_scr;
 8001902:	6900      	ldr	r0, [r0, #16]
    lv_obj_remove_local_style_prop(lv_scr_act(), LV_STYLE_OPA, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2160      	movs	r1, #96	; 0x60
 8001908:	f008 fd6e 	bl	800a3e8 <lv_obj_remove_local_style_prop>
    if(time == 0 && delay == 0) {
 800190c:	4653      	mov	r3, sl
 800190e:	464a      	mov	r2, r9
 8001910:	4313      	orrs	r3, r2
 8001912:	d05b      	beq.n	80019cc <lv_scr_load_anim+0x184>
    lv_anim_init(&a_new);
 8001914:	4668      	mov	r0, sp
 8001916:	f00f fb3f 	bl	8010f98 <lv_anim_init>
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start_cb  a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_start_cb_t start_cb)
{
    a->start_cb = start_cb;
 800191a:	4b89      	ldr	r3, [pc, #548]	; (8001b40 <lv_scr_load_anim+0x2f8>)
    lv_anim_init(&a_old);
 800191c:	a810      	add	r0, sp, #64	; 0x40
 800191e:	9302      	str	r3, [sp, #8]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 8001920:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <lv_scr_load_anim+0x2fc>)
    a->var = var;
 8001922:	9600      	str	r6, [sp, #0]
    a->ready_cb = ready_cb;
 8001924:	9303      	str	r3, [sp, #12]
    a->time = duration;
 8001926:	4653      	mov	r3, sl
 8001928:	930a      	str	r3, [sp, #40]	; 0x28
    a->act_time = -(int32_t)(delay);
 800192a:	464b      	mov	r3, r9
 800192c:	425d      	negs	r5, r3
 800192e:	950b      	str	r5, [sp, #44]	; 0x2c
 8001930:	f00f fb32 	bl	8010f98 <lv_anim_init>
    a->var = var;
 8001934:	6923      	ldr	r3, [r4, #16]
    a->act_time = -(int32_t)(delay);
 8001936:	951b      	str	r5, [sp, #108]	; 0x6c
    a->var = var;
 8001938:	9310      	str	r3, [sp, #64]	; 0x40
    a->time = duration;
 800193a:	4653      	mov	r3, sl
 800193c:	931a      	str	r3, [sp, #104]	; 0x68
    switch(anim_type) {
 800193e:	4643      	mov	r3, r8
 8001940:	2b0e      	cmp	r3, #14
 8001942:	d80d      	bhi.n	8001960 <lv_scr_load_anim+0x118>
 8001944:	0099      	lsls	r1, r3, #2
 8001946:	4b80      	ldr	r3, [pc, #512]	; (8001b48 <lv_scr_load_anim+0x300>)
 8001948:	585b      	ldr	r3, [r3, r1]
 800194a:	469f      	mov	pc, r3
    a->exec_cb = exec_cb;
 800194c:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <lv_scr_load_anim+0x304>)
            lv_anim_set_values(&a_old, 0, -lv_disp_get_hor_res(d));
 800194e:	0020      	movs	r0, r4
 8001950:	9311      	str	r3, [sp, #68]	; 0x44
 8001952:	f00f f911 	bl	8010b78 <lv_disp_get_hor_res>
    a->start_value = start;
 8001956:	2300      	movs	r3, #0
            lv_anim_set_values(&a_old, 0, -lv_disp_get_ver_res(d));
 8001958:	4240      	negs	r0, r0
 800195a:	9317      	str	r3, [sp, #92]	; 0x5c
    a->current_value = start;
 800195c:	9318      	str	r3, [sp, #96]	; 0x60
    a->end_value = end;
 800195e:	9019      	str	r0, [sp, #100]	; 0x64
    lv_event_send(act_scr, LV_EVENT_SCREEN_UNLOAD_START, NULL);
 8001960:	2200      	movs	r2, #0
 8001962:	2125      	movs	r1, #37	; 0x25
 8001964:	0038      	movs	r0, r7
 8001966:	f000 f9f9 	bl	8001d5c <lv_event_send>
    lv_anim_start(&a_new);
 800196a:	4668      	mov	r0, sp
 800196c:	f00f fc16 	bl	801119c <lv_anim_start>
    lv_anim_start(&a_old);
 8001970:	a810      	add	r0, sp, #64	; 0x40
 8001972:	f00f fc13 	bl	801119c <lv_anim_start>
}
 8001976:	b021      	add	sp, #132	; 0x84
 8001978:	bcf0      	pop	{r4, r5, r6, r7}
 800197a:	46bb      	mov	fp, r7
 800197c:	46b2      	mov	sl, r6
 800197e:	46a9      	mov	r9, r5
 8001980:	46a0      	mov	r8, r4
 8001982:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!disp) disp = lv_disp_get_default();
 8001984:	f00f f8f2 	bl	8010b6c <lv_disp_get_default>
 8001988:	1e07      	subs	r7, r0, #0
    if(!disp) {
 800198a:	d000      	beq.n	800198e <lv_scr_load_anim+0x146>
 800198c:	e772      	b.n	8001874 <lv_scr_load_anim+0x2c>
    if(d->scr_to_load && act_scr != d->scr_to_load) {
 800198e:	69a0      	ldr	r0, [r4, #24]
 8001990:	2800      	cmp	r0, #0
 8001992:	d100      	bne.n	8001996 <lv_scr_load_anim+0x14e>
 8001994:	e775      	b.n	8001882 <lv_scr_load_anim+0x3a>
        scr_load_internal(d->scr_to_load);
 8001996:	f7ff feaf 	bl	80016f8 <scr_load_internal>
        lv_anim_del(d->scr_to_load, NULL);
 800199a:	2100      	movs	r1, #0
 800199c:	69a0      	ldr	r0, [r4, #24]
 800199e:	f00f fb13 	bl	8010fc8 <lv_anim_del>
        lv_obj_set_pos(d->scr_to_load, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	69a0      	ldr	r0, [r4, #24]
 80019a8:	f004 f8ca 	bl	8005b40 <lv_obj_set_pos>
        lv_obj_remove_local_style_prop(d->scr_to_load, LV_STYLE_OPA, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2160      	movs	r1, #96	; 0x60
 80019b0:	69a0      	ldr	r0, [r4, #24]
 80019b2:	f008 fd19 	bl	800a3e8 <lv_obj_remove_local_style_prop>
        if(d->del_prev) {
 80019b6:	2328      	movs	r3, #40	; 0x28
 80019b8:	5ce3      	ldrb	r3, [r4, r3]
 80019ba:	079b      	lsls	r3, r3, #30
 80019bc:	d41c      	bmi.n	80019f8 <lv_scr_load_anim+0x1b0>
        act_scr = d->scr_to_load;
 80019be:	69a7      	ldr	r7, [r4, #24]
 80019c0:	e75f      	b.n	8001882 <lv_scr_load_anim+0x3a>
        lv_obj_del(d->prev_scr);
 80019c2:	f009 f923 	bl	800ac0c <lv_obj_del>
        d->prev_scr = NULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	6163      	str	r3, [r4, #20]
 80019ca:	e763      	b.n	8001894 <lv_scr_load_anim+0x4c>
        scr_load_internal(new_scr);
 80019cc:	0030      	movs	r0, r6
 80019ce:	f7ff fe93 	bl	80016f8 <scr_load_internal>
        return;
 80019d2:	e7d0      	b.n	8001976 <lv_scr_load_anim+0x12e>
    if(!disp) disp = lv_disp_get_default();
 80019d4:	f00f f8ca 	bl	8010b6c <lv_disp_get_default>
    if(!disp) {
 80019d8:	2800      	cmp	r0, #0
 80019da:	d000      	beq.n	80019de <lv_scr_load_anim+0x196>
 80019dc:	e774      	b.n	80018c8 <lv_scr_load_anim+0x80>
 80019de:	e774      	b.n	80018ca <lv_scr_load_anim+0x82>
    if(!disp) disp = lv_disp_get_default();
 80019e0:	f00f f8c4 	bl	8010b6c <lv_disp_get_default>
    if(!disp) {
 80019e4:	2800      	cmp	r0, #0
 80019e6:	d000      	beq.n	80019ea <lv_scr_load_anim+0x1a2>
 80019e8:	e77c      	b.n	80018e4 <lv_scr_load_anim+0x9c>
 80019ea:	e77c      	b.n	80018e6 <lv_scr_load_anim+0x9e>
    if(!disp) disp = lv_disp_get_default();
 80019ec:	f00f f8be 	bl	8010b6c <lv_disp_get_default>
    if(!disp) {
 80019f0:	2800      	cmp	r0, #0
 80019f2:	d000      	beq.n	80019f6 <lv_scr_load_anim+0x1ae>
 80019f4:	e785      	b.n	8001902 <lv_scr_load_anim+0xba>
 80019f6:	e785      	b.n	8001904 <lv_scr_load_anim+0xbc>
            lv_obj_del(act_scr);
 80019f8:	0038      	movs	r0, r7
 80019fa:	f009 f907 	bl	800ac0c <lv_obj_del>
        act_scr = d->scr_to_load;
 80019fe:	69a7      	ldr	r7, [r4, #24]
 8001a00:	e73f      	b.n	8001882 <lv_scr_load_anim+0x3a>
    a->exec_cb = exec_cb;
 8001a02:	4b52      	ldr	r3, [pc, #328]	; (8001b4c <lv_scr_load_anim+0x304>)
            lv_anim_set_values(&a_new, -lv_disp_get_hor_res(d), 0);
 8001a04:	0020      	movs	r0, r4
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	f00f f8b6 	bl	8010b78 <lv_disp_get_hor_res>
    a->end_value = end;
 8001a0c:	2300      	movs	r3, #0
            lv_anim_set_values(&a_new, -lv_disp_get_ver_res(d), 0);
 8001a0e:	4240      	negs	r0, r0
    a->start_value = start;
 8001a10:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 8001a12:	9008      	str	r0, [sp, #32]
    a->end_value = end;
 8001a14:	9309      	str	r3, [sp, #36]	; 0x24
}
 8001a16:	e7a3      	b.n	8001960 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 8001a18:	4b4d      	ldr	r3, [pc, #308]	; (8001b50 <lv_scr_load_anim+0x308>)
            lv_anim_set_values(&a_old, 0, lv_disp_get_ver_res(d));
 8001a1a:	0020      	movs	r0, r4
 8001a1c:	9311      	str	r3, [sp, #68]	; 0x44
 8001a1e:	f00f f8bf 	bl	8010ba0 <lv_disp_get_ver_res>
    a->start_value = start;
 8001a22:	2300      	movs	r3, #0
 8001a24:	9019      	str	r0, [sp, #100]	; 0x64
 8001a26:	9317      	str	r3, [sp, #92]	; 0x5c
    a->current_value = start;
 8001a28:	9318      	str	r3, [sp, #96]	; 0x60
}
 8001a2a:	e799      	b.n	8001960 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 8001a2c:	4b49      	ldr	r3, [pc, #292]	; (8001b54 <lv_scr_load_anim+0x30c>)
 8001a2e:	9301      	str	r3, [sp, #4]
    a->start_value = start;
 8001a30:	2300      	movs	r3, #0
 8001a32:	9307      	str	r3, [sp, #28]
    a->current_value = start;
 8001a34:	9308      	str	r3, [sp, #32]
    a->end_value = end;
 8001a36:	33ff      	adds	r3, #255	; 0xff
 8001a38:	9309      	str	r3, [sp, #36]	; 0x24
}
 8001a3a:	e791      	b.n	8001960 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 8001a3c:	4e44      	ldr	r6, [pc, #272]	; (8001b50 <lv_scr_load_anim+0x308>)
            lv_anim_set_values(&a_new, -lv_disp_get_ver_res(d), 0);
 8001a3e:	0020      	movs	r0, r4
 8001a40:	9601      	str	r6, [sp, #4]
 8001a42:	f00f f8ad 	bl	8010ba0 <lv_disp_get_ver_res>
    a->end_value = end;
 8001a46:	2500      	movs	r5, #0
 8001a48:	4240      	negs	r0, r0
    a->start_value = start;
 8001a4a:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 8001a4c:	9008      	str	r0, [sp, #32]
            lv_anim_set_values(&a_old, 0, lv_disp_get_ver_res(d));
 8001a4e:	0020      	movs	r0, r4
    a->end_value = end;
 8001a50:	9509      	str	r5, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8001a52:	9611      	str	r6, [sp, #68]	; 0x44
 8001a54:	f00f f8a4 	bl	8010ba0 <lv_disp_get_ver_res>
    a->start_value = start;
 8001a58:	9517      	str	r5, [sp, #92]	; 0x5c
    a->current_value = start;
 8001a5a:	9518      	str	r5, [sp, #96]	; 0x60
 8001a5c:	9019      	str	r0, [sp, #100]	; 0x64
}
 8001a5e:	e77f      	b.n	8001960 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 8001a60:	4e3b      	ldr	r6, [pc, #236]	; (8001b50 <lv_scr_load_anim+0x308>)
            lv_anim_set_values(&a_new, lv_disp_get_ver_res(d), 0);
 8001a62:	0020      	movs	r0, r4
 8001a64:	9601      	str	r6, [sp, #4]
 8001a66:	f00f f89b 	bl	8010ba0 <lv_disp_get_ver_res>
    a->end_value = end;
 8001a6a:	2500      	movs	r5, #0
    a->start_value = start;
 8001a6c:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 8001a6e:	9008      	str	r0, [sp, #32]
            lv_anim_set_values(&a_old, 0, -lv_disp_get_ver_res(d));
 8001a70:	0020      	movs	r0, r4
    a->end_value = end;
 8001a72:	9509      	str	r5, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8001a74:	9611      	str	r6, [sp, #68]	; 0x44
 8001a76:	f00f f893 	bl	8010ba0 <lv_disp_get_ver_res>
 8001a7a:	4240      	negs	r0, r0
    a->start_value = start;
 8001a7c:	9517      	str	r5, [sp, #92]	; 0x5c
    a->current_value = start;
 8001a7e:	9518      	str	r5, [sp, #96]	; 0x60
    a->end_value = end;
 8001a80:	9019      	str	r0, [sp, #100]	; 0x64
}
 8001a82:	e76d      	b.n	8001960 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 8001a84:	4e31      	ldr	r6, [pc, #196]	; (8001b4c <lv_scr_load_anim+0x304>)
            lv_anim_set_values(&a_new, -lv_disp_get_hor_res(d), 0);
 8001a86:	0020      	movs	r0, r4
 8001a88:	9601      	str	r6, [sp, #4]
 8001a8a:	f00f f875 	bl	8010b78 <lv_disp_get_hor_res>
    a->end_value = end;
 8001a8e:	2500      	movs	r5, #0
 8001a90:	4240      	negs	r0, r0
    a->start_value = start;
 8001a92:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 8001a94:	9008      	str	r0, [sp, #32]
            lv_anim_set_values(&a_old, 0, lv_disp_get_hor_res(d));
 8001a96:	0020      	movs	r0, r4
    a->end_value = end;
 8001a98:	9509      	str	r5, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8001a9a:	9611      	str	r6, [sp, #68]	; 0x44
 8001a9c:	f00f f86c 	bl	8010b78 <lv_disp_get_hor_res>
    a->start_value = start;
 8001aa0:	9517      	str	r5, [sp, #92]	; 0x5c
    a->current_value = start;
 8001aa2:	9518      	str	r5, [sp, #96]	; 0x60
 8001aa4:	9019      	str	r0, [sp, #100]	; 0x64
}
 8001aa6:	e75b      	b.n	8001960 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 8001aa8:	4e28      	ldr	r6, [pc, #160]	; (8001b4c <lv_scr_load_anim+0x304>)
            lv_anim_set_values(&a_new, lv_disp_get_hor_res(d), 0);
 8001aaa:	0020      	movs	r0, r4
 8001aac:	9601      	str	r6, [sp, #4]
 8001aae:	f00f f863 	bl	8010b78 <lv_disp_get_hor_res>
    a->end_value = end;
 8001ab2:	2500      	movs	r5, #0
    a->start_value = start;
 8001ab4:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 8001ab6:	9008      	str	r0, [sp, #32]
            lv_anim_set_values(&a_old, 0, -lv_disp_get_hor_res(d));
 8001ab8:	0020      	movs	r0, r4
    a->end_value = end;
 8001aba:	9509      	str	r5, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8001abc:	9611      	str	r6, [sp, #68]	; 0x44
 8001abe:	f00f f85b 	bl	8010b78 <lv_disp_get_hor_res>
 8001ac2:	4240      	negs	r0, r0
    a->start_value = start;
 8001ac4:	9517      	str	r5, [sp, #92]	; 0x5c
    a->current_value = start;
 8001ac6:	9518      	str	r5, [sp, #96]	; 0x60
    a->end_value = end;
 8001ac8:	9019      	str	r0, [sp, #100]	; 0x64
}
 8001aca:	e749      	b.n	8001960 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 8001acc:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <lv_scr_load_anim+0x308>)
            lv_anim_set_values(&a_new, -lv_disp_get_ver_res(d), 0);
 8001ace:	0020      	movs	r0, r4
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	f00f f865 	bl	8010ba0 <lv_disp_get_ver_res>
 8001ad6:	e799      	b.n	8001a0c <lv_scr_load_anim+0x1c4>
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <lv_scr_load_anim+0x308>)
            lv_anim_set_values(&a_new, lv_disp_get_ver_res(d), 0);
 8001ada:	0020      	movs	r0, r4
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	f00f f85f 	bl	8010ba0 <lv_disp_get_ver_res>
    a->end_value = end;
 8001ae2:	2300      	movs	r3, #0
    a->start_value = start;
 8001ae4:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 8001ae6:	9008      	str	r0, [sp, #32]
    a->end_value = end;
 8001ae8:	9309      	str	r3, [sp, #36]	; 0x24
}
 8001aea:	e739      	b.n	8001960 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <lv_scr_load_anim+0x30c>)
 8001aee:	9311      	str	r3, [sp, #68]	; 0x44
    a->start_value = start;
 8001af0:	23ff      	movs	r3, #255	; 0xff
 8001af2:	9317      	str	r3, [sp, #92]	; 0x5c
    a->current_value = start;
 8001af4:	9318      	str	r3, [sp, #96]	; 0x60
    a->end_value = end;
 8001af6:	2300      	movs	r3, #0
 8001af8:	9319      	str	r3, [sp, #100]	; 0x64
}
 8001afa:	e731      	b.n	8001960 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <lv_scr_load_anim+0x304>)
            lv_anim_set_values(&a_new, lv_disp_get_hor_res(d), 0);
 8001afe:	0020      	movs	r0, r4
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	f00f f839 	bl	8010b78 <lv_disp_get_hor_res>
    a->end_value = end;
 8001b06:	2300      	movs	r3, #0
    a->start_value = start;
 8001b08:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 8001b0a:	9008      	str	r0, [sp, #32]
    a->end_value = end;
 8001b0c:	9309      	str	r3, [sp, #36]	; 0x24
}
 8001b0e:	e727      	b.n	8001960 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <lv_scr_load_anim+0x304>)
 8001b12:	9301      	str	r3, [sp, #4]
    a->start_value = start;
 8001b14:	2300      	movs	r3, #0
 8001b16:	9307      	str	r3, [sp, #28]
    a->current_value = start;
 8001b18:	9308      	str	r3, [sp, #32]
    a->end_value = end;
 8001b1a:	9309      	str	r3, [sp, #36]	; 0x24
}
 8001b1c:	e720      	b.n	8001960 <lv_scr_load_anim+0x118>
    a->exec_cb = exec_cb;
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <lv_scr_load_anim+0x308>)
            lv_anim_set_values(&a_old, 0, -lv_disp_get_ver_res(d));
 8001b20:	0020      	movs	r0, r4
 8001b22:	9311      	str	r3, [sp, #68]	; 0x44
 8001b24:	f00f f83c 	bl	8010ba0 <lv_disp_get_ver_res>
 8001b28:	e715      	b.n	8001956 <lv_scr_load_anim+0x10e>
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <lv_scr_load_anim+0x304>)
            lv_anim_set_values(&a_old, 0, lv_disp_get_hor_res(d));
 8001b2c:	0020      	movs	r0, r4
 8001b2e:	9311      	str	r3, [sp, #68]	; 0x44
 8001b30:	f00f f822 	bl	8010b78 <lv_disp_get_hor_res>
    a->start_value = start;
 8001b34:	2300      	movs	r3, #0
 8001b36:	9019      	str	r0, [sp, #100]	; 0x64
 8001b38:	9317      	str	r3, [sp, #92]	; 0x5c
    a->current_value = start;
 8001b3a:	9318      	str	r3, [sp, #96]	; 0x60
}
 8001b3c:	e710      	b.n	8001960 <lv_scr_load_anim+0x118>
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	0800174d 	.word	0x0800174d
 8001b44:	080016a5 	.word	0x080016a5
 8001b48:	0801b69c 	.word	0x0801b69c
 8001b4c:	08001699 	.word	0x08001699
 8001b50:	0800168d 	.word	0x0800168d
 8001b54:	08001681 	.word	0x08001681

08001b58 <lv_disp_load_scr>:
    lv_scr_load_anim(scr, LV_SCR_LOAD_ANIM_NONE, 0, 0, false);
 8001b58:	2300      	movs	r3, #0
{
 8001b5a:	b500      	push	{lr}
 8001b5c:	b083      	sub	sp, #12
    lv_scr_load_anim(scr, LV_SCR_LOAD_ANIM_NONE, 0, 0, false);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	f7ff fe70 	bl	8001848 <lv_scr_load_anim>
}
 8001b68:	b003      	add	sp, #12
 8001b6a:	bd00      	pop	{pc}

08001b6c <lv_disp_is_invalidation_enabled>:
{
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	b510      	push	{r4, lr}
    if(!disp) disp = lv_disp_get_default();
 8001b70:	2800      	cmp	r0, #0
 8001b72:	d006      	beq.n	8001b82 <lv_disp_is_invalidation_enabled+0x16>
    return (disp->inv_en_cnt > 0);
 8001b74:	22aa      	movs	r2, #170	; 0xaa
 8001b76:	0052      	lsls	r2, r2, #1
 8001b78:	589b      	ldr	r3, [r3, r2]
 8001b7a:	17d8      	asrs	r0, r3, #31
 8001b7c:	1ac0      	subs	r0, r0, r3
 8001b7e:	0fc0      	lsrs	r0, r0, #31
}
 8001b80:	bd10      	pop	{r4, pc}
    if(!disp) disp = lv_disp_get_default();
 8001b82:	f00e fff3 	bl	8010b6c <lv_disp_get_default>
 8001b86:	0003      	movs	r3, r0
        return false;
 8001b88:	2000      	movs	r0, #0
    if(!disp) {
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f8      	beq.n	8001b80 <lv_disp_is_invalidation_enabled+0x14>
 8001b8e:	e7f1      	b.n	8001b74 <lv_disp_is_invalidation_enabled+0x8>

08001b90 <event_send_core>:

    return &obj->spec_attr->event_dsc[id];
}

static lv_res_t event_send_core(lv_event_t * e)
{
 8001b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b92:	4645      	mov	r5, r8
 8001b94:	46de      	mov	lr, fp
 8001b96:	4657      	mov	r7, sl
 8001b98:	464e      	mov	r6, r9
 8001b9a:	b5e0      	push	{r5, r6, r7, lr}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	0005      	movs	r5, r0
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, (void *)e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8001ba0:	f000 fdfa 	bl	8002798 <lv_indev_get_act>
    if(indev_act) {
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	d00a      	beq.n	8001bbe <event_send_core+0x2e>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8001ba8:	6800      	ldr	r0, [r0, #0]
 8001baa:	6883      	ldr	r3, [r0, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <event_send_core+0x24>
 8001bb0:	7a29      	ldrb	r1, [r5, #8]
 8001bb2:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 8001bb4:	7e2b      	ldrb	r3, [r5, #24]
 8001bb6:	079a      	lsls	r2, r3, #30
 8001bb8:	d46a      	bmi.n	8001c90 <event_send_core+0x100>
        if(e->deleted) return LV_RES_INV;
 8001bba:	07db      	lsls	r3, r3, #31
 8001bbc:	d466      	bmi.n	8001c8c <event_send_core+0xfc>
    }

    lv_res_t res = LV_RES_OK;
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8001bbe:	686b      	ldr	r3, [r5, #4]
    if(!obj->spec_attr) return NULL;
 8001bc0:	6899      	ldr	r1, [r3, #8]
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8001bc2:	001a      	movs	r2, r3
 8001bc4:	9301      	str	r3, [sp, #4]
    if(!obj->spec_attr) return NULL;
 8001bc6:	2900      	cmp	r1, #0
 8001bc8:	d03b      	beq.n	8001c42 <event_send_core+0xb2>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8001bca:	7e8b      	ldrb	r3, [r1, #26]
 8001bcc:	069b      	lsls	r3, r3, #26
 8001bce:	d038      	beq.n	8001c42 <event_send_core+0xb2>
    return &obj->spec_attr->event_dsc[id];
 8001bd0:	68cb      	ldr	r3, [r1, #12]

    uint32_t i = 0;
    while(event_dsc && res == LV_RES_OK) {
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d100      	bne.n	8001bd8 <event_send_core+0x48>
 8001bd6:	e0b9      	b.n	8001d4c <event_send_core+0x1bc>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
            e->user_data = event_dsc->user_data;
            event_dsc->cb(e);

            if(e->stop_processing) return LV_RES_OK;
 8001bd8:	2002      	movs	r0, #2
 8001bda:	4681      	mov	r9, r0
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 8001bdc:	3801      	subs	r0, #1
 8001bde:	4680      	mov	r8, r0
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8001be0:	307f      	adds	r0, #127	; 0x7f
    while(event_dsc && res == LV_RES_OK) {
 8001be2:	2400      	movs	r4, #0
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8001be4:	4683      	mov	fp, r0
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 8001be6:	681f      	ldr	r7, [r3, #0]
 8001be8:	2f00      	cmp	r7, #0
 8001bea:	d004      	beq.n	8001bf6 <event_send_core+0x66>
 8001bec:	2008      	movs	r0, #8
 8001bee:	5618      	ldrsb	r0, [r3, r0]
 8001bf0:	7a1e      	ldrb	r6, [r3, #8]
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	db0c      	blt.n	8001c10 <event_send_core+0x80>
        }

        i++;
 8001bf6:	3401      	adds	r4, #1
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8001bf8:	7e8b      	ldrb	r3, [r1, #26]
 8001bfa:	069b      	lsls	r3, r3, #26
 8001bfc:	0e9b      	lsrs	r3, r3, #26
 8001bfe:	42a3      	cmp	r3, r4
 8001c00:	d94e      	bls.n	8001ca0 <event_send_core+0x110>
    return &obj->spec_attr->event_dsc[id];
 8001c02:	68ce      	ldr	r6, [r1, #12]
 8001c04:	0063      	lsls	r3, r4, #1
 8001c06:	46b4      	mov	ip, r6
 8001c08:	191b      	adds	r3, r3, r4
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4463      	add	r3, ip
    while(event_dsc && res == LV_RES_OK) {
 8001c0e:	e7ea      	b.n	8001be6 <event_send_core+0x56>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8001c10:	2e80      	cmp	r6, #128	; 0x80
 8001c12:	d004      	beq.n	8001c1e <event_send_core+0x8e>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8001c14:	4658      	mov	r0, fp
 8001c16:	4386      	bics	r6, r0
 8001c18:	7a28      	ldrb	r0, [r5, #8]
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8001c1a:	4286      	cmp	r6, r0
 8001c1c:	d1eb      	bne.n	8001bf6 <event_send_core+0x66>
            e->user_data = event_dsc->user_data;
 8001c1e:	685b      	ldr	r3, [r3, #4]
            event_dsc->cb(e);
 8001c20:	0028      	movs	r0, r5
            e->user_data = event_dsc->user_data;
 8001c22:	60eb      	str	r3, [r5, #12]
            event_dsc->cb(e);
 8001c24:	47b8      	blx	r7
            if(e->stop_processing) return LV_RES_OK;
 8001c26:	464a      	mov	r2, r9
 8001c28:	7e2b      	ldrb	r3, [r5, #24]
 8001c2a:	421a      	tst	r2, r3
 8001c2c:	d130      	bne.n	8001c90 <event_send_core+0x100>
            if(e->deleted) return LV_RES_INV;
 8001c2e:	4642      	mov	r2, r8
 8001c30:	421a      	tst	r2, r3
 8001c32:	d12b      	bne.n	8001c8c <event_send_core+0xfc>
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8001c34:	686b      	ldr	r3, [r5, #4]
        i++;
 8001c36:	3401      	adds	r4, #1
    if(!obj->spec_attr) return NULL;
 8001c38:	6899      	ldr	r1, [r3, #8]
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	9301      	str	r3, [sp, #4]
    if(!obj->spec_attr) return NULL;
 8001c3e:	2900      	cmp	r1, #0
 8001c40:	d1da      	bne.n	8001bf8 <event_send_core+0x68>
    if(class_p == NULL) base = e->current_target->class_p;
 8001c42:	9b01      	ldr	r3, [sp, #4]
 8001c44:	681c      	ldr	r4, [r3, #0]
    while(base && base->event_cb == NULL) base = base->base_class;
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	d115      	bne.n	8001c76 <event_send_core+0xe6>

        i++;
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
    }

    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8001c4a:	6853      	ldr	r3, [r2, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01f      	beq.n	8001c90 <event_send_core+0x100>
    return res;
}

static bool event_is_bubbled(lv_event_t * e)
{
    if(e->stop_bubbling) return false;
 8001c50:	7e29      	ldrb	r1, [r5, #24]
 8001c52:	0749      	lsls	r1, r1, #29
 8001c54:	d41c      	bmi.n	8001c90 <event_send_core+0x100>

    /*Event codes that always bubble*/
    switch(e->code) {
 8001c56:	7a29      	ldrb	r1, [r5, #8]
 8001c58:	3923      	subs	r1, #35	; 0x23
 8001c5a:	2901      	cmp	r1, #1
 8001c5c:	d863      	bhi.n	8001d26 <event_send_core+0x196>
        e->current_target = e->current_target->parent;
 8001c5e:	606b      	str	r3, [r5, #4]
        res = event_send_core(e);
 8001c60:	0028      	movs	r0, r5
 8001c62:	f7ff ff95 	bl	8001b90 <event_send_core>
        if(res != LV_RES_OK) return LV_RES_INV;
 8001c66:	3801      	subs	r0, #1
 8001c68:	4243      	negs	r3, r0
 8001c6a:	4158      	adcs	r0, r3
        if(e->stop_processing) return LV_RES_OK;
 8001c6c:	b2c0      	uxtb	r0, r0
 8001c6e:	e010      	b.n	8001c92 <event_send_core+0x102>
    while(base && base->event_cb == NULL) base = base->base_class;
 8001c70:	6824      	ldr	r4, [r4, #0]
 8001c72:	2c00      	cmp	r4, #0
 8001c74:	d042      	beq.n	8001cfc <event_send_core+0x16c>
 8001c76:	68e3      	ldr	r3, [r4, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f9      	beq.n	8001c70 <event_send_core+0xe0>
    e->user_data = NULL;
 8001c7c:	2200      	movs	r2, #0
    base->event_cb(base, e);
 8001c7e:	0029      	movs	r1, r5
 8001c80:	0020      	movs	r0, r4
    e->user_data = NULL;
 8001c82:	60ea      	str	r2, [r5, #12]
    base->event_cb(base, e);
 8001c84:	4798      	blx	r3
    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 8001c86:	7e2b      	ldrb	r3, [r5, #24]
 8001c88:	07db      	lsls	r3, r3, #31
 8001c8a:	d535      	bpl.n	8001cf8 <event_send_core+0x168>
        if(e->deleted) return LV_RES_INV;
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	e000      	b.n	8001c92 <event_send_core+0x102>
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;

    switch(e->code) {
 8001c90:	2001      	movs	r0, #1
}
 8001c92:	b003      	add	sp, #12
 8001c94:	bcf0      	pop	{r4, r5, r6, r7}
 8001c96:	46bb      	mov	fp, r7
 8001c98:	46b2      	mov	sl, r6
 8001c9a:	46a9      	mov	r9, r5
 8001c9c:	46a0      	mov	r8, r4
 8001c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(class_p == NULL) base = e->current_target->class_p;
 8001ca0:	9801      	ldr	r0, [sp, #4]
 8001ca2:	6804      	ldr	r4, [r0, #0]
    while(base && base->event_cb == NULL) base = base->base_class;
 8001ca4:	2c00      	cmp	r4, #0
 8001ca6:	d1e6      	bne.n	8001c76 <event_send_core+0xe6>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ce      	beq.n	8001c4a <event_send_core+0xba>
    return &obj->spec_attr->event_dsc[id];
 8001cac:	68cb      	ldr	r3, [r1, #12]
    while(event_dsc && res == LV_RES_OK) {
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0cb      	beq.n	8001c4a <event_send_core+0xba>
            if(e->deleted) return LV_RES_INV;
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	4688      	mov	r8, r1
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8001cb6:	6819      	ldr	r1, [r3, #0]
    while(event_dsc && res == LV_RES_OK) {
 8001cb8:	2400      	movs	r4, #0
            if(e->stop_processing) return LV_RES_OK;
 8001cba:	2602      	movs	r6, #2
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8001cbc:	2900      	cmp	r1, #0
 8001cbe:	d009      	beq.n	8001cd4 <event_send_core+0x144>
 8001cc0:	2008      	movs	r0, #8
 8001cc2:	5618      	ldrsb	r0, [r3, r0]
 8001cc4:	7a1f      	ldrb	r7, [r3, #8]
 8001cc6:	2800      	cmp	r0, #0
 8001cc8:	db04      	blt.n	8001cd4 <event_send_core+0x144>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8001cca:	2f00      	cmp	r7, #0
 8001ccc:	d01f      	beq.n	8001d0e <event_send_core+0x17e>
 8001cce:	7a28      	ldrb	r0, [r5, #8]
 8001cd0:	42b8      	cmp	r0, r7
 8001cd2:	d01c      	beq.n	8001d0e <event_send_core+0x17e>
    if(!obj->spec_attr) return NULL;
 8001cd4:	6890      	ldr	r0, [r2, #8]
        i++;
 8001cd6:	3401      	adds	r4, #1
    if(!obj->spec_attr) return NULL;
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	d0b6      	beq.n	8001c4a <event_send_core+0xba>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8001cdc:	7e83      	ldrb	r3, [r0, #26]
 8001cde:	069b      	lsls	r3, r3, #26
 8001ce0:	0e9b      	lsrs	r3, r3, #26
 8001ce2:	429c      	cmp	r4, r3
 8001ce4:	d2b1      	bcs.n	8001c4a <event_send_core+0xba>
    return &obj->spec_attr->event_dsc[id];
 8001ce6:	0063      	lsls	r3, r4, #1
 8001ce8:	191b      	adds	r3, r3, r4
 8001cea:	0099      	lsls	r1, r3, #2
 8001cec:	68c3      	ldr	r3, [r0, #12]
 8001cee:	185b      	adds	r3, r3, r1
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8001cf0:	6819      	ldr	r1, [r3, #0]
 8001cf2:	2900      	cmp	r1, #0
 8001cf4:	d1e4      	bne.n	8001cc0 <event_send_core+0x130>
 8001cf6:	e7ed      	b.n	8001cd4 <event_send_core+0x144>
 8001cf8:	686b      	ldr	r3, [r5, #4]
 8001cfa:	9301      	str	r3, [sp, #4]
    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 8001cfc:	9a01      	ldr	r2, [sp, #4]
    if(!obj->spec_attr) return NULL;
 8001cfe:	6891      	ldr	r1, [r2, #8]
 8001d00:	2900      	cmp	r1, #0
 8001d02:	d0a2      	beq.n	8001c4a <event_send_core+0xba>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8001d04:	7e8b      	ldrb	r3, [r1, #26]
 8001d06:	069b      	lsls	r3, r3, #26
 8001d08:	0e9b      	lsrs	r3, r3, #26
 8001d0a:	d1cf      	bne.n	8001cac <event_send_core+0x11c>
 8001d0c:	e79d      	b.n	8001c4a <event_send_core+0xba>
            e->user_data = event_dsc->user_data;
 8001d0e:	685b      	ldr	r3, [r3, #4]
            event_dsc->cb(e);
 8001d10:	0028      	movs	r0, r5
            e->user_data = event_dsc->user_data;
 8001d12:	60eb      	str	r3, [r5, #12]
            event_dsc->cb(e);
 8001d14:	4788      	blx	r1
            if(e->stop_processing) return LV_RES_OK;
 8001d16:	7e2b      	ldrb	r3, [r5, #24]
 8001d18:	421e      	tst	r6, r3
 8001d1a:	d1b9      	bne.n	8001c90 <event_send_core+0x100>
            if(e->deleted) return LV_RES_INV;
 8001d1c:	4642      	mov	r2, r8
 8001d1e:	421a      	tst	r2, r3
 8001d20:	d1b4      	bne.n	8001c8c <event_send_core+0xfc>
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8001d22:	686a      	ldr	r2, [r5, #4]
 8001d24:	e7d6      	b.n	8001cd4 <event_send_core+0x144>
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	0010      	movs	r0, r2
 8001d2a:	01c9      	lsls	r1, r1, #7
 8001d2c:	f003 f988 	bl	8005040 <lv_obj_has_flag>
 8001d30:	2800      	cmp	r0, #0
 8001d32:	d0ad      	beq.n	8001c90 <event_send_core+0x100>
    switch(e->code) {
 8001d34:	7a2b      	ldrb	r3, [r5, #8]
 8001d36:	3b11      	subs	r3, #17
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b1b      	cmp	r3, #27
 8001d3c:	d803      	bhi.n	8001d46 <event_send_core+0x1b6>
 8001d3e:	4a06      	ldr	r2, [pc, #24]	; (8001d58 <event_send_core+0x1c8>)
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	58d3      	ldr	r3, [r2, r3]
 8001d44:	469f      	mov	pc, r3
        e->current_target = e->current_target->parent;
 8001d46:	686b      	ldr	r3, [r5, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	e788      	b.n	8001c5e <event_send_core+0xce>
    if(class_p == NULL) base = e->current_target->class_p;
 8001d4c:	9b01      	ldr	r3, [sp, #4]
 8001d4e:	681c      	ldr	r4, [r3, #0]
    while(base && base->event_cb == NULL) base = base->base_class;
 8001d50:	2c00      	cmp	r4, #0
 8001d52:	d000      	beq.n	8001d56 <event_send_core+0x1c6>
 8001d54:	e78f      	b.n	8001c76 <event_send_core+0xe6>
 8001d56:	e7a9      	b.n	8001cac <event_send_core+0x11c>
 8001d58:	0801b6d8 	.word	0x0801b6d8

08001d5c <lv_event_send>:
{
 8001d5c:	b510      	push	{r4, lr}
 8001d5e:	b088      	sub	sp, #32
    if(obj == NULL) return LV_RES_OK;
 8001d60:	2800      	cmp	r0, #0
 8001d62:	d017      	beq.n	8001d94 <lv_event_send+0x38>
    e.code = event_code;
 8001d64:	466b      	mov	r3, sp
    e.target = obj;
 8001d66:	9001      	str	r0, [sp, #4]
    e.code = event_code;
 8001d68:	7219      	strb	r1, [r3, #8]
    e.user_data = NULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	9303      	str	r3, [sp, #12]
    e.deleted = 0;
 8001d6e:	466b      	mov	r3, sp
    e.param = param;
 8001d70:	9204      	str	r2, [sp, #16]
    e.deleted = 0;
 8001d72:	2207      	movs	r2, #7
 8001d74:	7e1b      	ldrb	r3, [r3, #24]
    e.prev = event_head;
 8001d76:	4c08      	ldr	r4, [pc, #32]	; (8001d98 <lv_event_send+0x3c>)
    e.deleted = 0;
 8001d78:	4393      	bics	r3, r2
 8001d7a:	466a      	mov	r2, sp
 8001d7c:	7613      	strb	r3, [r2, #24]
    e.prev = event_head;
 8001d7e:	6823      	ldr	r3, [r4, #0]
    e.target = obj;
 8001d80:	9000      	str	r0, [sp, #0]
    lv_res_t res = event_send_core(&e);
 8001d82:	4668      	mov	r0, sp
    e.prev = event_head;
 8001d84:	9305      	str	r3, [sp, #20]
    event_head = &e;
 8001d86:	6022      	str	r2, [r4, #0]
    lv_res_t res = event_send_core(&e);
 8001d88:	f7ff ff02 	bl	8001b90 <event_send_core>
    event_head = e.prev;
 8001d8c:	9b05      	ldr	r3, [sp, #20]
 8001d8e:	6023      	str	r3, [r4, #0]
}
 8001d90:	b008      	add	sp, #32
 8001d92:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
 8001d94:	2001      	movs	r0, #1
 8001d96:	e7fb      	b.n	8001d90 <lv_event_send+0x34>
 8001d98:	200031e4 	.word	0x200031e4

08001d9c <lv_obj_event_base>:
{
 8001d9c:	b510      	push	{r4, lr}
 8001d9e:	000c      	movs	r4, r1
    if(class_p == NULL) base = e->current_target->class_p;
 8001da0:	2800      	cmp	r0, #0
 8001da2:	d00f      	beq.n	8001dc4 <lv_obj_event_base+0x28>
    else base = class_p->base_class;
 8001da4:	6800      	ldr	r0, [r0, #0]
    while(base && base->event_cb == NULL) base = base->base_class;
 8001da6:	2800      	cmp	r0, #0
 8001da8:	d00a      	beq.n	8001dc0 <lv_obj_event_base+0x24>
 8001daa:	68c3      	ldr	r3, [r0, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f9      	beq.n	8001da4 <lv_obj_event_base+0x8>
    e->user_data = NULL;
 8001db0:	2200      	movs	r2, #0
    base->event_cb(base, e);
 8001db2:	0021      	movs	r1, r4
    e->user_data = NULL;
 8001db4:	60e2      	str	r2, [r4, #12]
    base->event_cb(base, e);
 8001db6:	4798      	blx	r3
    if(e->deleted) res = LV_RES_INV;
 8001db8:	2001      	movs	r0, #1
 8001dba:	7e23      	ldrb	r3, [r4, #24]
 8001dbc:	4398      	bics	r0, r3
}
 8001dbe:	bd10      	pop	{r4, pc}
    if(base == NULL) return LV_RES_OK;
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	e7fc      	b.n	8001dbe <lv_obj_event_base+0x22>
    if(class_p == NULL) base = e->current_target->class_p;
 8001dc4:	684b      	ldr	r3, [r1, #4]
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	e7ed      	b.n	8001da6 <lv_obj_event_base+0xa>
 8001dca:	46c0      	nop			; (mov r8, r8)

08001dcc <lv_event_get_target>:
    return e->target;
 8001dcc:	6800      	ldr	r0, [r0, #0]
}
 8001dce:	4770      	bx	lr

08001dd0 <lv_event_get_current_target>:
    return e->current_target;
 8001dd0:	6840      	ldr	r0, [r0, #4]
}
 8001dd2:	4770      	bx	lr

08001dd4 <lv_event_get_code>:
    return e->code & ~LV_EVENT_PREPROCESS;
 8001dd4:	7a03      	ldrb	r3, [r0, #8]
 8001dd6:	207f      	movs	r0, #127	; 0x7f
 8001dd8:	4018      	ands	r0, r3
}
 8001dda:	4770      	bx	lr

08001ddc <lv_event_get_param>:
    return e->param;
 8001ddc:	6900      	ldr	r0, [r0, #16]
}
 8001dde:	4770      	bx	lr

08001de0 <lv_event_get_user_data>:
    return e->user_data;
 8001de0:	68c0      	ldr	r0, [r0, #12]
}
 8001de2:	4770      	bx	lr

08001de4 <lv_event_register_id>:
    last_id ++;
 8001de4:	4b02      	ldr	r3, [pc, #8]	; (8001df0 <lv_event_register_id+0xc>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	1c50      	adds	r0, r2, #1
 8001dea:	6018      	str	r0, [r3, #0]
}
 8001dec:	4770      	bx	lr
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	20000000 	.word	0x20000000

08001df4 <_lv_event_mark_deleted>:
    lv_event_t * e = event_head;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <_lv_event_mark_deleted+0x2c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
    while(e) {
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d010      	beq.n	8001e1e <_lv_event_mark_deleted+0x2a>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	e005      	b.n	8001e0c <_lv_event_mark_deleted+0x18>
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4282      	cmp	r2, r0
 8001e04:	d005      	beq.n	8001e12 <_lv_event_mark_deleted+0x1e>
        e = e->prev;
 8001e06:	695b      	ldr	r3, [r3, #20]
    while(e) {
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <_lv_event_mark_deleted+0x2a>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	4282      	cmp	r2, r0
 8001e10:	d1f6      	bne.n	8001e00 <_lv_event_mark_deleted+0xc>
 8001e12:	7e1a      	ldrb	r2, [r3, #24]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	761a      	strb	r2, [r3, #24]
        e = e->prev;
 8001e18:	695b      	ldr	r3, [r3, #20]
    while(e) {
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f6      	bne.n	8001e0c <_lv_event_mark_deleted+0x18>
}
 8001e1e:	4770      	bx	lr
 8001e20:	200031e4 	.word	0x200031e4

08001e24 <lv_obj_add_event_cb>:
{
 8001e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e26:	46c6      	mov	lr, r8
 8001e28:	b500      	push	{lr}
 8001e2a:	0007      	movs	r7, r0
 8001e2c:	000e      	movs	r6, r1
 8001e2e:	0015      	movs	r5, r2
 8001e30:	4698      	mov	r8, r3
    lv_obj_allocate_spec_attr(obj);
 8001e32:	f003 f921 	bl	8005078 <lv_obj_allocate_spec_attr>
    obj->spec_attr->event_dsc_cnt++;
 8001e36:	203f      	movs	r0, #63	; 0x3f
 8001e38:	0001      	movs	r1, r0
 8001e3a:	68bc      	ldr	r4, [r7, #8]
 8001e3c:	7ea2      	ldrb	r2, [r4, #26]
 8001e3e:	0693      	lsls	r3, r2, #26
 8001e40:	0e9b      	lsrs	r3, r3, #26
 8001e42:	3301      	adds	r3, #1
 8001e44:	4019      	ands	r1, r3
 8001e46:	468c      	mov	ip, r1
 8001e48:	000b      	movs	r3, r1
 8001e4a:	4382      	bics	r2, r0
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 8001e4c:	0049      	lsls	r1, r1, #1
    obj->spec_attr->event_dsc_cnt++;
 8001e4e:	4313      	orrs	r3, r2
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 8001e50:	4461      	add	r1, ip
    obj->spec_attr->event_dsc_cnt++;
 8001e52:	76a3      	strb	r3, [r4, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 8001e54:	68e0      	ldr	r0, [r4, #12]
 8001e56:	0089      	lsls	r1, r1, #2
 8001e58:	f010 f8e6 	bl	8012028 <lv_mem_realloc>
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 8001e5c:	68bb      	ldr	r3, [r7, #8]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 8001e5e:	60e0      	str	r0, [r4, #12]
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	d00e      	beq.n	8001e84 <lv_obj_add_event_cb+0x60>
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].cb = event_cb;
 8001e66:	7e98      	ldrb	r0, [r3, #26]
 8001e68:	0680      	lsls	r0, r0, #26
 8001e6a:	0e83      	lsrs	r3, r0, #26
 8001e6c:	0e40      	lsrs	r0, r0, #25
 8001e6e:	18c0      	adds	r0, r0, r3
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].user_data = user_data;
 8001e70:	4643      	mov	r3, r8
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].cb = event_cb;
 8001e72:	0080      	lsls	r0, r0, #2
 8001e74:	380c      	subs	r0, #12
 8001e76:	1810      	adds	r0, r2, r0
 8001e78:	6006      	str	r6, [r0, #0]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].filter = filter;
 8001e7a:	7205      	strb	r5, [r0, #8]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].user_data = user_data;
 8001e7c:	6043      	str	r3, [r0, #4]
}
 8001e7e:	bc80      	pop	{r7}
 8001e80:	46b8      	mov	r8, r7
 8001e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 8001e84:	e7fe      	b.n	8001e84 <lv_obj_add_event_cb+0x60>
 8001e86:	46c0      	nop			; (mov r8, r8)

08001e88 <lv_event_get_indev>:
       e->code == LV_EVENT_DEFOCUSED ||
 8001e88:	7a03      	ldrb	r3, [r0, #8]
    if(e->code == LV_EVENT_PRESSED ||
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d801      	bhi.n	8001e94 <lv_event_get_indev+0xc>
    return e->param;
 8001e90:	6900      	ldr	r0, [r0, #16]
}
 8001e92:	4770      	bx	lr
        return NULL;
 8001e94:	2000      	movs	r0, #0
 8001e96:	e7fc      	b.n	8001e92 <lv_event_get_indev+0xa>

08001e98 <lv_event_get_draw_ctx>:
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8001e98:	7a02      	ldrb	r2, [r0, #8]
{
 8001e9a:	0003      	movs	r3, r0
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8001e9c:	3a14      	subs	r2, #20
        return NULL;
 8001e9e:	2000      	movs	r0, #0
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8001ea0:	2a05      	cmp	r2, #5
 8001ea2:	d800      	bhi.n	8001ea6 <lv_event_get_draw_ctx+0xe>
    return e->param;
 8001ea4:	6918      	ldr	r0, [r3, #16]
}
 8001ea6:	4770      	bx	lr

08001ea8 <lv_event_set_ext_draw_size>:
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8001ea8:	7a03      	ldrb	r3, [r0, #8]
 8001eaa:	2b13      	cmp	r3, #19
 8001eac:	d000      	beq.n	8001eb0 <lv_event_set_ext_draw_size+0x8>
}
 8001eae:	4770      	bx	lr
    return e->param;
 8001eb0:	6902      	ldr	r2, [r0, #16]
        *cur_size = LV_MAX(*cur_size, size);
 8001eb2:	8813      	ldrh	r3, [r2, #0]
 8001eb4:	1c18      	adds	r0, r3, #0
 8001eb6:	b21b      	sxth	r3, r3
 8001eb8:	428b      	cmp	r3, r1
 8001eba:	db01      	blt.n	8001ec0 <lv_event_set_ext_draw_size+0x18>
 8001ebc:	8010      	strh	r0, [r2, #0]
}
 8001ebe:	e7f6      	b.n	8001eae <lv_event_set_ext_draw_size+0x6>
        *cur_size = LV_MAX(*cur_size, size);
 8001ec0:	1c08      	adds	r0, r1, #0
 8001ec2:	8010      	strh	r0, [r2, #0]
        LV_LOG_WARN("Not interpreted with this event code");
 8001ec4:	e7f3      	b.n	8001eae <lv_event_set_ext_draw_size+0x6>
 8001ec6:	46c0      	nop			; (mov r8, r8)

08001ec8 <focus_next_core.part.0>:
        lv_group_focus_prev(g);
    /*Restore wrap property*/
    g->wrap = temp_wrap;
}

static bool focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8001ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(group->frozen) return focus_changed;

    lv_obj_t ** obj_next     = group->obj_focus;
    lv_obj_t ** obj_sentinel = NULL;
    bool can_move            = true;
    bool can_begin           = true;
 8001eca:	2301      	movs	r3, #1
static bool focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8001ecc:	4657      	mov	r7, sl
 8001ece:	464e      	mov	r6, r9
 8001ed0:	4645      	mov	r5, r8
 8001ed2:	46de      	mov	lr, fp
    bool can_begin           = true;
 8001ed4:	469b      	mov	fp, r3
        }

        can_move = true;

        if(obj_next == NULL) continue;
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8001ed6:	337f      	adds	r3, #127	; 0x7f
static bool focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
 8001ed8:	b5e0      	push	{r5, r6, r7, lr}
 8001eda:	4689      	mov	r9, r1
 8001edc:	0006      	movs	r6, r0
 8001ede:	4690      	mov	r8, r2
    lv_obj_t ** obj_sentinel = NULL;
 8001ee0:	2700      	movs	r7, #0
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8001ee2:	469a      	mov	sl, r3
    lv_obj_t ** obj_next     = group->obj_focus;
 8001ee4:	68c5      	ldr	r5, [r0, #12]
        if(obj_next == NULL) {
 8001ee6:	2d00      	cmp	r5, #0
 8001ee8:	d05e      	beq.n	8001fa8 <focus_next_core.part.0+0xe0>
        if(obj_sentinel == NULL) {
 8001eea:	2f00      	cmp	r7, #0
 8001eec:	d100      	bne.n	8001ef0 <focus_next_core.part.0+0x28>
 8001eee:	e06d      	b.n	8001fcc <focus_next_core.part.0+0x104>
            obj_next = move(&group->obj_ll, obj_next);
 8001ef0:	0029      	movs	r1, r5
 8001ef2:	0030      	movs	r0, r6
 8001ef4:	47c0      	blx	r8
 8001ef6:	0005      	movs	r5, r0
            if(obj_next == obj_sentinel) return focus_changed;
 8001ef8:	42b8      	cmp	r0, r7
 8001efa:	d04e      	beq.n	8001f9a <focus_next_core.part.0+0xd2>
        if(obj_next == NULL) continue;
 8001efc:	2d00      	cmp	r5, #0
 8001efe:	d053      	beq.n	8001fa8 <focus_next_core.part.0+0xe0>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8001f00:	6828      	ldr	r0, [r5, #0]
 8001f02:	f003 f8ab 	bl	800505c <lv_obj_get_state>
 8001f06:	4653      	mov	r3, sl
 8001f08:	4203      	tst	r3, r0
 8001f0a:	d1ec      	bne.n	8001ee6 <focus_next_core.part.0+0x1e>

        /*Hidden objects don't receive focus.
         *If any parent is hidden, the object is also hidden)*/
        lv_obj_t * parent = *obj_next;
 8001f0c:	682c      	ldr	r4, [r5, #0]
        while(parent) {
 8001f0e:	2c00      	cmp	r4, #0
 8001f10:	d105      	bne.n	8001f1e <focus_next_core.part.0+0x56>
 8001f12:	e010      	b.n	8001f36 <focus_next_core.part.0+0x6e>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
            parent = lv_obj_get_parent(parent);
 8001f14:	0020      	movs	r0, r4
 8001f16:	f009 f817 	bl	800af48 <lv_obj_get_parent>
 8001f1a:	1e04      	subs	r4, r0, #0
        while(parent) {
 8001f1c:	d00b      	beq.n	8001f36 <focus_next_core.part.0+0x6e>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 8001f1e:	2101      	movs	r1, #1
 8001f20:	0020      	movs	r0, r4
 8001f22:	f003 f88d 	bl	8005040 <lv_obj_has_flag>
 8001f26:	2800      	cmp	r0, #0
 8001f28:	d0f4      	beq.n	8001f14 <focus_next_core.part.0+0x4c>
        }

        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	0020      	movs	r0, r4
 8001f2e:	f003 f887 	bl	8005040 <lv_obj_has_flag>
 8001f32:	2800      	cmp	r0, #0
 8001f34:	d1d7      	bne.n	8001ee6 <focus_next_core.part.0+0x1e>

        /*If we got her a good candidate is found*/
        break;
    }

    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 8001f36:	68f3      	ldr	r3, [r6, #12]
 8001f38:	42ab      	cmp	r3, r5
 8001f3a:	d02e      	beq.n	8001f9a <focus_next_core.part.0+0xd2>

    if(group->obj_focus) {
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d058      	beq.n	8001ff2 <focus_next_core.part.0+0x12a>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8001f40:	681b      	ldr	r3, [r3, #0]
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
    lv_indev_t * indev_encoder = NULL;
    lv_indev_t * indev_group = NULL;
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8001f42:	2000      	movs	r0, #0
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8001f44:	4698      	mov	r8, r3
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8001f46:	f00e fe9d 	bl	8010c84 <lv_indev_get_next>
 8001f4a:	1e04      	subs	r4, r0, #0
    while(indev) {
 8001f4c:	d100      	bne.n	8001f50 <focus_next_core.part.0+0x88>
 8001f4e:	e095      	b.n	800207c <focus_next_core.part.0+0x1b4>
    lv_indev_t * indev_encoder = NULL;
 8001f50:	2300      	movs	r3, #0
    lv_indev_t * indev_group = NULL;
 8001f52:	2700      	movs	r7, #0
    lv_indev_t * indev_encoder = NULL;
 8001f54:	4699      	mov	r9, r3
 8001f56:	e004      	b.n	8001f62 <focus_next_core.part.0+0x9a>
            /*Prefer KEYPAD*/
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
            indev_group = indev;
        }
        indev = lv_indev_get_next(indev);
 8001f58:	0020      	movs	r0, r4
 8001f5a:	f00e fe93 	bl	8010c84 <lv_indev_get_next>
 8001f5e:	1e04      	subs	r4, r0, #0
    while(indev) {
 8001f60:	d011      	beq.n	8001f86 <focus_next_core.part.0+0xbe>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8001f62:	0020      	movs	r0, r4
 8001f64:	f000 fc1e 	bl	80027a4 <lv_indev_get_type>
        if(indev->group == g) {
 8001f68:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001f6a:	429e      	cmp	r6, r3
 8001f6c:	d1f4      	bne.n	8001f58 <focus_next_core.part.0+0x90>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8001f6e:	2802      	cmp	r0, #2
 8001f70:	d100      	bne.n	8001f74 <focus_next_core.part.0+0xac>
 8001f72:	e088      	b.n	8002086 <focus_next_core.part.0+0x1be>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8001f74:	0027      	movs	r7, r4
 8001f76:	2804      	cmp	r0, #4
 8001f78:	d1ee      	bne.n	8001f58 <focus_next_core.part.0+0x90>
        indev = lv_indev_get_next(indev);
 8001f7a:	0020      	movs	r0, r4
 8001f7c:	f00e fe82 	bl	8010c84 <lv_indev_get_next>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8001f80:	46a1      	mov	r9, r4
        indev = lv_indev_get_next(indev);
 8001f82:	1e04      	subs	r4, r0, #0
    while(indev) {
 8001f84:	d1ed      	bne.n	8001f62 <focus_next_core.part.0+0x9a>
    }

    if(indev_encoder) return indev_encoder;
 8001f86:	464b      	mov	r3, r9
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d068      	beq.n	800205e <focus_next_core.part.0+0x196>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8001f8c:	464a      	mov	r2, r9
 8001f8e:	210f      	movs	r1, #15
 8001f90:	4640      	mov	r0, r8
 8001f92:	f7ff fee3 	bl	8001d5c <lv_event_send>
        if(res != LV_RES_OK) return focus_changed;
 8001f96:	2801      	cmp	r0, #1
 8001f98:	d027      	beq.n	8001fea <focus_next_core.part.0+0x122>
                return focus_changed;
 8001f9a:	2000      	movs	r0, #0
}
 8001f9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f9e:	46bb      	mov	fp, r7
 8001fa0:	46b2      	mov	sl, r6
 8001fa2:	46a9      	mov	r9, r5
 8001fa4:	46a0      	mov	r8, r4
 8001fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(group->wrap || obj_sentinel == NULL) {
 8001fa8:	2208      	movs	r2, #8
 8001faa:	7e33      	ldrb	r3, [r6, #24]
 8001fac:	421a      	tst	r2, r3
 8001fae:	d10f      	bne.n	8001fd0 <focus_next_core.part.0+0x108>
 8001fb0:	2f00      	cmp	r7, #0
 8001fb2:	d1f2      	bne.n	8001f9a <focus_next_core.part.0+0xd2>
                if(!can_begin) return focus_changed;
 8001fb4:	465b      	mov	r3, fp
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0ef      	beq.n	8001f9a <focus_next_core.part.0+0xd2>
                obj_next  = begin(&group->obj_ll);
 8001fba:	0030      	movs	r0, r6
 8001fbc:	47c8      	blx	r9
 8001fbe:	0007      	movs	r7, r0
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 8001fc0:	2f00      	cmp	r7, #0
 8001fc2:	d0ea      	beq.n	8001f9a <focus_next_core.part.0+0xd2>
                can_begin = false;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	003d      	movs	r5, r7
 8001fc8:	469b      	mov	fp, r3
 8001fca:	e799      	b.n	8001f00 <focus_next_core.part.0+0x38>
        if(obj_sentinel == NULL) {
 8001fcc:	002f      	movs	r7, r5
 8001fce:	e78f      	b.n	8001ef0 <focus_next_core.part.0+0x28>
                if(!can_begin) return focus_changed;
 8001fd0:	465b      	mov	r3, fp
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0e1      	beq.n	8001f9a <focus_next_core.part.0+0xd2>
                obj_next  = begin(&group->obj_ll);
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	47c8      	blx	r9
                can_begin = false;
 8001fda:	2300      	movs	r3, #0
                obj_next  = begin(&group->obj_ll);
 8001fdc:	0005      	movs	r5, r0
                can_begin = false;
 8001fde:	469b      	mov	fp, r3
        if(obj_sentinel == NULL) {
 8001fe0:	2f00      	cmp	r7, #0
 8001fe2:	d000      	beq.n	8001fe6 <focus_next_core.part.0+0x11e>
 8001fe4:	e78a      	b.n	8001efc <focus_next_core.part.0+0x34>
                obj_next  = begin(&group->obj_ll);
 8001fe6:	0007      	movs	r7, r0
 8001fe8:	e7ea      	b.n	8001fc0 <focus_next_core.part.0+0xf8>
        lv_obj_invalidate(*group->obj_focus);
 8001fea:	68f3      	ldr	r3, [r6, #12]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	f004 faa7 	bl	8006540 <lv_obj_invalidate>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8001ff2:	2000      	movs	r0, #0
    group->obj_focus = obj_next;
 8001ff4:	60f5      	str	r5, [r6, #12]
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8001ff6:	682f      	ldr	r7, [r5, #0]
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8001ff8:	f00e fe44 	bl	8010c84 <lv_indev_get_next>
 8001ffc:	1e04      	subs	r4, r0, #0
    while(indev) {
 8001ffe:	d056      	beq.n	80020ae <focus_next_core.part.0+0x1e6>
    lv_indev_t * indev_encoder = NULL;
 8002000:	2300      	movs	r3, #0
    lv_indev_t * indev_group = NULL;
 8002002:	2500      	movs	r5, #0
    lv_indev_t * indev_encoder = NULL;
 8002004:	4698      	mov	r8, r3
 8002006:	e004      	b.n	8002012 <focus_next_core.part.0+0x14a>
        indev = lv_indev_get_next(indev);
 8002008:	0020      	movs	r0, r4
 800200a:	f00e fe3b 	bl	8010c84 <lv_indev_get_next>
 800200e:	1e04      	subs	r4, r0, #0
    while(indev) {
 8002010:	d010      	beq.n	8002034 <focus_next_core.part.0+0x16c>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8002012:	0020      	movs	r0, r4
 8002014:	f000 fbc6 	bl	80027a4 <lv_indev_get_type>
        if(indev->group == g) {
 8002018:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800201a:	429e      	cmp	r6, r3
 800201c:	d1f4      	bne.n	8002008 <focus_next_core.part.0+0x140>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 800201e:	2802      	cmp	r0, #2
 8002020:	d03b      	beq.n	800209a <focus_next_core.part.0+0x1d2>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8002022:	0025      	movs	r5, r4
 8002024:	2804      	cmp	r0, #4
 8002026:	d1ef      	bne.n	8002008 <focus_next_core.part.0+0x140>
        indev = lv_indev_get_next(indev);
 8002028:	0020      	movs	r0, r4
 800202a:	f00e fe2b 	bl	8010c84 <lv_indev_get_next>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 800202e:	46a0      	mov	r8, r4
        indev = lv_indev_get_next(indev);
 8002030:	1e04      	subs	r4, r0, #0
    while(indev) {
 8002032:	d1ee      	bne.n	8002012 <focus_next_core.part.0+0x14a>
    if(indev_encoder) return indev_encoder;
 8002034:	4643      	mov	r3, r8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01c      	beq.n	8002074 <focus_next_core.part.0+0x1ac>
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 800203a:	4642      	mov	r2, r8
 800203c:	210e      	movs	r1, #14
 800203e:	0038      	movs	r0, r7
 8002040:	f7ff fe8c 	bl	8001d5c <lv_event_send>
    if(res != LV_RES_OK) return focus_changed;
 8002044:	2801      	cmp	r0, #1
 8002046:	d1a8      	bne.n	8001f9a <focus_next_core.part.0+0xd2>
    lv_obj_invalidate(*group->obj_focus);
 8002048:	68f3      	ldr	r3, [r6, #12]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	f004 fa78 	bl	8006540 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8002050:	6933      	ldr	r3, [r6, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d030      	beq.n	80020b8 <focus_next_core.part.0+0x1f0>
 8002056:	0030      	movs	r0, r6
 8002058:	4798      	blx	r3
    return focus_changed;
 800205a:	2001      	movs	r0, #1
 800205c:	e79e      	b.n	8001f9c <focus_next_core.part.0+0xd4>
    if(indev_group) return indev_group;
 800205e:	2f00      	cmp	r7, #0
 8002060:	d00c      	beq.n	800207c <focus_next_core.part.0+0x1b4>
 8002062:	46b9      	mov	r9, r7
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8002064:	210f      	movs	r1, #15
 8002066:	464a      	mov	r2, r9
 8002068:	4640      	mov	r0, r8
 800206a:	f7ff fe77 	bl	8001d5c <lv_event_send>
        if(res != LV_RES_OK) return focus_changed;
 800206e:	2801      	cmp	r0, #1
 8002070:	d193      	bne.n	8001f9a <focus_next_core.part.0+0xd2>
 8002072:	e7ba      	b.n	8001fea <focus_next_core.part.0+0x122>
    if(indev_group) return indev_group;
 8002074:	2d00      	cmp	r5, #0
 8002076:	d01a      	beq.n	80020ae <focus_next_core.part.0+0x1e6>
 8002078:	46a8      	mov	r8, r5
 800207a:	e7de      	b.n	800203a <focus_next_core.part.0+0x172>

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
 800207c:	2000      	movs	r0, #0
 800207e:	f00e fe01 	bl	8010c84 <lv_indev_get_next>
 8002082:	4681      	mov	r9, r0
 8002084:	e782      	b.n	8001f8c <focus_next_core.part.0+0xc4>
 8002086:	46a1      	mov	r9, r4
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8002088:	210f      	movs	r1, #15
 800208a:	464a      	mov	r2, r9
 800208c:	4640      	mov	r0, r8
 800208e:	f7ff fe65 	bl	8001d5c <lv_event_send>
        if(res != LV_RES_OK) return focus_changed;
 8002092:	2801      	cmp	r0, #1
 8002094:	d000      	beq.n	8002098 <focus_next_core.part.0+0x1d0>
 8002096:	e780      	b.n	8001f9a <focus_next_core.part.0+0xd2>
 8002098:	e7a7      	b.n	8001fea <focus_next_core.part.0+0x122>
 800209a:	46a0      	mov	r8, r4
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 800209c:	210e      	movs	r1, #14
 800209e:	4642      	mov	r2, r8
 80020a0:	0038      	movs	r0, r7
 80020a2:	f7ff fe5b 	bl	8001d5c <lv_event_send>
    if(res != LV_RES_OK) return focus_changed;
 80020a6:	2801      	cmp	r0, #1
 80020a8:	d000      	beq.n	80020ac <focus_next_core.part.0+0x1e4>
 80020aa:	e776      	b.n	8001f9a <focus_next_core.part.0+0xd2>
 80020ac:	e7cc      	b.n	8002048 <focus_next_core.part.0+0x180>
    return lv_indev_get_next(NULL);
 80020ae:	2000      	movs	r0, #0
 80020b0:	f00e fde8 	bl	8010c84 <lv_indev_get_next>
 80020b4:	4680      	mov	r8, r0
 80020b6:	e7c0      	b.n	800203a <focus_next_core.part.0+0x172>
    return focus_changed;
 80020b8:	2001      	movs	r0, #1
 80020ba:	e76f      	b.n	8001f9c <focus_next_core.part.0+0xd4>

080020bc <lv_group_refocus>:
    g->wrap           = 1;
 80020bc:	2208      	movs	r2, #8
    uint8_t temp_wrap = g->wrap;
 80020be:	7e03      	ldrb	r3, [r0, #24]
{
 80020c0:	b570      	push	{r4, r5, r6, lr}
    uint8_t temp_wrap = g->wrap;
 80020c2:	071d      	lsls	r5, r3, #28
    g->wrap           = 1;
 80020c4:	4313      	orrs	r3, r2
{
 80020c6:	0004      	movs	r4, r0
    uint8_t temp_wrap = g->wrap;
 80020c8:	0fed      	lsrs	r5, r5, #31
    g->wrap           = 1;
 80020ca:	7603      	strb	r3, [r0, #24]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	075b      	lsls	r3, r3, #29
 80020d0:	d411      	bmi.n	80020f6 <lv_group_refocus+0x3a>
    if(group->frozen) return focus_changed;
 80020d2:	07d3      	lsls	r3, r2, #31
 80020d4:	d422      	bmi.n	800211c <lv_group_refocus+0x60>
 80020d6:	4a15      	ldr	r2, [pc, #84]	; (800212c <lv_group_refocus+0x70>)
 80020d8:	4915      	ldr	r1, [pc, #84]	; (8002130 <lv_group_refocus+0x74>)
 80020da:	f7ff fef5 	bl	8001ec8 <focus_next_core.part.0>
    if(group->edge_cb) {
 80020de:	6963      	ldr	r3, [r4, #20]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <lv_group_refocus+0x2c>
        if(!focus_changed)
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d01c      	beq.n	8002122 <lv_group_refocus+0x66>
    g->wrap = temp_wrap;
 80020e8:	2208      	movs	r2, #8
 80020ea:	7e23      	ldrb	r3, [r4, #24]
 80020ec:	00ed      	lsls	r5, r5, #3
 80020ee:	4393      	bics	r3, r2
 80020f0:	432b      	orrs	r3, r5
 80020f2:	7623      	strb	r3, [r4, #24]
}
 80020f4:	bd70      	pop	{r4, r5, r6, pc}
    if(group->frozen) return focus_changed;
 80020f6:	07d3      	lsls	r3, r2, #31
 80020f8:	d409      	bmi.n	800210e <lv_group_refocus+0x52>
 80020fa:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <lv_group_refocus+0x78>)
 80020fc:	490e      	ldr	r1, [pc, #56]	; (8002138 <lv_group_refocus+0x7c>)
 80020fe:	f7ff fee3 	bl	8001ec8 <focus_next_core.part.0>
    if(group->edge_cb) {
 8002102:	6963      	ldr	r3, [r4, #20]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0ef      	beq.n	80020e8 <lv_group_refocus+0x2c>
        if(!focus_changed)
 8002108:	2800      	cmp	r0, #0
 800210a:	d1ed      	bne.n	80020e8 <lv_group_refocus+0x2c>
 800210c:	e002      	b.n	8002114 <lv_group_refocus+0x58>
    if(group->edge_cb) {
 800210e:	6943      	ldr	r3, [r0, #20]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0e9      	beq.n	80020e8 <lv_group_refocus+0x2c>
            group->edge_cb(group, false);
 8002114:	2100      	movs	r1, #0
 8002116:	0020      	movs	r0, r4
 8002118:	4798      	blx	r3
 800211a:	e7e5      	b.n	80020e8 <lv_group_refocus+0x2c>
    if(group->edge_cb) {
 800211c:	6943      	ldr	r3, [r0, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0e2      	beq.n	80020e8 <lv_group_refocus+0x2c>
            group->edge_cb(group, true);
 8002122:	2101      	movs	r1, #1
 8002124:	0020      	movs	r0, r4
 8002126:	4798      	blx	r3
 8002128:	e7de      	b.n	80020e8 <lv_group_refocus+0x2c>
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	08011e65 	.word	0x08011e65
 8002130:	08011e4d 	.word	0x08011e4d
 8002134:	08011e6d 	.word	0x08011e6d
 8002138:	08011e59 	.word	0x08011e59

0800213c <lv_group_focus_obj.part.0>:
void lv_group_focus_obj(lv_obj_t * obj)
 800213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213e:	46ce      	mov	lr, r9
 8002140:	4647      	mov	r7, r8
 8002142:	b580      	push	{r7, lr}
 8002144:	0006      	movs	r6, r0
    lv_group_t * g = lv_obj_get_group(obj);
 8002146:	f002 ff91 	bl	800506c <lv_obj_get_group>
 800214a:	1e05      	subs	r5, r0, #0
    if(g == NULL) return;
 800214c:	d065      	beq.n	800221a <lv_group_focus_obj.part.0+0xde>
    if(g->frozen != 0) return;
 800214e:	7e03      	ldrb	r3, [r0, #24]
 8002150:	07da      	lsls	r2, r3, #31
 8002152:	d462      	bmi.n	800221a <lv_group_focus_obj.part.0+0xde>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8002154:	079a      	lsls	r2, r3, #30
 8002156:	d525      	bpl.n	80021a4 <lv_group_focus_obj.part.0+0x68>
    group->editing     = en_val;
 8002158:	2202      	movs	r2, #2
 800215a:	4393      	bics	r3, r2
 800215c:	7603      	strb	r3, [r0, #24]
    if(group->obj_focus == NULL) return NULL;
 800215e:	68c3      	ldr	r3, [r0, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01f      	beq.n	80021a4 <lv_group_focus_obj.part.0+0x68>
    return *group->obj_focus;
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4698      	mov	r8, r3
    if(focused) {
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01b      	beq.n	80021a4 <lv_group_focus_obj.part.0+0x68>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800216c:	2000      	movs	r0, #0
 800216e:	f00e fd89 	bl	8010c84 <lv_indev_get_next>
    lv_indev_t * indev_encoder = NULL;
 8002172:	2300      	movs	r3, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8002174:	0004      	movs	r4, r0
    lv_indev_t * indev_group = NULL;
 8002176:	2700      	movs	r7, #0
    lv_indev_t * indev_encoder = NULL;
 8002178:	4699      	mov	r9, r3
    while(indev) {
 800217a:	2800      	cmp	r0, #0
 800217c:	d15c      	bne.n	8002238 <lv_group_focus_obj.part.0+0xfc>
    return lv_indev_get_next(NULL);
 800217e:	2000      	movs	r0, #0
 8002180:	f00e fd80 	bl	8010c84 <lv_indev_get_next>
 8002184:	4681      	mov	r9, r0
 8002186:	e003      	b.n	8002190 <lv_group_focus_obj.part.0+0x54>
    if(indev_encoder) return indev_encoder;
 8002188:	464b      	mov	r3, r9
 800218a:	2b00      	cmp	r3, #0
 800218c:	d100      	bne.n	8002190 <lv_group_focus_obj.part.0+0x54>
 800218e:	e098      	b.n	80022c2 <lv_group_focus_obj.part.0+0x186>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8002190:	464a      	mov	r2, r9
 8002192:	210e      	movs	r1, #14
 8002194:	4640      	mov	r0, r8
 8002196:	f7ff fde1 	bl	8001d5c <lv_event_send>
        if(res != LV_RES_OK) return;
 800219a:	2801      	cmp	r0, #1
 800219c:	d102      	bne.n	80021a4 <lv_group_focus_obj.part.0+0x68>
        lv_obj_invalidate(focused);
 800219e:	4640      	mov	r0, r8
 80021a0:	f004 f9ce 	bl	8006540 <lv_obj_invalidate>
    _LV_LL_READ(&g->obj_ll, i) {
 80021a4:	0028      	movs	r0, r5
 80021a6:	f00f fe51 	bl	8011e4c <_lv_ll_get_head>
 80021aa:	1e04      	subs	r4, r0, #0
 80021ac:	d106      	bne.n	80021bc <lv_group_focus_obj.part.0+0x80>
 80021ae:	e034      	b.n	800221a <lv_group_focus_obj.part.0+0xde>
 80021b0:	0021      	movs	r1, r4
 80021b2:	0028      	movs	r0, r5
 80021b4:	f00f fe56 	bl	8011e64 <_lv_ll_get_next>
 80021b8:	1e04      	subs	r4, r0, #0
 80021ba:	d02e      	beq.n	800221a <lv_group_focus_obj.part.0+0xde>
        if(*i == obj) {
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	429e      	cmp	r6, r3
 80021c0:	d1f6      	bne.n	80021b0 <lv_group_focus_obj.part.0+0x74>
            if(g->obj_focus != NULL && obj != *g->obj_focus) {  /*Do not defocus if the same object needs to be focused again*/
 80021c2:	68eb      	ldr	r3, [r5, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d042      	beq.n	800224e <lv_group_focus_obj.part.0+0x112>
 80021c8:	681f      	ldr	r7, [r3, #0]
 80021ca:	42be      	cmp	r6, r7
 80021cc:	d03f      	beq.n	800224e <lv_group_focus_obj.part.0+0x112>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80021ce:	2000      	movs	r0, #0
 80021d0:	f00e fd58 	bl	8010c84 <lv_indev_get_next>
    lv_indev_t * indev_group = NULL;
 80021d4:	2300      	movs	r3, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80021d6:	1e06      	subs	r6, r0, #0
    lv_indev_t * indev_group = NULL;
 80021d8:	4698      	mov	r8, r3
    lv_indev_t * indev_encoder = NULL;
 80021da:	4699      	mov	r9, r3
    while(indev) {
 80021dc:	d105      	bne.n	80021ea <lv_group_focus_obj.part.0+0xae>
 80021de:	e085      	b.n	80022ec <lv_group_focus_obj.part.0+0x1b0>
        indev = lv_indev_get_next(indev);
 80021e0:	0030      	movs	r0, r6
 80021e2:	f00e fd4f 	bl	8010c84 <lv_indev_get_next>
 80021e6:	1e06      	subs	r6, r0, #0
    while(indev) {
 80021e8:	d00d      	beq.n	8002206 <lv_group_focus_obj.part.0+0xca>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 80021ea:	0030      	movs	r0, r6
 80021ec:	f000 fada 	bl	80027a4 <lv_indev_get_type>
        if(indev->group == g) {
 80021f0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80021f2:	429d      	cmp	r5, r3
 80021f4:	d1f4      	bne.n	80021e0 <lv_group_focus_obj.part.0+0xa4>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 80021f6:	2802      	cmp	r0, #2
 80021f8:	d100      	bne.n	80021fc <lv_group_focus_obj.part.0+0xc0>
 80021fa:	e075      	b.n	80022e8 <lv_group_focus_obj.part.0+0x1ac>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 80021fc:	46b0      	mov	r8, r6
 80021fe:	2804      	cmp	r0, #4
 8002200:	d1ee      	bne.n	80021e0 <lv_group_focus_obj.part.0+0xa4>
 8002202:	46b1      	mov	r9, r6
 8002204:	e7ec      	b.n	80021e0 <lv_group_focus_obj.part.0+0xa4>
    if(indev_encoder) return indev_encoder;
 8002206:	464b      	mov	r3, r9
 8002208:	2b00      	cmp	r3, #0
 800220a:	d063      	beq.n	80022d4 <lv_group_focus_obj.part.0+0x198>
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 800220c:	464a      	mov	r2, r9
 800220e:	210f      	movs	r1, #15
 8002210:	0038      	movs	r0, r7
 8002212:	f7ff fda3 	bl	8001d5c <lv_event_send>
                if(res != LV_RES_OK) return;
 8002216:	2801      	cmp	r0, #1
 8002218:	d015      	beq.n	8002246 <lv_group_focus_obj.part.0+0x10a>
}
 800221a:	bcc0      	pop	{r6, r7}
 800221c:	46b9      	mov	r9, r7
 800221e:	46b0      	mov	r8, r6
 8002220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8002222:	2802      	cmp	r0, #2
 8002224:	d049      	beq.n	80022ba <lv_group_focus_obj.part.0+0x17e>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8002226:	0027      	movs	r7, r4
 8002228:	2804      	cmp	r0, #4
 800222a:	d100      	bne.n	800222e <lv_group_focus_obj.part.0+0xf2>
 800222c:	46a1      	mov	r9, r4
        indev = lv_indev_get_next(indev);
 800222e:	0020      	movs	r0, r4
 8002230:	f00e fd28 	bl	8010c84 <lv_indev_get_next>
 8002234:	1e04      	subs	r4, r0, #0
    while(indev) {
 8002236:	d0a7      	beq.n	8002188 <lv_group_focus_obj.part.0+0x4c>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8002238:	0020      	movs	r0, r4
 800223a:	f000 fab3 	bl	80027a4 <lv_indev_get_type>
        if(indev->group == g) {
 800223e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002240:	429d      	cmp	r5, r3
 8002242:	d1f4      	bne.n	800222e <lv_group_focus_obj.part.0+0xf2>
 8002244:	e7ed      	b.n	8002222 <lv_group_focus_obj.part.0+0xe6>
                lv_obj_invalidate(*g->obj_focus);
 8002246:	68eb      	ldr	r3, [r5, #12]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	f004 f979 	bl	8006540 <lv_obj_invalidate>
                if(g->focus_cb) g->focus_cb(g);
 800224e:	692b      	ldr	r3, [r5, #16]
            g->obj_focus = i;
 8002250:	60ec      	str	r4, [r5, #12]
                if(g->focus_cb) g->focus_cb(g);
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <lv_group_focus_obj.part.0+0x120>
 8002256:	0028      	movs	r0, r5
 8002258:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, get_indev(g));
 800225a:	68ec      	ldr	r4, [r5, #12]
 800225c:	6823      	ldr	r3, [r4, #0]
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800225e:	2000      	movs	r0, #0
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, get_indev(g));
 8002260:	4698      	mov	r8, r3
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8002262:	f00e fd0f 	bl	8010c84 <lv_indev_get_next>
    lv_indev_t * indev_group = NULL;
 8002266:	2600      	movs	r6, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8002268:	0004      	movs	r4, r0
    lv_indev_t * indev_encoder = NULL;
 800226a:	2700      	movs	r7, #0
    while(indev) {
 800226c:	2800      	cmp	r0, #0
 800226e:	d105      	bne.n	800227c <lv_group_focus_obj.part.0+0x140>
 8002270:	e035      	b.n	80022de <lv_group_focus_obj.part.0+0x1a2>
        indev = lv_indev_get_next(indev);
 8002272:	0020      	movs	r0, r4
 8002274:	f00e fd06 	bl	8010c84 <lv_indev_get_next>
 8002278:	1e04      	subs	r4, r0, #0
    while(indev) {
 800227a:	d010      	beq.n	800229e <lv_group_focus_obj.part.0+0x162>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 800227c:	0020      	movs	r0, r4
 800227e:	f000 fa91 	bl	80027a4 <lv_indev_get_type>
        if(indev->group == g) {
 8002282:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002284:	429d      	cmp	r5, r3
 8002286:	d1f4      	bne.n	8002272 <lv_group_focus_obj.part.0+0x136>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8002288:	2802      	cmp	r0, #2
 800228a:	d018      	beq.n	80022be <lv_group_focus_obj.part.0+0x182>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 800228c:	0026      	movs	r6, r4
 800228e:	2804      	cmp	r0, #4
 8002290:	d1ef      	bne.n	8002272 <lv_group_focus_obj.part.0+0x136>
        indev = lv_indev_get_next(indev);
 8002292:	0020      	movs	r0, r4
 8002294:	f00e fcf6 	bl	8010c84 <lv_indev_get_next>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8002298:	0027      	movs	r7, r4
        indev = lv_indev_get_next(indev);
 800229a:	1e04      	subs	r4, r0, #0
    while(indev) {
 800229c:	d1ee      	bne.n	800227c <lv_group_focus_obj.part.0+0x140>
    if(indev_encoder) return indev_encoder;
 800229e:	2f00      	cmp	r7, #0
 80022a0:	d014      	beq.n	80022cc <lv_group_focus_obj.part.0+0x190>
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, get_indev(g));
 80022a2:	003a      	movs	r2, r7
 80022a4:	210e      	movs	r1, #14
 80022a6:	4640      	mov	r0, r8
 80022a8:	f7ff fd58 	bl	8001d5c <lv_event_send>
                if(res != LV_RES_OK) return;
 80022ac:	2801      	cmp	r0, #1
 80022ae:	d1b4      	bne.n	800221a <lv_group_focus_obj.part.0+0xde>
                lv_obj_invalidate(*g->obj_focus);
 80022b0:	68eb      	ldr	r3, [r5, #12]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	f004 f944 	bl	8006540 <lv_obj_invalidate>
 80022b8:	e7af      	b.n	800221a <lv_group_focus_obj.part.0+0xde>
 80022ba:	46a1      	mov	r9, r4
 80022bc:	e768      	b.n	8002190 <lv_group_focus_obj.part.0+0x54>
 80022be:	0027      	movs	r7, r4
 80022c0:	e7ef      	b.n	80022a2 <lv_group_focus_obj.part.0+0x166>
    if(indev_group) return indev_group;
 80022c2:	2f00      	cmp	r7, #0
 80022c4:	d100      	bne.n	80022c8 <lv_group_focus_obj.part.0+0x18c>
 80022c6:	e75a      	b.n	800217e <lv_group_focus_obj.part.0+0x42>
 80022c8:	46b9      	mov	r9, r7
 80022ca:	e761      	b.n	8002190 <lv_group_focus_obj.part.0+0x54>
 80022cc:	2e00      	cmp	r6, #0
 80022ce:	d006      	beq.n	80022de <lv_group_focus_obj.part.0+0x1a2>
 80022d0:	0037      	movs	r7, r6
 80022d2:	e7e6      	b.n	80022a2 <lv_group_focus_obj.part.0+0x166>
 80022d4:	4643      	mov	r3, r8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <lv_group_focus_obj.part.0+0x1b0>
 80022da:	46c1      	mov	r9, r8
 80022dc:	e796      	b.n	800220c <lv_group_focus_obj.part.0+0xd0>
    return lv_indev_get_next(NULL);
 80022de:	2000      	movs	r0, #0
 80022e0:	f00e fcd0 	bl	8010c84 <lv_indev_get_next>
 80022e4:	0007      	movs	r7, r0
 80022e6:	e7dc      	b.n	80022a2 <lv_group_focus_obj.part.0+0x166>
 80022e8:	46b1      	mov	r9, r6
 80022ea:	e78f      	b.n	800220c <lv_group_focus_obj.part.0+0xd0>
 80022ec:	2000      	movs	r0, #0
 80022ee:	f00e fcc9 	bl	8010c84 <lv_indev_get_next>
 80022f2:	4681      	mov	r9, r0
 80022f4:	e78a      	b.n	800220c <lv_group_focus_obj.part.0+0xd0>
 80022f6:	46c0      	nop			; (mov r8, r8)

080022f8 <_lv_group_init>:
{
 80022f8:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 80022fa:	211c      	movs	r1, #28
 80022fc:	4801      	ldr	r0, [pc, #4]	; (8002304 <_lv_group_init+0xc>)
 80022fe:	f00f fd43 	bl	8011d88 <_lv_ll_init>
}
 8002302:	bd10      	pop	{r4, pc}
 8002304:	20003380 	.word	0x20003380

08002308 <lv_group_create>:
{
 8002308:	b510      	push	{r4, lr}
    lv_group_t * group = _lv_ll_ins_head(&LV_GC_ROOT(_lv_group_ll));
 800230a:	480a      	ldr	r0, [pc, #40]	; (8002334 <lv_group_create+0x2c>)
 800230c:	f00f fd44 	bl	8011d98 <_lv_ll_ins_head>
 8002310:	1e04      	subs	r4, r0, #0
    LV_ASSERT_MALLOC(group);
 8002312:	d00e      	beq.n	8002332 <lv_group_create+0x2a>
    _lv_ll_init(&group->obj_ll, sizeof(lv_obj_t *));
 8002314:	2104      	movs	r1, #4
 8002316:	f00f fd37 	bl	8011d88 <_lv_ll_init>
    group->obj_focus      = NULL;
 800231a:	2300      	movs	r3, #0
    group->frozen         = 0;
 800231c:	220f      	movs	r2, #15
    group->obj_focus      = NULL;
 800231e:	60e3      	str	r3, [r4, #12]
    group->focus_cb       = NULL;
 8002320:	6123      	str	r3, [r4, #16]
    group->edge_cb        = NULL;
 8002322:	6163      	str	r3, [r4, #20]
    group->frozen         = 0;
 8002324:	7e23      	ldrb	r3, [r4, #24]
}
 8002326:	0020      	movs	r0, r4
    group->frozen         = 0;
 8002328:	4393      	bics	r3, r2
 800232a:	220c      	movs	r2, #12
 800232c:	4313      	orrs	r3, r2
 800232e:	7623      	strb	r3, [r4, #24]
}
 8002330:	bd10      	pop	{r4, pc}
    LV_ASSERT_MALLOC(group);
 8002332:	e7fe      	b.n	8002332 <lv_group_create+0x2a>
 8002334:	20003380 	.word	0x20003380

08002338 <lv_group_set_default>:
    default_group = group;
 8002338:	4b01      	ldr	r3, [pc, #4]	; (8002340 <lv_group_set_default+0x8>)
 800233a:	6018      	str	r0, [r3, #0]
}
 800233c:	4770      	bx	lr
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	200031e8 	.word	0x200031e8

08002344 <lv_group_get_default>:
    return default_group;
 8002344:	4b01      	ldr	r3, [pc, #4]	; (800234c <lv_group_get_default+0x8>)
 8002346:	6818      	ldr	r0, [r3, #0]
}
 8002348:	4770      	bx	lr
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	200031e8 	.word	0x200031e8

08002350 <lv_group_add_obj>:
{
 8002350:	b570      	push	{r4, r5, r6, lr}
 8002352:	0004      	movs	r4, r0
 8002354:	000d      	movs	r5, r1
    if(group == NULL) return;
 8002356:	2800      	cmp	r0, #0
 8002358:	d00c      	beq.n	8002374 <lv_group_add_obj+0x24>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 800235a:	f00f fd77 	bl	8011e4c <_lv_ll_get_head>
 800235e:	1e01      	subs	r1, r0, #0
 8002360:	d105      	bne.n	800236e <lv_group_add_obj+0x1e>
 8002362:	e008      	b.n	8002376 <lv_group_add_obj+0x26>
 8002364:	0020      	movs	r0, r4
 8002366:	f00f fd7d 	bl	8011e64 <_lv_ll_get_next>
 800236a:	1e01      	subs	r1, r0, #0
 800236c:	d003      	beq.n	8002376 <lv_group_add_obj+0x26>
        if((*obj_i) == obj) {
 800236e:	680b      	ldr	r3, [r1, #0]
 8002370:	42ab      	cmp	r3, r5
 8002372:	d1f7      	bne.n	8002364 <lv_group_add_obj+0x14>
}
 8002374:	bd70      	pop	{r4, r5, r6, pc}
    lv_group_t * group_cur = lv_obj_get_group(obj);
 8002376:	0028      	movs	r0, r5
 8002378:	f002 fe78 	bl	800506c <lv_obj_get_group>
    if(group_cur) {
 800237c:	2800      	cmp	r0, #0
 800237e:	d01a      	beq.n	80023b6 <lv_group_add_obj+0x66>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 8002380:	68ab      	ldr	r3, [r5, #8]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	2a00      	cmp	r2, #0
 8002386:	d003      	beq.n	8002390 <lv_group_add_obj+0x40>
 8002388:	68d2      	ldr	r2, [r2, #12]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	42aa      	cmp	r2, r5
 800238e:	d010      	beq.n	80023b2 <lv_group_add_obj+0x62>
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 8002390:	0020      	movs	r0, r4
    obj->spec_attr->group_p = group;
 8002392:	609c      	str	r4, [r3, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 8002394:	f00f fd18 	bl	8011dc8 <_lv_ll_ins_tail>
 8002398:	1e06      	subs	r6, r0, #0
    LV_ASSERT_MALLOC(next);
 800239a:	d009      	beq.n	80023b0 <lv_group_add_obj+0x60>
    *next = obj;
 800239c:	6005      	str	r5, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 800239e:	0020      	movs	r0, r4
 80023a0:	f00f fd54 	bl	8011e4c <_lv_ll_get_head>
 80023a4:	4286      	cmp	r6, r0
 80023a6:	d1e5      	bne.n	8002374 <lv_group_add_obj+0x24>
        lv_group_refocus(group);
 80023a8:	0020      	movs	r0, r4
 80023aa:	f7ff fe87 	bl	80020bc <lv_group_refocus>
    LV_LOG_TRACE("finished");
 80023ae:	e7e1      	b.n	8002374 <lv_group_add_obj+0x24>
    LV_ASSERT_MALLOC(next);
 80023b0:	e7fe      	b.n	80023b0 <lv_group_add_obj+0x60>
            lv_group_refocus(group_cur);
 80023b2:	f7ff fe83 	bl	80020bc <lv_group_refocus>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 80023b6:	68ab      	ldr	r3, [r5, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1e9      	bne.n	8002390 <lv_group_add_obj+0x40>
 80023bc:	0028      	movs	r0, r5
 80023be:	f002 fe5b 	bl	8005078 <lv_obj_allocate_spec_attr>
    obj->spec_attr->group_p = group;
 80023c2:	68ab      	ldr	r3, [r5, #8]
 80023c4:	e7e4      	b.n	8002390 <lv_group_add_obj+0x40>
 80023c6:	46c0      	nop			; (mov r8, r8)

080023c8 <lv_group_remove_obj>:
{
 80023c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ca:	46ce      	mov	lr, r9
 80023cc:	4647      	mov	r7, r8
 80023ce:	b580      	push	{r7, lr}
 80023d0:	0006      	movs	r6, r0
    lv_group_t * g = lv_obj_get_group(obj);
 80023d2:	f002 fe4b 	bl	800506c <lv_obj_get_group>
 80023d6:	1e05      	subs	r5, r0, #0
    if(g == NULL) return;
 80023d8:	d01e      	beq.n	8002418 <lv_group_remove_obj+0x50>
    if(g->obj_focus && *g->obj_focus == obj) {
 80023da:	68c3      	ldr	r3, [r0, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <lv_group_remove_obj+0x1e>
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	42b3      	cmp	r3, r6
 80023e4:	d01c      	beq.n	8002420 <lv_group_remove_obj+0x58>
    _LV_LL_READ(&g->obj_ll, i) {
 80023e6:	0028      	movs	r0, r5
 80023e8:	f00f fd30 	bl	8011e4c <_lv_ll_get_head>
 80023ec:	1e04      	subs	r4, r0, #0
 80023ee:	d104      	bne.n	80023fa <lv_group_remove_obj+0x32>
 80023f0:	e012      	b.n	8002418 <lv_group_remove_obj+0x50>
 80023f2:	f00f fd37 	bl	8011e64 <_lv_ll_get_next>
 80023f6:	1e04      	subs	r4, r0, #0
 80023f8:	d00e      	beq.n	8002418 <lv_group_remove_obj+0x50>
        if(*i == obj) {
 80023fa:	6823      	ldr	r3, [r4, #0]
            _lv_ll_remove(&g->obj_ll, i);
 80023fc:	0021      	movs	r1, r4
 80023fe:	0028      	movs	r0, r5
        if(*i == obj) {
 8002400:	42b3      	cmp	r3, r6
 8002402:	d1f6      	bne.n	80023f2 <lv_group_remove_obj+0x2a>
            _lv_ll_remove(&g->obj_ll, i);
 8002404:	f00f fcf8 	bl	8011df8 <_lv_ll_remove>
            lv_mem_free(i);
 8002408:	0020      	movs	r0, r4
 800240a:	f00f fdf1 	bl	8011ff0 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 800240e:	68b3      	ldr	r3, [r6, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <lv_group_remove_obj+0x50>
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
}
 8002418:	bcc0      	pop	{r6, r7}
 800241a:	46b9      	mov	r9, r7
 800241c:	46b0      	mov	r8, r6
 800241e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(g->frozen) g->frozen = 0;
 8002420:	2201      	movs	r2, #1
 8002422:	7e03      	ldrb	r3, [r0, #24]
 8002424:	421a      	tst	r2, r3
 8002426:	d001      	beq.n	800242c <lv_group_remove_obj+0x64>
 8002428:	4393      	bics	r3, r2
 800242a:	7603      	strb	r3, [r0, #24]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 800242c:	0028      	movs	r0, r5
 800242e:	f00f fd0d 	bl	8011e4c <_lv_ll_get_head>
 8002432:	68ea      	ldr	r2, [r5, #12]
 8002434:	4282      	cmp	r2, r0
 8002436:	d037      	beq.n	80024a8 <lv_group_remove_obj+0xe0>
    g->wrap           = 1;
 8002438:	2108      	movs	r1, #8
    uint8_t temp_wrap = g->wrap;
 800243a:	7e2b      	ldrb	r3, [r5, #24]
 800243c:	071c      	lsls	r4, r3, #28
    g->wrap           = 1;
 800243e:	430b      	orrs	r3, r1
    uint8_t temp_wrap = g->wrap;
 8002440:	0fe4      	lsrs	r4, r4, #31
    g->wrap           = 1;
 8002442:	762b      	strb	r3, [r5, #24]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8002444:	b2d9      	uxtb	r1, r3
 8002446:	075b      	lsls	r3, r3, #29
 8002448:	d410      	bmi.n	800246c <lv_group_remove_obj+0xa4>
    if(group->frozen) return focus_changed;
 800244a:	07cb      	lsls	r3, r1, #31
 800244c:	d454      	bmi.n	80024f8 <lv_group_remove_obj+0x130>
 800244e:	0028      	movs	r0, r5
 8002450:	4a36      	ldr	r2, [pc, #216]	; (800252c <lv_group_remove_obj+0x164>)
 8002452:	4937      	ldr	r1, [pc, #220]	; (8002530 <lv_group_remove_obj+0x168>)
 8002454:	f7ff fd38 	bl	8001ec8 <focus_next_core.part.0>
    if(group->edge_cb) {
 8002458:	696b      	ldr	r3, [r5, #20]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d015      	beq.n	800248a <lv_group_remove_obj+0xc2>
        if(!focus_changed)
 800245e:	2800      	cmp	r0, #0
 8002460:	d113      	bne.n	800248a <lv_group_remove_obj+0xc2>
            group->edge_cb(group, true);
 8002462:	2101      	movs	r1, #1
 8002464:	0028      	movs	r0, r5
 8002466:	4798      	blx	r3
    if(g->obj_focus && *g->obj_focus == obj) {
 8002468:	68ea      	ldr	r2, [r5, #12]
 800246a:	e00f      	b.n	800248c <lv_group_remove_obj+0xc4>
    if(group->frozen) return focus_changed;
 800246c:	07cb      	lsls	r3, r1, #31
 800246e:	d43f      	bmi.n	80024f0 <lv_group_remove_obj+0x128>
 8002470:	0028      	movs	r0, r5
 8002472:	4a30      	ldr	r2, [pc, #192]	; (8002534 <lv_group_remove_obj+0x16c>)
 8002474:	4930      	ldr	r1, [pc, #192]	; (8002538 <lv_group_remove_obj+0x170>)
 8002476:	f7ff fd27 	bl	8001ec8 <focus_next_core.part.0>
    if(group->edge_cb) {
 800247a:	696b      	ldr	r3, [r5, #20]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d004      	beq.n	800248a <lv_group_remove_obj+0xc2>
        if(!focus_changed)
 8002480:	2800      	cmp	r0, #0
 8002482:	d102      	bne.n	800248a <lv_group_remove_obj+0xc2>
            group->edge_cb(group, false);
 8002484:	2100      	movs	r1, #0
 8002486:	0028      	movs	r0, r5
 8002488:	4798      	blx	r3
    if(g->obj_focus && *g->obj_focus == obj) {
 800248a:	68ea      	ldr	r2, [r5, #12]
    g->wrap = temp_wrap;
 800248c:	2108      	movs	r1, #8
 800248e:	7e2b      	ldrb	r3, [r5, #24]
 8002490:	00e4      	lsls	r4, r4, #3
 8002492:	438b      	bics	r3, r1
 8002494:	4323      	orrs	r3, r4
 8002496:	762b      	strb	r3, [r5, #24]
    if(g->obj_focus && *g->obj_focus == obj) {
 8002498:	2a00      	cmp	r2, #0
 800249a:	d0a4      	beq.n	80023e6 <lv_group_remove_obj+0x1e>
 800249c:	6813      	ldr	r3, [r2, #0]
 800249e:	429e      	cmp	r6, r3
 80024a0:	d1a1      	bne.n	80023e6 <lv_group_remove_obj+0x1e>
        g->obj_focus = NULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60eb      	str	r3, [r5, #12]
 80024a6:	e79e      	b.n	80023e6 <lv_group_remove_obj+0x1e>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 80024a8:	0028      	movs	r0, r5
 80024aa:	f00f fcd5 	bl	8011e58 <_lv_ll_get_tail>
 80024ae:	68ea      	ldr	r2, [r5, #12]
 80024b0:	4290      	cmp	r0, r2
 80024b2:	d1c1      	bne.n	8002438 <lv_group_remove_obj+0x70>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 80024b4:	6803      	ldr	r3, [r0, #0]
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80024b6:	2000      	movs	r0, #0
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 80024b8:	4699      	mov	r9, r3
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80024ba:	f00e fbe3 	bl	8010c84 <lv_indev_get_next>
    lv_indev_t * indev_group = NULL;
 80024be:	2300      	movs	r3, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80024c0:	0004      	movs	r4, r0
    lv_indev_t * indev_group = NULL;
 80024c2:	4698      	mov	r8, r3
    lv_indev_t * indev_encoder = NULL;
 80024c4:	2700      	movs	r7, #0
    while(indev) {
 80024c6:	2800      	cmp	r0, #0
 80024c8:	d105      	bne.n	80024d6 <lv_group_remove_obj+0x10e>
 80024ca:	e029      	b.n	8002520 <lv_group_remove_obj+0x158>
        indev = lv_indev_get_next(indev);
 80024cc:	0020      	movs	r0, r4
 80024ce:	f00e fbd9 	bl	8010c84 <lv_indev_get_next>
 80024d2:	1e04      	subs	r4, r0, #0
    while(indev) {
 80024d4:	d014      	beq.n	8002500 <lv_group_remove_obj+0x138>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 80024d6:	0020      	movs	r0, r4
 80024d8:	f000 f964 	bl	80027a4 <lv_indev_get_type>
        if(indev->group == g) {
 80024dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80024de:	429d      	cmp	r5, r3
 80024e0:	d1f4      	bne.n	80024cc <lv_group_remove_obj+0x104>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 80024e2:	2802      	cmp	r0, #2
 80024e4:	d015      	beq.n	8002512 <lv_group_remove_obj+0x14a>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 80024e6:	46a0      	mov	r8, r4
 80024e8:	2804      	cmp	r0, #4
 80024ea:	d1ef      	bne.n	80024cc <lv_group_remove_obj+0x104>
 80024ec:	0027      	movs	r7, r4
 80024ee:	e7ed      	b.n	80024cc <lv_group_remove_obj+0x104>
    if(group->edge_cb) {
 80024f0:	696b      	ldr	r3, [r5, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1c6      	bne.n	8002484 <lv_group_remove_obj+0xbc>
 80024f6:	e7c9      	b.n	800248c <lv_group_remove_obj+0xc4>
    if(group->edge_cb) {
 80024f8:	696b      	ldr	r3, [r5, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1b1      	bne.n	8002462 <lv_group_remove_obj+0x9a>
 80024fe:	e7c5      	b.n	800248c <lv_group_remove_obj+0xc4>
    if(indev_encoder) return indev_encoder;
 8002500:	2f00      	cmp	r7, #0
 8002502:	d008      	beq.n	8002516 <lv_group_remove_obj+0x14e>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8002504:	003a      	movs	r2, r7
 8002506:	210f      	movs	r1, #15
 8002508:	4648      	mov	r0, r9
 800250a:	f7ff fc27 	bl	8001d5c <lv_event_send>
    if(g->obj_focus && *g->obj_focus == obj) {
 800250e:	68ea      	ldr	r2, [r5, #12]
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8002510:	e7c2      	b.n	8002498 <lv_group_remove_obj+0xd0>
 8002512:	0027      	movs	r7, r4
 8002514:	e7f6      	b.n	8002504 <lv_group_remove_obj+0x13c>
    if(indev_group) return indev_group;
 8002516:	4643      	mov	r3, r8
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <lv_group_remove_obj+0x158>
 800251c:	4647      	mov	r7, r8
 800251e:	e7f1      	b.n	8002504 <lv_group_remove_obj+0x13c>
    return lv_indev_get_next(NULL);
 8002520:	2000      	movs	r0, #0
 8002522:	f00e fbaf 	bl	8010c84 <lv_indev_get_next>
 8002526:	0007      	movs	r7, r0
 8002528:	e7ec      	b.n	8002504 <lv_group_remove_obj+0x13c>
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	08011e65 	.word	0x08011e65
 8002530:	08011e4d 	.word	0x08011e4d
 8002534:	08011e6d 	.word	0x08011e6d
 8002538:	08011e59 	.word	0x08011e59

0800253c <lv_group_focus_obj>:
{
 800253c:	b510      	push	{r4, lr}
    if(obj == NULL) return;
 800253e:	2800      	cmp	r0, #0
 8002540:	d001      	beq.n	8002546 <lv_group_focus_obj+0xa>
 8002542:	f7ff fdfb 	bl	800213c <lv_group_focus_obj.part.0>
}
 8002546:	bd10      	pop	{r4, pc}

08002548 <lv_group_focus_next>:
    if(group->frozen) return focus_changed;
 8002548:	7e03      	ldrb	r3, [r0, #24]
{
 800254a:	b510      	push	{r4, lr}
 800254c:	0004      	movs	r4, r0
    if(group->frozen) return focus_changed;
 800254e:	07db      	lsls	r3, r3, #31
 8002550:	d409      	bmi.n	8002566 <lv_group_focus_next+0x1e>
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <lv_group_focus_next+0x2c>)
 8002554:	4908      	ldr	r1, [pc, #32]	; (8002578 <lv_group_focus_next+0x30>)
 8002556:	f7ff fcb7 	bl	8001ec8 <focus_next_core.part.0>
    if(group->edge_cb) {
 800255a:	6963      	ldr	r3, [r4, #20]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <lv_group_focus_next+0x1c>
        if(!focus_changed)
 8002560:	2800      	cmp	r0, #0
 8002562:	d003      	beq.n	800256c <lv_group_focus_next+0x24>
}
 8002564:	bd10      	pop	{r4, pc}
    if(group->edge_cb) {
 8002566:	6943      	ldr	r3, [r0, #20]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0fb      	beq.n	8002564 <lv_group_focus_next+0x1c>
            group->edge_cb(group, true);
 800256c:	2101      	movs	r1, #1
 800256e:	0020      	movs	r0, r4
 8002570:	4798      	blx	r3
}
 8002572:	e7f7      	b.n	8002564 <lv_group_focus_next+0x1c>
 8002574:	08011e65 	.word	0x08011e65
 8002578:	08011e4d 	.word	0x08011e4d

0800257c <lv_group_focus_prev>:
    if(group->frozen) return focus_changed;
 800257c:	7e03      	ldrb	r3, [r0, #24]
{
 800257e:	b510      	push	{r4, lr}
 8002580:	0004      	movs	r4, r0
    if(group->frozen) return focus_changed;
 8002582:	07db      	lsls	r3, r3, #31
 8002584:	d409      	bmi.n	800259a <lv_group_focus_prev+0x1e>
 8002586:	4a08      	ldr	r2, [pc, #32]	; (80025a8 <lv_group_focus_prev+0x2c>)
 8002588:	4908      	ldr	r1, [pc, #32]	; (80025ac <lv_group_focus_prev+0x30>)
 800258a:	f7ff fc9d 	bl	8001ec8 <focus_next_core.part.0>
    if(group->edge_cb) {
 800258e:	6963      	ldr	r3, [r4, #20]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <lv_group_focus_prev+0x1c>
        if(!focus_changed)
 8002594:	2800      	cmp	r0, #0
 8002596:	d003      	beq.n	80025a0 <lv_group_focus_prev+0x24>
}
 8002598:	bd10      	pop	{r4, pc}
    if(group->edge_cb) {
 800259a:	6943      	ldr	r3, [r0, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0fb      	beq.n	8002598 <lv_group_focus_prev+0x1c>
            group->edge_cb(group, false);
 80025a0:	2100      	movs	r1, #0
 80025a2:	0020      	movs	r0, r4
 80025a4:	4798      	blx	r3
}
 80025a6:	e7f7      	b.n	8002598 <lv_group_focus_prev+0x1c>
 80025a8:	08011e6d 	.word	0x08011e6d
 80025ac:	08011e59 	.word	0x08011e59

080025b0 <lv_group_send_data>:
{
 80025b0:	b510      	push	{r4, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	9101      	str	r1, [sp, #4]
    if(!group) return NULL;
 80025b6:	2800      	cmp	r0, #0
 80025b8:	d00b      	beq.n	80025d2 <lv_group_send_data+0x22>
    if(group->obj_focus == NULL) return NULL;
 80025ba:	68c3      	ldr	r3, [r0, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <lv_group_send_data+0x22>
    return *group->obj_focus;
 80025c0:	681c      	ldr	r4, [r3, #0]
    if(act == NULL) return LV_RES_OK;
 80025c2:	2c00      	cmp	r4, #0
 80025c4:	d005      	beq.n	80025d2 <lv_group_send_data+0x22>
    if(lv_obj_has_state(act, LV_STATE_DISABLED)) return LV_RES_OK;
 80025c6:	2180      	movs	r1, #128	; 0x80
 80025c8:	0020      	movs	r0, r4
 80025ca:	f002 fd49 	bl	8005060 <lv_obj_has_state>
 80025ce:	2800      	cmp	r0, #0
 80025d0:	d002      	beq.n	80025d8 <lv_group_send_data+0x28>
    if(act == NULL) return LV_RES_OK;
 80025d2:	2001      	movs	r0, #1
}
 80025d4:	b002      	add	sp, #8
 80025d6:	bd10      	pop	{r4, pc}
    return lv_event_send(act, LV_EVENT_KEY, &c);
 80025d8:	210d      	movs	r1, #13
 80025da:	0020      	movs	r0, r4
 80025dc:	aa01      	add	r2, sp, #4
 80025de:	f7ff fbbd 	bl	8001d5c <lv_event_send>
 80025e2:	e7f7      	b.n	80025d4 <lv_group_send_data+0x24>

080025e4 <lv_group_set_editing>:
{
 80025e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e6:	46c6      	mov	lr, r8
 80025e8:	0005      	movs	r5, r0
 80025ea:	b500      	push	{lr}
    if(group == NULL) return;
 80025ec:	2800      	cmp	r0, #0
 80025ee:	d03b      	beq.n	8002668 <lv_group_set_editing+0x84>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 80025f0:	7e03      	ldrb	r3, [r0, #24]
 80025f2:	079a      	lsls	r2, r3, #30
 80025f4:	0fd2      	lsrs	r2, r2, #31
 80025f6:	428a      	cmp	r2, r1
 80025f8:	d036      	beq.n	8002668 <lv_group_set_editing+0x84>
    group->editing     = en_val;
 80025fa:	2201      	movs	r2, #1
 80025fc:	4011      	ands	r1, r2
 80025fe:	3201      	adds	r2, #1
 8002600:	0049      	lsls	r1, r1, #1
 8002602:	4393      	bics	r3, r2
 8002604:	430b      	orrs	r3, r1
 8002606:	7603      	strb	r3, [r0, #24]
    if(group->obj_focus == NULL) return NULL;
 8002608:	68c3      	ldr	r3, [r0, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d02c      	beq.n	8002668 <lv_group_set_editing+0x84>
    return *group->obj_focus;
 800260e:	681f      	ldr	r7, [r3, #0]
    if(focused) {
 8002610:	2f00      	cmp	r7, #0
 8002612:	d029      	beq.n	8002668 <lv_group_set_editing+0x84>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8002614:	2000      	movs	r0, #0
 8002616:	f00e fb35 	bl	8010c84 <lv_indev_get_next>
    lv_indev_t * indev_encoder = NULL;
 800261a:	2300      	movs	r3, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800261c:	0004      	movs	r4, r0
    lv_indev_t * indev_group = NULL;
 800261e:	2600      	movs	r6, #0
    lv_indev_t * indev_encoder = NULL;
 8002620:	4698      	mov	r8, r3
    while(indev) {
 8002622:	2800      	cmp	r0, #0
 8002624:	d105      	bne.n	8002632 <lv_group_set_editing+0x4e>
 8002626:	e02c      	b.n	8002682 <lv_group_set_editing+0x9e>
        indev = lv_indev_get_next(indev);
 8002628:	0020      	movs	r0, r4
 800262a:	f00e fb2b 	bl	8010c84 <lv_indev_get_next>
 800262e:	1e04      	subs	r4, r0, #0
    while(indev) {
 8002630:	d010      	beq.n	8002654 <lv_group_set_editing+0x70>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8002632:	0020      	movs	r0, r4
 8002634:	f000 f8b6 	bl	80027a4 <lv_indev_get_type>
        if(indev->group == g) {
 8002638:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800263a:	429d      	cmp	r5, r3
 800263c:	d1f4      	bne.n	8002628 <lv_group_set_editing+0x44>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 800263e:	2802      	cmp	r0, #2
 8002640:	d01d      	beq.n	800267e <lv_group_set_editing+0x9a>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8002642:	0026      	movs	r6, r4
 8002644:	2804      	cmp	r0, #4
 8002646:	d1ef      	bne.n	8002628 <lv_group_set_editing+0x44>
        indev = lv_indev_get_next(indev);
 8002648:	0020      	movs	r0, r4
 800264a:	f00e fb1b 	bl	8010c84 <lv_indev_get_next>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 800264e:	46a0      	mov	r8, r4
        indev = lv_indev_get_next(indev);
 8002650:	1e04      	subs	r4, r0, #0
    while(indev) {
 8002652:	d1ee      	bne.n	8002632 <lv_group_set_editing+0x4e>
    if(indev_encoder) return indev_encoder;
 8002654:	4643      	mov	r3, r8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00d      	beq.n	8002676 <lv_group_set_editing+0x92>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 800265a:	4642      	mov	r2, r8
 800265c:	210e      	movs	r1, #14
 800265e:	0038      	movs	r0, r7
 8002660:	f7ff fb7c 	bl	8001d5c <lv_event_send>
        if(res != LV_RES_OK) return;
 8002664:	2801      	cmp	r0, #1
 8002666:	d002      	beq.n	800266e <lv_group_set_editing+0x8a>
}
 8002668:	bc80      	pop	{r7}
 800266a:	46b8      	mov	r8, r7
 800266c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_invalidate(focused);
 800266e:	0038      	movs	r0, r7
 8002670:	f003 ff66 	bl	8006540 <lv_obj_invalidate>
 8002674:	e7f8      	b.n	8002668 <lv_group_set_editing+0x84>
    if(indev_group) return indev_group;
 8002676:	2e00      	cmp	r6, #0
 8002678:	d003      	beq.n	8002682 <lv_group_set_editing+0x9e>
 800267a:	46b0      	mov	r8, r6
 800267c:	e7ed      	b.n	800265a <lv_group_set_editing+0x76>
 800267e:	46a0      	mov	r8, r4
 8002680:	e7eb      	b.n	800265a <lv_group_set_editing+0x76>
    return lv_indev_get_next(NULL);
 8002682:	2000      	movs	r0, #0
 8002684:	f00e fafe 	bl	8010c84 <lv_indev_get_next>
 8002688:	4680      	mov	r8, r0
 800268a:	e7e6      	b.n	800265a <lv_group_set_editing+0x76>

0800268c <lv_group_get_focused>:
    if(!group) return NULL;
 800268c:	2800      	cmp	r0, #0
 800268e:	d004      	beq.n	800269a <lv_group_get_focused+0xe>
    if(group->obj_focus == NULL) return NULL;
 8002690:	68c0      	ldr	r0, [r0, #12]
 8002692:	2800      	cmp	r0, #0
 8002694:	d000      	beq.n	8002698 <lv_group_get_focused+0xc>
    return *group->obj_focus;
 8002696:	6800      	ldr	r0, [r0, #0]
}
 8002698:	4770      	bx	lr
    if(!group) return NULL;
 800269a:	2000      	movs	r0, #0
 800269c:	e7fc      	b.n	8002698 <lv_group_get_focused+0xc>
 800269e:	46c0      	nop			; (mov r8, r8)

080026a0 <lv_group_get_editing>:
    if(!group) return false;
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d003      	beq.n	80026ac <lv_group_get_editing+0xc>
    return group->editing ? true : false;
 80026a4:	7e00      	ldrb	r0, [r0, #24]
 80026a6:	0780      	lsls	r0, r0, #30
 80026a8:	0fc0      	lsrs	r0, r0, #31
}
 80026aa:	4770      	bx	lr
    if(!group) return false;
 80026ac:	2000      	movs	r0, #0
 80026ae:	e7fc      	b.n	80026aa <lv_group_get_editing+0xa>

080026b0 <lv_group_get_obj_count>:
{
 80026b0:	b510      	push	{r4, lr}
    return _lv_ll_get_len(&group->obj_ll);
 80026b2:	f00f fbdf 	bl	8011e74 <_lv_ll_get_len>
}
 80026b6:	bd10      	pop	{r4, pc}

080026b8 <indev_proc_release>:
 * Process the released state of LV_INDEV_TYPE_POINTER input devices
 * @param proc pointer to an input device 'proc'
 */
static void indev_proc_release(_lv_indev_proc_t * proc)
{
    if(proc->wait_until_release != 0) {
 80026b8:	2208      	movs	r2, #8
{
 80026ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026bc:	46c6      	mov	lr, r8
    if(proc->wait_until_release != 0) {
 80026be:	0017      	movs	r7, r2
 80026c0:	7843      	ldrb	r3, [r0, #1]
{
 80026c2:	0004      	movs	r4, r0
 80026c4:	b500      	push	{lr}
    if(proc->wait_until_release != 0) {
 80026c6:	401f      	ands	r7, r3
 80026c8:	421a      	tst	r2, r3
 80026ca:	d125      	bne.n	8002718 <indev_proc_release+0x60>
        proc->types.pointer.last_obj = NULL;
        proc->pr_timestamp           = 0;
        proc->longpr_rep_timestamp   = 0;
        proc->wait_until_release     = 0;
    }
    indev_obj_act = proc->types.pointer.act_obj;
 80026cc:	6a00      	ldr	r0, [r0, #32]
 80026ce:	4d30      	ldr	r5, [pc, #192]	; (8002790 <indev_proc_release+0xd8>)
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 80026d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    indev_obj_act = proc->types.pointer.act_obj;
 80026d2:	6028      	str	r0, [r5, #0]

    /*Forget the act obj and send a released Call the ancestor's event handler*/
    if(indev_obj_act) {
 80026d4:	2800      	cmp	r0, #0
 80026d6:	d012      	beq.n	80026fe <indev_proc_release+0x46>
        LV_LOG_INFO("released");

        /*Send RELEASE Call the ancestor's event handler and event*/
        lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 80026d8:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <indev_proc_release+0xdc>)
 80026da:	2108      	movs	r1, #8
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4698      	mov	r8, r3
 80026e0:	f7ff fb3c 	bl	8001d5c <lv_event_send>
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(_lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
 80026e4:	7863      	ldrb	r3, [r4, #1]
 80026e6:	079a      	lsls	r2, r3, #30
 80026e8:	d500      	bpl.n	80026ec <indev_proc_release+0x34>
        indev_obj_act = NULL;
 80026ea:	602f      	str	r7, [r5, #0]
    }

    return proc->reset_query ? true : false;
 80026ec:	2201      	movs	r2, #1
        if(indev_reset_check(proc)) return;
 80026ee:	0799      	lsls	r1, r3, #30
 80026f0:	d40f      	bmi.n	8002712 <indev_proc_release+0x5a>
        if(scroll_obj == NULL) {
 80026f2:	2e00      	cmp	r6, #0
 80026f4:	d02f      	beq.n	8002756 <indev_proc_release+0x9e>
        proc->types.pointer.act_obj = NULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	6223      	str	r3, [r4, #32]
        proc->pr_timestamp          = 0;
 80026fa:	6423      	str	r3, [r4, #64]	; 0x40
        proc->longpr_rep_timestamp  = 0;
 80026fc:	6463      	str	r3, [r4, #68]	; 0x44
    if(scroll_obj) {
 80026fe:	2e00      	cmp	r6, #0
 8002700:	d007      	beq.n	8002712 <indev_proc_release+0x5a>
        _lv_indev_scroll_throw_handler(proc);
 8002702:	0020      	movs	r0, r4
 8002704:	f001 fd10 	bl	8004128 <_lv_indev_scroll_throw_handler>
    if(proc->reset_query) {
 8002708:	7863      	ldrb	r3, [r4, #1]
 800270a:	079b      	lsls	r3, r3, #30
 800270c:	d501      	bpl.n	8002712 <indev_proc_release+0x5a>
        indev_obj_act = NULL;
 800270e:	2300      	movs	r3, #0
 8002710:	602b      	str	r3, [r5, #0]
}
 8002712:	bc80      	pop	{r7}
 8002714:	46b8      	mov	r8, r7
 8002716:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_event_send(proc->types.pointer.act_obj, LV_EVENT_PRESS_LOST, indev_act);
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <indev_proc_release+0xdc>)
 800271a:	2103      	movs	r1, #3
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	6a00      	ldr	r0, [r0, #32]
 8002720:	f7ff fb1c 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8002724:	7863      	ldrb	r3, [r4, #1]
 8002726:	079a      	lsls	r2, r3, #30
 8002728:	d411      	bmi.n	800274e <indev_proc_release+0x96>
    return proc->reset_query ? true : false;
 800272a:	079b      	lsls	r3, r3, #30
        if(indev_reset_check(proc)) return;
 800272c:	0fda      	lsrs	r2, r3, #31
 800272e:	2b00      	cmp	r3, #0
 8002730:	dbef      	blt.n	8002712 <indev_proc_release+0x5a>
        proc->wait_until_release     = 0;
 8002732:	2108      	movs	r1, #8
 8002734:	7863      	ldrb	r3, [r4, #1]
    indev_obj_act = proc->types.pointer.act_obj;
 8002736:	4d16      	ldr	r5, [pc, #88]	; (8002790 <indev_proc_release+0xd8>)
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 8002738:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        proc->wait_until_release     = 0;
 800273a:	438b      	bics	r3, r1
        proc->types.pointer.act_obj  = NULL;
 800273c:	6222      	str	r2, [r4, #32]
        proc->types.pointer.last_obj = NULL;
 800273e:	6262      	str	r2, [r4, #36]	; 0x24
        proc->pr_timestamp           = 0;
 8002740:	6422      	str	r2, [r4, #64]	; 0x40
        proc->longpr_rep_timestamp   = 0;
 8002742:	6462      	str	r2, [r4, #68]	; 0x44
        proc->wait_until_release     = 0;
 8002744:	7063      	strb	r3, [r4, #1]
    indev_obj_act = proc->types.pointer.act_obj;
 8002746:	602a      	str	r2, [r5, #0]
    if(scroll_obj) {
 8002748:	2e00      	cmp	r6, #0
 800274a:	d1da      	bne.n	8002702 <indev_proc_release+0x4a>
 800274c:	e7e1      	b.n	8002712 <indev_proc_release+0x5a>
        indev_obj_act = NULL;
 800274e:	2100      	movs	r1, #0
 8002750:	4a0f      	ldr	r2, [pc, #60]	; (8002790 <indev_proc_release+0xd8>)
 8002752:	6011      	str	r1, [r2, #0]
 8002754:	e7e9      	b.n	800272a <indev_proc_release+0x72>
            if(proc->long_pr_sent == 0) {
 8002756:	421a      	tst	r2, r3
 8002758:	d10b      	bne.n	8002772 <indev_proc_release+0xba>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 800275a:	4643      	mov	r3, r8
 800275c:	2104      	movs	r1, #4
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	6828      	ldr	r0, [r5, #0]
 8002762:	f7ff fafb 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8002766:	7863      	ldrb	r3, [r4, #1]
 8002768:	079a      	lsls	r2, r3, #30
 800276a:	d502      	bpl.n	8002772 <indev_proc_release+0xba>
        indev_obj_act = NULL;
 800276c:	602e      	str	r6, [r5, #0]
                if(indev_reset_check(proc)) return;
 800276e:	079b      	lsls	r3, r3, #30
 8002770:	d4cf      	bmi.n	8002712 <indev_proc_release+0x5a>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8002772:	4643      	mov	r3, r8
 8002774:	2107      	movs	r1, #7
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	6828      	ldr	r0, [r5, #0]
 800277a:	f7ff faef 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 800277e:	7863      	ldrb	r3, [r4, #1]
 8002780:	079a      	lsls	r2, r3, #30
 8002782:	d5b8      	bpl.n	80026f6 <indev_proc_release+0x3e>
        indev_obj_act = NULL;
 8002784:	2200      	movs	r2, #0
 8002786:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 8002788:	079b      	lsls	r3, r3, #30
 800278a:	d4c2      	bmi.n	8002712 <indev_proc_release+0x5a>
 800278c:	e7b3      	b.n	80026f6 <indev_proc_release+0x3e>
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	200031f0 	.word	0x200031f0
 8002794:	200031ec 	.word	0x200031ec

08002798 <lv_indev_get_act>:
    return indev_act;
 8002798:	4b01      	ldr	r3, [pc, #4]	; (80027a0 <lv_indev_get_act+0x8>)
 800279a:	6818      	ldr	r0, [r3, #0]
}
 800279c:	4770      	bx	lr
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	200031ec 	.word	0x200031ec

080027a4 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 80027a4:	2800      	cmp	r0, #0
 80027a6:	d002      	beq.n	80027ae <lv_indev_get_type+0xa>
    return indev->driver->type;
 80027a8:	6803      	ldr	r3, [r0, #0]
 80027aa:	7818      	ldrb	r0, [r3, #0]
}
 80027ac:	4770      	bx	lr
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 80027ae:	2000      	movs	r0, #0
 80027b0:	e7fc      	b.n	80027ac <lv_indev_get_type+0x8>
 80027b2:	46c0      	nop			; (mov r8, r8)

080027b4 <lv_indev_reset>:
{
 80027b4:	b570      	push	{r4, r5, r6, lr}
 80027b6:	000c      	movs	r4, r1
    if(indev) {
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d025      	beq.n	8002808 <lv_indev_reset+0x54>
        indev->proc.reset_query = 1;
 80027bc:	2202      	movs	r2, #2
 80027be:	7943      	ldrb	r3, [r0, #5]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	7143      	strb	r3, [r0, #5]
        if(indev_act == indev) indev_obj_act = NULL;
 80027c4:	4b32      	ldr	r3, [pc, #200]	; (8002890 <lv_indev_reset+0xdc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4283      	cmp	r3, r0
 80027ca:	d013      	beq.n	80027f4 <lv_indev_reset+0x40>
        if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 80027cc:	6803      	ldr	r3, [r0, #0]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d900      	bls.n	80027d8 <lv_indev_reset+0x24>
}
 80027d6:	bd70      	pop	{r4, r5, r6, pc}
            if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 80027d8:	2c00      	cmp	r4, #0
 80027da:	d03d      	beq.n	8002858 <lv_indev_reset+0xa4>
 80027dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80027de:	42a3      	cmp	r3, r4
 80027e0:	d00f      	beq.n	8002802 <lv_indev_reset+0x4e>
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 80027e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80027e4:	42a3      	cmp	r3, r4
 80027e6:	d009      	beq.n	80027fc <lv_indev_reset+0x48>
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 80027e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80027ea:	42a3      	cmp	r3, r4
 80027ec:	d1f3      	bne.n	80027d6 <lv_indev_reset+0x22>
                indev->proc.types.pointer.last_obj = NULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	6283      	str	r3, [r0, #40]	; 0x28
 80027f2:	e7f0      	b.n	80027d6 <lv_indev_reset+0x22>
        if(indev_act == indev) indev_obj_act = NULL;
 80027f4:	2200      	movs	r2, #0
 80027f6:	4b27      	ldr	r3, [pc, #156]	; (8002894 <lv_indev_reset+0xe0>)
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	e7e7      	b.n	80027cc <lv_indev_reset+0x18>
                indev->proc.types.pointer.act_obj = NULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	6243      	str	r3, [r0, #36]	; 0x24
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 8002800:	e7f2      	b.n	80027e8 <lv_indev_reset+0x34>
                indev->proc.types.pointer.last_pressed = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	6303      	str	r3, [r0, #48]	; 0x30
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 8002806:	e7ec      	b.n	80027e2 <lv_indev_reset+0x2e>
        lv_indev_t * i = lv_indev_get_next(NULL);
 8002808:	2000      	movs	r0, #0
 800280a:	f00e fa3b 	bl	8010c84 <lv_indev_get_next>
        while(i) {
 800280e:	2800      	cmp	r0, #0
 8002810:	d01e      	beq.n	8002850 <lv_indev_reset+0x9c>
 8002812:	2c00      	cmp	r4, #0
 8002814:	d029      	beq.n	800286a <lv_indev_reset+0xb6>
            i->proc.reset_query = 1;
 8002816:	2502      	movs	r5, #2
                    i->proc.types.pointer.act_obj = NULL;
 8002818:	2600      	movs	r6, #0
 800281a:	e003      	b.n	8002824 <lv_indev_reset+0x70>
            i = lv_indev_get_next(i);
 800281c:	f00e fa32 	bl	8010c84 <lv_indev_get_next>
        while(i) {
 8002820:	2800      	cmp	r0, #0
 8002822:	d015      	beq.n	8002850 <lv_indev_reset+0x9c>
            i->proc.reset_query = 1;
 8002824:	7943      	ldrb	r3, [r0, #5]
 8002826:	432b      	orrs	r3, r5
 8002828:	7143      	strb	r3, [r0, #5]
            if(i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) {
 800282a:	6803      	ldr	r3, [r0, #0]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	3b01      	subs	r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d8f3      	bhi.n	800281c <lv_indev_reset+0x68>
                if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 8002834:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002836:	429c      	cmp	r4, r3
 8002838:	d015      	beq.n	8002866 <lv_indev_reset+0xb2>
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 800283a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800283c:	429c      	cmp	r4, r3
 800283e:	d010      	beq.n	8002862 <lv_indev_reset+0xae>
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 8002840:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002842:	429c      	cmp	r4, r3
 8002844:	d1ea      	bne.n	800281c <lv_indev_reset+0x68>
                    i->proc.types.pointer.last_obj = NULL;
 8002846:	6286      	str	r6, [r0, #40]	; 0x28
            i = lv_indev_get_next(i);
 8002848:	f00e fa1c 	bl	8010c84 <lv_indev_get_next>
        while(i) {
 800284c:	2800      	cmp	r0, #0
 800284e:	d1e9      	bne.n	8002824 <lv_indev_reset+0x70>
        indev_obj_act = NULL;
 8002850:	2200      	movs	r2, #0
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <lv_indev_reset+0xe0>)
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	e7be      	b.n	80027d6 <lv_indev_reset+0x22>
                indev->proc.types.pointer.last_obj = NULL;
 8002858:	2300      	movs	r3, #0
                indev->proc.types.pointer.last_pressed = NULL;
 800285a:	6304      	str	r4, [r0, #48]	; 0x30
                indev->proc.types.pointer.act_obj = NULL;
 800285c:	6244      	str	r4, [r0, #36]	; 0x24
                indev->proc.types.pointer.last_obj = NULL;
 800285e:	6283      	str	r3, [r0, #40]	; 0x28
 8002860:	e7b9      	b.n	80027d6 <lv_indev_reset+0x22>
                    i->proc.types.pointer.act_obj = NULL;
 8002862:	6246      	str	r6, [r0, #36]	; 0x24
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 8002864:	e7ec      	b.n	8002840 <lv_indev_reset+0x8c>
                    i->proc.types.pointer.last_pressed = NULL;
 8002866:	6306      	str	r6, [r0, #48]	; 0x30
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 8002868:	e7e7      	b.n	800283a <lv_indev_reset+0x86>
            i->proc.reset_query = 1;
 800286a:	2402      	movs	r4, #2
                    i->proc.types.pointer.last_pressed = NULL;
 800286c:	2500      	movs	r5, #0
 800286e:	e003      	b.n	8002878 <lv_indev_reset+0xc4>
            i = lv_indev_get_next(i);
 8002870:	f00e fa08 	bl	8010c84 <lv_indev_get_next>
        while(i) {
 8002874:	2800      	cmp	r0, #0
 8002876:	d0eb      	beq.n	8002850 <lv_indev_reset+0x9c>
            i->proc.reset_query = 1;
 8002878:	7943      	ldrb	r3, [r0, #5]
 800287a:	4323      	orrs	r3, r4
 800287c:	7143      	strb	r3, [r0, #5]
            if(i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) {
 800287e:	6803      	ldr	r3, [r0, #0]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	3b01      	subs	r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d8f3      	bhi.n	8002870 <lv_indev_reset+0xbc>
                    i->proc.types.pointer.last_pressed = NULL;
 8002888:	6305      	str	r5, [r0, #48]	; 0x30
                    i->proc.types.pointer.act_obj = NULL;
 800288a:	6245      	str	r5, [r0, #36]	; 0x24
                    i->proc.types.pointer.last_obj = NULL;
 800288c:	6285      	str	r5, [r0, #40]	; 0x28
 800288e:	e7ef      	b.n	8002870 <lv_indev_reset+0xbc>
 8002890:	200031ec 	.word	0x200031ec
 8002894:	200031f0 	.word	0x200031f0

08002898 <lv_indev_set_group>:
    if(indev->driver->type == LV_INDEV_TYPE_KEYPAD || indev->driver->type == LV_INDEV_TYPE_ENCODER) {
 8002898:	22fd      	movs	r2, #253	; 0xfd
 800289a:	6803      	ldr	r3, [r0, #0]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	3b02      	subs	r3, #2
 80028a0:	4213      	tst	r3, r2
 80028a2:	d100      	bne.n	80028a6 <lv_indev_set_group+0xe>
        indev->group = group;
 80028a4:	6501      	str	r1, [r0, #80]	; 0x50
}
 80028a6:	4770      	bx	lr

080028a8 <lv_indev_get_point>:
    if(indev == NULL) {
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d011      	beq.n	80028d0 <lv_indev_get_point+0x28>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) {
 80028ac:	2202      	movs	r2, #2
 80028ae:	6803      	ldr	r3, [r0, #0]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	4393      	bics	r3, r2
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d004      	beq.n	80028c2 <lv_indev_get_point+0x1a>
        point->x = -1;
 80028b8:	2301      	movs	r3, #1
 80028ba:	425b      	negs	r3, r3
 80028bc:	800b      	strh	r3, [r1, #0]
        point->y = -1;
 80028be:	804b      	strh	r3, [r1, #2]
}
 80028c0:	4770      	bx	lr
        point->x = indev->proc.types.pointer.act_point.x;
 80028c2:	2208      	movs	r2, #8
 80028c4:	5e83      	ldrsh	r3, [r0, r2]
 80028c6:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 80028c8:	220a      	movs	r2, #10
 80028ca:	5e83      	ldrsh	r3, [r0, r2]
 80028cc:	804b      	strh	r3, [r1, #2]
 80028ce:	e7f7      	b.n	80028c0 <lv_indev_get_point+0x18>
        point->x = 0;
 80028d0:	8008      	strh	r0, [r1, #0]
        point->y = 0;
 80028d2:	8048      	strh	r0, [r1, #2]
        return;
 80028d4:	e7f4      	b.n	80028c0 <lv_indev_get_point+0x18>
 80028d6:	46c0      	nop			; (mov r8, r8)

080028d8 <lv_indev_get_scroll_dir>:
{
 80028d8:	1e03      	subs	r3, r0, #0
    if(indev == NULL) return false;
 80028da:	d00b      	beq.n	80028f4 <lv_indev_get_scroll_dir+0x1c>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 80028dc:	2102      	movs	r1, #2
 80028de:	6802      	ldr	r2, [r0, #0]
    if(indev == NULL) return false;
 80028e0:	2000      	movs	r0, #0
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 80028e2:	7812      	ldrb	r2, [r2, #0]
 80028e4:	438a      	bics	r2, r1
 80028e6:	2a01      	cmp	r2, #1
 80028e8:	d103      	bne.n	80028f2 <lv_indev_get_scroll_dir+0x1a>
    return indev->proc.types.pointer.scroll_dir;
 80028ea:	323f      	adds	r2, #63	; 0x3f
 80028ec:	5c98      	ldrb	r0, [r3, r2]
 80028ee:	0700      	lsls	r0, r0, #28
 80028f0:	0f00      	lsrs	r0, r0, #28
}
 80028f2:	4770      	bx	lr
    if(indev == NULL) return false;
 80028f4:	2000      	movs	r0, #0
 80028f6:	e7fc      	b.n	80028f2 <lv_indev_get_scroll_dir+0x1a>

080028f8 <lv_indev_get_scroll_obj>:
{
 80028f8:	1e03      	subs	r3, r0, #0
    if(indev == NULL) return NULL;
 80028fa:	d008      	beq.n	800290e <lv_indev_get_scroll_obj+0x16>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 80028fc:	2102      	movs	r1, #2
 80028fe:	6802      	ldr	r2, [r0, #0]
    if(indev == NULL) return NULL;
 8002900:	2000      	movs	r0, #0
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 8002902:	7812      	ldrb	r2, [r2, #0]
 8002904:	438a      	bics	r2, r1
 8002906:	2a01      	cmp	r2, #1
 8002908:	d100      	bne.n	800290c <lv_indev_get_scroll_obj+0x14>
    return indev->proc.types.pointer.scroll_obj;
 800290a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
}
 800290c:	4770      	bx	lr
    if(indev == NULL) return NULL;
 800290e:	2000      	movs	r0, #0
 8002910:	e7fc      	b.n	800290c <lv_indev_get_scroll_obj+0x14>
 8002912:	46c0      	nop			; (mov r8, r8)

08002914 <lv_indev_get_vect>:
    point->x = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	800b      	strh	r3, [r1, #0]
    point->y = 0;
 8002918:	804b      	strh	r3, [r1, #2]
    if(indev == NULL) return;
 800291a:	2800      	cmp	r0, #0
 800291c:	d00b      	beq.n	8002936 <lv_indev_get_vect+0x22>
    if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_BUTTON) {
 800291e:	2202      	movs	r2, #2
 8002920:	6803      	ldr	r3, [r0, #0]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	4393      	bics	r3, r2
 8002926:	2b01      	cmp	r3, #1
 8002928:	d105      	bne.n	8002936 <lv_indev_get_vect+0x22>
        point->x = indev->proc.types.pointer.vect.x;
 800292a:	2214      	movs	r2, #20
 800292c:	5e83      	ldrsh	r3, [r0, r2]
 800292e:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 8002930:	2216      	movs	r2, #22
 8002932:	5e83      	ldrsh	r3, [r0, r2]
 8002934:	804b      	strh	r3, [r1, #2]
}
 8002936:	4770      	bx	lr

08002938 <lv_indev_get_obj_act>:
    return indev_obj_act;
 8002938:	4b01      	ldr	r3, [pc, #4]	; (8002940 <lv_indev_get_obj_act+0x8>)
 800293a:	6818      	ldr	r0, [r3, #0]
}
 800293c:	4770      	bx	lr
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	200031f0 	.word	0x200031f0

08002944 <lv_indev_search_obj>:
{
 8002944:	b570      	push	{r4, r5, r6, lr}
 8002946:	000c      	movs	r4, r1
 8002948:	b082      	sub	sp, #8
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800294a:	2101      	movs	r1, #1
{
 800294c:	0005      	movs	r5, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800294e:	f002 fb77 	bl	8005040 <lv_obj_has_flag>
 8002952:	2800      	cmp	r0, #0
 8002954:	d139      	bne.n	80029ca <lv_indev_search_obj+0x86>
    lv_point_t p_trans = *point;
 8002956:	2204      	movs	r2, #4
 8002958:	0021      	movs	r1, r4
 800295a:	a801      	add	r0, sp, #4
 800295c:	f018 fe52 	bl	801b604 <memcpy>
    lv_obj_transform_point(obj, &p_trans, false, true);
 8002960:	2200      	movs	r2, #0
 8002962:	2301      	movs	r3, #1
 8002964:	0028      	movs	r0, r5
 8002966:	a901      	add	r1, sp, #4
 8002968:	f003 fb7c 	bl	8006064 <lv_obj_transform_point>
    bool hit_test_ok = lv_obj_hit_test(obj, &p_trans);
 800296c:	a901      	add	r1, sp, #4
 800296e:	0028      	movs	r0, r5
 8002970:	f004 ffde 	bl	8007930 <lv_obj_hit_test>
 8002974:	0006      	movs	r6, r0
    if(_lv_area_is_point_on(&obj->coords, &p_trans, 0) || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8002976:	0028      	movs	r0, r5
 8002978:	2200      	movs	r2, #0
 800297a:	a901      	add	r1, sp, #4
 800297c:	3010      	adds	r0, #16
 800297e:	f00e fd6b 	bl	8011458 <_lv_area_is_point_on>
 8002982:	2800      	cmp	r0, #0
 8002984:	d014      	beq.n	80029b0 <lv_indev_search_obj+0x6c>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8002986:	0028      	movs	r0, r5
 8002988:	f008 faf4 	bl	800af74 <lv_obj_get_child_cnt>
        for(i = child_cnt - 1; i >= 0; i--) {
 800298c:	1e44      	subs	r4, r0, #1
 800298e:	d40a      	bmi.n	80029a6 <lv_indev_search_obj+0x62>
            lv_obj_t * child = obj->spec_attr->children[i];
 8002990:	68ab      	ldr	r3, [r5, #8]
 8002992:	00a2      	lsls	r2, r4, #2
 8002994:	681b      	ldr	r3, [r3, #0]
            found_p = lv_indev_search_obj(child, &p_trans);
 8002996:	a901      	add	r1, sp, #4
 8002998:	58d0      	ldr	r0, [r2, r3]
 800299a:	f7ff ffd3 	bl	8002944 <lv_indev_search_obj>
            if(found_p) return found_p;
 800299e:	2800      	cmp	r0, #0
 80029a0:	d104      	bne.n	80029ac <lv_indev_search_obj+0x68>
        for(i = child_cnt - 1; i >= 0; i--) {
 80029a2:	3c01      	subs	r4, #1
 80029a4:	d2f4      	bcs.n	8002990 <lv_indev_search_obj+0x4c>
    if(hit_test_ok) return obj;
 80029a6:	0028      	movs	r0, r5
 80029a8:	2e00      	cmp	r6, #0
 80029aa:	d00e      	beq.n	80029ca <lv_indev_search_obj+0x86>
}
 80029ac:	b002      	add	sp, #8
 80029ae:	bd70      	pop	{r4, r5, r6, pc}
    if(_lv_area_is_point_on(&obj->coords, &p_trans, 0) || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	0028      	movs	r0, r5
 80029b4:	0309      	lsls	r1, r1, #12
 80029b6:	f002 fb43 	bl	8005040 <lv_obj_has_flag>
 80029ba:	2800      	cmp	r0, #0
 80029bc:	d0f3      	beq.n	80029a6 <lv_indev_search_obj+0x62>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80029be:	0028      	movs	r0, r5
 80029c0:	f008 fad8 	bl	800af74 <lv_obj_get_child_cnt>
        for(i = child_cnt - 1; i >= 0; i--) {
 80029c4:	1e44      	subs	r4, r0, #1
 80029c6:	d5e3      	bpl.n	8002990 <lv_indev_search_obj+0x4c>
 80029c8:	e7ed      	b.n	80029a6 <lv_indev_search_obj+0x62>
    else return NULL;
 80029ca:	2000      	movs	r0, #0
 80029cc:	e7ee      	b.n	80029ac <lv_indev_search_obj+0x68>
 80029ce:	46c0      	nop			; (mov r8, r8)

080029d0 <indev_proc_press>:
{
 80029d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d2:	4645      	mov	r5, r8
 80029d4:	46de      	mov	lr, fp
 80029d6:	4657      	mov	r7, sl
 80029d8:	464e      	mov	r6, r9
 80029da:	0004      	movs	r4, r0
 80029dc:	b5e0      	push	{r5, r6, r7, lr}
    indev_obj_act = proc->types.pointer.act_obj;
 80029de:	6a00      	ldr	r0, [r0, #32]
 80029e0:	4da8      	ldr	r5, [pc, #672]	; (8002c84 <indev_proc_press+0x2b4>)
    if(proc->wait_until_release != 0) return;
 80029e2:	7863      	ldrb	r3, [r4, #1]
{
 80029e4:	b083      	sub	sp, #12
    indev_obj_act = proc->types.pointer.act_obj;
 80029e6:	6028      	str	r0, [r5, #0]
    if(proc->wait_until_release != 0) return;
 80029e8:	071b      	lsls	r3, r3, #28
 80029ea:	d466      	bmi.n	8002aba <indev_proc_press+0xea>
    lv_disp_t * disp = indev_act->driver->disp;
 80029ec:	4ea6      	ldr	r6, [pc, #664]	; (8002c88 <indev_proc_press+0x2b8>)
 80029ee:	6833      	ldr	r3, [r6, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4698      	mov	r8, r3
    if(indev_obj_act == NULL) {
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d100      	bne.n	80029fc <indev_proc_press+0x2c>
 80029fa:	e0df      	b.n	8002bbc <indev_proc_press+0x1ec>
    else if(proc->types.pointer.scroll_obj == NULL &&
 80029fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d100      	bne.n	8002a04 <indev_proc_press+0x34>
 8002a02:	e0d2      	b.n	8002baa <indev_proc_press+0x1da>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 8002a04:	1d27      	adds	r7, r4, #4
    lv_obj_transform_point(indev_obj_act, &proc->types.pointer.act_point, true, true);
 8002a06:	2301      	movs	r3, #1
 8002a08:	2201      	movs	r2, #1
 8002a0a:	0039      	movs	r1, r7
 8002a0c:	f003 fb2a 	bl	8006064 <lv_obj_transform_point>
    if(indev_obj_act != proc->types.pointer.act_obj) {
 8002a10:	6a20      	ldr	r0, [r4, #32]
 8002a12:	682b      	ldr	r3, [r5, #0]
 8002a14:	4298      	cmp	r0, r3
 8002a16:	d013      	beq.n	8002a40 <indev_proc_press+0x70>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	60a2      	str	r2, [r4, #8]
        if(proc->types.pointer.act_obj != NULL) {
 8002a1c:	2800      	cmp	r0, #0
 8002a1e:	d054      	beq.n	8002aca <indev_proc_press+0xfa>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, indev_act);
 8002a20:	2103      	movs	r1, #3
 8002a22:	6832      	ldr	r2, [r6, #0]
 8002a24:	f7ff f99a 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8002a28:	7863      	ldrb	r3, [r4, #1]
 8002a2a:	079a      	lsls	r2, r3, #30
 8002a2c:	d54c      	bpl.n	8002ac8 <indev_proc_press+0xf8>
        indev_obj_act = NULL;
 8002a2e:	2200      	movs	r2, #0
    return proc->reset_query ? true : false;
 8002a30:	079b      	lsls	r3, r3, #30
        indev_obj_act = NULL;
 8002a32:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 8002a34:	0fda      	lsrs	r2, r3, #31
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	db3f      	blt.n	8002aba <indev_proc_press+0xea>
        proc->types.pointer.last_obj = indev_obj_act;
 8002a3a:	2300      	movs	r3, #0
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 8002a3c:	6222      	str	r2, [r4, #32]
        proc->types.pointer.last_obj = indev_obj_act;
 8002a3e:	6262      	str	r2, [r4, #36]	; 0x24
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8002a40:	8922      	ldrh	r2, [r4, #8]
 8002a42:	88a1      	ldrh	r1, [r4, #4]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002a44:	8960      	ldrh	r0, [r4, #10]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8002a46:	1a89      	subs	r1, r1, r2
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002a48:	88e2      	ldrh	r2, [r4, #6]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8002a4a:	b209      	sxth	r1, r1
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002a4c:	1a12      	subs	r2, r2, r0
    proc->types.pointer.scroll_throw_vect.x = (proc->types.pointer.scroll_throw_vect.x + proc->types.pointer.vect.x) / 2;
 8002a4e:	2718      	movs	r7, #24
 8002a50:	5fe0      	ldrsh	r0, [r4, r7]
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8002a52:	8221      	strh	r1, [r4, #16]
    proc->types.pointer.scroll_throw_vect.x = (proc->types.pointer.scroll_throw_vect.x + proc->types.pointer.vect.x) / 2;
 8002a54:	1840      	adds	r0, r0, r1
 8002a56:	0fc1      	lsrs	r1, r0, #31
 8002a58:	1809      	adds	r1, r1, r0
 8002a5a:	1049      	asrs	r1, r1, #1
 8002a5c:	8321      	strh	r1, [r4, #24]
    proc->types.pointer.scroll_throw_vect.y = (proc->types.pointer.scroll_throw_vect.y + proc->types.pointer.vect.y) / 2;
 8002a5e:	201a      	movs	r0, #26
 8002a60:	5e21      	ldrsh	r1, [r4, r0]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002a62:	b212      	sxth	r2, r2
    proc->types.pointer.scroll_throw_vect.y = (proc->types.pointer.scroll_throw_vect.y + proc->types.pointer.vect.y) / 2;
 8002a64:	1889      	adds	r1, r1, r2
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8002a66:	8262      	strh	r2, [r4, #18]
    proc->types.pointer.scroll_throw_vect.y = (proc->types.pointer.scroll_throw_vect.y + proc->types.pointer.vect.y) / 2;
 8002a68:	0fca      	lsrs	r2, r1, #31
 8002a6a:	1852      	adds	r2, r2, r1
 8002a6c:	1052      	asrs	r2, r2, #1
 8002a6e:	8362      	strh	r2, [r4, #26]
    proc->types.pointer.scroll_throw_vect_ori = proc->types.pointer.scroll_throw_vect;
 8002a70:	69a2      	ldr	r2, [r4, #24]
 8002a72:	61e2      	str	r2, [r4, #28]
    if(indev_obj_act) {
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <indev_proc_press+0xea>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, indev_act);
 8002a78:	0018      	movs	r0, r3
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	6832      	ldr	r2, [r6, #0]
 8002a7e:	f7ff f96d 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8002a82:	7863      	ldrb	r3, [r4, #1]
 8002a84:	079a      	lsls	r2, r3, #30
 8002a86:	d500      	bpl.n	8002a8a <indev_proc_press+0xba>
 8002a88:	e089      	b.n	8002b9e <indev_proc_press+0x1ce>
        if(indev_act->proc.wait_until_release) return;
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	0017      	movs	r7, r2
 8002a8e:	6833      	ldr	r3, [r6, #0]
 8002a90:	795b      	ldrb	r3, [r3, #5]
 8002a92:	401f      	ands	r7, r3
 8002a94:	421a      	tst	r2, r3
 8002a96:	d110      	bne.n	8002aba <indev_proc_press+0xea>
        _lv_indev_scroll_handler(proc);
 8002a98:	0020      	movs	r0, r4
 8002a9a:	f001 f8cd 	bl	8003c38 <_lv_indev_scroll_handler>
    if(proc->reset_query) {
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	7861      	ldrb	r1, [r4, #1]
 8002aa4:	4008      	ands	r0, r1
 8002aa6:	420b      	tst	r3, r1
 8002aa8:	d000      	beq.n	8002aac <indev_proc_press+0xdc>
        indev_obj_act = NULL;
 8002aaa:	602f      	str	r7, [r5, #0]
    return proc->reset_query ? true : false;
 8002aac:	2201      	movs	r2, #1
        if(indev_reset_check(proc)) return;
 8002aae:	0017      	movs	r7, r2
    return proc->reset_query ? true : false;
 8002ab0:	084b      	lsrs	r3, r1, #1
        if(indev_reset_check(proc)) return;
 8002ab2:	401f      	ands	r7, r3
 8002ab4:	421a      	tst	r2, r3
 8002ab6:	d100      	bne.n	8002aba <indev_proc_press+0xea>
 8002ab8:	e09e      	b.n	8002bf8 <indev_proc_press+0x228>
}
 8002aba:	b003      	add	sp, #12
 8002abc:	bcf0      	pop	{r4, r5, r6, r7}
 8002abe:	46bb      	mov	fp, r7
 8002ac0:	46b2      	mov	sl, r6
 8002ac2:	46a9      	mov	r9, r5
 8002ac4:	46a0      	mov	r8, r4
 8002ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 8002ac8:	682b      	ldr	r3, [r5, #0]
 8002aca:	6223      	str	r3, [r4, #32]
        proc->types.pointer.last_obj = indev_obj_act;
 8002acc:	6263      	str	r3, [r4, #36]	; 0x24
        if(indev_obj_act != NULL) {
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0b6      	beq.n	8002a40 <indev_proc_press+0x70>
            proc->pr_timestamp                 = lv_tick_get();
 8002ad2:	f00e f911 	bl	8010cf8 <lv_tick_get>
            proc->long_pr_sent                 = 0;
 8002ad6:	2201      	movs	r2, #1
            proc->types.pointer.scroll_sum.x     = 0;
 8002ad8:	2700      	movs	r7, #0
            proc->long_pr_sent                 = 0;
 8002ada:	7863      	ldrb	r3, [r4, #1]
            proc->pr_timestamp                 = lv_tick_get();
 8002adc:	6420      	str	r0, [r4, #64]	; 0x40
            proc->long_pr_sent                 = 0;
 8002ade:	4393      	bics	r3, r2
 8002ae0:	7063      	strb	r3, [r4, #1]
            proc->types.pointer.scroll_dir = LV_DIR_NONE;
 8002ae2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 8002ae4:	2101      	movs	r1, #1
            proc->types.pointer.scroll_dir = LV_DIR_NONE;
 8002ae6:	0a5b      	lsrs	r3, r3, #9
 8002ae8:	025b      	lsls	r3, r3, #9
 8002aea:	87a3      	strh	r3, [r4, #60]	; 0x3c
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 8002aec:	6832      	ldr	r2, [r6, #0]
 8002aee:	6828      	ldr	r0, [r5, #0]
            proc->types.pointer.scroll_sum.x     = 0;
 8002af0:	6167      	str	r7, [r4, #20]
            proc->types.pointer.gesture_sum.x  = 0;
 8002af2:	63a7      	str	r7, [r4, #56]	; 0x38
            proc->types.pointer.vect.x         = 0;
 8002af4:	6127      	str	r7, [r4, #16]
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 8002af6:	f7ff f931 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8002afa:	7863      	ldrb	r3, [r4, #1]
 8002afc:	079a      	lsls	r2, r3, #30
 8002afe:	d502      	bpl.n	8002b06 <indev_proc_press+0x136>
        indev_obj_act = NULL;
 8002b00:	602f      	str	r7, [r5, #0]
            if(indev_reset_check(proc)) return;
 8002b02:	079b      	lsls	r3, r3, #30
 8002b04:	d4d9      	bmi.n	8002aba <indev_proc_press+0xea>
            if(indev_act->proc.wait_until_release) return;
 8002b06:	2208      	movs	r2, #8
 8002b08:	0011      	movs	r1, r2
 8002b0a:	6837      	ldr	r7, [r6, #0]
 8002b0c:	797b      	ldrb	r3, [r7, #5]
 8002b0e:	4019      	ands	r1, r3
 8002b10:	4688      	mov	r8, r1
 8002b12:	421a      	tst	r2, r3
 8002b14:	d1d1      	bne.n	8002aba <indev_proc_press+0xea>
    if(lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_CLICK_FOCUSABLE) == false ||
 8002b16:	2104      	movs	r1, #4
 8002b18:	6828      	ldr	r0, [r5, #0]
 8002b1a:	f002 fa91 	bl	8005040 <lv_obj_has_flag>
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	d033      	beq.n	8002b8a <indev_proc_press+0x1ba>
       proc->types.pointer.last_pressed == indev_obj_act) {
 8002b22:	6828      	ldr	r0, [r5, #0]
    if(lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_CLICK_FOCUSABLE) == false ||
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	4283      	cmp	r3, r0
 8002b28:	d02f      	beq.n	8002b8a <indev_proc_press+0x1ba>
    lv_group_t * g_act = lv_obj_get_group(indev_obj_act);
 8002b2a:	f002 fa9f 	bl	800506c <lv_obj_get_group>
 8002b2e:	4681      	mov	r9, r0
    lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 8002b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b32:	2800      	cmp	r0, #0
 8002b34:	d100      	bne.n	8002b38 <indev_proc_press+0x168>
 8002b36:	e110      	b.n	8002d5a <indev_proc_press+0x38a>
 8002b38:	f002 fa98 	bl	800506c <lv_obj_get_group>
 8002b3c:	4682      	mov	sl, r0
    if(g_act == g_prev) {
 8002b3e:	4581      	cmp	r9, r0
 8002b40:	d100      	bne.n	8002b44 <indev_proc_press+0x174>
 8002b42:	e13e      	b.n	8002dc2 <indev_proc_press+0x3f2>
        if(g_prev == NULL && proc->types.pointer.last_pressed) {
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b48:	d100      	bne.n	8002b4c <indev_proc_press+0x17c>
 8002b4a:	e158      	b.n	8002dfe <indev_proc_press+0x42e>
            if(proc->types.pointer.last_pressed) {
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	d00a      	beq.n	8002b66 <indev_proc_press+0x196>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, indev_act);
 8002b50:	2110      	movs	r1, #16
 8002b52:	6832      	ldr	r2, [r6, #0]
 8002b54:	f7ff f902 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8002b58:	797b      	ldrb	r3, [r7, #5]
 8002b5a:	079a      	lsls	r2, r3, #30
 8002b5c:	d503      	bpl.n	8002b66 <indev_proc_press+0x196>
        indev_obj_act = NULL;
 8002b5e:	4642      	mov	r2, r8
 8002b60:	602a      	str	r2, [r5, #0]
                    if(indev_reset_check(proc)) return;
 8002b62:	079b      	lsls	r3, r3, #30
 8002b64:	d411      	bmi.n	8002b8a <indev_proc_press+0x1ba>
        if(g_act) {
 8002b66:	464b      	mov	r3, r9
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d000      	beq.n	8002b6e <indev_proc_press+0x19e>
 8002b6c:	e0f8      	b.n	8002d60 <indev_proc_press+0x390>
            lv_event_send(indev_obj_act, LV_EVENT_FOCUSED, indev_act);
 8002b6e:	210e      	movs	r1, #14
 8002b70:	6832      	ldr	r2, [r6, #0]
 8002b72:	6828      	ldr	r0, [r5, #0]
 8002b74:	f7ff f8f2 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8002b78:	797b      	ldrb	r3, [r7, #5]
 8002b7a:	079a      	lsls	r2, r3, #30
 8002b7c:	d503      	bpl.n	8002b86 <indev_proc_press+0x1b6>
        indev_obj_act = NULL;
 8002b7e:	464a      	mov	r2, r9
 8002b80:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 8002b82:	079b      	lsls	r3, r3, #30
 8002b84:	d401      	bmi.n	8002b8a <indev_proc_press+0x1ba>
    proc->types.pointer.last_pressed = indev_obj_act;
 8002b86:	682b      	ldr	r3, [r5, #0]
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
    if(proc->reset_query) {
 8002b8a:	7863      	ldrb	r3, [r4, #1]
 8002b8c:	079a      	lsls	r2, r3, #30
 8002b8e:	d504      	bpl.n	8002b9a <indev_proc_press+0x1ca>
        indev_obj_act = NULL;
 8002b90:	2200      	movs	r2, #0
 8002b92:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 8002b94:	079b      	lsls	r3, r3, #30
 8002b96:	d500      	bpl.n	8002b9a <indev_proc_press+0x1ca>
 8002b98:	e78f      	b.n	8002aba <indev_proc_press+0xea>
    if(indev_obj_act) {
 8002b9a:	682b      	ldr	r3, [r5, #0]
 8002b9c:	e750      	b.n	8002a40 <indev_proc_press+0x70>
        indev_obj_act = NULL;
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	602a      	str	r2, [r5, #0]
        if(indev_reset_check(proc)) return;
 8002ba2:	079b      	lsls	r3, r3, #30
 8002ba4:	d500      	bpl.n	8002ba8 <indev_proc_press+0x1d8>
 8002ba6:	e788      	b.n	8002aba <indev_proc_press+0xea>
 8002ba8:	e76f      	b.n	8002a8a <indev_proc_press+0xba>
            lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_PRESS_LOCK) == false) {
 8002baa:	2180      	movs	r1, #128	; 0x80
 8002bac:	0189      	lsls	r1, r1, #6
 8002bae:	f002 fa47 	bl	8005040 <lv_obj_has_flag>
    else if(proc->types.pointer.scroll_obj == NULL &&
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	d002      	beq.n	8002bbc <indev_proc_press+0x1ec>
    lv_obj_transform_point(indev_obj_act, &proc->types.pointer.act_point, true, true);
 8002bb6:	6828      	ldr	r0, [r5, #0]
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 8002bb8:	1d27      	adds	r7, r4, #4
 8002bba:	e724      	b.n	8002a06 <indev_proc_press+0x36>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 8002bbc:	4640      	mov	r0, r8
 8002bbe:	1d27      	adds	r7, r4, #4
 8002bc0:	f7fe fe06 	bl	80017d0 <lv_disp_get_layer_sys>
 8002bc4:	0039      	movs	r1, r7
 8002bc6:	f7ff febd 	bl	8002944 <lv_indev_search_obj>
 8002bca:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8002bcc:	2800      	cmp	r0, #0
 8002bce:	d03f      	beq.n	8002c50 <indev_proc_press+0x280>
    if(new_obj_searched && proc->types.pointer.last_obj) {
 8002bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d100      	bne.n	8002bd8 <indev_proc_press+0x208>
 8002bd6:	e716      	b.n	8002a06 <indev_proc_press+0x36>
        proc->types.pointer.scroll_throw_vect.x = 0;
 8002bd8:	2300      	movs	r3, #0
        _lv_indev_scroll_throw_handler(proc);
 8002bda:	0020      	movs	r0, r4
        proc->types.pointer.scroll_throw_vect.x = 0;
 8002bdc:	61a3      	str	r3, [r4, #24]
 8002bde:	4698      	mov	r8, r3
        _lv_indev_scroll_throw_handler(proc);
 8002be0:	f001 faa2 	bl	8004128 <_lv_indev_scroll_throw_handler>
    if(proc->reset_query) {
 8002be4:	7863      	ldrb	r3, [r4, #1]
 8002be6:	079a      	lsls	r2, r3, #30
 8002be8:	d504      	bpl.n	8002bf4 <indev_proc_press+0x224>
        indev_obj_act = NULL;
 8002bea:	4642      	mov	r2, r8
 8002bec:	602a      	str	r2, [r5, #0]
        if(indev_reset_check(proc)) return;
 8002bee:	079b      	lsls	r3, r3, #30
 8002bf0:	d500      	bpl.n	8002bf4 <indev_proc_press+0x224>
 8002bf2:	e762      	b.n	8002aba <indev_proc_press+0xea>
    lv_obj_transform_point(indev_obj_act, &proc->types.pointer.act_point, true, true);
 8002bf4:	6828      	ldr	r0, [r5, #0]
 8002bf6:	e706      	b.n	8002a06 <indev_proc_press+0x36>
    if(proc->types.pointer.scroll_obj) return;
 8002bf8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d039      	beq.n	8002c72 <indev_proc_press+0x2a2>
    if(proc->reset_query) {
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	d100      	bne.n	8002c04 <indev_proc_press+0x234>
 8002c02:	e75a      	b.n	8002aba <indev_proc_press+0xea>
        indev_obj_act = NULL;
 8002c04:	602f      	str	r7, [r5, #0]
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 0) {
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d000      	beq.n	8002c0c <indev_proc_press+0x23c>
 8002c0a:	e756      	b.n	8002aba <indev_proc_press+0xea>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	001f      	movs	r7, r3
 8002c10:	400f      	ands	r7, r1
 8002c12:	420b      	tst	r3, r1
 8002c14:	d100      	bne.n	8002c18 <indev_proc_press+0x248>
 8002c16:	e10f      	b.n	8002e38 <indev_proc_press+0x468>
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 1) {
 8002c18:	07cb      	lsls	r3, r1, #31
 8002c1a:	d400      	bmi.n	8002c1e <indev_proc_press+0x24e>
 8002c1c:	e74d      	b.n	8002aba <indev_proc_press+0xea>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver->long_press_repeat_time) {
 8002c1e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002c20:	f00e f878 	bl	8010d14 <lv_tick_elaps>
 8002c24:	6832      	ldr	r2, [r6, #0]
 8002c26:	6813      	ldr	r3, [r2, #0]
 8002c28:	8b5b      	ldrh	r3, [r3, #26]
 8002c2a:	4298      	cmp	r0, r3
 8002c2c:	d800      	bhi.n	8002c30 <indev_proc_press+0x260>
 8002c2e:	e744      	b.n	8002aba <indev_proc_press+0xea>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8002c30:	2106      	movs	r1, #6
 8002c32:	6828      	ldr	r0, [r5, #0]
 8002c34:	f7ff f892 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8002c38:	7863      	ldrb	r3, [r4, #1]
 8002c3a:	079a      	lsls	r2, r3, #30
 8002c3c:	d504      	bpl.n	8002c48 <indev_proc_press+0x278>
        indev_obj_act = NULL;
 8002c3e:	2200      	movs	r2, #0
 8002c40:	602a      	str	r2, [r5, #0]
                if(indev_reset_check(proc)) return;
 8002c42:	079b      	lsls	r3, r3, #30
 8002c44:	d500      	bpl.n	8002c48 <indev_proc_press+0x278>
 8002c46:	e738      	b.n	8002aba <indev_proc_press+0xea>
                proc->longpr_rep_timestamp = lv_tick_get();
 8002c48:	f00e f856 	bl	8010cf8 <lv_tick_get>
 8002c4c:	6460      	str	r0, [r4, #68]	; 0x44
 8002c4e:	e734      	b.n	8002aba <indev_proc_press+0xea>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8002c50:	4640      	mov	r0, r8
 8002c52:	f7fe fdaf 	bl	80017b4 <lv_disp_get_layer_top>
 8002c56:	0039      	movs	r1, r7
 8002c58:	f7ff fe74 	bl	8002944 <lv_indev_search_obj>
 8002c5c:	6028      	str	r0, [r5, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	d1b6      	bne.n	8002bd0 <indev_proc_press+0x200>
 8002c62:	4640      	mov	r0, r8
 8002c64:	f7fe fd8a 	bl	800177c <lv_disp_get_scr_act>
 8002c68:	0039      	movs	r1, r7
 8002c6a:	f7ff fe6b 	bl	8002944 <lv_indev_search_obj>
 8002c6e:	6028      	str	r0, [r5, #0]
 8002c70:	e7ae      	b.n	8002bd0 <indev_proc_press+0x200>
    if(proc->types.pointer.gesture_sent) return;
 8002c72:	333d      	adds	r3, #61	; 0x3d
 8002c74:	5ce3      	ldrb	r3, [r4, r3]
 8002c76:	421a      	tst	r2, r3
 8002c78:	d000      	beq.n	8002c7c <indev_proc_press+0x2ac>
 8002c7a:	e09c      	b.n	8002db6 <indev_proc_press+0x3e6>
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
 8002c7c:	6a27      	ldr	r7, [r4, #32]
    while(gesture_obj && lv_obj_has_flag(gesture_obj, LV_OBJ_FLAG_GESTURE_BUBBLE)) {
 8002c7e:	2f00      	cmp	r7, #0
 8002c80:	d109      	bne.n	8002c96 <indev_proc_press+0x2c6>
 8002c82:	e098      	b.n	8002db6 <indev_proc_press+0x3e6>
 8002c84:	200031f0 	.word	0x200031f0
 8002c88:	200031ec 	.word	0x200031ec
        gesture_obj = lv_obj_get_parent(gesture_obj);
 8002c8c:	0038      	movs	r0, r7
 8002c8e:	f008 f95b 	bl	800af48 <lv_obj_get_parent>
 8002c92:	1e07      	subs	r7, r0, #0
    while(gesture_obj && lv_obj_has_flag(gesture_obj, LV_OBJ_FLAG_GESTURE_BUBBLE)) {
 8002c94:	d071      	beq.n	8002d7a <indev_proc_press+0x3aa>
 8002c96:	2180      	movs	r1, #128	; 0x80
 8002c98:	0038      	movs	r0, r7
 8002c9a:	0209      	lsls	r1, r1, #8
 8002c9c:	f002 f9d0 	bl	8005040 <lv_obj_has_flag>
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	d1f3      	bne.n	8002c8c <indev_proc_press+0x2bc>
    if((LV_ABS(proc->types.pointer.vect.x) < indev_act->driver->gesture_min_velocity) &&
 8002ca4:	2210      	movs	r2, #16
 8002ca6:	5ea3      	ldrsh	r3, [r4, r2]
 8002ca8:	4698      	mov	r8, r3
 8002caa:	6833      	ldr	r3, [r6, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	469c      	mov	ip, r3
 8002cb0:	7d93      	ldrb	r3, [r2, #22]
 8002cb2:	469a      	mov	sl, r3
 8002cb4:	4643      	mov	r3, r8
 8002cb6:	17d9      	asrs	r1, r3, #31
 8002cb8:	185b      	adds	r3, r3, r1
 8002cba:	404b      	eors	r3, r1
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	4553      	cmp	r3, sl
 8002cc0:	d200      	bcs.n	8002cc4 <indev_proc_press+0x2f4>
 8002cc2:	e08e      	b.n	8002de2 <indev_proc_press+0x412>
       (LV_ABS(proc->types.pointer.vect.y) < indev_act->driver->gesture_min_velocity)) {
 8002cc4:	2112      	movs	r1, #18
 8002cc6:	5e63      	ldrsh	r3, [r4, r1]
 8002cc8:	4699      	mov	r9, r3
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8002cca:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8002ccc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8002cce:	4441      	add	r1, r8
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8002cd0:	444b      	add	r3, r9
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8002cd2:	b209      	sxth	r1, r1
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8002cd4:	b21b      	sxth	r3, r3
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	8763      	strh	r3, [r4, #58]	; 0x3a
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 8002cda:	17cb      	asrs	r3, r1, #31
 8002cdc:	18c8      	adds	r0, r1, r3
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 8002cde:	8721      	strh	r1, [r4, #56]	; 0x38
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 8002ce0:	4058      	eors	r0, r3
 8002ce2:	7dd3      	ldrb	r3, [r2, #23]
       (LV_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver->gesture_limit)) {
 8002ce4:	9a00      	ldr	r2, [sp, #0]
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 8002ce6:	4698      	mov	r8, r3
       (LV_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver->gesture_limit)) {
 8002ce8:	17d3      	asrs	r3, r2, #31
 8002cea:	18d2      	adds	r2, r2, r3
 8002cec:	405a      	eors	r2, r3
 8002cee:	b293      	uxth	r3, r2
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 8002cf0:	b280      	uxth	r0, r0
       (LV_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver->gesture_limit)) {
 8002cf2:	9301      	str	r3, [sp, #4]
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 8002cf4:	4540      	cmp	r0, r8
 8002cf6:	d801      	bhi.n	8002cfc <indev_proc_press+0x32c>
 8002cf8:	4598      	cmp	r8, r3
 8002cfa:	d23e      	bcs.n	8002d7a <indev_proc_press+0x3aa>
        proc->types.pointer.gesture_sent = 1;
 8002cfc:	233c      	movs	r3, #60	; 0x3c
 8002cfe:	4699      	mov	r9, r3
 8002d00:	44a1      	add	r9, r4
 8002d02:	469a      	mov	sl, r3
 8002d04:	464b      	mov	r3, r9
 8002d06:	785b      	ldrb	r3, [r3, #1]
 8002d08:	4698      	mov	r8, r3
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	469b      	mov	fp, r3
 8002d0e:	4643      	mov	r3, r8
 8002d10:	465a      	mov	r2, fp
 8002d12:	4313      	orrs	r3, r2
 8002d14:	4698      	mov	r8, r3
 8002d16:	464b      	mov	r3, r9
 8002d18:	4642      	mov	r2, r8
 8002d1a:	705a      	strb	r2, [r3, #1]
        if(LV_ABS(proc->types.pointer.gesture_sum.x) > LV_ABS(proc->types.pointer.gesture_sum.y)) {
 8002d1c:	9b01      	ldr	r3, [sp, #4]
 8002d1e:	4298      	cmp	r0, r3
 8002d20:	d97e      	bls.n	8002e20 <indev_proc_press+0x450>
                proc->types.pointer.gesture_dir = LV_DIR_RIGHT;
 8002d22:	4653      	mov	r3, sl
 8002d24:	5ce2      	ldrb	r2, [r4, r3]
            if(proc->types.pointer.gesture_sum.x > 0)
 8002d26:	2900      	cmp	r1, #0
 8002d28:	dc00      	bgt.n	8002d2c <indev_proc_press+0x35c>
 8002d2a:	e093      	b.n	8002e54 <indev_proc_press+0x484>
                proc->types.pointer.gesture_dir = LV_DIR_RIGHT;
 8002d2c:	3b2d      	subs	r3, #45	; 0x2d
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2220      	movs	r2, #32
 8002d32:	4313      	orrs	r3, r2
 8002d34:	4652      	mov	r2, sl
 8002d36:	54a3      	strb	r3, [r4, r2]
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, indev_act);
 8002d38:	210c      	movs	r1, #12
 8002d3a:	4662      	mov	r2, ip
 8002d3c:	0038      	movs	r0, r7
 8002d3e:	f7ff f80d 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8002d42:	7861      	ldrb	r1, [r4, #1]
 8002d44:	078b      	lsls	r3, r1, #30
 8002d46:	d51b      	bpl.n	8002d80 <indev_proc_press+0x3b0>
        indev_obj_act = NULL;
 8002d48:	2200      	movs	r2, #0
    return proc->reset_query ? true : false;
 8002d4a:	078b      	lsls	r3, r1, #30
 8002d4c:	0fdb      	lsrs	r3, r3, #31
        indev_obj_act = NULL;
 8002d4e:	602a      	str	r2, [r5, #0]
        if(indev_reset_check(proc)) return;
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d000      	beq.n	8002d56 <indev_proc_press+0x386>
 8002d54:	e6b1      	b.n	8002aba <indev_proc_press+0xea>
 8002d56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d58:	e755      	b.n	8002c06 <indev_proc_press+0x236>
    if(g_act == g_prev) {
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d021      	beq.n	8002da4 <indev_proc_press+0x3d4>
            lv_group_focus_obj(indev_obj_act);
 8002d60:	6828      	ldr	r0, [r5, #0]
 8002d62:	f7ff fbeb 	bl	800253c <lv_group_focus_obj>
    if(proc->reset_query) {
 8002d66:	797b      	ldrb	r3, [r7, #5]
 8002d68:	079a      	lsls	r2, r3, #30
 8002d6a:	d400      	bmi.n	8002d6e <indev_proc_press+0x39e>
 8002d6c:	e70b      	b.n	8002b86 <indev_proc_press+0x1b6>
        indev_obj_act = NULL;
 8002d6e:	2200      	movs	r2, #0
 8002d70:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 8002d72:	079b      	lsls	r3, r3, #30
 8002d74:	d500      	bpl.n	8002d78 <indev_proc_press+0x3a8>
 8002d76:	e708      	b.n	8002b8a <indev_proc_press+0x1ba>
 8002d78:	e705      	b.n	8002b86 <indev_proc_press+0x1b6>
    if(proc->reset_query) {
 8002d7a:	7861      	ldrb	r1, [r4, #1]
 8002d7c:	078b      	lsls	r3, r1, #30
 8002d7e:	d4e3      	bmi.n	8002d48 <indev_proc_press+0x378>
    return proc->reset_query ? true : false;
 8002d80:	078b      	lsls	r3, r1, #30
 8002d82:	0fdb      	lsrs	r3, r3, #31
 8002d84:	e7e4      	b.n	8002d50 <indev_proc_press+0x380>
            if(proc->types.pointer.last_pressed) {
 8002d86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	d00b      	beq.n	8002da4 <indev_proc_press+0x3d4>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 8002d8c:	210f      	movs	r1, #15
 8002d8e:	6832      	ldr	r2, [r6, #0]
 8002d90:	f7fe ffe4 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8002d94:	797b      	ldrb	r3, [r7, #5]
 8002d96:	079a      	lsls	r2, r3, #30
 8002d98:	d504      	bpl.n	8002da4 <indev_proc_press+0x3d4>
        indev_obj_act = NULL;
 8002d9a:	464a      	mov	r2, r9
 8002d9c:	602a      	str	r2, [r5, #0]
                if(indev_reset_check(proc)) return;
 8002d9e:	079b      	lsls	r3, r3, #30
 8002da0:	d500      	bpl.n	8002da4 <indev_proc_press+0x3d4>
 8002da2:	e6f2      	b.n	8002b8a <indev_proc_press+0x1ba>
            lv_event_send(indev_obj_act, LV_EVENT_FOCUSED, indev_act);
 8002da4:	210e      	movs	r1, #14
 8002da6:	6832      	ldr	r2, [r6, #0]
 8002da8:	6828      	ldr	r0, [r5, #0]
 8002daa:	f7fe ffd7 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8002dae:	797b      	ldrb	r3, [r7, #5]
 8002db0:	079a      	lsls	r2, r3, #30
 8002db2:	d4dc      	bmi.n	8002d6e <indev_proc_press+0x39e>
 8002db4:	e6e7      	b.n	8002b86 <indev_proc_press+0x1b6>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d100      	bne.n	8002dbc <indev_proc_press+0x3ec>
 8002dba:	e727      	b.n	8002c0c <indev_proc_press+0x23c>
        indev_obj_act = NULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	602b      	str	r3, [r5, #0]
    return proc->reset_query ? true : false;
 8002dc0:	e724      	b.n	8002c0c <indev_proc_press+0x23c>
        if(g_act) {
 8002dc2:	464b      	mov	r3, r9
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0de      	beq.n	8002d86 <indev_proc_press+0x3b6>
            lv_group_focus_obj(indev_obj_act);
 8002dc8:	6828      	ldr	r0, [r5, #0]
 8002dca:	f7ff fbb7 	bl	800253c <lv_group_focus_obj>
    if(proc->reset_query) {
 8002dce:	797b      	ldrb	r3, [r7, #5]
 8002dd0:	079a      	lsls	r2, r3, #30
 8002dd2:	d400      	bmi.n	8002dd6 <indev_proc_press+0x406>
 8002dd4:	e6d7      	b.n	8002b86 <indev_proc_press+0x1b6>
        indev_obj_act = NULL;
 8002dd6:	4642      	mov	r2, r8
 8002dd8:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 8002dda:	079b      	lsls	r3, r3, #30
 8002ddc:	d500      	bpl.n	8002de0 <indev_proc_press+0x410>
 8002dde:	e6d4      	b.n	8002b8a <indev_proc_press+0x1ba>
 8002de0:	e6d1      	b.n	8002b86 <indev_proc_press+0x1b6>
       (LV_ABS(proc->types.pointer.vect.y) < indev_act->driver->gesture_min_velocity)) {
 8002de2:	2112      	movs	r1, #18
 8002de4:	5e63      	ldrsh	r3, [r4, r1]
 8002de6:	17d9      	asrs	r1, r3, #31
 8002de8:	4699      	mov	r9, r3
 8002dea:	185b      	adds	r3, r3, r1
 8002dec:	404b      	eors	r3, r1
    if((LV_ABS(proc->types.pointer.vect.x) < indev_act->driver->gesture_min_velocity) &&
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	459a      	cmp	sl, r3
 8002df2:	d800      	bhi.n	8002df6 <indev_proc_press+0x426>
 8002df4:	e769      	b.n	8002cca <indev_proc_press+0x2fa>
        proc->types.pointer.gesture_sum.x = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	2100      	movs	r1, #0
 8002dfa:	63a0      	str	r0, [r4, #56]	; 0x38
 8002dfc:	e767      	b.n	8002cce <indev_proc_press+0x2fe>
        if(g_prev == NULL && proc->types.pointer.last_pressed) {
 8002dfe:	2800      	cmp	r0, #0
 8002e00:	d100      	bne.n	8002e04 <indev_proc_press+0x434>
 8002e02:	e6b0      	b.n	8002b66 <indev_proc_press+0x196>
            lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 8002e04:	210f      	movs	r1, #15
 8002e06:	6832      	ldr	r2, [r6, #0]
 8002e08:	f7fe ffa8 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8002e0c:	797b      	ldrb	r3, [r7, #5]
 8002e0e:	079a      	lsls	r2, r3, #30
 8002e10:	d400      	bmi.n	8002e14 <indev_proc_press+0x444>
 8002e12:	e6a8      	b.n	8002b66 <indev_proc_press+0x196>
        indev_obj_act = NULL;
 8002e14:	4652      	mov	r2, sl
 8002e16:	602a      	str	r2, [r5, #0]
            if(indev_reset_check(proc)) return;
 8002e18:	079b      	lsls	r3, r3, #30
 8002e1a:	d500      	bpl.n	8002e1e <indev_proc_press+0x44e>
 8002e1c:	e6b5      	b.n	8002b8a <indev_proc_press+0x1ba>
 8002e1e:	e6a2      	b.n	8002b66 <indev_proc_press+0x196>
            if(proc->types.pointer.gesture_sum.y > 0)
 8002e20:	9b00      	ldr	r3, [sp, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	dd1d      	ble.n	8002e62 <indev_proc_press+0x492>
                proc->types.pointer.gesture_dir = LV_DIR_BOTTOM;
 8002e26:	4653      	mov	r3, sl
 8002e28:	5ce2      	ldrb	r2, [r4, r3]
 8002e2a:	230f      	movs	r3, #15
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	3b8f      	subs	r3, #143	; 0x8f
 8002e30:	4313      	orrs	r3, r2
 8002e32:	4652      	mov	r2, sl
 8002e34:	54a3      	strb	r3, [r4, r2]
 8002e36:	e77f      	b.n	8002d38 <indev_proc_press+0x368>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver->long_press_time) {
 8002e38:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002e3a:	f00d ff6b 	bl	8010d14 <lv_tick_elaps>
 8002e3e:	6832      	ldr	r2, [r6, #0]
 8002e40:	6813      	ldr	r3, [r2, #0]
 8002e42:	8b1b      	ldrh	r3, [r3, #24]
 8002e44:	4298      	cmp	r0, r3
 8002e46:	d815      	bhi.n	8002e74 <indev_proc_press+0x4a4>
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 1) {
 8002e48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d000      	beq.n	8002e50 <indev_proc_press+0x480>
 8002e4e:	e634      	b.n	8002aba <indev_proc_press+0xea>
 8002e50:	7861      	ldrb	r1, [r4, #1]
 8002e52:	e6e1      	b.n	8002c18 <indev_proc_press+0x248>
                proc->types.pointer.gesture_dir = LV_DIR_LEFT;
 8002e54:	230f      	movs	r3, #15
 8002e56:	4013      	ands	r3, r2
 8002e58:	2210      	movs	r2, #16
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	4652      	mov	r2, sl
 8002e5e:	54a3      	strb	r3, [r4, r2]
 8002e60:	e76a      	b.n	8002d38 <indev_proc_press+0x368>
                proc->types.pointer.gesture_dir = LV_DIR_TOP;
 8002e62:	4653      	mov	r3, sl
 8002e64:	5ce2      	ldrb	r2, [r4, r3]
 8002e66:	230f      	movs	r3, #15
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2240      	movs	r2, #64	; 0x40
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	4652      	mov	r2, sl
 8002e70:	54a3      	strb	r3, [r4, r2]
 8002e72:	e761      	b.n	8002d38 <indev_proc_press+0x368>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8002e74:	2105      	movs	r1, #5
 8002e76:	6828      	ldr	r0, [r5, #0]
 8002e78:	f7fe ff70 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8002e7c:	7863      	ldrb	r3, [r4, #1]
 8002e7e:	079a      	lsls	r2, r3, #30
 8002e80:	d500      	bpl.n	8002e84 <indev_proc_press+0x4b4>
        indev_obj_act = NULL;
 8002e82:	602f      	str	r7, [r5, #0]
                if(indev_reset_check(proc)) return;
 8002e84:	079b      	lsls	r3, r3, #30
 8002e86:	d500      	bpl.n	8002e8a <indev_proc_press+0x4ba>
 8002e88:	e617      	b.n	8002aba <indev_proc_press+0xea>
                proc->long_pr_sent = 1;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	7862      	ldrb	r2, [r4, #1]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	7063      	strb	r3, [r4, #1]
                proc->longpr_rep_timestamp = lv_tick_get();
 8002e92:	f00d ff31 	bl	8010cf8 <lv_tick_get>
 8002e96:	6460      	str	r0, [r4, #68]	; 0x44
 8002e98:	e7d6      	b.n	8002e48 <indev_proc_press+0x478>
 8002e9a:	46c0      	nop			; (mov r8, r8)

08002e9c <lv_indev_read_timer_cb>:
{
 8002e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9e:	464e      	mov	r6, r9
 8002ea0:	46de      	mov	lr, fp
 8002ea2:	4657      	mov	r7, sl
 8002ea4:	4645      	mov	r5, r8
    indev_act = timer->user_data;
 8002ea6:	68c4      	ldr	r4, [r0, #12]
{
 8002ea8:	b5e0      	push	{r5, r6, r7, lr}
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8002eaa:	6823      	ldr	r3, [r4, #0]
    indev_act = timer->user_data;
 8002eac:	4ec2      	ldr	r6, [pc, #776]	; (80031b8 <lv_indev_read_timer_cb+0x31c>)
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8002eae:	68d9      	ldr	r1, [r3, #12]
{
 8002eb0:	b087      	sub	sp, #28
    indev_act = timer->user_data;
 8002eb2:	6034      	str	r4, [r6, #0]
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8002eb4:	2900      	cmp	r1, #0
 8002eb6:	d007      	beq.n	8002ec8 <lv_indev_read_timer_cb+0x2c>
    if(indev->proc.reset_query) {
 8002eb8:	7963      	ldrb	r3, [r4, #5]
 8002eba:	079a      	lsls	r2, r3, #30
 8002ebc:	d40b      	bmi.n	8002ed6 <lv_indev_read_timer_cb+0x3a>
    if(indev_act->proc.disabled ||
 8002ebe:	075b      	lsls	r3, r3, #29
 8002ec0:	d402      	bmi.n	8002ec8 <lv_indev_read_timer_cb+0x2c>
 8002ec2:	694b      	ldr	r3, [r1, #20]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01a      	beq.n	8002efe <lv_indev_read_timer_cb+0x62>
}
 8002ec8:	b007      	add	sp, #28
 8002eca:	bcf0      	pop	{r4, r5, r6, r7}
 8002ecc:	46bb      	mov	fp, r7
 8002ece:	46b2      	mov	sl, r6
 8002ed0:	46a9      	mov	r9, r5
 8002ed2:	46a0      	mov	r8, r4
 8002ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        indev->proc.types.pointer.act_obj           = NULL;
 8002ed6:	2200      	movs	r2, #0
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8002ed8:	2540      	movs	r5, #64	; 0x40
 8002eda:	270f      	movs	r7, #15
        indev->proc.types.pointer.act_obj           = NULL;
 8002edc:	6262      	str	r2, [r4, #36]	; 0x24
        indev->proc.types.pointer.last_obj          = NULL;
 8002ede:	62a2      	str	r2, [r4, #40]	; 0x28
        indev->proc.types.pointer.scroll_obj          = NULL;
 8002ee0:	62e2      	str	r2, [r4, #44]	; 0x2c
        indev->proc.pr_timestamp                    = 0;
 8002ee2:	6462      	str	r2, [r4, #68]	; 0x44
        indev->proc.longpr_rep_timestamp            = 0;
 8002ee4:	64a2      	str	r2, [r4, #72]	; 0x48
        indev->proc.types.pointer.scroll_sum.x        = 0;
 8002ee6:	61a2      	str	r2, [r4, #24]
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8002ee8:	5d60      	ldrb	r0, [r4, r5]
 8002eea:	43b8      	bics	r0, r7
 8002eec:	5560      	strb	r0, [r4, r5]
        indev->proc.long_pr_sent                    = 0;
 8002eee:	2003      	movs	r0, #3
        indev_obj_act                               = NULL;
 8002ef0:	4fb2      	ldr	r7, [pc, #712]	; (80031bc <lv_indev_read_timer_cb+0x320>)
        indev->proc.long_pr_sent                    = 0;
 8002ef2:	4383      	bics	r3, r0
        indev->proc.types.pointer.scroll_throw_vect.x = 0;
 8002ef4:	61e2      	str	r2, [r4, #28]
        indev->proc.types.pointer.gesture_sum.x     = 0;
 8002ef6:	63e2      	str	r2, [r4, #60]	; 0x3c
        indev->proc.long_pr_sent                    = 0;
 8002ef8:	7163      	strb	r3, [r4, #5]
        indev_obj_act                               = NULL;
 8002efa:	603a      	str	r2, [r7, #0]
}
 8002efc:	e7df      	b.n	8002ebe <lv_indev_read_timer_cb+0x22>
    if(indev->proc.reset_query) {
 8002efe:	3302      	adds	r3, #2
 8002f00:	4698      	mov	r8, r3
        indev->proc.types.pointer.act_obj           = NULL;
 8002f02:	2500      	movs	r5, #0
 8002f04:	4fad      	ldr	r7, [pc, #692]	; (80031bc <lv_indev_read_timer_cb+0x320>)
        _lv_indev_read(indev_act, &data);
 8002f06:	0020      	movs	r0, r4
 8002f08:	a902      	add	r1, sp, #8
 8002f0a:	f00d fec9 	bl	8010ca0 <_lv_indev_read>
    if(indev->proc.reset_query) {
 8002f0e:	4642      	mov	r2, r8
        continue_reading = data.continue_reading;
 8002f10:	ab02      	add	r3, sp, #8
 8002f12:	7bdb      	ldrb	r3, [r3, #15]
        indev_proc_reset_query_handler(indev_act);
 8002f14:	6834      	ldr	r4, [r6, #0]
        continue_reading = data.continue_reading;
 8002f16:	4699      	mov	r9, r3
    if(indev->proc.reset_query) {
 8002f18:	7963      	ldrb	r3, [r4, #5]
 8002f1a:	421a      	tst	r2, r3
 8002f1c:	d00f      	beq.n	8002f3e <lv_indev_read_timer_cb+0xa2>
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8002f1e:	2140      	movs	r1, #64	; 0x40
 8002f20:	200f      	movs	r0, #15
        indev->proc.types.pointer.act_obj           = NULL;
 8002f22:	6265      	str	r5, [r4, #36]	; 0x24
        indev->proc.types.pointer.last_obj          = NULL;
 8002f24:	62a5      	str	r5, [r4, #40]	; 0x28
        indev->proc.types.pointer.scroll_obj          = NULL;
 8002f26:	62e5      	str	r5, [r4, #44]	; 0x2c
        indev->proc.pr_timestamp                    = 0;
 8002f28:	6465      	str	r5, [r4, #68]	; 0x44
        indev->proc.longpr_rep_timestamp            = 0;
 8002f2a:	64a5      	str	r5, [r4, #72]	; 0x48
        indev->proc.types.pointer.scroll_sum.x        = 0;
 8002f2c:	61a5      	str	r5, [r4, #24]
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8002f2e:	5c62      	ldrb	r2, [r4, r1]
 8002f30:	4382      	bics	r2, r0
 8002f32:	5462      	strb	r2, [r4, r1]
        indev->proc.long_pr_sent                    = 0;
 8002f34:	2203      	movs	r2, #3
 8002f36:	4393      	bics	r3, r2
        indev->proc.types.pointer.scroll_throw_vect.x = 0;
 8002f38:	61e5      	str	r5, [r4, #28]
        indev->proc.types.pointer.gesture_sum.x     = 0;
 8002f3a:	63e5      	str	r5, [r4, #60]	; 0x3c
        indev->proc.long_pr_sent                    = 0;
 8002f3c:	7163      	strb	r3, [r4, #5]
        indev_obj_act = NULL;
 8002f3e:	603d      	str	r5, [r7, #0]
        indev_act->proc.state = data.state;
 8002f40:	ab02      	add	r3, sp, #8
 8002f42:	7b9a      	ldrb	r2, [r3, #14]
 8002f44:	7122      	strb	r2, [r4, #4]
        if(indev_act->proc.state == LV_INDEV_STATE_PRESSED) {
 8002f46:	2a01      	cmp	r2, #1
 8002f48:	d100      	bne.n	8002f4c <lv_indev_read_timer_cb+0xb0>
 8002f4a:	e0c5      	b.n	80030d8 <lv_indev_read_timer_cb+0x23c>
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8002f4c:	6821      	ldr	r1, [r4, #0]
 8002f4e:	780b      	ldrb	r3, [r1, #0]
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d054      	beq.n	8002ffe <lv_indev_read_timer_cb+0x162>
        if(indev_act->driver->type == LV_INDEV_TYPE_POINTER) {
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d100      	bne.n	8002f5a <lv_indev_read_timer_cb+0xbe>
 8002f58:	e0cb      	b.n	80030f2 <lv_indev_read_timer_cb+0x256>
        else if(indev_act->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d100      	bne.n	8002f60 <lv_indev_read_timer_cb+0xc4>
 8002f5e:	e0fc      	b.n	800315a <lv_indev_read_timer_cb+0x2be>
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER) {
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d100      	bne.n	8002f66 <lv_indev_read_timer_cb+0xca>
 8002f64:	e157      	b.n	8003216 <lv_indev_read_timer_cb+0x37a>
        else if(indev_act->driver->type == LV_INDEV_TYPE_BUTTON) {
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d01b      	beq.n	8002fa2 <lv_indev_read_timer_cb+0x106>
    if(indev->proc.reset_query) {
 8002f6a:	7963      	ldrb	r3, [r4, #5]
 8002f6c:	4642      	mov	r2, r8
 8002f6e:	421a      	tst	r2, r3
 8002f70:	d011      	beq.n	8002f96 <lv_indev_read_timer_cb+0xfa>
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8002f72:	2240      	movs	r2, #64	; 0x40
 8002f74:	210f      	movs	r1, #15
        indev->proc.types.pointer.act_obj           = NULL;
 8002f76:	6265      	str	r5, [r4, #36]	; 0x24
        indev->proc.types.pointer.last_obj          = NULL;
 8002f78:	62a5      	str	r5, [r4, #40]	; 0x28
        indev->proc.types.pointer.scroll_obj          = NULL;
 8002f7a:	62e5      	str	r5, [r4, #44]	; 0x2c
        indev->proc.pr_timestamp                    = 0;
 8002f7c:	6465      	str	r5, [r4, #68]	; 0x44
        indev->proc.longpr_rep_timestamp            = 0;
 8002f7e:	64a5      	str	r5, [r4, #72]	; 0x48
        indev->proc.types.pointer.scroll_sum.x        = 0;
 8002f80:	61a5      	str	r5, [r4, #24]
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8002f82:	5ca3      	ldrb	r3, [r4, r2]
        indev_obj_act                               = NULL;
 8002f84:	603d      	str	r5, [r7, #0]
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 8002f86:	438b      	bics	r3, r1
 8002f88:	54a3      	strb	r3, [r4, r2]
        indev->proc.long_pr_sent                    = 0;
 8002f8a:	7963      	ldrb	r3, [r4, #5]
 8002f8c:	3a3d      	subs	r2, #61	; 0x3d
 8002f8e:	4393      	bics	r3, r2
        indev->proc.types.pointer.scroll_throw_vect.x = 0;
 8002f90:	61e5      	str	r5, [r4, #28]
        indev->proc.types.pointer.gesture_sum.x     = 0;
 8002f92:	63e5      	str	r5, [r4, #60]	; 0x3c
        indev->proc.long_pr_sent                    = 0;
 8002f94:	7163      	strb	r3, [r4, #5]
    } while(continue_reading);
 8002f96:	464b      	mov	r3, r9
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1b4      	bne.n	8002f06 <lv_indev_read_timer_cb+0x6a>
    indev_act     = NULL;
 8002f9c:	6033      	str	r3, [r6, #0]
    indev_obj_act = NULL;
 8002f9e:	603b      	str	r3, [r7, #0]
    INDEV_TRACE("finished");
 8002fa0:	e792      	b.n	8002ec8 <lv_indev_read_timer_cb+0x2c>
    if(i->btn_points == NULL) {
 8002fa2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d0e0      	beq.n	8002f6a <lv_indev_read_timer_cb+0xce>
    lv_coord_t x = i->btn_points[data->btn_id].x;
 8002fa8:	9b04      	ldr	r3, [sp, #16]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	18d1      	adds	r1, r2, r3
 8002fb0:	5ed3      	ldrsh	r3, [r2, r3]
 8002fb2:	469a      	mov	sl, r3
    lv_coord_t y = i->btn_points[data->btn_id].y;
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	5e8b      	ldrsh	r3, [r1, r2]
 8002fb8:	469b      	mov	fp, r3
    if(data->state == LV_INDEV_STATE_PRESSED) {
 8002fba:	ab02      	add	r3, sp, #8
 8002fbc:	7b9b      	ldrb	r3, [r3, #14]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d100      	bne.n	8002fc4 <lv_indev_read_timer_cb+0x128>
 8002fc2:	e13a      	b.n	800323a <lv_indev_read_timer_cb+0x39e>
    if(proc->reset_query) {
 8002fc4:	4642      	mov	r2, r8
 8002fc6:	7963      	ldrb	r3, [r4, #5]
 8002fc8:	421a      	tst	r2, r3
 8002fca:	d000      	beq.n	8002fce <lv_indev_read_timer_cb+0x132>
        indev_obj_act = NULL;
 8002fcc:	603d      	str	r5, [r7, #0]
    if(indev_reset_check(&i->proc)) return;
 8002fce:	079b      	lsls	r3, r3, #30
 8002fd0:	d413      	bmi.n	8002ffa <lv_indev_read_timer_cb+0x15e>
    i->proc.types.pointer.act_point.x = x;
 8002fd2:	4653      	mov	r3, sl
 8002fd4:	8123      	strh	r3, [r4, #8]
    i->proc.types.pointer.act_point.y = y;
 8002fd6:	465b      	mov	r3, fp
 8002fd8:	8163      	strh	r3, [r4, #10]
    if(data->state == LV_INDEV_STATE_PRESSED) indev_proc_press(&i->proc);
 8002fda:	ab02      	add	r3, sp, #8
 8002fdc:	7b9b      	ldrb	r3, [r3, #14]
 8002fde:	1d20      	adds	r0, r4, #4
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d100      	bne.n	8002fe6 <lv_indev_read_timer_cb+0x14a>
 8002fe4:	e1aa      	b.n	800333c <lv_indev_read_timer_cb+0x4a0>
    else indev_proc_release(&i->proc);
 8002fe6:	f7ff fb67 	bl	80026b8 <indev_proc_release>
    if(proc->reset_query) {
 8002fea:	4642      	mov	r2, r8
 8002fec:	7963      	ldrb	r3, [r4, #5]
 8002fee:	421a      	tst	r2, r3
 8002ff0:	d000      	beq.n	8002ff4 <lv_indev_read_timer_cb+0x158>
        indev_obj_act = NULL;
 8002ff2:	603d      	str	r5, [r7, #0]
    if(indev_reset_check(&i->proc)) return;
 8002ff4:	079b      	lsls	r3, r3, #30
 8002ff6:	d400      	bmi.n	8002ffa <lv_indev_read_timer_cb+0x15e>
 8002ff8:	e0ab      	b.n	8003152 <lv_indev_read_timer_cb+0x2b6>
        indev_proc_reset_query_handler(indev_act);
 8002ffa:	6834      	ldr	r4, [r6, #0]
 8002ffc:	e7b5      	b.n	8002f6a <lv_indev_read_timer_cb+0xce>
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8002ffe:	ab02      	add	r3, sp, #8
 8003000:	200c      	movs	r0, #12
 8003002:	5e1b      	ldrsh	r3, [r3, r0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d000      	beq.n	800300a <lv_indev_read_timer_cb+0x16e>
 8003008:	e111      	b.n	800322e <lv_indev_read_timer_cb+0x392>
    if(i->proc.wait_until_release) {
 800300a:	7963      	ldrb	r3, [r4, #5]
 800300c:	0719      	lsls	r1, r3, #28
 800300e:	d400      	bmi.n	8003012 <lv_indev_read_timer_cb+0x176>
 8003010:	e10a      	b.n	8003228 <lv_indev_read_timer_cb+0x38c>
        i->proc.long_pr_sent            = 0;
 8003012:	2109      	movs	r1, #9
 8003014:	438b      	bics	r3, r1
 8003016:	7163      	strb	r3, [r4, #5]
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 8003018:	2300      	movs	r3, #0
 800301a:	469b      	mov	fp, r3
        i->proc.pr_timestamp            = 0;
 800301c:	6465      	str	r5, [r4, #68]	; 0x44
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 800301e:	7225      	strb	r5, [r4, #8]
    i->proc.types.keypad.last_key   = data->key;
 8003020:	9b03      	ldr	r3, [sp, #12]
    i->proc.types.keypad.last_state = data->state;
 8003022:	7222      	strb	r2, [r4, #8]
    i->proc.types.keypad.last_key   = data->key;
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	60e3      	str	r3, [r4, #12]
    lv_group_t * g = i->group;
 8003028:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800302a:	469a      	mov	sl, r3
    if(g == NULL) return;
 800302c:	2b00      	cmp	r3, #0
 800302e:	d09c      	beq.n	8002f6a <lv_indev_read_timer_cb+0xce>
    indev_obj_act = lv_group_get_focused(g);
 8003030:	0018      	movs	r0, r3
 8003032:	f7ff fb2b 	bl	800268c <lv_group_get_focused>
 8003036:	6038      	str	r0, [r7, #0]
    if(indev_obj_act == NULL) return;
 8003038:	2800      	cmp	r0, #0
 800303a:	d0de      	beq.n	8002ffa <lv_indev_read_timer_cb+0x15e>
    if(data->state != LV_INDEV_STATE_RELEASED) {
 800303c:	ab02      	add	r3, sp, #8
 800303e:	7b9b      	ldrb	r3, [r3, #14]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <lv_indev_read_timer_cb+0x1ac>
        data->enc_diff = 0;
 8003044:	ab02      	add	r3, sp, #8
 8003046:	819d      	strh	r5, [r3, #12]
    indev_obj_act = lv_group_get_focused(g);
 8003048:	4650      	mov	r0, sl
 800304a:	f7ff fb1f 	bl	800268c <lv_group_get_focused>
 800304e:	6038      	str	r0, [r7, #0]
    if(indev_obj_act == NULL) return;
 8003050:	2800      	cmp	r0, #0
 8003052:	d0d2      	beq.n	8002ffa <lv_indev_read_timer_cb+0x15e>
    if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_RELEASED) {
 8003054:	ab02      	add	r3, sp, #8
 8003056:	7b9b      	ldrb	r3, [r3, #14]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d100      	bne.n	800305e <lv_indev_read_timer_cb+0x1c2>
 800305c:	e171      	b.n	8003342 <lv_indev_read_timer_cb+0x4a6>
    else if(data->state == LV_INDEV_STATE_RELEASED && last_state == LV_INDEV_STATE_PRESSED) {
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10c      	bne.n	800307c <lv_indev_read_timer_cb+0x1e0>
 8003062:	465b      	mov	r3, fp
 8003064:	2b01      	cmp	r3, #1
 8003066:	d109      	bne.n	800307c <lv_indev_read_timer_cb+0x1e0>
        if(data->key == LV_KEY_ENTER) {
 8003068:	9b03      	ldr	r3, [sp, #12]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2b0a      	cmp	r3, #10
 800306e:	d100      	bne.n	8003072 <lv_indev_read_timer_cb+0x1d6>
 8003070:	e226      	b.n	80034c0 <lv_indev_read_timer_cb+0x624>
        i->proc.long_pr_sent = 0;
 8003072:	2201      	movs	r2, #1
 8003074:	7963      	ldrb	r3, [r4, #5]
        i->proc.pr_timestamp = 0;
 8003076:	6465      	str	r5, [r4, #68]	; 0x44
        i->proc.long_pr_sent = 0;
 8003078:	4393      	bics	r3, r2
 800307a:	7163      	strb	r3, [r4, #5]
    if(data->enc_diff != 0) {
 800307c:	ab02      	add	r3, sp, #8
 800307e:	220c      	movs	r2, #12
 8003080:	5e9b      	ldrsh	r3, [r3, r2]
    indev_obj_act = NULL;
 8003082:	603d      	str	r5, [r7, #0]
    if(data->enc_diff != 0) {
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0b8      	beq.n	8002ffa <lv_indev_read_timer_cb+0x15e>
        if(lv_group_get_editing(g)) {
 8003088:	4650      	mov	r0, sl
 800308a:	f7ff fb09 	bl	80026a0 <lv_group_get_editing>
            if(data->enc_diff < 0) {
 800308e:	ab02      	add	r3, sp, #8
 8003090:	220c      	movs	r2, #12
 8003092:	5e9b      	ldrsh	r3, [r3, r2]
        if(lv_group_get_editing(g)) {
 8003094:	2800      	cmp	r0, #0
 8003096:	d100      	bne.n	800309a <lv_indev_read_timer_cb+0x1fe>
 8003098:	e180      	b.n	800339c <lv_indev_read_timer_cb+0x500>
            if(data->enc_diff < 0) {
 800309a:	2b00      	cmp	r3, #0
 800309c:	da00      	bge.n	80030a0 <lv_indev_read_timer_cb+0x204>
 800309e:	e1cf      	b.n	8003440 <lv_indev_read_timer_cb+0x5a4>
                for(s = 0; s < data->enc_diff; s++) {
 80030a0:	2200      	movs	r2, #0
 80030a2:	4693      	mov	fp, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d108      	bne.n	80030ba <lv_indev_read_timer_cb+0x21e>
 80030a8:	e7a7      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
 80030aa:	2301      	movs	r3, #1
 80030ac:	469c      	mov	ip, r3
 80030ae:	ab02      	add	r3, sp, #8
 80030b0:	220c      	movs	r2, #12
 80030b2:	5e9b      	ldrsh	r3, [r3, r2]
 80030b4:	44e3      	add	fp, ip
 80030b6:	459b      	cmp	fp, r3
 80030b8:	da9f      	bge.n	8002ffa <lv_indev_read_timer_cb+0x15e>
                    lv_group_send_data(g, LV_KEY_RIGHT);
 80030ba:	2113      	movs	r1, #19
 80030bc:	4650      	mov	r0, sl
 80030be:	f7ff fa77 	bl	80025b0 <lv_group_send_data>
    if(proc->reset_query) {
 80030c2:	4642      	mov	r2, r8
 80030c4:	7963      	ldrb	r3, [r4, #5]
 80030c6:	421a      	tst	r2, r3
 80030c8:	d000      	beq.n	80030cc <lv_indev_read_timer_cb+0x230>
        indev_obj_act = NULL;
 80030ca:	603d      	str	r5, [r7, #0]
                    if(indev_reset_check(&i->proc)) return;
 80030cc:	2201      	movs	r2, #1
    return proc->reset_query ? true : false;
 80030ce:	085b      	lsrs	r3, r3, #1
                    if(indev_reset_check(&i->proc)) return;
 80030d0:	421a      	tst	r2, r3
 80030d2:	d0ea      	beq.n	80030aa <lv_indev_read_timer_cb+0x20e>
        indev_proc_reset_query_handler(indev_act);
 80030d4:	6834      	ldr	r4, [r6, #0]
 80030d6:	e748      	b.n	8002f6a <lv_indev_read_timer_cb+0xce>
            indev_act->driver->disp->last_activity_time = lv_tick_get();
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	68dc      	ldr	r4, [r3, #12]
            indev_act->driver->disp->last_activity_time = lv_tick_get();
 80030dc:	f00d fe0c 	bl	8010cf8 <lv_tick_get>
 80030e0:	23ac      	movs	r3, #172	; 0xac
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	50e0      	str	r0, [r4, r3]
        if(indev_act->driver->type == LV_INDEV_TYPE_POINTER) {
 80030e6:	6834      	ldr	r4, [r6, #0]
 80030e8:	6821      	ldr	r1, [r4, #0]
 80030ea:	780b      	ldrb	r3, [r1, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d000      	beq.n	80030f2 <lv_indev_read_timer_cb+0x256>
 80030f0:	e733      	b.n	8002f5a <lv_indev_read_timer_cb+0xbe>
    lv_disp_t * disp = i->driver->disp;
 80030f2:	68cb      	ldr	r3, [r1, #12]
 80030f4:	469b      	mov	fp, r3
    i->proc.types.pointer.last_raw_point.x = data->point.x;
 80030f6:	ab02      	add	r3, sp, #8
 80030f8:	2200      	movs	r2, #0
 80030fa:	5e9a      	ldrsh	r2, [r3, r2]
    i->proc.types.pointer.last_raw_point.y = data->point.y;
 80030fc:	ab02      	add	r3, sp, #8
 80030fe:	2102      	movs	r1, #2
 8003100:	5e5b      	ldrsh	r3, [r3, r1]
    i->proc.types.pointer.last_raw_point.x = data->point.x;
 8003102:	9902      	ldr	r1, [sp, #8]
    i->proc.types.pointer.last_raw_point.y = data->point.y;
 8003104:	9300      	str	r3, [sp, #0]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 8003106:	465b      	mov	r3, fp
    i->proc.types.pointer.last_raw_point.x = data->point.x;
 8003108:	6121      	str	r1, [r4, #16]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 800310a:	6819      	ldr	r1, [r3, #0]
 800310c:	7c08      	ldrb	r0, [r1, #16]
 800310e:	4684      	mov	ip, r0
 8003110:	0680      	lsls	r0, r0, #26
 8003112:	d455      	bmi.n	80031c0 <lv_indev_read_timer_cb+0x324>
    if(disp->driver->rotated == LV_DISP_ROT_90 || disp->driver->rotated == LV_DISP_ROT_270) {
 8003114:	2030      	movs	r0, #48	; 0x30
 8003116:	4682      	mov	sl, r0
 8003118:	4660      	mov	r0, ip
 800311a:	4653      	mov	r3, sl
 800311c:	4018      	ands	r0, r3
 800311e:	2810      	cmp	r0, #16
 8003120:	d075      	beq.n	800320e <lv_indev_read_timer_cb+0x372>
    if(data->point.x >= lv_disp_get_hor_res(i->driver->disp)) {
 8003122:	4658      	mov	r0, fp
 8003124:	f00d fd28 	bl	8010b78 <lv_disp_get_hor_res>
    if(data->point.y >= lv_disp_get_ver_res(i->driver->disp)) {
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	68d8      	ldr	r0, [r3, #12]
 800312c:	f00d fd38 	bl	8010ba0 <lv_disp_get_ver_res>
    if(i->cursor != NULL &&
 8003130:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003132:	2800      	cmp	r0, #0
 8003134:	d005      	beq.n	8003142 <lv_indev_read_timer_cb+0x2a6>
 8003136:	9b02      	ldr	r3, [sp, #8]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	9a00      	ldr	r2, [sp, #0]
 800313c:	68e3      	ldr	r3, [r4, #12]
 800313e:	4293      	cmp	r3, r2
 8003140:	d154      	bne.n	80031ec <lv_indev_read_timer_cb+0x350>
    i->proc.types.pointer.act_point.x = data->point.x;
 8003142:	9b02      	ldr	r3, [sp, #8]
        indev_proc_press(&i->proc);
 8003144:	1d20      	adds	r0, r4, #4
    i->proc.types.pointer.act_point.x = data->point.x;
 8003146:	60a3      	str	r3, [r4, #8]
    if(i->proc.state == LV_INDEV_STATE_PRESSED) {
 8003148:	7923      	ldrb	r3, [r4, #4]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d05c      	beq.n	8003208 <lv_indev_read_timer_cb+0x36c>
        indev_proc_release(&i->proc);
 800314e:	f7ff fab3 	bl	80026b8 <indev_proc_release>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 8003152:	68a3      	ldr	r3, [r4, #8]
 8003154:	60e3      	str	r3, [r4, #12]
        indev_proc_reset_query_handler(indev_act);
 8003156:	6834      	ldr	r4, [r6, #0]
 8003158:	e707      	b.n	8002f6a <lv_indev_read_timer_cb+0xce>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 800315a:	ab02      	add	r3, sp, #8
 800315c:	7b9b      	ldrb	r3, [r3, #14]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d067      	beq.n	8003232 <lv_indev_read_timer_cb+0x396>
    if(i->proc.wait_until_release) {
 8003162:	7963      	ldrb	r3, [r4, #5]
 8003164:	071a      	lsls	r2, r3, #28
 8003166:	d504      	bpl.n	8003172 <lv_indev_read_timer_cb+0x2d6>
        i->proc.long_pr_sent            = 0;
 8003168:	2209      	movs	r2, #9
 800316a:	4393      	bics	r3, r2
        i->proc.pr_timestamp            = 0;
 800316c:	6465      	str	r5, [r4, #68]	; 0x44
        i->proc.long_pr_sent            = 0;
 800316e:	7163      	strb	r3, [r4, #5]
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 8003170:	7225      	strb	r5, [r4, #8]
    lv_group_t * g = i->group;
 8003172:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003174:	469a      	mov	sl, r3
    if(g == NULL) return;
 8003176:	2b00      	cmp	r3, #0
 8003178:	d100      	bne.n	800317c <lv_indev_read_timer_cb+0x2e0>
 800317a:	e6f6      	b.n	8002f6a <lv_indev_read_timer_cb+0xce>
    indev_obj_act = lv_group_get_focused(g);
 800317c:	0018      	movs	r0, r3
 800317e:	f7ff fa85 	bl	800268c <lv_group_get_focused>
 8003182:	6038      	str	r0, [r7, #0]
    if(indev_obj_act == NULL) return;
 8003184:	2800      	cmp	r0, #0
 8003186:	d100      	bne.n	800318a <lv_indev_read_timer_cb+0x2ee>
 8003188:	e737      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
    bool dis = lv_obj_has_state(indev_obj_act, LV_STATE_DISABLED);
 800318a:	2180      	movs	r1, #128	; 0x80
 800318c:	f001 ff68 	bl	8005060 <lv_obj_has_state>
 8003190:	9000      	str	r0, [sp, #0]
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 8003192:	7a21      	ldrb	r1, [r4, #8]
    i->proc.types.keypad.last_key = data->key;
 8003194:	9b03      	ldr	r3, [sp, #12]
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 8003196:	9101      	str	r1, [sp, #4]
    uint32_t prev_key = i->proc.types.keypad.last_key;
 8003198:	68e2      	ldr	r2, [r4, #12]
    i->proc.types.keypad.last_state = data->state;
 800319a:	a902      	add	r1, sp, #8
    i->proc.types.keypad.last_key = data->key;
 800319c:	60e3      	str	r3, [r4, #12]
    i->proc.types.keypad.last_state = data->state;
 800319e:	7b89      	ldrb	r1, [r1, #14]
 80031a0:	468b      	mov	fp, r1
 80031a2:	7221      	strb	r1, [r4, #8]
    if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_RELEASED) {
 80031a4:	2901      	cmp	r1, #1
 80031a6:	d055      	beq.n	8003254 <lv_indev_read_timer_cb+0x3b8>
    else if(!dis && data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_PRESSED) {
 80031a8:	2800      	cmp	r0, #0
 80031aa:	d100      	bne.n	80031ae <lv_indev_read_timer_cb+0x312>
 80031ac:	e0b4      	b.n	8003318 <lv_indev_read_timer_cb+0x47c>
        indev_proc_reset_query_handler(indev_act);
 80031ae:	6834      	ldr	r4, [r6, #0]
    indev_obj_act = NULL;
 80031b0:	603d      	str	r5, [r7, #0]
    if(indev->proc.reset_query) {
 80031b2:	7963      	ldrb	r3, [r4, #5]
 80031b4:	e6da      	b.n	8002f6c <lv_indev_read_timer_cb+0xd0>
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	200031ec 	.word	0x200031ec
 80031bc:	200031f0 	.word	0x200031f0
        data->point.x = disp->driver->hor_res - data->point.x - 1;
 80031c0:	43d2      	mvns	r2, r2
 80031c2:	4692      	mov	sl, r2
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 80031c4:	9b00      	ldr	r3, [sp, #0]
        data->point.x = disp->driver->hor_res - data->point.x - 1;
 80031c6:	880a      	ldrh	r2, [r1, #0]
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 80031c8:	43db      	mvns	r3, r3
        data->point.x = disp->driver->hor_res - data->point.x - 1;
 80031ca:	4452      	add	r2, sl
 80031cc:	a802      	add	r0, sp, #8
 80031ce:	b212      	sxth	r2, r2
 80031d0:	8002      	strh	r2, [r0, #0]
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 80031d2:	8849      	ldrh	r1, [r1, #2]
 80031d4:	18cb      	adds	r3, r1, r3
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	8043      	strh	r3, [r0, #2]
    if(disp->driver->rotated == LV_DISP_ROT_90 || disp->driver->rotated == LV_DISP_ROT_270) {
 80031da:	4660      	mov	r0, ip
 80031dc:	06c0      	lsls	r0, r0, #27
 80031de:	d5a0      	bpl.n	8003122 <lv_indev_read_timer_cb+0x286>
        data->point.x = disp->driver->ver_res - tmp - 1;
 80031e0:	43db      	mvns	r3, r3
        data->point.y = data->point.x;
 80031e2:	a802      	add	r0, sp, #8
        data->point.x = disp->driver->ver_res - tmp - 1;
 80031e4:	18cb      	adds	r3, r1, r3
        data->point.y = data->point.x;
 80031e6:	8042      	strh	r2, [r0, #2]
        data->point.x = disp->driver->ver_res - tmp - 1;
 80031e8:	8003      	strh	r3, [r0, #0]
 80031ea:	e79a      	b.n	8003122 <lv_indev_read_timer_cb+0x286>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 80031ec:	ab02      	add	r3, sp, #8
 80031ee:	2202      	movs	r2, #2
 80031f0:	5e9a      	ldrsh	r2, [r3, r2]
 80031f2:	ab02      	add	r3, sp, #8
 80031f4:	2100      	movs	r1, #0
 80031f6:	5e59      	ldrsh	r1, [r3, r1]
 80031f8:	f002 fca2 	bl	8005b40 <lv_obj_set_pos>
    i->proc.types.pointer.act_point.x = data->point.x;
 80031fc:	9b02      	ldr	r3, [sp, #8]
        indev_proc_press(&i->proc);
 80031fe:	1d20      	adds	r0, r4, #4
    i->proc.types.pointer.act_point.x = data->point.x;
 8003200:	60a3      	str	r3, [r4, #8]
    if(i->proc.state == LV_INDEV_STATE_PRESSED) {
 8003202:	7923      	ldrb	r3, [r4, #4]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d1a2      	bne.n	800314e <lv_indev_read_timer_cb+0x2b2>
        indev_proc_press(&i->proc);
 8003208:	f7ff fbe2 	bl	80029d0 <indev_proc_press>
 800320c:	e7a1      	b.n	8003152 <lv_indev_read_timer_cb+0x2b6>
        data->point.x = disp->driver->ver_res - tmp - 1;
 800320e:	466b      	mov	r3, sp
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 8003210:	8849      	ldrh	r1, [r1, #2]
        data->point.x = disp->driver->ver_res - tmp - 1;
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	e7e4      	b.n	80031e0 <lv_indev_read_timer_cb+0x344>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8003216:	ab02      	add	r3, sp, #8
 8003218:	7b9a      	ldrb	r2, [r3, #14]
 800321a:	2a01      	cmp	r2, #1
 800321c:	d000      	beq.n	8003220 <lv_indev_read_timer_cb+0x384>
 800321e:	e6f4      	b.n	800300a <lv_indev_read_timer_cb+0x16e>
 8003220:	7963      	ldrb	r3, [r4, #5]
 8003222:	0719      	lsls	r1, r3, #28
 8003224:	d500      	bpl.n	8003228 <lv_indev_read_timer_cb+0x38c>
 8003226:	e6a1      	b.n	8002f6c <lv_indev_read_timer_cb+0xd0>
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
 8003228:	7a23      	ldrb	r3, [r4, #8]
 800322a:	469b      	mov	fp, r3
 800322c:	e6f8      	b.n	8003020 <lv_indev_read_timer_cb+0x184>
            indev_act->driver->disp->last_activity_time = lv_tick_get();
 800322e:	68cc      	ldr	r4, [r1, #12]
 8003230:	e754      	b.n	80030dc <lv_indev_read_timer_cb+0x240>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8003232:	7963      	ldrb	r3, [r4, #5]
 8003234:	071a      	lsls	r2, r3, #28
 8003236:	d59c      	bpl.n	8003172 <lv_indev_read_timer_cb+0x2d6>
 8003238:	e698      	b.n	8002f6c <lv_indev_read_timer_cb+0xd0>
        if(i->proc.types.pointer.last_point.x != x ||
 800323a:	220c      	movs	r2, #12
 800323c:	5ea3      	ldrsh	r3, [r4, r2]
 800323e:	4553      	cmp	r3, sl
 8003240:	d104      	bne.n	800324c <lv_indev_read_timer_cb+0x3b0>
 8003242:	220e      	movs	r2, #14
 8003244:	5ea3      	ldrsh	r3, [r4, r2]
 8003246:	455b      	cmp	r3, fp
 8003248:	d100      	bne.n	800324c <lv_indev_read_timer_cb+0x3b0>
 800324a:	e6bb      	b.n	8002fc4 <lv_indev_read_timer_cb+0x128>
            indev_proc_release(&i->proc);
 800324c:	1d20      	adds	r0, r4, #4
 800324e:	f7ff fa33 	bl	80026b8 <indev_proc_release>
 8003252:	e6b7      	b.n	8002fc4 <lv_indev_read_timer_cb+0x128>
    if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_RELEASED) {
 8003254:	9a01      	ldr	r2, [sp, #4]
 8003256:	2a00      	cmp	r2, #0
 8003258:	d02d      	beq.n	80032b6 <lv_indev_read_timer_cb+0x41a>
    else if(!dis && data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_PRESSED) {
 800325a:	2800      	cmp	r0, #0
 800325c:	d1a7      	bne.n	80031ae <lv_indev_read_timer_cb+0x312>
 800325e:	9a01      	ldr	r2, [sp, #4]
 8003260:	2a01      	cmp	r2, #1
 8003262:	d1a4      	bne.n	80031ae <lv_indev_read_timer_cb+0x312>
        if(data->key == LV_KEY_ENTER) {
 8003264:	2b0a      	cmp	r3, #10
 8003266:	d100      	bne.n	800326a <lv_indev_read_timer_cb+0x3ce>
 8003268:	e21b      	b.n	80036a2 <lv_indev_read_timer_cb+0x806>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 800326a:	7963      	ldrb	r3, [r4, #5]
 800326c:	2201      	movs	r2, #1
 800326e:	4693      	mov	fp, r2
 8003270:	401a      	ands	r2, r3
 8003272:	9200      	str	r2, [sp, #0]
 8003274:	465a      	mov	r2, fp
 8003276:	421a      	tst	r2, r3
 8003278:	d100      	bne.n	800327c <lv_indev_read_timer_cb+0x3e0>
 800327a:	e1a2      	b.n	80035c2 <lv_indev_read_timer_cb+0x726>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 800327c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800327e:	f00d fd49 	bl	8010d14 <lv_tick_elaps>
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	8b5b      	ldrh	r3, [r3, #26]
        else if(i->proc.long_pr_sent != 0 &&
 8003286:	4298      	cmp	r0, r3
 8003288:	d991      	bls.n	80031ae <lv_indev_read_timer_cb+0x312>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 800328a:	f00d fd35 	bl	8010cf8 <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 800328e:	9903      	ldr	r1, [sp, #12]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8003290:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 8003292:	290a      	cmp	r1, #10
 8003294:	d100      	bne.n	8003298 <lv_indev_read_timer_cb+0x3fc>
 8003296:	e285      	b.n	80037a4 <lv_indev_read_timer_cb+0x908>
            else if(data->key == LV_KEY_NEXT) {
 8003298:	2909      	cmp	r1, #9
 800329a:	d100      	bne.n	800329e <lv_indev_read_timer_cb+0x402>
 800329c:	e2bb      	b.n	8003816 <lv_indev_read_timer_cb+0x97a>
                lv_group_send_data(g, data->key);
 800329e:	4650      	mov	r0, sl
            else if(data->key == LV_KEY_PREV) {
 80032a0:	290b      	cmp	r1, #11
 80032a2:	d100      	bne.n	80032a6 <lv_indev_read_timer_cb+0x40a>
 80032a4:	e2a5      	b.n	80037f2 <lv_indev_read_timer_cb+0x956>
                lv_group_send_data(g, data->key);
 80032a6:	f7ff f983 	bl	80025b0 <lv_group_send_data>
    if(proc->reset_query) {
 80032aa:	4642      	mov	r2, r8
 80032ac:	7963      	ldrb	r3, [r4, #5]
 80032ae:	4213      	tst	r3, r2
 80032b0:	d02d      	beq.n	800330e <lv_indev_read_timer_cb+0x472>
        indev_obj_act = NULL;
 80032b2:	603d      	str	r5, [r7, #0]
 80032b4:	e02b      	b.n	800330e <lv_indev_read_timer_cb+0x472>
        i->proc.pr_timestamp = lv_tick_get();
 80032b6:	f00d fd1f 	bl	8010cf8 <lv_tick_get>
        if(data->key == LV_KEY_NEXT) {
 80032ba:	9903      	ldr	r1, [sp, #12]
        i->proc.pr_timestamp = lv_tick_get();
 80032bc:	6460      	str	r0, [r4, #68]	; 0x44
        if(data->key == LV_KEY_NEXT) {
 80032be:	2909      	cmp	r1, #9
 80032c0:	d100      	bne.n	80032c4 <lv_indev_read_timer_cb+0x428>
 80032c2:	e0ee      	b.n	80034a2 <lv_indev_read_timer_cb+0x606>
        else if(data->key == LV_KEY_PREV) {
 80032c4:	290b      	cmp	r1, #11
 80032c6:	d100      	bne.n	80032ca <lv_indev_read_timer_cb+0x42e>
 80032c8:	e14f      	b.n	800356a <lv_indev_read_timer_cb+0x6ce>
        else if(!dis) {
 80032ca:	9b00      	ldr	r3, [sp, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d000      	beq.n	80032d2 <lv_indev_read_timer_cb+0x436>
 80032d0:	e76d      	b.n	80031ae <lv_indev_read_timer_cb+0x312>
                lv_group_send_data(g, LV_KEY_ENTER);
 80032d2:	4650      	mov	r0, sl
            if(data->key == LV_KEY_ENTER) {
 80032d4:	290a      	cmp	r1, #10
 80032d6:	d100      	bne.n	80032da <lv_indev_read_timer_cb+0x43e>
 80032d8:	e206      	b.n	80036e8 <lv_indev_read_timer_cb+0x84c>
            else if(data->key == LV_KEY_ESC) {
 80032da:	291b      	cmp	r1, #27
 80032dc:	d1e3      	bne.n	80032a6 <lv_indev_read_timer_cb+0x40a>
                lv_group_send_data(g, LV_KEY_ESC);
 80032de:	f7ff f967 	bl	80025b0 <lv_group_send_data>
    if(proc->reset_query) {
 80032e2:	4642      	mov	r2, r8
 80032e4:	7963      	ldrb	r3, [r4, #5]
 80032e6:	421a      	tst	r2, r3
 80032e8:	d000      	beq.n	80032ec <lv_indev_read_timer_cb+0x450>
        indev_obj_act = NULL;
 80032ea:	603d      	str	r5, [r7, #0]
    return proc->reset_query ? true : false;
 80032ec:	079b      	lsls	r3, r3, #30
                if(indev_reset_check(&i->proc)) return;
 80032ee:	0fda      	lsrs	r2, r3, #31
 80032f0:	4692      	mov	sl, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	da00      	bge.n	80032f8 <lv_indev_read_timer_cb+0x45c>
 80032f6:	e680      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
                lv_event_send(indev_obj_act, LV_EVENT_CANCEL, indev_act);
 80032f8:	2120      	movs	r1, #32
 80032fa:	6832      	ldr	r2, [r6, #0]
 80032fc:	6838      	ldr	r0, [r7, #0]
 80032fe:	f7fe fd2d 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8003302:	4642      	mov	r2, r8
 8003304:	7963      	ldrb	r3, [r4, #5]
 8003306:	4213      	tst	r3, r2
 8003308:	d001      	beq.n	800330e <lv_indev_read_timer_cb+0x472>
        indev_obj_act = NULL;
 800330a:	4652      	mov	r2, sl
 800330c:	603a      	str	r2, [r7, #0]
                if(indev_reset_check(&i->proc)) return;
 800330e:	079b      	lsls	r3, r3, #30
 8003310:	d400      	bmi.n	8003314 <lv_indev_read_timer_cb+0x478>
 8003312:	e74c      	b.n	80031ae <lv_indev_read_timer_cb+0x312>
        indev_proc_reset_query_handler(indev_act);
 8003314:	6834      	ldr	r4, [r6, #0]
 8003316:	e628      	b.n	8002f6a <lv_indev_read_timer_cb+0xce>
    else if(!dis && data->state == LV_INDEV_STATE_RELEASED && prev_state == LV_INDEV_STATE_PRESSED) {
 8003318:	465b      	mov	r3, fp
 800331a:	2b00      	cmp	r3, #0
 800331c:	d000      	beq.n	8003320 <lv_indev_read_timer_cb+0x484>
 800331e:	e746      	b.n	80031ae <lv_indev_read_timer_cb+0x312>
 8003320:	9b01      	ldr	r3, [sp, #4]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d000      	beq.n	8003328 <lv_indev_read_timer_cb+0x48c>
 8003326:	e742      	b.n	80031ae <lv_indev_read_timer_cb+0x312>
        data->key = prev_key;
 8003328:	9203      	str	r2, [sp, #12]
        if(data->key == LV_KEY_ENTER) {
 800332a:	2a0a      	cmp	r2, #10
 800332c:	d100      	bne.n	8003330 <lv_indev_read_timer_cb+0x494>
 800332e:	e16e      	b.n	800360e <lv_indev_read_timer_cb+0x772>
        i->proc.long_pr_sent = 0;
 8003330:	2201      	movs	r2, #1
 8003332:	7963      	ldrb	r3, [r4, #5]
        i->proc.pr_timestamp = 0;
 8003334:	6465      	str	r5, [r4, #68]	; 0x44
        i->proc.long_pr_sent = 0;
 8003336:	4393      	bics	r3, r2
 8003338:	7163      	strb	r3, [r4, #5]
 800333a:	e738      	b.n	80031ae <lv_indev_read_timer_cb+0x312>
    if(data->state == LV_INDEV_STATE_PRESSED) indev_proc_press(&i->proc);
 800333c:	f7ff fb48 	bl	80029d0 <indev_proc_press>
 8003340:	e653      	b.n	8002fea <lv_indev_read_timer_cb+0x14e>
    if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_RELEASED) {
 8003342:	465b      	mov	r3, fp
 8003344:	2b00      	cmp	r3, #0
 8003346:	d047      	beq.n	80033d8 <lv_indev_read_timer_cb+0x53c>
    else if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_PRESSED) {
 8003348:	2b01      	cmp	r3, #1
 800334a:	d000      	beq.n	800334e <lv_indev_read_timer_cb+0x4b2>
 800334c:	e696      	b.n	800307c <lv_indev_read_timer_cb+0x1e0>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 800334e:	465a      	mov	r2, fp
 8003350:	7963      	ldrb	r3, [r4, #5]
 8003352:	421a      	tst	r2, r3
 8003354:	d100      	bne.n	8003358 <lv_indev_read_timer_cb+0x4bc>
 8003356:	e08f      	b.n	8003478 <lv_indev_read_timer_cb+0x5dc>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 8003358:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800335a:	f00d fcdb 	bl	8010d14 <lv_tick_elaps>
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	8b5b      	ldrh	r3, [r3, #26]
 8003362:	4298      	cmp	r0, r3
 8003364:	d800      	bhi.n	8003368 <lv_indev_read_timer_cb+0x4cc>
 8003366:	e689      	b.n	800307c <lv_indev_read_timer_cb+0x1e0>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8003368:	f00d fcc6 	bl	8010cf8 <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 800336c:	9903      	ldr	r1, [sp, #12]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 800336e:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 8003370:	290a      	cmp	r1, #10
 8003372:	d100      	bne.n	8003376 <lv_indev_read_timer_cb+0x4da>
 8003374:	e23a      	b.n	80037ec <lv_indev_read_timer_cb+0x950>
            else if(data->key == LV_KEY_LEFT) {
 8003376:	2914      	cmp	r1, #20
 8003378:	d100      	bne.n	800337c <lv_indev_read_timer_cb+0x4e0>
 800337a:	e08b      	b.n	8003494 <lv_indev_read_timer_cb+0x5f8>
            else if(data->key == LV_KEY_RIGHT) {
 800337c:	2913      	cmp	r1, #19
 800337e:	d100      	bne.n	8003382 <lv_indev_read_timer_cb+0x4e6>
 8003380:	e100      	b.n	8003584 <lv_indev_read_timer_cb+0x6e8>
                lv_group_send_data(g, data->key);
 8003382:	4650      	mov	r0, sl
 8003384:	f7ff f914 	bl	80025b0 <lv_group_send_data>
    if(proc->reset_query) {
 8003388:	4642      	mov	r2, r8
 800338a:	7963      	ldrb	r3, [r4, #5]
 800338c:	4213      	tst	r3, r2
 800338e:	d000      	beq.n	8003392 <lv_indev_read_timer_cb+0x4f6>
        indev_obj_act = NULL;
 8003390:	603d      	str	r5, [r7, #0]
                if(indev_reset_check(&i->proc)) return;
 8003392:	079b      	lsls	r3, r3, #30
 8003394:	d400      	bmi.n	8003398 <lv_indev_read_timer_cb+0x4fc>
 8003396:	e671      	b.n	800307c <lv_indev_read_timer_cb+0x1e0>
        indev_proc_reset_query_handler(indev_act);
 8003398:	6834      	ldr	r4, [r6, #0]
 800339a:	e5e6      	b.n	8002f6a <lv_indev_read_timer_cb+0xce>
            if(data->enc_diff < 0) {
 800339c:	2b00      	cmp	r3, #0
 800339e:	db34      	blt.n	800340a <lv_indev_read_timer_cb+0x56e>
                for(s = 0; s < data->enc_diff; s++) {
 80033a0:	2200      	movs	r2, #0
 80033a2:	4693      	mov	fp, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d109      	bne.n	80033bc <lv_indev_read_timer_cb+0x520>
 80033a8:	e627      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
 80033aa:	2301      	movs	r3, #1
 80033ac:	469c      	mov	ip, r3
 80033ae:	ab02      	add	r3, sp, #8
 80033b0:	220c      	movs	r2, #12
 80033b2:	5e9b      	ldrsh	r3, [r3, r2]
 80033b4:	44e3      	add	fp, ip
 80033b6:	459b      	cmp	fp, r3
 80033b8:	db00      	blt.n	80033bc <lv_indev_read_timer_cb+0x520>
 80033ba:	e61e      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
                    lv_group_focus_next(g);
 80033bc:	4650      	mov	r0, sl
 80033be:	f7ff f8c3 	bl	8002548 <lv_group_focus_next>
    if(proc->reset_query) {
 80033c2:	4642      	mov	r2, r8
 80033c4:	7963      	ldrb	r3, [r4, #5]
 80033c6:	421a      	tst	r2, r3
 80033c8:	d000      	beq.n	80033cc <lv_indev_read_timer_cb+0x530>
        indev_obj_act = NULL;
 80033ca:	603d      	str	r5, [r7, #0]
                    if(indev_reset_check(&i->proc)) return;
 80033cc:	2201      	movs	r2, #1
    return proc->reset_query ? true : false;
 80033ce:	085b      	lsrs	r3, r3, #1
                    if(indev_reset_check(&i->proc)) return;
 80033d0:	421a      	tst	r2, r3
 80033d2:	d0ea      	beq.n	80033aa <lv_indev_read_timer_cb+0x50e>
        indev_proc_reset_query_handler(indev_act);
 80033d4:	6834      	ldr	r4, [r6, #0]
 80033d6:	e5c8      	b.n	8002f6a <lv_indev_read_timer_cb+0xce>
        i->proc.pr_timestamp = lv_tick_get();
 80033d8:	f00d fc8e 	bl	8010cf8 <lv_tick_get>
        if(data->key == LV_KEY_ENTER) {
 80033dc:	9903      	ldr	r1, [sp, #12]
        i->proc.pr_timestamp = lv_tick_get();
 80033de:	6460      	str	r0, [r4, #68]	; 0x44
        if(data->key == LV_KEY_ENTER) {
 80033e0:	290a      	cmp	r1, #10
 80033e2:	d100      	bne.n	80033e6 <lv_indev_read_timer_cb+0x54a>
 80033e4:	e0d5      	b.n	8003592 <lv_indev_read_timer_cb+0x6f6>
        else if(data->key == LV_KEY_LEFT) {
 80033e6:	2914      	cmp	r1, #20
 80033e8:	d054      	beq.n	8003494 <lv_indev_read_timer_cb+0x5f8>
        else if(data->key == LV_KEY_RIGHT) {
 80033ea:	2913      	cmp	r1, #19
 80033ec:	d100      	bne.n	80033f0 <lv_indev_read_timer_cb+0x554>
 80033ee:	e0c9      	b.n	8003584 <lv_indev_read_timer_cb+0x6e8>
            lv_group_send_data(g, LV_KEY_ESC);
 80033f0:	4650      	mov	r0, sl
        else if(data->key == LV_KEY_ESC) {
 80033f2:	291b      	cmp	r1, #27
 80033f4:	d100      	bne.n	80033f8 <lv_indev_read_timer_cb+0x55c>
 80033f6:	e13b      	b.n	8003670 <lv_indev_read_timer_cb+0x7d4>
            lv_group_send_data(g, data->key);
 80033f8:	f7ff f8da 	bl	80025b0 <lv_group_send_data>
    if(proc->reset_query) {
 80033fc:	4642      	mov	r2, r8
 80033fe:	7963      	ldrb	r3, [r4, #5]
 8003400:	421a      	tst	r2, r3
 8003402:	d0c6      	beq.n	8003392 <lv_indev_read_timer_cb+0x4f6>
        indev_obj_act = NULL;
 8003404:	465a      	mov	r2, fp
 8003406:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 8003408:	e7c3      	b.n	8003392 <lv_indev_read_timer_cb+0x4f6>
                for(s = 0; s < -data->enc_diff; s++) {
 800340a:	2300      	movs	r3, #0
 800340c:	469b      	mov	fp, r3
 800340e:	e009      	b.n	8003424 <lv_indev_read_timer_cb+0x588>
 8003410:	2301      	movs	r3, #1
 8003412:	469c      	mov	ip, r3
 8003414:	ab02      	add	r3, sp, #8
 8003416:	220c      	movs	r2, #12
 8003418:	5e9b      	ldrsh	r3, [r3, r2]
 800341a:	44e3      	add	fp, ip
 800341c:	425b      	negs	r3, r3
 800341e:	459b      	cmp	fp, r3
 8003420:	db00      	blt.n	8003424 <lv_indev_read_timer_cb+0x588>
 8003422:	e5ea      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
                    lv_group_focus_prev(g);
 8003424:	4650      	mov	r0, sl
 8003426:	f7ff f8a9 	bl	800257c <lv_group_focus_prev>
    if(proc->reset_query) {
 800342a:	4642      	mov	r2, r8
 800342c:	7963      	ldrb	r3, [r4, #5]
 800342e:	421a      	tst	r2, r3
 8003430:	d000      	beq.n	8003434 <lv_indev_read_timer_cb+0x598>
        indev_obj_act = NULL;
 8003432:	603d      	str	r5, [r7, #0]
                    if(indev_reset_check(&i->proc)) return;
 8003434:	2201      	movs	r2, #1
    return proc->reset_query ? true : false;
 8003436:	085b      	lsrs	r3, r3, #1
                    if(indev_reset_check(&i->proc)) return;
 8003438:	421a      	tst	r2, r3
 800343a:	d0e9      	beq.n	8003410 <lv_indev_read_timer_cb+0x574>
        indev_proc_reset_query_handler(indev_act);
 800343c:	6834      	ldr	r4, [r6, #0]
 800343e:	e594      	b.n	8002f6a <lv_indev_read_timer_cb+0xce>
                for(s = 0; s < -data->enc_diff; s++) {
 8003440:	2300      	movs	r3, #0
 8003442:	469b      	mov	fp, r3
 8003444:	e009      	b.n	800345a <lv_indev_read_timer_cb+0x5be>
 8003446:	2301      	movs	r3, #1
 8003448:	469c      	mov	ip, r3
 800344a:	ab02      	add	r3, sp, #8
 800344c:	220c      	movs	r2, #12
 800344e:	5e9b      	ldrsh	r3, [r3, r2]
 8003450:	44e3      	add	fp, ip
 8003452:	425b      	negs	r3, r3
 8003454:	459b      	cmp	fp, r3
 8003456:	db00      	blt.n	800345a <lv_indev_read_timer_cb+0x5be>
 8003458:	e5cf      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
                    lv_group_send_data(g, LV_KEY_LEFT);
 800345a:	2114      	movs	r1, #20
 800345c:	4650      	mov	r0, sl
 800345e:	f7ff f8a7 	bl	80025b0 <lv_group_send_data>
    if(proc->reset_query) {
 8003462:	4642      	mov	r2, r8
 8003464:	7963      	ldrb	r3, [r4, #5]
 8003466:	421a      	tst	r2, r3
 8003468:	d000      	beq.n	800346c <lv_indev_read_timer_cb+0x5d0>
        indev_obj_act = NULL;
 800346a:	603d      	str	r5, [r7, #0]
                    if(indev_reset_check(&i->proc)) return;
 800346c:	2201      	movs	r2, #1
    return proc->reset_query ? true : false;
 800346e:	085b      	lsrs	r3, r3, #1
                    if(indev_reset_check(&i->proc)) return;
 8003470:	421a      	tst	r2, r3
 8003472:	d0e8      	beq.n	8003446 <lv_indev_read_timer_cb+0x5aa>
        indev_proc_reset_query_handler(indev_act);
 8003474:	6834      	ldr	r4, [r6, #0]
 8003476:	e578      	b.n	8002f6a <lv_indev_read_timer_cb+0xce>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8003478:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800347a:	f00d fc4b 	bl	8010d14 <lv_tick_elaps>
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	8b1b      	ldrh	r3, [r3, #24]
 8003482:	4298      	cmp	r0, r3
 8003484:	d900      	bls.n	8003488 <lv_indev_read_timer_cb+0x5ec>
 8003486:	e11c      	b.n	80036c2 <lv_indev_read_timer_cb+0x826>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 8003488:	465a      	mov	r2, fp
 800348a:	7963      	ldrb	r3, [r4, #5]
 800348c:	421a      	tst	r2, r3
 800348e:	d100      	bne.n	8003492 <lv_indev_read_timer_cb+0x5f6>
 8003490:	e5f4      	b.n	800307c <lv_indev_read_timer_cb+0x1e0>
 8003492:	e761      	b.n	8003358 <lv_indev_read_timer_cb+0x4bc>
                data->enc_diff--;
 8003494:	ab02      	add	r3, sp, #8
 8003496:	899b      	ldrh	r3, [r3, #12]
 8003498:	aa02      	add	r2, sp, #8
 800349a:	3b01      	subs	r3, #1
 800349c:	b21b      	sxth	r3, r3
 800349e:	8193      	strh	r3, [r2, #12]
 80034a0:	e5ef      	b.n	8003082 <lv_indev_read_timer_cb+0x1e6>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80034a2:	2100      	movs	r1, #0
 80034a4:	4650      	mov	r0, sl
 80034a6:	f7ff f89d 	bl	80025e4 <lv_group_set_editing>
            lv_group_focus_next(g);
 80034aa:	4650      	mov	r0, sl
 80034ac:	f7ff f84c 	bl	8002548 <lv_group_focus_next>
    if(proc->reset_query) {
 80034b0:	4642      	mov	r2, r8
 80034b2:	7963      	ldrb	r3, [r4, #5]
 80034b4:	421a      	tst	r2, r3
 80034b6:	d100      	bne.n	80034ba <lv_indev_read_timer_cb+0x61e>
 80034b8:	e729      	b.n	800330e <lv_indev_read_timer_cb+0x472>
        indev_obj_act = NULL;
 80034ba:	9a01      	ldr	r2, [sp, #4]
 80034bc:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 80034be:	e726      	b.n	800330e <lv_indev_read_timer_cb+0x472>
            bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 80034c0:	f001 ff3c 	bl	800533c <lv_obj_is_editable>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d100      	bne.n	80034ca <lv_indev_read_timer_cb+0x62e>
 80034c8:	e11f      	b.n	800370a <lv_indev_read_timer_cb+0x86e>
            else if(lv_group_get_editing(g)) {
 80034ca:	4650      	mov	r0, sl
 80034cc:	f7ff f8e8 	bl	80026a0 <lv_group_get_editing>
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d100      	bne.n	80034d6 <lv_indev_read_timer_cb+0x63a>
 80034d4:	e147      	b.n	8003766 <lv_indev_read_timer_cb+0x8ca>
                if(!i->proc.long_pr_sent || lv_group_get_obj_count(g) <= 1) {
 80034d6:	7963      	ldrb	r3, [r4, #5]
 80034d8:	07db      	lsls	r3, r3, #31
 80034da:	d505      	bpl.n	80034e8 <lv_indev_read_timer_cb+0x64c>
 80034dc:	4650      	mov	r0, sl
 80034de:	f7ff f8e7 	bl	80026b0 <lv_group_get_obj_count>
 80034e2:	2801      	cmp	r0, #1
 80034e4:	d900      	bls.n	80034e8 <lv_indev_read_timer_cb+0x64c>
 80034e6:	e191      	b.n	800380c <lv_indev_read_timer_cb+0x970>
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 80034e8:	6832      	ldr	r2, [r6, #0]
 80034ea:	2108      	movs	r1, #8
 80034ec:	6838      	ldr	r0, [r7, #0]
 80034ee:	f7fe fc35 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 80034f2:	4642      	mov	r2, r8
 80034f4:	7963      	ldrb	r3, [r4, #5]
 80034f6:	4213      	tst	r3, r2
 80034f8:	d000      	beq.n	80034fc <lv_indev_read_timer_cb+0x660>
        indev_obj_act = NULL;
 80034fa:	603d      	str	r5, [r7, #0]
    return proc->reset_query ? true : false;
 80034fc:	079b      	lsls	r3, r3, #30
                    if(indev_reset_check(&i->proc)) return;
 80034fe:	0fda      	lsrs	r2, r3, #31
 8003500:	4693      	mov	fp, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	da00      	bge.n	8003508 <lv_indev_read_timer_cb+0x66c>
 8003506:	e578      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8003508:	6832      	ldr	r2, [r6, #0]
 800350a:	2104      	movs	r1, #4
 800350c:	6838      	ldr	r0, [r7, #0]
 800350e:	f7fe fc25 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8003512:	4642      	mov	r2, r8
 8003514:	7963      	ldrb	r3, [r4, #5]
 8003516:	4213      	tst	r3, r2
 8003518:	d001      	beq.n	800351e <lv_indev_read_timer_cb+0x682>
        indev_obj_act = NULL;
 800351a:	465a      	mov	r2, fp
 800351c:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 800351e:	079b      	lsls	r3, r3, #30
                    if(indev_reset_check(&i->proc)) return;
 8003520:	0fda      	lsrs	r2, r3, #31
 8003522:	4693      	mov	fp, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	da00      	bge.n	800352a <lv_indev_read_timer_cb+0x68e>
 8003528:	e567      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 800352a:	6832      	ldr	r2, [r6, #0]
 800352c:	2107      	movs	r1, #7
 800352e:	6838      	ldr	r0, [r7, #0]
 8003530:	f7fe fc14 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8003534:	4642      	mov	r2, r8
 8003536:	7963      	ldrb	r3, [r4, #5]
 8003538:	4213      	tst	r3, r2
 800353a:	d001      	beq.n	8003540 <lv_indev_read_timer_cb+0x6a4>
        indev_obj_act = NULL;
 800353c:	465a      	mov	r2, fp
 800353e:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 8003540:	079b      	lsls	r3, r3, #30
                    if(indev_reset_check(&i->proc)) return;
 8003542:	0fda      	lsrs	r2, r3, #31
 8003544:	4693      	mov	fp, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	da00      	bge.n	800354c <lv_indev_read_timer_cb+0x6b0>
 800354a:	e556      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
                    lv_group_send_data(g, LV_KEY_ENTER);
 800354c:	210a      	movs	r1, #10
 800354e:	4650      	mov	r0, sl
 8003550:	f7ff f82e 	bl	80025b0 <lv_group_send_data>
    if(proc->reset_query) {
 8003554:	4642      	mov	r2, r8
 8003556:	7963      	ldrb	r3, [r4, #5]
 8003558:	4213      	tst	r3, r2
 800355a:	d001      	beq.n	8003560 <lv_indev_read_timer_cb+0x6c4>
        indev_obj_act = NULL;
 800355c:	465a      	mov	r2, fp
 800355e:	603a      	str	r2, [r7, #0]
                    if(indev_reset_check(&i->proc)) return;
 8003560:	079b      	lsls	r3, r3, #30
 8003562:	d400      	bmi.n	8003566 <lv_indev_read_timer_cb+0x6ca>
 8003564:	e585      	b.n	8003072 <lv_indev_read_timer_cb+0x1d6>
        indev_proc_reset_query_handler(indev_act);
 8003566:	6834      	ldr	r4, [r6, #0]
 8003568:	e4ff      	b.n	8002f6a <lv_indev_read_timer_cb+0xce>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 800356a:	2100      	movs	r1, #0
 800356c:	4650      	mov	r0, sl
 800356e:	f7ff f839 	bl	80025e4 <lv_group_set_editing>
            lv_group_focus_prev(g);
 8003572:	4650      	mov	r0, sl
 8003574:	f7ff f802 	bl	800257c <lv_group_focus_prev>
    if(proc->reset_query) {
 8003578:	4642      	mov	r2, r8
 800357a:	7963      	ldrb	r3, [r4, #5]
 800357c:	421a      	tst	r2, r3
 800357e:	d100      	bne.n	8003582 <lv_indev_read_timer_cb+0x6e6>
 8003580:	e6c5      	b.n	800330e <lv_indev_read_timer_cb+0x472>
 8003582:	e79a      	b.n	80034ba <lv_indev_read_timer_cb+0x61e>
                data->enc_diff++;
 8003584:	ab02      	add	r3, sp, #8
 8003586:	899b      	ldrh	r3, [r3, #12]
 8003588:	aa02      	add	r2, sp, #8
 800358a:	3301      	adds	r3, #1
 800358c:	b21b      	sxth	r3, r3
 800358e:	8193      	strh	r3, [r2, #12]
 8003590:	e577      	b.n	8003082 <lv_indev_read_timer_cb+0x1e6>
            bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 8003592:	6838      	ldr	r0, [r7, #0]
 8003594:	f001 fed2 	bl	800533c <lv_obj_is_editable>
 8003598:	2800      	cmp	r0, #0
 800359a:	d100      	bne.n	800359e <lv_indev_read_timer_cb+0x702>
 800359c:	e0ec      	b.n	8003778 <lv_indev_read_timer_cb+0x8dc>
            if(lv_group_get_editing(g) == true || editable_or_scrollable == false) {
 800359e:	4650      	mov	r0, sl
 80035a0:	f7ff f87e 	bl	80026a0 <lv_group_get_editing>
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d100      	bne.n	80035aa <lv_indev_read_timer_cb+0x70e>
 80035a8:	e568      	b.n	800307c <lv_indev_read_timer_cb+0x1e0>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 80035aa:	2101      	movs	r1, #1
 80035ac:	6832      	ldr	r2, [r6, #0]
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 80035ae:	6838      	ldr	r0, [r7, #0]
 80035b0:	f7fe fbd4 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 80035b4:	4642      	mov	r2, r8
 80035b6:	7963      	ldrb	r3, [r4, #5]
 80035b8:	4213      	tst	r3, r2
 80035ba:	d100      	bne.n	80035be <lv_indev_read_timer_cb+0x722>
 80035bc:	e6e9      	b.n	8003392 <lv_indev_read_timer_cb+0x4f6>
        indev_obj_act = NULL;
 80035be:	603d      	str	r5, [r7, #0]
 80035c0:	e6e7      	b.n	8003392 <lv_indev_read_timer_cb+0x4f6>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 80035c2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80035c4:	f00d fba6 	bl	8010d14 <lv_tick_elaps>
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	8b1b      	ldrh	r3, [r3, #24]
 80035cc:	4298      	cmp	r0, r3
 80035ce:	d918      	bls.n	8003602 <lv_indev_read_timer_cb+0x766>
            i->proc.long_pr_sent = 1;
 80035d0:	2201      	movs	r2, #1
 80035d2:	7963      	ldrb	r3, [r4, #5]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	7163      	strb	r3, [r4, #5]
            if(data->key == LV_KEY_ENTER) {
 80035d8:	9b03      	ldr	r3, [sp, #12]
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	2b0a      	cmp	r3, #10
 80035de:	d000      	beq.n	80035e2 <lv_indev_read_timer_cb+0x746>
 80035e0:	e5e5      	b.n	80031ae <lv_indev_read_timer_cb+0x312>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 80035e2:	f00d fb89 	bl	8010cf8 <lv_tick_get>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 80035e6:	6832      	ldr	r2, [r6, #0]
                i->proc.longpr_rep_timestamp = lv_tick_get();
 80035e8:	64a0      	str	r0, [r4, #72]	; 0x48
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 80035ea:	2105      	movs	r1, #5
 80035ec:	6838      	ldr	r0, [r7, #0]
 80035ee:	f7fe fbb5 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 80035f2:	4642      	mov	r2, r8
 80035f4:	7963      	ldrb	r3, [r4, #5]
 80035f6:	4213      	tst	r3, r2
 80035f8:	d100      	bne.n	80035fc <lv_indev_read_timer_cb+0x760>
 80035fa:	e688      	b.n	800330e <lv_indev_read_timer_cb+0x472>
        indev_obj_act = NULL;
 80035fc:	9a00      	ldr	r2, [sp, #0]
 80035fe:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 8003600:	e685      	b.n	800330e <lv_indev_read_timer_cb+0x472>
        else if(i->proc.long_pr_sent != 0 &&
 8003602:	465a      	mov	r2, fp
 8003604:	7963      	ldrb	r3, [r4, #5]
 8003606:	421a      	tst	r2, r3
 8003608:	d100      	bne.n	800360c <lv_indev_read_timer_cb+0x770>
 800360a:	e5d0      	b.n	80031ae <lv_indev_read_timer_cb+0x312>
 800360c:	e636      	b.n	800327c <lv_indev_read_timer_cb+0x3e0>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 800360e:	6832      	ldr	r2, [r6, #0]
 8003610:	2108      	movs	r1, #8
 8003612:	6838      	ldr	r0, [r7, #0]
 8003614:	f7fe fba2 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8003618:	4642      	mov	r2, r8
 800361a:	7963      	ldrb	r3, [r4, #5]
 800361c:	421a      	tst	r2, r3
 800361e:	d001      	beq.n	8003624 <lv_indev_read_timer_cb+0x788>
        indev_obj_act = NULL;
 8003620:	465a      	mov	r2, fp
 8003622:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 8003624:	2201      	movs	r2, #1
            if(indev_reset_check(&i->proc)) return;
 8003626:	0799      	lsls	r1, r3, #30
 8003628:	d500      	bpl.n	800362c <lv_indev_read_timer_cb+0x790>
 800362a:	e4e6      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
            if(i->proc.long_pr_sent == 0) {
 800362c:	0011      	movs	r1, r2
 800362e:	4019      	ands	r1, r3
 8003630:	468a      	mov	sl, r1
 8003632:	421a      	tst	r2, r3
 8003634:	d10d      	bne.n	8003652 <lv_indev_read_timer_cb+0x7b6>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8003636:	6832      	ldr	r2, [r6, #0]
 8003638:	2104      	movs	r1, #4
 800363a:	6838      	ldr	r0, [r7, #0]
 800363c:	f7fe fb8e 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8003640:	4642      	mov	r2, r8
 8003642:	7963      	ldrb	r3, [r4, #5]
 8003644:	4213      	tst	r3, r2
 8003646:	d001      	beq.n	800364c <lv_indev_read_timer_cb+0x7b0>
        indev_obj_act = NULL;
 8003648:	4652      	mov	r2, sl
 800364a:	603a      	str	r2, [r7, #0]
                if(indev_reset_check(&i->proc)) return;
 800364c:	079b      	lsls	r3, r3, #30
 800364e:	d500      	bpl.n	8003652 <lv_indev_read_timer_cb+0x7b6>
 8003650:	e4d3      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8003652:	6832      	ldr	r2, [r6, #0]
 8003654:	2107      	movs	r1, #7
 8003656:	6838      	ldr	r0, [r7, #0]
 8003658:	f7fe fb80 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 800365c:	4642      	mov	r2, r8
 800365e:	7963      	ldrb	r3, [r4, #5]
 8003660:	421a      	tst	r2, r3
 8003662:	d000      	beq.n	8003666 <lv_indev_read_timer_cb+0x7ca>
        indev_obj_act = NULL;
 8003664:	603d      	str	r5, [r7, #0]
            if(indev_reset_check(&i->proc)) return;
 8003666:	079b      	lsls	r3, r3, #30
 8003668:	d400      	bmi.n	800366c <lv_indev_read_timer_cb+0x7d0>
 800366a:	e661      	b.n	8003330 <lv_indev_read_timer_cb+0x494>
        indev_proc_reset_query_handler(indev_act);
 800366c:	6834      	ldr	r4, [r6, #0]
 800366e:	e47c      	b.n	8002f6a <lv_indev_read_timer_cb+0xce>
            lv_group_send_data(g, LV_KEY_ESC);
 8003670:	f7fe ff9e 	bl	80025b0 <lv_group_send_data>
    if(proc->reset_query) {
 8003674:	4642      	mov	r2, r8
 8003676:	7963      	ldrb	r3, [r4, #5]
 8003678:	421a      	tst	r2, r3
 800367a:	d001      	beq.n	8003680 <lv_indev_read_timer_cb+0x7e4>
        indev_obj_act = NULL;
 800367c:	465a      	mov	r2, fp
 800367e:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 8003680:	079b      	lsls	r3, r3, #30
            if(indev_reset_check(&i->proc)) return;
 8003682:	0fda      	lsrs	r2, r3, #31
 8003684:	4693      	mov	fp, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	da00      	bge.n	800368c <lv_indev_read_timer_cb+0x7f0>
 800368a:	e4b6      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, indev_act);
 800368c:	6832      	ldr	r2, [r6, #0]
 800368e:	2120      	movs	r1, #32
 8003690:	6838      	ldr	r0, [r7, #0]
 8003692:	f7fe fb63 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8003696:	4642      	mov	r2, r8
 8003698:	7963      	ldrb	r3, [r4, #5]
 800369a:	4213      	tst	r3, r2
 800369c:	d100      	bne.n	80036a0 <lv_indev_read_timer_cb+0x804>
 800369e:	e678      	b.n	8003392 <lv_indev_read_timer_cb+0x4f6>
 80036a0:	e6b0      	b.n	8003404 <lv_indev_read_timer_cb+0x568>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, indev_act);
 80036a2:	6832      	ldr	r2, [r6, #0]
 80036a4:	2102      	movs	r1, #2
 80036a6:	6838      	ldr	r0, [r7, #0]
 80036a8:	f7fe fb58 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 80036ac:	4642      	mov	r2, r8
 80036ae:	7963      	ldrb	r3, [r4, #5]
 80036b0:	421a      	tst	r2, r3
 80036b2:	d001      	beq.n	80036b8 <lv_indev_read_timer_cb+0x81c>
        indev_obj_act = NULL;
 80036b4:	9a00      	ldr	r2, [sp, #0]
 80036b6:	603a      	str	r2, [r7, #0]
            if(indev_reset_check(&i->proc)) return;
 80036b8:	079a      	lsls	r2, r3, #30
 80036ba:	d400      	bmi.n	80036be <lv_indev_read_timer_cb+0x822>
 80036bc:	e5d6      	b.n	800326c <lv_indev_read_timer_cb+0x3d0>
        indev_proc_reset_query_handler(indev_act);
 80036be:	6834      	ldr	r4, [r6, #0]
 80036c0:	e453      	b.n	8002f6a <lv_indev_read_timer_cb+0xce>
            i->proc.long_pr_sent = 1;
 80036c2:	2201      	movs	r2, #1
 80036c4:	7963      	ldrb	r3, [r4, #5]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	7163      	strb	r3, [r4, #5]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 80036ca:	f00d fb15 	bl	8010cf8 <lv_tick_get>
            if(data->key == LV_KEY_ENTER) {
 80036ce:	9b03      	ldr	r3, [sp, #12]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 80036d0:	64a0      	str	r0, [r4, #72]	; 0x48
            if(data->key == LV_KEY_ENTER) {
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2b0a      	cmp	r3, #10
 80036d6:	d071      	beq.n	80037bc <lv_indev_read_timer_cb+0x920>
            i->proc.long_pr_sent = 1;
 80036d8:	2201      	movs	r2, #1
 80036da:	7963      	ldrb	r3, [r4, #5]
 80036dc:	4313      	orrs	r3, r2
 80036de:	7163      	strb	r3, [r4, #5]
    if(data->enc_diff != 0) {
 80036e0:	ab02      	add	r3, sp, #8
 80036e2:	220c      	movs	r2, #12
 80036e4:	5e9b      	ldrsh	r3, [r3, r2]
            i->proc.long_pr_sent = 1;
 80036e6:	e4cc      	b.n	8003082 <lv_indev_read_timer_cb+0x1e6>
                lv_group_send_data(g, LV_KEY_ENTER);
 80036e8:	f7fe ff62 	bl	80025b0 <lv_group_send_data>
    if(proc->reset_query) {
 80036ec:	4642      	mov	r2, r8
 80036ee:	7963      	ldrb	r3, [r4, #5]
 80036f0:	421a      	tst	r2, r3
 80036f2:	d001      	beq.n	80036f8 <lv_indev_read_timer_cb+0x85c>
        indev_obj_act = NULL;
 80036f4:	9a00      	ldr	r2, [sp, #0]
 80036f6:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 80036f8:	079b      	lsls	r3, r3, #30
                if(indev_reset_check(&i->proc)) return;
 80036fa:	0fda      	lsrs	r2, r3, #31
 80036fc:	4692      	mov	sl, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	da00      	bge.n	8003704 <lv_indev_read_timer_cb+0x868>
 8003702:	e47a      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
                if(!dis) lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 8003704:	2101      	movs	r1, #1
 8003706:	6832      	ldr	r2, [r6, #0]
 8003708:	e5f8      	b.n	80032fc <lv_indev_read_timer_cb+0x460>
                                          lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_SCROLLABLE);
 800370a:	2110      	movs	r1, #16
 800370c:	6838      	ldr	r0, [r7, #0]
 800370e:	f001 fc97 	bl	8005040 <lv_obj_has_flag>
 8003712:	4683      	mov	fp, r0
            bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 8003714:	2800      	cmp	r0, #0
 8003716:	d000      	beq.n	800371a <lv_indev_read_timer_cb+0x87e>
 8003718:	e6d7      	b.n	80034ca <lv_indev_read_timer_cb+0x62e>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 800371a:	6832      	ldr	r2, [r6, #0]
 800371c:	2108      	movs	r1, #8
 800371e:	6838      	ldr	r0, [r7, #0]
 8003720:	f7fe fb1c 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8003724:	4640      	mov	r0, r8
 8003726:	4642      	mov	r2, r8
 8003728:	7963      	ldrb	r3, [r4, #5]
 800372a:	4018      	ands	r0, r3
 800372c:	421a      	tst	r2, r3
 800372e:	d001      	beq.n	8003734 <lv_indev_read_timer_cb+0x898>
        indev_obj_act = NULL;
 8003730:	465a      	mov	r2, fp
 8003732:	603a      	str	r2, [r7, #0]
    return proc->reset_query ? true : false;
 8003734:	2101      	movs	r1, #1
 8003736:	085a      	lsrs	r2, r3, #1
                if(indev_reset_check(&i->proc)) return;
 8003738:	4211      	tst	r1, r2
 800373a:	d000      	beq.n	800373e <lv_indev_read_timer_cb+0x8a2>
 800373c:	e45d      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 800373e:	4219      	tst	r1, r3
 8003740:	d025      	beq.n	800378e <lv_indev_read_timer_cb+0x8f2>
    if(proc->reset_query) {
 8003742:	2800      	cmp	r0, #0
 8003744:	d003      	beq.n	800374e <lv_indev_read_timer_cb+0x8b2>
        indev_obj_act = NULL;
 8003746:	603d      	str	r5, [r7, #0]
                if(indev_reset_check(&i->proc)) return;
 8003748:	07d3      	lsls	r3, r2, #31
 800374a:	d500      	bpl.n	800374e <lv_indev_read_timer_cb+0x8b2>
 800374c:	e455      	b.n	8002ffa <lv_indev_read_timer_cb+0x15e>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 800374e:	6832      	ldr	r2, [r6, #0]
 8003750:	2107      	movs	r1, #7
 8003752:	6838      	ldr	r0, [r7, #0]
 8003754:	f7fe fb02 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8003758:	4642      	mov	r2, r8
 800375a:	7963      	ldrb	r3, [r4, #5]
 800375c:	4213      	tst	r3, r2
 800375e:	d100      	bne.n	8003762 <lv_indev_read_timer_cb+0x8c6>
 8003760:	e6fe      	b.n	8003560 <lv_indev_read_timer_cb+0x6c4>
        indev_obj_act = NULL;
 8003762:	603d      	str	r5, [r7, #0]
    return proc->reset_query ? true : false;
 8003764:	e6fc      	b.n	8003560 <lv_indev_read_timer_cb+0x6c4>
            else if(!i->proc.long_pr_sent) {
 8003766:	2101      	movs	r1, #1
 8003768:	7963      	ldrb	r3, [r4, #5]
 800376a:	420b      	tst	r3, r1
 800376c:	d000      	beq.n	8003770 <lv_indev_read_timer_cb+0x8d4>
 800376e:	e480      	b.n	8003072 <lv_indev_read_timer_cb+0x1d6>
                lv_group_set_editing(g, true); /*Set edit mode*/
 8003770:	4650      	mov	r0, sl
 8003772:	f7fe ff37 	bl	80025e4 <lv_group_set_editing>
 8003776:	e47c      	b.n	8003072 <lv_indev_read_timer_cb+0x1d6>
                                          lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_SCROLLABLE);
 8003778:	2110      	movs	r1, #16
 800377a:	6838      	ldr	r0, [r7, #0]
 800377c:	f001 fc60 	bl	8005040 <lv_obj_has_flag>
            bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 8003780:	2800      	cmp	r0, #0
 8003782:	d000      	beq.n	8003786 <lv_indev_read_timer_cb+0x8ea>
 8003784:	e70b      	b.n	800359e <lv_indev_read_timer_cb+0x702>
            if(lv_group_get_editing(g) == true || editable_or_scrollable == false) {
 8003786:	4650      	mov	r0, sl
 8003788:	f7fe ff8a 	bl	80026a0 <lv_group_get_editing>
 800378c:	e70d      	b.n	80035aa <lv_indev_read_timer_cb+0x70e>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 800378e:	2104      	movs	r1, #4
 8003790:	6832      	ldr	r2, [r6, #0]
 8003792:	6838      	ldr	r0, [r7, #0]
 8003794:	f7fe fae2 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8003798:	4641      	mov	r1, r8
 800379a:	7963      	ldrb	r3, [r4, #5]
 800379c:	085a      	lsrs	r2, r3, #1
 800379e:	420b      	tst	r3, r1
 80037a0:	d0d2      	beq.n	8003748 <lv_indev_read_timer_cb+0x8ac>
 80037a2:	e7d0      	b.n	8003746 <lv_indev_read_timer_cb+0x8aa>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 80037a4:	6832      	ldr	r2, [r6, #0]
 80037a6:	6838      	ldr	r0, [r7, #0]
 80037a8:	3904      	subs	r1, #4
 80037aa:	f7fe fad7 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 80037ae:	4642      	mov	r2, r8
 80037b0:	7963      	ldrb	r3, [r4, #5]
 80037b2:	4213      	tst	r3, r2
 80037b4:	d100      	bne.n	80037b8 <lv_indev_read_timer_cb+0x91c>
 80037b6:	e5aa      	b.n	800330e <lv_indev_read_timer_cb+0x472>
        indev_obj_act = NULL;
 80037b8:	603d      	str	r5, [r7, #0]
 80037ba:	e5a8      	b.n	800330e <lv_indev_read_timer_cb+0x472>
                bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 80037bc:	6838      	ldr	r0, [r7, #0]
 80037be:	f001 fdbd 	bl	800533c <lv_obj_is_editable>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d035      	beq.n	8003832 <lv_indev_read_timer_cb+0x996>
                    if(lv_group_get_obj_count(g) > 1) {
 80037c6:	4650      	mov	r0, sl
 80037c8:	f7fe ff72 	bl	80026b0 <lv_group_get_obj_count>
 80037cc:	2801      	cmp	r0, #1
 80037ce:	d983      	bls.n	80036d8 <lv_indev_read_timer_cb+0x83c>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 80037d0:	4650      	mov	r0, sl
 80037d2:	f7fe ff65 	bl	80026a0 <lv_group_get_editing>
 80037d6:	2301      	movs	r3, #1
 80037d8:	4043      	eors	r3, r0
 80037da:	b2d9      	uxtb	r1, r3
 80037dc:	4650      	mov	r0, sl
 80037de:	f7fe ff01 	bl	80025e4 <lv_group_set_editing>
                        lv_obj_clear_state(indev_obj_act, LV_STATE_PRESSED);    /*Remove the pressed state manually*/
 80037e2:	2120      	movs	r1, #32
 80037e4:	6838      	ldr	r0, [r7, #0]
 80037e6:	f001 fc21 	bl	800502c <lv_obj_clear_state>
 80037ea:	e775      	b.n	80036d8 <lv_indev_read_timer_cb+0x83c>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 80037ec:	6832      	ldr	r2, [r6, #0]
 80037ee:	3904      	subs	r1, #4
 80037f0:	e6dd      	b.n	80035ae <lv_indev_read_timer_cb+0x712>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80037f2:	2100      	movs	r1, #0
 80037f4:	f7fe fef6 	bl	80025e4 <lv_group_set_editing>
                lv_group_focus_prev(g);
 80037f8:	4650      	mov	r0, sl
 80037fa:	f7fe febf 	bl	800257c <lv_group_focus_prev>
    if(proc->reset_query) {
 80037fe:	4642      	mov	r2, r8
 8003800:	7963      	ldrb	r3, [r4, #5]
 8003802:	4213      	tst	r3, r2
 8003804:	d100      	bne.n	8003808 <lv_indev_read_timer_cb+0x96c>
 8003806:	e582      	b.n	800330e <lv_indev_read_timer_cb+0x472>
        indev_obj_act = NULL;
 8003808:	603d      	str	r5, [r7, #0]
 800380a:	e580      	b.n	800330e <lv_indev_read_timer_cb+0x472>
                    lv_obj_clear_state(indev_obj_act, LV_STATE_PRESSED);    /*Remove the pressed state manually*/
 800380c:	2120      	movs	r1, #32
 800380e:	6838      	ldr	r0, [r7, #0]
 8003810:	f001 fc0c 	bl	800502c <lv_obj_clear_state>
 8003814:	e42d      	b.n	8003072 <lv_indev_read_timer_cb+0x1d6>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8003816:	2100      	movs	r1, #0
 8003818:	4650      	mov	r0, sl
 800381a:	f7fe fee3 	bl	80025e4 <lv_group_set_editing>
                lv_group_focus_next(g);
 800381e:	4650      	mov	r0, sl
 8003820:	f7fe fe92 	bl	8002548 <lv_group_focus_next>
    if(proc->reset_query) {
 8003824:	4642      	mov	r2, r8
 8003826:	7963      	ldrb	r3, [r4, #5]
 8003828:	4213      	tst	r3, r2
 800382a:	d100      	bne.n	800382e <lv_indev_read_timer_cb+0x992>
 800382c:	e56f      	b.n	800330e <lv_indev_read_timer_cb+0x472>
        indev_obj_act = NULL;
 800382e:	603d      	str	r5, [r7, #0]
 8003830:	e56d      	b.n	800330e <lv_indev_read_timer_cb+0x472>
                                              lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_SCROLLABLE);
 8003832:	2110      	movs	r1, #16
 8003834:	6838      	ldr	r0, [r7, #0]
 8003836:	f001 fc03 	bl	8005040 <lv_obj_has_flag>
                bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 800383a:	2800      	cmp	r0, #0
 800383c:	d1c3      	bne.n	80037c6 <lv_indev_read_timer_cb+0x92a>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 800383e:	6832      	ldr	r2, [r6, #0]
 8003840:	2105      	movs	r1, #5
 8003842:	6838      	ldr	r0, [r7, #0]
 8003844:	f7fe fa8a 	bl	8001d5c <lv_event_send>
    if(proc->reset_query) {
 8003848:	4642      	mov	r2, r8
 800384a:	7963      	ldrb	r3, [r4, #5]
 800384c:	4213      	tst	r3, r2
 800384e:	d000      	beq.n	8003852 <lv_indev_read_timer_cb+0x9b6>
        indev_obj_act = NULL;
 8003850:	603d      	str	r5, [r7, #0]
                    if(indev_reset_check(&i->proc)) return;
 8003852:	079b      	lsls	r3, r3, #30
 8003854:	d400      	bmi.n	8003858 <lv_indev_read_timer_cb+0x9bc>
 8003856:	e73f      	b.n	80036d8 <lv_indev_read_timer_cb+0x83c>
        indev_proc_reset_query_handler(indev_act);
 8003858:	6834      	ldr	r4, [r6, #0]
 800385a:	f7ff fb86 	bl	8002f6a <lv_indev_read_timer_cb+0xce>
 800385e:	46c0      	nop			; (mov r8, r8)

08003860 <find_snap_point_y>:
 * @param ofs offset to snap points. Useful to get a snap point in an imagined case
 *            what if children are already moved by this value
 * @return the distance of the snap point.
 */
static lv_coord_t find_snap_point_y(const lv_obj_t * obj, lv_coord_t min, lv_coord_t max, lv_coord_t ofs)
{
 8003860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003862:	4657      	mov	r7, sl
 8003864:	464e      	mov	r6, r9
 8003866:	46de      	mov	lr, fp
 8003868:	4645      	mov	r5, r8
 800386a:	b5e0      	push	{r5, r6, r7, lr}
 800386c:	b087      	sub	sp, #28
 800386e:	0006      	movs	r6, r0
 8003870:	4689      	mov	r9, r1
 8003872:	469a      	mov	sl, r3
 8003874:	9201      	str	r2, [sp, #4]
    lv_scroll_snap_t align = lv_obj_get_scroll_snap_y(obj);
 8003876:	f004 fa13 	bl	8007ca0 <lv_obj_get_scroll_snap_y>
 800387a:	1e07      	subs	r7, r0, #0
    if(align == LV_SCROLL_SNAP_NONE) return 0;
 800387c:	d107      	bne.n	800388e <find_snap_point_y+0x2e>
 800387e:	2000      	movs	r0, #0
            }
        }
    }

    return dist == LV_COORD_MAX ? 0 : -dist;
}
 8003880:	b007      	add	sp, #28
 8003882:	bcf0      	pop	{r4, r5, r6, r7}
 8003884:	46bb      	mov	fp, r7
 8003886:	46b2      	mov	sl, r6
 8003888:	46a9      	mov	r9, r5
 800388a:	46a0      	mov	r8, r4
 800388c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800388e:	2210      	movs	r2, #16
 8003890:	2100      	movs	r1, #0
 8003892:	0030      	movs	r0, r6
 8003894:	f005 ff2c 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_bottom(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8003898:	2211      	movs	r2, #17
    return (lv_coord_t)v.num;
 800389a:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800389c:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800389e:	2100      	movs	r1, #0
 80038a0:	0030      	movs	r0, r6
    return (lv_coord_t)v.num;
 80038a2:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80038a4:	f005 ff24 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80038a8:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80038aa:	9004      	str	r0, [sp, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80038ac:	0030      	movs	r0, r6
    return (lv_coord_t)v.num;
 80038ae:	9303      	str	r3, [sp, #12]
 80038b0:	f007 fb60 	bl	800af74 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d0e2      	beq.n	800387e <find_snap_point_y+0x1e>
    lv_coord_t dist = LV_COORD_MAX;
 80038b8:	4b31      	ldr	r3, [pc, #196]	; (8003980 <find_snap_point_y+0x120>)
    for(i = 0; i < child_cnt; i++) {
 80038ba:	2400      	movs	r4, #0
    lv_coord_t dist = LV_COORD_MAX;
 80038bc:	9302      	str	r3, [sp, #8]
 80038be:	003b      	movs	r3, r7
 80038c0:	0007      	movs	r7, r0
 80038c2:	4698      	mov	r8, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 80038c4:	68b3      	ldr	r3, [r6, #8]
 80038c6:	00a2      	lsls	r2, r4, #2
 80038c8:	681b      	ldr	r3, [r3, #0]
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80038ca:	492e      	ldr	r1, [pc, #184]	; (8003984 <find_snap_point_y+0x124>)
        lv_obj_t * child = obj->spec_attr->children[i];
 80038cc:	58d5      	ldr	r5, [r2, r3]
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80038ce:	0028      	movs	r0, r5
 80038d0:	f001 fbbe 	bl	8005050 <lv_obj_has_flag_any>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	d10d      	bne.n	80038f4 <find_snap_point_y+0x94>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPPABLE)) {
 80038d8:	2180      	movs	r1, #128	; 0x80
 80038da:	0028      	movs	r0, r5
 80038dc:	0149      	lsls	r1, r1, #5
 80038de:	f001 fbaf 	bl	8005040 <lv_obj_has_flag>
 80038e2:	2800      	cmp	r0, #0
 80038e4:	d006      	beq.n	80038f4 <find_snap_point_y+0x94>
            switch(align) {
 80038e6:	4643      	mov	r3, r8
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d042      	beq.n	8003972 <find_snap_point_y+0x112>
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d026      	beq.n	800393e <find_snap_point_y+0xde>
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d009      	beq.n	8003908 <find_snap_point_y+0xa8>
    for(i = 0; i < child_cnt; i++) {
 80038f4:	3401      	adds	r4, #1
 80038f6:	42a7      	cmp	r7, r4
 80038f8:	d1e4      	bne.n	80038c4 <find_snap_point_y+0x64>
    return dist == LV_COORD_MAX ? 0 : -dist;
 80038fa:	4b21      	ldr	r3, [pc, #132]	; (8003980 <find_snap_point_y+0x120>)
 80038fc:	9a02      	ldr	r2, [sp, #8]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d0bd      	beq.n	800387e <find_snap_point_y+0x1e>
 8003902:	4250      	negs	r0, r2
 8003904:	b200      	sxth	r0, r0
 8003906:	e7bb      	b.n	8003880 <find_snap_point_y+0x20>
                    y_parent = obj->coords.y1 + pad_top;
 8003908:	8a72      	ldrh	r2, [r6, #18]
            y_child += ofs;
 800390a:	8a6b      	ldrh	r3, [r5, #18]
                    y_parent = obj->coords.y1 + pad_top;
 800390c:	445a      	add	r2, fp
 800390e:	b292      	uxth	r2, r2
            y_child += ofs;
 8003910:	4453      	add	r3, sl
 8003912:	b299      	uxth	r1, r3
 8003914:	b21b      	sxth	r3, r3
            if(y_child >= min && y_child <= max) {
 8003916:	454b      	cmp	r3, r9
 8003918:	dbec      	blt.n	80038f4 <find_snap_point_y+0x94>
 800391a:	9801      	ldr	r0, [sp, #4]
 800391c:	4283      	cmp	r3, r0
 800391e:	dce9      	bgt.n	80038f4 <find_snap_point_y+0x94>
                lv_coord_t y = y_child -  y_parent;
 8003920:	1a8a      	subs	r2, r1, r2
 8003922:	b212      	sxth	r2, r2
                if(LV_ABS(y) < LV_ABS(dist)) dist = y;
 8003924:	17d3      	asrs	r3, r2, #31
 8003926:	18d1      	adds	r1, r2, r3
 8003928:	4059      	eors	r1, r3
 800392a:	9b02      	ldr	r3, [sp, #8]
 800392c:	b289      	uxth	r1, r1
 800392e:	17d8      	asrs	r0, r3, #31
 8003930:	181b      	adds	r3, r3, r0
 8003932:	4043      	eors	r3, r0
 8003934:	b29b      	uxth	r3, r3
 8003936:	4299      	cmp	r1, r3
 8003938:	d2dc      	bcs.n	80038f4 <find_snap_point_y+0x94>
 800393a:	9202      	str	r2, [sp, #8]
 800393c:	e7da      	b.n	80038f4 <find_snap_point_y+0x94>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800393e:	8aea      	ldrh	r2, [r5, #22]
                    y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 8003940:	8a6b      	ldrh	r3, [r5, #18]
 8003942:	3201      	adds	r2, #1
 8003944:	1ad2      	subs	r2, r2, r3
 8003946:	b212      	sxth	r2, r2
 8003948:	0fd1      	lsrs	r1, r2, #31
 800394a:	188a      	adds	r2, r1, r2
 800394c:	8af1      	ldrh	r1, [r6, #22]
                    y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 800394e:	8a70      	ldrh	r0, [r6, #18]
                    y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 8003950:	1052      	asrs	r2, r2, #1
 8003952:	3101      	adds	r1, #1
 8003954:	189b      	adds	r3, r3, r2
 8003956:	1a09      	subs	r1, r1, r0
                    y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 8003958:	9a05      	ldr	r2, [sp, #20]
 800395a:	b209      	sxth	r1, r1
 800395c:	1a89      	subs	r1, r1, r2
 800395e:	9a03      	ldr	r2, [sp, #12]
 8003960:	4458      	add	r0, fp
 8003962:	1a89      	subs	r1, r1, r2
 8003964:	0fca      	lsrs	r2, r1, #31
 8003966:	1852      	adds	r2, r2, r1
 8003968:	1052      	asrs	r2, r2, #1
 800396a:	1812      	adds	r2, r2, r0
                    y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 800396c:	b29b      	uxth	r3, r3
                    y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 800396e:	b292      	uxth	r2, r2
                    break;
 8003970:	e7ce      	b.n	8003910 <find_snap_point_y+0xb0>
                    y_parent = obj->coords.y2 - pad_bottom;
 8003972:	9b04      	ldr	r3, [sp, #16]
 8003974:	8af2      	ldrh	r2, [r6, #22]
 8003976:	1ad2      	subs	r2, r2, r3
 8003978:	b292      	uxth	r2, r2
            y_child += ofs;
 800397a:	8aeb      	ldrh	r3, [r5, #22]
                    break;
 800397c:	e7c8      	b.n	8003910 <find_snap_point_y+0xb0>
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	00001fff 	.word	0x00001fff
 8003984:	00040001 	.word	0x00040001

08003988 <find_snap_point_x>:
{
 8003988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800398a:	4657      	mov	r7, sl
 800398c:	464e      	mov	r6, r9
 800398e:	46de      	mov	lr, fp
 8003990:	4645      	mov	r5, r8
 8003992:	b5e0      	push	{r5, r6, r7, lr}
 8003994:	b087      	sub	sp, #28
 8003996:	0006      	movs	r6, r0
 8003998:	4689      	mov	r9, r1
 800399a:	469a      	mov	sl, r3
 800399c:	9201      	str	r2, [sp, #4]
    lv_scroll_snap_t align = lv_obj_get_scroll_snap_x(obj);
 800399e:	f004 f975 	bl	8007c8c <lv_obj_get_scroll_snap_x>
 80039a2:	1e07      	subs	r7, r0, #0
    if(align == LV_SCROLL_SNAP_NONE) return 0;
 80039a4:	d107      	bne.n	80039b6 <find_snap_point_x+0x2e>
 80039a6:	2000      	movs	r0, #0
}
 80039a8:	b007      	add	sp, #28
 80039aa:	bcf0      	pop	{r4, r5, r6, r7}
 80039ac:	46bb      	mov	fp, r7
 80039ae:	46b2      	mov	sl, r6
 80039b0:	46a9      	mov	r9, r5
 80039b2:	46a0      	mov	r8, r4
 80039b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80039b6:	2212      	movs	r2, #18
 80039b8:	2100      	movs	r1, #0
 80039ba:	0030      	movs	r0, r6
 80039bc:	f005 fe98 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80039c0:	2213      	movs	r2, #19
    return (lv_coord_t)v.num;
 80039c2:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80039c4:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80039c6:	2100      	movs	r1, #0
 80039c8:	0030      	movs	r0, r6
    return (lv_coord_t)v.num;
 80039ca:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80039cc:	f005 fe90 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80039d0:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80039d2:	9004      	str	r0, [sp, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80039d4:	0030      	movs	r0, r6
    return (lv_coord_t)v.num;
 80039d6:	9303      	str	r3, [sp, #12]
 80039d8:	f007 facc 	bl	800af74 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80039dc:	2800      	cmp	r0, #0
 80039de:	d0e2      	beq.n	80039a6 <find_snap_point_x+0x1e>
    lv_coord_t dist = LV_COORD_MAX;
 80039e0:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <find_snap_point_x+0x120>)
    for(i = 0; i < child_cnt; i++) {
 80039e2:	2400      	movs	r4, #0
    lv_coord_t dist = LV_COORD_MAX;
 80039e4:	9302      	str	r3, [sp, #8]
 80039e6:	003b      	movs	r3, r7
 80039e8:	0007      	movs	r7, r0
 80039ea:	4698      	mov	r8, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 80039ec:	68b3      	ldr	r3, [r6, #8]
 80039ee:	00a2      	lsls	r2, r4, #2
 80039f0:	681b      	ldr	r3, [r3, #0]
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80039f2:	492e      	ldr	r1, [pc, #184]	; (8003aac <find_snap_point_x+0x124>)
        lv_obj_t * child = obj->spec_attr->children[i];
 80039f4:	58d5      	ldr	r5, [r2, r3]
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80039f6:	0028      	movs	r0, r5
 80039f8:	f001 fb2a 	bl	8005050 <lv_obj_has_flag_any>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	d10d      	bne.n	8003a1c <find_snap_point_x+0x94>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPPABLE)) {
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	0028      	movs	r0, r5
 8003a04:	0149      	lsls	r1, r1, #5
 8003a06:	f001 fb1b 	bl	8005040 <lv_obj_has_flag>
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d006      	beq.n	8003a1c <find_snap_point_x+0x94>
            switch(align) {
 8003a0e:	4643      	mov	r3, r8
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d042      	beq.n	8003a9a <find_snap_point_x+0x112>
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d026      	beq.n	8003a66 <find_snap_point_x+0xde>
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d009      	beq.n	8003a30 <find_snap_point_x+0xa8>
    for(i = 0; i < child_cnt; i++) {
 8003a1c:	3401      	adds	r4, #1
 8003a1e:	42a7      	cmp	r7, r4
 8003a20:	d1e4      	bne.n	80039ec <find_snap_point_x+0x64>
    return dist == LV_COORD_MAX ? 0 : -dist;
 8003a22:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <find_snap_point_x+0x120>)
 8003a24:	9a02      	ldr	r2, [sp, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d0bd      	beq.n	80039a6 <find_snap_point_x+0x1e>
 8003a2a:	4250      	negs	r0, r2
 8003a2c:	b200      	sxth	r0, r0
 8003a2e:	e7bb      	b.n	80039a8 <find_snap_point_x+0x20>
                    x_parent = obj->coords.x1 + pad_left;
 8003a30:	8a32      	ldrh	r2, [r6, #16]
            x_child += ofs;
 8003a32:	8a2b      	ldrh	r3, [r5, #16]
                    x_parent = obj->coords.x1 + pad_left;
 8003a34:	445a      	add	r2, fp
 8003a36:	b292      	uxth	r2, r2
            x_child += ofs;
 8003a38:	4453      	add	r3, sl
 8003a3a:	b299      	uxth	r1, r3
 8003a3c:	b21b      	sxth	r3, r3
            if(x_child >= min && x_child <= max) {
 8003a3e:	454b      	cmp	r3, r9
 8003a40:	dbec      	blt.n	8003a1c <find_snap_point_x+0x94>
 8003a42:	9801      	ldr	r0, [sp, #4]
 8003a44:	4283      	cmp	r3, r0
 8003a46:	dce9      	bgt.n	8003a1c <find_snap_point_x+0x94>
                lv_coord_t x = x_child -  x_parent;
 8003a48:	1a8a      	subs	r2, r1, r2
 8003a4a:	b212      	sxth	r2, r2
                if(LV_ABS(x) < LV_ABS(dist)) dist = x;
 8003a4c:	17d3      	asrs	r3, r2, #31
 8003a4e:	18d1      	adds	r1, r2, r3
 8003a50:	4059      	eors	r1, r3
 8003a52:	9b02      	ldr	r3, [sp, #8]
 8003a54:	b289      	uxth	r1, r1
 8003a56:	17d8      	asrs	r0, r3, #31
 8003a58:	181b      	adds	r3, r3, r0
 8003a5a:	4043      	eors	r3, r0
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	4299      	cmp	r1, r3
 8003a60:	d2dc      	bcs.n	8003a1c <find_snap_point_x+0x94>
 8003a62:	9202      	str	r2, [sp, #8]
 8003a64:	e7da      	b.n	8003a1c <find_snap_point_x+0x94>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003a66:	8aaa      	ldrh	r2, [r5, #20]
                    x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 8003a68:	8a2b      	ldrh	r3, [r5, #16]
 8003a6a:	3201      	adds	r2, #1
 8003a6c:	1ad2      	subs	r2, r2, r3
 8003a6e:	b212      	sxth	r2, r2
 8003a70:	0fd1      	lsrs	r1, r2, #31
 8003a72:	188a      	adds	r2, r1, r2
 8003a74:	8ab1      	ldrh	r1, [r6, #20]
                    x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 8003a76:	8a30      	ldrh	r0, [r6, #16]
                    x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 8003a78:	1052      	asrs	r2, r2, #1
 8003a7a:	3101      	adds	r1, #1
 8003a7c:	189b      	adds	r3, r3, r2
 8003a7e:	1a09      	subs	r1, r1, r0
                    x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 8003a80:	9a05      	ldr	r2, [sp, #20]
 8003a82:	b209      	sxth	r1, r1
 8003a84:	1a89      	subs	r1, r1, r2
 8003a86:	9a03      	ldr	r2, [sp, #12]
 8003a88:	4458      	add	r0, fp
 8003a8a:	1a89      	subs	r1, r1, r2
 8003a8c:	0fca      	lsrs	r2, r1, #31
 8003a8e:	1852      	adds	r2, r2, r1
 8003a90:	1052      	asrs	r2, r2, #1
 8003a92:	1812      	adds	r2, r2, r0
                    x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 8003a94:	b29b      	uxth	r3, r3
                    x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 8003a96:	b292      	uxth	r2, r2
                    break;
 8003a98:	e7ce      	b.n	8003a38 <find_snap_point_x+0xb0>
                    x_parent = obj->coords.x2 - pad_right;
 8003a9a:	9b04      	ldr	r3, [sp, #16]
 8003a9c:	8ab2      	ldrh	r2, [r6, #20]
 8003a9e:	1ad2      	subs	r2, r2, r3
 8003aa0:	b292      	uxth	r2, r2
            x_child += ofs;
 8003aa2:	8aab      	ldrh	r3, [r5, #20]
                    break;
 8003aa4:	e7c8      	b.n	8003a38 <find_snap_point_x+0xb0>
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	00001fff 	.word	0x00001fff
 8003aac:	00040001 	.word	0x00040001

08003ab0 <elastic_diff>:
    return move;
}

static lv_coord_t elastic_diff(lv_obj_t * scroll_obj, lv_coord_t diff, lv_coord_t scroll_start, lv_coord_t scroll_end,
                               lv_dir_t dir)
{
 8003ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab2:	4646      	mov	r6, r8
 8003ab4:	464f      	mov	r7, r9
 8003ab6:	46d6      	mov	lr, sl
 8003ab8:	b5c0      	push	{r6, r7, lr}
 8003aba:	001e      	movs	r6, r3
 8003abc:	ab08      	add	r3, sp, #32
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	000c      	movs	r4, r1
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_ELASTIC)) {
 8003ac2:	2120      	movs	r1, #32
{
 8003ac4:	0005      	movs	r5, r0
 8003ac6:	0017      	movs	r7, r2
 8003ac8:	4698      	mov	r8, r3
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_ELASTIC)) {
 8003aca:	f001 fab9 	bl	8005040 <lv_obj_has_flag>
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	d02e      	beq.n	8003b30 <elastic_diff+0x80>
        /*If there is snapping in the current direction don't use the elastic factor because
         *it's natural that the first and last items are scrolled (snapped) in.*/
        lv_scroll_snap_t snap;
        snap = dir == LV_DIR_HOR ? lv_obj_get_scroll_snap_x(scroll_obj) : lv_obj_get_scroll_snap_y(scroll_obj);
 8003ad2:	4643      	mov	r3, r8
 8003ad4:	0028      	movs	r0, r5
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d034      	beq.n	8003b44 <elastic_diff+0x94>
 8003ada:	f004 f8e1 	bl	8007ca0 <lv_obj_get_scroll_snap_y>
 8003ade:	4680      	mov	r8, r0

        lv_obj_t * act_obj = lv_indev_get_obj_act();
 8003ae0:	f7fe ff2a 	bl	8002938 <lv_indev_get_obj_act>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4681      	mov	r9, r0
 8003aea:	0028      	movs	r0, r5
 8003aec:	f005 fe00 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8003af0:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8003af2:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8003af4:	2100      	movs	r1, #0
 8003af6:	0028      	movs	r0, r5
 8003af8:	f005 fdfa 	bl	80096f0 <lv_obj_get_style_prop>
        }
        else {
            lv_coord_t pad_top = lv_obj_get_style_pad_top(scroll_obj, LV_PART_MAIN);
            lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(scroll_obj, LV_PART_MAIN);

            switch(snap) {
 8003afc:	4643      	mov	r3, r8
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d100      	bne.n	8003b04 <elastic_diff+0x54>
 8003b02:	e075      	b.n	8003bf0 <elastic_diff+0x140>
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d056      	beq.n	8003bb6 <elastic_diff+0x106>
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d04d      	beq.n	8003ba8 <elastic_diff+0xf8>
                    act_obj_point = act_obj->coords.y2;
                    break;
            }
        }

        if(scroll_end < 0) {
 8003b0c:	2e00      	cmp	r6, #0
 8003b0e:	da40      	bge.n	8003b92 <elastic_diff+0xe2>
        }
        else if(scroll_start < 0) {
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point < snap_point) return diff;

            /*Rounding*/
            if(diff < 0) diff -= ELASTIC_SLOWNESS_FACTOR / 2;
 8003b10:	2c00      	cmp	r4, #0
 8003b12:	db3b      	blt.n	8003b8c <elastic_diff+0xdc>
            if(diff > 0) diff += ELASTIC_SLOWNESS_FACTOR / 2;
 8003b14:	2c00      	cmp	r4, #0
 8003b16:	dd01      	ble.n	8003b1c <elastic_diff+0x6c>
 8003b18:	3402      	adds	r4, #2
 8003b1a:	b224      	sxth	r4, r4
            return diff / ELASTIC_SLOWNESS_FACTOR;
 8003b1c:	2003      	movs	r0, #3
 8003b1e:	17e1      	asrs	r1, r4, #31
 8003b20:	4008      	ands	r0, r1
 8003b22:	1900      	adds	r0, r0, r4
 8003b24:	1080      	asrs	r0, r0, #2
        if(scroll_end + diff < 0) diff = - scroll_end;
        if(scroll_start - diff < 0) diff = scroll_start;
    }

    return diff;
}
 8003b26:	bce0      	pop	{r5, r6, r7}
 8003b28:	46ba      	mov	sl, r7
 8003b2a:	46b1      	mov	r9, r6
 8003b2c:	46a8      	mov	r8, r5
 8003b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(scroll_end + diff < 0) diff = - scroll_end;
 8003b30:	0020      	movs	r0, r4
 8003b32:	42e6      	cmn	r6, r4
 8003b34:	d502      	bpl.n	8003b3c <elastic_diff+0x8c>
 8003b36:	4270      	negs	r0, r6
 8003b38:	b200      	sxth	r0, r0
        if(scroll_start - diff < 0) diff = scroll_start;
 8003b3a:	0004      	movs	r4, r0
 8003b3c:	1b3c      	subs	r4, r7, r4
 8003b3e:	d5f2      	bpl.n	8003b26 <elastic_diff+0x76>
 8003b40:	0038      	movs	r0, r7
 8003b42:	e7f0      	b.n	8003b26 <elastic_diff+0x76>
        snap = dir == LV_DIR_HOR ? lv_obj_get_scroll_snap_x(scroll_obj) : lv_obj_get_scroll_snap_y(scroll_obj);
 8003b44:	f004 f8a2 	bl	8007c8c <lv_obj_get_scroll_snap_x>
 8003b48:	4680      	mov	r8, r0
        lv_obj_t * act_obj = lv_indev_get_obj_act();
 8003b4a:	f7fe fef5 	bl	8002938 <lv_indev_get_obj_act>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8003b4e:	2212      	movs	r2, #18
 8003b50:	2100      	movs	r1, #0
 8003b52:	4681      	mov	r9, r0
 8003b54:	0028      	movs	r0, r5
 8003b56:	f005 fdcb 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8003b5a:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8003b5c:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8003b5e:	2100      	movs	r1, #0
 8003b60:	0028      	movs	r0, r5
 8003b62:	f005 fdc5 	bl	80096f0 <lv_obj_get_style_prop>
            switch(snap) {
 8003b66:	4643      	mov	r3, r8
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d048      	beq.n	8003bfe <elastic_diff+0x14e>
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d04d      	beq.n	8003c0c <elastic_diff+0x15c>
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d1cb      	bne.n	8003b0c <elastic_diff+0x5c>
                    act_obj_point = act_obj->coords.x1;
 8003b74:	464a      	mov	r2, r9
                    snap_point = scroll_obj->coords.x1 + pad_left;
 8003b76:	8a2b      	ldrh	r3, [r5, #16]
                    act_obj_point = act_obj->coords.x1;
 8003b78:	2110      	movs	r1, #16
 8003b7a:	5e52      	ldrsh	r2, [r2, r1]
                    snap_point = scroll_obj->coords.x1 + pad_left;
 8003b7c:	4453      	add	r3, sl
 8003b7e:	b21b      	sxth	r3, r3
        if(scroll_end < 0) {
 8003b80:	2e00      	cmp	r6, #0
 8003b82:	db0d      	blt.n	8003ba0 <elastic_diff+0xf0>
        else if(scroll_start < 0) {
 8003b84:	2f00      	cmp	r7, #0
 8003b86:	db07      	blt.n	8003b98 <elastic_diff+0xe8>
 8003b88:	0020      	movs	r0, r4
 8003b8a:	e7cc      	b.n	8003b26 <elastic_diff+0x76>
            if(diff < 0) diff -= ELASTIC_SLOWNESS_FACTOR / 2;
 8003b8c:	3c02      	subs	r4, #2
 8003b8e:	b224      	sxth	r4, r4
 8003b90:	e7c0      	b.n	8003b14 <elastic_diff+0x64>
        else if(scroll_start < 0) {
 8003b92:	2f00      	cmp	r7, #0
 8003b94:	dbbc      	blt.n	8003b10 <elastic_diff+0x60>
 8003b96:	e7f7      	b.n	8003b88 <elastic_diff+0xd8>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point < snap_point) return diff;
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	dab9      	bge.n	8003b10 <elastic_diff+0x60>
 8003b9c:	0020      	movs	r0, r4
 8003b9e:	e7c2      	b.n	8003b26 <elastic_diff+0x76>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point > snap_point) return diff;
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	ddb5      	ble.n	8003b10 <elastic_diff+0x60>
 8003ba4:	0020      	movs	r0, r4
 8003ba6:	e7be      	b.n	8003b26 <elastic_diff+0x76>
                    act_obj_point = act_obj->coords.y1;
 8003ba8:	464a      	mov	r2, r9
                    snap_point = scroll_obj->coords.y1 + pad_top;
 8003baa:	8a6b      	ldrh	r3, [r5, #18]
                    act_obj_point = act_obj->coords.y1;
 8003bac:	2112      	movs	r1, #18
 8003bae:	5e52      	ldrsh	r2, [r2, r1]
                    snap_point = scroll_obj->coords.y1 + pad_top;
 8003bb0:	4453      	add	r3, sl
 8003bb2:	b21b      	sxth	r3, r3
                    break;
 8003bb4:	e7e4      	b.n	8003b80 <elastic_diff+0xd0>
                    snap_point = pad_top + (lv_area_get_height(&scroll_obj->coords) - pad_top - pad_bottom) / 2 + scroll_obj->coords.y1;
 8003bb6:	4653      	mov	r3, sl
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8003bb8:	8aea      	ldrh	r2, [r5, #22]
 8003bba:	8a69      	ldrh	r1, [r5, #18]
 8003bbc:	3201      	adds	r2, #1
 8003bbe:	1a52      	subs	r2, r2, r1
 8003bc0:	b21b      	sxth	r3, r3
 8003bc2:	b212      	sxth	r2, r2
 8003bc4:	1ad2      	subs	r2, r2, r3
 8003bc6:	b200      	sxth	r0, r0
 8003bc8:	1a10      	subs	r0, r2, r0
 8003bca:	0fc3      	lsrs	r3, r0, #31
 8003bcc:	181b      	adds	r3, r3, r0
 8003bce:	4451      	add	r1, sl
 8003bd0:	105b      	asrs	r3, r3, #1
 8003bd2:	185b      	adds	r3, r3, r1
 8003bd4:	464a      	mov	r2, r9
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	8a52      	ldrh	r2, [r2, #18]
 8003bda:	8ac9      	ldrh	r1, [r1, #22]
 8003bdc:	b21b      	sxth	r3, r3
 8003bde:	3101      	adds	r1, #1
 8003be0:	1a89      	subs	r1, r1, r2
                    act_obj_point = lv_area_get_height(&act_obj->coords) / 2 + act_obj->coords.y1;
 8003be2:	b209      	sxth	r1, r1
 8003be4:	0fc8      	lsrs	r0, r1, #31
 8003be6:	1841      	adds	r1, r0, r1
 8003be8:	1049      	asrs	r1, r1, #1
 8003bea:	1852      	adds	r2, r2, r1
 8003bec:	b212      	sxth	r2, r2
                    break;
 8003bee:	e7c7      	b.n	8003b80 <elastic_diff+0xd0>
                    act_obj_point = act_obj->coords.y2;
 8003bf0:	464a      	mov	r2, r9
                    snap_point = scroll_obj->coords.y2 - pad_bottom;
 8003bf2:	8aeb      	ldrh	r3, [r5, #22]
                    act_obj_point = act_obj->coords.y2;
 8003bf4:	2116      	movs	r1, #22
 8003bf6:	5e52      	ldrsh	r2, [r2, r1]
                    snap_point = scroll_obj->coords.y2 - pad_bottom;
 8003bf8:	1a1b      	subs	r3, r3, r0
 8003bfa:	b21b      	sxth	r3, r3
                    break;
 8003bfc:	e7c0      	b.n	8003b80 <elastic_diff+0xd0>
                    act_obj_point = act_obj->coords.x2;
 8003bfe:	464a      	mov	r2, r9
                    snap_point = scroll_obj->coords.x2 - pad_right;
 8003c00:	8aab      	ldrh	r3, [r5, #20]
                    act_obj_point = act_obj->coords.x2;
 8003c02:	2114      	movs	r1, #20
 8003c04:	5e52      	ldrsh	r2, [r2, r1]
                    snap_point = scroll_obj->coords.x2 - pad_right;
 8003c06:	1a1b      	subs	r3, r3, r0
 8003c08:	b21b      	sxth	r3, r3
                    break;
 8003c0a:	e7b9      	b.n	8003b80 <elastic_diff+0xd0>
                    snap_point = pad_left + (lv_area_get_width(&scroll_obj->coords) - pad_left - pad_right) / 2 + scroll_obj->coords.x1;
 8003c0c:	4653      	mov	r3, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003c0e:	8aaa      	ldrh	r2, [r5, #20]
 8003c10:	8a29      	ldrh	r1, [r5, #16]
 8003c12:	3201      	adds	r2, #1
 8003c14:	1a52      	subs	r2, r2, r1
 8003c16:	b21b      	sxth	r3, r3
 8003c18:	b212      	sxth	r2, r2
 8003c1a:	1ad2      	subs	r2, r2, r3
 8003c1c:	b200      	sxth	r0, r0
 8003c1e:	1a10      	subs	r0, r2, r0
 8003c20:	0fc3      	lsrs	r3, r0, #31
 8003c22:	181b      	adds	r3, r3, r0
 8003c24:	4451      	add	r1, sl
 8003c26:	105b      	asrs	r3, r3, #1
 8003c28:	185b      	adds	r3, r3, r1
 8003c2a:	464a      	mov	r2, r9
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	8a12      	ldrh	r2, [r2, #16]
 8003c30:	8a89      	ldrh	r1, [r1, #20]
 8003c32:	b21b      	sxth	r3, r3
 8003c34:	e7d3      	b.n	8003bde <elastic_diff+0x12e>
 8003c36:	46c0      	nop			; (mov r8, r8)

08003c38 <_lv_indev_scroll_handler>:
{
 8003c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c3a:	4657      	mov	r7, sl
 8003c3c:	46de      	mov	lr, fp
 8003c3e:	464e      	mov	r6, r9
 8003c40:	4645      	mov	r5, r8
 8003c42:	b5e0      	push	{r5, r6, r7, lr}
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 8003c44:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 8003c46:	0004      	movs	r4, r0
 8003c48:	b08b      	sub	sp, #44	; 0x2c
    if(scroll_obj == NULL) {
 8003c4a:	2f00      	cmp	r7, #0
 8003c4c:	d065      	beq.n	8003d1a <_lv_indev_scroll_handler+0xe2>
    if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
 8003c4e:	6923      	ldr	r3, [r4, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d055      	beq.n	8003d00 <_lv_indev_scroll_handler+0xc8>
        if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 8003c54:	233c      	movs	r3, #60	; 0x3c
 8003c56:	250f      	movs	r5, #15
 8003c58:	5ce3      	ldrb	r3, [r4, r3]
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8003c5a:	0038      	movs	r0, r7
        if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 8003c5c:	401d      	ands	r5, r3
 8003c5e:	2d03      	cmp	r5, #3
 8003c60:	d100      	bne.n	8003c64 <_lv_indev_scroll_handler+0x2c>
 8003c62:	e187      	b.n	8003f74 <_lv_indev_scroll_handler+0x33c>
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 8003c64:	f004 f83a 	bl	8007cdc <lv_obj_get_scroll_top>
 8003c68:	0005      	movs	r5, r0
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8003c6a:	0038      	movs	r0, r7
 8003c6c:	f004 f840 	bl	8007cf0 <lv_obj_get_scroll_bottom>
            diff_y = elastic_diff(scroll_obj, proc->types.pointer.vect.y, st, sb, LV_DIR_VER);
 8003c70:	2212      	movs	r2, #18
 8003c72:	5ea1      	ldrsh	r1, [r4, r2]
 8003c74:	220c      	movs	r2, #12
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8003c76:	0003      	movs	r3, r0
            diff_y = elastic_diff(scroll_obj, proc->types.pointer.vect.y, st, sb, LV_DIR_VER);
 8003c78:	9200      	str	r2, [sp, #0]
 8003c7a:	0038      	movs	r0, r7
 8003c7c:	002a      	movs	r2, r5
 8003c7e:	f7ff ff17 	bl	8003ab0 <elastic_diff>
 8003c82:	0006      	movs	r6, r0
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(scroll_obj);
 8003c84:	0038      	movs	r0, r7
 8003c86:	f003 fff7 	bl	8007c78 <lv_obj_get_scroll_dir>
        if((scroll_dir & LV_DIR_TOP)    == 0 && diff_y > 0) diff_y = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	469c      	mov	ip, r3
 8003c8e:	0743      	lsls	r3, r0, #29
 8003c90:	d53d      	bpl.n	8003d0e <_lv_indev_scroll_handler+0xd6>
        lv_coord_t diff_x = 0;
 8003c92:	2500      	movs	r5, #0
        if((scroll_dir & LV_DIR_BOTTOM) == 0 && diff_y < 0) diff_y = 0;
 8003c94:	0703      	lsls	r3, r0, #28
 8003c96:	d403      	bmi.n	8003ca0 <_lv_indev_scroll_handler+0x68>
 8003c98:	43f0      	mvns	r0, r6
 8003c9a:	17c0      	asrs	r0, r0, #31
 8003c9c:	4006      	ands	r6, r0
 8003c9e:	b236      	sxth	r6, r6
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 8003ca0:	0032      	movs	r2, r6
 8003ca2:	2016      	movs	r0, #22
 8003ca4:	5e21      	ldrsh	r1, [r4, r0]
 8003ca6:	2332      	movs	r3, #50	; 0x32
 8003ca8:	5ee0      	ldrsh	r0, [r4, r3]
 8003caa:	188a      	adds	r2, r1, r2
 8003cac:	4282      	cmp	r2, r0
 8003cae:	da02      	bge.n	8003cb6 <_lv_indev_scroll_handler+0x7e>
            *diff_y = proc->types.pointer.scroll_area.y1 - proc->types.pointer.scroll_sum.y;
 8003cb0:	1a40      	subs	r0, r0, r1
 8003cb2:	b206      	sxth	r6, r0
        if(proc->types.pointer.scroll_sum.y + *diff_y > proc->types.pointer.scroll_area.y2) {
 8003cb4:	1872      	adds	r2, r6, r1
 8003cb6:	2336      	movs	r3, #54	; 0x36
 8003cb8:	5ee0      	ldrsh	r0, [r4, r3]
 8003cba:	4290      	cmp	r0, r2
 8003cbc:	da01      	bge.n	8003cc2 <_lv_indev_scroll_handler+0x8a>
            *diff_y = proc->types.pointer.scroll_area.y2 - proc->types.pointer.scroll_sum.y;
 8003cbe:	1a40      	subs	r0, r0, r1
 8003cc0:	b206      	sxth	r6, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8003cc2:	2314      	movs	r3, #20
 8003cc4:	5ee2      	ldrsh	r2, [r4, r3]
 8003cc6:	4663      	mov	r3, ip
 8003cc8:	2130      	movs	r1, #48	; 0x30
 8003cca:	5e60      	ldrsh	r0, [r4, r1]
 8003ccc:	18d3      	adds	r3, r2, r3
 8003cce:	4283      	cmp	r3, r0
 8003cd0:	da02      	bge.n	8003cd8 <_lv_indev_scroll_handler+0xa0>
            *diff_x = proc->types.pointer.scroll_area.x1 - proc->types.pointer.scroll_sum.x;
 8003cd2:	1a80      	subs	r0, r0, r2
 8003cd4:	b205      	sxth	r5, r0
        if(proc->types.pointer.scroll_sum.x + *diff_x > proc->types.pointer.scroll_area.x2) {
 8003cd6:	18ab      	adds	r3, r5, r2
 8003cd8:	2134      	movs	r1, #52	; 0x34
 8003cda:	5e60      	ldrsh	r0, [r4, r1]
 8003cdc:	4298      	cmp	r0, r3
 8003cde:	da01      	bge.n	8003ce4 <_lv_indev_scroll_handler+0xac>
            *diff_x = proc->types.pointer.scroll_area.x2 - proc->types.pointer.scroll_sum.x;
 8003ce0:	1a80      	subs	r0, r0, r2
 8003ce2:	b205      	sxth	r5, r0
        _lv_obj_scroll_by_raw(scroll_obj, diff_x, diff_y);
 8003ce4:	0032      	movs	r2, r6
 8003ce6:	0029      	movs	r1, r5
 8003ce8:	0038      	movs	r0, r7
 8003cea:	f005 f93f 	bl	8008f6c <_lv_obj_scroll_by_raw>
        if(proc->reset_query) return;
 8003cee:	7863      	ldrb	r3, [r4, #1]
 8003cf0:	079b      	lsls	r3, r3, #30
 8003cf2:	d405      	bmi.n	8003d00 <_lv_indev_scroll_handler+0xc8>
        proc->types.pointer.scroll_sum.x += diff_x;
 8003cf4:	8aa0      	ldrh	r0, [r4, #20]
 8003cf6:	1945      	adds	r5, r0, r5
        proc->types.pointer.scroll_sum.y += diff_y;
 8003cf8:	8ae0      	ldrh	r0, [r4, #22]
        proc->types.pointer.scroll_sum.x += diff_x;
 8003cfa:	82a5      	strh	r5, [r4, #20]
        proc->types.pointer.scroll_sum.y += diff_y;
 8003cfc:	1986      	adds	r6, r0, r6
 8003cfe:	82e6      	strh	r6, [r4, #22]
}
 8003d00:	b00b      	add	sp, #44	; 0x2c
 8003d02:	bcf0      	pop	{r4, r5, r6, r7}
 8003d04:	46bb      	mov	fp, r7
 8003d06:	46b2      	mov	sl, r6
 8003d08:	46a9      	mov	r9, r5
 8003d0a:	46a0      	mov	r8, r4
 8003d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((scroll_dir & LV_DIR_TOP)    == 0 && diff_y > 0) diff_y = 0;
 8003d0e:	2e00      	cmp	r6, #0
 8003d10:	ddbf      	ble.n	8003c92 <_lv_indev_scroll_handler+0x5a>
 8003d12:	2200      	movs	r2, #0
        lv_coord_t diff_x = 0;
 8003d14:	2500      	movs	r5, #0
        if((scroll_dir & LV_DIR_TOP)    == 0 && diff_y > 0) diff_y = 0;
 8003d16:	2600      	movs	r6, #0
 8003d18:	e7c3      	b.n	8003ca2 <_lv_indev_scroll_handler+0x6a>
        proc->types.pointer.scroll_sum.x += proc->types.pointer.vect.x;
 8003d1a:	8a83      	ldrh	r3, [r0, #20]
 8003d1c:	8a02      	ldrh	r2, [r0, #16]
 8003d1e:	189b      	adds	r3, r3, r2
 8003d20:	8283      	strh	r3, [r0, #20]
        proc->types.pointer.scroll_sum.y += proc->types.pointer.vect.y;
 8003d22:	8a42      	ldrh	r2, [r0, #18]
 8003d24:	8ac3      	ldrh	r3, [r0, #22]
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	82c3      	strh	r3, [r0, #22]
    lv_indev_t * indev_act = lv_indev_get_act();
 8003d2a:	f7fe fd35 	bl	8002798 <lv_indev_get_act>
    lv_coord_t scroll_limit = indev_act->driver->scroll_limit;
 8003d2e:	6803      	ldr	r3, [r0, #0]
    lv_obj_t * obj_act = proc->types.pointer.act_obj;
 8003d30:	6a25      	ldr	r5, [r4, #32]
    lv_coord_t scroll_limit = indev_act->driver->scroll_limit;
 8003d32:	7d1a      	ldrb	r2, [r3, #20]
 8003d34:	9205      	str	r2, [sp, #20]
 8003d36:	7d1b      	ldrb	r3, [r3, #20]
 8003d38:	9304      	str	r3, [sp, #16]
    if(LV_ABS(proc->types.pointer.scroll_sum.x) > LV_ABS(proc->types.pointer.scroll_sum.y)) {
 8003d3a:	2314      	movs	r3, #20
 8003d3c:	5ee2      	ldrsh	r2, [r4, r3]
 8003d3e:	17d3      	asrs	r3, r2, #31
 8003d40:	18d2      	adds	r2, r2, r3
 8003d42:	405a      	eors	r2, r3
 8003d44:	2116      	movs	r1, #22
 8003d46:	5e63      	ldrsh	r3, [r4, r1]
 8003d48:	b292      	uxth	r2, r2
 8003d4a:	17d9      	asrs	r1, r3, #31
 8003d4c:	185b      	adds	r3, r3, r1
 8003d4e:	404b      	eors	r3, r1
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d900      	bls.n	8003d58 <_lv_indev_scroll_handler+0x120>
 8003d56:	e174      	b.n	8004042 <_lv_indev_scroll_handler+0x40a>
        ver_en = true;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	469b      	mov	fp, r3
    bool hor_en = false;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	4698      	mov	r8, r3
    while(obj_act) {
 8003d60:	2300      	movs	r3, #0
 8003d62:	46ba      	mov	sl, r7
 8003d64:	46a1      	mov	r9, r4
 8003d66:	9309      	str	r3, [sp, #36]	; 0x24
 8003d68:	2d00      	cmp	r5, #0
 8003d6a:	d0c9      	beq.n	8003d00 <_lv_indev_scroll_handler+0xc8>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLLABLE) == false) {
 8003d6c:	2110      	movs	r1, #16
 8003d6e:	0028      	movs	r0, r5
 8003d70:	f001 f966 	bl	8005040 <lv_obj_has_flag>
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d154      	bne.n	8003e22 <_lv_indev_scroll_handler+0x1ea>
            if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_HOR) == false && hor_en) break;
 8003d78:	2180      	movs	r1, #128	; 0x80
 8003d7a:	0028      	movs	r0, r5
 8003d7c:	0049      	lsls	r1, r1, #1
 8003d7e:	f001 f95f 	bl	8005040 <lv_obj_has_flag>
 8003d82:	2800      	cmp	r0, #0
 8003d84:	d102      	bne.n	8003d8c <_lv_indev_scroll_handler+0x154>
 8003d86:	4643      	mov	r3, r8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10b      	bne.n	8003da4 <_lv_indev_scroll_handler+0x16c>
            if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_VER) == false && ver_en) break;
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	0028      	movs	r0, r5
 8003d90:	0089      	lsls	r1, r1, #2
 8003d92:	f001 f955 	bl	8005040 <lv_obj_has_flag>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d000      	beq.n	8003d9c <_lv_indev_scroll_handler+0x164>
 8003d9a:	e0cf      	b.n	8003f3c <_lv_indev_scroll_handler+0x304>
 8003d9c:	465b      	mov	r3, fp
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d100      	bne.n	8003da4 <_lv_indev_scroll_handler+0x16c>
 8003da2:	e0cb      	b.n	8003f3c <_lv_indev_scroll_handler+0x304>
 8003da4:	4657      	mov	r7, sl
 8003da6:	464c      	mov	r4, r9
    if(obj_candidate) {
 8003da8:	2f00      	cmp	r7, #0
 8003daa:	d0a9      	beq.n	8003d00 <_lv_indev_scroll_handler+0xc8>
        proc->types.pointer.scroll_dir = dir_candidate;
 8003dac:	223c      	movs	r2, #60	; 0x3c
 8003dae:	210f      	movs	r1, #15
 8003db0:	5ca3      	ldrb	r3, [r4, r2]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ONE) == false) {
 8003db2:	0038      	movs	r0, r7
        proc->types.pointer.scroll_dir = dir_candidate;
 8003db4:	438b      	bics	r3, r1
 8003db6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003db8:	430b      	orrs	r3, r1
 8003dba:	54a3      	strb	r3, [r4, r2]
        proc->types.pointer.scroll_sum.x = 0;
 8003dbc:	2300      	movs	r3, #0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ONE) == false) {
 8003dbe:	2180      	movs	r1, #128	; 0x80
        proc->types.pointer.scroll_obj = obj_candidate;
 8003dc0:	62a7      	str	r7, [r4, #40]	; 0x28
        proc->types.pointer.scroll_sum.x = 0;
 8003dc2:	6163      	str	r3, [r4, #20]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ONE) == false) {
 8003dc4:	f001 f93c 	bl	8005040 <lv_obj_has_flag>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d000      	beq.n	8003dce <_lv_indev_scroll_handler+0x196>
 8003dcc:	e11e      	b.n	800400c <_lv_indev_scroll_handler+0x3d4>
        lv_area_set(&proc->types.pointer.scroll_area, LV_COORD_MIN, LV_COORD_MIN, LV_COORD_MAX, LV_COORD_MAX);
 8003dce:	0020      	movs	r0, r4
 8003dd0:	4bcb      	ldr	r3, [pc, #812]	; (8004100 <_lv_indev_scroll_handler+0x4c8>)
 8003dd2:	4acc      	ldr	r2, [pc, #816]	; (8004104 <_lv_indev_scroll_handler+0x4cc>)
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	3030      	adds	r0, #48	; 0x30
 8003dd8:	0011      	movs	r1, r2
 8003dda:	f00d fa97 	bl	801130c <lv_area_set>
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8003dde:	2334      	movs	r3, #52	; 0x34
 8003de0:	5ee0      	ldrsh	r0, [r4, r3]
    if(proc->types.pointer.scroll_area.x1 == 0) proc->types.pointer.scroll_area.x1 = LV_COORD_MIN;
 8003de2:	2230      	movs	r2, #48	; 0x30
 8003de4:	5ea3      	ldrsh	r3, [r4, r2]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <_lv_indev_scroll_handler+0x1b6>
 8003dea:	4bc6      	ldr	r3, [pc, #792]	; (8004104 <_lv_indev_scroll_handler+0x4cc>)
 8003dec:	8623      	strh	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d101      	bne.n	8003df6 <_lv_indev_scroll_handler+0x1be>
 8003df2:	4bc3      	ldr	r3, [pc, #780]	; (8004100 <_lv_indev_scroll_handler+0x4c8>)
 8003df4:	86a3      	strh	r3, [r4, #52]	; 0x34
    if(proc->types.pointer.scroll_area.y1 == 0) proc->types.pointer.scroll_area.y1 = LV_COORD_MIN;
 8003df6:	2232      	movs	r2, #50	; 0x32
 8003df8:	5ea3      	ldrsh	r3, [r4, r2]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <_lv_indev_scroll_handler+0x1ca>
 8003dfe:	4bc1      	ldr	r3, [pc, #772]	; (8004104 <_lv_indev_scroll_handler+0x4cc>)
 8003e00:	8663      	strh	r3, [r4, #50]	; 0x32
    if(proc->types.pointer.scroll_area.y2 == 0) proc->types.pointer.scroll_area.y2 = LV_COORD_MAX;
 8003e02:	2236      	movs	r2, #54	; 0x36
 8003e04:	5ea3      	ldrsh	r3, [r4, r2]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <_lv_indev_scroll_handler+0x1d6>
 8003e0a:	4bbd      	ldr	r3, [pc, #756]	; (8004100 <_lv_indev_scroll_handler+0x4c8>)
 8003e0c:	86e3      	strh	r3, [r4, #54]	; 0x36
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_BEGIN, NULL);
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2109      	movs	r1, #9
 8003e12:	0038      	movs	r0, r7
 8003e14:	f7fd ffa2 	bl	8001d5c <lv_event_send>
        if(proc->reset_query) return;
 8003e18:	7863      	ldrb	r3, [r4, #1]
 8003e1a:	079b      	lsls	r3, r3, #30
 8003e1c:	d400      	bmi.n	8003e20 <_lv_indev_scroll_handler+0x1e8>
 8003e1e:	e716      	b.n	8003c4e <_lv_indev_scroll_handler+0x16>
 8003e20:	e76e      	b.n	8003d00 <_lv_indev_scroll_handler+0xc8>
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(obj_act);
 8003e22:	0028      	movs	r0, r5
 8003e24:	f003 ff28 	bl	8007c78 <lv_obj_get_scroll_dir>
        if((scroll_dir & LV_DIR_LEFT) == 0) left_en = false;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	4642      	mov	r2, r8
 8003e2c:	4003      	ands	r3, r0
 8003e2e:	425b      	negs	r3, r3
 8003e30:	401a      	ands	r2, r3
 8003e32:	9206      	str	r2, [sp, #24]
        if((scroll_dir & LV_DIR_RIGHT) == 0) right_en = false;
 8003e34:	4642      	mov	r2, r8
 8003e36:	0783      	lsls	r3, r0, #30
 8003e38:	17db      	asrs	r3, r3, #31
 8003e3a:	401a      	ands	r2, r3
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8003e3c:	465b      	mov	r3, fp
 8003e3e:	0744      	lsls	r4, r0, #29
        if((scroll_dir & LV_DIR_BOTTOM) == 0) down_en = false;
 8003e40:	0706      	lsls	r6, r0, #28
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8003e42:	17e4      	asrs	r4, r4, #31
        lv_coord_t st = lv_obj_get_scroll_top(obj_act);
 8003e44:	0028      	movs	r0, r5
        if((scroll_dir & LV_DIR_BOTTOM) == 0) down_en = false;
 8003e46:	17f6      	asrs	r6, r6, #31
        if((scroll_dir & LV_DIR_RIGHT) == 0) right_en = false;
 8003e48:	9208      	str	r2, [sp, #32]
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8003e4a:	401c      	ands	r4, r3
        if((scroll_dir & LV_DIR_BOTTOM) == 0) down_en = false;
 8003e4c:	401e      	ands	r6, r3
        lv_coord_t st = lv_obj_get_scroll_top(obj_act);
 8003e4e:	f003 ff45 	bl	8007cdc <lv_obj_get_scroll_top>
 8003e52:	0007      	movs	r7, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj_act);
 8003e54:	0028      	movs	r0, r5
 8003e56:	f003 ff4b 	bl	8007cf0 <lv_obj_get_scroll_bottom>
 8003e5a:	9007      	str	r0, [sp, #28]
        lv_coord_t sl = lv_obj_get_scroll_left(obj_act);
 8003e5c:	0028      	movs	r0, r5
 8003e5e:	f004 fc55 	bl	800870c <lv_obj_get_scroll_left>
 8003e62:	9003      	str	r0, [sp, #12]
        lv_coord_t sr = lv_obj_get_scroll_right(obj_act);
 8003e64:	0028      	movs	r0, r5
 8003e66:	f004 fc67 	bl	8008738 <lv_obj_get_scroll_right>
        if((st > 0 || sb > 0)  &&
 8003e6a:	2f00      	cmp	r7, #0
 8003e6c:	dc00      	bgt.n	8003e70 <_lv_indev_scroll_handler+0x238>
 8003e6e:	e0a9      	b.n	8003fc4 <_lv_indev_scroll_handler+0x38c>
 8003e70:	2c00      	cmp	r4, #0
 8003e72:	d075      	beq.n	8003f60 <_lv_indev_scroll_handler+0x328>
           ((up_en    && proc->types.pointer.scroll_sum.y >=   scroll_limit) ||
 8003e74:	464b      	mov	r3, r9
 8003e76:	2216      	movs	r2, #22
 8003e78:	5e9b      	ldrsh	r3, [r3, r2]
 8003e7a:	9a04      	ldr	r2, [sp, #16]
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	db6f      	blt.n	8003f60 <_lv_indev_scroll_handler+0x328>
            dir_candidate = LV_DIR_VER;
 8003e80:	230c      	movs	r3, #12
 8003e82:	46aa      	mov	sl, r5
 8003e84:	9309      	str	r3, [sp, #36]	; 0x24
        if((sl > 0 || sr > 0)  &&
 8003e86:	9b03      	ldr	r3, [sp, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	dc00      	bgt.n	8003e8e <_lv_indev_scroll_handler+0x256>
 8003e8c:	e096      	b.n	8003fbc <_lv_indev_scroll_handler+0x384>
 8003e8e:	9b06      	ldr	r3, [sp, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d05a      	beq.n	8003f4a <_lv_indev_scroll_handler+0x312>
           ((left_en   && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8003e94:	464b      	mov	r3, r9
 8003e96:	2214      	movs	r2, #20
 8003e98:	5e9b      	ldrsh	r3, [r3, r2]
 8003e9a:	9a04      	ldr	r2, [sp, #16]
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	db54      	blt.n	8003f4a <_lv_indev_scroll_handler+0x312>
            dir_candidate = LV_DIR_HOR;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	46aa      	mov	sl, r5
 8003ea4:	9309      	str	r3, [sp, #36]	; 0x24
        if(sb <= 0) down_en = false;
 8003ea6:	9a07      	ldr	r2, [sp, #28]
        if(st <= 0) up_en = false;
 8003ea8:	17fb      	asrs	r3, r7, #31
 8003eaa:	1bdf      	subs	r7, r3, r7
        if(sb <= 0) down_en = false;
 8003eac:	17d3      	asrs	r3, r2, #31
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	17db      	asrs	r3, r3, #31
 8003eb2:	401e      	ands	r6, r3
        if(sl <= 0) left_en = false;
 8003eb4:	9b03      	ldr	r3, [sp, #12]
        if(st <= 0) up_en = false;
 8003eb6:	17ff      	asrs	r7, r7, #31
 8003eb8:	403c      	ands	r4, r7
        if(sl <= 0) left_en = false;
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	dd7b      	ble.n	8003fb6 <_lv_indev_scroll_handler+0x37e>
        if((left_en  && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8003ebe:	9b06      	ldr	r3, [sp, #24]
        if(sr <= 0) right_en = false;
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	dc00      	bgt.n	8003ec6 <_lv_indev_scroll_handler+0x28e>
 8003ec4:	e08a      	b.n	8003fdc <_lv_indev_scroll_handler+0x3a4>
        if((left_en  && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d006      	beq.n	8003ed8 <_lv_indev_scroll_handler+0x2a0>
 8003eca:	464b      	mov	r3, r9
 8003ecc:	2214      	movs	r2, #20
 8003ece:	5e9b      	ldrsh	r3, [r3, r2]
 8003ed0:	9a04      	ldr	r2, [sp, #16]
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	db00      	blt.n	8003ed8 <_lv_indev_scroll_handler+0x2a0>
 8003ed6:	e08a      	b.n	8003fee <_lv_indev_scroll_handler+0x3b6>
 8003ed8:	9b08      	ldr	r3, [sp, #32]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <_lv_indev_scroll_handler+0x2b6>
           (right_en && proc->types.pointer.scroll_sum.x <= - scroll_limit) ||
 8003ede:	464b      	mov	r3, r9
 8003ee0:	2214      	movs	r2, #20
 8003ee2:	5e9a      	ldrsh	r2, [r3, r2]
 8003ee4:	9b05      	ldr	r3, [sp, #20]
 8003ee6:	425b      	negs	r3, r3
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	dc00      	bgt.n	8003eee <_lv_indev_scroll_handler+0x2b6>
 8003eec:	e07f      	b.n	8003fee <_lv_indev_scroll_handler+0x3b6>
 8003eee:	2c00      	cmp	r4, #0
 8003ef0:	d005      	beq.n	8003efe <_lv_indev_scroll_handler+0x2c6>
           (up_en    && proc->types.pointer.scroll_sum.y >=   scroll_limit) ||
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	2216      	movs	r2, #22
 8003ef6:	5e9b      	ldrsh	r3, [r3, r2]
 8003ef8:	9a04      	ldr	r2, [sp, #16]
 8003efa:	4293      	cmp	r3, r2
 8003efc:	da77      	bge.n	8003fee <_lv_indev_scroll_handler+0x3b6>
 8003efe:	2e00      	cmp	r6, #0
 8003f00:	d006      	beq.n	8003f10 <_lv_indev_scroll_handler+0x2d8>
           (down_en  && proc->types.pointer.scroll_sum.y <= - scroll_limit)) {
 8003f02:	464b      	mov	r3, r9
 8003f04:	2216      	movs	r2, #22
 8003f06:	5e9a      	ldrsh	r2, [r3, r2]
 8003f08:	9b05      	ldr	r3, [sp, #20]
 8003f0a:	425b      	negs	r3, r3
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	dd6e      	ble.n	8003fee <_lv_indev_scroll_handler+0x3b6>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_HOR) == false && hor_en) break;
 8003f10:	2180      	movs	r1, #128	; 0x80
 8003f12:	0028      	movs	r0, r5
 8003f14:	0049      	lsls	r1, r1, #1
 8003f16:	f001 f893 	bl	8005040 <lv_obj_has_flag>
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d103      	bne.n	8003f26 <_lv_indev_scroll_handler+0x2ee>
 8003f1e:	4643      	mov	r3, r8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d000      	beq.n	8003f26 <_lv_indev_scroll_handler+0x2ee>
 8003f24:	e73e      	b.n	8003da4 <_lv_indev_scroll_handler+0x16c>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_VER) == false && ver_en) break;
 8003f26:	2180      	movs	r1, #128	; 0x80
 8003f28:	0028      	movs	r0, r5
 8003f2a:	0089      	lsls	r1, r1, #2
 8003f2c:	f001 f888 	bl	8005040 <lv_obj_has_flag>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d103      	bne.n	8003f3c <_lv_indev_scroll_handler+0x304>
 8003f34:	465b      	mov	r3, fp
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d000      	beq.n	8003f3c <_lv_indev_scroll_handler+0x304>
 8003f3a:	e733      	b.n	8003da4 <_lv_indev_scroll_handler+0x16c>
        obj_act = lv_obj_get_parent(obj_act);
 8003f3c:	0028      	movs	r0, r5
 8003f3e:	f007 f803 	bl	800af48 <lv_obj_get_parent>
 8003f42:	1e05      	subs	r5, r0, #0
    while(obj_act) {
 8003f44:	d000      	beq.n	8003f48 <_lv_indev_scroll_handler+0x310>
 8003f46:	e711      	b.n	8003d6c <_lv_indev_scroll_handler+0x134>
 8003f48:	e72c      	b.n	8003da4 <_lv_indev_scroll_handler+0x16c>
           ((left_en   && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8003f4a:	9b08      	ldr	r3, [sp, #32]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0aa      	beq.n	8003ea6 <_lv_indev_scroll_handler+0x26e>
            (right_en  && proc->types.pointer.scroll_sum.x <= - scroll_limit))) {
 8003f50:	464b      	mov	r3, r9
 8003f52:	2214      	movs	r2, #20
 8003f54:	5e9a      	ldrsh	r2, [r3, r2]
 8003f56:	9b05      	ldr	r3, [sp, #20]
 8003f58:	425b      	negs	r3, r3
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	dca3      	bgt.n	8003ea6 <_lv_indev_scroll_handler+0x26e>
 8003f5e:	e79f      	b.n	8003ea0 <_lv_indev_scroll_handler+0x268>
           ((up_en    && proc->types.pointer.scroll_sum.y >=   scroll_limit) ||
 8003f60:	2e00      	cmp	r6, #0
 8003f62:	d090      	beq.n	8003e86 <_lv_indev_scroll_handler+0x24e>
            (down_en  && proc->types.pointer.scroll_sum.y <= - scroll_limit))) {
 8003f64:	464b      	mov	r3, r9
 8003f66:	2216      	movs	r2, #22
 8003f68:	5e9a      	ldrsh	r2, [r3, r2]
 8003f6a:	9b05      	ldr	r3, [sp, #20]
 8003f6c:	425b      	negs	r3, r3
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	dc89      	bgt.n	8003e86 <_lv_indev_scroll_handler+0x24e>
 8003f72:	e785      	b.n	8003e80 <_lv_indev_scroll_handler+0x248>
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8003f74:	f004 fbe0 	bl	8008738 <lv_obj_get_scroll_right>
 8003f78:	0006      	movs	r6, r0
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8003f7a:	0038      	movs	r0, r7
 8003f7c:	f004 fbc6 	bl	800870c <lv_obj_get_scroll_left>
            diff_x = elastic_diff(scroll_obj, proc->types.pointer.vect.x, sl, sr, LV_DIR_HOR);
 8003f80:	2310      	movs	r3, #16
 8003f82:	5ee1      	ldrsh	r1, [r4, r3]
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8003f84:	0002      	movs	r2, r0
            diff_x = elastic_diff(scroll_obj, proc->types.pointer.vect.x, sl, sr, LV_DIR_HOR);
 8003f86:	0033      	movs	r3, r6
 8003f88:	9500      	str	r5, [sp, #0]
 8003f8a:	0038      	movs	r0, r7
 8003f8c:	f7ff fd90 	bl	8003ab0 <elastic_diff>
 8003f90:	0005      	movs	r5, r0
 8003f92:	0006      	movs	r6, r0
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(scroll_obj);
 8003f94:	0038      	movs	r0, r7
 8003f96:	f003 fe6f 	bl	8007c78 <lv_obj_get_scroll_dir>
 8003f9a:	0003      	movs	r3, r0
        if((scroll_dir & LV_DIR_LEFT)   == 0 && diff_x > 0) diff_x = 0;
 8003f9c:	07c2      	lsls	r2, r0, #31
 8003f9e:	d516      	bpl.n	8003fce <_lv_indev_scroll_handler+0x396>
        if((scroll_dir & LV_DIR_RIGHT)  == 0 && diff_x < 0) diff_x = 0;
 8003fa0:	079b      	lsls	r3, r3, #30
 8003fa2:	d500      	bpl.n	8003fa6 <_lv_indev_scroll_handler+0x36e>
 8003fa4:	e0bb      	b.n	800411e <_lv_indev_scroll_handler+0x4e6>
 8003fa6:	b233      	sxth	r3, r6
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	17db      	asrs	r3, r3, #31
 8003fac:	4033      	ands	r3, r6
 8003fae:	b21d      	sxth	r5, r3
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8003fb0:	46ac      	mov	ip, r5
 8003fb2:	2600      	movs	r6, #0
 8003fb4:	e66e      	b.n	8003c94 <_lv_indev_scroll_handler+0x5c>
        if(sr <= 0) right_en = false;
 8003fb6:	2800      	cmp	r0, #0
 8003fb8:	dc8e      	bgt.n	8003ed8 <_lv_indev_scroll_handler+0x2a0>
 8003fba:	e798      	b.n	8003eee <_lv_indev_scroll_handler+0x2b6>
        if((sl > 0 || sr > 0)  &&
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	dd00      	ble.n	8003fc2 <_lv_indev_scroll_handler+0x38a>
 8003fc0:	e765      	b.n	8003e8e <_lv_indev_scroll_handler+0x256>
 8003fc2:	e770      	b.n	8003ea6 <_lv_indev_scroll_handler+0x26e>
        if((st > 0 || sb > 0)  &&
 8003fc4:	9b07      	ldr	r3, [sp, #28]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	dd00      	ble.n	8003fcc <_lv_indev_scroll_handler+0x394>
 8003fca:	e751      	b.n	8003e70 <_lv_indev_scroll_handler+0x238>
 8003fcc:	e75b      	b.n	8003e86 <_lv_indev_scroll_handler+0x24e>
        if((scroll_dir & LV_DIR_LEFT)   == 0 && diff_x > 0) diff_x = 0;
 8003fce:	2d00      	cmp	r5, #0
 8003fd0:	dde6      	ble.n	8003fa0 <_lv_indev_scroll_handler+0x368>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2500      	movs	r5, #0
 8003fd6:	469c      	mov	ip, r3
        lv_coord_t diff_y = 0;
 8003fd8:	2600      	movs	r6, #0
 8003fda:	e65b      	b.n	8003c94 <_lv_indev_scroll_handler+0x5c>
        if((left_en  && proc->types.pointer.scroll_sum.x >=   scroll_limit) ||
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d086      	beq.n	8003eee <_lv_indev_scroll_handler+0x2b6>
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	2214      	movs	r2, #20
 8003fe4:	5e9b      	ldrsh	r3, [r3, r2]
 8003fe6:	9a04      	ldr	r2, [sp, #16]
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	da00      	bge.n	8003fee <_lv_indev_scroll_handler+0x3b6>
 8003fec:	e77f      	b.n	8003eee <_lv_indev_scroll_handler+0x2b6>
            proc->types.pointer.scroll_dir = hor_en ? LV_DIR_HOR : LV_DIR_VER;
 8003fee:	4643      	mov	r3, r8
 8003ff0:	464c      	mov	r4, r9
 8003ff2:	2208      	movs	r2, #8
 8003ff4:	213c      	movs	r1, #60	; 0x3c
 8003ff6:	200f      	movs	r0, #15
 8003ff8:	425b      	negs	r3, r3
 8003ffa:	4393      	bics	r3, r2
 8003ffc:	5c62      	ldrb	r2, [r4, r1]
 8003ffe:	330c      	adds	r3, #12
 8004000:	4003      	ands	r3, r0
 8004002:	4382      	bics	r2, r0
 8004004:	4313      	orrs	r3, r2
 8004006:	4657      	mov	r7, sl
 8004008:	5463      	strb	r3, [r4, r1]
            break;
 800400a:	e6cd      	b.n	8003da8 <_lv_indev_scroll_handler+0x170>
        switch(lv_obj_get_scroll_snap_y(obj)) {
 800400c:	0038      	movs	r0, r7
 800400e:	f003 fe47 	bl	8007ca0 <lv_obj_get_scroll_snap_y>
 8004012:	2802      	cmp	r0, #2
 8004014:	d042      	beq.n	800409c <_lv_indev_scroll_handler+0x464>
 8004016:	2803      	cmp	r0, #3
 8004018:	d018      	beq.n	800404c <_lv_indev_scroll_handler+0x414>
 800401a:	2801      	cmp	r0, #1
 800401c:	d031      	beq.n	8004082 <_lv_indev_scroll_handler+0x44a>
                proc->types.pointer.scroll_area.y1 = LV_COORD_MIN;
 800401e:	4b39      	ldr	r3, [pc, #228]	; (8004104 <_lv_indev_scroll_handler+0x4cc>)
 8004020:	8663      	strh	r3, [r4, #50]	; 0x32
                proc->types.pointer.scroll_area.y2 = LV_COORD_MAX;
 8004022:	4b37      	ldr	r3, [pc, #220]	; (8004100 <_lv_indev_scroll_handler+0x4c8>)
 8004024:	86e3      	strh	r3, [r4, #54]	; 0x36
        switch(lv_obj_get_scroll_snap_x(obj)) {
 8004026:	0038      	movs	r0, r7
 8004028:	f003 fe30 	bl	8007c8c <lv_obj_get_scroll_snap_x>
 800402c:	2802      	cmp	r0, #2
 800402e:	d06b      	beq.n	8004108 <_lv_indev_scroll_handler+0x4d0>
 8004030:	2803      	cmp	r0, #3
 8004032:	d04f      	beq.n	80040d4 <_lv_indev_scroll_handler+0x49c>
 8004034:	2801      	cmp	r0, #1
 8004036:	d03c      	beq.n	80040b2 <_lv_indev_scroll_handler+0x47a>
                proc->types.pointer.scroll_area.x1 = LV_COORD_MIN;
 8004038:	4b32      	ldr	r3, [pc, #200]	; (8004104 <_lv_indev_scroll_handler+0x4cc>)
 800403a:	8623      	strh	r3, [r4, #48]	; 0x30
                proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 800403c:	4b30      	ldr	r3, [pc, #192]	; (8004100 <_lv_indev_scroll_handler+0x4c8>)
 800403e:	86a3      	strh	r3, [r4, #52]	; 0x34
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8004040:	e6d9      	b.n	8003df6 <_lv_indev_scroll_handler+0x1be>
    bool ver_en = false;
 8004042:	2300      	movs	r3, #0
 8004044:	469b      	mov	fp, r3
        hor_en = true;
 8004046:	3301      	adds	r3, #1
 8004048:	4698      	mov	r8, r3
 800404a:	e689      	b.n	8003d60 <_lv_indev_scroll_handler+0x128>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800404c:	8afb      	ldrh	r3, [r7, #22]
                    lv_coord_t y_mid = obj->coords.y1 + lv_area_get_height(&obj->coords) / 2;
 800404e:	8a7d      	ldrh	r5, [r7, #18]
 8004050:	3301      	adds	r3, #1
 8004052:	1b5b      	subs	r3, r3, r5
 8004054:	b21b      	sxth	r3, r3
 8004056:	0fda      	lsrs	r2, r3, #31
 8004058:	18d3      	adds	r3, r2, r3
 800405a:	105b      	asrs	r3, r3, #1
 800405c:	18ed      	adds	r5, r5, r3
 800405e:	b2ad      	uxth	r5, r5
                    proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 8004060:	1c69      	adds	r1, r5, #1
 8004062:	4a27      	ldr	r2, [pc, #156]	; (8004100 <_lv_indev_scroll_handler+0x4c8>)
 8004064:	2300      	movs	r3, #0
 8004066:	0038      	movs	r0, r7
 8004068:	b209      	sxth	r1, r1
 800406a:	f7ff fbf9 	bl	8003860 <find_snap_point_y>
                    proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, y_mid - 1, 0);
 800406e:	3d01      	subs	r5, #1
                    proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 8004070:	8660      	strh	r0, [r4, #50]	; 0x32
                    proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, y_mid - 1, 0);
 8004072:	b22a      	sxth	r2, r5
                proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y2, 0);
 8004074:	2300      	movs	r3, #0
 8004076:	0038      	movs	r0, r7
 8004078:	4922      	ldr	r1, [pc, #136]	; (8004104 <_lv_indev_scroll_handler+0x4cc>)
 800407a:	f7ff fbf1 	bl	8003860 <find_snap_point_y>
 800407e:	86e0      	strh	r0, [r4, #54]	; 0x36
                break;
 8004080:	e7d1      	b.n	8004026 <_lv_indev_scroll_handler+0x3ee>
                proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y1 + 1, LV_COORD_MAX, 0);
 8004082:	8a79      	ldrh	r1, [r7, #18]
 8004084:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <_lv_indev_scroll_handler+0x4c8>)
 8004086:	3101      	adds	r1, #1
 8004088:	2300      	movs	r3, #0
 800408a:	0038      	movs	r0, r7
 800408c:	b209      	sxth	r1, r1
 800408e:	f7ff fbe7 	bl	8003860 <find_snap_point_y>
 8004092:	8660      	strh	r0, [r4, #50]	; 0x32
                proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y1 - 1, 0);
 8004094:	8a7a      	ldrh	r2, [r7, #18]
 8004096:	3a01      	subs	r2, #1
 8004098:	b212      	sxth	r2, r2
 800409a:	e7eb      	b.n	8004074 <_lv_indev_scroll_handler+0x43c>
                proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y2, LV_COORD_MAX, 0);
 800409c:	2316      	movs	r3, #22
 800409e:	5ef9      	ldrsh	r1, [r7, r3]
 80040a0:	4a17      	ldr	r2, [pc, #92]	; (8004100 <_lv_indev_scroll_handler+0x4c8>)
 80040a2:	2300      	movs	r3, #0
 80040a4:	0038      	movs	r0, r7
 80040a6:	f7ff fbdb 	bl	8003860 <find_snap_point_y>
 80040aa:	8660      	strh	r0, [r4, #50]	; 0x32
                proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y2, 0);
 80040ac:	2316      	movs	r3, #22
 80040ae:	5efa      	ldrsh	r2, [r7, r3]
 80040b0:	e7e0      	b.n	8004074 <_lv_indev_scroll_handler+0x43c>
                proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x1, LV_COORD_MAX, 0);
 80040b2:	2310      	movs	r3, #16
 80040b4:	5ef9      	ldrsh	r1, [r7, r3]
 80040b6:	4a12      	ldr	r2, [pc, #72]	; (8004100 <_lv_indev_scroll_handler+0x4c8>)
 80040b8:	2300      	movs	r3, #0
 80040ba:	0038      	movs	r0, r7
 80040bc:	f7ff fc64 	bl	8003988 <find_snap_point_x>
 80040c0:	8620      	strh	r0, [r4, #48]	; 0x30
                proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x1, 0);
 80040c2:	2310      	movs	r3, #16
 80040c4:	5efa      	ldrsh	r2, [r7, r3]
                    proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 80040c6:	2300      	movs	r3, #0
 80040c8:	0038      	movs	r0, r7
 80040ca:	490e      	ldr	r1, [pc, #56]	; (8004104 <_lv_indev_scroll_handler+0x4cc>)
 80040cc:	f7ff fc5c 	bl	8003988 <find_snap_point_x>
 80040d0:	86a0      	strh	r0, [r4, #52]	; 0x34
                    break;
 80040d2:	e686      	b.n	8003de2 <_lv_indev_scroll_handler+0x1aa>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80040d4:	8abb      	ldrh	r3, [r7, #20]
                    lv_coord_t x_mid = obj->coords.x1 + lv_area_get_width(&obj->coords) / 2;
 80040d6:	8a3d      	ldrh	r5, [r7, #16]
 80040d8:	3301      	adds	r3, #1
 80040da:	1b5b      	subs	r3, r3, r5
 80040dc:	b21b      	sxth	r3, r3
 80040de:	0fda      	lsrs	r2, r3, #31
 80040e0:	18d3      	adds	r3, r2, r3
 80040e2:	105b      	asrs	r3, r3, #1
 80040e4:	18ed      	adds	r5, r5, r3
 80040e6:	b2ad      	uxth	r5, r5
                    proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 80040e8:	1c69      	adds	r1, r5, #1
 80040ea:	4a05      	ldr	r2, [pc, #20]	; (8004100 <_lv_indev_scroll_handler+0x4c8>)
 80040ec:	2300      	movs	r3, #0
 80040ee:	0038      	movs	r0, r7
 80040f0:	b209      	sxth	r1, r1
 80040f2:	f7ff fc49 	bl	8003988 <find_snap_point_x>
                    proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 80040f6:	3d01      	subs	r5, #1
                    proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 80040f8:	8620      	strh	r0, [r4, #48]	; 0x30
                    proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 80040fa:	b22a      	sxth	r2, r5
 80040fc:	e7e3      	b.n	80040c6 <_lv_indev_scroll_handler+0x48e>
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	00001fff 	.word	0x00001fff
 8004104:	ffffe001 	.word	0xffffe001
                proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x2, LV_COORD_MAX, 0);
 8004108:	2314      	movs	r3, #20
 800410a:	5ef9      	ldrsh	r1, [r7, r3]
 800410c:	4a05      	ldr	r2, [pc, #20]	; (8004124 <_lv_indev_scroll_handler+0x4ec>)
 800410e:	2300      	movs	r3, #0
 8004110:	0038      	movs	r0, r7
 8004112:	f7ff fc39 	bl	8003988 <find_snap_point_x>
 8004116:	8620      	strh	r0, [r4, #48]	; 0x30
                proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x2, 0);
 8004118:	2314      	movs	r3, #20
 800411a:	5efa      	ldrsh	r2, [r7, r3]
 800411c:	e7d3      	b.n	80040c6 <_lv_indev_scroll_handler+0x48e>
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 800411e:	46b4      	mov	ip, r6
 8004120:	2600      	movs	r6, #0
 8004122:	e5b7      	b.n	8003c94 <_lv_indev_scroll_handler+0x5c>
 8004124:	00001fff 	.word	0x00001fff

08004128 <_lv_indev_scroll_throw_handler>:
{
 8004128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800412a:	464e      	mov	r6, r9
 800412c:	46de      	mov	lr, fp
 800412e:	4657      	mov	r7, sl
 8004130:	4645      	mov	r5, r8
 8004132:	b5e0      	push	{r5, r6, r7, lr}
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 8004134:	6a86      	ldr	r6, [r0, #40]	; 0x28
{
 8004136:	0004      	movs	r4, r0
 8004138:	b083      	sub	sp, #12
    if(scroll_obj == NULL) return;
 800413a:	2e00      	cmp	r6, #0
 800413c:	d003      	beq.n	8004146 <_lv_indev_scroll_throw_handler+0x1e>
    if(proc->types.pointer.scroll_dir == LV_DIR_NONE) return;
 800413e:	233c      	movs	r3, #60	; 0x3c
 8004140:	5cc3      	ldrb	r3, [r0, r3]
 8004142:	071b      	lsls	r3, r3, #28
 8004144:	d106      	bne.n	8004154 <_lv_indev_scroll_throw_handler+0x2c>
}
 8004146:	b003      	add	sp, #12
 8004148:	bcf0      	pop	{r4, r5, r6, r7}
 800414a:	46bb      	mov	fp, r7
 800414c:	46b2      	mov	sl, r6
 800414e:	46a9      	mov	r9, r5
 8004150:	46a0      	mov	r8, r4
 8004152:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_indev_t * indev_act = lv_indev_get_act();
 8004154:	f7fe fb20 	bl	8002798 <lv_indev_get_act>
    lv_coord_t scroll_throw = indev_act->driver->scroll_throw;
 8004158:	6803      	ldr	r3, [r0, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
 800415a:	4680      	mov	r8, r0
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_MOMENTUM) == false) {
 800415c:	2140      	movs	r1, #64	; 0x40
 800415e:	0030      	movs	r0, r6
    lv_coord_t scroll_throw = indev_act->driver->scroll_throw;
 8004160:	7d5f      	ldrb	r7, [r3, #21]
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_MOMENTUM) == false) {
 8004162:	f000 ff6d 	bl	8005040 <lv_obj_has_flag>
 8004166:	2800      	cmp	r0, #0
 8004168:	d100      	bne.n	800416c <_lv_indev_scroll_throw_handler+0x44>
        proc->types.pointer.scroll_throw_vect.x = 0;
 800416a:	61a0      	str	r0, [r4, #24]
    lv_scroll_snap_t align_x = lv_obj_get_scroll_snap_x(scroll_obj);
 800416c:	0030      	movs	r0, r6
 800416e:	f003 fd8d 	bl	8007c8c <lv_obj_get_scroll_snap_x>
 8004172:	4681      	mov	r9, r0
    lv_scroll_snap_t align_y = lv_obj_get_scroll_snap_y(scroll_obj);
 8004174:	0030      	movs	r0, r6
 8004176:	f003 fd93 	bl	8007ca0 <lv_obj_get_scroll_snap_y>
    if(proc->types.pointer.scroll_dir == LV_DIR_VER) {
 800417a:	233c      	movs	r3, #60	; 0x3c
 800417c:	250f      	movs	r5, #15
 800417e:	5ce3      	ldrb	r3, [r4, r3]
    lv_scroll_snap_t align_y = lv_obj_get_scroll_snap_y(scroll_obj);
 8004180:	4682      	mov	sl, r0
    if(proc->types.pointer.scroll_dir == LV_DIR_VER) {
 8004182:	401d      	ands	r5, r3
 8004184:	2d0c      	cmp	r5, #12
 8004186:	d05b      	beq.n	8004240 <_lv_indev_scroll_throw_handler+0x118>
    else if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 8004188:	2d03      	cmp	r5, #3
 800418a:	d01b      	beq.n	80041c4 <_lv_indev_scroll_throw_handler+0x9c>
    if(proc->types.pointer.scroll_throw_vect.x == 0 && proc->types.pointer.scroll_throw_vect.y == 0) {
 800418c:	69a3      	ldr	r3, [r4, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1d9      	bne.n	8004146 <_lv_indev_scroll_throw_handler+0x1e>
        if(align_y == LV_SCROLL_SNAP_NONE) {
 8004192:	4653      	mov	r3, sl
 8004194:	2b00      	cmp	r3, #0
 8004196:	d07a      	beq.n	800428e <_lv_indev_scroll_throw_handler+0x166>
        if(align_x == LV_SCROLL_SNAP_NONE) {
 8004198:	464b      	mov	r3, r9
 800419a:	2b00      	cmp	r3, #0
 800419c:	d100      	bne.n	80041a0 <_lv_indev_scroll_throw_handler+0x78>
 800419e:	e0c5      	b.n	800432c <_lv_indev_scroll_throw_handler+0x204>
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_END, indev_act);
 80041a0:	4642      	mov	r2, r8
 80041a2:	210a      	movs	r1, #10
 80041a4:	0030      	movs	r0, r6
 80041a6:	f7fd fdd9 	bl	8001d5c <lv_event_send>
        if(proc->reset_query) return;
 80041aa:	2202      	movs	r2, #2
 80041ac:	0011      	movs	r1, r2
 80041ae:	7863      	ldrb	r3, [r4, #1]
 80041b0:	4019      	ands	r1, r3
 80041b2:	421a      	tst	r2, r3
 80041b4:	d1c7      	bne.n	8004146 <_lv_indev_scroll_throw_handler+0x1e>
        proc->types.pointer.scroll_dir = LV_DIR_NONE;
 80041b6:	200f      	movs	r0, #15
 80041b8:	323a      	adds	r2, #58	; 0x3a
 80041ba:	5ca3      	ldrb	r3, [r4, r2]
 80041bc:	4383      	bics	r3, r0
 80041be:	54a3      	strb	r3, [r4, r2]
        proc->types.pointer.scroll_obj = NULL;
 80041c0:	62a1      	str	r1, [r4, #40]	; 0x28
 80041c2:	e7c0      	b.n	8004146 <_lv_indev_scroll_throw_handler+0x1e>
        proc->types.pointer.scroll_throw_vect.y = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	8363      	strh	r3, [r4, #26]
        if(align_x == LV_SCROLL_SNAP_NONE) {
 80041c8:	464b      	mov	r3, r9
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d100      	bne.n	80041d0 <_lv_indev_scroll_throw_handler+0xa8>
 80041ce:	e0c1      	b.n	8004354 <_lv_indev_scroll_throw_handler+0x22c>
            lv_coord_t diff_x = scroll_throw_predict_x(proc);
 80041d0:	2318      	movs	r3, #24
 80041d2:	5ee5      	ldrsh	r5, [r4, r3]
    lv_indev_t * indev_act = lv_indev_get_act();
 80041d4:	f7fe fae0 	bl	8002798 <lv_indev_get_act>
    lv_coord_t scroll_throw = indev_act->driver->scroll_throw;
 80041d8:	6803      	ldr	r3, [r0, #0]
 80041da:	7d5b      	ldrb	r3, [r3, #21]
    while(x) {
 80041dc:	2d00      	cmp	r5, #0
 80041de:	d100      	bne.n	80041e2 <_lv_indev_scroll_throw_handler+0xba>
 80041e0:	e0fd      	b.n	80043de <_lv_indev_scroll_throw_handler+0x2b6>
        x = x * (100 - scroll_throw) / 100;
 80041e2:	2264      	movs	r2, #100	; 0x64
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	469b      	mov	fp, r3
    lv_coord_t move = 0;
 80041e8:	2700      	movs	r7, #0
        x = x * (100 - scroll_throw) / 100;
 80041ea:	4658      	mov	r0, fp
 80041ec:	2164      	movs	r1, #100	; 0x64
 80041ee:	4368      	muls	r0, r5
 80041f0:	f7fc f824 	bl	800023c <__divsi3>
        move += x;
 80041f4:	197f      	adds	r7, r7, r5
        x = x * (100 - scroll_throw) / 100;
 80041f6:	b205      	sxth	r5, r0
        move += x;
 80041f8:	b23f      	sxth	r7, r7
    while(x) {
 80041fa:	2d00      	cmp	r5, #0
 80041fc:	d1f5      	bne.n	80041ea <_lv_indev_scroll_throw_handler+0xc2>
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 80041fe:	003b      	movs	r3, r7
            proc->types.pointer.scroll_throw_vect.x = 0;
 8004200:	2200      	movs	r2, #0
 8004202:	8322      	strh	r2, [r4, #24]
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8004204:	2214      	movs	r2, #20
 8004206:	5ea1      	ldrsh	r1, [r4, r2]
 8004208:	2030      	movs	r0, #48	; 0x30
 800420a:	5e22      	ldrsh	r2, [r4, r0]
 800420c:	18cb      	adds	r3, r1, r3
 800420e:	4293      	cmp	r3, r2
 8004210:	da02      	bge.n	8004218 <_lv_indev_scroll_throw_handler+0xf0>
            *diff_x = proc->types.pointer.scroll_area.x1 - proc->types.pointer.scroll_sum.x;
 8004212:	1a52      	subs	r2, r2, r1
 8004214:	b217      	sxth	r7, r2
        if(proc->types.pointer.scroll_sum.x + *diff_x > proc->types.pointer.scroll_area.x2) {
 8004216:	187b      	adds	r3, r7, r1
 8004218:	2034      	movs	r0, #52	; 0x34
 800421a:	5e22      	ldrsh	r2, [r4, r0]
 800421c:	429a      	cmp	r2, r3
 800421e:	da00      	bge.n	8004222 <_lv_indev_scroll_throw_handler+0xfa>
 8004220:	e0d6      	b.n	80043d0 <_lv_indev_scroll_throw_handler+0x2a8>
            lv_obj_scroll_by(scroll_obj, x + diff_x, 0, LV_ANIM_ON);
 8004222:	b2bd      	uxth	r5, r7
            lv_coord_t x = find_snap_point_x(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_x);
 8004224:	003b      	movs	r3, r7
 8004226:	0030      	movs	r0, r6
 8004228:	4a6e      	ldr	r2, [pc, #440]	; (80043e4 <_lv_indev_scroll_throw_handler+0x2bc>)
 800422a:	496f      	ldr	r1, [pc, #444]	; (80043e8 <_lv_indev_scroll_throw_handler+0x2c0>)
 800422c:	f7ff fbac 	bl	8003988 <find_snap_point_x>
            lv_obj_scroll_by(scroll_obj, x + diff_x, 0, LV_ANIM_ON);
 8004230:	182d      	adds	r5, r5, r0
 8004232:	2301      	movs	r3, #1
 8004234:	2200      	movs	r2, #0
 8004236:	0030      	movs	r0, r6
 8004238:	b229      	sxth	r1, r5
 800423a:	f004 fa93 	bl	8008764 <lv_obj_scroll_by>
 800423e:	e7a5      	b.n	800418c <_lv_indev_scroll_throw_handler+0x64>
        proc->types.pointer.scroll_throw_vect.x = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	8323      	strh	r3, [r4, #24]
        if(align_y == LV_SCROLL_SNAP_NONE) {
 8004244:	2800      	cmp	r0, #0
 8004246:	d136      	bne.n	80042b6 <_lv_indev_scroll_throw_handler+0x18e>
                proc->types.pointer.scroll_throw_vect.y * (100 - scroll_throw) / 100;
 8004248:	2064      	movs	r0, #100	; 0x64
 800424a:	221a      	movs	r2, #26
 800424c:	5ea3      	ldrsh	r3, [r4, r2]
 800424e:	1bc0      	subs	r0, r0, r7
 8004250:	4358      	muls	r0, r3
 8004252:	2164      	movs	r1, #100	; 0x64
 8004254:	f7fb fff2 	bl	800023c <__divsi3>
            proc->types.pointer.scroll_throw_vect.y =
 8004258:	8360      	strh	r0, [r4, #26]
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 800425a:	0030      	movs	r0, r6
 800425c:	f003 fd48 	bl	8007cf0 <lv_obj_get_scroll_bottom>
 8004260:	0007      	movs	r7, r0
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 8004262:	0030      	movs	r0, r6
 8004264:	f003 fd3a 	bl	8007cdc <lv_obj_get_scroll_top>
            proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb,
 8004268:	231a      	movs	r3, #26
 800426a:	5ee1      	ldrsh	r1, [r4, r3]
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 800426c:	0002      	movs	r2, r0
            proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb,
 800426e:	003b      	movs	r3, r7
 8004270:	0030      	movs	r0, r6
 8004272:	9500      	str	r5, [sp, #0]
 8004274:	f7ff fc1c 	bl	8003ab0 <elastic_diff>
            lv_obj_scroll_by(scroll_obj, 0, proc->types.pointer.scroll_throw_vect.y, LV_ANIM_OFF);
 8004278:	2300      	movs	r3, #0
            proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb,
 800427a:	0002      	movs	r2, r0
 800427c:	8360      	strh	r0, [r4, #26]
            lv_obj_scroll_by(scroll_obj, 0, proc->types.pointer.scroll_throw_vect.y, LV_ANIM_OFF);
 800427e:	2100      	movs	r1, #0
 8004280:	0030      	movs	r0, r6
 8004282:	f004 fa6f 	bl	8008764 <lv_obj_scroll_by>
    if(proc->types.pointer.scroll_throw_vect.x == 0 && proc->types.pointer.scroll_throw_vect.y == 0) {
 8004286:	69a3      	ldr	r3, [r4, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d000      	beq.n	800428e <_lv_indev_scroll_throw_handler+0x166>
 800428c:	e75b      	b.n	8004146 <_lv_indev_scroll_throw_handler+0x1e>
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 800428e:	0030      	movs	r0, r6
 8004290:	f003 fd24 	bl	8007cdc <lv_obj_get_scroll_top>
 8004294:	0005      	movs	r5, r0
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8004296:	0030      	movs	r0, r6
 8004298:	f003 fd2a 	bl	8007cf0 <lv_obj_get_scroll_bottom>
            if(st > 0 || sb > 0) {
 800429c:	2d00      	cmp	r5, #0
 800429e:	dd7d      	ble.n	800439c <_lv_indev_scroll_throw_handler+0x274>
                else if(sb < 0) {
 80042a0:	2800      	cmp	r0, #0
 80042a2:	db00      	blt.n	80042a6 <_lv_indev_scroll_throw_handler+0x17e>
 80042a4:	e778      	b.n	8004198 <_lv_indev_scroll_throw_handler+0x70>
                    lv_obj_scroll_by(scroll_obj, 0, -sb, LV_ANIM_ON);
 80042a6:	4240      	negs	r0, r0
 80042a8:	b202      	sxth	r2, r0
 80042aa:	2301      	movs	r3, #1
 80042ac:	2100      	movs	r1, #0
 80042ae:	0030      	movs	r0, r6
 80042b0:	f004 fa58 	bl	8008764 <lv_obj_scroll_by>
 80042b4:	e770      	b.n	8004198 <_lv_indev_scroll_throw_handler+0x70>
            lv_coord_t diff_y = scroll_throw_predict_y(proc);
 80042b6:	231a      	movs	r3, #26
 80042b8:	5ee5      	ldrsh	r5, [r4, r3]
    lv_indev_t * indev_act = lv_indev_get_act();
 80042ba:	f7fe fa6d 	bl	8002798 <lv_indev_get_act>
    lv_coord_t scroll_throw = indev_act->driver->scroll_throw;
 80042be:	6803      	ldr	r3, [r0, #0]
 80042c0:	7d5b      	ldrb	r3, [r3, #21]
    while(y) {
 80042c2:	2d00      	cmp	r5, #0
 80042c4:	d100      	bne.n	80042c8 <_lv_indev_scroll_throw_handler+0x1a0>
 80042c6:	e087      	b.n	80043d8 <_lv_indev_scroll_throw_handler+0x2b0>
        y = y * (100 - scroll_throw) / 100;
 80042c8:	2264      	movs	r2, #100	; 0x64
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	469a      	mov	sl, r3
    lv_coord_t move = 0;
 80042ce:	2700      	movs	r7, #0
        y = y * (100 - scroll_throw) / 100;
 80042d0:	4650      	mov	r0, sl
 80042d2:	2164      	movs	r1, #100	; 0x64
 80042d4:	4368      	muls	r0, r5
 80042d6:	f7fb ffb1 	bl	800023c <__divsi3>
        move += y;
 80042da:	197f      	adds	r7, r7, r5
        y = y * (100 - scroll_throw) / 100;
 80042dc:	b205      	sxth	r5, r0
        move += y;
 80042de:	b23f      	sxth	r7, r7
    while(y) {
 80042e0:	2d00      	cmp	r5, #0
 80042e2:	d1f5      	bne.n	80042d0 <_lv_indev_scroll_throw_handler+0x1a8>
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 80042e4:	003b      	movs	r3, r7
            proc->types.pointer.scroll_throw_vect.y = 0;
 80042e6:	2200      	movs	r2, #0
 80042e8:	8362      	strh	r2, [r4, #26]
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 80042ea:	2216      	movs	r2, #22
 80042ec:	5ea1      	ldrsh	r1, [r4, r2]
 80042ee:	2032      	movs	r0, #50	; 0x32
 80042f0:	5e22      	ldrsh	r2, [r4, r0]
 80042f2:	18cb      	adds	r3, r1, r3
 80042f4:	4293      	cmp	r3, r2
 80042f6:	da02      	bge.n	80042fe <_lv_indev_scroll_throw_handler+0x1d6>
            *diff_y = proc->types.pointer.scroll_area.y1 - proc->types.pointer.scroll_sum.y;
 80042f8:	1a52      	subs	r2, r2, r1
 80042fa:	b217      	sxth	r7, r2
        if(proc->types.pointer.scroll_sum.y + *diff_y > proc->types.pointer.scroll_area.y2) {
 80042fc:	187b      	adds	r3, r7, r1
 80042fe:	2036      	movs	r0, #54	; 0x36
 8004300:	5e22      	ldrsh	r2, [r4, r0]
 8004302:	429a      	cmp	r2, r3
 8004304:	db46      	blt.n	8004394 <_lv_indev_scroll_throw_handler+0x26c>
            lv_obj_scroll_by(scroll_obj, 0, diff_y + y, LV_ANIM_ON);
 8004306:	b2bd      	uxth	r5, r7
            lv_coord_t y = find_snap_point_y(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_y);
 8004308:	003b      	movs	r3, r7
 800430a:	4a36      	ldr	r2, [pc, #216]	; (80043e4 <_lv_indev_scroll_throw_handler+0x2bc>)
 800430c:	4936      	ldr	r1, [pc, #216]	; (80043e8 <_lv_indev_scroll_throw_handler+0x2c0>)
 800430e:	0030      	movs	r0, r6
 8004310:	f7ff faa6 	bl	8003860 <find_snap_point_y>
            lv_obj_scroll_by(scroll_obj, 0, diff_y + y, LV_ANIM_ON);
 8004314:	182d      	adds	r5, r5, r0
 8004316:	2301      	movs	r3, #1
 8004318:	2100      	movs	r1, #0
 800431a:	0030      	movs	r0, r6
 800431c:	b22a      	sxth	r2, r5
 800431e:	f004 fa21 	bl	8008764 <lv_obj_scroll_by>
    if(proc->types.pointer.scroll_throw_vect.x == 0 && proc->types.pointer.scroll_throw_vect.y == 0) {
 8004322:	69a3      	ldr	r3, [r4, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d100      	bne.n	800432a <_lv_indev_scroll_throw_handler+0x202>
 8004328:	e736      	b.n	8004198 <_lv_indev_scroll_throw_handler+0x70>
 800432a:	e70c      	b.n	8004146 <_lv_indev_scroll_throw_handler+0x1e>
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 800432c:	0030      	movs	r0, r6
 800432e:	f004 f9ed 	bl	800870c <lv_obj_get_scroll_left>
 8004332:	0005      	movs	r5, r0
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8004334:	0030      	movs	r0, r6
 8004336:	f004 f9ff 	bl	8008738 <lv_obj_get_scroll_right>
            if(sl > 0 || sr > 0) {
 800433a:	2d00      	cmp	r5, #0
 800433c:	dd3b      	ble.n	80043b6 <_lv_indev_scroll_throw_handler+0x28e>
                else if(sr < 0) {
 800433e:	2800      	cmp	r0, #0
 8004340:	db00      	blt.n	8004344 <_lv_indev_scroll_throw_handler+0x21c>
 8004342:	e72d      	b.n	80041a0 <_lv_indev_scroll_throw_handler+0x78>
                    lv_obj_scroll_by(scroll_obj, -sr, 0, LV_ANIM_ON);
 8004344:	4240      	negs	r0, r0
 8004346:	b201      	sxth	r1, r0
 8004348:	2301      	movs	r3, #1
 800434a:	2200      	movs	r2, #0
 800434c:	0030      	movs	r0, r6
 800434e:	f004 fa09 	bl	8008764 <lv_obj_scroll_by>
 8004352:	e725      	b.n	80041a0 <_lv_indev_scroll_throw_handler+0x78>
                proc->types.pointer.scroll_throw_vect.x * (100 - scroll_throw) / 100;
 8004354:	2064      	movs	r0, #100	; 0x64
 8004356:	2218      	movs	r2, #24
 8004358:	5ea3      	ldrsh	r3, [r4, r2]
 800435a:	1bc0      	subs	r0, r0, r7
 800435c:	2164      	movs	r1, #100	; 0x64
 800435e:	4358      	muls	r0, r3
 8004360:	f7fb ff6c 	bl	800023c <__divsi3>
            proc->types.pointer.scroll_throw_vect.x =
 8004364:	8320      	strh	r0, [r4, #24]
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8004366:	0030      	movs	r0, r6
 8004368:	f004 f9d0 	bl	800870c <lv_obj_get_scroll_left>
 800436c:	0007      	movs	r7, r0
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 800436e:	0030      	movs	r0, r6
 8004370:	f004 f9e2 	bl	8008738 <lv_obj_get_scroll_right>
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl, sr,
 8004374:	2218      	movs	r2, #24
 8004376:	5ea1      	ldrsh	r1, [r4, r2]
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8004378:	0003      	movs	r3, r0
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl, sr,
 800437a:	003a      	movs	r2, r7
 800437c:	0030      	movs	r0, r6
 800437e:	9500      	str	r5, [sp, #0]
 8004380:	f7ff fb96 	bl	8003ab0 <elastic_diff>
            lv_obj_scroll_by(scroll_obj, proc->types.pointer.scroll_throw_vect.x, 0, LV_ANIM_OFF);
 8004384:	2300      	movs	r3, #0
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl, sr,
 8004386:	0001      	movs	r1, r0
 8004388:	8320      	strh	r0, [r4, #24]
            lv_obj_scroll_by(scroll_obj, proc->types.pointer.scroll_throw_vect.x, 0, LV_ANIM_OFF);
 800438a:	2200      	movs	r2, #0
 800438c:	0030      	movs	r0, r6
 800438e:	f004 f9e9 	bl	8008764 <lv_obj_scroll_by>
 8004392:	e6fb      	b.n	800418c <_lv_indev_scroll_throw_handler+0x64>
            *diff_y = proc->types.pointer.scroll_area.y2 - proc->types.pointer.scroll_sum.y;
 8004394:	1a52      	subs	r2, r2, r1
 8004396:	b295      	uxth	r5, r2
 8004398:	b217      	sxth	r7, r2
 800439a:	e7b5      	b.n	8004308 <_lv_indev_scroll_throw_handler+0x1e0>
            if(st > 0 || sb > 0) {
 800439c:	2800      	cmp	r0, #0
 800439e:	dc00      	bgt.n	80043a2 <_lv_indev_scroll_throw_handler+0x27a>
 80043a0:	e6fa      	b.n	8004198 <_lv_indev_scroll_throw_handler+0x70>
                if(st < 0) {
 80043a2:	2d00      	cmp	r5, #0
 80043a4:	d100      	bne.n	80043a8 <_lv_indev_scroll_throw_handler+0x280>
 80043a6:	e6f7      	b.n	8004198 <_lv_indev_scroll_throw_handler+0x70>
                    lv_obj_scroll_by(scroll_obj, 0, st, LV_ANIM_ON);
 80043a8:	2301      	movs	r3, #1
 80043aa:	002a      	movs	r2, r5
 80043ac:	2100      	movs	r1, #0
 80043ae:	0030      	movs	r0, r6
 80043b0:	f004 f9d8 	bl	8008764 <lv_obj_scroll_by>
 80043b4:	e6f0      	b.n	8004198 <_lv_indev_scroll_throw_handler+0x70>
            if(sl > 0 || sr > 0) {
 80043b6:	2800      	cmp	r0, #0
 80043b8:	dc00      	bgt.n	80043bc <_lv_indev_scroll_throw_handler+0x294>
 80043ba:	e6f1      	b.n	80041a0 <_lv_indev_scroll_throw_handler+0x78>
                if(sl < 0) {
 80043bc:	2d00      	cmp	r5, #0
 80043be:	d100      	bne.n	80043c2 <_lv_indev_scroll_throw_handler+0x29a>
 80043c0:	e6ee      	b.n	80041a0 <_lv_indev_scroll_throw_handler+0x78>
                    lv_obj_scroll_by(scroll_obj, sl, 0, LV_ANIM_ON);
 80043c2:	2301      	movs	r3, #1
 80043c4:	2200      	movs	r2, #0
 80043c6:	0029      	movs	r1, r5
 80043c8:	0030      	movs	r0, r6
 80043ca:	f004 f9cb 	bl	8008764 <lv_obj_scroll_by>
 80043ce:	e6e7      	b.n	80041a0 <_lv_indev_scroll_throw_handler+0x78>
            *diff_x = proc->types.pointer.scroll_area.x2 - proc->types.pointer.scroll_sum.x;
 80043d0:	1a52      	subs	r2, r2, r1
 80043d2:	b295      	uxth	r5, r2
 80043d4:	b217      	sxth	r7, r2
 80043d6:	e725      	b.n	8004224 <_lv_indev_scroll_throw_handler+0xfc>
    lv_coord_t move = 0;
 80043d8:	2700      	movs	r7, #0
    while(y) {
 80043da:	2300      	movs	r3, #0
 80043dc:	e783      	b.n	80042e6 <_lv_indev_scroll_throw_handler+0x1be>
    lv_coord_t move = 0;
 80043de:	2700      	movs	r7, #0
    while(x) {
 80043e0:	2300      	movs	r3, #0
 80043e2:	e70d      	b.n	8004200 <_lv_indev_scroll_throw_handler+0xd8>
 80043e4:	00001fff 	.word	0x00001fff
 80043e8:	ffffe001 	.word	0xffffe001

080043ec <lv_indev_scroll_throw_predict>:
{
 80043ec:	0003      	movs	r3, r0
 80043ee:	b570      	push	{r4, r5, r6, lr}
    if(indev == NULL) return 0;
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d01b      	beq.n	800442c <lv_indev_scroll_throw_predict+0x40>
    switch(dir) {
 80043f4:	2903      	cmp	r1, #3
 80043f6:	d016      	beq.n	8004426 <lv_indev_scroll_throw_predict+0x3a>
 80043f8:	2400      	movs	r4, #0
 80043fa:	290c      	cmp	r1, #12
 80043fc:	d111      	bne.n	8004422 <lv_indev_scroll_throw_predict+0x36>
            v = indev->proc.types.pointer.scroll_throw_vect_ori.y;
 80043fe:	2222      	movs	r2, #34	; 0x22
 8004400:	5e80      	ldrsh	r0, [r0, r2]
    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	7d5b      	ldrb	r3, [r3, #21]
    while(v) {
 8004406:	2800      	cmp	r0, #0
 8004408:	d010      	beq.n	800442c <lv_indev_scroll_throw_predict+0x40>
        v = v * (100 - scroll_throw) / 100;
 800440a:	2564      	movs	r5, #100	; 0x64
    lv_coord_t sum = 0;
 800440c:	2400      	movs	r4, #0
        v = v * (100 - scroll_throw) / 100;
 800440e:	1aed      	subs	r5, r5, r3
        sum += v;
 8004410:	1824      	adds	r4, r4, r0
        v = v * (100 - scroll_throw) / 100;
 8004412:	2164      	movs	r1, #100	; 0x64
 8004414:	4368      	muls	r0, r5
 8004416:	f7fb ff11 	bl	800023c <__divsi3>
 800441a:	b200      	sxth	r0, r0
        sum += v;
 800441c:	b224      	sxth	r4, r4
    while(v) {
 800441e:	2800      	cmp	r0, #0
 8004420:	d1f6      	bne.n	8004410 <lv_indev_scroll_throw_predict+0x24>
}
 8004422:	0020      	movs	r0, r4
 8004424:	bd70      	pop	{r4, r5, r6, pc}
            v = indev->proc.types.pointer.scroll_throw_vect_ori.x;
 8004426:	2220      	movs	r2, #32
 8004428:	5e80      	ldrsh	r0, [r0, r2]
            break;
 800442a:	e7ea      	b.n	8004402 <lv_indev_scroll_throw_predict+0x16>
    if(indev == NULL) return 0;
 800442c:	2400      	movs	r4, #0
 800442e:	e7f8      	b.n	8004422 <lv_indev_scroll_throw_predict+0x36>

08004430 <lv_obj_draw>:
        obj->spec_attr = NULL;
    }
}

static void lv_obj_draw(lv_event_t * e)
{
 8004430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004432:	46d6      	mov	lr, sl
 8004434:	4646      	mov	r6, r8
 8004436:	464f      	mov	r7, r9
 8004438:	b5c0      	push	{r6, r7, lr}
 800443a:	b0a4      	sub	sp, #144	; 0x90
 800443c:	0005      	movs	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 800443e:	f7fd fcc9 	bl	8001dd4 <lv_event_get_code>
 8004442:	0006      	movs	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8004444:	0028      	movs	r0, r5
 8004446:	f7fd fcc1 	bl	8001dcc <lv_event_get_target>
 800444a:	0004      	movs	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 800444c:	2e12      	cmp	r6, #18
 800444e:	d009      	beq.n	8004464 <lv_obj_draw+0x34>
        }

        info->res = LV_COVER_RES_COVER;

    }
    else if(code == LV_EVENT_DRAW_MAIN) {
 8004450:	2e15      	cmp	r6, #21
 8004452:	d019      	beq.n	8004488 <lv_obj_draw+0x58>

        }
#endif
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
    }
    else if(code == LV_EVENT_DRAW_POST) {
 8004454:	2e18      	cmp	r6, #24
 8004456:	d06a      	beq.n	800452e <lv_obj_draw+0xfe>

            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
        }
    }
}
 8004458:	b024      	add	sp, #144	; 0x90
 800445a:	bce0      	pop	{r5, r6, r7}
 800445c:	46ba      	mov	sl, r7
 800445e:	46b1      	mov	r9, r6
 8004460:	46a8      	mov	r8, r5
 8004462:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8004464:	0028      	movs	r0, r5
 8004466:	f7fd fcb9 	bl	8001ddc <lv_event_get_param>
        if(info->res == LV_COVER_RES_MASKED) return;
 800446a:	7803      	ldrb	r3, [r0, #0]
        lv_cover_check_info_t * info = lv_event_get_param(e);
 800446c:	0005      	movs	r5, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 800446e:	2b02      	cmp	r3, #2
 8004470:	d0f2      	beq.n	8004458 <lv_obj_draw+0x28>
    return (lv_coord_t)v.num;
}

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8004472:	2217      	movs	r2, #23
 8004474:	2100      	movs	r1, #0
 8004476:	0020      	movs	r0, r4
 8004478:	f005 f93a 	bl	80096f0 <lv_obj_get_style_prop>
 800447c:	1e06      	subs	r6, r0, #0
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 800447e:	d100      	bne.n	8004482 <lv_obj_draw+0x52>
 8004480:	e100      	b.n	8004684 <lv_obj_draw+0x254>
            info->res = LV_COVER_RES_MASKED;
 8004482:	2302      	movs	r3, #2
 8004484:	702b      	strb	r3, [r5, #0]
            return;
 8004486:	e7e7      	b.n	8004458 <lv_obj_draw+0x28>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8004488:	0028      	movs	r0, r5
 800448a:	f7fd fd05 	bl	8001e98 <lv_event_get_draw_ctx>
        lv_draw_rect_dsc_init(&draw_dsc);
 800448e:	ad04      	add	r5, sp, #16
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8004490:	0007      	movs	r7, r0
        lv_draw_rect_dsc_init(&draw_dsc);
 8004492:	0028      	movs	r0, r5
 8004494:	f008 fd8e 	bl	800cfb4 <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8004498:	2234      	movs	r2, #52	; 0x34
 800449a:	2100      	movs	r1, #0
 800449c:	0020      	movs	r0, r4
 800449e:	f005 f927 	bl	80096f0 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 80044a2:	2800      	cmp	r0, #0
 80044a4:	d004      	beq.n	80044b0 <lv_obj_draw+0x80>
            draw_dsc.border_post = 1;
 80044a6:	2223      	movs	r2, #35	; 0x23
 80044a8:	2101      	movs	r1, #1
 80044aa:	5cab      	ldrb	r3, [r5, r2]
 80044ac:	430b      	orrs	r3, r1
 80044ae:	54ab      	strb	r3, [r5, r2]
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 80044b0:	002a      	movs	r2, r5
 80044b2:	2100      	movs	r1, #0
 80044b4:	0020      	movs	r0, r4
 80044b6:	f000 ff55 	bl	8005364 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80044ba:	2268      	movs	r2, #104	; 0x68
 80044bc:	2100      	movs	r1, #0
 80044be:	0020      	movs	r0, r4
 80044c0:	f005 f916 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80044c4:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80044c6:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80044c8:	2269      	movs	r2, #105	; 0x69
 80044ca:	0020      	movs	r0, r4
 80044cc:	f005 f910 	bl	80096f0 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 80044d0:	2312      	movs	r3, #18
 80044d2:	5ee2      	ldrsh	r2, [r4, r3]
    dest->x2 = src->x2;
 80044d4:	2114      	movs	r1, #20
 80044d6:	5e63      	ldrsh	r3, [r4, r1]
        coords.y1 -= h;
 80044d8:	b280      	uxth	r0, r0
 80044da:	4698      	mov	r8, r3
    dest->y2 = src->y2;
 80044dc:	2116      	movs	r1, #22
 80044de:	5e63      	ldrsh	r3, [r4, r1]
        coords.x1 -= w;
 80044e0:	8a21      	ldrh	r1, [r4, #16]
 80044e2:	469c      	mov	ip, r3
 80044e4:	b2b3      	uxth	r3, r6
        coords.y1 -= h;
 80044e6:	1a12      	subs	r2, r2, r0
        coords.x1 -= w;
 80044e8:	ae02      	add	r6, sp, #8
        coords.y2 += h;
 80044ea:	4460      	add	r0, ip
        coords.x1 -= w;
 80044ec:	1ac9      	subs	r1, r1, r3
        coords.x2 += w;
 80044ee:	4443      	add	r3, r8
        coords.x1 -= w;
 80044f0:	8031      	strh	r1, [r6, #0]
        coords.x2 += w;
 80044f2:	80b3      	strh	r3, [r6, #4]
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80044f4:	0039      	movs	r1, r7
        coords.y1 -= h;
 80044f6:	8072      	strh	r2, [r6, #2]
        coords.y2 += h;
 80044f8:	80f0      	strh	r0, [r6, #6]
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80044fa:	a812      	add	r0, sp, #72	; 0x48
 80044fc:	f001 f92e 	bl	800575c <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 8004500:	4b98      	ldr	r3, [pc, #608]	; (8004764 <lv_obj_draw+0x334>)
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004502:	211a      	movs	r1, #26
        part_dsc.class_p = MY_CLASS;
 8004504:	9313      	str	r3, [sp, #76]	; 0x4c
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 8004506:	2300      	movs	r3, #0
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004508:	aa12      	add	r2, sp, #72	; 0x48
 800450a:	0020      	movs	r0, r4
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 800450c:	9314      	str	r3, [sp, #80]	; 0x50
        part_dsc.rect_dsc = &draw_dsc;
 800450e:	9516      	str	r5, [sp, #88]	; 0x58
        part_dsc.draw_area = &coords;
 8004510:	9615      	str	r6, [sp, #84]	; 0x54
        part_dsc.part = LV_PART_MAIN;
 8004512:	931f      	str	r3, [sp, #124]	; 0x7c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004514:	f7fd fc22 	bl	8001d5c <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8004518:	0032      	movs	r2, r6
 800451a:	0029      	movs	r1, r5
 800451c:	0038      	movs	r0, r7
            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 800451e:	f008 fd6f 	bl	800d000 <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8004522:	211b      	movs	r1, #27
 8004524:	0020      	movs	r0, r4
 8004526:	aa12      	add	r2, sp, #72	; 0x48
 8004528:	f7fd fc18 	bl	8001d5c <lv_event_send>
 800452c:	e794      	b.n	8004458 <lv_obj_draw+0x28>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800452e:	0028      	movs	r0, r5
 8004530:	f7fd fcb2 	bl	8001e98 <lv_event_get_draw_ctx>
static void draw_scrollbar(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx)
{

    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8004534:	4669      	mov	r1, sp
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8004536:	0006      	movs	r6, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8004538:	aa02      	add	r2, sp, #8
 800453a:	0020      	movs	r0, r4
 800453c:	f004 fd3c 	bl	8008fb8 <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8004540:	4668      	mov	r0, sp
 8004542:	f00c fef3 	bl	801132c <lv_area_get_size>
 8004546:	2800      	cmp	r0, #0
 8004548:	d104      	bne.n	8004554 <lv_obj_draw+0x124>
 800454a:	a802      	add	r0, sp, #8
 800454c:	f00c feee 	bl	801132c <lv_area_get_size>
 8004550:	2800      	cmp	r0, #0
 8004552:	d047      	beq.n	80045e4 <lv_obj_draw+0x1b4>
 * @param dsc the draw descriptor to initialize
 * @return LV_RES_OK: the scrollbar is visible; LV_RES_INV: the scrollbar is not visible
 */
static lv_res_t scrollbar_init_draw_dsc(lv_obj_t * obj, lv_draw_rect_dsc_t * dsc)
{
    lv_draw_rect_dsc_init(dsc);
 8004554:	ad04      	add	r5, sp, #16
 8004556:	0028      	movs	r0, r5
 8004558:	f008 fd2c 	bl	800cfb4 <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800455c:	2180      	movs	r1, #128	; 0x80
 800455e:	2221      	movs	r2, #33	; 0x21
 8004560:	0020      	movs	r0, r4
 8004562:	0249      	lsls	r1, r1, #9
 8004564:	f005 f8c4 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004568:	b2c0      	uxtb	r0, r0
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 800456a:	70e8      	strb	r0, [r5, #3]
    if(dsc->bg_opa > LV_OPA_MIN) {
 800456c:	2802      	cmp	r0, #2
 800456e:	d900      	bls.n	8004572 <lv_obj_draw+0x142>
 8004570:	e0e6      	b.n	8004740 <lv_obj_draw+0x310>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8004572:	2180      	movs	r1, #128	; 0x80
 8004574:	2231      	movs	r2, #49	; 0x31
 8004576:	0020      	movs	r0, r4
 8004578:	0249      	lsls	r1, r1, #9
 800457a:	f005 f8b9 	bl	80096f0 <lv_obj_get_style_prop>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
    }

    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 800457e:	2722      	movs	r7, #34	; 0x22
    return (lv_opa_t)v.num;
 8004580:	b2c3      	uxtb	r3, r0
 8004582:	55eb      	strb	r3, [r5, r7]
    if(dsc->border_opa > LV_OPA_MIN) {
 8004584:	2b02      	cmp	r3, #2
 8004586:	d900      	bls.n	800458a <lv_obj_draw+0x15a>
 8004588:	e0c9      	b.n	800471e <lv_obj_draw+0x2ee>
    }
    else {
        return LV_RES_INV;
    }
#else
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP) return LV_RES_OK;
 800458a:	78e8      	ldrb	r0, [r5, #3]
 800458c:	4303      	orrs	r3, r0
 800458e:	d029      	beq.n	80045e4 <lv_obj_draw+0x1b4>
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8004590:	a812      	add	r0, sp, #72	; 0x48
 8004592:	0031      	movs	r1, r6
 8004594:	f001 f8e2 	bl	800575c <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 8004598:	4b72      	ldr	r3, [pc, #456]	; (8004764 <lv_obj_draw+0x334>)
    if(lv_area_get_size(&hor_area) > 0) {
 800459a:	4668      	mov	r0, sp
    part_dsc.class_p = MY_CLASS;
 800459c:	9313      	str	r3, [sp, #76]	; 0x4c
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 800459e:	2302      	movs	r3, #2
 80045a0:	9314      	str	r3, [sp, #80]	; 0x50
    part_dsc.part = LV_PART_SCROLLBAR;
 80045a2:	2380      	movs	r3, #128	; 0x80
 80045a4:	025b      	lsls	r3, r3, #9
    part_dsc.rect_dsc = &draw_dsc;
 80045a6:	9516      	str	r5, [sp, #88]	; 0x58
    part_dsc.part = LV_PART_SCROLLBAR;
 80045a8:	931f      	str	r3, [sp, #124]	; 0x7c
    if(lv_area_get_size(&hor_area) > 0) {
 80045aa:	f00c febf 	bl	801132c <lv_area_get_size>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	d000      	beq.n	80045b4 <lv_obj_draw+0x184>
 80045b2:	e0a2      	b.n	80046fa <lv_obj_draw+0x2ca>
    if(lv_area_get_size(&ver_area) > 0) {
 80045b4:	a802      	add	r0, sp, #8
 80045b6:	f00c feb9 	bl	801132c <lv_area_get_size>
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d012      	beq.n	80045e4 <lv_obj_draw+0x1b4>
        part_dsc.draw_area = &ver_area;
 80045be:	ab02      	add	r3, sp, #8
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80045c0:	211a      	movs	r1, #26
 80045c2:	aa12      	add	r2, sp, #72	; 0x48
 80045c4:	0020      	movs	r0, r4
        part_dsc.draw_area = &ver_area;
 80045c6:	9315      	str	r3, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80045c8:	f7fd fbc8 	bl	8001d5c <lv_event_send>
        part_dsc.draw_area = &ver_area;
 80045cc:	ab02      	add	r3, sp, #8
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 80045ce:	001a      	movs	r2, r3
 80045d0:	0029      	movs	r1, r5
 80045d2:	0030      	movs	r0, r6
        part_dsc.draw_area = &ver_area;
 80045d4:	9315      	str	r3, [sp, #84]	; 0x54
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 80045d6:	f008 fd13 	bl	800d000 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80045da:	211b      	movs	r1, #27
 80045dc:	0020      	movs	r0, r4
 80045de:	aa12      	add	r2, sp, #72	; 0x48
 80045e0:	f7fd fbbc 	bl	8001d5c <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 80045e4:	2234      	movs	r2, #52	; 0x34
 80045e6:	2100      	movs	r1, #0
 80045e8:	0020      	movs	r0, r4
 80045ea:	f005 f881 	bl	80096f0 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 80045ee:	2800      	cmp	r0, #0
 80045f0:	d100      	bne.n	80045f4 <lv_obj_draw+0x1c4>
 80045f2:	e731      	b.n	8004458 <lv_obj_draw+0x28>
            lv_draw_rect_dsc_init(&draw_dsc);
 80045f4:	ad04      	add	r5, sp, #16
 80045f6:	0028      	movs	r0, r5
 80045f8:	f008 fcdc 	bl	800cfb4 <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 80045fc:	2700      	movs	r7, #0
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 80045fe:	232a      	movs	r3, #42	; 0x2a
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8004600:	70ef      	strb	r7, [r5, #3]
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 8004602:	76af      	strb	r7, [r5, #26]
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 8004604:	54ef      	strb	r7, [r5, r3]
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8004606:	330c      	adds	r3, #12
 8004608:	54ef      	strb	r7, [r5, r3]
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 800460a:	002a      	movs	r2, r5
 800460c:	2100      	movs	r1, #0
 800460e:	0020      	movs	r0, r4
 8004610:	f000 fea8 	bl	8005364 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8004614:	2268      	movs	r2, #104	; 0x68
 8004616:	2100      	movs	r1, #0
 8004618:	0020      	movs	r0, r4
 800461a:	f005 f869 	bl	80096f0 <lv_obj_get_style_prop>
 800461e:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8004620:	2269      	movs	r2, #105	; 0x69
 8004622:	2100      	movs	r1, #0
 8004624:	0020      	movs	r0, r4
 8004626:	f005 f863 	bl	80096f0 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 800462a:	2312      	movs	r3, #18
 800462c:	5ee2      	ldrsh	r2, [r4, r3]
            coords.x1 -= w;
 800462e:	8a21      	ldrh	r1, [r4, #16]
 8004630:	4692      	mov	sl, r2
    dest->x2 = src->x2;
 8004632:	2214      	movs	r2, #20
 8004634:	5ea3      	ldrsh	r3, [r4, r2]
            coords.y1 -= h;
 8004636:	b280      	uxth	r0, r0
 8004638:	4699      	mov	r9, r3
    dest->y2 = src->y2;
 800463a:	2216      	movs	r2, #22
 800463c:	5ea3      	ldrsh	r3, [r4, r2]
            coords.x1 -= w;
 800463e:	466a      	mov	r2, sp
 8004640:	469c      	mov	ip, r3
 8004642:	4643      	mov	r3, r8
 8004644:	b29b      	uxth	r3, r3
 8004646:	1ac9      	subs	r1, r1, r3
            coords.x2 += w;
 8004648:	444b      	add	r3, r9
 800464a:	8193      	strh	r3, [r2, #12]
            coords.y1 -= h;
 800464c:	4653      	mov	r3, sl
            coords.x1 -= w;
 800464e:	8111      	strh	r1, [r2, #8]
            coords.y1 -= h;
 8004650:	1a1a      	subs	r2, r3, r0
 8004652:	466b      	mov	r3, sp
            coords.y2 += h;
 8004654:	4460      	add	r0, ip
            coords.y1 -= h;
 8004656:	815a      	strh	r2, [r3, #10]
            coords.y2 += h;
 8004658:	81d8      	strh	r0, [r3, #14]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 800465a:	0031      	movs	r1, r6
 800465c:	a812      	add	r0, sp, #72	; 0x48
 800465e:	f001 f87d 	bl	800575c <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 8004662:	4b40      	ldr	r3, [pc, #256]	; (8004764 <lv_obj_draw+0x334>)
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004664:	211a      	movs	r1, #26
            part_dsc.class_p = MY_CLASS;
 8004666:	9313      	str	r3, [sp, #76]	; 0x4c
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 8004668:	2301      	movs	r3, #1
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 800466a:	aa12      	add	r2, sp, #72	; 0x48
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 800466c:	9314      	str	r3, [sp, #80]	; 0x50
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 800466e:	0020      	movs	r0, r4
            part_dsc.draw_area = &coords;
 8004670:	ab02      	add	r3, sp, #8
            part_dsc.rect_dsc = &draw_dsc;
 8004672:	9516      	str	r5, [sp, #88]	; 0x58
            part_dsc.draw_area = &coords;
 8004674:	9315      	str	r3, [sp, #84]	; 0x54
            part_dsc.part = LV_PART_MAIN;
 8004676:	971f      	str	r7, [sp, #124]	; 0x7c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004678:	f7fd fb70 	bl	8001d5c <lv_event_send>
            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 800467c:	0029      	movs	r1, r5
 800467e:	0030      	movs	r0, r6
 8004680:	aa02      	add	r2, sp, #8
 8004682:	e74c      	b.n	800451e <lv_obj_draw+0xee>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8004684:	220b      	movs	r2, #11
 8004686:	2100      	movs	r1, #0
 8004688:	0020      	movs	r0, r4
 800468a:	f005 f831 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800468e:	2268      	movs	r2, #104	; 0x68
 8004690:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 8004692:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8004694:	0020      	movs	r0, r4
 8004696:	f005 f82b 	bl	80096f0 <lv_obj_get_style_prop>
 800469a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 800469c:	2269      	movs	r2, #105	; 0x69
 800469e:	2100      	movs	r1, #0
 80046a0:	0020      	movs	r0, r4
 80046a2:	f005 f825 	bl	80096f0 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 80046a6:	2312      	movs	r3, #18
 80046a8:	5ee2      	ldrsh	r2, [r4, r3]
        coords.x1 -= w;
 80046aa:	a912      	add	r1, sp, #72	; 0x48
 80046ac:	4692      	mov	sl, r2
    dest->x2 = src->x2;
 80046ae:	2214      	movs	r2, #20
 80046b0:	5ea3      	ldrsh	r3, [r4, r2]
        coords.y1 -= h;
 80046b2:	b280      	uxth	r0, r0
 80046b4:	4699      	mov	r9, r3
    dest->y2 = src->y2;
 80046b6:	2216      	movs	r2, #22
 80046b8:	5ea3      	ldrsh	r3, [r4, r2]
        coords.x1 -= w;
 80046ba:	8a22      	ldrh	r2, [r4, #16]
 80046bc:	469c      	mov	ip, r3
 80046be:	4643      	mov	r3, r8
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	1ad2      	subs	r2, r2, r3
        coords.x2 += w;
 80046c4:	444b      	add	r3, r9
 80046c6:	808b      	strh	r3, [r1, #4]
        coords.y1 -= h;
 80046c8:	4653      	mov	r3, sl
        coords.x1 -= w;
 80046ca:	800a      	strh	r2, [r1, #0]
        coords.y1 -= h;
 80046cc:	1a1a      	subs	r2, r3, r0
        coords.y2 += h;
 80046ce:	4460      	add	r0, ip
        coords.y1 -= h;
 80046d0:	804a      	strh	r2, [r1, #2]
        coords.y2 += h;
 80046d2:	80c8      	strh	r0, [r1, #6]
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 80046d4:	003a      	movs	r2, r7
 80046d6:	6868      	ldr	r0, [r5, #4]
 80046d8:	f00c ffdc 	bl	8011694 <_lv_area_is_in>
 80046dc:	2800      	cmp	r0, #0
 80046de:	d102      	bne.n	80046e6 <lv_obj_draw+0x2b6>
            info->res = LV_COVER_RES_NOT_COVER;
 80046e0:	2301      	movs	r3, #1
 80046e2:	702b      	strb	r3, [r5, #0]
            return;
 80046e4:	e6b8      	b.n	8004458 <lv_obj_draw+0x28>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80046e6:	2221      	movs	r2, #33	; 0x21
 80046e8:	2100      	movs	r1, #0
 80046ea:	0020      	movs	r0, r4
 80046ec:	f005 f800 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80046f0:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 80046f2:	28fc      	cmp	r0, #252	; 0xfc
 80046f4:	d9f4      	bls.n	80046e0 <lv_obj_draw+0x2b0>
        info->res = LV_COVER_RES_COVER;
 80046f6:	702e      	strb	r6, [r5, #0]
 80046f8:	e6ae      	b.n	8004458 <lv_obj_draw+0x28>
        part_dsc.draw_area = &hor_area;
 80046fa:	466b      	mov	r3, sp
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80046fc:	aa12      	add	r2, sp, #72	; 0x48
 80046fe:	211a      	movs	r1, #26
 8004700:	0020      	movs	r0, r4
        part_dsc.draw_area = &hor_area;
 8004702:	9315      	str	r3, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8004704:	f7fd fb2a 	bl	8001d5c <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 8004708:	466a      	mov	r2, sp
 800470a:	0029      	movs	r1, r5
 800470c:	0030      	movs	r0, r6
 800470e:	f008 fc77 	bl	800d000 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8004712:	211b      	movs	r1, #27
 8004714:	0020      	movs	r0, r4
 8004716:	aa12      	add	r2, sp, #72	; 0x48
 8004718:	f7fd fb20 	bl	8001d5c <lv_event_send>
 800471c:	e74a      	b.n	80045b4 <lv_obj_draw+0x184>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800471e:	2180      	movs	r1, #128	; 0x80
 8004720:	2232      	movs	r2, #50	; 0x32
 8004722:	0020      	movs	r0, r4
 8004724:	0249      	lsls	r1, r1, #9
 8004726:	f004 ffe3 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800472a:	b200      	sxth	r0, r0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 800472c:	8428      	strh	r0, [r5, #32]
        if(dsc->border_width > 0) {
 800472e:	2800      	cmp	r0, #0
 8004730:	dc0e      	bgt.n	8004750 <lv_obj_draw+0x320>
            dsc->border_opa = LV_OPA_TRANSP;
 8004732:	2300      	movs	r3, #0
 8004734:	55eb      	strb	r3, [r5, r7]
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP) return LV_RES_OK;
 8004736:	78eb      	ldrb	r3, [r5, #3]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d100      	bne.n	800473e <lv_obj_draw+0x30e>
 800473c:	e752      	b.n	80045e4 <lv_obj_draw+0x1b4>
 800473e:	e727      	b.n	8004590 <lv_obj_draw+0x160>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8004740:	2180      	movs	r1, #128	; 0x80
 8004742:	2220      	movs	r2, #32
 8004744:	0020      	movs	r0, r4
 8004746:	0249      	lsls	r1, r1, #9
 8004748:	f004 ffd2 	bl	80096f0 <lv_obj_get_style_prop>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 800474c:	80a8      	strh	r0, [r5, #4]
 800474e:	e710      	b.n	8004572 <lv_obj_draw+0x142>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8004750:	2180      	movs	r1, #128	; 0x80
 8004752:	2230      	movs	r2, #48	; 0x30
 8004754:	0020      	movs	r0, r4
 8004756:	0249      	lsls	r1, r1, #9
 8004758:	f004 ffca 	bl	80096f0 <lv_obj_get_style_prop>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 800475c:	83e8      	strh	r0, [r5, #30]
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP) return LV_RES_OK;
 800475e:	5deb      	ldrb	r3, [r5, r7]
 8004760:	e713      	b.n	800458a <lv_obj_draw+0x15a>
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	0801b748 	.word	0x0801b748

08004768 <lv_obj_destructor>:
{
 8004768:	b510      	push	{r4, lr}
 800476a:	000c      	movs	r4, r1
    _lv_event_mark_deleted(obj);
 800476c:	0008      	movs	r0, r1
 800476e:	f7fd fb41 	bl	8001df4 <_lv_event_mark_deleted>
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 8004772:	2000      	movs	r0, #0
 8004774:	f004 ffb6 	bl	80096e4 <lv_obj_enable_style_refresh>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8004778:	2100      	movs	r1, #0
 800477a:	4a16      	ldr	r2, [pc, #88]	; (80047d4 <lv_obj_destructor+0x6c>)
 800477c:	0020      	movs	r0, r4
 800477e:	f005 fa93 	bl	8009ca8 <lv_obj_remove_style>
    lv_obj_enable_style_refresh(true);
 8004782:	2001      	movs	r0, #1
 8004784:	f004 ffae 	bl	80096e4 <lv_obj_enable_style_refresh>
    lv_anim_del(obj, NULL);
 8004788:	2100      	movs	r1, #0
 800478a:	0020      	movs	r0, r4
 800478c:	f00c fc1c 	bl	8010fc8 <lv_anim_del>
    if(obj->spec_attr) return obj->spec_attr->group_p;
 8004790:	68a3      	ldr	r3, [r4, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d01d      	beq.n	80047d2 <lv_obj_destructor+0x6a>
    if(group) lv_group_remove_obj(obj);
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	2a00      	cmp	r2, #0
 800479a:	d005      	beq.n	80047a8 <lv_obj_destructor+0x40>
 800479c:	0020      	movs	r0, r4
 800479e:	f7fd fe13 	bl	80023c8 <lv_group_remove_obj>
    if(obj->spec_attr) {
 80047a2:	68a3      	ldr	r3, [r4, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d014      	beq.n	80047d2 <lv_obj_destructor+0x6a>
        if(obj->spec_attr->children) {
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	2800      	cmp	r0, #0
 80047ac:	d004      	beq.n	80047b8 <lv_obj_destructor+0x50>
            lv_mem_free(obj->spec_attr->children);
 80047ae:	f00d fc1f 	bl	8011ff0 <lv_mem_free>
            obj->spec_attr->children = NULL;
 80047b2:	2200      	movs	r2, #0
 80047b4:	68a3      	ldr	r3, [r4, #8]
 80047b6:	601a      	str	r2, [r3, #0]
        if(obj->spec_attr->event_dsc) {
 80047b8:	68d8      	ldr	r0, [r3, #12]
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d004      	beq.n	80047c8 <lv_obj_destructor+0x60>
            lv_mem_free(obj->spec_attr->event_dsc);
 80047be:	f00d fc17 	bl	8011ff0 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 80047c2:	2200      	movs	r2, #0
 80047c4:	68a3      	ldr	r3, [r4, #8]
 80047c6:	60da      	str	r2, [r3, #12]
        lv_mem_free(obj->spec_attr);
 80047c8:	0018      	movs	r0, r3
 80047ca:	f00d fc11 	bl	8011ff0 <lv_mem_free>
        obj->spec_attr = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60a3      	str	r3, [r4, #8]
}
 80047d2:	bd10      	pop	{r4, pc}
 80047d4:	000fffff 	.word	0x000fffff

080047d8 <lv_obj_constructor>:
{
 80047d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047da:	46c6      	mov	lr, r8
    lv_obj_t * parent = obj->parent;
 80047dc:	684f      	ldr	r7, [r1, #4]
{
 80047de:	000c      	movs	r4, r1
 80047e0:	b500      	push	{lr}
    if(parent) {
 80047e2:	2f00      	cmp	r7, #0
 80047e4:	d025      	beq.n	8004832 <lv_obj_constructor+0x5a>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 80047e6:	0038      	movs	r0, r7
 80047e8:	f003 ff90 	bl	800870c <lv_obj_get_scroll_left>
 80047ec:	4680      	mov	r8, r0
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 80047ee:	0038      	movs	r0, r7
 80047f0:	f003 fa74 	bl	8007cdc <lv_obj_get_scroll_top>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80047f4:	2210      	movs	r2, #16
 80047f6:	0005      	movs	r5, r0
 80047f8:	2100      	movs	r1, #0
 80047fa:	0038      	movs	r0, r7
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 80047fc:	8a7e      	ldrh	r6, [r7, #18]
 80047fe:	f004 ff77 	bl	80096f0 <lv_obj_get_style_prop>
 8004802:	1836      	adds	r6, r6, r0
 8004804:	1b73      	subs	r3, r6, r5
 8004806:	b29b      	uxth	r3, r3
 8004808:	8263      	strh	r3, [r4, #18]
        obj->coords.y2 = obj->coords.y1 - 1;
 800480a:	3b01      	subs	r3, #1
 800480c:	82e3      	strh	r3, [r4, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800480e:	2212      	movs	r2, #18
 8004810:	2100      	movs	r1, #0
 8004812:	0038      	movs	r0, r7
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8004814:	8a3d      	ldrh	r5, [r7, #16]
 8004816:	f004 ff6b 	bl	80096f0 <lv_obj_get_style_prop>
 800481a:	4643      	mov	r3, r8
 800481c:	1828      	adds	r0, r5, r0
 800481e:	1ac0      	subs	r0, r0, r3
 8004820:	b280      	uxth	r0, r0
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <lv_obj_constructor+0x60>)
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8004824:	8220      	strh	r0, [r4, #16]
        obj->coords.x2  = obj->coords.x1 - 1;
 8004826:	3801      	subs	r0, #1
 8004828:	82a0      	strh	r0, [r4, #20]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 800482a:	61a3      	str	r3, [r4, #24]
}
 800482c:	bc80      	pop	{r7}
 800482e:	46b8      	mov	r8, r7
 8004830:	bdf0      	pop	{r4, r5, r6, r7, pc}
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 8004832:	4b02      	ldr	r3, [pc, #8]	; (800483c <lv_obj_constructor+0x64>)
 8004834:	618b      	str	r3, [r1, #24]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8004836:	e7f9      	b.n	800482c <lv_obj_constructor+0x54>
 8004838:	0000bb76 	.word	0x0000bb76
 800483c:	00001876 	.word	0x00001876

08004840 <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 8004840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004842:	4657      	mov	r7, sl
 8004844:	46de      	mov	lr, fp
 8004846:	464e      	mov	r6, r9
 8004848:	4645      	mov	r5, r8
 800484a:	b5e0      	push	{r5, r6, r7, lr}
 800484c:	b08d      	sub	sp, #52	; 0x34
 800484e:	9107      	str	r1, [sp, #28]
    if(obj->state == new_state) return;
 8004850:	8b83      	ldrh	r3, [r0, #28]
{
 8004852:	4682      	mov	sl, r0
 8004854:	000a      	movs	r2, r1
    if(obj->state == new_state) return;
 8004856:	930a      	str	r3, [sp, #40]	; 0x28
 8004858:	428b      	cmp	r3, r1
 800485a:	d006      	beq.n	800486a <lv_obj_set_state+0x2a>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
    obj->state = new_state;
 800485c:	8381      	strh	r1, [r0, #28]

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 800485e:	0019      	movs	r1, r3
 8004860:	f005 febc 	bl	800a5dc <_lv_obj_style_state_compare>
 8004864:	9008      	str	r0, [sp, #32]
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 8004866:	2800      	cmp	r0, #0
 8004868:	d106      	bne.n	8004878 <lv_obj_set_state+0x38>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
        lv_obj_invalidate(obj);
        lv_obj_refresh_ext_draw_size(obj);
    }
}
 800486a:	b00d      	add	sp, #52	; 0x34
 800486c:	bcf0      	pop	{r4, r5, r6, r7}
 800486e:	46bb      	mov	fp, r7
 8004870:	46b2      	mov	sl, r6
 8004872:	46a9      	mov	r9, r5
 8004874:	46a0      	mov	r8, r4
 8004876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8004878:	2080      	movs	r0, #128	; 0x80
 800487a:	0080      	lsls	r0, r0, #2
 800487c:	f00d fc14 	bl	80120a8 <lv_mem_buf_get>
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8004880:	2180      	movs	r1, #128	; 0x80
 8004882:	0089      	lsls	r1, r1, #2
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8004884:	9004      	str	r0, [sp, #16]
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8004886:	f00d ff13 	bl	80126b0 <lv_memset_00>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 800488a:	4653      	mov	r3, sl
 800488c:	8bdb      	ldrh	r3, [r3, #30]
 800488e:	05db      	lsls	r3, r3, #23
 8004890:	0e9b      	lsrs	r3, r3, #26
 8004892:	d060      	beq.n	8004956 <lv_obj_set_state+0x116>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8004894:	9b07      	ldr	r3, [sp, #28]
 8004896:	43db      	mvns	r3, r3
 8004898:	9306      	str	r3, [sp, #24]
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 800489a:	2300      	movs	r3, #0
    uint32_t tsi = 0;
 800489c:	469b      	mov	fp, r3
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 800489e:	9302      	str	r3, [sp, #8]
        _lv_obj_style_t * obj_style = &obj->styles[i];
 80048a0:	9b02      	ldr	r3, [sp, #8]
 80048a2:	00dc      	lsls	r4, r3, #3
 80048a4:	4653      	mov	r3, sl
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	469c      	mov	ip, r3
 80048aa:	44a4      	add	ip, r4
 80048ac:	4665      	mov	r5, ip
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 80048ae:	686b      	ldr	r3, [r5, #4]
        _lv_obj_style_t * obj_style = &obj->styles[i];
 80048b0:	9505      	str	r5, [sp, #20]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 80048b2:	0218      	lsls	r0, r3, #8
 80048b4:	0a00      	lsrs	r0, r0, #8
 80048b6:	9303      	str	r3, [sp, #12]
 80048b8:	f005 ffce 	bl	800a858 <lv_obj_style_get_selector_state>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 80048bc:	4653      	mov	r3, sl
 80048be:	68db      	ldr	r3, [r3, #12]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 80048c0:	9003      	str	r0, [sp, #12]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 80048c2:	469c      	mov	ip, r3
 80048c4:	4464      	add	r4, ip
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 80048c6:	0006      	movs	r6, r0
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 80048c8:	6860      	ldr	r0, [r4, #4]
 80048ca:	0200      	lsls	r0, r0, #8
 80048cc:	0a00      	lsrs	r0, r0, #8
 80048ce:	f005 ffc5 	bl	800a85c <lv_obj_style_get_selector_part>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 80048d2:	9b06      	ldr	r3, [sp, #24]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 80048d4:	0007      	movs	r7, r0
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 80048d6:	4233      	tst	r3, r6
 80048d8:	d11c      	bne.n	8004914 <lv_obj_set_state+0xd4>
        if(obj_style->is_trans) continue;
 80048da:	2202      	movs	r2, #2
 80048dc:	79eb      	ldrb	r3, [r5, #7]
 80048de:	421a      	tst	r2, r3
 80048e0:	d118      	bne.n	8004914 <lv_obj_set_state+0xd4>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 80048e2:	682b      	ldr	r3, [r5, #0]
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 80048e4:	4978      	ldr	r1, [pc, #480]	; (8004ac8 <lv_obj_set_state+0x288>)
 80048e6:	889a      	ldrh	r2, [r3, #4]
 80048e8:	428a      	cmp	r2, r1
 80048ea:	d048      	beq.n	800497e <lv_obj_set_state+0x13e>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 80048ec:	79dc      	ldrb	r4, [r3, #7]
 80048ee:	2c00      	cmp	r4, #0
 80048f0:	d010      	beq.n	8004914 <lv_obj_set_state+0xd4>

    if(style->prop_cnt > 1) {
 80048f2:	2c01      	cmp	r4, #1
 80048f4:	d100      	bne.n	80048f8 <lv_obj_set_state+0xb8>
 80048f6:	e0b9      	b.n	8004a6c <lv_obj_set_state+0x22c>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 80048f8:	2100      	movs	r1, #0
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80048fa:	681d      	ldr	r5, [r3, #0]
 80048fc:	00a2      	lsls	r2, r4, #2
 80048fe:	18aa      	adds	r2, r5, r2
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8004900:	8810      	ldrh	r0, [r2, #0]
 8004902:	0483      	lsls	r3, r0, #18
            if(prop_id == prop) {
 8004904:	0c9b      	lsrs	r3, r3, #18
 8004906:	2b66      	cmp	r3, #102	; 0x66
 8004908:	d100      	bne.n	800490c <lv_obj_set_state+0xcc>
 800490a:	e0bf      	b.n	8004a8c <lv_obj_set_state+0x24c>
        for(i = 0; i < style->prop_cnt; i++) {
 800490c:	3101      	adds	r1, #1
 800490e:	3202      	adds	r2, #2
 8004910:	428c      	cmp	r4, r1
 8004912:	d8f5      	bhi.n	8004900 <lv_obj_set_state+0xc0>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8004914:	4653      	mov	r3, sl
 8004916:	9a02      	ldr	r2, [sp, #8]
 8004918:	8bdb      	ldrh	r3, [r3, #30]
 800491a:	3201      	adds	r2, #1
 800491c:	05db      	lsls	r3, r3, #23
 800491e:	9202      	str	r2, [sp, #8]
 8004920:	0e9b      	lsrs	r3, r3, #26
 8004922:	4293      	cmp	r3, r2
 8004924:	d800      	bhi.n	8004928 <lv_obj_set_state+0xe8>
 8004926:	e09c      	b.n	8004a62 <lv_obj_set_state+0x222>
 8004928:	465b      	mov	r3, fp
 800492a:	2b1f      	cmp	r3, #31
 800492c:	d9b8      	bls.n	80048a0 <lv_obj_set_state+0x60>
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 800492e:	9b07      	ldr	r3, [sp, #28]
 8004930:	2500      	movs	r5, #0
 8004932:	465f      	mov	r7, fp
 8004934:	4698      	mov	r8, r3
 8004936:	9c04      	ldr	r4, [sp, #16]
 8004938:	9e0a      	ldr	r6, [sp, #40]	; 0x28
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 800493a:	6860      	ldr	r0, [r4, #4]
 800493c:	f005 ff8e 	bl	800a85c <lv_obj_style_get_selector_part>
    for(i = 0; i < tsi; i++) {
 8004940:	3501      	adds	r5, #1
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 8004942:	0001      	movs	r1, r0
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8004944:	9400      	str	r4, [sp, #0]
 8004946:	4643      	mov	r3, r8
 8004948:	0032      	movs	r2, r6
 800494a:	4650      	mov	r0, sl
 800494c:	f005 fd6e 	bl	800a42c <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 8004950:	3410      	adds	r4, #16
 8004952:	42af      	cmp	r7, r5
 8004954:	d1f1      	bne.n	800493a <lv_obj_set_state+0xfa>
    lv_mem_buf_release(ts);
 8004956:	9804      	ldr	r0, [sp, #16]
 8004958:	f00d fc4a 	bl	80121f0 <lv_mem_buf_release>
    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 800495c:	9b08      	ldr	r3, [sp, #32]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d100      	bne.n	8004964 <lv_obj_set_state+0x124>
 8004962:	e0a6      	b.n	8004ab2 <lv_obj_set_state+0x272>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 8004964:	2b03      	cmp	r3, #3
 8004966:	d100      	bne.n	800496a <lv_obj_set_state+0x12a>
 8004968:	e0a7      	b.n	8004aba <lv_obj_set_state+0x27a>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 800496a:	2b02      	cmp	r3, #2
 800496c:	d000      	beq.n	8004970 <lv_obj_set_state+0x130>
 800496e:	e77c      	b.n	800486a <lv_obj_set_state+0x2a>
        lv_obj_invalidate(obj);
 8004970:	4650      	mov	r0, sl
 8004972:	f001 fde5 	bl	8006540 <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 8004976:	4650      	mov	r0, sl
 8004978:	f000 fef8 	bl	800576c <lv_obj_refresh_ext_draw_size>
 800497c:	e775      	b.n	800486a <lv_obj_set_state+0x2a>
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 800497e:	6819      	ldr	r1, [r3, #0]
 8004980:	880a      	ldrh	r2, [r1, #0]
 8004982:	2a00      	cmp	r2, #0
 8004984:	d104      	bne.n	8004990 <lv_obj_set_state+0x150>
 8004986:	e7c5      	b.n	8004914 <lv_obj_set_state+0xd4>
 8004988:	890a      	ldrh	r2, [r1, #8]
 800498a:	3108      	adds	r1, #8
 800498c:	2a00      	cmp	r2, #0
 800498e:	d0c1      	beq.n	8004914 <lv_obj_set_state+0xd4>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8004990:	0493      	lsls	r3, r2, #18
            if(prop_id == prop) {
 8004992:	0c9b      	lsrs	r3, r3, #18
 8004994:	2b66      	cmp	r3, #102	; 0x66
 8004996:	d1f7      	bne.n	8004988 <lv_obj_set_state+0x148>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8004998:	b213      	sxth	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	dbba      	blt.n	8004914 <lv_obj_set_state+0xd4>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 800499e:	2380      	movs	r3, #128	; 0x80
 80049a0:	01db      	lsls	r3, r3, #7
 80049a2:	421a      	tst	r2, r3
 80049a4:	d000      	beq.n	80049a8 <lv_obj_set_state+0x168>
 80049a6:	e07f      	b.n	8004aa8 <lv_obj_set_state+0x268>
 80049a8:	684b      	ldr	r3, [r1, #4]
 80049aa:	4699      	mov	r9, r3
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 80049ac:	464b      	mov	r3, r9
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	881a      	ldrh	r2, [r3, #0]
 80049b2:	2a00      	cmp	r2, #0
 80049b4:	d0ae      	beq.n	8004914 <lv_obj_set_state+0xd4>
 80049b6:	2200      	movs	r2, #0
 80049b8:	4690      	mov	r8, r2
 80049ba:	465a      	mov	r2, fp
 80049bc:	2a1f      	cmp	r2, #31
 80049be:	d8a9      	bhi.n	8004914 <lv_obj_set_state+0xd4>
 80049c0:	4652      	mov	r2, sl
 80049c2:	46ba      	mov	sl, r7
 80049c4:	920b      	str	r2, [sp, #44]	; 0x2c
            for(t = 0; t < tsi; t++) {
 80049c6:	9a04      	ldr	r2, [sp, #16]
 80049c8:	2600      	movs	r6, #0
 80049ca:	1d14      	adds	r4, r2, #4
 80049cc:	465a      	mov	r2, fp
 80049ce:	4647      	mov	r7, r8
 80049d0:	2a00      	cmp	r2, #0
 80049d2:	d104      	bne.n	80049de <lv_obj_set_state+0x19e>
 80049d4:	e066      	b.n	8004aa4 <lv_obj_set_state+0x264>
 80049d6:	3601      	adds	r6, #1
 80049d8:	3410      	adds	r4, #16
 80049da:	455e      	cmp	r6, fp
 80049dc:	d025      	beq.n	8004a2a <lv_obj_set_state+0x1ea>
                lv_style_selector_t selector = ts[t].selector;
 80049de:	6825      	ldr	r5, [r4, #0]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 80049e0:	0028      	movs	r0, r5
 80049e2:	f005 ff39 	bl	800a858 <lv_obj_style_get_selector_state>
 80049e6:	4680      	mov	r8, r0
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 80049e8:	0028      	movs	r0, r5
 80049ea:	f005 ff37 	bl	800a85c <lv_obj_style_get_selector_part>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 80049ee:	464b      	mov	r3, r9
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	88a1      	ldrh	r1, [r4, #4]
 80049f4:	19da      	adds	r2, r3, r7
 80049f6:	4694      	mov	ip, r2
 80049f8:	5bda      	ldrh	r2, [r3, r7]
 80049fa:	4291      	cmp	r1, r2
 80049fc:	d1eb      	bne.n	80049d6 <lv_obj_set_state+0x196>
 80049fe:	4582      	cmp	sl, r0
 8004a00:	d1e9      	bne.n	80049d6 <lv_obj_set_state+0x196>
 8004a02:	9a03      	ldr	r2, [sp, #12]
 8004a04:	4542      	cmp	r2, r8
 8004a06:	d8e6      	bhi.n	80049d6 <lv_obj_set_state+0x196>
            if(t == tsi) {
 8004a08:	46b8      	mov	r8, r7
 8004a0a:	4667      	mov	r7, ip
 8004a0c:	455e      	cmp	r6, fp
 8004a0e:	d00e      	beq.n	8004a2e <lv_obj_set_state+0x1ee>
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8004a10:	2202      	movs	r2, #2
 8004a12:	4694      	mov	ip, r2
 8004a14:	44e0      	add	r8, ip
 8004a16:	4642      	mov	r2, r8
 8004a18:	5a9a      	ldrh	r2, [r3, r2]
 8004a1a:	2a00      	cmp	r2, #0
 8004a1c:	d002      	beq.n	8004a24 <lv_obj_set_state+0x1e4>
 8004a1e:	465a      	mov	r2, fp
 8004a20:	2a20      	cmp	r2, #32
 8004a22:	d1d0      	bne.n	80049c6 <lv_obj_set_state+0x186>
 8004a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a26:	469a      	mov	sl, r3
 8004a28:	e774      	b.n	8004914 <lv_obj_set_state+0xd4>
 8004a2a:	46b8      	mov	r8, r7
 8004a2c:	4667      	mov	r7, ip
                ts[tsi].time = tr->time;
 8004a2e:	9904      	ldr	r1, [sp, #16]
 8004a30:	465a      	mov	r2, fp
 8004a32:	468c      	mov	ip, r1
 8004a34:	4649      	mov	r1, r9
 8004a36:	0112      	lsls	r2, r2, #4
 8004a38:	6889      	ldr	r1, [r1, #8]
 8004a3a:	4462      	add	r2, ip
 8004a3c:	8011      	strh	r1, [r2, #0]
                ts[tsi].delay = tr->delay;
 8004a3e:	4649      	mov	r1, r9
 8004a40:	68c9      	ldr	r1, [r1, #12]
 8004a42:	8051      	strh	r1, [r2, #2]
                ts[tsi].path_cb = tr->path_xcb;
 8004a44:	4649      	mov	r1, r9
 8004a46:	6849      	ldr	r1, [r1, #4]
 8004a48:	60d1      	str	r1, [r2, #12]
                ts[tsi].prop = tr->props[j];
 8004a4a:	8839      	ldrh	r1, [r7, #0]
 8004a4c:	8111      	strh	r1, [r2, #8]
                ts[tsi].selector = obj_style->selector;
 8004a4e:	9905      	ldr	r1, [sp, #20]
 8004a50:	6849      	ldr	r1, [r1, #4]
 8004a52:	9109      	str	r1, [sp, #36]	; 0x24
 8004a54:	0209      	lsls	r1, r1, #8
 8004a56:	0a09      	lsrs	r1, r1, #8
 8004a58:	6051      	str	r1, [r2, #4]
                tsi++;
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	4694      	mov	ip, r2
 8004a5e:	44e3      	add	fp, ip
 8004a60:	e7d6      	b.n	8004a10 <lv_obj_set_state+0x1d0>
    for(i = 0; i < tsi; i++) {
 8004a62:	465b      	mov	r3, fp
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d000      	beq.n	8004a6a <lv_obj_set_state+0x22a>
 8004a68:	e761      	b.n	800492e <lv_obj_set_state+0xee>
 8004a6a:	e774      	b.n	8004956 <lv_obj_set_state+0x116>
                }
                return LV_STYLE_RES_FOUND;
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8004a6c:	0491      	lsls	r1, r2, #18
 8004a6e:	0c89      	lsrs	r1, r1, #18
 8004a70:	2966      	cmp	r1, #102	; 0x66
 8004a72:	d000      	beq.n	8004a76 <lv_obj_set_state+0x236>
 8004a74:	e74e      	b.n	8004914 <lv_obj_set_state+0xd4>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8004a76:	b211      	sxth	r1, r2
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	da00      	bge.n	8004a7e <lv_obj_set_state+0x23e>
 8004a7c:	e74a      	b.n	8004914 <lv_obj_set_state+0xd4>
            return LV_STYLE_RES_INHERIT;
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8004a7e:	2180      	movs	r1, #128	; 0x80
 8004a80:	01c9      	lsls	r1, r1, #7
 8004a82:	420a      	tst	r2, r1
 8004a84:	d110      	bne.n	8004aa8 <lv_obj_set_state+0x268>
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4699      	mov	r9, r3
 8004a8a:	e78f      	b.n	80049ac <lv_obj_set_state+0x16c>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8004a8c:	b203      	sxth	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	da00      	bge.n	8004a94 <lv_obj_set_state+0x254>
 8004a92:	e73f      	b.n	8004914 <lv_obj_set_state+0xd4>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	01db      	lsls	r3, r3, #7
 8004a98:	4218      	tst	r0, r3
 8004a9a:	d105      	bne.n	8004aa8 <lv_obj_set_state+0x268>
                    *value = values[i];
 8004a9c:	0089      	lsls	r1, r1, #2
 8004a9e:	594b      	ldr	r3, [r1, r5]
 8004aa0:	4699      	mov	r9, r3
 8004aa2:	e783      	b.n	80049ac <lv_obj_set_state+0x16c>
                ts[tsi].prop = tr->props[j];
 8004aa4:	19df      	adds	r7, r3, r7
 8004aa6:	e7c2      	b.n	8004a2e <lv_obj_set_state+0x1ee>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8004aa8:	2066      	movs	r0, #102	; 0x66
 8004aaa:	f00d ffeb 	bl	8012a84 <lv_style_prop_get_default>
 8004aae:	4681      	mov	r9, r0
 8004ab0:	e77c      	b.n	80049ac <lv_obj_set_state+0x16c>
        lv_obj_invalidate(obj);
 8004ab2:	4650      	mov	r0, sl
 8004ab4:	f001 fd44 	bl	8006540 <lv_obj_invalidate>
 8004ab8:	e6d7      	b.n	800486a <lv_obj_set_state+0x2a>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8004aba:	21f0      	movs	r1, #240	; 0xf0
 8004abc:	4650      	mov	r0, sl
 8004abe:	4a02      	ldr	r2, [pc, #8]	; (8004ac8 <lv_obj_set_state+0x288>)
 8004ac0:	0309      	lsls	r1, r1, #12
 8004ac2:	f004 ffcb 	bl	8009a5c <lv_obj_refresh_style>
 8004ac6:	e6d0      	b.n	800486a <lv_obj_set_state+0x2a>
 8004ac8:	0000ffff 	.word	0x0000ffff

08004acc <lv_obj_event>:
{
 8004acc:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_event_code_t code = lv_event_get_code(e);
 8004ace:	0008      	movs	r0, r1
{
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	000e      	movs	r6, r1
    lv_event_code_t code = lv_event_get_code(e);
 8004ad4:	f7fd f97e 	bl	8001dd4 <lv_event_get_code>
 8004ad8:	0004      	movs	r4, r0
    lv_obj_t * obj = lv_event_get_current_target(e);
 8004ada:	0030      	movs	r0, r6
 8004adc:	f7fd f978 	bl	8001dd0 <lv_event_get_current_target>
 8004ae0:	0005      	movs	r5, r0
    if(code == LV_EVENT_PRESSED) {
 8004ae2:	2c01      	cmp	r4, #1
 8004ae4:	d04d      	beq.n	8004b82 <lv_obj_event+0xb6>
    else if(code == LV_EVENT_RELEASED) {
 8004ae6:	2c08      	cmp	r4, #8
 8004ae8:	d028      	beq.n	8004b3c <lv_obj_event+0x70>
    else if(code == LV_EVENT_PRESS_LOST) {
 8004aea:	2c03      	cmp	r4, #3
 8004aec:	d100      	bne.n	8004af0 <lv_obj_event+0x24>
 8004aee:	e09d      	b.n	8004c2c <lv_obj_event+0x160>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 8004af0:	2c2a      	cmp	r4, #42	; 0x2a
 8004af2:	d100      	bne.n	8004af6 <lv_obj_event+0x2a>
 8004af4:	e0a2      	b.n	8004c3c <lv_obj_event+0x170>
    else if(code == LV_EVENT_KEY) {
 8004af6:	2c0d      	cmp	r4, #13
 8004af8:	d056      	beq.n	8004ba8 <lv_obj_event+0xdc>
    else if(code == LV_EVENT_FOCUSED) {
 8004afa:	2c0e      	cmp	r4, #14
 8004afc:	d100      	bne.n	8004b00 <lv_obj_event+0x34>
 8004afe:	e0ad      	b.n	8004c5c <lv_obj_event+0x190>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8004b00:	2c09      	cmp	r4, #9
 8004b02:	d100      	bne.n	8004b06 <lv_obj_event+0x3a>
 8004b04:	e101      	b.n	8004d0a <lv_obj_event+0x23e>
    else if(code == LV_EVENT_SCROLL_END) {
 8004b06:	2c0a      	cmp	r4, #10
 8004b08:	d100      	bne.n	8004b0c <lv_obj_event+0x40>
 8004b0a:	e0da      	b.n	8004cc2 <lv_obj_event+0x1f6>
    else if(code == LV_EVENT_DEFOCUSED) {
 8004b0c:	2c0f      	cmp	r4, #15
 8004b0e:	d100      	bne.n	8004b12 <lv_obj_event+0x46>
 8004b10:	e11b      	b.n	8004d4a <lv_obj_event+0x27e>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8004b12:	2c29      	cmp	r4, #41	; 0x29
 8004b14:	d100      	bne.n	8004b18 <lv_obj_event+0x4c>
 8004b16:	e132      	b.n	8004d7e <lv_obj_event+0x2b2>
    else if(code == LV_EVENT_CHILD_CHANGED) {
 8004b18:	2c22      	cmp	r4, #34	; 0x22
 8004b1a:	d100      	bne.n	8004b1e <lv_obj_event+0x52>
 8004b1c:	e153      	b.n	8004dc6 <lv_obj_event+0x2fa>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8004b1e:	2c13      	cmp	r4, #19
 8004b20:	d100      	bne.n	8004b24 <lv_obj_event+0x58>
 8004b22:	e178      	b.n	8004e16 <lv_obj_event+0x34a>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8004b24:	2c18      	cmp	r4, #24
 8004b26:	d807      	bhi.n	8004b38 <lv_obj_event+0x6c>
 8004b28:	2392      	movs	r3, #146	; 0x92
 8004b2a:	045b      	lsls	r3, r3, #17
 8004b2c:	40e3      	lsrs	r3, r4
 8004b2e:	07db      	lsls	r3, r3, #31
 8004b30:	d502      	bpl.n	8004b38 <lv_obj_event+0x6c>
        lv_obj_draw(e);
 8004b32:	0030      	movs	r0, r6
 8004b34:	f7ff fc7c 	bl	8004430 <lv_obj_draw>
}
 8004b38:	b005      	add	sp, #20
 8004b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_state_t new_state = obj->state & (~state);
 8004b3c:	8b83      	ldrh	r3, [r0, #28]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	0019      	movs	r1, r3
 8004b42:	4391      	bics	r1, r2
    if(obj->state != new_state) {
 8004b44:	421a      	tst	r2, r3
 8004b46:	d125      	bne.n	8004b94 <lv_obj_event+0xc8>
        void * param = lv_event_get_param(e);
 8004b48:	0030      	movs	r0, r6
 8004b4a:	f7fd f947 	bl	8001ddc <lv_event_get_param>
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8004b4e:	f7fd fed3 	bl	80028f8 <lv_indev_get_scroll_obj>
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d1f0      	bne.n	8004b38 <lv_obj_event+0x6c>
 8004b56:	69ab      	ldr	r3, [r5, #24]
 8004b58:	071b      	lsls	r3, r3, #28
 8004b5a:	d5ed      	bpl.n	8004b38 <lv_obj_event+0x6c>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8004b5c:	2201      	movs	r2, #1
    return obj->state;
 8004b5e:	8bab      	ldrh	r3, [r5, #28]
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8004b60:	421a      	tst	r2, r3
 8004b62:	d000      	beq.n	8004b66 <lv_obj_event+0x9a>
 8004b64:	e0eb      	b.n	8004d3e <lv_obj_event+0x272>
    lv_state_t new_state = obj->state | state;
 8004b66:	2101      	movs	r1, #1
 8004b68:	4319      	orrs	r1, r3
 8004b6a:	b289      	uxth	r1, r1
    if(obj->state != new_state) {
 8004b6c:	428b      	cmp	r3, r1
 8004b6e:	d002      	beq.n	8004b76 <lv_obj_event+0xaa>
        lv_obj_set_state(obj, new_state);
 8004b70:	0028      	movs	r0, r5
 8004b72:	f7ff fe65 	bl	8004840 <lv_obj_set_state>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8004b76:	2200      	movs	r2, #0
 8004b78:	211c      	movs	r1, #28
 8004b7a:	0028      	movs	r0, r5
 8004b7c:	f7fd f8ee 	bl	8001d5c <lv_event_send>
                if(res != LV_RES_OK) return;
 8004b80:	e7da      	b.n	8004b38 <lv_obj_event+0x6c>
    lv_state_t new_state = obj->state | state;
 8004b82:	2120      	movs	r1, #32
 8004b84:	8b83      	ldrh	r3, [r0, #28]
 8004b86:	4319      	orrs	r1, r3
    if(obj->state != new_state) {
 8004b88:	4299      	cmp	r1, r3
 8004b8a:	d0d5      	beq.n	8004b38 <lv_obj_event+0x6c>
        lv_obj_set_state(obj, new_state);
 8004b8c:	0028      	movs	r0, r5
 8004b8e:	f7ff fe57 	bl	8004840 <lv_obj_set_state>
 8004b92:	e7d1      	b.n	8004b38 <lv_obj_event+0x6c>
 8004b94:	f7ff fe54 	bl	8004840 <lv_obj_set_state>
        void * param = lv_event_get_param(e);
 8004b98:	0030      	movs	r0, r6
 8004b9a:	f7fd f91f 	bl	8001ddc <lv_event_get_param>
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8004b9e:	f7fd feab 	bl	80028f8 <lv_indev_get_scroll_obj>
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	d1c8      	bne.n	8004b38 <lv_obj_event+0x6c>
 8004ba6:	e7d6      	b.n	8004b56 <lv_obj_event+0x8a>
    return (obj->flags & f)  == f ? true : false;
 8004ba8:	6983      	ldr	r3, [r0, #24]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8004baa:	071a      	lsls	r2, r3, #28
 8004bac:	d500      	bpl.n	8004bb0 <lv_obj_event+0xe4>
 8004bae:	e0b3      	b.n	8004d18 <lv_obj_event+0x24c>
    return (obj->flags & f)  == f ? true : false;
 8004bb0:	2281      	movs	r2, #129	; 0x81
 8004bb2:	0112      	lsls	r2, r2, #4
 8004bb4:	4013      	ands	r3, r2
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d1be      	bne.n	8004b38 <lv_obj_event+0x6c>
 8004bba:	f000 fbbf 	bl	800533c <lv_obj_is_editable>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	d1ba      	bne.n	8004b38 <lv_obj_event+0x6c>
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8004bc2:	0028      	movs	r0, r5
 8004bc4:	f003 fda2 	bl	800870c <lv_obj_get_scroll_left>
 8004bc8:	0007      	movs	r7, r0
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8004bca:	0028      	movs	r0, r5
 8004bcc:	f003 fdb4 	bl	8008738 <lv_obj_get_scroll_right>
 8004bd0:	0004      	movs	r4, r0
            char c = *((char *)lv_event_get_param(e));
 8004bd2:	0030      	movs	r0, r6
 8004bd4:	f7fd f902 	bl	8001ddc <lv_event_get_param>
 8004bd8:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_DOWN) {
 8004bda:	2b12      	cmp	r3, #18
 8004bdc:	d100      	bne.n	8004be0 <lv_obj_event+0x114>
 8004bde:	e122      	b.n	8004e26 <lv_obj_event+0x35a>
            else if(c == LV_KEY_UP) {
 8004be0:	2b11      	cmp	r3, #17
 8004be2:	d100      	bne.n	8004be6 <lv_obj_event+0x11a>
 8004be4:	e132      	b.n	8004e4c <lv_obj_event+0x380>
            else if(c == LV_KEY_RIGHT) {
 8004be6:	2b13      	cmp	r3, #19
 8004be8:	d100      	bne.n	8004bec <lv_obj_event+0x120>
 8004bea:	e142      	b.n	8004e72 <lv_obj_event+0x3a6>
            else if(c == LV_KEY_LEFT) {
 8004bec:	2b14      	cmp	r3, #20
 8004bee:	d1a3      	bne.n	8004b38 <lv_obj_event+0x6c>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8004bf0:	0028      	movs	r0, r5
 8004bf2:	f003 f841 	bl	8007c78 <lv_obj_get_scroll_dir>
 8004bf6:	0783      	lsls	r3, r0, #30
 8004bf8:	d100      	bne.n	8004bfc <lv_obj_event+0x130>
 8004bfa:	e127      	b.n	8004e4c <lv_obj_event+0x380>
 8004bfc:	2f00      	cmp	r7, #0
 8004bfe:	dc02      	bgt.n	8004c06 <lv_obj_event+0x13a>
 8004c00:	2c00      	cmp	r4, #0
 8004c02:	dc00      	bgt.n	8004c06 <lv_obj_event+0x13a>
 8004c04:	e122      	b.n	8004e4c <lv_obj_event+0x380>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 8004c06:	0028      	movs	r0, r5
 8004c08:	f003 f854 	bl	8007cb4 <lv_obj_get_scroll_x>
 8004c0c:	0004      	movs	r4, r0
 8004c0e:	0028      	movs	r0, r5
 8004c10:	f001 f8f8 	bl	8005e04 <lv_obj_get_width>
 8004c14:	2203      	movs	r2, #3
 8004c16:	17c3      	asrs	r3, r0, #31
 8004c18:	4013      	ands	r3, r2
 8004c1a:	181b      	adds	r3, r3, r0
 8004c1c:	109b      	asrs	r3, r3, #2
 8004c1e:	1ae3      	subs	r3, r4, r3
 8004c20:	2200      	movs	r2, #0
 8004c22:	0028      	movs	r0, r5
 8004c24:	b219      	sxth	r1, r3
 8004c26:	f004 f94b 	bl	8008ec0 <lv_obj_scroll_to_x>
 8004c2a:	e785      	b.n	8004b38 <lv_obj_event+0x6c>
    lv_state_t new_state = obj->state & (~state);
 8004c2c:	8b83      	ldrh	r3, [r0, #28]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	0019      	movs	r1, r3
 8004c32:	4391      	bics	r1, r2
    if(obj->state != new_state) {
 8004c34:	421a      	tst	r2, r3
 8004c36:	d100      	bne.n	8004c3a <lv_obj_event+0x16e>
 8004c38:	e77e      	b.n	8004b38 <lv_obj_event+0x6c>
 8004c3a:	e7a7      	b.n	8004b8c <lv_obj_event+0xc0>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8004c3c:	f006 f99a 	bl	800af74 <lv_obj_get_child_cnt>
 8004c40:	1e06      	subs	r6, r0, #0
        for(uint32_t i = 0; i < child_cnt; i++) {
 8004c42:	d100      	bne.n	8004c46 <lv_obj_event+0x17a>
 8004c44:	e778      	b.n	8004b38 <lv_obj_event+0x6c>
 8004c46:	2400      	movs	r4, #0
            lv_obj_t * child = obj->spec_attr->children[i];
 8004c48:	68ab      	ldr	r3, [r5, #8]
 8004c4a:	00a2      	lsls	r2, r4, #2
 8004c4c:	681b      	ldr	r3, [r3, #0]
        for(uint32_t i = 0; i < child_cnt; i++) {
 8004c4e:	3401      	adds	r4, #1
            lv_obj_mark_layout_as_dirty(child);
 8004c50:	58d0      	ldr	r0, [r2, r3]
 8004c52:	f001 f823 	bl	8005c9c <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 8004c56:	42a6      	cmp	r6, r4
 8004c58:	d1f6      	bne.n	8004c48 <lv_obj_event+0x17c>
 8004c5a:	e76d      	b.n	8004b38 <lv_obj_event+0x6c>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 8004c5c:	6983      	ldr	r3, [r0, #24]
 8004c5e:	055b      	lsls	r3, r3, #21
 8004c60:	d44b      	bmi.n	8004cfa <lv_obj_event+0x22e>
    if(obj->spec_attr) return obj->spec_attr->group_p;
 8004c62:	68a8      	ldr	r0, [r5, #8]
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d000      	beq.n	8004c6a <lv_obj_event+0x19e>
 8004c68:	6880      	ldr	r0, [r0, #8]
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8004c6a:	f7fd fd19 	bl	80026a0 <lv_group_get_editing>
 8004c6e:	0004      	movs	r4, r0
        lv_indev_t * indev = lv_indev_get_act();
 8004c70:	f7fd fd92 	bl	8002798 <lv_indev_get_act>
        if(indev == NULL) indev = lv_event_get_indev(e);
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d044      	beq.n	8004d02 <lv_obj_event+0x236>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8004c78:	f7fd fd94 	bl	80027a4 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8004c7c:	1e81      	subs	r1, r0, #2
 8004c7e:	20fd      	movs	r0, #253	; 0xfd
 8004c80:	4001      	ands	r1, r0
 8004c82:	1e4b      	subs	r3, r1, #1
 8004c84:	4199      	sbcs	r1, r3
 8004c86:	2303      	movs	r3, #3
 8004c88:	4249      	negs	r1, r1
 8004c8a:	4399      	bics	r1, r3
    lv_state_t new_state = obj->state | state;
 8004c8c:	8bab      	ldrh	r3, [r5, #28]
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8004c8e:	3106      	adds	r1, #6
    lv_state_t new_state = obj->state | state;
 8004c90:	4319      	orrs	r1, r3
        if(editing) {
 8004c92:	2c00      	cmp	r4, #0
 8004c94:	d10e      	bne.n	8004cb4 <lv_obj_event+0x1e8>
    lv_state_t new_state = obj->state | state;
 8004c96:	b289      	uxth	r1, r1
    if(obj->state != new_state) {
 8004c98:	428b      	cmp	r3, r1
 8004c9a:	d003      	beq.n	8004ca4 <lv_obj_event+0x1d8>
        lv_obj_set_state(obj, new_state);
 8004c9c:	0028      	movs	r0, r5
 8004c9e:	f7ff fdcf 	bl	8004840 <lv_obj_set_state>
    lv_state_t new_state = obj->state & (~state);
 8004ca2:	8ba9      	ldrh	r1, [r5, #28]
 8004ca4:	2308      	movs	r3, #8
 8004ca6:	000a      	movs	r2, r1
 8004ca8:	439a      	bics	r2, r3
    if(obj->state != new_state) {
 8004caa:	420b      	tst	r3, r1
 8004cac:	d100      	bne.n	8004cb0 <lv_obj_event+0x1e4>
 8004cae:	e743      	b.n	8004b38 <lv_obj_event+0x6c>
        lv_obj_set_state(obj, new_state);
 8004cb0:	0011      	movs	r1, r2
 8004cb2:	e76b      	b.n	8004b8c <lv_obj_event+0xc0>
    lv_state_t new_state = obj->state | state;
 8004cb4:	2208      	movs	r2, #8
 8004cb6:	4311      	orrs	r1, r2
 8004cb8:	b289      	uxth	r1, r1
    if(obj->state != new_state) {
 8004cba:	428b      	cmp	r3, r1
 8004cbc:	d100      	bne.n	8004cc0 <lv_obj_event+0x1f4>
 8004cbe:	e73b      	b.n	8004b38 <lv_obj_event+0x6c>
 8004cc0:	e764      	b.n	8004b8c <lv_obj_event+0xc0>
    lv_state_t new_state = obj->state & (~state);
 8004cc2:	8b83      	ldrh	r3, [r0, #28]
 8004cc4:	2240      	movs	r2, #64	; 0x40
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	4391      	bics	r1, r2
    if(obj->state != new_state) {
 8004cca:	421a      	tst	r2, r3
 8004ccc:	d001      	beq.n	8004cd2 <lv_obj_event+0x206>
        lv_obj_set_state(obj, new_state);
 8004cce:	f7ff fdb7 	bl	8004840 <lv_obj_set_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 8004cd2:	0028      	movs	r0, r5
 8004cd4:	f002 ffc6 	bl	8007c64 <lv_obj_get_scrollbar_mode>
 8004cd8:	2802      	cmp	r0, #2
 8004cda:	d000      	beq.n	8004cde <lv_obj_event+0x212>
 8004cdc:	e72c      	b.n	8004b38 <lv_obj_event+0x6c>
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8004cde:	4669      	mov	r1, sp
 8004ce0:	0028      	movs	r0, r5
 8004ce2:	aa02      	add	r2, sp, #8
 8004ce4:	f004 f968 	bl	8008fb8 <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 8004ce8:	4669      	mov	r1, sp
 8004cea:	0028      	movs	r0, r5
 8004cec:	f001 fc06 	bl	80064fc <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 8004cf0:	0028      	movs	r0, r5
 8004cf2:	a902      	add	r1, sp, #8
 8004cf4:	f001 fc02 	bl	80064fc <lv_obj_invalidate_area>
 8004cf8:	e71e      	b.n	8004b38 <lv_obj_event+0x6c>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	f004 f918 	bl	8008f30 <lv_obj_scroll_to_view_recursive>
 8004d00:	e7af      	b.n	8004c62 <lv_obj_event+0x196>
        if(indev == NULL) indev = lv_event_get_indev(e);
 8004d02:	0030      	movs	r0, r6
 8004d04:	f7fd f8c0 	bl	8001e88 <lv_event_get_indev>
 8004d08:	e7b6      	b.n	8004c78 <lv_obj_event+0x1ac>
    lv_state_t new_state = obj->state | state;
 8004d0a:	2140      	movs	r1, #64	; 0x40
 8004d0c:	8b83      	ldrh	r3, [r0, #28]
 8004d0e:	4319      	orrs	r1, r3
    if(obj->state != new_state) {
 8004d10:	428b      	cmp	r3, r1
 8004d12:	d100      	bne.n	8004d16 <lv_obj_event+0x24a>
 8004d14:	e710      	b.n	8004b38 <lv_obj_event+0x6c>
 8004d16:	e739      	b.n	8004b8c <lv_obj_event+0xc0>
            char c = *((char *)lv_event_get_param(e));
 8004d18:	0030      	movs	r0, r6
 8004d1a:	f7fd f85f 	bl	8001ddc <lv_event_get_param>
 8004d1e:	7804      	ldrb	r4, [r0, #0]
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8004d20:	2302      	movs	r3, #2
 8004d22:	0022      	movs	r2, r4
 8004d24:	439a      	bics	r2, r3
 8004d26:	2a11      	cmp	r2, #17
 8004d28:	d017      	beq.n	8004d5a <lv_obj_event+0x28e>
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8004d2a:	0022      	movs	r2, r4
 8004d2c:	3a12      	subs	r2, #18
 8004d2e:	439a      	bics	r2, r3
 8004d30:	b2d3      	uxtb	r3, r2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d018      	beq.n	8004d68 <lv_obj_event+0x29c>
            if(c != LV_KEY_ENTER) {
 8004d36:	2c0a      	cmp	r4, #10
 8004d38:	d100      	bne.n	8004d3c <lv_obj_event+0x270>
 8004d3a:	e6fd      	b.n	8004b38 <lv_obj_event+0x6c>
 8004d3c:	e71b      	b.n	8004b76 <lv_obj_event+0xaa>
    lv_state_t new_state = obj->state & (~state);
 8004d3e:	0019      	movs	r1, r3
 8004d40:	4391      	bics	r1, r2
    if(obj->state != new_state) {
 8004d42:	421a      	tst	r2, r3
 8004d44:	d100      	bne.n	8004d48 <lv_obj_event+0x27c>
 8004d46:	e716      	b.n	8004b76 <lv_obj_event+0xaa>
 8004d48:	e712      	b.n	8004b70 <lv_obj_event+0xa4>
    lv_state_t new_state = obj->state & (~state);
 8004d4a:	8b83      	ldrh	r3, [r0, #28]
 8004d4c:	220e      	movs	r2, #14
 8004d4e:	0019      	movs	r1, r3
 8004d50:	4391      	bics	r1, r2
    if(obj->state != new_state) {
 8004d52:	421a      	tst	r2, r3
 8004d54:	d100      	bne.n	8004d58 <lv_obj_event+0x28c>
 8004d56:	e6ef      	b.n	8004b38 <lv_obj_event+0x6c>
 8004d58:	e718      	b.n	8004b8c <lv_obj_event+0xc0>
    lv_state_t new_state = obj->state | state;
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	8bab      	ldrh	r3, [r5, #28]
 8004d5e:	4319      	orrs	r1, r3
    if(obj->state != new_state) {
 8004d60:	428b      	cmp	r3, r1
 8004d62:	d100      	bne.n	8004d66 <lv_obj_event+0x29a>
 8004d64:	e707      	b.n	8004b76 <lv_obj_event+0xaa>
 8004d66:	e703      	b.n	8004b70 <lv_obj_event+0xa4>
    lv_state_t new_state = obj->state & (~state);
 8004d68:	8bab      	ldrh	r3, [r5, #28]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	0019      	movs	r1, r3
 8004d6e:	4391      	bics	r1, r2
    if(obj->state != new_state) {
 8004d70:	421a      	tst	r2, r3
 8004d72:	d100      	bne.n	8004d76 <lv_obj_event+0x2aa>
 8004d74:	e6ff      	b.n	8004b76 <lv_obj_event+0xaa>
        lv_obj_set_state(obj, new_state);
 8004d76:	0028      	movs	r0, r5
 8004d78:	f7ff fd62 	bl	8004840 <lv_obj_set_state>
 8004d7c:	e7db      	b.n	8004d36 <lv_obj_event+0x26a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8004d7e:	2209      	movs	r2, #9
 8004d80:	2100      	movs	r1, #0
 8004d82:	f004 fcb5 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8004d86:	220a      	movs	r2, #10
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8004d88:	0004      	movs	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	0028      	movs	r0, r5
 8004d8e:	f004 fcaf 	bl	80096f0 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8004d92:	b280      	uxth	r0, r0
        if(layout || align) {
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d102      	bne.n	8004d9e <lv_obj_event+0x2d2>
 8004d98:	b2e4      	uxtb	r4, r4
 8004d9a:	2c00      	cmp	r4, #0
 8004d9c:	d002      	beq.n	8004da4 <lv_obj_event+0x2d8>
            lv_obj_mark_layout_as_dirty(obj);
 8004d9e:	0028      	movs	r0, r5
 8004da0:	f000 ff7c 	bl	8005c9c <lv_obj_mark_layout_as_dirty>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8004da4:	0028      	movs	r0, r5
 8004da6:	f006 f8e5 	bl	800af74 <lv_obj_get_child_cnt>
 8004daa:	1e06      	subs	r6, r0, #0
        for(i = 0; i < child_cnt; i++) {
 8004dac:	d100      	bne.n	8004db0 <lv_obj_event+0x2e4>
 8004dae:	e6c3      	b.n	8004b38 <lv_obj_event+0x6c>
 8004db0:	2400      	movs	r4, #0
            lv_obj_t * child = obj->spec_attr->children[i];
 8004db2:	68ab      	ldr	r3, [r5, #8]
 8004db4:	00a2      	lsls	r2, r4, #2
 8004db6:	681b      	ldr	r3, [r3, #0]
        for(i = 0; i < child_cnt; i++) {
 8004db8:	3401      	adds	r4, #1
            lv_obj_mark_layout_as_dirty(child);
 8004dba:	58d0      	ldr	r0, [r2, r3]
 8004dbc:	f000 ff6e 	bl	8005c9c <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 8004dc0:	42a6      	cmp	r6, r4
 8004dc2:	d1f6      	bne.n	8004db2 <lv_obj_event+0x2e6>
 8004dc4:	e6b8      	b.n	8004b38 <lv_obj_event+0x6c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	2100      	movs	r1, #0
 8004dca:	f004 fc91 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8004dce:	2204      	movs	r2, #4
 8004dd0:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8004dd2:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8004dd4:	0028      	movs	r0, r5
 8004dd6:	f004 fc8b 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8004dda:	2209      	movs	r2, #9
 8004ddc:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8004dde:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8004de0:	0028      	movs	r0, r5
 8004de2:	f004 fc85 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8004de6:	220a      	movs	r2, #10
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8004de8:	0004      	movs	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8004dea:	2100      	movs	r1, #0
 8004dec:	0028      	movs	r0, r5
 8004dee:	f004 fc7f 	bl	80096f0 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8004df2:	b280      	uxth	r0, r0
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d10a      	bne.n	8004e0e <lv_obj_event+0x342>
 8004df8:	b2e4      	uxtb	r4, r4
 8004dfa:	2c00      	cmp	r4, #0
 8004dfc:	d107      	bne.n	8004e0e <lv_obj_event+0x342>
 8004dfe:	4b2b      	ldr	r3, [pc, #172]	; (8004eac <lv_obj_event+0x3e0>)
 8004e00:	b236      	sxth	r6, r6
 8004e02:	429e      	cmp	r6, r3
 8004e04:	d003      	beq.n	8004e0e <lv_obj_event+0x342>
 8004e06:	b23f      	sxth	r7, r7
 8004e08:	429f      	cmp	r7, r3
 8004e0a:	d000      	beq.n	8004e0e <lv_obj_event+0x342>
 8004e0c:	e694      	b.n	8004b38 <lv_obj_event+0x6c>
            lv_obj_mark_layout_as_dirty(obj);
 8004e0e:	0028      	movs	r0, r5
 8004e10:	f000 ff44 	bl	8005c9c <lv_obj_mark_layout_as_dirty>
 8004e14:	e690      	b.n	8004b38 <lv_obj_event+0x6c>
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 8004e16:	2100      	movs	r1, #0
 8004e18:	f000 fc2a 	bl	8005670 <lv_obj_calculate_ext_draw_size>
 8004e1c:	0001      	movs	r1, r0
        lv_event_set_ext_draw_size(e, d);
 8004e1e:	0030      	movs	r0, r6
 8004e20:	f7fd f842 	bl	8001ea8 <lv_event_set_ext_draw_size>
 8004e24:	e688      	b.n	8004b38 <lv_obj_event+0x6c>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8004e26:	0028      	movs	r0, r5
 8004e28:	f002 ff4e 	bl	8007cc8 <lv_obj_get_scroll_y>
 8004e2c:	0004      	movs	r4, r0
 8004e2e:	0028      	movs	r0, r5
 8004e30:	f000 fff0 	bl	8005e14 <lv_obj_get_height>
 8004e34:	2303      	movs	r3, #3
 8004e36:	17c1      	asrs	r1, r0, #31
 8004e38:	4019      	ands	r1, r3
 8004e3a:	1809      	adds	r1, r1, r0
 8004e3c:	1089      	asrs	r1, r1, #2
 8004e3e:	1909      	adds	r1, r1, r4
 8004e40:	2200      	movs	r2, #0
 8004e42:	0028      	movs	r0, r5
 8004e44:	b209      	sxth	r1, r1
 8004e46:	f004 f857 	bl	8008ef8 <lv_obj_scroll_to_y>
 8004e4a:	e675      	b.n	8004b38 <lv_obj_event+0x6c>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8004e4c:	0028      	movs	r0, r5
 8004e4e:	f002 ff3b 	bl	8007cc8 <lv_obj_get_scroll_y>
 8004e52:	0004      	movs	r4, r0
 8004e54:	0028      	movs	r0, r5
 8004e56:	f000 ffdd 	bl	8005e14 <lv_obj_get_height>
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	17c3      	asrs	r3, r0, #31
 8004e5e:	4013      	ands	r3, r2
 8004e60:	181b      	adds	r3, r3, r0
 8004e62:	109b      	asrs	r3, r3, #2
 8004e64:	1ae3      	subs	r3, r4, r3
 8004e66:	2200      	movs	r2, #0
 8004e68:	0028      	movs	r0, r5
 8004e6a:	b219      	sxth	r1, r3
 8004e6c:	f004 f844 	bl	8008ef8 <lv_obj_scroll_to_y>
 8004e70:	e662      	b.n	8004b38 <lv_obj_event+0x6c>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8004e72:	0028      	movs	r0, r5
 8004e74:	f002 ff00 	bl	8007c78 <lv_obj_get_scroll_dir>
 8004e78:	0783      	lsls	r3, r0, #30
 8004e7a:	d0d4      	beq.n	8004e26 <lv_obj_event+0x35a>
 8004e7c:	2f00      	cmp	r7, #0
 8004e7e:	dc01      	bgt.n	8004e84 <lv_obj_event+0x3b8>
 8004e80:	2c00      	cmp	r4, #0
 8004e82:	ddd0      	ble.n	8004e26 <lv_obj_event+0x35a>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 8004e84:	0028      	movs	r0, r5
 8004e86:	f002 ff15 	bl	8007cb4 <lv_obj_get_scroll_x>
 8004e8a:	0004      	movs	r4, r0
 8004e8c:	0028      	movs	r0, r5
 8004e8e:	f000 ffb9 	bl	8005e04 <lv_obj_get_width>
 8004e92:	2303      	movs	r3, #3
 8004e94:	17c1      	asrs	r1, r0, #31
 8004e96:	4019      	ands	r1, r3
 8004e98:	1809      	adds	r1, r1, r0
 8004e9a:	1089      	asrs	r1, r1, #2
 8004e9c:	1909      	adds	r1, r1, r4
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	0028      	movs	r0, r5
 8004ea2:	b209      	sxth	r1, r1
 8004ea4:	f004 f80c 	bl	8008ec0 <lv_obj_scroll_to_x>
 8004ea8:	e646      	b.n	8004b38 <lv_obj_event+0x6c>
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	000027d1 	.word	0x000027d1

08004eb0 <lv_init>:
{
 8004eb0:	b510      	push	{r4, lr}
    if(lv_initialized) {
 8004eb2:	4c12      	ldr	r4, [pc, #72]	; (8004efc <lv_init+0x4c>)
 8004eb4:	7823      	ldrb	r3, [r4, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d11e      	bne.n	8004ef8 <lv_init+0x48>
    lv_mem_init();
 8004eba:	f00d f869 	bl	8011f90 <lv_mem_init>
    _lv_timer_core_init();
 8004ebe:	f00d fed1 	bl	8012c64 <_lv_timer_core_init>
    _lv_fs_init();
 8004ec2:	f00c fd9d 	bl	8011a00 <_lv_fs_init>
    _lv_anim_core_init();
 8004ec6:	f00c f83f 	bl	8010f48 <_lv_anim_core_init>
    _lv_group_init();
 8004eca:	f7fd fa15 	bl	80022f8 <_lv_group_init>
    lv_draw_init();
 8004ece:	f007 fa9d 	bl	800c40c <lv_draw_init>
    _lv_obj_style_init();
 8004ed2:	f004 fbff 	bl	80096d4 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8004ed6:	21ae      	movs	r1, #174	; 0xae
 8004ed8:	4809      	ldr	r0, [pc, #36]	; (8004f00 <lv_init+0x50>)
 8004eda:	0049      	lsls	r1, r1, #1
 8004edc:	f00c ff54 	bl	8011d88 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8004ee0:	2158      	movs	r1, #88	; 0x58
 8004ee2:	4808      	ldr	r0, [pc, #32]	; (8004f04 <lv_init+0x54>)
 8004ee4:	f00c ff50 	bl	8011d88 <_lv_ll_init>
    _lv_refr_init();
 8004ee8:	f006 fb5a 	bl	800b5a0 <_lv_refr_init>
    _lv_img_decoder_init();
 8004eec:	f008 fc6e 	bl	800d7cc <_lv_img_decoder_init>
    lv_extra_init();
 8004ef0:	f00b f89a 	bl	8010028 <lv_extra_init>
    lv_initialized = true;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	7023      	strb	r3, [r4, #0]
}
 8004ef8:	bd10      	pop	{r4, pc}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	200031f4 	.word	0x200031f4
 8004f00:	20003368 	.word	0x20003368
 8004f04:	200033c4 	.word	0x200033c4

08004f08 <lv_obj_create>:
{
 8004f08:	b510      	push	{r4, lr}
 8004f0a:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8004f0c:	4803      	ldr	r0, [pc, #12]	; (8004f1c <lv_obj_create+0x14>)
 8004f0e:	f000 f915 	bl	800513c <lv_obj_class_create_obj>
 8004f12:	0004      	movs	r4, r0
    lv_obj_class_init_obj(obj);
 8004f14:	f000 f98a 	bl	800522c <lv_obj_class_init_obj>
}
 8004f18:	0020      	movs	r0, r4
 8004f1a:	bd10      	pop	{r4, pc}
 8004f1c:	0801b748 	.word	0x0801b748

08004f20 <lv_obj_add_flag>:
{
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	0004      	movs	r4, r0
 8004f26:	000d      	movs	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8004f28:	f000 fe9e 	bl	8005c68 <lv_obj_is_layout_positioned>
 8004f2c:	0006      	movs	r6, r0
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 8004f2e:	07eb      	lsls	r3, r5, #31
 8004f30:	d427      	bmi.n	8004f82 <lv_obj_add_flag+0x62>
    obj->flags |= f;
 8004f32:	69a3      	ldr	r3, [r4, #24]
 8004f34:	432b      	orrs	r3, r5
 8004f36:	61a3      	str	r3, [r4, #24]
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8004f38:	0020      	movs	r0, r4
 8004f3a:	f000 fe95 	bl	8005c68 <lv_obj_is_layout_positioned>
 8004f3e:	42b0      	cmp	r0, r6
 8004f40:	d107      	bne.n	8004f52 <lv_obj_add_flag+0x32>
 8004f42:	23c0      	movs	r3, #192	; 0xc0
 8004f44:	045b      	lsls	r3, r3, #17
 8004f46:	421d      	tst	r5, r3
 8004f48:	d103      	bne.n	8004f52 <lv_obj_add_flag+0x32>
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8004f4a:	06eb      	lsls	r3, r5, #27
 8004f4c:	d40b      	bmi.n	8004f66 <lv_obj_add_flag+0x46>
}
 8004f4e:	b004      	add	sp, #16
 8004f50:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8004f52:	0020      	movs	r0, r4
 8004f54:	f005 fff8 	bl	800af48 <lv_obj_get_parent>
 8004f58:	f000 fea0 	bl	8005c9c <lv_obj_mark_layout_as_dirty>
        lv_obj_mark_layout_as_dirty(obj);
 8004f5c:	0020      	movs	r0, r4
 8004f5e:	f000 fe9d 	bl	8005c9c <lv_obj_mark_layout_as_dirty>
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8004f62:	06eb      	lsls	r3, r5, #27
 8004f64:	d5f3      	bpl.n	8004f4e <lv_obj_add_flag+0x2e>
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8004f66:	4669      	mov	r1, sp
 8004f68:	0020      	movs	r0, r4
 8004f6a:	aa02      	add	r2, sp, #8
 8004f6c:	f004 f824 	bl	8008fb8 <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8004f70:	4669      	mov	r1, sp
 8004f72:	0020      	movs	r0, r4
 8004f74:	f001 fac2 	bl	80064fc <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8004f78:	0020      	movs	r0, r4
 8004f7a:	a902      	add	r1, sp, #8
 8004f7c:	f001 fabe 	bl	80064fc <lv_obj_invalidate_area>
}
 8004f80:	e7e5      	b.n	8004f4e <lv_obj_add_flag+0x2e>
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 8004f82:	0020      	movs	r0, r4
 8004f84:	f001 fadc 	bl	8006540 <lv_obj_invalidate>
    obj->flags |= f;
 8004f88:	69a3      	ldr	r3, [r4, #24]
        lv_obj_invalidate(obj);
 8004f8a:	0020      	movs	r0, r4
    obj->flags |= f;
 8004f8c:	432b      	orrs	r3, r5
 8004f8e:	61a3      	str	r3, [r4, #24]
        lv_obj_invalidate(obj);
 8004f90:	f001 fad6 	bl	8006540 <lv_obj_invalidate>
 8004f94:	e7d0      	b.n	8004f38 <lv_obj_add_flag+0x18>
 8004f96:	46c0      	nop			; (mov r8, r8)

08004f98 <lv_obj_clear_flag>:
{
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	0004      	movs	r4, r0
 8004f9e:	000d      	movs	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8004fa0:	f000 fe62 	bl	8005c68 <lv_obj_is_layout_positioned>
 8004fa4:	0006      	movs	r6, r0
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8004fa6:	06eb      	lsls	r3, r5, #27
 8004fa8:	d414      	bmi.n	8004fd4 <lv_obj_clear_flag+0x3c>
    obj->flags &= (~f);
 8004faa:	69a3      	ldr	r3, [r4, #24]
 8004fac:	43ab      	bics	r3, r5
 8004fae:	61a3      	str	r3, [r4, #24]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 8004fb0:	07eb      	lsls	r3, r5, #31
 8004fb2:	d421      	bmi.n	8004ff8 <lv_obj_clear_flag+0x60>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8004fb4:	0020      	movs	r0, r4
 8004fb6:	f000 fe57 	bl	8005c68 <lv_obj_is_layout_positioned>
 8004fba:	42b0      	cmp	r0, r6
 8004fbc:	d103      	bne.n	8004fc6 <lv_obj_clear_flag+0x2e>
 8004fbe:	23c0      	movs	r3, #192	; 0xc0
 8004fc0:	045b      	lsls	r3, r3, #17
 8004fc2:	421d      	tst	r5, r3
 8004fc4:	d004      	beq.n	8004fd0 <lv_obj_clear_flag+0x38>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8004fc6:	0020      	movs	r0, r4
 8004fc8:	f005 ffbe 	bl	800af48 <lv_obj_get_parent>
 8004fcc:	f000 fe66 	bl	8005c9c <lv_obj_mark_layout_as_dirty>
}
 8004fd0:	b004      	add	sp, #16
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8004fd4:	aa02      	add	r2, sp, #8
 8004fd6:	4669      	mov	r1, sp
 8004fd8:	0020      	movs	r0, r4
 8004fda:	f003 ffed 	bl	8008fb8 <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8004fde:	4669      	mov	r1, sp
 8004fe0:	0020      	movs	r0, r4
 8004fe2:	f001 fa8b 	bl	80064fc <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8004fe6:	0020      	movs	r0, r4
 8004fe8:	a902      	add	r1, sp, #8
 8004fea:	f001 fa87 	bl	80064fc <lv_obj_invalidate_area>
    obj->flags &= (~f);
 8004fee:	69a3      	ldr	r3, [r4, #24]
 8004ff0:	43ab      	bics	r3, r5
 8004ff2:	61a3      	str	r3, [r4, #24]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 8004ff4:	07eb      	lsls	r3, r5, #31
 8004ff6:	d5dd      	bpl.n	8004fb4 <lv_obj_clear_flag+0x1c>
        lv_obj_invalidate(obj);
 8004ff8:	0020      	movs	r0, r4
 8004ffa:	f001 faa1 	bl	8006540 <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 8004ffe:	0020      	movs	r0, r4
 8005000:	f000 fe32 	bl	8005c68 <lv_obj_is_layout_positioned>
 8005004:	2800      	cmp	r0, #0
 8005006:	d0d5      	beq.n	8004fb4 <lv_obj_clear_flag+0x1c>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8005008:	0020      	movs	r0, r4
 800500a:	f005 ff9d 	bl	800af48 <lv_obj_get_parent>
 800500e:	f000 fe45 	bl	8005c9c <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 8005012:	0020      	movs	r0, r4
 8005014:	f000 fe42 	bl	8005c9c <lv_obj_mark_layout_as_dirty>
 8005018:	e7cc      	b.n	8004fb4 <lv_obj_clear_flag+0x1c>
 800501a:	46c0      	nop			; (mov r8, r8)

0800501c <lv_obj_add_state>:
    lv_state_t new_state = obj->state | state;
 800501c:	8b83      	ldrh	r3, [r0, #28]
{
 800501e:	b510      	push	{r4, lr}
    lv_state_t new_state = obj->state | state;
 8005020:	4319      	orrs	r1, r3
    if(obj->state != new_state) {
 8005022:	428b      	cmp	r3, r1
 8005024:	d001      	beq.n	800502a <lv_obj_add_state+0xe>
        lv_obj_set_state(obj, new_state);
 8005026:	f7ff fc0b 	bl	8004840 <lv_obj_set_state>
}
 800502a:	bd10      	pop	{r4, pc}

0800502c <lv_obj_clear_state>:
    lv_state_t new_state = obj->state & (~state);
 800502c:	8b83      	ldrh	r3, [r0, #28]
{
 800502e:	b510      	push	{r4, lr}
    lv_state_t new_state = obj->state & (~state);
 8005030:	001a      	movs	r2, r3
 8005032:	438a      	bics	r2, r1
    if(obj->state != new_state) {
 8005034:	4219      	tst	r1, r3
 8005036:	d002      	beq.n	800503e <lv_obj_clear_state+0x12>
        lv_obj_set_state(obj, new_state);
 8005038:	0011      	movs	r1, r2
 800503a:	f7ff fc01 	bl	8004840 <lv_obj_set_state>
}
 800503e:	bd10      	pop	{r4, pc}

08005040 <lv_obj_has_flag>:
    return (obj->flags & f)  == f ? true : false;
 8005040:	6980      	ldr	r0, [r0, #24]
 8005042:	4008      	ands	r0, r1
 8005044:	1a40      	subs	r0, r0, r1
 8005046:	4243      	negs	r3, r0
 8005048:	4158      	adcs	r0, r3
 800504a:	b2c0      	uxtb	r0, r0
}
 800504c:	4770      	bx	lr
 800504e:	46c0      	nop			; (mov r8, r8)

08005050 <lv_obj_has_flag_any>:
    return (obj->flags & f) ? true : false;
 8005050:	6980      	ldr	r0, [r0, #24]
 8005052:	4008      	ands	r0, r1
 8005054:	1e43      	subs	r3, r0, #1
 8005056:	4198      	sbcs	r0, r3
 8005058:	b2c0      	uxtb	r0, r0
}
 800505a:	4770      	bx	lr

0800505c <lv_obj_get_state>:
    return obj->state;
 800505c:	8b80      	ldrh	r0, [r0, #28]
}
 800505e:	4770      	bx	lr

08005060 <lv_obj_has_state>:
    return obj->state & state ? true : false;
 8005060:	8b80      	ldrh	r0, [r0, #28]
 8005062:	4008      	ands	r0, r1
 8005064:	1e43      	subs	r3, r0, #1
 8005066:	4198      	sbcs	r0, r3
 8005068:	b2c0      	uxtb	r0, r0
}
 800506a:	4770      	bx	lr

0800506c <lv_obj_get_group>:
    if(obj->spec_attr) return obj->spec_attr->group_p;
 800506c:	6880      	ldr	r0, [r0, #8]
 800506e:	2800      	cmp	r0, #0
 8005070:	d000      	beq.n	8005074 <lv_obj_get_group+0x8>
 8005072:	6880      	ldr	r0, [r0, #8]
}
 8005074:	4770      	bx	lr
 8005076:	46c0      	nop			; (mov r8, r8)

08005078 <lv_obj_allocate_spec_attr>:
    if(obj->spec_attr == NULL) {
 8005078:	6883      	ldr	r3, [r0, #8]
{
 800507a:	b510      	push	{r4, lr}
 800507c:	0004      	movs	r4, r0
    if(obj->spec_attr == NULL) {
 800507e:	2b00      	cmp	r3, #0
 8005080:	d000      	beq.n	8005084 <lv_obj_allocate_spec_attr+0xc>
}
 8005082:	bd10      	pop	{r4, pc}
        x++;
 8005084:	4a0a      	ldr	r2, [pc, #40]	; (80050b0 <lv_obj_allocate_spec_attr+0x38>)
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8005086:	201c      	movs	r0, #28
        x++;
 8005088:	6813      	ldr	r3, [r2, #0]
 800508a:	3301      	adds	r3, #1
 800508c:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 800508e:	f00c ff8d 	bl	8011fac <lv_mem_alloc>
 8005092:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8005094:	2800      	cmp	r0, #0
 8005096:	d00a      	beq.n	80050ae <lv_obj_allocate_spec_attr+0x36>
        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 8005098:	211c      	movs	r1, #28
 800509a:	f00d fb09 	bl	80126b0 <lv_memset_00>
        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 800509e:	68a1      	ldr	r1, [r4, #8]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 80050a0:	4a04      	ldr	r2, [pc, #16]	; (80050b4 <lv_obj_allocate_spec_attr+0x3c>)
 80050a2:	8b0b      	ldrh	r3, [r1, #24]
 80050a4:	401a      	ands	r2, r3
 80050a6:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <lv_obj_allocate_spec_attr+0x40>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	830b      	strh	r3, [r1, #24]
 80050ac:	e7e9      	b.n	8005082 <lv_obj_allocate_spec_attr+0xa>
        LV_ASSERT_MALLOC(obj->spec_attr);
 80050ae:	e7fe      	b.n	80050ae <lv_obj_allocate_spec_attr+0x36>
 80050b0:	200031f8 	.word	0x200031f8
 80050b4:	fffff0fc 	.word	0xfffff0fc
 80050b8:	00000f03 	.word	0x00000f03

080050bc <lv_obj_check_type>:
    if(obj == NULL) return false;
 80050bc:	2800      	cmp	r0, #0
 80050be:	d005      	beq.n	80050cc <lv_obj_check_type+0x10>
    return obj->class_p == class_p ? true : false;
 80050c0:	6800      	ldr	r0, [r0, #0]
 80050c2:	1a40      	subs	r0, r0, r1
 80050c4:	4243      	negs	r3, r0
 80050c6:	4158      	adcs	r0, r3
 80050c8:	b2c0      	uxtb	r0, r0
}
 80050ca:	4770      	bx	lr
    if(obj == NULL) return false;
 80050cc:	2000      	movs	r0, #0
 80050ce:	e7fc      	b.n	80050ca <lv_obj_check_type+0xe>

080050d0 <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 80050d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050d2:	46c6      	mov	lr, r8
    const lv_obj_class_t * original_class_p = obj->class_p;
 80050d4:	6805      	ldr	r5, [r0, #0]
{
 80050d6:	0004      	movs	r4, r0

    if(obj->class_p->base_class) {
 80050d8:	682e      	ldr	r6, [r5, #0]
{
 80050da:	b500      	push	{lr}
    if(obj->class_p->base_class) {
 80050dc:	2e00      	cmp	r6, #0
 80050de:	d022      	beq.n	8005126 <lv_obj_construct+0x56>
 80050e0:	6837      	ldr	r7, [r6, #0]
 80050e2:	2f00      	cmp	r7, #0
 80050e4:	d018      	beq.n	8005118 <lv_obj_construct+0x48>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	4698      	mov	r8, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00d      	beq.n	800510a <lv_obj_construct+0x3a>
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <lv_obj_construct+0x2a>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 80050f4:	6003      	str	r3, [r0, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 80050f6:	f7ff ffeb 	bl	80050d0 <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;
 80050fa:	4643      	mov	r3, r8
 80050fc:	6023      	str	r3, [r4, #0]

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <lv_obj_construct+0x3a>
 8005104:	0021      	movs	r1, r4
 8005106:	4640      	mov	r0, r8
 8005108:	4798      	blx	r3
 800510a:	687b      	ldr	r3, [r7, #4]
    obj->class_p = original_class_p;
 800510c:	6027      	str	r7, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <lv_obj_construct+0x48>
 8005112:	0021      	movs	r1, r4
 8005114:	0038      	movs	r0, r7
 8005116:	4798      	blx	r3
 8005118:	6873      	ldr	r3, [r6, #4]
    obj->class_p = original_class_p;
 800511a:	6026      	str	r6, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <lv_obj_construct+0x56>
 8005120:	0021      	movs	r1, r4
 8005122:	0030      	movs	r0, r6
 8005124:	4798      	blx	r3
 8005126:	686b      	ldr	r3, [r5, #4]
    obj->class_p = original_class_p;
 8005128:	6025      	str	r5, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <lv_obj_construct+0x64>
 800512e:	0021      	movs	r1, r4
 8005130:	0028      	movs	r0, r5
 8005132:	4798      	blx	r3
}
 8005134:	bc80      	pop	{r7}
 8005136:	46b8      	mov	r8, r7
 8005138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800513a:	46c0      	nop			; (mov r8, r8)

0800513c <lv_obj_class_create_obj>:
{
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	0007      	movs	r7, r0
 8005140:	000e      	movs	r6, r1

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
    while(base && base->instance_size == 0) base = base->base_class;
 8005142:	1e03      	subs	r3, r0, #0
 8005144:	d05e      	beq.n	8005204 <lv_obj_class_create_obj+0xc8>
 8005146:	4c37      	ldr	r4, [pc, #220]	; (8005224 <lv_obj_class_create_obj+0xe8>)
 8005148:	e002      	b.n	8005150 <lv_obj_class_create_obj+0x14>
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d006      	beq.n	800515e <lv_obj_class_create_obj+0x22>
 8005150:	695a      	ldr	r2, [r3, #20]
 8005152:	0015      	movs	r5, r2
 8005154:	4025      	ands	r5, r4
 8005156:	4222      	tst	r2, r4
 8005158:	d0f7      	beq.n	800514a <lv_obj_class_create_obj+0xe>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/

    return base->instance_size;
 800515a:	0312      	lsls	r2, r2, #12
 800515c:	0c15      	lsrs	r5, r2, #16
    lv_obj_t * obj = lv_mem_alloc(s);
 800515e:	0028      	movs	r0, r5
 8005160:	f00c ff24 	bl	8011fac <lv_mem_alloc>
 8005164:	1e04      	subs	r4, r0, #0
    if(obj == NULL) return NULL;
 8005166:	d01b      	beq.n	80051a0 <lv_obj_class_create_obj+0x64>
    lv_memset_00(obj, s);
 8005168:	0029      	movs	r1, r5
 800516a:	f00d faa1 	bl	80126b0 <lv_memset_00>
    obj->class_p = class_p;
 800516e:	6027      	str	r7, [r4, #0]
    obj->parent = parent;
 8005170:	6066      	str	r6, [r4, #4]
    if(parent == NULL) {
 8005172:	2e00      	cmp	r6, #0
 8005174:	d020      	beq.n	80051b8 <lv_obj_class_create_obj+0x7c>
        if(parent->spec_attr == NULL) {
 8005176:	68b5      	ldr	r5, [r6, #8]
 8005178:	2d00      	cmp	r5, #0
 800517a:	d03e      	beq.n	80051fa <lv_obj_class_create_obj+0xbe>
        if(parent->spec_attr->children == NULL) {
 800517c:	6828      	ldr	r0, [r5, #0]
 800517e:	2800      	cmp	r0, #0
 8005180:	d010      	beq.n	80051a4 <lv_obj_class_create_obj+0x68>
            parent->spec_attr->child_cnt++;
 8005182:	686b      	ldr	r3, [r5, #4]
 8005184:	1c59      	adds	r1, r3, #1
 8005186:	6069      	str	r1, [r5, #4]
                                                         sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 8005188:	0089      	lsls	r1, r1, #2
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800518a:	f00c ff4d 	bl	8012028 <lv_mem_realloc>
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 800518e:	4926      	ldr	r1, [pc, #152]	; (8005228 <lv_obj_class_create_obj+0xec>)
 8005190:	68b2      	ldr	r2, [r6, #8]
 8005192:	468c      	mov	ip, r1
 8005194:	6853      	ldr	r3, [r2, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8005196:	6028      	str	r0, [r5, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	4463      	add	r3, ip
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	509c      	str	r4, [r3, r2]
}
 80051a0:	0020      	movs	r0, r4
 80051a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 80051a4:	3004      	adds	r0, #4
 80051a6:	f00c ff01 	bl	8011fac <lv_mem_alloc>
            parent->spec_attr->children[0] = obj;
 80051aa:	68b3      	ldr	r3, [r6, #8]
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 80051ac:	6028      	str	r0, [r5, #0]
            parent->spec_attr->children[0] = obj;
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	6014      	str	r4, [r2, #0]
            parent->spec_attr->child_cnt = 1;
 80051b2:	2201      	movs	r2, #1
 80051b4:	605a      	str	r2, [r3, #4]
 80051b6:	e7f3      	b.n	80051a0 <lv_obj_class_create_obj+0x64>
        lv_disp_t * disp = lv_disp_get_default();
 80051b8:	f00b fcd8 	bl	8010b6c <lv_disp_get_default>
 80051bc:	1e05      	subs	r5, r0, #0
        if(!disp) {
 80051be:	d02b      	beq.n	8005218 <lv_obj_class_create_obj+0xdc>
        if(disp->screens == NULL) {
 80051c0:	68c0      	ldr	r0, [r0, #12]
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d020      	beq.n	8005208 <lv_obj_class_create_obj+0xcc>
            disp->screen_cnt++;
 80051c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051c8:	1c59      	adds	r1, r3, #1
 80051ca:	6269      	str	r1, [r5, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 80051cc:	0089      	lsls	r1, r1, #2
 80051ce:	f00c ff2b 	bl	8012028 <lv_mem_realloc>
            disp->screens[disp->screen_cnt - 1] = obj;
 80051d2:	4a15      	ldr	r2, [pc, #84]	; (8005228 <lv_obj_class_create_obj+0xec>)
 80051d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051d6:	4694      	mov	ip, r2
 80051d8:	4463      	add	r3, ip
 80051da:	009b      	lsls	r3, r3, #2
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 80051dc:	60e8      	str	r0, [r5, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 80051de:	501c      	str	r4, [r3, r0]
        obj->coords.x1 = 0;
 80051e0:	2300      	movs	r3, #0
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 80051e2:	2000      	movs	r0, #0
        obj->coords.x1 = 0;
 80051e4:	6123      	str	r3, [r4, #16]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 80051e6:	f00b fcc7 	bl	8010b78 <lv_disp_get_hor_res>
 80051ea:	3801      	subs	r0, #1
 80051ec:	82a0      	strh	r0, [r4, #20]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 80051ee:	2000      	movs	r0, #0
 80051f0:	f00b fcd6 	bl	8010ba0 <lv_disp_get_ver_res>
 80051f4:	3801      	subs	r0, #1
 80051f6:	82e0      	strh	r0, [r4, #22]
 80051f8:	e7d2      	b.n	80051a0 <lv_obj_class_create_obj+0x64>
            lv_obj_allocate_spec_attr(parent);
 80051fa:	0030      	movs	r0, r6
 80051fc:	f7ff ff3c 	bl	8005078 <lv_obj_allocate_spec_attr>
        if(parent->spec_attr->children == NULL) {
 8005200:	68b5      	ldr	r5, [r6, #8]
 8005202:	e7bb      	b.n	800517c <lv_obj_class_create_obj+0x40>
    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 8005204:	2500      	movs	r5, #0
 8005206:	e7aa      	b.n	800515e <lv_obj_class_create_obj+0x22>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8005208:	3004      	adds	r0, #4
 800520a:	f00c fecf 	bl	8011fac <lv_mem_alloc>
            disp->screen_cnt = 1;
 800520e:	2301      	movs	r3, #1
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8005210:	60e8      	str	r0, [r5, #12]
            disp->screens[0] = obj;
 8005212:	6004      	str	r4, [r0, #0]
            disp->screen_cnt = 1;
 8005214:	626b      	str	r3, [r5, #36]	; 0x24
 8005216:	e7e3      	b.n	80051e0 <lv_obj_class_create_obj+0xa4>
            lv_mem_free(obj);
 8005218:	0020      	movs	r0, r4
 800521a:	f00c fee9 	bl	8011ff0 <lv_mem_free>
            return NULL;
 800521e:	2400      	movs	r4, #0
 8005220:	e7be      	b.n	80051a0 <lv_obj_class_create_obj+0x64>
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	000ffff0 	.word	0x000ffff0
 8005228:	3fffffff 	.word	0x3fffffff

0800522c <lv_obj_class_init_obj>:
{
 800522c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800522e:	46c6      	mov	lr, r8
 8005230:	0004      	movs	r4, r0
 8005232:	b500      	push	{lr}
    lv_obj_mark_layout_as_dirty(obj);
 8005234:	f000 fd32 	bl	8005c9c <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 8005238:	2000      	movs	r0, #0
 800523a:	f004 fa53 	bl	80096e4 <lv_obj_enable_style_refresh>
    lv_theme_apply(obj);
 800523e:	0020      	movs	r0, r4
 8005240:	f007 f8a2 	bl	800c388 <lv_theme_apply>
    const lv_obj_class_t * original_class_p = obj->class_p;
 8005244:	6825      	ldr	r5, [r4, #0]
    if(obj->class_p->base_class) {
 8005246:	682e      	ldr	r6, [r5, #0]
 8005248:	2e00      	cmp	r6, #0
 800524a:	d023      	beq.n	8005294 <lv_obj_class_init_obj+0x68>
 800524c:	6837      	ldr	r7, [r6, #0]
 800524e:	2f00      	cmp	r7, #0
 8005250:	d019      	beq.n	8005286 <lv_obj_class_init_obj+0x5a>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	4698      	mov	r8, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00e      	beq.n	8005278 <lv_obj_class_init_obj+0x4c>
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <lv_obj_class_init_obj+0x3c>
        lv_obj_construct(obj);
 8005260:	0020      	movs	r0, r4
        obj->class_p = obj->class_p->base_class;
 8005262:	6023      	str	r3, [r4, #0]
        lv_obj_construct(obj);
 8005264:	f7ff ff34 	bl	80050d0 <lv_obj_construct>
    obj->class_p = original_class_p;
 8005268:	4643      	mov	r3, r8
 800526a:	6023      	str	r3, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <lv_obj_class_init_obj+0x4c>
 8005272:	0021      	movs	r1, r4
 8005274:	4640      	mov	r0, r8
 8005276:	4798      	blx	r3
 8005278:	687b      	ldr	r3, [r7, #4]
    obj->class_p = original_class_p;
 800527a:	6027      	str	r7, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <lv_obj_class_init_obj+0x5a>
 8005280:	0021      	movs	r1, r4
 8005282:	0038      	movs	r0, r7
 8005284:	4798      	blx	r3
 8005286:	6873      	ldr	r3, [r6, #4]
    obj->class_p = original_class_p;
 8005288:	6026      	str	r6, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <lv_obj_class_init_obj+0x68>
 800528e:	0021      	movs	r1, r4
 8005290:	0030      	movs	r0, r6
 8005292:	4798      	blx	r3
 8005294:	686b      	ldr	r3, [r5, #4]
    obj->class_p = original_class_p;
 8005296:	6025      	str	r5, [r4, #0]
    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <lv_obj_class_init_obj+0x76>
 800529c:	0021      	movs	r1, r4
 800529e:	0028      	movs	r0, r5
 80052a0:	4798      	blx	r3
    lv_obj_enable_style_refresh(true);
 80052a2:	2001      	movs	r0, #1
 80052a4:	f004 fa1e 	bl	80096e4 <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 80052a8:	21f0      	movs	r1, #240	; 0xf0
 80052aa:	0020      	movs	r0, r4
 80052ac:	4a18      	ldr	r2, [pc, #96]	; (8005310 <lv_obj_class_init_obj+0xe4>)
 80052ae:	0309      	lsls	r1, r1, #12
 80052b0:	f004 fbd4 	bl	8009a5c <lv_obj_refresh_style>
    lv_obj_refresh_self_size(obj);
 80052b4:	0020      	movs	r0, r4
 80052b6:	f000 fe4b 	bl	8005f50 <lv_obj_refresh_self_size>
    lv_group_t * def_group = lv_group_get_default();
 80052ba:	f7fd f843 	bl	8002344 <lv_group_get_default>
    if(def_group && lv_obj_is_group_def(obj)) {
 80052be:	2800      	cmp	r0, #0
 80052c0:	d00e      	beq.n	80052e0 <lv_obj_class_init_obj+0xb4>
    const lv_obj_class_t * class_p = obj->class_p;
 80052c2:	6823      	ldr	r3, [r4, #0]
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 80052c4:	210c      	movs	r1, #12
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d103      	bne.n	80052d2 <lv_obj_class_init_obj+0xa6>
 80052ca:	e009      	b.n	80052e0 <lv_obj_class_init_obj+0xb4>
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d006      	beq.n	80052e0 <lv_obj_class_init_obj+0xb4>
 80052d2:	000d      	movs	r5, r1
 80052d4:	7d1a      	ldrb	r2, [r3, #20]
 80052d6:	4015      	ands	r5, r2
 80052d8:	4211      	tst	r1, r2
 80052da:	d0f7      	beq.n	80052cc <lv_obj_class_init_obj+0xa0>
    if(def_group && lv_obj_is_group_def(obj)) {
 80052dc:	2d04      	cmp	r5, #4
 80052de:	d013      	beq.n	8005308 <lv_obj_class_init_obj+0xdc>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80052e0:	0020      	movs	r0, r4
 80052e2:	f005 fe31 	bl	800af48 <lv_obj_get_parent>
 80052e6:	1e05      	subs	r5, r0, #0
    if(parent) {
 80052e8:	d00b      	beq.n	8005302 <lv_obj_class_init_obj+0xd6>
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80052ea:	0022      	movs	r2, r4
 80052ec:	2122      	movs	r1, #34	; 0x22
 80052ee:	f7fc fd35 	bl	8001d5c <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 80052f2:	0022      	movs	r2, r4
 80052f4:	2123      	movs	r1, #35	; 0x23
 80052f6:	0028      	movs	r0, r5
 80052f8:	f7fc fd30 	bl	8001d5c <lv_event_send>
        lv_obj_invalidate(obj);
 80052fc:	0020      	movs	r0, r4
 80052fe:	f001 f91f 	bl	8006540 <lv_obj_invalidate>
}
 8005302:	bc80      	pop	{r7}
 8005304:	46b8      	mov	r8, r7
 8005306:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_group_add_obj(def_group, obj);
 8005308:	0021      	movs	r1, r4
 800530a:	f7fd f821 	bl	8002350 <lv_group_add_obj>
 800530e:	e7e7      	b.n	80052e0 <lv_obj_class_init_obj+0xb4>
 8005310:	0000ffff 	.word	0x0000ffff

08005314 <_lv_obj_destruct>:
{
 8005314:	b510      	push	{r4, lr}
 8005316:	0004      	movs	r4, r0
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 8005318:	6800      	ldr	r0, [r0, #0]
 800531a:	6883      	ldr	r3, [r0, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d009      	beq.n	8005334 <_lv_obj_destruct+0x20>
 8005320:	0021      	movs	r1, r4
 8005322:	4798      	blx	r3
    if(obj->class_p->base_class) {
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	2800      	cmp	r0, #0
 800532a:	d006      	beq.n	800533a <_lv_obj_destruct+0x26>
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 800532c:	6883      	ldr	r3, [r0, #8]
        obj->class_p = obj->class_p->base_class;
 800532e:	6020      	str	r0, [r4, #0]
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1f5      	bne.n	8005320 <_lv_obj_destruct+0xc>
    if(obj->class_p->base_class) {
 8005334:	6800      	ldr	r0, [r0, #0]
 8005336:	2800      	cmp	r0, #0
 8005338:	d1f8      	bne.n	800532c <_lv_obj_destruct+0x18>
}
 800533a:	bd10      	pop	{r4, pc}

0800533c <lv_obj_is_editable>:
    const lv_obj_class_t * class_p = obj->class_p;
 800533c:	6803      	ldr	r3, [r0, #0]
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 800533e:	2103      	movs	r1, #3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d103      	bne.n	800534c <lv_obj_is_editable+0x10>
 8005344:	e00c      	b.n	8005360 <lv_obj_is_editable+0x24>
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d009      	beq.n	8005360 <lv_obj_is_editable+0x24>
 800534c:	0008      	movs	r0, r1
 800534e:	7d1a      	ldrb	r2, [r3, #20]
 8005350:	4010      	ands	r0, r2
 8005352:	4211      	tst	r1, r2
 8005354:	d0f7      	beq.n	8005346 <lv_obj_is_editable+0xa>
    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 8005356:	3801      	subs	r0, #1
 8005358:	4243      	negs	r3, r0
 800535a:	4158      	adcs	r0, r3
 800535c:	b2c0      	uxtb	r0, r0
}
 800535e:	4770      	bx	lr
    if(class_p == NULL) return false;
 8005360:	2000      	movs	r0, #0
 8005362:	e7fc      	b.n	800535e <lv_obj_is_editable+0x22>

08005364 <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8005364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005366:	46c6      	mov	lr, r8
 8005368:	0006      	movs	r6, r0
 800536a:	000d      	movs	r5, r1
 800536c:	0014      	movs	r4, r2
    lv_opa_t opa = LV_OPA_COVER;
 800536e:	27ff      	movs	r7, #255	; 0xff
{
 8005370:	b500      	push	{lr}
    if(part != LV_PART_MAIN) {
 8005372:	2900      	cmp	r1, #0
 8005374:	d151      	bne.n	800541a <lv_obj_init_draw_rect_dsc+0xb6>
            }
        }
    }

#else /*LV_DRAW_COMPLEX*/
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8005376:	78e3      	ldrb	r3, [r4, #3]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d000      	beq.n	800537e <lv_obj_init_draw_rect_dsc+0x1a>
 800537c:	e08d      	b.n	800549a <lv_obj_init_draw_rect_dsc+0x136>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800537e:	2232      	movs	r2, #50	; 0x32
 8005380:	0029      	movs	r1, r5
 8005382:	0030      	movs	r0, r6
 8005384:	f004 f9b4 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005388:	b200      	sxth	r0, r0
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
        }
    }

    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 800538a:	8420      	strh	r0, [r4, #32]
    if(draw_dsc->border_width) {
 800538c:	2800      	cmp	r0, #0
 800538e:	d005      	beq.n	800539c <lv_obj_init_draw_rect_dsc+0x38>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8005390:	2322      	movs	r3, #34	; 0x22
 8005392:	4698      	mov	r8, r3
 8005394:	5ce3      	ldrb	r3, [r4, r3]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d000      	beq.n	800539c <lv_obj_init_draw_rect_dsc+0x38>
 800539a:	e094      	b.n	80054c6 <lv_obj_init_draw_rect_dsc+0x162>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 800539c:	2235      	movs	r2, #53	; 0x35
 800539e:	0029      	movs	r1, r5
 80053a0:	0030      	movs	r0, r6
 80053a2:	f004 f9a5 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80053a6:	b200      	sxth	r0, r0
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
            }
        }
    }

    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 80053a8:	84e0      	strh	r0, [r4, #38]	; 0x26
    if(draw_dsc->outline_width) {
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d114      	bne.n	80053d8 <lv_obj_init_draw_rect_dsc+0x74>
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
            }
        }
    }

    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 80053ae:	7ea3      	ldrb	r3, [r4, #26]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d142      	bne.n	800543a <lv_obj_init_draw_rect_dsc+0xd6>
            }
        }
    }
#endif

    if(part != LV_PART_MAIN) {
 80053b4:	2d00      	cmp	r5, #0
 80053b6:	d00c      	beq.n	80053d2 <lv_obj_init_draw_rect_dsc+0x6e>
        if(opa < LV_OPA_MAX) {
 80053b8:	2ffc      	cmp	r7, #252	; 0xfc
 80053ba:	d80a      	bhi.n	80053d2 <lv_obj_init_draw_rect_dsc+0x6e>
            draw_dsc->bg_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80053bc:	2336      	movs	r3, #54	; 0x36
            draw_dsc->bg_img_opa = (opa * draw_dsc->shadow_opa) >> 8;
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80053be:	2222      	movs	r2, #34	; 0x22
            draw_dsc->bg_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80053c0:	5ce0      	ldrb	r0, [r4, r3]
 80053c2:	4347      	muls	r7, r0
 80053c4:	0a3f      	lsrs	r7, r7, #8
 80053c6:	70e7      	strb	r7, [r4, #3]
            draw_dsc->bg_img_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80053c8:	76a7      	strb	r7, [r4, #26]
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80053ca:	54a7      	strb	r7, [r4, r2]
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80053cc:	3208      	adds	r2, #8
 80053ce:	54a7      	strb	r7, [r4, r2]
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80053d0:	54e7      	strb	r7, [r4, r3]
        }
    }
}
 80053d2:	bc80      	pop	{r7}
 80053d4:	46b8      	mov	r8, r7
 80053d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 80053d8:	232a      	movs	r3, #42	; 0x2a
 80053da:	4698      	mov	r8, r3
 80053dc:	5ce3      	ldrb	r3, [r4, r3]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0e5      	beq.n	80053ae <lv_obj_init_draw_rect_dsc+0x4a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 80053e2:	2237      	movs	r2, #55	; 0x37
 80053e4:	0029      	movs	r1, r5
 80053e6:	0030      	movs	r0, r6
 80053e8:	f004 f982 	bl	80096f0 <lv_obj_get_style_prop>
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 80053ec:	4643      	mov	r3, r8
    return (lv_opa_t)v.num;
 80053ee:	b2c0      	uxtb	r0, r0
 80053f0:	54e0      	strb	r0, [r4, r3]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 80053f2:	2802      	cmp	r0, #2
 80053f4:	d9db      	bls.n	80053ae <lv_obj_init_draw_rect_dsc+0x4a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 80053f6:	2238      	movs	r2, #56	; 0x38
 80053f8:	0029      	movs	r1, r5
 80053fa:	0030      	movs	r0, r6
 80053fc:	f004 f978 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR));
 8005400:	2236      	movs	r2, #54	; 0x36
 8005402:	0029      	movs	r1, r5
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8005404:	8520      	strh	r0, [r4, #40]	; 0x28
 8005406:	0030      	movs	r0, r6
 8005408:	f004 f972 	bl	80096f0 <lv_obj_get_style_prop>
 800540c:	0029      	movs	r1, r5
 800540e:	0002      	movs	r2, r0
 8005410:	0030      	movs	r0, r6
 8005412:	f005 f8c3 	bl	800a59c <_lv_obj_style_apply_color_filter>
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 8005416:	84a0      	strh	r0, [r4, #36]	; 0x24
 8005418:	e7c9      	b.n	80053ae <lv_obj_init_draw_rect_dsc+0x4a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800541a:	2260      	movs	r2, #96	; 0x60
 800541c:	f004 f968 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8005420:	b2c7      	uxtb	r7, r0
        if(opa <= LV_OPA_MIN) {
 8005422:	2f02      	cmp	r7, #2
 8005424:	d8a7      	bhi.n	8005376 <lv_obj_init_draw_rect_dsc+0x12>
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 8005426:	2300      	movs	r3, #0
            draw_dsc->border_opa = LV_OPA_TRANSP;
 8005428:	2222      	movs	r2, #34	; 0x22
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 800542a:	70e3      	strb	r3, [r4, #3]
            draw_dsc->bg_img_opa = LV_OPA_TRANSP;
 800542c:	76a3      	strb	r3, [r4, #26]
            draw_dsc->border_opa = LV_OPA_TRANSP;
 800542e:	54a3      	strb	r3, [r4, r2]
            draw_dsc->outline_opa = LV_OPA_TRANSP;
 8005430:	3208      	adds	r2, #8
 8005432:	54a3      	strb	r3, [r4, r2]
            draw_dsc->shadow_opa = LV_OPA_TRANSP;
 8005434:	320c      	adds	r2, #12
 8005436:	54a3      	strb	r3, [r4, r2]
            return;
 8005438:	e7cb      	b.n	80053d2 <lv_obj_init_draw_rect_dsc+0x6e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 800543a:	2228      	movs	r2, #40	; 0x28
 800543c:	0029      	movs	r1, r5
 800543e:	0030      	movs	r0, r6
 8005440:	f004 f956 	bl	80096f0 <lv_obj_get_style_prop>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 8005444:	6120      	str	r0, [r4, #16]
        if(draw_dsc->bg_img_src) {
 8005446:	2800      	cmp	r0, #0
 8005448:	d0b4      	beq.n	80053b4 <lv_obj_init_draw_rect_dsc+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 800544a:	2229      	movs	r2, #41	; 0x29
 800544c:	0029      	movs	r1, r5
 800544e:	0030      	movs	r0, r6
 8005450:	f004 f94e 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8005454:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 8005456:	76a0      	strb	r0, [r4, #26]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 8005458:	2802      	cmp	r0, #2
 800545a:	d9ab      	bls.n	80053b4 <lv_obj_init_draw_rect_dsc+0x50>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 800545c:	6920      	ldr	r0, [r4, #16]
 800545e:	f007 f971 	bl	800c744 <lv_img_src_get_type>
 8005462:	2802      	cmp	r0, #2
 8005464:	d054      	beq.n	8005510 <lv_obj_init_draw_rect_dsc+0x1ac>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR));
 8005466:	222a      	movs	r2, #42	; 0x2a
 8005468:	0029      	movs	r1, r5
 800546a:	0030      	movs	r0, r6
 800546c:	f004 f940 	bl	80096f0 <lv_obj_get_style_prop>
 8005470:	0029      	movs	r1, r5
 8005472:	0002      	movs	r2, r0
 8005474:	0030      	movs	r0, r6
 8005476:	f005 f891 	bl	800a59c <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 800547a:	222b      	movs	r2, #43	; 0x2b
 800547c:	0029      	movs	r1, r5
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 800547e:	8320      	strh	r0, [r4, #24]
 8005480:	0030      	movs	r0, r6
 8005482:	f004 f935 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 8005486:	222c      	movs	r2, #44	; 0x2c
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 8005488:	76e0      	strb	r0, [r4, #27]
 800548a:	0029      	movs	r1, r5
 800548c:	0030      	movs	r0, r6
 800548e:	f004 f92f 	bl	80096f0 <lv_obj_get_style_prop>
    return (bool)v.num;
 8005492:	1e43      	subs	r3, r0, #1
 8005494:	4198      	sbcs	r0, r3
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 8005496:	7720      	strb	r0, [r4, #28]
 8005498:	e78c      	b.n	80053b4 <lv_obj_init_draw_rect_dsc+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800549a:	2221      	movs	r2, #33	; 0x21
 800549c:	0029      	movs	r1, r5
 800549e:	0030      	movs	r0, r6
 80054a0:	f004 f926 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80054a4:	b2c0      	uxtb	r0, r0
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 80054a6:	70e0      	strb	r0, [r4, #3]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 80054a8:	2802      	cmp	r0, #2
 80054aa:	d800      	bhi.n	80054ae <lv_obj_init_draw_rect_dsc+0x14a>
 80054ac:	e767      	b.n	800537e <lv_obj_init_draw_rect_dsc+0x1a>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 80054ae:	2220      	movs	r2, #32
 80054b0:	0029      	movs	r1, r5
 80054b2:	0030      	movs	r0, r6
 80054b4:	f004 f91c 	bl	80096f0 <lv_obj_get_style_prop>
 80054b8:	0029      	movs	r1, r5
 80054ba:	0002      	movs	r2, r0
 80054bc:	0030      	movs	r0, r6
 80054be:	f005 f86d 	bl	800a59c <_lv_obj_style_apply_color_filter>
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 80054c2:	80a0      	strh	r0, [r4, #4]
 80054c4:	e75b      	b.n	800537e <lv_obj_init_draw_rect_dsc+0x1a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 80054c6:	2231      	movs	r2, #49	; 0x31
 80054c8:	0029      	movs	r1, r5
 80054ca:	0030      	movs	r0, r6
 80054cc:	f004 f910 	bl	80096f0 <lv_obj_get_style_prop>
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 80054d0:	4643      	mov	r3, r8
    return (lv_opa_t)v.num;
 80054d2:	b2c0      	uxtb	r0, r0
 80054d4:	54e0      	strb	r0, [r4, r3]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 80054d6:	2802      	cmp	r0, #2
 80054d8:	d800      	bhi.n	80054dc <lv_obj_init_draw_rect_dsc+0x178>
 80054da:	e75f      	b.n	800539c <lv_obj_init_draw_rect_dsc+0x38>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
 80054dc:	2230      	movs	r2, #48	; 0x30
 80054de:	0029      	movs	r1, r5
 80054e0:	0030      	movs	r0, r6
 80054e2:	f004 f905 	bl	80096f0 <lv_obj_get_style_prop>
 80054e6:	0029      	movs	r1, r5
 80054e8:	0002      	movs	r2, r0
 80054ea:	0030      	movs	r0, r6
 80054ec:	f005 f856 	bl	800a59c <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 80054f0:	2233      	movs	r2, #51	; 0x33
 80054f2:	0029      	movs	r1, r5
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 80054f4:	83e0      	strh	r0, [r4, #30]
 80054f6:	0030      	movs	r0, r6
 80054f8:	f004 f8fa 	bl	80096f0 <lv_obj_get_style_prop>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 80054fc:	2223      	movs	r2, #35	; 0x23
 80054fe:	231f      	movs	r3, #31
 8005500:	213e      	movs	r1, #62	; 0x3e
 8005502:	4003      	ands	r3, r0
 8005504:	5ca0      	ldrb	r0, [r4, r2]
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	4388      	bics	r0, r1
 800550a:	4318      	orrs	r0, r3
 800550c:	54a0      	strb	r0, [r4, r2]
 800550e:	e745      	b.n	800539c <lv_obj_init_draw_rect_dsc+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8005510:	2257      	movs	r2, #87	; 0x57
 8005512:	0029      	movs	r1, r5
 8005514:	0030      	movs	r0, r6
 8005516:	f004 f8eb 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 800551a:	2255      	movs	r2, #85	; 0x55
 800551c:	0029      	movs	r1, r5
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 800551e:	6160      	str	r0, [r4, #20]
 8005520:	0030      	movs	r0, r6
 8005522:	f004 f8e5 	bl	80096f0 <lv_obj_get_style_prop>
 8005526:	0029      	movs	r1, r5
 8005528:	0002      	movs	r2, r0
 800552a:	0030      	movs	r0, r6
 800552c:	f005 f836 	bl	800a59c <_lv_obj_style_apply_color_filter>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 8005530:	8320      	strh	r0, [r4, #24]
 8005532:	e73f      	b.n	80053b4 <lv_obj_init_draw_rect_dsc+0x50>

08005534 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	0016      	movs	r6, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 8005538:	2256      	movs	r2, #86	; 0x56
 800553a:	0005      	movs	r5, r0
 800553c:	000c      	movs	r4, r1
 800553e:	f004 f8d7 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8005542:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8005544:	76b0      	strb	r0, [r6, #26]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8005546:	2802      	cmp	r0, #2
 8005548:	d93a      	bls.n	80055c0 <lv_obj_init_draw_label_dsc+0x8c>

    if(part != LV_PART_MAIN) {
 800554a:	2c00      	cmp	r4, #0
 800554c:	d009      	beq.n	8005562 <lv_obj_init_draw_label_dsc+0x2e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800554e:	2260      	movs	r2, #96	; 0x60
 8005550:	0021      	movs	r1, r4
 8005552:	0028      	movs	r0, r5
 8005554:	f004 f8cc 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8005558:	b2c3      	uxtb	r3, r0
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
        if(opa <= LV_OPA_MIN) {
 800555a:	2b02      	cmp	r3, #2
 800555c:	d938      	bls.n	80055d0 <lv_obj_init_draw_label_dsc+0x9c>
            draw_dsc->opa = LV_OPA_TRANSP;
            return;
        }
        if(opa < LV_OPA_MAX) {
 800555e:	2bfc      	cmp	r3, #252	; 0xfc
 8005560:	d92f      	bls.n	80055c2 <lv_obj_init_draw_label_dsc+0x8e>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 8005562:	2255      	movs	r2, #85	; 0x55
 8005564:	0021      	movs	r1, r4
 8005566:	0028      	movs	r0, r5
 8005568:	f004 f8c2 	bl	80096f0 <lv_obj_get_style_prop>
 800556c:	0021      	movs	r1, r4
 800556e:	0002      	movs	r2, r0
 8005570:	0028      	movs	r0, r5
 8005572:	f005 f813 	bl	800a59c <_lv_obj_style_apply_color_filter>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8005576:	2258      	movs	r2, #88	; 0x58
 8005578:	0021      	movs	r1, r4
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
        }
    }

    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 800557a:	81b0      	strh	r0, [r6, #12]
 800557c:	0028      	movs	r0, r5
 800557e:	f004 f8b7 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8005582:	2259      	movs	r2, #89	; 0x59
 8005584:	0021      	movs	r1, r4
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 8005586:	82b0      	strh	r0, [r6, #20]
 8005588:	0028      	movs	r0, r5
 800558a:	f004 f8b1 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 800558e:	225a      	movs	r2, #90	; 0x5a
 8005590:	0021      	movs	r1, r4
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 8005592:	8270      	strh	r0, [r6, #18]
 8005594:	0028      	movs	r0, r5
 8005596:	f004 f8ab 	bl	80096f0 <lv_obj_get_style_prop>
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 800559a:	2207      	movs	r2, #7
 800559c:	0003      	movs	r3, r0
 800559e:	7fb0      	ldrb	r0, [r6, #30]
 80055a0:	4013      	ands	r3, r2
 80055a2:	4390      	bics	r0, r2
 80055a4:	4318      	orrs	r0, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80055a6:	0021      	movs	r1, r4
 80055a8:	77b0      	strb	r0, [r6, #30]
 80055aa:	3250      	adds	r2, #80	; 0x50
 80055ac:	0028      	movs	r0, r5
 80055ae:	f004 f89f 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 80055b2:	225b      	movs	r2, #91	; 0x5b
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 80055b4:	6030      	str	r0, [r6, #0]
 80055b6:	0021      	movs	r1, r4
 80055b8:	0028      	movs	r0, r5
 80055ba:	f004 f899 	bl	80096f0 <lv_obj_get_style_prop>

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 80055be:	7730      	strb	r0, [r6, #28]
}
 80055c0:	bd70      	pop	{r4, r5, r6, pc}
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 80055c2:	23ff      	movs	r3, #255	; 0xff
 80055c4:	7eb2      	ldrb	r2, [r6, #26]
 80055c6:	4018      	ands	r0, r3
 80055c8:	4350      	muls	r0, r2
 80055ca:	1200      	asrs	r0, r0, #8
 80055cc:	76b0      	strb	r0, [r6, #26]
 80055ce:	e7c8      	b.n	8005562 <lv_obj_init_draw_label_dsc+0x2e>
            draw_dsc->opa = LV_OPA_TRANSP;
 80055d0:	2300      	movs	r3, #0
 80055d2:	76b3      	strb	r3, [r6, #26]
            return;
 80055d4:	e7f4      	b.n	80055c0 <lv_obj_init_draw_label_dsc+0x8c>
 80055d6:	46c0      	nop			; (mov r8, r8)

080055d8 <lv_obj_init_draw_img_dsc>:

void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint32_t part, lv_draw_img_dsc_t * draw_dsc)
{
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	0015      	movs	r5, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 80055dc:	2246      	movs	r2, #70	; 0x46
 80055de:	0004      	movs	r4, r0
 80055e0:	000e      	movs	r6, r1
 80055e2:	f004 f885 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80055e6:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
 80055e8:	72e8      	strb	r0, [r5, #11]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 80055ea:	2802      	cmp	r0, #2
 80055ec:	d92f      	bls.n	800564e <lv_obj_init_draw_img_dsc+0x76>

    if(part != LV_PART_MAIN) {
 80055ee:	2e00      	cmp	r6, #0
 80055f0:	d00f      	beq.n	8005612 <lv_obj_init_draw_img_dsc+0x3a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80055f2:	2260      	movs	r2, #96	; 0x60
 80055f4:	0031      	movs	r1, r6
 80055f6:	0020      	movs	r0, r4
 80055f8:	f004 f87a 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80055fc:	b2c3      	uxtb	r3, r0
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
        if(opa <= LV_OPA_MIN) {
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d932      	bls.n	8005668 <lv_obj_init_draw_img_dsc+0x90>
            draw_dsc->opa = LV_OPA_TRANSP;
            return;
        }
        if(opa < LV_OPA_MAX) {
 8005602:	2bfc      	cmp	r3, #252	; 0xfc
 8005604:	d805      	bhi.n	8005612 <lv_obj_init_draw_img_dsc+0x3a>
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8005606:	23ff      	movs	r3, #255	; 0xff
 8005608:	7aea      	ldrb	r2, [r5, #11]
 800560a:	4018      	ands	r0, r3
 800560c:	4350      	muls	r0, r2
 800560e:	1200      	asrs	r0, r0, #8
 8005610:	72e8      	strb	r0, [r5, #11]
        }
    }

    draw_dsc->angle = 0;
 8005612:	2380      	movs	r3, #128	; 0x80
 8005614:	045b      	lsls	r3, r3, #17
 8005616:	602b      	str	r3, [r5, #0]
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005618:	8aa3      	ldrh	r3, [r4, #20]
 800561a:	8a22      	ldrh	r2, [r4, #16]
 800561c:	3301      	adds	r3, #1
 800561e:	1a9b      	subs	r3, r3, r2
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 8005620:	b21b      	sxth	r3, r3
 8005622:	0fda      	lsrs	r2, r3, #31
 8005624:	18d3      	adds	r3, r2, r3
 8005626:	105b      	asrs	r3, r3, #1
 8005628:	80ab      	strh	r3, [r5, #4]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800562a:	8ae3      	ldrh	r3, [r4, #22]
 800562c:	8a62      	ldrh	r2, [r4, #18]
 800562e:	3301      	adds	r3, #1
 8005630:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 8005632:	b21b      	sxth	r3, r3
 8005634:	0fda      	lsrs	r2, r3, #31
 8005636:	18d3      	adds	r3, r2, r3
 8005638:	105b      	asrs	r3, r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR_OPA);
 800563a:	2248      	movs	r2, #72	; 0x48
 800563c:	0031      	movs	r1, r6
 800563e:	0020      	movs	r0, r4
 8005640:	80eb      	strh	r3, [r5, #6]
 8005642:	f004 f855 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8005646:	b2c0      	uxtb	r0, r0

    draw_dsc->recolor_opa = lv_obj_get_style_img_recolor_opa(obj, part);
 8005648:	72a8      	strb	r0, [r5, #10]
    if(draw_dsc->recolor_opa > 0) {
 800564a:	2800      	cmp	r0, #0
 800564c:	d100      	bne.n	8005650 <lv_obj_init_draw_img_dsc+0x78>
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
    }
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 800564e:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR));
 8005650:	2247      	movs	r2, #71	; 0x47
 8005652:	0031      	movs	r1, r6
 8005654:	0020      	movs	r0, r4
 8005656:	f004 f84b 	bl	80096f0 <lv_obj_get_style_prop>
 800565a:	0031      	movs	r1, r6
 800565c:	0002      	movs	r2, r0
 800565e:	0020      	movs	r0, r4
 8005660:	f004 ff9c 	bl	800a59c <_lv_obj_style_apply_color_filter>
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
 8005664:	8128      	strh	r0, [r5, #8]
 8005666:	e7f2      	b.n	800564e <lv_obj_init_draw_img_dsc+0x76>
            draw_dsc->opa = LV_OPA_TRANSP;
 8005668:	2300      	movs	r3, #0
 800566a:	72eb      	strb	r3, [r5, #11]
            return;
 800566c:	e7ef      	b.n	800564e <lv_obj_init_draw_img_dsc+0x76>
 800566e:	46c0      	nop			; (mov r8, r8)

08005670 <lv_obj_calculate_ext_draw_size>:
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8005672:	2240      	movs	r2, #64	; 0x40
 8005674:	0004      	movs	r4, r0
 8005676:	000d      	movs	r5, r1
 8005678:	f004 f83a 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800567c:	b206      	sxth	r6, r0
    lv_coord_t s = 0;

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
    if(sh_width) {
 800567e:	2e00      	cmp	r6, #0
 8005680:	d11f      	bne.n	80056c2 <lv_obj_calculate_ext_draw_size+0x52>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8005682:	2235      	movs	r2, #53	; 0x35
 8005684:	0029      	movs	r1, r5
 8005686:	0020      	movs	r0, r4
 8005688:	f004 f832 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800568c:	b206      	sxth	r6, r0
    lv_coord_t s = 0;
 800568e:	2700      	movs	r7, #0
            s = LV_MAX(s, sh_width);
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
    if(outline_width) {
 8005690:	2e00      	cmp	r6, #0
 8005692:	d14f      	bne.n	8005734 <lv_obj_calculate_ext_draw_size+0xc4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8005694:	2268      	movs	r2, #104	; 0x68
 8005696:	0029      	movs	r1, r5
 8005698:	0020      	movs	r0, r4
 800569a:	f004 f829 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 800569e:	2269      	movs	r2, #105	; 0x69
 80056a0:	0029      	movs	r1, r5
    return (lv_coord_t)v.num;
 80056a2:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80056a4:	0020      	movs	r0, r4
 80056a6:	f004 f823 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80056aa:	b200      	sxth	r0, r0
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
    lv_coord_t wh = LV_MAX(w, h);
 80056ac:	1c03      	adds	r3, r0, #0
 80056ae:	42b0      	cmp	r0, r6
 80056b0:	da00      	bge.n	80056b4 <lv_obj_calculate_ext_draw_size+0x44>
 80056b2:	1c33      	adds	r3, r6, #0
 80056b4:	b21a      	sxth	r2, r3
    if(wh > 0) s += wh;
 80056b6:	2a00      	cmp	r2, #0
 80056b8:	dd01      	ble.n	80056be <lv_obj_calculate_ext_draw_size+0x4e>
 80056ba:	18ff      	adds	r7, r7, r3
 80056bc:	b23f      	sxth	r7, r7

    return s;
}
 80056be:	0038      	movs	r0, r7
 80056c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 80056c2:	2245      	movs	r2, #69	; 0x45
 80056c4:	0029      	movs	r1, r5
 80056c6:	0020      	movs	r0, r4
 80056c8:	f004 f812 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80056cc:	b2c0      	uxtb	r0, r0
        if(sh_opa > LV_OPA_MIN) {
 80056ce:	2802      	cmp	r0, #2
 80056d0:	d9d7      	bls.n	8005682 <lv_obj_calculate_ext_draw_size+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 80056d2:	2243      	movs	r2, #67	; 0x43
 80056d4:	0029      	movs	r1, r5
 80056d6:	0020      	movs	r0, r4
 80056d8:	f004 f80a 	bl	80096f0 <lv_obj_get_style_prop>
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 80056dc:	0ff7      	lsrs	r7, r6, #31
 80056de:	19bf      	adds	r7, r7, r6
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 80056e0:	3001      	adds	r0, #1
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 80056e2:	107f      	asrs	r7, r7, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 80056e4:	2241      	movs	r2, #65	; 0x41
 80056e6:	0029      	movs	r1, r5
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 80056e8:	183f      	adds	r7, r7, r0
 80056ea:	0020      	movs	r0, r4
 80056ec:	f004 f800 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 80056f0:	2242      	movs	r2, #66	; 0x42
    return (lv_coord_t)v.num;
 80056f2:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 80056f4:	0029      	movs	r1, r5
 80056f6:	0020      	movs	r0, r4
 80056f8:	f003 fffa 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80056fc:	b203      	sxth	r3, r0
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 80056fe:	17da      	asrs	r2, r3, #31
 8005700:	189b      	adds	r3, r3, r2
 8005702:	4053      	eors	r3, r2
 8005704:	17f2      	asrs	r2, r6, #31
 8005706:	18b6      	adds	r6, r6, r2
 8005708:	4056      	eors	r6, r2
 800570a:	b2b1      	uxth	r1, r6
 800570c:	1c1a      	adds	r2, r3, #0
 800570e:	b29b      	uxth	r3, r3
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8005710:	b2bf      	uxth	r7, r7
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 8005712:	428b      	cmp	r3, r1
 8005714:	d200      	bcs.n	8005718 <lv_obj_calculate_ext_draw_size+0xa8>
 8005716:	1c32      	adds	r2, r6, #0
 8005718:	18ba      	adds	r2, r7, r2
            s = LV_MAX(s, sh_width);
 800571a:	b213      	sxth	r3, r2
 800571c:	43db      	mvns	r3, r3
 800571e:	17df      	asrs	r7, r3, #31
 8005720:	4017      	ands	r7, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8005722:	0029      	movs	r1, r5
 8005724:	2235      	movs	r2, #53	; 0x35
 8005726:	0020      	movs	r0, r4
 8005728:	f003 ffe2 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800572c:	b206      	sxth	r6, r0
 800572e:	b23f      	sxth	r7, r7
    if(outline_width) {
 8005730:	2e00      	cmp	r6, #0
 8005732:	d0af      	beq.n	8005694 <lv_obj_calculate_ext_draw_size+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 8005734:	2237      	movs	r2, #55	; 0x37
 8005736:	0029      	movs	r1, r5
 8005738:	0020      	movs	r0, r4
 800573a:	f003 ffd9 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800573e:	b2c0      	uxtb	r0, r0
        if(outline_opa > LV_OPA_MIN) {
 8005740:	2802      	cmp	r0, #2
 8005742:	d9a7      	bls.n	8005694 <lv_obj_calculate_ext_draw_size+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8005744:	2238      	movs	r2, #56	; 0x38
 8005746:	0029      	movs	r1, r5
 8005748:	0020      	movs	r0, r4
 800574a:	f003 ffd1 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800574e:	b200      	sxth	r0, r0
            s = LV_MAX(s, outline_pad + outline_width);
 8005750:	1986      	adds	r6, r0, r6
 8005752:	42be      	cmp	r6, r7
 8005754:	da00      	bge.n	8005758 <lv_obj_calculate_ext_draw_size+0xe8>
 8005756:	003e      	movs	r6, r7
 8005758:	b237      	sxth	r7, r6
 800575a:	e79b      	b.n	8005694 <lv_obj_calculate_ext_draw_size+0x24>

0800575c <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	000d      	movs	r5, r1
 8005760:	0004      	movs	r4, r0
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 8005762:	2148      	movs	r1, #72	; 0x48
 8005764:	f00c ffa4 	bl	80126b0 <lv_memset_00>
    dsc->draw_ctx = draw_ctx;
 8005768:	6025      	str	r5, [r4, #0]
}
 800576a:	bd70      	pop	{r4, r5, r6, pc}

0800576c <lv_obj_refresh_ext_draw_size>:
    if(dsc->class_p == class_p && dsc->type == type) return true;
    else return false;
}

void lv_obj_refresh_ext_draw_size(lv_obj_t * obj)
{
 800576c:	b570      	push	{r4, r5, r6, lr}
    if(s_new != s_old) lv_obj_invalidate(obj);
}

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 800576e:	6883      	ldr	r3, [r0, #8]
{
 8005770:	0004      	movs	r4, r0
 8005772:	b082      	sub	sp, #8
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 8005774:	2b00      	cmp	r3, #0
 8005776:	d028      	beq.n	80057ca <lv_obj_refresh_ext_draw_size+0x5e>
 8005778:	2616      	movs	r6, #22
 800577a:	5f9e      	ldrsh	r6, [r3, r6]
    lv_coord_t s_new = 0;
 800577c:	466b      	mov	r3, sp
 800577e:	1d9d      	adds	r5, r3, #6
 8005780:	2300      	movs	r3, #0
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 8005782:	002a      	movs	r2, r5
 8005784:	2113      	movs	r1, #19
 8005786:	0020      	movs	r0, r4
    lv_coord_t s_new = 0;
 8005788:	802b      	strh	r3, [r5, #0]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 800578a:	f7fc fae7 	bl	8001d5c <lv_event_send>
    if(s_new != s_old) lv_obj_invalidate(obj);
 800578e:	2300      	movs	r3, #0
 8005790:	5eea      	ldrsh	r2, [r5, r3]
 8005792:	0033      	movs	r3, r6
 8005794:	42b2      	cmp	r2, r6
 8005796:	d004      	beq.n	80057a2 <lv_obj_refresh_ext_draw_size+0x36>
 8005798:	0020      	movs	r0, r4
 800579a:	f000 fed1 	bl	8006540 <lv_obj_invalidate>
        obj->spec_attr->ext_draw_size = s_new;
 800579e:	2200      	movs	r2, #0
 80057a0:	5eab      	ldrsh	r3, [r5, r2]
    if(obj->spec_attr) {
 80057a2:	68a2      	ldr	r2, [r4, #8]
 80057a4:	2a00      	cmp	r2, #0
 80057a6:	d007      	beq.n	80057b8 <lv_obj_refresh_ext_draw_size+0x4c>
        obj->spec_attr->ext_draw_size = s_new;
 80057a8:	82d3      	strh	r3, [r2, #22]
    if(s_new != s_old) lv_obj_invalidate(obj);
 80057aa:	429e      	cmp	r6, r3
 80057ac:	d002      	beq.n	80057b4 <lv_obj_refresh_ext_draw_size+0x48>
 80057ae:	0020      	movs	r0, r4
 80057b0:	f000 fec6 	bl	8006540 <lv_obj_invalidate>
}
 80057b4:	b002      	add	sp, #8
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
    else if(s_new != 0) {
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0f6      	beq.n	80057aa <lv_obj_refresh_ext_draw_size+0x3e>
        lv_obj_allocate_spec_attr(obj);
 80057bc:	0020      	movs	r0, r4
 80057be:	f7ff fc5b 	bl	8005078 <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 80057c2:	2200      	movs	r2, #0
 80057c4:	5eab      	ldrsh	r3, [r5, r2]
 80057c6:	68a2      	ldr	r2, [r4, #8]
 80057c8:	e7ee      	b.n	80057a8 <lv_obj_refresh_ext_draw_size+0x3c>
    else return 0;
 80057ca:	2600      	movs	r6, #0
 80057cc:	e7d6      	b.n	800577c <lv_obj_refresh_ext_draw_size+0x10>
 80057ce:	46c0      	nop			; (mov r8, r8)

080057d0 <_lv_obj_get_ext_draw_size>:
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 80057d0:	6883      	ldr	r3, [r0, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <_lv_obj_get_ext_draw_size+0xc>
 80057d6:	2016      	movs	r0, #22
 80057d8:	5e18      	ldrsh	r0, [r3, r0]
}
 80057da:	4770      	bx	lr
    else return 0;
 80057dc:	2000      	movs	r0, #0
 80057de:	e7fc      	b.n	80057da <_lv_obj_get_ext_draw_size+0xa>

080057e0 <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{

    if(obj->spec_attr) return obj->spec_attr->layer_type;
 80057e0:	6883      	ldr	r3, [r0, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <_lv_obj_get_layer_type+0xc>
 80057e6:	7e98      	ldrb	r0, [r3, #26]
 80057e8:	0980      	lsrs	r0, r0, #6
    else return LV_LAYER_TYPE_NONE;
}
 80057ea:	4770      	bx	lr
    else return LV_LAYER_TYPE_NONE;
 80057ec:	2000      	movs	r0, #0
 80057ee:	e7fc      	b.n	80057ea <_lv_obj_get_layer_type+0xa>

080057f0 <transform_point>:
        }
    }
}

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 80057f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057f2:	46d6      	mov	lr, sl
 80057f4:	4646      	mov	r6, r8
 80057f6:	464f      	mov	r7, r9
 80057f8:	b5c0      	push	{r6, r7, lr}
 80057fa:	4690      	mov	r8, r2
 80057fc:	b082      	sub	sp, #8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 80057fe:	226d      	movs	r2, #109	; 0x6d
 8005800:	000f      	movs	r7, r1
 8005802:	2100      	movs	r1, #0
 8005804:	0004      	movs	r4, r0
 8005806:	f003 ff73 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800580a:	b203      	sxth	r3, r0
 800580c:	469a      	mov	sl, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800580e:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8005810:	226c      	movs	r2, #108	; 0x6c
 8005812:	2100      	movs	r1, #0
 8005814:	0020      	movs	r0, r4
 8005816:	f003 ff6b 	bl	80096f0 <lv_obj_get_style_prop>
    int16_t angle = lv_obj_get_style_transform_angle(obj, 0);
    int16_t zoom = lv_obj_get_style_transform_zoom(obj, 0);

    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 800581a:	4653      	mov	r3, sl
    return (lv_coord_t)v.num;
 800581c:	b205      	sxth	r5, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d103      	bne.n	800582a <transform_point+0x3a>
 8005822:	3301      	adds	r3, #1
 8005824:	33ff      	adds	r3, #255	; 0xff
 8005826:	429d      	cmp	r5, r3
 8005828:	d01c      	beq.n	8005864 <transform_point+0x74>

    lv_point_t pivot;
    pivot.x = obj->coords.x1 + lv_obj_get_style_transform_pivot_x(obj, 0);
 800582a:	8a23      	ldrh	r3, [r4, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800582c:	226e      	movs	r2, #110	; 0x6e
 800582e:	2100      	movs	r1, #0
 8005830:	0020      	movs	r0, r4
 8005832:	4699      	mov	r9, r3
 8005834:	f003 ff5c 	bl	80096f0 <lv_obj_get_style_prop>
 8005838:	466b      	mov	r3, sp
 800583a:	4448      	add	r0, r9
 800583c:	8098      	strh	r0, [r3, #4]
    pivot.y = obj->coords.y1 + lv_obj_get_style_transform_pivot_y(obj, 0);
 800583e:	8a63      	ldrh	r3, [r4, #18]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 8005840:	226f      	movs	r2, #111	; 0x6f
 8005842:	2100      	movs	r1, #0
 8005844:	0020      	movs	r0, r4
 8005846:	4699      	mov	r9, r3
 8005848:	f003 ff52 	bl	80096f0 <lv_obj_get_style_prop>
 800584c:	466b      	mov	r3, sp
 800584e:	4448      	add	r0, r9
 8005850:	80d8      	strh	r0, [r3, #6]
    if(inv) {
 8005852:	4643      	mov	r3, r8
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10b      	bne.n	8005870 <transform_point+0x80>
        angle = -angle;
        zoom = (256 * 256) / zoom;
    }

    lv_point_transform(p, angle, zoom, &pivot);
 8005858:	002a      	movs	r2, r5
 800585a:	4651      	mov	r1, sl
 800585c:	0038      	movs	r0, r7
 800585e:	ab01      	add	r3, sp, #4
 8005860:	f00b ff68 	bl	8011734 <lv_point_transform>
}
 8005864:	b002      	add	sp, #8
 8005866:	bce0      	pop	{r5, r6, r7}
 8005868:	46ba      	mov	sl, r7
 800586a:	46b1      	mov	r9, r6
 800586c:	46a8      	mov	r8, r5
 800586e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        zoom = (256 * 256) / zoom;
 8005870:	2080      	movs	r0, #128	; 0x80
        angle = -angle;
 8005872:	4276      	negs	r6, r6
        zoom = (256 * 256) / zoom;
 8005874:	0029      	movs	r1, r5
        angle = -angle;
 8005876:	b233      	sxth	r3, r6
        zoom = (256 * 256) / zoom;
 8005878:	0240      	lsls	r0, r0, #9
        angle = -angle;
 800587a:	469a      	mov	sl, r3
        zoom = (256 * 256) / zoom;
 800587c:	f7fa fcde 	bl	800023c <__divsi3>
 8005880:	b205      	sxth	r5, r0
 8005882:	e7e9      	b.n	8005858 <transform_point+0x68>

08005884 <lv_obj_move_children_by.constprop.0>:
void lv_obj_move_children_by(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff, bool ignore_floating)
 8005884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005886:	46de      	mov	lr, fp
 8005888:	4645      	mov	r5, r8
 800588a:	4657      	mov	r7, sl
 800588c:	464e      	mov	r6, r9
 800588e:	b5e0      	push	{r5, r6, r7, lr}
 8005890:	b099      	sub	sp, #100	; 0x64
 8005892:	000d      	movs	r5, r1
 8005894:	0014      	movs	r4, r2
 8005896:	9015      	str	r0, [sp, #84]	; 0x54
 8005898:	9116      	str	r1, [sp, #88]	; 0x58
 800589a:	9217      	str	r2, [sp, #92]	; 0x5c
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800589c:	f005 fb6a 	bl	800af74 <lv_obj_get_child_cnt>
 80058a0:	900e      	str	r0, [sp, #56]	; 0x38
    for(i = 0; i < child_cnt; i++) {
 80058a2:	2800      	cmp	r0, #0
 80058a4:	d100      	bne.n	80058a8 <lv_obj_move_children_by.constprop.0+0x24>
 80058a6:	e144      	b.n	8005b32 <lv_obj_move_children_by.constprop.0+0x2ae>
        child->coords.x1 += x_diff;
 80058a8:	b2ab      	uxth	r3, r5
 80058aa:	4698      	mov	r8, r3
    for(i = 0; i < child_cnt; i++) {
 80058ac:	2300      	movs	r3, #0
        child->coords.y1 += y_diff;
 80058ae:	b2a7      	uxth	r7, r4
    for(i = 0; i < child_cnt; i++) {
 80058b0:	9309      	str	r3, [sp, #36]	; 0x24
 80058b2:	003b      	movs	r3, r7
 80058b4:	4647      	mov	r7, r8
 80058b6:	4698      	mov	r8, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 80058b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	0092      	lsls	r2, r2, #2
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	58d2      	ldr	r2, [r2, r3]
 80058c4:	920f      	str	r2, [sp, #60]	; 0x3c
        child->coords.x1 += x_diff;
 80058c6:	8a13      	ldrh	r3, [r2, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80058c8:	0010      	movs	r0, r2
        child->coords.x1 += x_diff;
 80058ca:	18fb      	adds	r3, r7, r3
 80058cc:	8213      	strh	r3, [r2, #16]
        child->coords.y1 += y_diff;
 80058ce:	8a53      	ldrh	r3, [r2, #18]
 80058d0:	4443      	add	r3, r8
 80058d2:	8253      	strh	r3, [r2, #18]
        child->coords.x2 += x_diff;
 80058d4:	8a93      	ldrh	r3, [r2, #20]
 80058d6:	18fb      	adds	r3, r7, r3
 80058d8:	8293      	strh	r3, [r2, #20]
        child->coords.y2 += y_diff;
 80058da:	8ad3      	ldrh	r3, [r2, #22]
 80058dc:	4443      	add	r3, r8
 80058de:	82d3      	strh	r3, [r2, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80058e0:	f005 fb48 	bl	800af74 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80058e4:	2300      	movs	r3, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80058e6:	9010      	str	r0, [sp, #64]	; 0x40
    for(i = 0; i < child_cnt; i++) {
 80058e8:	930a      	str	r3, [sp, #40]	; 0x28
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d100      	bne.n	80058f0 <lv_obj_move_children_by.constprop.0+0x6c>
 80058ee:	e119      	b.n	8005b24 <lv_obj_move_children_by.constprop.0+0x2a0>
        lv_obj_t * child = obj->spec_attr->children[i];
 80058f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	0092      	lsls	r2, r2, #2
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	46c3      	mov	fp, r8
 80058fc:	58d2      	ldr	r2, [r2, r3]
 80058fe:	9211      	str	r2, [sp, #68]	; 0x44
        child->coords.x1 += x_diff;
 8005900:	8a13      	ldrh	r3, [r2, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005902:	0010      	movs	r0, r2
        child->coords.x1 += x_diff;
 8005904:	18fb      	adds	r3, r7, r3
 8005906:	8213      	strh	r3, [r2, #16]
        child->coords.y1 += y_diff;
 8005908:	8a53      	ldrh	r3, [r2, #18]
 800590a:	4443      	add	r3, r8
 800590c:	8253      	strh	r3, [r2, #18]
        child->coords.x2 += x_diff;
 800590e:	8a93      	ldrh	r3, [r2, #20]
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	8293      	strh	r3, [r2, #20]
        child->coords.y2 += y_diff;
 8005914:	8ad3      	ldrh	r3, [r2, #22]
 8005916:	4443      	add	r3, r8
 8005918:	82d3      	strh	r3, [r2, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800591a:	f005 fb2b 	bl	800af74 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 800591e:	2300      	movs	r3, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005920:	9012      	str	r0, [sp, #72]	; 0x48
    for(i = 0; i < child_cnt; i++) {
 8005922:	930b      	str	r3, [sp, #44]	; 0x2c
 8005924:	2800      	cmp	r0, #0
 8005926:	d100      	bne.n	800592a <lv_obj_move_children_by.constprop.0+0xa6>
 8005928:	e0f5      	b.n	8005b16 <lv_obj_move_children_by.constprop.0+0x292>
        lv_obj_t * child = obj->spec_attr->children[i];
 800592a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800592c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	0092      	lsls	r2, r2, #2
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	46d9      	mov	r9, fp
 8005936:	58d2      	ldr	r2, [r2, r3]
 8005938:	9213      	str	r2, [sp, #76]	; 0x4c
        child->coords.x1 += x_diff;
 800593a:	8a13      	ldrh	r3, [r2, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800593c:	0010      	movs	r0, r2
        child->coords.x1 += x_diff;
 800593e:	18fb      	adds	r3, r7, r3
 8005940:	8213      	strh	r3, [r2, #16]
        child->coords.y1 += y_diff;
 8005942:	8a53      	ldrh	r3, [r2, #18]
 8005944:	445b      	add	r3, fp
 8005946:	8253      	strh	r3, [r2, #18]
        child->coords.x2 += x_diff;
 8005948:	8a93      	ldrh	r3, [r2, #20]
 800594a:	18fb      	adds	r3, r7, r3
 800594c:	8293      	strh	r3, [r2, #20]
        child->coords.y2 += y_diff;
 800594e:	8ad3      	ldrh	r3, [r2, #22]
 8005950:	445b      	add	r3, fp
 8005952:	82d3      	strh	r3, [r2, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005954:	f005 fb0e 	bl	800af74 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8005958:	2300      	movs	r3, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800595a:	9014      	str	r0, [sp, #80]	; 0x50
    for(i = 0; i < child_cnt; i++) {
 800595c:	930c      	str	r3, [sp, #48]	; 0x30
 800595e:	2800      	cmp	r0, #0
 8005960:	d100      	bne.n	8005964 <lv_obj_move_children_by.constprop.0+0xe0>
 8005962:	e0d0      	b.n	8005b06 <lv_obj_move_children_by.constprop.0+0x282>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005964:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	0092      	lsls	r2, r2, #2
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	58d3      	ldr	r3, [r2, r3]
 8005970:	4698      	mov	r8, r3
        child->coords.x1 += x_diff;
 8005972:	4642      	mov	r2, r8
 8005974:	8a1b      	ldrh	r3, [r3, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005976:	4640      	mov	r0, r8
        child->coords.x1 += x_diff;
 8005978:	18fb      	adds	r3, r7, r3
 800597a:	8213      	strh	r3, [r2, #16]
        child->coords.y1 += y_diff;
 800597c:	8a53      	ldrh	r3, [r2, #18]
 800597e:	444b      	add	r3, r9
 8005980:	8253      	strh	r3, [r2, #18]
        child->coords.x2 += x_diff;
 8005982:	8a93      	ldrh	r3, [r2, #20]
 8005984:	18fb      	adds	r3, r7, r3
 8005986:	8293      	strh	r3, [r2, #20]
        child->coords.y2 += y_diff;
 8005988:	8ad3      	ldrh	r3, [r2, #22]
 800598a:	444b      	add	r3, r9
 800598c:	82d3      	strh	r3, [r2, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800598e:	f005 faf1 	bl	800af74 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8005992:	2300      	movs	r3, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005994:	9005      	str	r0, [sp, #20]
    for(i = 0; i < child_cnt; i++) {
 8005996:	469b      	mov	fp, r3
 8005998:	2800      	cmp	r0, #0
 800599a:	d100      	bne.n	800599e <lv_obj_move_children_by.constprop.0+0x11a>
 800599c:	e0ab      	b.n	8005af6 <lv_obj_move_children_by.constprop.0+0x272>
 800599e:	003b      	movs	r3, r7
 80059a0:	46ca      	mov	sl, r9
 80059a2:	465f      	mov	r7, fp
 80059a4:	46c1      	mov	r9, r8
 80059a6:	469b      	mov	fp, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 80059a8:	464b      	mov	r3, r9
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	00ba      	lsls	r2, r7, #2
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	58d6      	ldr	r6, [r2, r3]
        child->coords.x1 += x_diff;
 80059b2:	8a33      	ldrh	r3, [r6, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80059b4:	0030      	movs	r0, r6
        child->coords.x1 += x_diff;
 80059b6:	445b      	add	r3, fp
 80059b8:	8233      	strh	r3, [r6, #16]
        child->coords.y1 += y_diff;
 80059ba:	8a73      	ldrh	r3, [r6, #18]
 80059bc:	4453      	add	r3, sl
 80059be:	8273      	strh	r3, [r6, #18]
        child->coords.x2 += x_diff;
 80059c0:	8ab3      	ldrh	r3, [r6, #20]
 80059c2:	445b      	add	r3, fp
 80059c4:	82b3      	strh	r3, [r6, #20]
        child->coords.y2 += y_diff;
 80059c6:	8af3      	ldrh	r3, [r6, #22]
 80059c8:	4453      	add	r3, sl
 80059ca:	82f3      	strh	r3, [r6, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80059cc:	f005 fad2 	bl	800af74 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80059d0:	2300      	movs	r3, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80059d2:	9003      	str	r0, [sp, #12]
    for(i = 0; i < child_cnt; i++) {
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d100      	bne.n	80059dc <lv_obj_move_children_by.constprop.0+0x158>
 80059da:	e085      	b.n	8005ae8 <lv_obj_move_children_by.constprop.0+0x264>
 80059dc:	465b      	mov	r3, fp
 80059de:	46cb      	mov	fp, r9
 80059e0:	46b9      	mov	r9, r7
 80059e2:	001f      	movs	r7, r3
 80059e4:	9608      	str	r6, [sp, #32]
        lv_obj_t * child = obj->spec_attr->children[i];
 80059e6:	9b08      	ldr	r3, [sp, #32]
 80059e8:	9a01      	ldr	r2, [sp, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	0092      	lsls	r2, r2, #2
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	58d6      	ldr	r6, [r2, r3]
        child->coords.x1 += x_diff;
 80059f2:	8a33      	ldrh	r3, [r6, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80059f4:	0030      	movs	r0, r6
        child->coords.x1 += x_diff;
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	8233      	strh	r3, [r6, #16]
        child->coords.y1 += y_diff;
 80059fa:	8a73      	ldrh	r3, [r6, #18]
 80059fc:	46b0      	mov	r8, r6
 80059fe:	4453      	add	r3, sl
 8005a00:	8273      	strh	r3, [r6, #18]
        child->coords.x2 += x_diff;
 8005a02:	8ab3      	ldrh	r3, [r6, #20]
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	82b3      	strh	r3, [r6, #20]
        child->coords.y2 += y_diff;
 8005a08:	8af3      	ldrh	r3, [r6, #22]
 8005a0a:	4453      	add	r3, sl
 8005a0c:	82f3      	strh	r3, [r6, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005a0e:	f005 fab1 	bl	800af74 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8005a12:	2300      	movs	r3, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005a14:	900d      	str	r0, [sp, #52]	; 0x34
    for(i = 0; i < child_cnt; i++) {
 8005a16:	9304      	str	r3, [sp, #16]
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d05a      	beq.n	8005ad2 <lv_obj_move_children_by.constprop.0+0x24e>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005a1c:	4643      	mov	r3, r8
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	9a04      	ldr	r2, [sp, #16]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	0092      	lsls	r2, r2, #2
 8005a26:	58d6      	ldr	r6, [r2, r3]
    for(i = 0; i < child_cnt; i++) {
 8005a28:	2500      	movs	r5, #0
        child->coords.x1 += x_diff;
 8005a2a:	8a33      	ldrh	r3, [r6, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005a2c:	0030      	movs	r0, r6
        child->coords.x1 += x_diff;
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	8233      	strh	r3, [r6, #16]
        child->coords.y1 += y_diff;
 8005a32:	8a73      	ldrh	r3, [r6, #18]
 8005a34:	4453      	add	r3, sl
 8005a36:	8273      	strh	r3, [r6, #18]
        child->coords.x2 += x_diff;
 8005a38:	8ab3      	ldrh	r3, [r6, #20]
 8005a3a:	18fb      	adds	r3, r7, r3
 8005a3c:	82b3      	strh	r3, [r6, #20]
        child->coords.y2 += y_diff;
 8005a3e:	8af3      	ldrh	r3, [r6, #22]
 8005a40:	4453      	add	r3, sl
 8005a42:	82f3      	strh	r3, [r6, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005a44:	f005 fa96 	bl	800af74 <lv_obj_get_child_cnt>
 8005a48:	9006      	str	r0, [sp, #24]
    for(i = 0; i < child_cnt; i++) {
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d03b      	beq.n	8005ac6 <lv_obj_move_children_by.constprop.0+0x242>
 8005a4e:	4653      	mov	r3, sl
 8005a50:	46b2      	mov	sl, r6
 8005a52:	001e      	movs	r6, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 8005a54:	4653      	mov	r3, sl
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	00aa      	lsls	r2, r5, #2
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	58d4      	ldr	r4, [r2, r3]
        child->coords.x1 += x_diff;
 8005a5e:	8a23      	ldrh	r3, [r4, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005a60:	0020      	movs	r0, r4
        child->coords.x1 += x_diff;
 8005a62:	18fb      	adds	r3, r7, r3
 8005a64:	8223      	strh	r3, [r4, #16]
        child->coords.y1 += y_diff;
 8005a66:	8a63      	ldrh	r3, [r4, #18]
 8005a68:	18f3      	adds	r3, r6, r3
 8005a6a:	8263      	strh	r3, [r4, #18]
        child->coords.x2 += x_diff;
 8005a6c:	8aa3      	ldrh	r3, [r4, #20]
 8005a6e:	18fb      	adds	r3, r7, r3
 8005a70:	82a3      	strh	r3, [r4, #20]
        child->coords.y2 += y_diff;
 8005a72:	8ae3      	ldrh	r3, [r4, #22]
 8005a74:	18f3      	adds	r3, r6, r3
 8005a76:	82e3      	strh	r3, [r4, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005a78:	f005 fa7c 	bl	800af74 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8005a7c:	2300      	movs	r3, #0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005a7e:	9007      	str	r0, [sp, #28]
    for(i = 0; i < child_cnt; i++) {
 8005a80:	9302      	str	r3, [sp, #8]
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d01a      	beq.n	8005abc <lv_obj_move_children_by.constprop.0+0x238>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005a86:	68a3      	ldr	r3, [r4, #8]
 8005a88:	9a02      	ldr	r2, [sp, #8]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	0092      	lsls	r2, r2, #2
 8005a8e:	58d0      	ldr	r0, [r2, r3]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8005a90:	9916      	ldr	r1, [sp, #88]	; 0x58
        child->coords.x1 += x_diff;
 8005a92:	8a03      	ldrh	r3, [r0, #16]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8005a94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        child->coords.x1 += x_diff;
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	8203      	strh	r3, [r0, #16]
        child->coords.y1 += y_diff;
 8005a9a:	8a43      	ldrh	r3, [r0, #18]
 8005a9c:	18f3      	adds	r3, r6, r3
 8005a9e:	8243      	strh	r3, [r0, #18]
        child->coords.x2 += x_diff;
 8005aa0:	8a83      	ldrh	r3, [r0, #20]
 8005aa2:	18fb      	adds	r3, r7, r3
 8005aa4:	8283      	strh	r3, [r0, #20]
        child->coords.y2 += y_diff;
 8005aa6:	8ac3      	ldrh	r3, [r0, #22]
 8005aa8:	18f3      	adds	r3, r6, r3
 8005aaa:	82c3      	strh	r3, [r0, #22]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8005aac:	f7ff feea 	bl	8005884 <lv_obj_move_children_by.constprop.0>
    for(i = 0; i < child_cnt; i++) {
 8005ab0:	9a02      	ldr	r2, [sp, #8]
 8005ab2:	1c53      	adds	r3, r2, #1
 8005ab4:	9a07      	ldr	r2, [sp, #28]
 8005ab6:	9302      	str	r3, [sp, #8]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d1e4      	bne.n	8005a86 <lv_obj_move_children_by.constprop.0+0x202>
 8005abc:	9b06      	ldr	r3, [sp, #24]
 8005abe:	3501      	adds	r5, #1
 8005ac0:	42ab      	cmp	r3, r5
 8005ac2:	d1c7      	bne.n	8005a54 <lv_obj_move_children_by.constprop.0+0x1d0>
 8005ac4:	46b2      	mov	sl, r6
 8005ac6:	9b04      	ldr	r3, [sp, #16]
 8005ac8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005aca:	3301      	adds	r3, #1
 8005acc:	9304      	str	r3, [sp, #16]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d1a4      	bne.n	8005a1c <lv_obj_move_children_by.constprop.0+0x198>
 8005ad2:	9b01      	ldr	r3, [sp, #4]
 8005ad4:	9a03      	ldr	r2, [sp, #12]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	9301      	str	r3, [sp, #4]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d000      	beq.n	8005ae0 <lv_obj_move_children_by.constprop.0+0x25c>
 8005ade:	e782      	b.n	80059e6 <lv_obj_move_children_by.constprop.0+0x162>
 8005ae0:	003b      	movs	r3, r7
 8005ae2:	464f      	mov	r7, r9
 8005ae4:	46d9      	mov	r9, fp
 8005ae6:	469b      	mov	fp, r3
 8005ae8:	9b05      	ldr	r3, [sp, #20]
 8005aea:	3701      	adds	r7, #1
 8005aec:	42bb      	cmp	r3, r7
 8005aee:	d000      	beq.n	8005af2 <lv_obj_move_children_by.constprop.0+0x26e>
 8005af0:	e75a      	b.n	80059a8 <lv_obj_move_children_by.constprop.0+0x124>
 8005af2:	465f      	mov	r7, fp
 8005af4:	46d1      	mov	r9, sl
 8005af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005af8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005afa:	3301      	adds	r3, #1
 8005afc:	930c      	str	r3, [sp, #48]	; 0x30
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d000      	beq.n	8005b04 <lv_obj_move_children_by.constprop.0+0x280>
 8005b02:	e72f      	b.n	8005964 <lv_obj_move_children_by.constprop.0+0xe0>
 8005b04:	46cb      	mov	fp, r9
 8005b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d000      	beq.n	8005b14 <lv_obj_move_children_by.constprop.0+0x290>
 8005b12:	e70a      	b.n	800592a <lv_obj_move_children_by.constprop.0+0xa6>
 8005b14:	46d8      	mov	r8, fp
 8005b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	930a      	str	r3, [sp, #40]	; 0x28
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d000      	beq.n	8005b24 <lv_obj_move_children_by.constprop.0+0x2a0>
 8005b22:	e6e5      	b.n	80058f0 <lv_obj_move_children_by.constprop.0+0x6c>
 8005b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b28:	3301      	adds	r3, #1
 8005b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d000      	beq.n	8005b32 <lv_obj_move_children_by.constprop.0+0x2ae>
 8005b30:	e6c2      	b.n	80058b8 <lv_obj_move_children_by.constprop.0+0x34>
}
 8005b32:	b019      	add	sp, #100	; 0x64
 8005b34:	bcf0      	pop	{r4, r5, r6, r7}
 8005b36:	46bb      	mov	fp, r7
 8005b38:	46b2      	mov	sl, r6
 8005b3a:	46a9      	mov	r9, r5
 8005b3c:	46a0      	mov	r8, r4
 8005b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b40 <lv_obj_set_pos>:
{
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	000e      	movs	r6, r1
 8005b46:	0015      	movs	r5, r2
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	2107      	movs	r1, #7
 8005b4c:	aa01      	add	r2, sp, #4
{
 8005b4e:	0004      	movs	r4, r0
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8005b50:	f004 fc30 	bl	800a3b4 <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8005b54:	2801      	cmp	r0, #1
 8005b56:	d017      	beq.n	8005b88 <lv_obj_set_pos+0x48>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	d104      	bne.n	8005b66 <lv_obj_set_pos+0x26>
        lv_obj_set_style_x(obj, x, 0);
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	0031      	movs	r1, r6
 8005b60:	0020      	movs	r0, r4
 8005b62:	f004 fea1 	bl	800a8a8 <lv_obj_set_style_x>
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8005b66:	2300      	movs	r3, #0
 8005b68:	2108      	movs	r1, #8
 8005b6a:	0020      	movs	r0, r4
 8005b6c:	aa01      	add	r2, sp, #4
 8005b6e:	f004 fc21 	bl	800a3b4 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8005b72:	2801      	cmp	r0, #1
 8005b74:	d013      	beq.n	8005b9e <lv_obj_set_pos+0x5e>
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d104      	bne.n	8005b84 <lv_obj_set_pos+0x44>
        lv_obj_set_style_y(obj, y, 0);
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	0029      	movs	r1, r5
 8005b7e:	0020      	movs	r0, r4
 8005b80:	f004 fe9a 	bl	800a8b8 <lv_obj_set_style_y>
}
 8005b84:	b002      	add	sp, #8
 8005b86:	bd70      	pop	{r4, r5, r6, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8005b88:	9b01      	ldr	r3, [sp, #4]
 8005b8a:	42b3      	cmp	r3, r6
 8005b8c:	d1e6      	bne.n	8005b5c <lv_obj_set_pos+0x1c>
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8005b8e:	2300      	movs	r3, #0
 8005b90:	2108      	movs	r1, #8
 8005b92:	0020      	movs	r0, r4
 8005b94:	aa01      	add	r2, sp, #4
 8005b96:	f004 fc0d 	bl	800a3b4 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8005b9a:	2801      	cmp	r0, #1
 8005b9c:	d1eb      	bne.n	8005b76 <lv_obj_set_pos+0x36>
 8005b9e:	9b01      	ldr	r3, [sp, #4]
 8005ba0:	42ab      	cmp	r3, r5
 8005ba2:	d1ea      	bne.n	8005b7a <lv_obj_set_pos+0x3a>
 8005ba4:	e7ee      	b.n	8005b84 <lv_obj_set_pos+0x44>
 8005ba6:	46c0      	nop			; (mov r8, r8)

08005ba8 <lv_obj_set_x>:
{
 8005ba8:	b530      	push	{r4, r5, lr}
 8005baa:	b083      	sub	sp, #12
 8005bac:	000d      	movs	r5, r1
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2107      	movs	r1, #7
 8005bb2:	aa01      	add	r2, sp, #4
{
 8005bb4:	0004      	movs	r4, r0
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8005bb6:	f004 fbfd 	bl	800a3b4 <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8005bba:	2801      	cmp	r0, #1
 8005bbc:	d008      	beq.n	8005bd0 <lv_obj_set_x+0x28>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	d104      	bne.n	8005bcc <lv_obj_set_x+0x24>
        lv_obj_set_style_x(obj, x, 0);
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	0029      	movs	r1, r5
 8005bc6:	0020      	movs	r0, r4
 8005bc8:	f004 fe6e 	bl	800a8a8 <lv_obj_set_style_x>
}
 8005bcc:	b003      	add	sp, #12
 8005bce:	bd30      	pop	{r4, r5, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8005bd0:	9b01      	ldr	r3, [sp, #4]
 8005bd2:	42ab      	cmp	r3, r5
 8005bd4:	d1f5      	bne.n	8005bc2 <lv_obj_set_x+0x1a>
 8005bd6:	e7f9      	b.n	8005bcc <lv_obj_set_x+0x24>

08005bd8 <lv_obj_set_y>:
{
 8005bd8:	b530      	push	{r4, r5, lr}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	000d      	movs	r5, r1
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8005bde:	2300      	movs	r3, #0
 8005be0:	2108      	movs	r1, #8
 8005be2:	aa01      	add	r2, sp, #4
{
 8005be4:	0004      	movs	r4, r0
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8005be6:	f004 fbe5 	bl	800a3b4 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8005bea:	2801      	cmp	r0, #1
 8005bec:	d008      	beq.n	8005c00 <lv_obj_set_y+0x28>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d104      	bne.n	8005bfc <lv_obj_set_y+0x24>
        lv_obj_set_style_y(obj, y, 0);
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	0029      	movs	r1, r5
 8005bf6:	0020      	movs	r0, r4
 8005bf8:	f004 fe5e 	bl	800a8b8 <lv_obj_set_style_y>
}
 8005bfc:	b003      	add	sp, #12
 8005bfe:	bd30      	pop	{r4, r5, pc}
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8005c00:	9b01      	ldr	r3, [sp, #4]
 8005c02:	42ab      	cmp	r3, r5
 8005c04:	d1f5      	bne.n	8005bf2 <lv_obj_set_y+0x1a>
 8005c06:	e7f9      	b.n	8005bfc <lv_obj_set_y+0x24>

08005c08 <lv_obj_set_width>:
{
 8005c08:	b530      	push	{r4, r5, lr}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	000d      	movs	r5, r1
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 8005c0e:	2300      	movs	r3, #0
 8005c10:	2101      	movs	r1, #1
 8005c12:	aa01      	add	r2, sp, #4
{
 8005c14:	0004      	movs	r4, r0
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 8005c16:	f004 fbcd 	bl	800a3b4 <lv_obj_get_local_style_prop>
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 8005c1a:	2801      	cmp	r0, #1
 8005c1c:	d008      	beq.n	8005c30 <lv_obj_set_width+0x28>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d104      	bne.n	8005c2c <lv_obj_set_width+0x24>
        lv_obj_set_style_width(obj, w, 0);
 8005c22:	2200      	movs	r2, #0
 8005c24:	0029      	movs	r1, r5
 8005c26:	0020      	movs	r0, r4
 8005c28:	f004 fe2e 	bl	800a888 <lv_obj_set_style_width>
}
 8005c2c:	b003      	add	sp, #12
 8005c2e:	bd30      	pop	{r4, r5, pc}
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 8005c30:	9b01      	ldr	r3, [sp, #4]
 8005c32:	42ab      	cmp	r3, r5
 8005c34:	d1f5      	bne.n	8005c22 <lv_obj_set_width+0x1a>
 8005c36:	e7f9      	b.n	8005c2c <lv_obj_set_width+0x24>

08005c38 <lv_obj_set_height>:
{
 8005c38:	b530      	push	{r4, r5, lr}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	000d      	movs	r5, r1
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8005c3e:	2300      	movs	r3, #0
 8005c40:	2104      	movs	r1, #4
 8005c42:	aa01      	add	r2, sp, #4
{
 8005c44:	0004      	movs	r4, r0
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8005c46:	f004 fbb5 	bl	800a3b4 <lv_obj_get_local_style_prop>
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8005c4a:	2801      	cmp	r0, #1
 8005c4c:	d008      	beq.n	8005c60 <lv_obj_set_height+0x28>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	d104      	bne.n	8005c5c <lv_obj_set_height+0x24>
        lv_obj_set_style_height(obj, h, 0);
 8005c52:	2200      	movs	r2, #0
 8005c54:	0029      	movs	r1, r5
 8005c56:	0020      	movs	r0, r4
 8005c58:	f004 fe1e 	bl	800a898 <lv_obj_set_style_height>
}
 8005c5c:	b003      	add	sp, #12
 8005c5e:	bd30      	pop	{r4, r5, pc}
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8005c60:	9b01      	ldr	r3, [sp, #4]
 8005c62:	42ab      	cmp	r3, r5
 8005c64:	d1f5      	bne.n	8005c52 <lv_obj_set_height+0x1a>
 8005c66:	e7f9      	b.n	8005c5c <lv_obj_set_height+0x24>

08005c68 <lv_obj_is_layout_positioned>:
{
 8005c68:	b510      	push	{r4, lr}
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8005c6a:	490b      	ldr	r1, [pc, #44]	; (8005c98 <lv_obj_is_layout_positioned+0x30>)
{
 8005c6c:	0004      	movs	r4, r0
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8005c6e:	f7ff f9ef 	bl	8005050 <lv_obj_has_flag_any>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d001      	beq.n	8005c7a <lv_obj_is_layout_positioned+0x12>
 8005c76:	2000      	movs	r0, #0
}
 8005c78:	bd10      	pop	{r4, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005c7a:	0020      	movs	r0, r4
 8005c7c:	f005 f964 	bl	800af48 <lv_obj_get_parent>
    if(parent == NULL) return false;
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d0f8      	beq.n	8005c76 <lv_obj_is_layout_positioned+0xe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8005c84:	220a      	movs	r2, #10
 8005c86:	2100      	movs	r1, #0
 8005c88:	f003 fd32 	bl	80096f0 <lv_obj_get_style_prop>
    if(layout) return true;
 8005c8c:	0400      	lsls	r0, r0, #16
 8005c8e:	1e43      	subs	r3, r0, #1
 8005c90:	4198      	sbcs	r0, r3
 8005c92:	b2c0      	uxtb	r0, r0
 8005c94:	e7f0      	b.n	8005c78 <lv_obj_is_layout_positioned+0x10>
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	00060001 	.word	0x00060001

08005c9c <lv_obj_mark_layout_as_dirty>:
    obj->layout_inv = 1;
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	7f83      	ldrb	r3, [r0, #30]
{
 8005ca0:	b510      	push	{r4, lr}
    obj->layout_inv = 1;
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	7783      	strb	r3, [r0, #30]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8005ca6:	f005 f91f 	bl	800aee8 <lv_obj_get_screen>
    scr->scr_layout_inv = 1;
 8005caa:	2202      	movs	r2, #2
 8005cac:	7f83      	ldrb	r3, [r0, #30]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	7783      	strb	r3, [r0, #30]
    lv_disp_t * disp = lv_obj_get_disp(scr);
 8005cb2:	f005 f921 	bl	800aef8 <lv_obj_get_disp>
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8005cb6:	6840      	ldr	r0, [r0, #4]
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d001      	beq.n	8005cc0 <lv_obj_mark_layout_as_dirty+0x24>
 8005cbc:	f00d f908 	bl	8012ed0 <lv_timer_resume>
}
 8005cc0:	bd10      	pop	{r4, pc}
 8005cc2:	46c0      	nop			; (mov r8, r8)

08005cc4 <lv_obj_set_align>:
{
 8005cc4:	b510      	push	{r4, lr}
    lv_obj_set_style_align(obj, align, 0);
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f004 fdfe 	bl	800a8c8 <lv_obj_set_style_align>
}
 8005ccc:	bd10      	pop	{r4, pc}
 8005cce:	46c0      	nop			; (mov r8, r8)

08005cd0 <lv_obj_align>:
{
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	0004      	movs	r4, r0
 8005cd4:	b082      	sub	sp, #8
 8005cd6:	0016      	movs	r6, r2
    lv_obj_set_style_align(obj, align, 0);
 8005cd8:	2200      	movs	r2, #0
{
 8005cda:	001d      	movs	r5, r3
    lv_obj_set_style_align(obj, align, 0);
 8005cdc:	f004 fdf4 	bl	800a8c8 <lv_obj_set_style_align>
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	2107      	movs	r1, #7
 8005ce4:	0020      	movs	r0, r4
 8005ce6:	aa01      	add	r2, sp, #4
 8005ce8:	f004 fb64 	bl	800a3b4 <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8005cec:	2801      	cmp	r0, #1
 8005cee:	d017      	beq.n	8005d20 <lv_obj_align+0x50>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	d104      	bne.n	8005cfe <lv_obj_align+0x2e>
        lv_obj_set_style_x(obj, x, 0);
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	0031      	movs	r1, r6
 8005cf8:	0020      	movs	r0, r4
 8005cfa:	f004 fdd5 	bl	800a8a8 <lv_obj_set_style_x>
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8005cfe:	2300      	movs	r3, #0
 8005d00:	2108      	movs	r1, #8
 8005d02:	0020      	movs	r0, r4
 8005d04:	aa01      	add	r2, sp, #4
 8005d06:	f004 fb55 	bl	800a3b4 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8005d0a:	2801      	cmp	r0, #1
 8005d0c:	d013      	beq.n	8005d36 <lv_obj_align+0x66>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d104      	bne.n	8005d1c <lv_obj_align+0x4c>
        lv_obj_set_style_y(obj, y, 0);
 8005d12:	2200      	movs	r2, #0
 8005d14:	0029      	movs	r1, r5
 8005d16:	0020      	movs	r0, r4
 8005d18:	f004 fdce 	bl	800a8b8 <lv_obj_set_style_y>
}
 8005d1c:	b002      	add	sp, #8
 8005d1e:	bd70      	pop	{r4, r5, r6, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8005d20:	9b01      	ldr	r3, [sp, #4]
 8005d22:	42b3      	cmp	r3, r6
 8005d24:	d1e6      	bne.n	8005cf4 <lv_obj_align+0x24>
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8005d26:	2300      	movs	r3, #0
 8005d28:	2108      	movs	r1, #8
 8005d2a:	0020      	movs	r0, r4
 8005d2c:	aa01      	add	r2, sp, #4
 8005d2e:	f004 fb41 	bl	800a3b4 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8005d32:	2801      	cmp	r0, #1
 8005d34:	d1eb      	bne.n	8005d0e <lv_obj_align+0x3e>
 8005d36:	9b01      	ldr	r3, [sp, #4]
 8005d38:	42ab      	cmp	r3, r5
 8005d3a:	d1ea      	bne.n	8005d12 <lv_obj_align+0x42>
 8005d3c:	e7ee      	b.n	8005d1c <lv_obj_align+0x4c>
 8005d3e:	46c0      	nop			; (mov r8, r8)

08005d40 <lv_obj_get_coords>:
    dest->x1 = src->x1;
 8005d40:	2210      	movs	r2, #16
 8005d42:	5e83      	ldrsh	r3, [r0, r2]
 8005d44:	800b      	strh	r3, [r1, #0]
    dest->y1 = src->y1;
 8005d46:	2212      	movs	r2, #18
 8005d48:	5e83      	ldrsh	r3, [r0, r2]
 8005d4a:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
 8005d4c:	2214      	movs	r2, #20
 8005d4e:	5e83      	ldrsh	r3, [r0, r2]
 8005d50:	808b      	strh	r3, [r1, #4]
    dest->y2 = src->y2;
 8005d52:	2216      	movs	r2, #22
 8005d54:	5e83      	ldrsh	r3, [r0, r2]
 8005d56:	80cb      	strh	r3, [r1, #6]
}
 8005d58:	4770      	bx	lr
 8005d5a:	46c0      	nop			; (mov r8, r8)

08005d5c <lv_obj_get_y>:
{
 8005d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d5e:	46c6      	mov	lr, r8
 8005d60:	b500      	push	{lr}
 8005d62:	0004      	movs	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005d64:	f005 f8f0 	bl	800af48 <lv_obj_get_parent>
 8005d68:	1e05      	subs	r5, r0, #0
    if(parent) {
 8005d6a:	d019      	beq.n	8005da0 <lv_obj_get_y+0x44>
        rel_y = obj->coords.y1 - parent->coords.y1;
 8005d6c:	8a43      	ldrh	r3, [r0, #18]
 8005d6e:	8a64      	ldrh	r4, [r4, #18]
 8005d70:	4698      	mov	r8, r3
        rel_y += lv_obj_get_scroll_y(parent);
 8005d72:	f001 ffa9 	bl	8007cc8 <lv_obj_get_scroll_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005d76:	2210      	movs	r2, #16
 8005d78:	0007      	movs	r7, r0
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	0028      	movs	r0, r5
 8005d7e:	f003 fcb7 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005d82:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005d84:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005d86:	2100      	movs	r1, #0
 8005d88:	0028      	movs	r0, r5
 8005d8a:	f003 fcb1 	bl	80096f0 <lv_obj_get_style_prop>
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8005d8e:	4643      	mov	r3, r8
 8005d90:	1836      	adds	r6, r6, r0
 8005d92:	1ba4      	subs	r4, r4, r6
 8005d94:	1ae0      	subs	r0, r4, r3
 8005d96:	19c0      	adds	r0, r0, r7
 8005d98:	b200      	sxth	r0, r0
}
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	46b8      	mov	r8, r7
 8005d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rel_y = obj->coords.y1;
 8005da0:	2312      	movs	r3, #18
 8005da2:	5ee0      	ldrsh	r0, [r4, r3]
 8005da4:	e7f9      	b.n	8005d9a <lv_obj_get_y+0x3e>
 8005da6:	46c0      	nop			; (mov r8, r8)

08005da8 <lv_obj_get_y2>:
{
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	46ce      	mov	lr, r9
 8005dac:	4647      	mov	r7, r8
 8005dae:	b580      	push	{r7, lr}
 8005db0:	0005      	movs	r5, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8005db2:	f005 f8c9 	bl	800af48 <lv_obj_get_parent>
 8005db6:	1e06      	subs	r6, r0, #0
    if(parent) {
 8005db8:	d020      	beq.n	8005dfc <lv_obj_get_y2+0x54>
        rel_y = obj->coords.y1 - parent->coords.y1;
 8005dba:	8a43      	ldrh	r3, [r0, #18]
 8005dbc:	8a6c      	ldrh	r4, [r5, #18]
 8005dbe:	4699      	mov	r9, r3
        rel_y += lv_obj_get_scroll_y(parent);
 8005dc0:	f001 ff82 	bl	8007cc8 <lv_obj_get_scroll_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005dc4:	2210      	movs	r2, #16
 8005dc6:	4680      	mov	r8, r0
 8005dc8:	2100      	movs	r1, #0
 8005dca:	0030      	movs	r0, r6
 8005dcc:	f003 fc90 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005dd0:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005dd2:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	0030      	movs	r0, r6
 8005dd8:	f003 fc8a 	bl	80096f0 <lv_obj_get_style_prop>
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8005ddc:	464a      	mov	r2, r9
 8005dde:	183f      	adds	r7, r7, r0
 8005de0:	1be3      	subs	r3, r4, r7
 8005de2:	1a9b      	subs	r3, r3, r2
 8005de4:	4443      	add	r3, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005de6:	8a6a      	ldrh	r2, [r5, #18]
 8005de8:	b29b      	uxth	r3, r3
    return lv_obj_get_y(obj) + lv_obj_get_height(obj);
 8005dea:	8ae8      	ldrh	r0, [r5, #22]
 8005dec:	3001      	adds	r0, #1
 8005dee:	1818      	adds	r0, r3, r0
 8005df0:	1a80      	subs	r0, r0, r2
 8005df2:	b200      	sxth	r0, r0
}
 8005df4:	bcc0      	pop	{r6, r7}
 8005df6:	46b9      	mov	r9, r7
 8005df8:	46b0      	mov	r8, r6
 8005dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return lv_obj_get_y(obj) + lv_obj_get_height(obj);
 8005dfc:	8a6b      	ldrh	r3, [r5, #18]
 8005dfe:	001a      	movs	r2, r3
 8005e00:	e7f3      	b.n	8005dea <lv_obj_get_y2+0x42>
 8005e02:	46c0      	nop			; (mov r8, r8)

08005e04 <lv_obj_get_width>:
{
 8005e04:	0003      	movs	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005e06:	8a80      	ldrh	r0, [r0, #20]
 8005e08:	8a1b      	ldrh	r3, [r3, #16]
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	1ac0      	subs	r0, r0, r3
    return lv_area_get_width(&obj->coords);
 8005e0e:	b200      	sxth	r0, r0
}
 8005e10:	4770      	bx	lr
 8005e12:	46c0      	nop			; (mov r8, r8)

08005e14 <lv_obj_get_height>:
{
 8005e14:	0003      	movs	r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005e16:	8ac0      	ldrh	r0, [r0, #22]
 8005e18:	8a5b      	ldrh	r3, [r3, #18]
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	1ac0      	subs	r0, r0, r3
    return lv_area_get_height(&obj->coords);
 8005e1e:	b200      	sxth	r0, r0
}
 8005e20:	4770      	bx	lr
 8005e22:	46c0      	nop			; (mov r8, r8)

08005e24 <lv_obj_get_content_width>:
{
 8005e24:	b570      	push	{r4, r5, r6, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005e26:	2212      	movs	r2, #18
 8005e28:	2100      	movs	r1, #0
 8005e2a:	0004      	movs	r4, r0
 8005e2c:	f003 fc60 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005e30:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005e32:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005e34:	2100      	movs	r1, #0
 8005e36:	0020      	movs	r0, r4
 8005e38:	f003 fc5a 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005e3c:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005e3e:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005e40:	2100      	movs	r1, #0
 8005e42:	0020      	movs	r0, r4
 8005e44:	f003 fc54 	bl	80096f0 <lv_obj_get_style_prop>
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	19ad      	adds	r5, r5, r6
 8005e4c:	1b5b      	subs	r3, r3, r5
 8005e4e:	0040      	lsls	r0, r0, #1
 8005e50:	1a18      	subs	r0, r3, r0
 8005e52:	8aa3      	ldrh	r3, [r4, #20]
 8005e54:	18c3      	adds	r3, r0, r3
 8005e56:	8a20      	ldrh	r0, [r4, #16]
 8005e58:	1a18      	subs	r0, r3, r0
 8005e5a:	b200      	sxth	r0, r0
}
 8005e5c:	bd70      	pop	{r4, r5, r6, pc}
 8005e5e:	46c0      	nop			; (mov r8, r8)

08005e60 <lv_obj_get_content_height>:
{
 8005e60:	b570      	push	{r4, r5, r6, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005e62:	2210      	movs	r2, #16
 8005e64:	2100      	movs	r1, #0
 8005e66:	0004      	movs	r4, r0
 8005e68:	f003 fc42 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005e6c:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005e6e:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005e70:	2100      	movs	r1, #0
 8005e72:	0020      	movs	r0, r4
 8005e74:	f003 fc3c 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005e78:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005e7a:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	0020      	movs	r0, r4
 8005e80:	f003 fc36 	bl	80096f0 <lv_obj_get_style_prop>
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8005e84:	2301      	movs	r3, #1
 8005e86:	19ad      	adds	r5, r5, r6
 8005e88:	1b5b      	subs	r3, r3, r5
 8005e8a:	0040      	lsls	r0, r0, #1
 8005e8c:	1a18      	subs	r0, r3, r0
 8005e8e:	8ae3      	ldrh	r3, [r4, #22]
 8005e90:	18c3      	adds	r3, r0, r3
 8005e92:	8a60      	ldrh	r0, [r4, #18]
 8005e94:	1a18      	subs	r0, r3, r0
 8005e96:	b200      	sxth	r0, r0
}
 8005e98:	bd70      	pop	{r4, r5, r6, pc}
 8005e9a:	46c0      	nop			; (mov r8, r8)

08005e9c <lv_obj_get_content_coords>:
{
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	0005      	movs	r5, r0
 8005ea0:	000c      	movs	r4, r1
 8005ea2:	2232      	movs	r2, #50	; 0x32
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	f003 fc23 	bl	80096f0 <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 8005eaa:	2210      	movs	r2, #16
 8005eac:	5eab      	ldrsh	r3, [r5, r2]
    lv_area_increase(area, -border_width, -border_width);
 8005eae:	4241      	negs	r1, r0
 8005eb0:	8023      	strh	r3, [r4, #0]
    dest->y1 = src->y1;
 8005eb2:	2212      	movs	r2, #18
 8005eb4:	5eab      	ldrsh	r3, [r5, r2]
 8005eb6:	b209      	sxth	r1, r1
 8005eb8:	8063      	strh	r3, [r4, #2]
    dest->x2 = src->x2;
 8005eba:	2214      	movs	r2, #20
 8005ebc:	5eab      	ldrsh	r3, [r5, r2]
 8005ebe:	0020      	movs	r0, r4
 8005ec0:	80a3      	strh	r3, [r4, #4]
    dest->y2 = src->y2;
 8005ec2:	2216      	movs	r2, #22
 8005ec4:	5eab      	ldrsh	r3, [r5, r2]
 8005ec6:	000a      	movs	r2, r1
 8005ec8:	80e3      	strh	r3, [r4, #6]
 8005eca:	f00b fa3f 	bl	801134c <lv_area_increase>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005ece:	0028      	movs	r0, r5
 8005ed0:	2212      	movs	r2, #18
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	f003 fc0c 	bl	80096f0 <lv_obj_get_style_prop>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8005ed8:	8823      	ldrh	r3, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005eda:	2213      	movs	r2, #19
 8005edc:	181b      	adds	r3, r3, r0
 8005ede:	8023      	strh	r3, [r4, #0]
 8005ee0:	0028      	movs	r0, r5
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	f003 fc04 	bl	80096f0 <lv_obj_get_style_prop>
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8005ee8:	88a3      	ldrh	r3, [r4, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005eea:	2210      	movs	r2, #16
 8005eec:	1a1b      	subs	r3, r3, r0
 8005eee:	80a3      	strh	r3, [r4, #4]
 8005ef0:	0028      	movs	r0, r5
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	f003 fbfc 	bl	80096f0 <lv_obj_get_style_prop>
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8005ef8:	8863      	ldrh	r3, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005efa:	2211      	movs	r2, #17
 8005efc:	181b      	adds	r3, r3, r0
 8005efe:	8063      	strh	r3, [r4, #2]
 8005f00:	0028      	movs	r0, r5
 8005f02:	2100      	movs	r1, #0
 8005f04:	f003 fbf4 	bl	80096f0 <lv_obj_get_style_prop>
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8005f08:	88e3      	ldrh	r3, [r4, #6]
 8005f0a:	1a1b      	subs	r3, r3, r0
 8005f0c:	80e3      	strh	r3, [r4, #6]
}
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}

08005f10 <lv_obj_get_self_width>:
{
 8005f10:	b510      	push	{r4, lr}
 8005f12:	b082      	sub	sp, #8
    lv_point_t p = {0, LV_COORD_MIN};
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <lv_obj_get_self_width+0x1c>)
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8005f16:	ac01      	add	r4, sp, #4
 8005f18:	0022      	movs	r2, r4
 8005f1a:	212c      	movs	r1, #44	; 0x2c
    lv_point_t p = {0, LV_COORD_MIN};
 8005f1c:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8005f1e:	f7fb ff1d 	bl	8001d5c <lv_event_send>
    return p.x;
 8005f22:	2300      	movs	r3, #0
 8005f24:	5ee0      	ldrsh	r0, [r4, r3]
}
 8005f26:	b002      	add	sp, #8
 8005f28:	bd10      	pop	{r4, pc}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	e0010000 	.word	0xe0010000

08005f30 <lv_obj_get_self_height>:
{
 8005f30:	b510      	push	{r4, lr}
 8005f32:	b082      	sub	sp, #8
    lv_point_t p = {LV_COORD_MIN, 0};
 8005f34:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <lv_obj_get_self_height+0x1c>)
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8005f36:	ac01      	add	r4, sp, #4
 8005f38:	0022      	movs	r2, r4
 8005f3a:	212c      	movs	r1, #44	; 0x2c
    lv_point_t p = {LV_COORD_MIN, 0};
 8005f3c:	9301      	str	r3, [sp, #4]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8005f3e:	f7fb ff0d 	bl	8001d5c <lv_event_send>
    return p.y;
 8005f42:	2302      	movs	r3, #2
 8005f44:	5ee0      	ldrsh	r0, [r4, r3]
}
 8005f46:	b002      	add	sp, #8
 8005f48:	bd10      	pop	{r4, pc}
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	0000e001 	.word	0x0000e001

08005f50 <lv_obj_refresh_self_size>:
{
 8005f50:	b570      	push	{r4, r5, r6, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8005f52:	2201      	movs	r2, #1
 8005f54:	2100      	movs	r1, #0
 8005f56:	0004      	movs	r4, r0
 8005f58:	f003 fbca 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 8005f60:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8005f62:	0020      	movs	r0, r4
 8005f64:	f003 fbc4 	bl	80096f0 <lv_obj_get_style_prop>
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8005f68:	4b0e      	ldr	r3, [pc, #56]	; (8005fa4 <lv_obj_refresh_self_size+0x54>)
    return (lv_coord_t)v.num;
 8005f6a:	b200      	sxth	r0, r0
 8005f6c:	429d      	cmp	r5, r3
 8005f6e:	d004      	beq.n	8005f7a <lv_obj_refresh_self_size+0x2a>
 8005f70:	2500      	movs	r5, #0
 8005f72:	4298      	cmp	r0, r3
 8005f74:	d001      	beq.n	8005f7a <lv_obj_refresh_self_size+0x2a>
}
 8005f76:	0028      	movs	r0, r5
 8005f78:	bd70      	pop	{r4, r5, r6, pc}
    obj->layout_inv = 1;
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	7fa3      	ldrb	r3, [r4, #30]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8005f7e:	0020      	movs	r0, r4
    obj->layout_inv = 1;
 8005f80:	4313      	orrs	r3, r2
 8005f82:	77a3      	strb	r3, [r4, #30]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8005f84:	f004 ffb0 	bl	800aee8 <lv_obj_get_screen>
    scr->scr_layout_inv = 1;
 8005f88:	2202      	movs	r2, #2
 8005f8a:	7f83      	ldrb	r3, [r0, #30]
    return true;
 8005f8c:	2501      	movs	r5, #1
    scr->scr_layout_inv = 1;
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	7783      	strb	r3, [r0, #30]
    lv_disp_t * disp = lv_obj_get_disp(scr);
 8005f92:	f004 ffb1 	bl	800aef8 <lv_obj_get_disp>
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8005f96:	6840      	ldr	r0, [r0, #4]
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d0ec      	beq.n	8005f76 <lv_obj_refresh_self_size+0x26>
 8005f9c:	f00c ff98 	bl	8012ed0 <lv_timer_resume>
 8005fa0:	e7e9      	b.n	8005f76 <lv_obj_refresh_self_size+0x26>
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	000027d1 	.word	0x000027d1

08005fa8 <lv_obj_move_children_by>:
{
 8005fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005faa:	46de      	mov	lr, fp
 8005fac:	4657      	mov	r7, sl
 8005fae:	464e      	mov	r6, r9
 8005fb0:	4645      	mov	r5, r8
 8005fb2:	b5e0      	push	{r5, r6, r7, lr}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	4683      	mov	fp, r0
 8005fb8:	468a      	mov	sl, r1
 8005fba:	4691      	mov	r9, r2
 8005fbc:	9303      	str	r3, [sp, #12]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005fbe:	f004 ffd9 	bl	800af74 <lv_obj_get_child_cnt>
 8005fc2:	9002      	str	r0, [sp, #8]
    for(i = 0; i < child_cnt; i++) {
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d045      	beq.n	8006054 <lv_obj_move_children_by+0xac>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	9301      	str	r3, [sp, #4]
        child->coords.x1 += x_diff;
 8005fcc:	4653      	mov	r3, sl
 8005fce:	b29f      	uxth	r7, r3
        child->coords.y1 += y_diff;
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	b29e      	uxth	r6, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 8005fd4:	465b      	mov	r3, fp
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	9a01      	ldr	r2, [sp, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	0092      	lsls	r2, r2, #2
 8005fde:	58d5      	ldr	r5, [r2, r3]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8005fe0:	9b03      	ldr	r3, [sp, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d006      	beq.n	8005ff4 <lv_obj_move_children_by+0x4c>
 8005fe6:	2180      	movs	r1, #128	; 0x80
 8005fe8:	0028      	movs	r0, r5
 8005fea:	02c9      	lsls	r1, r1, #11
 8005fec:	f7ff f828 	bl	8005040 <lv_obj_has_flag>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d129      	bne.n	8006048 <lv_obj_move_children_by+0xa0>
        child->coords.x1 += x_diff;
 8005ff4:	8a2b      	ldrh	r3, [r5, #16]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005ff6:	0028      	movs	r0, r5
        child->coords.x1 += x_diff;
 8005ff8:	18fb      	adds	r3, r7, r3
 8005ffa:	822b      	strh	r3, [r5, #16]
        child->coords.y1 += y_diff;
 8005ffc:	8a6b      	ldrh	r3, [r5, #18]
    for(i = 0; i < child_cnt; i++) {
 8005ffe:	2400      	movs	r4, #0
        child->coords.y1 += y_diff;
 8006000:	18f3      	adds	r3, r6, r3
 8006002:	826b      	strh	r3, [r5, #18]
        child->coords.x2 += x_diff;
 8006004:	8aab      	ldrh	r3, [r5, #20]
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	82ab      	strh	r3, [r5, #20]
        child->coords.y2 += y_diff;
 800600a:	8aeb      	ldrh	r3, [r5, #22]
 800600c:	18f3      	adds	r3, r6, r3
 800600e:	82eb      	strh	r3, [r5, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006010:	f004 ffb0 	bl	800af74 <lv_obj_get_child_cnt>
 8006014:	4680      	mov	r8, r0
    for(i = 0; i < child_cnt; i++) {
 8006016:	2800      	cmp	r0, #0
 8006018:	d016      	beq.n	8006048 <lv_obj_move_children_by+0xa0>
        lv_obj_t * child = obj->spec_attr->children[i];
 800601a:	68ab      	ldr	r3, [r5, #8]
 800601c:	00a2      	lsls	r2, r4, #2
 800601e:	681b      	ldr	r3, [r3, #0]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8006020:	4651      	mov	r1, sl
        lv_obj_t * child = obj->spec_attr->children[i];
 8006022:	58d0      	ldr	r0, [r2, r3]
    for(i = 0; i < child_cnt; i++) {
 8006024:	3401      	adds	r4, #1
        child->coords.x1 += x_diff;
 8006026:	8a03      	ldrh	r3, [r0, #16]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8006028:	464a      	mov	r2, r9
        child->coords.x1 += x_diff;
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	8203      	strh	r3, [r0, #16]
        child->coords.y1 += y_diff;
 800602e:	8a43      	ldrh	r3, [r0, #18]
 8006030:	18f3      	adds	r3, r6, r3
 8006032:	8243      	strh	r3, [r0, #18]
        child->coords.x2 += x_diff;
 8006034:	8a83      	ldrh	r3, [r0, #20]
 8006036:	18fb      	adds	r3, r7, r3
 8006038:	8283      	strh	r3, [r0, #20]
        child->coords.y2 += y_diff;
 800603a:	8ac3      	ldrh	r3, [r0, #22]
 800603c:	18f3      	adds	r3, r6, r3
 800603e:	82c3      	strh	r3, [r0, #22]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8006040:	f7ff fc20 	bl	8005884 <lv_obj_move_children_by.constprop.0>
    for(i = 0; i < child_cnt; i++) {
 8006044:	45a0      	cmp	r8, r4
 8006046:	d1e8      	bne.n	800601a <lv_obj_move_children_by+0x72>
 8006048:	9b01      	ldr	r3, [sp, #4]
 800604a:	9a02      	ldr	r2, [sp, #8]
 800604c:	3301      	adds	r3, #1
 800604e:	9301      	str	r3, [sp, #4]
 8006050:	429a      	cmp	r2, r3
 8006052:	d1bf      	bne.n	8005fd4 <lv_obj_move_children_by+0x2c>
}
 8006054:	b005      	add	sp, #20
 8006056:	bcf0      	pop	{r4, r5, r6, r7}
 8006058:	46bb      	mov	fp, r7
 800605a:	46b2      	mov	sl, r6
 800605c:	46a9      	mov	r9, r5
 800605e:	46a0      	mov	r8, r4
 8006060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006062:	46c0      	nop			; (mov r8, r8)

08006064 <lv_obj_transform_point>:
{
 8006064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006066:	46c6      	mov	lr, r8
 8006068:	0004      	movs	r4, r0
 800606a:	000e      	movs	r6, r1
 800606c:	0015      	movs	r5, r2
 800606e:	4698      	mov	r8, r3
 8006070:	b500      	push	{lr}
    if(obj) {
 8006072:	2800      	cmp	r0, #0
 8006074:	d018      	beq.n	80060a8 <lv_obj_transform_point+0x44>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8006076:	f7ff fbb3 	bl	80057e0 <_lv_obj_get_layer_type>
        if(inv) {
 800607a:	4643      	mov	r3, r8
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800607c:	0007      	movs	r7, r0
        if(inv) {
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <lv_obj_transform_point+0x32>
 8006082:	e014      	b.n	80060ae <lv_obj_transform_point+0x4a>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8006084:	2d00      	cmp	r5, #0
 8006086:	d00f      	beq.n	80060a8 <lv_obj_transform_point+0x44>
 8006088:	0020      	movs	r0, r4
 800608a:	f004 ff5d 	bl	800af48 <lv_obj_get_parent>
 800608e:	1e04      	subs	r4, r0, #0
    if(obj) {
 8006090:	d00a      	beq.n	80060a8 <lv_obj_transform_point+0x44>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8006092:	f7ff fba5 	bl	80057e0 <_lv_obj_get_layer_type>
            if(do_tranf) transform_point(obj, p, inv);
 8006096:	2802      	cmp	r0, #2
 8006098:	d1f4      	bne.n	8006084 <lv_obj_transform_point+0x20>
 800609a:	2200      	movs	r2, #0
 800609c:	0031      	movs	r1, r6
 800609e:	0020      	movs	r0, r4
 80060a0:	f7ff fba6 	bl	80057f0 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80060a4:	2d00      	cmp	r5, #0
 80060a6:	d1ef      	bne.n	8006088 <lv_obj_transform_point+0x24>
}
 80060a8:	bc80      	pop	{r7}
 80060aa:	46b8      	mov	r8, r7
 80060ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80060ae:	2d00      	cmp	r5, #0
 80060b0:	d107      	bne.n	80060c2 <lv_obj_transform_point+0x5e>
            if(do_tranf) transform_point(obj, p, inv);
 80060b2:	2f02      	cmp	r7, #2
 80060b4:	d1f8      	bne.n	80060a8 <lv_obj_transform_point+0x44>
 80060b6:	2201      	movs	r2, #1
 80060b8:	0031      	movs	r1, r6
 80060ba:	0020      	movs	r0, r4
 80060bc:	f7ff fb98 	bl	80057f0 <transform_point>
 80060c0:	e7f2      	b.n	80060a8 <lv_obj_transform_point+0x44>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80060c2:	0020      	movs	r0, r4
 80060c4:	f004 ff40 	bl	800af48 <lv_obj_get_parent>
 80060c8:	4680      	mov	r8, r0
    if(obj) {
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d0f1      	beq.n	80060b2 <lv_obj_transform_point+0x4e>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80060ce:	f7ff fb87 	bl	80057e0 <_lv_obj_get_layer_type>
 80060d2:	0005      	movs	r5, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80060d4:	4640      	mov	r0, r8
 80060d6:	f004 ff37 	bl	800af48 <lv_obj_get_parent>
 80060da:	2301      	movs	r3, #1
 80060dc:	2201      	movs	r2, #1
 80060de:	0031      	movs	r1, r6
 80060e0:	f7ff ffc0 	bl	8006064 <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 80060e4:	2d02      	cmp	r5, #2
 80060e6:	d1e4      	bne.n	80060b2 <lv_obj_transform_point+0x4e>
 80060e8:	2201      	movs	r2, #1
 80060ea:	0031      	movs	r1, r6
 80060ec:	4640      	mov	r0, r8
 80060ee:	f7ff fb7f 	bl	80057f0 <transform_point>
 80060f2:	e7de      	b.n	80060b2 <lv_obj_transform_point+0x4e>

080060f4 <lv_obj_get_transformed_area>:
{
 80060f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060f6:	46ce      	mov	lr, r9
 80060f8:	4647      	mov	r7, r8
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b085      	sub	sp, #20
 80060fe:	0016      	movs	r6, r2
 8006100:	4699      	mov	r9, r3
        {area->x1, area->y1},
 8006102:	2200      	movs	r2, #0
 8006104:	5e8b      	ldrsh	r3, [r1, r2]
    lv_point_t p[4] = {
 8006106:	466a      	mov	r2, sp
 8006108:	8013      	strh	r3, [r2, #0]
{
 800610a:	000f      	movs	r7, r1
        {area->x1, area->y1},
 800610c:	2202      	movs	r2, #2
 800610e:	5e89      	ldrsh	r1, [r1, r2]
    lv_point_t p[4] = {
 8006110:	466a      	mov	r2, sp
 8006112:	8051      	strh	r1, [r2, #2]
 8006114:	8093      	strh	r3, [r2, #4]
        {area->x1, area->y2},
 8006116:	2206      	movs	r2, #6
 8006118:	5ebb      	ldrsh	r3, [r7, r2]
    lv_point_t p[4] = {
 800611a:	466a      	mov	r2, sp
 800611c:	80d3      	strh	r3, [r2, #6]
{
 800611e:	0004      	movs	r4, r0
        {area->x2, area->y1},
 8006120:	2004      	movs	r0, #4
 8006122:	5e3a      	ldrsh	r2, [r7, r0]
    lv_point_t p[4] = {
 8006124:	4668      	mov	r0, sp
 8006126:	8102      	strh	r2, [r0, #8]
 8006128:	8141      	strh	r1, [r0, #10]
 800612a:	8182      	strh	r2, [r0, #12]
 800612c:	81c3      	strh	r3, [r0, #14]
    if(obj) {
 800612e:	2c00      	cmp	r4, #0
 8006130:	d070      	beq.n	8006214 <lv_obj_get_transformed_area+0x120>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8006132:	0020      	movs	r0, r4
 8006134:	f7ff fb54 	bl	80057e0 <_lv_obj_get_layer_type>
        if(inv) {
 8006138:	464b      	mov	r3, r9
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800613a:	4680      	mov	r8, r0
        if(inv) {
 800613c:	0025      	movs	r5, r4
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <lv_obj_get_transformed_area+0x62>
 8006142:	e040      	b.n	80061c6 <lv_obj_get_transformed_area+0xd2>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8006144:	2e00      	cmp	r6, #0
 8006146:	d00f      	beq.n	8006168 <lv_obj_get_transformed_area+0x74>
 8006148:	0028      	movs	r0, r5
 800614a:	f004 fefd 	bl	800af48 <lv_obj_get_parent>
 800614e:	1e05      	subs	r5, r0, #0
    if(obj) {
 8006150:	d00a      	beq.n	8006168 <lv_obj_get_transformed_area+0x74>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8006152:	f7ff fb45 	bl	80057e0 <_lv_obj_get_layer_type>
            if(do_tranf) transform_point(obj, p, inv);
 8006156:	2802      	cmp	r0, #2
 8006158:	d1f4      	bne.n	8006144 <lv_obj_get_transformed_area+0x50>
 800615a:	2200      	movs	r2, #0
 800615c:	4669      	mov	r1, sp
 800615e:	0028      	movs	r0, r5
 8006160:	f7ff fb46 	bl	80057f0 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8006164:	2e00      	cmp	r6, #0
 8006166:	d1ef      	bne.n	8006148 <lv_obj_get_transformed_area+0x54>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8006168:	0020      	movs	r0, r4
 800616a:	f7ff fb39 	bl	80057e0 <_lv_obj_get_layer_type>
 800616e:	0025      	movs	r5, r4
 8006170:	e008      	b.n	8006184 <lv_obj_get_transformed_area+0x90>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8006172:	2e00      	cmp	r6, #0
 8006174:	d00f      	beq.n	8006196 <lv_obj_get_transformed_area+0xa2>
 8006176:	0028      	movs	r0, r5
 8006178:	f004 fee6 	bl	800af48 <lv_obj_get_parent>
 800617c:	1e05      	subs	r5, r0, #0
    if(obj) {
 800617e:	d00a      	beq.n	8006196 <lv_obj_get_transformed_area+0xa2>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8006180:	f7ff fb2e 	bl	80057e0 <_lv_obj_get_layer_type>
            if(do_tranf) transform_point(obj, p, inv);
 8006184:	2802      	cmp	r0, #2
 8006186:	d1f4      	bne.n	8006172 <lv_obj_get_transformed_area+0x7e>
 8006188:	2200      	movs	r2, #0
 800618a:	0028      	movs	r0, r5
 800618c:	a901      	add	r1, sp, #4
 800618e:	f7ff fb2f 	bl	80057f0 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8006192:	2e00      	cmp	r6, #0
 8006194:	d1ef      	bne.n	8006176 <lv_obj_get_transformed_area+0x82>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8006196:	0020      	movs	r0, r4
 8006198:	f7ff fb22 	bl	80057e0 <_lv_obj_get_layer_type>
 800619c:	0025      	movs	r5, r4
 800619e:	e00a      	b.n	80061b6 <lv_obj_get_transformed_area+0xc2>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80061a0:	2e00      	cmp	r6, #0
 80061a2:	d100      	bne.n	80061a6 <lv_obj_get_transformed_area+0xb2>
 80061a4:	e098      	b.n	80062d8 <lv_obj_get_transformed_area+0x1e4>
 80061a6:	0028      	movs	r0, r5
 80061a8:	f004 fece 	bl	800af48 <lv_obj_get_parent>
 80061ac:	1e05      	subs	r5, r0, #0
    if(obj) {
 80061ae:	d100      	bne.n	80061b2 <lv_obj_get_transformed_area+0xbe>
 80061b0:	e092      	b.n	80062d8 <lv_obj_get_transformed_area+0x1e4>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80061b2:	f7ff fb15 	bl	80057e0 <_lv_obj_get_layer_type>
            if(do_tranf) transform_point(obj, p, inv);
 80061b6:	2802      	cmp	r0, #2
 80061b8:	d1f2      	bne.n	80061a0 <lv_obj_get_transformed_area+0xac>
 80061ba:	2200      	movs	r2, #0
 80061bc:	0028      	movs	r0, r5
 80061be:	a902      	add	r1, sp, #8
 80061c0:	f7ff fb16 	bl	80057f0 <transform_point>
 80061c4:	e7ec      	b.n	80061a0 <lv_obj_get_transformed_area+0xac>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80061c6:	2e00      	cmp	r6, #0
 80061c8:	d000      	beq.n	80061cc <lv_obj_get_transformed_area+0xd8>
 80061ca:	e0e1      	b.n	8006390 <lv_obj_get_transformed_area+0x29c>
            if(do_tranf) transform_point(obj, p, inv);
 80061cc:	4643      	mov	r3, r8
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d100      	bne.n	80061d4 <lv_obj_get_transformed_area+0xe0>
 80061d2:	e0f8      	b.n	80063c6 <lv_obj_get_transformed_area+0x2d2>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80061d4:	0020      	movs	r0, r4
 80061d6:	f7ff fb03 	bl	80057e0 <_lv_obj_get_layer_type>
 80061da:	4681      	mov	r9, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80061dc:	2e00      	cmp	r6, #0
 80061de:	d000      	beq.n	80061e2 <lv_obj_get_transformed_area+0xee>
 80061e0:	e0bb      	b.n	800635a <lv_obj_get_transformed_area+0x266>
            if(do_tranf) transform_point(obj, p, inv);
 80061e2:	464b      	mov	r3, r9
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d100      	bne.n	80061ea <lv_obj_get_transformed_area+0xf6>
 80061e8:	e101      	b.n	80063ee <lv_obj_get_transformed_area+0x2fa>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80061ea:	0020      	movs	r0, r4
 80061ec:	f7ff faf8 	bl	80057e0 <_lv_obj_get_layer_type>
 80061f0:	4681      	mov	r9, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80061f2:	2e00      	cmp	r6, #0
 80061f4:	d000      	beq.n	80061f8 <lv_obj_get_transformed_area+0x104>
 80061f6:	e095      	b.n	8006324 <lv_obj_get_transformed_area+0x230>
            if(do_tranf) transform_point(obj, p, inv);
 80061f8:	464b      	mov	r3, r9
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d100      	bne.n	8006200 <lv_obj_get_transformed_area+0x10c>
 80061fe:	e0ec      	b.n	80063da <lv_obj_get_transformed_area+0x2e6>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8006200:	0020      	movs	r0, r4
 8006202:	f7ff faed 	bl	80057e0 <_lv_obj_get_layer_type>
 8006206:	4680      	mov	r8, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8006208:	2e00      	cmp	r6, #0
 800620a:	d000      	beq.n	800620e <lv_obj_get_transformed_area+0x11a>
 800620c:	e070      	b.n	80062f0 <lv_obj_get_transformed_area+0x1fc>
            if(do_tranf) transform_point(obj, p, inv);
 800620e:	4643      	mov	r3, r8
 8006210:	2b02      	cmp	r3, #2
 8006212:	d067      	beq.n	80062e4 <lv_obj_get_transformed_area+0x1f0>
    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 8006214:	466b      	mov	r3, sp
 8006216:	220c      	movs	r2, #12
 8006218:	5e9a      	ldrsh	r2, [r3, r2]
 800621a:	466b      	mov	r3, sp
 800621c:	2408      	movs	r4, #8
 800621e:	5f1c      	ldrsh	r4, [r3, r4]
 8006220:	466b      	mov	r3, sp
 8006222:	2004      	movs	r0, #4
 8006224:	5e18      	ldrsh	r0, [r3, r0]
 8006226:	466b      	mov	r3, sp
 8006228:	2100      	movs	r1, #0
 800622a:	5e59      	ldrsh	r1, [r3, r1]
 800622c:	1c13      	adds	r3, r2, #0
 800622e:	42a2      	cmp	r2, r4
 8006230:	dd00      	ble.n	8006234 <lv_obj_get_transformed_area+0x140>
 8006232:	1c23      	adds	r3, r4, #0
 8006234:	b21d      	sxth	r5, r3
 8006236:	4285      	cmp	r5, r0
 8006238:	dd00      	ble.n	800623c <lv_obj_get_transformed_area+0x148>
 800623a:	1c03      	adds	r3, r0, #0
 800623c:	b21d      	sxth	r5, r3
 800623e:	428d      	cmp	r5, r1
 8006240:	dd00      	ble.n	8006244 <lv_obj_get_transformed_area+0x150>
 8006242:	1c0b      	adds	r3, r1, #0
 8006244:	803b      	strh	r3, [r7, #0]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 8006246:	1c13      	adds	r3, r2, #0
 8006248:	42a2      	cmp	r2, r4
 800624a:	da00      	bge.n	800624e <lv_obj_get_transformed_area+0x15a>
 800624c:	1c23      	adds	r3, r4, #0
 800624e:	b21a      	sxth	r2, r3
 8006250:	4282      	cmp	r2, r0
 8006252:	da00      	bge.n	8006256 <lv_obj_get_transformed_area+0x162>
 8006254:	1c03      	adds	r3, r0, #0
 8006256:	b21a      	sxth	r2, r3
 8006258:	428a      	cmp	r2, r1
 800625a:	da00      	bge.n	800625e <lv_obj_get_transformed_area+0x16a>
 800625c:	1c0b      	adds	r3, r1, #0
 800625e:	80bb      	strh	r3, [r7, #4]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 8006260:	466b      	mov	r3, sp
 8006262:	220e      	movs	r2, #14
 8006264:	5e9a      	ldrsh	r2, [r3, r2]
 8006266:	466b      	mov	r3, sp
 8006268:	240a      	movs	r4, #10
 800626a:	5f1c      	ldrsh	r4, [r3, r4]
 800626c:	466b      	mov	r3, sp
 800626e:	2006      	movs	r0, #6
 8006270:	5e18      	ldrsh	r0, [r3, r0]
 8006272:	466b      	mov	r3, sp
 8006274:	2102      	movs	r1, #2
 8006276:	5e59      	ldrsh	r1, [r3, r1]
 8006278:	1c13      	adds	r3, r2, #0
 800627a:	42a2      	cmp	r2, r4
 800627c:	dd00      	ble.n	8006280 <lv_obj_get_transformed_area+0x18c>
 800627e:	1c23      	adds	r3, r4, #0
 8006280:	b21d      	sxth	r5, r3
 8006282:	4285      	cmp	r5, r0
 8006284:	dd00      	ble.n	8006288 <lv_obj_get_transformed_area+0x194>
 8006286:	1c03      	adds	r3, r0, #0
 8006288:	b21d      	sxth	r5, r3
 800628a:	428d      	cmp	r5, r1
 800628c:	dd00      	ble.n	8006290 <lv_obj_get_transformed_area+0x19c>
 800628e:	1c0b      	adds	r3, r1, #0
 8006290:	807b      	strh	r3, [r7, #2]
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 8006292:	1c13      	adds	r3, r2, #0
 8006294:	42a2      	cmp	r2, r4
 8006296:	da00      	bge.n	800629a <lv_obj_get_transformed_area+0x1a6>
 8006298:	1c23      	adds	r3, r4, #0
 800629a:	b21a      	sxth	r2, r3
 800629c:	4282      	cmp	r2, r0
 800629e:	da00      	bge.n	80062a2 <lv_obj_get_transformed_area+0x1ae>
 80062a0:	1c03      	adds	r3, r0, #0
 80062a2:	b21a      	sxth	r2, r3
 80062a4:	428a      	cmp	r2, r1
 80062a6:	da00      	bge.n	80062aa <lv_obj_get_transformed_area+0x1b6>
 80062a8:	1c0b      	adds	r3, r1, #0
    lv_area_increase(area, 5, 5);
 80062aa:	2205      	movs	r2, #5
 80062ac:	2105      	movs	r1, #5
 80062ae:	0038      	movs	r0, r7
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 80062b0:	80fb      	strh	r3, [r7, #6]
    lv_area_increase(area, 5, 5);
 80062b2:	f00b f84b 	bl	801134c <lv_area_increase>
}
 80062b6:	b005      	add	sp, #20
 80062b8:	bcc0      	pop	{r6, r7}
 80062ba:	46b9      	mov	r9, r7
 80062bc:	46b0      	mov	r8, r6
 80062be:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(do_tranf) transform_point(obj, p, inv);
 80062c0:	2200      	movs	r2, #0
 80062c2:	0020      	movs	r0, r4
 80062c4:	a903      	add	r1, sp, #12
 80062c6:	f7ff fa93 	bl	80057f0 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80062ca:	2e00      	cmp	r6, #0
 80062cc:	d0a2      	beq.n	8006214 <lv_obj_get_transformed_area+0x120>
 80062ce:	0020      	movs	r0, r4
 80062d0:	f004 fe3a 	bl	800af48 <lv_obj_get_parent>
 80062d4:	1e04      	subs	r4, r0, #0
    if(obj) {
 80062d6:	d09d      	beq.n	8006214 <lv_obj_get_transformed_area+0x120>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80062d8:	0020      	movs	r0, r4
 80062da:	f7ff fa81 	bl	80057e0 <_lv_obj_get_layer_type>
            if(do_tranf) transform_point(obj, p, inv);
 80062de:	2802      	cmp	r0, #2
 80062e0:	d1f3      	bne.n	80062ca <lv_obj_get_transformed_area+0x1d6>
 80062e2:	e7ed      	b.n	80062c0 <lv_obj_get_transformed_area+0x1cc>
            if(do_tranf) transform_point(obj, p, inv);
 80062e4:	2201      	movs	r2, #1
 80062e6:	0020      	movs	r0, r4
 80062e8:	a903      	add	r1, sp, #12
 80062ea:	f7ff fa81 	bl	80057f0 <transform_point>
 80062ee:	e791      	b.n	8006214 <lv_obj_get_transformed_area+0x120>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80062f0:	0020      	movs	r0, r4
 80062f2:	f004 fe29 	bl	800af48 <lv_obj_get_parent>
 80062f6:	1e06      	subs	r6, r0, #0
    if(obj) {
 80062f8:	d100      	bne.n	80062fc <lv_obj_get_transformed_area+0x208>
 80062fa:	e788      	b.n	800620e <lv_obj_get_transformed_area+0x11a>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80062fc:	f7ff fa70 	bl	80057e0 <_lv_obj_get_layer_type>
 8006300:	0005      	movs	r5, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8006302:	0030      	movs	r0, r6
 8006304:	f004 fe20 	bl	800af48 <lv_obj_get_parent>
 8006308:	2301      	movs	r3, #1
 800630a:	2201      	movs	r2, #1
 800630c:	a903      	add	r1, sp, #12
 800630e:	f7ff fea9 	bl	8006064 <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 8006312:	2d02      	cmp	r5, #2
 8006314:	d000      	beq.n	8006318 <lv_obj_get_transformed_area+0x224>
 8006316:	e77a      	b.n	800620e <lv_obj_get_transformed_area+0x11a>
 8006318:	2201      	movs	r2, #1
 800631a:	0030      	movs	r0, r6
 800631c:	a903      	add	r1, sp, #12
 800631e:	f7ff fa67 	bl	80057f0 <transform_point>
 8006322:	e774      	b.n	800620e <lv_obj_get_transformed_area+0x11a>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8006324:	0020      	movs	r0, r4
 8006326:	f004 fe0f 	bl	800af48 <lv_obj_get_parent>
 800632a:	4680      	mov	r8, r0
    if(obj) {
 800632c:	2800      	cmp	r0, #0
 800632e:	d100      	bne.n	8006332 <lv_obj_get_transformed_area+0x23e>
 8006330:	e762      	b.n	80061f8 <lv_obj_get_transformed_area+0x104>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8006332:	f7ff fa55 	bl	80057e0 <_lv_obj_get_layer_type>
 8006336:	0005      	movs	r5, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8006338:	4640      	mov	r0, r8
 800633a:	f004 fe05 	bl	800af48 <lv_obj_get_parent>
 800633e:	2301      	movs	r3, #1
 8006340:	2201      	movs	r2, #1
 8006342:	a902      	add	r1, sp, #8
 8006344:	f7ff fe8e 	bl	8006064 <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 8006348:	2d02      	cmp	r5, #2
 800634a:	d000      	beq.n	800634e <lv_obj_get_transformed_area+0x25a>
 800634c:	e754      	b.n	80061f8 <lv_obj_get_transformed_area+0x104>
 800634e:	2201      	movs	r2, #1
 8006350:	4640      	mov	r0, r8
 8006352:	a902      	add	r1, sp, #8
 8006354:	f7ff fa4c 	bl	80057f0 <transform_point>
 8006358:	e74e      	b.n	80061f8 <lv_obj_get_transformed_area+0x104>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 800635a:	0020      	movs	r0, r4
 800635c:	f004 fdf4 	bl	800af48 <lv_obj_get_parent>
 8006360:	4680      	mov	r8, r0
    if(obj) {
 8006362:	2800      	cmp	r0, #0
 8006364:	d100      	bne.n	8006368 <lv_obj_get_transformed_area+0x274>
 8006366:	e73c      	b.n	80061e2 <lv_obj_get_transformed_area+0xee>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8006368:	f7ff fa3a 	bl	80057e0 <_lv_obj_get_layer_type>
 800636c:	0005      	movs	r5, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 800636e:	4640      	mov	r0, r8
 8006370:	f004 fdea 	bl	800af48 <lv_obj_get_parent>
 8006374:	2301      	movs	r3, #1
 8006376:	2201      	movs	r2, #1
 8006378:	a901      	add	r1, sp, #4
 800637a:	f7ff fe73 	bl	8006064 <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 800637e:	2d02      	cmp	r5, #2
 8006380:	d000      	beq.n	8006384 <lv_obj_get_transformed_area+0x290>
 8006382:	e72e      	b.n	80061e2 <lv_obj_get_transformed_area+0xee>
 8006384:	2201      	movs	r2, #1
 8006386:	4640      	mov	r0, r8
 8006388:	a901      	add	r1, sp, #4
 800638a:	f7ff fa31 	bl	80057f0 <transform_point>
 800638e:	e728      	b.n	80061e2 <lv_obj_get_transformed_area+0xee>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8006390:	0020      	movs	r0, r4
 8006392:	f004 fdd9 	bl	800af48 <lv_obj_get_parent>
 8006396:	4681      	mov	r9, r0
    if(obj) {
 8006398:	2800      	cmp	r0, #0
 800639a:	d100      	bne.n	800639e <lv_obj_get_transformed_area+0x2aa>
 800639c:	e716      	b.n	80061cc <lv_obj_get_transformed_area+0xd8>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800639e:	f7ff fa1f 	bl	80057e0 <_lv_obj_get_layer_type>
 80063a2:	0005      	movs	r5, r0
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80063a4:	4648      	mov	r0, r9
 80063a6:	f004 fdcf 	bl	800af48 <lv_obj_get_parent>
 80063aa:	2301      	movs	r3, #1
 80063ac:	2201      	movs	r2, #1
 80063ae:	4669      	mov	r1, sp
 80063b0:	f7ff fe58 	bl	8006064 <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 80063b4:	2d02      	cmp	r5, #2
 80063b6:	d000      	beq.n	80063ba <lv_obj_get_transformed_area+0x2c6>
 80063b8:	e708      	b.n	80061cc <lv_obj_get_transformed_area+0xd8>
 80063ba:	2201      	movs	r2, #1
 80063bc:	4669      	mov	r1, sp
 80063be:	4648      	mov	r0, r9
 80063c0:	f7ff fa16 	bl	80057f0 <transform_point>
 80063c4:	e702      	b.n	80061cc <lv_obj_get_transformed_area+0xd8>
 80063c6:	2201      	movs	r2, #1
 80063c8:	4669      	mov	r1, sp
 80063ca:	0020      	movs	r0, r4
 80063cc:	f7ff fa10 	bl	80057f0 <transform_point>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80063d0:	0020      	movs	r0, r4
 80063d2:	f7ff fa05 	bl	80057e0 <_lv_obj_get_layer_type>
 80063d6:	4681      	mov	r9, r0
        if(inv) {
 80063d8:	e700      	b.n	80061dc <lv_obj_get_transformed_area+0xe8>
            if(do_tranf) transform_point(obj, p, inv);
 80063da:	2201      	movs	r2, #1
 80063dc:	0020      	movs	r0, r4
 80063de:	a902      	add	r1, sp, #8
 80063e0:	f7ff fa06 	bl	80057f0 <transform_point>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80063e4:	0020      	movs	r0, r4
 80063e6:	f7ff f9fb 	bl	80057e0 <_lv_obj_get_layer_type>
 80063ea:	4680      	mov	r8, r0
        if(inv) {
 80063ec:	e70c      	b.n	8006208 <lv_obj_get_transformed_area+0x114>
            if(do_tranf) transform_point(obj, p, inv);
 80063ee:	2201      	movs	r2, #1
 80063f0:	0020      	movs	r0, r4
 80063f2:	a901      	add	r1, sp, #4
 80063f4:	f7ff f9fc 	bl	80057f0 <transform_point>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 80063f8:	0020      	movs	r0, r4
 80063fa:	f7ff f9f1 	bl	80057e0 <_lv_obj_get_layer_type>
 80063fe:	4681      	mov	r9, r0
        if(inv) {
 8006400:	e6f7      	b.n	80061f2 <lv_obj_get_transformed_area+0xfe>
 8006402:	46c0      	nop			; (mov r8, r8)

08006404 <lv_obj_area_is_visible>:
{
 8006404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006406:	000e      	movs	r6, r1
 8006408:	b083      	sub	sp, #12
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 800640a:	2101      	movs	r1, #1
{
 800640c:	0004      	movs	r4, r0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 800640e:	f7fe fe17 	bl	8005040 <lv_obj_has_flag>
 8006412:	2800      	cmp	r0, #0
 8006414:	d002      	beq.n	800641c <lv_obj_area_is_visible+0x18>
 8006416:	2000      	movs	r0, #0
}
 8006418:	b003      	add	sp, #12
 800641a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 800641c:	0020      	movs	r0, r4
 800641e:	f004 fd63 	bl	800aee8 <lv_obj_get_screen>
 8006422:	0005      	movs	r5, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8006424:	f004 fd68 	bl	800aef8 <lv_obj_get_disp>
 8006428:	0007      	movs	r7, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 800642a:	f7fb f9a7 	bl	800177c <lv_disp_get_scr_act>
 800642e:	4285      	cmp	r5, r0
 8006430:	d00e      	beq.n	8006450 <lv_obj_area_is_visible+0x4c>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8006432:	0038      	movs	r0, r7
 8006434:	f7fb f9b0 	bl	8001798 <lv_disp_get_scr_prev>
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8006438:	4285      	cmp	r5, r0
 800643a:	d009      	beq.n	8006450 <lv_obj_area_is_visible+0x4c>
       obj_scr != lv_disp_get_layer_top(disp) &&
 800643c:	0038      	movs	r0, r7
 800643e:	f7fb f9b9 	bl	80017b4 <lv_disp_get_layer_top>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8006442:	4285      	cmp	r5, r0
 8006444:	d004      	beq.n	8006450 <lv_obj_area_is_visible+0x4c>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 8006446:	0038      	movs	r0, r7
 8006448:	f7fb f9c2 	bl	80017d0 <lv_disp_get_layer_sys>
       obj_scr != lv_disp_get_layer_top(disp) &&
 800644c:	4285      	cmp	r5, r0
 800644e:	d1e2      	bne.n	8006416 <lv_obj_area_is_visible+0x12>
    if(!lv_obj_has_flag_any(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8006450:	2180      	movs	r1, #128	; 0x80
 8006452:	0020      	movs	r0, r4
 8006454:	0309      	lsls	r1, r1, #12
 8006456:	f7fe fdfb 	bl	8005050 <lv_obj_has_flag_any>
 800645a:	2800      	cmp	r0, #0
 800645c:	d11a      	bne.n	8006494 <lv_obj_area_is_visible+0x90>
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 800645e:	0020      	movs	r0, r4
 8006460:	f7ff f9b6 	bl	80057d0 <_lv_obj_get_ext_draw_size>
        obj_coords.x1 -= ext_size;
 8006464:	466f      	mov	r7, sp
    dest->y1 = src->y1;
 8006466:	2312      	movs	r3, #18
 8006468:	5ee2      	ldrsh	r2, [r4, r3]
    dest->y2 = src->y2;
 800646a:	2116      	movs	r1, #22
 800646c:	5e65      	ldrsh	r5, [r4, r1]
    dest->x2 = src->x2;
 800646e:	2114      	movs	r1, #20
 8006470:	5e63      	ldrsh	r3, [r4, r1]
 8006472:	8a21      	ldrh	r1, [r4, #16]
 8006474:	b280      	uxth	r0, r0
 8006476:	1a09      	subs	r1, r1, r0
        obj_coords.y1 -= ext_size;
 8006478:	1a12      	subs	r2, r2, r0
        obj_coords.x2 += ext_size;
 800647a:	18c3      	adds	r3, r0, r3
        obj_coords.y2 += ext_size;
 800647c:	1940      	adds	r0, r0, r5
        obj_coords.x1 -= ext_size;
 800647e:	8039      	strh	r1, [r7, #0]
        obj_coords.y1 -= ext_size;
 8006480:	807a      	strh	r2, [r7, #2]
        obj_coords.y2 += ext_size;
 8006482:	80f8      	strh	r0, [r7, #6]
        obj_coords.x2 += ext_size;
 8006484:	466a      	mov	r2, sp
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 8006486:	0031      	movs	r1, r6
 8006488:	0030      	movs	r0, r6
        obj_coords.x2 += ext_size;
 800648a:	80bb      	strh	r3, [r7, #4]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 800648c:	f00a ff7e 	bl	801138c <_lv_area_intersect>
 8006490:	2800      	cmp	r0, #0
 8006492:	d0c1      	beq.n	8006418 <lv_obj_area_is_visible+0x14>
    lv_obj_get_transformed_area(obj, area, true, false);
 8006494:	0020      	movs	r0, r4
 8006496:	2300      	movs	r3, #0
 8006498:	2201      	movs	r2, #1
 800649a:	0031      	movs	r1, r6
 800649c:	f7ff fe2a 	bl	80060f4 <lv_obj_get_transformed_area>
    lv_obj_t * par = lv_obj_get_parent(obj);
 80064a0:	0020      	movs	r0, r4
 80064a2:	f004 fd51 	bl	800af48 <lv_obj_get_parent>
            lv_area_t par_area = par->coords;
 80064a6:	466d      	mov	r5, sp
    lv_obj_t * par = lv_obj_get_parent(obj);
 80064a8:	1e04      	subs	r4, r0, #0
    while(par != NULL) {
 80064aa:	d11e      	bne.n	80064ea <lv_obj_area_is_visible+0xe6>
 80064ac:	e024      	b.n	80064f8 <lv_obj_area_is_visible+0xf4>
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 80064ae:	2180      	movs	r1, #128	; 0x80
 80064b0:	0020      	movs	r0, r4
 80064b2:	0309      	lsls	r1, r1, #12
 80064b4:	f7fe fdcc 	bl	8005050 <lv_obj_has_flag_any>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d111      	bne.n	80064e0 <lv_obj_area_is_visible+0xdc>
            lv_area_t par_area = par->coords;
 80064bc:	0023      	movs	r3, r4
 80064be:	002a      	movs	r2, r5
 80064c0:	3310      	adds	r3, #16
 80064c2:	cb03      	ldmia	r3!, {r0, r1}
 80064c4:	c203      	stmia	r2!, {r0, r1}
            lv_obj_get_transformed_area(par, &par_area, true, false);
 80064c6:	2201      	movs	r2, #1
 80064c8:	0029      	movs	r1, r5
 80064ca:	0020      	movs	r0, r4
 80064cc:	2300      	movs	r3, #0
 80064ce:	f7ff fe11 	bl	80060f4 <lv_obj_get_transformed_area>
            if(!_lv_area_intersect(area, area, &par_area)) return false;
 80064d2:	002a      	movs	r2, r5
 80064d4:	0031      	movs	r1, r6
 80064d6:	0030      	movs	r0, r6
 80064d8:	f00a ff58 	bl	801138c <_lv_area_intersect>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d09b      	beq.n	8006418 <lv_obj_area_is_visible+0x14>
        par = lv_obj_get_parent(par);
 80064e0:	0020      	movs	r0, r4
 80064e2:	f004 fd31 	bl	800af48 <lv_obj_get_parent>
 80064e6:	1e04      	subs	r4, r0, #0
    while(par != NULL) {
 80064e8:	d006      	beq.n	80064f8 <lv_obj_area_is_visible+0xf4>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 80064ea:	2101      	movs	r1, #1
 80064ec:	0020      	movs	r0, r4
 80064ee:	f7fe fda7 	bl	8005040 <lv_obj_has_flag>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d0db      	beq.n	80064ae <lv_obj_area_is_visible+0xaa>
 80064f6:	e78e      	b.n	8006416 <lv_obj_area_is_visible+0x12>
    return true;
 80064f8:	2001      	movs	r0, #1
 80064fa:	e78d      	b.n	8006418 <lv_obj_area_is_visible+0x14>

080064fc <lv_obj_invalidate_area>:
{
 80064fc:	b530      	push	{r4, r5, lr}
 80064fe:	b083      	sub	sp, #12
 8006500:	000c      	movs	r4, r1
 8006502:	0005      	movs	r5, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj);
 8006504:	f004 fcf8 	bl	800aef8 <lv_obj_get_disp>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 8006508:	f7fb fb30 	bl	8001b6c <lv_disp_is_invalidation_enabled>
 800650c:	2800      	cmp	r0, #0
 800650e:	d101      	bne.n	8006514 <lv_obj_invalidate_area+0x18>
}
 8006510:	b003      	add	sp, #12
 8006512:	bd30      	pop	{r4, r5, pc}
    dest->x1 = src->x1;
 8006514:	466a      	mov	r2, sp
 8006516:	8823      	ldrh	r3, [r4, #0]
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 8006518:	4669      	mov	r1, sp
 800651a:	8013      	strh	r3, [r2, #0]
    dest->y1 = src->y1;
 800651c:	8863      	ldrh	r3, [r4, #2]
 800651e:	0028      	movs	r0, r5
 8006520:	8053      	strh	r3, [r2, #2]
    dest->x2 = src->x2;
 8006522:	88a3      	ldrh	r3, [r4, #4]
 8006524:	8093      	strh	r3, [r2, #4]
    dest->y2 = src->y2;
 8006526:	88e3      	ldrh	r3, [r4, #6]
 8006528:	80d3      	strh	r3, [r2, #6]
 800652a:	f7ff ff6b 	bl	8006404 <lv_obj_area_is_visible>
 800652e:	2800      	cmp	r0, #0
 8006530:	d0ee      	beq.n	8006510 <lv_obj_invalidate_area+0x14>
    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 8006532:	0028      	movs	r0, r5
 8006534:	f004 fce0 	bl	800aef8 <lv_obj_get_disp>
 8006538:	4669      	mov	r1, sp
 800653a:	f005 fbf3 	bl	800bd24 <_lv_inv_area>
 800653e:	e7e7      	b.n	8006510 <lv_obj_invalidate_area+0x14>

08006540 <lv_obj_invalidate>:
{
 8006540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006542:	46ce      	mov	lr, r9
 8006544:	4647      	mov	r7, r8
 8006546:	b580      	push	{r7, lr}
 8006548:	0004      	movs	r4, r0
 800654a:	b083      	sub	sp, #12
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 800654c:	f7ff f940 	bl	80057d0 <_lv_obj_get_ext_draw_size>
    dest->x1 = src->x1;
 8006550:	2210      	movs	r2, #16
 8006552:	5ea3      	ldrsh	r3, [r4, r2]
 8006554:	0005      	movs	r5, r0
 8006556:	4698      	mov	r8, r3
    dest->y1 = src->y1;
 8006558:	2312      	movs	r3, #18
 800655a:	5ee7      	ldrsh	r7, [r4, r3]
    dest->x2 = src->x2;
 800655c:	2314      	movs	r3, #20
 800655e:	5ee6      	ldrsh	r6, [r4, r3]
    dest->y2 = src->y2;
 8006560:	2216      	movs	r2, #22
 8006562:	5ea3      	ldrsh	r3, [r4, r2]
    lv_disp_t * disp   = lv_obj_get_disp(obj);
 8006564:	0020      	movs	r0, r4
 8006566:	4699      	mov	r9, r3
 8006568:	f004 fcc6 	bl	800aef8 <lv_obj_get_disp>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800656c:	f7fb fafe 	bl	8001b6c <lv_disp_is_invalidation_enabled>
 8006570:	2800      	cmp	r0, #0
 8006572:	d104      	bne.n	800657e <lv_obj_invalidate+0x3e>
}
 8006574:	b003      	add	sp, #12
 8006576:	bcc0      	pop	{r6, r7}
 8006578:	46b9      	mov	r9, r7
 800657a:	46b0      	mov	r8, r6
 800657c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    obj_coords.x1 -= ext_size;
 800657e:	4643      	mov	r3, r8
    dest->x1 = src->x1;
 8006580:	466a      	mov	r2, sp
 8006582:	b2a8      	uxth	r0, r5
 8006584:	1a1b      	subs	r3, r3, r0
    obj_coords.y1 -= ext_size;
 8006586:	1a3f      	subs	r7, r7, r0
    obj_coords.x2 += ext_size;
 8006588:	1986      	adds	r6, r0, r6
    obj_coords.y2 += ext_size;
 800658a:	4448      	add	r0, r9
    dest->y2 = src->y2;
 800658c:	80d0      	strh	r0, [r2, #6]
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 800658e:	4669      	mov	r1, sp
 8006590:	0020      	movs	r0, r4
    dest->x1 = src->x1;
 8006592:	8013      	strh	r3, [r2, #0]
    dest->y1 = src->y1;
 8006594:	8057      	strh	r7, [r2, #2]
    dest->x2 = src->x2;
 8006596:	8096      	strh	r6, [r2, #4]
 8006598:	f7ff ff34 	bl	8006404 <lv_obj_area_is_visible>
 800659c:	2800      	cmp	r0, #0
 800659e:	d0e9      	beq.n	8006574 <lv_obj_invalidate+0x34>
    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 80065a0:	0020      	movs	r0, r4
 80065a2:	f004 fca9 	bl	800aef8 <lv_obj_get_disp>
 80065a6:	4669      	mov	r1, sp
 80065a8:	f005 fbbc 	bl	800bd24 <_lv_inv_area>
 80065ac:	e7e2      	b.n	8006574 <lv_obj_invalidate+0x34>
 80065ae:	46c0      	nop			; (mov r8, r8)

080065b0 <lv_obj_move_to>:
{
 80065b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065b2:	4645      	mov	r5, r8
 80065b4:	464e      	mov	r6, r9
 80065b6:	46de      	mov	lr, fp
 80065b8:	4657      	mov	r7, sl
 80065ba:	b5e0      	push	{r5, r6, r7, lr}
    lv_obj_t * parent = obj->parent;
 80065bc:	6843      	ldr	r3, [r0, #4]
{
 80065be:	0006      	movs	r6, r0
 80065c0:	000d      	movs	r5, r1
 80065c2:	0014      	movs	r4, r2
    lv_obj_t * parent = obj->parent;
 80065c4:	4698      	mov	r8, r3
{
 80065c6:	b087      	sub	sp, #28
    if(parent) {
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d100      	bne.n	80065ce <lv_obj_move_to+0x1e>
 80065cc:	e0a7      	b.n	800671e <lv_obj_move_to+0x16e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80065ce:	2212      	movs	r2, #18
 80065d0:	2100      	movs	r1, #0
 80065d2:	0018      	movs	r0, r3
 80065d4:	f003 f88c 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80065d8:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80065da:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80065dc:	2210      	movs	r2, #16
 80065de:	4640      	mov	r0, r8
 80065e0:	f003 f886 	bl	80096f0 <lv_obj_get_style_prop>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 80065e4:	2180      	movs	r1, #128	; 0x80
 80065e6:	4681      	mov	r9, r0
 80065e8:	02c9      	lsls	r1, r1, #11
 80065ea:	0030      	movs	r0, r6
 80065ec:	f7fe fd28 	bl	8005040 <lv_obj_has_flag>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d100      	bne.n	80065f6 <lv_obj_move_to+0x46>
 80065f4:	e09a      	b.n	800672c <lv_obj_move_to+0x17c>
            x += pad_left + parent->coords.x1;
 80065f6:	4643      	mov	r3, r8
 80065f8:	197f      	adds	r7, r7, r5
 80065fa:	8a1d      	ldrh	r5, [r3, #16]
            y += pad_top + parent->coords.y1;
 80065fc:	444c      	add	r4, r9
            x += pad_left + parent->coords.x1;
 80065fe:	19ed      	adds	r5, r5, r7
            y += pad_top + parent->coords.y1;
 8006600:	0027      	movs	r7, r4
 8006602:	8a5c      	ldrh	r4, [r3, #18]
            x += pad_left + parent->coords.x1;
 8006604:	b2ad      	uxth	r5, r5
            y += pad_top + parent->coords.y1;
 8006606:	19e7      	adds	r7, r4, r7
 8006608:	b2bf      	uxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800660a:	2232      	movs	r2, #50	; 0x32
 800660c:	2100      	movs	r1, #0
 800660e:	4640      	mov	r0, r8
 8006610:	f003 f86e 	bl	80096f0 <lv_obj_get_style_prop>
        x += border_width;
 8006614:	b284      	uxth	r4, r0
 8006616:	1965      	adds	r5, r4, r5
        y += border_width;
 8006618:	19e4      	adds	r4, r4, r7
        x += border_width;
 800661a:	b2ad      	uxth	r5, r5
        y += border_width;
 800661c:	b2a4      	uxth	r4, r4
    diff.x = x - obj->coords.x1;
 800661e:	8a31      	ldrh	r1, [r6, #16]
    diff.y = y - obj->coords.y1;
 8006620:	8a72      	ldrh	r2, [r6, #18]
    diff.x = x - obj->coords.x1;
 8006622:	1a6d      	subs	r5, r5, r1
 8006624:	b2ad      	uxth	r5, r5
    if(diff.x == 0 && diff.y == 0) return;
 8006626:	002b      	movs	r3, r5
    diff.y = y - obj->coords.y1;
 8006628:	1aa4      	subs	r4, r4, r2
 800662a:	b2a4      	uxth	r4, r4
    if(diff.x == 0 && diff.y == 0) return;
 800662c:	4323      	orrs	r3, r4
 800662e:	d06f      	beq.n	8006710 <lv_obj_move_to+0x160>
    lv_obj_invalidate(obj);
 8006630:	0030      	movs	r0, r6
 8006632:	f7ff ff85 	bl	8006540 <lv_obj_invalidate>
    dest->x1 = src->x1;
 8006636:	2310      	movs	r3, #16
 8006638:	5ef0      	ldrsh	r0, [r6, r3]
 800663a:	ab02      	add	r3, sp, #8
 800663c:	8018      	strh	r0, [r3, #0]
    dest->y1 = src->y1;
 800663e:	2312      	movs	r3, #18
 8006640:	5ef1      	ldrsh	r1, [r6, r3]
 8006642:	ab02      	add	r3, sp, #8
 8006644:	8059      	strh	r1, [r3, #2]
    dest->x2 = src->x2;
 8006646:	2314      	movs	r3, #20
 8006648:	5ef2      	ldrsh	r2, [r6, r3]
 800664a:	ab02      	add	r3, sp, #8
 800664c:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 800664e:	2716      	movs	r7, #22
 8006650:	5ff3      	ldrsh	r3, [r6, r7]
 8006652:	af02      	add	r7, sp, #8
 8006654:	80fb      	strh	r3, [r7, #6]
    bool on1 = false;
 8006656:	2700      	movs	r7, #0
 8006658:	9701      	str	r7, [sp, #4]
    if(parent) {
 800665a:	4647      	mov	r7, r8
 800665c:	2f00      	cmp	r7, #0
 800665e:	d014      	beq.n	800668a <lv_obj_move_to+0xda>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 8006660:	4640      	mov	r0, r8
 8006662:	a904      	add	r1, sp, #16
 8006664:	f7ff fc1a 	bl	8005e9c <lv_obj_get_content_coords>
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8006668:	2200      	movs	r2, #0
 800666a:	a904      	add	r1, sp, #16
 800666c:	a802      	add	r0, sp, #8
 800666e:	f00b f811 	bl	8011694 <_lv_area_is_in>
 8006672:	9001      	str	r0, [sp, #4]
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 8006674:	2800      	cmp	r0, #0
 8006676:	d100      	bne.n	800667a <lv_obj_move_to+0xca>
 8006678:	e070      	b.n	800675c <lv_obj_move_to+0x1ac>
    obj->coords.x1 += diff.x;
 800667a:	2310      	movs	r3, #16
 800667c:	5ef0      	ldrsh	r0, [r6, r3]
    obj->coords.y1 += diff.y;
 800667e:	2312      	movs	r3, #18
 8006680:	5ef1      	ldrsh	r1, [r6, r3]
    obj->coords.x2 += diff.x;
 8006682:	2314      	movs	r3, #20
 8006684:	5ef2      	ldrsh	r2, [r6, r3]
    obj->coords.y2 += diff.y;
 8006686:	2716      	movs	r7, #22
 8006688:	5ff3      	ldrsh	r3, [r6, r7]
    obj->coords.x1 += diff.x;
 800668a:	1828      	adds	r0, r5, r0
    obj->coords.y1 += diff.y;
 800668c:	1861      	adds	r1, r4, r1
    obj->coords.x2 += diff.x;
 800668e:	18aa      	adds	r2, r5, r2
    obj->coords.y2 += diff.y;
 8006690:	18e3      	adds	r3, r4, r3
    obj->coords.x1 += diff.x;
 8006692:	8230      	strh	r0, [r6, #16]
    obj->coords.y1 += diff.y;
 8006694:	8271      	strh	r1, [r6, #18]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006696:	0030      	movs	r0, r6
    obj->coords.x2 += diff.x;
 8006698:	82b2      	strh	r2, [r6, #20]
    obj->coords.y2 += diff.y;
 800669a:	82f3      	strh	r3, [r6, #22]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800669c:	f004 fc6a 	bl	800af74 <lv_obj_get_child_cnt>
 80066a0:	4681      	mov	r9, r0
    for(i = 0; i < child_cnt; i++) {
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d01b      	beq.n	80066de <lv_obj_move_to+0x12e>
    diff.x = x - obj->coords.x1;
 80066a6:	b22b      	sxth	r3, r5
 80066a8:	469b      	mov	fp, r3
    diff.y = y - obj->coords.y1;
 80066aa:	b223      	sxth	r3, r4
 80066ac:	469a      	mov	sl, r3
    for(i = 0; i < child_cnt; i++) {
 80066ae:	2700      	movs	r7, #0
        lv_obj_t * child = obj->spec_attr->children[i];
 80066b0:	68b3      	ldr	r3, [r6, #8]
 80066b2:	00ba      	lsls	r2, r7, #2
 80066b4:	681b      	ldr	r3, [r3, #0]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 80066b6:	4659      	mov	r1, fp
        lv_obj_t * child = obj->spec_attr->children[i];
 80066b8:	58d0      	ldr	r0, [r2, r3]
    for(i = 0; i < child_cnt; i++) {
 80066ba:	3701      	adds	r7, #1
        child->coords.x1 += x_diff;
 80066bc:	8a03      	ldrh	r3, [r0, #16]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 80066be:	4652      	mov	r2, sl
        child->coords.x1 += x_diff;
 80066c0:	18eb      	adds	r3, r5, r3
 80066c2:	8203      	strh	r3, [r0, #16]
        child->coords.y1 += y_diff;
 80066c4:	8a43      	ldrh	r3, [r0, #18]
 80066c6:	18e3      	adds	r3, r4, r3
 80066c8:	8243      	strh	r3, [r0, #18]
        child->coords.x2 += x_diff;
 80066ca:	8a83      	ldrh	r3, [r0, #20]
 80066cc:	18eb      	adds	r3, r5, r3
 80066ce:	8283      	strh	r3, [r0, #20]
        child->coords.y2 += y_diff;
 80066d0:	8ac3      	ldrh	r3, [r0, #22]
 80066d2:	18e3      	adds	r3, r4, r3
 80066d4:	82c3      	strh	r3, [r0, #22]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 80066d6:	f7ff f8d5 	bl	8005884 <lv_obj_move_children_by.constprop.0>
    for(i = 0; i < child_cnt; i++) {
 80066da:	45b9      	cmp	r9, r7
 80066dc:	d1e8      	bne.n	80066b0 <lv_obj_move_to+0x100>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80066de:	4643      	mov	r3, r8
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01f      	beq.n	8006724 <lv_obj_move_to+0x174>
 80066e4:	0032      	movs	r2, r6
 80066e6:	2122      	movs	r1, #34	; 0x22
 80066e8:	4640      	mov	r0, r8
 80066ea:	f7fb fb37 	bl	8001d5c <lv_event_send>
    lv_obj_invalidate(obj);
 80066ee:	0030      	movs	r0, r6
 80066f0:	f7ff ff26 	bl	8006540 <lv_obj_invalidate>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 80066f4:	0030      	movs	r0, r6
 80066f6:	2200      	movs	r2, #0
 80066f8:	3010      	adds	r0, #16
 80066fa:	a904      	add	r1, sp, #16
 80066fc:	f00a ffca 	bl	8011694 <_lv_area_is_in>
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 8006700:	9b01      	ldr	r3, [sp, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <lv_obj_move_to+0x15a>
 8006706:	2800      	cmp	r0, #0
 8006708:	d002      	beq.n	8006710 <lv_obj_move_to+0x160>
 800670a:	4640      	mov	r0, r8
 800670c:	f002 fc76 	bl	8008ffc <lv_obj_scrollbar_invalidate>
}
 8006710:	b007      	add	sp, #28
 8006712:	bcf0      	pop	{r4, r5, r6, r7}
 8006714:	46bb      	mov	fp, r7
 8006716:	46b2      	mov	sl, r6
 8006718:	46a9      	mov	r9, r5
 800671a:	46a0      	mov	r8, r4
 800671c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    diff.x = x - obj->coords.x1;
 800671e:	b28d      	uxth	r5, r1
    diff.y = y - obj->coords.y1;
 8006720:	b294      	uxth	r4, r2
 8006722:	e77c      	b.n	800661e <lv_obj_move_to+0x6e>
    lv_obj_invalidate(obj);
 8006724:	0030      	movs	r0, r6
 8006726:	f7ff ff0b 	bl	8006540 <lv_obj_invalidate>
    if(parent) {
 800672a:	e7f1      	b.n	8006710 <lv_obj_move_to+0x160>
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 800672c:	4643      	mov	r3, r8
 800672e:	2010      	movs	r0, #16
 8006730:	5e18      	ldrsh	r0, [r3, r0]
 8006732:	b23f      	sxth	r7, r7
 8006734:	19c7      	adds	r7, r0, r7
 8006736:	4640      	mov	r0, r8
 8006738:	f001 fabc 	bl	8007cb4 <lv_obj_get_scroll_x>
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 800673c:	4643      	mov	r3, r8
 800673e:	2212      	movs	r2, #18
 8006740:	5e9b      	ldrsh	r3, [r3, r2]
 8006742:	464a      	mov	r2, r9
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 8006744:	1a3f      	subs	r7, r7, r0
 8006746:	197d      	adds	r5, r7, r5
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 8006748:	4640      	mov	r0, r8
 800674a:	b217      	sxth	r7, r2
 800674c:	19df      	adds	r7, r3, r7
 800674e:	f001 fabb 	bl	8007cc8 <lv_obj_get_scroll_y>
 8006752:	1a3f      	subs	r7, r7, r0
 8006754:	193f      	adds	r7, r7, r4
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 8006756:	b2ad      	uxth	r5, r5
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 8006758:	b2bf      	uxth	r7, r7
 800675a:	e756      	b.n	800660a <lv_obj_move_to+0x5a>
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 800675c:	4640      	mov	r0, r8
 800675e:	f002 fc4d 	bl	8008ffc <lv_obj_scrollbar_invalidate>
 8006762:	e78a      	b.n	800667a <lv_obj_move_to+0xca>

08006764 <lv_obj_refr_pos.part.0>:
void lv_obj_refr_pos(lv_obj_t * obj)
 8006764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006766:	46de      	mov	lr, fp
 8006768:	4645      	mov	r5, r8
 800676a:	4657      	mov	r7, sl
 800676c:	464e      	mov	r6, r9
 800676e:	b5e0      	push	{r5, r6, r7, lr}
 8006770:	b08b      	sub	sp, #44	; 0x2c
 8006772:	0004      	movs	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8006774:	f004 fbe8 	bl	800af48 <lv_obj_get_parent>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8006778:	2207      	movs	r2, #7
 800677a:	2100      	movs	r1, #0
 800677c:	0005      	movs	r5, r0
 800677e:	0020      	movs	r0, r4
 8006780:	f002 ffb6 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8006784:	2208      	movs	r2, #8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8006786:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8006788:	2100      	movs	r1, #0
    return (lv_coord_t)v.num;
 800678a:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 800678c:	0020      	movs	r0, r4
 800678e:	f002 ffaf 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006792:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8006794:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 8006796:	9300      	str	r3, [sp, #0]
    if(parent == NULL) {
 8006798:	2d00      	cmp	r5, #0
 800679a:	d100      	bne.n	800679e <lv_obj_refr_pos.part.0+0x3a>
 800679c:	e156      	b.n	8006a4c <lv_obj_refr_pos.part.0+0x2e8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800679e:	2212      	movs	r2, #18
 80067a0:	2100      	movs	r1, #0
 80067a2:	0028      	movs	r0, r5
 80067a4:	f002 ffa4 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80067a8:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80067aa:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80067ac:	2100      	movs	r1, #0
 80067ae:	0028      	movs	r0, r5
 80067b0:	f002 ff9e 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80067b4:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80067b6:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80067b8:	2100      	movs	r1, #0
 80067ba:	0028      	movs	r0, r5
 80067bc:	f002 ff98 	bl	80096f0 <lv_obj_get_style_prop>
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 80067c0:	0033      	movs	r3, r6
 80067c2:	2601      	movs	r6, #1
 80067c4:	4453      	add	r3, sl
 80067c6:	1af3      	subs	r3, r6, r3
 80067c8:	0040      	lsls	r0, r0, #1
 80067ca:	1a1b      	subs	r3, r3, r0
 80067cc:	8aa8      	ldrh	r0, [r5, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80067ce:	2210      	movs	r2, #16
 80067d0:	181b      	adds	r3, r3, r0
 80067d2:	8a28      	ldrh	r0, [r5, #16]
 80067d4:	2100      	movs	r1, #0
 80067d6:	1a18      	subs	r0, r3, r0
 80067d8:	b283      	uxth	r3, r0
 80067da:	9309      	str	r3, [sp, #36]	; 0x24
 80067dc:	b203      	sxth	r3, r0
 80067de:	0028      	movs	r0, r5
 80067e0:	9304      	str	r3, [sp, #16]
 80067e2:	f002 ff85 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80067e6:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80067e8:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80067ea:	2100      	movs	r1, #0
 80067ec:	0028      	movs	r0, r5
 80067ee:	f002 ff7f 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80067f2:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80067f4:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80067f6:	2100      	movs	r1, #0
 80067f8:	0028      	movs	r0, r5
 80067fa:	f002 ff79 	bl	80096f0 <lv_obj_get_style_prop>
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 80067fe:	4653      	mov	r3, sl
 8006800:	445b      	add	r3, fp
 8006802:	1af6      	subs	r6, r6, r3
 8006804:	0040      	lsls	r0, r0, #1
 8006806:	1a36      	subs	r6, r6, r0
 8006808:	8ae8      	ldrh	r0, [r5, #22]
 800680a:	1836      	adds	r6, r6, r0
 800680c:	8a68      	ldrh	r0, [r5, #18]
 800680e:	1a36      	subs	r6, r6, r0
 8006810:	b2b3      	uxth	r3, r6
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8006812:	20c0      	movs	r0, #192	; 0xc0
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8006814:	9308      	str	r3, [sp, #32]
 8006816:	b233      	sxth	r3, r6
 8006818:	9303      	str	r3, [sp, #12]
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 800681a:	464b      	mov	r3, r9
 800681c:	01c0      	lsls	r0, r0, #7
 800681e:	4003      	ands	r3, r0
 8006820:	0018      	movs	r0, r3
 8006822:	2380      	movs	r3, #128	; 0x80
 8006824:	019b      	lsls	r3, r3, #6
 8006826:	4298      	cmp	r0, r3
 8006828:	d100      	bne.n	800682c <lv_obj_refr_pos.part.0+0xc8>
 800682a:	e0a4      	b.n	8006976 <lv_obj_refr_pos.part.0+0x212>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 800682c:	20c0      	movs	r0, #192	; 0xc0
 800682e:	4643      	mov	r3, r8
 8006830:	01c0      	lsls	r0, r0, #7
 8006832:	4003      	ands	r3, r0
 8006834:	0018      	movs	r0, r3
 8006836:	2380      	movs	r3, #128	; 0x80
 8006838:	019b      	lsls	r3, r3, #6
 800683a:	4298      	cmp	r0, r3
 800683c:	d100      	bne.n	8006840 <lv_obj_refr_pos.part.0+0xdc>
 800683e:	e085      	b.n	800694c <lv_obj_refr_pos.part.0+0x1e8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8006840:	226a      	movs	r2, #106	; 0x6a
 8006842:	2100      	movs	r1, #0
 8006844:	0020      	movs	r0, r4
 8006846:	f002 ff53 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800684a:	226b      	movs	r2, #107	; 0x6b
    return (lv_coord_t)v.num;
 800684c:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800684e:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8006850:	2100      	movs	r1, #0
 8006852:	0020      	movs	r0, r4
    return (lv_coord_t)v.num;
 8006854:	469a      	mov	sl, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8006856:	f002 ff4b 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800685a:	b203      	sxth	r3, r0
 800685c:	4699      	mov	r9, r3
 800685e:	8aa3      	ldrh	r3, [r4, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006860:	8a22      	ldrh	r2, [r4, #16]
 8006862:	3301      	adds	r3, #1
 8006864:	b29b      	uxth	r3, r3
 8006866:	9307      	str	r3, [sp, #28]
 8006868:	1a9b      	subs	r3, r3, r2
 800686a:	b21b      	sxth	r3, r3
 800686c:	9301      	str	r3, [sp, #4]
 800686e:	8ae3      	ldrh	r3, [r4, #22]
 8006870:	9205      	str	r2, [sp, #20]
 8006872:	3301      	adds	r3, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006874:	8a62      	ldrh	r2, [r4, #18]
 8006876:	b29b      	uxth	r3, r3
 8006878:	469b      	mov	fp, r3
 800687a:	1a9b      	subs	r3, r3, r2
 800687c:	b21b      	sxth	r3, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800687e:	0006      	movs	r6, r0
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8006880:	20c0      	movs	r0, #192	; 0xc0
 8006882:	9302      	str	r3, [sp, #8]
 8006884:	4643      	mov	r3, r8
 8006886:	01c0      	lsls	r0, r0, #7
 8006888:	4018      	ands	r0, r3
 800688a:	2380      	movs	r3, #128	; 0x80
 800688c:	9206      	str	r2, [sp, #24]
 800688e:	019b      	lsls	r3, r3, #6
 8006890:	4298      	cmp	r0, r3
 8006892:	d047      	beq.n	8006924 <lv_obj_refr_pos.part.0+0x1c0>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8006894:	20c0      	movs	r0, #192	; 0xc0
 8006896:	2380      	movs	r3, #128	; 0x80
 8006898:	01c0      	lsls	r0, r0, #7
 800689a:	4006      	ands	r6, r0
 800689c:	019b      	lsls	r3, r3, #6
 800689e:	429e      	cmp	r6, r3
 80068a0:	d02c      	beq.n	80068fc <lv_obj_refr_pos.part.0+0x198>
    y += tr_y;
 80068a2:	9800      	ldr	r0, [sp, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80068a4:	2209      	movs	r2, #9
 80068a6:	4448      	add	r0, r9
 80068a8:	b283      	uxth	r3, r0
 80068aa:	4698      	mov	r8, r3
 80068ac:	2100      	movs	r1, #0
 80068ae:	b203      	sxth	r3, r0
 80068b0:	0020      	movs	r0, r4
 80068b2:	4699      	mov	r9, r3
 80068b4:	f002 ff1c 	bl	80096f0 <lv_obj_get_style_prop>
    x += tr_x;
 80068b8:	4457      	add	r7, sl
    return (lv_align_t)v.num;
 80068ba:	b2c0      	uxtb	r0, r0
 80068bc:	b2be      	uxth	r6, r7
 80068be:	b23f      	sxth	r7, r7
    if(align == LV_ALIGN_DEFAULT) {
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d007      	beq.n	80068d4 <lv_obj_refr_pos.part.0+0x170>
    if(align == LV_ALIGN_TOP_LEFT) {
 80068c4:	2801      	cmp	r0, #1
 80068c6:	d00d      	beq.n	80068e4 <lv_obj_refr_pos.part.0+0x180>
        switch(align) {
 80068c8:	2809      	cmp	r0, #9
 80068ca:	d80b      	bhi.n	80068e4 <lv_obj_refr_pos.part.0+0x180>
 80068cc:	4b62      	ldr	r3, [pc, #392]	; (8006a58 <lv_obj_refr_pos.part.0+0x2f4>)
 80068ce:	0080      	lsls	r0, r0, #2
 80068d0:	581b      	ldr	r3, [r3, r0]
 80068d2:	469f      	mov	pc, r3
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80068d4:	2216      	movs	r2, #22
 80068d6:	2100      	movs	r1, #0
 80068d8:	0028      	movs	r0, r5
 80068da:	f002 ff09 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80068de:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 80068e0:	2801      	cmp	r0, #1
 80068e2:	d05b      	beq.n	800699c <lv_obj_refr_pos.part.0+0x238>
        lv_obj_move_to(obj, x, y);
 80068e4:	464a      	mov	r2, r9
 80068e6:	0039      	movs	r1, r7
 80068e8:	0020      	movs	r0, r4
 80068ea:	f7ff fe61 	bl	80065b0 <lv_obj_move_to>
}
 80068ee:	b00b      	add	sp, #44	; 0x2c
 80068f0:	bcf0      	pop	{r4, r5, r6, r7}
 80068f2:	46bb      	mov	fp, r7
 80068f4:	46b2      	mov	sl, r6
 80068f6:	46a9      	mov	r9, r5
 80068f8:	46a0      	mov	r8, r4
 80068fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 80068fc:	464b      	mov	r3, r9
 80068fe:	4857      	ldr	r0, [pc, #348]	; (8006a5c <lv_obj_refr_pos.part.0+0x2f8>)
 8006900:	4018      	ands	r0, r3
 8006902:	23fa      	movs	r3, #250	; 0xfa
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	4298      	cmp	r0, r3
 8006908:	dccb      	bgt.n	80068a2 <lv_obj_refr_pos.part.0+0x13e>
 800690a:	23fa      	movs	r3, #250	; 0xfa
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4298      	cmp	r0, r3
 8006910:	dd00      	ble.n	8006914 <lv_obj_refr_pos.part.0+0x1b0>
 8006912:	1a18      	subs	r0, r3, r0
 8006914:	9b02      	ldr	r3, [sp, #8]
 8006916:	2164      	movs	r1, #100	; 0x64
 8006918:	4358      	muls	r0, r3
 800691a:	f7f9 fc8f 	bl	800023c <__divsi3>
 800691e:	b203      	sxth	r3, r0
 8006920:	4699      	mov	r9, r3
 8006922:	e7be      	b.n	80068a2 <lv_obj_refr_pos.part.0+0x13e>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8006924:	4653      	mov	r3, sl
 8006926:	484d      	ldr	r0, [pc, #308]	; (8006a5c <lv_obj_refr_pos.part.0+0x2f8>)
 8006928:	4018      	ands	r0, r3
 800692a:	23fa      	movs	r3, #250	; 0xfa
 800692c:	00db      	lsls	r3, r3, #3
 800692e:	4298      	cmp	r0, r3
 8006930:	dcb0      	bgt.n	8006894 <lv_obj_refr_pos.part.0+0x130>
 8006932:	23fa      	movs	r3, #250	; 0xfa
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4298      	cmp	r0, r3
 8006938:	dd00      	ble.n	800693c <lv_obj_refr_pos.part.0+0x1d8>
 800693a:	1a18      	subs	r0, r3, r0
 800693c:	9b01      	ldr	r3, [sp, #4]
 800693e:	2164      	movs	r1, #100	; 0x64
 8006940:	4358      	muls	r0, r3
 8006942:	f7f9 fc7b 	bl	800023c <__divsi3>
 8006946:	b203      	sxth	r3, r0
 8006948:	469a      	mov	sl, r3
 800694a:	e7a3      	b.n	8006894 <lv_obj_refr_pos.part.0+0x130>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 800694c:	9b00      	ldr	r3, [sp, #0]
 800694e:	4843      	ldr	r0, [pc, #268]	; (8006a5c <lv_obj_refr_pos.part.0+0x2f8>)
 8006950:	4018      	ands	r0, r3
 8006952:	23fa      	movs	r3, #250	; 0xfa
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	4298      	cmp	r0, r3
 8006958:	dd00      	ble.n	800695c <lv_obj_refr_pos.part.0+0x1f8>
 800695a:	e771      	b.n	8006840 <lv_obj_refr_pos.part.0+0xdc>
 800695c:	23fa      	movs	r3, #250	; 0xfa
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4298      	cmp	r0, r3
 8006962:	dd00      	ble.n	8006966 <lv_obj_refr_pos.part.0+0x202>
 8006964:	1a18      	subs	r0, r3, r0
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	2164      	movs	r1, #100	; 0x64
 800696a:	4358      	muls	r0, r3
 800696c:	f7f9 fc66 	bl	800023c <__divsi3>
 8006970:	b203      	sxth	r3, r0
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	e764      	b.n	8006840 <lv_obj_refr_pos.part.0+0xdc>
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8006976:	23fa      	movs	r3, #250	; 0xfa
 8006978:	4838      	ldr	r0, [pc, #224]	; (8006a5c <lv_obj_refr_pos.part.0+0x2f8>)
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	4038      	ands	r0, r7
 800697e:	4298      	cmp	r0, r3
 8006980:	dd00      	ble.n	8006984 <lv_obj_refr_pos.part.0+0x220>
 8006982:	e753      	b.n	800682c <lv_obj_refr_pos.part.0+0xc8>
 8006984:	23fa      	movs	r3, #250	; 0xfa
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4298      	cmp	r0, r3
 800698a:	dd00      	ble.n	800698e <lv_obj_refr_pos.part.0+0x22a>
 800698c:	1a18      	subs	r0, r3, r0
 800698e:	9b04      	ldr	r3, [sp, #16]
 8006990:	2164      	movs	r1, #100	; 0x64
 8006992:	4358      	muls	r0, r3
 8006994:	f7f9 fc52 	bl	800023c <__divsi3>
 8006998:	b207      	sxth	r7, r0
 800699a:	e747      	b.n	800682c <lv_obj_refr_pos.part.0+0xc8>
                x += pw - w;
 800699c:	9b05      	ldr	r3, [sp, #20]
 800699e:	9a07      	ldr	r2, [sp, #28]
 80069a0:	1a9f      	subs	r7, r3, r2
 80069a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a4:	469c      	mov	ip, r3
 80069a6:	4467      	add	r7, ip
 80069a8:	19f7      	adds	r7, r6, r7
 80069aa:	b23f      	sxth	r7, r7
                break;
 80069ac:	e79a      	b.n	80068e4 <lv_obj_refr_pos.part.0+0x180>
                x += pw - w;
 80069ae:	9b05      	ldr	r3, [sp, #20]
 80069b0:	9a07      	ldr	r2, [sp, #28]
 80069b2:	1a9f      	subs	r7, r3, r2
 80069b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b6:	469c      	mov	ip, r3
 80069b8:	4467      	add	r7, ip
                x += pw / 2 - w / 2;
 80069ba:	19f7      	adds	r7, r6, r7
 80069bc:	b23f      	sxth	r7, r7
                y += ph - h;
 80069be:	465a      	mov	r2, fp
 80069c0:	9b06      	ldr	r3, [sp, #24]
 80069c2:	1a9b      	subs	r3, r3, r2
 80069c4:	9a08      	ldr	r2, [sp, #32]
 80069c6:	4694      	mov	ip, r2
 80069c8:	4463      	add	r3, ip
 80069ca:	4443      	add	r3, r8
 80069cc:	b21b      	sxth	r3, r3
 80069ce:	4699      	mov	r9, r3
                break;
 80069d0:	e788      	b.n	80068e4 <lv_obj_refr_pos.part.0+0x180>
                x += pw / 2 - w / 2;
 80069d2:	9b04      	ldr	r3, [sp, #16]
 80069d4:	9a01      	ldr	r2, [sp, #4]
 80069d6:	469c      	mov	ip, r3
 80069d8:	0fdf      	lsrs	r7, r3, #31
 80069da:	4467      	add	r7, ip
 80069dc:	4694      	mov	ip, r2
 80069de:	0fd3      	lsrs	r3, r2, #31
 80069e0:	4463      	add	r3, ip
 80069e2:	107f      	asrs	r7, r7, #1
 80069e4:	105b      	asrs	r3, r3, #1
 80069e6:	1aff      	subs	r7, r7, r3
 80069e8:	19f7      	adds	r7, r6, r7
 80069ea:	b23f      	sxth	r7, r7
                y += ph / 2 - h / 2;
 80069ec:	9a03      	ldr	r2, [sp, #12]
 80069ee:	9902      	ldr	r1, [sp, #8]
 80069f0:	4694      	mov	ip, r2
 80069f2:	0fd3      	lsrs	r3, r2, #31
 80069f4:	4463      	add	r3, ip
 80069f6:	468c      	mov	ip, r1
 80069f8:	105a      	asrs	r2, r3, #1
 80069fa:	0fcb      	lsrs	r3, r1, #31
 80069fc:	4463      	add	r3, ip
 80069fe:	105b      	asrs	r3, r3, #1
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	4443      	add	r3, r8
 8006a04:	b21b      	sxth	r3, r3
 8006a06:	4699      	mov	r9, r3
                break;
 8006a08:	e76c      	b.n	80068e4 <lv_obj_refr_pos.part.0+0x180>
                x += pw / 2 - w / 2;
 8006a0a:	9b04      	ldr	r3, [sp, #16]
 8006a0c:	9a01      	ldr	r2, [sp, #4]
 8006a0e:	469c      	mov	ip, r3
 8006a10:	0fdf      	lsrs	r7, r3, #31
 8006a12:	4467      	add	r7, ip
 8006a14:	4694      	mov	ip, r2
 8006a16:	0fd3      	lsrs	r3, r2, #31
 8006a18:	4463      	add	r3, ip
 8006a1a:	107f      	asrs	r7, r7, #1
 8006a1c:	105b      	asrs	r3, r3, #1
 8006a1e:	1aff      	subs	r7, r7, r3
 8006a20:	19f7      	adds	r7, r6, r7
 8006a22:	b23f      	sxth	r7, r7
                break;
 8006a24:	e75e      	b.n	80068e4 <lv_obj_refr_pos.part.0+0x180>
                x += pw - w;
 8006a26:	9b05      	ldr	r3, [sp, #20]
 8006a28:	9a07      	ldr	r2, [sp, #28]
 8006a2a:	1a9f      	subs	r7, r3, r2
 8006a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a2e:	469c      	mov	ip, r3
 8006a30:	4467      	add	r7, ip
 8006a32:	e7d9      	b.n	80069e8 <lv_obj_refr_pos.part.0+0x284>
                x += pw / 2 - w / 2;
 8006a34:	9b04      	ldr	r3, [sp, #16]
 8006a36:	9a01      	ldr	r2, [sp, #4]
 8006a38:	469c      	mov	ip, r3
 8006a3a:	0fdf      	lsrs	r7, r3, #31
 8006a3c:	4467      	add	r7, ip
 8006a3e:	4694      	mov	ip, r2
 8006a40:	0fd3      	lsrs	r3, r2, #31
 8006a42:	4463      	add	r3, ip
 8006a44:	107f      	asrs	r7, r7, #1
 8006a46:	105b      	asrs	r3, r3, #1
 8006a48:	1aff      	subs	r7, r7, r3
 8006a4a:	e7b6      	b.n	80069ba <lv_obj_refr_pos.part.0+0x256>
        lv_obj_move_to(obj, x, y);
 8006a4c:	001a      	movs	r2, r3
 8006a4e:	0039      	movs	r1, r7
 8006a50:	0020      	movs	r0, r4
 8006a52:	f7ff fdad 	bl	80065b0 <lv_obj_move_to>
        return;
 8006a56:	e74a      	b.n	80068ee <lv_obj_refr_pos.part.0+0x18a>
 8006a58:	0801b760 	.word	0x0801b760
 8006a5c:	ffff9fff 	.word	0xffff9fff

08006a60 <lv_obj_refr_size.part.0>:
bool lv_obj_refr_size(lv_obj_t * obj)
 8006a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a62:	46de      	mov	lr, fp
 8006a64:	4645      	mov	r5, r8
 8006a66:	4657      	mov	r7, sl
 8006a68:	464e      	mov	r6, r9
 8006a6a:	b5e0      	push	{r5, r6, r7, lr}
 8006a6c:	b08d      	sub	sp, #52	; 0x34
 8006a6e:	0004      	movs	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8006a70:	f004 fa6a 	bl	800af48 <lv_obj_get_parent>
 8006a74:	1e05      	subs	r5, r0, #0
    if(parent == NULL) return false;
 8006a76:	d100      	bne.n	8006a7a <lv_obj_refr_size.part.0+0x1a>
 8006a78:	e182      	b.n	8006d80 <lv_obj_refr_size.part.0+0x320>
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8006a7a:	0020      	movs	r0, r4
 8006a7c:	f001 fe46 	bl	800870c <lv_obj_get_scroll_left>
    if(obj->w_layout) {
 8006a80:	7fe3      	ldrb	r3, [r4, #31]
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8006a82:	9001      	str	r0, [sp, #4]
    if(obj->w_layout) {
 8006a84:	075b      	lsls	r3, r3, #29
 8006a86:	d400      	bmi.n	8006a8a <lv_obj_refr_size.part.0+0x2a>
 8006a88:	e07a      	b.n	8006b80 <lv_obj_refr_size.part.0+0x120>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006a8a:	8aa6      	ldrh	r6, [r4, #20]
 8006a8c:	8a23      	ldrh	r3, [r4, #16]
 8006a8e:	3601      	adds	r6, #1
 8006a90:	1af6      	subs	r6, r6, r3
    bool w_is_content = false;
 8006a92:	2300      	movs	r3, #0
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8006a94:	0020      	movs	r0, r4
    bool w_is_content = false;
 8006a96:	9300      	str	r3, [sp, #0]
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8006a98:	f001 f920 	bl	8007cdc <lv_obj_get_scroll_top>
    if(obj->h_layout) {
 8006a9c:	7fe3      	ldrb	r3, [r4, #31]
 8006a9e:	b236      	sxth	r6, r6
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8006aa0:	9002      	str	r0, [sp, #8]
    if(obj->h_layout) {
 8006aa2:	079b      	lsls	r3, r3, #30
 8006aa4:	d400      	bmi.n	8006aa8 <lv_obj_refr_size.part.0+0x48>
 8006aa6:	e0e7      	b.n	8006c78 <lv_obj_refr_size.part.0+0x218>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006aa8:	8ae7      	ldrh	r7, [r4, #22]
 8006aaa:	8a63      	ldrh	r3, [r4, #18]
 8006aac:	3701      	adds	r7, #1
 8006aae:	1aff      	subs	r7, r7, r3
    if(w_is_content || h_is_content) {
 8006ab0:	9b00      	ldr	r3, [sp, #0]
 8006ab2:	b23f      	sxth	r7, r7
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d000      	beq.n	8006aba <lv_obj_refr_size.part.0+0x5a>
 8006ab8:	e15b      	b.n	8006d72 <lv_obj_refr_size.part.0+0x312>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8006aba:	8aa3      	ldrh	r3, [r4, #20]
 8006abc:	8a22      	ldrh	r2, [r4, #16]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 8006ac2:	b21b      	sxth	r3, r3
 8006ac4:	42b3      	cmp	r3, r6
 8006ac6:	d107      	bne.n	8006ad8 <lv_obj_refr_size.part.0+0x78>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8006ac8:	8ae3      	ldrh	r3, [r4, #22]
 8006aca:	8a62      	ldrh	r2, [r4, #18]
 8006acc:	3301      	adds	r3, #1
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	b21b      	sxth	r3, r3
 8006ad2:	42bb      	cmp	r3, r7
 8006ad4:	d100      	bne.n	8006ad8 <lv_obj_refr_size.part.0+0x78>
 8006ad6:	e153      	b.n	8006d80 <lv_obj_refr_size.part.0+0x320>
    lv_obj_invalidate(obj);
 8006ad8:	0020      	movs	r0, r4
 8006ada:	f7ff fd31 	bl	8006540 <lv_obj_invalidate>
    dest->x1 = src->x1;
 8006ade:	8a23      	ldrh	r3, [r4, #16]
 8006ae0:	aa08      	add	r2, sp, #32
 8006ae2:	8013      	strh	r3, [r2, #0]
    dest->y1 = src->y1;
 8006ae4:	8a63      	ldrh	r3, [r4, #18]
    lv_obj_get_content_coords(parent, &parent_fit_area);
 8006ae6:	0028      	movs	r0, r5
 8006ae8:	8053      	strh	r3, [r2, #2]
    dest->x2 = src->x2;
 8006aea:	8aa3      	ldrh	r3, [r4, #20]
 8006aec:	a90a      	add	r1, sp, #40	; 0x28
 8006aee:	8093      	strh	r3, [r2, #4]
    dest->y2 = src->y2;
 8006af0:	8ae3      	ldrh	r3, [r4, #22]
 8006af2:	80d3      	strh	r3, [r2, #6]
 8006af4:	f7ff f9d2 	bl	8005e9c <lv_obj_get_content_coords>
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8006af8:	2200      	movs	r2, #0
 8006afa:	a90a      	add	r1, sp, #40	; 0x28
 8006afc:	a808      	add	r0, sp, #32
 8006afe:	f00a fdc9 	bl	8011694 <_lv_area_is_in>
 8006b02:	4680      	mov	r8, r0
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d100      	bne.n	8006b0a <lv_obj_refr_size.part.0+0xaa>
 8006b08:	e141      	b.n	8006d8e <lv_obj_refr_size.part.0+0x32e>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8006b0a:	8a63      	ldrh	r3, [r4, #18]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8006b0c:	2216      	movs	r2, #22
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	19df      	adds	r7, r3, r7
 8006b12:	2100      	movs	r1, #0
 8006b14:	0020      	movs	r0, r4
 8006b16:	82e7      	strh	r7, [r4, #22]
 8006b18:	f002 fdea 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8006b1c:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8006b1e:	2801      	cmp	r0, #1
 8006b20:	d100      	bne.n	8006b24 <lv_obj_refr_size.part.0+0xc4>
 8006b22:	e12f      	b.n	8006d84 <lv_obj_refr_size.part.0+0x324>
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8006b24:	8a23      	ldrh	r3, [r4, #16]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	199e      	adds	r6, r3, r6
 8006b2a:	82a6      	strh	r6, [r4, #20]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8006b2c:	2129      	movs	r1, #41	; 0x29
 8006b2e:	aa08      	add	r2, sp, #32
 8006b30:	0020      	movs	r0, r4
 8006b32:	f7fb f913 	bl	8001d5c <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8006b36:	0022      	movs	r2, r4
 8006b38:	2122      	movs	r1, #34	; 0x22
 8006b3a:	0028      	movs	r0, r5
 8006b3c:	f7fb f90e 	bl	8001d5c <lv_event_send>
    lv_obj_invalidate(obj);
 8006b40:	0020      	movs	r0, r4
 8006b42:	f7ff fcfd 	bl	8006540 <lv_obj_invalidate>
    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 8006b46:	2100      	movs	r1, #0
 8006b48:	0020      	movs	r0, r4
 8006b4a:	f002 fa99 	bl	8009080 <lv_obj_readjust_scroll>
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 8006b4e:	0020      	movs	r0, r4
 8006b50:	2200      	movs	r2, #0
 8006b52:	a90a      	add	r1, sp, #40	; 0x28
 8006b54:	3010      	adds	r0, #16
 8006b56:	f00a fd9d 	bl	8011694 <_lv_area_is_in>
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 8006b5a:	4643      	mov	r3, r8
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <lv_obj_refr_size.part.0+0x104>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d002      	beq.n	8006b6a <lv_obj_refr_size.part.0+0x10a>
 8006b64:	0028      	movs	r0, r5
 8006b66:	f002 fa49 	bl	8008ffc <lv_obj_scrollbar_invalidate>
    lv_obj_refresh_ext_draw_size(obj);
 8006b6a:	0020      	movs	r0, r4
 8006b6c:	f7fe fdfe 	bl	800576c <lv_obj_refresh_ext_draw_size>
    return true;
 8006b70:	2001      	movs	r0, #1
}
 8006b72:	b00d      	add	sp, #52	; 0x34
 8006b74:	bcf0      	pop	{r4, r5, r6, r7}
 8006b76:	46bb      	mov	fp, r7
 8006b78:	46b2      	mov	sl, r6
 8006b7a:	46a9      	mov	r9, r5
 8006b7c:	46a0      	mov	r8, r4
 8006b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8006b80:	2201      	movs	r2, #1
 8006b82:	2100      	movs	r1, #0
 8006b84:	0020      	movs	r0, r4
 8006b86:	f002 fdb3 	bl	80096f0 <lv_obj_get_style_prop>
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 8006b8a:	4bb5      	ldr	r3, [pc, #724]	; (8006e60 <lv_obj_refr_size.part.0+0x400>)
    return (lv_coord_t)v.num;
 8006b8c:	b207      	sxth	r7, r0
 8006b8e:	18fb      	adds	r3, r7, r3
 8006b90:	425a      	negs	r2, r3
 8006b92:	4153      	adcs	r3, r2
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	9300      	str	r3, [sp, #0]
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8006b98:	23c0      	movs	r3, #192	; 0xc0
 8006b9a:	01db      	lsls	r3, r3, #7
 8006b9c:	4018      	ands	r0, r3
 8006b9e:	2380      	movs	r3, #128	; 0x80
 8006ba0:	2600      	movs	r6, #0
 8006ba2:	019b      	lsls	r3, r3, #6
 8006ba4:	4298      	cmp	r0, r3
 8006ba6:	d100      	bne.n	8006baa <lv_obj_refr_size.part.0+0x14a>
 8006ba8:	e0ff      	b.n	8006daa <lv_obj_refr_size.part.0+0x34a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006baa:	2212      	movs	r2, #18
 8006bac:	2100      	movs	r1, #0
 8006bae:	0028      	movs	r0, r5
 8006bb0:	f002 fd9e 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006bb4:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006bb6:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006bb8:	2100      	movs	r1, #0
 8006bba:	0028      	movs	r0, r5
 8006bbc:	f002 fd98 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006bc0:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006bc2:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	0028      	movs	r0, r5
 8006bc8:	f002 fd92 	bl	80096f0 <lv_obj_get_style_prop>
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8006bcc:	465a      	mov	r2, fp
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4442      	add	r2, r8
 8006bd2:	0040      	lsls	r0, r0, #1
 8006bd4:	1a9b      	subs	r3, r3, r2
 8006bd6:	1a1b      	subs	r3, r3, r0
 8006bd8:	8aa8      	ldrh	r0, [r5, #20]
 8006bda:	181b      	adds	r3, r3, r0
 8006bdc:	8a28      	ldrh	r0, [r5, #16]
 8006bde:	1a18      	subs	r0, r3, r0
 8006be0:	b203      	sxth	r3, r0
 8006be2:	469b      	mov	fp, r3
        if(w_is_content) {
 8006be4:	4b9f      	ldr	r3, [pc, #636]	; (8006e64 <lv_obj_refr_size.part.0+0x404>)
 8006be6:	4698      	mov	r8, r3
 8006be8:	429f      	cmp	r7, r3
 8006bea:	d100      	bne.n	8006bee <lv_obj_refr_size.part.0+0x18e>
 8006bec:	e1c3      	b.n	8006f76 <lv_obj_refr_size.part.0+0x516>
        else if(w_is_pct) {
 8006bee:	2e00      	cmp	r6, #0
 8006bf0:	d010      	beq.n	8006c14 <lv_obj_refr_size.part.0+0x1b4>
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8006bf2:	7feb      	ldrb	r3, [r5, #31]
 8006bf4:	075b      	lsls	r3, r3, #29
 8006bf6:	d400      	bmi.n	8006bfa <lv_obj_refr_size.part.0+0x19a>
 8006bf8:	e278      	b.n	80070ec <lv_obj_refr_size.part.0+0x68c>
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 8006bfa:	23fa      	movs	r3, #250	; 0xfa
 8006bfc:	489a      	ldr	r0, [pc, #616]	; (8006e68 <lv_obj_refr_size.part.0+0x408>)
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4038      	ands	r0, r7
 8006c02:	4298      	cmp	r0, r3
 8006c04:	dd00      	ble.n	8006c08 <lv_obj_refr_size.part.0+0x1a8>
 8006c06:	e24b      	b.n	80070a0 <lv_obj_refr_size.part.0+0x640>
 8006c08:	465b      	mov	r3, fp
 8006c0a:	2164      	movs	r1, #100	; 0x64
 8006c0c:	4358      	muls	r0, r3
 8006c0e:	f7f9 fb15 	bl	800023c <__divsi3>
 8006c12:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8006c14:	2202      	movs	r2, #2
 8006c16:	2100      	movs	r1, #0
 8006c18:	0020      	movs	r0, r4
 8006c1a:	f002 fd69 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8006c1e:	2203      	movs	r2, #3
    return (lv_coord_t)v.num;
 8006c20:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8006c22:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8006c24:	2100      	movs	r1, #0
 8006c26:	0020      	movs	r0, r4
    return (lv_coord_t)v.num;
 8006c28:	4699      	mov	r9, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8006c2a:	f002 fd61 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006c2e:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8006c30:	0006      	movs	r6, r0
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 8006c32:	20c0      	movs	r0, #192	; 0xc0
    return (lv_coord_t)v.num;
 8006c34:	469a      	mov	sl, r3
 8006c36:	4642      	mov	r2, r8
 8006c38:	2380      	movs	r3, #128	; 0x80
 8006c3a:	01c0      	lsls	r0, r0, #7
 8006c3c:	019b      	lsls	r3, r3, #6
 8006c3e:	4010      	ands	r0, r2
 8006c40:	4298      	cmp	r0, r3
 8006c42:	d100      	bne.n	8006c46 <lv_obj_refr_size.part.0+0x1e6>
 8006c44:	e0f6      	b.n	8006e34 <lv_obj_refr_size.part.0+0x3d4>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8006c46:	20c0      	movs	r0, #192	; 0xc0
 8006c48:	2380      	movs	r3, #128	; 0x80
 8006c4a:	01c0      	lsls	r0, r0, #7
 8006c4c:	019b      	lsls	r3, r3, #6
 8006c4e:	4006      	ands	r6, r0
 8006c50:	429e      	cmp	r6, r3
 8006c52:	d100      	bne.n	8006c56 <lv_obj_refr_size.part.0+0x1f6>
 8006c54:	e0d9      	b.n	8006e0a <lv_obj_refr_size.part.0+0x3aa>
    return LV_CLAMP(min_width, width, max_width);
 8006c56:	1c3e      	adds	r6, r7, #0
 8006c58:	4557      	cmp	r7, sl
 8006c5a:	dd00      	ble.n	8006c5e <lv_obj_refr_size.part.0+0x1fe>
 8006c5c:	4656      	mov	r6, sl
 8006c5e:	b233      	sxth	r3, r6
 8006c60:	454b      	cmp	r3, r9
 8006c62:	da00      	bge.n	8006c66 <lv_obj_refr_size.part.0+0x206>
 8006c64:	464e      	mov	r6, r9
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8006c66:	0020      	movs	r0, r4
 8006c68:	f001 f838 	bl	8007cdc <lv_obj_get_scroll_top>
    if(obj->h_layout) {
 8006c6c:	7fe3      	ldrb	r3, [r4, #31]
    return LV_CLAMP(min_width, width, max_width);
 8006c6e:	b236      	sxth	r6, r6
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8006c70:	9002      	str	r0, [sp, #8]
    if(obj->h_layout) {
 8006c72:	079b      	lsls	r3, r3, #30
 8006c74:	d500      	bpl.n	8006c78 <lv_obj_refr_size.part.0+0x218>
 8006c76:	e717      	b.n	8006aa8 <lv_obj_refr_size.part.0+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8006c78:	2204      	movs	r2, #4
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	0020      	movs	r0, r4
 8006c7e:	f002 fd37 	bl	80096f0 <lv_obj_get_style_prop>
        h_is_content = h == LV_SIZE_CONTENT ? true : false;
 8006c82:	4b77      	ldr	r3, [pc, #476]	; (8006e60 <lv_obj_refr_size.part.0+0x400>)
    return (lv_coord_t)v.num;
 8006c84:	b207      	sxth	r7, r0
 8006c86:	18fb      	adds	r3, r7, r3
 8006c88:	425a      	negs	r2, r3
 8006c8a:	4153      	adcs	r3, r2
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	9303      	str	r3, [sp, #12]
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8006c90:	23c0      	movs	r3, #192	; 0xc0
 8006c92:	01db      	lsls	r3, r3, #7
 8006c94:	2200      	movs	r2, #0
 8006c96:	4018      	ands	r0, r3
 8006c98:	2380      	movs	r3, #128	; 0x80
 8006c9a:	4692      	mov	sl, r2
 8006c9c:	019b      	lsls	r3, r3, #6
 8006c9e:	4298      	cmp	r0, r3
 8006ca0:	d079      	beq.n	8006d96 <lv_obj_refr_size.part.0+0x336>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006ca2:	2210      	movs	r2, #16
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	0028      	movs	r0, r5
 8006ca8:	f002 fd22 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006cac:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006cae:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	0028      	movs	r0, r5
 8006cb4:	f002 fd1c 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006cb8:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006cba:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	0028      	movs	r0, r5
 8006cc0:	f002 fd16 	bl	80096f0 <lv_obj_get_style_prop>
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	444a      	add	r2, r9
 8006cca:	0040      	lsls	r0, r0, #1
 8006ccc:	1a9b      	subs	r3, r3, r2
 8006cce:	1a1b      	subs	r3, r3, r0
 8006cd0:	8ae8      	ldrh	r0, [r5, #22]
 8006cd2:	181b      	adds	r3, r3, r0
 8006cd4:	8a68      	ldrh	r0, [r5, #18]
 8006cd6:	1a18      	subs	r0, r3, r0
 8006cd8:	b203      	sxth	r3, r0
 8006cda:	9304      	str	r3, [sp, #16]
        if(h_is_content) {
 8006cdc:	4b61      	ldr	r3, [pc, #388]	; (8006e64 <lv_obj_refr_size.part.0+0x404>)
 8006cde:	4698      	mov	r8, r3
 8006ce0:	429f      	cmp	r7, r3
 8006ce2:	d100      	bne.n	8006ce6 <lv_obj_refr_size.part.0+0x286>
 8006ce4:	e0c2      	b.n	8006e6c <lv_obj_refr_size.part.0+0x40c>
        else if(h_is_pct) {
 8006ce6:	4653      	mov	r3, sl
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d010      	beq.n	8006d0e <lv_obj_refr_size.part.0+0x2ae>
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8006cec:	7feb      	ldrb	r3, [r5, #31]
 8006cee:	079b      	lsls	r3, r3, #30
 8006cf0:	d400      	bmi.n	8006cf4 <lv_obj_refr_size.part.0+0x294>
 8006cf2:	e1d9      	b.n	80070a8 <lv_obj_refr_size.part.0+0x648>
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 8006cf4:	23fa      	movs	r3, #250	; 0xfa
 8006cf6:	485c      	ldr	r0, [pc, #368]	; (8006e68 <lv_obj_refr_size.part.0+0x408>)
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4038      	ands	r0, r7
 8006cfc:	4298      	cmp	r0, r3
 8006cfe:	dd00      	ble.n	8006d02 <lv_obj_refr_size.part.0+0x2a2>
 8006d00:	e1d0      	b.n	80070a4 <lv_obj_refr_size.part.0+0x644>
 8006d02:	9b04      	ldr	r3, [sp, #16]
 8006d04:	2164      	movs	r1, #100	; 0x64
 8006d06:	4358      	muls	r0, r3
 8006d08:	f7f9 fa98 	bl	800023c <__divsi3>
 8006d0c:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8006d0e:	2205      	movs	r2, #5
 8006d10:	2100      	movs	r1, #0
 8006d12:	0020      	movs	r0, r4
 8006d14:	f002 fcec 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8006d18:	2206      	movs	r2, #6
    return (lv_coord_t)v.num;
 8006d1a:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8006d1c:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8006d1e:	2100      	movs	r1, #0
 8006d20:	0020      	movs	r0, r4
    return (lv_coord_t)v.num;
 8006d22:	469a      	mov	sl, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8006d24:	f002 fce4 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006d28:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8006d2a:	4680      	mov	r8, r0
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 8006d2c:	20c0      	movs	r0, #192	; 0xc0
    return (lv_coord_t)v.num;
 8006d2e:	469b      	mov	fp, r3
 8006d30:	464a      	mov	r2, r9
 8006d32:	2380      	movs	r3, #128	; 0x80
 8006d34:	01c0      	lsls	r0, r0, #7
 8006d36:	019b      	lsls	r3, r3, #6
 8006d38:	4010      	ands	r0, r2
 8006d3a:	4298      	cmp	r0, r3
 8006d3c:	d051      	beq.n	8006de2 <lv_obj_refr_size.part.0+0x382>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8006d3e:	20c0      	movs	r0, #192	; 0xc0
 8006d40:	2380      	movs	r3, #128	; 0x80
 8006d42:	4642      	mov	r2, r8
 8006d44:	01c0      	lsls	r0, r0, #7
 8006d46:	019b      	lsls	r3, r3, #6
 8006d48:	4002      	ands	r2, r0
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d035      	beq.n	8006dba <lv_obj_refr_size.part.0+0x35a>
    return LV_CLAMP(min_width, width, max_width);
 8006d4e:	1c3b      	adds	r3, r7, #0
 8006d50:	455f      	cmp	r7, fp
 8006d52:	dd00      	ble.n	8006d56 <lv_obj_refr_size.part.0+0x2f6>
 8006d54:	465b      	mov	r3, fp
 8006d56:	1c1f      	adds	r7, r3, #0
 8006d58:	b21b      	sxth	r3, r3
 8006d5a:	4553      	cmp	r3, sl
 8006d5c:	da00      	bge.n	8006d60 <lv_obj_refr_size.part.0+0x300>
 8006d5e:	4657      	mov	r7, sl
    if(w_is_content || h_is_content) {
 8006d60:	9a00      	ldr	r2, [sp, #0]
 8006d62:	9b03      	ldr	r3, [sp, #12]
    return LV_CLAMP(min_width, width, max_width);
 8006d64:	b23f      	sxth	r7, r7
    if(w_is_content || h_is_content) {
 8006d66:	4313      	orrs	r3, r2
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	9b00      	ldr	r3, [sp, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d100      	bne.n	8006d72 <lv_obj_refr_size.part.0+0x312>
 8006d70:	e6a3      	b.n	8006aba <lv_obj_refr_size.part.0+0x5a>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 8006d72:	2300      	movs	r3, #0
 8006d74:	0020      	movs	r0, r4
 8006d76:	9a02      	ldr	r2, [sp, #8]
 8006d78:	9901      	ldr	r1, [sp, #4]
 8006d7a:	f002 f86d 	bl	8008e58 <lv_obj_scroll_to>
 8006d7e:	e69c      	b.n	8006aba <lv_obj_refr_size.part.0+0x5a>
    if(parent == NULL) return false;
 8006d80:	2000      	movs	r0, #0
 8006d82:	e6f6      	b.n	8006b72 <lv_obj_refr_size.part.0+0x112>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8006d84:	8aa3      	ldrh	r3, [r4, #20]
 8006d86:	3301      	adds	r3, #1
 8006d88:	1b9e      	subs	r6, r3, r6
 8006d8a:	8226      	strh	r6, [r4, #16]
 8006d8c:	e6ce      	b.n	8006b2c <lv_obj_refr_size.part.0+0xcc>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 8006d8e:	0028      	movs	r0, r5
 8006d90:	f002 f934 	bl	8008ffc <lv_obj_scrollbar_invalidate>
 8006d94:	e6b9      	b.n	8006b0a <lv_obj_refr_size.part.0+0xaa>
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8006d96:	22fa      	movs	r2, #250	; 0xfa
 8006d98:	4650      	mov	r0, sl
 8006d9a:	4b33      	ldr	r3, [pc, #204]	; (8006e68 <lv_obj_refr_size.part.0+0x408>)
 8006d9c:	00d2      	lsls	r2, r2, #3
 8006d9e:	403b      	ands	r3, r7
 8006da0:	0fd9      	lsrs	r1, r3, #31
 8006da2:	429a      	cmp	r2, r3
 8006da4:	4148      	adcs	r0, r1
 8006da6:	4682      	mov	sl, r0
 8006da8:	e77b      	b.n	8006ca2 <lv_obj_refr_size.part.0+0x242>
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8006daa:	22fa      	movs	r2, #250	; 0xfa
 8006dac:	4b2e      	ldr	r3, [pc, #184]	; (8006e68 <lv_obj_refr_size.part.0+0x408>)
 8006dae:	00d2      	lsls	r2, r2, #3
 8006db0:	403b      	ands	r3, r7
 8006db2:	0fd9      	lsrs	r1, r3, #31
 8006db4:	429a      	cmp	r2, r3
 8006db6:	414e      	adcs	r6, r1
 8006db8:	e6f7      	b.n	8006baa <lv_obj_refr_size.part.0+0x14a>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8006dba:	465b      	mov	r3, fp
 8006dbc:	482a      	ldr	r0, [pc, #168]	; (8006e68 <lv_obj_refr_size.part.0+0x408>)
 8006dbe:	4018      	ands	r0, r3
 8006dc0:	23fa      	movs	r3, #250	; 0xfa
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	4298      	cmp	r0, r3
 8006dc6:	dcc2      	bgt.n	8006d4e <lv_obj_refr_size.part.0+0x2ee>
 8006dc8:	23fa      	movs	r3, #250	; 0xfa
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4298      	cmp	r0, r3
 8006dce:	dd00      	ble.n	8006dd2 <lv_obj_refr_size.part.0+0x372>
 8006dd0:	1a18      	subs	r0, r3, r0
 8006dd2:	9b04      	ldr	r3, [sp, #16]
 8006dd4:	2164      	movs	r1, #100	; 0x64
 8006dd6:	4358      	muls	r0, r3
 8006dd8:	f7f9 fa30 	bl	800023c <__divsi3>
 8006ddc:	b203      	sxth	r3, r0
 8006dde:	469b      	mov	fp, r3
 8006de0:	e7b5      	b.n	8006d4e <lv_obj_refr_size.part.0+0x2ee>
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 8006de2:	4653      	mov	r3, sl
 8006de4:	4820      	ldr	r0, [pc, #128]	; (8006e68 <lv_obj_refr_size.part.0+0x408>)
 8006de6:	4018      	ands	r0, r3
 8006de8:	23fa      	movs	r3, #250	; 0xfa
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	4298      	cmp	r0, r3
 8006dee:	dca6      	bgt.n	8006d3e <lv_obj_refr_size.part.0+0x2de>
 8006df0:	23fa      	movs	r3, #250	; 0xfa
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4298      	cmp	r0, r3
 8006df6:	dd00      	ble.n	8006dfa <lv_obj_refr_size.part.0+0x39a>
 8006df8:	1a18      	subs	r0, r3, r0
 8006dfa:	9b04      	ldr	r3, [sp, #16]
 8006dfc:	2164      	movs	r1, #100	; 0x64
 8006dfe:	4358      	muls	r0, r3
 8006e00:	f7f9 fa1c 	bl	800023c <__divsi3>
 8006e04:	b203      	sxth	r3, r0
 8006e06:	469a      	mov	sl, r3
 8006e08:	e799      	b.n	8006d3e <lv_obj_refr_size.part.0+0x2de>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8006e0a:	4653      	mov	r3, sl
 8006e0c:	4816      	ldr	r0, [pc, #88]	; (8006e68 <lv_obj_refr_size.part.0+0x408>)
 8006e0e:	4018      	ands	r0, r3
 8006e10:	23fa      	movs	r3, #250	; 0xfa
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	4298      	cmp	r0, r3
 8006e16:	dd00      	ble.n	8006e1a <lv_obj_refr_size.part.0+0x3ba>
 8006e18:	e71d      	b.n	8006c56 <lv_obj_refr_size.part.0+0x1f6>
 8006e1a:	23fa      	movs	r3, #250	; 0xfa
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4298      	cmp	r0, r3
 8006e20:	dd00      	ble.n	8006e24 <lv_obj_refr_size.part.0+0x3c4>
 8006e22:	1a18      	subs	r0, r3, r0
 8006e24:	465b      	mov	r3, fp
 8006e26:	2164      	movs	r1, #100	; 0x64
 8006e28:	4358      	muls	r0, r3
 8006e2a:	f7f9 fa07 	bl	800023c <__divsi3>
 8006e2e:	b203      	sxth	r3, r0
 8006e30:	469a      	mov	sl, r3
 8006e32:	e710      	b.n	8006c56 <lv_obj_refr_size.part.0+0x1f6>
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 8006e34:	464b      	mov	r3, r9
 8006e36:	480c      	ldr	r0, [pc, #48]	; (8006e68 <lv_obj_refr_size.part.0+0x408>)
 8006e38:	4018      	ands	r0, r3
 8006e3a:	23fa      	movs	r3, #250	; 0xfa
 8006e3c:	00db      	lsls	r3, r3, #3
 8006e3e:	4298      	cmp	r0, r3
 8006e40:	dd00      	ble.n	8006e44 <lv_obj_refr_size.part.0+0x3e4>
 8006e42:	e700      	b.n	8006c46 <lv_obj_refr_size.part.0+0x1e6>
 8006e44:	23fa      	movs	r3, #250	; 0xfa
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4298      	cmp	r0, r3
 8006e4a:	dd00      	ble.n	8006e4e <lv_obj_refr_size.part.0+0x3ee>
 8006e4c:	1a18      	subs	r0, r3, r0
 8006e4e:	465b      	mov	r3, fp
 8006e50:	2164      	movs	r1, #100	; 0x64
 8006e52:	4358      	muls	r0, r3
 8006e54:	f7f9 f9f2 	bl	800023c <__divsi3>
 8006e58:	b203      	sxth	r3, r0
 8006e5a:	4699      	mov	r9, r3
 8006e5c:	e6f3      	b.n	8006c46 <lv_obj_refr_size.part.0+0x1e6>
 8006e5e:	46c0      	nop			; (mov r8, r8)
 8006e60:	ffffd82f 	.word	0xffffd82f
 8006e64:	000027d1 	.word	0x000027d1
 8006e68:	ffff9fff 	.word	0xffff9fff
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2100      	movs	r1, #0
 8006e70:	0020      	movs	r0, r4
 8006e72:	f002 f841 	bl	8008ef8 <lv_obj_scroll_to_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006e76:	2232      	movs	r2, #50	; 0x32
 8006e78:	2100      	movs	r1, #0
 8006e7a:	0020      	movs	r0, r4
 8006e7c:	f002 fc38 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006e80:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006e82:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006e84:	2100      	movs	r1, #0
 8006e86:	0020      	movs	r0, r4
 8006e88:	f002 fc32 	bl	80096f0 <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8006e8c:	b2bf      	uxth	r7, r7
 8006e8e:	1838      	adds	r0, r7, r0
 8006e90:	b202      	sxth	r2, r0
 8006e92:	b283      	uxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006e94:	2100      	movs	r1, #0
 8006e96:	9207      	str	r2, [sp, #28]
 8006e98:	0020      	movs	r0, r4
 8006e9a:	2211      	movs	r2, #17
 8006e9c:	9306      	str	r3, [sp, #24]
 8006e9e:	f002 fc27 	bl	80096f0 <lv_obj_get_style_prop>
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8006ea2:	183f      	adds	r7, r7, r0
    lv_point_t p = {LV_COORD_MIN, 0};
 8006ea4:	4bc1      	ldr	r3, [pc, #772]	; (80071ac <lv_obj_refr_size.part.0+0x74c>)
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8006ea6:	b2ba      	uxth	r2, r7
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8006ea8:	af0a      	add	r7, sp, #40	; 0x28
 8006eaa:	212c      	movs	r1, #44	; 0x2c
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8006eac:	9205      	str	r2, [sp, #20]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8006eae:	0020      	movs	r0, r4
 8006eb0:	003a      	movs	r2, r7
    lv_point_t p = {LV_COORD_MIN, 0};
 8006eb2:	930a      	str	r3, [sp, #40]	; 0x28
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8006eb4:	f7fa ff52 	bl	8001d5c <lv_event_send>
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8006eb8:	9a05      	ldr	r2, [sp, #20]
    return p.y;
 8006eba:	2102      	movs	r1, #2
 8006ebc:	5e78      	ldrsh	r0, [r7, r1]
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8006ebe:	4694      	mov	ip, r2
 8006ec0:	9f06      	ldr	r7, [sp, #24]
 8006ec2:	4467      	add	r7, ip
 8006ec4:	183f      	adds	r7, r7, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006ec6:	0020      	movs	r0, r4
 8006ec8:	f004 f854 	bl	800af74 <lv_obj_get_child_cnt>
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8006ecc:	b23f      	sxth	r7, r7
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006ece:	4683      	mov	fp, r0
    for(i = 0; i < child_cnt; i++) {
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d100      	bne.n	8006ed6 <lv_obj_refr_size.part.0+0x476>
 8006ed4:	e71b      	b.n	8006d0e <lv_obj_refr_size.part.0+0x2ae>
    lv_coord_t child_res = LV_COORD_MIN;
 8006ed6:	4bb6      	ldr	r3, [pc, #728]	; (80071b0 <lv_obj_refr_size.part.0+0x750>)
            switch(align) {
 8006ed8:	46b1      	mov	r9, r6
    lv_coord_t child_res = LV_COORD_MIN;
 8006eda:	469a      	mov	sl, r3
    for(i = 0; i < child_cnt; i++) {
 8006edc:	2300      	movs	r3, #0
 8006ede:	4698      	mov	r8, r3
            switch(align) {
 8006ee0:	4653      	mov	r3, sl
 8006ee2:	0026      	movs	r6, r4
 8006ee4:	46ba      	mov	sl, r7
 8006ee6:	4644      	mov	r4, r8
 8006ee8:	001f      	movs	r7, r3
 8006eea:	46a8      	mov	r8, r5
        lv_obj_t * child = obj->spec_attr->children[i];
 8006eec:	68b3      	ldr	r3, [r6, #8]
 8006eee:	00a2      	lsls	r2, r4, #2
 8006ef0:	681b      	ldr	r3, [r3, #0]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8006ef2:	49b0      	ldr	r1, [pc, #704]	; (80071b4 <lv_obj_refr_size.part.0+0x754>)
        lv_obj_t * child = obj->spec_attr->children[i];
 8006ef4:	58d5      	ldr	r5, [r2, r3]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8006ef6:	0028      	movs	r0, r5
 8006ef8:	f7fe f8aa 	bl	8005050 <lv_obj_has_flag_any>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d123      	bne.n	8006f48 <lv_obj_refr_size.part.0+0x4e8>
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8006f00:	0028      	movs	r0, r5
 8006f02:	49ad      	ldr	r1, [pc, #692]	; (80071b8 <lv_obj_refr_size.part.0+0x758>)
 8006f04:	f7fe f8a4 	bl	8005050 <lv_obj_has_flag_any>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d10a      	bne.n	8006f22 <lv_obj_refr_size.part.0+0x4c2>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8006f0c:	0028      	movs	r0, r5
 8006f0e:	f004 f81b 	bl	800af48 <lv_obj_get_parent>
    if(parent == NULL) return false;
 8006f12:	2800      	cmp	r0, #0
 8006f14:	d005      	beq.n	8006f22 <lv_obj_refr_size.part.0+0x4c2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8006f16:	220a      	movs	r2, #10
 8006f18:	2100      	movs	r1, #0
 8006f1a:	f002 fbe9 	bl	80096f0 <lv_obj_get_style_prop>
    if(layout) return true;
 8006f1e:	0400      	lsls	r0, r0, #16
 8006f20:	d108      	bne.n	8006f34 <lv_obj_refr_size.part.0+0x4d4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8006f22:	2209      	movs	r2, #9
 8006f24:	2100      	movs	r1, #0
 8006f26:	0028      	movs	r0, r5
 8006f28:	f002 fbe2 	bl	80096f0 <lv_obj_get_style_prop>
            switch(align) {
 8006f2c:	23fc      	movs	r3, #252	; 0xfc
 8006f2e:	4203      	tst	r3, r0
 8006f30:	d000      	beq.n	8006f34 <lv_obj_refr_size.part.0+0x4d4>
 8006f32:	e112      	b.n	800715a <lv_obj_refr_size.part.0+0x6fa>
                    child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8006f34:	2216      	movs	r2, #22
 8006f36:	5eab      	ldrsh	r3, [r5, r2]
 8006f38:	2112      	movs	r1, #18
 8006f3a:	5e72      	ldrsh	r2, [r6, r1]
 8006f3c:	1a9b      	subs	r3, r3, r2
 8006f3e:	3301      	adds	r3, #1
 8006f40:	42bb      	cmp	r3, r7
 8006f42:	da00      	bge.n	8006f46 <lv_obj_refr_size.part.0+0x4e6>
 8006f44:	003b      	movs	r3, r7
 8006f46:	b21f      	sxth	r7, r3
    for(i = 0; i < child_cnt; i++) {
 8006f48:	3401      	adds	r4, #1
 8006f4a:	45a3      	cmp	fp, r4
 8006f4c:	d1ce      	bne.n	8006eec <lv_obj_refr_size.part.0+0x48c>
    if(child_res != LV_COORD_MIN) {
 8006f4e:	003b      	movs	r3, r7
 8006f50:	4657      	mov	r7, sl
 8006f52:	469a      	mov	sl, r3
 8006f54:	4b96      	ldr	r3, [pc, #600]	; (80071b0 <lv_obj_refr_size.part.0+0x750>)
 8006f56:	0034      	movs	r4, r6
 8006f58:	4645      	mov	r5, r8
 8006f5a:	464e      	mov	r6, r9
 8006f5c:	459a      	cmp	sl, r3
 8006f5e:	d100      	bne.n	8006f62 <lv_obj_refr_size.part.0+0x502>
 8006f60:	e6d5      	b.n	8006d0e <lv_obj_refr_size.part.0+0x2ae>
        child_res += pad_bottom;
 8006f62:	9b05      	ldr	r3, [sp, #20]
 8006f64:	4453      	add	r3, sl
 8006f66:	b29b      	uxth	r3, r3
        return LV_MAX(child_res, self_h);
 8006f68:	1c1a      	adds	r2, r3, #0
 8006f6a:	b21b      	sxth	r3, r3
 8006f6c:	42bb      	cmp	r3, r7
 8006f6e:	da00      	bge.n	8006f72 <lv_obj_refr_size.part.0+0x512>
 8006f70:	1c3a      	adds	r2, r7, #0
 8006f72:	b217      	sxth	r7, r2
 8006f74:	e6cb      	b.n	8006d0e <lv_obj_refr_size.part.0+0x2ae>
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 8006f76:	2200      	movs	r2, #0
 8006f78:	2100      	movs	r1, #0
 8006f7a:	0020      	movs	r0, r4
 8006f7c:	f001 ffa0 	bl	8008ec0 <lv_obj_scroll_to_x>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006f80:	2232      	movs	r2, #50	; 0x32
 8006f82:	2100      	movs	r1, #0
 8006f84:	0020      	movs	r0, r4
 8006f86:	f002 fbb3 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006f8a:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006f8c:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006f8e:	2100      	movs	r1, #0
 8006f90:	0020      	movs	r0, r4
 8006f92:	f002 fbad 	bl	80096f0 <lv_obj_get_style_prop>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8006f96:	b2b6      	uxth	r6, r6
 8006f98:	1830      	adds	r0, r6, r0
 8006f9a:	b287      	uxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006f9c:	2212      	movs	r2, #18
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	0020      	movs	r0, r4
 8006fa2:	9703      	str	r7, [sp, #12]
 8006fa4:	f002 fba4 	bl	80096f0 <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8006fa8:	1836      	adds	r6, r6, r0
 8006faa:	b2b3      	uxth	r3, r6
 8006fac:	9302      	str	r3, [sp, #8]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8006fae:	ae0a      	add	r6, sp, #40	; 0x28
    lv_point_t p = {0, LV_COORD_MIN};
 8006fb0:	4b82      	ldr	r3, [pc, #520]	; (80071bc <lv_obj_refr_size.part.0+0x75c>)
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8006fb2:	0032      	movs	r2, r6
 8006fb4:	212c      	movs	r1, #44	; 0x2c
 8006fb6:	0020      	movs	r0, r4
    lv_point_t p = {0, LV_COORD_MIN};
 8006fb8:	930a      	str	r3, [sp, #40]	; 0x28
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8006fba:	f7fa fecf 	bl	8001d5c <lv_event_send>
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8006fbe:	9b02      	ldr	r3, [sp, #8]
    return p.x;
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	5eb0      	ldrsh	r0, [r6, r2]
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8006fc4:	469c      	mov	ip, r3
 8006fc6:	4467      	add	r7, ip
 8006fc8:	183f      	adds	r7, r7, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006fca:	0020      	movs	r0, r4
 8006fcc:	f003 ffd2 	bl	800af74 <lv_obj_get_child_cnt>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8006fd0:	2216      	movs	r2, #22
 8006fd2:	4682      	mov	sl, r0
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	0020      	movs	r0, r4
 8006fd8:	f002 fb8a 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8006fdc:	b2c0      	uxtb	r0, r0
        for(i = 0; i < child_cnt; i++) {
 8006fde:	4653      	mov	r3, sl
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8006fe0:	b23f      	sxth	r7, r7
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8006fe2:	2801      	cmp	r0, #1
 8006fe4:	d100      	bne.n	8006fe8 <lv_obj_refr_size.part.0+0x588>
 8006fe6:	e0d2      	b.n	800718e <lv_obj_refr_size.part.0+0x72e>
        for(i = 0; i < child_cnt; i++) {
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d100      	bne.n	8006fee <lv_obj_refr_size.part.0+0x58e>
 8006fec:	e612      	b.n	8006c14 <lv_obj_refr_size.part.0+0x1b4>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8006fee:	466b      	mov	r3, sp
 8006ff0:	2208      	movs	r2, #8
 8006ff2:	5e9b      	ldrsh	r3, [r3, r2]
 8006ff4:	46a8      	mov	r8, r5
 8006ff6:	9304      	str	r3, [sp, #16]
    lv_coord_t child_res = LV_COORD_MIN;
 8006ff8:	4b6d      	ldr	r3, [pc, #436]	; (80071b0 <lv_obj_refr_size.part.0+0x750>)
 8006ffa:	46b9      	mov	r9, r7
        for(i = 0; i < child_cnt; i++) {
 8006ffc:	2600      	movs	r6, #0
 8006ffe:	0025      	movs	r5, r4
 8007000:	001f      	movs	r7, r3
 8007002:	e019      	b.n	8007038 <lv_obj_refr_size.part.0+0x5d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8007004:	2208      	movs	r2, #8
 8007006:	2100      	movs	r1, #0
 8007008:	0020      	movs	r0, r4
 800700a:	f002 fb71 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800700e:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_y(child, 0) == 0) {
 8007010:	2800      	cmp	r0, #0
 8007012:	d10e      	bne.n	8007032 <lv_obj_refr_size.part.0+0x5d2>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 8007014:	9904      	ldr	r1, [sp, #16]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007016:	8aa3      	ldrh	r3, [r4, #20]
 8007018:	468c      	mov	ip, r1
 800701a:	8a22      	ldrh	r2, [r4, #16]
 800701c:	3301      	adds	r3, #1
 800701e:	1a9b      	subs	r3, r3, r2
 8007020:	b29a      	uxth	r2, r3
 8007022:	b21b      	sxth	r3, r3
 8007024:	4463      	add	r3, ip
 8007026:	429f      	cmp	r7, r3
 8007028:	dc03      	bgt.n	8007032 <lv_obj_refr_size.part.0+0x5d2>
 800702a:	9b02      	ldr	r3, [sp, #8]
 800702c:	469c      	mov	ip, r3
 800702e:	4462      	add	r2, ip
 8007030:	b217      	sxth	r7, r2
        for(i = 0; i < child_cnt; i++) {
 8007032:	3601      	adds	r6, #1
 8007034:	45b2      	cmp	sl, r6
 8007036:	d07a      	beq.n	800712e <lv_obj_refr_size.part.0+0x6ce>
            lv_obj_t * child = obj->spec_attr->children[i];
 8007038:	68ab      	ldr	r3, [r5, #8]
 800703a:	00b2      	lsls	r2, r6, #2
 800703c:	681b      	ldr	r3, [r3, #0]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800703e:	495d      	ldr	r1, [pc, #372]	; (80071b4 <lv_obj_refr_size.part.0+0x754>)
            lv_obj_t * child = obj->spec_attr->children[i];
 8007040:	58d4      	ldr	r4, [r2, r3]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8007042:	0020      	movs	r0, r4
 8007044:	f7fe f804 	bl	8005050 <lv_obj_has_flag_any>
 8007048:	2800      	cmp	r0, #0
 800704a:	d1f2      	bne.n	8007032 <lv_obj_refr_size.part.0+0x5d2>
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 800704c:	0020      	movs	r0, r4
 800704e:	495a      	ldr	r1, [pc, #360]	; (80071b8 <lv_obj_refr_size.part.0+0x758>)
 8007050:	f7fd fffe 	bl	8005050 <lv_obj_has_flag_any>
 8007054:	2800      	cmp	r0, #0
 8007056:	d10a      	bne.n	800706e <lv_obj_refr_size.part.0+0x60e>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8007058:	0020      	movs	r0, r4
 800705a:	f003 ff75 	bl	800af48 <lv_obj_get_parent>
    if(parent == NULL) return false;
 800705e:	2800      	cmp	r0, #0
 8007060:	d005      	beq.n	800706e <lv_obj_refr_size.part.0+0x60e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8007062:	220a      	movs	r2, #10
 8007064:	2100      	movs	r1, #0
 8007066:	f002 fb43 	bl	80096f0 <lv_obj_get_style_prop>
    if(layout) return true;
 800706a:	0400      	lsls	r0, r0, #16
 800706c:	d10d      	bne.n	800708a <lv_obj_refr_size.part.0+0x62a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 800706e:	2209      	movs	r2, #9
 8007070:	2100      	movs	r1, #0
 8007072:	0020      	movs	r0, r4
 8007074:	f002 fb3c 	bl	80096f0 <lv_obj_get_style_prop>
                switch(align) {
 8007078:	23ff      	movs	r3, #255	; 0xff
 800707a:	4018      	ands	r0, r3
 800707c:	2807      	cmp	r0, #7
 800707e:	d8c1      	bhi.n	8007004 <lv_obj_refr_size.part.0+0x5a4>
 8007080:	3bfe      	subs	r3, #254	; 0xfe
 8007082:	4083      	lsls	r3, r0
 8007084:	2293      	movs	r2, #147	; 0x93
 8007086:	421a      	tst	r2, r3
 8007088:	d0bc      	beq.n	8007004 <lv_obj_refr_size.part.0+0x5a4>
                        child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 800708a:	2214      	movs	r2, #20
 800708c:	5ea3      	ldrsh	r3, [r4, r2]
 800708e:	2110      	movs	r1, #16
 8007090:	5e6a      	ldrsh	r2, [r5, r1]
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	3301      	adds	r3, #1
 8007096:	42bb      	cmp	r3, r7
 8007098:	da00      	bge.n	800709c <lv_obj_refr_size.part.0+0x63c>
 800709a:	003b      	movs	r3, r7
 800709c:	b21f      	sxth	r7, r3
                        break;
 800709e:	e7c8      	b.n	8007032 <lv_obj_refr_size.part.0+0x5d2>
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 80070a0:	1a18      	subs	r0, r3, r0
 80070a2:	e5b1      	b.n	8006c08 <lv_obj_refr_size.part.0+0x1a8>
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 80070a4:	1a18      	subs	r0, r3, r0
 80070a6:	e62c      	b.n	8006d02 <lv_obj_refr_size.part.0+0x2a2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80070a8:	2204      	movs	r2, #4
 80070aa:	2100      	movs	r1, #0
 80070ac:	0028      	movs	r0, r5
 80070ae:	f002 fb1f 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80070b2:	b200      	sxth	r0, r0
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 80070b4:	4540      	cmp	r0, r8
 80070b6:	d000      	beq.n	80070ba <lv_obj_refr_size.part.0+0x65a>
 80070b8:	e61c      	b.n	8006cf4 <lv_obj_refr_size.part.0+0x294>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80070ba:	2232      	movs	r2, #50	; 0x32
 80070bc:	2100      	movs	r1, #0
 80070be:	0020      	movs	r0, r4
 80070c0:	f002 fb16 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80070c4:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80070c6:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80070c8:	2100      	movs	r1, #0
 80070ca:	0020      	movs	r0, r4
 80070cc:	f002 fb10 	bl	80096f0 <lv_obj_get_style_prop>
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 80070d0:	4440      	add	r0, r8
 80070d2:	b287      	uxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80070d4:	2211      	movs	r2, #17
 80070d6:	2100      	movs	r1, #0
 80070d8:	0020      	movs	r0, r4
 80070da:	f002 fb09 	bl	80096f0 <lv_obj_get_style_prop>
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 80070de:	4643      	mov	r3, r8
    return (lv_coord_t)v.num;
 80070e0:	b200      	sxth	r0, r0
 80070e2:	b21b      	sxth	r3, r3
 80070e4:	18c0      	adds	r0, r0, r3
 80070e6:	183f      	adds	r7, r7, r0
 80070e8:	b23f      	sxth	r7, r7
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 80070ea:	e610      	b.n	8006d0e <lv_obj_refr_size.part.0+0x2ae>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80070ec:	2201      	movs	r2, #1
 80070ee:	2100      	movs	r1, #0
 80070f0:	0028      	movs	r0, r5
 80070f2:	f002 fafd 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80070f6:	b200      	sxth	r0, r0
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 80070f8:	4540      	cmp	r0, r8
 80070fa:	d000      	beq.n	80070fe <lv_obj_refr_size.part.0+0x69e>
 80070fc:	e57d      	b.n	8006bfa <lv_obj_refr_size.part.0+0x19a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80070fe:	2232      	movs	r2, #50	; 0x32
 8007100:	2100      	movs	r1, #0
 8007102:	0020      	movs	r0, r4
 8007104:	f002 faf4 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007108:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800710a:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800710c:	2100      	movs	r1, #0
 800710e:	0020      	movs	r0, r4
 8007110:	f002 faee 	bl	80096f0 <lv_obj_get_style_prop>
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 8007114:	1980      	adds	r0, r0, r6
 8007116:	b287      	uxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8007118:	2213      	movs	r2, #19
 800711a:	2100      	movs	r1, #0
 800711c:	0020      	movs	r0, r4
 800711e:	f002 fae7 	bl	80096f0 <lv_obj_get_style_prop>
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 8007122:	b236      	sxth	r6, r6
    return (lv_coord_t)v.num;
 8007124:	b200      	sxth	r0, r0
 8007126:	1986      	adds	r6, r0, r6
 8007128:	19bf      	adds	r7, r7, r6
 800712a:	b23f      	sxth	r7, r7
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 800712c:	e572      	b.n	8006c14 <lv_obj_refr_size.part.0+0x1b4>
        if(child_res != LV_COORD_MIN) {
 800712e:	003b      	movs	r3, r7
 8007130:	464f      	mov	r7, r9
 8007132:	4699      	mov	r9, r3
 8007134:	4b1e      	ldr	r3, [pc, #120]	; (80071b0 <lv_obj_refr_size.part.0+0x750>)
 8007136:	002c      	movs	r4, r5
 8007138:	4645      	mov	r5, r8
 800713a:	4599      	cmp	r9, r3
 800713c:	d100      	bne.n	8007140 <lv_obj_refr_size.part.0+0x6e0>
 800713e:	e569      	b.n	8006c14 <lv_obj_refr_size.part.0+0x1b4>
            child_res += pad_right;
 8007140:	9b03      	ldr	r3, [sp, #12]
 8007142:	444b      	add	r3, r9
 8007144:	b21b      	sxth	r3, r3
    if(child_res == LV_COORD_MIN) return self_w;
 8007146:	4a1a      	ldr	r2, [pc, #104]	; (80071b0 <lv_obj_refr_size.part.0+0x750>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d100      	bne.n	800714e <lv_obj_refr_size.part.0+0x6ee>
 800714c:	e562      	b.n	8006c14 <lv_obj_refr_size.part.0+0x1b4>
    else return LV_MAX(child_res, self_w);
 800714e:	1c3a      	adds	r2, r7, #0
 8007150:	429f      	cmp	r7, r3
 8007152:	da00      	bge.n	8007156 <lv_obj_refr_size.part.0+0x6f6>
 8007154:	1c1a      	adds	r2, r3, #0
 8007156:	b217      	sxth	r7, r2
 8007158:	e55c      	b.n	8006c14 <lv_obj_refr_size.part.0+0x1b4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 800715a:	2208      	movs	r2, #8
 800715c:	2100      	movs	r1, #0
 800715e:	0028      	movs	r0, r5
 8007160:	f002 fac6 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007164:	b200      	sxth	r0, r0
                    if(lv_obj_get_style_y(child, 0) == 0) {
 8007166:	2800      	cmp	r0, #0
 8007168:	d000      	beq.n	800716c <lv_obj_refr_size.part.0+0x70c>
 800716a:	e6ed      	b.n	8006f48 <lv_obj_refr_size.part.0+0x4e8>
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 800716c:	9907      	ldr	r1, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800716e:	8aeb      	ldrh	r3, [r5, #22]
 8007170:	468c      	mov	ip, r1
 8007172:	8a6a      	ldrh	r2, [r5, #18]
 8007174:	3301      	adds	r3, #1
 8007176:	1a9b      	subs	r3, r3, r2
 8007178:	b29a      	uxth	r2, r3
 800717a:	b21b      	sxth	r3, r3
 800717c:	4463      	add	r3, ip
 800717e:	429f      	cmp	r7, r3
 8007180:	dd00      	ble.n	8007184 <lv_obj_refr_size.part.0+0x724>
 8007182:	e6e1      	b.n	8006f48 <lv_obj_refr_size.part.0+0x4e8>
 8007184:	9b06      	ldr	r3, [sp, #24]
 8007186:	469c      	mov	ip, r3
 8007188:	4462      	add	r2, ip
 800718a:	b217      	sxth	r7, r2
 800718c:	e6dc      	b.n	8006f48 <lv_obj_refr_size.part.0+0x4e8>
        for(i = 0; i < child_cnt; i++) {
 800718e:	2b00      	cmp	r3, #0
 8007190:	d100      	bne.n	8007194 <lv_obj_refr_size.part.0+0x734>
 8007192:	e53f      	b.n	8006c14 <lv_obj_refr_size.part.0+0x1b4>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8007194:	466b      	mov	r3, sp
 8007196:	220c      	movs	r2, #12
 8007198:	5e9b      	ldrsh	r3, [r3, r2]
 800719a:	46a8      	mov	r8, r5
 800719c:	9304      	str	r3, [sp, #16]
    lv_coord_t child_res = LV_COORD_MIN;
 800719e:	4b04      	ldr	r3, [pc, #16]	; (80071b0 <lv_obj_refr_size.part.0+0x750>)
 80071a0:	46b9      	mov	r9, r7
        for(i = 0; i < child_cnt; i++) {
 80071a2:	2600      	movs	r6, #0
 80071a4:	0025      	movs	r5, r4
 80071a6:	001f      	movs	r7, r3
 80071a8:	e024      	b.n	80071f4 <lv_obj_refr_size.part.0+0x794>
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	0000e001 	.word	0x0000e001
 80071b0:	ffffe001 	.word	0xffffe001
 80071b4:	00040001 	.word	0x00040001
 80071b8:	00060001 	.word	0x00060001
 80071bc:	e0010000 	.word	0xe0010000
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 80071c0:	2207      	movs	r2, #7
 80071c2:	2100      	movs	r1, #0
 80071c4:	0020      	movs	r0, r4
 80071c6:	f002 fa93 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80071ca:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_x(child, 0) == 0) {
 80071cc:	2800      	cmp	r0, #0
 80071ce:	d10e      	bne.n	80071ee <lv_obj_refr_size.part.0+0x78e>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 80071d0:	9904      	ldr	r1, [sp, #16]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80071d2:	8aa3      	ldrh	r3, [r4, #20]
 80071d4:	468c      	mov	ip, r1
 80071d6:	8a22      	ldrh	r2, [r4, #16]
 80071d8:	3301      	adds	r3, #1
 80071da:	1a9b      	subs	r3, r3, r2
 80071dc:	b29a      	uxth	r2, r3
 80071de:	b21b      	sxth	r3, r3
 80071e0:	4463      	add	r3, ip
 80071e2:	429f      	cmp	r7, r3
 80071e4:	dc03      	bgt.n	80071ee <lv_obj_refr_size.part.0+0x78e>
 80071e6:	9b03      	ldr	r3, [sp, #12]
 80071e8:	469c      	mov	ip, r3
 80071ea:	4462      	add	r2, ip
 80071ec:	b217      	sxth	r7, r2
        for(i = 0; i < child_cnt; i++) {
 80071ee:	3601      	adds	r6, #1
 80071f0:	45b2      	cmp	sl, r6
 80071f2:	d034      	beq.n	800725e <lv_obj_refr_size.part.0+0x7fe>
            lv_obj_t * child = obj->spec_attr->children[i];
 80071f4:	68ab      	ldr	r3, [r5, #8]
 80071f6:	00b2      	lsls	r2, r6, #2
 80071f8:	681b      	ldr	r3, [r3, #0]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80071fa:	491f      	ldr	r1, [pc, #124]	; (8007278 <lv_obj_refr_size.part.0+0x818>)
            lv_obj_t * child = obj->spec_attr->children[i];
 80071fc:	58d4      	ldr	r4, [r2, r3]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80071fe:	0020      	movs	r0, r4
 8007200:	f7fd ff26 	bl	8005050 <lv_obj_has_flag_any>
 8007204:	2800      	cmp	r0, #0
 8007206:	d1f2      	bne.n	80071ee <lv_obj_refr_size.part.0+0x78e>
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8007208:	0020      	movs	r0, r4
 800720a:	491c      	ldr	r1, [pc, #112]	; (800727c <lv_obj_refr_size.part.0+0x81c>)
 800720c:	f7fd ff20 	bl	8005050 <lv_obj_has_flag_any>
 8007210:	2800      	cmp	r0, #0
 8007212:	d10a      	bne.n	800722a <lv_obj_refr_size.part.0+0x7ca>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8007214:	0020      	movs	r0, r4
 8007216:	f003 fe97 	bl	800af48 <lv_obj_get_parent>
    if(parent == NULL) return false;
 800721a:	2800      	cmp	r0, #0
 800721c:	d005      	beq.n	800722a <lv_obj_refr_size.part.0+0x7ca>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 800721e:	220a      	movs	r2, #10
 8007220:	2100      	movs	r1, #0
 8007222:	f002 fa65 	bl	80096f0 <lv_obj_get_style_prop>
    if(layout) return true;
 8007226:	0400      	lsls	r0, r0, #16
 8007228:	d10e      	bne.n	8007248 <lv_obj_refr_size.part.0+0x7e8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 800722a:	2209      	movs	r2, #9
 800722c:	2100      	movs	r1, #0
 800722e:	0020      	movs	r0, r4
 8007230:	f002 fa5e 	bl	80096f0 <lv_obj_get_style_prop>
                switch(align) {
 8007234:	23ff      	movs	r3, #255	; 0xff
 8007236:	4018      	ands	r0, r3
 8007238:	2808      	cmp	r0, #8
 800723a:	d8c1      	bhi.n	80071c0 <lv_obj_refr_size.part.0+0x760>
 800723c:	224a      	movs	r2, #74	; 0x4a
 800723e:	3bfe      	subs	r3, #254	; 0xfe
 8007240:	4083      	lsls	r3, r0
 8007242:	32ff      	adds	r2, #255	; 0xff
 8007244:	4213      	tst	r3, r2
 8007246:	d0bb      	beq.n	80071c0 <lv_obj_refr_size.part.0+0x760>
                        child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8007248:	2214      	movs	r2, #20
 800724a:	5eab      	ldrsh	r3, [r5, r2]
 800724c:	2110      	movs	r1, #16
 800724e:	5e62      	ldrsh	r2, [r4, r1]
 8007250:	1a9b      	subs	r3, r3, r2
 8007252:	3301      	adds	r3, #1
 8007254:	42bb      	cmp	r3, r7
 8007256:	da00      	bge.n	800725a <lv_obj_refr_size.part.0+0x7fa>
 8007258:	003b      	movs	r3, r7
 800725a:	b21f      	sxth	r7, r3
                        break;
 800725c:	e7c7      	b.n	80071ee <lv_obj_refr_size.part.0+0x78e>
        if(child_res != LV_COORD_MIN) {
 800725e:	003b      	movs	r3, r7
 8007260:	464f      	mov	r7, r9
 8007262:	4699      	mov	r9, r3
 8007264:	4b06      	ldr	r3, [pc, #24]	; (8007280 <lv_obj_refr_size.part.0+0x820>)
 8007266:	002c      	movs	r4, r5
 8007268:	4645      	mov	r5, r8
 800726a:	4599      	cmp	r9, r3
 800726c:	d100      	bne.n	8007270 <lv_obj_refr_size.part.0+0x810>
 800726e:	e4d1      	b.n	8006c14 <lv_obj_refr_size.part.0+0x1b4>
            child_res += pad_left;
 8007270:	9b02      	ldr	r3, [sp, #8]
 8007272:	444b      	add	r3, r9
 8007274:	b21b      	sxth	r3, r3
 8007276:	e766      	b.n	8007146 <lv_obj_refr_size.part.0+0x6e6>
 8007278:	00040001 	.word	0x00040001
 800727c:	00060001 	.word	0x00060001
 8007280:	ffffe001 	.word	0xffffe001

08007284 <layout_update_core>:
{
 8007284:	b570      	push	{r4, r5, r6, lr}
 8007286:	0005      	movs	r5, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8007288:	f003 fe74 	bl	800af74 <lv_obj_get_child_cnt>
 800728c:	1e06      	subs	r6, r0, #0
    for(i = 0; i < child_cnt; i++) {
 800728e:	d009      	beq.n	80072a4 <layout_update_core+0x20>
 8007290:	2400      	movs	r4, #0
        lv_obj_t * child = obj->spec_attr->children[i];
 8007292:	68ab      	ldr	r3, [r5, #8]
 8007294:	00a2      	lsls	r2, r4, #2
 8007296:	681b      	ldr	r3, [r3, #0]
    for(i = 0; i < child_cnt; i++) {
 8007298:	3401      	adds	r4, #1
        layout_update_core(child);
 800729a:	58d0      	ldr	r0, [r2, r3]
 800729c:	f7ff fff2 	bl	8007284 <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 80072a0:	42a6      	cmp	r6, r4
 80072a2:	d1f6      	bne.n	8007292 <layout_update_core+0xe>
    if(obj->layout_inv == 0) return;
 80072a4:	2201      	movs	r2, #1
 80072a6:	7fab      	ldrb	r3, [r5, #30]
 80072a8:	421a      	tst	r2, r3
 80072aa:	d014      	beq.n	80072d6 <layout_update_core+0x52>
    obj->layout_inv = 0;
 80072ac:	4393      	bics	r3, r2
 80072ae:	77ab      	strb	r3, [r5, #30]
    if(obj->w_layout && obj->h_layout) return false;
 80072b0:	2306      	movs	r3, #6
 80072b2:	7fea      	ldrb	r2, [r5, #31]
 80072b4:	4013      	ands	r3, r2
 80072b6:	2b06      	cmp	r3, #6
 80072b8:	d002      	beq.n	80072c0 <layout_update_core+0x3c>
 80072ba:	0028      	movs	r0, r5
 80072bc:	f7ff fbd0 	bl	8006a60 <lv_obj_refr_size.part.0>
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 80072c0:	0028      	movs	r0, r5
 80072c2:	4918      	ldr	r1, [pc, #96]	; (8007324 <layout_update_core+0xa0>)
 80072c4:	f7fd fec4 	bl	8005050 <lv_obj_has_flag_any>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	d005      	beq.n	80072d8 <layout_update_core+0x54>
 80072cc:	0028      	movs	r0, r5
 80072ce:	f7ff fa49 	bl	8006764 <lv_obj_refr_pos.part.0>
    if(child_cnt > 0) {
 80072d2:	2e00      	cmp	r6, #0
 80072d4:	d10d      	bne.n	80072f2 <layout_update_core+0x6e>
}
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80072d8:	0028      	movs	r0, r5
 80072da:	f003 fe35 	bl	800af48 <lv_obj_get_parent>
    if(parent == NULL) return false;
 80072de:	2800      	cmp	r0, #0
 80072e0:	d0f4      	beq.n	80072cc <layout_update_core+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 80072e2:	220a      	movs	r2, #10
 80072e4:	2100      	movs	r1, #0
 80072e6:	f002 fa03 	bl	80096f0 <lv_obj_get_style_prop>
    if(layout) return true;
 80072ea:	0400      	lsls	r0, r0, #16
 80072ec:	d0ee      	beq.n	80072cc <layout_update_core+0x48>
    if(child_cnt > 0) {
 80072ee:	2e00      	cmp	r6, #0
 80072f0:	d0f1      	beq.n	80072d6 <layout_update_core+0x52>
 80072f2:	220a      	movs	r2, #10
 80072f4:	2100      	movs	r1, #0
 80072f6:	0028      	movs	r0, r5
 80072f8:	f002 f9fa 	bl	80096f0 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 80072fc:	0400      	lsls	r0, r0, #16
 80072fe:	0c03      	lsrs	r3, r0, #16
        if(layout_id > 0 && layout_id <= layout_cnt) {
 8007300:	2800      	cmp	r0, #0
 8007302:	d0e8      	beq.n	80072d6 <layout_update_core+0x52>
 8007304:	4a08      	ldr	r2, [pc, #32]	; (8007328 <layout_update_core+0xa4>)
 8007306:	6812      	ldr	r2, [r2, #0]
 8007308:	429a      	cmp	r2, r3
 800730a:	d3e4      	bcc.n	80072d6 <layout_update_core+0x52>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 800730c:	4a07      	ldr	r2, [pc, #28]	; (800732c <layout_update_core+0xa8>)
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 800730e:	0028      	movs	r0, r5
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 8007310:	4694      	mov	ip, r2
 8007312:	4a07      	ldr	r2, [pc, #28]	; (8007330 <layout_update_core+0xac>)
 8007314:	4463      	add	r3, ip
 8007316:	6812      	ldr	r2, [r2, #0]
 8007318:	00db      	lsls	r3, r3, #3
 800731a:	18d3      	adds	r3, r2, r3
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 800731c:	6859      	ldr	r1, [r3, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4798      	blx	r3
 8007322:	e7d8      	b.n	80072d6 <layout_update_core+0x52>
 8007324:	00060001 	.word	0x00060001
 8007328:	200031fc 	.word	0x200031fc
 800732c:	1fffffff 	.word	0x1fffffff
 8007330:	200033d0 	.word	0x200033d0

08007334 <lv_obj_align_to>:
{
 8007334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007336:	4657      	mov	r7, sl
 8007338:	4645      	mov	r5, r8
 800733a:	464e      	mov	r6, r9
 800733c:	46de      	mov	lr, fp
 800733e:	b5e0      	push	{r5, r6, r7, lr}
 8007340:	b087      	sub	sp, #28
 8007342:	9301      	str	r3, [sp, #4]
 8007344:	ab10      	add	r3, sp, #64	; 0x40
 8007346:	4691      	mov	r9, r2
    if(mutex) {
 8007348:	4fd4      	ldr	r7, [pc, #848]	; (800769c <lv_obj_align_to+0x368>)
{
 800734a:	2200      	movs	r2, #0
 800734c:	5e9b      	ldrsh	r3, [r3, r2]
 800734e:	4680      	mov	r8, r0
 8007350:	469a      	mov	sl, r3
    if(mutex) {
 8007352:	783b      	ldrb	r3, [r7, #0]
{
 8007354:	000d      	movs	r5, r1
    if(mutex) {
 8007356:	2b00      	cmp	r3, #0
 8007358:	d100      	bne.n	800735c <lv_obj_align_to+0x28>
 800735a:	e095      	b.n	8007488 <lv_obj_align_to+0x154>
    if(base == NULL) base = lv_obj_get_parent(obj);
 800735c:	2d00      	cmp	r5, #0
 800735e:	d100      	bne.n	8007362 <lv_obj_align_to+0x2e>
 8007360:	e0a9      	b.n	80074b6 <lv_obj_align_to+0x182>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8007362:	4640      	mov	r0, r8
 8007364:	f003 fdf0 	bl	800af48 <lv_obj_get_parent>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007368:	2232      	movs	r2, #50	; 0x32
 800736a:	2100      	movs	r1, #0
 800736c:	0007      	movs	r7, r0
 800736e:	f002 f9bf 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007372:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007374:	0004      	movs	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007376:	2100      	movs	r1, #0
 8007378:	0038      	movs	r0, r7
 800737a:	f002 f9b9 	bl	80096f0 <lv_obj_get_style_prop>
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + pborder;
 800737e:	b2a4      	uxth	r4, r4
 8007380:	1820      	adds	r0, r4, r0
 8007382:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007384:	2210      	movs	r2, #16
 8007386:	2100      	movs	r1, #0
 8007388:	0038      	movs	r0, r7
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	f002 f9b0 	bl	80096f0 <lv_obj_get_style_prop>
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
 8007390:	1824      	adds	r4, r4, r0
 8007392:	b223      	sxth	r3, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007394:	2232      	movs	r2, #50	; 0x32
 8007396:	2100      	movs	r1, #0
 8007398:	0028      	movs	r0, r5
 800739a:	469b      	mov	fp, r3
 800739c:	f002 f9a8 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80073a0:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80073a2:	0004      	movs	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80073a4:	2100      	movs	r1, #0
 80073a6:	0028      	movs	r0, r5
 80073a8:	f002 f9a2 	bl	80096f0 <lv_obj_get_style_prop>
    lv_coord_t bleft = lv_obj_get_style_pad_left(base, LV_PART_MAIN) + bborder;
 80073ac:	b2a4      	uxth	r4, r4
 80073ae:	1820      	adds	r0, r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80073b0:	2210      	movs	r2, #16
 80073b2:	2100      	movs	r1, #0
 80073b4:	b286      	uxth	r6, r0
 80073b6:	0028      	movs	r0, r5
 80073b8:	f002 f99a 	bl	80096f0 <lv_obj_get_style_prop>
    if(align == LV_ALIGN_DEFAULT) {
 80073bc:	464b      	mov	r3, r9
    lv_coord_t btop = lv_obj_get_style_pad_top(base, LV_PART_MAIN) + bborder;
 80073be:	1824      	adds	r4, r4, r0
 80073c0:	b2a4      	uxth	r4, r4
    if(align == LV_ALIGN_DEFAULT) {
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d006      	beq.n	80073d4 <lv_obj_align_to+0xa0>
    switch(align) {
 80073c6:	2b15      	cmp	r3, #21
 80073c8:	d900      	bls.n	80073cc <lv_obj_align_to+0x98>
 80073ca:	e276      	b.n	80078ba <lv_obj_align_to+0x586>
 80073cc:	009a      	lsls	r2, r3, #2
 80073ce:	4bb4      	ldr	r3, [pc, #720]	; (80076a0 <lv_obj_align_to+0x36c>)
 80073d0:	589b      	ldr	r3, [r3, r2]
 80073d2:	469f      	mov	pc, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80073d4:	2216      	movs	r2, #22
 80073d6:	2100      	movs	r1, #0
 80073d8:	0028      	movs	r0, r5
 80073da:	f002 f989 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80073de:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(base, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 80073e0:	2801      	cmp	r0, #1
 80073e2:	d100      	bne.n	80073e6 <lv_obj_align_to+0xb2>
 80073e4:	e07f      	b.n	80074e6 <lv_obj_align_to+0x1b2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80073e6:	2216      	movs	r2, #22
 80073e8:	2100      	movs	r1, #0
 80073ea:	0038      	movs	r0, r7
 80073ec:	f002 f980 	bl	80096f0 <lv_obj_get_style_prop>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 80073f0:	2210      	movs	r2, #16
 80073f2:	5eab      	ldrsh	r3, [r5, r2]
 80073f4:	9a01      	ldr	r2, [sp, #4]
    return (lv_base_dir_t)v.num;
 80073f6:	b2c0      	uxtb	r0, r0
 80073f8:	4694      	mov	ip, r2
 80073fa:	2110      	movs	r1, #16
 80073fc:	5e7a      	ldrsh	r2, [r7, r1]
 80073fe:	4463      	add	r3, ip
 8007400:	1a9b      	subs	r3, r3, r2
 8007402:	4699      	mov	r9, r3
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8007404:	2801      	cmp	r0, #1
 8007406:	d06a      	beq.n	80074de <lv_obj_align_to+0x1aa>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent) - pleft;
 8007408:	0038      	movs	r0, r7
 800740a:	f001 f97f 	bl	800870c <lv_obj_get_scroll_left>
 800740e:	9b00      	ldr	r3, [sp, #0]
 8007410:	4448      	add	r0, r9
 8007412:	1ac0      	subs	r0, r0, r3
 8007414:	1836      	adds	r6, r6, r0
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 8007416:	2312      	movs	r3, #18
 8007418:	5ee8      	ldrsh	r0, [r5, r3]
 800741a:	2312      	movs	r3, #18
 800741c:	5efd      	ldrsh	r5, [r7, r3]
 800741e:	4450      	add	r0, sl
 8007420:	1b45      	subs	r5, r0, r5
 8007422:	0038      	movs	r0, r7
 8007424:	f000 fc5a 	bl	8007cdc <lv_obj_get_scroll_top>
 8007428:	465b      	mov	r3, fp
 800742a:	1940      	adds	r0, r0, r5
 800742c:	1ac0      	subs	r0, r0, r3
    lv_obj_set_style_align(obj, LV_ALIGN_TOP_LEFT, 0);
 800742e:	2200      	movs	r2, #0
 8007430:	2101      	movs	r1, #1
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 8007432:	1824      	adds	r4, r4, r0
    lv_obj_set_style_align(obj, LV_ALIGN_TOP_LEFT, 0);
 8007434:	4640      	mov	r0, r8
 8007436:	f003 fa47 	bl	800a8c8 <lv_obj_set_style_align>
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 800743a:	2300      	movs	r3, #0
 800743c:	2107      	movs	r1, #7
 800743e:	4640      	mov	r0, r8
 8007440:	aa05      	add	r2, sp, #20
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent) - pleft;
 8007442:	b236      	sxth	r6, r6
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 8007444:	b224      	sxth	r4, r4
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8007446:	f002 ffb5 	bl	800a3b4 <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 800744a:	2801      	cmp	r0, #1
 800744c:	d038      	beq.n	80074c0 <lv_obj_align_to+0x18c>
 800744e:	2800      	cmp	r0, #0
 8007450:	d104      	bne.n	800745c <lv_obj_align_to+0x128>
        lv_obj_set_style_x(obj, x, 0);
 8007452:	2200      	movs	r2, #0
 8007454:	0031      	movs	r1, r6
 8007456:	4640      	mov	r0, r8
 8007458:	f003 fa26 	bl	800a8a8 <lv_obj_set_style_x>
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 800745c:	2300      	movs	r3, #0
 800745e:	2108      	movs	r1, #8
 8007460:	4640      	mov	r0, r8
 8007462:	aa05      	add	r2, sp, #20
 8007464:	f002 ffa6 	bl	800a3b4 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8007468:	2801      	cmp	r0, #1
 800746a:	d034      	beq.n	80074d6 <lv_obj_align_to+0x1a2>
 800746c:	2800      	cmp	r0, #0
 800746e:	d104      	bne.n	800747a <lv_obj_align_to+0x146>
        lv_obj_set_style_y(obj, y, 0);
 8007470:	2200      	movs	r2, #0
 8007472:	0021      	movs	r1, r4
 8007474:	4640      	mov	r0, r8
 8007476:	f003 fa1f 	bl	800a8b8 <lv_obj_set_style_y>
}
 800747a:	b007      	add	sp, #28
 800747c:	bcf0      	pop	{r4, r5, r6, r7}
 800747e:	46bb      	mov	fp, r7
 8007480:	46b2      	mov	sl, r6
 8007482:	46a9      	mov	r9, r5
 8007484:	46a0      	mov	r8, r4
 8007486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mutex = true;
 8007488:	3301      	adds	r3, #1
 800748a:	703b      	strb	r3, [r7, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 800748c:	f003 fd2c 	bl	800aee8 <lv_obj_get_screen>
    while(scr->scr_layout_inv) {
 8007490:	7f83      	ldrb	r3, [r0, #30]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8007492:	0004      	movs	r4, r0
        scr->scr_layout_inv = 0;
 8007494:	2602      	movs	r6, #2
    while(scr->scr_layout_inv) {
 8007496:	079b      	lsls	r3, r3, #30
 8007498:	d508      	bpl.n	80074ac <lv_obj_align_to+0x178>
        scr->scr_layout_inv = 0;
 800749a:	7fa3      	ldrb	r3, [r4, #30]
        layout_update_core(scr);
 800749c:	0020      	movs	r0, r4
        scr->scr_layout_inv = 0;
 800749e:	43b3      	bics	r3, r6
 80074a0:	77a3      	strb	r3, [r4, #30]
        layout_update_core(scr);
 80074a2:	f7ff feef 	bl	8007284 <layout_update_core>
    while(scr->scr_layout_inv) {
 80074a6:	7fa3      	ldrb	r3, [r4, #30]
 80074a8:	421e      	tst	r6, r3
 80074aa:	d1f6      	bne.n	800749a <lv_obj_align_to+0x166>
    mutex = false;
 80074ac:	2300      	movs	r3, #0
 80074ae:	703b      	strb	r3, [r7, #0]
    if(base == NULL) base = lv_obj_get_parent(obj);
 80074b0:	2d00      	cmp	r5, #0
 80074b2:	d000      	beq.n	80074b6 <lv_obj_align_to+0x182>
 80074b4:	e755      	b.n	8007362 <lv_obj_align_to+0x2e>
 80074b6:	4640      	mov	r0, r8
 80074b8:	f003 fd46 	bl	800af48 <lv_obj_get_parent>
 80074bc:	0005      	movs	r5, r0
 80074be:	e750      	b.n	8007362 <lv_obj_align_to+0x2e>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 80074c0:	9b05      	ldr	r3, [sp, #20]
 80074c2:	42b3      	cmp	r3, r6
 80074c4:	d1c5      	bne.n	8007452 <lv_obj_align_to+0x11e>
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 80074c6:	2300      	movs	r3, #0
 80074c8:	2108      	movs	r1, #8
 80074ca:	4640      	mov	r0, r8
 80074cc:	aa05      	add	r2, sp, #20
 80074ce:	f002 ff71 	bl	800a3b4 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 80074d2:	2801      	cmp	r0, #1
 80074d4:	d1ca      	bne.n	800746c <lv_obj_align_to+0x138>
 80074d6:	9b05      	ldr	r3, [sp, #20]
 80074d8:	42a3      	cmp	r3, r4
 80074da:	d1c9      	bne.n	8007470 <lv_obj_align_to+0x13c>
 80074dc:	e7cd      	b.n	800747a <lv_obj_align_to+0x146>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 80074de:	0038      	movs	r0, r7
 80074e0:	f001 f92a 	bl	8008738 <lv_obj_get_scroll_right>
 80074e4:	e793      	b.n	800740e <lv_obj_align_to+0xda>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80074e6:	2212      	movs	r2, #18
 80074e8:	2100      	movs	r1, #0
 80074ea:	0028      	movs	r0, r5
 80074ec:	f002 f900 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80074f0:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80074f2:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80074f4:	2100      	movs	r1, #0
 80074f6:	0028      	movs	r0, r5
 80074f8:	f002 f8fa 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80074fc:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80074fe:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007500:	2100      	movs	r1, #0
 8007502:	0028      	movs	r0, r5
 8007504:	f002 f8f4 	bl	80096f0 <lv_obj_get_style_prop>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 8007508:	464b      	mov	r3, r9
 800750a:	1af6      	subs	r6, r6, r3
 800750c:	9b02      	ldr	r3, [sp, #8]
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 800750e:	0040      	lsls	r0, r0, #1
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 8007510:	1af6      	subs	r6, r6, r3
 8007512:	4643      	mov	r3, r8
 8007514:	1a36      	subs	r6, r6, r0
 8007516:	8a18      	ldrh	r0, [r3, #16]
 8007518:	8a9b      	ldrh	r3, [r3, #20]
 800751a:	1836      	adds	r6, r6, r0
 800751c:	1af6      	subs	r6, r6, r3
 800751e:	8aab      	ldrh	r3, [r5, #20]
 8007520:	18f6      	adds	r6, r6, r3
 8007522:	8a2b      	ldrh	r3, [r5, #16]
 8007524:	1af6      	subs	r6, r6, r3
 8007526:	b2b6      	uxth	r6, r6
            break;
 8007528:	e75d      	b.n	80073e6 <lv_obj_align_to+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800752a:	2212      	movs	r2, #18
 800752c:	2100      	movs	r1, #0
 800752e:	0028      	movs	r0, r5
 8007530:	f002 f8de 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8007534:	2213      	movs	r2, #19
 8007536:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007538:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800753a:	0028      	movs	r0, r5
 800753c:	f002 f8d8 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007540:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8007542:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007544:	2100      	movs	r1, #0
 8007546:	0028      	movs	r0, r5
 8007548:	f002 f8d2 	bl	80096f0 <lv_obj_get_style_prop>
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 800754c:	2301      	movs	r3, #1
 800754e:	9a02      	ldr	r2, [sp, #8]
 8007550:	0040      	lsls	r0, r0, #1
 8007552:	444a      	add	r2, r9
 8007554:	1a9b      	subs	r3, r3, r2
 8007556:	8aaa      	ldrh	r2, [r5, #20]
 8007558:	1a1b      	subs	r3, r3, r0
 800755a:	189b      	adds	r3, r3, r2
 800755c:	8a2a      	ldrh	r2, [r5, #16]
 800755e:	4641      	mov	r1, r8
 8007560:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 8007562:	b21b      	sxth	r3, r3
 8007564:	0fda      	lsrs	r2, r3, #31
 8007566:	18d3      	adds	r3, r2, r3
 8007568:	4642      	mov	r2, r8
 800756a:	8a92      	ldrh	r2, [r2, #20]
 800756c:	8a09      	ldrh	r1, [r1, #16]
 800756e:	3201      	adds	r2, #1
 8007570:	1a52      	subs	r2, r2, r1
 8007572:	b212      	sxth	r2, r2
 8007574:	0fd1      	lsrs	r1, r2, #31
 8007576:	188a      	adds	r2, r1, r2
 8007578:	1052      	asrs	r2, r2, #1
 800757a:	105b      	asrs	r3, r3, #1
 800757c:	1ab6      	subs	r6, r6, r2
 800757e:	199e      	adds	r6, r3, r6
 8007580:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007582:	2210      	movs	r2, #16
 8007584:	2100      	movs	r1, #0
 8007586:	0028      	movs	r0, r5
 8007588:	f002 f8b2 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800758c:	2211      	movs	r2, #17
 800758e:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007590:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007592:	0028      	movs	r0, r5
 8007594:	f002 f8ac 	bl	80096f0 <lv_obj_get_style_prop>
 8007598:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800759a:	2232      	movs	r2, #50	; 0x32
 800759c:	2100      	movs	r1, #0
 800759e:	0028      	movs	r0, r5
 80075a0:	f002 f8a6 	bl	80096f0 <lv_obj_get_style_prop>
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 80075a4:	9b02      	ldr	r3, [sp, #8]
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 80075a6:	0040      	lsls	r0, r0, #1
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 80075a8:	1ae4      	subs	r4, r4, r3
 80075aa:	464b      	mov	r3, r9
 80075ac:	1ae4      	subs	r4, r4, r3
 80075ae:	4643      	mov	r3, r8
 80075b0:	8a5b      	ldrh	r3, [r3, #18]
 80075b2:	1a24      	subs	r4, r4, r0
 80075b4:	18e4      	adds	r4, r4, r3
 80075b6:	4643      	mov	r3, r8
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80075b8:	8adb      	ldrh	r3, [r3, #22]
 80075ba:	1ae4      	subs	r4, r4, r3
 80075bc:	8aeb      	ldrh	r3, [r5, #22]
 80075be:	18e4      	adds	r4, r4, r3
 80075c0:	8a6b      	ldrh	r3, [r5, #18]
 80075c2:	1ae4      	subs	r4, r4, r3
 80075c4:	b2a4      	uxth	r4, r4
            break;
 80075c6:	e70e      	b.n	80073e6 <lv_obj_align_to+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80075c8:	2212      	movs	r2, #18
 80075ca:	2100      	movs	r1, #0
 80075cc:	0028      	movs	r0, r5
 80075ce:	f002 f88f 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80075d2:	2213      	movs	r2, #19
 80075d4:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80075d6:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80075d8:	0028      	movs	r0, r5
 80075da:	f002 f889 	bl	80096f0 <lv_obj_get_style_prop>
 80075de:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80075e0:	2232      	movs	r2, #50	; 0x32
 80075e2:	2100      	movs	r1, #0
 80075e4:	0028      	movs	r0, r5
 80075e6:	f002 f883 	bl	80096f0 <lv_obj_get_style_prop>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 80075ea:	9b02      	ldr	r3, [sp, #8]
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 80075ec:	0040      	lsls	r0, r0, #1
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 80075ee:	1af6      	subs	r6, r6, r3
 80075f0:	464b      	mov	r3, r9
 80075f2:	1af6      	subs	r6, r6, r3
 80075f4:	4643      	mov	r3, r8
 80075f6:	8a1b      	ldrh	r3, [r3, #16]
 80075f8:	1a36      	subs	r6, r6, r0
 80075fa:	18f6      	adds	r6, r6, r3
 80075fc:	4643      	mov	r3, r8
 80075fe:	8a9b      	ldrh	r3, [r3, #20]
 8007600:	1af6      	subs	r6, r6, r3
 8007602:	8aab      	ldrh	r3, [r5, #20]
 8007604:	18f6      	adds	r6, r6, r3
 8007606:	8a2b      	ldrh	r3, [r5, #16]
 8007608:	1af6      	subs	r6, r6, r3
 800760a:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800760c:	2210      	movs	r2, #16
 800760e:	2100      	movs	r1, #0
 8007610:	0028      	movs	r0, r5
 8007612:	f002 f86d 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007616:	2211      	movs	r2, #17
 8007618:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800761a:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800761c:	0028      	movs	r0, r5
 800761e:	f002 f867 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007622:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007624:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007626:	2100      	movs	r1, #0
 8007628:	0028      	movs	r0, r5
 800762a:	f002 f861 	bl	80096f0 <lv_obj_get_style_prop>
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 800762e:	2301      	movs	r3, #1
 8007630:	9a02      	ldr	r2, [sp, #8]
 8007632:	444a      	add	r2, r9
 8007634:	1a9b      	subs	r3, r3, r2
 8007636:	8aea      	ldrh	r2, [r5, #22]
 8007638:	0040      	lsls	r0, r0, #1
 800763a:	1a1b      	subs	r3, r3, r0
 800763c:	189b      	adds	r3, r3, r2
 800763e:	8a6a      	ldrh	r2, [r5, #18]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007640:	4641      	mov	r1, r8
 8007642:	1a9b      	subs	r3, r3, r2
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 8007644:	b21b      	sxth	r3, r3
 8007646:	0fda      	lsrs	r2, r3, #31
 8007648:	18d3      	adds	r3, r2, r3
 800764a:	4642      	mov	r2, r8
 800764c:	8ad2      	ldrh	r2, [r2, #22]
 800764e:	8a49      	ldrh	r1, [r1, #18]
 8007650:	3201      	adds	r2, #1
 8007652:	1a52      	subs	r2, r2, r1
 8007654:	b212      	sxth	r2, r2
 8007656:	0fd1      	lsrs	r1, r2, #31
 8007658:	188a      	adds	r2, r1, r2
 800765a:	1052      	asrs	r2, r2, #1
 800765c:	105b      	asrs	r3, r3, #1
 800765e:	1aa4      	subs	r4, r4, r2
 8007660:	191c      	adds	r4, r3, r4
 8007662:	b2a4      	uxth	r4, r4
            break;
 8007664:	e6bf      	b.n	80073e6 <lv_obj_align_to+0xb2>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007666:	8aae      	ldrh	r6, [r5, #20]
 8007668:	8a2b      	ldrh	r3, [r5, #16]
 800766a:	3601      	adds	r6, #1
 800766c:	1af6      	subs	r6, r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800766e:	8aeb      	ldrh	r3, [r5, #22]
 8007670:	8a6a      	ldrh	r2, [r5, #18]
 8007672:	3301      	adds	r3, #1
 8007674:	1a9b      	subs	r3, r3, r2
            y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8007676:	b21b      	sxth	r3, r3
 8007678:	0fdc      	lsrs	r4, r3, #31
 800767a:	18e4      	adds	r4, r4, r3
 800767c:	4643      	mov	r3, r8
 800767e:	4642      	mov	r2, r8
 8007680:	8adb      	ldrh	r3, [r3, #22]
 8007682:	8a52      	ldrh	r2, [r2, #18]
 8007684:	3301      	adds	r3, #1
 8007686:	1a9b      	subs	r3, r3, r2
 8007688:	b21b      	sxth	r3, r3
 800768a:	0fda      	lsrs	r2, r3, #31
 800768c:	18d3      	adds	r3, r2, r3
 800768e:	1064      	asrs	r4, r4, #1
 8007690:	105b      	asrs	r3, r3, #1
 8007692:	1ae4      	subs	r4, r4, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007694:	b2b6      	uxth	r6, r6
 8007696:	b2a4      	uxth	r4, r4
            break;
 8007698:	e6a5      	b.n	80073e6 <lv_obj_align_to+0xb2>
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	20003200 	.word	0x20003200
 80076a0:	0801b788 	.word	0x0801b788
            y = -lv_obj_get_height(obj);
 80076a4:	4643      	mov	r3, r8
 80076a6:	8a5c      	ldrh	r4, [r3, #18]
 80076a8:	8adb      	ldrh	r3, [r3, #22]
 80076aa:	3c01      	subs	r4, #1
 80076ac:	1ae4      	subs	r4, r4, r3
            break;
 80076ae:	2600      	movs	r6, #0
            y = -lv_obj_get_height(obj);
 80076b0:	b2a4      	uxth	r4, r4
            break;
 80076b2:	e698      	b.n	80073e6 <lv_obj_align_to+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80076b4:	2212      	movs	r2, #18
 80076b6:	2100      	movs	r1, #0
 80076b8:	0028      	movs	r0, r5
 80076ba:	f002 f819 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80076be:	2213      	movs	r2, #19
 80076c0:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80076c2:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80076c4:	0028      	movs	r0, r5
 80076c6:	f002 f813 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80076ca:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80076cc:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80076ce:	2100      	movs	r1, #0
 80076d0:	0028      	movs	r0, r5
 80076d2:	f002 f80d 	bl	80096f0 <lv_obj_get_style_prop>
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 80076d6:	2201      	movs	r2, #1
 80076d8:	9b02      	ldr	r3, [sp, #8]
 80076da:	0040      	lsls	r0, r0, #1
 80076dc:	444b      	add	r3, r9
 80076de:	4691      	mov	r9, r2
 80076e0:	464a      	mov	r2, r9
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	8aaa      	ldrh	r2, [r5, #20]
 80076e6:	1a1b      	subs	r3, r3, r0
 80076e8:	189b      	adds	r3, r3, r2
 80076ea:	8a2a      	ldrh	r2, [r5, #16]
 80076ec:	4641      	mov	r1, r8
 80076ee:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 80076f0:	b21b      	sxth	r3, r3
 80076f2:	0fda      	lsrs	r2, r3, #31
 80076f4:	18d3      	adds	r3, r2, r3
 80076f6:	4642      	mov	r2, r8
 80076f8:	8a92      	ldrh	r2, [r2, #20]
 80076fa:	8a09      	ldrh	r1, [r1, #16]
 80076fc:	3201      	adds	r2, #1
 80076fe:	1a52      	subs	r2, r2, r1
 8007700:	b212      	sxth	r2, r2
 8007702:	0fd1      	lsrs	r1, r2, #31
 8007704:	188a      	adds	r2, r1, r2
 8007706:	1052      	asrs	r2, r2, #1
 8007708:	105b      	asrs	r3, r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800770a:	2100      	movs	r1, #0
 800770c:	1ab6      	subs	r6, r6, r2
 800770e:	0028      	movs	r0, r5
 8007710:	2210      	movs	r2, #16
 8007712:	199e      	adds	r6, r3, r6
 8007714:	f001 ffec 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007718:	2211      	movs	r2, #17
 800771a:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800771c:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800771e:	0028      	movs	r0, r5
 8007720:	f001 ffe6 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007724:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007726:	9003      	str	r0, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007728:	2100      	movs	r1, #0
 800772a:	0028      	movs	r0, r5
 800772c:	f001 ffe0 	bl	80096f0 <lv_obj_get_style_prop>
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8007730:	9a03      	ldr	r2, [sp, #12]
 8007732:	9b02      	ldr	r3, [sp, #8]
 8007734:	4694      	mov	ip, r2
 8007736:	464a      	mov	r2, r9
 8007738:	4463      	add	r3, ip
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 800773a:	b2b6      	uxth	r6, r6
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	e77a      	b.n	8007636 <lv_obj_align_to+0x302>
 8007740:	8aae      	ldrh	r6, [r5, #20]
 8007742:	8a2b      	ldrh	r3, [r5, #16]
 8007744:	3601      	adds	r6, #1
 8007746:	1af6      	subs	r6, r6, r3
            break;
 8007748:	2400      	movs	r4, #0
 800774a:	b2b6      	uxth	r6, r6
 800774c:	e64b      	b.n	80073e6 <lv_obj_align_to+0xb2>
            x = -lv_obj_get_width(obj);
 800774e:	4643      	mov	r3, r8
 8007750:	8a1e      	ldrh	r6, [r3, #16]
 8007752:	8a9b      	ldrh	r3, [r3, #20]
 8007754:	3e01      	subs	r6, #1
 8007756:	1af6      	subs	r6, r6, r3
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8007758:	4643      	mov	r3, r8
 800775a:	b2b6      	uxth	r6, r6
 800775c:	8a5c      	ldrh	r4, [r3, #18]
 800775e:	e72b      	b.n	80075b8 <lv_obj_align_to+0x284>
            x = -lv_obj_get_width(obj);
 8007760:	4643      	mov	r3, r8
 8007762:	8a1e      	ldrh	r6, [r3, #16]
 8007764:	8a9b      	ldrh	r3, [r3, #20]
 8007766:	3e01      	subs	r6, #1
 8007768:	e780      	b.n	800766c <lv_obj_align_to+0x338>
            x = -lv_obj_get_width(obj);
 800776a:	4643      	mov	r3, r8
 800776c:	8a1e      	ldrh	r6, [r3, #16]
 800776e:	8a9b      	ldrh	r3, [r3, #20]
 8007770:	3e01      	subs	r6, #1
 8007772:	1af6      	subs	r6, r6, r3
            break;
 8007774:	2400      	movs	r4, #0
            x = -lv_obj_get_width(obj);
 8007776:	b2b6      	uxth	r6, r6
            break;
 8007778:	e635      	b.n	80073e6 <lv_obj_align_to+0xb2>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800777a:	4643      	mov	r3, r8
 800777c:	8a1e      	ldrh	r6, [r3, #16]
 800777e:	8a9b      	ldrh	r3, [r3, #20]
 8007780:	1af6      	subs	r6, r6, r3
 8007782:	8aab      	ldrh	r3, [r5, #20]
 8007784:	18f6      	adds	r6, r6, r3
 8007786:	8a2b      	ldrh	r3, [r5, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007788:	8aec      	ldrh	r4, [r5, #22]
 800778a:	1af6      	subs	r6, r6, r3
 800778c:	8a6b      	ldrh	r3, [r5, #18]
 800778e:	3401      	adds	r4, #1
 8007790:	1ae4      	subs	r4, r4, r3
 8007792:	b2b6      	uxth	r6, r6
 8007794:	b2a4      	uxth	r4, r4
            break;
 8007796:	e626      	b.n	80073e6 <lv_obj_align_to+0xb2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007798:	2212      	movs	r2, #18
 800779a:	2100      	movs	r1, #0
 800779c:	0028      	movs	r0, r5
 800779e:	f001 ffa7 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80077a2:	2213      	movs	r2, #19
 80077a4:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80077a6:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80077a8:	0028      	movs	r0, r5
 80077aa:	f001 ffa1 	bl	80096f0 <lv_obj_get_style_prop>
 80077ae:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80077b0:	2232      	movs	r2, #50	; 0x32
 80077b2:	2100      	movs	r1, #0
 80077b4:	0028      	movs	r0, r5
 80077b6:	f001 ff9b 	bl	80096f0 <lv_obj_get_style_prop>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 80077ba:	9b02      	ldr	r3, [sp, #8]
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 80077bc:	0040      	lsls	r0, r0, #1
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 80077be:	1af6      	subs	r6, r6, r3
 80077c0:	464b      	mov	r3, r9
 80077c2:	1af6      	subs	r6, r6, r3
 80077c4:	4643      	mov	r3, r8
 80077c6:	8a1b      	ldrh	r3, [r3, #16]
 80077c8:	1a36      	subs	r6, r6, r0
 80077ca:	18f6      	adds	r6, r6, r3
 80077cc:	4643      	mov	r3, r8
 80077ce:	8a9b      	ldrh	r3, [r3, #20]
 80077d0:	1af6      	subs	r6, r6, r3
 80077d2:	8aab      	ldrh	r3, [r5, #20]
 80077d4:	18f6      	adds	r6, r6, r3
 80077d6:	8a2b      	ldrh	r3, [r5, #16]
 80077d8:	1af6      	subs	r6, r6, r3
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 80077da:	b2b6      	uxth	r6, r6
 80077dc:	e6d1      	b.n	8007582 <lv_obj_align_to+0x24e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80077de:	8aab      	ldrh	r3, [r5, #20]
 80077e0:	8a2a      	ldrh	r2, [r5, #16]
 80077e2:	3301      	adds	r3, #1
 80077e4:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80077e6:	b21b      	sxth	r3, r3
 80077e8:	0fde      	lsrs	r6, r3, #31
 80077ea:	18f6      	adds	r6, r6, r3
 80077ec:	4643      	mov	r3, r8
 80077ee:	4642      	mov	r2, r8
 80077f0:	8a9b      	ldrh	r3, [r3, #20]
 80077f2:	8a12      	ldrh	r2, [r2, #16]
 80077f4:	3301      	adds	r3, #1
 80077f6:	1a9b      	subs	r3, r3, r2
 80077f8:	b21b      	sxth	r3, r3
 80077fa:	0fda      	lsrs	r2, r3, #31
 80077fc:	18d3      	adds	r3, r2, r3
 80077fe:	1076      	asrs	r6, r6, #1
 8007800:	105b      	asrs	r3, r3, #1
 8007802:	e7c1      	b.n	8007788 <lv_obj_align_to+0x454>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007804:	8aec      	ldrh	r4, [r5, #22]
 8007806:	8a6b      	ldrh	r3, [r5, #18]
 8007808:	3401      	adds	r4, #1
 800780a:	1ae4      	subs	r4, r4, r3
            break;
 800780c:	2600      	movs	r6, #0
 800780e:	b2a4      	uxth	r4, r4
 8007810:	e5e9      	b.n	80073e6 <lv_obj_align_to+0xb2>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8007812:	4643      	mov	r3, r8
 8007814:	8a1e      	ldrh	r6, [r3, #16]
 8007816:	8a9b      	ldrh	r3, [r3, #20]
 8007818:	1af6      	subs	r6, r6, r3
 800781a:	8aab      	ldrh	r3, [r5, #20]
 800781c:	18f6      	adds	r6, r6, r3
 800781e:	8a2b      	ldrh	r3, [r5, #16]
 8007820:	1af6      	subs	r6, r6, r3
            y = -lv_obj_get_height(obj);
 8007822:	4643      	mov	r3, r8
 8007824:	8a5c      	ldrh	r4, [r3, #18]
 8007826:	8adb      	ldrh	r3, [r3, #22]
 8007828:	3c01      	subs	r4, #1
 800782a:	1ae4      	subs	r4, r4, r3
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 800782c:	b2b6      	uxth	r6, r6
            y = -lv_obj_get_height(obj);
 800782e:	b2a4      	uxth	r4, r4
            break;
 8007830:	e5d9      	b.n	80073e6 <lv_obj_align_to+0xb2>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007832:	8aae      	ldrh	r6, [r5, #20]
 8007834:	8a2b      	ldrh	r3, [r5, #16]
 8007836:	3601      	adds	r6, #1
 8007838:	e78d      	b.n	8007756 <lv_obj_align_to+0x422>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800783a:	2212      	movs	r2, #18
 800783c:	2100      	movs	r1, #0
 800783e:	0028      	movs	r0, r5
 8007840:	f001 ff56 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8007844:	2213      	movs	r2, #19
 8007846:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007848:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800784a:	0028      	movs	r0, r5
 800784c:	f001 ff50 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007850:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8007852:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007854:	2100      	movs	r1, #0
 8007856:	0028      	movs	r0, r5
 8007858:	f001 ff4a 	bl	80096f0 <lv_obj_get_style_prop>
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 800785c:	2301      	movs	r3, #1
 800785e:	9a02      	ldr	r2, [sp, #8]
 8007860:	0040      	lsls	r0, r0, #1
 8007862:	444a      	add	r2, r9
 8007864:	1a9b      	subs	r3, r3, r2
 8007866:	8aaa      	ldrh	r2, [r5, #20]
 8007868:	1a1b      	subs	r3, r3, r0
 800786a:	189b      	adds	r3, r3, r2
 800786c:	8a2a      	ldrh	r2, [r5, #16]
 800786e:	4641      	mov	r1, r8
 8007870:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 8007872:	b21b      	sxth	r3, r3
 8007874:	0fda      	lsrs	r2, r3, #31
 8007876:	18d3      	adds	r3, r2, r3
 8007878:	4642      	mov	r2, r8
 800787a:	8a92      	ldrh	r2, [r2, #20]
 800787c:	8a09      	ldrh	r1, [r1, #16]
 800787e:	3201      	adds	r2, #1
 8007880:	1a52      	subs	r2, r2, r1
 8007882:	b212      	sxth	r2, r2
 8007884:	0fd1      	lsrs	r1, r2, #31
 8007886:	188a      	adds	r2, r1, r2
 8007888:	1052      	asrs	r2, r2, #1
 800788a:	105b      	asrs	r3, r3, #1
 800788c:	1ab6      	subs	r6, r6, r2
 800788e:	199e      	adds	r6, r3, r6
 8007890:	b2b6      	uxth	r6, r6
            break;
 8007892:	e5a8      	b.n	80073e6 <lv_obj_align_to+0xb2>
 8007894:	8aab      	ldrh	r3, [r5, #20]
 8007896:	8a2a      	ldrh	r2, [r5, #16]
 8007898:	3301      	adds	r3, #1
 800789a:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800789c:	b21b      	sxth	r3, r3
 800789e:	0fde      	lsrs	r6, r3, #31
 80078a0:	18f6      	adds	r6, r6, r3
 80078a2:	4643      	mov	r3, r8
 80078a4:	4642      	mov	r2, r8
 80078a6:	8a9b      	ldrh	r3, [r3, #20]
 80078a8:	8a12      	ldrh	r2, [r2, #16]
 80078aa:	3301      	adds	r3, #1
 80078ac:	1a9b      	subs	r3, r3, r2
 80078ae:	b21b      	sxth	r3, r3
 80078b0:	0fda      	lsrs	r2, r3, #31
 80078b2:	18d3      	adds	r3, r2, r3
 80078b4:	1076      	asrs	r6, r6, #1
 80078b6:	105b      	asrs	r3, r3, #1
 80078b8:	e7b2      	b.n	8007820 <lv_obj_align_to+0x4ec>
    switch(align) {
 80078ba:	2400      	movs	r4, #0
 80078bc:	0026      	movs	r6, r4
 80078be:	e592      	b.n	80073e6 <lv_obj_align_to+0xb2>

080078c0 <lv_obj_update_layout>:
{
 80078c0:	b570      	push	{r4, r5, r6, lr}
    if(mutex) {
 80078c2:	4e0d      	ldr	r6, [pc, #52]	; (80078f8 <lv_obj_update_layout+0x38>)
 80078c4:	7833      	ldrb	r3, [r6, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d000      	beq.n	80078cc <lv_obj_update_layout+0xc>
}
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
    mutex = true;
 80078cc:	3301      	adds	r3, #1
 80078ce:	7033      	strb	r3, [r6, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 80078d0:	f003 fb0a 	bl	800aee8 <lv_obj_get_screen>
    while(scr->scr_layout_inv) {
 80078d4:	7f83      	ldrb	r3, [r0, #30]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 80078d6:	0004      	movs	r4, r0
    while(scr->scr_layout_inv) {
 80078d8:	079b      	lsls	r3, r3, #30
 80078da:	d509      	bpl.n	80078f0 <lv_obj_update_layout+0x30>
        scr->scr_layout_inv = 0;
 80078dc:	2502      	movs	r5, #2
 80078de:	7fa3      	ldrb	r3, [r4, #30]
        layout_update_core(scr);
 80078e0:	0020      	movs	r0, r4
        scr->scr_layout_inv = 0;
 80078e2:	43ab      	bics	r3, r5
 80078e4:	77a3      	strb	r3, [r4, #30]
        layout_update_core(scr);
 80078e6:	f7ff fccd 	bl	8007284 <layout_update_core>
    while(scr->scr_layout_inv) {
 80078ea:	7fa3      	ldrb	r3, [r4, #30]
 80078ec:	421d      	tst	r5, r3
 80078ee:	d1f6      	bne.n	80078de <lv_obj_update_layout+0x1e>
    mutex = false;
 80078f0:	2300      	movs	r3, #0
 80078f2:	7033      	strb	r3, [r6, #0]
 80078f4:	e7e9      	b.n	80078ca <lv_obj_update_layout+0xa>
 80078f6:	46c0      	nop			; (mov r8, r8)
 80078f8:	20003200 	.word	0x20003200

080078fc <lv_obj_get_click_area>:
{
 80078fc:	b570      	push	{r4, r5, r6, lr}
    dest->x1 = src->x1;
 80078fe:	2310      	movs	r3, #16
 8007900:	5ec5      	ldrsh	r5, [r0, r3]
 8007902:	800d      	strh	r5, [r1, #0]
    dest->y1 = src->y1;
 8007904:	2312      	movs	r3, #18
 8007906:	5ec2      	ldrsh	r2, [r0, r3]
 8007908:	804a      	strh	r2, [r1, #2]
    dest->x2 = src->x2;
 800790a:	2314      	movs	r3, #20
 800790c:	5ec4      	ldrsh	r4, [r0, r3]
 800790e:	808c      	strh	r4, [r1, #4]
    dest->y2 = src->y2;
 8007910:	2316      	movs	r3, #22
 8007912:	5ec6      	ldrsh	r6, [r0, r3]
    if(obj->spec_attr) {
 8007914:	6883      	ldr	r3, [r0, #8]
 8007916:	80ce      	strh	r6, [r1, #6]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d008      	beq.n	800792e <lv_obj_get_click_area+0x32>
        area->x1 -= obj->spec_attr->ext_click_pad;
 800791c:	8a9b      	ldrh	r3, [r3, #20]
 800791e:	1aed      	subs	r5, r5, r3
        area->x2 += obj->spec_attr->ext_click_pad;
 8007920:	191c      	adds	r4, r3, r4
        area->y1 -= obj->spec_attr->ext_click_pad;
 8007922:	1ad2      	subs	r2, r2, r3
        area->y2 += obj->spec_attr->ext_click_pad;
 8007924:	199b      	adds	r3, r3, r6
        area->x1 -= obj->spec_attr->ext_click_pad;
 8007926:	800d      	strh	r5, [r1, #0]
        area->x2 += obj->spec_attr->ext_click_pad;
 8007928:	808c      	strh	r4, [r1, #4]
        area->y1 -= obj->spec_attr->ext_click_pad;
 800792a:	804a      	strh	r2, [r1, #2]
        area->y2 += obj->spec_attr->ext_click_pad;
 800792c:	80cb      	strh	r3, [r1, #6]
}
 800792e:	bd70      	pop	{r4, r5, r6, pc}

08007930 <lv_obj_hit_test>:
{
 8007930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007932:	000e      	movs	r6, r1
 8007934:	b085      	sub	sp, #20
    if(!lv_obj_has_flag(obj, LV_OBJ_FLAG_CLICKABLE)) return false;
 8007936:	2102      	movs	r1, #2
{
 8007938:	0004      	movs	r4, r0
    if(!lv_obj_has_flag(obj, LV_OBJ_FLAG_CLICKABLE)) return false;
 800793a:	f7fd fb81 	bl	8005040 <lv_obj_has_flag>
 800793e:	2800      	cmp	r0, #0
 8007940:	d103      	bne.n	800794a <lv_obj_hit_test+0x1a>
 8007942:	2500      	movs	r5, #0
}
 8007944:	0028      	movs	r0, r5
 8007946:	b005      	add	sp, #20
 8007948:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(lv_obj_has_state(obj, LV_STATE_DISABLED)) return false;
 800794a:	2180      	movs	r1, #128	; 0x80
 800794c:	0020      	movs	r0, r4
 800794e:	f7fd fb87 	bl	8005060 <lv_obj_has_state>
 8007952:	2800      	cmp	r0, #0
 8007954:	d1f5      	bne.n	8007942 <lv_obj_hit_test+0x12>
    dest->x1 = src->x1;
 8007956:	2310      	movs	r3, #16
 8007958:	5ee0      	ldrsh	r0, [r4, r3]
 800795a:	466b      	mov	r3, sp
 800795c:	8018      	strh	r0, [r3, #0]
    dest->y1 = src->y1;
 800795e:	2312      	movs	r3, #18
 8007960:	5ee2      	ldrsh	r2, [r4, r3]
 8007962:	466b      	mov	r3, sp
 8007964:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8007966:	2314      	movs	r3, #20
 8007968:	5ee1      	ldrsh	r1, [r4, r3]
 800796a:	466b      	mov	r3, sp
 800796c:	8099      	strh	r1, [r3, #4]
    dest->y2 = src->y2;
 800796e:	2316      	movs	r3, #22
 8007970:	5ee5      	ldrsh	r5, [r4, r3]
 8007972:	466b      	mov	r3, sp
 8007974:	80dd      	strh	r5, [r3, #6]
    if(obj->spec_attr) {
 8007976:	68a3      	ldr	r3, [r4, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d009      	beq.n	8007990 <lv_obj_hit_test+0x60>
        area->x1 -= obj->spec_attr->ext_click_pad;
 800797c:	466f      	mov	r7, sp
 800797e:	8a9b      	ldrh	r3, [r3, #20]
 8007980:	1ac0      	subs	r0, r0, r3
        area->x2 += obj->spec_attr->ext_click_pad;
 8007982:	1859      	adds	r1, r3, r1
        area->y1 -= obj->spec_attr->ext_click_pad;
 8007984:	1ad2      	subs	r2, r2, r3
        area->y2 += obj->spec_attr->ext_click_pad;
 8007986:	195b      	adds	r3, r3, r5
        area->x1 -= obj->spec_attr->ext_click_pad;
 8007988:	8038      	strh	r0, [r7, #0]
        area->x2 += obj->spec_attr->ext_click_pad;
 800798a:	80b9      	strh	r1, [r7, #4]
        area->y1 -= obj->spec_attr->ext_click_pad;
 800798c:	807a      	strh	r2, [r7, #2]
        area->y2 += obj->spec_attr->ext_click_pad;
 800798e:	80fb      	strh	r3, [r7, #6]
    bool res = _lv_area_is_point_on(&a, point, 0);
 8007990:	2200      	movs	r2, #0
 8007992:	0031      	movs	r1, r6
 8007994:	4668      	mov	r0, sp
 8007996:	f009 fd5f 	bl	8011458 <_lv_area_is_point_on>
 800799a:	1e05      	subs	r5, r0, #0
    if(res == false) return false;
 800799c:	d0d1      	beq.n	8007942 <lv_obj_hit_test+0x12>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 800799e:	2180      	movs	r1, #128	; 0x80
 80079a0:	0020      	movs	r0, r4
 80079a2:	0249      	lsls	r1, r1, #9
 80079a4:	f7fd fb4c 	bl	8005040 <lv_obj_has_flag>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d0cb      	beq.n	8007944 <lv_obj_hit_test+0x14>
        hit_info.res = true;
 80079ac:	2301      	movs	r3, #1
 80079ae:	466a      	mov	r2, sp
        lv_event_send(obj, LV_EVENT_HIT_TEST, &hit_info);
 80079b0:	2111      	movs	r1, #17
        hit_info.res = true;
 80079b2:	7313      	strb	r3, [r2, #12]
        lv_event_send(obj, LV_EVENT_HIT_TEST, &hit_info);
 80079b4:	0020      	movs	r0, r4
 80079b6:	aa02      	add	r2, sp, #8
        hit_info.point = point;
 80079b8:	9602      	str	r6, [sp, #8]
        lv_event_send(obj, LV_EVENT_HIT_TEST, &hit_info);
 80079ba:	f7fa f9cf 	bl	8001d5c <lv_event_send>
        return hit_info.res;
 80079be:	466b      	mov	r3, sp
 80079c0:	7b1d      	ldrb	r5, [r3, #12]
 80079c2:	e7bf      	b.n	8007944 <lv_obj_hit_test+0x14>

080079c4 <scroll_anim_ready_cb>:
{
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
}

static void scroll_anim_ready_cb(lv_anim_t * a)
{
 80079c4:	b510      	push	{r4, lr}
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 80079c6:	2200      	movs	r2, #0
 80079c8:	210a      	movs	r1, #10
 80079ca:	6800      	ldr	r0, [r0, #0]
 80079cc:	f7fa f9c6 	bl	8001d5c <lv_event_send>
}
 80079d0:	bd10      	pop	{r4, pc}
 80079d2:	46c0      	nop			; (mov r8, r8)

080079d4 <lv_obj_get_scroll_left.part.0>:
lv_coord_t lv_obj_get_scroll_left(lv_obj_t * obj)
 80079d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d6:	46de      	mov	lr, fp
 80079d8:	464e      	mov	r6, r9
 80079da:	4657      	mov	r7, sl
 80079dc:	4645      	mov	r5, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80079de:	2213      	movs	r2, #19
 80079e0:	b5e0      	push	{r5, r6, r7, lr}
 80079e2:	2100      	movs	r1, #0
 80079e4:	0006      	movs	r6, r0
 80079e6:	f001 fe83 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80079ea:	2212      	movs	r2, #18
 80079ec:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80079ee:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80079f0:	0030      	movs	r0, r6
 80079f2:	f001 fe7d 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80079f6:	2232      	movs	r2, #50	; 0x32
 80079f8:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80079fa:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80079fc:	0030      	movs	r0, r6
 80079fe:	f001 fe77 	bl	80096f0 <lv_obj_get_style_prop>
 8007a02:	4680      	mov	r8, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8007a04:	0030      	movs	r0, r6
 8007a06:	f003 fab5 	bl	800af74 <lv_obj_get_child_cnt>
 8007a0a:	4683      	mov	fp, r0
    for(i = 0; i < child_cnt; i++) {
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	d040      	beq.n	8007a92 <lv_obj_get_scroll_left.part.0+0xbe>
 8007a10:	2400      	movs	r4, #0
    lv_coord_t x1 = LV_COORD_MAX;
 8007a12:	4f23      	ldr	r7, [pc, #140]	; (8007aa0 <lv_obj_get_scroll_left.part.0+0xcc>)
        lv_obj_t * child = obj->spec_attr->children[i];
 8007a14:	68b3      	ldr	r3, [r6, #8]
 8007a16:	00a2      	lsls	r2, r4, #2
 8007a18:	681b      	ldr	r3, [r3, #0]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8007a1a:	4922      	ldr	r1, [pc, #136]	; (8007aa4 <lv_obj_get_scroll_left.part.0+0xd0>)
        lv_obj_t * child = obj->spec_attr->children[i];
 8007a1c:	58d5      	ldr	r5, [r2, r3]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8007a1e:	0028      	movs	r0, r5
 8007a20:	f7fd fb16 	bl	8005050 <lv_obj_has_flag_any>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d106      	bne.n	8007a36 <lv_obj_get_scroll_left.part.0+0x62>
        x1 = LV_MIN(x1, child->coords.x1);
 8007a28:	8a2b      	ldrh	r3, [r5, #16]
 8007a2a:	1c1a      	adds	r2, r3, #0
 8007a2c:	b21b      	sxth	r3, r3
 8007a2e:	42bb      	cmp	r3, r7
 8007a30:	dd00      	ble.n	8007a34 <lv_obj_get_scroll_left.part.0+0x60>
 8007a32:	1c3a      	adds	r2, r7, #0
 8007a34:	b217      	sxth	r7, r2
    for(i = 0; i < child_cnt; i++) {
 8007a36:	3401      	adds	r4, #1
 8007a38:	45a3      	cmp	fp, r4
 8007a3a:	d1eb      	bne.n	8007a14 <lv_obj_get_scroll_left.part.0+0x40>
    if(x1 != LV_COORD_MAX) {
 8007a3c:	4b18      	ldr	r3, [pc, #96]	; (8007aa0 <lv_obj_get_scroll_left.part.0+0xcc>)
 8007a3e:	429f      	cmp	r7, r3
 8007a40:	d027      	beq.n	8007a92 <lv_obj_get_scroll_left.part.0+0xbe>
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8007a42:	464b      	mov	r3, r9
 8007a44:	b29c      	uxth	r4, r3
 8007a46:	4643      	mov	r3, r8
 8007a48:	8a32      	ldrh	r2, [r6, #16]
 8007a4a:	b29d      	uxth	r5, r3
 8007a4c:	1963      	adds	r3, r4, r5
 8007a4e:	189b      	adds	r3, r3, r2
 8007a50:	1bdf      	subs	r7, r3, r7
 8007a52:	b23f      	sxth	r7, r7
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8007a54:	0030      	movs	r0, r6
 8007a56:	f7fe fa5b 	bl	8005f10 <lv_obj_get_self_width>
 8007a5a:	4680      	mov	r8, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8007a5c:	0030      	movs	r0, r6
 8007a5e:	f7fe f9d1 	bl	8005e04 <lv_obj_get_width>
 8007a62:	006d      	lsls	r5, r5, #1
 8007a64:	4454      	add	r4, sl
 8007a66:	192d      	adds	r5, r5, r4
 8007a68:	4445      	add	r5, r8
    if(obj->spec_attr == NULL) return 0;
 8007a6a:	68b2      	ldr	r2, [r6, #8]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8007a6c:	1a2b      	subs	r3, r5, r0
 8007a6e:	b29b      	uxth	r3, r3
    if(obj->spec_attr == NULL) return 0;
 8007a70:	2a00      	cmp	r2, #0
 8007a72:	d002      	beq.n	8007a7a <lv_obj_get_scroll_left.part.0+0xa6>
    self_w += lv_obj_get_scroll_x(obj);
 8007a74:	8a12      	ldrh	r2, [r2, #16]
 8007a76:	1a9b      	subs	r3, r3, r2
 8007a78:	b29b      	uxth	r3, r3
    return LV_MAX(child_res, self_w);
 8007a7a:	1c18      	adds	r0, r3, #0
 8007a7c:	b21b      	sxth	r3, r3
 8007a7e:	42bb      	cmp	r3, r7
 8007a80:	da00      	bge.n	8007a84 <lv_obj_get_scroll_left.part.0+0xb0>
 8007a82:	1c38      	adds	r0, r7, #0
}
 8007a84:	b200      	sxth	r0, r0
 8007a86:	bcf0      	pop	{r4, r5, r6, r7}
 8007a88:	46bb      	mov	fp, r7
 8007a8a:	46b2      	mov	sl, r6
 8007a8c:	46a9      	mov	r9, r5
 8007a8e:	46a0      	mov	r8, r4
 8007a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8007a92:	464b      	mov	r3, r9
 8007a94:	b29c      	uxth	r4, r3
 8007a96:	4643      	mov	r3, r8
        child_res = LV_COORD_MIN;
 8007a98:	4f03      	ldr	r7, [pc, #12]	; (8007aa8 <lv_obj_get_scroll_left.part.0+0xd4>)
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8007a9a:	b29d      	uxth	r5, r3
 8007a9c:	e7da      	b.n	8007a54 <lv_obj_get_scroll_left.part.0+0x80>
 8007a9e:	46c0      	nop			; (mov r8, r8)
 8007aa0:	00001fff 	.word	0x00001fff
 8007aa4:	00040001 	.word	0x00040001
 8007aa8:	ffffe001 	.word	0xffffe001

08007aac <lv_obj_get_scroll_right.part.0>:
lv_coord_t lv_obj_get_scroll_right(lv_obj_t * obj)
 8007aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aae:	46ce      	mov	lr, r9
 8007ab0:	4647      	mov	r7, r8
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	0006      	movs	r6, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8007ab6:	f003 fa5d 	bl	800af74 <lv_obj_get_child_cnt>
 8007aba:	4680      	mov	r8, r0
    for(i = 0; i < child_cnt; i++) {
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d050      	beq.n	8007b62 <lv_obj_get_scroll_right.part.0+0xb6>
 8007ac0:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8007ac2:	4f32      	ldr	r7, [pc, #200]	; (8007b8c <lv_obj_get_scroll_right.part.0+0xe0>)
        lv_obj_t * child = obj->spec_attr->children[i];
 8007ac4:	68b3      	ldr	r3, [r6, #8]
 8007ac6:	00a2      	lsls	r2, r4, #2
 8007ac8:	681b      	ldr	r3, [r3, #0]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8007aca:	4931      	ldr	r1, [pc, #196]	; (8007b90 <lv_obj_get_scroll_right.part.0+0xe4>)
        lv_obj_t * child = obj->spec_attr->children[i];
 8007acc:	58d5      	ldr	r5, [r2, r3]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8007ace:	0028      	movs	r0, r5
 8007ad0:	f7fd fabe 	bl	8005050 <lv_obj_has_flag_any>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d106      	bne.n	8007ae6 <lv_obj_get_scroll_right.part.0+0x3a>
        child_res = LV_MAX(child_res, child->coords.x2);
 8007ad8:	8aab      	ldrh	r3, [r5, #20]
 8007ada:	1c1a      	adds	r2, r3, #0
 8007adc:	b21b      	sxth	r3, r3
 8007ade:	42bb      	cmp	r3, r7
 8007ae0:	da00      	bge.n	8007ae4 <lv_obj_get_scroll_right.part.0+0x38>
 8007ae2:	1c3a      	adds	r2, r7, #0
 8007ae4:	b217      	sxth	r7, r2
    for(i = 0; i < child_cnt; i++) {
 8007ae6:	3401      	adds	r4, #1
 8007ae8:	45a0      	cmp	r8, r4
 8007aea:	d1eb      	bne.n	8007ac4 <lv_obj_get_scroll_right.part.0+0x18>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8007aec:	2213      	movs	r2, #19
 8007aee:	2100      	movs	r1, #0
 8007af0:	0030      	movs	r0, r6
 8007af2:	f001 fdfd 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007af6:	2212      	movs	r2, #18
 8007af8:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8007afa:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007afc:	0030      	movs	r0, r6
 8007afe:	f001 fdf7 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007b02:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007b04:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007b06:	2100      	movs	r1, #0
 8007b08:	0030      	movs	r0, r6
 8007b0a:	f001 fdf1 	bl	80096f0 <lv_obj_get_style_prop>
    if(child_res != LV_COORD_MIN) {
 8007b0e:	4b1f      	ldr	r3, [pc, #124]	; (8007b8c <lv_obj_get_scroll_right.part.0+0xe0>)
 8007b10:	429f      	cmp	r7, r3
 8007b12:	d023      	beq.n	8007b5c <lv_obj_get_scroll_right.part.0+0xb0>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 8007b14:	8ab2      	ldrh	r2, [r6, #20]
 8007b16:	b2ad      	uxth	r5, r5
 8007b18:	b284      	uxth	r4, r0
 8007b1a:	192b      	adds	r3, r5, r4
 8007b1c:	1a9b      	subs	r3, r3, r2
 8007b1e:	19df      	adds	r7, r3, r7
 8007b20:	b23f      	sxth	r7, r7
    self_w = lv_obj_get_self_width(obj);
 8007b22:	0030      	movs	r0, r6
 8007b24:	f7fe f9f4 	bl	8005f10 <lv_obj_get_self_width>
 8007b28:	4680      	mov	r8, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8007b2a:	0030      	movs	r0, r6
 8007b2c:	f7fe f96a 	bl	8005e04 <lv_obj_get_width>
 8007b30:	0063      	lsls	r3, r4, #1
 8007b32:	444b      	add	r3, r9
 8007b34:	18eb      	adds	r3, r5, r3
 8007b36:	4443      	add	r3, r8
    if(obj->spec_attr == NULL) return 0;
 8007b38:	68b2      	ldr	r2, [r6, #8]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8007b3a:	1a1b      	subs	r3, r3, r0
 8007b3c:	b29b      	uxth	r3, r3
    if(obj->spec_attr == NULL) return 0;
 8007b3e:	2a00      	cmp	r2, #0
 8007b40:	d002      	beq.n	8007b48 <lv_obj_get_scroll_right.part.0+0x9c>
    self_w -= lv_obj_get_scroll_x(obj);
 8007b42:	8a10      	ldrh	r0, [r2, #16]
 8007b44:	181b      	adds	r3, r3, r0
 8007b46:	b29b      	uxth	r3, r3
    return LV_MAX(child_res, self_w);
 8007b48:	1c18      	adds	r0, r3, #0
 8007b4a:	b21b      	sxth	r3, r3
 8007b4c:	42bb      	cmp	r3, r7
 8007b4e:	da00      	bge.n	8007b52 <lv_obj_get_scroll_right.part.0+0xa6>
 8007b50:	1c38      	adds	r0, r7, #0
}
 8007b52:	b200      	sxth	r0, r0
 8007b54:	bcc0      	pop	{r6, r7}
 8007b56:	46b9      	mov	r9, r7
 8007b58:	46b0      	mov	r8, r6
 8007b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8007b5c:	b284      	uxth	r4, r0
 8007b5e:	b2ad      	uxth	r5, r5
 8007b60:	e7df      	b.n	8007b22 <lv_obj_get_scroll_right.part.0+0x76>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8007b62:	2213      	movs	r2, #19
 8007b64:	2100      	movs	r1, #0
 8007b66:	0030      	movs	r0, r6
 8007b68:	f001 fdc2 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007b6c:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8007b6e:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007b70:	2100      	movs	r1, #0
 8007b72:	0030      	movs	r0, r6
 8007b74:	f001 fdbc 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007b78:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007b7a:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	0030      	movs	r0, r6
 8007b80:	f001 fdb6 	bl	80096f0 <lv_obj_get_style_prop>
 8007b84:	4f01      	ldr	r7, [pc, #4]	; (8007b8c <lv_obj_get_scroll_right.part.0+0xe0>)
 8007b86:	b284      	uxth	r4, r0
 8007b88:	b2ad      	uxth	r5, r5
 8007b8a:	e7ca      	b.n	8007b22 <lv_obj_get_scroll_right.part.0+0x76>
 8007b8c:	ffffe001 	.word	0xffffe001
 8007b90:	00040001 	.word	0x00040001

08007b94 <scroll_x_anim>:
    if(obj->spec_attr == NULL) return 0;
 8007b94:	6883      	ldr	r3, [r0, #8]
{
 8007b96:	b570      	push	{r4, r5, r6, lr}
 8007b98:	000a      	movs	r2, r1
 8007b9a:	0005      	movs	r5, r0
    if(obj->spec_attr == NULL) return 0;
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d020      	beq.n	8007be2 <scroll_x_anim+0x4e>
    return -obj->spec_attr->scroll.x;
 8007ba0:	8a1b      	ldrh	r3, [r3, #16]
 8007ba2:	425b      	negs	r3, r3
 8007ba4:	b299      	uxth	r1, r3
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 8007ba6:	1889      	adds	r1, r1, r2
 8007ba8:	b20c      	sxth	r4, r1
 8007baa:	b28e      	uxth	r6, r1
    if(x == 0 && y == 0) return LV_RES_OK;
 8007bac:	2c00      	cmp	r4, #0
 8007bae:	d100      	bne.n	8007bb2 <scroll_x_anim+0x1e>
}
 8007bb0:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_allocate_spec_attr(obj);
 8007bb2:	0028      	movs	r0, r5
 8007bb4:	f7fd fa60 	bl	8005078 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll.x += x;
 8007bb8:	68ab      	ldr	r3, [r5, #8]
    lv_obj_move_children_by(obj, x, y, true);
 8007bba:	0021      	movs	r1, r4
    obj->spec_attr->scroll.x += x;
 8007bbc:	8a1a      	ldrh	r2, [r3, #16]
    lv_obj_move_children_by(obj, x, y, true);
 8007bbe:	0028      	movs	r0, r5
    obj->spec_attr->scroll.x += x;
 8007bc0:	18b6      	adds	r6, r6, r2
 8007bc2:	821e      	strh	r6, [r3, #16]
    lv_obj_move_children_by(obj, x, y, true);
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	f7fe f9ee 	bl	8005fa8 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 8007bcc:	2200      	movs	r2, #0
 8007bce:	210b      	movs	r1, #11
 8007bd0:	0028      	movs	r0, r5
 8007bd2:	f7fa f8c3 	bl	8001d5c <lv_event_send>
    if(res != LV_RES_OK) return res;
 8007bd6:	2801      	cmp	r0, #1
 8007bd8:	d1ea      	bne.n	8007bb0 <scroll_x_anim+0x1c>
    lv_obj_invalidate(obj);
 8007bda:	0028      	movs	r0, r5
 8007bdc:	f7fe fcb0 	bl	8006540 <lv_obj_invalidate>
}
 8007be0:	e7e6      	b.n	8007bb0 <scroll_x_anim+0x1c>
 8007be2:	2100      	movs	r1, #0
 8007be4:	e7df      	b.n	8007ba6 <scroll_x_anim+0x12>
 8007be6:	46c0      	nop			; (mov r8, r8)

08007be8 <scroll_y_anim>:
    if(obj->spec_attr == NULL) return 0;
 8007be8:	6883      	ldr	r3, [r0, #8]
{
 8007bea:	b570      	push	{r4, r5, r6, lr}
 8007bec:	000a      	movs	r2, r1
 8007bee:	0005      	movs	r5, r0
    if(obj->spec_attr == NULL) return 0;
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d020      	beq.n	8007c36 <scroll_y_anim+0x4e>
    return -obj->spec_attr->scroll.y;
 8007bf4:	8a5b      	ldrh	r3, [r3, #18]
 8007bf6:	425b      	negs	r3, r3
 8007bf8:	b299      	uxth	r1, r3
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 8007bfa:	1889      	adds	r1, r1, r2
 8007bfc:	b20c      	sxth	r4, r1
 8007bfe:	b28e      	uxth	r6, r1
    if(x == 0 && y == 0) return LV_RES_OK;
 8007c00:	2c00      	cmp	r4, #0
 8007c02:	d100      	bne.n	8007c06 <scroll_y_anim+0x1e>
}
 8007c04:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_allocate_spec_attr(obj);
 8007c06:	0028      	movs	r0, r5
 8007c08:	f7fd fa36 	bl	8005078 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll.x += x;
 8007c0c:	68ab      	ldr	r3, [r5, #8]
    lv_obj_move_children_by(obj, x, y, true);
 8007c0e:	2100      	movs	r1, #0
    obj->spec_attr->scroll.y += y;
 8007c10:	8a5a      	ldrh	r2, [r3, #18]
    lv_obj_move_children_by(obj, x, y, true);
 8007c12:	0028      	movs	r0, r5
    obj->spec_attr->scroll.y += y;
 8007c14:	18b6      	adds	r6, r6, r2
 8007c16:	825e      	strh	r6, [r3, #18]
    lv_obj_move_children_by(obj, x, y, true);
 8007c18:	0022      	movs	r2, r4
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	f7fe f9c4 	bl	8005fa8 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 8007c20:	2200      	movs	r2, #0
 8007c22:	210b      	movs	r1, #11
 8007c24:	0028      	movs	r0, r5
 8007c26:	f7fa f899 	bl	8001d5c <lv_event_send>
    if(res != LV_RES_OK) return res;
 8007c2a:	2801      	cmp	r0, #1
 8007c2c:	d1ea      	bne.n	8007c04 <scroll_y_anim+0x1c>
    lv_obj_invalidate(obj);
 8007c2e:	0028      	movs	r0, r5
 8007c30:	f7fe fc86 	bl	8006540 <lv_obj_invalidate>
}
 8007c34:	e7e6      	b.n	8007c04 <scroll_y_anim+0x1c>
 8007c36:	2100      	movs	r1, #0
 8007c38:	e7df      	b.n	8007bfa <scroll_y_anim+0x12>
 8007c3a:	46c0      	nop			; (mov r8, r8)

08007c3c <lv_obj_set_scrollbar_mode>:
{
 8007c3c:	b570      	push	{r4, r5, r6, lr}
 8007c3e:	0005      	movs	r5, r0
 8007c40:	000c      	movs	r4, r1
    lv_obj_allocate_spec_attr(obj);
 8007c42:	f7fd fa19 	bl	8005078 <lv_obj_allocate_spec_attr>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 8007c46:	68aa      	ldr	r2, [r5, #8]
 8007c48:	7e11      	ldrb	r1, [r2, #24]
 8007c4a:	078b      	lsls	r3, r1, #30
 8007c4c:	0f9b      	lsrs	r3, r3, #30
 8007c4e:	42a3      	cmp	r3, r4
 8007c50:	d007      	beq.n	8007c62 <lv_obj_set_scrollbar_mode+0x26>
    obj->spec_attr->scrollbar_mode = mode;
 8007c52:	2303      	movs	r3, #3
 8007c54:	401c      	ands	r4, r3
 8007c56:	4399      	bics	r1, r3
 8007c58:	430c      	orrs	r4, r1
    lv_obj_invalidate(obj);
 8007c5a:	0028      	movs	r0, r5
    obj->spec_attr->scrollbar_mode = mode;
 8007c5c:	7614      	strb	r4, [r2, #24]
    lv_obj_invalidate(obj);
 8007c5e:	f7fe fc6f 	bl	8006540 <lv_obj_invalidate>
}
 8007c62:	bd70      	pop	{r4, r5, r6, pc}

08007c64 <lv_obj_get_scrollbar_mode>:
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 8007c64:	6883      	ldr	r3, [r0, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <lv_obj_get_scrollbar_mode+0xe>
 8007c6a:	7e18      	ldrb	r0, [r3, #24]
 8007c6c:	0780      	lsls	r0, r0, #30
 8007c6e:	0f80      	lsrs	r0, r0, #30
}
 8007c70:	4770      	bx	lr
    else return LV_SCROLLBAR_MODE_AUTO;
 8007c72:	2003      	movs	r0, #3
 8007c74:	e7fc      	b.n	8007c70 <lv_obj_get_scrollbar_mode+0xc>
 8007c76:	46c0      	nop			; (mov r8, r8)

08007c78 <lv_obj_get_scroll_dir>:
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 8007c78:	6883      	ldr	r3, [r0, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <lv_obj_get_scroll_dir+0xe>
 8007c7e:	7e58      	ldrb	r0, [r3, #25]
 8007c80:	0700      	lsls	r0, r0, #28
 8007c82:	0f00      	lsrs	r0, r0, #28
}
 8007c84:	4770      	bx	lr
    else return LV_DIR_ALL;
 8007c86:	200f      	movs	r0, #15
 8007c88:	e7fc      	b.n	8007c84 <lv_obj_get_scroll_dir+0xc>
 8007c8a:	46c0      	nop			; (mov r8, r8)

08007c8c <lv_obj_get_scroll_snap_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 8007c8c:	6883      	ldr	r3, [r0, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <lv_obj_get_scroll_snap_x+0xe>
 8007c92:	7e18      	ldrb	r0, [r3, #24]
 8007c94:	0700      	lsls	r0, r0, #28
 8007c96:	0f80      	lsrs	r0, r0, #30
}
 8007c98:	4770      	bx	lr
    else return LV_SCROLL_SNAP_NONE;
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	e7fc      	b.n	8007c98 <lv_obj_get_scroll_snap_x+0xc>
 8007c9e:	46c0      	nop			; (mov r8, r8)

08007ca0 <lv_obj_get_scroll_snap_y>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 8007ca0:	6883      	ldr	r3, [r0, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <lv_obj_get_scroll_snap_y+0xe>
 8007ca6:	7e18      	ldrb	r0, [r3, #24]
 8007ca8:	0680      	lsls	r0, r0, #26
 8007caa:	0f80      	lsrs	r0, r0, #30
}
 8007cac:	4770      	bx	lr
    else return LV_SCROLL_SNAP_NONE;
 8007cae:	2000      	movs	r0, #0
 8007cb0:	e7fc      	b.n	8007cac <lv_obj_get_scroll_snap_y+0xc>
 8007cb2:	46c0      	nop			; (mov r8, r8)

08007cb4 <lv_obj_get_scroll_x>:
    if(obj->spec_attr == NULL) return 0;
 8007cb4:	6883      	ldr	r3, [r0, #8]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <lv_obj_get_scroll_x+0xe>
    return -obj->spec_attr->scroll.x;
 8007cba:	8a18      	ldrh	r0, [r3, #16]
 8007cbc:	4240      	negs	r0, r0
 8007cbe:	b200      	sxth	r0, r0
}
 8007cc0:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	e7fc      	b.n	8007cc0 <lv_obj_get_scroll_x+0xc>
 8007cc6:	46c0      	nop			; (mov r8, r8)

08007cc8 <lv_obj_get_scroll_y>:
    if(obj->spec_attr == NULL) return 0;
 8007cc8:	6883      	ldr	r3, [r0, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <lv_obj_get_scroll_y+0xe>
    return -obj->spec_attr->scroll.y;
 8007cce:	8a58      	ldrh	r0, [r3, #18]
 8007cd0:	4240      	negs	r0, r0
 8007cd2:	b200      	sxth	r0, r0
}
 8007cd4:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	e7fc      	b.n	8007cd4 <lv_obj_get_scroll_y+0xc>
 8007cda:	46c0      	nop			; (mov r8, r8)

08007cdc <lv_obj_get_scroll_top>:
 8007cdc:	6883      	ldr	r3, [r0, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <lv_obj_get_scroll_top+0xe>
 8007ce2:	8a58      	ldrh	r0, [r3, #18]
 8007ce4:	4240      	negs	r0, r0
 8007ce6:	b200      	sxth	r0, r0
 8007ce8:	4770      	bx	lr
 8007cea:	2000      	movs	r0, #0
 8007cec:	e7fc      	b.n	8007ce8 <lv_obj_get_scroll_top+0xc>
 8007cee:	46c0      	nop			; (mov r8, r8)

08007cf0 <lv_obj_get_scroll_bottom>:
{
 8007cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf2:	46ce      	mov	lr, r9
 8007cf4:	4647      	mov	r7, r8
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	0006      	movs	r6, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8007cfa:	f003 f93b 	bl	800af74 <lv_obj_get_child_cnt>
 8007cfe:	4680      	mov	r8, r0
    for(i = 0; i < child_cnt; i++) {
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d050      	beq.n	8007da6 <lv_obj_get_scroll_bottom+0xb6>
 8007d04:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8007d06:	4f32      	ldr	r7, [pc, #200]	; (8007dd0 <lv_obj_get_scroll_bottom+0xe0>)
        lv_obj_t * child = obj->spec_attr->children[i];
 8007d08:	68b3      	ldr	r3, [r6, #8]
 8007d0a:	00a2      	lsls	r2, r4, #2
 8007d0c:	681b      	ldr	r3, [r3, #0]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8007d0e:	4931      	ldr	r1, [pc, #196]	; (8007dd4 <lv_obj_get_scroll_bottom+0xe4>)
        lv_obj_t * child = obj->spec_attr->children[i];
 8007d10:	58d5      	ldr	r5, [r2, r3]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8007d12:	0028      	movs	r0, r5
 8007d14:	f7fd f99c 	bl	8005050 <lv_obj_has_flag_any>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d106      	bne.n	8007d2a <lv_obj_get_scroll_bottom+0x3a>
        child_res = LV_MAX(child_res, child->coords.y2);
 8007d1c:	8aeb      	ldrh	r3, [r5, #22]
 8007d1e:	1c1a      	adds	r2, r3, #0
 8007d20:	b21b      	sxth	r3, r3
 8007d22:	42bb      	cmp	r3, r7
 8007d24:	da00      	bge.n	8007d28 <lv_obj_get_scroll_bottom+0x38>
 8007d26:	1c3a      	adds	r2, r7, #0
 8007d28:	b217      	sxth	r7, r2
    for(i = 0; i < child_cnt; i++) {
 8007d2a:	3401      	adds	r4, #1
 8007d2c:	45a0      	cmp	r8, r4
 8007d2e:	d1eb      	bne.n	8007d08 <lv_obj_get_scroll_bottom+0x18>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007d30:	2210      	movs	r2, #16
 8007d32:	2100      	movs	r1, #0
 8007d34:	0030      	movs	r0, r6
 8007d36:	f001 fcdb 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007d3a:	2211      	movs	r2, #17
 8007d3c:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007d3e:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007d40:	0030      	movs	r0, r6
 8007d42:	f001 fcd5 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007d46:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007d48:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	0030      	movs	r0, r6
 8007d4e:	f001 fccf 	bl	80096f0 <lv_obj_get_style_prop>
    if(child_res != LV_COORD_MIN) {
 8007d52:	4b1f      	ldr	r3, [pc, #124]	; (8007dd0 <lv_obj_get_scroll_bottom+0xe0>)
 8007d54:	429f      	cmp	r7, r3
 8007d56:	d023      	beq.n	8007da0 <lv_obj_get_scroll_bottom+0xb0>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 8007d58:	8af2      	ldrh	r2, [r6, #22]
 8007d5a:	b2ad      	uxth	r5, r5
 8007d5c:	b284      	uxth	r4, r0
 8007d5e:	192b      	adds	r3, r5, r4
 8007d60:	1a9b      	subs	r3, r3, r2
 8007d62:	19df      	adds	r7, r3, r7
 8007d64:	b23f      	sxth	r7, r7
    lv_coord_t self_h = lv_obj_get_self_height(obj);
 8007d66:	0030      	movs	r0, r6
 8007d68:	f7fe f8e2 	bl	8005f30 <lv_obj_get_self_height>
 8007d6c:	4680      	mov	r8, r0
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8007d6e:	0030      	movs	r0, r6
 8007d70:	f7fe f850 	bl	8005e14 <lv_obj_get_height>
 8007d74:	0063      	lsls	r3, r4, #1
 8007d76:	444b      	add	r3, r9
 8007d78:	18eb      	adds	r3, r5, r3
 8007d7a:	4443      	add	r3, r8
    if(obj->spec_attr == NULL) return 0;
 8007d7c:	68b2      	ldr	r2, [r6, #8]
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8007d7e:	1a1b      	subs	r3, r3, r0
 8007d80:	b29b      	uxth	r3, r3
    if(obj->spec_attr == NULL) return 0;
 8007d82:	2a00      	cmp	r2, #0
 8007d84:	d002      	beq.n	8007d8c <lv_obj_get_scroll_bottom+0x9c>
    self_h -= lv_obj_get_scroll_y(obj);
 8007d86:	8a50      	ldrh	r0, [r2, #18]
 8007d88:	181b      	adds	r3, r3, r0
 8007d8a:	b29b      	uxth	r3, r3
    return LV_MAX(child_res, self_h);
 8007d8c:	1c18      	adds	r0, r3, #0
 8007d8e:	b21b      	sxth	r3, r3
 8007d90:	42bb      	cmp	r3, r7
 8007d92:	da00      	bge.n	8007d96 <lv_obj_get_scroll_bottom+0xa6>
 8007d94:	1c38      	adds	r0, r7, #0
 8007d96:	b200      	sxth	r0, r0
}
 8007d98:	bcc0      	pop	{r6, r7}
 8007d9a:	46b9      	mov	r9, r7
 8007d9c:	46b0      	mov	r8, r6
 8007d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8007da0:	b284      	uxth	r4, r0
 8007da2:	b2ad      	uxth	r5, r5
 8007da4:	e7df      	b.n	8007d66 <lv_obj_get_scroll_bottom+0x76>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007da6:	2210      	movs	r2, #16
 8007da8:	2100      	movs	r1, #0
 8007daa:	0030      	movs	r0, r6
 8007dac:	f001 fca0 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007db0:	2211      	movs	r2, #17
 8007db2:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007db4:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007db6:	0030      	movs	r0, r6
 8007db8:	f001 fc9a 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007dbc:	2232      	movs	r2, #50	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007dbe:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	0030      	movs	r0, r6
 8007dc4:	f001 fc94 	bl	80096f0 <lv_obj_get_style_prop>
 8007dc8:	4f01      	ldr	r7, [pc, #4]	; (8007dd0 <lv_obj_get_scroll_bottom+0xe0>)
 8007dca:	b284      	uxth	r4, r0
 8007dcc:	b2ad      	uxth	r5, r5
 8007dce:	e7ca      	b.n	8007d66 <lv_obj_get_scroll_bottom+0x76>
 8007dd0:	ffffe001 	.word	0xffffe001
 8007dd4:	00040001 	.word	0x00040001

08007dd8 <lv_obj_get_scrollbar_area.part.0>:
void lv_obj_get_scrollbar_area(lv_obj_t * obj, lv_area_t * hor_area, lv_area_t * ver_area)
 8007dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dda:	46de      	mov	lr, fp
 8007ddc:	4645      	mov	r5, r8
 8007dde:	4657      	mov	r7, sl
 8007de0:	464e      	mov	r6, r9
 8007de2:	b5e0      	push	{r5, r6, r7, lr}
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 8007de4:	6883      	ldr	r3, [r0, #8]
void lv_obj_get_scrollbar_area(lv_obj_t * obj, lv_area_t * hor_area, lv_area_t * ver_area)
 8007de6:	0004      	movs	r4, r0
 8007de8:	468b      	mov	fp, r1
 8007dea:	0015      	movs	r5, r2
 8007dec:	b091      	sub	sp, #68	; 0x44
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d100      	bne.n	8007df4 <lv_obj_get_scrollbar_area.part.0+0x1c>
 8007df2:	e206      	b.n	8008202 <lv_obj_get_scrollbar_area.part.0+0x42a>
 8007df4:	7e1b      	ldrb	r3, [r3, #24]
 8007df6:	079b      	lsls	r3, r3, #30
 8007df8:	0f9a      	lsrs	r2, r3, #30
 8007dfa:	4692      	mov	sl, r2
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d100      	bne.n	8007e02 <lv_obj_get_scrollbar_area.part.0+0x2a>
 8007e00:	e1be      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8007e02:	2000      	movs	r0, #0
 8007e04:	f008 ff3e 	bl	8010c84 <lv_indev_get_next>
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 8007e08:	4653      	mov	r3, sl
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8007e0a:	0006      	movs	r6, r0
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d10d      	bne.n	8007e2c <lv_obj_get_scrollbar_area.part.0+0x54>
        while(indev) {
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d106      	bne.n	8007e22 <lv_obj_get_scrollbar_area.part.0+0x4a>
 8007e14:	e1b4      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
            indev = lv_indev_get_next(indev);
 8007e16:	0030      	movs	r0, r6
 8007e18:	f008 ff34 	bl	8010c84 <lv_indev_get_next>
 8007e1c:	1e06      	subs	r6, r0, #0
        while(indev) {
 8007e1e:	d100      	bne.n	8007e22 <lv_obj_get_scrollbar_area.part.0+0x4a>
 8007e20:	e1ae      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 8007e22:	0030      	movs	r0, r6
 8007e24:	f7fa fd68 	bl	80028f8 <lv_indev_get_scroll_obj>
 8007e28:	4284      	cmp	r4, r0
 8007e2a:	d1f4      	bne.n	8007e16 <lv_obj_get_scrollbar_area.part.0+0x3e>
    if(obj->spec_attr == NULL) return 0;
 8007e2c:	68a3      	ldr	r3, [r4, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d100      	bne.n	8007e34 <lv_obj_get_scrollbar_area.part.0+0x5c>
 8007e32:	e1f0      	b.n	8008216 <lv_obj_get_scrollbar_area.part.0+0x43e>
    return -obj->spec_attr->scroll.y;
 8007e34:	8a5b      	ldrh	r3, [r3, #18]
 8007e36:	425b      	negs	r3, r3
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	4690      	mov	r8, r2
 8007e3c:	b21f      	sxth	r7, r3
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 8007e3e:	0020      	movs	r0, r4
 8007e40:	f7ff ff56 	bl	8007cf0 <lv_obj_get_scroll_bottom>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8007e44:	2216      	movs	r2, #22
 8007e46:	9001      	str	r0, [sp, #4]
 8007e48:	2100      	movs	r1, #0
 8007e4a:	0020      	movs	r0, r4
 8007e4c:	f001 fc50 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8007e50:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8007e52:	2801      	cmp	r0, #1
 8007e54:	d100      	bne.n	8007e58 <lv_obj_get_scrollbar_area.part.0+0x80>
 8007e56:	e1e2      	b.n	800821e <lv_obj_get_scrollbar_area.part.0+0x446>
        if(obj->spec_attr == NULL) return 0;
 8007e58:	68a3      	ldr	r3, [r4, #8]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d100      	bne.n	8007e60 <lv_obj_get_scrollbar_area.part.0+0x88>
 8007e5e:	e1c2      	b.n	80081e6 <lv_obj_get_scrollbar_area.part.0+0x40e>
        return -obj->spec_attr->scroll.x;
 8007e60:	8a18      	ldrh	r0, [r3, #16]
 8007e62:	4240      	negs	r0, r0
 8007e64:	b203      	sxth	r3, r0
 8007e66:	9303      	str	r3, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8007e68:	2216      	movs	r2, #22
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	0020      	movs	r0, r4
 8007e6e:	f001 fc3f 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8007e72:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8007e74:	2801      	cmp	r0, #1
 8007e76:	d000      	beq.n	8007e7a <lv_obj_get_scrollbar_area.part.0+0xa2>
 8007e78:	e189      	b.n	800818e <lv_obj_get_scrollbar_area.part.0+0x3b6>
        if(obj->spec_attr == NULL) return 0;
 8007e7a:	68a3      	ldr	r3, [r4, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d100      	bne.n	8007e82 <lv_obj_get_scrollbar_area.part.0+0xaa>
 8007e80:	e1e9      	b.n	8008256 <lv_obj_get_scrollbar_area.part.0+0x47e>
        return obj->spec_attr->scroll.x;
 8007e82:	2110      	movs	r1, #16
 8007e84:	5e5a      	ldrsh	r2, [r3, r1]
 8007e86:	9202      	str	r2, [sp, #8]
    if((dir & LV_DIR_VER) &&
 8007e88:	220c      	movs	r2, #12
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 8007e8a:	7e5b      	ldrb	r3, [r3, #25]
 8007e8c:	071b      	lsls	r3, r3, #28
 8007e8e:	0f1b      	lsrs	r3, r3, #28
    if((dir & LV_DIR_VER) &&
 8007e90:	421a      	tst	r2, r3
 8007e92:	d000      	beq.n	8007e96 <lv_obj_get_scrollbar_area.part.0+0xbe>
 8007e94:	e194      	b.n	80081c0 <lv_obj_get_scrollbar_area.part.0+0x3e8>
    if((dir & LV_DIR_HOR) &&
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d100      	bne.n	8007e9c <lv_obj_get_scrollbar_area.part.0+0xc4>
 8007e9a:	e171      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	4699      	mov	r9, r3
 8007ea0:	4653      	mov	r3, sl
        hor_draw = true;
 8007ea2:	2701      	movs	r7, #1
    if((dir & LV_DIR_HOR) &&
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d000      	beq.n	8007eaa <lv_obj_get_scrollbar_area.part.0+0xd2>
 8007ea8:	e1c9      	b.n	800823e <lv_obj_get_scrollbar_area.part.0+0x466>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8007eaa:	2180      	movs	r1, #128	; 0x80
 8007eac:	2216      	movs	r2, #22
 8007eae:	0249      	lsls	r1, r1, #9
 8007eb0:	0020      	movs	r0, r4
 8007eb2:	f001 fc1d 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007eb6:	2180      	movs	r1, #128	; 0x80
    return (lv_base_dir_t)v.num;
 8007eb8:	b2c3      	uxtb	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007eba:	2210      	movs	r2, #16
 8007ebc:	0249      	lsls	r1, r1, #9
 8007ebe:	0020      	movs	r0, r4
    return (lv_base_dir_t)v.num;
 8007ec0:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007ec2:	f001 fc15 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007ec6:	2180      	movs	r1, #128	; 0x80
 8007ec8:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007eca:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007ecc:	0249      	lsls	r1, r1, #9
 8007ece:	0020      	movs	r0, r4
 8007ed0:	f001 fc0e 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007ed4:	2180      	movs	r1, #128	; 0x80
 8007ed6:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007ed8:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007eda:	0249      	lsls	r1, r1, #9
 8007edc:	0020      	movs	r0, r4
 8007ede:	f001 fc07 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8007ee2:	2180      	movs	r1, #128	; 0x80
 8007ee4:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007ee6:	900a      	str	r0, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8007ee8:	0249      	lsls	r1, r1, #9
 8007eea:	0020      	movs	r0, r4
 8007eec:	f001 fc00 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8007ef0:	2180      	movs	r1, #128	; 0x80
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	0249      	lsls	r1, r1, #9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8007ef6:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8007ef8:	0020      	movs	r0, r4
 8007efa:	f001 fbf9 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007efe:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8007f00:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t obj_h = lv_obj_get_height(obj);
 8007f02:	0020      	movs	r0, r4
 8007f04:	f7fd ff86 	bl	8005e14 <lv_obj_get_height>
 8007f08:	4682      	mov	sl, r0
    lv_coord_t obj_w = lv_obj_get_width(obj);
 8007f0a:	0020      	movs	r0, r4
 8007f0c:	f7fd ff7a 	bl	8005e04 <lv_obj_get_width>
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 8007f10:	464b      	mov	r3, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8007f12:	2180      	movs	r1, #128	; 0x80
 8007f14:	425b      	negs	r3, r3
 8007f16:	4033      	ands	r3, r6
    lv_coord_t obj_w = lv_obj_get_width(obj);
 8007f18:	9005      	str	r0, [sp, #20]
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 8007f1a:	9308      	str	r3, [sp, #32]
 8007f1c:	2221      	movs	r2, #33	; 0x21
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 8007f1e:	427b      	negs	r3, r7
 8007f20:	0020      	movs	r0, r4
 8007f22:	0249      	lsls	r1, r1, #9
 8007f24:	401e      	ands	r6, r3
 8007f26:	f001 fbe3 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007f2a:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 8007f2c:	2801      	cmp	r0, #1
 8007f2e:	d800      	bhi.n	8007f32 <lv_obj_get_scrollbar_area.part.0+0x15a>
 8007f30:	e17a      	b.n	8008228 <lv_obj_get_scrollbar_area.part.0+0x450>
    if(ver_draw && content_h) {
 8007f32:	464b      	mov	r3, r9
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d100      	bne.n	8007f3a <lv_obj_get_scrollbar_area.part.0+0x162>
 8007f38:	e07e      	b.n	8008038 <lv_obj_get_scrollbar_area.part.0+0x260>
    lv_coord_t content_h = obj_h + st + sb;
 8007f3a:	4653      	mov	r3, sl
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	4699      	mov	r9, r3
 8007f40:	9901      	ldr	r1, [sp, #4]
 8007f42:	4441      	add	r1, r8
 8007f44:	b28b      	uxth	r3, r1
 8007f46:	4698      	mov	r8, r3
 8007f48:	4649      	mov	r1, r9
 8007f4a:	4441      	add	r1, r8
 8007f4c:	b209      	sxth	r1, r1
    if(ver_draw && content_h) {
 8007f4e:	2900      	cmp	r1, #0
 8007f50:	d072      	beq.n	8008038 <lv_obj_get_scrollbar_area.part.0+0x260>
        ver_area->y1 = obj->coords.y1;
 8007f52:	2212      	movs	r2, #18
 8007f54:	5ea3      	ldrsh	r3, [r4, r2]
 8007f56:	806b      	strh	r3, [r5, #2]
        ver_area->y2 = obj->coords.y2;
 8007f58:	2216      	movs	r2, #22
 8007f5a:	5ea3      	ldrsh	r3, [r4, r2]
 8007f5c:	80eb      	strh	r3, [r5, #6]
        if(rtl) {
 8007f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d100      	bne.n	8007f66 <lv_obj_get_scrollbar_area.part.0+0x18e>
 8007f64:	e21a      	b.n	800839c <lv_obj_get_scrollbar_area.part.0+0x5c4>
            ver_area->x2 = obj->coords.x2 - right_space;
 8007f66:	9a07      	ldr	r2, [sp, #28]
 8007f68:	8aa3      	ldrh	r3, [r4, #20]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 8007f6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
            ver_area->x2 = obj->coords.x2 - right_space;
 8007f6c:	1a9b      	subs	r3, r3, r2
 8007f6e:	b29a      	uxth	r2, r3
            ver_area->x1 = ver_area->x2 - tickness + 1;
 8007f70:	1a12      	subs	r2, r2, r0
 8007f72:	3201      	adds	r2, #1
            ver_area->x2 = obj->coords.x2 - right_space;
 8007f74:	b21b      	sxth	r3, r3
            ver_area->x1 = ver_area->x2 - tickness + 1;
 8007f76:	b212      	sxth	r2, r2
 8007f78:	80ab      	strh	r3, [r5, #4]
        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 8007f7a:	466b      	mov	r3, sp
 8007f7c:	802a      	strh	r2, [r5, #0]
 8007f7e:	2218      	movs	r2, #24
 8007f80:	5e9b      	ldrsh	r3, [r3, r2]
 8007f82:	466a      	mov	r2, sp
 8007f84:	2010      	movs	r0, #16
 8007f86:	5e12      	ldrsh	r2, [r2, r0]
 8007f88:	4650      	mov	r0, sl
 8007f8a:	930e      	str	r3, [sp, #56]	; 0x38
 8007f8c:	1ac0      	subs	r0, r0, r3
 8007f8e:	4653      	mov	r3, sl
 8007f90:	1a80      	subs	r0, r0, r2
 8007f92:	1b80      	subs	r0, r0, r6
 8007f94:	4358      	muls	r0, r3
 8007f96:	920f      	str	r2, [sp, #60]	; 0x3c
 8007f98:	f7f8 f950 	bl	800023c <__divsi3>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8007f9c:	b203      	sxth	r3, r0
        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 8007f9e:	4682      	mov	sl, r0
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	930c      	str	r3, [sp, #48]	; 0x30
 8007fa4:	f008 fe10 	bl	8010bc8 <lv_disp_get_dpi>
 8007fa8:	0083      	lsls	r3, r0, #2
 8007faa:	181b      	adds	r3, r3, r0
 8007fac:	005b      	lsls	r3, r3, #1
 8007fae:	2001      	movs	r0, #1
 8007fb0:	2bef      	cmp	r3, #239	; 0xef
 8007fb2:	dd00      	ble.n	8007fb6 <lv_obj_get_scrollbar_area.part.0+0x1de>
 8007fb4:	e214      	b.n	80083e0 <lv_obj_get_scrollbar_area.part.0+0x608>
 8007fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fb8:	4283      	cmp	r3, r0
 8007fba:	dc00      	bgt.n	8007fbe <lv_obj_get_scrollbar_area.part.0+0x1e6>
 8007fbc:	e1f8      	b.n	80083b0 <lv_obj_get_scrollbar_area.part.0+0x5d8>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 8007fbe:	4653      	mov	r3, sl
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	469a      	mov	sl, r3
 8007fc4:	466b      	mov	r3, sp
 8007fc6:	466a      	mov	r2, sp
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 8007fc8:	4640      	mov	r0, r8
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 8007fca:	b2b1      	uxth	r1, r6
 8007fcc:	8b1b      	ldrh	r3, [r3, #24]
 8007fce:	8a12      	ldrh	r2, [r2, #16]
 8007fd0:	910d      	str	r1, [sp, #52]	; 0x34
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 8007fd2:	b201      	sxth	r1, r0
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 8007fd4:	9306      	str	r3, [sp, #24]
 8007fd6:	920c      	str	r2, [sp, #48]	; 0x30
        if(scroll_h <= 0) {
 8007fd8:	2900      	cmp	r1, #0
 8007fda:	dc00      	bgt.n	8007fde <lv_obj_get_scrollbar_area.part.0+0x206>
 8007fdc:	e1c3      	b.n	8008366 <lv_obj_get_scrollbar_area.part.0+0x58e>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 8007fde:	4694      	mov	ip, r2
 8007fe0:	464a      	mov	r2, r9
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	4463      	add	r3, ip
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	b2b2      	uxth	r2, r6
 8007fea:	1a9b      	subs	r3, r3, r2
 8007fec:	4652      	mov	r2, sl
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 8007fee:	4684      	mov	ip, r0
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 8007ff0:	1a9b      	subs	r3, r3, r2
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 8007ff2:	8a62      	ldrh	r2, [r4, #18]
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 8007ff4:	b29b      	uxth	r3, r3
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 8007ff6:	4462      	add	r2, ip
 8007ff8:	4691      	mov	r9, r2
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 8007ffa:	b218      	sxth	r0, r3
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 8007ffc:	4499      	add	r9, r3
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 8007ffe:	9b01      	ldr	r3, [sp, #4]
 8008000:	4343      	muls	r3, r0
 8008002:	0018      	movs	r0, r3
 8008004:	f7f8 f91a 	bl	800023c <__divsi3>
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 8008008:	464b      	mov	r3, r9
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 800800a:	4652      	mov	r2, sl
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800800c:	1a1b      	subs	r3, r3, r0
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 800800e:	3a01      	subs	r2, #1
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 8008010:	b219      	sxth	r1, r3
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 8008012:	189b      	adds	r3, r3, r2
 8008014:	b21b      	sxth	r3, r3
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 8008016:	8069      	strh	r1, [r5, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 8008018:	80eb      	strh	r3, [r5, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 800801a:	2212      	movs	r2, #18
 800801c:	5ea0      	ldrsh	r0, [r4, r2]
 800801e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008020:	1882      	adds	r2, r0, r2
 8008022:	4291      	cmp	r1, r2
 8008024:	da00      	bge.n	8008028 <lv_obj_get_scrollbar_area.part.0+0x250>
 8008026:	e16b      	b.n	8008300 <lv_obj_get_scrollbar_area.part.0+0x528>
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 8008028:	2116      	movs	r1, #22
 800802a:	5e62      	ldrsh	r2, [r4, r1]
 800802c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800802e:	1b96      	subs	r6, r2, r6
 8008030:	1a76      	subs	r6, r6, r1
 8008032:	429e      	cmp	r6, r3
 8008034:	da00      	bge.n	8008038 <lv_obj_get_scrollbar_area.part.0+0x260>
 8008036:	e13f      	b.n	80082b8 <lv_obj_get_scrollbar_area.part.0+0x4e0>
    if(hor_draw && content_w) {
 8008038:	2f00      	cmp	r7, #0
 800803a:	d100      	bne.n	800803e <lv_obj_get_scrollbar_area.part.0+0x266>
 800803c:	e0a0      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
    lv_coord_t content_w = obj_w + sl + sr;
 800803e:	466b      	mov	r3, sp
 8008040:	8a9d      	ldrh	r5, [r3, #20]
 8008042:	9b02      	ldr	r3, [sp, #8]
 8008044:	18e8      	adds	r0, r5, r3
 8008046:	9b03      	ldr	r3, [sp, #12]
 8008048:	469c      	mov	ip, r3
 800804a:	4460      	add	r0, ip
 800804c:	b283      	uxth	r3, r0
 800804e:	b201      	sxth	r1, r0
 8008050:	4698      	mov	r8, r3
    if(hor_draw && content_w) {
 8008052:	2900      	cmp	r1, #0
 8008054:	d100      	bne.n	8008058 <lv_obj_get_scrollbar_area.part.0+0x280>
 8008056:	e093      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 8008058:	8ae0      	ldrh	r0, [r4, #22]
 800805a:	9b04      	ldr	r3, [sp, #16]
 800805c:	1ac0      	subs	r0, r0, r3
 800805e:	465b      	mov	r3, fp
 8008060:	b280      	uxth	r0, r0
 8008062:	80d8      	strh	r0, [r3, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 8008064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008066:	1ac0      	subs	r0, r0, r3
 8008068:	465b      	mov	r3, fp
 800806a:	3001      	adds	r0, #1
 800806c:	8058      	strh	r0, [r3, #2]
        hor_area->x1 = obj->coords.x1;
 800806e:	2210      	movs	r2, #16
 8008070:	5ea3      	ldrsh	r3, [r4, r2]
 8008072:	465a      	mov	r2, fp
 8008074:	8013      	strh	r3, [r2, #0]
        hor_area->x2 = obj->coords.x2;
 8008076:	2214      	movs	r2, #20
 8008078:	5ea3      	ldrsh	r3, [r4, r2]
 800807a:	465a      	mov	r2, fp
 800807c:	8093      	strh	r3, [r2, #4]
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 800807e:	466b      	mov	r3, sp
 8008080:	2228      	movs	r2, #40	; 0x28
 8008082:	5e9b      	ldrsh	r3, [r3, r2]
 8008084:	469a      	mov	sl, r3
 8008086:	466b      	mov	r3, sp
 8008088:	221c      	movs	r2, #28
 800808a:	5e9b      	ldrsh	r3, [r3, r2]
 800808c:	4652      	mov	r2, sl
 800808e:	4699      	mov	r9, r3
 8008090:	9b05      	ldr	r3, [sp, #20]
 8008092:	1a98      	subs	r0, r3, r2
 8008094:	464a      	mov	r2, r9
 8008096:	1a80      	subs	r0, r0, r2
 8008098:	9a08      	ldr	r2, [sp, #32]
 800809a:	1a80      	subs	r0, r0, r2
 800809c:	4358      	muls	r0, r3
 800809e:	f7f8 f8cd 	bl	800023c <__divsi3>
 80080a2:	0006      	movs	r6, r0
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 80080a4:	b207      	sxth	r7, r0
 80080a6:	2000      	movs	r0, #0
 80080a8:	f008 fd8e 	bl	8010bc8 <lv_disp_get_dpi>
 80080ac:	0083      	lsls	r3, r0, #2
 80080ae:	181b      	adds	r3, r3, r0
 80080b0:	005b      	lsls	r3, r3, #1
 80080b2:	2001      	movs	r0, #1
 80080b4:	2bef      	cmp	r3, #239	; 0xef
 80080b6:	dd00      	ble.n	80080ba <lv_obj_get_scrollbar_area.part.0+0x2e2>
 80080b8:	e1b3      	b.n	8008422 <lv_obj_get_scrollbar_area.part.0+0x64a>
 80080ba:	4287      	cmp	r7, r0
 80080bc:	dc00      	bgt.n	80080c0 <lv_obj_get_scrollbar_area.part.0+0x2e8>
 80080be:	e19a      	b.n	80083f6 <lv_obj_get_scrollbar_area.part.0+0x61e>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 80080c0:	b2b6      	uxth	r6, r6
 80080c2:	466b      	mov	r3, sp
 80080c4:	8d1f      	ldrh	r7, [r3, #40]	; 0x28
 80080c6:	8b9b      	ldrh	r3, [r3, #28]
 80080c8:	9303      	str	r3, [sp, #12]
 80080ca:	466b      	mov	r3, sp
 80080cc:	8c1b      	ldrh	r3, [r3, #32]
 80080ce:	9301      	str	r3, [sp, #4]
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 80080d0:	4643      	mov	r3, r8
 80080d2:	1b59      	subs	r1, r3, r5
 80080d4:	b209      	sxth	r1, r1
        if(scroll_w <= 0) {
 80080d6:	2900      	cmp	r1, #0
 80080d8:	dc00      	bgt.n	80080dc <lv_obj_get_scrollbar_area.part.0+0x304>
 80080da:	e0d3      	b.n	8008284 <lv_obj_get_scrollbar_area.part.0+0x4ac>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 80080dc:	9b03      	ldr	r3, [sp, #12]
 80080de:	9a01      	ldr	r2, [sp, #4]
 80080e0:	18fb      	adds	r3, r7, r3
 80080e2:	1aeb      	subs	r3, r5, r3
 80080e4:	1a9b      	subs	r3, r3, r2
 80080e6:	1b9b      	subs	r3, r3, r6
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 80080e8:	b218      	sxth	r0, r3
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 80080ea:	b29d      	uxth	r5, r3
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 80080ec:	9b02      	ldr	r3, [sp, #8]
 80080ee:	4343      	muls	r3, r0
 80080f0:	0018      	movs	r0, r3
 80080f2:	f7f8 f8a3 	bl	800023c <__divsi3>
            if(rtl) {
 80080f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
            sb_x = rem - sb_x;
 80080f8:	1a2d      	subs	r5, r5, r0
 80080fa:	b2ad      	uxth	r5, r5
            if(rtl) {
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d100      	bne.n	8008102 <lv_obj_get_scrollbar_area.part.0+0x32a>
 8008100:	e1b8      	b.n	8008474 <lv_obj_get_scrollbar_area.part.0+0x69c>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 8008102:	8a23      	ldrh	r3, [r4, #16]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 8008104:	1e70      	subs	r0, r6, #1
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 8008106:	18fb      	adds	r3, r7, r3
 8008108:	18ed      	adds	r5, r5, r3
 800810a:	465b      	mov	r3, fp
 800810c:	b22a      	sxth	r2, r5
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800810e:	182d      	adds	r5, r5, r0
 8008110:	b22d      	sxth	r5, r5
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 8008112:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 8008114:	809d      	strh	r5, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 8008116:	2310      	movs	r3, #16
 8008118:	5ee1      	ldrsh	r1, [r4, r3]
 800811a:	4653      	mov	r3, sl
 800811c:	18cb      	adds	r3, r1, r3
 800811e:	429a      	cmp	r2, r3
 8008120:	da00      	bge.n	8008124 <lv_obj_get_scrollbar_area.part.0+0x34c>
 8008122:	e200      	b.n	8008526 <lv_obj_get_scrollbar_area.part.0+0x74e>
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 8008124:	464a      	mov	r2, r9
 8008126:	2314      	movs	r3, #20
 8008128:	5ee4      	ldrsh	r4, [r4, r3]
 800812a:	9b08      	ldr	r3, [sp, #32]
 800812c:	1ae3      	subs	r3, r4, r3
 800812e:	1a9b      	subs	r3, r3, r2
 8008130:	42ab      	cmp	r3, r5
 8008132:	da25      	bge.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 8008134:	9b03      	ldr	r3, [sp, #12]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 8008136:	2000      	movs	r0, #0
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 8008138:	1ae4      	subs	r4, r4, r3
 800813a:	9b01      	ldr	r3, [sp, #4]
 800813c:	1ae4      	subs	r4, r4, r3
 800813e:	465b      	mov	r3, fp
 8008140:	b224      	sxth	r4, r4
 8008142:	809c      	strh	r4, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 8008144:	f008 fd40 	bl	8010bc8 <lv_disp_get_dpi>
 8008148:	0083      	lsls	r3, r0, #2
 800814a:	181b      	adds	r3, r3, r0
 800814c:	005b      	lsls	r3, r3, #1
 800814e:	2001      	movs	r0, #1
 8008150:	2bef      	cmp	r3, #239	; 0xef
 8008152:	dd00      	ble.n	8008156 <lv_obj_get_scrollbar_area.part.0+0x37e>
 8008154:	e264      	b.n	8008620 <lv_obj_get_scrollbar_area.part.0+0x848>
 8008156:	465b      	mov	r3, fp
 8008158:	2200      	movs	r2, #0
 800815a:	5e9b      	ldrsh	r3, [r3, r2]
 800815c:	1a24      	subs	r4, r4, r0
 800815e:	429c      	cmp	r4, r3
 8008160:	da0e      	bge.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 8008162:	465b      	mov	r3, fp
 8008164:	2000      	movs	r0, #0
 8008166:	889c      	ldrh	r4, [r3, #4]
 8008168:	f008 fd2e 	bl	8010bc8 <lv_disp_get_dpi>
 800816c:	0083      	lsls	r3, r0, #2
 800816e:	181b      	adds	r3, r3, r0
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	2001      	movs	r0, #1
 8008174:	2bef      	cmp	r3, #239	; 0xef
 8008176:	dd00      	ble.n	800817a <lv_obj_get_scrollbar_area.part.0+0x3a2>
 8008178:	e291      	b.n	800869e <lv_obj_get_scrollbar_area.part.0+0x8c6>
 800817a:	465b      	mov	r3, fp
 800817c:	1a20      	subs	r0, r4, r0
 800817e:	8018      	strh	r0, [r3, #0]
}
 8008180:	b011      	add	sp, #68	; 0x44
 8008182:	bcf0      	pop	{r4, r5, r6, r7}
 8008184:	46bb      	mov	fp, r7
 8008186:	46b2      	mov	sl, r6
 8008188:	46a9      	mov	r9, r5
 800818a:	46a0      	mov	r8, r4
 800818c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800818e:	0020      	movs	r0, r4
 8008190:	f7ff fc8c 	bl	8007aac <lv_obj_get_scroll_right.part.0>
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 8008194:	68a3      	ldr	r3, [r4, #8]
 8008196:	9002      	str	r0, [sp, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d000      	beq.n	800819e <lv_obj_get_scrollbar_area.part.0+0x3c6>
 800819c:	e674      	b.n	8007e88 <lv_obj_get_scrollbar_area.part.0+0xb0>
    if((dir & LV_DIR_VER) &&
 800819e:	4653      	mov	r3, sl
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d100      	bne.n	80081a6 <lv_obj_get_scrollbar_area.part.0+0x3ce>
 80081a4:	e1e4      	b.n	8008570 <lv_obj_get_scrollbar_area.part.0+0x798>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 80081a6:	2b03      	cmp	r3, #3
 80081a8:	d15d      	bne.n	8008266 <lv_obj_get_scrollbar_area.part.0+0x48e>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 80081aa:	2f00      	cmp	r7, #0
 80081ac:	dc00      	bgt.n	80081b0 <lv_obj_get_scrollbar_area.part.0+0x3d8>
 80081ae:	e25a      	b.n	8008666 <lv_obj_get_scrollbar_area.part.0+0x88e>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 80081b0:	9b03      	ldr	r3, [sp, #12]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	dc00      	bgt.n	80081b8 <lv_obj_get_scrollbar_area.part.0+0x3e0>
 80081b6:	e2a0      	b.n	80086fa <lv_obj_get_scrollbar_area.part.0+0x922>
        ver_draw = true;
 80081b8:	2301      	movs	r3, #1
        hor_draw = true;
 80081ba:	2701      	movs	r7, #1
        ver_draw = true;
 80081bc:	4699      	mov	r9, r3
 80081be:	e674      	b.n	8007eaa <lv_obj_get_scrollbar_area.part.0+0xd2>
 80081c0:	3a09      	subs	r2, #9
 80081c2:	401a      	ands	r2, r3
    if((dir & LV_DIR_VER) &&
 80081c4:	4653      	mov	r3, sl
 80081c6:	4691      	mov	r9, r2
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d013      	beq.n	80081f4 <lv_obj_get_scrollbar_area.part.0+0x41c>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d100      	bne.n	80081d2 <lv_obj_get_scrollbar_area.part.0+0x3fa>
 80081d0:	e0d4      	b.n	800837c <lv_obj_get_scrollbar_area.part.0+0x5a4>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 80081d2:	0030      	movs	r0, r6
 80081d4:	f7fa fb80 	bl	80028d8 <lv_indev_get_scroll_dir>
 80081d8:	280c      	cmp	r0, #12
 80081da:	d100      	bne.n	80081de <lv_obj_get_scrollbar_area.part.0+0x406>
 80081dc:	e1e1      	b.n	80085a2 <lv_obj_get_scrollbar_area.part.0+0x7ca>
    if((dir & LV_DIR_HOR) &&
 80081de:	464b      	mov	r3, r9
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d12f      	bne.n	8008244 <lv_obj_get_scrollbar_area.part.0+0x46c>
 80081e4:	e7cc      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
        if(obj->spec_attr == NULL) return 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	9303      	str	r3, [sp, #12]
 80081ea:	e63d      	b.n	8007e68 <lv_obj_get_scrollbar_area.part.0+0x90>
    if((dir & LV_DIR_VER) &&
 80081ec:	2303      	movs	r3, #3
 80081ee:	4699      	mov	r9, r3
        if(obj->spec_attr == NULL) return 0;
 80081f0:	2300      	movs	r3, #0
 80081f2:	9302      	str	r3, [sp, #8]
    if((dir & LV_DIR_HOR) &&
 80081f4:	464f      	mov	r7, r9
        ver_draw = true;
 80081f6:	2301      	movs	r3, #1
    if((dir & LV_DIR_HOR) &&
 80081f8:	1e7a      	subs	r2, r7, #1
 80081fa:	4197      	sbcs	r7, r2
        ver_draw = true;
 80081fc:	4699      	mov	r9, r3
    if((dir & LV_DIR_HOR) &&
 80081fe:	b2ff      	uxtb	r7, r7
 8008200:	e653      	b.n	8007eaa <lv_obj_get_scrollbar_area.part.0+0xd2>
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8008202:	2000      	movs	r0, #0
 8008204:	f008 fd3e 	bl	8010c84 <lv_indev_get_next>
    else return LV_SCROLLBAR_MODE_AUTO;
 8008208:	2303      	movs	r3, #3
 800820a:	469a      	mov	sl, r3
    if(obj->spec_attr == NULL) return 0;
 800820c:	68a3      	ldr	r3, [r4, #8]
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800820e:	0006      	movs	r6, r0
    if(obj->spec_attr == NULL) return 0;
 8008210:	2b00      	cmp	r3, #0
 8008212:	d000      	beq.n	8008216 <lv_obj_get_scrollbar_area.part.0+0x43e>
 8008214:	e60e      	b.n	8007e34 <lv_obj_get_scrollbar_area.part.0+0x5c>
 8008216:	2300      	movs	r3, #0
 8008218:	2700      	movs	r7, #0
 800821a:	4698      	mov	r8, r3
 800821c:	e60f      	b.n	8007e3e <lv_obj_get_scrollbar_area.part.0+0x66>
 800821e:	0020      	movs	r0, r4
 8008220:	f7ff fbd8 	bl	80079d4 <lv_obj_get_scroll_left.part.0>
 8008224:	9003      	str	r0, [sp, #12]
 8008226:	e61f      	b.n	8007e68 <lv_obj_get_scrollbar_area.part.0+0x90>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8008228:	2180      	movs	r1, #128	; 0x80
 800822a:	2231      	movs	r2, #49	; 0x31
 800822c:	0020      	movs	r0, r4
 800822e:	0249      	lsls	r1, r1, #9
 8008230:	f001 fa5e 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8008234:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 8008236:	2801      	cmp	r0, #1
 8008238:	d900      	bls.n	800823c <lv_obj_get_scrollbar_area.part.0+0x464>
 800823a:	e67a      	b.n	8007f32 <lv_obj_get_scrollbar_area.part.0+0x15a>
 800823c:	e7a0      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800823e:	2b03      	cmp	r3, #3
 8008240:	d100      	bne.n	8008244 <lv_obj_get_scrollbar_area.part.0+0x46c>
 8008242:	e24f      	b.n	80086e4 <lv_obj_get_scrollbar_area.part.0+0x90c>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 8008244:	0030      	movs	r0, r6
 8008246:	f7fa fb47 	bl	80028d8 <lv_indev_get_scroll_dir>
 800824a:	2803      	cmp	r0, #3
 800824c:	d198      	bne.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
    bool ver_draw = false;
 800824e:	2300      	movs	r3, #0
        hor_draw = true;
 8008250:	2701      	movs	r7, #1
    bool ver_draw = false;
 8008252:	4699      	mov	r9, r3
 8008254:	e629      	b.n	8007eaa <lv_obj_get_scrollbar_area.part.0+0xd2>
    if((dir & LV_DIR_VER) &&
 8008256:	4653      	mov	r3, sl
 8008258:	2b01      	cmp	r3, #1
 800825a:	d0c7      	beq.n	80081ec <lv_obj_get_scrollbar_area.part.0+0x414>
        if(obj->spec_attr == NULL) return 0;
 800825c:	2300      	movs	r3, #0
 800825e:	9302      	str	r3, [sp, #8]
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 8008260:	4653      	mov	r3, sl
 8008262:	2b03      	cmp	r3, #3
 8008264:	d01f      	beq.n	80082a6 <lv_obj_get_scrollbar_area.part.0+0x4ce>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 8008266:	0030      	movs	r0, r6
 8008268:	f7fa fb36 	bl	80028d8 <lv_indev_get_scroll_dir>
 800826c:	280c      	cmp	r0, #12
 800826e:	d1e9      	bne.n	8008244 <lv_obj_get_scrollbar_area.part.0+0x46c>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 8008270:	0030      	movs	r0, r6
 8008272:	f7fa fb31 	bl	80028d8 <lv_indev_get_scroll_dir>
 8008276:	3803      	subs	r0, #3
 8008278:	4243      	negs	r3, r0
 800827a:	4158      	adcs	r0, r3
        ver_draw = true;
 800827c:	2301      	movs	r3, #1
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 800827e:	b2c7      	uxtb	r7, r0
        ver_draw = true;
 8008280:	4699      	mov	r9, r3
 8008282:	e612      	b.n	8007eaa <lv_obj_get_scrollbar_area.part.0+0xd2>
            if(rtl) {
 8008284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008286:	2b01      	cmp	r3, #1
 8008288:	d100      	bne.n	800828c <lv_obj_get_scrollbar_area.part.0+0x4b4>
 800828a:	e13e      	b.n	800850a <lv_obj_get_scrollbar_area.part.0+0x732>
                hor_area->x1 = obj->coords.x1 + left_space;
 800828c:	8a23      	ldrh	r3, [r4, #16]
 800828e:	18ff      	adds	r7, r7, r3
 8008290:	465b      	mov	r3, fp
 8008292:	801f      	strh	r7, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 8008294:	9b03      	ldr	r3, [sp, #12]
 8008296:	43de      	mvns	r6, r3
 8008298:	8aa3      	ldrh	r3, [r4, #20]
 800829a:	18f6      	adds	r6, r6, r3
 800829c:	9b01      	ldr	r3, [sp, #4]
 800829e:	1af6      	subs	r6, r6, r3
 80082a0:	465b      	mov	r3, fp
 80082a2:	809e      	strh	r6, [r3, #4]
 80082a4:	e76c      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 80082a6:	2f00      	cmp	r7, #0
 80082a8:	dd51      	ble.n	800834e <lv_obj_get_scrollbar_area.part.0+0x576>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 80082aa:	9b03      	ldr	r3, [sp, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	dd56      	ble.n	800835e <lv_obj_get_scrollbar_area.part.0+0x586>
 80082b0:	2301      	movs	r3, #1
 80082b2:	4699      	mov	r9, r3
        hor_draw = true;
 80082b4:	001f      	movs	r7, r3
 80082b6:	e5f8      	b.n	8007eaa <lv_obj_get_scrollbar_area.part.0+0xd2>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 80082b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 80082ba:	2000      	movs	r0, #0
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 80082bc:	1ad6      	subs	r6, r2, r3
 80082be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082c0:	1af6      	subs	r6, r6, r3
 80082c2:	b236      	sxth	r6, r6
 80082c4:	80ee      	strh	r6, [r5, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 80082c6:	f008 fc7f 	bl	8010bc8 <lv_disp_get_dpi>
 80082ca:	0083      	lsls	r3, r0, #2
 80082cc:	181b      	adds	r3, r3, r0
 80082ce:	005b      	lsls	r3, r3, #1
 80082d0:	2001      	movs	r0, #1
 80082d2:	2bef      	cmp	r3, #239	; 0xef
 80082d4:	dd00      	ble.n	80082d8 <lv_obj_get_scrollbar_area.part.0+0x500>
 80082d6:	e159      	b.n	800858c <lv_obj_get_scrollbar_area.part.0+0x7b4>
 80082d8:	2202      	movs	r2, #2
 80082da:	5eab      	ldrsh	r3, [r5, r2]
 80082dc:	1a36      	subs	r6, r6, r0
 80082de:	429e      	cmp	r6, r3
 80082e0:	db00      	blt.n	80082e4 <lv_obj_get_scrollbar_area.part.0+0x50c>
 80082e2:	e6a9      	b.n	8008038 <lv_obj_get_scrollbar_area.part.0+0x260>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 80082e4:	2000      	movs	r0, #0
 80082e6:	88ee      	ldrh	r6, [r5, #6]
 80082e8:	f008 fc6e 	bl	8010bc8 <lv_disp_get_dpi>
 80082ec:	0083      	lsls	r3, r0, #2
 80082ee:	181b      	adds	r3, r3, r0
 80082f0:	005b      	lsls	r3, r3, #1
 80082f2:	2001      	movs	r0, #1
 80082f4:	2bef      	cmp	r3, #239	; 0xef
 80082f6:	dd00      	ble.n	80082fa <lv_obj_get_scrollbar_area.part.0+0x522>
 80082f8:	e1a9      	b.n	800864e <lv_obj_get_scrollbar_area.part.0+0x876>
 80082fa:	1a36      	subs	r6, r6, r0
 80082fc:	806e      	strh	r6, [r5, #2]
 80082fe:	e69b      	b.n	8008038 <lv_obj_get_scrollbar_area.part.0+0x260>
                ver_area->y1 = obj->coords.y1 + top_space;
 8008300:	9b06      	ldr	r3, [sp, #24]
 8008302:	469c      	mov	ip, r3
 8008304:	4460      	add	r0, ip
 8008306:	b203      	sxth	r3, r0
 8008308:	806b      	strh	r3, [r5, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 800830a:	2000      	movs	r0, #0
                ver_area->y1 = obj->coords.y1 + top_space;
 800830c:	4698      	mov	r8, r3
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 800830e:	f008 fc5b 	bl	8010bc8 <lv_disp_get_dpi>
 8008312:	0083      	lsls	r3, r0, #2
 8008314:	181b      	adds	r3, r3, r0
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	2001      	movs	r0, #1
 800831a:	2bef      	cmp	r3, #239	; 0xef
 800831c:	dd00      	ble.n	8008320 <lv_obj_get_scrollbar_area.part.0+0x548>
 800831e:	e12a      	b.n	8008576 <lv_obj_get_scrollbar_area.part.0+0x79e>
 8008320:	2206      	movs	r2, #6
 8008322:	5eab      	ldrsh	r3, [r5, r2]
 8008324:	0002      	movs	r2, r0
 8008326:	4442      	add	r2, r8
 8008328:	429a      	cmp	r2, r3
 800832a:	dc00      	bgt.n	800832e <lv_obj_get_scrollbar_area.part.0+0x556>
 800832c:	e67c      	b.n	8008028 <lv_obj_get_scrollbar_area.part.0+0x250>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 800832e:	886b      	ldrh	r3, [r5, #2]
 8008330:	2000      	movs	r0, #0
 8008332:	4698      	mov	r8, r3
 8008334:	f008 fc48 	bl	8010bc8 <lv_disp_get_dpi>
 8008338:	0083      	lsls	r3, r0, #2
 800833a:	181b      	adds	r3, r3, r0
 800833c:	005a      	lsls	r2, r3, #1
 800833e:	2301      	movs	r3, #1
 8008340:	2aef      	cmp	r2, #239	; 0xef
 8008342:	dd00      	ble.n	8008346 <lv_obj_get_scrollbar_area.part.0+0x56e>
 8008344:	e177      	b.n	8008636 <lv_obj_get_scrollbar_area.part.0+0x85e>
 8008346:	4443      	add	r3, r8
 8008348:	b21b      	sxth	r3, r3
 800834a:	80eb      	strh	r3, [r5, #6]
 800834c:	e66c      	b.n	8008028 <lv_obj_get_scrollbar_area.part.0+0x250>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800834e:	9b01      	ldr	r3, [sp, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	dc00      	bgt.n	8008356 <lv_obj_get_scrollbar_area.part.0+0x57e>
 8008354:	e154      	b.n	8008600 <lv_obj_get_scrollbar_area.part.0+0x828>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	dd00      	ble.n	800835e <lv_obj_get_scrollbar_area.part.0+0x586>
 800835c:	e72c      	b.n	80081b8 <lv_obj_get_scrollbar_area.part.0+0x3e0>
        ver_draw = true;
 800835e:	2301      	movs	r3, #1
 8008360:	2700      	movs	r7, #0
 8008362:	4699      	mov	r9, r3
 8008364:	e5a1      	b.n	8007eaa <lv_obj_get_scrollbar_area.part.0+0xd2>
            ver_area->y1 = obj->coords.y1 + top_space;
 8008366:	469c      	mov	ip, r3
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 8008368:	43d3      	mvns	r3, r2
            ver_area->y1 = obj->coords.y1 + top_space;
 800836a:	8a60      	ldrh	r0, [r4, #18]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 800836c:	990d      	ldr	r1, [sp, #52]	; 0x34
            ver_area->y1 = obj->coords.y1 + top_space;
 800836e:	4460      	add	r0, ip
 8008370:	8068      	strh	r0, [r5, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 8008372:	8ae6      	ldrh	r6, [r4, #22]
 8008374:	18f6      	adds	r6, r6, r3
 8008376:	1a76      	subs	r6, r6, r1
 8008378:	80ee      	strh	r6, [r5, #6]
 800837a:	e65d      	b.n	8008038 <lv_obj_get_scrollbar_area.part.0+0x260>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800837c:	2f00      	cmp	r7, #0
 800837e:	dd5b      	ble.n	8008438 <lv_obj_get_scrollbar_area.part.0+0x660>
    if((dir & LV_DIR_HOR) &&
 8008380:	1e13      	subs	r3, r2, #0
 8008382:	d100      	bne.n	8008386 <lv_obj_get_scrollbar_area.part.0+0x5ae>
 8008384:	e111      	b.n	80085aa <lv_obj_get_scrollbar_area.part.0+0x7d2>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8008386:	9b03      	ldr	r3, [sp, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	dd00      	ble.n	800838e <lv_obj_get_scrollbar_area.part.0+0x5b6>
 800838c:	e714      	b.n	80081b8 <lv_obj_get_scrollbar_area.part.0+0x3e0>
 800838e:	9a02      	ldr	r2, [sp, #8]
 8008390:	17d3      	asrs	r3, r2, #31
 8008392:	1a9b      	subs	r3, r3, r2
 8008394:	0fdf      	lsrs	r7, r3, #31
        ver_draw = true;
 8008396:	2301      	movs	r3, #1
 8008398:	4699      	mov	r9, r3
 800839a:	e586      	b.n	8007eaa <lv_obj_get_scrollbar_area.part.0+0xd2>
            ver_area->x1 = obj->coords.x1 + left_space;
 800839c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800839e:	8a23      	ldrh	r3, [r4, #16]
 80083a0:	4694      	mov	ip, r2
            ver_area->x2 = ver_area->x1 + tickness - 1;
 80083a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
            ver_area->x1 = obj->coords.x1 + left_space;
 80083a4:	4463      	add	r3, ip
            ver_area->x2 = ver_area->x1 + tickness - 1;
 80083a6:	3801      	subs	r0, #1
            ver_area->x1 = obj->coords.x1 + left_space;
 80083a8:	b21a      	sxth	r2, r3
            ver_area->x2 = ver_area->x1 + tickness - 1;
 80083aa:	181b      	adds	r3, r3, r0
 80083ac:	b21b      	sxth	r3, r3
 80083ae:	e5e3      	b.n	8007f78 <lv_obj_get_scrollbar_area.part.0+0x1a0>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 80083b0:	2000      	movs	r0, #0
 80083b2:	f008 fc09 	bl	8010bc8 <lv_disp_get_dpi>
 80083b6:	2201      	movs	r2, #1
 80083b8:	0083      	lsls	r3, r0, #2
 80083ba:	181b      	adds	r3, r3, r0
 80083bc:	4692      	mov	sl, r2
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	2bef      	cmp	r3, #239	; 0xef
 80083c2:	dc00      	bgt.n	80083c6 <lv_obj_get_scrollbar_area.part.0+0x5ee>
 80083c4:	e5fe      	b.n	8007fc4 <lv_obj_get_scrollbar_area.part.0+0x1ec>
 80083c6:	2000      	movs	r0, #0
 80083c8:	f008 fbfe 	bl	8010bc8 <lv_disp_get_dpi>
 80083cc:	0083      	lsls	r3, r0, #2
 80083ce:	1818      	adds	r0, r3, r0
 80083d0:	0040      	lsls	r0, r0, #1
 80083d2:	21a0      	movs	r1, #160	; 0xa0
 80083d4:	3050      	adds	r0, #80	; 0x50
 80083d6:	f7f7 ff31 	bl	800023c <__divsi3>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 80083da:	b283      	uxth	r3, r0
 80083dc:	469a      	mov	sl, r3
 80083de:	e5f1      	b.n	8007fc4 <lv_obj_get_scrollbar_area.part.0+0x1ec>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 80083e0:	2000      	movs	r0, #0
 80083e2:	f008 fbf1 	bl	8010bc8 <lv_disp_get_dpi>
 80083e6:	0083      	lsls	r3, r0, #2
 80083e8:	1818      	adds	r0, r3, r0
 80083ea:	0040      	lsls	r0, r0, #1
 80083ec:	21a0      	movs	r1, #160	; 0xa0
 80083ee:	3050      	adds	r0, #80	; 0x50
 80083f0:	f7f7 ff24 	bl	800023c <__divsi3>
 80083f4:	e5df      	b.n	8007fb6 <lv_obj_get_scrollbar_area.part.0+0x1de>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 80083f6:	2000      	movs	r0, #0
 80083f8:	f008 fbe6 	bl	8010bc8 <lv_disp_get_dpi>
 80083fc:	0083      	lsls	r3, r0, #2
 80083fe:	181b      	adds	r3, r3, r0
 8008400:	2601      	movs	r6, #1
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	2bef      	cmp	r3, #239	; 0xef
 8008406:	dc00      	bgt.n	800840a <lv_obj_get_scrollbar_area.part.0+0x632>
 8008408:	e65b      	b.n	80080c2 <lv_obj_get_scrollbar_area.part.0+0x2ea>
 800840a:	2000      	movs	r0, #0
 800840c:	f008 fbdc 	bl	8010bc8 <lv_disp_get_dpi>
 8008410:	0083      	lsls	r3, r0, #2
 8008412:	1818      	adds	r0, r3, r0
 8008414:	0040      	lsls	r0, r0, #1
 8008416:	21a0      	movs	r1, #160	; 0xa0
 8008418:	3050      	adds	r0, #80	; 0x50
 800841a:	f7f7 ff0f 	bl	800023c <__divsi3>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 800841e:	b286      	uxth	r6, r0
 8008420:	e64f      	b.n	80080c2 <lv_obj_get_scrollbar_area.part.0+0x2ea>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 8008422:	2000      	movs	r0, #0
 8008424:	f008 fbd0 	bl	8010bc8 <lv_disp_get_dpi>
 8008428:	0083      	lsls	r3, r0, #2
 800842a:	1818      	adds	r0, r3, r0
 800842c:	0040      	lsls	r0, r0, #1
 800842e:	21a0      	movs	r1, #160	; 0xa0
 8008430:	3050      	adds	r0, #80	; 0x50
 8008432:	f7f7 ff03 	bl	800023c <__divsi3>
 8008436:	e640      	b.n	80080ba <lv_obj_get_scrollbar_area.part.0+0x2e2>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8008438:	9b01      	ldr	r3, [sp, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	dd0b      	ble.n	8008456 <lv_obj_get_scrollbar_area.part.0+0x67e>
    if((dir & LV_DIR_HOR) &&
 800843e:	1e13      	subs	r3, r2, #0
 8008440:	d100      	bne.n	8008444 <lv_obj_get_scrollbar_area.part.0+0x66c>
 8008442:	e0b2      	b.n	80085aa <lv_obj_get_scrollbar_area.part.0+0x7d2>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8008444:	9b03      	ldr	r3, [sp, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	dd00      	ble.n	800844c <lv_obj_get_scrollbar_area.part.0+0x674>
 800844a:	e6b5      	b.n	80081b8 <lv_obj_get_scrollbar_area.part.0+0x3e0>
 800844c:	9b02      	ldr	r3, [sp, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	dd00      	ble.n	8008454 <lv_obj_get_scrollbar_area.part.0+0x67c>
 8008452:	e6b1      	b.n	80081b8 <lv_obj_get_scrollbar_area.part.0+0x3e0>
 8008454:	e783      	b.n	800835e <lv_obj_get_scrollbar_area.part.0+0x586>
    if((dir & LV_DIR_HOR) &&
 8008456:	2a00      	cmp	r2, #0
 8008458:	d100      	bne.n	800845c <lv_obj_get_scrollbar_area.part.0+0x684>
 800845a:	e691      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800845c:	9b03      	ldr	r3, [sp, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	dd00      	ble.n	8008464 <lv_obj_get_scrollbar_area.part.0+0x68c>
 8008462:	e6f4      	b.n	800824e <lv_obj_get_scrollbar_area.part.0+0x476>
    bool ver_draw = false;
 8008464:	2300      	movs	r3, #0
 8008466:	4699      	mov	r9, r3
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8008468:	9b02      	ldr	r3, [sp, #8]
        hor_draw = true;
 800846a:	2701      	movs	r7, #1
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800846c:	2b00      	cmp	r3, #0
 800846e:	dd00      	ble.n	8008472 <lv_obj_get_scrollbar_area.part.0+0x69a>
 8008470:	e51b      	b.n	8007eaa <lv_obj_get_scrollbar_area.part.0+0xd2>
 8008472:	e685      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 8008474:	9a01      	ldr	r2, [sp, #4]
 8008476:	8a23      	ldrh	r3, [r4, #16]
 8008478:	4694      	mov	ip, r2
 800847a:	18fb      	adds	r3, r7, r3
 800847c:	4463      	add	r3, ip
 800847e:	18ed      	adds	r5, r5, r3
 8008480:	465b      	mov	r3, fp
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 8008482:	3e01      	subs	r6, #1
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 8008484:	b22a      	sxth	r2, r5
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 8008486:	19ad      	adds	r5, r5, r6
 8008488:	b22d      	sxth	r5, r5
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 800848a:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800848c:	809d      	strh	r5, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 800848e:	9808      	ldr	r0, [sp, #32]
 8008490:	2310      	movs	r3, #16
 8008492:	5ee1      	ldrsh	r1, [r4, r3]
 8008494:	4653      	mov	r3, sl
 8008496:	4684      	mov	ip, r0
 8008498:	18cb      	adds	r3, r1, r3
 800849a:	4463      	add	r3, ip
 800849c:	429a      	cmp	r2, r3
 800849e:	da00      	bge.n	80084a2 <lv_obj_get_scrollbar_area.part.0+0x6ca>
 80084a0:	e087      	b.n	80085b2 <lv_obj_get_scrollbar_area.part.0+0x7da>
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 80084a2:	2314      	movs	r3, #20
 80084a4:	5ee6      	ldrsh	r6, [r4, r3]
 80084a6:	464b      	mov	r3, r9
 80084a8:	1af2      	subs	r2, r6, r3
 80084aa:	42aa      	cmp	r2, r5
 80084ac:	db00      	blt.n	80084b0 <lv_obj_get_scrollbar_area.part.0+0x6d8>
 80084ae:	e667      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
                    hor_area->x2 = obj->coords.x2 - right_space;
 80084b0:	9b03      	ldr	r3, [sp, #12]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 80084b2:	2000      	movs	r0, #0
                    hor_area->x2 = obj->coords.x2 - right_space;
 80084b4:	1af6      	subs	r6, r6, r3
 80084b6:	465b      	mov	r3, fp
 80084b8:	b236      	sxth	r6, r6
 80084ba:	809e      	strh	r6, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 80084bc:	f008 fb84 	bl	8010bc8 <lv_disp_get_dpi>
 80084c0:	0083      	lsls	r3, r0, #2
 80084c2:	181b      	adds	r3, r3, r0
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	2001      	movs	r0, #1
 80084c8:	2bef      	cmp	r3, #239	; 0xef
 80084ca:	dd00      	ble.n	80084ce <lv_obj_get_scrollbar_area.part.0+0x6f6>
 80084cc:	e0d0      	b.n	8008670 <lv_obj_get_scrollbar_area.part.0+0x898>
 80084ce:	465b      	mov	r3, fp
 80084d0:	2200      	movs	r2, #0
 80084d2:	5e9b      	ldrsh	r3, [r3, r2]
 80084d4:	1a36      	subs	r6, r6, r0
 80084d6:	429e      	cmp	r6, r3
 80084d8:	db00      	blt.n	80084dc <lv_obj_get_scrollbar_area.part.0+0x704>
 80084da:	e651      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 80084dc:	465b      	mov	r3, fp
 80084de:	2000      	movs	r0, #0
 80084e0:	889c      	ldrh	r4, [r3, #4]
 80084e2:	f008 fb71 	bl	8010bc8 <lv_disp_get_dpi>
 80084e6:	0083      	lsls	r3, r0, #2
 80084e8:	181b      	adds	r3, r3, r0
 80084ea:	005b      	lsls	r3, r3, #1
 80084ec:	2001      	movs	r0, #1
 80084ee:	2bef      	cmp	r3, #239	; 0xef
 80084f0:	dc00      	bgt.n	80084f4 <lv_obj_get_scrollbar_area.part.0+0x71c>
 80084f2:	e642      	b.n	800817a <lv_obj_get_scrollbar_area.part.0+0x3a2>
 80084f4:	2000      	movs	r0, #0
 80084f6:	f008 fb67 	bl	8010bc8 <lv_disp_get_dpi>
 80084fa:	230a      	movs	r3, #10
 80084fc:	4358      	muls	r0, r3
 80084fe:	21a0      	movs	r1, #160	; 0xa0
 8008500:	3050      	adds	r0, #80	; 0x50
 8008502:	f7f7 fe9b 	bl	800023c <__divsi3>
 8008506:	b280      	uxth	r0, r0
 8008508:	e637      	b.n	800817a <lv_obj_get_scrollbar_area.part.0+0x3a2>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 800850a:	9b01      	ldr	r3, [sp, #4]
 800850c:	1e78      	subs	r0, r7, #1
 800850e:	469c      	mov	ip, r3
 8008510:	465b      	mov	r3, fp
 8008512:	8a27      	ldrh	r7, [r4, #16]
                hor_area->x2 = obj->coords.x2 - right_space;
 8008514:	9a03      	ldr	r2, [sp, #12]
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 8008516:	183f      	adds	r7, r7, r0
 8008518:	4467      	add	r7, ip
 800851a:	801f      	strh	r7, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space;
 800851c:	8aa3      	ldrh	r3, [r4, #20]
 800851e:	1a9b      	subs	r3, r3, r2
 8008520:	465a      	mov	r2, fp
 8008522:	8093      	strh	r3, [r2, #4]
 8008524:	e62c      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
                    hor_area->x1 = obj->coords.x1 + left_space;
 8008526:	465b      	mov	r3, fp
 8008528:	187f      	adds	r7, r7, r1
 800852a:	b23f      	sxth	r7, r7
 800852c:	801f      	strh	r7, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800852e:	2000      	movs	r0, #0
 8008530:	f008 fb4a 	bl	8010bc8 <lv_disp_get_dpi>
 8008534:	0083      	lsls	r3, r0, #2
 8008536:	181b      	adds	r3, r3, r0
 8008538:	005b      	lsls	r3, r3, #1
 800853a:	2001      	movs	r0, #1
 800853c:	2bef      	cmp	r3, #239	; 0xef
 800853e:	dc64      	bgt.n	800860a <lv_obj_get_scrollbar_area.part.0+0x832>
 8008540:	465b      	mov	r3, fp
 8008542:	2504      	movs	r5, #4
 8008544:	5f5d      	ldrsh	r5, [r3, r5]
 8008546:	183f      	adds	r7, r7, r0
 8008548:	42af      	cmp	r7, r5
 800854a:	dc00      	bgt.n	800854e <lv_obj_get_scrollbar_area.part.0+0x776>
 800854c:	e5ea      	b.n	8008124 <lv_obj_get_scrollbar_area.part.0+0x34c>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800854e:	465b      	mov	r3, fp
 8008550:	2000      	movs	r0, #0
 8008552:	881d      	ldrh	r5, [r3, #0]
 8008554:	f008 fb38 	bl	8010bc8 <lv_disp_get_dpi>
 8008558:	0083      	lsls	r3, r0, #2
 800855a:	181b      	adds	r3, r3, r0
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	2001      	movs	r0, #1
 8008560:	2bef      	cmp	r3, #239	; 0xef
 8008562:	dd00      	ble.n	8008566 <lv_obj_get_scrollbar_area.part.0+0x78e>
 8008564:	e0a7      	b.n	80086b6 <lv_obj_get_scrollbar_area.part.0+0x8de>
 8008566:	465b      	mov	r3, fp
 8008568:	182d      	adds	r5, r5, r0
 800856a:	b22d      	sxth	r5, r5
 800856c:	809d      	strh	r5, [r3, #4]
 800856e:	e5d9      	b.n	8008124 <lv_obj_get_scrollbar_area.part.0+0x34c>
    if((dir & LV_DIR_VER) &&
 8008570:	2303      	movs	r3, #3
 8008572:	4699      	mov	r9, r3
 8008574:	e63e      	b.n	80081f4 <lv_obj_get_scrollbar_area.part.0+0x41c>
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 8008576:	2000      	movs	r0, #0
 8008578:	f008 fb26 	bl	8010bc8 <lv_disp_get_dpi>
 800857c:	0083      	lsls	r3, r0, #2
 800857e:	1818      	adds	r0, r3, r0
 8008580:	0040      	lsls	r0, r0, #1
 8008582:	21a0      	movs	r1, #160	; 0xa0
 8008584:	3050      	adds	r0, #80	; 0x50
 8008586:	f7f7 fe59 	bl	800023c <__divsi3>
 800858a:	e6c9      	b.n	8008320 <lv_obj_get_scrollbar_area.part.0+0x548>
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 800858c:	2000      	movs	r0, #0
 800858e:	f008 fb1b 	bl	8010bc8 <lv_disp_get_dpi>
 8008592:	0083      	lsls	r3, r0, #2
 8008594:	1818      	adds	r0, r3, r0
 8008596:	0040      	lsls	r0, r0, #1
 8008598:	21a0      	movs	r1, #160	; 0xa0
 800859a:	3050      	adds	r0, #80	; 0x50
 800859c:	f7f7 fe4e 	bl	800023c <__divsi3>
 80085a0:	e69a      	b.n	80082d8 <lv_obj_get_scrollbar_area.part.0+0x500>
    if((dir & LV_DIR_HOR) &&
 80085a2:	464b      	mov	r3, r9
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d000      	beq.n	80085aa <lv_obj_get_scrollbar_area.part.0+0x7d2>
 80085a8:	e662      	b.n	8008270 <lv_obj_get_scrollbar_area.part.0+0x498>
        ver_draw = true;
 80085aa:	3301      	adds	r3, #1
 80085ac:	4699      	mov	r9, r3
    if((dir & LV_DIR_HOR) &&
 80085ae:	2700      	movs	r7, #0
 80085b0:	e47b      	b.n	8007eaa <lv_obj_get_scrollbar_area.part.0+0xd2>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 80085b2:	9b01      	ldr	r3, [sp, #4]
 80085b4:	1879      	adds	r1, r7, r1
 80085b6:	469c      	mov	ip, r3
 80085b8:	465b      	mov	r3, fp
 80085ba:	4461      	add	r1, ip
 80085bc:	b20f      	sxth	r7, r1
 80085be:	801f      	strh	r7, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 80085c0:	2000      	movs	r0, #0
 80085c2:	f008 fb01 	bl	8010bc8 <lv_disp_get_dpi>
 80085c6:	0083      	lsls	r3, r0, #2
 80085c8:	181b      	adds	r3, r3, r0
 80085ca:	2101      	movs	r1, #1
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	2bef      	cmp	r3, #239	; 0xef
 80085d0:	dc59      	bgt.n	8008686 <lv_obj_get_scrollbar_area.part.0+0x8ae>
 80085d2:	465b      	mov	r3, fp
 80085d4:	2504      	movs	r5, #4
 80085d6:	5f5d      	ldrsh	r5, [r3, r5]
 80085d8:	1879      	adds	r1, r7, r1
 80085da:	42a9      	cmp	r1, r5
 80085dc:	dc00      	bgt.n	80085e0 <lv_obj_get_scrollbar_area.part.0+0x808>
 80085de:	e760      	b.n	80084a2 <lv_obj_get_scrollbar_area.part.0+0x6ca>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 80085e0:	465b      	mov	r3, fp
 80085e2:	2000      	movs	r0, #0
 80085e4:	881d      	ldrh	r5, [r3, #0]
 80085e6:	f008 faef 	bl	8010bc8 <lv_disp_get_dpi>
 80085ea:	0083      	lsls	r3, r0, #2
 80085ec:	181b      	adds	r3, r3, r0
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	2001      	movs	r0, #1
 80085f2:	2bef      	cmp	r3, #239	; 0xef
 80085f4:	dc6b      	bgt.n	80086ce <lv_obj_get_scrollbar_area.part.0+0x8f6>
 80085f6:	465b      	mov	r3, fp
 80085f8:	182d      	adds	r5, r5, r0
 80085fa:	b22d      	sxth	r5, r5
 80085fc:	809d      	strh	r5, [r3, #4]
 80085fe:	e750      	b.n	80084a2 <lv_obj_get_scrollbar_area.part.0+0x6ca>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8008600:	9b03      	ldr	r3, [sp, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	dd00      	ble.n	8008608 <lv_obj_get_scrollbar_area.part.0+0x830>
 8008606:	e622      	b.n	800824e <lv_obj_get_scrollbar_area.part.0+0x476>
 8008608:	e5ba      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800860a:	2000      	movs	r0, #0
 800860c:	f008 fadc 	bl	8010bc8 <lv_disp_get_dpi>
 8008610:	0083      	lsls	r3, r0, #2
 8008612:	1818      	adds	r0, r3, r0
 8008614:	0040      	lsls	r0, r0, #1
 8008616:	21a0      	movs	r1, #160	; 0xa0
 8008618:	3050      	adds	r0, #80	; 0x50
 800861a:	f7f7 fe0f 	bl	800023c <__divsi3>
 800861e:	e78f      	b.n	8008540 <lv_obj_get_scrollbar_area.part.0+0x768>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 8008620:	2000      	movs	r0, #0
 8008622:	f008 fad1 	bl	8010bc8 <lv_disp_get_dpi>
 8008626:	0083      	lsls	r3, r0, #2
 8008628:	1818      	adds	r0, r3, r0
 800862a:	0040      	lsls	r0, r0, #1
 800862c:	21a0      	movs	r1, #160	; 0xa0
 800862e:	3050      	adds	r0, #80	; 0x50
 8008630:	f7f7 fe04 	bl	800023c <__divsi3>
 8008634:	e58f      	b.n	8008156 <lv_obj_get_scrollbar_area.part.0+0x37e>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 8008636:	2000      	movs	r0, #0
 8008638:	f008 fac6 	bl	8010bc8 <lv_disp_get_dpi>
 800863c:	0083      	lsls	r3, r0, #2
 800863e:	1818      	adds	r0, r3, r0
 8008640:	0040      	lsls	r0, r0, #1
 8008642:	21a0      	movs	r1, #160	; 0xa0
 8008644:	3050      	adds	r0, #80	; 0x50
 8008646:	f7f7 fdf9 	bl	800023c <__divsi3>
 800864a:	b283      	uxth	r3, r0
 800864c:	e67b      	b.n	8008346 <lv_obj_get_scrollbar_area.part.0+0x56e>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 800864e:	2000      	movs	r0, #0
 8008650:	f008 faba 	bl	8010bc8 <lv_disp_get_dpi>
 8008654:	0083      	lsls	r3, r0, #2
 8008656:	1818      	adds	r0, r3, r0
 8008658:	0040      	lsls	r0, r0, #1
 800865a:	21a0      	movs	r1, #160	; 0xa0
 800865c:	3050      	adds	r0, #80	; 0x50
 800865e:	f7f7 fded 	bl	800023c <__divsi3>
 8008662:	b280      	uxth	r0, r0
 8008664:	e649      	b.n	80082fa <lv_obj_get_scrollbar_area.part.0+0x522>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8008666:	9b01      	ldr	r3, [sp, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	dd00      	ble.n	800866e <lv_obj_get_scrollbar_area.part.0+0x896>
 800866c:	e6ea      	b.n	8008444 <lv_obj_get_scrollbar_area.part.0+0x66c>
 800866e:	e6f5      	b.n	800845c <lv_obj_get_scrollbar_area.part.0+0x684>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 8008670:	2000      	movs	r0, #0
 8008672:	f008 faa9 	bl	8010bc8 <lv_disp_get_dpi>
 8008676:	0083      	lsls	r3, r0, #2
 8008678:	1818      	adds	r0, r3, r0
 800867a:	0040      	lsls	r0, r0, #1
 800867c:	21a0      	movs	r1, #160	; 0xa0
 800867e:	3050      	adds	r0, #80	; 0x50
 8008680:	f7f7 fddc 	bl	800023c <__divsi3>
 8008684:	e723      	b.n	80084ce <lv_obj_get_scrollbar_area.part.0+0x6f6>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 8008686:	2000      	movs	r0, #0
 8008688:	f008 fa9e 	bl	8010bc8 <lv_disp_get_dpi>
 800868c:	0083      	lsls	r3, r0, #2
 800868e:	1818      	adds	r0, r3, r0
 8008690:	0040      	lsls	r0, r0, #1
 8008692:	21a0      	movs	r1, #160	; 0xa0
 8008694:	3050      	adds	r0, #80	; 0x50
 8008696:	f7f7 fdd1 	bl	800023c <__divsi3>
 800869a:	0001      	movs	r1, r0
 800869c:	e799      	b.n	80085d2 <lv_obj_get_scrollbar_area.part.0+0x7fa>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800869e:	2000      	movs	r0, #0
 80086a0:	f008 fa92 	bl	8010bc8 <lv_disp_get_dpi>
 80086a4:	0083      	lsls	r3, r0, #2
 80086a6:	1818      	adds	r0, r3, r0
 80086a8:	0040      	lsls	r0, r0, #1
 80086aa:	21a0      	movs	r1, #160	; 0xa0
 80086ac:	3050      	adds	r0, #80	; 0x50
 80086ae:	f7f7 fdc5 	bl	800023c <__divsi3>
 80086b2:	b280      	uxth	r0, r0
 80086b4:	e561      	b.n	800817a <lv_obj_get_scrollbar_area.part.0+0x3a2>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 80086b6:	2000      	movs	r0, #0
 80086b8:	f008 fa86 	bl	8010bc8 <lv_disp_get_dpi>
 80086bc:	0083      	lsls	r3, r0, #2
 80086be:	1818      	adds	r0, r3, r0
 80086c0:	0040      	lsls	r0, r0, #1
 80086c2:	21a0      	movs	r1, #160	; 0xa0
 80086c4:	3050      	adds	r0, #80	; 0x50
 80086c6:	f7f7 fdb9 	bl	800023c <__divsi3>
 80086ca:	b280      	uxth	r0, r0
 80086cc:	e74b      	b.n	8008566 <lv_obj_get_scrollbar_area.part.0+0x78e>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 80086ce:	2000      	movs	r0, #0
 80086d0:	f008 fa7a 	bl	8010bc8 <lv_disp_get_dpi>
 80086d4:	230a      	movs	r3, #10
 80086d6:	4358      	muls	r0, r3
 80086d8:	21a0      	movs	r1, #160	; 0xa0
 80086da:	3050      	adds	r0, #80	; 0x50
 80086dc:	f7f7 fdae 	bl	800023c <__divsi3>
 80086e0:	b280      	uxth	r0, r0
 80086e2:	e788      	b.n	80085f6 <lv_obj_get_scrollbar_area.part.0+0x81e>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 80086e4:	9b03      	ldr	r3, [sp, #12]
 80086e6:	454b      	cmp	r3, r9
 80086e8:	dd01      	ble.n	80086ee <lv_obj_get_scrollbar_area.part.0+0x916>
 80086ea:	f7ff fbde 	bl	8007eaa <lv_obj_get_scrollbar_area.part.0+0xd2>
 80086ee:	9b02      	ldr	r3, [sp, #8]
 80086f0:	454b      	cmp	r3, r9
 80086f2:	dd01      	ble.n	80086f8 <lv_obj_get_scrollbar_area.part.0+0x920>
 80086f4:	f7ff fbd9 	bl	8007eaa <lv_obj_get_scrollbar_area.part.0+0xd2>
 80086f8:	e542      	b.n	8008180 <lv_obj_get_scrollbar_area.part.0+0x3a8>
 80086fa:	2301      	movs	r3, #1
 80086fc:	4699      	mov	r9, r3
        hor_draw = true;
 80086fe:	001f      	movs	r7, r3
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8008700:	9b02      	ldr	r3, [sp, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	dd01      	ble.n	800870a <lv_obj_get_scrollbar_area.part.0+0x932>
 8008706:	f7ff fbd0 	bl	8007eaa <lv_obj_get_scrollbar_area.part.0+0xd2>
 800870a:	e628      	b.n	800835e <lv_obj_get_scrollbar_area.part.0+0x586>

0800870c <lv_obj_get_scroll_left>:
{
 800870c:	b510      	push	{r4, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800870e:	2216      	movs	r2, #22
 8008710:	2100      	movs	r1, #0
 8008712:	0004      	movs	r4, r0
 8008714:	f000 ffec 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8008718:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800871a:	2801      	cmp	r0, #1
 800871c:	d008      	beq.n	8008730 <lv_obj_get_scroll_left+0x24>
        if(obj->spec_attr == NULL) return 0;
 800871e:	68a3      	ldr	r3, [r4, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d003      	beq.n	800872c <lv_obj_get_scroll_left+0x20>
        return -obj->spec_attr->scroll.x;
 8008724:	8a18      	ldrh	r0, [r3, #16]
 8008726:	4240      	negs	r0, r0
 8008728:	b200      	sxth	r0, r0
}
 800872a:	bd10      	pop	{r4, pc}
        if(obj->spec_attr == NULL) return 0;
 800872c:	2000      	movs	r0, #0
 800872e:	e7fc      	b.n	800872a <lv_obj_get_scroll_left+0x1e>
 8008730:	0020      	movs	r0, r4
 8008732:	f7ff f94f 	bl	80079d4 <lv_obj_get_scroll_left.part.0>
 8008736:	e7f8      	b.n	800872a <lv_obj_get_scroll_left+0x1e>

08008738 <lv_obj_get_scroll_right>:
{
 8008738:	b510      	push	{r4, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800873a:	2216      	movs	r2, #22
 800873c:	2100      	movs	r1, #0
 800873e:	0004      	movs	r4, r0
 8008740:	f000 ffd6 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8008744:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8008746:	2801      	cmp	r0, #1
 8008748:	d105      	bne.n	8008756 <lv_obj_get_scroll_right+0x1e>
        if(obj->spec_attr == NULL) return 0;
 800874a:	68a3      	ldr	r3, [r4, #8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d006      	beq.n	800875e <lv_obj_get_scroll_right+0x26>
        return obj->spec_attr->scroll.x;
 8008750:	2010      	movs	r0, #16
 8008752:	5e18      	ldrsh	r0, [r3, r0]
}
 8008754:	bd10      	pop	{r4, pc}
 8008756:	0020      	movs	r0, r4
 8008758:	f7ff f9a8 	bl	8007aac <lv_obj_get_scroll_right.part.0>
 800875c:	e7fa      	b.n	8008754 <lv_obj_get_scroll_right+0x1c>
        if(obj->spec_attr == NULL) return 0;
 800875e:	2000      	movs	r0, #0
 8008760:	e7f8      	b.n	8008754 <lv_obj_get_scroll_right+0x1c>
 8008762:	46c0      	nop			; (mov r8, r8)

08008764 <lv_obj_scroll_by>:
{
 8008764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008766:	46c6      	mov	lr, r8
 8008768:	0016      	movs	r6, r2
    if(dx == 0 && dy == 0) return;
 800876a:	000a      	movs	r2, r1
{
 800876c:	b500      	push	{lr}
 800876e:	0004      	movs	r4, r0
 8008770:	000d      	movs	r5, r1
 8008772:	b090      	sub	sp, #64	; 0x40
    if(dx == 0 && dy == 0) return;
 8008774:	4332      	orrs	r2, r6
 8008776:	d00f      	beq.n	8008798 <lv_obj_scroll_by+0x34>
    if(anim_en == LV_ANIM_ON) {
 8008778:	2b01      	cmp	r3, #1
 800877a:	d011      	beq.n	80087a0 <lv_obj_scroll_by+0x3c>
        lv_anim_del(obj, scroll_y_anim);
 800877c:	4951      	ldr	r1, [pc, #324]	; (80088c4 <lv_obj_scroll_by+0x160>)
 800877e:	f008 fc23 	bl	8010fc8 <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 8008782:	4951      	ldr	r1, [pc, #324]	; (80088c8 <lv_obj_scroll_by+0x164>)
 8008784:	0020      	movs	r0, r4
 8008786:	f008 fc1f 	bl	8010fc8 <lv_anim_del>
        res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 800878a:	2200      	movs	r2, #0
 800878c:	2109      	movs	r1, #9
 800878e:	0020      	movs	r0, r4
 8008790:	f7f9 fae4 	bl	8001d5c <lv_event_send>
        if(res != LV_RES_OK) return;
 8008794:	2801      	cmp	r0, #1
 8008796:	d03b      	beq.n	8008810 <lv_obj_scroll_by+0xac>
}
 8008798:	b010      	add	sp, #64	; 0x40
 800879a:	bc80      	pop	{r7}
 800879c:	46b8      	mov	r8, r7
 800879e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_disp_t * d = lv_obj_get_disp(obj);
 80087a0:	f002 fbaa 	bl	800aef8 <lv_obj_get_disp>
 80087a4:	0007      	movs	r7, r0
        lv_anim_init(&a);
 80087a6:	4668      	mov	r0, sp
 80087a8:	f008 fbf6 	bl	8010f98 <lv_anim_init>
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 80087ac:	4b47      	ldr	r3, [pc, #284]	; (80088cc <lv_obj_scroll_by+0x168>)
    a->var = var;
 80087ae:	9400      	str	r4, [sp, #0]
    a->ready_cb = ready_cb;
 80087b0:	9303      	str	r3, [sp, #12]
        if(dx) {
 80087b2:	2d00      	cmp	r5, #0
 80087b4:	d14c      	bne.n	8008850 <lv_obj_scroll_by+0xec>
        if(dy) {
 80087b6:	2e00      	cmp	r6, #0
 80087b8:	d0ee      	beq.n	8008798 <lv_obj_scroll_by+0x34>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 80087ba:	0038      	movs	r0, r7
 80087bc:	f008 f9f0 	bl	8010ba0 <lv_disp_get_ver_res>
 80087c0:	0040      	lsls	r0, r0, #1
 80087c2:	0032      	movs	r2, r6
 80087c4:	2100      	movs	r1, #0
 80087c6:	1080      	asrs	r0, r0, #2
 80087c8:	f008 fd6e 	bl	80112a8 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 80087cc:	23c8      	movs	r3, #200	; 0xc8
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 80087ce:	0035      	movs	r5, r6
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	4298      	cmp	r0, r3
 80087d4:	d86e      	bhi.n	80088b4 <lv_obj_scroll_by+0x150>
    a->time = duration;
 80087d6:	28c8      	cmp	r0, #200	; 0xc8
 80087d8:	d36e      	bcc.n	80088b8 <lv_obj_scroll_by+0x154>
    if(obj->spec_attr == NULL) return 0;
 80087da:	68a3      	ldr	r3, [r4, #8]
 80087dc:	900a      	str	r0, [sp, #40]	; 0x28
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d06c      	beq.n	80088bc <lv_obj_scroll_by+0x158>
    return -obj->spec_attr->scroll.y;
 80087e2:	8a5d      	ldrh	r5, [r3, #18]
 80087e4:	426d      	negs	r5, r5
            lv_anim_set_values(&a, -sy, -sy + dy);
 80087e6:	b22d      	sxth	r5, r5
 80087e8:	426b      	negs	r3, r5
 80087ea:	1b75      	subs	r5, r6, r5
    a->start_value = start;
 80087ec:	9307      	str	r3, [sp, #28]
    a->current_value = start;
 80087ee:	9308      	str	r3, [sp, #32]
    a->exec_cb = exec_cb;
 80087f0:	4b34      	ldr	r3, [pc, #208]	; (80088c4 <lv_obj_scroll_by+0x160>)
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 80087f2:	466a      	mov	r2, sp
 80087f4:	9301      	str	r3, [sp, #4]
    a->path_cb = path_cb;
 80087f6:	4b36      	ldr	r3, [pc, #216]	; (80088d0 <lv_obj_scroll_by+0x16c>)
 80087f8:	2109      	movs	r1, #9
 80087fa:	0020      	movs	r0, r4
    a->end_value = end;
 80087fc:	9509      	str	r5, [sp, #36]	; 0x24
    a->path_cb = path_cb;
 80087fe:	9306      	str	r3, [sp, #24]
 8008800:	f7f9 faac 	bl	8001d5c <lv_event_send>
            if(res != LV_RES_OK) return;
 8008804:	2801      	cmp	r0, #1
 8008806:	d1c7      	bne.n	8008798 <lv_obj_scroll_by+0x34>
            lv_anim_start(&a);
 8008808:	4668      	mov	r0, sp
 800880a:	f008 fcc7 	bl	801119c <lv_anim_start>
 800880e:	e7c3      	b.n	8008798 <lv_obj_scroll_by+0x34>
    lv_obj_allocate_spec_attr(obj);
 8008810:	0020      	movs	r0, r4
 8008812:	f7fc fc31 	bl	8005078 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll.x += x;
 8008816:	68a3      	ldr	r3, [r4, #8]
    lv_obj_move_children_by(obj, x, y, true);
 8008818:	0029      	movs	r1, r5
    obj->spec_attr->scroll.x += x;
 800881a:	8a1a      	ldrh	r2, [r3, #16]
    lv_obj_move_children_by(obj, x, y, true);
 800881c:	0020      	movs	r0, r4
    obj->spec_attr->scroll.x += x;
 800881e:	1952      	adds	r2, r2, r5
 8008820:	821a      	strh	r2, [r3, #16]
    obj->spec_attr->scroll.y += y;
 8008822:	8a5a      	ldrh	r2, [r3, #18]
 8008824:	1992      	adds	r2, r2, r6
 8008826:	825a      	strh	r2, [r3, #18]
    lv_obj_move_children_by(obj, x, y, true);
 8008828:	0032      	movs	r2, r6
 800882a:	2301      	movs	r3, #1
 800882c:	f7fd fbbc 	bl	8005fa8 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 8008830:	2200      	movs	r2, #0
 8008832:	210b      	movs	r1, #11
 8008834:	0020      	movs	r0, r4
 8008836:	f7f9 fa91 	bl	8001d5c <lv_event_send>
    if(res != LV_RES_OK) return res;
 800883a:	2801      	cmp	r0, #1
 800883c:	d1ac      	bne.n	8008798 <lv_obj_scroll_by+0x34>
    lv_obj_invalidate(obj);
 800883e:	0020      	movs	r0, r4
 8008840:	f7fd fe7e 	bl	8006540 <lv_obj_invalidate>
        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 8008844:	2200      	movs	r2, #0
 8008846:	210a      	movs	r1, #10
 8008848:	0020      	movs	r0, r4
 800884a:	f7f9 fa87 	bl	8001d5c <lv_event_send>
        if(res != LV_RES_OK) return;
 800884e:	e7a3      	b.n	8008798 <lv_obj_scroll_by+0x34>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 8008850:	0038      	movs	r0, r7
 8008852:	f008 f991 	bl	8010b78 <lv_disp_get_hor_res>
 8008856:	0040      	lsls	r0, r0, #1
 8008858:	002a      	movs	r2, r5
 800885a:	2100      	movs	r1, #0
 800885c:	1080      	asrs	r0, r0, #2
 800885e:	f008 fd23 	bl	80112a8 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8008862:	23c8      	movs	r3, #200	; 0xc8
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 8008864:	46a8      	mov	r8, r5
 8008866:	005b      	lsls	r3, r3, #1
 8008868:	4298      	cmp	r0, r3
 800886a:	d821      	bhi.n	80088b0 <lv_obj_scroll_by+0x14c>
    a->time = duration;
 800886c:	28c8      	cmp	r0, #200	; 0xc8
 800886e:	d31d      	bcc.n	80088ac <lv_obj_scroll_by+0x148>
    if(obj->spec_attr == NULL) return 0;
 8008870:	68a3      	ldr	r3, [r4, #8]
 8008872:	900a      	str	r0, [sp, #40]	; 0x28
 8008874:	2b00      	cmp	r3, #0
 8008876:	d023      	beq.n	80088c0 <lv_obj_scroll_by+0x15c>
    return -obj->spec_attr->scroll.x;
 8008878:	8a1b      	ldrh	r3, [r3, #16]
 800887a:	425b      	negs	r3, r3
            lv_anim_set_values(&a, -sx, -sx + dx);
 800887c:	b21b      	sxth	r3, r3
 800887e:	425a      	negs	r2, r3
 8008880:	1aeb      	subs	r3, r5, r3
 8008882:	4698      	mov	r8, r3
    a->end_value = end;
 8008884:	4643      	mov	r3, r8
 8008886:	9309      	str	r3, [sp, #36]	; 0x24
    a->exec_cb = exec_cb;
 8008888:	4b0f      	ldr	r3, [pc, #60]	; (80088c8 <lv_obj_scroll_by+0x164>)
    a->start_value = start;
 800888a:	9207      	str	r2, [sp, #28]
    a->exec_cb = exec_cb;
 800888c:	9301      	str	r3, [sp, #4]
    a->path_cb = path_cb;
 800888e:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <lv_obj_scroll_by+0x16c>)
    a->current_value = start;
 8008890:	9208      	str	r2, [sp, #32]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8008892:	2109      	movs	r1, #9
 8008894:	466a      	mov	r2, sp
 8008896:	0020      	movs	r0, r4
    a->path_cb = path_cb;
 8008898:	9306      	str	r3, [sp, #24]
 800889a:	f7f9 fa5f 	bl	8001d5c <lv_event_send>
            if(res != LV_RES_OK) return;
 800889e:	2801      	cmp	r0, #1
 80088a0:	d000      	beq.n	80088a4 <lv_obj_scroll_by+0x140>
 80088a2:	e779      	b.n	8008798 <lv_obj_scroll_by+0x34>
            lv_anim_start(&a);
 80088a4:	4668      	mov	r0, sp
 80088a6:	f008 fc79 	bl	801119c <lv_anim_start>
 80088aa:	e784      	b.n	80087b6 <lv_obj_scroll_by+0x52>
    a->time = duration;
 80088ac:	20c8      	movs	r0, #200	; 0xc8
 80088ae:	e7df      	b.n	8008870 <lv_obj_scroll_by+0x10c>
 80088b0:	0018      	movs	r0, r3
 80088b2:	e7dd      	b.n	8008870 <lv_obj_scroll_by+0x10c>
 80088b4:	0018      	movs	r0, r3
 80088b6:	e790      	b.n	80087da <lv_obj_scroll_by+0x76>
 80088b8:	20c8      	movs	r0, #200	; 0xc8
 80088ba:	e78e      	b.n	80087da <lv_obj_scroll_by+0x76>
 80088bc:	2300      	movs	r3, #0
 80088be:	e795      	b.n	80087ec <lv_obj_scroll_by+0x88>
 80088c0:	2200      	movs	r2, #0
 80088c2:	e7df      	b.n	8008884 <lv_obj_scroll_by+0x120>
 80088c4:	08007be9 	.word	0x08007be9
 80088c8:	08007b95 	.word	0x08007b95
 80088cc:	080079c5 	.word	0x080079c5
 80088d0:	080112d1 	.word	0x080112d1

080088d4 <lv_obj_scroll_by_bounded.part.0>:
void lv_obj_scroll_by_bounded(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	46de      	mov	lr, fp
 80088d8:	4657      	mov	r7, sl
 80088da:	464e      	mov	r6, r9
 80088dc:	4645      	mov	r5, r8
 80088de:	0004      	movs	r4, r0
 80088e0:	b5e0      	push	{r5, r6, r7, lr}
 80088e2:	4698      	mov	r8, r3
 80088e4:	4689      	mov	r9, r1
 80088e6:	0017      	movs	r7, r2
    lv_obj_update_layout(obj);
 80088e8:	f7fe ffea 	bl	80078c0 <lv_obj_update_layout>
    if(obj->spec_attr == NULL) return 0;
 80088ec:	68a3      	ldr	r3, [r4, #8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d100      	bne.n	80088f4 <lv_obj_scroll_by_bounded.part.0+0x20>
 80088f2:	e082      	b.n	80089fa <lv_obj_scroll_by_bounded.part.0+0x126>
    return -obj->spec_attr->scroll.x;
 80088f4:	8a1d      	ldrh	r5, [r3, #16]
 80088f6:	426d      	negs	r5, r5
 80088f8:	b2ab      	uxth	r3, r5
 80088fa:	469a      	mov	sl, r3
 80088fc:	b22d      	sxth	r5, r5
    lv_coord_t x_bounded = x_current + dx;
 80088fe:	464b      	mov	r3, r9
 8008900:	4652      	mov	r2, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8008902:	2100      	movs	r1, #0
 8008904:	1a9e      	subs	r6, r3, r2
 8008906:	0020      	movs	r0, r4
 8008908:	2216      	movs	r2, #22
 800890a:	f000 fef1 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800890e:	b2c0      	uxtb	r0, r0
 8008910:	b236      	sxth	r6, r6
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8008912:	2801      	cmp	r0, #1
 8008914:	d018      	beq.n	8008948 <lv_obj_scroll_by_bounded.part.0+0x74>
        if(x_bounded < 0) {
 8008916:	2e00      	cmp	r6, #0
 8008918:	db49      	blt.n	80089ae <lv_obj_scroll_by_bounded.part.0+0xda>
    if(obj->spec_attr == NULL) return 0;
 800891a:	68a3      	ldr	r3, [r4, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d100      	bne.n	8008922 <lv_obj_scroll_by_bounded.part.0+0x4e>
 8008920:	e070      	b.n	8008a04 <lv_obj_scroll_by_bounded.part.0+0x130>
    return -obj->spec_attr->scroll.y;
 8008922:	8a59      	ldrh	r1, [r3, #18]
 8008924:	4249      	negs	r1, r1
 8008926:	b28e      	uxth	r6, r1
 8008928:	b20a      	sxth	r2, r1
    lv_coord_t y_bounded = y_current + dy;
 800892a:	1bbb      	subs	r3, r7, r6
 800892c:	b219      	sxth	r1, r3
 800892e:	4689      	mov	r9, r1
    if(y_bounded < 0) {
 8008930:	041b      	lsls	r3, r3, #16
 8008932:	d500      	bpl.n	8008936 <lv_obj_scroll_by_bounded.part.0+0x62>
 8008934:	e06e      	b.n	8008a14 <lv_obj_scroll_by_bounded.part.0+0x140>
    if(dx || dy) {
 8008936:	002b      	movs	r3, r5
 8008938:	4313      	orrs	r3, r2
 800893a:	d132      	bne.n	80089a2 <lv_obj_scroll_by_bounded.part.0+0xce>
}
 800893c:	bcf0      	pop	{r4, r5, r6, r7}
 800893e:	46bb      	mov	fp, r7
 8008940:	46b2      	mov	sl, r6
 8008942:	46a9      	mov	r9, r5
 8008944:	46a0      	mov	r8, r4
 8008946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(x_bounded > 0) {
 8008948:	2e00      	cmp	r6, #0
 800894a:	dde6      	ble.n	800891a <lv_obj_scroll_by_bounded.part.0+0x46>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800894c:	2216      	movs	r2, #22
 800894e:	2100      	movs	r1, #0
 8008950:	0020      	movs	r0, r4
 8008952:	f000 fecd 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8008956:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8008958:	2801      	cmp	r0, #1
 800895a:	d100      	bne.n	800895e <lv_obj_scroll_by_bounded.part.0+0x8a>
 800895c:	e0a1      	b.n	8008aa2 <lv_obj_scroll_by_bounded.part.0+0x1ce>
        if(obj->spec_attr == NULL) return 0;
 800895e:	68a3      	ldr	r3, [r4, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d06c      	beq.n	8008a3e <lv_obj_scroll_by_bounded.part.0+0x16a>
        return -obj->spec_attr->scroll.x;
 8008964:	8a18      	ldrh	r0, [r3, #16]
 8008966:	4240      	negs	r0, r0
 8008968:	b203      	sxth	r3, r0
 800896a:	4699      	mov	r9, r3
 800896c:	b285      	uxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800896e:	2216      	movs	r2, #22
 8008970:	2100      	movs	r1, #0
 8008972:	0020      	movs	r0, r4
 8008974:	f000 febc 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8008978:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800897a:	2801      	cmp	r0, #1
 800897c:	d176      	bne.n	8008a6c <lv_obj_scroll_by_bounded.part.0+0x198>
        if(obj->spec_attr == NULL) return 0;
 800897e:	68a3      	ldr	r3, [r4, #8]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d100      	bne.n	8008986 <lv_obj_scroll_by_bounded.part.0+0xb2>
 8008984:	e093      	b.n	8008aae <lv_obj_scroll_by_bounded.part.0+0x1da>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 8008986:	8a18      	ldrh	r0, [r3, #16]
 8008988:	1828      	adds	r0, r5, r0
 800898a:	b200      	sxth	r0, r0
    dx = x_bounded - x_current;
 800898c:	43c2      	mvns	r2, r0
 800898e:	17d2      	asrs	r2, r2, #31
 8008990:	0011      	movs	r1, r2
 8008992:	4001      	ands	r1, r0
 8008994:	000d      	movs	r5, r1
 8008996:	42b1      	cmp	r1, r6
 8008998:	dd00      	ble.n	800899c <lv_obj_scroll_by_bounded.part.0+0xc8>
 800899a:	1c35      	adds	r5, r6, #0
 800899c:	4455      	add	r5, sl
 800899e:	b22d      	sxth	r5, r5
 80089a0:	e7bc      	b.n	800891c <lv_obj_scroll_by_bounded.part.0+0x48>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 80089a2:	4643      	mov	r3, r8
 80089a4:	0029      	movs	r1, r5
 80089a6:	0020      	movs	r0, r4
 80089a8:	f7ff fedc 	bl	8008764 <lv_obj_scroll_by>
 80089ac:	e7c6      	b.n	800893c <lv_obj_scroll_by_bounded.part.0+0x68>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80089ae:	2216      	movs	r2, #22
 80089b0:	2100      	movs	r1, #0
 80089b2:	0020      	movs	r0, r4
 80089b4:	f000 fe9c 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80089b8:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 80089ba:	2801      	cmp	r0, #1
 80089bc:	d05d      	beq.n	8008a7a <lv_obj_scroll_by_bounded.part.0+0x1a6>
        if(obj->spec_attr == NULL) return 0;
 80089be:	68a3      	ldr	r3, [r4, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d038      	beq.n	8008a36 <lv_obj_scroll_by_bounded.part.0+0x162>
        return -obj->spec_attr->scroll.x;
 80089c4:	8a1d      	ldrh	r5, [r3, #16]
 80089c6:	426d      	negs	r5, r5
 80089c8:	b2ab      	uxth	r3, r5
 80089ca:	469b      	mov	fp, r3
 80089cc:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80089ce:	2216      	movs	r2, #22
 80089d0:	2100      	movs	r1, #0
 80089d2:	0020      	movs	r0, r4
 80089d4:	f000 fe8c 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80089d8:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80089da:	2801      	cmp	r0, #1
 80089dc:	d133      	bne.n	8008a46 <lv_obj_scroll_by_bounded.part.0+0x172>
        if(obj->spec_attr == NULL) return 0;
 80089de:	68a3      	ldr	r3, [r4, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d051      	beq.n	8008a88 <lv_obj_scroll_by_bounded.part.0+0x1b4>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 80089e4:	8a1d      	ldrh	r5, [r3, #16]
 80089e6:	445d      	add	r5, fp
 80089e8:	b228      	sxth	r0, r5
            if(scroll_max < 0) scroll_max = 0;
 80089ea:	43c5      	mvns	r5, r0
 80089ec:	17ed      	asrs	r5, r5, #31
 80089ee:	4005      	ands	r5, r0
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 80089f0:	426a      	negs	r2, r5
 80089f2:	4296      	cmp	r6, r2
 80089f4:	db36      	blt.n	8008a64 <lv_obj_scroll_by_bounded.part.0+0x190>
 80089f6:	464d      	mov	r5, r9
 80089f8:	e793      	b.n	8008922 <lv_obj_scroll_by_bounded.part.0+0x4e>
 80089fa:	2300      	movs	r3, #0
    if(obj->spec_attr == NULL) return 0;
 80089fc:	2500      	movs	r5, #0
 80089fe:	469a      	mov	sl, r3
 8008a00:	e77d      	b.n	80088fe <lv_obj_scroll_by_bounded.part.0+0x2a>
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 8008a02:	464d      	mov	r5, r9
 8008a04:	2600      	movs	r6, #0
    lv_coord_t y_bounded = y_current + dy;
 8008a06:	1bbb      	subs	r3, r7, r6
 8008a08:	b219      	sxth	r1, r3
    if(obj->spec_attr == NULL) return 0;
 8008a0a:	2200      	movs	r2, #0
    lv_coord_t y_bounded = y_current + dy;
 8008a0c:	4689      	mov	r9, r1
    if(y_bounded < 0) {
 8008a0e:	041b      	lsls	r3, r3, #16
 8008a10:	d400      	bmi.n	8008a14 <lv_obj_scroll_by_bounded.part.0+0x140>
 8008a12:	e790      	b.n	8008936 <lv_obj_scroll_by_bounded.part.0+0x62>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 8008a14:	0020      	movs	r0, r4
 8008a16:	f7ff f96b 	bl	8007cf0 <lv_obj_get_scroll_bottom>
 8008a1a:	1830      	adds	r0, r6, r0
 8008a1c:	b202      	sxth	r2, r0
        if(scroll_max < 0) scroll_max = 0;
 8008a1e:	43d0      	mvns	r0, r2
 8008a20:	17c0      	asrs	r0, r0, #31
 8008a22:	0003      	movs	r3, r0
 8008a24:	4013      	ands	r3, r2
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 8008a26:	4258      	negs	r0, r3
 8008a28:	003a      	movs	r2, r7
 8008a2a:	4581      	cmp	r9, r0
 8008a2c:	db00      	blt.n	8008a30 <lv_obj_scroll_by_bounded.part.0+0x15c>
 8008a2e:	e782      	b.n	8008936 <lv_obj_scroll_by_bounded.part.0+0x62>
    dy = y_bounded - y_current;
 8008a30:	1af2      	subs	r2, r6, r3
 8008a32:	b212      	sxth	r2, r2
 8008a34:	e77f      	b.n	8008936 <lv_obj_scroll_by_bounded.part.0+0x62>
 8008a36:	2300      	movs	r3, #0
        if(obj->spec_attr == NULL) return 0;
 8008a38:	2500      	movs	r5, #0
 8008a3a:	469b      	mov	fp, r3
 8008a3c:	e7c7      	b.n	80089ce <lv_obj_scroll_by_bounded.part.0+0xfa>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2500      	movs	r5, #0
 8008a42:	4699      	mov	r9, r3
 8008a44:	e793      	b.n	800896e <lv_obj_scroll_by_bounded.part.0+0x9a>
 8008a46:	0020      	movs	r0, r4
 8008a48:	f7ff f830 	bl	8007aac <lv_obj_get_scroll_right.part.0>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 8008a4c:	4458      	add	r0, fp
 8008a4e:	b200      	sxth	r0, r0
            if(scroll_max < 0) scroll_max = 0;
 8008a50:	43c5      	mvns	r5, r0
 8008a52:	17ed      	asrs	r5, r5, #31
 8008a54:	4005      	ands	r5, r0
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 8008a56:	426b      	negs	r3, r5
 8008a58:	429e      	cmp	r6, r3
 8008a5a:	db02      	blt.n	8008a62 <lv_obj_scroll_by_bounded.part.0+0x18e>
    if(obj->spec_attr == NULL) return 0;
 8008a5c:	464d      	mov	r5, r9
 8008a5e:	68a3      	ldr	r3, [r4, #8]
 8008a60:	e75c      	b.n	800891c <lv_obj_scroll_by_bounded.part.0+0x48>
 8008a62:	68a3      	ldr	r3, [r4, #8]
    dx = x_bounded - x_current;
 8008a64:	4652      	mov	r2, sl
 8008a66:	1b55      	subs	r5, r2, r5
 8008a68:	b22d      	sxth	r5, r5
 8008a6a:	e757      	b.n	800891c <lv_obj_scroll_by_bounded.part.0+0x48>
 8008a6c:	0020      	movs	r0, r4
 8008a6e:	f7ff f81d 	bl	8007aac <lv_obj_get_scroll_right.part.0>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 8008a72:	1828      	adds	r0, r5, r0
    if(obj->spec_attr == NULL) return 0;
 8008a74:	68a3      	ldr	r3, [r4, #8]
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 8008a76:	b200      	sxth	r0, r0
 8008a78:	e788      	b.n	800898c <lv_obj_scroll_by_bounded.part.0+0xb8>
 8008a7a:	0020      	movs	r0, r4
 8008a7c:	f7fe ffaa 	bl	80079d4 <lv_obj_get_scroll_left.part.0>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 8008a80:	b283      	uxth	r3, r0
 8008a82:	0005      	movs	r5, r0
 8008a84:	469b      	mov	fp, r3
 8008a86:	e7a2      	b.n	80089ce <lv_obj_scroll_by_bounded.part.0+0xfa>
            if(scroll_max < 0) scroll_max = 0;
 8008a88:	43e8      	mvns	r0, r5
 8008a8a:	17c0      	asrs	r0, r0, #31
 8008a8c:	4005      	ands	r5, r0
 8008a8e:	b22b      	sxth	r3, r5
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 8008a90:	425b      	negs	r3, r3
 8008a92:	42b3      	cmp	r3, r6
 8008a94:	ddb5      	ble.n	8008a02 <lv_obj_scroll_by_bounded.part.0+0x12e>
    dx = x_bounded - x_current;
 8008a96:	4653      	mov	r3, sl
 8008a98:	1b5d      	subs	r5, r3, r5
 8008a9a:	2600      	movs	r6, #0
    if(obj->spec_attr == NULL) return 0;
 8008a9c:	2200      	movs	r2, #0
    dx = x_bounded - x_current;
 8008a9e:	b22d      	sxth	r5, r5
    if(obj->spec_attr == NULL) return 0;
 8008aa0:	e743      	b.n	800892a <lv_obj_scroll_by_bounded.part.0+0x56>
 8008aa2:	0020      	movs	r0, r4
 8008aa4:	f7fe ff96 	bl	80079d4 <lv_obj_get_scroll_left.part.0>
 8008aa8:	4681      	mov	r9, r0
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 8008aaa:	b285      	uxth	r5, r0
 8008aac:	e75f      	b.n	800896e <lv_obj_scroll_by_bounded.part.0+0x9a>
    dx = x_bounded - x_current;
 8008aae:	464b      	mov	r3, r9
 8008ab0:	43d8      	mvns	r0, r3
 8008ab2:	17c0      	asrs	r0, r0, #31
 8008ab4:	4018      	ands	r0, r3
 8008ab6:	b203      	sxth	r3, r0
 8008ab8:	42b3      	cmp	r3, r6
 8008aba:	dd00      	ble.n	8008abe <lv_obj_scroll_by_bounded.part.0+0x1ea>
 8008abc:	1c30      	adds	r0, r6, #0
 8008abe:	4450      	add	r0, sl
 8008ac0:	2600      	movs	r6, #0
    if(obj->spec_attr == NULL) return 0;
 8008ac2:	2200      	movs	r2, #0
    dx = x_bounded - x_current;
 8008ac4:	b205      	sxth	r5, r0
    if(obj->spec_attr == NULL) return 0;
 8008ac6:	e730      	b.n	800892a <lv_obj_scroll_by_bounded.part.0+0x56>

08008ac8 <scroll_area_into_view>:

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 8008ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aca:	4657      	mov	r7, sl
 8008acc:	46de      	mov	lr, fp
 8008ace:	464e      	mov	r6, r9
 8008ad0:	4645      	mov	r5, r8
 8008ad2:	b5e0      	push	{r5, r6, r7, lr}
 8008ad4:	0007      	movs	r7, r0
 8008ad6:	b08b      	sub	sp, #44	; 0x2c
    lv_obj_t * parent = lv_obj_get_parent(child);
 8008ad8:	0008      	movs	r0, r1
{
 8008ada:	468a      	mov	sl, r1
 8008adc:	0016      	movs	r6, r2
 8008ade:	9302      	str	r3, [sp, #8]
    lv_obj_t * parent = lv_obj_get_parent(child);
 8008ae0:	f002 fa32 	bl	800af48 <lv_obj_get_parent>
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 8008ae4:	2110      	movs	r1, #16
    lv_obj_t * parent = lv_obj_get_parent(child);
 8008ae6:	0004      	movs	r4, r0
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 8008ae8:	f7fc faaa 	bl	8005040 <lv_obj_has_flag>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d100      	bne.n	8008af2 <scroll_area_into_view+0x2a>
 8008af0:	e0d9      	b.n	8008ca6 <scroll_area_into_view+0x1de>
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 8008af2:	68a3      	ldr	r3, [r4, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d100      	bne.n	8008afa <scroll_area_into_view+0x32>
 8008af8:	e197      	b.n	8008e2a <scroll_area_into_view+0x362>
 8008afa:	7e5a      	ldrb	r2, [r3, #25]
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 8008afc:	7e1b      	ldrb	r3, [r3, #24]
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 8008afe:	0712      	lsls	r2, r2, #28
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 8008b00:	069b      	lsls	r3, r3, #26
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 8008b02:	0f12      	lsrs	r2, r2, #28
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 8008b04:	0f9b      	lsrs	r3, r3, #30
 8008b06:	469b      	mov	fp, r3
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
    else area_tmp = area;
 8008b08:	46b9      	mov	r9, r7
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 8008b0a:	9201      	str	r2, [sp, #4]
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 8008b0c:	d002      	beq.n	8008b14 <scroll_area_into_view+0x4c>
 8008b0e:	2310      	movs	r3, #16
 8008b10:	4453      	add	r3, sl
 8008b12:	4699      	mov	r9, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008b14:	2232      	movs	r2, #50	; 0x32
 8008b16:	2100      	movs	r1, #0
 8008b18:	0020      	movs	r0, r4
 8008b1a:	f000 fde9 	bl	80096f0 <lv_obj_get_style_prop>
 8008b1e:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008b20:	2210      	movs	r2, #16
 8008b22:	2100      	movs	r1, #0
 8008b24:	0020      	movs	r0, r4
 8008b26:	f000 fde3 	bl	80096f0 <lv_obj_get_style_prop>

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8008b2a:	b2ab      	uxth	r3, r5
 8008b2c:	4698      	mov	r8, r3
 8008b2e:	4440      	add	r0, r8
 8008b30:	b285      	uxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8008b32:	2211      	movs	r2, #17
 8008b34:	2100      	movs	r1, #0
 8008b36:	0020      	movs	r0, r4
 8008b38:	9504      	str	r5, [sp, #16]
 8008b3a:	f000 fdd9 	bl	80096f0 <lv_obj_get_style_prop>
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 8008b3e:	4440      	add	r0, r8
 8008b40:	b281      	uxth	r1, r0
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8008b42:	8873      	ldrh	r3, [r6, #2]
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 8008b44:	9105      	str	r1, [sp, #20]
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8008b46:	1aea      	subs	r2, r5, r3
 8008b48:	8a65      	ldrh	r5, [r4, #18]
 8008b4a:	468c      	mov	ip, r1
 8008b4c:	18ad      	adds	r5, r5, r2
 8008b4e:	464a      	mov	r2, r9
 8008b50:	8852      	ldrh	r2, [r2, #2]
 8008b52:	4463      	add	r3, ip
 8008b54:	1aad      	subs	r5, r5, r2
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8008b56:	464a      	mov	r2, r9
 8008b58:	88d2      	ldrh	r2, [r2, #6]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	4694      	mov	ip, r2
 8008b5e:	9207      	str	r2, [sp, #28]
 8008b60:	8ae0      	ldrh	r0, [r4, #22]
 8008b62:	9309      	str	r3, [sp, #36]	; 0x24
 8008b64:	1a1b      	subs	r3, r3, r0
 8008b66:	4463      	add	r3, ip
 8008b68:	b21b      	sxth	r3, r3
 8008b6a:	9008      	str	r0, [sp, #32]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8008b6c:	0020      	movs	r0, r4
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 8008b6e:	9303      	str	r3, [sp, #12]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8008b70:	f7fd f950 	bl	8005e14 <lv_obj_get_height>
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 8008b74:	b22d      	sxth	r5, r5
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 8008b76:	9b03      	ldr	r3, [sp, #12]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8008b78:	9006      	str	r0, [sp, #24]
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 8008b7a:	2d00      	cmp	r5, #0
 8008b7c:	da00      	bge.n	8008b80 <scroll_area_into_view+0xb8>
 8008b7e:	e0da      	b.n	8008d36 <scroll_area_into_view+0x26e>
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	da00      	bge.n	8008b86 <scroll_area_into_view+0xbe>
 8008b84:	e099      	b.n	8008cba <scroll_area_into_view+0x1f2>
    lv_coord_t y_scroll = 0;
 8008b86:	2500      	movs	r5, #0
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 8008b88:	68a2      	ldr	r2, [r4, #8]
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
        if(sb + y_scroll < 0) y_scroll = 0;
    }

    switch(snap_y) {
 8008b8a:	465b      	mov	r3, fp
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d100      	bne.n	8008b92 <scroll_area_into_view+0xca>
 8008b90:	e0a4      	b.n	8008cdc <scroll_area_into_view+0x214>
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d100      	bne.n	8008b98 <scroll_area_into_view+0xd0>
 8008b96:	e10d      	b.n	8008db4 <scroll_area_into_view+0x2ec>
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d100      	bne.n	8008b9e <scroll_area_into_view+0xd6>
 8008b9c:	e125      	b.n	8008dea <scroll_area_into_view+0x322>
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 8008b9e:	2a00      	cmp	r2, #0
 8008ba0:	d100      	bne.n	8008ba4 <scroll_area_into_view+0xdc>
 8008ba2:	e0a5      	b.n	8008cf0 <scroll_area_into_view+0x228>
 8008ba4:	7e13      	ldrb	r3, [r2, #24]
 8008ba6:	071b      	lsls	r3, r3, #28
 8008ba8:	0f9b      	lsrs	r3, r3, #30
 8008baa:	4699      	mov	r9, r3
            break;
    }

    lv_coord_t x_scroll = 0;
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 8008bac:	d001      	beq.n	8008bb2 <scroll_area_into_view+0xea>
 8008bae:	4657      	mov	r7, sl
 8008bb0:	3710      	adds	r7, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8008bb2:	2212      	movs	r2, #18
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	0020      	movs	r0, r4
 8008bb8:	f000 fd9a 	bl	80096f0 <lv_obj_get_style_prop>
    else area_tmp = area;

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 8008bbc:	4440      	add	r0, r8
 8008bbe:	b283      	uxth	r3, r0
 8008bc0:	469a      	mov	sl, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8008bc2:	2213      	movs	r2, #19
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	0020      	movs	r0, r4
 8008bc8:	f000 fd92 	bl	80096f0 <lv_obj_get_style_prop>
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8008bcc:	4652      	mov	r2, sl
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 8008bce:	4440      	add	r0, r8
 8008bd0:	b283      	uxth	r3, r0
 8008bd2:	469b      	mov	fp, r3
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8008bd4:	8833      	ldrh	r3, [r6, #0]
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 8008bd6:	8aa0      	ldrh	r0, [r4, #20]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 8008bd8:	1ad1      	subs	r1, r2, r3
 8008bda:	8a22      	ldrh	r2, [r4, #16]
 8008bdc:	445b      	add	r3, fp
 8008bde:	1852      	adds	r2, r2, r1
 8008be0:	8839      	ldrh	r1, [r7, #0]
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	1a52      	subs	r2, r2, r1
 8008be6:	b211      	sxth	r1, r2
 8008be8:	4688      	mov	r8, r1
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 8008bea:	88b9      	ldrh	r1, [r7, #4]
 8008bec:	468c      	mov	ip, r1
 8008bee:	1a19      	subs	r1, r3, r0
 8008bf0:	4461      	add	r1, ip
 8008bf2:	b209      	sxth	r1, r1
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 8008bf4:	0412      	lsls	r2, r2, #16
 8008bf6:	d500      	bpl.n	8008bfa <scroll_area_into_view+0x132>
 8008bf8:	e07d      	b.n	8008cf6 <scroll_area_into_view+0x22e>
 8008bfa:	2900      	cmp	r1, #0
 8008bfc:	da00      	bge.n	8008c00 <scroll_area_into_view+0x138>
 8008bfe:	e0ac      	b.n	8008d5a <scroll_area_into_view+0x292>
 8008c00:	2300      	movs	r3, #0
 8008c02:	4698      	mov	r8, r3
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
        if(sr + x_scroll < 0) x_scroll = 0;
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 8008c04:	0020      	movs	r0, r4
 8008c06:	f7fd f8fd 	bl	8005e04 <lv_obj_get_width>
    switch(snap_x) {
 8008c0a:	464b      	mov	r3, r9
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d100      	bne.n	8008c12 <scroll_area_into_view+0x14a>
 8008c10:	e0c1      	b.n	8008d96 <scroll_area_into_view+0x2ce>
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d100      	bne.n	8008c18 <scroll_area_into_view+0x150>
 8008c16:	e0f1      	b.n	8008dfc <scroll_area_into_view+0x334>
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d100      	bne.n	8008c1e <scroll_area_into_view+0x156>
 8008c1c:	e0c3      	b.n	8008da6 <scroll_area_into_view+0x2de>
            x_scroll += snap_goal - act;
            break;
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 8008c1e:	498c      	ldr	r1, [pc, #560]	; (8008e50 <scroll_area_into_view+0x388>)
 8008c20:	0020      	movs	r0, r4
 8008c22:	f008 f9d1 	bl	8010fc8 <lv_anim_del>
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 8008c26:	498b      	ldr	r1, [pc, #556]	; (8008e54 <scroll_area_into_view+0x38c>)
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 8008c28:	0007      	movs	r7, r0
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 8008c2a:	0020      	movs	r0, r4
 8008c2c:	f008 f9cc 	bl	8010fc8 <lv_anim_del>
    if(y_del || x_del) {
 8008c30:	2f00      	cmp	r7, #0
 8008c32:	d000      	beq.n	8008c36 <scroll_area_into_view+0x16e>
 8008c34:	e077      	b.n	8008d26 <scroll_area_into_view+0x25e>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d000      	beq.n	8008c3c <scroll_area_into_view+0x174>
 8008c3a:	e074      	b.n	8008d26 <scroll_area_into_view+0x25e>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
        if(res != LV_RES_OK) return;
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 8008c3c:	9b01      	ldr	r3, [sp, #4]
 8008c3e:	07db      	lsls	r3, r3, #31
 8008c40:	d405      	bmi.n	8008c4e <scroll_area_into_view+0x186>
 8008c42:	4643      	mov	r3, r8
 8008c44:	43db      	mvns	r3, r3
 8008c46:	4642      	mov	r2, r8
 8008c48:	17db      	asrs	r3, r3, #31
 8008c4a:	401a      	ands	r2, r3
 8008c4c:	4690      	mov	r8, r2
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 8008c4e:	9b01      	ldr	r3, [sp, #4]
 8008c50:	079b      	lsls	r3, r3, #30
 8008c52:	d406      	bmi.n	8008c62 <scroll_area_into_view+0x19a>
 8008c54:	4642      	mov	r2, r8
 8008c56:	4643      	mov	r3, r8
 8008c58:	2a00      	cmp	r2, #0
 8008c5a:	dd00      	ble.n	8008c5e <scroll_area_into_view+0x196>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	b21b      	sxth	r3, r3
 8008c60:	4698      	mov	r8, r3
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 8008c62:	9b01      	ldr	r3, [sp, #4]
 8008c64:	075b      	lsls	r3, r3, #29
 8008c66:	d403      	bmi.n	8008c70 <scroll_area_into_view+0x1a8>
 8008c68:	43eb      	mvns	r3, r5
 8008c6a:	17db      	asrs	r3, r3, #31
 8008c6c:	401d      	ands	r5, r3
 8008c6e:	b22d      	sxth	r5, r5
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 8008c70:	2308      	movs	r3, #8
 8008c72:	9a01      	ldr	r2, [sp, #4]
 8008c74:	4213      	tst	r3, r2
 8008c76:	d104      	bne.n	8008c82 <scroll_area_into_view+0x1ba>
 8008c78:	1c2b      	adds	r3, r5, #0
 8008c7a:	2d00      	cmp	r5, #0
 8008c7c:	dd00      	ble.n	8008c80 <scroll_area_into_view+0x1b8>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	b21d      	sxth	r5, r3

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 8008c82:	2200      	movs	r2, #0
 8008c84:	5eb3      	ldrsh	r3, [r6, r2]
 8008c86:	9a02      	ldr	r2, [sp, #8]
 8008c88:	2a00      	cmp	r2, #0
 8008c8a:	d013      	beq.n	8008cb4 <scroll_area_into_view+0x1ec>
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8008c8c:	8872      	ldrh	r2, [r6, #2]
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 8008c8e:	4443      	add	r3, r8
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8008c90:	1952      	adds	r2, r2, r5
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 8008c92:	b21b      	sxth	r3, r3
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8008c94:	b212      	sxth	r2, r2
 8008c96:	8033      	strh	r3, [r6, #0]
 8008c98:	8072      	strh	r2, [r6, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8008c9a:	4641      	mov	r1, r8
 8008c9c:	002a      	movs	r2, r5
 8008c9e:	0020      	movs	r0, r4
 8008ca0:	9b02      	ldr	r3, [sp, #8]
 8008ca2:	f7ff fd5f 	bl	8008764 <lv_obj_scroll_by>
}
 8008ca6:	b00b      	add	sp, #44	; 0x2c
 8008ca8:	bcf0      	pop	{r4, r5, r6, r7}
 8008caa:	46bb      	mov	fp, r7
 8008cac:	46b2      	mov	sl, r6
 8008cae:	46a9      	mov	r9, r5
 8008cb0:	46a0      	mov	r8, r4
 8008cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8008cb4:	2102      	movs	r1, #2
 8008cb6:	5e72      	ldrsh	r2, [r6, r1]
 8008cb8:	e7ed      	b.n	8008c96 <scroll_area_into_view+0x1ce>
    if(obj->spec_attr == NULL) return 0;
 8008cba:	68a2      	ldr	r2, [r4, #8]
    else if(top_diff > 0) {
 8008cbc:	2d00      	cmp	r5, #0
 8008cbe:	d100      	bne.n	8008cc2 <scroll_area_into_view+0x1fa>
 8008cc0:	e763      	b.n	8008b8a <scroll_area_into_view+0xc2>
    if(obj->spec_attr == NULL) return 0;
 8008cc2:	2a00      	cmp	r2, #0
 8008cc4:	d047      	beq.n	8008d56 <scroll_area_into_view+0x28e>
    return -obj->spec_attr->scroll.y;
 8008cc6:	8a53      	ldrh	r3, [r2, #18]
 8008cc8:	425b      	negs	r3, r3
        if(st - y_scroll < 0) y_scroll = 0;
 8008cca:	b21b      	sxth	r3, r3
 8008ccc:	1b5b      	subs	r3, r3, r5
 8008cce:	43db      	mvns	r3, r3
 8008cd0:	17db      	asrs	r3, r3, #31
 8008cd2:	401d      	ands	r5, r3
    switch(snap_y) {
 8008cd4:	465b      	mov	r3, fp
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d000      	beq.n	8008cdc <scroll_area_into_view+0x214>
 8008cda:	e75a      	b.n	8008b92 <scroll_area_into_view+0xca>
            y_scroll += snap_goal - act;
 8008cdc:	9b05      	ldr	r3, [sp, #20]
 8008cde:	8ae5      	ldrh	r5, [r4, #22]
 8008ce0:	1aed      	subs	r5, r5, r3
 8008ce2:	464b      	mov	r3, r9
 8008ce4:	88db      	ldrh	r3, [r3, #6]
 8008ce6:	1aed      	subs	r5, r5, r3
 8008ce8:	b22d      	sxth	r5, r5
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 8008cea:	2a00      	cmp	r2, #0
 8008cec:	d000      	beq.n	8008cf0 <scroll_area_into_view+0x228>
 8008cee:	e759      	b.n	8008ba4 <scroll_area_into_view+0xdc>
    else return LV_SCROLL_SNAP_NONE;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4699      	mov	r9, r3
 8008cf4:	e75d      	b.n	8008bb2 <scroll_area_into_view+0xea>
    else if(right_diff > 0) {
 8008cf6:	2900      	cmp	r1, #0
 8008cf8:	dc00      	bgt.n	8008cfc <scroll_area_into_view+0x234>
 8008cfa:	e781      	b.n	8008c00 <scroll_area_into_view+0x138>
        x_scroll = -right_diff;
 8008cfc:	4662      	mov	r2, ip
 8008cfe:	1ac3      	subs	r3, r0, r3
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	b21b      	sxth	r3, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8008d04:	2216      	movs	r2, #22
 8008d06:	2100      	movs	r1, #0
 8008d08:	0020      	movs	r0, r4
 8008d0a:	4698      	mov	r8, r3
 8008d0c:	f000 fcf0 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8008d10:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8008d12:	2801      	cmp	r0, #1
 8008d14:	d000      	beq.n	8008d18 <scroll_area_into_view+0x250>
 8008d16:	e08e      	b.n	8008e36 <scroll_area_into_view+0x36e>
        if(obj->spec_attr == NULL) return 0;
 8008d18:	68a3      	ldr	r3, [r4, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d100      	bne.n	8008d20 <scroll_area_into_view+0x258>
 8008d1e:	e76f      	b.n	8008c00 <scroll_area_into_view+0x138>
        return obj->spec_attr->scroll.x;
 8008d20:	2010      	movs	r0, #16
 8008d22:	5e18      	ldrsh	r0, [r3, r0]
 8008d24:	e08a      	b.n	8008e3c <scroll_area_into_view+0x374>
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 8008d26:	2200      	movs	r2, #0
 8008d28:	210a      	movs	r1, #10
 8008d2a:	0020      	movs	r0, r4
 8008d2c:	f7f9 f816 	bl	8001d5c <lv_event_send>
        if(res != LV_RES_OK) return;
 8008d30:	2801      	cmp	r0, #1
 8008d32:	d1b8      	bne.n	8008ca6 <scroll_area_into_view+0x1de>
 8008d34:	e782      	b.n	8008c3c <scroll_area_into_view+0x174>
    else if(bottom_diff > 0) {
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	dc00      	bgt.n	8008d3c <scroll_area_into_view+0x274>
 8008d3a:	e724      	b.n	8008b86 <scroll_area_into_view+0xbe>
        y_scroll = -bottom_diff;
 8008d3c:	9b08      	ldr	r3, [sp, #32]
 8008d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 8008d40:	0020      	movs	r0, r4
        y_scroll = -bottom_diff;
 8008d42:	1a9d      	subs	r5, r3, r2
 8008d44:	9b07      	ldr	r3, [sp, #28]
 8008d46:	1aed      	subs	r5, r5, r3
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 8008d48:	f7fe ffd2 	bl	8007cf0 <lv_obj_get_scroll_bottom>
        y_scroll = -bottom_diff;
 8008d4c:	b22d      	sxth	r5, r5
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 8008d4e:	68a2      	ldr	r2, [r4, #8]
        if(sb + y_scroll < 0) y_scroll = 0;
 8008d50:	42e8      	cmn	r0, r5
 8008d52:	d400      	bmi.n	8008d56 <scroll_area_into_view+0x28e>
 8008d54:	e719      	b.n	8008b8a <scroll_area_into_view+0xc2>
        if(st - y_scroll < 0) y_scroll = 0;
 8008d56:	2500      	movs	r5, #0
 8008d58:	e717      	b.n	8008b8a <scroll_area_into_view+0xc2>
    else if(left_diff > 0) {
 8008d5a:	4643      	mov	r3, r8
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d100      	bne.n	8008d62 <scroll_area_into_view+0x29a>
 8008d60:	e74e      	b.n	8008c00 <scroll_area_into_view+0x138>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8008d62:	2216      	movs	r2, #22
 8008d64:	2100      	movs	r1, #0
 8008d66:	0020      	movs	r0, r4
 8008d68:	f000 fcc2 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8008d6c:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8008d6e:	2801      	cmp	r0, #1
 8008d70:	d069      	beq.n	8008e46 <scroll_area_into_view+0x37e>
        if(obj->spec_attr == NULL) return 0;
 8008d72:	68a3      	ldr	r3, [r4, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d100      	bne.n	8008d7a <scroll_area_into_view+0x2b2>
 8008d78:	e742      	b.n	8008c00 <scroll_area_into_view+0x138>
        return -obj->spec_attr->scroll.x;
 8008d7a:	8a18      	ldrh	r0, [r3, #16]
 8008d7c:	4240      	negs	r0, r0
 8008d7e:	b200      	sxth	r0, r0
        if(sl - x_scroll < 0) x_scroll = 0;
 8008d80:	4643      	mov	r3, r8
 8008d82:	1ac0      	subs	r0, r0, r3
 8008d84:	d500      	bpl.n	8008d88 <scroll_area_into_view+0x2c0>
 8008d86:	e73b      	b.n	8008c00 <scroll_area_into_view+0x138>
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 8008d88:	0020      	movs	r0, r4
 8008d8a:	f7fd f83b 	bl	8005e04 <lv_obj_get_width>
    switch(snap_x) {
 8008d8e:	464b      	mov	r3, r9
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d000      	beq.n	8008d96 <scroll_area_into_view+0x2ce>
 8008d94:	e73d      	b.n	8008c12 <scroll_area_into_view+0x14a>
            x_scroll += snap_goal - act;
 8008d96:	465b      	mov	r3, fp
 8008d98:	8aa0      	ldrh	r0, [r4, #20]
 8008d9a:	1ac0      	subs	r0, r0, r3
 8008d9c:	88bb      	ldrh	r3, [r7, #4]
 8008d9e:	1ac0      	subs	r0, r0, r3
 8008da0:	b203      	sxth	r3, r0
 8008da2:	4698      	mov	r8, r3
            break;
 8008da4:	e73b      	b.n	8008c1e <scroll_area_into_view+0x156>
            x_scroll += snap_goal - act;
 8008da6:	8a20      	ldrh	r0, [r4, #16]
 8008da8:	883b      	ldrh	r3, [r7, #0]
 8008daa:	4450      	add	r0, sl
 8008dac:	1ac0      	subs	r0, r0, r3
 8008dae:	b203      	sxth	r3, r0
 8008db0:	4698      	mov	r8, r3
            break;
 8008db2:	e734      	b.n	8008c1e <scroll_area_into_view+0x156>
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8008db4:	9904      	ldr	r1, [sp, #16]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008db6:	464b      	mov	r3, r9
 8008db8:	468c      	mov	ip, r1
 8008dba:	4649      	mov	r1, r9
 8008dbc:	9805      	ldr	r0, [sp, #20]
 8008dbe:	9d06      	ldr	r5, [sp, #24]
 8008dc0:	4460      	add	r0, ip
 8008dc2:	1a28      	subs	r0, r5, r0
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 8008dc4:	b200      	sxth	r0, r0
 8008dc6:	0fc5      	lsrs	r5, r0, #31
 8008dc8:	182d      	adds	r5, r5, r0
 8008dca:	88c9      	ldrh	r1, [r1, #6]
            y_scroll += snap_goal - act;
 8008dcc:	8a60      	ldrh	r0, [r4, #18]
 8008dce:	885b      	ldrh	r3, [r3, #2]
 8008dd0:	4460      	add	r0, ip
 8008dd2:	3101      	adds	r1, #1
 8008dd4:	1ac0      	subs	r0, r0, r3
 8008dd6:	1acb      	subs	r3, r1, r3
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 8008dd8:	106d      	asrs	r5, r5, #1
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 8008dda:	b21b      	sxth	r3, r3
            y_scroll += snap_goal - act;
 8008ddc:	1828      	adds	r0, r5, r0
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 8008dde:	0fdd      	lsrs	r5, r3, #31
 8008de0:	18eb      	adds	r3, r5, r3
 8008de2:	105b      	asrs	r3, r3, #1
            y_scroll += snap_goal - act;
 8008de4:	1ac0      	subs	r0, r0, r3
 8008de6:	b205      	sxth	r5, r0
            break;
 8008de8:	e6d9      	b.n	8008b9e <scroll_area_into_view+0xd6>
            y_scroll += snap_goal - act;
 8008dea:	9b04      	ldr	r3, [sp, #16]
 8008dec:	8a65      	ldrh	r5, [r4, #18]
 8008dee:	469c      	mov	ip, r3
 8008df0:	464b      	mov	r3, r9
 8008df2:	885b      	ldrh	r3, [r3, #2]
 8008df4:	4465      	add	r5, ip
 8008df6:	1aed      	subs	r5, r5, r3
 8008df8:	b22d      	sxth	r5, r5
            break;
 8008dfa:	e6d0      	b.n	8008b9e <scroll_area_into_view+0xd6>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008dfc:	88bb      	ldrh	r3, [r7, #4]
 8008dfe:	883a      	ldrh	r2, [r7, #0]
            x_scroll += snap_goal - act;
 8008e00:	8a21      	ldrh	r1, [r4, #16]
 8008e02:	3301      	adds	r3, #1
 8008e04:	1a9b      	subs	r3, r3, r2
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 8008e06:	b21b      	sxth	r3, r3
            x_scroll += snap_goal - act;
 8008e08:	4451      	add	r1, sl
 8008e0a:	1a89      	subs	r1, r1, r2
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 8008e0c:	0fda      	lsrs	r2, r3, #31
 8008e0e:	18d2      	adds	r2, r2, r3
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 8008e10:	4653      	mov	r3, sl
 8008e12:	445b      	add	r3, fp
 8008e14:	1ac0      	subs	r0, r0, r3
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 8008e16:	b200      	sxth	r0, r0
 8008e18:	0fc3      	lsrs	r3, r0, #31
 8008e1a:	1818      	adds	r0, r3, r0
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 8008e1c:	1052      	asrs	r2, r2, #1
            x_scroll += snap_goal - act;
 8008e1e:	1a8a      	subs	r2, r1, r2
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 8008e20:	1040      	asrs	r0, r0, #1
            x_scroll += snap_goal - act;
 8008e22:	1810      	adds	r0, r2, r0
 8008e24:	b203      	sxth	r3, r0
 8008e26:	4698      	mov	r8, r3
            break;
 8008e28:	e6f9      	b.n	8008c1e <scroll_area_into_view+0x156>
    else return LV_DIR_ALL;
 8008e2a:	230f      	movs	r3, #15
 8008e2c:	9301      	str	r3, [sp, #4]
    else return LV_SCROLL_SNAP_NONE;
 8008e2e:	2300      	movs	r3, #0
    else area_tmp = area;
 8008e30:	46b9      	mov	r9, r7
    else return LV_SCROLL_SNAP_NONE;
 8008e32:	469b      	mov	fp, r3
 8008e34:	e66e      	b.n	8008b14 <scroll_area_into_view+0x4c>
 8008e36:	0020      	movs	r0, r4
 8008e38:	f7fe fe38 	bl	8007aac <lv_obj_get_scroll_right.part.0>
        if(sr + x_scroll < 0) x_scroll = 0;
 8008e3c:	4643      	mov	r3, r8
 8008e3e:	42d8      	cmn	r0, r3
 8008e40:	d400      	bmi.n	8008e44 <scroll_area_into_view+0x37c>
 8008e42:	e6df      	b.n	8008c04 <scroll_area_into_view+0x13c>
 8008e44:	e6dc      	b.n	8008c00 <scroll_area_into_view+0x138>
 8008e46:	0020      	movs	r0, r4
 8008e48:	f7fe fdc4 	bl	80079d4 <lv_obj_get_scroll_left.part.0>
 8008e4c:	e798      	b.n	8008d80 <scroll_area_into_view+0x2b8>
 8008e4e:	46c0      	nop			; (mov r8, r8)
 8008e50:	08007be9 	.word	0x08007be9
 8008e54:	08007b95 	.word	0x08007b95

08008e58 <lv_obj_scroll_to>:
{
 8008e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5a:	0004      	movs	r4, r0
 8008e5c:	000f      	movs	r7, r1
    lv_anim_del(obj, scroll_x_anim);
 8008e5e:	4916      	ldr	r1, [pc, #88]	; (8008eb8 <lv_obj_scroll_to+0x60>)
{
 8008e60:	001d      	movs	r5, r3
 8008e62:	0016      	movs	r6, r2
    lv_anim_del(obj, scroll_x_anim);
 8008e64:	f008 f8b0 	bl	8010fc8 <lv_anim_del>
    if(obj->spec_attr == NULL) return 0;
 8008e68:	68a3      	ldr	r3, [r4, #8]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d021      	beq.n	8008eb2 <lv_obj_scroll_to+0x5a>
    return -obj->spec_attr->scroll.x;
 8008e6e:	8a1b      	ldrh	r3, [r3, #16]
 8008e70:	425b      	negs	r3, r3
 8008e72:	b299      	uxth	r1, r3
    lv_coord_t diff = -x + scroll_x;
 8008e74:	1bc9      	subs	r1, r1, r7
 8008e76:	b209      	sxth	r1, r1
    if(dx == 0 && dy == 0) return;
 8008e78:	2900      	cmp	r1, #0
 8008e7a:	d004      	beq.n	8008e86 <lv_obj_scroll_to+0x2e>
 8008e7c:	002b      	movs	r3, r5
 8008e7e:	2200      	movs	r2, #0
 8008e80:	0020      	movs	r0, r4
 8008e82:	f7ff fd27 	bl	80088d4 <lv_obj_scroll_by_bounded.part.0>
    lv_anim_del(obj, scroll_y_anim);
 8008e86:	0020      	movs	r0, r4
 8008e88:	490c      	ldr	r1, [pc, #48]	; (8008ebc <lv_obj_scroll_to+0x64>)
 8008e8a:	f008 f89d 	bl	8010fc8 <lv_anim_del>
    if(obj->spec_attr == NULL) return 0;
 8008e8e:	68a3      	ldr	r3, [r4, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00c      	beq.n	8008eae <lv_obj_scroll_to+0x56>
    return -obj->spec_attr->scroll.y;
 8008e94:	8a59      	ldrh	r1, [r3, #18]
 8008e96:	4249      	negs	r1, r1
 8008e98:	b28a      	uxth	r2, r1
    lv_coord_t diff = -y + scroll_y;
 8008e9a:	1b92      	subs	r2, r2, r6
 8008e9c:	b212      	sxth	r2, r2
    if(dx == 0 && dy == 0) return;
 8008e9e:	2a00      	cmp	r2, #0
 8008ea0:	d004      	beq.n	8008eac <lv_obj_scroll_to+0x54>
 8008ea2:	002b      	movs	r3, r5
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	0020      	movs	r0, r4
 8008ea8:	f7ff fd14 	bl	80088d4 <lv_obj_scroll_by_bounded.part.0>
}
 8008eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eae:	2200      	movs	r2, #0
 8008eb0:	e7f3      	b.n	8008e9a <lv_obj_scroll_to+0x42>
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	e7de      	b.n	8008e74 <lv_obj_scroll_to+0x1c>
 8008eb6:	46c0      	nop			; (mov r8, r8)
 8008eb8:	08007b95 	.word	0x08007b95
 8008ebc:	08007be9 	.word	0x08007be9

08008ec0 <lv_obj_scroll_to_x>:
{
 8008ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec2:	0005      	movs	r5, r0
 8008ec4:	000e      	movs	r6, r1
    lv_anim_del(obj, scroll_x_anim);
 8008ec6:	490b      	ldr	r1, [pc, #44]	; (8008ef4 <lv_obj_scroll_to_x+0x34>)
{
 8008ec8:	0017      	movs	r7, r2
    lv_anim_del(obj, scroll_x_anim);
 8008eca:	f008 f87d 	bl	8010fc8 <lv_anim_del>
    if(obj->spec_attr == NULL) return 0;
 8008ece:	68ab      	ldr	r3, [r5, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00c      	beq.n	8008eee <lv_obj_scroll_to_x+0x2e>
    return -obj->spec_attr->scroll.x;
 8008ed4:	8a1c      	ldrh	r4, [r3, #16]
 8008ed6:	4264      	negs	r4, r4
 8008ed8:	b2a1      	uxth	r1, r4
    lv_coord_t diff = -x + scroll_x;
 8008eda:	1b89      	subs	r1, r1, r6
 8008edc:	b209      	sxth	r1, r1
    if(dx == 0 && dy == 0) return;
 8008ede:	2900      	cmp	r1, #0
 8008ee0:	d004      	beq.n	8008eec <lv_obj_scroll_to_x+0x2c>
 8008ee2:	003b      	movs	r3, r7
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	0028      	movs	r0, r5
 8008ee8:	f7ff fcf4 	bl	80088d4 <lv_obj_scroll_by_bounded.part.0>
}
 8008eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eee:	2100      	movs	r1, #0
 8008ef0:	e7f3      	b.n	8008eda <lv_obj_scroll_to_x+0x1a>
 8008ef2:	46c0      	nop			; (mov r8, r8)
 8008ef4:	08007b95 	.word	0x08007b95

08008ef8 <lv_obj_scroll_to_y>:
{
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efa:	0005      	movs	r5, r0
 8008efc:	000e      	movs	r6, r1
    lv_anim_del(obj, scroll_y_anim);
 8008efe:	490b      	ldr	r1, [pc, #44]	; (8008f2c <lv_obj_scroll_to_y+0x34>)
{
 8008f00:	0017      	movs	r7, r2
    lv_anim_del(obj, scroll_y_anim);
 8008f02:	f008 f861 	bl	8010fc8 <lv_anim_del>
    if(obj->spec_attr == NULL) return 0;
 8008f06:	68ab      	ldr	r3, [r5, #8]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00c      	beq.n	8008f26 <lv_obj_scroll_to_y+0x2e>
    return -obj->spec_attr->scroll.y;
 8008f0c:	8a5c      	ldrh	r4, [r3, #18]
 8008f0e:	4264      	negs	r4, r4
 8008f10:	b2a2      	uxth	r2, r4
    lv_coord_t diff = -y + scroll_y;
 8008f12:	1b92      	subs	r2, r2, r6
 8008f14:	b212      	sxth	r2, r2
    if(dx == 0 && dy == 0) return;
 8008f16:	2a00      	cmp	r2, #0
 8008f18:	d004      	beq.n	8008f24 <lv_obj_scroll_to_y+0x2c>
 8008f1a:	003b      	movs	r3, r7
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	0028      	movs	r0, r5
 8008f20:	f7ff fcd8 	bl	80088d4 <lv_obj_scroll_by_bounded.part.0>
}
 8008f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f26:	2200      	movs	r2, #0
 8008f28:	e7f3      	b.n	8008f12 <lv_obj_scroll_to_y+0x1a>
 8008f2a:	46c0      	nop			; (mov r8, r8)
 8008f2c:	08007be9 	.word	0x08007be9

08008f30 <lv_obj_scroll_to_view_recursive>:
{
 8008f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f32:	0005      	movs	r5, r0
 8008f34:	b083      	sub	sp, #12
 8008f36:	000e      	movs	r6, r1
    lv_obj_update_layout(obj);
 8008f38:	f7fe fcc2 	bl	80078c0 <lv_obj_update_layout>
    lv_point_t p = {0, 0};
 8008f3c:	2300      	movs	r3, #0
    lv_obj_t * parent = lv_obj_get_parent(child);
 8008f3e:	0028      	movs	r0, r5
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 8008f40:	002f      	movs	r7, r5
    lv_point_t p = {0, 0};
 8008f42:	9301      	str	r3, [sp, #4]
    lv_obj_t * parent = lv_obj_get_parent(child);
 8008f44:	f002 f800 	bl	800af48 <lv_obj_get_parent>
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 8008f48:	3710      	adds	r7, #16
    lv_obj_t * parent = lv_obj_get_parent(child);
 8008f4a:	1e04      	subs	r4, r0, #0
    while(parent) {
 8008f4c:	d00b      	beq.n	8008f66 <lv_obj_scroll_to_view_recursive+0x36>
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 8008f4e:	0029      	movs	r1, r5
 8008f50:	0033      	movs	r3, r6
 8008f52:	0038      	movs	r0, r7
 8008f54:	aa01      	add	r2, sp, #4
 8008f56:	f7ff fdb7 	bl	8008ac8 <scroll_area_into_view>
        parent = lv_obj_get_parent(parent);
 8008f5a:	0020      	movs	r0, r4
 8008f5c:	f001 fff4 	bl	800af48 <lv_obj_get_parent>
 8008f60:	0025      	movs	r5, r4
 8008f62:	1e04      	subs	r4, r0, #0
    while(parent) {
 8008f64:	d1f3      	bne.n	8008f4e <lv_obj_scroll_to_view_recursive+0x1e>
}
 8008f66:	b003      	add	sp, #12
 8008f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f6a:	46c0      	nop			; (mov r8, r8)

08008f6c <_lv_obj_scroll_by_raw>:
{
 8008f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(x == 0 && y == 0) return LV_RES_OK;
 8008f6e:	000b      	movs	r3, r1
{
 8008f70:	0004      	movs	r4, r0
 8008f72:	000d      	movs	r5, r1
 8008f74:	0016      	movs	r6, r2
    if(x == 0 && y == 0) return LV_RES_OK;
 8008f76:	2701      	movs	r7, #1
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	d101      	bne.n	8008f80 <_lv_obj_scroll_by_raw+0x14>
}
 8008f7c:	0038      	movs	r0, r7
 8008f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_obj_allocate_spec_attr(obj);
 8008f80:	f7fc f87a 	bl	8005078 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll.x += x;
 8008f84:	68a3      	ldr	r3, [r4, #8]
    lv_obj_move_children_by(obj, x, y, true);
 8008f86:	0029      	movs	r1, r5
    obj->spec_attr->scroll.x += x;
 8008f88:	8a1a      	ldrh	r2, [r3, #16]
    lv_obj_move_children_by(obj, x, y, true);
 8008f8a:	0020      	movs	r0, r4
    obj->spec_attr->scroll.x += x;
 8008f8c:	1952      	adds	r2, r2, r5
 8008f8e:	821a      	strh	r2, [r3, #16]
    obj->spec_attr->scroll.y += y;
 8008f90:	8a5a      	ldrh	r2, [r3, #18]
 8008f92:	1992      	adds	r2, r2, r6
 8008f94:	825a      	strh	r2, [r3, #18]
    lv_obj_move_children_by(obj, x, y, true);
 8008f96:	2301      	movs	r3, #1
 8008f98:	0032      	movs	r2, r6
 8008f9a:	f7fd f805 	bl	8005fa8 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	210b      	movs	r1, #11
 8008fa2:	0020      	movs	r0, r4
 8008fa4:	f7f8 feda 	bl	8001d5c <lv_event_send>
 8008fa8:	0007      	movs	r7, r0
    if(res != LV_RES_OK) return res;
 8008faa:	2801      	cmp	r0, #1
 8008fac:	d1e6      	bne.n	8008f7c <_lv_obj_scroll_by_raw+0x10>
    lv_obj_invalidate(obj);
 8008fae:	0020      	movs	r0, r4
 8008fb0:	f7fd fac6 	bl	8006540 <lv_obj_invalidate>
    return LV_RES_OK;
 8008fb4:	e7e2      	b.n	8008f7c <_lv_obj_scroll_by_raw+0x10>
 8008fb6:	46c0      	nop			; (mov r8, r8)

08008fb8 <lv_obj_get_scrollbar_area>:
{
 8008fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_area_set(hor_area, 0, 0, -1, -1);
 8008fba:	2401      	movs	r4, #1
{
 8008fbc:	000e      	movs	r6, r1
 8008fbe:	0017      	movs	r7, r2
 8008fc0:	0005      	movs	r5, r0
 8008fc2:	b083      	sub	sp, #12
    lv_area_set(hor_area, 0, 0, -1, -1);
 8008fc4:	4264      	negs	r4, r4
 8008fc6:	0023      	movs	r3, r4
 8008fc8:	2200      	movs	r2, #0
 8008fca:	2100      	movs	r1, #0
 8008fcc:	0030      	movs	r0, r6
 8008fce:	9400      	str	r4, [sp, #0]
 8008fd0:	f008 f99c 	bl	801130c <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	0038      	movs	r0, r7
 8008fd8:	0023      	movs	r3, r4
 8008fda:	2200      	movs	r2, #0
 8008fdc:	9400      	str	r4, [sp, #0]
 8008fde:	f008 f995 	bl	801130c <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 8008fe2:	2110      	movs	r1, #16
 8008fe4:	0028      	movs	r0, r5
 8008fe6:	f7fc f82b 	bl	8005040 <lv_obj_has_flag>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d004      	beq.n	8008ff8 <lv_obj_get_scrollbar_area+0x40>
 8008fee:	003a      	movs	r2, r7
 8008ff0:	0031      	movs	r1, r6
 8008ff2:	0028      	movs	r0, r5
 8008ff4:	f7fe fef0 	bl	8007dd8 <lv_obj_get_scrollbar_area.part.0>
}
 8008ff8:	b003      	add	sp, #12
 8008ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ffc <lv_obj_scrollbar_invalidate>:
{
 8008ffc:	b530      	push	{r4, r5, lr}
    lv_area_set(hor_area, 0, 0, -1, -1);
 8008ffe:	2501      	movs	r5, #1
{
 8009000:	0004      	movs	r4, r0
 8009002:	b087      	sub	sp, #28
    lv_area_set(hor_area, 0, 0, -1, -1);
 8009004:	426d      	negs	r5, r5
 8009006:	002b      	movs	r3, r5
 8009008:	2200      	movs	r2, #0
 800900a:	2100      	movs	r1, #0
 800900c:	a802      	add	r0, sp, #8
 800900e:	9500      	str	r5, [sp, #0]
 8009010:	f008 f97c 	bl	801130c <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 8009014:	2100      	movs	r1, #0
 8009016:	a804      	add	r0, sp, #16
 8009018:	002b      	movs	r3, r5
 800901a:	2200      	movs	r2, #0
 800901c:	9500      	str	r5, [sp, #0]
 800901e:	f008 f975 	bl	801130c <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 8009022:	2110      	movs	r1, #16
 8009024:	0020      	movs	r0, r4
 8009026:	f7fc f80b 	bl	8005040 <lv_obj_has_flag>
 800902a:	2800      	cmp	r0, #0
 800902c:	d004      	beq.n	8009038 <lv_obj_scrollbar_invalidate+0x3c>
 800902e:	0020      	movs	r0, r4
 8009030:	aa04      	add	r2, sp, #16
 8009032:	a902      	add	r1, sp, #8
 8009034:	f7fe fed0 	bl	8007dd8 <lv_obj_get_scrollbar_area.part.0>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8009038:	a802      	add	r0, sp, #8
 800903a:	f008 f977 	bl	801132c <lv_area_get_size>
 800903e:	2800      	cmp	r0, #0
 8009040:	d104      	bne.n	800904c <lv_obj_scrollbar_invalidate+0x50>
 8009042:	a804      	add	r0, sp, #16
 8009044:	f008 f972 	bl	801132c <lv_area_get_size>
 8009048:	2800      	cmp	r0, #0
 800904a:	d009      	beq.n	8009060 <lv_obj_scrollbar_invalidate+0x64>
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 800904c:	a802      	add	r0, sp, #8
 800904e:	f008 f96d 	bl	801132c <lv_area_get_size>
 8009052:	2800      	cmp	r0, #0
 8009054:	d106      	bne.n	8009064 <lv_obj_scrollbar_invalidate+0x68>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 8009056:	a804      	add	r0, sp, #16
 8009058:	f008 f968 	bl	801132c <lv_area_get_size>
 800905c:	2800      	cmp	r0, #0
 800905e:	d10a      	bne.n	8009076 <lv_obj_scrollbar_invalidate+0x7a>
}
 8009060:	b007      	add	sp, #28
 8009062:	bd30      	pop	{r4, r5, pc}
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 8009064:	0020      	movs	r0, r4
 8009066:	a902      	add	r1, sp, #8
 8009068:	f7fd fa48 	bl	80064fc <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 800906c:	a804      	add	r0, sp, #16
 800906e:	f008 f95d 	bl	801132c <lv_area_get_size>
 8009072:	2800      	cmp	r0, #0
 8009074:	d0f4      	beq.n	8009060 <lv_obj_scrollbar_invalidate+0x64>
 8009076:	0020      	movs	r0, r4
 8009078:	a904      	add	r1, sp, #16
 800907a:	f7fd fa3f 	bl	80064fc <lv_obj_invalidate_area>
 800907e:	e7ef      	b.n	8009060 <lv_obj_scrollbar_invalidate+0x64>

08009080 <lv_obj_readjust_scroll>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 8009080:	6882      	ldr	r2, [r0, #8]
{
 8009082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009084:	0004      	movs	r4, r0
 8009086:	000d      	movs	r5, r1
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 8009088:	2a00      	cmp	r2, #0
 800908a:	d100      	bne.n	800908e <lv_obj_readjust_scroll+0xe>
 800908c:	e073      	b.n	8009176 <lv_obj_readjust_scroll+0xf6>
 800908e:	7e10      	ldrb	r0, [r2, #24]
 8009090:	0680      	lsls	r0, r0, #26
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 8009092:	0f80      	lsrs	r0, r0, #30
 8009094:	d109      	bne.n	80090aa <lv_obj_readjust_scroll+0x2a>
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 8009096:	0020      	movs	r0, r4
    return -obj->spec_attr->scroll.y;
 8009098:	2312      	movs	r3, #18
 800909a:	5ed6      	ldrsh	r6, [r2, r3]
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800909c:	f7fe fe28 	bl	8007cf0 <lv_obj_get_scroll_bottom>
        if(sb < 0 && st > 0) {
 80090a0:	2800      	cmp	r0, #0
 80090a2:	db2c      	blt.n	80090fe <lv_obj_readjust_scroll+0x7e>
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 80090a4:	68a2      	ldr	r2, [r4, #8]
 80090a6:	2a00      	cmp	r2, #0
 80090a8:	d003      	beq.n	80090b2 <lv_obj_readjust_scroll+0x32>
 80090aa:	7e12      	ldrb	r2, [r2, #24]
 80090ac:	0712      	lsls	r2, r2, #28
    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 80090ae:	0f92      	lsrs	r2, r2, #30
 80090b0:	d124      	bne.n	80090fc <lv_obj_readjust_scroll+0x7c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80090b2:	2216      	movs	r2, #22
 80090b4:	2100      	movs	r1, #0
 80090b6:	0020      	movs	r0, r4
 80090b8:	f000 fb1a 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80090bc:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 80090be:	2801      	cmp	r0, #1
 80090c0:	d054      	beq.n	800916c <lv_obj_readjust_scroll+0xec>
        if(obj->spec_attr == NULL) return 0;
 80090c2:	68a3      	ldr	r3, [r4, #8]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d04f      	beq.n	8009168 <lv_obj_readjust_scroll+0xe8>
        return -obj->spec_attr->scroll.x;
 80090c8:	8a1e      	ldrh	r6, [r3, #16]
 80090ca:	4276      	negs	r6, r6
 80090cc:	b236      	sxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80090ce:	2216      	movs	r2, #22
 80090d0:	2100      	movs	r1, #0
 80090d2:	0020      	movs	r0, r4
 80090d4:	f000 fb0c 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80090d8:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80090da:	2801      	cmp	r0, #1
 80090dc:	d121      	bne.n	8009122 <lv_obj_readjust_scroll+0xa2>
        if(obj->spec_attr == NULL) return 0;
 80090de:	68a3      	ldr	r3, [r4, #8]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d04f      	beq.n	8009184 <lv_obj_readjust_scroll+0x104>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80090e4:	2216      	movs	r2, #22
 80090e6:	2100      	movs	r1, #0
 80090e8:	0020      	movs	r0, r4
        return obj->spec_attr->scroll.x;
 80090ea:	2710      	movs	r7, #16
 80090ec:	5fdf      	ldrsh	r7, [r3, r7]
 80090ee:	f000 faff 	bl	80096f0 <lv_obj_get_style_prop>
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 80090f2:	b2c0      	uxtb	r0, r0
 80090f4:	2801      	cmp	r0, #1
 80090f6:	d020      	beq.n	800913a <lv_obj_readjust_scroll+0xba>
            if(sr < 0 && sl > 0) {
 80090f8:	2f00      	cmp	r7, #0
 80090fa:	db29      	blt.n	8009150 <lv_obj_readjust_scroll+0xd0>
}
 80090fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return -obj->spec_attr->scroll.y;
 80090fe:	4276      	negs	r6, r6
 8009100:	b236      	sxth	r6, r6
        if(sb < 0 && st > 0) {
 8009102:	2e00      	cmp	r6, #0
 8009104:	ddce      	ble.n	80090a4 <lv_obj_readjust_scroll+0x24>
            sb = LV_MIN(st, -sb);
 8009106:	4240      	negs	r0, r0
 8009108:	42b0      	cmp	r0, r6
 800910a:	dd00      	ble.n	800910e <lv_obj_readjust_scroll+0x8e>
 800910c:	0030      	movs	r0, r6
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 800910e:	b202      	sxth	r2, r0
 8009110:	002b      	movs	r3, r5
 8009112:	2100      	movs	r1, #0
 8009114:	0020      	movs	r0, r4
 8009116:	f7ff fb25 	bl	8008764 <lv_obj_scroll_by>
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800911a:	68a2      	ldr	r2, [r4, #8]
 800911c:	2a00      	cmp	r2, #0
 800911e:	d1c4      	bne.n	80090aa <lv_obj_readjust_scroll+0x2a>
 8009120:	e7c7      	b.n	80090b2 <lv_obj_readjust_scroll+0x32>
 8009122:	0020      	movs	r0, r4
 8009124:	f7fe fcc2 	bl	8007aac <lv_obj_get_scroll_right.part.0>
 8009128:	2216      	movs	r2, #22
 800912a:	0007      	movs	r7, r0
 800912c:	2100      	movs	r1, #0
 800912e:	0020      	movs	r0, r4
 8009130:	f000 fade 	bl	80096f0 <lv_obj_get_style_prop>
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8009134:	b2c0      	uxtb	r0, r0
 8009136:	2801      	cmp	r0, #1
 8009138:	d1de      	bne.n	80090f8 <lv_obj_readjust_scroll+0x78>
            if(sl < 0 && sr > 0) {
 800913a:	2e00      	cmp	r6, #0
 800913c:	dade      	bge.n	80090fc <lv_obj_readjust_scroll+0x7c>
 800913e:	2f00      	cmp	r7, #0
 8009140:	dddc      	ble.n	80090fc <lv_obj_readjust_scroll+0x7c>
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 8009142:	002b      	movs	r3, r5
 8009144:	2200      	movs	r2, #0
 8009146:	0031      	movs	r1, r6
 8009148:	0020      	movs	r0, r4
 800914a:	f7ff fb0b 	bl	8008764 <lv_obj_scroll_by>
}
 800914e:	e7d5      	b.n	80090fc <lv_obj_readjust_scroll+0x7c>
            if(sr < 0 && sl > 0) {
 8009150:	2e00      	cmp	r6, #0
 8009152:	ddd3      	ble.n	80090fc <lv_obj_readjust_scroll+0x7c>
                sr = LV_MIN(sl, -sr);
 8009154:	427f      	negs	r7, r7
 8009156:	42b7      	cmp	r7, r6
 8009158:	dc1a      	bgt.n	8009190 <lv_obj_readjust_scroll+0x110>
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 800915a:	002b      	movs	r3, r5
 800915c:	2200      	movs	r2, #0
 800915e:	0020      	movs	r0, r4
 8009160:	b239      	sxth	r1, r7
 8009162:	f7ff faff 	bl	8008764 <lv_obj_scroll_by>
 8009166:	e7c9      	b.n	80090fc <lv_obj_readjust_scroll+0x7c>
        if(obj->spec_attr == NULL) return 0;
 8009168:	2600      	movs	r6, #0
 800916a:	e7b0      	b.n	80090ce <lv_obj_readjust_scroll+0x4e>
 800916c:	0020      	movs	r0, r4
 800916e:	f7fe fc31 	bl	80079d4 <lv_obj_get_scroll_left.part.0>
 8009172:	0006      	movs	r6, r0
 8009174:	e7ab      	b.n	80090ce <lv_obj_readjust_scroll+0x4e>
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 8009176:	f7fe fdbb 	bl	8007cf0 <lv_obj_get_scroll_bottom>
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800917a:	68a2      	ldr	r2, [r4, #8]
 800917c:	2a00      	cmp	r2, #0
 800917e:	d000      	beq.n	8009182 <lv_obj_readjust_scroll+0x102>
 8009180:	e793      	b.n	80090aa <lv_obj_readjust_scroll+0x2a>
 8009182:	e796      	b.n	80090b2 <lv_obj_readjust_scroll+0x32>
 8009184:	2216      	movs	r2, #22
 8009186:	2100      	movs	r1, #0
 8009188:	0020      	movs	r0, r4
 800918a:	f000 fab1 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800918e:	e7b5      	b.n	80090fc <lv_obj_readjust_scroll+0x7c>
                sr = LV_MIN(sl, -sr);
 8009190:	0037      	movs	r7, r6
 8009192:	e7e2      	b.n	800915a <lv_obj_readjust_scroll+0xda>

08009194 <get_local_style>:
 * @param obj pointer to an object
 * @param selector OR-ed value of parts and state for which the style should be get
 * @return pointer to the local style
 */
static lv_style_t * get_local_style(lv_obj_t * obj, lv_style_selector_t selector)
{
 8009194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009196:	464f      	mov	r7, r9
 8009198:	4646      	mov	r6, r8
 800919a:	46d6      	mov	lr, sl
 800919c:	b5c0      	push	{r6, r7, lr}
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800919e:	8bc7      	ldrh	r7, [r0, #30]
        if(obj->styles[i].is_local &&
 80091a0:	68c3      	ldr	r3, [r0, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 80091a2:	05ff      	lsls	r7, r7, #23
{
 80091a4:	0006      	movs	r6, r0
 80091a6:	000d      	movs	r5, r1
        if(obj->styles[i].is_local &&
 80091a8:	469c      	mov	ip, r3
    for(i = 0; i < obj->style_cnt; i++) {
 80091aa:	0ebf      	lsrs	r7, r7, #26
 80091ac:	d063      	beq.n	8009276 <get_local_style+0xe2>
 80091ae:	2200      	movs	r2, #0
        if(obj->styles[i].is_local &&
 80091b0:	2001      	movs	r0, #1
 80091b2:	79d9      	ldrb	r1, [r3, #7]
 80091b4:	4208      	tst	r0, r1
 80091b6:	d004      	beq.n	80091c2 <get_local_style+0x2e>
           obj->styles[i].selector == selector) {
 80091b8:	6859      	ldr	r1, [r3, #4]
 80091ba:	020c      	lsls	r4, r1, #8
 80091bc:	0a24      	lsrs	r4, r4, #8
        if(obj->styles[i].is_local &&
 80091be:	42ac      	cmp	r4, r5
 80091c0:	d057      	beq.n	8009272 <get_local_style+0xde>
    for(i = 0; i < obj->style_cnt; i++) {
 80091c2:	3201      	adds	r2, #1
 80091c4:	3308      	adds	r3, #8
 80091c6:	42ba      	cmp	r2, r7
 80091c8:	d3f3      	bcc.n	80091b2 <get_local_style+0x1e>
            return obj->styles[i].style;
        }
    }

    obj->style_cnt++;
 80091ca:	233f      	movs	r3, #63	; 0x3f
 80091cc:	3701      	adds	r7, #1
 80091ce:	401f      	ands	r7, r3
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80091d0:	00f9      	lsls	r1, r7, #3
    obj->style_cnt++;
 80091d2:	8bf3      	ldrh	r3, [r6, #30]
 80091d4:	4a29      	ldr	r2, [pc, #164]	; (800927c <get_local_style+0xe8>)
 80091d6:	00ff      	lsls	r7, r7, #3
 80091d8:	4013      	ands	r3, r2
 80091da:	431f      	orrs	r7, r3
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80091dc:	4660      	mov	r0, ip
    obj->style_cnt++;
 80091de:	83f7      	strh	r7, [r6, #30]
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80091e0:	f008 ff22 	bl	8012028 <lv_mem_realloc>
 80091e4:	4682      	mov	sl, r0
 80091e6:	60f0      	str	r0, [r6, #12]
    LV_ASSERT_MALLOC(obj->styles);
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d041      	beq.n	8009270 <get_local_style+0xdc>

    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 80091ec:	8bf1      	ldrh	r1, [r6, #30]
 80091ee:	05c9      	lsls	r1, r1, #23
 80091f0:	0e89      	lsrs	r1, r1, #26
 80091f2:	1e4c      	subs	r4, r1, #1
 80091f4:	2901      	cmp	r1, #1
 80091f6:	d01c      	beq.n	8009232 <get_local_style+0x9e>
 80091f8:	4b21      	ldr	r3, [pc, #132]	; (8009280 <get_local_style+0xec>)
 80091fa:	00cf      	lsls	r7, r1, #3
 80091fc:	18cb      	adds	r3, r1, r3
 80091fe:	427a      	negs	r2, r7
 8009200:	3101      	adds	r1, #1
 8009202:	4691      	mov	r9, r2
 8009204:	00ca      	lsls	r2, r1, #3
 8009206:	4690      	mov	r8, r2
        /*Copy only normal styles (not local and transition).
         *The new local style will be added as the last local style*/
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 8009208:	2203      	movs	r2, #3
 800920a:	00db      	lsls	r3, r3, #3
 800920c:	4694      	mov	ip, r2
 800920e:	4453      	add	r3, sl
 8009210:	e009      	b.n	8009226 <get_local_style+0x92>
        obj->styles[i] = obj->styles[i - 1];
 8009212:	464a      	mov	r2, r9
 8009214:	0018      	movs	r0, r3
 8009216:	18d2      	adds	r2, r2, r3
 8009218:	4442      	add	r2, r8
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800921a:	3c01      	subs	r4, #1
        obj->styles[i] = obj->styles[i - 1];
 800921c:	c882      	ldmia	r0!, {r1, r7}
 800921e:	c282      	stmia	r2!, {r1, r7}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 8009220:	3b08      	subs	r3, #8
 8009222:	2c00      	cmp	r4, #0
 8009224:	d005      	beq.n	8009232 <get_local_style+0x9e>
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 8009226:	4660      	mov	r0, ip
 8009228:	79da      	ldrb	r2, [r3, #7]
 800922a:	4210      	tst	r0, r2
 800922c:	d0f1      	beq.n	8009212 <get_local_style+0x7e>
    }

    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800922e:	00e4      	lsls	r4, r4, #3
 8009230:	44a2      	add	sl, r4
 8009232:	2108      	movs	r1, #8
 8009234:	4650      	mov	r0, sl
 8009236:	f009 fa3b 	bl	80126b0 <lv_memset_00>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 800923a:	68f3      	ldr	r3, [r6, #12]
 800923c:	2008      	movs	r0, #8
 800923e:	191f      	adds	r7, r3, r4
 8009240:	f008 feb4 	bl	8011fac <lv_mem_alloc>
    lv_style_init(obj->styles[i].style);
 8009244:	68f3      	ldr	r3, [r6, #12]
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 8009246:	6038      	str	r0, [r7, #0]
    lv_style_init(obj->styles[i].style);
 8009248:	5918      	ldr	r0, [r3, r4]
 800924a:	f009 fb05 	bl	8012858 <lv_style_init>
    obj->styles[i].is_local = 1;
 800924e:	2201      	movs	r2, #1
 8009250:	68f3      	ldr	r3, [r6, #12]
    obj->styles[i].selector = selector;
 8009252:	022d      	lsls	r5, r5, #8
    obj->styles[i].is_local = 1;
 8009254:	191c      	adds	r4, r3, r4
 8009256:	79e3      	ldrb	r3, [r4, #7]
    obj->styles[i].selector = selector;
 8009258:	0a2d      	lsrs	r5, r5, #8
    obj->styles[i].is_local = 1;
 800925a:	4313      	orrs	r3, r2
    obj->styles[i].selector = selector;
 800925c:	b2db      	uxtb	r3, r3
 800925e:	061b      	lsls	r3, r3, #24
 8009260:	431d      	orrs	r5, r3
    return obj->styles[i].style;
 8009262:	6820      	ldr	r0, [r4, #0]
    obj->styles[i].selector = selector;
 8009264:	6065      	str	r5, [r4, #4]
}
 8009266:	bce0      	pop	{r5, r6, r7}
 8009268:	46ba      	mov	sl, r7
 800926a:	46b1      	mov	r9, r6
 800926c:	46a8      	mov	r8, r5
 800926e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(obj->styles);
 8009270:	e7fe      	b.n	8009270 <get_local_style+0xdc>
            return obj->styles[i].style;
 8009272:	6818      	ldr	r0, [r3, #0]
 8009274:	e7f7      	b.n	8009266 <get_local_style+0xd2>
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8009276:	2108      	movs	r1, #8
 8009278:	2701      	movs	r7, #1
 800927a:	e7aa      	b.n	80091d2 <get_local_style+0x3e>
 800927c:	fffffe07 	.word	0xfffffe07
 8009280:	1ffffffe 	.word	0x1ffffffe

08009284 <get_trans_style>:
 * @param obj   pointer to an object
 * @param selector OR-ed value of parts and state for which the style should be get
 * @return pointer to the transition style
 */
static _lv_obj_style_t * get_trans_style(lv_obj_t * obj,  lv_style_selector_t selector)
{
 8009284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009286:	000d      	movs	r5, r1
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 8009288:	8bc1      	ldrh	r1, [r0, #30]
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800928a:	68c3      	ldr	r3, [r0, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800928c:	05c9      	lsls	r1, r1, #23
{
 800928e:	0006      	movs	r6, r0
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 8009290:	469c      	mov	ip, r3
    for(i = 0; i < obj->style_cnt; i++) {
 8009292:	0e89      	lsrs	r1, r1, #26
 8009294:	d04c      	beq.n	8009330 <get_trans_style+0xac>
 8009296:	2200      	movs	r2, #0
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 8009298:	2702      	movs	r7, #2
 800929a:	79dc      	ldrb	r4, [r3, #7]
 800929c:	0018      	movs	r0, r3
 800929e:	4227      	tst	r7, r4
 80092a0:	d004      	beq.n	80092ac <get_trans_style+0x28>
 80092a2:	685c      	ldr	r4, [r3, #4]
 80092a4:	0224      	lsls	r4, r4, #8
 80092a6:	0a24      	lsrs	r4, r4, #8
 80092a8:	42ac      	cmp	r4, r5
 80092aa:	d006      	beq.n	80092ba <get_trans_style+0x36>
    for(i = 0; i < obj->style_cnt; i++) {
 80092ac:	3201      	adds	r2, #1
 80092ae:	3308      	adds	r3, #8
 80092b0:	428a      	cmp	r2, r1
 80092b2:	d3f2      	bcc.n	800929a <get_trans_style+0x16>
    }

    /*Already have a transition style for it*/
    if(i != obj->style_cnt) return &obj->styles[i];
 80092b4:	d002      	beq.n	80092bc <get_trans_style+0x38>
 80092b6:	00d0      	lsls	r0, r2, #3
 80092b8:	4460      	add	r0, ip
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
    lv_style_init(obj->styles[0].style);
    obj->styles[0].is_trans = 1;
    obj->styles[0].selector = selector;
    return &obj->styles[0];
}
 80092ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    obj->style_cnt++;
 80092bc:	233f      	movs	r3, #63	; 0x3f
 80092be:	3201      	adds	r2, #1
 80092c0:	401a      	ands	r2, r3
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80092c2:	00d1      	lsls	r1, r2, #3
    obj->style_cnt++;
 80092c4:	8bf3      	ldrh	r3, [r6, #30]
 80092c6:	481c      	ldr	r0, [pc, #112]	; (8009338 <get_trans_style+0xb4>)
 80092c8:	00d2      	lsls	r2, r2, #3
 80092ca:	4003      	ands	r3, r0
 80092cc:	431a      	orrs	r2, r3
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80092ce:	4660      	mov	r0, ip
    obj->style_cnt++;
 80092d0:	83f2      	strh	r2, [r6, #30]
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 80092d2:	f008 fea9 	bl	8012028 <lv_mem_realloc>
 80092d6:	0004      	movs	r4, r0
 80092d8:	60f0      	str	r0, [r6, #12]
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 80092da:	8bf0      	ldrh	r0, [r6, #30]
 80092dc:	05c0      	lsls	r0, r0, #23
 80092de:	0e80      	lsrs	r0, r0, #26
 80092e0:	1e43      	subs	r3, r0, #1
 80092e2:	2801      	cmp	r0, #1
 80092e4:	d00c      	beq.n	8009300 <get_trans_style+0x7c>
        obj->styles[i] = obj->styles[i - 1];
 80092e6:	4f15      	ldr	r7, [pc, #84]	; (800933c <get_trans_style+0xb8>)
 80092e8:	1a19      	subs	r1, r3, r0
 80092ea:	46bc      	mov	ip, r7
 80092ec:	1a18      	subs	r0, r3, r0
 80092ee:	4461      	add	r1, ip
 80092f0:	3002      	adds	r0, #2
 80092f2:	00c9      	lsls	r1, r1, #3
 80092f4:	00c0      	lsls	r0, r0, #3
 80092f6:	00da      	lsls	r2, r3, #3
 80092f8:	1861      	adds	r1, r4, r1
 80092fa:	1820      	adds	r0, r4, r0
 80092fc:	f012 f98b 	bl	801b616 <memmove>
    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 8009300:	2108      	movs	r1, #8
 8009302:	0020      	movs	r0, r4
 8009304:	f009 f9d4 	bl	80126b0 <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 8009308:	2008      	movs	r0, #8
 800930a:	68f4      	ldr	r4, [r6, #12]
 800930c:	f008 fe4e 	bl	8011fac <lv_mem_alloc>
    lv_style_init(obj->styles[0].style);
 8009310:	68f3      	ldr	r3, [r6, #12]
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 8009312:	6020      	str	r0, [r4, #0]
    lv_style_init(obj->styles[0].style);
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	f009 fa9f 	bl	8012858 <lv_style_init>
    obj->styles[0].is_trans = 1;
 800931a:	2202      	movs	r2, #2
 800931c:	68f0      	ldr	r0, [r6, #12]
    obj->styles[0].selector = selector;
 800931e:	022d      	lsls	r5, r5, #8
    obj->styles[0].is_trans = 1;
 8009320:	79c3      	ldrb	r3, [r0, #7]
 8009322:	4313      	orrs	r3, r2
    obj->styles[0].selector = selector;
 8009324:	0a2a      	lsrs	r2, r5, #8
 8009326:	b2dd      	uxtb	r5, r3
 8009328:	062d      	lsls	r5, r5, #24
 800932a:	4315      	orrs	r5, r2
 800932c:	6045      	str	r5, [r0, #4]
    return &obj->styles[0];
 800932e:	e7c4      	b.n	80092ba <get_trans_style+0x36>
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8009330:	2108      	movs	r1, #8
 8009332:	2201      	movs	r2, #1
 8009334:	e7c6      	b.n	80092c4 <get_trans_style+0x40>
 8009336:	46c0      	nop			; (mov r8, r8)
 8009338:	fffffe07 	.word	0xfffffe07
 800933c:	20000001 	.word	0x20000001

08009340 <trans_del.isra.0>:
 * @param obj pointer to an object which transition(s) should be removed
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
 8009340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009342:	4657      	mov	r7, sl
 8009344:	464e      	mov	r6, r9
 8009346:	46de      	mov	lr, fp
 8009348:	4645      	mov	r5, r8
 800934a:	b5e0      	push	{r5, r6, r7, lr}
 800934c:	001f      	movs	r7, r3
{
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800934e:	4b3f      	ldr	r3, [pc, #252]	; (800944c <trans_del.isra.0+0x10c>)
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
 8009350:	b083      	sub	sp, #12
 8009352:	0006      	movs	r6, r0
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8009354:	0018      	movs	r0, r3
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
 8009356:	468a      	mov	sl, r1
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 8009358:	4699      	mov	r9, r3
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
 800935a:	9200      	str	r2, [sp, #0]
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800935c:	f008 fd7c 	bl	8011e58 <_lv_ll_get_tail>
 8009360:	1e04      	subs	r4, r0, #0
    while(tr != NULL) {
 8009362:	d04e      	beq.n	8009402 <trans_del.isra.0+0xc2>
        if(tr == tr_limit) break;
 8009364:	42b8      	cmp	r0, r7
 8009366:	d04c      	beq.n	8009402 <trans_del.isra.0+0xc2>
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
            /*Remove any transitioned properties from the trans. style
             *to allow changing it by normal styles*/
            uint32_t i;
            for(i = 0; i < obj->style_cnt; i++) {
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 8009368:	2302      	movs	r3, #2
 800936a:	46b8      	mov	r8, r7
 800936c:	469b      	mov	fp, r3
 800936e:	e003      	b.n	8009378 <trans_del.isra.0+0x38>
    while(tr != NULL) {
 8009370:	2c00      	cmp	r4, #0
 8009372:	d046      	beq.n	8009402 <trans_del.isra.0+0xc2>
        if(tr == tr_limit) break;
 8009374:	45a0      	cmp	r8, r4
 8009376:	d044      	beq.n	8009402 <trans_del.isra.0+0xc2>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8009378:	0025      	movs	r5, r4
 800937a:	0021      	movs	r1, r4
 800937c:	4648      	mov	r0, r9
 800937e:	f008 fd75 	bl	8011e6c <_lv_ll_get_prev>
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 8009382:	682b      	ldr	r3, [r5, #0]
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8009384:	0004      	movs	r4, r0
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 8009386:	42b3      	cmp	r3, r6
 8009388:	d1f2      	bne.n	8009370 <trans_del.isra.0+0x30>
 800938a:	68ab      	ldr	r3, [r5, #8]
 800938c:	4553      	cmp	r3, sl
 800938e:	d003      	beq.n	8009398 <trans_del.isra.0+0x58>
 8009390:	23f0      	movs	r3, #240	; 0xf0
 8009392:	031b      	lsls	r3, r3, #12
 8009394:	459a      	cmp	sl, r3
 8009396:	d1eb      	bne.n	8009370 <trans_del.isra.0+0x30>
 8009398:	88ab      	ldrh	r3, [r5, #4]
 800939a:	9a00      	ldr	r2, [sp, #0]
 800939c:	4293      	cmp	r3, r2
 800939e:	d003      	beq.n	80093a8 <trans_del.isra.0+0x68>
 80093a0:	0013      	movs	r3, r2
 80093a2:	4a2b      	ldr	r2, [pc, #172]	; (8009450 <trans_del.isra.0+0x110>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d1e3      	bne.n	8009370 <trans_del.isra.0+0x30>
            for(i = 0; i < obj->style_cnt; i++) {
 80093a8:	8bf2      	ldrh	r2, [r6, #30]
 80093aa:	05d2      	lsls	r2, r2, #23
 80093ac:	0e92      	lsrs	r2, r2, #26
 80093ae:	d01b      	beq.n	80093e8 <trans_del.isra.0+0xa8>
 80093b0:	23f0      	movs	r3, #240	; 0xf0
 80093b2:	2700      	movs	r7, #0
 80093b4:	031b      	lsls	r3, r3, #12
 80093b6:	459a      	cmp	sl, r3
 80093b8:	d02a      	beq.n	8009410 <trans_del.isra.0+0xd0>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 80093ba:	68f1      	ldr	r1, [r6, #12]
 80093bc:	4658      	mov	r0, fp
 80093be:	468c      	mov	ip, r1
 80093c0:	00fb      	lsls	r3, r7, #3
 80093c2:	4463      	add	r3, ip
 80093c4:	79d9      	ldrb	r1, [r3, #7]
 80093c6:	4208      	tst	r0, r1
 80093c8:	d00b      	beq.n	80093e2 <trans_del.isra.0+0xa2>
 80093ca:	6859      	ldr	r1, [r3, #4]
 80093cc:	0209      	lsls	r1, r1, #8
 80093ce:	0a09      	lsrs	r1, r1, #8
 80093d0:	458a      	cmp	sl, r1
 80093d2:	d106      	bne.n	80093e2 <trans_del.isra.0+0xa2>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 80093d4:	88a9      	ldrh	r1, [r5, #4]
 80093d6:	6818      	ldr	r0, [r3, #0]
 80093d8:	f009 fa58 	bl	801288c <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 80093dc:	8bf2      	ldrh	r2, [r6, #30]
 80093de:	05d2      	lsls	r2, r2, #23
 80093e0:	0e92      	lsrs	r2, r2, #26
 80093e2:	3701      	adds	r7, #1
 80093e4:	4297      	cmp	r7, r2
 80093e6:	d3e8      	bcc.n	80093ba <trans_del.isra.0+0x7a>
                }
            }

            /*Free the transition descriptor too*/
            lv_anim_del(tr, NULL);
 80093e8:	2100      	movs	r1, #0
 80093ea:	0028      	movs	r0, r5
 80093ec:	f007 fdec 	bl	8010fc8 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 80093f0:	4648      	mov	r0, r9
 80093f2:	0029      	movs	r1, r5
 80093f4:	f008 fd00 	bl	8011df8 <_lv_ll_remove>
            lv_mem_free(tr);
 80093f8:	0028      	movs	r0, r5
 80093fa:	f008 fdf9 	bl	8011ff0 <lv_mem_free>
    while(tr != NULL) {
 80093fe:	2c00      	cmp	r4, #0
 8009400:	d1b8      	bne.n	8009374 <trans_del.isra.0+0x34>

        }
        tr = tr_prev;
    }
    return removed;
}
 8009402:	b003      	add	sp, #12
 8009404:	bcf0      	pop	{r4, r5, r6, r7}
 8009406:	46bb      	mov	fp, r7
 8009408:	46b2      	mov	sl, r6
 800940a:	46a9      	mov	r9, r5
 800940c:	46a0      	mov	r8, r4
 800940e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009410:	68f0      	ldr	r0, [r6, #12]
 8009412:	9401      	str	r4, [sp, #4]
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 8009414:	465c      	mov	r4, fp
 8009416:	00fb      	lsls	r3, r7, #3
 8009418:	18c3      	adds	r3, r0, r3
 800941a:	79d9      	ldrb	r1, [r3, #7]
 800941c:	420c      	tst	r4, r1
 800941e:	d010      	beq.n	8009442 <trans_del.isra.0+0x102>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 8009420:	88a9      	ldrh	r1, [r5, #4]
 8009422:	6818      	ldr	r0, [r3, #0]
 8009424:	f009 fa32 	bl	801288c <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 8009428:	8bf2      	ldrh	r2, [r6, #30]
 800942a:	3701      	adds	r7, #1
 800942c:	05d2      	lsls	r2, r2, #23
 800942e:	0e92      	lsrs	r2, r2, #26
 8009430:	4297      	cmp	r7, r2
 8009432:	d209      	bcs.n	8009448 <trans_del.isra.0+0x108>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 8009434:	465c      	mov	r4, fp
 8009436:	68f0      	ldr	r0, [r6, #12]
 8009438:	00fb      	lsls	r3, r7, #3
 800943a:	18c3      	adds	r3, r0, r3
 800943c:	79d9      	ldrb	r1, [r3, #7]
 800943e:	420c      	tst	r4, r1
 8009440:	d1ee      	bne.n	8009420 <trans_del.isra.0+0xe0>
            for(i = 0; i < obj->style_cnt; i++) {
 8009442:	3701      	adds	r7, #1
 8009444:	4297      	cmp	r7, r2
 8009446:	d3e5      	bcc.n	8009414 <trans_del.isra.0+0xd4>
 8009448:	9c01      	ldr	r4, [sp, #4]
 800944a:	e7cd      	b.n	80093e8 <trans_del.isra.0+0xa8>
 800944c:	200033d4 	.word	0x200033d4
 8009450:	0000ffff 	.word	0x0000ffff

08009454 <refresh_children_style>:
{
 8009454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009456:	46de      	mov	lr, fp
 8009458:	4657      	mov	r7, sl
 800945a:	464e      	mov	r6, r9
 800945c:	4645      	mov	r5, r8
 800945e:	b5e0      	push	{r5, r6, r7, lr}
 8009460:	b095      	sub	sp, #84	; 0x54
 8009462:	9012      	str	r0, [sp, #72]	; 0x48
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009464:	f001 fd86 	bl	800af74 <lv_obj_get_child_cnt>
 8009468:	900c      	str	r0, [sp, #48]	; 0x30
    for(i = 0; i < child_cnt; i++) {
 800946a:	2800      	cmp	r0, #0
 800946c:	d100      	bne.n	8009470 <refresh_children_style+0x1c>
 800946e:	e129      	b.n	80096c4 <refresh_children_style+0x270>
 8009470:	2300      	movs	r3, #0
 8009472:	9305      	str	r3, [sp, #20]
        lv_obj_t * child = obj->spec_attr->children[i];
 8009474:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009476:	9a05      	ldr	r2, [sp, #20]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	0092      	lsls	r2, r2, #2
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	58d3      	ldr	r3, [r2, r3]
 8009480:	001c      	movs	r4, r3
        lv_obj_invalidate(child);
 8009482:	0018      	movs	r0, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 8009484:	930d      	str	r3, [sp, #52]	; 0x34
        lv_obj_invalidate(child);
 8009486:	f7fd f85b 	bl	8006540 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800948a:	2200      	movs	r2, #0
 800948c:	212a      	movs	r1, #42	; 0x2a
 800948e:	0020      	movs	r0, r4
 8009490:	f7f8 fc64 	bl	8001d5c <lv_event_send>
        lv_obj_invalidate(child);
 8009494:	0020      	movs	r0, r4
 8009496:	f7fd f853 	bl	8006540 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800949a:	0020      	movs	r0, r4
 800949c:	f001 fd6a 	bl	800af74 <lv_obj_get_child_cnt>
 80094a0:	900e      	str	r0, [sp, #56]	; 0x38
    for(i = 0; i < child_cnt; i++) {
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d100      	bne.n	80094a8 <refresh_children_style+0x54>
 80094a6:	e106      	b.n	80096b6 <refresh_children_style+0x262>
 80094a8:	2300      	movs	r3, #0
 80094aa:	9306      	str	r3, [sp, #24]
        lv_obj_t * child = obj->spec_attr->children[i];
 80094ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094ae:	9a06      	ldr	r2, [sp, #24]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	0092      	lsls	r2, r2, #2
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	58d3      	ldr	r3, [r2, r3]
 80094b8:	001c      	movs	r4, r3
        lv_obj_invalidate(child);
 80094ba:	0018      	movs	r0, r3
        lv_obj_t * child = obj->spec_attr->children[i];
 80094bc:	930f      	str	r3, [sp, #60]	; 0x3c
        lv_obj_invalidate(child);
 80094be:	f7fd f83f 	bl	8006540 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 80094c2:	2200      	movs	r2, #0
 80094c4:	212a      	movs	r1, #42	; 0x2a
 80094c6:	0020      	movs	r0, r4
 80094c8:	f7f8 fc48 	bl	8001d5c <lv_event_send>
        lv_obj_invalidate(child);
 80094cc:	0020      	movs	r0, r4
 80094ce:	f7fd f837 	bl	8006540 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80094d2:	0020      	movs	r0, r4
 80094d4:	f001 fd4e 	bl	800af74 <lv_obj_get_child_cnt>
 80094d8:	9010      	str	r0, [sp, #64]	; 0x40
    for(i = 0; i < child_cnt; i++) {
 80094da:	2800      	cmp	r0, #0
 80094dc:	d100      	bne.n	80094e0 <refresh_children_style+0x8c>
 80094de:	e0e3      	b.n	80096a8 <refresh_children_style+0x254>
 80094e0:	2300      	movs	r3, #0
 80094e2:	9307      	str	r3, [sp, #28]
        lv_obj_t * child = obj->spec_attr->children[i];
 80094e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094e6:	9a07      	ldr	r2, [sp, #28]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	0092      	lsls	r2, r2, #2
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	58d3      	ldr	r3, [r2, r3]
 80094f0:	4698      	mov	r8, r3
        lv_obj_invalidate(child);
 80094f2:	0018      	movs	r0, r3
 80094f4:	f7fd f824 	bl	8006540 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 80094f8:	2200      	movs	r2, #0
 80094fa:	212a      	movs	r1, #42	; 0x2a
 80094fc:	4640      	mov	r0, r8
 80094fe:	f7f8 fc2d 	bl	8001d5c <lv_event_send>
        lv_obj_invalidate(child);
 8009502:	4640      	mov	r0, r8
 8009504:	f7fd f81c 	bl	8006540 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009508:	4640      	mov	r0, r8
 800950a:	f001 fd33 	bl	800af74 <lv_obj_get_child_cnt>
 800950e:	9011      	str	r0, [sp, #68]	; 0x44
    for(i = 0; i < child_cnt; i++) {
 8009510:	2800      	cmp	r0, #0
 8009512:	d100      	bne.n	8009516 <refresh_children_style+0xc2>
 8009514:	e0c1      	b.n	800969a <refresh_children_style+0x246>
 8009516:	2300      	movs	r3, #0
 8009518:	46c3      	mov	fp, r8
 800951a:	9308      	str	r3, [sp, #32]
        lv_obj_t * child = obj->spec_attr->children[i];
 800951c:	465b      	mov	r3, fp
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	9a08      	ldr	r2, [sp, #32]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	0092      	lsls	r2, r2, #2
 8009526:	58d3      	ldr	r3, [r2, r3]
 8009528:	4698      	mov	r8, r3
        lv_obj_invalidate(child);
 800952a:	0018      	movs	r0, r3
 800952c:	f7fd f808 	bl	8006540 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 8009530:	2200      	movs	r2, #0
 8009532:	212a      	movs	r1, #42	; 0x2a
 8009534:	4640      	mov	r0, r8
 8009536:	f7f8 fc11 	bl	8001d5c <lv_event_send>
        lv_obj_invalidate(child);
 800953a:	4640      	mov	r0, r8
 800953c:	f7fd f800 	bl	8006540 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009540:	4640      	mov	r0, r8
 8009542:	f001 fd17 	bl	800af74 <lv_obj_get_child_cnt>
 8009546:	9002      	str	r0, [sp, #8]
    for(i = 0; i < child_cnt; i++) {
 8009548:	2800      	cmp	r0, #0
 800954a:	d100      	bne.n	800954e <refresh_children_style+0xfa>
 800954c:	e09e      	b.n	800968c <refresh_children_style+0x238>
 800954e:	465b      	mov	r3, fp
 8009550:	2600      	movs	r6, #0
 8009552:	46c1      	mov	r9, r8
 8009554:	9313      	str	r3, [sp, #76]	; 0x4c
        lv_obj_t * child = obj->spec_attr->children[i];
 8009556:	464b      	mov	r3, r9
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	00b2      	lsls	r2, r6, #2
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	58d5      	ldr	r5, [r2, r3]
        lv_obj_invalidate(child);
 8009560:	0028      	movs	r0, r5
 8009562:	f7fc ffed 	bl	8006540 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 8009566:	2200      	movs	r2, #0
 8009568:	212a      	movs	r1, #42	; 0x2a
 800956a:	0028      	movs	r0, r5
 800956c:	f7f8 fbf6 	bl	8001d5c <lv_event_send>
        lv_obj_invalidate(child);
 8009570:	0028      	movs	r0, r5
 8009572:	f7fc ffe5 	bl	8006540 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009576:	0028      	movs	r0, r5
 8009578:	f001 fcfc 	bl	800af74 <lv_obj_get_child_cnt>
 800957c:	9000      	str	r0, [sp, #0]
    for(i = 0; i < child_cnt; i++) {
 800957e:	2800      	cmp	r0, #0
 8009580:	d07d      	beq.n	800967e <refresh_children_style+0x22a>
 8009582:	2300      	movs	r3, #0
 8009584:	46c8      	mov	r8, r9
 8009586:	469a      	mov	sl, r3
 8009588:	46a9      	mov	r9, r5
 800958a:	46b3      	mov	fp, r6
        lv_obj_t * child = obj->spec_attr->children[i];
 800958c:	464b      	mov	r3, r9
 800958e:	4652      	mov	r2, sl
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	0092      	lsls	r2, r2, #2
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	58d7      	ldr	r7, [r2, r3]
        lv_obj_invalidate(child);
 8009598:	0038      	movs	r0, r7
 800959a:	f7fc ffd1 	bl	8006540 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800959e:	2200      	movs	r2, #0
 80095a0:	212a      	movs	r1, #42	; 0x2a
 80095a2:	0038      	movs	r0, r7
 80095a4:	f7f8 fbda 	bl	8001d5c <lv_event_send>
        lv_obj_invalidate(child);
 80095a8:	0038      	movs	r0, r7
 80095aa:	f7fc ffc9 	bl	8006540 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80095ae:	0038      	movs	r0, r7
 80095b0:	f001 fce0 	bl	800af74 <lv_obj_get_child_cnt>
 80095b4:	900a      	str	r0, [sp, #40]	; 0x28
    for(i = 0; i < child_cnt; i++) {
 80095b6:	2800      	cmp	r0, #0
 80095b8:	d059      	beq.n	800966e <refresh_children_style+0x21a>
 80095ba:	2300      	movs	r3, #0
 80095bc:	9301      	str	r3, [sp, #4]
        lv_obj_t * child = obj->spec_attr->children[i];
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	9a01      	ldr	r2, [sp, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	0092      	lsls	r2, r2, #2
 80095c6:	58d6      	ldr	r6, [r2, r3]
        lv_obj_invalidate(child);
 80095c8:	0030      	movs	r0, r6
 80095ca:	f7fc ffb9 	bl	8006540 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 80095ce:	2200      	movs	r2, #0
 80095d0:	212a      	movs	r1, #42	; 0x2a
 80095d2:	0030      	movs	r0, r6
 80095d4:	f7f8 fbc2 	bl	8001d5c <lv_event_send>
        lv_obj_invalidate(child);
 80095d8:	0030      	movs	r0, r6
 80095da:	f7fc ffb1 	bl	8006540 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80095de:	0030      	movs	r0, r6
 80095e0:	f001 fcc8 	bl	800af74 <lv_obj_get_child_cnt>
 80095e4:	9003      	str	r0, [sp, #12]
    for(i = 0; i < child_cnt; i++) {
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d03b      	beq.n	8009662 <refresh_children_style+0x20e>
 80095ea:	4643      	mov	r3, r8
 80095ec:	2500      	movs	r5, #0
 80095ee:	46b8      	mov	r8, r7
 80095f0:	0037      	movs	r7, r6
 80095f2:	9309      	str	r3, [sp, #36]	; 0x24
        lv_obj_t * child = obj->spec_attr->children[i];
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	00aa      	lsls	r2, r5, #2
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	58d4      	ldr	r4, [r2, r3]
        lv_obj_invalidate(child);
 80095fc:	0020      	movs	r0, r4
 80095fe:	f7fc ff9f 	bl	8006540 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 8009602:	2200      	movs	r2, #0
 8009604:	212a      	movs	r1, #42	; 0x2a
 8009606:	0020      	movs	r0, r4
 8009608:	f7f8 fba8 	bl	8001d5c <lv_event_send>
        lv_obj_invalidate(child);
 800960c:	0020      	movs	r0, r4
 800960e:	f7fc ff97 	bl	8006540 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009612:	0020      	movs	r0, r4
 8009614:	f001 fcae 	bl	800af74 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8009618:	2800      	cmp	r0, #0
 800961a:	d01b      	beq.n	8009654 <refresh_children_style+0x200>
 800961c:	2300      	movs	r3, #0
 800961e:	900b      	str	r0, [sp, #44]	; 0x2c
 8009620:	9304      	str	r3, [sp, #16]
        lv_obj_t * child = obj->spec_attr->children[i];
 8009622:	68a3      	ldr	r3, [r4, #8]
 8009624:	9a04      	ldr	r2, [sp, #16]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	0092      	lsls	r2, r2, #2
 800962a:	58d6      	ldr	r6, [r2, r3]
        lv_obj_invalidate(child);
 800962c:	0030      	movs	r0, r6
 800962e:	f7fc ff87 	bl	8006540 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 8009632:	2200      	movs	r2, #0
 8009634:	212a      	movs	r1, #42	; 0x2a
 8009636:	0030      	movs	r0, r6
 8009638:	f7f8 fb90 	bl	8001d5c <lv_event_send>
        lv_obj_invalidate(child);
 800963c:	0030      	movs	r0, r6
 800963e:	f7fc ff7f 	bl	8006540 <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 8009642:	0030      	movs	r0, r6
 8009644:	f7ff ff06 	bl	8009454 <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 8009648:	9a04      	ldr	r2, [sp, #16]
 800964a:	1c53      	adds	r3, r2, #1
 800964c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800964e:	9304      	str	r3, [sp, #16]
 8009650:	429a      	cmp	r2, r3
 8009652:	d1e6      	bne.n	8009622 <refresh_children_style+0x1ce>
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	3501      	adds	r5, #1
 8009658:	42ab      	cmp	r3, r5
 800965a:	d1cb      	bne.n	80095f4 <refresh_children_style+0x1a0>
 800965c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800965e:	4647      	mov	r7, r8
 8009660:	4698      	mov	r8, r3
 8009662:	9b01      	ldr	r3, [sp, #4]
 8009664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009666:	3301      	adds	r3, #1
 8009668:	9301      	str	r3, [sp, #4]
 800966a:	429a      	cmp	r2, r3
 800966c:	d1a7      	bne.n	80095be <refresh_children_style+0x16a>
 800966e:	2301      	movs	r3, #1
 8009670:	469c      	mov	ip, r3
 8009672:	9b00      	ldr	r3, [sp, #0]
 8009674:	44e2      	add	sl, ip
 8009676:	4553      	cmp	r3, sl
 8009678:	d188      	bne.n	800958c <refresh_children_style+0x138>
 800967a:	46c1      	mov	r9, r8
 800967c:	465e      	mov	r6, fp
 800967e:	9b02      	ldr	r3, [sp, #8]
 8009680:	3601      	adds	r6, #1
 8009682:	42b3      	cmp	r3, r6
 8009684:	d000      	beq.n	8009688 <refresh_children_style+0x234>
 8009686:	e766      	b.n	8009556 <refresh_children_style+0x102>
 8009688:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800968a:	469b      	mov	fp, r3
 800968c:	9b08      	ldr	r3, [sp, #32]
 800968e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009690:	3301      	adds	r3, #1
 8009692:	9308      	str	r3, [sp, #32]
 8009694:	429a      	cmp	r2, r3
 8009696:	d000      	beq.n	800969a <refresh_children_style+0x246>
 8009698:	e740      	b.n	800951c <refresh_children_style+0xc8>
 800969a:	9b07      	ldr	r3, [sp, #28]
 800969c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800969e:	3301      	adds	r3, #1
 80096a0:	9307      	str	r3, [sp, #28]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d000      	beq.n	80096a8 <refresh_children_style+0x254>
 80096a6:	e71d      	b.n	80094e4 <refresh_children_style+0x90>
 80096a8:	9b06      	ldr	r3, [sp, #24]
 80096aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096ac:	3301      	adds	r3, #1
 80096ae:	9306      	str	r3, [sp, #24]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d000      	beq.n	80096b6 <refresh_children_style+0x262>
 80096b4:	e6fa      	b.n	80094ac <refresh_children_style+0x58>
 80096b6:	9b05      	ldr	r3, [sp, #20]
 80096b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096ba:	3301      	adds	r3, #1
 80096bc:	9305      	str	r3, [sp, #20]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d000      	beq.n	80096c4 <refresh_children_style+0x270>
 80096c2:	e6d7      	b.n	8009474 <refresh_children_style+0x20>
}
 80096c4:	b015      	add	sp, #84	; 0x54
 80096c6:	bcf0      	pop	{r4, r5, r6, r7}
 80096c8:	46bb      	mov	fp, r7
 80096ca:	46b2      	mov	sl, r6
 80096cc:	46a9      	mov	r9, r5
 80096ce:	46a0      	mov	r8, r4
 80096d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d2:	46c0      	nop			; (mov r8, r8)

080096d4 <_lv_obj_style_init>:
{
 80096d4:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 80096d6:	2114      	movs	r1, #20
 80096d8:	4801      	ldr	r0, [pc, #4]	; (80096e0 <_lv_obj_style_init+0xc>)
 80096da:	f008 fb55 	bl	8011d88 <_lv_ll_init>
}
 80096de:	bd10      	pop	{r4, pc}
 80096e0:	200033d4 	.word	0x200033d4

080096e4 <lv_obj_enable_style_refresh>:
    style_refr = en;
 80096e4:	4b01      	ldr	r3, [pc, #4]	; (80096ec <lv_obj_enable_style_refresh+0x8>)
 80096e6:	7018      	strb	r0, [r3, #0]
}
 80096e8:	4770      	bx	lr
 80096ea:	46c0      	nop			; (mov r8, r8)
 80096ec:	20000004 	.word	0x20000004

080096f0 <lv_obj_get_style_prop>:
{
 80096f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096f2:	46de      	mov	lr, fp
 80096f4:	4657      	mov	r7, sl
 80096f6:	4645      	mov	r5, r8
 80096f8:	464e      	mov	r6, r9
 80096fa:	b5e0      	push	{r5, r6, r7, lr}
 80096fc:	0005      	movs	r5, r0
 80096fe:	b087      	sub	sp, #28
 * @param flag Flag
 * @return true if the flag is set for this property
 */
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)
{
    return _lv_style_prop_lookup_flags(prop) & flag;
 8009700:	0010      	movs	r0, r2
 8009702:	000f      	movs	r7, r1
 8009704:	4693      	mov	fp, r2
 8009706:	f009 fa41 	bl	8012b8c <_lv_style_prop_lookup_flags>
 800970a:	2301      	movs	r3, #1
 800970c:	4003      	ands	r3, r0
 800970e:	9303      	str	r3, [sp, #12]
    while(obj) {
 8009710:	2d00      	cmp	r5, #0
 8009712:	d100      	bne.n	8009716 <lv_obj_get_style_prop+0x26>
 8009714:	e08f      	b.n	8009836 <lv_obj_get_style_prop+0x146>
    return selector & 0xFF0000;
 8009716:	23ff      	movs	r3, #255	; 0xff
 8009718:	041b      	lsls	r3, r3, #16
 800971a:	469a      	mov	sl, r3
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 800971c:	4658      	mov	r0, fp
 800971e:	f009 fa2d 	bl	8012b7c <_lv_style_get_prop_group>
 8009722:	2601      	movs	r6, #1
    lv_state_t state = obj->state;
 8009724:	8bab      	ldrh	r3, [r5, #28]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 8009726:	4086      	lsls	r6, r0
    lv_state_t state = obj->state;
 8009728:	9302      	str	r3, [sp, #8]
    lv_state_t state_inv = ~state;
 800972a:	43db      	mvns	r3, r3
 800972c:	b29b      	uxth	r3, r3
 800972e:	4699      	mov	r9, r3
    for(i = 0; i < obj->style_cnt; i++) {
 8009730:	8bea      	ldrh	r2, [r5, #30]
    bool skip_trans = obj->skip_trans;
 8009732:	7fab      	ldrb	r3, [r5, #30]
    for(i = 0; i < obj->style_cnt; i++) {
 8009734:	05d1      	lsls	r1, r2, #23
    bool skip_trans = obj->skip_trans;
 8009736:	075b      	lsls	r3, r3, #29
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 8009738:	b2f6      	uxtb	r6, r6
    bool skip_trans = obj->skip_trans;
 800973a:	0fdb      	lsrs	r3, r3, #31
    for(i = 0; i < obj->style_cnt; i++) {
 800973c:	0e89      	lsrs	r1, r1, #26
 800973e:	d100      	bne.n	8009742 <lv_obj_get_style_prop+0x52>
 8009740:	e06e      	b.n	8009820 <lv_obj_get_style_prop+0x130>
 8009742:	2b00      	cmp	r3, #0
 8009744:	d000      	beq.n	8009748 <lv_obj_get_style_prop+0x58>
 8009746:	e081      	b.n	800984c <lv_obj_get_style_prop+0x15c>
        if(obj_style->is_trans == false) break;
 8009748:	3302      	adds	r3, #2
    for(i = 0; i < obj->style_cnt; i++) {
 800974a:	2400      	movs	r4, #0
        if(obj_style->is_trans == false) break;
 800974c:	4698      	mov	r8, r3
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800974e:	4694      	mov	ip, r2
 8009750:	9601      	str	r6, [sp, #4]
 8009752:	e019      	b.n	8009788 <lv_obj_get_style_prop+0x98>
    return selector & 0xFF0000;
 8009754:	4652      	mov	r2, sl
 8009756:	6843      	ldr	r3, [r0, #4]
 8009758:	4013      	ands	r3, r2
        if(part_act != part) continue;
 800975a:	429f      	cmp	r7, r3
 800975c:	d111      	bne.n	8009782 <lv_obj_get_style_prop+0x92>
        if((obj_style->style->has_group & group) == 0) continue;
 800975e:	6800      	ldr	r0, [r0, #0]
 8009760:	9a01      	ldr	r2, [sp, #4]
 8009762:	7983      	ldrb	r3, [r0, #6]
 8009764:	4213      	tst	r3, r2
 8009766:	d00c      	beq.n	8009782 <lv_obj_get_style_prop+0x92>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 8009768:	4659      	mov	r1, fp
 800976a:	aa05      	add	r2, sp, #20
 800976c:	f009 f9aa 	bl	8012ac4 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 8009770:	2801      	cmp	r0, #1
 8009772:	d04d      	beq.n	8009810 <lv_obj_get_style_prop+0x120>
        else if(found == LV_STYLE_RES_INHERIT) {
 8009774:	2802      	cmp	r0, #2
 8009776:	d100      	bne.n	800977a <lv_obj_get_style_prop+0x8a>
 8009778:	e07d      	b.n	8009876 <lv_obj_get_style_prop+0x186>
    for(i = 0; i < obj->style_cnt; i++) {
 800977a:	8beb      	ldrh	r3, [r5, #30]
 800977c:	469c      	mov	ip, r3
 800977e:	05d9      	lsls	r1, r3, #23
 8009780:	0e89      	lsrs	r1, r1, #26
 8009782:	3401      	adds	r4, #1
 8009784:	42a1      	cmp	r1, r4
 8009786:	d94b      	bls.n	8009820 <lv_obj_get_style_prop+0x130>
        if(obj_style->is_trans == false) break;
 8009788:	4646      	mov	r6, r8
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800978a:	68eb      	ldr	r3, [r5, #12]
 800978c:	00e0      	lsls	r0, r4, #3
 800978e:	1818      	adds	r0, r3, r0
        if(obj_style->is_trans == false) break;
 8009790:	79c2      	ldrb	r2, [r0, #7]
 8009792:	4216      	tst	r6, r2
 8009794:	d1de      	bne.n	8009754 <lv_obj_get_style_prop+0x64>
 8009796:	4662      	mov	r2, ip
 8009798:	9e01      	ldr	r6, [sp, #4]
    for(; i < obj->style_cnt; i++) {
 800979a:	428c      	cmp	r4, r1
 800979c:	d240      	bcs.n	8009820 <lv_obj_get_style_prop+0x130>
 800979e:	2101      	movs	r1, #1
 80097a0:	4249      	negs	r1, r1
 80097a2:	3401      	adds	r4, #1
 80097a4:	9101      	str	r1, [sp, #4]
 80097a6:	e008      	b.n	80097ba <lv_obj_get_style_prop+0xca>
        else if(found == LV_STYLE_RES_INHERIT) {
 80097a8:	2802      	cmp	r0, #2
 80097aa:	d064      	beq.n	8009876 <lv_obj_get_style_prop+0x186>
 80097ac:	8bea      	ldrh	r2, [r5, #30]
    for(; i < obj->style_cnt; i++) {
 80097ae:	05d3      	lsls	r3, r2, #23
 80097b0:	0e9b      	lsrs	r3, r3, #26
 80097b2:	42a3      	cmp	r3, r4
 80097b4:	d929      	bls.n	800980a <lv_obj_get_style_prop+0x11a>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 80097b6:	68eb      	ldr	r3, [r5, #12]
 80097b8:	3401      	adds	r4, #1
 80097ba:	00e1      	lsls	r1, r4, #3
 80097bc:	3908      	subs	r1, #8
 80097be:	185b      	adds	r3, r3, r1
 80097c0:	6818      	ldr	r0, [r3, #0]
 80097c2:	7981      	ldrb	r1, [r0, #6]
 80097c4:	4231      	tst	r1, r6
 80097c6:	d0f2      	beq.n	80097ae <lv_obj_get_style_prop+0xbe>
    return selector & 0xFF0000;
 80097c8:	4651      	mov	r1, sl
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	021b      	lsls	r3, r3, #8
 80097ce:	0a1b      	lsrs	r3, r3, #8
    return selector & 0xFF0000;
 80097d0:	4019      	ands	r1, r3
        if(part_act != part) continue;
 80097d2:	42b9      	cmp	r1, r7
 80097d4:	d1eb      	bne.n	80097ae <lv_obj_get_style_prop+0xbe>
    return selector & 0xFFFF;
 80097d6:	b299      	uxth	r1, r3
 80097d8:	4688      	mov	r8, r1
        if((state_act & state_inv)) continue;
 80097da:	4649      	mov	r1, r9
 80097dc:	420b      	tst	r3, r1
 80097de:	d1e6      	bne.n	80097ae <lv_obj_get_style_prop+0xbe>
        if(state_act <= weight) continue;
 80097e0:	9b01      	ldr	r3, [sp, #4]
 80097e2:	4598      	cmp	r8, r3
 80097e4:	dde3      	ble.n	80097ae <lv_obj_get_style_prop+0xbe>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 80097e6:	4659      	mov	r1, fp
 80097e8:	aa05      	add	r2, sp, #20
 80097ea:	f009 f96b 	bl	8012ac4 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 80097ee:	2801      	cmp	r0, #1
 80097f0:	d1da      	bne.n	80097a8 <lv_obj_get_style_prop+0xb8>
            if(state_act == state) {
 80097f2:	9b02      	ldr	r3, [sp, #8]
                *v = value_tmp;
 80097f4:	9805      	ldr	r0, [sp, #20]
            if(state_act == state) {
 80097f6:	4543      	cmp	r3, r8
 80097f8:	d00b      	beq.n	8009812 <lv_obj_get_style_prop+0x122>
    for(; i < obj->style_cnt; i++) {
 80097fa:	8bea      	ldrh	r2, [r5, #30]
 80097fc:	05d3      	lsls	r3, r2, #23
 80097fe:	0e9b      	lsrs	r3, r3, #26
 8009800:	42a3      	cmp	r3, r4
 8009802:	d906      	bls.n	8009812 <lv_obj_get_style_prop+0x122>
 8009804:	4643      	mov	r3, r8
 8009806:	9301      	str	r3, [sp, #4]
 8009808:	e7d5      	b.n	80097b6 <lv_obj_get_style_prop+0xc6>
    if(weight >= 0) {
 800980a:	9b01      	ldr	r3, [sp, #4]
 800980c:	3301      	adds	r3, #1
 800980e:	d007      	beq.n	8009820 <lv_obj_get_style_prop+0x130>
        *v = value_tmp;
 8009810:	9805      	ldr	r0, [sp, #20]
}
 8009812:	b007      	add	sp, #28
 8009814:	bcf0      	pop	{r4, r5, r6, r7}
 8009816:	46bb      	mov	fp, r7
 8009818:	46b2      	mov	sl, r6
 800981a:	46a9      	mov	r9, r5
 800981c:	46a0      	mov	r8, r4
 800981e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(!inheritable) break;
 8009820:	9b03      	ldr	r3, [sp, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d007      	beq.n	8009836 <lv_obj_get_style_prop+0x146>
        if(found != LV_STYLE_RES_INHERIT && part != LV_PART_MAIN) {
 8009826:	2f00      	cmp	r7, #0
 8009828:	d123      	bne.n	8009872 <lv_obj_get_style_prop+0x182>
        obj = lv_obj_get_parent(obj);
 800982a:	0028      	movs	r0, r5
 800982c:	f001 fb8c 	bl	800af48 <lv_obj_get_parent>
 8009830:	1e05      	subs	r5, r0, #0
    while(obj) {
 8009832:	d000      	beq.n	8009836 <lv_obj_get_style_prop+0x146>
 8009834:	e772      	b.n	800971c <lv_obj_get_style_prop+0x2c>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 8009836:	2f00      	cmp	r7, #0
 8009838:	d104      	bne.n	8009844 <lv_obj_get_style_prop+0x154>
 800983a:	465b      	mov	r3, fp
 800983c:	2b01      	cmp	r3, #1
 800983e:	d02a      	beq.n	8009896 <lv_obj_get_style_prop+0x1a6>
 8009840:	2b04      	cmp	r3, #4
 8009842:	d01c      	beq.n	800987e <lv_obj_get_style_prop+0x18e>
            value_act = lv_style_prop_get_default(prop);
 8009844:	4658      	mov	r0, fp
 8009846:	f009 f91d 	bl	8012a84 <lv_style_prop_get_default>
 800984a:	e7e2      	b.n	8009812 <lv_obj_get_style_prop+0x122>
        if(obj_style->is_trans == false) break;
 800984c:	2002      	movs	r0, #2
 800984e:	68eb      	ldr	r3, [r5, #12]
 8009850:	4680      	mov	r8, r0
 8009852:	469c      	mov	ip, r3
    for(i = 0; i < obj->style_cnt; i++) {
 8009854:	2400      	movs	r4, #0
        if(obj_style->is_trans == false) break;
 8009856:	0018      	movs	r0, r3
 8009858:	9201      	str	r2, [sp, #4]
 800985a:	e003      	b.n	8009864 <lv_obj_get_style_prop+0x174>
    for(i = 0; i < obj->style_cnt; i++) {
 800985c:	3401      	adds	r4, #1
 800985e:	3008      	adds	r0, #8
 8009860:	428c      	cmp	r4, r1
 8009862:	d2dd      	bcs.n	8009820 <lv_obj_get_style_prop+0x130>
        if(obj_style->is_trans == false) break;
 8009864:	4642      	mov	r2, r8
 8009866:	79c3      	ldrb	r3, [r0, #7]
 8009868:	421a      	tst	r2, r3
 800986a:	d1f7      	bne.n	800985c <lv_obj_get_style_prop+0x16c>
 800986c:	4663      	mov	r3, ip
 800986e:	9a01      	ldr	r2, [sp, #4]
 8009870:	e793      	b.n	800979a <lv_obj_get_style_prop+0xaa>
            part = LV_PART_MAIN;
 8009872:	2700      	movs	r7, #0
 8009874:	e752      	b.n	800971c <lv_obj_get_style_prop+0x2c>
        if(!inheritable) break;
 8009876:	9b03      	ldr	r3, [sp, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1d6      	bne.n	800982a <lv_obj_get_style_prop+0x13a>
 800987c:	e7db      	b.n	8009836 <lv_obj_get_style_prop+0x146>
            const lv_obj_class_t * cls = obj->class_p;
 800987e:	682b      	ldr	r3, [r5, #0]
            while(cls) {
 8009880:	2b00      	cmp	r3, #0
 8009882:	d103      	bne.n	800988c <lv_obj_get_style_prop+0x19c>
 8009884:	e013      	b.n	80098ae <lv_obj_get_style_prop+0x1be>
                cls = cls->base_class;
 8009886:	681b      	ldr	r3, [r3, #0]
            while(cls) {
 8009888:	2b00      	cmp	r3, #0
 800988a:	d0c2      	beq.n	8009812 <lv_obj_get_style_prop+0x122>
                    if(cls->height_def != 0) break;
 800988c:	2212      	movs	r2, #18
 800988e:	5e98      	ldrsh	r0, [r3, r2]
 8009890:	2800      	cmp	r0, #0
 8009892:	d0f8      	beq.n	8009886 <lv_obj_get_style_prop+0x196>
 8009894:	e7bd      	b.n	8009812 <lv_obj_get_style_prop+0x122>
            const lv_obj_class_t * cls = obj->class_p;
 8009896:	682b      	ldr	r3, [r5, #0]
            while(cls) {
 8009898:	2b00      	cmp	r3, #0
 800989a:	d103      	bne.n	80098a4 <lv_obj_get_style_prop+0x1b4>
 800989c:	e007      	b.n	80098ae <lv_obj_get_style_prop+0x1be>
                cls = cls->base_class;
 800989e:	681b      	ldr	r3, [r3, #0]
            while(cls) {
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d0b6      	beq.n	8009812 <lv_obj_get_style_prop+0x122>
                    if(cls->width_def != 0) break;
 80098a4:	2210      	movs	r2, #16
 80098a6:	5e98      	ldrsh	r0, [r3, r2]
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d0f8      	beq.n	800989e <lv_obj_get_style_prop+0x1ae>
 80098ac:	e7b1      	b.n	8009812 <lv_obj_get_style_prop+0x122>
                value_act.num = 0;
 80098ae:	2000      	movs	r0, #0
    return value_act;
 80098b0:	e7af      	b.n	8009812 <lv_obj_get_style_prop+0x122>
 80098b2:	46c0      	nop			; (mov r8, r8)

080098b4 <lv_obj_refresh_style.part.0>:
void lv_obj_refresh_style(lv_obj_t * obj, lv_style_selector_t selector, lv_style_prop_t prop)
 80098b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b6:	46de      	mov	lr, fp
 80098b8:	4657      	mov	r7, sl
 80098ba:	464e      	mov	r6, r9
 80098bc:	4645      	mov	r5, r8
 80098be:	b5e0      	push	{r5, r6, r7, lr}
 80098c0:	000c      	movs	r4, r1
 80098c2:	0015      	movs	r5, r2
 80098c4:	0006      	movs	r6, r0
    lv_obj_invalidate(obj);
 80098c6:	f7fc fe3b 	bl	8006540 <lv_obj_invalidate>
    return selector & 0xFF0000;
 80098ca:	21ff      	movs	r1, #255	; 0xff
 80098cc:	0028      	movs	r0, r5
 80098ce:	0409      	lsls	r1, r1, #16
 80098d0:	400c      	ands	r4, r1
 80098d2:	2704      	movs	r7, #4
 80098d4:	f009 f95a 	bl	8012b8c <_lv_style_prop_lookup_flags>
 80098d8:	4007      	ands	r7, r0
 80098da:	0028      	movs	r0, r5
 80098dc:	f009 f956 	bl	8012b8c <_lv_style_prop_lookup_flags>
 80098e0:	2302      	movs	r3, #2
 80098e2:	4003      	ands	r3, r0
 80098e4:	0028      	movs	r0, r5
 80098e6:	4698      	mov	r8, r3
 80098e8:	f009 f950 	bl	8012b8c <_lv_style_prop_lookup_flags>
 80098ec:	4681      	mov	r9, r0
 80098ee:	0028      	movs	r0, r5
 80098f0:	f009 f94c 	bl	8012b8c <_lv_style_prop_lookup_flags>
 80098f4:	4682      	mov	sl, r0
    if(is_layout_refr) {
 80098f6:	2f00      	cmp	r7, #0
 80098f8:	d00e      	beq.n	8009918 <lv_obj_refresh_style.part.0+0x64>
        if(part == LV_PART_ANY ||
 80098fa:	23f0      	movs	r3, #240	; 0xf0
 80098fc:	031b      	lsls	r3, r3, #12
 80098fe:	429c      	cmp	r4, r3
 8009900:	d002      	beq.n	8009908 <lv_obj_refresh_style.part.0+0x54>
 8009902:	2c00      	cmp	r4, #0
 8009904:	d000      	beq.n	8009908 <lv_obj_refresh_style.part.0+0x54>
 8009906:	e083      	b.n	8009a10 <lv_obj_refresh_style.part.0+0x15c>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 8009908:	2200      	movs	r2, #0
 800990a:	212a      	movs	r1, #42	; 0x2a
 800990c:	0030      	movs	r0, r6
 800990e:	f7f8 fa25 	bl	8001d5c <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 8009912:	0030      	movs	r0, r6
 8009914:	f7fc f9c2 	bl	8005c9c <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 8009918:	23f0      	movs	r3, #240	; 0xf0
 800991a:	031b      	lsls	r3, r3, #12
 800991c:	429c      	cmp	r4, r3
 800991e:	d001      	beq.n	8009924 <lv_obj_refresh_style.part.0+0x70>
 8009920:	2c00      	cmp	r4, #0
 8009922:	d112      	bne.n	800994a <lv_obj_refresh_style.part.0+0x96>
 8009924:	4b4b      	ldr	r3, [pc, #300]	; (8009a54 <lv_obj_refresh_style.part.0+0x1a0>)
 8009926:	429d      	cmp	r5, r3
 8009928:	d001      	beq.n	800992e <lv_obj_refresh_style.part.0+0x7a>
 800992a:	2f00      	cmp	r7, #0
 800992c:	d006      	beq.n	800993c <lv_obj_refresh_style.part.0+0x88>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800992e:	0030      	movs	r0, r6
 8009930:	f001 fb0a 	bl	800af48 <lv_obj_get_parent>
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 8009934:	2800      	cmp	r0, #0
 8009936:	d001      	beq.n	800993c <lv_obj_refresh_style.part.0+0x88>
 8009938:	f7fc f9b0 	bl	8005c9c <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800993c:	23f0      	movs	r3, #240	; 0xf0
 800993e:	031b      	lsls	r3, r3, #12
 8009940:	429c      	cmp	r4, r3
 8009942:	d127      	bne.n	8009994 <lv_obj_refresh_style.part.0+0xe0>
 8009944:	4653      	mov	r3, sl
 8009946:	06db      	lsls	r3, r3, #27
 8009948:	d429      	bmi.n	800999e <lv_obj_refresh_style.part.0+0xea>
    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 800994a:	4b42      	ldr	r3, [pc, #264]	; (8009a54 <lv_obj_refresh_style.part.0+0x1a0>)
 800994c:	429d      	cmp	r5, r3
 800994e:	d04d      	beq.n	80099ec <lv_obj_refresh_style.part.0+0x138>
 8009950:	4643      	mov	r3, r8
 8009952:	2b00      	cmp	r3, #0
 8009954:	d015      	beq.n	8009982 <lv_obj_refresh_style.part.0+0xce>
        lv_obj_refresh_ext_draw_size(obj);
 8009956:	0030      	movs	r0, r6
 8009958:	f7fb ff08 	bl	800576c <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 800995c:	0030      	movs	r0, r6
 800995e:	f7fc fdef 	bl	8006540 <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 8009962:	464b      	mov	r3, r9
 8009964:	07db      	lsls	r3, r3, #31
 8009966:	d506      	bpl.n	8009976 <lv_obj_refresh_style.part.0+0xc2>
        if(part != LV_PART_SCROLLBAR) {
 8009968:	2380      	movs	r3, #128	; 0x80
 800996a:	025b      	lsls	r3, r3, #9
 800996c:	429c      	cmp	r4, r3
 800996e:	d002      	beq.n	8009976 <lv_obj_refresh_style.part.0+0xc2>
            refresh_children_style(obj);
 8009970:	0030      	movs	r0, r6
 8009972:	f7ff fd6f 	bl	8009454 <refresh_children_style>
}
 8009976:	bcf0      	pop	{r4, r5, r6, r7}
 8009978:	46bb      	mov	fp, r7
 800997a:	46b2      	mov	sl, r6
 800997c:	46a9      	mov	r9, r5
 800997e:	46a0      	mov	r8, r4
 8009980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_obj_invalidate(obj);
 8009982:	0030      	movs	r0, r6
 8009984:	f7fc fddc 	bl	8006540 <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 8009988:	464b      	mov	r3, r9
 800998a:	07db      	lsls	r3, r3, #31
 800998c:	d5f3      	bpl.n	8009976 <lv_obj_refresh_style.part.0+0xc2>
 800998e:	2f00      	cmp	r7, #0
 8009990:	d0f1      	beq.n	8009976 <lv_obj_refresh_style.part.0+0xc2>
 8009992:	e7e9      	b.n	8009968 <lv_obj_refresh_style.part.0+0xb4>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 8009994:	2c00      	cmp	r4, #0
 8009996:	d1d8      	bne.n	800994a <lv_obj_refresh_style.part.0+0x96>
 8009998:	4653      	mov	r3, sl
 800999a:	06db      	lsls	r3, r3, #27
 800999c:	d5d5      	bpl.n	800994a <lv_obj_refresh_style.part.0+0x96>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800999e:	226d      	movs	r2, #109	; 0x6d
 80099a0:	2100      	movs	r1, #0
 80099a2:	0030      	movs	r0, r6
 80099a4:	f7ff fea4 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80099a8:	b200      	sxth	r0, r0
    }
}

static lv_layer_type_t calculate_layer_type(lv_obj_t * obj)
{
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d125      	bne.n	80099fa <lv_obj_refresh_style.part.0+0x146>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 80099ae:	226c      	movs	r2, #108	; 0x6c
 80099b0:	2100      	movs	r1, #0
 80099b2:	0030      	movs	r0, r6
 80099b4:	f7ff fe9c 	bl	80096f0 <lv_obj_get_style_prop>
    if(lv_obj_get_style_transform_zoom(obj, 0) != 256) return LV_LAYER_TYPE_TRANSFORM;
 80099b8:	2380      	movs	r3, #128	; 0x80
    return (lv_coord_t)v.num;
 80099ba:	b200      	sxth	r0, r0
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	4298      	cmp	r0, r3
 80099c0:	d13b      	bne.n	8009a3a <lv_obj_refresh_style.part.0+0x186>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80099c2:	2260      	movs	r2, #96	; 0x60
 80099c4:	2100      	movs	r1, #0
 80099c6:	0030      	movs	r0, r6
 80099c8:	f7ff fe92 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80099cc:	b2c0      	uxtb	r0, r0
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 80099ce:	68b2      	ldr	r2, [r6, #8]
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 80099d0:	28ff      	cmp	r0, #255	; 0xff
 80099d2:	d037      	beq.n	8009a44 <lv_obj_refresh_style.part.0+0x190>
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 80099d4:	2101      	movs	r1, #1
 80099d6:	2a00      	cmp	r2, #0
 80099d8:	d113      	bne.n	8009a02 <lv_obj_refresh_style.part.0+0x14e>
 80099da:	2301      	movs	r3, #1
 80099dc:	469a      	mov	sl, r3
            lv_obj_allocate_spec_attr(obj);
 80099de:	0030      	movs	r0, r6
 80099e0:	f7fb fb4a 	bl	8005078 <lv_obj_allocate_spec_attr>
            obj->spec_attr->layer_type = layer_type;
 80099e4:	4653      	mov	r3, sl
 80099e6:	68b2      	ldr	r2, [r6, #8]
 80099e8:	0199      	lsls	r1, r3, #6
 80099ea:	e00b      	b.n	8009a04 <lv_obj_refresh_style.part.0+0x150>
        lv_obj_refresh_ext_draw_size(obj);
 80099ec:	0030      	movs	r0, r6
 80099ee:	f7fb febd 	bl	800576c <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 80099f2:	0030      	movs	r0, r6
 80099f4:	f7fc fda4 	bl	8006540 <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 80099f8:	e7b6      	b.n	8009968 <lv_obj_refresh_style.part.0+0xb4>
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 80099fa:	68b2      	ldr	r2, [r6, #8]
 80099fc:	2102      	movs	r1, #2
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	d024      	beq.n	8009a4c <lv_obj_refresh_style.part.0+0x198>
 8009a02:	0189      	lsls	r1, r1, #6
            obj->spec_attr->layer_type = layer_type;
 8009a04:	233f      	movs	r3, #63	; 0x3f
 8009a06:	7e90      	ldrb	r0, [r2, #26]
 8009a08:	4003      	ands	r3, r0
 8009a0a:	430b      	orrs	r3, r1
 8009a0c:	7693      	strb	r3, [r2, #26]
 8009a0e:	e79c      	b.n	800994a <lv_obj_refresh_style.part.0+0x96>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8009a10:	2204      	movs	r2, #4
 8009a12:	2100      	movs	r1, #0
 8009a14:	0030      	movs	r0, r6
 8009a16:	f7ff fe6b 	bl	80096f0 <lv_obj_get_style_prop>
           part == LV_PART_MAIN ||
 8009a1a:	4b0f      	ldr	r3, [pc, #60]	; (8009a58 <lv_obj_refresh_style.part.0+0x1a4>)
    return (lv_coord_t)v.num;
 8009a1c:	b200      	sxth	r0, r0
 8009a1e:	469b      	mov	fp, r3
 8009a20:	4298      	cmp	r0, r3
 8009a22:	d100      	bne.n	8009a26 <lv_obj_refresh_style.part.0+0x172>
 8009a24:	e770      	b.n	8009908 <lv_obj_refresh_style.part.0+0x54>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8009a26:	2201      	movs	r2, #1
 8009a28:	2100      	movs	r1, #0
 8009a2a:	0030      	movs	r0, r6
 8009a2c:	f7ff fe60 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8009a30:	b200      	sxth	r0, r0
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 8009a32:	4558      	cmp	r0, fp
 8009a34:	d000      	beq.n	8009a38 <lv_obj_refresh_style.part.0+0x184>
 8009a36:	e788      	b.n	800994a <lv_obj_refresh_style.part.0+0x96>
 8009a38:	e766      	b.n	8009908 <lv_obj_refresh_style.part.0+0x54>
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 8009a3a:	68b2      	ldr	r2, [r6, #8]
 8009a3c:	2a00      	cmp	r2, #0
 8009a3e:	d005      	beq.n	8009a4c <lv_obj_refresh_style.part.0+0x198>
 8009a40:	2102      	movs	r1, #2
 8009a42:	e7de      	b.n	8009a02 <lv_obj_refresh_style.part.0+0x14e>
 8009a44:	2100      	movs	r1, #0
 8009a46:	2a00      	cmp	r2, #0
 8009a48:	d1db      	bne.n	8009a02 <lv_obj_refresh_style.part.0+0x14e>
 8009a4a:	e77e      	b.n	800994a <lv_obj_refresh_style.part.0+0x96>
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	469a      	mov	sl, r3
 8009a50:	e7c5      	b.n	80099de <lv_obj_refresh_style.part.0+0x12a>
 8009a52:	46c0      	nop			; (mov r8, r8)
 8009a54:	0000ffff 	.word	0x0000ffff
 8009a58:	000027d1 	.word	0x000027d1

08009a5c <lv_obj_refresh_style>:
    if(!style_refr) return;
 8009a5c:	4b03      	ldr	r3, [pc, #12]	; (8009a6c <lv_obj_refresh_style+0x10>)
{
 8009a5e:	b510      	push	{r4, lr}
    if(!style_refr) return;
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <lv_obj_refresh_style+0xe>
 8009a66:	f7ff ff25 	bl	80098b4 <lv_obj_refresh_style.part.0>
}
 8009a6a:	bd10      	pop	{r4, pc}
 8009a6c:	20000004 	.word	0x20000004

08009a70 <lv_obj_add_style>:
{
 8009a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a72:	46ce      	mov	lr, r9
 8009a74:	0016      	movs	r6, r2
 8009a76:	4647      	mov	r7, r8
 8009a78:	0004      	movs	r4, r0
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 8009a7a:	2300      	movs	r3, #0
{
 8009a7c:	4689      	mov	r9, r1
 8009a7e:	b580      	push	{r7, lr}
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 8009a80:	0031      	movs	r1, r6
 8009a82:	4a37      	ldr	r2, [pc, #220]	; (8009b60 <lv_obj_add_style+0xf0>)
 8009a84:	f7ff fc5c 	bl	8009340 <trans_del.isra.0>
    for(i = 0; i < obj->style_cnt; i++) {
 8009a88:	8be3      	ldrh	r3, [r4, #30]
        if(obj->styles[i].is_trans) continue;
 8009a8a:	68e0      	ldr	r0, [r4, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 8009a8c:	05db      	lsls	r3, r3, #23
 8009a8e:	0e9b      	lsrs	r3, r3, #26
 8009a90:	d05f      	beq.n	8009b52 <lv_obj_add_style+0xe2>
 8009a92:	0002      	movs	r2, r0
 8009a94:	2500      	movs	r5, #0
        if(obj->styles[i].is_local) continue;
 8009a96:	2703      	movs	r7, #3
        if(obj->styles[i].is_trans) continue;
 8009a98:	00e9      	lsls	r1, r5, #3
 8009a9a:	4688      	mov	r8, r1
        if(obj->styles[i].is_local) continue;
 8009a9c:	79d1      	ldrb	r1, [r2, #7]
 8009a9e:	420f      	tst	r7, r1
 8009aa0:	d00a      	beq.n	8009ab8 <lv_obj_add_style+0x48>
    for(i = 0; i < obj->style_cnt; i++) {
 8009aa2:	3501      	adds	r5, #1
 8009aa4:	3208      	adds	r2, #8
 8009aa6:	429d      	cmp	r5, r3
 8009aa8:	d3f6      	bcc.n	8009a98 <lv_obj_add_style+0x28>
    obj->style_cnt++;
 8009aaa:	223f      	movs	r2, #63	; 0x3f
 8009aac:	3301      	adds	r3, #1
 8009aae:	4013      	ands	r3, r2
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 8009ab0:	00ea      	lsls	r2, r5, #3
 8009ab2:	4690      	mov	r8, r2
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8009ab4:	00df      	lsls	r7, r3, #3
 8009ab6:	e003      	b.n	8009ac0 <lv_obj_add_style+0x50>
    obj->style_cnt++;
 8009ab8:	223f      	movs	r2, #63	; 0x3f
 8009aba:	3301      	adds	r3, #1
 8009abc:	4013      	ands	r3, r2
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8009abe:	00df      	lsls	r7, r3, #3
    obj->style_cnt++;
 8009ac0:	8be2      	ldrh	r2, [r4, #30]
 8009ac2:	4928      	ldr	r1, [pc, #160]	; (8009b64 <lv_obj_add_style+0xf4>)
 8009ac4:	00db      	lsls	r3, r3, #3
 8009ac6:	400a      	ands	r2, r1
 8009ac8:	4313      	orrs	r3, r2
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8009aca:	0039      	movs	r1, r7
    obj->style_cnt++;
 8009acc:	83e3      	strh	r3, [r4, #30]
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8009ace:	f008 faab 	bl	8012028 <lv_mem_realloc>
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8009ad2:	8be3      	ldrh	r3, [r4, #30]
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8009ad4:	0007      	movs	r7, r0
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8009ad6:	05db      	lsls	r3, r3, #23
 8009ad8:	0e9b      	lsrs	r3, r3, #26
 8009ada:	1e59      	subs	r1, r3, #1
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8009adc:	60e0      	str	r0, [r4, #12]
    for(j = obj->style_cnt - 1; j > i ; j--) {
 8009ade:	42a9      	cmp	r1, r5
 8009ae0:	d911      	bls.n	8009b06 <lv_obj_add_style+0x96>
        obj->styles[j] = obj->styles[j - 1];
 8009ae2:	1e9a      	subs	r2, r3, #2
 8009ae4:	4694      	mov	ip, r2
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	00ca      	lsls	r2, r1, #3
 8009aea:	4565      	cmp	r5, ip
 8009aec:	d92a      	bls.n	8009b44 <lv_obj_add_style+0xd4>
 8009aee:	2308      	movs	r3, #8
 8009af0:	4565      	cmp	r5, ip
 8009af2:	d924      	bls.n	8009b3e <lv_obj_add_style+0xce>
 8009af4:	0011      	movs	r1, r2
 8009af6:	3908      	subs	r1, #8
 8009af8:	1809      	adds	r1, r1, r0
 8009afa:	1880      	adds	r0, r0, r2
 8009afc:	1879      	adds	r1, r7, r1
 8009afe:	001a      	movs	r2, r3
 8009b00:	1838      	adds	r0, r7, r0
 8009b02:	f011 fd88 	bl	801b616 <memmove>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 8009b06:	0038      	movs	r0, r7
 8009b08:	2108      	movs	r1, #8
 8009b0a:	4440      	add	r0, r8
 8009b0c:	f008 fdd0 	bl	80126b0 <lv_memset_00>
    obj->styles[i].style = style;
 8009b10:	464a      	mov	r2, r9
 8009b12:	68e3      	ldr	r3, [r4, #12]
    obj->styles[i].selector = selector;
 8009b14:	0231      	lsls	r1, r6, #8
    obj->styles[i].style = style;
 8009b16:	4443      	add	r3, r8
 8009b18:	601a      	str	r2, [r3, #0]
    obj->styles[i].selector = selector;
 8009b1a:	79da      	ldrb	r2, [r3, #7]
 8009b1c:	0a09      	lsrs	r1, r1, #8
 8009b1e:	0612      	lsls	r2, r2, #24
 8009b20:	430a      	orrs	r2, r1
 8009b22:	605a      	str	r2, [r3, #4]
    if(!style_refr) return;
 8009b24:	4b10      	ldr	r3, [pc, #64]	; (8009b68 <lv_obj_add_style+0xf8>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d004      	beq.n	8009b36 <lv_obj_add_style+0xc6>
 8009b2c:	0031      	movs	r1, r6
 8009b2e:	0020      	movs	r0, r4
 8009b30:	4a0b      	ldr	r2, [pc, #44]	; (8009b60 <lv_obj_add_style+0xf0>)
 8009b32:	f7ff febf 	bl	80098b4 <lv_obj_refresh_style.part.0>
}
 8009b36:	bcc0      	pop	{r6, r7}
 8009b38:	46b9      	mov	r9, r7
 8009b3a:	46b0      	mov	r8, r6
 8009b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        obj->styles[j] = obj->styles[j - 1];
 8009b3e:	1b4b      	subs	r3, r1, r5
 8009b40:	00db      	lsls	r3, r3, #3
 8009b42:	e7d7      	b.n	8009af4 <lv_obj_add_style+0x84>
 8009b44:	1aeb      	subs	r3, r5, r3
 8009b46:	3302      	adds	r3, #2
 8009b48:	00d8      	lsls	r0, r3, #3
 8009b4a:	2308      	movs	r3, #8
 8009b4c:	4565      	cmp	r5, ip
 8009b4e:	d8d1      	bhi.n	8009af4 <lv_obj_add_style+0x84>
 8009b50:	e7f5      	b.n	8009b3e <lv_obj_add_style+0xce>
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8009b52:	2300      	movs	r3, #0
    for(i = 0; i < obj->style_cnt; i++) {
 8009b54:	2500      	movs	r5, #0
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8009b56:	4698      	mov	r8, r3
 8009b58:	2708      	movs	r7, #8
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	e7b0      	b.n	8009ac0 <lv_obj_add_style+0x50>
 8009b5e:	46c0      	nop			; (mov r8, r8)
 8009b60:	0000ffff 	.word	0x0000ffff
 8009b64:	fffffe07 	.word	0xfffffe07
 8009b68:	20000004 	.word	0x20000004

08009b6c <trans_anim_cb>:
{
 8009b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b6e:	46ce      	mov	lr, r9
 8009b70:	4647      	mov	r7, r8
    lv_obj_t * obj = tr->obj;
 8009b72:	6806      	ldr	r6, [r0, #0]
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	0005      	movs	r5, r0
    for(i = 0; i < obj->style_cnt; i++) {
 8009b78:	8bf0      	ldrh	r0, [r6, #30]
{
 8009b7a:	4689      	mov	r9, r1
    for(i = 0; i < obj->style_cnt; i++) {
 8009b7c:	05c0      	lsls	r0, r0, #23
{
 8009b7e:	b083      	sub	sp, #12
    for(i = 0; i < obj->style_cnt; i++) {
 8009b80:	0e80      	lsrs	r0, r0, #26
 8009b82:	d01c      	beq.n	8009bbe <trans_anim_cb+0x52>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 8009b84:	2302      	movs	r3, #2
    for(i = 0; i < obj->style_cnt; i++) {
 8009b86:	2200      	movs	r2, #0
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 8009b88:	469c      	mov	ip, r3
 8009b8a:	68f4      	ldr	r4, [r6, #12]
 8009b8c:	4661      	mov	r1, ip
 8009b8e:	79e3      	ldrb	r3, [r4, #7]
 8009b90:	00d7      	lsls	r7, r2, #3
 8009b92:	4219      	tst	r1, r3
 8009b94:	d00f      	beq.n	8009bb6 <trans_anim_cb+0x4a>
 8009b96:	6863      	ldr	r3, [r4, #4]
 8009b98:	68a9      	ldr	r1, [r5, #8]
 8009b9a:	021b      	lsls	r3, r3, #8
 8009b9c:	0a1b      	lsrs	r3, r3, #8
 8009b9e:	428b      	cmp	r3, r1
 8009ba0:	d109      	bne.n	8009bb6 <trans_anim_cb+0x4a>
        switch(tr->prop) {
 8009ba2:	88a8      	ldrh	r0, [r5, #4]
 8009ba4:	0003      	movs	r3, r0
 8009ba6:	3b20      	subs	r3, #32
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	2b47      	cmp	r3, #71	; 0x47
 8009bac:	d82f      	bhi.n	8009c0e <trans_anim_cb+0xa2>
 8009bae:	4a3b      	ldr	r2, [pc, #236]	; (8009c9c <trans_anim_cb+0x130>)
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	58d3      	ldr	r3, [r2, r3]
 8009bb4:	469f      	mov	pc, r3
    for(i = 0; i < obj->style_cnt; i++) {
 8009bb6:	3201      	adds	r2, #1
 8009bb8:	3408      	adds	r4, #8
 8009bba:	4282      	cmp	r2, r0
 8009bbc:	d3e6      	bcc.n	8009b8c <trans_anim_cb+0x20>
}
 8009bbe:	b003      	add	sp, #12
 8009bc0:	bcc0      	pop	{r6, r7}
 8009bc2:	46b9      	mov	r9, r7
 8009bc4:	46b0      	mov	r8, r6
 8009bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 8009bc8:	464b      	mov	r3, r9
 8009bca:	2bfe      	cmp	r3, #254	; 0xfe
 8009bcc:	dc1c      	bgt.n	8009c08 <trans_anim_cb+0x9c>
 8009bce:	68eb      	ldr	r3, [r5, #12]
 8009bd0:	4698      	mov	r8, r3
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	0001      	movs	r1, r0
 8009bd6:	aa01      	add	r2, sp, #4
 8009bd8:	0018      	movs	r0, r3
 8009bda:	f008 ff73 	bl	8012ac4 <lv_style_get_prop>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d002      	beq.n	8009be8 <trans_anim_cb+0x7c>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 8009be2:	9b01      	ldr	r3, [sp, #4]
 8009be4:	4598      	cmp	r8, r3
 8009be6:	d051      	beq.n	8009c8c <trans_anim_cb+0x120>
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 8009be8:	68f3      	ldr	r3, [r6, #12]
 8009bea:	4642      	mov	r2, r8
 8009bec:	59d8      	ldr	r0, [r3, r7]
 8009bee:	88a9      	ldrh	r1, [r5, #4]
 8009bf0:	f008 feb2 	bl	8012958 <lv_style_set_prop>
    if(!style_refr) return;
 8009bf4:	4b2a      	ldr	r3, [pc, #168]	; (8009ca0 <trans_anim_cb+0x134>)
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d0e0      	beq.n	8009bbe <trans_anim_cb+0x52>
 8009bfc:	88aa      	ldrh	r2, [r5, #4]
 8009bfe:	68a9      	ldr	r1, [r5, #8]
 8009c00:	6828      	ldr	r0, [r5, #0]
 8009c02:	f7ff fe57 	bl	80098b4 <lv_obj_refresh_style.part.0>
}
 8009c06:	e7da      	b.n	8009bbe <trans_anim_cb+0x52>
                else value_final.ptr = tr->end_value.ptr;
 8009c08:	692b      	ldr	r3, [r5, #16]
 8009c0a:	4698      	mov	r8, r3
 8009c0c:	e7e1      	b.n	8009bd2 <trans_anim_cb+0x66>
                if(v == 0) value_final.num = tr->start_value.num;
 8009c0e:	464b      	mov	r3, r9
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d0dc      	beq.n	8009bce <trans_anim_cb+0x62>
                else if(v == 255) value_final.num = tr->end_value.num;
 8009c14:	2bff      	cmp	r3, #255	; 0xff
 8009c16:	d0f7      	beq.n	8009c08 <trans_anim_cb+0x9c>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 8009c18:	4649      	mov	r1, r9
 8009c1a:	68eb      	ldr	r3, [r5, #12]
 8009c1c:	692a      	ldr	r2, [r5, #16]
 8009c1e:	1ad2      	subs	r2, r2, r3
 8009c20:	4351      	muls	r1, r2
 8009c22:	1209      	asrs	r1, r1, #8
 8009c24:	4688      	mov	r8, r1
 8009c26:	4498      	add	r8, r3
 8009c28:	e7d3      	b.n	8009bd2 <trans_anim_cb+0x66>
                if(v <= 0) value_final.color = tr->start_value.color;
 8009c2a:	464b      	mov	r3, r9
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	dd10      	ble.n	8009c52 <trans_anim_cb+0xe6>
                else if(v >= 255) value_final.color = tr->end_value.color;
 8009c30:	2bfe      	cmp	r3, #254	; 0xfe
 8009c32:	dd11      	ble.n	8009c58 <trans_anim_cb+0xec>
 8009c34:	8a2b      	ldrh	r3, [r5, #16]
 8009c36:	4698      	mov	r8, r3
 8009c38:	e7cb      	b.n	8009bd2 <trans_anim_cb+0x66>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 8009c3a:	68eb      	ldr	r3, [r5, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d0e3      	beq.n	8009c08 <trans_anim_cb+0x9c>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 8009c40:	692a      	ldr	r2, [r5, #16]
 8009c42:	2a00      	cmp	r2, #0
 8009c44:	d003      	beq.n	8009c4e <trans_anim_cb+0xe2>
                else value_final.ptr = tr->end_value.ptr;
 8009c46:	4690      	mov	r8, r2
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 8009c48:	464a      	mov	r2, r9
 8009c4a:	2a7f      	cmp	r2, #127	; 0x7f
 8009c4c:	dcc1      	bgt.n	8009bd2 <trans_anim_cb+0x66>
 8009c4e:	4698      	mov	r8, r3
 8009c50:	e7bf      	b.n	8009bd2 <trans_anim_cb+0x66>
                if(v <= 0) value_final.color = tr->start_value.color;
 8009c52:	89ab      	ldrh	r3, [r5, #12]
 8009c54:	4698      	mov	r8, r3
 8009c56:	e7bc      	b.n	8009bd2 <trans_anim_cb+0x66>
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0 && LV_COLOR_MIX_ROUND_OFS == 0
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8009c58:	89aa      	ldrh	r2, [r5, #12]
 8009c5a:	0413      	lsls	r3, r2, #16
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	4a11      	ldr	r2, [pc, #68]	; (8009ca4 <trans_anim_cb+0x138>)
 8009c60:	4013      	ands	r3, r2
 8009c62:	4698      	mov	r8, r3
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8009c64:	8a2b      	ldrh	r3, [r5, #16]
 8009c66:	469c      	mov	ip, r3
 8009c68:	4661      	mov	r1, ip
 8009c6a:	041b      	lsls	r3, r3, #16
 8009c6c:	430b      	orrs	r3, r1
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8009c6e:	4641      	mov	r1, r8
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8009c70:	4013      	ands	r3, r2
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8009c72:	1a5b      	subs	r3, r3, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8009c74:	4649      	mov	r1, r9
 8009c76:	3104      	adds	r1, #4
 8009c78:	08c9      	lsrs	r1, r1, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8009c7a:	434b      	muls	r3, r1
 8009c7c:	095b      	lsrs	r3, r3, #5
 8009c7e:	4443      	add	r3, r8
 8009c80:	4013      	ands	r3, r2
    ret.full = (uint16_t)((result >> 16) | result);
 8009c82:	0c1a      	lsrs	r2, r3, #16
 8009c84:	4313      	orrs	r3, r2
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	4698      	mov	r8, r3
 8009c8a:	e7a2      	b.n	8009bd2 <trans_anim_cb+0x66>
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 8009c8c:	68f3      	ldr	r3, [r6, #12]
 8009c8e:	4642      	mov	r2, r8
 8009c90:	88a9      	ldrh	r1, [r5, #4]
 8009c92:	59d8      	ldr	r0, [r3, r7]
 8009c94:	f008 fe60 	bl	8012958 <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 8009c98:	e791      	b.n	8009bbe <trans_anim_cb+0x52>
 8009c9a:	46c0      	nop			; (mov r8, r8)
 8009c9c:	0801b7e0 	.word	0x0801b7e0
 8009ca0:	20000004 	.word	0x20000004
 8009ca4:	07e0f81f 	.word	0x07e0f81f

08009ca8 <lv_obj_remove_style>:
{
 8009ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009caa:	46de      	mov	lr, fp
 8009cac:	4657      	mov	r7, sl
 8009cae:	464e      	mov	r6, r9
 8009cb0:	4645      	mov	r5, r8
    return selector & 0xFFFF;
 8009cb2:	b293      	uxth	r3, r2
{
 8009cb4:	b5e0      	push	{r5, r6, r7, lr}
 8009cb6:	0017      	movs	r7, r2
    return selector & 0xFF0000;
 8009cb8:	22ff      	movs	r2, #255	; 0xff
 8009cba:	0412      	lsls	r2, r2, #16
{
 8009cbc:	4681      	mov	r9, r0
 8009cbe:	468b      	mov	fp, r1
    return selector & 0xFFFF;
 8009cc0:	4698      	mov	r8, r3
{
 8009cc2:	b083      	sub	sp, #12
    return selector & 0xFF0000;
 8009cc4:	4017      	ands	r7, r2
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 8009cc6:	2900      	cmp	r1, #0
 8009cc8:	d100      	bne.n	8009ccc <lv_obj_remove_style+0x24>
 8009cca:	e089      	b.n	8009de0 <lv_obj_remove_style+0x138>
 8009ccc:	79cb      	ldrb	r3, [r1, #7]
 8009cce:	1e5a      	subs	r2, r3, #1
 8009cd0:	4193      	sbcs	r3, r2
 8009cd2:	425b      	negs	r3, r3
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	9301      	str	r3, [sp, #4]
    while(i <  obj->style_cnt) {
 8009cd8:	464b      	mov	r3, r9
 8009cda:	8bd9      	ldrh	r1, [r3, #30]
 8009cdc:	05c9      	lsls	r1, r1, #23
 8009cde:	0e89      	lsrs	r1, r1, #26
 8009ce0:	d02f      	beq.n	8009d42 <lv_obj_remove_style+0x9a>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8009ce2:	68de      	ldr	r6, [r3, #12]
    bool deleted = false;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	469c      	mov	ip, r3
        if((state != LV_STATE_ANY && state_act != state) ||
 8009ce8:	4b42      	ldr	r3, [pc, #264]	; (8009df4 <lv_obj_remove_style+0x14c>)
    uint32_t i = 0;
 8009cea:	2400      	movs	r4, #0
        if((state != LV_STATE_ANY && state_act != state) ||
 8009cec:	469a      	mov	sl, r3
        if(obj->styles[i].is_trans) {
 8009cee:	465b      	mov	r3, fp
 8009cf0:	46bb      	mov	fp, r7
 8009cf2:	4647      	mov	r7, r8
 8009cf4:	4698      	mov	r8, r3
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8009cf6:	00e5      	lsls	r5, r4, #3
 8009cf8:	1972      	adds	r2, r6, r5
 8009cfa:	6853      	ldr	r3, [r2, #4]
 8009cfc:	021b      	lsls	r3, r3, #8
 8009cfe:	0a1b      	lsrs	r3, r3, #8
        if((state != LV_STATE_ANY && state_act != state) ||
 8009d00:	4557      	cmp	r7, sl
 8009d02:	d002      	beq.n	8009d0a <lv_obj_remove_style+0x62>
 8009d04:	b298      	uxth	r0, r3
 8009d06:	42b8      	cmp	r0, r7
 8009d08:	d10e      	bne.n	8009d28 <lv_obj_remove_style+0x80>
 8009d0a:	20f0      	movs	r0, #240	; 0xf0
 8009d0c:	0300      	lsls	r0, r0, #12
 8009d0e:	4583      	cmp	fp, r0
 8009d10:	d004      	beq.n	8009d1c <lv_obj_remove_style+0x74>
    return selector & 0xFF0000;
 8009d12:	20ff      	movs	r0, #255	; 0xff
 8009d14:	0400      	lsls	r0, r0, #16
 8009d16:	4003      	ands	r3, r0
           (part != LV_PART_ANY && part_act != part) ||
 8009d18:	455b      	cmp	r3, fp
 8009d1a:	d105      	bne.n	8009d28 <lv_obj_remove_style+0x80>
 8009d1c:	4643      	mov	r3, r8
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d016      	beq.n	8009d50 <lv_obj_remove_style+0xa8>
           (style != NULL && style != obj->styles[i].style)) {
 8009d22:	6813      	ldr	r3, [r2, #0]
 8009d24:	4543      	cmp	r3, r8
 8009d26:	d013      	beq.n	8009d50 <lv_obj_remove_style+0xa8>
            i++;
 8009d28:	3401      	adds	r4, #1
    while(i <  obj->style_cnt) {
 8009d2a:	42a1      	cmp	r1, r4
 8009d2c:	d8e3      	bhi.n	8009cf6 <lv_obj_remove_style+0x4e>
    if(deleted && prop != LV_STYLE_PROP_INV) {
 8009d2e:	4663      	mov	r3, ip
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d006      	beq.n	8009d42 <lv_obj_remove_style+0x9a>
 8009d34:	9b01      	ldr	r3, [sp, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <lv_obj_remove_style+0x9a>
    if(!style_refr) return;
 8009d3a:	4b2f      	ldr	r3, [pc, #188]	; (8009df8 <lv_obj_remove_style+0x150>)
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d151      	bne.n	8009de6 <lv_obj_remove_style+0x13e>
}
 8009d42:	b003      	add	sp, #12
 8009d44:	bcf0      	pop	{r4, r5, r6, r7}
 8009d46:	46bb      	mov	fp, r7
 8009d48:	46b2      	mov	sl, r6
 8009d4a:	46a9      	mov	r9, r5
 8009d4c:	46a0      	mov	r8, r4
 8009d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(obj->styles[i].is_trans) {
 8009d50:	2102      	movs	r1, #2
 8009d52:	79d3      	ldrb	r3, [r2, #7]
 8009d54:	4219      	tst	r1, r3
 8009d56:	d138      	bne.n	8009dca <lv_obj_remove_style+0x122>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 8009d58:	079b      	lsls	r3, r3, #30
 8009d5a:	d129      	bne.n	8009db0 <lv_obj_remove_style+0x108>
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 8009d5c:	464b      	mov	r3, r9
 8009d5e:	8bdb      	ldrh	r3, [r3, #30]
 8009d60:	05db      	lsls	r3, r3, #23
 8009d62:	0e9b      	lsrs	r3, r3, #26
 8009d64:	1e5a      	subs	r2, r3, #1
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	42a2      	cmp	r2, r4
 8009d6a:	d907      	bls.n	8009d7c <lv_obj_remove_style+0xd4>
            obj->styles[j] = obj->styles[j + 1];
 8009d6c:	0029      	movs	r1, r5
 8009d6e:	1b12      	subs	r2, r2, r4
 8009d70:	3108      	adds	r1, #8
 8009d72:	00d2      	lsls	r2, r2, #3
 8009d74:	1871      	adds	r1, r6, r1
 8009d76:	1970      	adds	r0, r6, r5
 8009d78:	f011 fc4d 	bl	801b616 <memmove>
        obj->style_cnt--;
 8009d7c:	233f      	movs	r3, #63	; 0x3f
 8009d7e:	0019      	movs	r1, r3
 8009d80:	9a00      	ldr	r2, [sp, #0]
 8009d82:	481e      	ldr	r0, [pc, #120]	; (8009dfc <lv_obj_remove_style+0x154>)
 8009d84:	323f      	adds	r2, #63	; 0x3f
 8009d86:	4011      	ands	r1, r2
 8009d88:	464a      	mov	r2, r9
 8009d8a:	8bd2      	ldrh	r2, [r2, #30]
 8009d8c:	00cb      	lsls	r3, r1, #3
 8009d8e:	4002      	ands	r2, r0
 8009d90:	4313      	orrs	r3, r2
 8009d92:	464a      	mov	r2, r9
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8009d94:	0030      	movs	r0, r6
        obj->style_cnt--;
 8009d96:	83d3      	strh	r3, [r2, #30]
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8009d98:	00c9      	lsls	r1, r1, #3
 8009d9a:	f008 f945 	bl	8012028 <lv_mem_realloc>
 8009d9e:	464b      	mov	r3, r9
    while(i <  obj->style_cnt) {
 8009da0:	8bd9      	ldrh	r1, [r3, #30]
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8009da2:	60d8      	str	r0, [r3, #12]
        deleted = true;
 8009da4:	2301      	movs	r3, #1
    while(i <  obj->style_cnt) {
 8009da6:	05c9      	lsls	r1, r1, #23
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 8009da8:	0006      	movs	r6, r0
        deleted = true;
 8009daa:	469c      	mov	ip, r3
    while(i <  obj->style_cnt) {
 8009dac:	0e89      	lsrs	r1, r1, #26
 8009dae:	e7bc      	b.n	8009d2a <lv_obj_remove_style+0x82>
            lv_style_reset(obj->styles[i].style);
 8009db0:	6810      	ldr	r0, [r2, #0]
 8009db2:	f008 fd57 	bl	8012864 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 8009db6:	464b      	mov	r3, r9
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	5958      	ldr	r0, [r3, r5]
 8009dbc:	f008 f918 	bl	8011ff0 <lv_mem_free>
            obj->styles[i].style = NULL;
 8009dc0:	464b      	mov	r3, r9
 8009dc2:	68de      	ldr	r6, [r3, #12]
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	5173      	str	r3, [r6, r5]
 8009dc8:	e7c8      	b.n	8009d5c <lv_obj_remove_style+0xb4>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 8009dca:	2300      	movs	r3, #0
 8009dcc:	4a09      	ldr	r2, [pc, #36]	; (8009df4 <lv_obj_remove_style+0x14c>)
 8009dce:	4659      	mov	r1, fp
 8009dd0:	4648      	mov	r0, r9
 8009dd2:	f7ff fab5 	bl	8009340 <trans_del.isra.0>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 8009dd6:	464b      	mov	r3, r9
 8009dd8:	68de      	ldr	r6, [r3, #12]
 8009dda:	1972      	adds	r2, r6, r5
 8009ddc:	79d3      	ldrb	r3, [r2, #7]
 8009dde:	e7bb      	b.n	8009d58 <lv_obj_remove_style+0xb0>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 8009de0:	4b04      	ldr	r3, [pc, #16]	; (8009df4 <lv_obj_remove_style+0x14c>)
 8009de2:	9301      	str	r3, [sp, #4]
 8009de4:	e778      	b.n	8009cd8 <lv_obj_remove_style+0x30>
 8009de6:	4659      	mov	r1, fp
 8009de8:	4648      	mov	r0, r9
 8009dea:	4a02      	ldr	r2, [pc, #8]	; (8009df4 <lv_obj_remove_style+0x14c>)
 8009dec:	f7ff fd62 	bl	80098b4 <lv_obj_refresh_style.part.0>
}
 8009df0:	e7a7      	b.n	8009d42 <lv_obj_remove_style+0x9a>
 8009df2:	46c0      	nop			; (mov r8, r8)
 8009df4:	0000ffff 	.word	0x0000ffff
 8009df8:	20000004 	.word	0x20000004
 8009dfc:	fffffe07 	.word	0xfffffe07

08009e00 <trans_anim_ready_cb>:
{
 8009e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e02:	46ce      	mov	lr, r9
 8009e04:	4647      	mov	r7, r8
 8009e06:	b580      	push	{r7, lr}
    trans_t * tr = a->var;
 8009e08:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8009e0a:	4d2c      	ldr	r5, [pc, #176]	; (8009ebc <trans_anim_ready_cb+0xbc>)
    lv_obj_t * obj = tr->obj;
 8009e0c:	6823      	ldr	r3, [r4, #0]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8009e0e:	0028      	movs	r0, r5
    lv_obj_t * obj = tr->obj;
 8009e10:	4699      	mov	r9, r3
    lv_style_prop_t prop = tr->prop;
 8009e12:	88a3      	ldrh	r3, [r4, #4]
 8009e14:	4698      	mov	r8, r3
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 8009e16:	f008 f819 	bl	8011e4c <_lv_ll_get_head>
 8009e1a:	1e01      	subs	r1, r0, #0
 8009e1c:	d105      	bne.n	8009e2a <trans_anim_ready_cb+0x2a>
 8009e1e:	e016      	b.n	8009e4e <trans_anim_ready_cb+0x4e>
 8009e20:	0028      	movs	r0, r5
 8009e22:	f008 f81f 	bl	8011e64 <_lv_ll_get_next>
 8009e26:	1e01      	subs	r1, r0, #0
 8009e28:	d011      	beq.n	8009e4e <trans_anim_ready_cb+0x4e>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 8009e2a:	428c      	cmp	r4, r1
 8009e2c:	d0f8      	beq.n	8009e20 <trans_anim_ready_cb+0x20>
 8009e2e:	680b      	ldr	r3, [r1, #0]
 8009e30:	6822      	ldr	r2, [r4, #0]
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d1f4      	bne.n	8009e20 <trans_anim_ready_cb+0x20>
 8009e36:	688b      	ldr	r3, [r1, #8]
 8009e38:	68a2      	ldr	r2, [r4, #8]
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d1f0      	bne.n	8009e20 <trans_anim_ready_cb+0x20>
 8009e3e:	888a      	ldrh	r2, [r1, #4]
 8009e40:	88a3      	ldrh	r3, [r4, #4]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d1ec      	bne.n	8009e20 <trans_anim_ready_cb+0x20>
}
 8009e46:	bcc0      	pop	{r6, r7}
 8009e48:	46b9      	mov	r9, r7
 8009e4a:	46b0      	mov	r8, r6
 8009e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for(i = 0; i < obj->style_cnt; i++) {
 8009e4e:	464b      	mov	r3, r9
 8009e50:	8bd8      	ldrh	r0, [r3, #30]
 8009e52:	05c0      	lsls	r0, r0, #23
 8009e54:	0e80      	lsrs	r0, r0, #26
 8009e56:	d0f6      	beq.n	8009e46 <trans_anim_ready_cb+0x46>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 8009e58:	2102      	movs	r1, #2
 8009e5a:	68da      	ldr	r2, [r3, #12]
 8009e5c:	468c      	mov	ip, r1
 8009e5e:	2300      	movs	r3, #0
 8009e60:	4666      	mov	r6, ip
 8009e62:	79d1      	ldrb	r1, [r2, #7]
 8009e64:	00df      	lsls	r7, r3, #3
 8009e66:	420e      	tst	r6, r1
 8009e68:	d005      	beq.n	8009e76 <trans_anim_ready_cb+0x76>
 8009e6a:	6851      	ldr	r1, [r2, #4]
 8009e6c:	68a6      	ldr	r6, [r4, #8]
 8009e6e:	0209      	lsls	r1, r1, #8
 8009e70:	0a09      	lsrs	r1, r1, #8
 8009e72:	42b1      	cmp	r1, r6
 8009e74:	d004      	beq.n	8009e80 <trans_anim_ready_cb+0x80>
        for(i = 0; i < obj->style_cnt; i++) {
 8009e76:	3301      	adds	r3, #1
 8009e78:	3208      	adds	r2, #8
 8009e7a:	4283      	cmp	r3, r0
 8009e7c:	d3f0      	bcc.n	8009e60 <trans_anim_ready_cb+0x60>
 8009e7e:	e7e2      	b.n	8009e46 <trans_anim_ready_cb+0x46>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 8009e80:	0021      	movs	r1, r4
 8009e82:	0028      	movs	r0, r5
 8009e84:	f007 ffb8 	bl	8011df8 <_lv_ll_remove>
                lv_mem_free(tr);
 8009e88:	0020      	movs	r0, r4
 8009e8a:	f008 f8b1 	bl	8011ff0 <lv_mem_free>
                _lv_obj_style_t * obj_style = &obj->styles[i];
 8009e8e:	464b      	mov	r3, r9
 8009e90:	68db      	ldr	r3, [r3, #12]
                lv_style_remove_prop(obj_style->style, prop);
 8009e92:	4641      	mov	r1, r8
                _lv_obj_style_t * obj_style = &obj->styles[i];
 8009e94:	19dc      	adds	r4, r3, r7
                lv_style_remove_prop(obj_style->style, prop);
 8009e96:	6820      	ldr	r0, [r4, #0]
 8009e98:	f008 fcf8 	bl	801288c <lv_style_remove_prop>
                if(lv_style_is_empty(obj->styles[i].style)) {
 8009e9c:	464b      	mov	r3, r9
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	59d8      	ldr	r0, [r3, r7]
 8009ea2:	f008 fe65 	bl	8012b70 <lv_style_is_empty>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d0cd      	beq.n	8009e46 <trans_anim_ready_cb+0x46>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 8009eaa:	6863      	ldr	r3, [r4, #4]
 8009eac:	4648      	mov	r0, r9
 8009eae:	021a      	lsls	r2, r3, #8
 8009eb0:	6821      	ldr	r1, [r4, #0]
 8009eb2:	0a12      	lsrs	r2, r2, #8
 8009eb4:	f7ff fef8 	bl	8009ca8 <lv_obj_remove_style>
 8009eb8:	e7c5      	b.n	8009e46 <trans_anim_ready_cb+0x46>
 8009eba:	46c0      	nop			; (mov r8, r8)
 8009ebc:	200033d4 	.word	0x200033d4

08009ec0 <report_style_change_core>:
{
 8009ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ec2:	4657      	mov	r7, sl
 8009ec4:	464e      	mov	r6, r9
 8009ec6:	46de      	mov	lr, fp
 8009ec8:	4645      	mov	r5, r8
 8009eca:	b5e0      	push	{r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 8009ecc:	8bcb      	ldrh	r3, [r1, #30]
{
 8009ece:	0007      	movs	r7, r0
    for(i = 0; i < obj->style_cnt; i++) {
 8009ed0:	05db      	lsls	r3, r3, #23
{
 8009ed2:	4689      	mov	r9, r1
 8009ed4:	b095      	sub	sp, #84	; 0x54
    for(i = 0; i < obj->style_cnt; i++) {
 8009ed6:	0e9b      	lsrs	r3, r3, #26
 8009ed8:	d010      	beq.n	8009efc <report_style_change_core+0x3c>
        if(style == NULL || obj->styles[i].style == style) {
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d009      	beq.n	8009ef2 <report_style_change_core+0x32>
    for(i = 0; i < obj->style_cnt; i++) {
 8009ede:	2200      	movs	r2, #0
        if(style == NULL || obj->styles[i].style == style) {
 8009ee0:	68c9      	ldr	r1, [r1, #12]
 8009ee2:	e002      	b.n	8009eea <report_style_change_core+0x2a>
    for(i = 0; i < obj->style_cnt; i++) {
 8009ee4:	3201      	adds	r2, #1
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d208      	bcs.n	8009efc <report_style_change_core+0x3c>
        if(style == NULL || obj->styles[i].style == style) {
 8009eea:	00d0      	lsls	r0, r2, #3
 8009eec:	5808      	ldr	r0, [r1, r0]
 8009eee:	42b8      	cmp	r0, r7
 8009ef0:	d1f8      	bne.n	8009ee4 <report_style_change_core+0x24>
    if(!style_refr) return;
 8009ef2:	4bab      	ldr	r3, [pc, #684]	; (800a1a0 <report_style_change_core+0x2e0>)
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d000      	beq.n	8009efc <report_style_change_core+0x3c>
 8009efa:	e1bd      	b.n	800a278 <report_style_change_core+0x3b8>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009efc:	4648      	mov	r0, r9
 8009efe:	f001 f839 	bl	800af74 <lv_obj_get_child_cnt>
 8009f02:	900b      	str	r0, [sp, #44]	; 0x2c
    for(i = 0; i < child_cnt; i++) {
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d100      	bne.n	8009f0a <report_style_change_core+0x4a>
 8009f08:	e1ad      	b.n	800a266 <report_style_change_core+0x3a6>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	9304      	str	r3, [sp, #16]
    if(!style_refr) return;
 8009f0e:	464b      	mov	r3, r9
 8009f10:	930f      	str	r3, [sp, #60]	; 0x3c
        report_style_change_core(style, obj->spec_attr->children[i]);
 8009f12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f14:	9a04      	ldr	r2, [sp, #16]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	0092      	lsls	r2, r2, #2
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	58d3      	ldr	r3, [r2, r3]
 8009f1e:	4699      	mov	r9, r3
    for(i = 0; i < obj->style_cnt; i++) {
 8009f20:	8bdb      	ldrh	r3, [r3, #30]
 8009f22:	05db      	lsls	r3, r3, #23
 8009f24:	0e9b      	lsrs	r3, r3, #26
 8009f26:	d016      	beq.n	8009f56 <report_style_change_core+0x96>
        if(style == NULL || obj->styles[i].style == style) {
 8009f28:	2f00      	cmp	r7, #0
 8009f2a:	d00a      	beq.n	8009f42 <report_style_change_core+0x82>
 8009f2c:	464a      	mov	r2, r9
 8009f2e:	68d1      	ldr	r1, [r2, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 8009f30:	2200      	movs	r2, #0
 8009f32:	e002      	b.n	8009f3a <report_style_change_core+0x7a>
 8009f34:	3201      	adds	r2, #1
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d20d      	bcs.n	8009f56 <report_style_change_core+0x96>
        if(style == NULL || obj->styles[i].style == style) {
 8009f3a:	00d0      	lsls	r0, r2, #3
 8009f3c:	5808      	ldr	r0, [r1, r0]
 8009f3e:	4287      	cmp	r7, r0
 8009f40:	d1f8      	bne.n	8009f34 <report_style_change_core+0x74>
    if(!style_refr) return;
 8009f42:	4b97      	ldr	r3, [pc, #604]	; (800a1a0 <report_style_change_core+0x2e0>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d005      	beq.n	8009f56 <report_style_change_core+0x96>
 8009f4a:	21f0      	movs	r1, #240	; 0xf0
 8009f4c:	4648      	mov	r0, r9
 8009f4e:	4a95      	ldr	r2, [pc, #596]	; (800a1a4 <report_style_change_core+0x2e4>)
 8009f50:	0309      	lsls	r1, r1, #12
 8009f52:	f7ff fcaf 	bl	80098b4 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009f56:	4648      	mov	r0, r9
 8009f58:	f001 f80c 	bl	800af74 <lv_obj_get_child_cnt>
 8009f5c:	900c      	str	r0, [sp, #48]	; 0x30
    for(i = 0; i < child_cnt; i++) {
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d100      	bne.n	8009f64 <report_style_change_core+0xa4>
 8009f62:	e179      	b.n	800a258 <report_style_change_core+0x398>
 8009f64:	2300      	movs	r3, #0
 8009f66:	9305      	str	r3, [sp, #20]
 8009f68:	464b      	mov	r3, r9
 8009f6a:	9310      	str	r3, [sp, #64]	; 0x40
        report_style_change_core(style, obj->spec_attr->children[i]);
 8009f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f6e:	9a05      	ldr	r2, [sp, #20]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	0092      	lsls	r2, r2, #2
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	58d3      	ldr	r3, [r2, r3]
 8009f78:	4699      	mov	r9, r3
    for(i = 0; i < obj->style_cnt; i++) {
 8009f7a:	8bdb      	ldrh	r3, [r3, #30]
 8009f7c:	05db      	lsls	r3, r3, #23
 8009f7e:	0e9b      	lsrs	r3, r3, #26
 8009f80:	d016      	beq.n	8009fb0 <report_style_change_core+0xf0>
        if(style == NULL || obj->styles[i].style == style) {
 8009f82:	2f00      	cmp	r7, #0
 8009f84:	d00a      	beq.n	8009f9c <report_style_change_core+0xdc>
 8009f86:	464a      	mov	r2, r9
 8009f88:	68d1      	ldr	r1, [r2, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	e002      	b.n	8009f94 <report_style_change_core+0xd4>
 8009f8e:	3201      	adds	r2, #1
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d20d      	bcs.n	8009fb0 <report_style_change_core+0xf0>
        if(style == NULL || obj->styles[i].style == style) {
 8009f94:	00d0      	lsls	r0, r2, #3
 8009f96:	5808      	ldr	r0, [r1, r0]
 8009f98:	4287      	cmp	r7, r0
 8009f9a:	d1f8      	bne.n	8009f8e <report_style_change_core+0xce>
    if(!style_refr) return;
 8009f9c:	4b80      	ldr	r3, [pc, #512]	; (800a1a0 <report_style_change_core+0x2e0>)
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d005      	beq.n	8009fb0 <report_style_change_core+0xf0>
 8009fa4:	21f0      	movs	r1, #240	; 0xf0
 8009fa6:	4648      	mov	r0, r9
 8009fa8:	4a7e      	ldr	r2, [pc, #504]	; (800a1a4 <report_style_change_core+0x2e4>)
 8009faa:	0309      	lsls	r1, r1, #12
 8009fac:	f7ff fc82 	bl	80098b4 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009fb0:	4648      	mov	r0, r9
 8009fb2:	f000 ffdf 	bl	800af74 <lv_obj_get_child_cnt>
 8009fb6:	900d      	str	r0, [sp, #52]	; 0x34
    for(i = 0; i < child_cnt; i++) {
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d100      	bne.n	8009fbe <report_style_change_core+0xfe>
 8009fbc:	e145      	b.n	800a24a <report_style_change_core+0x38a>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	9306      	str	r3, [sp, #24]
 8009fc2:	464b      	mov	r3, r9
 8009fc4:	9311      	str	r3, [sp, #68]	; 0x44
        report_style_change_core(style, obj->spec_attr->children[i]);
 8009fc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fc8:	9a06      	ldr	r2, [sp, #24]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	0092      	lsls	r2, r2, #2
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	58d3      	ldr	r3, [r2, r3]
 8009fd2:	4699      	mov	r9, r3
    for(i = 0; i < obj->style_cnt; i++) {
 8009fd4:	8bdb      	ldrh	r3, [r3, #30]
 8009fd6:	05db      	lsls	r3, r3, #23
 8009fd8:	0e9b      	lsrs	r3, r3, #26
 8009fda:	d016      	beq.n	800a00a <report_style_change_core+0x14a>
        if(style == NULL || obj->styles[i].style == style) {
 8009fdc:	2f00      	cmp	r7, #0
 8009fde:	d00a      	beq.n	8009ff6 <report_style_change_core+0x136>
 8009fe0:	464a      	mov	r2, r9
 8009fe2:	68d1      	ldr	r1, [r2, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	e002      	b.n	8009fee <report_style_change_core+0x12e>
 8009fe8:	3201      	adds	r2, #1
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d20d      	bcs.n	800a00a <report_style_change_core+0x14a>
        if(style == NULL || obj->styles[i].style == style) {
 8009fee:	00d0      	lsls	r0, r2, #3
 8009ff0:	5808      	ldr	r0, [r1, r0]
 8009ff2:	4287      	cmp	r7, r0
 8009ff4:	d1f8      	bne.n	8009fe8 <report_style_change_core+0x128>
    if(!style_refr) return;
 8009ff6:	4b6a      	ldr	r3, [pc, #424]	; (800a1a0 <report_style_change_core+0x2e0>)
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d005      	beq.n	800a00a <report_style_change_core+0x14a>
 8009ffe:	21f0      	movs	r1, #240	; 0xf0
 800a000:	4648      	mov	r0, r9
 800a002:	4a68      	ldr	r2, [pc, #416]	; (800a1a4 <report_style_change_core+0x2e4>)
 800a004:	0309      	lsls	r1, r1, #12
 800a006:	f7ff fc55 	bl	80098b4 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a00a:	4648      	mov	r0, r9
 800a00c:	f000 ffb2 	bl	800af74 <lv_obj_get_child_cnt>
 800a010:	900e      	str	r0, [sp, #56]	; 0x38
    for(i = 0; i < child_cnt; i++) {
 800a012:	2800      	cmp	r0, #0
 800a014:	d100      	bne.n	800a018 <report_style_change_core+0x158>
 800a016:	e111      	b.n	800a23c <report_style_change_core+0x37c>
 800a018:	2300      	movs	r3, #0
 800a01a:	46ca      	mov	sl, r9
 800a01c:	003d      	movs	r5, r7
 800a01e:	9307      	str	r3, [sp, #28]
        report_style_change_core(style, obj->spec_attr->children[i]);
 800a020:	4653      	mov	r3, sl
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	9a07      	ldr	r2, [sp, #28]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	0092      	lsls	r2, r2, #2
 800a02a:	58d3      	ldr	r3, [r2, r3]
 800a02c:	4698      	mov	r8, r3
    for(i = 0; i < obj->style_cnt; i++) {
 800a02e:	8bdb      	ldrh	r3, [r3, #30]
 800a030:	05db      	lsls	r3, r3, #23
 800a032:	0e9b      	lsrs	r3, r3, #26
 800a034:	d016      	beq.n	800a064 <report_style_change_core+0x1a4>
        if(style == NULL || obj->styles[i].style == style) {
 800a036:	2d00      	cmp	r5, #0
 800a038:	d00a      	beq.n	800a050 <report_style_change_core+0x190>
 800a03a:	4642      	mov	r2, r8
 800a03c:	68d1      	ldr	r1, [r2, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800a03e:	2200      	movs	r2, #0
 800a040:	e002      	b.n	800a048 <report_style_change_core+0x188>
 800a042:	3201      	adds	r2, #1
 800a044:	429a      	cmp	r2, r3
 800a046:	d20d      	bcs.n	800a064 <report_style_change_core+0x1a4>
        if(style == NULL || obj->styles[i].style == style) {
 800a048:	00d0      	lsls	r0, r2, #3
 800a04a:	5808      	ldr	r0, [r1, r0]
 800a04c:	4285      	cmp	r5, r0
 800a04e:	d1f8      	bne.n	800a042 <report_style_change_core+0x182>
    if(!style_refr) return;
 800a050:	4b53      	ldr	r3, [pc, #332]	; (800a1a0 <report_style_change_core+0x2e0>)
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d005      	beq.n	800a064 <report_style_change_core+0x1a4>
 800a058:	21f0      	movs	r1, #240	; 0xf0
 800a05a:	4640      	mov	r0, r8
 800a05c:	4a51      	ldr	r2, [pc, #324]	; (800a1a4 <report_style_change_core+0x2e4>)
 800a05e:	0309      	lsls	r1, r1, #12
 800a060:	f7ff fc28 	bl	80098b4 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a064:	4640      	mov	r0, r8
 800a066:	f000 ff85 	bl	800af74 <lv_obj_get_child_cnt>
 800a06a:	900a      	str	r0, [sp, #40]	; 0x28
    for(i = 0; i < child_cnt; i++) {
 800a06c:	2800      	cmp	r0, #0
 800a06e:	d100      	bne.n	800a072 <report_style_change_core+0x1b2>
 800a070:	e0dc      	b.n	800a22c <report_style_change_core+0x36c>
 800a072:	2300      	movs	r3, #0
 800a074:	9301      	str	r3, [sp, #4]
 800a076:	4653      	mov	r3, sl
 800a078:	46c3      	mov	fp, r8
 800a07a:	9312      	str	r3, [sp, #72]	; 0x48
        report_style_change_core(style, obj->spec_attr->children[i]);
 800a07c:	465b      	mov	r3, fp
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	9a01      	ldr	r2, [sp, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	0092      	lsls	r2, r2, #2
 800a086:	58d3      	ldr	r3, [r2, r3]
 800a088:	4698      	mov	r8, r3
    for(i = 0; i < obj->style_cnt; i++) {
 800a08a:	8bdb      	ldrh	r3, [r3, #30]
 800a08c:	05db      	lsls	r3, r3, #23
 800a08e:	0e9b      	lsrs	r3, r3, #26
 800a090:	d016      	beq.n	800a0c0 <report_style_change_core+0x200>
        if(style == NULL || obj->styles[i].style == style) {
 800a092:	2d00      	cmp	r5, #0
 800a094:	d00a      	beq.n	800a0ac <report_style_change_core+0x1ec>
 800a096:	4642      	mov	r2, r8
 800a098:	68d1      	ldr	r1, [r2, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800a09a:	2200      	movs	r2, #0
 800a09c:	e002      	b.n	800a0a4 <report_style_change_core+0x1e4>
 800a09e:	3201      	adds	r2, #1
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d20d      	bcs.n	800a0c0 <report_style_change_core+0x200>
        if(style == NULL || obj->styles[i].style == style) {
 800a0a4:	00d0      	lsls	r0, r2, #3
 800a0a6:	5808      	ldr	r0, [r1, r0]
 800a0a8:	4285      	cmp	r5, r0
 800a0aa:	d1f8      	bne.n	800a09e <report_style_change_core+0x1de>
    if(!style_refr) return;
 800a0ac:	4b3c      	ldr	r3, [pc, #240]	; (800a1a0 <report_style_change_core+0x2e0>)
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d005      	beq.n	800a0c0 <report_style_change_core+0x200>
 800a0b4:	21f0      	movs	r1, #240	; 0xf0
 800a0b6:	4640      	mov	r0, r8
 800a0b8:	4a3a      	ldr	r2, [pc, #232]	; (800a1a4 <report_style_change_core+0x2e4>)
 800a0ba:	0309      	lsls	r1, r1, #12
 800a0bc:	f7ff fbfa 	bl	80098b4 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a0c0:	4640      	mov	r0, r8
 800a0c2:	f000 ff57 	bl	800af74 <lv_obj_get_child_cnt>
 800a0c6:	9003      	str	r0, [sp, #12]
    for(i = 0; i < child_cnt; i++) {
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d100      	bne.n	800a0ce <report_style_change_core+0x20e>
 800a0cc:	e0a5      	b.n	800a21a <report_style_change_core+0x35a>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	9300      	str	r3, [sp, #0]
    if(!style_refr) return;
 800a0d2:	465b      	mov	r3, fp
 800a0d4:	46c2      	mov	sl, r8
 800a0d6:	9313      	str	r3, [sp, #76]	; 0x4c
        report_style_change_core(style, obj->spec_attr->children[i]);
 800a0d8:	4653      	mov	r3, sl
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	9a00      	ldr	r2, [sp, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	0092      	lsls	r2, r2, #2
 800a0e2:	58d7      	ldr	r7, [r2, r3]
    for(i = 0; i < obj->style_cnt; i++) {
 800a0e4:	8bfb      	ldrh	r3, [r7, #30]
 800a0e6:	05db      	lsls	r3, r3, #23
 800a0e8:	0e9b      	lsrs	r3, r3, #26
 800a0ea:	d015      	beq.n	800a118 <report_style_change_core+0x258>
        if(style == NULL || obj->styles[i].style == style) {
 800a0ec:	2d00      	cmp	r5, #0
 800a0ee:	d009      	beq.n	800a104 <report_style_change_core+0x244>
    for(i = 0; i < obj->style_cnt; i++) {
 800a0f0:	2200      	movs	r2, #0
        if(style == NULL || obj->styles[i].style == style) {
 800a0f2:	68f9      	ldr	r1, [r7, #12]
 800a0f4:	e002      	b.n	800a0fc <report_style_change_core+0x23c>
    for(i = 0; i < obj->style_cnt; i++) {
 800a0f6:	3201      	adds	r2, #1
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d20d      	bcs.n	800a118 <report_style_change_core+0x258>
        if(style == NULL || obj->styles[i].style == style) {
 800a0fc:	00d0      	lsls	r0, r2, #3
 800a0fe:	5808      	ldr	r0, [r1, r0]
 800a100:	4285      	cmp	r5, r0
 800a102:	d1f8      	bne.n	800a0f6 <report_style_change_core+0x236>
    if(!style_refr) return;
 800a104:	4b26      	ldr	r3, [pc, #152]	; (800a1a0 <report_style_change_core+0x2e0>)
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d005      	beq.n	800a118 <report_style_change_core+0x258>
 800a10c:	21f0      	movs	r1, #240	; 0xf0
 800a10e:	0038      	movs	r0, r7
 800a110:	4a24      	ldr	r2, [pc, #144]	; (800a1a4 <report_style_change_core+0x2e4>)
 800a112:	0309      	lsls	r1, r1, #12
 800a114:	f7ff fbce 	bl	80098b4 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a118:	0038      	movs	r0, r7
 800a11a:	f000 ff2b 	bl	800af74 <lv_obj_get_child_cnt>
 800a11e:	9002      	str	r0, [sp, #8]
    for(i = 0; i < child_cnt; i++) {
 800a120:	2800      	cmp	r0, #0
 800a122:	d071      	beq.n	800a208 <report_style_change_core+0x348>
 800a124:	2600      	movs	r6, #0
 800a126:	46bb      	mov	fp, r7
 800a128:	46a9      	mov	r9, r5
        report_style_change_core(style, obj->spec_attr->children[i]);
 800a12a:	465b      	mov	r3, fp
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	00b2      	lsls	r2, r6, #2
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	58d4      	ldr	r4, [r2, r3]
    for(i = 0; i < obj->style_cnt; i++) {
 800a134:	8be3      	ldrh	r3, [r4, #30]
 800a136:	05db      	lsls	r3, r3, #23
 800a138:	0e9b      	lsrs	r3, r3, #26
 800a13a:	d019      	beq.n	800a170 <report_style_change_core+0x2b0>
        if(style == NULL || obj->styles[i].style == style) {
 800a13c:	464a      	mov	r2, r9
 800a13e:	2a00      	cmp	r2, #0
 800a140:	d00c      	beq.n	800a15c <report_style_change_core+0x29c>
    for(i = 0; i < obj->style_cnt; i++) {
 800a142:	2200      	movs	r2, #0
 800a144:	464d      	mov	r5, r9
        if(style == NULL || obj->styles[i].style == style) {
 800a146:	68e1      	ldr	r1, [r4, #12]
 800a148:	e003      	b.n	800a152 <report_style_change_core+0x292>
    for(i = 0; i < obj->style_cnt; i++) {
 800a14a:	3201      	adds	r2, #1
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d300      	bcc.n	800a152 <report_style_change_core+0x292>
 800a150:	e090      	b.n	800a274 <report_style_change_core+0x3b4>
        if(style == NULL || obj->styles[i].style == style) {
 800a152:	00d0      	lsls	r0, r2, #3
 800a154:	5808      	ldr	r0, [r1, r0]
 800a156:	4285      	cmp	r5, r0
 800a158:	d1f7      	bne.n	800a14a <report_style_change_core+0x28a>
 800a15a:	46a9      	mov	r9, r5
    if(!style_refr) return;
 800a15c:	4b10      	ldr	r3, [pc, #64]	; (800a1a0 <report_style_change_core+0x2e0>)
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d005      	beq.n	800a170 <report_style_change_core+0x2b0>
 800a164:	21f0      	movs	r1, #240	; 0xf0
 800a166:	0020      	movs	r0, r4
 800a168:	4a0e      	ldr	r2, [pc, #56]	; (800a1a4 <report_style_change_core+0x2e4>)
 800a16a:	0309      	lsls	r1, r1, #12
 800a16c:	f7ff fba2 	bl	80098b4 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a170:	0020      	movs	r0, r4
 800a172:	f000 feff 	bl	800af74 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 800a176:	2800      	cmp	r0, #0
 800a178:	d041      	beq.n	800a1fe <report_style_change_core+0x33e>
 800a17a:	46b0      	mov	r8, r6
 800a17c:	2500      	movs	r5, #0
 800a17e:	0026      	movs	r6, r4
 800a180:	0004      	movs	r4, r0
        report_style_change_core(style, obj->spec_attr->children[i]);
 800a182:	68b3      	ldr	r3, [r6, #8]
 800a184:	00aa      	lsls	r2, r5, #2
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	58d7      	ldr	r7, [r2, r3]
    for(i = 0; i < obj->style_cnt; i++) {
 800a18a:	8bfb      	ldrh	r3, [r7, #30]
 800a18c:	05db      	lsls	r3, r3, #23
 800a18e:	0e9b      	lsrs	r3, r3, #26
 800a190:	d01b      	beq.n	800a1ca <report_style_change_core+0x30a>
        if(style == NULL || obj->styles[i].style == style) {
 800a192:	464a      	mov	r2, r9
 800a194:	2a00      	cmp	r2, #0
 800a196:	d00e      	beq.n	800a1b6 <report_style_change_core+0x2f6>
    for(i = 0; i < obj->style_cnt; i++) {
 800a198:	2200      	movs	r2, #0
        if(style == NULL || obj->styles[i].style == style) {
 800a19a:	68f9      	ldr	r1, [r7, #12]
 800a19c:	e007      	b.n	800a1ae <report_style_change_core+0x2ee>
 800a19e:	46c0      	nop			; (mov r8, r8)
 800a1a0:	20000004 	.word	0x20000004
 800a1a4:	0000ffff 	.word	0x0000ffff
    for(i = 0; i < obj->style_cnt; i++) {
 800a1a8:	3201      	adds	r2, #1
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d20d      	bcs.n	800a1ca <report_style_change_core+0x30a>
        if(style == NULL || obj->styles[i].style == style) {
 800a1ae:	00d0      	lsls	r0, r2, #3
 800a1b0:	5808      	ldr	r0, [r1, r0]
 800a1b2:	4581      	cmp	r9, r0
 800a1b4:	d1f8      	bne.n	800a1a8 <report_style_change_core+0x2e8>
    if(!style_refr) return;
 800a1b6:	4b34      	ldr	r3, [pc, #208]	; (800a288 <report_style_change_core+0x3c8>)
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d005      	beq.n	800a1ca <report_style_change_core+0x30a>
 800a1be:	21f0      	movs	r1, #240	; 0xf0
 800a1c0:	0038      	movs	r0, r7
 800a1c2:	4a32      	ldr	r2, [pc, #200]	; (800a28c <report_style_change_core+0x3cc>)
 800a1c4:	0309      	lsls	r1, r1, #12
 800a1c6:	f7ff fb75 	bl	80098b4 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a1ca:	0038      	movs	r0, r7
 800a1cc:	f000 fed2 	bl	800af74 <lv_obj_get_child_cnt>
 800a1d0:	9008      	str	r0, [sp, #32]
    for(i = 0; i < child_cnt; i++) {
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d00f      	beq.n	800a1f6 <report_style_change_core+0x336>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	9309      	str	r3, [sp, #36]	; 0x24
        report_style_change_core(style, obj->spec_attr->children[i]);
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	0092      	lsls	r2, r2, #2
 800a1e2:	58d1      	ldr	r1, [r2, r3]
 800a1e4:	4648      	mov	r0, r9
 800a1e6:	f7ff fe6b 	bl	8009ec0 <report_style_change_core>
    for(i = 0; i < child_cnt; i++) {
 800a1ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1ec:	1c53      	adds	r3, r2, #1
 800a1ee:	9a08      	ldr	r2, [sp, #32]
 800a1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d1f1      	bne.n	800a1da <report_style_change_core+0x31a>
 800a1f6:	3501      	adds	r5, #1
 800a1f8:	42ac      	cmp	r4, r5
 800a1fa:	d1c2      	bne.n	800a182 <report_style_change_core+0x2c2>
 800a1fc:	4646      	mov	r6, r8
 800a1fe:	9b02      	ldr	r3, [sp, #8]
 800a200:	3601      	adds	r6, #1
 800a202:	42b3      	cmp	r3, r6
 800a204:	d191      	bne.n	800a12a <report_style_change_core+0x26a>
 800a206:	464d      	mov	r5, r9
 800a208:	9b00      	ldr	r3, [sp, #0]
 800a20a:	9a03      	ldr	r2, [sp, #12]
 800a20c:	3301      	adds	r3, #1
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	429a      	cmp	r2, r3
 800a212:	d000      	beq.n	800a216 <report_style_change_core+0x356>
 800a214:	e760      	b.n	800a0d8 <report_style_change_core+0x218>
 800a216:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a218:	469b      	mov	fp, r3
 800a21a:	9b01      	ldr	r3, [sp, #4]
 800a21c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a21e:	3301      	adds	r3, #1
 800a220:	9301      	str	r3, [sp, #4]
 800a222:	429a      	cmp	r2, r3
 800a224:	d000      	beq.n	800a228 <report_style_change_core+0x368>
 800a226:	e729      	b.n	800a07c <report_style_change_core+0x1bc>
 800a228:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a22a:	469a      	mov	sl, r3
 800a22c:	9b07      	ldr	r3, [sp, #28]
 800a22e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a230:	3301      	adds	r3, #1
 800a232:	9307      	str	r3, [sp, #28]
 800a234:	429a      	cmp	r2, r3
 800a236:	d000      	beq.n	800a23a <report_style_change_core+0x37a>
 800a238:	e6f2      	b.n	800a020 <report_style_change_core+0x160>
 800a23a:	002f      	movs	r7, r5
 800a23c:	9b06      	ldr	r3, [sp, #24]
 800a23e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a240:	3301      	adds	r3, #1
 800a242:	9306      	str	r3, [sp, #24]
 800a244:	429a      	cmp	r2, r3
 800a246:	d000      	beq.n	800a24a <report_style_change_core+0x38a>
 800a248:	e6bd      	b.n	8009fc6 <report_style_change_core+0x106>
 800a24a:	9b05      	ldr	r3, [sp, #20]
 800a24c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a24e:	3301      	adds	r3, #1
 800a250:	9305      	str	r3, [sp, #20]
 800a252:	429a      	cmp	r2, r3
 800a254:	d000      	beq.n	800a258 <report_style_change_core+0x398>
 800a256:	e689      	b.n	8009f6c <report_style_change_core+0xac>
 800a258:	9b04      	ldr	r3, [sp, #16]
 800a25a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a25c:	3301      	adds	r3, #1
 800a25e:	9304      	str	r3, [sp, #16]
 800a260:	429a      	cmp	r2, r3
 800a262:	d000      	beq.n	800a266 <report_style_change_core+0x3a6>
 800a264:	e655      	b.n	8009f12 <report_style_change_core+0x52>
}
 800a266:	b015      	add	sp, #84	; 0x54
 800a268:	bcf0      	pop	{r4, r5, r6, r7}
 800a26a:	46bb      	mov	fp, r7
 800a26c:	46b2      	mov	sl, r6
 800a26e:	46a9      	mov	r9, r5
 800a270:	46a0      	mov	r8, r4
 800a272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a274:	46a9      	mov	r9, r5
 800a276:	e77b      	b.n	800a170 <report_style_change_core+0x2b0>
 800a278:	21f0      	movs	r1, #240	; 0xf0
 800a27a:	4648      	mov	r0, r9
 800a27c:	4a03      	ldr	r2, [pc, #12]	; (800a28c <report_style_change_core+0x3cc>)
 800a27e:	0309      	lsls	r1, r1, #12
 800a280:	f7ff fb18 	bl	80098b4 <lv_obj_refresh_style.part.0>
 800a284:	e63a      	b.n	8009efc <report_style_change_core+0x3c>
 800a286:	46c0      	nop			; (mov r8, r8)
 800a288:	20000004 	.word	0x20000004
 800a28c:	0000ffff 	.word	0x0000ffff

0800a290 <lv_obj_report_style_change>:
{
 800a290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a292:	4646      	mov	r6, r8
 800a294:	46d6      	mov	lr, sl
 800a296:	464f      	mov	r7, r9
    if(!style_refr) return;
 800a298:	4b28      	ldr	r3, [pc, #160]	; (800a33c <lv_obj_report_style_change+0xac>)
{
 800a29a:	0004      	movs	r4, r0
    if(!style_refr) return;
 800a29c:	4698      	mov	r8, r3
 800a29e:	781b      	ldrb	r3, [r3, #0]
{
 800a2a0:	b5c0      	push	{r6, r7, lr}
    if(!style_refr) return;
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d104      	bne.n	800a2b0 <lv_obj_report_style_change+0x20>
}
 800a2a6:	bce0      	pop	{r5, r6, r7}
 800a2a8:	46ba      	mov	sl, r7
 800a2aa:	46b1      	mov	r9, r6
 800a2ac:	46a8      	mov	r8, r5
 800a2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_disp_t * d = lv_disp_get_next(NULL);
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	f006 fc9f 	bl	8010bf4 <lv_disp_get_next>
 800a2b6:	1e07      	subs	r7, r0, #0
    while(d) {
 800a2b8:	d0f5      	beq.n	800a2a6 <lv_obj_report_style_change+0x16>
        for(i = 0; i < d->screen_cnt; i++) {
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	4699      	mov	r9, r3
 800a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d034      	beq.n	800a32e <lv_obj_report_style_change+0x9e>
            report_style_change_core(style, d->screens[i]);
 800a2c4:	464b      	mov	r3, r9
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	589d      	ldr	r5, [r3, r2]
    for(i = 0; i < obj->style_cnt; i++) {
 800a2cc:	8be9      	ldrh	r1, [r5, #30]
 800a2ce:	05c9      	lsls	r1, r1, #23
 800a2d0:	0e89      	lsrs	r1, r1, #26
 800a2d2:	d015      	beq.n	800a300 <lv_obj_report_style_change+0x70>
        if(style == NULL || obj->styles[i].style == style) {
 800a2d4:	2c00      	cmp	r4, #0
 800a2d6:	d009      	beq.n	800a2ec <lv_obj_report_style_change+0x5c>
    for(i = 0; i < obj->style_cnt; i++) {
 800a2d8:	2300      	movs	r3, #0
        if(style == NULL || obj->styles[i].style == style) {
 800a2da:	68e8      	ldr	r0, [r5, #12]
 800a2dc:	e002      	b.n	800a2e4 <lv_obj_report_style_change+0x54>
    for(i = 0; i < obj->style_cnt; i++) {
 800a2de:	3301      	adds	r3, #1
 800a2e0:	428b      	cmp	r3, r1
 800a2e2:	d20d      	bcs.n	800a300 <lv_obj_report_style_change+0x70>
        if(style == NULL || obj->styles[i].style == style) {
 800a2e4:	00da      	lsls	r2, r3, #3
 800a2e6:	5882      	ldr	r2, [r0, r2]
 800a2e8:	4294      	cmp	r4, r2
 800a2ea:	d1f8      	bne.n	800a2de <lv_obj_report_style_change+0x4e>
    if(!style_refr) return;
 800a2ec:	4643      	mov	r3, r8
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d005      	beq.n	800a300 <lv_obj_report_style_change+0x70>
 800a2f4:	21f0      	movs	r1, #240	; 0xf0
 800a2f6:	0028      	movs	r0, r5
 800a2f8:	4a11      	ldr	r2, [pc, #68]	; (800a340 <lv_obj_report_style_change+0xb0>)
 800a2fa:	0309      	lsls	r1, r1, #12
 800a2fc:	f7ff fada 	bl	80098b4 <lv_obj_refresh_style.part.0>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a300:	0028      	movs	r0, r5
 800a302:	f000 fe37 	bl	800af74 <lv_obj_get_child_cnt>
 800a306:	4682      	mov	sl, r0
    for(i = 0; i < child_cnt; i++) {
 800a308:	2800      	cmp	r0, #0
 800a30a:	d00a      	beq.n	800a322 <lv_obj_report_style_change+0x92>
 800a30c:	2600      	movs	r6, #0
        report_style_change_core(style, obj->spec_attr->children[i]);
 800a30e:	68ab      	ldr	r3, [r5, #8]
 800a310:	00b2      	lsls	r2, r6, #2
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	0020      	movs	r0, r4
 800a316:	58d1      	ldr	r1, [r2, r3]
    for(i = 0; i < child_cnt; i++) {
 800a318:	3601      	adds	r6, #1
        report_style_change_core(style, obj->spec_attr->children[i]);
 800a31a:	f7ff fdd1 	bl	8009ec0 <report_style_change_core>
    for(i = 0; i < child_cnt; i++) {
 800a31e:	45b2      	cmp	sl, r6
 800a320:	d1f5      	bne.n	800a30e <lv_obj_report_style_change+0x7e>
        for(i = 0; i < d->screen_cnt; i++) {
 800a322:	2301      	movs	r3, #1
 800a324:	469c      	mov	ip, r3
 800a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a328:	44e1      	add	r9, ip
 800a32a:	454b      	cmp	r3, r9
 800a32c:	d8ca      	bhi.n	800a2c4 <lv_obj_report_style_change+0x34>
        d = lv_disp_get_next(d);
 800a32e:	0038      	movs	r0, r7
 800a330:	f006 fc60 	bl	8010bf4 <lv_disp_get_next>
 800a334:	1e07      	subs	r7, r0, #0
    while(d) {
 800a336:	d1c0      	bne.n	800a2ba <lv_obj_report_style_change+0x2a>
 800a338:	e7b5      	b.n	800a2a6 <lv_obj_report_style_change+0x16>
 800a33a:	46c0      	nop			; (mov r8, r8)
 800a33c:	20000004 	.word	0x20000004
 800a340:	0000ffff 	.word	0x0000ffff

0800a344 <trans_anim_start_cb>:
{
 800a344:	b570      	push	{r4, r5, r6, lr}
    return selector & 0xFF0000;
 800a346:	25ff      	movs	r5, #255	; 0xff
    trans_t * tr = a->var;
 800a348:	6804      	ldr	r4, [r0, #0]
    return selector & 0xFF0000;
 800a34a:	042d      	lsls	r5, r5, #16
 800a34c:	68a3      	ldr	r3, [r4, #8]
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800a34e:	88a2      	ldrh	r2, [r4, #4]
    return selector & 0xFF0000;
 800a350:	401d      	ands	r5, r3
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800a352:	0029      	movs	r1, r5
 800a354:	6820      	ldr	r0, [r4, #0]
 800a356:	f7ff f9cb 	bl	80096f0 <lv_obj_get_style_prop>
    tr->prop = LV_STYLE_PROP_INV;
 800a35a:	2300      	movs	r3, #0
    lv_style_prop_t prop_tmp = tr->prop;
 800a35c:	88a6      	ldrh	r6, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
 800a35e:	0029      	movs	r1, r5
 800a360:	0032      	movs	r2, r6
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800a362:	60e0      	str	r0, [r4, #12]
    tr->prop = LV_STYLE_PROP_INV;
 800a364:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
 800a366:	6820      	ldr	r0, [r4, #0]
 800a368:	0023      	movs	r3, r4
 800a36a:	f7fe ffe9 	bl	8009340 <trans_del.isra.0>
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800a36e:	68a1      	ldr	r1, [r4, #8]
    tr->prop = prop_tmp;
 800a370:	80a6      	strh	r6, [r4, #4]
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800a372:	6820      	ldr	r0, [r4, #0]
 800a374:	f7fe ff86 	bl	8009284 <get_trans_style>
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 800a378:	68e2      	ldr	r2, [r4, #12]
 800a37a:	88a1      	ldrh	r1, [r4, #4]
 800a37c:	6800      	ldr	r0, [r0, #0]
 800a37e:	f008 faeb 	bl	8012958 <lv_style_set_prop>
}
 800a382:	bd70      	pop	{r4, r5, r6, pc}

0800a384 <lv_obj_set_local_style_prop>:
{
 800a384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a386:	000e      	movs	r6, r1
 800a388:	0017      	movs	r7, r2
    lv_style_t * style = get_local_style(obj, selector);
 800a38a:	0019      	movs	r1, r3
{
 800a38c:	001d      	movs	r5, r3
 800a38e:	0004      	movs	r4, r0
    lv_style_t * style = get_local_style(obj, selector);
 800a390:	f7fe ff00 	bl	8009194 <get_local_style>
    lv_style_set_prop(style, prop, value);
 800a394:	003a      	movs	r2, r7
 800a396:	0031      	movs	r1, r6
 800a398:	f008 fade 	bl	8012958 <lv_style_set_prop>
    if(!style_refr) return;
 800a39c:	4b04      	ldr	r3, [pc, #16]	; (800a3b0 <lv_obj_set_local_style_prop+0x2c>)
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d004      	beq.n	800a3ae <lv_obj_set_local_style_prop+0x2a>
 800a3a4:	0032      	movs	r2, r6
 800a3a6:	0029      	movs	r1, r5
 800a3a8:	0020      	movs	r0, r4
 800a3aa:	f7ff fa83 	bl	80098b4 <lv_obj_refresh_style.part.0>
}
 800a3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3b0:	20000004 	.word	0x20000004

0800a3b4 <lv_obj_get_local_style_prop>:
{
 800a3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 800a3b6:	8bc6      	ldrh	r6, [r0, #30]
 800a3b8:	05f6      	lsls	r6, r6, #23
 800a3ba:	0eb6      	lsrs	r6, r6, #26
 800a3bc:	d00e      	beq.n	800a3dc <lv_obj_get_local_style_prop+0x28>
 800a3be:	2400      	movs	r4, #0
        if(obj->styles[i].is_local &&
 800a3c0:	2701      	movs	r7, #1
 800a3c2:	68c0      	ldr	r0, [r0, #12]
 800a3c4:	79c5      	ldrb	r5, [r0, #7]
 800a3c6:	422f      	tst	r7, r5
 800a3c8:	d004      	beq.n	800a3d4 <lv_obj_get_local_style_prop+0x20>
           obj->styles[i].selector == selector) {
 800a3ca:	6845      	ldr	r5, [r0, #4]
 800a3cc:	022d      	lsls	r5, r5, #8
 800a3ce:	0a2d      	lsrs	r5, r5, #8
        if(obj->styles[i].is_local &&
 800a3d0:	429d      	cmp	r5, r3
 800a3d2:	d005      	beq.n	800a3e0 <lv_obj_get_local_style_prop+0x2c>
    for(i = 0; i < obj->style_cnt; i++) {
 800a3d4:	3401      	adds	r4, #1
 800a3d6:	3008      	adds	r0, #8
 800a3d8:	42b4      	cmp	r4, r6
 800a3da:	d3f3      	bcc.n	800a3c4 <lv_obj_get_local_style_prop+0x10>
    return LV_STYLE_RES_NOT_FOUND;
 800a3dc:	2000      	movs	r0, #0
}
 800a3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 800a3e0:	6800      	ldr	r0, [r0, #0]
 800a3e2:	f008 fb6f 	bl	8012ac4 <lv_style_get_prop>
 800a3e6:	e7fa      	b.n	800a3de <lv_obj_get_local_style_prop+0x2a>

0800a3e8 <lv_obj_remove_local_style_prop>:
{
 800a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 800a3ea:	8bc5      	ldrh	r5, [r0, #30]
 800a3ec:	05ed      	lsls	r5, r5, #23
 800a3ee:	0ead      	lsrs	r5, r5, #26
 800a3f0:	d019      	beq.n	800a426 <lv_obj_remove_local_style_prop+0x3e>
        if(obj->styles[i].is_local &&
 800a3f2:	68c3      	ldr	r3, [r0, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800a3f4:	2400      	movs	r4, #0
        if(obj->styles[i].is_local &&
 800a3f6:	469c      	mov	ip, r3
 800a3f8:	2701      	movs	r7, #1
 800a3fa:	79d8      	ldrb	r0, [r3, #7]
 800a3fc:	001e      	movs	r6, r3
 800a3fe:	4207      	tst	r7, r0
 800a400:	d004      	beq.n	800a40c <lv_obj_remove_local_style_prop+0x24>
           obj->styles[i].selector == selector) {
 800a402:	6858      	ldr	r0, [r3, #4]
 800a404:	0200      	lsls	r0, r0, #8
 800a406:	0a00      	lsrs	r0, r0, #8
        if(obj->styles[i].is_local &&
 800a408:	4290      	cmp	r0, r2
 800a40a:	d008      	beq.n	800a41e <lv_obj_remove_local_style_prop+0x36>
    for(i = 0; i < obj->style_cnt; i++) {
 800a40c:	3401      	adds	r4, #1
 800a40e:	3308      	adds	r3, #8
 800a410:	42ac      	cmp	r4, r5
 800a412:	d3f2      	bcc.n	800a3fa <lv_obj_remove_local_style_prop+0x12>
    if(i == obj->style_cnt) return false;
 800a414:	2000      	movs	r0, #0
 800a416:	42ac      	cmp	r4, r5
 800a418:	d004      	beq.n	800a424 <lv_obj_remove_local_style_prop+0x3c>
    return lv_style_remove_prop(obj->styles[i].style, prop);
 800a41a:	00e6      	lsls	r6, r4, #3
 800a41c:	4466      	add	r6, ip
 800a41e:	6830      	ldr	r0, [r6, #0]
 800a420:	f008 fa34 	bl	801288c <lv_style_remove_prop>
}
 800a424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(i == obj->style_cnt) return false;
 800a426:	2000      	movs	r0, #0
 800a428:	e7fc      	b.n	800a424 <lv_obj_remove_local_style_prop+0x3c>
 800a42a:	46c0      	nop			; (mov r8, r8)

0800a42c <_lv_obj_style_create_transition>:
{
 800a42c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a42e:	4646      	mov	r6, r8
 800a430:	4690      	mov	r8, r2
    obj->skip_trans = 1;
 800a432:	2204      	movs	r2, #4
{
 800a434:	46d6      	mov	lr, sl
 800a436:	464f      	mov	r7, r9
 800a438:	469a      	mov	sl, r3
    obj->skip_trans = 1;
 800a43a:	7f83      	ldrb	r3, [r0, #30]
{
 800a43c:	b5c0      	push	{r6, r7, lr}
    obj->skip_trans = 1;
 800a43e:	4313      	orrs	r3, r2
 800a440:	7783      	strb	r3, [r0, #30]
    obj->state = prev_state;
 800a442:	4643      	mov	r3, r8
{
 800a444:	b092      	sub	sp, #72	; 0x48
 800a446:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    obj->state = prev_state;
 800a448:	8383      	strh	r3, [r0, #28]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800a44a:	892a      	ldrh	r2, [r5, #8]
{
 800a44c:	0004      	movs	r4, r0
 800a44e:	000e      	movs	r6, r1
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800a450:	f7ff f94e 	bl	80096f0 <lv_obj_get_style_prop>
    obj->state = new_state;
 800a454:	4653      	mov	r3, sl
 800a456:	83a3      	strh	r3, [r4, #28]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800a458:	892a      	ldrh	r2, [r5, #8]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800a45a:	0007      	movs	r7, r0
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800a45c:	0031      	movs	r1, r6
 800a45e:	0020      	movs	r0, r4
 800a460:	f7ff f946 	bl	80096f0 <lv_obj_get_style_prop>
    obj->skip_trans = 0;
 800a464:	2204      	movs	r2, #4
 800a466:	7fa3      	ldrb	r3, [r4, #30]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800a468:	4681      	mov	r9, r0
    obj->skip_trans = 0;
 800a46a:	4393      	bics	r3, r2
 800a46c:	77a3      	strb	r3, [r4, #30]
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800a46e:	4287      	cmp	r7, r0
 800a470:	d044      	beq.n	800a4fc <_lv_obj_style_create_transition+0xd0>
    obj->state = prev_state;
 800a472:	4643      	mov	r3, r8
 800a474:	83a3      	strh	r3, [r4, #28]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800a476:	892a      	ldrh	r2, [r5, #8]
 800a478:	0031      	movs	r1, r6
 800a47a:	0020      	movs	r0, r4
 800a47c:	f7ff f938 	bl	80096f0 <lv_obj_get_style_prop>
    obj->state = new_state;
 800a480:	4653      	mov	r3, sl
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800a482:	4680      	mov	r8, r0
    obj->state = new_state;
 800a484:	83a3      	strh	r3, [r4, #28]
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 800a486:	0031      	movs	r1, r6
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800a488:	0007      	movs	r7, r0
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 800a48a:	0020      	movs	r0, r4
 800a48c:	f7fe fefa 	bl	8009284 <get_trans_style>
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 800a490:	4642      	mov	r2, r8
 800a492:	8929      	ldrh	r1, [r5, #8]
 800a494:	6800      	ldr	r0, [r0, #0]
 800a496:	f008 fa5f 	bl	8012958 <lv_style_set_prop>
    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 800a49a:	892b      	ldrh	r3, [r5, #8]
 800a49c:	2b0b      	cmp	r3, #11
 800a49e:	d034      	beq.n	800a50a <_lv_obj_style_create_transition+0xde>
    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800a4a0:	4839      	ldr	r0, [pc, #228]	; (800a588 <_lv_obj_style_create_transition+0x15c>)
 800a4a2:	f007 fc79 	bl	8011d98 <_lv_ll_ins_head>
 800a4a6:	1e07      	subs	r7, r0, #0
    LV_ASSERT_MALLOC(tr);
 800a4a8:	d02e      	beq.n	800a508 <_lv_obj_style_create_transition+0xdc>
    tr->start_value = v1;
 800a4aa:	4643      	mov	r3, r8
 800a4ac:	60c3      	str	r3, [r0, #12]
    tr->end_value = v2;
 800a4ae:	464b      	mov	r3, r9
    tr->obj = obj;
 800a4b0:	6004      	str	r4, [r0, #0]
    tr->end_value = v2;
 800a4b2:	6103      	str	r3, [r0, #16]
    tr->prop = tr_dsc->prop;
 800a4b4:	892b      	ldrh	r3, [r5, #8]
    tr->selector = part;
 800a4b6:	6086      	str	r6, [r0, #8]
    tr->prop = tr_dsc->prop;
 800a4b8:	8083      	strh	r3, [r0, #4]
    lv_anim_init(&a);
 800a4ba:	a802      	add	r0, sp, #8
 800a4bc:	f006 fd6c 	bl	8010f98 <lv_anim_init>
    a->exec_cb = exec_cb;
 800a4c0:	4b32      	ldr	r3, [pc, #200]	; (800a58c <_lv_obj_style_create_transition+0x160>)
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
    a->early_apply = en;
 800a4c2:	223e      	movs	r2, #62	; 0x3e
    a->exec_cb = exec_cb;
 800a4c4:	9303      	str	r3, [sp, #12]
    a->start_cb = start_cb;
 800a4c6:	4b32      	ldr	r3, [pc, #200]	; (800a590 <_lv_obj_style_create_transition+0x164>)
    a->early_apply = en;
 800a4c8:	2101      	movs	r1, #1
    a->start_cb = start_cb;
 800a4ca:	9304      	str	r3, [sp, #16]
    a->ready_cb = ready_cb;
 800a4cc:	4b31      	ldr	r3, [pc, #196]	; (800a594 <_lv_obj_style_create_transition+0x168>)
    a->var = var;
 800a4ce:	9702      	str	r7, [sp, #8]
    a->ready_cb = ready_cb;
 800a4d0:	9305      	str	r3, [sp, #20]
    a->start_value = start;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 800a4d6:	930a      	str	r3, [sp, #40]	; 0x28
    a->end_value = end;
 800a4d8:	33ff      	adds	r3, #255	; 0xff
 800a4da:	930b      	str	r3, [sp, #44]	; 0x2c
    a->time = duration;
 800a4dc:	882b      	ldrh	r3, [r5, #0]
 800a4de:	930c      	str	r3, [sp, #48]	; 0x30
    a->act_time = -(int32_t)(delay);
 800a4e0:	886b      	ldrh	r3, [r5, #2]
 800a4e2:	425b      	negs	r3, r3
 800a4e4:	930d      	str	r3, [sp, #52]	; 0x34
    a->path_cb = path_cb;
 800a4e6:	68eb      	ldr	r3, [r5, #12]
 800a4e8:	9301      	str	r3, [sp, #4]
 800a4ea:	9308      	str	r3, [sp, #32]
    a->early_apply = en;
 800a4ec:	ab02      	add	r3, sp, #8
 800a4ee:	5c9b      	ldrb	r3, [r3, r2]
 800a4f0:	438b      	bics	r3, r1
 800a4f2:	a902      	add	r1, sp, #8
    lv_anim_start(&a);
 800a4f4:	0008      	movs	r0, r1
 800a4f6:	548b      	strb	r3, [r1, r2]
 800a4f8:	f006 fe50 	bl	801119c <lv_anim_start>
}
 800a4fc:	b012      	add	sp, #72	; 0x48
 800a4fe:	bce0      	pop	{r5, r6, r7}
 800a500:	46ba      	mov	sl, r7
 800a502:	46b1      	mov	r9, r6
 800a504:	46a8      	mov	r8, r5
 800a506:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(tr);
 800a508:	e7fe      	b.n	800a508 <_lv_obj_style_create_transition+0xdc>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 800a50a:	4b23      	ldr	r3, [pc, #140]	; (800a598 <_lv_obj_style_create_transition+0x16c>)
 800a50c:	4598      	cmp	r8, r3
 800a50e:	d019      	beq.n	800a544 <_lv_obj_style_create_transition+0x118>
 800a510:	4599      	cmp	r9, r3
 800a512:	d1c5      	bne.n	800a4a0 <_lv_obj_style_create_transition+0x74>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800a514:	0020      	movs	r0, r4
 800a516:	f7fb fc75 	bl	8005e04 <lv_obj_get_width>
 800a51a:	0fc3      	lsrs	r3, r0, #31
 800a51c:	181b      	adds	r3, r3, r0
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800a51e:	0020      	movs	r0, r4
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800a520:	105f      	asrs	r7, r3, #1
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800a522:	f7fb fc77 	bl	8005e14 <lv_obj_get_height>
 800a526:	0fc3      	lsrs	r3, r0, #31
 800a528:	181b      	adds	r3, r3, r0
 800a52a:	105b      	asrs	r3, r3, #1
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800a52c:	b23f      	sxth	r7, r7
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800a52e:	b21b      	sxth	r3, r3
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800a530:	429f      	cmp	r7, r3
 800a532:	da03      	bge.n	800a53c <_lv_obj_style_create_transition+0x110>
 800a534:	3701      	adds	r7, #1
 800a536:	b23b      	sxth	r3, r7
 800a538:	4699      	mov	r9, r3
 800a53a:	e7b1      	b.n	800a4a0 <_lv_obj_style_create_transition+0x74>
 800a53c:	3301      	adds	r3, #1
 800a53e:	b21b      	sxth	r3, r3
 800a540:	4699      	mov	r9, r3
 800a542:	e7ad      	b.n	800a4a0 <_lv_obj_style_create_transition+0x74>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800a544:	0020      	movs	r0, r4
 800a546:	f7fb fc5d 	bl	8005e04 <lv_obj_get_width>
 800a54a:	0fc3      	lsrs	r3, r0, #31
 800a54c:	181b      	adds	r3, r3, r0
 800a54e:	105b      	asrs	r3, r3, #1
 800a550:	b21b      	sxth	r3, r3
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800a552:	0020      	movs	r0, r4
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800a554:	4698      	mov	r8, r3
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800a556:	f7fb fc5d 	bl	8005e14 <lv_obj_get_height>
 800a55a:	0fc3      	lsrs	r3, r0, #31
 800a55c:	181b      	adds	r3, r3, r0
 800a55e:	105b      	asrs	r3, r3, #1
 800a560:	b21b      	sxth	r3, r3
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800a562:	4598      	cmp	r8, r3
 800a564:	da07      	bge.n	800a576 <_lv_obj_style_create_transition+0x14a>
 800a566:	4640      	mov	r0, r8
 800a568:	3001      	adds	r0, #1
 800a56a:	b203      	sxth	r3, r0
 800a56c:	4698      	mov	r8, r3
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800a56e:	45b9      	cmp	r9, r7
 800a570:	d196      	bne.n	800a4a0 <_lv_obj_style_create_transition+0x74>
 800a572:	46c1      	mov	r9, r8
 800a574:	e794      	b.n	800a4a0 <_lv_obj_style_create_transition+0x74>
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800a576:	3301      	adds	r3, #1
 800a578:	b21b      	sxth	r3, r3
 800a57a:	4698      	mov	r8, r3
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800a57c:	45b9      	cmp	r9, r7
 800a57e:	d000      	beq.n	800a582 <_lv_obj_style_create_transition+0x156>
 800a580:	e78e      	b.n	800a4a0 <_lv_obj_style_create_transition+0x74>
 800a582:	46c1      	mov	r9, r8
 800a584:	e78c      	b.n	800a4a0 <_lv_obj_style_create_transition+0x74>
 800a586:	46c0      	nop			; (mov r8, r8)
 800a588:	200033d4 	.word	0x200033d4
 800a58c:	08009b6d 	.word	0x08009b6d
 800a590:	0800a345 	.word	0x0800a345
 800a594:	08009e01 	.word	0x08009e01
 800a598:	00007fff 	.word	0x00007fff

0800a59c <_lv_obj_style_apply_color_filter>:
{
 800a59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59e:	0004      	movs	r4, r0
 800a5a0:	000e      	movs	r6, r1
 800a5a2:	0015      	movs	r5, r2
    if(obj == NULL) return v;
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d017      	beq.n	800a5d8 <_lv_obj_style_apply_color_filter+0x3c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 800a5a8:	2261      	movs	r2, #97	; 0x61
 800a5aa:	f7ff f8a1 	bl	80096f0 <lv_obj_get_style_prop>
 800a5ae:	1e07      	subs	r7, r0, #0
    if(f && f->filter_cb) {
 800a5b0:	d012      	beq.n	800a5d8 <_lv_obj_style_apply_color_filter+0x3c>
 800a5b2:	6803      	ldr	r3, [r0, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00f      	beq.n	800a5d8 <_lv_obj_style_apply_color_filter+0x3c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 800a5b8:	2262      	movs	r2, #98	; 0x62
 800a5ba:	0031      	movs	r1, r6
 800a5bc:	0020      	movs	r0, r4
 800a5be:	f7ff f897 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800a5c2:	b2c2      	uxtb	r2, r0
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 800a5c4:	2a00      	cmp	r2, #0
 800a5c6:	d007      	beq.n	800a5d8 <_lv_obj_style_apply_color_filter+0x3c>
 800a5c8:	1c29      	adds	r1, r5, #0
 800a5ca:	0038      	movs	r0, r7
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	4798      	blx	r3
 800a5d0:	0c2d      	lsrs	r5, r5, #16
 800a5d2:	b280      	uxth	r0, r0
 800a5d4:	042d      	lsls	r5, r5, #16
 800a5d6:	4305      	orrs	r5, r0
}
 800a5d8:	0028      	movs	r0, r5
 800a5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5dc <_lv_obj_style_state_compare>:
{
 800a5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5de:	464e      	mov	r6, r9
 800a5e0:	46de      	mov	lr, fp
 800a5e2:	4657      	mov	r7, sl
 800a5e4:	4645      	mov	r5, r8
 800a5e6:	b5e0      	push	{r5, r6, r7, lr}
 800a5e8:	0006      	movs	r6, r0
    for(i = 0; i < obj->style_cnt; i++) {
 800a5ea:	8bc0      	ldrh	r0, [r0, #30]
{
 800a5ec:	4691      	mov	r9, r2
    for(i = 0; i < obj->style_cnt; i++) {
 800a5ee:	05c0      	lsls	r0, r0, #23
{
 800a5f0:	b083      	sub	sp, #12
    for(i = 0; i < obj->style_cnt; i++) {
 800a5f2:	0e80      	lsrs	r0, r0, #26
 800a5f4:	d100      	bne.n	800a5f8 <_lv_obj_style_state_compare+0x1c>
 800a5f6:	e12c      	b.n	800a852 <_lv_obj_style_state_compare+0x276>
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	469a      	mov	sl, r3
        if(obj->styles[i].is_trans) continue;
 800a5fc:	3302      	adds	r3, #2
 800a5fe:	4698      	mov	r8, r3
 800a600:	2301      	movs	r3, #1
    for(i = 0; i < obj->style_cnt; i++) {
 800a602:	2500      	movs	r5, #0
        bool valid1 = state_act & (~state1) ? false : true;
 800a604:	43cf      	mvns	r7, r1
 800a606:	469b      	mov	fp, r3
 800a608:	e008      	b.n	800a61c <_lv_obj_style_state_compare+0x40>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800a60a:	2302      	movs	r3, #2
 800a60c:	469a      	mov	sl, r3
    for(i = 0; i < obj->style_cnt; i++) {
 800a60e:	8bf0      	ldrh	r0, [r6, #30]
 800a610:	05c0      	lsls	r0, r0, #23
 800a612:	0e80      	lsrs	r0, r0, #26
 800a614:	3501      	adds	r5, #1
 800a616:	42a8      	cmp	r0, r5
 800a618:	d800      	bhi.n	800a61c <_lv_obj_style_state_compare+0x40>
 800a61a:	e112      	b.n	800a842 <_lv_obj_style_state_compare+0x266>
        if(obj->styles[i].is_trans) continue;
 800a61c:	68f2      	ldr	r2, [r6, #12]
 800a61e:	4641      	mov	r1, r8
 800a620:	4694      	mov	ip, r2
 800a622:	00eb      	lsls	r3, r5, #3
 800a624:	4463      	add	r3, ip
 800a626:	79da      	ldrb	r2, [r3, #7]
 800a628:	4211      	tst	r1, r2
 800a62a:	d1f3      	bne.n	800a614 <_lv_obj_style_state_compare+0x38>
        bool valid1 = state_act & (~state1) ? false : true;
 800a62c:	889a      	ldrh	r2, [r3, #4]
 800a62e:	0011      	movs	r1, r2
 800a630:	4039      	ands	r1, r7
 800a632:	424c      	negs	r4, r1
 800a634:	4161      	adcs	r1, r4
        bool valid2 = state_act & (~state2) ? false : true;
 800a636:	464c      	mov	r4, r9
 800a638:	43a2      	bics	r2, r4
 800a63a:	4254      	negs	r4, r2
 800a63c:	4162      	adcs	r2, r4
        if(valid1 != valid2) {
 800a63e:	4291      	cmp	r1, r2
 800a640:	d0e8      	beq.n	800a614 <_lv_obj_style_state_compare+0x38>
            lv_style_t * style = obj->styles[i].style;
 800a642:	681c      	ldr	r4, [r3, #0]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 800a644:	2110      	movs	r1, #16
 800a646:	0020      	movs	r0, r4
 800a648:	aa01      	add	r2, sp, #4
 800a64a:	f008 fa3b 	bl	8012ac4 <lv_style_get_prop>
 800a64e:	2800      	cmp	r0, #0
 800a650:	d000      	beq.n	800a654 <_lv_obj_style_state_compare+0x78>
 800a652:	e0f4      	b.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 800a654:	2111      	movs	r1, #17
 800a656:	0020      	movs	r0, r4
 800a658:	aa01      	add	r2, sp, #4
 800a65a:	f008 fa33 	bl	8012ac4 <lv_style_get_prop>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d000      	beq.n	800a664 <_lv_obj_style_state_compare+0x88>
 800a662:	e0ec      	b.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 800a664:	2112      	movs	r1, #18
 800a666:	0020      	movs	r0, r4
 800a668:	aa01      	add	r2, sp, #4
 800a66a:	f008 fa2b 	bl	8012ac4 <lv_style_get_prop>
 800a66e:	2800      	cmp	r0, #0
 800a670:	d000      	beq.n	800a674 <_lv_obj_style_state_compare+0x98>
 800a672:	e0e4      	b.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 800a674:	2113      	movs	r1, #19
 800a676:	0020      	movs	r0, r4
 800a678:	aa01      	add	r2, sp, #4
 800a67a:	f008 fa23 	bl	8012ac4 <lv_style_get_prop>
 800a67e:	2800      	cmp	r0, #0
 800a680:	d000      	beq.n	800a684 <_lv_obj_style_state_compare+0xa8>
 800a682:	e0dc      	b.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 800a684:	2115      	movs	r1, #21
 800a686:	0020      	movs	r0, r4
 800a688:	aa01      	add	r2, sp, #4
 800a68a:	f008 fa1b 	bl	8012ac4 <lv_style_get_prop>
 800a68e:	2800      	cmp	r0, #0
 800a690:	d000      	beq.n	800a694 <_lv_obj_style_state_compare+0xb8>
 800a692:	e0d4      	b.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 800a694:	2114      	movs	r1, #20
 800a696:	0020      	movs	r0, r4
 800a698:	aa01      	add	r2, sp, #4
 800a69a:	f008 fa13 	bl	8012ac4 <lv_style_get_prop>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d000      	beq.n	800a6a4 <_lv_obj_style_state_compare+0xc8>
 800a6a2:	e0cc      	b.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 800a6a4:	210a      	movs	r1, #10
 800a6a6:	0020      	movs	r0, r4
 800a6a8:	aa01      	add	r2, sp, #4
 800a6aa:	f008 fa0b 	bl	8012ac4 <lv_style_get_prop>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	d000      	beq.n	800a6b4 <_lv_obj_style_state_compare+0xd8>
 800a6b2:	e0c4      	b.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 800a6b4:	216a      	movs	r1, #106	; 0x6a
 800a6b6:	0020      	movs	r0, r4
 800a6b8:	aa01      	add	r2, sp, #4
 800a6ba:	f008 fa03 	bl	8012ac4 <lv_style_get_prop>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d000      	beq.n	800a6c4 <_lv_obj_style_state_compare+0xe8>
 800a6c2:	e0bc      	b.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 800a6c4:	216b      	movs	r1, #107	; 0x6b
 800a6c6:	0020      	movs	r0, r4
 800a6c8:	aa01      	add	r2, sp, #4
 800a6ca:	f008 f9fb 	bl	8012ac4 <lv_style_get_prop>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d000      	beq.n	800a6d4 <_lv_obj_style_state_compare+0xf8>
 800a6d2:	e0b4      	b.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 800a6d4:	2101      	movs	r1, #1
 800a6d6:	0020      	movs	r0, r4
 800a6d8:	aa01      	add	r2, sp, #4
 800a6da:	f008 f9f3 	bl	8012ac4 <lv_style_get_prop>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	d000      	beq.n	800a6e4 <_lv_obj_style_state_compare+0x108>
 800a6e2:	e0ac      	b.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 800a6e4:	2104      	movs	r1, #4
 800a6e6:	0020      	movs	r0, r4
 800a6e8:	aa01      	add	r2, sp, #4
 800a6ea:	f008 f9eb 	bl	8012ac4 <lv_style_get_prop>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d000      	beq.n	800a6f4 <_lv_obj_style_state_compare+0x118>
 800a6f2:	e0a4      	b.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 800a6f4:	2102      	movs	r1, #2
 800a6f6:	0020      	movs	r0, r4
 800a6f8:	aa01      	add	r2, sp, #4
 800a6fa:	f008 f9e3 	bl	8012ac4 <lv_style_get_prop>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d000      	beq.n	800a704 <_lv_obj_style_state_compare+0x128>
 800a702:	e09c      	b.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 800a704:	2103      	movs	r1, #3
 800a706:	0020      	movs	r0, r4
 800a708:	aa01      	add	r2, sp, #4
 800a70a:	f008 f9db 	bl	8012ac4 <lv_style_get_prop>
 800a70e:	2800      	cmp	r0, #0
 800a710:	d000      	beq.n	800a714 <_lv_obj_style_state_compare+0x138>
 800a712:	e094      	b.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 800a714:	2105      	movs	r1, #5
 800a716:	0020      	movs	r0, r4
 800a718:	aa01      	add	r2, sp, #4
 800a71a:	f008 f9d3 	bl	8012ac4 <lv_style_get_prop>
 800a71e:	2800      	cmp	r0, #0
 800a720:	d000      	beq.n	800a724 <_lv_obj_style_state_compare+0x148>
 800a722:	e08c      	b.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 800a724:	2106      	movs	r1, #6
 800a726:	0020      	movs	r0, r4
 800a728:	aa01      	add	r2, sp, #4
 800a72a:	f008 f9cb 	bl	8012ac4 <lv_style_get_prop>
 800a72e:	2800      	cmp	r0, #0
 800a730:	d000      	beq.n	800a734 <_lv_obj_style_state_compare+0x158>
 800a732:	e084      	b.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 800a734:	2132      	movs	r1, #50	; 0x32
 800a736:	0020      	movs	r0, r4
 800a738:	aa01      	add	r2, sp, #4
 800a73a:	f008 f9c3 	bl	8012ac4 <lv_style_get_prop>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d17d      	bne.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 800a742:	216d      	movs	r1, #109	; 0x6d
 800a744:	0020      	movs	r0, r4
 800a746:	aa01      	add	r2, sp, #4
 800a748:	f008 f9bc 	bl	8012ac4 <lv_style_get_prop>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d176      	bne.n	800a83e <_lv_obj_style_state_compare+0x262>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 800a750:	216c      	movs	r1, #108	; 0x6c
 800a752:	0020      	movs	r0, r4
 800a754:	aa01      	add	r2, sp, #4
 800a756:	f008 f9b5 	bl	8012ac4 <lv_style_get_prop>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d16f      	bne.n	800a83e <_lv_obj_style_state_compare+0x262>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800a75e:	2168      	movs	r1, #104	; 0x68
 800a760:	0020      	movs	r0, r4
 800a762:	aa01      	add	r2, sp, #4
 800a764:	f008 f9ae 	bl	8012ac4 <lv_style_get_prop>
 800a768:	2800      	cmp	r0, #0
 800a76a:	d000      	beq.n	800a76e <_lv_obj_style_state_compare+0x192>
 800a76c:	e74d      	b.n	800a60a <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800a76e:	2169      	movs	r1, #105	; 0x69
 800a770:	0020      	movs	r0, r4
 800a772:	aa01      	add	r2, sp, #4
 800a774:	f008 f9a6 	bl	8012ac4 <lv_style_get_prop>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d000      	beq.n	800a77e <_lv_obj_style_state_compare+0x1a2>
 800a77c:	e745      	b.n	800a60a <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800a77e:	216d      	movs	r1, #109	; 0x6d
 800a780:	0020      	movs	r0, r4
 800a782:	aa01      	add	r2, sp, #4
 800a784:	f008 f99e 	bl	8012ac4 <lv_style_get_prop>
 800a788:	2800      	cmp	r0, #0
 800a78a:	d000      	beq.n	800a78e <_lv_obj_style_state_compare+0x1b2>
 800a78c:	e73d      	b.n	800a60a <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800a78e:	216c      	movs	r1, #108	; 0x6c
 800a790:	0020      	movs	r0, r4
 800a792:	aa01      	add	r2, sp, #4
 800a794:	f008 f996 	bl	8012ac4 <lv_style_get_prop>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d000      	beq.n	800a79e <_lv_obj_style_state_compare+0x1c2>
 800a79c:	e735      	b.n	800a60a <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800a79e:	2137      	movs	r1, #55	; 0x37
 800a7a0:	0020      	movs	r0, r4
 800a7a2:	aa01      	add	r2, sp, #4
 800a7a4:	f008 f98e 	bl	8012ac4 <lv_style_get_prop>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	d000      	beq.n	800a7ae <_lv_obj_style_state_compare+0x1d2>
 800a7ac:	e72d      	b.n	800a60a <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800a7ae:	2138      	movs	r1, #56	; 0x38
 800a7b0:	0020      	movs	r0, r4
 800a7b2:	aa01      	add	r2, sp, #4
 800a7b4:	f008 f986 	bl	8012ac4 <lv_style_get_prop>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d000      	beq.n	800a7be <_lv_obj_style_state_compare+0x1e2>
 800a7bc:	e725      	b.n	800a60a <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800a7be:	2135      	movs	r1, #53	; 0x35
 800a7c0:	0020      	movs	r0, r4
 800a7c2:	aa01      	add	r2, sp, #4
 800a7c4:	f008 f97e 	bl	8012ac4 <lv_style_get_prop>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d000      	beq.n	800a7ce <_lv_obj_style_state_compare+0x1f2>
 800a7cc:	e71d      	b.n	800a60a <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800a7ce:	2140      	movs	r1, #64	; 0x40
 800a7d0:	0020      	movs	r0, r4
 800a7d2:	aa01      	add	r2, sp, #4
 800a7d4:	f008 f976 	bl	8012ac4 <lv_style_get_prop>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d000      	beq.n	800a7de <_lv_obj_style_state_compare+0x202>
 800a7dc:	e715      	b.n	800a60a <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800a7de:	2145      	movs	r1, #69	; 0x45
 800a7e0:	0020      	movs	r0, r4
 800a7e2:	aa01      	add	r2, sp, #4
 800a7e4:	f008 f96e 	bl	8012ac4 <lv_style_get_prop>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d000      	beq.n	800a7ee <_lv_obj_style_state_compare+0x212>
 800a7ec:	e70d      	b.n	800a60a <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800a7ee:	2141      	movs	r1, #65	; 0x41
 800a7f0:	0020      	movs	r0, r4
 800a7f2:	aa01      	add	r2, sp, #4
 800a7f4:	f008 f966 	bl	8012ac4 <lv_style_get_prop>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d000      	beq.n	800a7fe <_lv_obj_style_state_compare+0x222>
 800a7fc:	e705      	b.n	800a60a <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800a7fe:	2142      	movs	r1, #66	; 0x42
 800a800:	0020      	movs	r0, r4
 800a802:	aa01      	add	r2, sp, #4
 800a804:	f008 f95e 	bl	8012ac4 <lv_style_get_prop>
 800a808:	2800      	cmp	r0, #0
 800a80a:	d000      	beq.n	800a80e <_lv_obj_style_state_compare+0x232>
 800a80c:	e6fd      	b.n	800a60a <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800a80e:	2143      	movs	r1, #67	; 0x43
 800a810:	0020      	movs	r0, r4
 800a812:	aa01      	add	r2, sp, #4
 800a814:	f008 f956 	bl	8012ac4 <lv_style_get_prop>
 800a818:	2800      	cmp	r0, #0
 800a81a:	d000      	beq.n	800a81e <_lv_obj_style_state_compare+0x242>
 800a81c:	e6f5      	b.n	800a60a <_lv_obj_style_state_compare+0x2e>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800a81e:	2149      	movs	r1, #73	; 0x49
 800a820:	0020      	movs	r0, r4
 800a822:	aa01      	add	r2, sp, #4
 800a824:	f008 f94e 	bl	8012ac4 <lv_style_get_prop>
 800a828:	2800      	cmp	r0, #0
 800a82a:	d000      	beq.n	800a82e <_lv_obj_style_state_compare+0x252>
 800a82c:	e6ed      	b.n	800a60a <_lv_obj_style_state_compare+0x2e>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 800a82e:	4652      	mov	r2, sl
 800a830:	4653      	mov	r3, sl
 800a832:	2a00      	cmp	r2, #0
 800a834:	d100      	bne.n	800a838 <_lv_obj_style_state_compare+0x25c>
 800a836:	465b      	mov	r3, fp
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	469a      	mov	sl, r3
 800a83c:	e6e7      	b.n	800a60e <_lv_obj_style_state_compare+0x32>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 800a83e:	2303      	movs	r3, #3
 800a840:	469a      	mov	sl, r3
}
 800a842:	4650      	mov	r0, sl
 800a844:	b003      	add	sp, #12
 800a846:	bcf0      	pop	{r4, r5, r6, r7}
 800a848:	46bb      	mov	fp, r7
 800a84a:	46b2      	mov	sl, r6
 800a84c:	46a9      	mov	r9, r5
 800a84e:	46a0      	mov	r8, r4
 800a850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 800a852:	2300      	movs	r3, #0
 800a854:	469a      	mov	sl, r3
 800a856:	e7f4      	b.n	800a842 <_lv_obj_style_state_compare+0x266>

0800a858 <lv_obj_style_get_selector_state>:
    return selector & 0xFFFF;
 800a858:	b280      	uxth	r0, r0
}
 800a85a:	4770      	bx	lr

0800a85c <lv_obj_style_get_selector_part>:
    return selector & 0xFF0000;
 800a85c:	23ff      	movs	r3, #255	; 0xff
 800a85e:	041b      	lsls	r3, r3, #16
 800a860:	4018      	ands	r0, r3
}
 800a862:	4770      	bx	lr

0800a864 <lv_obj_calculate_style_text_align>:
{
 800a864:	b570      	push	{r4, r5, r6, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 800a866:	225b      	movs	r2, #91	; 0x5b
 800a868:	0005      	movs	r5, r0
 800a86a:	000e      	movs	r6, r1
 800a86c:	f7fe ff40 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800a870:	2216      	movs	r2, #22
    return (lv_text_align_t)v.num;
 800a872:	b2c4      	uxtb	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800a874:	0031      	movs	r1, r6
 800a876:	0028      	movs	r0, r5
 800a878:	f7fe ff3a 	bl	80096f0 <lv_obj_get_style_prop>
    return align;
 800a87c:	1c20      	adds	r0, r4, #0
 800a87e:	2c00      	cmp	r4, #0
 800a880:	d100      	bne.n	800a884 <lv_obj_calculate_style_text_align+0x20>
 800a882:	2001      	movs	r0, #1
 800a884:	b2c0      	uxtb	r0, r0
}
 800a886:	bd70      	pop	{r4, r5, r6, pc}

0800a888 <lv_obj_set_style_width>:
#include "lv_obj.h"

void lv_obj_set_style_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800a888:	b510      	push	{r4, lr}
 800a88a:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_WIDTH, v, selector);
 800a88c:	000a      	movs	r2, r1
 800a88e:	2101      	movs	r1, #1
 800a890:	f7ff fd78 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a894:	bd10      	pop	{r4, pc}
 800a896:	46c0      	nop			; (mov r8, r8)

0800a898 <lv_obj_set_style_height>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_WIDTH, v, selector);
}

void lv_obj_set_style_height(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800a898:	b510      	push	{r4, lr}
 800a89a:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_HEIGHT, v, selector);
 800a89c:	000a      	movs	r2, r1
 800a89e:	2104      	movs	r1, #4
 800a8a0:	f7ff fd70 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a8a4:	bd10      	pop	{r4, pc}
 800a8a6:	46c0      	nop			; (mov r8, r8)

0800a8a8 <lv_obj_set_style_x>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_HEIGHT, v, selector);
}

void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800a8a8:	b510      	push	{r4, lr}
 800a8aa:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 800a8ac:	000a      	movs	r2, r1
 800a8ae:	2107      	movs	r1, #7
 800a8b0:	f7ff fd68 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a8b4:	bd10      	pop	{r4, pc}
 800a8b6:	46c0      	nop			; (mov r8, r8)

0800a8b8 <lv_obj_set_style_y>:

void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800a8b8:	b510      	push	{r4, lr}
 800a8ba:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 800a8bc:	000a      	movs	r2, r1
 800a8be:	2108      	movs	r1, #8
 800a8c0:	f7ff fd60 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a8c4:	bd10      	pop	{r4, pc}
 800a8c6:	46c0      	nop			; (mov r8, r8)

0800a8c8 <lv_obj_set_style_align>:

void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
 800a8c8:	b510      	push	{r4, lr}
 800a8ca:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 800a8cc:	000a      	movs	r2, r1
 800a8ce:	2109      	movs	r1, #9
 800a8d0:	f7ff fd58 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a8d4:	bd10      	pop	{r4, pc}
 800a8d6:	46c0      	nop			; (mov r8, r8)

0800a8d8 <lv_obj_set_style_pad_top>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TRANSFORM_PIVOT_Y, v, selector);
}

void lv_obj_set_style_pad_top(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800a8d8:	b510      	push	{r4, lr}
 800a8da:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_TOP, v, selector);
 800a8dc:	000a      	movs	r2, r1
 800a8de:	2110      	movs	r1, #16
 800a8e0:	f7ff fd50 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a8e4:	bd10      	pop	{r4, pc}
 800a8e6:	46c0      	nop			; (mov r8, r8)

0800a8e8 <lv_obj_set_style_pad_bottom>:

void lv_obj_set_style_pad_bottom(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800a8e8:	b510      	push	{r4, lr}
 800a8ea:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_BOTTOM, v, selector);
 800a8ec:	000a      	movs	r2, r1
 800a8ee:	2111      	movs	r1, #17
 800a8f0:	f7ff fd48 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a8f4:	bd10      	pop	{r4, pc}
 800a8f6:	46c0      	nop			; (mov r8, r8)

0800a8f8 <lv_obj_set_style_pad_left>:

void lv_obj_set_style_pad_left(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800a8f8:	b510      	push	{r4, lr}
 800a8fa:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_LEFT, v, selector);
 800a8fc:	000a      	movs	r2, r1
 800a8fe:	2112      	movs	r1, #18
 800a900:	f7ff fd40 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a904:	bd10      	pop	{r4, pc}
 800a906:	46c0      	nop			; (mov r8, r8)

0800a908 <lv_obj_set_style_pad_right>:

void lv_obj_set_style_pad_right(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800a908:	b510      	push	{r4, lr}
 800a90a:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_RIGHT, v, selector);
 800a90c:	000a      	movs	r2, r1
 800a90e:	2113      	movs	r1, #19
 800a910:	f7ff fd38 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a914:	bd10      	pop	{r4, pc}
 800a916:	46c0      	nop			; (mov r8, r8)

0800a918 <lv_obj_set_style_bg_color>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_COLUMN, v, selector);
}

void lv_obj_set_style_bg_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 800a918:	b510      	push	{r4, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	0013      	movs	r3, r2
    lv_style_value_t v = {
 800a91e:	466c      	mov	r4, sp
 800a920:	2200      	movs	r2, #0
 800a922:	8022      	strh	r2, [r4, #0]
 800a924:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_COLOR, v, selector);
 800a926:	2120      	movs	r1, #32
 800a928:	f7ff fd2c 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a92c:	b002      	add	sp, #8
 800a92e:	bd10      	pop	{r4, pc}

0800a930 <lv_obj_set_style_bg_opa>:

void lv_obj_set_style_bg_opa(struct _lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
{
 800a930:	b510      	push	{r4, lr}
 800a932:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_OPA, v, selector);
 800a934:	000a      	movs	r2, r1
 800a936:	2121      	movs	r1, #33	; 0x21
 800a938:	f7ff fd24 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a93c:	bd10      	pop	{r4, pc}
 800a93e:	46c0      	nop			; (mov r8, r8)

0800a940 <lv_obj_set_style_bg_img_src>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_DITHER_MODE, v, selector);
}

void lv_obj_set_style_bg_img_src(struct _lv_obj_t * obj, const void * value, lv_style_selector_t selector)
{
 800a940:	b510      	push	{r4, lr}
 800a942:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .ptr = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_IMG_SRC, v, selector);
 800a944:	000a      	movs	r2, r1
 800a946:	2128      	movs	r1, #40	; 0x28
 800a948:	f7ff fd1c 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a94c:	bd10      	pop	{r4, pc}
 800a94e:	46c0      	nop			; (mov r8, r8)

0800a950 <lv_obj_set_style_bg_img_recolor>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_IMG_OPA, v, selector);
}

void lv_obj_set_style_bg_img_recolor(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 800a950:	b510      	push	{r4, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	0013      	movs	r3, r2
    lv_style_value_t v = {
 800a956:	466c      	mov	r4, sp
 800a958:	2200      	movs	r2, #0
 800a95a:	8022      	strh	r2, [r4, #0]
 800a95c:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_IMG_RECOLOR, v, selector);
 800a95e:	212a      	movs	r1, #42	; 0x2a
 800a960:	f7ff fd10 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a964:	b002      	add	sp, #8
 800a966:	bd10      	pop	{r4, pc}

0800a968 <lv_obj_set_style_bg_img_recolor_opa>:

void lv_obj_set_style_bg_img_recolor_opa(struct _lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
{
 800a968:	b510      	push	{r4, lr}
 800a96a:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_IMG_RECOLOR_OPA, v, selector);
 800a96c:	000a      	movs	r2, r1
 800a96e:	212b      	movs	r1, #43	; 0x2b
 800a970:	f7ff fd08 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a974:	bd10      	pop	{r4, pc}
 800a976:	46c0      	nop			; (mov r8, r8)

0800a978 <lv_obj_set_style_bg_img_tiled>:

void lv_obj_set_style_bg_img_tiled(struct _lv_obj_t * obj, bool value, lv_style_selector_t selector)
{
 800a978:	b510      	push	{r4, lr}
 800a97a:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_IMG_TILED, v, selector);
 800a97c:	000a      	movs	r2, r1
 800a97e:	212c      	movs	r1, #44	; 0x2c
 800a980:	f7ff fd00 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a984:	bd10      	pop	{r4, pc}
 800a986:	46c0      	nop			; (mov r8, r8)

0800a988 <lv_obj_set_style_border_color>:

void lv_obj_set_style_border_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 800a988:	b510      	push	{r4, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	0013      	movs	r3, r2
    lv_style_value_t v = {
 800a98e:	466c      	mov	r4, sp
 800a990:	2200      	movs	r2, #0
 800a992:	8022      	strh	r2, [r4, #0]
 800a994:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BORDER_COLOR, v, selector);
 800a996:	2130      	movs	r1, #48	; 0x30
 800a998:	f7ff fcf4 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a99c:	b002      	add	sp, #8
 800a99e:	bd10      	pop	{r4, pc}

0800a9a0 <lv_obj_set_style_border_width>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BORDER_OPA, v, selector);
}

void lv_obj_set_style_border_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800a9a0:	b510      	push	{r4, lr}
 800a9a2:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BORDER_WIDTH, v, selector);
 800a9a4:	000a      	movs	r2, r1
 800a9a6:	2132      	movs	r1, #50	; 0x32
 800a9a8:	f7ff fcec 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a9ac:	bd10      	pop	{r4, pc}
 800a9ae:	46c0      	nop			; (mov r8, r8)

0800a9b0 <lv_obj_set_style_border_side>:

void lv_obj_set_style_border_side(struct _lv_obj_t * obj, lv_border_side_t value, lv_style_selector_t selector)
{
 800a9b0:	b510      	push	{r4, lr}
 800a9b2:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BORDER_SIDE, v, selector);
 800a9b4:	000a      	movs	r2, r1
 800a9b6:	2133      	movs	r1, #51	; 0x33
 800a9b8:	f7ff fce4 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a9bc:	bd10      	pop	{r4, pc}
 800a9be:	46c0      	nop			; (mov r8, r8)

0800a9c0 <lv_obj_set_style_outline_width>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BORDER_POST, v, selector);
}

void lv_obj_set_style_outline_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_OUTLINE_WIDTH, v, selector);
 800a9c4:	000a      	movs	r2, r1
 800a9c6:	2135      	movs	r1, #53	; 0x35
 800a9c8:	f7ff fcdc 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a9cc:	bd10      	pop	{r4, pc}
 800a9ce:	46c0      	nop			; (mov r8, r8)

0800a9d0 <lv_obj_set_style_outline_color>:

void lv_obj_set_style_outline_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 800a9d0:	b510      	push	{r4, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	0013      	movs	r3, r2
    lv_style_value_t v = {
 800a9d6:	466c      	mov	r4, sp
 800a9d8:	2200      	movs	r2, #0
 800a9da:	8022      	strh	r2, [r4, #0]
 800a9dc:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_OUTLINE_COLOR, v, selector);
 800a9de:	2136      	movs	r1, #54	; 0x36
 800a9e0:	f7ff fcd0 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a9e4:	b002      	add	sp, #8
 800a9e6:	bd10      	pop	{r4, pc}

0800a9e8 <lv_obj_set_style_outline_pad>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_OUTLINE_OPA, v, selector);
}

void lv_obj_set_style_outline_pad(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_OUTLINE_PAD, v, selector);
 800a9ec:	000a      	movs	r2, r1
 800a9ee:	2138      	movs	r1, #56	; 0x38
 800a9f0:	f7ff fcc8 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800a9f4:	bd10      	pop	{r4, pc}
 800a9f6:	46c0      	nop			; (mov r8, r8)

0800a9f8 <lv_obj_set_style_text_color>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ARC_IMG_SRC, v, selector);
}

void lv_obj_set_style_text_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 800a9f8:	b510      	push	{r4, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	0013      	movs	r3, r2
    lv_style_value_t v = {
 800a9fe:	466c      	mov	r4, sp
 800aa00:	2200      	movs	r2, #0
 800aa02:	8022      	strh	r2, [r4, #0]
 800aa04:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_COLOR, v, selector);
 800aa06:	2155      	movs	r1, #85	; 0x55
 800aa08:	f7ff fcbc 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800aa0c:	b002      	add	sp, #8
 800aa0e:	bd10      	pop	{r4, pc}

0800aa10 <lv_obj_set_style_text_opa>:

void lv_obj_set_style_text_opa(struct _lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
{
 800aa10:	b510      	push	{r4, lr}
 800aa12:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_OPA, v, selector);
 800aa14:	000a      	movs	r2, r1
 800aa16:	2156      	movs	r1, #86	; 0x56
 800aa18:	f7ff fcb4 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800aa1c:	bd10      	pop	{r4, pc}
 800aa1e:	46c0      	nop			; (mov r8, r8)

0800aa20 <lv_obj_set_style_text_letter_space>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_FONT, v, selector);
}

void lv_obj_set_style_text_letter_space(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800aa20:	b510      	push	{r4, lr}
 800aa22:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_LETTER_SPACE, v, selector);
 800aa24:	000a      	movs	r2, r1
 800aa26:	2158      	movs	r1, #88	; 0x58
 800aa28:	f7ff fcac 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800aa2c:	bd10      	pop	{r4, pc}
 800aa2e:	46c0      	nop			; (mov r8, r8)

0800aa30 <lv_obj_set_style_text_line_space>:

void lv_obj_set_style_text_line_space(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800aa30:	b510      	push	{r4, lr}
 800aa32:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_LINE_SPACE, v, selector);
 800aa34:	000a      	movs	r2, r1
 800aa36:	2159      	movs	r1, #89	; 0x59
 800aa38:	f7ff fca4 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800aa3c:	bd10      	pop	{r4, pc}
 800aa3e:	46c0      	nop			; (mov r8, r8)

0800aa40 <lv_obj_set_style_text_align>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_DECOR, v, selector);
}

void lv_obj_set_style_text_align(struct _lv_obj_t * obj, lv_text_align_t value, lv_style_selector_t selector)
{
 800aa40:	b510      	push	{r4, lr}
 800aa42:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_ALIGN, v, selector);
 800aa44:	000a      	movs	r2, r1
 800aa46:	215b      	movs	r1, #91	; 0x5b
 800aa48:	f7ff fc9c 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800aa4c:	bd10      	pop	{r4, pc}
 800aa4e:	46c0      	nop			; (mov r8, r8)

0800aa50 <lv_obj_set_style_opa>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_CLIP_CORNER, v, selector);
}

void lv_obj_set_style_opa(struct _lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
{
 800aa50:	b510      	push	{r4, lr}
 800aa52:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_OPA, v, selector);
 800aa54:	000a      	movs	r2, r1
 800aa56:	2160      	movs	r1, #96	; 0x60
 800aa58:	f7ff fc94 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800aa5c:	bd10      	pop	{r4, pc}
 800aa5e:	46c0      	nop			; (mov r8, r8)

0800aa60 <lv_obj_set_style_anim_time>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ANIM, v, selector);
}

void lv_obj_set_style_anim_time(struct _lv_obj_t * obj, uint32_t value, lv_style_selector_t selector)
{
 800aa60:	b510      	push	{r4, lr}
 800aa62:	0013      	movs	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ANIM_TIME, v, selector);
 800aa64:	000a      	movs	r2, r1
 800aa66:	2164      	movs	r1, #100	; 0x64
 800aa68:	f7ff fc8c 	bl	800a384 <lv_obj_set_local_style_prop>
}
 800aa6c:	bd10      	pop	{r4, pc}
 800aa6e:	46c0      	nop			; (mov r8, r8)

0800aa70 <obj_del_core.part.0>:
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_del(obj);
}

static void obj_del_core(lv_obj_t * obj)
 800aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa72:	0005      	movs	r5, r0
    if(obj->spec_attr == NULL) return NULL;
 800aa74:	68ab      	ldr	r3, [r5, #8]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d013      	beq.n	800aaa2 <obj_del_core.part.0+0x32>
    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	2a00      	cmp	r2, #0
 800aa7e:	d010      	beq.n	800aaa2 <obj_del_core.part.0+0x32>
    else return obj->spec_attr->children[id];
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	681c      	ldr	r4, [r3, #0]
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
    if(res == LV_RES_INV) return;

    /*Recursively delete the children*/
    lv_obj_t * child = lv_obj_get_child(obj, 0);
    while(child) {
 800aa84:	2c00      	cmp	r4, #0
 800aa86:	d00c      	beq.n	800aaa2 <obj_del_core.part.0+0x32>
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800aa88:	2200      	movs	r2, #0
 800aa8a:	2121      	movs	r1, #33	; 0x21
 800aa8c:	0020      	movs	r0, r4
 800aa8e:	f7f7 f965 	bl	8001d5c <lv_event_send>
    if(res == LV_RES_INV) return;
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d0ee      	beq.n	800aa74 <obj_del_core.part.0+0x4>
 800aa96:	0020      	movs	r0, r4
 800aa98:	f7ff ffea 	bl	800aa70 <obj_del_core.part.0>
    if(obj->spec_attr == NULL) return NULL;
 800aa9c:	68ab      	ldr	r3, [r5, #8]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1eb      	bne.n	800aa7a <obj_del_core.part.0+0xa>
        obj_del_core(child);
        child = lv_obj_get_child(obj, 0);
    }

    lv_group_t * group = lv_obj_get_group(obj);
 800aaa2:	0028      	movs	r0, r5
 800aaa4:	f7fa fae2 	bl	800506c <lv_obj_get_group>
 800aaa8:	0006      	movs	r6, r0

    /*Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800aaaa:	2000      	movs	r0, #0
 800aaac:	f006 f8ea 	bl	8010c84 <lv_indev_get_next>
    while(indev) {
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
            lv_indev_reset(indev, obj);
        }
        if(indev->proc.types.pointer.last_pressed == obj) {
            indev->proc.types.pointer.last_pressed = NULL;
 800aab0:	2700      	movs	r7, #0
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800aab2:	1e04      	subs	r4, r0, #0
    while(indev) {
 800aab4:	d108      	bne.n	800aac8 <obj_del_core.part.0+0x58>
 800aab6:	e021      	b.n	800aafc <obj_del_core.part.0+0x8c>
        }

        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800aab8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aaba:	429e      	cmp	r6, r3
 800aabc:	d011      	beq.n	800aae2 <obj_del_core.part.0+0x72>
            lv_indev_reset(indev, obj);
        }
        indev = lv_indev_get_next(indev);
 800aabe:	0020      	movs	r0, r4
 800aac0:	f006 f8e0 	bl	8010c84 <lv_indev_get_next>
 800aac4:	1e04      	subs	r4, r0, #0
    while(indev) {
 800aac6:	d019      	beq.n	800aafc <obj_del_core.part.0+0x8c>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800aac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaca:	429d      	cmp	r5, r3
 800aacc:	d035      	beq.n	800ab3a <obj_del_core.part.0+0xca>
 800aace:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aad0:	429d      	cmp	r5, r3
 800aad2:	d032      	beq.n	800ab3a <obj_del_core.part.0+0xca>
        if(indev->proc.types.pointer.last_pressed == obj) {
 800aad4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800aad6:	429d      	cmp	r5, r3
 800aad8:	d1ee      	bne.n	800aab8 <obj_del_core.part.0+0x48>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800aada:	6d23      	ldr	r3, [r4, #80]	; 0x50
            indev->proc.types.pointer.last_pressed = NULL;
 800aadc:	6327      	str	r7, [r4, #48]	; 0x30
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800aade:	429e      	cmp	r6, r3
 800aae0:	d1ed      	bne.n	800aabe <obj_del_core.part.0+0x4e>
 800aae2:	f7f7 ff29 	bl	8002938 <lv_indev_get_obj_act>
 800aae6:	4285      	cmp	r5, r0
 800aae8:	d1e9      	bne.n	800aabe <obj_del_core.part.0+0x4e>
            lv_indev_reset(indev, obj);
 800aaea:	0020      	movs	r0, r4
 800aaec:	0029      	movs	r1, r5
 800aaee:	f7f7 fe61 	bl	80027b4 <lv_indev_reset>
        indev = lv_indev_get_next(indev);
 800aaf2:	0020      	movs	r0, r4
 800aaf4:	f006 f8c6 	bl	8010c84 <lv_indev_get_next>
 800aaf8:	1e04      	subs	r4, r0, #0
    while(indev) {
 800aafa:	d1e5      	bne.n	800aac8 <obj_del_core.part.0+0x58>
    }

    /*All children deleted. Now clean up the object specific data*/
    _lv_obj_destruct(obj);
 800aafc:	0028      	movs	r0, r5
 800aafe:	f7fa fc09 	bl	8005314 <_lv_obj_destruct>

    /*Remove the screen for the screen list*/
    if(obj->parent == NULL) {
 800ab02:	686b      	ldr	r3, [r5, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d01d      	beq.n	800ab44 <obj_del_core.part.0+0xd4>
    if(obj->spec_attr == NULL) return 0;
 800ab08:	689c      	ldr	r4, [r3, #8]
 800ab0a:	6861      	ldr	r1, [r4, #4]
 800ab0c:	6827      	ldr	r7, [r4, #0]
 800ab0e:	2c00      	cmp	r4, #0
 800ab10:	d052      	beq.n	800abb8 <obj_del_core.part.0+0x148>
    else return obj->spec_attr->children[id];
 800ab12:	0038      	movs	r0, r7
    return obj->spec_attr->child_cnt;
 800ab14:	000e      	movs	r6, r1
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800ab16:	2300      	movs	r3, #0
 800ab18:	e007      	b.n	800ab2a <obj_del_core.part.0+0xba>
    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800ab1a:	428a      	cmp	r2, r1
 800ab1c:	d203      	bcs.n	800ab26 <obj_del_core.part.0+0xb6>
    else return obj->spec_attr->children[id];
 800ab1e:	0092      	lsls	r2, r2, #2
        if(lv_obj_get_child(parent, i) == obj) return i;
 800ab20:	58ba      	ldr	r2, [r7, r2]
 800ab22:	4295      	cmp	r5, r2
 800ab24:	d050      	beq.n	800abc8 <obj_del_core.part.0+0x158>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800ab26:	3301      	adds	r3, #1
    if(obj->spec_attr == NULL) return 0;
 800ab28:	3601      	adds	r6, #1
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800ab2a:	4299      	cmp	r1, r3
 800ab2c:	d044      	beq.n	800abb8 <obj_del_core.part.0+0x148>
    if(id < 0) {
 800ab2e:	1e1a      	subs	r2, r3, #0
 800ab30:	daf3      	bge.n	800ab1a <obj_del_core.part.0+0xaa>
        if(id < 0) return NULL;
 800ab32:	2e00      	cmp	r6, #0
 800ab34:	dbf7      	blt.n	800ab26 <obj_del_core.part.0+0xb6>
 800ab36:	0032      	movs	r2, r6
 800ab38:	e7ef      	b.n	800ab1a <obj_del_core.part.0+0xaa>
            lv_indev_reset(indev, obj);
 800ab3a:	0029      	movs	r1, r5
 800ab3c:	0020      	movs	r0, r4
 800ab3e:	f7f7 fe39 	bl	80027b4 <lv_indev_reset>
 800ab42:	e7c7      	b.n	800aad4 <obj_del_core.part.0+0x64>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800ab44:	4f30      	ldr	r7, [pc, #192]	; (800ac08 <obj_del_core.part.0+0x198>)
 800ab46:	0038      	movs	r0, r7
 800ab48:	f007 f980 	bl	8011e4c <_lv_ll_get_head>
 800ab4c:	1e06      	subs	r6, r0, #0
 800ab4e:	d030      	beq.n	800abb2 <obj_del_core.part.0+0x142>
        for(i = 0; i < d->screen_cnt; i++) {
 800ab50:	6a71      	ldr	r1, [r6, #36]	; 0x24
 800ab52:	2900      	cmp	r1, #0
 800ab54:	d027      	beq.n	800aba6 <obj_del_core.part.0+0x136>
 800ab56:	2300      	movs	r3, #0
            if(d->screens[i] == scr) return d;
 800ab58:	68f4      	ldr	r4, [r6, #12]
 800ab5a:	e002      	b.n	800ab62 <obj_del_core.part.0+0xf2>
        for(i = 0; i < d->screen_cnt; i++) {
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	428b      	cmp	r3, r1
 800ab60:	d021      	beq.n	800aba6 <obj_del_core.part.0+0x136>
            if(d->screens[i] == scr) return d;
 800ab62:	009a      	lsls	r2, r3, #2
 800ab64:	58a2      	ldr	r2, [r4, r2]
 800ab66:	4295      	cmp	r5, r2
 800ab68:	d1f8      	bne.n	800ab5c <obj_del_core.part.0+0xec>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	e002      	b.n	800ab74 <obj_del_core.part.0+0x104>
        lv_disp_t * disp = lv_obj_get_disp(obj);
        uint32_t i;
        /*Find the screen in the list*/
        for(i = 0; i < disp->screen_cnt; i++) {
 800ab6e:	3301      	adds	r3, #1
 800ab70:	428b      	cmp	r3, r1
 800ab72:	d203      	bcs.n	800ab7c <obj_del_core.part.0+0x10c>
            if(disp->screens[i] == obj) break;
 800ab74:	009a      	lsls	r2, r3, #2
 800ab76:	58a2      	ldr	r2, [r4, r2]
 800ab78:	4295      	cmp	r5, r2
 800ab7a:	d1f8      	bne.n	800ab6e <obj_del_core.part.0+0xfe>
        }

        uint32_t id = i;
        for(i = id; i < disp->screen_cnt - 1; i++) {
 800ab7c:	1e4f      	subs	r7, r1, #1
 800ab7e:	42bb      	cmp	r3, r7
 800ab80:	d207      	bcs.n	800ab92 <obj_del_core.part.0+0x122>
 800ab82:	0098      	lsls	r0, r3, #2
            disp->screens[i] = disp->screens[i + 1];
 800ab84:	1d01      	adds	r1, r0, #4
 800ab86:	1afb      	subs	r3, r7, r3
 800ab88:	009a      	lsls	r2, r3, #2
 800ab8a:	1861      	adds	r1, r4, r1
 800ab8c:	1820      	adds	r0, r4, r0
 800ab8e:	f010 fd42 	bl	801b616 <memmove>
        }
        disp->screen_cnt--;
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 800ab92:	0020      	movs	r0, r4
        disp->screen_cnt--;
 800ab94:	6277      	str	r7, [r6, #36]	; 0x24
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 800ab96:	00b9      	lsls	r1, r7, #2
 800ab98:	f007 fa46 	bl	8012028 <lv_mem_realloc>
 800ab9c:	60f0      	str	r0, [r6, #12]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
                                                          obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
    }

    /*Free the object itself*/
    lv_mem_free(obj);
 800ab9e:	0028      	movs	r0, r5
 800aba0:	f007 fa26 	bl	8011ff0 <lv_mem_free>
}
 800aba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800aba6:	0031      	movs	r1, r6
 800aba8:	0038      	movs	r0, r7
 800abaa:	f007 f95b 	bl	8011e64 <_lv_ll_get_next>
 800abae:	1e06      	subs	r6, r0, #0
 800abb0:	d1ce      	bne.n	800ab50 <obj_del_core.part.0+0xe0>
        for(i = 0; i < disp->screen_cnt; i++) {
 800abb2:	2300      	movs	r3, #0
 800abb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb6:	deff      	udf	#255	; 0xff
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800abb8:	0038      	movs	r0, r7
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800abba:	3901      	subs	r1, #1
        obj->parent->spec_attr->child_cnt--;
 800abbc:	6061      	str	r1, [r4, #4]
                                                          obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
 800abbe:	0089      	lsls	r1, r1, #2
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800abc0:	f007 fa32 	bl	8012028 <lv_mem_realloc>
 800abc4:	6020      	str	r0, [r4, #0]
 800abc6:	e7ea      	b.n	800ab9e <obj_del_core.part.0+0x12e>
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800abc8:	3901      	subs	r1, #1
 800abca:	4299      	cmp	r1, r3
 800abcc:	d9f6      	bls.n	800abbc <obj_del_core.part.0+0x14c>
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 800abce:	1c58      	adds	r0, r3, #1
 800abd0:	0082      	lsls	r2, r0, #2
 800abd2:	58b9      	ldr	r1, [r7, r2]
 800abd4:	18ba      	adds	r2, r7, r2
 800abd6:	3a04      	subs	r2, #4
 800abd8:	6011      	str	r1, [r2, #0]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800abda:	686a      	ldr	r2, [r5, #4]
 800abdc:	3302      	adds	r3, #2
 800abde:	6894      	ldr	r4, [r2, #8]
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	6862      	ldr	r2, [r4, #4]
 800abe4:	1e51      	subs	r1, r2, #1
 800abe6:	4288      	cmp	r0, r1
 800abe8:	d20c      	bcs.n	800ac04 <obj_del_core.part.0+0x194>
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 800abea:	6822      	ldr	r2, [r4, #0]
 800abec:	3001      	adds	r0, #1
 800abee:	58d1      	ldr	r1, [r2, r3]
 800abf0:	18d2      	adds	r2, r2, r3
 800abf2:	3a04      	subs	r2, #4
 800abf4:	6011      	str	r1, [r2, #0]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800abf6:	686a      	ldr	r2, [r5, #4]
 800abf8:	3304      	adds	r3, #4
 800abfa:	6894      	ldr	r4, [r2, #8]
 800abfc:	6862      	ldr	r2, [r4, #4]
 800abfe:	1e51      	subs	r1, r2, #1
 800ac00:	4288      	cmp	r0, r1
 800ac02:	d3f2      	bcc.n	800abea <obj_del_core.part.0+0x17a>
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800ac04:	6820      	ldr	r0, [r4, #0]
 800ac06:	e7d9      	b.n	800abbc <obj_del_core.part.0+0x14c>
 800ac08:	20003368 	.word	0x20003368

0800ac0c <lv_obj_del>:
{
 800ac0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0e:	0004      	movs	r4, r0
    lv_obj_invalidate(obj);
 800ac10:	f7fb fc96 	bl	8006540 <lv_obj_invalidate>
    if(obj == NULL) return NULL;
 800ac14:	2c00      	cmp	r4, #0
 800ac16:	d04f      	beq.n	800acb8 <lv_obj_del+0xac>
    return obj->parent;
 800ac18:	6865      	ldr	r5, [r4, #4]
    if(par) {
 800ac1a:	2d00      	cmp	r5, #0
 800ac1c:	d021      	beq.n	800ac62 <lv_obj_del+0x56>
        lv_obj_scrollbar_invalidate(par);
 800ac1e:	0028      	movs	r0, r5
 800ac20:	f7fe f9ec 	bl	8008ffc <lv_obj_scrollbar_invalidate>
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800ac24:	2200      	movs	r2, #0
 800ac26:	2121      	movs	r1, #33	; 0x21
 800ac28:	0020      	movs	r0, r4
 800ac2a:	f7f7 f897 	bl	8001d5c <lv_event_send>
    if(res == LV_RES_INV) return;
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d002      	beq.n	800ac38 <lv_obj_del+0x2c>
 800ac32:	0020      	movs	r0, r4
 800ac34:	f7ff ff1c 	bl	800aa70 <obj_del_core.part.0>
        lv_obj_update_layout(par);
 800ac38:	0028      	movs	r0, r5
 800ac3a:	f7fc fe41 	bl	80078c0 <lv_obj_update_layout>
        lv_obj_readjust_scroll(par, LV_ANIM_OFF);
 800ac3e:	2100      	movs	r1, #0
 800ac40:	0028      	movs	r0, r5
 800ac42:	f7fe fa1d 	bl	8009080 <lv_obj_readjust_scroll>
        lv_obj_scrollbar_invalidate(par);
 800ac46:	0028      	movs	r0, r5
 800ac48:	f7fe f9d8 	bl	8008ffc <lv_obj_scrollbar_invalidate>
        lv_event_send(par, LV_EVENT_CHILD_CHANGED, NULL);
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	2122      	movs	r1, #34	; 0x22
 800ac50:	0028      	movs	r0, r5
 800ac52:	f7f7 f883 	bl	8001d5c <lv_event_send>
        lv_event_send(par, LV_EVENT_CHILD_DELETED, NULL);
 800ac56:	2200      	movs	r2, #0
 800ac58:	2124      	movs	r1, #36	; 0x24
 800ac5a:	0028      	movs	r0, r5
 800ac5c:	f7f7 f87e 	bl	8001d5c <lv_event_send>
}
 800ac60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac62:	0025      	movs	r5, r4
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800ac64:	4f19      	ldr	r7, [pc, #100]	; (800accc <lv_obj_del+0xc0>)
 800ac66:	0038      	movs	r0, r7
 800ac68:	f007 f8f0 	bl	8011e4c <_lv_ll_get_head>
 800ac6c:	1e06      	subs	r6, r0, #0
 800ac6e:	d0f7      	beq.n	800ac60 <lv_obj_del+0x54>
        for(i = 0; i < d->screen_cnt; i++) {
 800ac70:	6a71      	ldr	r1, [r6, #36]	; 0x24
 800ac72:	2900      	cmp	r1, #0
 800ac74:	d019      	beq.n	800acaa <lv_obj_del+0x9e>
 800ac76:	2300      	movs	r3, #0
            if(d->screens[i] == scr) return d;
 800ac78:	68f0      	ldr	r0, [r6, #12]
 800ac7a:	e002      	b.n	800ac82 <lv_obj_del+0x76>
        for(i = 0; i < d->screen_cnt; i++) {
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	428b      	cmp	r3, r1
 800ac80:	d013      	beq.n	800acaa <lv_obj_del+0x9e>
            if(d->screens[i] == scr) return d;
 800ac82:	009a      	lsls	r2, r3, #2
 800ac84:	5882      	ldr	r2, [r0, r2]
 800ac86:	42aa      	cmp	r2, r5
 800ac88:	d1f8      	bne.n	800ac7c <lv_obj_del+0x70>
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2121      	movs	r1, #33	; 0x21
 800ac8e:	0020      	movs	r0, r4
        if(disp->act_scr == obj) act_scr_del = true;
 800ac90:	6935      	ldr	r5, [r6, #16]
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800ac92:	f7f7 f863 	bl	8001d5c <lv_event_send>
    if(res == LV_RES_INV) return;
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d002      	beq.n	800aca0 <lv_obj_del+0x94>
 800ac9a:	0020      	movs	r0, r4
 800ac9c:	f7ff fee8 	bl	800aa70 <obj_del_core.part.0>
    if(act_scr_del) {
 800aca0:	42a5      	cmp	r5, r4
 800aca2:	d1dd      	bne.n	800ac60 <lv_obj_del+0x54>
        disp->act_scr = NULL;
 800aca4:	2300      	movs	r3, #0
 800aca6:	6133      	str	r3, [r6, #16]
    LV_LOG_TRACE("finished (delete %p)", (void *)obj);
 800aca8:	e7da      	b.n	800ac60 <lv_obj_del+0x54>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800acaa:	0031      	movs	r1, r6
 800acac:	0038      	movs	r0, r7
 800acae:	f007 f8d9 	bl	8011e64 <_lv_ll_get_next>
 800acb2:	1e06      	subs	r6, r0, #0
 800acb4:	d1dc      	bne.n	800ac70 <lv_obj_del+0x64>
 800acb6:	e7d3      	b.n	800ac60 <lv_obj_del+0x54>
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 800acb8:	6863      	ldr	r3, [r4, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d004      	beq.n	800acc8 <lv_obj_del+0xbc>
 800acbe:	001d      	movs	r5, r3
    return obj->parent;
 800acc0:	685b      	ldr	r3, [r3, #4]
    } while(par != NULL);
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1fb      	bne.n	800acbe <lv_obj_del+0xb2>
 800acc6:	e7cd      	b.n	800ac64 <lv_obj_del+0x58>
 800acc8:	2500      	movs	r5, #0
 800acca:	e7cb      	b.n	800ac64 <lv_obj_del+0x58>
 800accc:	20003368 	.word	0x20003368

0800acd0 <lv_obj_set_parent>:
{
 800acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd2:	46ce      	mov	lr, r9
 800acd4:	4647      	mov	r7, r8
    if(obj->parent == NULL) {
 800acd6:	6843      	ldr	r3, [r0, #4]
{
 800acd8:	0004      	movs	r4, r0
 800acda:	000d      	movs	r5, r1
 800acdc:	b580      	push	{r7, lr}
    if(obj->parent == NULL) {
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d076      	beq.n	800add0 <lv_obj_set_parent+0x100>
    if(parent == NULL) {
 800ace2:	2900      	cmp	r1, #0
 800ace4:	d074      	beq.n	800add0 <lv_obj_set_parent+0x100>
    lv_obj_invalidate(obj);
 800ace6:	f7fb fc2b 	bl	8006540 <lv_obj_invalidate>
    lv_obj_allocate_spec_attr(parent);
 800acea:	0028      	movs	r0, r5
 800acec:	f7fa f9c4 	bl	8005078 <lv_obj_allocate_spec_attr>
    lv_obj_t * old_parent = obj->parent;
 800acf0:	6867      	ldr	r7, [r4, #4]
    if(obj->spec_attr == NULL) return 0;
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	4698      	mov	r8, r3
    if(parent == NULL) return 0;
 800acf6:	2f00      	cmp	r7, #0
 800acf8:	d018      	beq.n	800ad2c <lv_obj_set_parent+0x5c>
    if(obj->spec_attr == NULL) return 0;
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d100      	bne.n	800ad00 <lv_obj_set_parent+0x30>
 800acfe:	e072      	b.n	800ade6 <lv_obj_set_parent+0x116>
    return obj->spec_attr->child_cnt;
 800ad00:	6858      	ldr	r0, [r3, #4]
    else return obj->spec_attr->children[id];
 800ad02:	681e      	ldr	r6, [r3, #0]
    return obj->spec_attr->child_cnt;
 800ad04:	0001      	movs	r1, r0
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800ad06:	2300      	movs	r3, #0
 800ad08:	e007      	b.n	800ad1a <lv_obj_set_parent+0x4a>
    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800ad0a:	4282      	cmp	r2, r0
 800ad0c:	d203      	bcs.n	800ad16 <lv_obj_set_parent+0x46>
    else return obj->spec_attr->children[id];
 800ad0e:	0092      	lsls	r2, r2, #2
        if(lv_obj_get_child(parent, i) == obj) return i;
 800ad10:	5992      	ldr	r2, [r2, r6]
 800ad12:	4294      	cmp	r4, r2
 800ad14:	d00e      	beq.n	800ad34 <lv_obj_set_parent+0x64>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800ad16:	3301      	adds	r3, #1
    if(obj->spec_attr == NULL) return 0;
 800ad18:	3101      	adds	r1, #1
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800ad1a:	4298      	cmp	r0, r3
 800ad1c:	d068      	beq.n	800adf0 <lv_obj_set_parent+0x120>
        if(lv_obj_get_child(parent, i) == obj) return i;
 800ad1e:	469c      	mov	ip, r3
    if(id < 0) {
 800ad20:	1e1a      	subs	r2, r3, #0
 800ad22:	daf2      	bge.n	800ad0a <lv_obj_set_parent+0x3a>
        if(id < 0) return NULL;
 800ad24:	2900      	cmp	r1, #0
 800ad26:	dbf6      	blt.n	800ad16 <lv_obj_set_parent+0x46>
 800ad28:	000a      	movs	r2, r1
 800ad2a:	e7ee      	b.n	800ad0a <lv_obj_set_parent+0x3a>
    else return obj->spec_attr->children[id];
 800ad2c:	681e      	ldr	r6, [r3, #0]
    return obj->spec_attr->child_cnt;
 800ad2e:	6858      	ldr	r0, [r3, #4]
 800ad30:	2300      	movs	r3, #0
 800ad32:	469c      	mov	ip, r3
        old_parent->spec_attr->children[i] = old_parent->spec_attr->children[i + 1];
 800ad34:	1e43      	subs	r3, r0, #1
 800ad36:	4699      	mov	r9, r3
 800ad38:	4663      	mov	r3, ip
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	0098      	lsls	r0, r3, #2
 800ad3e:	45cc      	cmp	ip, r9
 800ad40:	dc03      	bgt.n	800ad4a <lv_obj_set_parent+0x7a>
 800ad42:	464b      	mov	r3, r9
 800ad44:	4662      	mov	r2, ip
 800ad46:	1a9a      	subs	r2, r3, r2
 800ad48:	0092      	lsls	r2, r2, #2
 800ad4a:	1d01      	adds	r1, r0, #4
 800ad4c:	1871      	adds	r1, r6, r1
 800ad4e:	1830      	adds	r0, r6, r0
 800ad50:	f010 fc61 	bl	801b616 <memmove>
    old_parent->spec_attr->child_cnt--;
 800ad54:	4643      	mov	r3, r8
 800ad56:	464a      	mov	r2, r9
 800ad58:	605a      	str	r2, [r3, #4]
    if(old_parent->spec_attr->child_cnt) {
 800ad5a:	2a00      	cmp	r2, #0
 800ad5c:	d03c      	beq.n	800add8 <lv_obj_set_parent+0x108>
        old_parent->spec_attr->children = lv_mem_realloc(old_parent->spec_attr->children,
 800ad5e:	0030      	movs	r0, r6
                                                         old_parent->spec_attr->child_cnt * (sizeof(lv_obj_t *)));
 800ad60:	0091      	lsls	r1, r2, #2
        old_parent->spec_attr->children = lv_mem_realloc(old_parent->spec_attr->children,
 800ad62:	f007 f961 	bl	8012028 <lv_mem_realloc>
 800ad66:	4643      	mov	r3, r8
 800ad68:	6018      	str	r0, [r3, #0]
    parent->spec_attr->child_cnt++;
 800ad6a:	68ae      	ldr	r6, [r5, #8]
 800ad6c:	6873      	ldr	r3, [r6, #4]
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800ad6e:	6830      	ldr	r0, [r6, #0]
    parent->spec_attr->child_cnt++;
 800ad70:	1c59      	adds	r1, r3, #1
 800ad72:	6071      	str	r1, [r6, #4]
                                                 parent->spec_attr->child_cnt * (sizeof(lv_obj_t *)));
 800ad74:	0089      	lsls	r1, r1, #2
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800ad76:	f007 f957 	bl	8012028 <lv_mem_realloc>
    parent->spec_attr->children[lv_obj_get_child_cnt(parent) - 1] = obj;
 800ad7a:	491f      	ldr	r1, [pc, #124]	; (800adf8 <lv_obj_set_parent+0x128>)
 800ad7c:	68aa      	ldr	r2, [r5, #8]
 800ad7e:	468c      	mov	ip, r1
 800ad80:	6853      	ldr	r3, [r2, #4]
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800ad82:	6030      	str	r0, [r6, #0]
    parent->spec_attr->children[lv_obj_get_child_cnt(parent) - 1] = obj;
 800ad84:	4463      	add	r3, ip
 800ad86:	6812      	ldr	r2, [r2, #0]
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	509c      	str	r4, [r3, r2]
    lv_obj_readjust_scroll(old_parent, LV_ANIM_OFF);
 800ad8c:	2100      	movs	r1, #0
 800ad8e:	0038      	movs	r0, r7
    obj->parent = parent;
 800ad90:	6065      	str	r5, [r4, #4]
    lv_obj_readjust_scroll(old_parent, LV_ANIM_OFF);
 800ad92:	f7fe f975 	bl	8009080 <lv_obj_readjust_scroll>
    lv_obj_scrollbar_invalidate(old_parent);
 800ad96:	0038      	movs	r0, r7
 800ad98:	f7fe f930 	bl	8008ffc <lv_obj_scrollbar_invalidate>
    lv_event_send(old_parent, LV_EVENT_CHILD_CHANGED, obj);
 800ad9c:	0022      	movs	r2, r4
 800ad9e:	2122      	movs	r1, #34	; 0x22
 800ada0:	0038      	movs	r0, r7
 800ada2:	f7f6 ffdb 	bl	8001d5c <lv_event_send>
    lv_event_send(old_parent, LV_EVENT_CHILD_DELETED, NULL);
 800ada6:	2200      	movs	r2, #0
 800ada8:	2124      	movs	r1, #36	; 0x24
 800adaa:	0038      	movs	r0, r7
 800adac:	f7f6 ffd6 	bl	8001d5c <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 800adb0:	0022      	movs	r2, r4
 800adb2:	2122      	movs	r1, #34	; 0x22
 800adb4:	0028      	movs	r0, r5
 800adb6:	f7f6 ffd1 	bl	8001d5c <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CREATED, NULL);
 800adba:	2200      	movs	r2, #0
 800adbc:	2123      	movs	r1, #35	; 0x23
 800adbe:	0028      	movs	r0, r5
 800adc0:	f7f6 ffcc 	bl	8001d5c <lv_event_send>
    lv_obj_mark_layout_as_dirty(obj);
 800adc4:	0020      	movs	r0, r4
 800adc6:	f7fa ff69 	bl	8005c9c <lv_obj_mark_layout_as_dirty>
    lv_obj_invalidate(obj);
 800adca:	0020      	movs	r0, r4
 800adcc:	f7fb fbb8 	bl	8006540 <lv_obj_invalidate>
}
 800add0:	bcc0      	pop	{r6, r7}
 800add2:	46b9      	mov	r9, r7
 800add4:	46b0      	mov	r8, r6
 800add6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_mem_free(old_parent->spec_attr->children);
 800add8:	0030      	movs	r0, r6
 800adda:	f007 f909 	bl	8011ff0 <lv_mem_free>
        old_parent->spec_attr->children = NULL;
 800adde:	464a      	mov	r2, r9
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	e7c1      	b.n	800ad6a <lv_obj_set_parent+0x9a>
    return obj->spec_attr->child_cnt;
 800ade6:	6858      	ldr	r0, [r3, #4]
    else return obj->spec_attr->children[id];
 800ade8:	681e      	ldr	r6, [r3, #0]
 800adea:	1e43      	subs	r3, r0, #1
 800adec:	4699      	mov	r9, r3
 800adee:	e7b1      	b.n	800ad54 <lv_obj_set_parent+0x84>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800adf0:	2301      	movs	r3, #1
 800adf2:	425b      	negs	r3, r3
 800adf4:	469c      	mov	ip, r3
 800adf6:	e79d      	b.n	800ad34 <lv_obj_set_parent+0x64>
 800adf8:	3fffffff 	.word	0x3fffffff

0800adfc <lv_obj_move_to_index>:
{
 800adfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adfe:	46c6      	mov	lr, r8
 800ae00:	0006      	movs	r6, r0
 800ae02:	000f      	movs	r7, r1
 800ae04:	b500      	push	{lr}
    if(index < 0) {
 800ae06:	2900      	cmp	r1, #0
 800ae08:	db48      	blt.n	800ae9c <lv_obj_move_to_index+0xa0>
    if(obj == NULL) return NULL;
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d061      	beq.n	800aed2 <lv_obj_move_to_index+0xd6>
 800ae0e:	6843      	ldr	r3, [r0, #4]
    return obj->parent;
 800ae10:	4698      	mov	r8, r3
    if(parent == NULL) return 0;
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d04d      	beq.n	800aeb2 <lv_obj_move_to_index+0xb6>
    if(obj->spec_attr == NULL) return 0;
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	469c      	mov	ip, r3
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d056      	beq.n	800aecc <lv_obj_move_to_index+0xd0>
    return obj->spec_attr->child_cnt;
 800ae1e:	6859      	ldr	r1, [r3, #4]
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800ae20:	2300      	movs	r3, #0
    return obj->spec_attr->child_cnt;
 800ae22:	000a      	movs	r2, r1
 800ae24:	e007      	b.n	800ae36 <lv_obj_move_to_index+0x3a>
        if(lv_obj_get_child(parent, i) == obj) return i;
 800ae26:	4660      	mov	r0, ip
 800ae28:	6800      	ldr	r0, [r0, #0]
    else return obj->spec_attr->children[id];
 800ae2a:	00a4      	lsls	r4, r4, #2
        if(lv_obj_get_child(parent, i) == obj) return i;
 800ae2c:	5820      	ldr	r0, [r4, r0]
 800ae2e:	4286      	cmp	r6, r0
 800ae30:	d011      	beq.n	800ae56 <lv_obj_move_to_index+0x5a>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800ae32:	3301      	adds	r3, #1
    if(obj->spec_attr == NULL) return 0;
 800ae34:	3201      	adds	r2, #1
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800ae36:	428b      	cmp	r3, r1
 800ae38:	d048      	beq.n	800aecc <lv_obj_move_to_index+0xd0>
        if(lv_obj_get_child(parent, i) == obj) return i;
 800ae3a:	001d      	movs	r5, r3
    if(id < 0) {
 800ae3c:	1e1c      	subs	r4, r3, #0
 800ae3e:	daf2      	bge.n	800ae26 <lv_obj_move_to_index+0x2a>
        if(id < 0) return NULL;
 800ae40:	2a00      	cmp	r2, #0
 800ae42:	dbf6      	blt.n	800ae32 <lv_obj_move_to_index+0x36>
    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800ae44:	4291      	cmp	r1, r2
 800ae46:	d9f4      	bls.n	800ae32 <lv_obj_move_to_index+0x36>
        if(lv_obj_get_child(parent, i) == obj) return i;
 800ae48:	4660      	mov	r0, ip
 800ae4a:	0014      	movs	r4, r2
 800ae4c:	6800      	ldr	r0, [r0, #0]
    else return obj->spec_attr->children[id];
 800ae4e:	00a4      	lsls	r4, r4, #2
        if(lv_obj_get_child(parent, i) == obj) return i;
 800ae50:	5820      	ldr	r0, [r4, r0]
 800ae52:	4286      	cmp	r6, r0
 800ae54:	d1ed      	bne.n	800ae32 <lv_obj_move_to_index+0x36>
    if(index < 0) return;
 800ae56:	2f00      	cmp	r7, #0
 800ae58:	db1d      	blt.n	800ae96 <lv_obj_move_to_index+0x9a>
    if(obj->spec_attr == NULL) return 0;
 800ae5a:	4643      	mov	r3, r8
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d019      	beq.n	800ae96 <lv_obj_move_to_index+0x9a>
    if(index >= (int32_t) lv_obj_get_child_cnt(parent)) return;
 800ae62:	685a      	ldr	r2, [r3, #4]
 800ae64:	42ba      	cmp	r2, r7
 800ae66:	dd16      	ble.n	800ae96 <lv_obj_move_to_index+0x9a>
    if(index == old_index) return;
 800ae68:	42bd      	cmp	r5, r7
 800ae6a:	d014      	beq.n	800ae96 <lv_obj_move_to_index+0x9a>
    if(index < old_index) {
 800ae6c:	dc23      	bgt.n	800aeb6 <lv_obj_move_to_index+0xba>
        while(i < index) {
 800ae6e:	da37      	bge.n	800aee0 <lv_obj_move_to_index+0xe4>
            parent->spec_attr->children[i] = parent->spec_attr->children[i + 1];
 800ae70:	681c      	ldr	r4, [r3, #0]
 800ae72:	00a8      	lsls	r0, r5, #2
 800ae74:	1d01      	adds	r1, r0, #4
 800ae76:	1b7a      	subs	r2, r7, r5
 800ae78:	0092      	lsls	r2, r2, #2
 800ae7a:	1861      	adds	r1, r4, r1
 800ae7c:	1820      	adds	r0, r4, r0
 800ae7e:	f010 fbca 	bl	801b616 <memmove>
    parent->spec_attr->children[index] = obj;
 800ae82:	00bf      	lsls	r7, r7, #2
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, NULL);
 800ae84:	2200      	movs	r2, #0
 800ae86:	2122      	movs	r1, #34	; 0x22
 800ae88:	4640      	mov	r0, r8
    parent->spec_attr->children[index] = obj;
 800ae8a:	513e      	str	r6, [r7, r4]
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, NULL);
 800ae8c:	f7f6 ff66 	bl	8001d5c <lv_event_send>
    lv_obj_invalidate(parent);
 800ae90:	4640      	mov	r0, r8
 800ae92:	f7fb fb55 	bl	8006540 <lv_obj_invalidate>
}
 800ae96:	bc80      	pop	{r7}
 800ae98:	46b8      	mov	r8, r7
 800ae9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(obj == NULL) return NULL;
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d021      	beq.n	800aee4 <lv_obj_move_to_index+0xe8>
    if(obj->spec_attr == NULL) return 0;
 800aea0:	6843      	ldr	r3, [r0, #4]
 800aea2:	689a      	ldr	r2, [r3, #8]
 800aea4:	2a00      	cmp	r2, #0
 800aea6:	d018      	beq.n	800aeda <lv_obj_move_to_index+0xde>
    return obj->spec_attr->child_cnt;
 800aea8:	6852      	ldr	r2, [r2, #4]
        index = lv_obj_get_child_cnt(lv_obj_get_parent(obj)) + index;
 800aeaa:	18bf      	adds	r7, r7, r2
    return obj->parent;
 800aeac:	4698      	mov	r8, r3
    if(parent == NULL) return 0;
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1b1      	bne.n	800ae16 <lv_obj_move_to_index+0x1a>
 800aeb2:	2500      	movs	r5, #0
 800aeb4:	e7cf      	b.n	800ae56 <lv_obj_move_to_index+0x5a>
            parent->spec_attr->children[i] = parent->spec_attr->children[i - 1];
 800aeb6:	1c78      	adds	r0, r7, #1
 800aeb8:	681c      	ldr	r4, [r3, #0]
 800aeba:	0080      	lsls	r0, r0, #2
 800aebc:	1bea      	subs	r2, r5, r7
 800aebe:	1f01      	subs	r1, r0, #4
 800aec0:	0092      	lsls	r2, r2, #2
 800aec2:	1861      	adds	r1, r4, r1
 800aec4:	1820      	adds	r0, r4, r0
 800aec6:	f010 fba6 	bl	801b616 <memmove>
 800aeca:	e7da      	b.n	800ae82 <lv_obj_move_to_index+0x86>
    if(obj->spec_attr == NULL) return 0;
 800aecc:	2501      	movs	r5, #1
 800aece:	426d      	negs	r5, r5
 800aed0:	e7c1      	b.n	800ae56 <lv_obj_move_to_index+0x5a>
    if(obj == NULL) return NULL;
 800aed2:	2300      	movs	r3, #0
    const int32_t old_index = lv_obj_get_index(obj);
 800aed4:	2500      	movs	r5, #0
    if(obj == NULL) return NULL;
 800aed6:	4698      	mov	r8, r3
 800aed8:	e7bf      	b.n	800ae5a <lv_obj_move_to_index+0x5e>
    if(obj->spec_attr == NULL) return 0;
 800aeda:	2200      	movs	r2, #0
        index = lv_obj_get_child_cnt(lv_obj_get_parent(obj)) + index;
 800aedc:	18bf      	adds	r7, r7, r2
    if(obj == NULL) return NULL;
 800aede:	e7e5      	b.n	800aeac <lv_obj_move_to_index+0xb0>
            parent->spec_attr->children[i] = parent->spec_attr->children[i + 1];
 800aee0:	681c      	ldr	r4, [r3, #0]
 800aee2:	e7ce      	b.n	800ae82 <lv_obj_move_to_index+0x86>
    if(obj->spec_attr == NULL) return 0;
 800aee4:	6883      	ldr	r3, [r0, #8]
 800aee6:	deff      	udf	#255	; 0xff

0800aee8 <lv_obj_get_screen>:
    const lv_obj_t * par = obj;
 800aee8:	e003      	b.n	800aef2 <lv_obj_get_screen+0xa>
    return obj->parent;
 800aeea:	6843      	ldr	r3, [r0, #4]
    } while(par != NULL);
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d002      	beq.n	800aef6 <lv_obj_get_screen+0xe>
 800aef0:	0018      	movs	r0, r3
    if(obj == NULL) return NULL;
 800aef2:	2800      	cmp	r0, #0
 800aef4:	d1f9      	bne.n	800aeea <lv_obj_get_screen+0x2>
}
 800aef6:	4770      	bx	lr

0800aef8 <lv_obj_get_disp>:
{
 800aef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 800aefa:	6843      	ldr	r3, [r0, #4]
{
 800aefc:	0004      	movs	r4, r0
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d003      	beq.n	800af0a <lv_obj_get_disp+0x12>
 800af02:	001c      	movs	r4, r3
    return obj->parent;
 800af04:	685b      	ldr	r3, [r3, #4]
    } while(par != NULL);
 800af06:	2b00      	cmp	r3, #0
 800af08:	d1fb      	bne.n	800af02 <lv_obj_get_disp+0xa>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800af0a:	4f0e      	ldr	r7, [pc, #56]	; (800af44 <lv_obj_get_disp+0x4c>)
 800af0c:	0038      	movs	r0, r7
 800af0e:	f006 ff9d 	bl	8011e4c <_lv_ll_get_head>
 800af12:	2800      	cmp	r0, #0
 800af14:	d013      	beq.n	800af3e <lv_obj_get_disp+0x46>
        for(i = 0; i < d->screen_cnt; i++) {
 800af16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af18:	2d00      	cmp	r5, #0
 800af1a:	d00a      	beq.n	800af32 <lv_obj_get_disp+0x3a>
 800af1c:	2300      	movs	r3, #0
            if(d->screens[i] == scr) return d;
 800af1e:	68c6      	ldr	r6, [r0, #12]
 800af20:	e002      	b.n	800af28 <lv_obj_get_disp+0x30>
        for(i = 0; i < d->screen_cnt; i++) {
 800af22:	3301      	adds	r3, #1
 800af24:	42ab      	cmp	r3, r5
 800af26:	d004      	beq.n	800af32 <lv_obj_get_disp+0x3a>
            if(d->screens[i] == scr) return d;
 800af28:	009a      	lsls	r2, r3, #2
 800af2a:	58b2      	ldr	r2, [r6, r2]
 800af2c:	42a2      	cmp	r2, r4
 800af2e:	d1f8      	bne.n	800af22 <lv_obj_get_disp+0x2a>
}
 800af30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800af32:	0001      	movs	r1, r0
 800af34:	0038      	movs	r0, r7
 800af36:	f006 ff95 	bl	8011e64 <_lv_ll_get_next>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d1eb      	bne.n	800af16 <lv_obj_get_disp+0x1e>
    return NULL;
 800af3e:	2000      	movs	r0, #0
 800af40:	e7f6      	b.n	800af30 <lv_obj_get_disp+0x38>
 800af42:	46c0      	nop			; (mov r8, r8)
 800af44:	20003368 	.word	0x20003368

0800af48 <lv_obj_get_parent>:
    if(obj == NULL) return NULL;
 800af48:	2800      	cmp	r0, #0
 800af4a:	d001      	beq.n	800af50 <lv_obj_get_parent+0x8>
    return obj->parent;
 800af4c:	6840      	ldr	r0, [r0, #4]
}
 800af4e:	4770      	bx	lr
    if(obj == NULL) return NULL;
 800af50:	2000      	movs	r0, #0
 800af52:	e7fc      	b.n	800af4e <lv_obj_get_parent+0x6>

0800af54 <lv_obj_get_child>:
    if(obj->spec_attr == NULL) return NULL;
 800af54:	6880      	ldr	r0, [r0, #8]
 800af56:	2800      	cmp	r0, #0
 800af58:	d007      	beq.n	800af6a <lv_obj_get_child+0x16>
        id = obj->spec_attr->child_cnt + id;
 800af5a:	6843      	ldr	r3, [r0, #4]
    if(id < 0) {
 800af5c:	2900      	cmp	r1, #0
 800af5e:	db05      	blt.n	800af6c <lv_obj_get_child+0x18>
    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800af60:	4299      	cmp	r1, r3
 800af62:	d205      	bcs.n	800af70 <lv_obj_get_child+0x1c>
    else return obj->spec_attr->children[id];
 800af64:	6803      	ldr	r3, [r0, #0]
 800af66:	0089      	lsls	r1, r1, #2
 800af68:	58c8      	ldr	r0, [r1, r3]
}
 800af6a:	4770      	bx	lr
        if(id < 0) return NULL;
 800af6c:	18c9      	adds	r1, r1, r3
 800af6e:	d5f7      	bpl.n	800af60 <lv_obj_get_child+0xc>
    if(obj->spec_attr == NULL) return NULL;
 800af70:	2000      	movs	r0, #0
 800af72:	e7fa      	b.n	800af6a <lv_obj_get_child+0x16>

0800af74 <lv_obj_get_child_cnt>:
    if(obj->spec_attr == NULL) return 0;
 800af74:	6883      	ldr	r3, [r0, #8]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <lv_obj_get_child_cnt+0xa>
    return obj->spec_attr->child_cnt;
 800af7a:	6858      	ldr	r0, [r3, #4]
}
 800af7c:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 800af7e:	2000      	movs	r0, #0
 800af80:	e7fc      	b.n	800af7c <lv_obj_get_child_cnt+0x8>
 800af82:	46c0      	nop			; (mov r8, r8)

0800af84 <draw_buf_flush>:

/**
 * Flush the content of the draw buffer
 */
static void draw_buf_flush(lv_disp_t * disp)
{
 800af84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af86:	46de      	mov	lr, fp
 800af88:	4657      	mov	r7, sl
 800af8a:	4645      	mov	r5, r8
 800af8c:	464e      	mov	r6, r9
 800af8e:	b5e0      	push	{r5, r6, r7, lr}
 800af90:	0004      	movs	r4, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800af92:	4dc5      	ldr	r5, [pc, #788]	; (800b2a8 <draw_buf_flush+0x324>)
{
 800af94:	b09d      	sub	sp, #116	; 0x74
 800af96:	9006      	str	r0, [sp, #24]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800af98:	6828      	ldr	r0, [r5, #0]
 800af9a:	f005 fe39 	bl	8010c10 <lv_disp_get_draw_buf>

    /*Flush the rendered content to the display*/
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 800af9e:	6823      	ldr	r3, [r4, #0]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800afa0:	0007      	movs	r7, r0
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 800afa2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800afa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <draw_buf_flush+0x2a>
 800afaa:	0020      	movs	r0, r4
 800afac:	4798      	blx	r3

    /* In double buffered mode wait until the other buffer is freed
     * and driver is ready to receive the new buffer */
    if(draw_buf->buf1 && draw_buf->buf2) {
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d050      	beq.n	800b056 <draw_buf_flush+0xd2>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d04d      	beq.n	800b056 <draw_buf_flush+0xd2>
        while(draw_buf->flushing) {
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800afba:	682a      	ldr	r2, [r5, #0]
 800afbc:	6810      	ldr	r0, [r2, #0]
 800afbe:	e003      	b.n	800afc8 <draw_buf_flush+0x44>
 800afc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d000      	beq.n	800afc8 <draw_buf_flush+0x44>
 800afc6:	e18b      	b.n	800b2e0 <draw_buf_flush+0x35c>
        while(draw_buf->flushing) {
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1f8      	bne.n	800afc0 <draw_buf_flush+0x3c>
 800afce:	0006      	movs	r6, r0
            }
        }
#endif
    }

    draw_buf->flushing = 1;
 800afd0:	2101      	movs	r1, #1

    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 800afd2:	68f3      	ldr	r3, [r6, #12]
    draw_buf->flushing = 1;
 800afd4:	6139      	str	r1, [r7, #16]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 800afd6:	6998      	ldr	r0, [r3, #24]
 800afd8:	07c0      	lsls	r0, r0, #31
 800afda:	d444      	bmi.n	800b066 <draw_buf_flush+0xe2>
    else draw_buf->flushing_last = 0;
 800afdc:	2300      	movs	r3, #0
 800afde:	617b      	str	r3, [r7, #20]

    bool flushing_last = draw_buf->flushing_last;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	930a      	str	r3, [sp, #40]	; 0x28

    if(disp->driver->flush_cb) {
 800afe4:	9b06      	ldr	r3, [sp, #24]
 800afe6:	6818      	ldr	r0, [r3, #0]
 800afe8:	6945      	ldr	r5, [r0, #20]
 800afea:	2d00      	cmp	r5, #0
 800afec:	d019      	beq.n	800b022 <draw_buf_flush+0x9e>
        /*Rotate the buffer to the display's native orientation if necessary*/
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 800afee:	2130      	movs	r1, #48	; 0x30
 800aff0:	7c03      	ldrb	r3, [r0, #16]
 800aff2:	4219      	tst	r1, r3
 800aff4:	d13c      	bne.n	800b070 <draw_buf_flush+0xec>
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
        }
        else {
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 800aff6:	6823      	ldr	r3, [r4, #0]
 800aff8:	6861      	ldr	r1, [r4, #4]
 800affa:	469c      	mov	ip, r3
{
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 800affc:	8904      	ldrh	r4, [r0, #8]
 800affe:	880b      	ldrh	r3, [r1, #0]
    lv_area_t offset_area = {
 800b000:	ae1a      	add	r6, sp, #104	; 0x68
        .x1 = area->x1 + drv->offset_x,
 800b002:	18e3      	adds	r3, r4, r3
    lv_area_t offset_area = {
 800b004:	8033      	strh	r3, [r6, #0]
        .y1 = area->y1 + drv->offset_y,
 800b006:	8943      	ldrh	r3, [r0, #10]
 800b008:	884e      	ldrh	r6, [r1, #2]
    lv_area_t offset_area = {
 800b00a:	aa1a      	add	r2, sp, #104	; 0x68
        .y1 = area->y1 + drv->offset_y,
 800b00c:	199e      	adds	r6, r3, r6
    lv_area_t offset_area = {
 800b00e:	8056      	strh	r6, [r2, #2]
        .x2 = area->x2 + drv->offset_x,
 800b010:	888e      	ldrh	r6, [r1, #4]
 800b012:	19a4      	adds	r4, r4, r6
    lv_area_t offset_area = {
 800b014:	8094      	strh	r4, [r2, #4]
        .y2 = area->y2 + drv->offset_y
 800b016:	88c9      	ldrh	r1, [r1, #6]
 800b018:	185b      	adds	r3, r3, r1
    lv_area_t offset_area = {
 800b01a:	80d3      	strh	r3, [r2, #6]
    };

    drv->flush_cb(drv, &offset_area, color_p);
 800b01c:	a91a      	add	r1, sp, #104	; 0x68
 800b01e:	4662      	mov	r2, ip
 800b020:	47a8      	blx	r5
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || flushing_last)) {
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00f      	beq.n	800b048 <draw_buf_flush+0xc4>
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	2a00      	cmp	r2, #0
 800b02c:	d00c      	beq.n	800b048 <draw_buf_flush+0xc4>
 800b02e:	9906      	ldr	r1, [sp, #24]
 800b030:	6809      	ldr	r1, [r1, #0]
 800b032:	7c09      	ldrb	r1, [r1, #16]
 800b034:	07c9      	lsls	r1, r1, #31
 800b036:	d502      	bpl.n	800b03e <draw_buf_flush+0xba>
 800b038:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b03a:	2900      	cmp	r1, #0
 800b03c:	d004      	beq.n	800b048 <draw_buf_flush+0xc4>
        if(draw_buf->buf_act == draw_buf->buf1)
 800b03e:	68b9      	ldr	r1, [r7, #8]
 800b040:	428b      	cmp	r3, r1
 800b042:	d100      	bne.n	800b046 <draw_buf_flush+0xc2>
 800b044:	e14e      	b.n	800b2e4 <draw_buf_flush+0x360>
            draw_buf->buf_act = draw_buf->buf1;
 800b046:	60bb      	str	r3, [r7, #8]
}
 800b048:	b01d      	add	sp, #116	; 0x74
 800b04a:	bcf0      	pop	{r4, r5, r6, r7}
 800b04c:	46bb      	mov	fp, r7
 800b04e:	46b2      	mov	sl, r6
 800b050:	46a9      	mov	r9, r5
 800b052:	46a0      	mov	r8, r4
 800b054:	bdf0      	pop	{r4, r5, r6, r7, pc}
    draw_buf->flushing = 1;
 800b056:	2101      	movs	r1, #1
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 800b058:	682a      	ldr	r2, [r5, #0]
 800b05a:	6816      	ldr	r6, [r2, #0]
    draw_buf->flushing = 1;
 800b05c:	6139      	str	r1, [r7, #16]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 800b05e:	68f3      	ldr	r3, [r6, #12]
 800b060:	6998      	ldr	r0, [r3, #24]
 800b062:	07c0      	lsls	r0, r0, #31
 800b064:	d5ba      	bpl.n	800afdc <draw_buf_flush+0x58>
 800b066:	699b      	ldr	r3, [r3, #24]
 800b068:	079b      	lsls	r3, r3, #30
 800b06a:	d5b7      	bpl.n	800afdc <draw_buf_flush+0x58>
 800b06c:	6179      	str	r1, [r7, #20]
 800b06e:	e7b7      	b.n	800afe0 <draw_buf_flush+0x5c>
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 800b070:	075b      	lsls	r3, r3, #29
 800b072:	d5c0      	bpl.n	800aff6 <draw_buf_flush+0x72>
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 800b074:	6863      	ldr	r3, [r4, #4]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 800b076:	7c30      	ldrb	r0, [r6, #16]
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 800b078:	930d      	str	r3, [sp, #52]	; 0x34
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 800b07a:	2306      	movs	r3, #6
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 800b07c:	6824      	ldr	r4, [r4, #0]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 800b07e:	4003      	ands	r3, r0
 800b080:	2b06      	cmp	r3, #6
 800b082:	d0ce      	beq.n	800b022 <draw_buf_flush+0x9e>
    if(drv->rotated == LV_DISP_ROT_180) {
 800b084:	4001      	ands	r1, r0
 800b086:	2920      	cmp	r1, #32
 800b088:	d100      	bne.n	800b08c <draw_buf_flush+0x108>
 800b08a:	e1ed      	b.n	800b468 <draw_buf_flush+0x4e4>
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 800b08c:	06c3      	lsls	r3, r0, #27
 800b08e:	d5c8      	bpl.n	800b022 <draw_buf_flush+0x9e>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800b090:	0010      	movs	r0, r2
 800b092:	f005 fdbd 	bl	8010c10 <lv_disp_get_draw_buf>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b096:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b098:	4681      	mov	r9, r0
 800b09a:	2104      	movs	r1, #4
 800b09c:	5e53      	ldrsh	r3, [r2, r1]
 800b09e:	2000      	movs	r0, #0
 800b0a0:	5e11      	ldrsh	r1, [r2, r0]
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 800b0a2:	20a0      	movs	r0, #160	; 0xa0
 800b0a4:	4698      	mov	r8, r3
 800b0a6:	8893      	ldrh	r3, [r2, #4]
 800b0a8:	468a      	mov	sl, r1
 800b0aa:	8811      	ldrh	r1, [r2, #0]
 800b0ac:	9314      	str	r3, [sp, #80]	; 0x50
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	1a5b      	subs	r3, r3, r1
 800b0b2:	9115      	str	r1, [sp, #84]	; 0x54
 800b0b4:	b299      	uxth	r1, r3
 800b0b6:	9113      	str	r1, [sp, #76]	; 0x4c
 800b0b8:	b21d      	sxth	r5, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b0ba:	2102      	movs	r1, #2
 800b0bc:	5e53      	ldrsh	r3, [r2, r1]
 800b0be:	0140      	lsls	r0, r0, #5
 800b0c0:	9316      	str	r3, [sp, #88]	; 0x58
 800b0c2:	8851      	ldrh	r1, [r2, #2]
 800b0c4:	9111      	str	r1, [sp, #68]	; 0x44
 800b0c6:	88d3      	ldrh	r3, [r2, #6]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	1a5b      	subs	r3, r3, r1
 800b0cc:	b21b      	sxth	r3, r3
 800b0ce:	0029      	movs	r1, r5
 800b0d0:	930c      	str	r3, [sp, #48]	; 0x30
 800b0d2:	f7f5 f829 	bl	8000128 <__udivsi3>
 800b0d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0d8:	1c03      	adds	r3, r0, #0
 800b0da:	b200      	sxth	r0, r0
 800b0dc:	4290      	cmp	r0, r2
 800b0de:	dd00      	ble.n	800b0e2 <draw_buf_flush+0x15e>
 800b0e0:	1c13      	adds	r3, r2, #0
 800b0e2:	b21b      	sxth	r3, r3
 800b0e4:	9312      	str	r3, [sp, #72]	; 0x48
        if(drv->rotated == LV_DISP_ROT_90) {
 800b0e6:	2330      	movs	r3, #48	; 0x30
 800b0e8:	7c32      	ldrb	r2, [r6, #16]
 800b0ea:	4013      	ands	r3, r2
 800b0ec:	2b10      	cmp	r3, #16
 800b0ee:	d10a      	bne.n	800b106 <draw_buf_flush+0x182>
            area->y2 = drv->ver_res - area->x1 - 1;
 800b0f0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b0f2:	8872      	ldrh	r2, [r6, #2]
 800b0f4:	43cb      	mvns	r3, r1
 800b0f6:	18d2      	adds	r2, r2, r3
 800b0f8:	b213      	sxth	r3, r2
 800b0fa:	4698      	mov	r8, r3
            area->y1 = area->y2 - area_w + 1;
 800b0fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0fe:	1acb      	subs	r3, r1, r3
 800b100:	18d3      	adds	r3, r2, r3
 800b102:	b21b      	sxth	r3, r3
 800b104:	469a      	mov	sl, r3
 800b106:	4652      	mov	r2, sl
 800b108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b10a:	805a      	strh	r2, [r3, #2]
 800b10c:	4642      	mov	r2, r8
 800b10e:	80da      	strh	r2, [r3, #6]
        while(row < area_h) {
 800b110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b112:	2b00      	cmp	r3, #0
 800b114:	dc00      	bgt.n	800b118 <draw_buf_flush+0x194>
 800b116:	e784      	b.n	800b022 <draw_buf_flush+0x9e>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800b118:	0feb      	lsrs	r3, r5, #31
 800b11a:	195b      	adds	r3, r3, r5
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800b11c:	1c6a      	adds	r2, r5, #1
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800b11e:	105b      	asrs	r3, r3, #1
 800b120:	9310      	str	r3, [sp, #64]	; 0x40
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800b122:	0fd3      	lsrs	r3, r2, #31
 800b124:	189b      	adds	r3, r3, r2
 800b126:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b128:	105b      	asrs	r3, r3, #1
 800b12a:	9305      	str	r3, [sp, #20]
 800b12c:	1e53      	subs	r3, r2, #1
 800b12e:	b29b      	uxth	r3, r3
 800b130:	9302      	str	r3, [sp, #8]
 800b132:	3301      	adds	r3, #1
 800b134:	005b      	lsls	r3, r3, #1
 800b136:	9308      	str	r3, [sp, #32]
            color_p += area_w * height;
 800b138:	002b      	movs	r3, r5
 800b13a:	436b      	muls	r3, r5
 800b13c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b13e:	2300      	movs	r3, #0
                    area->x2 = init_y_off + area_w - 1;
 800b140:	4694      	mov	ip, r2
 800b142:	46ca      	mov	sl, r9
 800b144:	46b3      	mov	fp, r6
            color_p += area_w * height;
 800b146:	9307      	str	r3, [sp, #28]
 800b148:	9309      	str	r3, [sp, #36]	; 0x24
                    area->x2 = init_y_off + area_w - 1;
 800b14a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b14c:	9719      	str	r7, [sp, #100]	; 0x64
 800b14e:	3b01      	subs	r3, #1
 800b150:	4463      	add	r3, ip
 800b152:	b29b      	uxth	r3, r3
 800b154:	9318      	str	r3, [sp, #96]	; 0x60
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 800b156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b15a:	1a9b      	subs	r3, r3, r2
 800b15c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b15e:	9304      	str	r3, [sp, #16]
 800b160:	4293      	cmp	r3, r2
 800b162:	dd00      	ble.n	800b166 <draw_buf_flush+0x1e2>
 800b164:	9204      	str	r2, [sp, #16]
 800b166:	466b      	mov	r3, sp
 800b168:	2210      	movs	r2, #16
 800b16a:	5e9b      	ldrsh	r3, [r3, r2]
            draw_buf->flushing = 1;
 800b16c:	4652      	mov	r2, sl
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 800b16e:	9303      	str	r3, [sp, #12]
            draw_buf->flushing = 1;
 800b170:	2301      	movs	r3, #1
 800b172:	6113      	str	r3, [r2, #16]
            if((row == 0) && (area_h >= area_w)) {
 800b174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b176:	2b00      	cmp	r3, #0
 800b178:	d103      	bne.n	800b182 <draw_buf_flush+0x1fe>
 800b17a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b17c:	429d      	cmp	r5, r3
 800b17e:	dc00      	bgt.n	800b182 <draw_buf_flush+0x1fe>
 800b180:	e0dd      	b.n	800b33e <draw_buf_flush+0x3ba>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 800b182:	9b07      	ldr	r3, [sp, #28]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d100      	bne.n	800b18a <draw_buf_flush+0x206>
 800b188:	e168      	b.n	800b45c <draw_buf_flush+0x4d8>
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 800b18a:	465b      	mov	r3, fp
 800b18c:	2230      	movs	r2, #48	; 0x30
 800b18e:	7c1b      	ldrb	r3, [r3, #16]
 800b190:	401a      	ands	r2, r3
 800b192:	4694      	mov	ip, r2
    uint32_t invert = (area_w * area_h) - 1;
 800b194:	9a04      	ldr	r2, [sp, #16]
 800b196:	0013      	movs	r3, r2
 800b198:	436b      	muls	r3, r5
    uint32_t initial_i = ((area_w - 1) * area_h);
 800b19a:	1a99      	subs	r1, r3, r2
 800b19c:	4688      	mov	r8, r1
    uint32_t invert = (area_w * area_h) - 1;
 800b19e:	930e      	str	r3, [sp, #56]	; 0x38
    for(lv_coord_t y = 0; y < area_h; y++) {
 800b1a0:	2a00      	cmp	r2, #0
 800b1a2:	dd38      	ble.n	800b216 <draw_buf_flush+0x292>
 800b1a4:	9a03      	ldr	r2, [sp, #12]
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	0056      	lsls	r6, r2, #1
 800b1aa:	4642      	mov	r2, r8
 800b1ac:	1a9b      	subs	r3, r3, r2
 800b1ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1b0:	4653      	mov	r3, sl
                i += area_h;
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	46c1      	mov	r9, r8
 800b1b6:	46a2      	mov	sl, r4
 800b1b8:	4270      	negs	r0, r6
 800b1ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1bc:	9401      	str	r4, [sp, #4]
        uint32_t i = initial_i + y;
 800b1be:	464b      	mov	r3, r9
 800b1c0:	185a      	adds	r2, r3, r1
        if(invert_i)
 800b1c2:	4663      	mov	r3, ip
 800b1c4:	2b30      	cmp	r3, #48	; 0x30
 800b1c6:	d000      	beq.n	800b1ca <draw_buf_flush+0x246>
 800b1c8:	e08e      	b.n	800b2e8 <draw_buf_flush+0x364>
            i = invert - i;
 800b1ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1cc:	1a5a      	subs	r2, r3, r1
        for(lv_coord_t x = 0; x < area_w; x++) {
 800b1ce:	2d00      	cmp	r5, #0
 800b1d0:	dd14      	ble.n	800b1fc <draw_buf_flush+0x278>
 800b1d2:	9b07      	ldr	r3, [sp, #28]
 800b1d4:	9f01      	ldr	r7, [sp, #4]
 800b1d6:	4698      	mov	r8, r3
 800b1d8:	0052      	lsls	r2, r2, #1
 800b1da:	4442      	add	r2, r8
 800b1dc:	4654      	mov	r4, sl
 800b1de:	2300      	movs	r3, #0
 800b1e0:	46b8      	mov	r8, r7
            rot_buf[i] = *(orig_color_p++);
 800b1e2:	8827      	ldrh	r7, [r4, #0]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	b21b      	sxth	r3, r3
 800b1e8:	8017      	strh	r7, [r2, #0]
        for(lv_coord_t x = 0; x < area_w; x++) {
 800b1ea:	3402      	adds	r4, #2
 800b1ec:	1992      	adds	r2, r2, r6
 800b1ee:	429d      	cmp	r5, r3
 800b1f0:	d1f7      	bne.n	800b1e2 <draw_buf_flush+0x25e>
 800b1f2:	4643      	mov	r3, r8
 800b1f4:	9301      	str	r3, [sp, #4]
            rot_buf[i] = *(orig_color_p++);
 800b1f6:	9b08      	ldr	r3, [sp, #32]
 800b1f8:	4698      	mov	r8, r3
 800b1fa:	44c2      	add	sl, r8
    for(lv_coord_t y = 0; y < area_h; y++) {
 800b1fc:	3101      	adds	r1, #1
 800b1fe:	9a03      	ldr	r2, [sp, #12]
 800b200:	b20b      	sxth	r3, r1
 800b202:	429a      	cmp	r2, r3
 800b204:	dcdb      	bgt.n	800b1be <draw_buf_flush+0x23a>
                if(drv->rotated == LV_DISP_ROT_90) {
 800b206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b208:	2230      	movs	r2, #48	; 0x30
 800b20a:	469a      	mov	sl, r3
 800b20c:	465b      	mov	r3, fp
 800b20e:	7c1b      	ldrb	r3, [r3, #16]
 800b210:	9c01      	ldr	r4, [sp, #4]
 800b212:	401a      	ands	r2, r3
 800b214:	4694      	mov	ip, r2
 800b216:	4663      	mov	r3, ip
 800b218:	2b10      	cmp	r3, #16
 800b21a:	d100      	bne.n	800b21e <draw_buf_flush+0x29a>
 800b21c:	e081      	b.n	800b322 <draw_buf_flush+0x39e>
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800b21e:	466b      	mov	r3, sp
 800b220:	465a      	mov	r2, fp
 800b222:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
 800b224:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b226:	8811      	ldrh	r1, [r2, #0]
 800b228:	43db      	mvns	r3, r3
                    area->x1 = area->x2 - height + 1;
 800b22a:	466a      	mov	r2, sp
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800b22c:	18c9      	adds	r1, r1, r3
 800b22e:	1b89      	subs	r1, r1, r6
 800b230:	b289      	uxth	r1, r1
                    area->x1 = area->x2 - height + 1;
 800b232:	8a17      	ldrh	r7, [r2, #16]
 800b234:	1c48      	adds	r0, r1, #1
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800b236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                    area->x1 = area->x2 - height + 1;
 800b238:	1bc0      	subs	r0, r0, r7
 800b23a:	b280      	uxth	r0, r0
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800b23c:	8099      	strh	r1, [r3, #4]
                    area->x1 = area->x2 - height + 1;
 800b23e:	8018      	strh	r0, [r3, #0]
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 800b240:	9a04      	ldr	r2, [sp, #16]
 800b242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b244:	4694      	mov	ip, r2
 800b246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b248:	4463      	add	r3, ip
 800b24a:	4293      	cmp	r3, r2
 800b24c:	db63      	blt.n	800b316 <draw_buf_flush+0x392>
 800b24e:	4653      	mov	r3, sl
 800b250:	699b      	ldr	r3, [r3, #24]
 800b252:	07db      	lsls	r3, r3, #31
 800b254:	d55f      	bpl.n	800b316 <draw_buf_flush+0x392>
 800b256:	4653      	mov	r3, sl
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	079b      	lsls	r3, r3, #30
 800b25c:	d55b      	bpl.n	800b316 <draw_buf_flush+0x392>
                draw_buf->flushing_last = 1;
 800b25e:	2301      	movs	r3, #1
 800b260:	4652      	mov	r2, sl
 800b262:	6153      	str	r3, [r2, #20]
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 800b264:	9b07      	ldr	r3, [sp, #28]
 800b266:	4699      	mov	r9, r3
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d058      	beq.n	800b31e <draw_buf_flush+0x39a>
        .x1 = area->x1 + drv->offset_x,
 800b26c:	465b      	mov	r3, fp
 800b26e:	891b      	ldrh	r3, [r3, #8]
 800b270:	4698      	mov	r8, r3
    lv_area_t offset_area = {
 800b272:	ab1a      	add	r3, sp, #104	; 0x68
        .x1 = area->x1 + drv->offset_x,
 800b274:	4440      	add	r0, r8
    lv_area_t offset_area = {
 800b276:	8018      	strh	r0, [r3, #0]
        .y1 = area->y1 + drv->offset_y,
 800b278:	465b      	mov	r3, fp
 800b27a:	8958      	ldrh	r0, [r3, #10]
 800b27c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b27e:	885b      	ldrh	r3, [r3, #2]
 800b280:	469c      	mov	ip, r3
 800b282:	4484      	add	ip, r0
    lv_area_t offset_area = {
 800b284:	4662      	mov	r2, ip
 800b286:	ab1a      	add	r3, sp, #104	; 0x68
 800b288:	805a      	strh	r2, [r3, #2]
        .x2 = area->x2 + drv->offset_x,
 800b28a:	000b      	movs	r3, r1
    lv_area_t offset_area = {
 800b28c:	aa1a      	add	r2, sp, #104	; 0x68
        .x2 = area->x2 + drv->offset_x,
 800b28e:	4443      	add	r3, r8
    lv_area_t offset_area = {
 800b290:	8093      	strh	r3, [r2, #4]
        .y2 = area->y2 + drv->offset_y
 800b292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b294:	88db      	ldrh	r3, [r3, #6]
 800b296:	18c0      	adds	r0, r0, r3
    lv_area_t offset_area = {
 800b298:	80d0      	strh	r0, [r2, #6]
 800b29a:	0013      	movs	r3, r2
    drv->flush_cb(drv, &offset_area, color_p);
 800b29c:	4658      	mov	r0, fp
 800b29e:	0019      	movs	r1, r3
 800b2a0:	464a      	mov	r2, r9
 800b2a2:	6943      	ldr	r3, [r0, #20]
 800b2a4:	4798      	blx	r3
}
 800b2a6:	e005      	b.n	800b2b4 <draw_buf_flush+0x330>
 800b2a8:	20003204 	.word	0x20003204
                if(drv->wait_cb) drv->wait_cb(drv);
 800b2ac:	465b      	mov	r3, fp
 800b2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d12d      	bne.n	800b310 <draw_buf_flush+0x38c>
            while(draw_buf->flushing) {
 800b2b4:	4653      	mov	r3, sl
 800b2b6:	691b      	ldr	r3, [r3, #16]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1f7      	bne.n	800b2ac <draw_buf_flush+0x328>
            color_p += area_w * height;
 800b2bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            row += height;
 800b2be:	19f6      	adds	r6, r6, r7
            color_p += area_w * height;
 800b2c0:	005b      	lsls	r3, r3, #1
        while(row < area_h) {
 800b2c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            color_p += area_w * height;
 800b2c4:	18e4      	adds	r4, r4, r3
            row += height;
 800b2c6:	b233      	sxth	r3, r6
 800b2c8:	9309      	str	r3, [sp, #36]	; 0x24
        while(row < area_h) {
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	dd00      	ble.n	800b2d0 <draw_buf_flush+0x34c>
 800b2ce:	e742      	b.n	800b156 <draw_buf_flush+0x1d2>
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 800b2d0:	9807      	ldr	r0, [sp, #28]
 800b2d2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d100      	bne.n	800b2da <draw_buf_flush+0x356>
 800b2d8:	e6a3      	b.n	800b022 <draw_buf_flush+0x9e>
 800b2da:	f006 ff89 	bl	80121f0 <lv_mem_buf_release>
 800b2de:	e6a0      	b.n	800b022 <draw_buf_flush+0x9e>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800b2e0:	4798      	blx	r3
 800b2e2:	e66a      	b.n	800afba <draw_buf_flush+0x36>
            draw_buf->buf_act = draw_buf->buf2;
 800b2e4:	60ba      	str	r2, [r7, #8]
 800b2e6:	e6af      	b.n	800b048 <draw_buf_flush+0xc4>
        for(lv_coord_t x = 0; x < area_w; x++) {
 800b2e8:	2d00      	cmp	r5, #0
 800b2ea:	dc00      	bgt.n	800b2ee <draw_buf_flush+0x36a>
 800b2ec:	e786      	b.n	800b1fc <draw_buf_flush+0x278>
 800b2ee:	9b07      	ldr	r3, [sp, #28]
 800b2f0:	9f01      	ldr	r7, [sp, #4]
 800b2f2:	4698      	mov	r8, r3
 800b2f4:	0052      	lsls	r2, r2, #1
 800b2f6:	4442      	add	r2, r8
 800b2f8:	4654      	mov	r4, sl
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	46b8      	mov	r8, r7
            rot_buf[i] = *(orig_color_p++);
 800b2fe:	8827      	ldrh	r7, [r4, #0]
 800b300:	3301      	adds	r3, #1
 800b302:	b21b      	sxth	r3, r3
 800b304:	8017      	strh	r7, [r2, #0]
        for(lv_coord_t x = 0; x < area_w; x++) {
 800b306:	3402      	adds	r4, #2
 800b308:	1812      	adds	r2, r2, r0
 800b30a:	429d      	cmp	r5, r3
 800b30c:	d1f7      	bne.n	800b2fe <draw_buf_flush+0x37a>
 800b30e:	e770      	b.n	800b1f2 <draw_buf_flush+0x26e>
                if(drv->wait_cb) drv->wait_cb(drv);
 800b310:	4658      	mov	r0, fp
 800b312:	4798      	blx	r3
 800b314:	e7ce      	b.n	800b2b4 <draw_buf_flush+0x330>
                draw_buf->flushing_last = 0;
 800b316:	2300      	movs	r3, #0
 800b318:	4652      	mov	r2, sl
 800b31a:	6153      	str	r3, [r2, #20]
 800b31c:	e7a2      	b.n	800b264 <draw_buf_flush+0x2e0>
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 800b31e:	46a1      	mov	r9, r4
 800b320:	e7a4      	b.n	800b26c <draw_buf_flush+0x2e8>
                    area->x1 = init_y_off + row;
 800b322:	466b      	mov	r3, sp
                    area->x2 = init_y_off + row + height - 1;
 800b324:	466a      	mov	r2, sp
                    area->x1 = init_y_off + row;
 800b326:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
 800b328:	9b11      	ldr	r3, [sp, #68]	; 0x44
                    area->x2 = init_y_off + row + height - 1;
 800b32a:	8a17      	ldrh	r7, [r2, #16]
                    area->x1 = init_y_off + row;
 800b32c:	1998      	adds	r0, r3, r6
 800b32e:	b280      	uxth	r0, r0
                    area->x2 = init_y_off + row + height - 1;
 800b330:	1e41      	subs	r1, r0, #1
                    area->x1 = init_y_off + row;
 800b332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                    area->x2 = init_y_off + row + height - 1;
 800b334:	1879      	adds	r1, r7, r1
 800b336:	b289      	uxth	r1, r1
                    area->x1 = init_y_off + row;
 800b338:	8018      	strh	r0, [r3, #0]
                    area->x2 = init_y_off + row + height - 1;
 800b33a:	8099      	strh	r1, [r3, #4]
 800b33c:	e780      	b.n	800b240 <draw_buf_flush+0x2bc>
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 800b33e:	465b      	mov	r3, fp
 800b340:	2230      	movs	r2, #48	; 0x30
 800b342:	7c1b      	ldrb	r3, [r3, #16]
 800b344:	401a      	ands	r2, r3
 800b346:	9204      	str	r2, [sp, #16]
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800b348:	2d01      	cmp	r5, #1
 800b34a:	dd71      	ble.n	800b430 <draw_buf_flush+0x4ac>
 800b34c:	2d00      	cmp	r5, #0
 800b34e:	dd6c      	ble.n	800b42a <draw_buf_flush+0x4a6>
 800b350:	2300      	movs	r3, #0
 800b352:	469c      	mov	ip, r3
 800b354:	4653      	mov	r3, sl
 800b356:	930b      	str	r3, [sp, #44]	; 0x2c
 800b358:	465b      	mov	r3, fp
 800b35a:	2600      	movs	r6, #0
 800b35c:	930e      	str	r3, [sp, #56]	; 0x38
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800b35e:	9b02      	ldr	r3, [sp, #8]
 800b360:	2100      	movs	r1, #0
 800b362:	1b9f      	subs	r7, r3, r6
                    &color_p[inv_i * w + inv_j],
 800b364:	002b      	movs	r3, r5
 800b366:	b23f      	sxth	r7, r7
 800b368:	437b      	muls	r3, r7
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800b36a:	2200      	movs	r2, #0
 800b36c:	46b0      	mov	r8, r6
 800b36e:	9703      	str	r7, [sp, #12]
 800b370:	9301      	str	r3, [sp, #4]
 800b372:	e024      	b.n	800b3be <draw_buf_flush+0x43a>
                    &color_p[i * w + j],
 800b374:	4660      	mov	r0, ip
                    &color_p[inv_i * w + inv_j],
 800b376:	9e01      	ldr	r6, [sp, #4]
                    &color_p[i * w + j],
 800b378:	1880      	adds	r0, r0, r2
 800b37a:	0040      	lsls	r0, r0, #1
 800b37c:	4681      	mov	r9, r0
                    &color_p[inv_i * w + inv_j],
 800b37e:	46b2      	mov	sl, r6
                    &color_p[inv_j * w + i],
 800b380:	0028      	movs	r0, r5
                    &color_p[j * w + inv_i]
 800b382:	9e03      	ldr	r6, [sp, #12]
                    &color_p[inv_j * w + i],
 800b384:	4358      	muls	r0, r3
                    &color_p[inv_i * w + inv_j],
 800b386:	4453      	add	r3, sl
                    &color_p[j * w + inv_i]
 800b388:	46b2      	mov	sl, r6
    tmp = *a;
 800b38a:	464e      	mov	r6, r9
                    &color_p[j * w + inv_i]
 800b38c:	436a      	muls	r2, r5
    tmp = *a;
 800b38e:	5ba6      	ldrh	r6, [r4, r6]
                    &color_p[inv_j * w + i],
 800b390:	4440      	add	r0, r8
 800b392:	0040      	lsls	r0, r0, #1
                    &color_p[j * w + inv_i]
 800b394:	4452      	add	r2, sl
    tmp = *a;
 800b396:	46b2      	mov	sl, r6
    *a = *b;
 800b398:	5a26      	ldrh	r6, [r4, r0]
                    &color_p[inv_i * w + inv_j],
 800b39a:	005b      	lsls	r3, r3, #1
    *a = *b;
 800b39c:	46b3      	mov	fp, r6
 800b39e:	464e      	mov	r6, r9
 800b3a0:	465f      	mov	r7, fp
 800b3a2:	53a7      	strh	r7, [r4, r6]
    *b = *c;
 800b3a4:	5ae6      	ldrh	r6, [r4, r3]
                    &color_p[j * w + inv_i]
 800b3a6:	0052      	lsls	r2, r2, #1
    *b = *c;
 800b3a8:	5226      	strh	r6, [r4, r0]
    *c = *d;
 800b3aa:	5aa0      	ldrh	r0, [r4, r2]
 800b3ac:	3101      	adds	r1, #1
 800b3ae:	52e0      	strh	r0, [r4, r3]
    *d = tmp;
 800b3b0:	4653      	mov	r3, sl
 800b3b2:	52a3      	strh	r3, [r4, r2]
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800b3b4:	9b05      	ldr	r3, [sp, #20]
 800b3b6:	b209      	sxth	r1, r1
 800b3b8:	000a      	movs	r2, r1
 800b3ba:	4299      	cmp	r1, r3
 800b3bc:	da29      	bge.n	800b412 <draw_buf_flush+0x48e>
            lv_coord_t inv_j = (w - 1) - j;
 800b3be:	9b02      	ldr	r3, [sp, #8]
 800b3c0:	b289      	uxth	r1, r1
            if(is_270) {
 800b3c2:	9804      	ldr	r0, [sp, #16]
 800b3c4:	1a5b      	subs	r3, r3, r1
 800b3c6:	b21b      	sxth	r3, r3
 800b3c8:	2830      	cmp	r0, #48	; 0x30
 800b3ca:	d0d3      	beq.n	800b374 <draw_buf_flush+0x3f0>
                    &color_p[i * w + j],
 800b3cc:	4660      	mov	r0, ip
 800b3ce:	1880      	adds	r0, r0, r2
 800b3d0:	0040      	lsls	r0, r0, #1
 800b3d2:	4681      	mov	r9, r0
                    &color_p[j * w + inv_i],
 800b3d4:	9803      	ldr	r0, [sp, #12]
    tmp = *a;
 800b3d6:	464e      	mov	r6, r9
                    &color_p[j * w + inv_i],
 800b3d8:	4682      	mov	sl, r0
 800b3da:	436a      	muls	r2, r5
    tmp = *a;
 800b3dc:	5ba6      	ldrh	r6, [r4, r6]
                    &color_p[j * w + inv_i],
 800b3de:	4452      	add	r2, sl
 800b3e0:	0052      	lsls	r2, r2, #1
    tmp = *a;
 800b3e2:	46b2      	mov	sl, r6
    *a = *b;
 800b3e4:	5aa6      	ldrh	r6, [r4, r2]
                    &color_p[inv_i * w + inv_j],
 800b3e6:	9801      	ldr	r0, [sp, #4]
    *a = *b;
 800b3e8:	46b3      	mov	fp, r6
 800b3ea:	464e      	mov	r6, r9
 800b3ec:	465f      	mov	r7, fp
                    &color_p[inv_i * w + inv_j],
 800b3ee:	18c0      	adds	r0, r0, r3
                    &color_p[inv_j * w + i]
 800b3f0:	436b      	muls	r3, r5
    *a = *b;
 800b3f2:	53a7      	strh	r7, [r4, r6]
                    &color_p[inv_i * w + inv_j],
 800b3f4:	0040      	lsls	r0, r0, #1
    *b = *c;
 800b3f6:	5a26      	ldrh	r6, [r4, r0]
                    &color_p[inv_j * w + i]
 800b3f8:	4443      	add	r3, r8
 800b3fa:	005b      	lsls	r3, r3, #1
    *b = *c;
 800b3fc:	52a6      	strh	r6, [r4, r2]
    *c = *d;
 800b3fe:	5ae2      	ldrh	r2, [r4, r3]
 800b400:	3101      	adds	r1, #1
 800b402:	5222      	strh	r2, [r4, r0]
    *d = tmp;
 800b404:	4652      	mov	r2, sl
 800b406:	52e2      	strh	r2, [r4, r3]
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800b408:	9b05      	ldr	r3, [sp, #20]
 800b40a:	b209      	sxth	r1, r1
 800b40c:	000a      	movs	r2, r1
 800b40e:	4299      	cmp	r1, r3
 800b410:	dbd5      	blt.n	800b3be <draw_buf_flush+0x43a>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800b412:	4646      	mov	r6, r8
 800b414:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b416:	3601      	adds	r6, #1
 800b418:	b233      	sxth	r3, r6
 800b41a:	44ac      	add	ip, r5
 800b41c:	429a      	cmp	r2, r3
 800b41e:	dc9e      	bgt.n	800b35e <draw_buf_flush+0x3da>
 800b420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b422:	469a      	mov	sl, r3
 800b424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b426:	469b      	mov	fp, r3
 800b428:	7c1b      	ldrb	r3, [r3, #16]
                if(drv->rotated == LV_DISP_ROT_90) {
 800b42a:	2230      	movs	r2, #48	; 0x30
 800b42c:	401a      	ands	r2, r3
 800b42e:	9204      	str	r2, [sp, #16]
 800b430:	2a10      	cmp	r2, #16
 800b432:	d069      	beq.n	800b508 <draw_buf_flush+0x584>
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800b434:	465a      	mov	r2, fp
 800b436:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b438:	8811      	ldrh	r1, [r2, #0]
 800b43a:	43db      	mvns	r3, r3
                    area->x1 = area->x2 - area_w + 1;
 800b43c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b43e:	9814      	ldr	r0, [sp, #80]	; 0x50
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800b440:	18c9      	adds	r1, r1, r3
 800b442:	b289      	uxth	r1, r1
                    area->x1 = area->x2 - area_w + 1;
 800b444:	1a10      	subs	r0, r2, r0
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800b446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                    area->x1 = area->x2 - area_w + 1;
 800b448:	1808      	adds	r0, r1, r0
 800b44a:	b280      	uxth	r0, r0
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800b44c:	8099      	strh	r1, [r3, #4]
                    area->x1 = area->x2 - area_w + 1;
 800b44e:	8018      	strh	r0, [r3, #0]
 800b450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b452:	2600      	movs	r6, #0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b454:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b456:	930e      	str	r3, [sp, #56]	; 0x38
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800b458:	9504      	str	r5, [sp, #16]
 800b45a:	e6f1      	b.n	800b240 <draw_buf_flush+0x2bc>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 800b45c:	20a0      	movs	r0, #160	; 0xa0
 800b45e:	0180      	lsls	r0, r0, #6
 800b460:	f006 fe22 	bl	80120a8 <lv_mem_buf_get>
 800b464:	9007      	str	r0, [sp, #28]
 800b466:	e690      	b.n	800b18a <draw_buf_flush+0x206>
 800b468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b46a:	889a      	ldrh	r2, [r3, #4]
 800b46c:	4690      	mov	r8, r2
 800b46e:	881a      	ldrh	r2, [r3, #0]
 800b470:	4694      	mov	ip, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b472:	88da      	ldrh	r2, [r3, #6]
 800b474:	885b      	ldrh	r3, [r3, #2]
 800b476:	4691      	mov	r9, r2
 800b478:	469a      	mov	sl, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b47a:	4643      	mov	r3, r8
 800b47c:	1c58      	adds	r0, r3, #1
 800b47e:	4663      	mov	r3, ip
 800b480:	1ac0      	subs	r0, r0, r3
    uint32_t total = area_w * area_h;
 800b482:	b203      	sxth	r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b484:	1c50      	adds	r0, r2, #1
 800b486:	4652      	mov	r2, sl
 800b488:	1a80      	subs	r0, r0, r2
 800b48a:	b200      	sxth	r0, r0
 800b48c:	4358      	muls	r0, r3
    uint32_t i = total - 1, j = 0;
 800b48e:	1e42      	subs	r2, r0, #1
    while(i > j) {
 800b490:	2801      	cmp	r0, #1
 800b492:	d00f      	beq.n	800b4b4 <draw_buf_flush+0x530>
 800b494:	0021      	movs	r1, r4
 800b496:	46a3      	mov	fp, r4
 800b498:	0053      	lsls	r3, r2, #1
 800b49a:	18e3      	adds	r3, r4, r3
        tmp = color_p[i];
 800b49c:	881d      	ldrh	r5, [r3, #0]
        color_p[i] = color_p[j];
 800b49e:	880c      	ldrh	r4, [r1, #0]
    while(i > j) {
 800b4a0:	3b02      	subs	r3, #2
        color_p[i] = color_p[j];
 800b4a2:	805c      	strh	r4, [r3, #2]
        color_p[j] = tmp;
 800b4a4:	800d      	strh	r5, [r1, #0]
        i--;
 800b4a6:	0015      	movs	r5, r2
 800b4a8:	3a01      	subs	r2, #1
    while(i > j) {
 800b4aa:	3102      	adds	r1, #2
 800b4ac:	1b45      	subs	r5, r0, r5
 800b4ae:	4295      	cmp	r5, r2
 800b4b0:	d3f4      	bcc.n	800b49c <draw_buf_flush+0x518>
 800b4b2:	465c      	mov	r4, fp
    area->y2 = drv->ver_res - area->y1 - 1;
 800b4b4:	4652      	mov	r2, sl
 800b4b6:	8873      	ldrh	r3, [r6, #2]
 800b4b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b4ba:	3b01      	subs	r3, #1
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	1a9a      	subs	r2, r3, r2
 800b4c0:	b290      	uxth	r0, r2
    area->y1 = drv->ver_res - tmp_coord - 1;
 800b4c2:	464a      	mov	r2, r9
 800b4c4:	1a9b      	subs	r3, r3, r2
    area->x2 = drv->hor_res - area->x1 - 1;
 800b4c6:	4662      	mov	r2, ip
    area->y1 = drv->ver_res - tmp_coord - 1;
 800b4c8:	b29d      	uxth	r5, r3
 800b4ca:	8833      	ldrh	r3, [r6, #0]
    area->y2 = drv->ver_res - area->y1 - 1;
 800b4cc:	80c8      	strh	r0, [r1, #6]
    area->y1 = drv->ver_res - tmp_coord - 1;
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	b29b      	uxth	r3, r3
    area->x2 = drv->hor_res - area->x1 - 1;
 800b4d2:	1a9a      	subs	r2, r3, r2
 800b4d4:	b292      	uxth	r2, r2
 800b4d6:	808a      	strh	r2, [r1, #4]
 800b4d8:	4694      	mov	ip, r2
    area->x1 = drv->hor_res - tmp_coord - 1;
 800b4da:	4642      	mov	r2, r8
 800b4dc:	1a9b      	subs	r3, r3, r2
 800b4de:	b29b      	uxth	r3, r3
    area->y1 = drv->ver_res - tmp_coord - 1;
 800b4e0:	804d      	strh	r5, [r1, #2]
    area->x1 = drv->hor_res - tmp_coord - 1;
 800b4e2:	800b      	strh	r3, [r1, #0]
        .x1 = area->x1 + drv->offset_x,
 800b4e4:	8931      	ldrh	r1, [r6, #8]
    lv_area_t offset_area = {
 800b4e6:	aa1a      	add	r2, sp, #104	; 0x68
        .x1 = area->x1 + drv->offset_x,
 800b4e8:	18cb      	adds	r3, r1, r3
    lv_area_t offset_area = {
 800b4ea:	8013      	strh	r3, [r2, #0]
        .y1 = area->y1 + drv->offset_y,
 800b4ec:	8973      	ldrh	r3, [r6, #10]
 800b4ee:	195d      	adds	r5, r3, r5
    lv_area_t offset_area = {
 800b4f0:	8055      	strh	r5, [r2, #2]
        .x2 = area->x2 + drv->offset_x,
 800b4f2:	000a      	movs	r2, r1
        .y2 = area->y2 + drv->offset_y
 800b4f4:	181b      	adds	r3, r3, r0
        .x2 = area->x2 + drv->offset_x,
 800b4f6:	4462      	add	r2, ip
    lv_area_t offset_area = {
 800b4f8:	a91a      	add	r1, sp, #104	; 0x68
 800b4fa:	808a      	strh	r2, [r1, #4]
 800b4fc:	80cb      	strh	r3, [r1, #6]
    drv->flush_cb(drv, &offset_area, color_p);
 800b4fe:	0022      	movs	r2, r4
 800b500:	0030      	movs	r0, r6
 800b502:	6973      	ldr	r3, [r6, #20]
 800b504:	4798      	blx	r3
}
 800b506:	e58c      	b.n	800b022 <draw_buf_flush+0x9e>
                    area->x1 = init_y_off;
 800b508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b50a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b50c:	2600      	movs	r6, #0
 800b50e:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + area_w - 1;
 800b510:	9a18      	ldr	r2, [sp, #96]	; 0x60
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b512:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b514:	809a      	strh	r2, [r3, #4]
 800b516:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b518:	0011      	movs	r1, r2
 800b51a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b51c:	930e      	str	r3, [sp, #56]	; 0x38
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800b51e:	9504      	str	r5, [sp, #16]
 800b520:	e68e      	b.n	800b240 <draw_buf_flush+0x2bc>
 800b522:	46c0      	nop			; (mov r8, r8)

0800b524 <lv_refr_get_top_obj.part.0>:
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
 800b524:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b526:	000e      	movs	r6, r1
 800b528:	b083      	sub	sp, #12
    info.res = LV_COVER_RES_COVER;
 800b52a:	2300      	movs	r3, #0
 800b52c:	466a      	mov	r2, sp
    info.area = area_p;
 800b52e:	9001      	str	r0, [sp, #4]
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
 800b530:	0007      	movs	r7, r0
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800b532:	2112      	movs	r1, #18
 800b534:	0030      	movs	r0, r6
    info.res = LV_COVER_RES_COVER;
 800b536:	7013      	strb	r3, [r2, #0]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800b538:	f7f6 fc10 	bl	8001d5c <lv_event_send>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 800b53c:	466b      	mov	r3, sp
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	2b02      	cmp	r3, #2
 800b542:	d02a      	beq.n	800b59a <lv_refr_get_top_obj.part.0+0x76>
    int32_t child_cnt = lv_obj_get_child_cnt(obj);
 800b544:	0030      	movs	r0, r6
 800b546:	f7ff fd15 	bl	800af74 <lv_obj_get_child_cnt>
    for(i = child_cnt - 1; i >= 0; i--) {
 800b54a:	1e44      	subs	r4, r0, #1
 800b54c:	d420      	bmi.n	800b590 <lv_refr_get_top_obj.part.0+0x6c>
        lv_obj_t * child = obj->spec_attr->children[i];
 800b54e:	68b3      	ldr	r3, [r6, #8]
 800b550:	00a2      	lsls	r2, r4, #2
 800b552:	681b      	ldr	r3, [r3, #0]
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800b554:	0038      	movs	r0, r7
        lv_obj_t * child = obj->spec_attr->children[i];
 800b556:	58d5      	ldr	r5, [r2, r3]
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800b558:	2200      	movs	r2, #0
 800b55a:	0029      	movs	r1, r5
 800b55c:	3110      	adds	r1, #16
 800b55e:	f006 f899 	bl	8011694 <_lv_area_is_in>
 800b562:	2800      	cmp	r0, #0
 800b564:	d012      	beq.n	800b58c <lv_refr_get_top_obj.part.0+0x68>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800b566:	2101      	movs	r1, #1
 800b568:	0028      	movs	r0, r5
 800b56a:	f7f9 fd69 	bl	8005040 <lv_obj_has_flag>
 800b56e:	2800      	cmp	r0, #0
 800b570:	d10c      	bne.n	800b58c <lv_refr_get_top_obj.part.0+0x68>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800b572:	0028      	movs	r0, r5
 800b574:	f7fa f934 	bl	80057e0 <_lv_obj_get_layer_type>
 800b578:	2800      	cmp	r0, #0
 800b57a:	d107      	bne.n	800b58c <lv_refr_get_top_obj.part.0+0x68>
 800b57c:	0029      	movs	r1, r5
 800b57e:	0038      	movs	r0, r7
 800b580:	f7ff ffd0 	bl	800b524 <lv_refr_get_top_obj.part.0>
        if(found_p != NULL) {
 800b584:	2800      	cmp	r0, #0
 800b586:	d001      	beq.n	800b58c <lv_refr_get_top_obj.part.0+0x68>
}
 800b588:	b003      	add	sp, #12
 800b58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for(i = child_cnt - 1; i >= 0; i--) {
 800b58c:	3c01      	subs	r4, #1
 800b58e:	d2de      	bcs.n	800b54e <lv_refr_get_top_obj.part.0+0x2a>
    if(found_p == NULL && info.res == LV_COVER_RES_COVER) {
 800b590:	466b      	mov	r3, sp
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	0030      	movs	r0, r6
 800b596:	2b00      	cmp	r3, #0
 800b598:	d0f6      	beq.n	800b588 <lv_refr_get_top_obj.part.0+0x64>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 800b59a:	2000      	movs	r0, #0
 800b59c:	e7f4      	b.n	800b588 <lv_refr_get_top_obj.part.0+0x64>
 800b59e:	46c0      	nop			; (mov r8, r8)

0800b5a0 <_lv_refr_init>:
}
 800b5a0:	4770      	bx	lr
 800b5a2:	46c0      	nop			; (mov r8, r8)

0800b5a4 <lv_obj_redraw>:
{
 800b5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5a6:	46d6      	mov	lr, sl
 800b5a8:	464f      	mov	r7, r9
 800b5aa:	4646      	mov	r6, r8
 800b5ac:	000d      	movs	r5, r1
 800b5ae:	b5c0      	push	{r6, r7, lr}
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800b5b0:	6883      	ldr	r3, [r0, #8]
{
 800b5b2:	b086      	sub	sp, #24
    lv_obj_get_coords(obj, &obj_coords_ext);
 800b5b4:	a902      	add	r1, sp, #8
{
 800b5b6:	0007      	movs	r7, r0
    lv_obj_get_coords(obj, &obj_coords_ext);
 800b5b8:	0028      	movs	r0, r5
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800b5ba:	4699      	mov	r9, r3
    lv_obj_get_coords(obj, &obj_coords_ext);
 800b5bc:	f7fa fbc0 	bl	8005d40 <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800b5c0:	0028      	movs	r0, r5
 800b5c2:	f7fa f905 	bl	80057d0 <_lv_obj_get_ext_draw_size>
 800b5c6:	0001      	movs	r1, r0
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800b5c8:	0002      	movs	r2, r0
 800b5ca:	a802      	add	r0, sp, #8
 800b5cc:	f005 febe 	bl	801134c <lv_area_increase>
    bool com_clip_res = _lv_area_intersect(&clip_coords_for_obj, clip_area_ori, &obj_coords_ext);
 800b5d0:	4649      	mov	r1, r9
 800b5d2:	4668      	mov	r0, sp
 800b5d4:	aa02      	add	r2, sp, #8
 800b5d6:	f005 fed9 	bl	801138c <_lv_area_intersect>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d043      	beq.n	800b666 <lv_obj_redraw+0xc2>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800b5de:	466b      	mov	r3, sp
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 800b5e0:	003a      	movs	r2, r7
        draw_ctx->clip_area = &clip_coords_for_obj;
 800b5e2:	60bb      	str	r3, [r7, #8]
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 800b5e4:	2114      	movs	r1, #20
 800b5e6:	0028      	movs	r0, r5
 800b5e8:	f7f6 fbb8 	bl	8001d5c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 800b5ec:	003a      	movs	r2, r7
 800b5ee:	2115      	movs	r1, #21
 800b5f0:	0028      	movs	r0, r5
 800b5f2:	f7f6 fbb3 	bl	8001d5c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 800b5f6:	003a      	movs	r2, r7
 800b5f8:	2116      	movs	r1, #22
 800b5fa:	0028      	movs	r0, r5
 800b5fc:	f7f6 fbae 	bl	8001d5c <lv_event_send>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800b600:	2180      	movs	r1, #128	; 0x80
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 800b602:	2301      	movs	r3, #1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800b604:	0028      	movs	r0, r5
 800b606:	0309      	lsls	r1, r1, #12
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 800b608:	469a      	mov	sl, r3
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800b60a:	f7f9 fd19 	bl	8005040 <lv_obj_has_flag>
        clip_coords_for_children  = *clip_area_ori;
 800b60e:	ac04      	add	r4, sp, #16
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800b610:	2800      	cmp	r0, #0
 800b612:	d039      	beq.n	800b688 <lv_obj_redraw+0xe4>
        clip_coords_for_children  = *clip_area_ori;
 800b614:	2208      	movs	r2, #8
 800b616:	4649      	mov	r1, r9
 800b618:	0020      	movs	r0, r4
 800b61a:	f00f fff3 	bl	801b604 <memcpy>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800b61e:	0028      	movs	r0, r5
        draw_ctx->clip_area = &clip_coords_for_children;
 800b620:	60bc      	str	r4, [r7, #8]
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800b622:	f7ff fca7 	bl	800af74 <lv_obj_get_child_cnt>
 800b626:	4680      	mov	r8, r0
        for(i = 0; i < child_cnt; i++) {
 800b628:	2800      	cmp	r0, #0
 800b62a:	d011      	beq.n	800b650 <lv_obj_redraw+0xac>
 800b62c:	2400      	movs	r4, #0
            lv_obj_t * child = obj->spec_attr->children[i];
 800b62e:	68ab      	ldr	r3, [r5, #8]
 800b630:	00a2      	lsls	r2, r4, #2
 800b632:	681b      	ldr	r3, [r3, #0]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800b634:	2101      	movs	r1, #1
            lv_obj_t * child = obj->spec_attr->children[i];
 800b636:	58d6      	ldr	r6, [r2, r3]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800b638:	0030      	movs	r0, r6
 800b63a:	f7f9 fd01 	bl	8005040 <lv_obj_has_flag>
 800b63e:	2800      	cmp	r0, #0
 800b640:	d103      	bne.n	800b64a <lv_obj_redraw+0xa6>
 800b642:	0031      	movs	r1, r6
 800b644:	0038      	movs	r0, r7
 800b646:	f000 f83d 	bl	800b6c4 <refr_obj.part.0>
        for(i = 0; i < child_cnt; i++) {
 800b64a:	3401      	adds	r4, #1
 800b64c:	45a0      	cmp	r8, r4
 800b64e:	d1ee      	bne.n	800b62e <lv_obj_redraw+0x8a>
    if(should_draw) {
 800b650:	4653      	mov	r3, sl
 800b652:	2b00      	cmp	r3, #0
 800b654:	d123      	bne.n	800b69e <lv_obj_redraw+0xfa>
    draw_ctx->clip_area = clip_area_ori;
 800b656:	464b      	mov	r3, r9
 800b658:	60bb      	str	r3, [r7, #8]
}
 800b65a:	b006      	add	sp, #24
 800b65c:	bce0      	pop	{r5, r6, r7}
 800b65e:	46ba      	mov	sl, r7
 800b660:	46b1      	mov	r9, r6
 800b662:	46a8      	mov	r8, r5
 800b664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800b666:	2180      	movs	r1, #128	; 0x80
 800b668:	0028      	movs	r0, r5
 800b66a:	0309      	lsls	r1, r1, #12
 800b66c:	f7f9 fce8 	bl	8005040 <lv_obj_has_flag>
 800b670:	2800      	cmp	r0, #0
 800b672:	d1b4      	bne.n	800b5de <lv_obj_redraw+0x3a>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800b674:	2180      	movs	r1, #128	; 0x80
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800b676:	2300      	movs	r3, #0
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800b678:	0028      	movs	r0, r5
 800b67a:	0309      	lsls	r1, r1, #12
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800b67c:	469a      	mov	sl, r3
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800b67e:	f7f9 fcdf 	bl	8005040 <lv_obj_has_flag>
        clip_coords_for_children  = *clip_area_ori;
 800b682:	ac04      	add	r4, sp, #16
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800b684:	2800      	cmp	r0, #0
 800b686:	d1c5      	bne.n	800b614 <lv_obj_redraw+0x70>
        if(!_lv_area_intersect(&clip_coords_for_children, clip_area_ori, &obj->coords)) {
 800b688:	002a      	movs	r2, r5
 800b68a:	4649      	mov	r1, r9
 800b68c:	0020      	movs	r0, r4
 800b68e:	3210      	adds	r2, #16
 800b690:	f005 fe7c 	bl	801138c <_lv_area_intersect>
 800b694:	2800      	cmp	r0, #0
 800b696:	d1c2      	bne.n	800b61e <lv_obj_redraw+0x7a>
    if(should_draw) {
 800b698:	4653      	mov	r3, sl
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d0db      	beq.n	800b656 <lv_obj_redraw+0xb2>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800b69e:	466b      	mov	r3, sp
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 800b6a0:	003a      	movs	r2, r7
        draw_ctx->clip_area = &clip_coords_for_obj;
 800b6a2:	60bb      	str	r3, [r7, #8]
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 800b6a4:	2117      	movs	r1, #23
 800b6a6:	0028      	movs	r0, r5
 800b6a8:	f7f6 fb58 	bl	8001d5c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 800b6ac:	003a      	movs	r2, r7
 800b6ae:	2118      	movs	r1, #24
 800b6b0:	0028      	movs	r0, r5
 800b6b2:	f7f6 fb53 	bl	8001d5c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 800b6b6:	003a      	movs	r2, r7
 800b6b8:	2119      	movs	r1, #25
 800b6ba:	0028      	movs	r0, r5
 800b6bc:	f7f6 fb4e 	bl	8001d5c <lv_event_send>
 800b6c0:	e7c9      	b.n	800b656 <lv_obj_redraw+0xb2>
 800b6c2:	46c0      	nop			; (mov r8, r8)

0800b6c4 <refr_obj.part.0>:
void refr_obj(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
 800b6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6c6:	46de      	mov	lr, fp
 800b6c8:	464e      	mov	r6, r9
 800b6ca:	4645      	mov	r5, r8
 800b6cc:	4657      	mov	r7, sl
 800b6ce:	b5e0      	push	{r5, r6, r7, lr}
 800b6d0:	0005      	movs	r5, r0
 800b6d2:	b093      	sub	sp, #76	; 0x4c
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800b6d4:	0008      	movs	r0, r1
void refr_obj(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
 800b6d6:	000c      	movs	r4, r1
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800b6d8:	f7fa f882 	bl	80057e0 <_lv_obj_get_layer_type>
 800b6dc:	1e06      	subs	r6, r0, #0
    if(layer_type == LV_LAYER_TYPE_NONE) {
 800b6de:	d10a      	bne.n	800b6f6 <refr_obj.part.0+0x32>
        lv_obj_redraw(draw_ctx, obj);
 800b6e0:	0021      	movs	r1, r4
 800b6e2:	0028      	movs	r0, r5
 800b6e4:	f7ff ff5e 	bl	800b5a4 <lv_obj_redraw>
}
 800b6e8:	b013      	add	sp, #76	; 0x4c
 800b6ea:	bcf0      	pop	{r4, r5, r6, r7}
 800b6ec:	46bb      	mov	fp, r7
 800b6ee:	46b2      	mov	sl, r6
 800b6f0:	46a9      	mov	r9, r5
 800b6f2:	46a0      	mov	r8, r4
 800b6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800b6f6:	2260      	movs	r2, #96	; 0x60
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	0020      	movs	r0, r4
 800b6fc:	f7fd fff8 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800b700:	b2c3      	uxtb	r3, r0
 800b702:	4698      	mov	r8, r3
        if(opa < LV_OPA_MIN) return;
 800b704:	2b01      	cmp	r3, #1
 800b706:	d9ef      	bls.n	800b6e8 <refr_obj.part.0+0x24>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800b708:	0020      	movs	r0, r4
 800b70a:	f7fa f861 	bl	80057d0 <_lv_obj_get_ext_draw_size>
 800b70e:	0007      	movs	r7, r0
    lv_obj_get_coords(obj, &obj_coords_ext);
 800b710:	a906      	add	r1, sp, #24
 800b712:	0020      	movs	r0, r4
 800b714:	f7fa fb14 	bl	8005d40 <lv_obj_get_coords>
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800b718:	003a      	movs	r2, r7
 800b71a:	0039      	movs	r1, r7
 800b71c:	a806      	add	r0, sp, #24
 800b71e:	f005 fe15 	bl	801134c <lv_area_increase>
    if(layer_type == LV_LAYER_TYPE_TRANSFORM) {
 800b722:	2e02      	cmp	r6, #2
 800b724:	d100      	bne.n	800b728 <refr_obj.part.0+0x64>
 800b726:	e0c5      	b.n	800b8b4 <refr_obj.part.0+0x1f0>
    else if(layer_type == LV_LAYER_TYPE_SIMPLE) {
 800b728:	2e01      	cmp	r6, #1
 800b72a:	d1dd      	bne.n	800b6e8 <refr_obj.part.0+0x24>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 800b72c:	af0c      	add	r7, sp, #48	; 0x30
 800b72e:	0038      	movs	r0, r7
 800b730:	68a9      	ldr	r1, [r5, #8]
 800b732:	aa06      	add	r2, sp, #24
 800b734:	f005 fe2a 	bl	801138c <_lv_area_intersect>
 800b738:	2800      	cmp	r0, #0
 800b73a:	d0d5      	beq.n	800b6e8 <refr_obj.part.0+0x24>
        *layer_area_out = clip_coords_for_obj;
 800b73c:	ab04      	add	r3, sp, #16
 800b73e:	2208      	movs	r2, #8
 800b740:	0039      	movs	r1, r7
 800b742:	0018      	movs	r0, r3
 800b744:	4699      	mov	r9, r3
 800b746:	f00f ff5d 	bl	801b604 <memcpy>
        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 800b74a:	2310      	movs	r3, #16
 800b74c:	469c      	mov	ip, r3
 800b74e:	44a4      	add	ip, r4
 800b750:	4663      	mov	r3, ip
 800b752:	2200      	movs	r2, #0
 800b754:	4661      	mov	r1, ip
 800b756:	4648      	mov	r0, r9
 800b758:	9303      	str	r3, [sp, #12]
 800b75a:	f005 ff9b 	bl	8011694 <_lv_area_is_in>
 800b75e:	2800      	cmp	r0, #0
 800b760:	d000      	beq.n	800b764 <refr_obj.part.0+0xa0>
 800b762:	e0e5      	b.n	800b930 <refr_obj.part.0+0x26c>
 800b764:	2303      	movs	r3, #3
 800b766:	001a      	movs	r2, r3
 800b768:	9301      	str	r3, [sp, #4]
        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 800b76a:	4649      	mov	r1, r9
 800b76c:	0028      	movs	r0, r5
 800b76e:	f001 fba9 	bl	800cec4 <lv_draw_layer_create>
 800b772:	1e06      	subs	r6, r0, #0
        if(layer_ctx == NULL) {
 800b774:	d0b8      	beq.n	800b6e8 <refr_obj.part.0+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800b776:	226e      	movs	r2, #110	; 0x6e
 800b778:	2100      	movs	r1, #0
 800b77a:	0020      	movs	r0, r4
 800b77c:	f7fd ffb8 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 800b780:	226f      	movs	r2, #111	; 0x6f
 800b782:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800b784:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 800b786:	0020      	movs	r0, r4
 800b788:	f7fd ffb2 	bl	80096f0 <lv_obj_get_style_prop>
 800b78c:	4683      	mov	fp, r0
        lv_draw_img_dsc_init(&draw_dsc);
 800b78e:	0038      	movs	r0, r7
 800b790:	f000 fe44 	bl	800c41c <lv_draw_img_dsc_init>
        draw_dsc.opa = opa;
 800b794:	4643      	mov	r3, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800b796:	226d      	movs	r2, #109	; 0x6d
 800b798:	72fb      	strb	r3, [r7, #11]
 800b79a:	2100      	movs	r1, #0
 800b79c:	0020      	movs	r0, r4
 800b79e:	f7fd ffa7 	bl	80096f0 <lv_obj_get_style_prop>
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 800b7a2:	22e1      	movs	r2, #225	; 0xe1
    return (lv_coord_t)v.num;
 800b7a4:	b203      	sxth	r3, r0
 800b7a6:	0112      	lsls	r2, r2, #4
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	dc00      	bgt.n	800b7ae <refr_obj.part.0+0xea>
 800b7ac:	e0e8      	b.n	800b980 <refr_obj.part.0+0x2bc>
 800b7ae:	4b8a      	ldr	r3, [pc, #552]	; (800b9d8 <refr_obj.part.0+0x314>)
 800b7b0:	469c      	mov	ip, r3
 800b7b2:	4460      	add	r0, ip
 800b7b4:	8038      	strh	r0, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800b7b6:	226c      	movs	r2, #108	; 0x6c
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	0020      	movs	r0, r4
 800b7bc:	f7fd ff98 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800b7c0:	2267      	movs	r2, #103	; 0x67
 800b7c2:	2100      	movs	r1, #0
        draw_dsc.zoom = lv_obj_get_style_transform_zoom(obj, 0);
 800b7c4:	8078      	strh	r0, [r7, #2]
 800b7c6:	0020      	movs	r0, r4
 800b7c8:	f7fd ff92 	bl	80096f0 <lv_obj_get_style_prop>
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 800b7cc:	220f      	movs	r2, #15
 800b7ce:	0003      	movs	r3, r0
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 800b7d0:	2101      	movs	r1, #1
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 800b7d2:	7b38      	ldrb	r0, [r7, #12]
 800b7d4:	4013      	ands	r3, r2
 800b7d6:	4390      	bics	r0, r2
 800b7d8:	4318      	orrs	r0, r3
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 800b7da:	4b80      	ldr	r3, [pc, #512]	; (800b9dc <refr_obj.part.0+0x318>)
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 800b7dc:	7338      	strb	r0, [r7, #12]
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	7c1a      	ldrb	r2, [r3, #16]
 800b7e4:	7d3b      	ldrb	r3, [r7, #20]
 800b7e6:	08d2      	lsrs	r2, r2, #3
 800b7e8:	400a      	ands	r2, r1
 800b7ea:	438b      	bics	r3, r1
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	9a01      	ldr	r2, [sp, #4]
 800b7f0:	753b      	strb	r3, [r7, #20]
        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800b7f2:	0011      	movs	r1, r2
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	4019      	ands	r1, r3
 800b7f8:	4688      	mov	r8, r1
 800b7fa:	4213      	tst	r3, r2
 800b7fc:	d100      	bne.n	800b800 <refr_obj.part.0+0x13c>
 800b7fe:	e0bc      	b.n	800b97a <refr_obj.part.0+0x2b6>
            layer_ctx->area_act = layer_ctx->area_full;
 800b800:	0033      	movs	r3, r6
 800b802:	0032      	movs	r2, r6
 800b804:	3308      	adds	r3, #8
 800b806:	ca03      	ldmia	r2!, {r0, r1}
 800b808:	c303      	stmia	r3!, {r0, r1}
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800b80a:	230a      	movs	r3, #10
 800b80c:	5ef2      	ldrsh	r2, [r6, r3]
 800b80e:	8a73      	ldrh	r3, [r6, #18]
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800b810:	2006      	movs	r0, #6
 800b812:	5e31      	ldrsh	r1, [r6, r0]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800b814:	189b      	adds	r3, r3, r2
 800b816:	3b01      	subs	r3, #1
 800b818:	b21b      	sxth	r3, r3
 800b81a:	81f3      	strh	r3, [r6, #14]
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800b81c:	428b      	cmp	r3, r1
 800b81e:	dd00      	ble.n	800b822 <refr_obj.part.0+0x15e>
 800b820:	81f1      	strh	r1, [r6, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800b822:	464b      	mov	r3, r9
 800b824:	2106      	movs	r1, #6
 800b826:	5e5b      	ldrsh	r3, [r3, r1]
 800b828:	4293      	cmp	r3, r2
 800b82a:	da00      	bge.n	800b82e <refr_obj.part.0+0x16a>
 800b82c:	e091      	b.n	800b952 <refr_obj.part.0+0x28e>
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 800b82e:	4653      	mov	r3, sl
 800b830:	b29b      	uxth	r3, r3
 800b832:	469a      	mov	sl, r3
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 800b834:	465b      	mov	r3, fp
 800b836:	b29b      	uxth	r3, r3
 800b838:	469b      	mov	fp, r3
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 800b83a:	2308      	movs	r3, #8
 800b83c:	469c      	mov	ip, r3
 800b83e:	44b4      	add	ip, r6
 800b840:	4663      	mov	r3, ip
 800b842:	9302      	str	r3, [sp, #8]
 800b844:	e023      	b.n	800b88e <refr_obj.part.0+0x1ca>
            lv_obj_redraw(draw_ctx, obj);
 800b846:	0021      	movs	r1, r4
 800b848:	0028      	movs	r0, r5
 800b84a:	f7ff feab 	bl	800b5a4 <lv_obj_redraw>
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 800b84e:	686a      	ldr	r2, [r5, #4]
 800b850:	8a23      	ldrh	r3, [r4, #16]
 800b852:	8811      	ldrh	r1, [r2, #0]
 800b854:	4453      	add	r3, sl
 800b856:	1a5b      	subs	r3, r3, r1
 800b858:	80bb      	strh	r3, [r7, #4]
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 800b85a:	8a63      	ldrh	r3, [r4, #18]
 800b85c:	8852      	ldrh	r2, [r2, #2]
 800b85e:	445b      	add	r3, fp
 800b860:	1a9b      	subs	r3, r3, r2
 800b862:	80fb      	strh	r3, [r7, #6]
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 800b864:	003a      	movs	r2, r7
 800b866:	0031      	movs	r1, r6
 800b868:	0028      	movs	r0, r5
 800b86a:	f001 fb63 	bl	800cf34 <lv_draw_layer_blend>
            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 800b86e:	4643      	mov	r3, r8
 800b870:	2b00      	cmp	r3, #0
 800b872:	d06e      	beq.n	800b952 <refr_obj.part.0+0x28e>
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800b874:	89f3      	ldrh	r3, [r6, #14]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800b876:	8a72      	ldrh	r2, [r6, #18]
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800b878:	3301      	adds	r3, #1
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800b87a:	3a01      	subs	r2, #1
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800b87c:	b219      	sxth	r1, r3
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800b87e:	189b      	adds	r3, r3, r2
 800b880:	81f3      	strh	r3, [r6, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800b882:	464b      	mov	r3, r9
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800b884:	8171      	strh	r1, [r6, #10]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800b886:	2206      	movs	r2, #6
 800b888:	5e9b      	ldrsh	r3, [r3, r2]
 800b88a:	428b      	cmp	r3, r1
 800b88c:	db61      	blt.n	800b952 <refr_obj.part.0+0x28e>
            if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800b88e:	4643      	mov	r3, r8
 800b890:	2b00      	cmp	r3, #0
 800b892:	d0d8      	beq.n	800b846 <refr_obj.part.0+0x182>
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800b894:	9b01      	ldr	r3, [sp, #4]
 800b896:	2b02      	cmp	r3, #2
 800b898:	d160      	bne.n	800b95c <refr_obj.part.0+0x298>
    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800b89a:	220e      	movs	r2, #14
 800b89c:	5eb3      	ldrsh	r3, [r6, r2]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	2006      	movs	r0, #6
 800b8a2:	5e31      	ldrsh	r1, [r6, r0]
 800b8a4:	4299      	cmp	r1, r3
 800b8a6:	da00      	bge.n	800b8aa <refr_obj.part.0+0x1e6>
 800b8a8:	81f1      	strh	r1, [r6, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 800b8aa:	0031      	movs	r1, r6
 800b8ac:	0028      	movs	r0, r5
 800b8ae:	f001 fb3b 	bl	800cf28 <lv_draw_layer_adjust>
}
 800b8b2:	e7c8      	b.n	800b846 <refr_obj.part.0+0x182>
        lv_area_t tranf_coords = obj_coords_ext;
 800b8b4:	2208      	movs	r2, #8
 800b8b6:	a906      	add	r1, sp, #24
 800b8b8:	a80a      	add	r0, sp, #40	; 0x28
 800b8ba:	f00f fea3 	bl	801b604 <memcpy>
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 800b8be:	2200      	movs	r2, #0
 800b8c0:	0020      	movs	r0, r4
 800b8c2:	a90a      	add	r1, sp, #40	; 0x28
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f7fa fc15 	bl	80060f4 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 800b8ca:	68a9      	ldr	r1, [r5, #8]
 800b8cc:	aa0a      	add	r2, sp, #40	; 0x28
 800b8ce:	a808      	add	r0, sp, #32
 800b8d0:	f005 fd5c 	bl	801138c <_lv_area_intersect>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d100      	bne.n	800b8da <refr_obj.part.0+0x216>
 800b8d8:	e706      	b.n	800b6e8 <refr_obj.part.0+0x24>
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 800b8da:	af0c      	add	r7, sp, #48	; 0x30
 800b8dc:	2208      	movs	r2, #8
 800b8de:	a908      	add	r1, sp, #32
 800b8e0:	0038      	movs	r0, r7
 800b8e2:	f00f fe8f 	bl	801b604 <memcpy>
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	0039      	movs	r1, r7
 800b8ea:	0020      	movs	r0, r4
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	f7fa fc01 	bl	80060f4 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&inverse_clip_coords_for_obj, &inverse_clip_coords_for_obj, &obj_coords_ext)) {
 800b8f2:	0039      	movs	r1, r7
 800b8f4:	0038      	movs	r0, r7
 800b8f6:	aa06      	add	r2, sp, #24
 800b8f8:	f005 fd48 	bl	801138c <_lv_area_intersect>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	d100      	bne.n	800b902 <refr_obj.part.0+0x23e>
 800b900:	e6f2      	b.n	800b6e8 <refr_obj.part.0+0x24>
        *layer_area_out = inverse_clip_coords_for_obj;
 800b902:	ab04      	add	r3, sp, #16
 800b904:	2208      	movs	r2, #8
 800b906:	0039      	movs	r1, r7
 800b908:	0018      	movs	r0, r3
 800b90a:	4699      	mov	r9, r3
 800b90c:	f00f fe7a 	bl	801b604 <memcpy>
        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 800b910:	2310      	movs	r3, #16
 800b912:	469c      	mov	ip, r3
 800b914:	44a4      	add	ip, r4
 800b916:	4663      	mov	r3, ip
 800b918:	2200      	movs	r2, #0
 800b91a:	4661      	mov	r1, ip
 800b91c:	4648      	mov	r0, r9
 800b91e:	9303      	str	r3, [sp, #12]
 800b920:	f005 feb8 	bl	8011694 <_lv_area_is_in>
 800b924:	2800      	cmp	r0, #0
 800b926:	d146      	bne.n	800b9b6 <refr_obj.part.0+0x2f2>
        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800b928:	2301      	movs	r3, #1
 800b92a:	001a      	movs	r2, r3
 800b92c:	9301      	str	r3, [sp, #4]
 800b92e:	e71c      	b.n	800b76a <refr_obj.part.0+0xa6>
            info.res = LV_COVER_RES_COVER;
 800b930:	2300      	movs	r3, #0
 800b932:	703b      	strb	r3, [r7, #0]
            info.area = &layer_area_full;
 800b934:	464b      	mov	r3, r9
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800b936:	003a      	movs	r2, r7
            info.area = &layer_area_full;
 800b938:	607b      	str	r3, [r7, #4]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800b93a:	2112      	movs	r1, #18
 800b93c:	0020      	movs	r0, r4
 800b93e:	f7f6 fa0d 	bl	8001d5c <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800b942:	783b      	ldrb	r3, [r7, #0]
 800b944:	1e5a      	subs	r2, r3, #1
 800b946:	4193      	sbcs	r3, r2
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 800b948:	2202      	movs	r2, #2
 800b94a:	4313      	orrs	r3, r2
 800b94c:	001a      	movs	r2, r3
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	e70b      	b.n	800b76a <refr_obj.part.0+0xa6>
        lv_draw_layer_destroy(draw_ctx, layer_ctx);
 800b952:	0031      	movs	r1, r6
 800b954:	0028      	movs	r0, r5
 800b956:	f001 faf3 	bl	800cf40 <lv_draw_layer_destroy>
 800b95a:	e6c5      	b.n	800b6e8 <refr_obj.part.0+0x24>
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 800b95c:	2200      	movs	r2, #0
 800b95e:	9903      	ldr	r1, [sp, #12]
 800b960:	9802      	ldr	r0, [sp, #8]
 800b962:	f005 fe97 	bl	8011694 <_lv_area_is_in>
 800b966:	2800      	cmp	r0, #0
 800b968:	d10e      	bne.n	800b988 <refr_obj.part.0+0x2c4>
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_alpha - 1;
 800b96a:	8a32      	ldrh	r2, [r6, #16]
 800b96c:	8973      	ldrh	r3, [r6, #10]
 800b96e:	189b      	adds	r3, r3, r2
 800b970:	3b01      	subs	r3, #1
 800b972:	b21b      	sxth	r3, r3
 800b974:	2201      	movs	r2, #1
 800b976:	81f3      	strh	r3, [r6, #14]
 800b978:	e792      	b.n	800b8a0 <refr_obj.part.0+0x1dc>
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800b97a:	230a      	movs	r3, #10
 800b97c:	5ef2      	ldrsh	r2, [r6, r3]
 800b97e:	e750      	b.n	800b822 <refr_obj.part.0+0x15e>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 800b980:	2b00      	cmp	r3, #0
 800b982:	db12      	blt.n	800b9aa <refr_obj.part.0+0x2e6>
        draw_dsc.angle = lv_obj_get_style_transform_angle(obj, 0);
 800b984:	803b      	strh	r3, [r7, #0]
 800b986:	e716      	b.n	800b7b6 <refr_obj.part.0+0xf2>
            info.res = LV_COVER_RES_COVER;
 800b988:	2300      	movs	r3, #0
 800b98a:	aa04      	add	r2, sp, #16
 800b98c:	7613      	strb	r3, [r2, #24]
            info.area = &layer_ctx->area_act;
 800b98e:	9b02      	ldr	r3, [sp, #8]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800b990:	aa0a      	add	r2, sp, #40	; 0x28
 800b992:	2112      	movs	r1, #18
 800b994:	0020      	movs	r0, r4
            info.area = &layer_ctx->area_act;
 800b996:	930b      	str	r3, [sp, #44]	; 0x2c
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800b998:	f7f6 f9e0 	bl	8001d5c <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) has_alpha = false;
 800b99c:	ab04      	add	r3, sp, #16
 800b99e:	7e1a      	ldrb	r2, [r3, #24]
 800b9a0:	2a00      	cmp	r2, #0
 800b9a2:	d1e2      	bne.n	800b96a <refr_obj.part.0+0x2a6>
    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800b9a4:	210e      	movs	r1, #14
 800b9a6:	5e73      	ldrsh	r3, [r6, r1]
 800b9a8:	e77a      	b.n	800b8a0 <refr_obj.part.0+0x1dc>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 800b9aa:	23e1      	movs	r3, #225	; 0xe1
 800b9ac:	011b      	lsls	r3, r3, #4
 800b9ae:	469c      	mov	ip, r3
 800b9b0:	4460      	add	r0, ip
 800b9b2:	8038      	strh	r0, [r7, #0]
 800b9b4:	e6ff      	b.n	800b7b6 <refr_obj.part.0+0xf2>
            info.res = LV_COVER_RES_COVER;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	703b      	strb	r3, [r7, #0]
            info.area = &layer_area_full;
 800b9ba:	464b      	mov	r3, r9
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800b9bc:	003a      	movs	r2, r7
            info.area = &layer_area_full;
 800b9be:	607b      	str	r3, [r7, #4]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800b9c0:	2112      	movs	r1, #18
 800b9c2:	0020      	movs	r0, r4
 800b9c4:	f7f6 f9ca 	bl	8001d5c <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800b9c8:	783b      	ldrb	r3, [r7, #0]
 800b9ca:	1e5a      	subs	r2, r3, #1
 800b9cc:	4193      	sbcs	r3, r2
        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	001a      	movs	r2, r3
 800b9d2:	9301      	str	r3, [sp, #4]
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 800b9d4:	e6c9      	b.n	800b76a <refr_obj.part.0+0xa6>
 800b9d6:	46c0      	nop			; (mov r8, r8)
 800b9d8:	fffff1f0 	.word	0xfffff1f0
 800b9dc:	20003204 	.word	0x20003204

0800b9e0 <refr_obj_and_children>:
{
 800b9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9e2:	464f      	mov	r7, r9
 800b9e4:	4646      	mov	r6, r8
 800b9e6:	46d6      	mov	lr, sl
 800b9e8:	4681      	mov	r9, r0
 800b9ea:	4688      	mov	r8, r1
 800b9ec:	b5c0      	push	{r6, r7, lr}
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 800b9ee:	2900      	cmp	r1, #0
 800b9f0:	d049      	beq.n	800ba86 <refr_obj_and_children+0xa6>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800b9f2:	2101      	movs	r1, #1
 800b9f4:	4640      	mov	r0, r8
 800b9f6:	f7f9 fb23 	bl	8005040 <lv_obj_has_flag>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	d04f      	beq.n	800ba9e <refr_obj_and_children+0xbe>
    parent = lv_obj_get_parent(top_obj);
 800b9fe:	4640      	mov	r0, r8
 800ba00:	f7ff faa2 	bl	800af48 <lv_obj_get_parent>
 800ba04:	1e06      	subs	r6, r0, #0
    while(parent != NULL) {
 800ba06:	d045      	beq.n	800ba94 <refr_obj_and_children+0xb4>
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 800ba08:	0030      	movs	r0, r6
 800ba0a:	f7ff fab3 	bl	800af74 <lv_obj_get_child_cnt>
 800ba0e:	1e07      	subs	r7, r0, #0
        for(i = 0; i < child_cnt; i++) {
 800ba10:	d020      	beq.n	800ba54 <refr_obj_and_children+0x74>
        bool go = false;
 800ba12:	2300      	movs	r3, #0
        for(i = 0; i < child_cnt; i++) {
 800ba14:	2500      	movs	r5, #0
        bool go = false;
 800ba16:	469a      	mov	sl, r3
 800ba18:	e008      	b.n	800ba2c <refr_obj_and_children+0x4c>
                if(child == border_p) go = true;
 800ba1a:	4643      	mov	r3, r8
 800ba1c:	1ae4      	subs	r4, r4, r3
 800ba1e:	4263      	negs	r3, r4
 800ba20:	415c      	adcs	r4, r3
 800ba22:	b2e3      	uxtb	r3, r4
 800ba24:	469a      	mov	sl, r3
        for(i = 0; i < child_cnt; i++) {
 800ba26:	3501      	adds	r5, #1
 800ba28:	42af      	cmp	r7, r5
 800ba2a:	d013      	beq.n	800ba54 <refr_obj_and_children+0x74>
            lv_obj_t * child = parent->spec_attr->children[i];
 800ba2c:	68b3      	ldr	r3, [r6, #8]
 800ba2e:	00aa      	lsls	r2, r5, #2
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	58d4      	ldr	r4, [r2, r3]
            if(!go) {
 800ba34:	4653      	mov	r3, sl
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d0ef      	beq.n	800ba1a <refr_obj_and_children+0x3a>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800ba3a:	2101      	movs	r1, #1
 800ba3c:	0020      	movs	r0, r4
 800ba3e:	f7f9 faff 	bl	8005040 <lv_obj_has_flag>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d11d      	bne.n	800ba82 <refr_obj_and_children+0xa2>
 800ba46:	0021      	movs	r1, r4
 800ba48:	4648      	mov	r0, r9
        for(i = 0; i < child_cnt; i++) {
 800ba4a:	3501      	adds	r5, #1
 800ba4c:	f7ff fe3a 	bl	800b6c4 <refr_obj.part.0>
 800ba50:	42af      	cmp	r7, r5
 800ba52:	d1eb      	bne.n	800ba2c <refr_obj_and_children+0x4c>
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 800ba54:	464a      	mov	r2, r9
 800ba56:	2117      	movs	r1, #23
 800ba58:	0030      	movs	r0, r6
 800ba5a:	f7f6 f97f 	bl	8001d5c <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 800ba5e:	464a      	mov	r2, r9
 800ba60:	2118      	movs	r1, #24
 800ba62:	0030      	movs	r0, r6
 800ba64:	f7f6 f97a 	bl	8001d5c <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 800ba68:	464a      	mov	r2, r9
 800ba6a:	2119      	movs	r1, #25
 800ba6c:	0030      	movs	r0, r6
 800ba6e:	f7f6 f975 	bl	8001d5c <lv_event_send>
        parent = lv_obj_get_parent(parent);
 800ba72:	0030      	movs	r0, r6
 800ba74:	f7ff fa68 	bl	800af48 <lv_obj_get_parent>
    while(parent != NULL) {
 800ba78:	46b0      	mov	r8, r6
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	d00a      	beq.n	800ba94 <refr_obj_and_children+0xb4>
 800ba7e:	0006      	movs	r6, r0
 800ba80:	e7c2      	b.n	800ba08 <refr_obj_and_children+0x28>
 800ba82:	4682      	mov	sl, r0
 800ba84:	e7cf      	b.n	800ba26 <refr_obj_and_children+0x46>
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 800ba86:	4b08      	ldr	r3, [pc, #32]	; (800baa8 <refr_obj_and_children+0xc8>)
 800ba88:	6818      	ldr	r0, [r3, #0]
 800ba8a:	f7f5 fe77 	bl	800177c <lv_disp_get_scr_act>
 800ba8e:	4680      	mov	r8, r0
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d1ae      	bne.n	800b9f2 <refr_obj_and_children+0x12>
}
 800ba94:	bce0      	pop	{r5, r6, r7}
 800ba96:	46ba      	mov	sl, r7
 800ba98:	46b1      	mov	r9, r6
 800ba9a:	46a8      	mov	r8, r5
 800ba9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba9e:	4641      	mov	r1, r8
 800baa0:	4648      	mov	r0, r9
 800baa2:	f7ff fe0f 	bl	800b6c4 <refr_obj.part.0>
 800baa6:	e7aa      	b.n	800b9fe <refr_obj_and_children+0x1e>
 800baa8:	20003204 	.word	0x20003204

0800baac <refr_area_part>:
{
 800baac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baae:	46ce      	mov	lr, r9
 800bab0:	4647      	mov	r7, r8
 800bab2:	b580      	push	{r7, lr}
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800bab4:	4c9a      	ldr	r4, [pc, #616]	; (800bd20 <refr_area_part+0x274>)
{
 800bab6:	0006      	movs	r6, r0
 800bab8:	b095      	sub	sp, #84	; 0x54
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800baba:	6820      	ldr	r0, [r4, #0]
 800babc:	f005 f8a8 	bl	8010c10 <lv_disp_get_draw_buf>
    if(draw_buf->buf1 && !draw_buf->buf2) {
 800bac0:	6803      	ldr	r3, [r0, #0]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800bac2:	0005      	movs	r5, r0
    if(draw_buf->buf1 && !draw_buf->buf2) {
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d003      	beq.n	800bad0 <refr_area_part+0x24>
 800bac8:	6843      	ldr	r3, [r0, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d100      	bne.n	800bad0 <refr_area_part+0x24>
 800bace:	e087      	b.n	800bbe0 <refr_area_part+0x134>
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 800bad0:	6820      	ldr	r0, [r4, #0]
 800bad2:	6877      	ldr	r7, [r6, #4]
 800bad4:	f7f5 fe52 	bl	800177c <lv_disp_get_scr_act>
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800bad8:	0001      	movs	r1, r0
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 800bada:	0005      	movs	r5, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800badc:	2200      	movs	r2, #0
 800bade:	0038      	movs	r0, r7
 800bae0:	3110      	adds	r1, #16
 800bae2:	f005 fdd7 	bl	8011694 <_lv_area_is_in>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d029      	beq.n	800bb3e <refr_area_part+0x92>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800baea:	2101      	movs	r1, #1
 800baec:	0028      	movs	r0, r5
 800baee:	f7f9 faa7 	bl	8005040 <lv_obj_has_flag>
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d123      	bne.n	800bb3e <refr_area_part+0x92>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800baf6:	0028      	movs	r0, r5
 800baf8:	f7f9 fe72 	bl	80057e0 <_lv_obj_get_layer_type>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d11e      	bne.n	800bb3e <refr_area_part+0x92>
 800bb00:	0029      	movs	r1, r5
 800bb02:	0038      	movs	r0, r7
 800bb04:	f7ff fd0e 	bl	800b524 <lv_refr_get_top_obj.part.0>
 800bb08:	0007      	movs	r7, r0
    if(disp_refr->prev_scr) {
 800bb0a:	6820      	ldr	r0, [r4, #0]
 800bb0c:	6945      	ldr	r5, [r0, #20]
 800bb0e:	2d00      	cmp	r5, #0
 800bb10:	d000      	beq.n	800bb14 <refr_area_part+0x68>
 800bb12:	e08d      	b.n	800bc30 <refr_area_part+0x184>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800bb14:	2f00      	cmp	r7, #0
 800bb16:	d100      	bne.n	800bb1a <refr_area_part+0x6e>
 800bb18:	e098      	b.n	800bc4c <refr_area_part+0x1a0>
    if(disp_refr->draw_prev_over_act) {
 800bb1a:	2328      	movs	r3, #40	; 0x28
 800bb1c:	5cc3      	ldrb	r3, [r0, r3]
 800bb1e:	07db      	lsls	r3, r3, #31
 800bb20:	d540      	bpl.n	800bba4 <refr_area_part+0xf8>
        refr_obj_and_children(draw_ctx, top_act_scr);
 800bb22:	0030      	movs	r0, r6
 800bb24:	0039      	movs	r1, r7
 800bb26:	f7ff ff5b 	bl	800b9e0 <refr_obj_and_children>
        if(disp_refr->prev_scr) {
 800bb2a:	6820      	ldr	r0, [r4, #0]
 800bb2c:	6945      	ldr	r5, [r0, #20]
 800bb2e:	2d00      	cmp	r5, #0
 800bb30:	d03d      	beq.n	800bbae <refr_area_part+0x102>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800bb32:	0030      	movs	r0, r6
 800bb34:	0029      	movs	r1, r5
 800bb36:	f7ff ff53 	bl	800b9e0 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 800bb3a:	6820      	ldr	r0, [r4, #0]
 800bb3c:	e037      	b.n	800bbae <refr_area_part+0x102>
    if(disp_refr->prev_scr) {
 800bb3e:	6820      	ldr	r0, [r4, #0]
 800bb40:	6945      	ldr	r5, [r0, #20]
 800bb42:	2d00      	cmp	r5, #0
 800bb44:	d100      	bne.n	800bb48 <refr_area_part+0x9c>
 800bb46:	e081      	b.n	800bc4c <refr_area_part+0x1a0>
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800bb48:	0029      	movs	r1, r5
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 800bb4a:	6873      	ldr	r3, [r6, #4]
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	0018      	movs	r0, r3
 800bb50:	3110      	adds	r1, #16
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 800bb52:	4698      	mov	r8, r3
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800bb54:	f005 fd9e 	bl	8011694 <_lv_area_is_in>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d100      	bne.n	800bb5e <refr_area_part+0xb2>
 800bb5c:	e075      	b.n	800bc4a <refr_area_part+0x19e>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800bb5e:	2101      	movs	r1, #1
 800bb60:	0028      	movs	r0, r5
 800bb62:	f7f9 fa6d 	bl	8005040 <lv_obj_has_flag>
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d000      	beq.n	800bb6c <refr_area_part+0xc0>
 800bb6a:	e06e      	b.n	800bc4a <refr_area_part+0x19e>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800bb6c:	0028      	movs	r0, r5
 800bb6e:	f7f9 fe37 	bl	80057e0 <_lv_obj_get_layer_type>
 800bb72:	2800      	cmp	r0, #0
 800bb74:	d169      	bne.n	800bc4a <refr_area_part+0x19e>
 800bb76:	2700      	movs	r7, #0
 800bb78:	0029      	movs	r1, r5
 800bb7a:	4640      	mov	r0, r8
 800bb7c:	f7ff fcd2 	bl	800b524 <lv_refr_get_top_obj.part.0>
 800bb80:	0005      	movs	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800bb82:	2f00      	cmp	r7, #0
 800bb84:	d048      	beq.n	800bc18 <refr_area_part+0x16c>
    if(disp_refr->draw_prev_over_act) {
 800bb86:	2228      	movs	r2, #40	; 0x28
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	5c9a      	ldrb	r2, [r3, r2]
 800bb8c:	07d2      	lsls	r2, r2, #31
 800bb8e:	d436      	bmi.n	800bbfe <refr_area_part+0x152>
        if(disp_refr->prev_scr) {
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d006      	beq.n	800bba4 <refr_area_part+0xf8>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800bb96:	2d00      	cmp	r5, #0
 800bb98:	d100      	bne.n	800bb9c <refr_area_part+0xf0>
 800bb9a:	e0a2      	b.n	800bce2 <refr_area_part+0x236>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800bb9c:	0029      	movs	r1, r5
 800bb9e:	0030      	movs	r0, r6
 800bba0:	f7ff ff1e 	bl	800b9e0 <refr_obj_and_children>
        refr_obj_and_children(draw_ctx, top_act_scr);
 800bba4:	0030      	movs	r0, r6
 800bba6:	0039      	movs	r1, r7
 800bba8:	f7ff ff1a 	bl	800b9e0 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 800bbac:	6820      	ldr	r0, [r4, #0]
 800bbae:	f7f5 fe01 	bl	80017b4 <lv_disp_get_layer_top>
 800bbb2:	0001      	movs	r1, r0
 800bbb4:	0030      	movs	r0, r6
 800bbb6:	f7ff ff13 	bl	800b9e0 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 800bbba:	6820      	ldr	r0, [r4, #0]
 800bbbc:	f7f5 fe08 	bl	80017d0 <lv_disp_get_layer_sys>
 800bbc0:	0001      	movs	r1, r0
 800bbc2:	0030      	movs	r0, r6
 800bbc4:	f7ff ff0c 	bl	800b9e0 <refr_obj_and_children>
    if(disp_refr->driver->full_refresh == false) {
 800bbc8:	6820      	ldr	r0, [r4, #0]
 800bbca:	6803      	ldr	r3, [r0, #0]
 800bbcc:	7c1b      	ldrb	r3, [r3, #16]
 800bbce:	079b      	lsls	r3, r3, #30
 800bbd0:	d510      	bpl.n	800bbf4 <refr_area_part+0x148>
}
 800bbd2:	b015      	add	sp, #84	; 0x54
 800bbd4:	bcc0      	pop	{r6, r7}
 800bbd6:	46b9      	mov	r9, r7
 800bbd8:	46b0      	mov	r8, r6
 800bbda:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800bbdc:	0010      	movs	r0, r2
 800bbde:	4798      	blx	r3
 800bbe0:	6820      	ldr	r0, [r4, #0]
        while(draw_buf->flushing) {
 800bbe2:	692b      	ldr	r3, [r5, #16]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d100      	bne.n	800bbea <refr_area_part+0x13e>
 800bbe8:	e773      	b.n	800bad2 <refr_area_part+0x26>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800bbea:	6802      	ldr	r2, [r0, #0]
 800bbec:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d0f7      	beq.n	800bbe2 <refr_area_part+0x136>
 800bbf2:	e7f3      	b.n	800bbdc <refr_area_part+0x130>
        draw_buf_flush(disp_refr);
 800bbf4:	f7ff f9c6 	bl	800af84 <draw_buf_flush>
}
 800bbf8:	e7eb      	b.n	800bbd2 <refr_area_part+0x126>
 800bbfa:	2500      	movs	r5, #0
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800bbfc:	691f      	ldr	r7, [r3, #16]
        refr_obj_and_children(draw_ctx, top_act_scr);
 800bbfe:	0030      	movs	r0, r6
 800bc00:	0039      	movs	r1, r7
 800bc02:	f7ff feed 	bl	800b9e0 <refr_obj_and_children>
        if(disp_refr->prev_scr) {
 800bc06:	6820      	ldr	r0, [r4, #0]
 800bc08:	6943      	ldr	r3, [r0, #20]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d0cf      	beq.n	800bbae <refr_area_part+0x102>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800bc0e:	2d00      	cmp	r5, #0
 800bc10:	d000      	beq.n	800bc14 <refr_area_part+0x168>
 800bc12:	e78e      	b.n	800bb32 <refr_area_part+0x86>
 800bc14:	001d      	movs	r5, r3
 800bc16:	e78c      	b.n	800bb32 <refr_area_part+0x86>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d016      	beq.n	800bc4a <refr_area_part+0x19e>
    if(disp_refr->draw_prev_over_act) {
 800bc1c:	2228      	movs	r2, #40	; 0x28
 800bc1e:	6823      	ldr	r3, [r4, #0]
 800bc20:	5c9a      	ldrb	r2, [r3, r2]
 800bc22:	07d2      	lsls	r2, r2, #31
 800bc24:	d4ea      	bmi.n	800bbfc <refr_area_part+0x150>
        if(disp_refr->prev_scr) {
 800bc26:	695b      	ldr	r3, [r3, #20]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d03f      	beq.n	800bcac <refr_area_part+0x200>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800bc2c:	0001      	movs	r1, r0
 800bc2e:	e03a      	b.n	800bca6 <refr_area_part+0x1fa>
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800bc30:	0029      	movs	r1, r5
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 800bc32:	6873      	ldr	r3, [r6, #4]
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800bc34:	2200      	movs	r2, #0
 800bc36:	0018      	movs	r0, r3
 800bc38:	3110      	adds	r1, #16
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 800bc3a:	4698      	mov	r8, r3
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800bc3c:	f005 fd2a 	bl	8011694 <_lv_area_is_in>
 800bc40:	2800      	cmp	r0, #0
 800bc42:	d160      	bne.n	800bd06 <refr_area_part+0x25a>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800bc44:	2500      	movs	r5, #0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800bc46:	2f00      	cmp	r7, #0
 800bc48:	d19d      	bne.n	800bb86 <refr_area_part+0xda>
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800bc4a:	6820      	ldr	r0, [r4, #0]
 800bc4c:	f004 ff94 	bl	8010b78 <lv_disp_get_hor_res>
 800bc50:	0005      	movs	r5, r0
 800bc52:	6820      	ldr	r0, [r4, #0]
 800bc54:	f004 ffa4 	bl	8010ba0 <lv_disp_get_ver_res>
 800bc58:	3801      	subs	r0, #1
        lv_area_set(&a, 0, 0,
 800bc5a:	b200      	sxth	r0, r0
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800bc5c:	3d01      	subs	r5, #1
        lv_area_set(&a, 0, 0,
 800bc5e:	b22b      	sxth	r3, r5
 800bc60:	9000      	str	r0, [sp, #0]
 800bc62:	2200      	movs	r2, #0
 800bc64:	2100      	movs	r1, #0
 800bc66:	a804      	add	r0, sp, #16
 800bc68:	f005 fb50 	bl	801130c <lv_area_set>
        if(draw_ctx->draw_bg) {
 800bc6c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d01f      	beq.n	800bcb2 <refr_area_part+0x206>
            lv_draw_rect_dsc_init(&dsc);
 800bc72:	ad06      	add	r5, sp, #24
 800bc74:	0028      	movs	r0, r5
 800bc76:	f001 f99d 	bl	800cfb4 <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 800bc7a:	6823      	ldr	r3, [r4, #0]
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 800bc7c:	0029      	movs	r1, r5
            dsc.bg_img_src = disp_refr->bg_img;
 800bc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 800bc80:	0030      	movs	r0, r6
            dsc.bg_img_src = disp_refr->bg_img;
 800bc82:	920a      	str	r2, [sp, #40]	; 0x28
            dsc.bg_img_opa = disp_refr->bg_opa;
 800bc84:	2229      	movs	r2, #41	; 0x29
 800bc86:	5c9a      	ldrb	r2, [r3, r2]
 800bc88:	76aa      	strb	r2, [r5, #26]
            dsc.bg_color = disp_refr->bg_color;
 800bc8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
            dsc.bg_opa = disp_refr->bg_opa;
 800bc8c:	70ea      	strb	r2, [r5, #3]
            dsc.bg_color = disp_refr->bg_color;
 800bc8e:	80ab      	strh	r3, [r5, #4]
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 800bc90:	aa04      	add	r2, sp, #16
 800bc92:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800bc94:	4798      	blx	r3
    if(disp_refr->draw_prev_over_act) {
 800bc96:	2228      	movs	r2, #40	; 0x28
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	5c9a      	ldrb	r2, [r3, r2]
 800bc9c:	07d2      	lsls	r2, r2, #31
 800bc9e:	d4ac      	bmi.n	800bbfa <refr_area_part+0x14e>
        if(disp_refr->prev_scr) {
 800bca0:	6959      	ldr	r1, [r3, #20]
 800bca2:	2900      	cmp	r1, #0
 800bca4:	d003      	beq.n	800bcae <refr_area_part+0x202>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800bca6:	0030      	movs	r0, r6
 800bca8:	f7ff fe9a 	bl	800b9e0 <refr_obj_and_children>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	691f      	ldr	r7, [r3, #16]
 800bcb0:	e778      	b.n	800bba4 <refr_area_part+0xf8>
        else if(disp_refr->bg_img) {
 800bcb2:	6823      	ldr	r3, [r4, #0]
 800bcb4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d015      	beq.n	800bce6 <refr_area_part+0x23a>
            lv_res_t res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800bcba:	a903      	add	r1, sp, #12
 800bcbc:	f001 fda8 	bl	800d810 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 800bcc0:	2801      	cmp	r0, #1
 800bcc2:	d1e8      	bne.n	800bc96 <refr_area_part+0x1ea>
                lv_draw_img_dsc_init(&dsc);
 800bcc4:	ad06      	add	r5, sp, #24
 800bcc6:	0028      	movs	r0, r5
 800bcc8:	f000 fba8 	bl	800c41c <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 800bccc:	2229      	movs	r2, #41	; 0x29
 800bcce:	6823      	ldr	r3, [r4, #0]
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 800bcd0:	0029      	movs	r1, r5
                dsc.opa = disp_refr->bg_opa;
 800bcd2:	5c9a      	ldrb	r2, [r3, r2]
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 800bcd4:	0030      	movs	r0, r6
                dsc.opa = disp_refr->bg_opa;
 800bcd6:	72ea      	strb	r2, [r5, #11]
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 800bcd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcda:	aa04      	add	r2, sp, #16
 800bcdc:	f000 fbae 	bl	800c43c <lv_draw_img>
                LV_LOG_WARN("Can't draw the background image");
 800bce0:	e7d9      	b.n	800bc96 <refr_area_part+0x1ea>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 800bce2:	001d      	movs	r5, r3
 800bce4:	e75a      	b.n	800bb9c <refr_area_part+0xf0>
            lv_draw_rect_dsc_init(&dsc);
 800bce6:	a806      	add	r0, sp, #24
 800bce8:	f001 f964 	bl	800cfb4 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800bcec:	4669      	mov	r1, sp
 800bcee:	6823      	ldr	r3, [r4, #0]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 800bcf0:	0030      	movs	r0, r6
            dsc.bg_color = disp_refr->bg_color;
 800bcf2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bcf4:	838a      	strh	r2, [r1, #28]
            dsc.bg_opa = disp_refr->bg_opa;
 800bcf6:	2229      	movs	r2, #41	; 0x29
 800bcf8:	5c9b      	ldrb	r3, [r3, r2]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 800bcfa:	6872      	ldr	r2, [r6, #4]
            dsc.bg_opa = disp_refr->bg_opa;
 800bcfc:	76cb      	strb	r3, [r1, #27]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 800bcfe:	a906      	add	r1, sp, #24
 800bd00:	f001 f97e 	bl	800d000 <lv_draw_rect>
 800bd04:	e7c7      	b.n	800bc96 <refr_area_part+0x1ea>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800bd06:	2101      	movs	r1, #1
 800bd08:	0028      	movs	r0, r5
 800bd0a:	f7f9 f999 	bl	8005040 <lv_obj_has_flag>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	d198      	bne.n	800bc44 <refr_area_part+0x198>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800bd12:	0028      	movs	r0, r5
 800bd14:	f7f9 fd64 	bl	80057e0 <_lv_obj_get_layer_type>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d100      	bne.n	800bd1e <refr_area_part+0x272>
 800bd1c:	e72c      	b.n	800bb78 <refr_area_part+0xcc>
 800bd1e:	e791      	b.n	800bc44 <refr_area_part+0x198>
 800bd20:	20003204 	.word	0x20003204

0800bd24 <_lv_inv_area>:
{
 800bd24:	b570      	push	{r4, r5, r6, lr}
 800bd26:	0004      	movs	r4, r0
 800bd28:	000d      	movs	r5, r1
 800bd2a:	b084      	sub	sp, #16
    if(!disp) disp = lv_disp_get_default();
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d040      	beq.n	800bdb2 <_lv_inv_area+0x8e>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800bd30:	0020      	movs	r0, r4
 800bd32:	f7f5 ff1b 	bl	8001b6c <lv_disp_is_invalidation_enabled>
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d039      	beq.n	800bdae <_lv_inv_area+0x8a>
    if(disp->rendering_in_progress) {
 800bd3a:	2204      	movs	r2, #4
 800bd3c:	2328      	movs	r3, #40	; 0x28
 800bd3e:	0011      	movs	r1, r2
 800bd40:	5ce3      	ldrb	r3, [r4, r3]
 800bd42:	4019      	ands	r1, r3
 800bd44:	421a      	tst	r2, r3
 800bd46:	d132      	bne.n	800bdae <_lv_inv_area+0x8a>
    if(area_p == NULL) {
 800bd48:	2d00      	cmp	r5, #0
 800bd4a:	d037      	beq.n	800bdbc <_lv_inv_area+0x98>
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800bd4c:	0020      	movs	r0, r4
    scr_area.x1 = 0;
 800bd4e:	9100      	str	r1, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800bd50:	f004 ff12 	bl	8010b78 <lv_disp_get_hor_res>
 800bd54:	466e      	mov	r6, sp
 800bd56:	3801      	subs	r0, #1
 800bd58:	80b0      	strh	r0, [r6, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800bd5a:	0020      	movs	r0, r4
 800bd5c:	f004 ff20 	bl	8010ba0 <lv_disp_get_ver_res>
 800bd60:	3801      	subs	r0, #1
 800bd62:	80f0      	strh	r0, [r6, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800bd64:	0032      	movs	r2, r6
 800bd66:	0029      	movs	r1, r5
 800bd68:	a802      	add	r0, sp, #8
 800bd6a:	f005 fb0f 	bl	801138c <_lv_area_intersect>
    if(suc == false)  return; /*Out of the screen*/
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d01d      	beq.n	800bdae <_lv_inv_area+0x8a>
    if(disp->driver->full_refresh) {
 800bd72:	6820      	ldr	r0, [r4, #0]
 800bd74:	7c03      	ldrb	r3, [r0, #16]
 800bd76:	079b      	lsls	r3, r3, #30
 800bd78:	d424      	bmi.n	800bdc4 <_lv_inv_area+0xa0>
    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 800bd7a:	6983      	ldr	r3, [r0, #24]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d001      	beq.n	800bd84 <_lv_inv_area+0x60>
 800bd80:	a902      	add	r1, sp, #8
 800bd82:	4798      	blx	r3
    for(i = 0; i < disp->inv_p; i++) {
 800bd84:	26a8      	movs	r6, #168	; 0xa8
 800bd86:	0076      	lsls	r6, r6, #1
 800bd88:	5ba3      	ldrh	r3, [r4, r6]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d037      	beq.n	800bdfe <_lv_inv_area+0xda>
 800bd8e:	2500      	movs	r5, #0
 800bd90:	e004      	b.n	800bd9c <_lv_inv_area+0x78>
 800bd92:	3501      	adds	r5, #1
 800bd94:	5ba3      	ldrh	r3, [r4, r6]
 800bd96:	b2ad      	uxth	r5, r5
 800bd98:	42ab      	cmp	r3, r5
 800bd9a:	d921      	bls.n	800bde0 <_lv_inv_area+0xbc>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800bd9c:	1da9      	adds	r1, r5, #6
 800bd9e:	00c9      	lsls	r1, r1, #3
 800bda0:	2200      	movs	r2, #0
 800bda2:	1861      	adds	r1, r4, r1
 800bda4:	a802      	add	r0, sp, #8
 800bda6:	f005 fc75 	bl	8011694 <_lv_area_is_in>
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	d0f1      	beq.n	800bd92 <_lv_inv_area+0x6e>
}
 800bdae:	b004      	add	sp, #16
 800bdb0:	bd70      	pop	{r4, r5, r6, pc}
    if(!disp) disp = lv_disp_get_default();
 800bdb2:	f004 fedb 	bl	8010b6c <lv_disp_get_default>
 800bdb6:	1e04      	subs	r4, r0, #0
    if(!disp) return;
 800bdb8:	d0f9      	beq.n	800bdae <_lv_inv_area+0x8a>
 800bdba:	e7b9      	b.n	800bd30 <_lv_inv_area+0xc>
        disp->inv_p = 0;
 800bdbc:	23a8      	movs	r3, #168	; 0xa8
 800bdbe:	005b      	lsls	r3, r3, #1
 800bdc0:	52e5      	strh	r5, [r4, r3]
        return;
 800bdc2:	e7f4      	b.n	800bdae <_lv_inv_area+0x8a>
        disp->inv_areas[0] = scr_area;
 800bdc4:	0023      	movs	r3, r4
 800bdc6:	3330      	adds	r3, #48	; 0x30
 800bdc8:	ce06      	ldmia	r6!, {r1, r2}
 800bdca:	c306      	stmia	r3!, {r1, r2}
        disp->inv_p = 1;
 800bdcc:	23a8      	movs	r3, #168	; 0xa8
 800bdce:	2201      	movs	r2, #1
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800bdd0:	6860      	ldr	r0, [r4, #4]
        disp->inv_p = 1;
 800bdd2:	005b      	lsls	r3, r3, #1
 800bdd4:	52e2      	strh	r2, [r4, r3]
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	d0e9      	beq.n	800bdae <_lv_inv_area+0x8a>
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800bdda:	f007 f879 	bl	8012ed0 <lv_timer_resume>
 800bdde:	e7e6      	b.n	800bdae <_lv_inv_area+0x8a>
        lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 800bde0:	001a      	movs	r2, r3
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 800bde2:	2b1f      	cmp	r3, #31
 800bde4:	d90c      	bls.n	800be00 <_lv_inv_area+0xdc>
    dest->x1 = src->x1;
 800bde6:	9b00      	ldr	r3, [sp, #0]
 800bde8:	6323      	str	r3, [r4, #48]	; 0x30
 800bdea:	9b01      	ldr	r3, [sp, #4]
 800bdec:	6363      	str	r3, [r4, #52]	; 0x34
}
 800bdee:	2301      	movs	r3, #1
    disp->inv_p++;
 800bdf0:	22a8      	movs	r2, #168	; 0xa8
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800bdf2:	6860      	ldr	r0, [r4, #4]
    disp->inv_p++;
 800bdf4:	0052      	lsls	r2, r2, #1
 800bdf6:	52a3      	strh	r3, [r4, r2]
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	d1ee      	bne.n	800bdda <_lv_inv_area+0xb6>
 800bdfc:	e7d7      	b.n	800bdae <_lv_inv_area+0x8a>
    for(i = 0; i < disp->inv_p; i++) {
 800bdfe:	2200      	movs	r2, #0
    dest->y2 = src->y2;
 800be00:	3206      	adds	r2, #6
    dest->x1 = src->x1;
 800be02:	9903      	ldr	r1, [sp, #12]
 800be04:	9802      	ldr	r0, [sp, #8]
 800be06:	00d2      	lsls	r2, r2, #3
 800be08:	18a2      	adds	r2, r4, r2
    disp->inv_p++;
 800be0a:	3301      	adds	r3, #1
 800be0c:	c203      	stmia	r2!, {r0, r1}
 800be0e:	b29b      	uxth	r3, r3
}
 800be10:	e7ee      	b.n	800bdf0 <_lv_inv_area+0xcc>
 800be12:	46c0      	nop			; (mov r8, r8)

0800be14 <_lv_refr_get_disp_refreshing>:
    return disp_refr;
 800be14:	4b01      	ldr	r3, [pc, #4]	; (800be1c <_lv_refr_get_disp_refreshing+0x8>)
 800be16:	6818      	ldr	r0, [r3, #0]
}
 800be18:	4770      	bx	lr
 800be1a:	46c0      	nop			; (mov r8, r8)
 800be1c:	20003204 	.word	0x20003204

0800be20 <_lv_disp_refr_timer>:
{
 800be20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be22:	46de      	mov	lr, fp
 800be24:	4657      	mov	r7, sl
 800be26:	464e      	mov	r6, r9
 800be28:	4645      	mov	r5, r8
 800be2a:	b5e0      	push	{r5, r6, r7, lr}
 800be2c:	b08d      	sub	sp, #52	; 0x34
 800be2e:	0004      	movs	r4, r0
    uint32_t start = lv_tick_get();
 800be30:	f004 ff62 	bl	8010cf8 <lv_tick_get>
    volatile uint32_t elaps = 0;
 800be34:	2300      	movs	r3, #0
    uint32_t start = lv_tick_get();
 800be36:	9007      	str	r0, [sp, #28]
    volatile uint32_t elaps = 0;
 800be38:	9309      	str	r3, [sp, #36]	; 0x24
    if(tmr) {
 800be3a:	2c00      	cmp	r4, #0
 800be3c:	d100      	bne.n	800be40 <_lv_disp_refr_timer+0x20>
 800be3e:	e22f      	b.n	800c2a0 <_lv_disp_refr_timer+0x480>
        disp_refr = tmr->user_data;
 800be40:	4bb0      	ldr	r3, [pc, #704]	; (800c104 <_lv_disp_refr_timer+0x2e4>)
 800be42:	68e2      	ldr	r2, [r4, #12]
 800be44:	469a      	mov	sl, r3
        lv_timer_pause(tmr);
 800be46:	0020      	movs	r0, r4
        disp_refr = tmr->user_data;
 800be48:	601a      	str	r2, [r3, #0]
        lv_timer_pause(tmr);
 800be4a:	f007 f83b 	bl	8012ec4 <lv_timer_pause>
    lv_obj_update_layout(disp_refr->act_scr);
 800be4e:	4653      	mov	r3, sl
 800be50:	6818      	ldr	r0, [r3, #0]
 800be52:	6900      	ldr	r0, [r0, #16]
 800be54:	f7fb fd34 	bl	80078c0 <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 800be58:	4653      	mov	r3, sl
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	6958      	ldr	r0, [r3, #20]
 800be5e:	2800      	cmp	r0, #0
 800be60:	d003      	beq.n	800be6a <_lv_disp_refr_timer+0x4a>
 800be62:	f7fb fd2d 	bl	80078c0 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->top_layer);
 800be66:	4653      	mov	r3, sl
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	69d8      	ldr	r0, [r3, #28]
 800be6c:	f7fb fd28 	bl	80078c0 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 800be70:	4653      	mov	r3, sl
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	6a18      	ldr	r0, [r3, #32]
 800be76:	f7fb fd23 	bl	80078c0 <lv_obj_update_layout>
    if(disp_refr->act_scr == NULL) {
 800be7a:	4653      	mov	r3, sl
 800be7c:	681e      	ldr	r6, [r3, #0]
 800be7e:	6933      	ldr	r3, [r6, #16]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d100      	bne.n	800be86 <_lv_disp_refr_timer+0x66>
 800be84:	e208      	b.n	800c298 <_lv_disp_refr_timer+0x478>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800be86:	23a8      	movs	r3, #168	; 0xa8
 800be88:	005b      	lsls	r3, r3, #1
 800be8a:	5af2      	ldrh	r2, [r6, r3]
 800be8c:	0030      	movs	r0, r6
 800be8e:	2700      	movs	r7, #0
 800be90:	4656      	mov	r6, sl
 800be92:	2a00      	cmp	r2, #0
 800be94:	d103      	bne.n	800be9e <_lv_disp_refr_timer+0x7e>
 800be96:	e209      	b.n	800c2ac <_lv_disp_refr_timer+0x48c>
 800be98:	3701      	adds	r7, #1
 800be9a:	4297      	cmp	r7, r2
 800be9c:	d24f      	bcs.n	800bf3e <_lv_disp_refr_timer+0x11e>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800be9e:	19c3      	adds	r3, r0, r7
 800bea0:	3331      	adds	r3, #49	; 0x31
 800bea2:	33ff      	adds	r3, #255	; 0xff
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1f6      	bne.n	800be98 <_lv_disp_refr_timer+0x78>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800beaa:	2a00      	cmp	r2, #0
 800beac:	d100      	bne.n	800beb0 <_lv_disp_refr_timer+0x90>
 800beae:	e1fd      	b.n	800c2ac <_lv_disp_refr_timer+0x48c>
 800beb0:	1dbb      	adds	r3, r7, #6
 800beb2:	00fd      	lsls	r5, r7, #3
 800beb4:	00db      	lsls	r3, r3, #3
 800beb6:	2400      	movs	r4, #0
 800beb8:	4698      	mov	r8, r3
 800beba:	3530      	adds	r5, #48	; 0x30
 800bebc:	e027      	b.n	800bf0e <_lv_disp_refr_timer+0xee>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800bebe:	464b      	mov	r3, r9
 800bec0:	6831      	ldr	r1, [r6, #0]
 800bec2:	a80a      	add	r0, sp, #40	; 0x28
 800bec4:	18ca      	adds	r2, r1, r3
 800bec6:	1949      	adds	r1, r1, r5
 800bec8:	f005 fa9c 	bl	8011404 <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800becc:	a80a      	add	r0, sp, #40	; 0x28
 800bece:	f005 fa2d 	bl	801132c <lv_area_get_size>
 800bed2:	6833      	ldr	r3, [r6, #0]
 800bed4:	4683      	mov	fp, r0
 800bed6:	1958      	adds	r0, r3, r5
 800bed8:	f005 fa28 	bl	801132c <lv_area_get_size>
 800bedc:	4682      	mov	sl, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800bede:	6830      	ldr	r0, [r6, #0]
 800bee0:	4448      	add	r0, r9
 800bee2:	f005 fa23 	bl	801132c <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800bee6:	4450      	add	r0, sl
 800bee8:	4583      	cmp	fp, r0
 800beea:	d223      	bcs.n	800bf34 <_lv_disp_refr_timer+0x114>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800beec:	4643      	mov	r3, r8
 800beee:	6830      	ldr	r0, [r6, #0]
    dest->x1 = src->x1;
 800bef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bef2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bef4:	18c3      	adds	r3, r0, r3
 800bef6:	c306      	stmia	r3!, {r1, r2}
                disp_refr->inv_area_joined[join_from] = 1;
 800bef8:	2201      	movs	r2, #1
 800befa:	1903      	adds	r3, r0, r4
 800befc:	3331      	adds	r3, #49	; 0x31
 800befe:	33ff      	adds	r3, #255	; 0xff
 800bf00:	701a      	strb	r2, [r3, #0]
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800bf02:	23a8      	movs	r3, #168	; 0xa8
 800bf04:	005b      	lsls	r3, r3, #1
 800bf06:	5ac2      	ldrh	r2, [r0, r3]
 800bf08:	3401      	adds	r4, #1
 800bf0a:	4294      	cmp	r4, r2
 800bf0c:	d2c4      	bcs.n	800be98 <_lv_disp_refr_timer+0x78>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800bf0e:	1903      	adds	r3, r0, r4
 800bf10:	3331      	adds	r3, #49	; 0x31
 800bf12:	33ff      	adds	r3, #255	; 0xff
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1f6      	bne.n	800bf08 <_lv_disp_refr_timer+0xe8>
 800bf1a:	42bc      	cmp	r4, r7
 800bf1c:	d0f4      	beq.n	800bf08 <_lv_disp_refr_timer+0xe8>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800bf1e:	2230      	movs	r2, #48	; 0x30
 800bf20:	4691      	mov	r9, r2
 800bf22:	00e3      	lsls	r3, r4, #3
 800bf24:	4499      	add	r9, r3
 800bf26:	464b      	mov	r3, r9
 800bf28:	18c1      	adds	r1, r0, r3
 800bf2a:	1940      	adds	r0, r0, r5
 800bf2c:	f005 fb92 	bl	8011654 <_lv_area_is_on>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d1c4      	bne.n	800bebe <_lv_disp_refr_timer+0x9e>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800bf34:	23a8      	movs	r3, #168	; 0xa8
 800bf36:	6830      	ldr	r0, [r6, #0]
 800bf38:	005b      	lsls	r3, r3, #1
 800bf3a:	5ac2      	ldrh	r2, [r0, r3]
 800bf3c:	e7e4      	b.n	800bf08 <_lv_disp_refr_timer+0xe8>
    px_num = 0;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	4971      	ldr	r1, [pc, #452]	; (800c108 <_lv_disp_refr_timer+0x2e8>)
 800bf42:	46b2      	mov	sl, r6
 800bf44:	600b      	str	r3, [r1, #0]
 800bf46:	0006      	movs	r6, r0
    if(disp_refr->inv_p == 0) return;
 800bf48:	2a00      	cmp	r2, #0
 800bf4a:	d100      	bne.n	800bf4e <_lv_disp_refr_timer+0x12e>
 800bf4c:	e141      	b.n	800c1d2 <_lv_disp_refr_timer+0x3b2>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800bf4e:	0001      	movs	r1, r0
 800bf50:	3131      	adds	r1, #49	; 0x31
 800bf52:	1e53      	subs	r3, r2, #1
 800bf54:	31ff      	adds	r1, #255	; 0xff
        if(disp_refr->inv_area_joined[i] == 0) {
 800bf56:	5cc8      	ldrb	r0, [r1, r3]
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	d100      	bne.n	800bf5e <_lv_disp_refr_timer+0x13e>
 800bf5c:	e1a9      	b.n	800c2b2 <_lv_disp_refr_timer+0x492>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	d2f9      	bcs.n	800bf56 <_lv_disp_refr_timer+0x136>
    int32_t last_i = 0;
 800bf62:	2300      	movs	r3, #0
    if(disp_refr->driver->render_start_cb) {
 800bf64:	6830      	ldr	r0, [r6, #0]
    int32_t last_i = 0;
 800bf66:	9306      	str	r3, [sp, #24]
    if(disp_refr->driver->render_start_cb) {
 800bf68:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d100      	bne.n	800bf70 <_lv_disp_refr_timer+0x150>
 800bf6e:	e1a6      	b.n	800c2be <_lv_disp_refr_timer+0x49e>
        disp_refr->driver->render_start_cb(disp_refr->driver);
 800bf70:	4798      	blx	r3
    disp_refr->driver->draw_buf->last_area = 0;
 800bf72:	4653      	mov	r3, sl
 800bf74:	681e      	ldr	r6, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800bf76:	23a8      	movs	r3, #168	; 0xa8
    disp_refr->driver->draw_buf->last_area = 0;
 800bf78:	2001      	movs	r0, #1
    for(i = 0; i < disp_refr->inv_p; i++) {
 800bf7a:	005b      	lsls	r3, r3, #1
 800bf7c:	5af2      	ldrh	r2, [r6, r3]
    disp_refr->driver->draw_buf->last_area = 0;
 800bf7e:	6833      	ldr	r3, [r6, #0]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	7e19      	ldrb	r1, [r3, #24]
 800bf84:	4381      	bics	r1, r0
 800bf86:	7619      	strb	r1, [r3, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 800bf88:	7e19      	ldrb	r1, [r3, #24]
 800bf8a:	3001      	adds	r0, #1
 800bf8c:	4381      	bics	r1, r0
 800bf8e:	7619      	strb	r1, [r3, #24]
    disp_refr->rendering_in_progress = true;
 800bf90:	2128      	movs	r1, #40	; 0x28
 800bf92:	2004      	movs	r0, #4
 800bf94:	5c73      	ldrb	r3, [r6, r1]
 800bf96:	4303      	orrs	r3, r0
 800bf98:	5473      	strb	r3, [r6, r1]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800bf9a:	2a00      	cmp	r2, #0
 800bf9c:	d100      	bne.n	800bfa0 <_lv_disp_refr_timer+0x180>
 800bf9e:	e1ba      	b.n	800c316 <_lv_disp_refr_timer+0x4f6>
    int32_t last_i = 0;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	9304      	str	r3, [sp, #16]
        if(disp_refr->inv_area_joined[i] == 0) {
 800bfa4:	9904      	ldr	r1, [sp, #16]
 800bfa6:	1873      	adds	r3, r6, r1
 800bfa8:	3331      	adds	r3, #49	; 0x31
 800bfaa:	33ff      	adds	r3, #255	; 0xff
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d000      	beq.n	800bfb4 <_lv_disp_refr_timer+0x194>
 800bfb2:	e0db      	b.n	800c16c <_lv_disp_refr_timer+0x34c>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 800bfb4:	9b06      	ldr	r3, [sp, #24]
 800bfb6:	428b      	cmp	r3, r1
 800bfb8:	d100      	bne.n	800bfbc <_lv_disp_refr_timer+0x19c>
 800bfba:	e139      	b.n	800c230 <_lv_disp_refr_timer+0x410>
 800bfbc:	6831      	ldr	r1, [r6, #0]
 800bfbe:	68cb      	ldr	r3, [r1, #12]
            disp_refr->driver->draw_buf->last_part = 0;
 800bfc0:	2002      	movs	r0, #2
 800bfc2:	7e1a      	ldrb	r2, [r3, #24]
 800bfc4:	4382      	bics	r2, r0
 800bfc6:	302e      	adds	r0, #46	; 0x2e
 800bfc8:	4684      	mov	ip, r0
 800bfca:	761a      	strb	r2, [r3, #24]
            refr_area(&disp_refr->inv_areas[i]);
 800bfcc:	9a04      	ldr	r2, [sp, #16]
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	00d2      	lsls	r2, r2, #3
 800bfd2:	4494      	add	ip, r2
 800bfd4:	4660      	mov	r0, ip
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 800bfd6:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
 800bfd8:	9005      	str	r0, [sp, #20]
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800bfda:	603b      	str	r3, [r7, #0]
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 800bfdc:	7c0b      	ldrb	r3, [r1, #16]
 800bfde:	079b      	lsls	r3, r3, #30
 800bfe0:	d000      	beq.n	800bfe4 <_lv_disp_refr_timer+0x1c4>
 800bfe2:	e101      	b.n	800c1e8 <_lv_disp_refr_timer+0x3c8>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bfe4:	4693      	mov	fp, r2
 800bfe6:	44b3      	add	fp, r6
 800bfe8:	465b      	mov	r3, fp
 800bfea:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
 800bfec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800bfee:	3401      	adds	r4, #1
 800bff0:	1ae4      	subs	r4, r4, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bff2:	465b      	mov	r3, fp
 800bff4:	2236      	movs	r2, #54	; 0x36
 800bff6:	5e9b      	ldrsh	r3, [r3, r2]
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800bff8:	0030      	movs	r0, r6
 800bffa:	4698      	mov	r8, r3
 800bffc:	1c5d      	adds	r5, r3, #1
 800bffe:	465b      	mov	r3, fp
 800c000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c002:	b224      	sxth	r4, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c004:	1aed      	subs	r5, r5, r3
 800c006:	b22d      	sxth	r5, r5
 800c008:	f004 fdca 	bl	8010ba0 <lv_disp_get_ver_res>
 800c00c:	4580      	cmp	r8, r0
 800c00e:	db00      	blt.n	800c012 <_lv_disp_refr_timer+0x1f2>
 800c010:	e128      	b.n	800c264 <_lv_disp_refr_timer+0x444>
 800c012:	465b      	mov	r3, fp
 800c014:	2236      	movs	r2, #54	; 0x36
 800c016:	5e9b      	ldrsh	r3, [r3, r2]
 800c018:	4698      	mov	r8, r3
    int32_t max_row = get_max_row(disp_refr, w, h);
 800c01a:	4653      	mov	r3, sl
 800c01c:	681b      	ldr	r3, [r3, #0]
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 800c01e:	0021      	movs	r1, r4
 800c020:	681e      	ldr	r6, [r3, #0]
    int32_t max_row = get_max_row(disp_refr, w, h);
 800c022:	4699      	mov	r9, r3
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 800c024:	68f3      	ldr	r3, [r6, #12]
 800c026:	68d8      	ldr	r0, [r3, #12]
 800c028:	f7f4 f87e 	bl	8000128 <__udivsi3>
    if(max_row > area_h) max_row = area_h;
 800c02c:	9503      	str	r5, [sp, #12]
 800c02e:	4285      	cmp	r5, r0
 800c030:	dd00      	ble.n	800c034 <_lv_disp_refr_timer+0x214>
 800c032:	9003      	str	r0, [sp, #12]
    if(disp_refr->driver->rounder_cb) {
 800c034:	69b3      	ldr	r3, [r6, #24]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d028      	beq.n	800c08c <_lv_disp_refr_timer+0x26c>
        tmp.x2 = 0;
 800c03a:	2200      	movs	r2, #0
        lv_coord_t h_tmp = max_row;
 800c03c:	9d03      	ldr	r5, [sp, #12]
        tmp.x2 = 0;
 800c03e:	ac0a      	add	r4, sp, #40	; 0x28
 800c040:	80a2      	strh	r2, [r4, #4]
        tmp.x1 = 0;
 800c042:	920a      	str	r2, [sp, #40]	; 0x28
        lv_coord_t h_tmp = max_row;
 800c044:	b22a      	sxth	r2, r5
 800c046:	0030      	movs	r0, r6
 800c048:	46b9      	mov	r9, r7
 800c04a:	0016      	movs	r6, r2
 800c04c:	4657      	mov	r7, sl
 800c04e:	46aa      	mov	sl, r5
 800c050:	e006      	b.n	800c060 <_lv_disp_refr_timer+0x240>
        } while(h_tmp > 0);
 800c052:	2d00      	cmp	r5, #0
 800c054:	dc00      	bgt.n	800c058 <_lv_disp_refr_timer+0x238>
 800c056:	e0f2      	b.n	800c23e <_lv_disp_refr_timer+0x41e>
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 800c058:	002e      	movs	r6, r5
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	6818      	ldr	r0, [r3, #0]
 800c05e:	6983      	ldr	r3, [r0, #24]
            tmp.y2 = h_tmp - 1;
 800c060:	1e75      	subs	r5, r6, #1
 800c062:	b22d      	sxth	r5, r5
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 800c064:	0021      	movs	r1, r4
            tmp.y2 = h_tmp - 1;
 800c066:	80e5      	strh	r5, [r4, #6]
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 800c068:	4798      	blx	r3
 800c06a:	2306      	movs	r3, #6
 800c06c:	5ee2      	ldrsh	r2, [r4, r3]
 800c06e:	8863      	ldrh	r3, [r4, #2]
 800c070:	3201      	adds	r2, #1
 800c072:	1ad3      	subs	r3, r2, r3
            if(lv_area_get_height(&tmp) <= max_row) break;
 800c074:	b21b      	sxth	r3, r3
 800c076:	459a      	cmp	sl, r3
 800c078:	dbeb      	blt.n	800c052 <_lv_disp_refr_timer+0x232>
        if(h_tmp <= 0) {
 800c07a:	46ba      	mov	sl, r7
 800c07c:	464f      	mov	r7, r9
 800c07e:	2e00      	cmp	r6, #0
 800c080:	dc00      	bgt.n	800c084 <_lv_disp_refr_timer+0x264>
 800c082:	e0de      	b.n	800c242 <_lv_disp_refr_timer+0x422>
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800c084:	4653      	mov	r3, sl
 800c086:	681b      	ldr	r3, [r3, #0]
            max_row = tmp.y2 + 1;
 800c088:	9203      	str	r2, [sp, #12]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800c08a:	4699      	mov	r9, r3
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800c08c:	465b      	mov	r3, fp
 800c08e:	2232      	movs	r2, #50	; 0x32
 800c090:	5e9a      	ldrsh	r2, [r3, r2]
 800c092:	9b03      	ldr	r3, [sp, #12]
    return max_row;
 800c094:	9903      	ldr	r1, [sp, #12]
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800c096:	18d3      	adds	r3, r2, r3
 800c098:	3b01      	subs	r3, #1
 800c09a:	4598      	cmp	r8, r3
 800c09c:	da00      	bge.n	800c0a0 <_lv_disp_refr_timer+0x280>
 800c09e:	e0df      	b.n	800c260 <_lv_disp_refr_timer+0x440>
        sub_area.y2 = row + max_row - 1;
 800c0a0:	b28b      	uxth	r3, r1
 800c0a2:	469c      	mov	ip, r3
 800c0a4:	4462      	add	r2, ip
 800c0a6:	b295      	uxth	r5, r2
 800c0a8:	ac0a      	add	r4, sp, #40	; 0x28
 800c0aa:	464a      	mov	r2, r9
 800c0ac:	4699      	mov	r9, r3
 800c0ae:	e013      	b.n	800c0d8 <_lv_disp_refr_timer+0x2b8>
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 800c0b0:	4642      	mov	r2, r8
 800c0b2:	4646      	mov	r6, r8
 800c0b4:	80e2      	strh	r2, [r4, #6]
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 800c0b6:	2102      	movs	r1, #2
 800c0b8:	7e1a      	ldrb	r2, [r3, #24]
 800c0ba:	430a      	orrs	r2, r1
 800c0bc:	761a      	strb	r2, [r3, #24]
        refr_area_part(draw_ctx);
 800c0be:	0038      	movs	r0, r7
 800c0c0:	f7ff fcf4 	bl	800baac <refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800c0c4:	9b03      	ldr	r3, [sp, #12]
 800c0c6:	b22a      	sxth	r2, r5
 800c0c8:	18d3      	adds	r3, r2, r3
 800c0ca:	444d      	add	r5, r9
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	b2ad      	uxth	r5, r5
 800c0d0:	4543      	cmp	r3, r8
 800c0d2:	dc1b      	bgt.n	800c10c <_lv_disp_refr_timer+0x2ec>
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800c0d4:	4653      	mov	r3, sl
 800c0d6:	681a      	ldr	r2, [r3, #0]
        sub_area.x1 = area_p->x1;
 800c0d8:	465b      	mov	r3, fp
 800c0da:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800c0dc:	1e6e      	subs	r6, r5, #1
 800c0de:	8023      	strh	r3, [r4, #0]
        sub_area.x2 = area_p->x2;
 800c0e0:	465b      	mov	r3, fp
 800c0e2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c0e4:	b236      	sxth	r6, r6
 800c0e6:	80a3      	strh	r3, [r4, #4]
        sub_area.y1 = row;
 800c0e8:	464b      	mov	r3, r9
 800c0ea:	1aeb      	subs	r3, r5, r3
 800c0ec:	8063      	strh	r3, [r4, #2]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800c0ee:	6813      	ldr	r3, [r2, #0]
        sub_area.y2 = row + max_row - 1;
 800c0f0:	80e6      	strh	r6, [r4, #6]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800c0f2:	68db      	ldr	r3, [r3, #12]
        draw_ctx->buf_area = &sub_area;
 800c0f4:	607c      	str	r4, [r7, #4]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800c0f6:	689a      	ldr	r2, [r3, #8]
        draw_ctx->clip_area = &sub_area;
 800c0f8:	60bc      	str	r4, [r7, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800c0fa:	603a      	str	r2, [r7, #0]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 800c0fc:	45b0      	cmp	r8, r6
 800c0fe:	dbd7      	blt.n	800c0b0 <_lv_disp_refr_timer+0x290>
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 800c100:	d1dd      	bne.n	800c0be <_lv_disp_refr_timer+0x29e>
 800c102:	e7d8      	b.n	800c0b6 <_lv_disp_refr_timer+0x296>
 800c104:	20003204 	.word	0x20003204
 800c108:	20003208 	.word	0x20003208
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800c10c:	4653      	mov	r3, sl
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4699      	mov	r9, r3
    if(y2 != row_last) {
 800c112:	45b0      	cmp	r8, r6
 800c114:	d01a      	beq.n	800c14c <_lv_disp_refr_timer+0x32c>
        sub_area.x1 = area_p->x1;
 800c116:	465b      	mov	r3, fp
 800c118:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800c11a:	ac0a      	add	r4, sp, #40	; 0x28
 800c11c:	8023      	strh	r3, [r4, #0]
        sub_area.x2 = area_p->x2;
 800c11e:	465b      	mov	r3, fp
 800c120:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
        disp_refr->driver->draw_buf->last_part = 1;
 800c122:	2102      	movs	r1, #2
        sub_area.x2 = area_p->x2;
 800c124:	80a3      	strh	r3, [r4, #4]
        sub_area.y2 = y2;
 800c126:	4643      	mov	r3, r8
 800c128:	80e3      	strh	r3, [r4, #6]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800c12a:	464b      	mov	r3, r9
 800c12c:	681b      	ldr	r3, [r3, #0]
        sub_area.y1 = row;
 800c12e:	8062      	strh	r2, [r4, #2]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800c130:	68db      	ldr	r3, [r3, #12]
        draw_ctx->buf_area = &sub_area;
 800c132:	607c      	str	r4, [r7, #4]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800c134:	689a      	ldr	r2, [r3, #8]
        draw_ctx->clip_area = &sub_area;
 800c136:	60bc      	str	r4, [r7, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800c138:	603a      	str	r2, [r7, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 800c13a:	7e1a      	ldrb	r2, [r3, #24]
        refr_area_part(draw_ctx);
 800c13c:	0038      	movs	r0, r7
        disp_refr->driver->draw_buf->last_part = 1;
 800c13e:	430a      	orrs	r2, r1
 800c140:	761a      	strb	r2, [r3, #24]
        refr_area_part(draw_ctx);
 800c142:	f7ff fcb3 	bl	800baac <refr_area_part>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800c146:	4653      	mov	r3, sl
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4699      	mov	r9, r3
 800c14c:	9805      	ldr	r0, [sp, #20]
 800c14e:	4448      	add	r0, r9
 800c150:	f005 f8ec 	bl	801132c <lv_area_get_size>
 800c154:	4b72      	ldr	r3, [pc, #456]	; (800c320 <_lv_disp_refr_timer+0x500>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	469c      	mov	ip, r3
 800c15a:	9303      	str	r3, [sp, #12]
 800c15c:	4b70      	ldr	r3, [pc, #448]	; (800c320 <_lv_disp_refr_timer+0x500>)
 800c15e:	4460      	add	r0, ip
 800c160:	6018      	str	r0, [r3, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800c162:	4653      	mov	r3, sl
 800c164:	681e      	ldr	r6, [r3, #0]
 800c166:	23a8      	movs	r3, #168	; 0xa8
 800c168:	005b      	lsls	r3, r3, #1
 800c16a:	5af2      	ldrh	r2, [r6, r3]
 800c16c:	9b04      	ldr	r3, [sp, #16]
 800c16e:	3301      	adds	r3, #1
 800c170:	9304      	str	r3, [sp, #16]
 800c172:	4293      	cmp	r3, r2
 800c174:	da00      	bge.n	800c178 <_lv_disp_refr_timer+0x358>
 800c176:	e715      	b.n	800bfa4 <_lv_disp_refr_timer+0x184>
    disp_refr->rendering_in_progress = false;
 800c178:	2128      	movs	r1, #40	; 0x28
 800c17a:	2004      	movs	r0, #4
 800c17c:	5c73      	ldrb	r3, [r6, r1]
 800c17e:	4383      	bics	r3, r0
 800c180:	5473      	strb	r3, [r6, r1]
    if(disp_refr->inv_p != 0) {
 800c182:	2a00      	cmp	r2, #0
 800c184:	d025      	beq.n	800c1d2 <_lv_disp_refr_timer+0x3b2>
        if(disp_refr->driver->full_refresh) {
 800c186:	6833      	ldr	r3, [r6, #0]
 800c188:	7c1b      	ldrb	r3, [r3, #16]
 800c18a:	079b      	lsls	r3, r3, #30
 800c18c:	d500      	bpl.n	800c190 <_lv_disp_refr_timer+0x370>
 800c18e:	e0a5      	b.n	800c2dc <_lv_disp_refr_timer+0x4bc>
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800c190:	0030      	movs	r0, r6
 800c192:	2180      	movs	r1, #128	; 0x80
 800c194:	3030      	adds	r0, #48	; 0x30
 800c196:	0049      	lsls	r1, r1, #1
 800c198:	f006 fa8a 	bl	80126b0 <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 800c19c:	4653      	mov	r3, sl
 800c19e:	6818      	ldr	r0, [r3, #0]
 800c1a0:	2120      	movs	r1, #32
 800c1a2:	3031      	adds	r0, #49	; 0x31
 800c1a4:	30ff      	adds	r0, #255	; 0xff
 800c1a6:	f006 fa83 	bl	80126b0 <lv_memset_00>
        disp_refr->inv_p = 0;
 800c1aa:	4651      	mov	r1, sl
 800c1ac:	23a8      	movs	r3, #168	; 0xa8
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	6809      	ldr	r1, [r1, #0]
 800c1b2:	005b      	lsls	r3, r3, #1
 800c1b4:	52ca      	strh	r2, [r1, r3]
        elaps = lv_tick_elaps(start);
 800c1b6:	9807      	ldr	r0, [sp, #28]
 800c1b8:	f004 fdac 	bl	8010d14 <lv_tick_elaps>
        if(disp_refr->driver->monitor_cb) {
 800c1bc:	4653      	mov	r3, sl
 800c1be:	681b      	ldr	r3, [r3, #0]
        elaps = lv_tick_elaps(start);
 800c1c0:	9009      	str	r0, [sp, #36]	; 0x24
        if(disp_refr->driver->monitor_cb) {
 800c1c2:	6818      	ldr	r0, [r3, #0]
 800c1c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d003      	beq.n	800c1d2 <_lv_disp_refr_timer+0x3b2>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 800c1ca:	4a55      	ldr	r2, [pc, #340]	; (800c320 <_lv_disp_refr_timer+0x500>)
 800c1cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1ce:	6812      	ldr	r2, [r2, #0]
 800c1d0:	4798      	blx	r3
    lv_mem_buf_free_all();
 800c1d2:	f006 f867 	bl	80122a4 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800c1d6:	f004 fc15 	bl	8010a04 <_lv_font_clean_up_fmt_txt>
}
 800c1da:	b00d      	add	sp, #52	; 0x34
 800c1dc:	bcf0      	pop	{r4, r5, r6, r7}
 800c1de:	46bb      	mov	fp, r7
 800c1e0:	46b2      	mov	sl, r6
 800c1e2:	46a9      	mov	r9, r5
 800c1e4:	46a0      	mov	r8, r4
 800c1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800c1e8:	0030      	movs	r0, r6
 800c1ea:	f004 fcc5 	bl	8010b78 <lv_disp_get_hor_res>
 800c1ee:	4653      	mov	r3, sl
 800c1f0:	0004      	movs	r4, r0
 800c1f2:	6818      	ldr	r0, [r3, #0]
 800c1f4:	f004 fcd4 	bl	8010ba0 <lv_disp_get_ver_res>
 800c1f8:	3c01      	subs	r4, #1
 800c1fa:	3801      	subs	r0, #1
 800c1fc:	b223      	sxth	r3, r4
 800c1fe:	b200      	sxth	r0, r0
 800c200:	ac0a      	add	r4, sp, #40	; 0x28
 800c202:	2200      	movs	r2, #0
 800c204:	2100      	movs	r1, #0
 800c206:	9000      	str	r0, [sp, #0]
 800c208:	0020      	movs	r0, r4
 800c20a:	f005 f87f 	bl	801130c <lv_area_set>
        if(disp_refr->driver->full_refresh) {
 800c20e:	4653      	mov	r3, sl
 800c210:	2102      	movs	r1, #2
 800c212:	681b      	ldr	r3, [r3, #0]
        draw_ctx->buf_area = &disp_area;
 800c214:	607c      	str	r4, [r7, #4]
        if(disp_refr->driver->full_refresh) {
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	7c1a      	ldrb	r2, [r3, #16]
 800c21a:	4211      	tst	r1, r2
 800c21c:	d02a      	beq.n	800c274 <_lv_disp_refr_timer+0x454>
            disp_refr->driver->draw_buf->last_part = 1;
 800c21e:	68da      	ldr	r2, [r3, #12]
            refr_area_part(draw_ctx);
 800c220:	0038      	movs	r0, r7
            disp_refr->driver->draw_buf->last_part = 1;
 800c222:	7e13      	ldrb	r3, [r2, #24]
 800c224:	430b      	orrs	r3, r1
 800c226:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = &disp_area;
 800c228:	60bc      	str	r4, [r7, #8]
            refr_area_part(draw_ctx);
 800c22a:	f7ff fc3f 	bl	800baac <refr_area_part>
 800c22e:	e78a      	b.n	800c146 <_lv_disp_refr_timer+0x326>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 800c230:	2001      	movs	r0, #1
 800c232:	6831      	ldr	r1, [r6, #0]
 800c234:	68cb      	ldr	r3, [r1, #12]
 800c236:	7e1a      	ldrb	r2, [r3, #24]
 800c238:	4302      	orrs	r2, r0
 800c23a:	761a      	strb	r2, [r3, #24]
 800c23c:	e6c0      	b.n	800bfc0 <_lv_disp_refr_timer+0x1a0>
 800c23e:	46ba      	mov	sl, r7
 800c240:	464f      	mov	r7, r9
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800c242:	4653      	mov	r3, sl
 800c244:	681b      	ldr	r3, [r3, #0]
            return 0;
 800c246:	2100      	movs	r1, #0
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800c248:	4699      	mov	r9, r3
 800c24a:	2300      	movs	r3, #0
 800c24c:	9303      	str	r3, [sp, #12]
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800c24e:	465b      	mov	r3, fp
 800c250:	2232      	movs	r2, #50	; 0x32
 800c252:	5e9a      	ldrsh	r2, [r3, r2]
 800c254:	9b03      	ldr	r3, [sp, #12]
 800c256:	18d3      	adds	r3, r2, r3
 800c258:	3b01      	subs	r3, #1
 800c25a:	4598      	cmp	r8, r3
 800c25c:	db00      	blt.n	800c260 <_lv_disp_refr_timer+0x440>
 800c25e:	e71f      	b.n	800c0a0 <_lv_disp_refr_timer+0x280>
    lv_coord_t row_last = 0;
 800c260:	2600      	movs	r6, #0
 800c262:	e756      	b.n	800c112 <_lv_disp_refr_timer+0x2f2>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800c264:	4653      	mov	r3, sl
 800c266:	6818      	ldr	r0, [r3, #0]
 800c268:	f004 fc9a 	bl	8010ba0 <lv_disp_get_ver_res>
 800c26c:	3801      	subs	r0, #1
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800c26e:	b203      	sxth	r3, r0
 800c270:	4698      	mov	r8, r3
 800c272:	e6d2      	b.n	800c01a <_lv_disp_refr_timer+0x1fa>
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 800c274:	2201      	movs	r2, #1
 800c276:	2002      	movs	r0, #2
 800c278:	68d9      	ldr	r1, [r3, #12]
 800c27a:	698b      	ldr	r3, [r1, #24]
 800c27c:	401a      	ands	r2, r3
 800c27e:	7e0b      	ldrb	r3, [r1, #24]
 800c280:	0052      	lsls	r2, r2, #1
 800c282:	4383      	bics	r3, r0
 800c284:	4313      	orrs	r3, r2
 800c286:	760b      	strb	r3, [r1, #24]
            refr_area(&disp_refr->inv_areas[i]);
 800c288:	9b05      	ldr	r3, [sp, #20]
            refr_area_part(draw_ctx);
 800c28a:	0038      	movs	r0, r7
            refr_area(&disp_refr->inv_areas[i]);
 800c28c:	469c      	mov	ip, r3
 800c28e:	4466      	add	r6, ip
            draw_ctx->clip_area = area_p;
 800c290:	60be      	str	r6, [r7, #8]
            refr_area_part(draw_ctx);
 800c292:	f7ff fc0b 	bl	800baac <refr_area_part>
        return;
 800c296:	e756      	b.n	800c146 <_lv_disp_refr_timer+0x326>
        disp_refr->inv_p = 0;
 800c298:	22a8      	movs	r2, #168	; 0xa8
 800c29a:	0052      	lsls	r2, r2, #1
 800c29c:	52b3      	strh	r3, [r6, r2]
        return;
 800c29e:	e79c      	b.n	800c1da <_lv_disp_refr_timer+0x3ba>
        disp_refr = lv_disp_get_default();
 800c2a0:	f004 fc64 	bl	8010b6c <lv_disp_get_default>
 800c2a4:	4b1f      	ldr	r3, [pc, #124]	; (800c324 <_lv_disp_refr_timer+0x504>)
 800c2a6:	469a      	mov	sl, r3
 800c2a8:	6018      	str	r0, [r3, #0]
 800c2aa:	e5d2      	b.n	800be52 <_lv_disp_refr_timer+0x32>
    px_num = 0;
 800c2ac:	4b1c      	ldr	r3, [pc, #112]	; (800c320 <_lv_disp_refr_timer+0x500>)
 800c2ae:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
 800c2b0:	e78f      	b.n	800c1d2 <_lv_disp_refr_timer+0x3b2>
    if(disp_refr->driver->render_start_cb) {
 800c2b2:	6830      	ldr	r0, [r6, #0]
 800c2b4:	9306      	str	r3, [sp, #24]
 800c2b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d000      	beq.n	800c2be <_lv_disp_refr_timer+0x49e>
 800c2bc:	e658      	b.n	800bf70 <_lv_disp_refr_timer+0x150>
    disp_refr->driver->draw_buf->last_area = 0;
 800c2be:	68c3      	ldr	r3, [r0, #12]
 800c2c0:	2001      	movs	r0, #1
 800c2c2:	7e19      	ldrb	r1, [r3, #24]
 800c2c4:	4381      	bics	r1, r0
 800c2c6:	7619      	strb	r1, [r3, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 800c2c8:	7e19      	ldrb	r1, [r3, #24]
 800c2ca:	3001      	adds	r0, #1
 800c2cc:	4381      	bics	r1, r0
 800c2ce:	7619      	strb	r1, [r3, #24]
    disp_refr->rendering_in_progress = true;
 800c2d0:	2128      	movs	r1, #40	; 0x28
 800c2d2:	2004      	movs	r0, #4
 800c2d4:	5c73      	ldrb	r3, [r6, r1]
 800c2d6:	4303      	orrs	r3, r0
 800c2d8:	5473      	strb	r3, [r6, r1]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800c2da:	e661      	b.n	800bfa0 <_lv_disp_refr_timer+0x180>
            lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800c2dc:	0030      	movs	r0, r6
 800c2de:	f004 fc4b 	bl	8010b78 <lv_disp_get_hor_res>
 800c2e2:	4653      	mov	r3, sl
 800c2e4:	0004      	movs	r4, r0
 800c2e6:	6818      	ldr	r0, [r3, #0]
 800c2e8:	f004 fc5a 	bl	8010ba0 <lv_disp_get_ver_res>
 800c2ec:	3c01      	subs	r4, #1
 800c2ee:	3801      	subs	r0, #1
 800c2f0:	b223      	sxth	r3, r4
 800c2f2:	b200      	sxth	r0, r0
 800c2f4:	ac0a      	add	r4, sp, #40	; 0x28
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	9000      	str	r0, [sp, #0]
 800c2fc:	0020      	movs	r0, r4
 800c2fe:	f005 f805 	bl	801130c <lv_area_set>
            disp_refr->driver->draw_ctx->buf_area = &disp_area;
 800c302:	4653      	mov	r3, sl
 800c304:	6818      	ldr	r0, [r3, #0]
 800c306:	6803      	ldr	r3, [r0, #0]
 800c308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c30a:	605c      	str	r4, [r3, #4]
            draw_buf_flush(disp_refr);
 800c30c:	f7fe fe3a 	bl	800af84 <draw_buf_flush>
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800c310:	4653      	mov	r3, sl
 800c312:	681e      	ldr	r6, [r3, #0]
 800c314:	e73c      	b.n	800c190 <_lv_disp_refr_timer+0x370>
    disp_refr->rendering_in_progress = false;
 800c316:	2204      	movs	r2, #4
 800c318:	5c73      	ldrb	r3, [r6, r1]
 800c31a:	4393      	bics	r3, r2
 800c31c:	5473      	strb	r3, [r6, r1]
    if(disp_refr->inv_p != 0) {
 800c31e:	e758      	b.n	800c1d2 <_lv_disp_refr_timer+0x3b2>
 800c320:	20003208 	.word	0x20003208
 800c324:	20003204 	.word	0x20003204

0800c328 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 800c328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c32a:	46c6      	mov	lr, r8
    if(th->parent) apply_theme(th->parent, obj);
 800c32c:	6846      	ldr	r6, [r0, #4]
{
 800c32e:	0004      	movs	r4, r0
 800c330:	000d      	movs	r5, r1
 800c332:	b500      	push	{lr}
    if(th->parent) apply_theme(th->parent, obj);
 800c334:	2e00      	cmp	r6, #0
 800c336:	d01e      	beq.n	800c376 <apply_theme+0x4e>
 800c338:	6877      	ldr	r7, [r6, #4]
 800c33a:	2f00      	cmp	r7, #0
 800c33c:	d015      	beq.n	800c36a <apply_theme+0x42>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4698      	mov	r8, r3
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00b      	beq.n	800c35e <apply_theme+0x36>
 800c346:	6858      	ldr	r0, [r3, #4]
 800c348:	2800      	cmp	r0, #0
 800c34a:	d001      	beq.n	800c350 <apply_theme+0x28>
 800c34c:	f7ff ffec 	bl	800c328 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 800c350:	4643      	mov	r3, r8
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d002      	beq.n	800c35e <apply_theme+0x36>
 800c358:	0029      	movs	r1, r5
 800c35a:	4640      	mov	r0, r8
 800c35c:	4798      	blx	r3
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d002      	beq.n	800c36a <apply_theme+0x42>
 800c364:	0029      	movs	r1, r5
 800c366:	0038      	movs	r0, r7
 800c368:	4798      	blx	r3
 800c36a:	6833      	ldr	r3, [r6, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d002      	beq.n	800c376 <apply_theme+0x4e>
 800c370:	0029      	movs	r1, r5
 800c372:	0030      	movs	r0, r6
 800c374:	4798      	blx	r3
 800c376:	6823      	ldr	r3, [r4, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d002      	beq.n	800c382 <apply_theme+0x5a>
 800c37c:	0029      	movs	r1, r5
 800c37e:	0020      	movs	r0, r4
 800c380:	4798      	blx	r3
}
 800c382:	bc80      	pop	{r7}
 800c384:	46b8      	mov	r8, r7
 800c386:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c388 <lv_theme_apply>:
{
 800c388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c38a:	46c6      	mov	lr, r8
 800c38c:	0004      	movs	r4, r0
 800c38e:	b500      	push	{lr}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 800c390:	2800      	cmp	r0, #0
 800c392:	d036      	beq.n	800c402 <lv_theme_apply+0x7a>
 800c394:	f7fe fdb0 	bl	800aef8 <lv_obj_get_disp>
    return lv_disp_get_theme(disp);
 800c398:	f7f5 fa4e 	bl	8001838 <lv_disp_get_theme>
 800c39c:	1e05      	subs	r5, r0, #0
    if(th == NULL) return;
 800c39e:	d02d      	beq.n	800c3fc <lv_theme_apply+0x74>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	0020      	movs	r0, r4
 800c3a4:	4a18      	ldr	r2, [pc, #96]	; (800c408 <lv_theme_apply+0x80>)
 800c3a6:	f7fd fc7f 	bl	8009ca8 <lv_obj_remove_style>
    if(th->parent) apply_theme(th->parent, obj);
 800c3aa:	686e      	ldr	r6, [r5, #4]
 800c3ac:	2e00      	cmp	r6, #0
 800c3ae:	d01f      	beq.n	800c3f0 <lv_theme_apply+0x68>
 800c3b0:	6877      	ldr	r7, [r6, #4]
 800c3b2:	2f00      	cmp	r7, #0
 800c3b4:	d016      	beq.n	800c3e4 <lv_theme_apply+0x5c>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4698      	mov	r8, r3
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d00c      	beq.n	800c3d8 <lv_theme_apply+0x50>
 800c3be:	6858      	ldr	r0, [r3, #4]
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d002      	beq.n	800c3ca <lv_theme_apply+0x42>
 800c3c4:	0021      	movs	r1, r4
 800c3c6:	f7ff ffaf 	bl	800c328 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 800c3ca:	4643      	mov	r3, r8
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d002      	beq.n	800c3d8 <lv_theme_apply+0x50>
 800c3d2:	0021      	movs	r1, r4
 800c3d4:	4640      	mov	r0, r8
 800c3d6:	4798      	blx	r3
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d002      	beq.n	800c3e4 <lv_theme_apply+0x5c>
 800c3de:	0021      	movs	r1, r4
 800c3e0:	0038      	movs	r0, r7
 800c3e2:	4798      	blx	r3
 800c3e4:	6833      	ldr	r3, [r6, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d002      	beq.n	800c3f0 <lv_theme_apply+0x68>
 800c3ea:	0021      	movs	r1, r4
 800c3ec:	0030      	movs	r0, r6
 800c3ee:	4798      	blx	r3
 800c3f0:	682b      	ldr	r3, [r5, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d002      	beq.n	800c3fc <lv_theme_apply+0x74>
 800c3f6:	0021      	movs	r1, r4
 800c3f8:	0028      	movs	r0, r5
 800c3fa:	4798      	blx	r3
}
 800c3fc:	bc80      	pop	{r7}
 800c3fe:	46b8      	mov	r8, r7
 800c400:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 800c402:	f004 fbb3 	bl	8010b6c <lv_disp_get_default>
 800c406:	e7c7      	b.n	800c398 <lv_theme_apply+0x10>
 800c408:	000fffff 	.word	0x000fffff

0800c40c <lv_draw_init>:
 **********************/

void lv_draw_init(void)
{
    /*Nothing to init now*/
}
 800c40c:	4770      	bx	lr
 800c40e:	46c0      	nop			; (mov r8, r8)

0800c410 <lv_draw_wait_for_finish>:

void lv_draw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800c410:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 800c412:	b510      	push	{r4, lr}
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800c414:	2b00      	cmp	r3, #0
 800c416:	d000      	beq.n	800c41a <lv_draw_wait_for_finish+0xa>
 800c418:	4798      	blx	r3
}
 800c41a:	bd10      	pop	{r4, pc}

0800c41c <lv_draw_img_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_img_dsc_init(lv_draw_img_dsc_t * dsc)
{
 800c41c:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800c41e:	2118      	movs	r1, #24
{
 800c420:	0004      	movs	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800c422:	f006 f945 	bl	80126b0 <lv_memset_00>
    dsc->recolor = lv_color_black();
 800c426:	2300      	movs	r3, #0
    dsc->opa = LV_OPA_COVER;
    dsc->zoom = LV_IMG_ZOOM_NONE;
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 800c428:	2201      	movs	r2, #1
    dsc->recolor = lv_color_black();
 800c42a:	8123      	strh	r3, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 800c42c:	33ff      	adds	r3, #255	; 0xff
 800c42e:	72e3      	strb	r3, [r4, #11]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 800c430:	3301      	adds	r3, #1
 800c432:	8063      	strh	r3, [r4, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 800c434:	7d23      	ldrb	r3, [r4, #20]
 800c436:	4313      	orrs	r3, r2
 800c438:	7523      	strb	r3, [r4, #20]
}
 800c43a:	bd10      	pop	{r4, pc}

0800c43c <lv_draw_img>:
 * @param mask the image will be drawn only in this area
 * @param src pointer to a lv_color_t array which contains the pixels of the image
 * @param dsc pointer to an initialized `lv_draw_img_dsc_t` variable
 */
void lv_draw_img(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * dsc, const lv_area_t * coords, const void * src)
{
 800c43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c43e:	4657      	mov	r7, sl
 800c440:	464e      	mov	r6, r9
 800c442:	4645      	mov	r5, r8
 800c444:	46de      	mov	lr, fp
 800c446:	b5e0      	push	{r5, r6, r7, lr}
 800c448:	0004      	movs	r4, r0
 800c44a:	000d      	movs	r5, r1
 800c44c:	0016      	movs	r6, r2
 800c44e:	001f      	movs	r7, r3
 800c450:	b0a3      	sub	sp, #140	; 0x8c
    if(src == NULL) {
 800c452:	2b00      	cmp	r3, #0
 800c454:	d034      	beq.n	800c4c0 <lv_draw_img+0x84>
        LV_LOG_WARN("Image draw: src is NULL");
        show_error(draw_ctx, coords, "No\ndata");
        return;
    }

    if(dsc->opa <= LV_OPA_MIN) return;
 800c456:	7acb      	ldrb	r3, [r1, #11]
 800c458:	2b02      	cmp	r3, #2
 800c45a:	d907      	bls.n	800c46c <lv_draw_img+0x30>

    lv_res_t res;
    if(draw_ctx->draw_img) {
 800c45c:	6983      	ldr	r3, [r0, #24]
 800c45e:	4698      	mov	r8, r3
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00a      	beq.n	800c47a <lv_draw_img+0x3e>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 800c464:	003b      	movs	r3, r7
 800c466:	47c0      	blx	r8
    }
    else {
        res = decode_and_draw(draw_ctx, dsc, coords, src);
    }

    if(res == LV_RES_INV) {
 800c468:	2800      	cmp	r0, #0
 800c46a:	d00e      	beq.n	800c48a <lv_draw_img+0x4e>
        LV_LOG_WARN("Image draw error");
        show_error(draw_ctx, coords, "No\ndata");
        return;
    }
}
 800c46c:	b023      	add	sp, #140	; 0x8c
 800c46e:	bcf0      	pop	{r4, r5, r6, r7}
 800c470:	46bb      	mov	fp, r7
 800c472:	46b2      	mov	sl, r6
 800c474:	46a9      	mov	r9, r5
 800c476:	46a0      	mov	r8, r4
 800c478:	bdf0      	pop	{r4, r5, r6, r7, pc}
LV_ATTRIBUTE_FAST_MEM static lv_res_t decode_and_draw(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                      const lv_area_t * coords, const void * src)
{
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;

    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 800c47a:	0038      	movs	r0, r7
 800c47c:	8909      	ldrh	r1, [r1, #8]
 800c47e:	692a      	ldr	r2, [r5, #16]
 800c480:	f000 fdf6 	bl	800d070 <_lv_img_cache_open>
 800c484:	4682      	mov	sl, r0

    if(cdsc == NULL) return LV_RES_INV;
 800c486:	2800      	cmp	r0, #0
 800c488:	d131      	bne.n	800c4ee <lv_draw_img+0xb2>
 800c48a:	ab14      	add	r3, sp, #80	; 0x50
 800c48c:	4699      	mov	r9, r3
 800c48e:	af0c      	add	r7, sp, #48	; 0x30


static void show_error(lv_draw_ctx_t * draw_ctx, const lv_area_t * coords, const char * msg)
{
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 800c490:	4648      	mov	r0, r9
 800c492:	f000 fd8f 	bl	800cfb4 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 800c496:	2301      	movs	r3, #1
 800c498:	464a      	mov	r2, r9
 800c49a:	425b      	negs	r3, r3
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800c49c:	4649      	mov	r1, r9
    rect_dsc.bg_color = lv_color_white();
 800c49e:	8093      	strh	r3, [r2, #4]
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800c4a0:	0020      	movs	r0, r4
 800c4a2:	0032      	movs	r2, r6
 800c4a4:	f000 fdac 	bl	800d000 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800c4a8:	0038      	movs	r0, r7
 800c4aa:	f000 f959 	bl	800c760 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	0032      	movs	r2, r6
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	0039      	movs	r1, r7
 800c4b6:	0020      	movs	r0, r4
 800c4b8:	4b9b      	ldr	r3, [pc, #620]	; (800c728 <lv_draw_img+0x2ec>)
 800c4ba:	f000 f969 	bl	800c790 <lv_draw_label>
}
 800c4be:	e7d5      	b.n	800c46c <lv_draw_img+0x30>
    lv_draw_rect_dsc_init(&rect_dsc);
 800c4c0:	ad14      	add	r5, sp, #80	; 0x50
 800c4c2:	0028      	movs	r0, r5
 800c4c4:	f000 fd76 	bl	800cfb4 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	425b      	negs	r3, r3
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800c4cc:	0032      	movs	r2, r6
 800c4ce:	0029      	movs	r1, r5
    rect_dsc.bg_color = lv_color_white();
 800c4d0:	80ab      	strh	r3, [r5, #4]
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800c4d2:	0020      	movs	r0, r4
 800c4d4:	f000 fd94 	bl	800d000 <lv_draw_rect>
    lv_draw_label_dsc_init(&label_dsc);
 800c4d8:	a80c      	add	r0, sp, #48	; 0x30
 800c4da:	f000 f941 	bl	800c760 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 800c4de:	0032      	movs	r2, r6
 800c4e0:	0020      	movs	r0, r4
 800c4e2:	4b91      	ldr	r3, [pc, #580]	; (800c728 <lv_draw_img+0x2ec>)
 800c4e4:	9700      	str	r7, [sp, #0]
 800c4e6:	a90c      	add	r1, sp, #48	; 0x30
 800c4e8:	f000 f952 	bl	800c790 <lv_draw_label>
}
 800c4ec:	e7be      	b.n	800c46c <lv_draw_img+0x30>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 800c4ee:	7d02      	ldrb	r2, [r0, #20]
 800c4f0:	06d3      	lsls	r3, r2, #27
 800c4f2:	0edb      	lsrs	r3, r3, #27
    switch(cf) {
 800c4f4:	2b03      	cmp	r3, #3
 800c4f6:	d034      	beq.n	800c562 <lv_draw_img+0x126>
 800c4f8:	2b06      	cmp	r3, #6
 800c4fa:	d032      	beq.n	800c562 <lv_draw_img+0x126>
    else if(LV_IMG_CF_ALPHA_8BIT == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_ALPHA_8BIT;
 800c4fc:	211f      	movs	r1, #31
 800c4fe:	4011      	ands	r1, r2
 800c500:	468b      	mov	fp, r1
 800c502:	290e      	cmp	r1, #14
 800c504:	d100      	bne.n	800c508 <lv_draw_img+0xcc>
 800c506:	e07e      	b.n	800c606 <lv_draw_img+0x1ca>
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 800c508:	2914      	cmp	r1, #20
 800c50a:	d00b      	beq.n	800c524 <lv_draw_img+0xe8>
    switch(cf) {
 800c50c:	2b0e      	cmp	r3, #14
 800c50e:	d900      	bls.n	800c512 <lv_draw_img+0xd6>
 800c510:	e0f8      	b.n	800c704 <lv_draw_img+0x2c8>
 800c512:	2201      	movs	r2, #1
 800c514:	409a      	lsls	r2, r3
 800c516:	0013      	movs	r3, r2
 800c518:	4a84      	ldr	r2, [pc, #528]	; (800c72c <lv_draw_img+0x2f0>)
 800c51a:	4013      	ands	r3, r2
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 800c51c:	1e5a      	subs	r2, r3, #1
 800c51e:	4193      	sbcs	r3, r2
 800c520:	3304      	adds	r3, #4
 800c522:	469b      	mov	fp, r3
    if(cdsc->dec_dsc.error_msg != NULL) {
 800c524:	4653      	mov	r3, sl
 800c526:	6a1f      	ldr	r7, [r3, #32]
 800c528:	2f00      	cmp	r7, #0
 800c52a:	d01d      	beq.n	800c568 <lv_draw_img+0x12c>
    lv_draw_rect_dsc_init(&rect_dsc);
 800c52c:	ad14      	add	r5, sp, #80	; 0x50
 800c52e:	0028      	movs	r0, r5
 800c530:	f000 fd40 	bl	800cfb4 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 800c534:	2301      	movs	r3, #1
 800c536:	425b      	negs	r3, r3
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800c538:	0032      	movs	r2, r6
 800c53a:	0029      	movs	r1, r5
    rect_dsc.bg_color = lv_color_white();
 800c53c:	80ab      	strh	r3, [r5, #4]
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800c53e:	0020      	movs	r0, r4
 800c540:	f000 fd5e 	bl	800d000 <lv_draw_rect>
    lv_draw_label_dsc_init(&label_dsc);
 800c544:	a80c      	add	r0, sp, #48	; 0x30
 800c546:	f000 f90b 	bl	800c760 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 800c54a:	2300      	movs	r3, #0
 800c54c:	0032      	movs	r2, r6
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	0020      	movs	r0, r4
 800c552:	003b      	movs	r3, r7
 800c554:	a90c      	add	r1, sp, #48	; 0x30
 800c556:	f000 f91b 	bl	800c790 <lv_draw_label>

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 800c55a:	4650      	mov	r0, sl
 800c55c:	f001 fa0e 	bl	800d97c <lv_img_decoder_close>
    if(res == LV_RES_INV) {
 800c560:	e784      	b.n	800c46c <lv_draw_img+0x30>
    switch(cf) {
 800c562:	2306      	movs	r3, #6
 800c564:	469b      	mov	fp, r3
 800c566:	e7dd      	b.n	800c524 <lv_draw_img+0xe8>
    else if(cdsc->dec_dsc.img_data) {
 800c568:	699b      	ldr	r3, [r3, #24]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d057      	beq.n	800c61e <lv_draw_img+0x1e2>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
 800c56e:	2300      	movs	r3, #0
 800c570:	5ef0      	ldrsh	r0, [r6, r3]
 800c572:	af0c      	add	r7, sp, #48	; 0x30
 800c574:	8038      	strh	r0, [r7, #0]
    dest->y1 = src->y1;
 800c576:	2202      	movs	r2, #2
 800c578:	5eb3      	ldrsh	r3, [r6, r2]
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800c57a:	6829      	ldr	r1, [r5, #0]
 800c57c:	807b      	strh	r3, [r7, #2]
 800c57e:	469c      	mov	ip, r3
    dest->x2 = src->x2;
 800c580:	2304      	movs	r3, #4
 800c582:	5ef2      	ldrsh	r2, [r6, r3]
 800c584:	80ba      	strh	r2, [r7, #4]
 800c586:	4690      	mov	r8, r2
    dest->y2 = src->y2;
 800c588:	2306      	movs	r3, #6
 800c58a:	5ef2      	ldrsh	r2, [r6, r3]
 800c58c:	2380      	movs	r3, #128	; 0x80
 800c58e:	80fa      	strh	r2, [r7, #6]
 800c590:	045b      	lsls	r3, r3, #17
 800c592:	4299      	cmp	r1, r3
 800c594:	d01e      	beq.n	800c5d4 <lv_draw_img+0x198>
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 800c596:	2100      	movs	r1, #0
 800c598:	5e6b      	ldrsh	r3, [r5, r1]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c59a:	4661      	mov	r1, ip
 800c59c:	3201      	adds	r2, #1
 800c59e:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c5a0:	4641      	mov	r1, r8
 800c5a2:	3101      	adds	r1, #1
 800c5a4:	1a09      	subs	r1, r1, r0
 800c5a6:	1d28      	adds	r0, r5, #4
 800c5a8:	9001      	str	r0, [sp, #4]
 800c5aa:	8868      	ldrh	r0, [r5, #2]
 800c5ac:	b212      	sxth	r2, r2
 800c5ae:	b209      	sxth	r1, r1
 800c5b0:	9000      	str	r0, [sp, #0]
 800c5b2:	0038      	movs	r0, r7
 800c5b4:	f000 fd54 	bl	800d060 <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 800c5b8:	8832      	ldrh	r2, [r6, #0]
 800c5ba:	883b      	ldrh	r3, [r7, #0]
            map_area_rot.y1 += coords->y1;
 800c5bc:	8879      	ldrh	r1, [r7, #2]
            map_area_rot.x1 += coords->x1;
 800c5be:	18d3      	adds	r3, r2, r3
 800c5c0:	803b      	strh	r3, [r7, #0]
            map_area_rot.y1 += coords->y1;
 800c5c2:	8873      	ldrh	r3, [r6, #2]
 800c5c4:	1859      	adds	r1, r3, r1
 800c5c6:	8079      	strh	r1, [r7, #2]
            map_area_rot.x2 += coords->x1;
 800c5c8:	88b9      	ldrh	r1, [r7, #4]
 800c5ca:	1852      	adds	r2, r2, r1
 800c5cc:	80ba      	strh	r2, [r7, #4]
            map_area_rot.y2 += coords->y1;
 800c5ce:	88fa      	ldrh	r2, [r7, #6]
 800c5d0:	189b      	adds	r3, r3, r2
 800c5d2:	80fb      	strh	r3, [r7, #6]
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 800c5d4:	003a      	movs	r2, r7
 800c5d6:	68a1      	ldr	r1, [r4, #8]
 800c5d8:	a814      	add	r0, sp, #80	; 0x50
 800c5da:	f004 fed7 	bl	801138c <_lv_area_intersect>
        if(union_ok == false) {
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	d0bb      	beq.n	800c55a <lv_draw_img+0x11e>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800c5e2:	68a3      	ldr	r3, [r4, #8]
    if(draw_ctx->draw_img_decoded == NULL) return;
 800c5e4:	6967      	ldr	r7, [r4, #20]
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800c5e6:	4698      	mov	r8, r3
        draw_ctx->clip_area = &clip_com;
 800c5e8:	ab14      	add	r3, sp, #80	; 0x50
 800c5ea:	60a3      	str	r3, [r4, #8]
    if(draw_ctx->draw_img_decoded == NULL) return;
 800c5ec:	2f00      	cmp	r7, #0
 800c5ee:	d007      	beq.n	800c600 <lv_draw_img+0x1c4>
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 800c5f0:	465a      	mov	r2, fp
 800c5f2:	4653      	mov	r3, sl
 800c5f4:	0029      	movs	r1, r5
 800c5f6:	699b      	ldr	r3, [r3, #24]
 800c5f8:	0020      	movs	r0, r4
 800c5fa:	9200      	str	r2, [sp, #0]
 800c5fc:	0032      	movs	r2, r6
 800c5fe:	47b8      	blx	r7
        draw_ctx->clip_area = clip_area_ori;
 800c600:	4643      	mov	r3, r8
 800c602:	60a3      	str	r3, [r4, #8]
 800c604:	e7a9      	b.n	800c55a <lv_draw_img+0x11e>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800c606:	2380      	movs	r3, #128	; 0x80
 800c608:	682a      	ldr	r2, [r5, #0]
 800c60a:	045b      	lsls	r3, r3, #17
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d089      	beq.n	800c524 <lv_draw_img+0xe8>
            cdsc->dec_dsc.img_data = NULL;
 800c610:	4642      	mov	r2, r8
    if(cdsc->dec_dsc.error_msg != NULL) {
 800c612:	6a07      	ldr	r7, [r0, #32]
            cdsc->dec_dsc.img_data = NULL;
 800c614:	6182      	str	r2, [r0, #24]
    if(cdsc->dec_dsc.error_msg != NULL) {
 800c616:	2f00      	cmp	r7, #0
 800c618:	d188      	bne.n	800c52c <lv_draw_img+0xf0>
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800c61a:	2305      	movs	r3, #5
 800c61c:	469b      	mov	fp, r3
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 800c61e:	0032      	movs	r2, r6
 800c620:	68a1      	ldr	r1, [r4, #8]
 800c622:	a80a      	add	r0, sp, #40	; 0x28
 800c624:	f004 feb2 	bl	801138c <_lv_area_intersect>
        if(union_ok == false) {
 800c628:	2800      	cmp	r0, #0
 800c62a:	d096      	beq.n	800c55a <lv_draw_img+0x11e>
 800c62c:	ab08      	add	r3, sp, #32
 800c62e:	899b      	ldrh	r3, [r3, #12]
 800c630:	aa08      	add	r2, sp, #32
 800c632:	8912      	ldrh	r2, [r2, #8]
 800c634:	3301      	adds	r3, #1
 800c636:	1a9b      	subs	r3, r3, r2
 800c638:	b21b      	sxth	r3, r3
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800c63a:	469c      	mov	ip, r3
 800c63c:	0058      	lsls	r0, r3, #1
 800c63e:	4460      	add	r0, ip
 800c640:	9305      	str	r3, [sp, #20]
 800c642:	f005 fd31 	bl	80120a8 <lv_mem_buf_get>
    dest->x1 = src->x1;
 800c646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800c648:	68a3      	ldr	r3, [r4, #8]
 800c64a:	920c      	str	r2, [sp, #48]	; 0x30
        lv_area_set_height(&line, 1);
 800c64c:	af0c      	add	r7, sp, #48	; 0x30
 800c64e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c650:	2101      	movs	r1, #1
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800c652:	9004      	str	r0, [sp, #16]
        lv_area_set_height(&line, 1);
 800c654:	0038      	movs	r0, r7
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800c656:	9308      	str	r3, [sp, #32]
 800c658:	920d      	str	r2, [sp, #52]	; 0x34
        lv_area_set_height(&line, 1);
 800c65a:	f004 fe61 	bl	8011320 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 800c65e:	aa08      	add	r2, sp, #32
 800c660:	2308      	movs	r3, #8
 800c662:	5ed3      	ldrsh	r3, [r2, r3]
 800c664:	2100      	movs	r1, #0
 800c666:	5e72      	ldrsh	r2, [r6, r1]
        int32_t y = mask_com.y1 - coords->y1;
 800c668:	a908      	add	r1, sp, #32
 800c66a:	200a      	movs	r0, #10
 800c66c:	5e09      	ldrsh	r1, [r1, r0]
 800c66e:	4688      	mov	r8, r1
 800c670:	2002      	movs	r0, #2
 800c672:	5e31      	ldrsh	r1, [r6, r0]
 800c674:	4640      	mov	r0, r8
 800c676:	1a41      	subs	r1, r0, r1
 800c678:	9103      	str	r1, [sp, #12]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800c67a:	a908      	add	r1, sp, #32
 800c67c:	200e      	movs	r0, #14
 800c67e:	5e09      	ldrsh	r1, [r1, r0]
 800c680:	4588      	cmp	r8, r1
 800c682:	dc39      	bgt.n	800c6f8 <lv_draw_img+0x2bc>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800c684:	1a9b      	subs	r3, r3, r2
 800c686:	b21a      	sxth	r2, r3
 800c688:	9b08      	ldr	r3, [sp, #32]
 800c68a:	a914      	add	r1, sp, #80	; 0x50
 800c68c:	9206      	str	r2, [sp, #24]
 800c68e:	465a      	mov	r2, fp
 800c690:	9609      	str	r6, [sp, #36]	; 0x24
 800c692:	46ab      	mov	fp, r5
 800c694:	4646      	mov	r6, r8
 800c696:	000d      	movs	r5, r1
 800c698:	4699      	mov	r9, r3
 800c69a:	9207      	str	r2, [sp, #28]
            union_ok = _lv_area_intersect(&mask_line, clip_area_ori, &line);
 800c69c:	003a      	movs	r2, r7
 800c69e:	4649      	mov	r1, r9
 800c6a0:	0028      	movs	r0, r5
 800c6a2:	f004 fe73 	bl	801138c <_lv_area_intersect>
            if(union_ok == false) continue;
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	d020      	beq.n	800c6ec <lv_draw_img+0x2b0>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800c6aa:	466b      	mov	r3, sp
 800c6ac:	220c      	movs	r2, #12
 800c6ae:	5e9a      	ldrsh	r2, [r3, r2]
 800c6b0:	9b04      	ldr	r3, [sp, #16]
 800c6b2:	4650      	mov	r0, sl
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	9906      	ldr	r1, [sp, #24]
 800c6b8:	9b05      	ldr	r3, [sp, #20]
 800c6ba:	f001 f94d 	bl	800d958 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 800c6be:	2801      	cmp	r0, #1
 800c6c0:	d123      	bne.n	800c70a <lv_draw_img+0x2ce>
    if(draw_ctx->draw_img_decoded == NULL) return;
 800c6c2:	6963      	ldr	r3, [r4, #20]
            draw_ctx->clip_area = &mask_line;
 800c6c4:	60a5      	str	r5, [r4, #8]
    if(draw_ctx->draw_img_decoded == NULL) return;
 800c6c6:	4698      	mov	r8, r3
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d006      	beq.n	800c6da <lv_draw_img+0x29e>
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 800c6cc:	9b07      	ldr	r3, [sp, #28]
 800c6ce:	003a      	movs	r2, r7
 800c6d0:	9300      	str	r3, [sp, #0]
 800c6d2:	4659      	mov	r1, fp
 800c6d4:	0020      	movs	r0, r4
 800c6d6:	9b04      	ldr	r3, [sp, #16]
 800c6d8:	47c0      	blx	r8
            line.y1++;
 800c6da:	887b      	ldrh	r3, [r7, #2]
 800c6dc:	3301      	adds	r3, #1
 800c6de:	807b      	strh	r3, [r7, #2]
            line.y2++;
 800c6e0:	88fb      	ldrh	r3, [r7, #6]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	80fb      	strh	r3, [r7, #6]
            y++;
 800c6e6:	9b03      	ldr	r3, [sp, #12]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	9303      	str	r3, [sp, #12]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800c6ec:	ab08      	add	r3, sp, #32
 800c6ee:	220e      	movs	r2, #14
 800c6f0:	5e9b      	ldrsh	r3, [r3, r2]
 800c6f2:	3601      	adds	r6, #1
 800c6f4:	429e      	cmp	r6, r3
 800c6f6:	ddd1      	ble.n	800c69c <lv_draw_img+0x260>
        draw_ctx->clip_area = clip_area_ori;
 800c6f8:	9b08      	ldr	r3, [sp, #32]
        lv_mem_buf_release(buf);
 800c6fa:	9804      	ldr	r0, [sp, #16]
        draw_ctx->clip_area = clip_area_ori;
 800c6fc:	60a3      	str	r3, [r4, #8]
        lv_mem_buf_release(buf);
 800c6fe:	f005 fd77 	bl	80121f0 <lv_mem_buf_release>
 800c702:	e72a      	b.n	800c55a <lv_draw_img+0x11e>
    else cf = LV_IMG_CF_TRUE_COLOR;
 800c704:	2304      	movs	r3, #4
 800c706:	469b      	mov	fp, r3
 800c708:	e70c      	b.n	800c524 <lv_draw_img+0xe8>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800c70a:	4650      	mov	r0, sl
 800c70c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c70e:	f001 f935 	bl	800d97c <lv_img_decoder_close>
                lv_mem_buf_release(buf);
 800c712:	9804      	ldr	r0, [sp, #16]
 800c714:	f005 fd6c 	bl	80121f0 <lv_mem_buf_release>
    lv_img_decoder_close(&cache->dec_dsc);
 800c718:	4650      	mov	r0, sl
 800c71a:	f001 f92f 	bl	800d97c <lv_img_decoder_close>
                draw_ctx->clip_area = clip_area_ori;
 800c71e:	9b08      	ldr	r3, [sp, #32]
                lv_img_decoder_close(&cdsc->dec_dsc);
 800c720:	46a9      	mov	r9, r5
                draw_ctx->clip_area = clip_area_ori;
 800c722:	60a3      	str	r3, [r4, #8]
    if(res == LV_RES_INV) {
 800c724:	e6b4      	b.n	800c490 <lv_draw_img+0x54>
 800c726:	46c0      	nop			; (mov r8, r8)
 800c728:	0801b900 	.word	0x0801b900
 800c72c:	00007fa4 	.word	0x00007fa4

0800c730 <lv_img_cf_get_px_size>:
    switch(cf) {
 800c730:	1f03      	subs	r3, r0, #4
 800c732:	b2db      	uxtb	r3, r3
{
 800c734:	2000      	movs	r0, #0
 800c736:	2b0a      	cmp	r3, #10
 800c738:	d801      	bhi.n	800c73e <lv_img_cf_get_px_size+0xe>
 800c73a:	4a01      	ldr	r2, [pc, #4]	; (800c740 <lv_img_cf_get_px_size+0x10>)
 800c73c:	5cd0      	ldrb	r0, [r2, r3]
}
 800c73e:	4770      	bx	lr
 800c740:	0801b908 	.word	0x0801b908

0800c744 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 800c744:	2800      	cmp	r0, #0
 800c746:	d009      	beq.n	800c75c <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800c748:	7803      	ldrb	r3, [r0, #0]
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800c74a:	2001      	movs	r0, #1
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800c74c:	001a      	movs	r2, r3
 800c74e:	3a20      	subs	r2, #32
 800c750:	2a5f      	cmp	r2, #95	; 0x5f
 800c752:	d800      	bhi.n	800c756 <lv_img_src_get_type+0x12>
}
 800c754:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 800c756:	09d8      	lsrs	r0, r3, #7
 800c758:	0040      	lsls	r0, r0, #1
 800c75a:	e7fb      	b.n	800c754 <lv_img_src_get_type+0x10>
    if(src == NULL) return img_src_type;
 800c75c:	2003      	movs	r0, #3
 800c75e:	e7f9      	b.n	800c754 <lv_img_src_get_type+0x10>

0800c760 <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
 800c760:	b570      	push	{r4, r5, r6, lr}
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800c762:	2120      	movs	r1, #32
{
 800c764:	0004      	movs	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800c766:	f005 ffa3 	bl	80126b0 <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 800c76a:	23ff      	movs	r3, #255	; 0xff
    dsc->color = lv_color_black();
 800c76c:	2500      	movs	r5, #0
    dsc->opa = LV_OPA_COVER;
 800c76e:	76a3      	strb	r3, [r4, #26]
    dsc->font = LV_FONT_DEFAULT;
 800c770:	4b05      	ldr	r3, [pc, #20]	; (800c788 <lv_draw_label_dsc_init+0x28>)
    dsc->color = lv_color_black();
 800c772:	60e5      	str	r5, [r4, #12]
    dsc->font = LV_FONT_DEFAULT;
 800c774:	6023      	str	r3, [r4, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800c776:	4b05      	ldr	r3, [pc, #20]	; (800c78c <lv_draw_label_dsc_init+0x2c>)
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
    dsc->sel_color = lv_color_black();
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800c778:	2005      	movs	r0, #5
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800c77a:	6063      	str	r3, [r4, #4]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 800c77c:	60a3      	str	r3, [r4, #8]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800c77e:	f005 f913 	bl	80119a8 <lv_palette_main>
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 800c782:	76e5      	strb	r5, [r4, #27]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800c784:	8220      	strh	r0, [r4, #16]
}
 800c786:	bd70      	pop	{r4, r5, r6, pc}
 800c788:	0801bfc8 	.word	0x0801bfc8
 800c78c:	0000ffff 	.word	0x0000ffff

0800c790 <lv_draw_label>:
 * @param hint pointer to a `lv_draw_label_hint_t` variable.
 * It is managed by the draw to speed up the drawing of very long texts (thousands of lines).
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                         const lv_area_t * coords, const char * txt, lv_draw_label_hint_t * hint)
{
 800c790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c792:	46de      	mov	lr, fp
 800c794:	4657      	mov	r7, sl
 800c796:	4645      	mov	r5, r8
 800c798:	464e      	mov	r6, r9
 800c79a:	b5e0      	push	{r5, r6, r7, lr}
 800c79c:	b0bd      	sub	sp, #244	; 0xf4
 800c79e:	9210      	str	r2, [sp, #64]	; 0x40
 800c7a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7a2:	469c      	mov	ip, r3
    if(dsc->opa <= LV_OPA_MIN) return;
 800c7a4:	7e8b      	ldrb	r3, [r1, #26]
{
 800c7a6:	4683      	mov	fp, r0
 800c7a8:	000f      	movs	r7, r1
 800c7aa:	4690      	mov	r8, r2
    if(dsc->opa <= LV_OPA_MIN) return;
 800c7ac:	2b02      	cmp	r3, #2
 800c7ae:	d917      	bls.n	800c7e0 <lv_draw_label+0x50>
    if(dsc->font == NULL) {
 800c7b0:	6809      	ldr	r1, [r1, #0]
 800c7b2:	9108      	str	r1, [sp, #32]
 800c7b4:	2900      	cmp	r1, #0
 800c7b6:	d013      	beq.n	800c7e0 <lv_draw_label+0x50>
        LV_LOG_WARN("dsc->font == NULL");
        return;
    }

    if(draw_ctx->draw_letter == NULL) {
 800c7b8:	69c1      	ldr	r1, [r0, #28]
 800c7ba:	2900      	cmp	r1, #0
 800c7bc:	d010      	beq.n	800c7e0 <lv_draw_label+0x50>
        LV_LOG_WARN("draw->draw_letter == NULL (there is no function to draw letters)");
        return;
    }

    lv_draw_label_dsc_t dsc_mod = *dsc;
 800c7be:	0038      	movs	r0, r7
 800c7c0:	a926      	add	r1, sp, #152	; 0x98
 800c7c2:	4689      	mov	r9, r1
 800c7c4:	c870      	ldmia	r0!, {r4, r5, r6}
 800c7c6:	c170      	stmia	r1!, {r4, r5, r6}
 800c7c8:	0002      	movs	r2, r0
 800c7ca:	000b      	movs	r3, r1
 800c7cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 800c7ce:	c313      	stmia	r3!, {r0, r1, r4}
 800c7d0:	ca03      	ldmia	r2!, {r0, r1}
 800c7d2:	c303      	stmia	r3!, {r0, r1}

    const lv_font_t * font = dsc->font;
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt == NULL || txt[0] == '\0')
 800c7d4:	4663      	mov	r3, ip
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d002      	beq.n	800c7e0 <lv_draw_label+0x50>
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d106      	bne.n	800c7ee <lv_draw_label+0x5e>

        if(pos.y > draw_ctx->clip_area->y2) return;
    }

    LV_ASSERT_MEM_INTEGRITY();
}
 800c7e0:	b03d      	add	sp, #244	; 0xf4
 800c7e2:	bcf0      	pop	{r4, r5, r6, r7}
 800c7e4:	46bb      	mov	fp, r7
 800c7e6:	46b2      	mov	sl, r6
 800c7e8:	46a9      	mov	r9, r5
 800c7ea:	46a0      	mov	r8, r4
 800c7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 800c7ee:	465b      	mov	r3, fp
 800c7f0:	4641      	mov	r1, r8
 800c7f2:	689a      	ldr	r2, [r3, #8]
 800c7f4:	a81f      	add	r0, sp, #124	; 0x7c
 800c7f6:	f004 fdc9 	bl	801138c <_lv_area_intersect>
    if(!clip_ok) return;
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	d0f0      	beq.n	800c7e0 <lv_draw_label+0x50>
    lv_text_align_t align = dsc->align;
 800c7fe:	7f3b      	ldrb	r3, [r7, #28]
 800c800:	9315      	str	r3, [sp, #84]	; 0x54
    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 800c802:	7f79      	ldrb	r1, [r7, #29]
 800c804:	078a      	lsls	r2, r1, #30
 800c806:	d500      	bpl.n	800c80a <lv_draw_label+0x7a>
 800c808:	e220      	b.n	800cc4c <lv_draw_label+0x4bc>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c80a:	4643      	mov	r3, r8
 800c80c:	2000      	movs	r0, #0
 800c80e:	5e1a      	ldrsh	r2, [r3, r0]
 800c810:	889b      	ldrh	r3, [r3, #4]
 800c812:	3301      	adds	r3, #1
 800c814:	1a9b      	subs	r3, r3, r2
 800c816:	b21b      	sxth	r3, r3
 800c818:	9311      	str	r3, [sp, #68]	; 0x44
    int32_t line_height_font = lv_font_get_line_height(font);
 800c81a:	9b08      	ldr	r3, [sp, #32]
    pos.x = coords->x1;
 800c81c:	ae1b      	add	r6, sp, #108	; 0x6c
    int32_t line_height_font = lv_font_get_line_height(font);
 800c81e:	2008      	movs	r0, #8
 800c820:	5e1b      	ldrsh	r3, [r3, r0]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800c822:	9d46      	ldr	r5, [sp, #280]	; 0x118
    int32_t line_height_font = lv_font_get_line_height(font);
 800c824:	4698      	mov	r8, r3
    int32_t line_height = line_height_font + dsc->line_space;
 800c826:	2012      	movs	r0, #18
 800c828:	5e3b      	ldrsh	r3, [r7, r0]
    pos.x = coords->x1;
 800c82a:	8032      	strh	r2, [r6, #0]
    int32_t line_height = line_height_font + dsc->line_space;
 800c82c:	001c      	movs	r4, r3
    pos.y = coords->y1;
 800c82e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    int32_t line_height = line_height_font + dsc->line_space;
 800c830:	4444      	add	r4, r8
 800c832:	9412      	str	r4, [sp, #72]	; 0x48
    pos.y = coords->y1;
 800c834:	2002      	movs	r0, #2
 800c836:	5e18      	ldrsh	r0, [r3, r0]
    x_ofs = dsc->ofs_x;
 800c838:	2216      	movs	r2, #22
 800c83a:	5ebb      	ldrsh	r3, [r7, r2]
 800c83c:	9316      	str	r3, [sp, #88]	; 0x58
    y_ofs = dsc->ofs_y;
 800c83e:	2318      	movs	r3, #24
 800c840:	5efa      	ldrsh	r2, [r7, r3]
    pos.y += y_ofs;
 800c842:	1883      	adds	r3, r0, r2
 800c844:	b29b      	uxth	r3, r3
 800c846:	8073      	strh	r3, [r6, #2]
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800c848:	2d00      	cmp	r5, #0
 800c84a:	d100      	bne.n	800c84e <lv_draw_label+0xbe>
 800c84c:	e214      	b.n	800cc78 <lv_draw_label+0x4e8>
 800c84e:	2a00      	cmp	r2, #0
 800c850:	d100      	bne.n	800c854 <lv_draw_label+0xc4>
 800c852:	e129      	b.n	800caa8 <lv_draw_label+0x318>
    uint32_t line_start     = 0;
 800c854:	2300      	movs	r3, #0
 800c856:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c858:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800c85a:	2314      	movs	r3, #20
 800c85c:	5efa      	ldrsh	r2, [r7, r3]
 800c85e:	2300      	movs	r3, #0
 800c860:	9101      	str	r1, [sp, #4]
 800c862:	9300      	str	r3, [sp, #0]
 800c864:	9908      	ldr	r1, [sp, #32]
 800c866:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c868:	f007 f818 	bl	801389c <_lv_txt_get_next_line>
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800c86c:	2202      	movs	r2, #2
 800c86e:	5eb3      	ldrsh	r3, [r6, r2]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800c870:	2200      	movs	r2, #0
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800c872:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c874:	0004      	movs	r4, r0
 800c876:	468c      	mov	ip, r1
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800c878:	4692      	mov	sl, r2
 800c87a:	4642      	mov	r2, r8
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800c87c:	4dd4      	ldr	r5, [pc, #848]	; (800cbd0 <lv_draw_label+0x440>)
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800c87e:	4464      	add	r4, ip
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800c880:	9205      	str	r2, [sp, #20]
 800c882:	e02d      	b.n	800c8e0 <lv_draw_label+0x150>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800c884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c886:	9908      	ldr	r1, [sp, #32]
 800c888:	4698      	mov	r8, r3
 800c88a:	2314      	movs	r3, #20
 800c88c:	5efa      	ldrsh	r2, [r7, r3]
 800c88e:	7f7b      	ldrb	r3, [r7, #29]
 800c890:	44a0      	add	r8, r4
 800c892:	9301      	str	r3, [sp, #4]
 800c894:	4653      	mov	r3, sl
 800c896:	4640      	mov	r0, r8
 800c898:	9300      	str	r3, [sp, #0]
 800c89a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c89c:	f006 fffe 	bl	801389c <_lv_txt_get_next_line>
        pos.y += line_height;
 800c8a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c8a2:	8873      	ldrh	r3, [r6, #2]
 800c8a4:	4694      	mov	ip, r2
 800c8a6:	4463      	add	r3, ip
 800c8a8:	b21b      	sxth	r3, r3
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800c8aa:	1820      	adds	r0, r4, r0
        pos.y += line_height;
 800c8ac:	8073      	strh	r3, [r6, #2]
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800c8ae:	42ab      	cmp	r3, r5
 800c8b0:	db0f      	blt.n	800c8d2 <lv_draw_label+0x142>
 800c8b2:	9a46      	ldr	r2, [sp, #280]	; 0x118
 800c8b4:	6812      	ldr	r2, [r2, #0]
 800c8b6:	9206      	str	r2, [sp, #24]
 800c8b8:	2a00      	cmp	r2, #0
 800c8ba:	da0a      	bge.n	800c8d2 <lv_draw_label+0x142>
            hint->line_start = line_start;
 800c8bc:	9a46      	ldr	r2, [sp, #280]	; 0x118
 800c8be:	6014      	str	r4, [r2, #0]
            hint->y          = pos.y - coords->y1;
 800c8c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c8c2:	2102      	movs	r1, #2
 800c8c4:	5e51      	ldrsh	r1, [r2, r1]
 800c8c6:	9a46      	ldr	r2, [sp, #280]	; 0x118
 800c8c8:	468c      	mov	ip, r1
 800c8ca:	1a59      	subs	r1, r3, r1
 800c8cc:	6051      	str	r1, [r2, #4]
            hint->coord_y    = coords->y1;
 800c8ce:	4661      	mov	r1, ip
 800c8d0:	6091      	str	r1, [r2, #8]
        if(txt[line_start] == '\0') return;
 800c8d2:	4642      	mov	r2, r8
 800c8d4:	7812      	ldrb	r2, [r2, #0]
 800c8d6:	0021      	movs	r1, r4
 800c8d8:	2a00      	cmp	r2, #0
 800c8da:	d100      	bne.n	800c8de <lv_draw_label+0x14e>
 800c8dc:	e780      	b.n	800c7e0 <lv_draw_label+0x50>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800c8de:	0004      	movs	r4, r0
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800c8e0:	9a05      	ldr	r2, [sp, #20]
 800c8e2:	4694      	mov	ip, r2
 800c8e4:	465a      	mov	r2, fp
 800c8e6:	6892      	ldr	r2, [r2, #8]
 800c8e8:	4463      	add	r3, ip
 800c8ea:	2002      	movs	r0, #2
 800c8ec:	5e12      	ldrsh	r2, [r2, r0]
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	dbc8      	blt.n	800c884 <lv_draw_label+0xf4>
 800c8f2:	910e      	str	r1, [sp, #56]	; 0x38
 800c8f4:	940f      	str	r4, [sp, #60]	; 0x3c
    if(align == LV_TEXT_ALIGN_CENTER) {
 800c8f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	d100      	bne.n	800c8fe <lv_draw_label+0x16e>
 800c8fc:	e285      	b.n	800ce0a <lv_draw_label+0x67a>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 800c8fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c902:	4694      	mov	ip, r2
 800c904:	4463      	add	r3, ip
 800c906:	4698      	mov	r8, r3
 800c908:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c90a:	2b03      	cmp	r3, #3
 800c90c:	d100      	bne.n	800c910 <lv_draw_label+0x180>
 800c90e:	e2a6      	b.n	800ce5e <lv_draw_label+0x6ce>
    uint32_t sel_start = dsc->sel_start;
 800c910:	687b      	ldr	r3, [r7, #4]
    uint32_t sel_end = dsc->sel_end;
 800c912:	68ba      	ldr	r2, [r7, #8]
    uint32_t sel_start = dsc->sel_start;
 800c914:	9306      	str	r3, [sp, #24]
    uint32_t sel_end = dsc->sel_end;
 800c916:	920a      	str	r2, [sp, #40]	; 0x28
    if(sel_start > sel_end) {
 800c918:	4293      	cmp	r3, r2
 800c91a:	d901      	bls.n	800c920 <lv_draw_label+0x190>
 800c91c:	9206      	str	r2, [sp, #24]
 800c91e:	930a      	str	r3, [sp, #40]	; 0x28
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 800c920:	7fbb      	ldrb	r3, [r7, #30]
 800c922:	079b      	lsls	r3, r3, #30
 800c924:	d000      	beq.n	800c928 <lv_draw_label+0x198>
 800c926:	e1df      	b.n	800cce8 <lv_draw_label+0x558>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800c928:	a82e      	add	r0, sp, #184	; 0xb8
 800c92a:	f000 fb43 	bl	800cfb4 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800c92e:	2164      	movs	r1, #100	; 0x64
 800c930:	8a3b      	ldrh	r3, [r7, #16]
 800c932:	aa16      	add	r2, sp, #88	; 0x58
 800c934:	1852      	adds	r2, r2, r1
 800c936:	8013      	strh	r3, [r2, #0]
    int32_t pos_x_start = pos.x;
 800c938:	2200      	movs	r2, #0
 800c93a:	5eb3      	ldrsh	r3, [r6, r2]
 800c93c:	465c      	mov	r4, fp
 800c93e:	9318      	str	r3, [sp, #96]	; 0x60
    while(txt[line_start] != '\0') {
 800c940:	2300      	movs	r3, #0
 800c942:	9305      	str	r3, [sp, #20]
 800c944:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t par_start = 0;
 800c946:	9317      	str	r3, [sp, #92]	; 0x5c
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800c948:	4ba2      	ldr	r3, [pc, #648]	; (800cbd4 <lv_draw_label+0x444>)
 800c94a:	469a      	mov	sl, r3
 800c94c:	4643      	mov	r3, r8
 800c94e:	9309      	str	r3, [sp, #36]	; 0x24
    while(txt[line_start] != '\0') {
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d100      	bne.n	800c958 <lv_draw_label+0x1c8>
 800c956:	e743      	b.n	800c7e0 <lv_draw_label+0x50>
        pos.x += x_ofs;
 800c958:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c95a:	8833      	ldrh	r3, [r6, #0]
 800c95c:	4694      	mov	ip, r2
 800c95e:	4463      	add	r3, ip
 800c960:	8033      	strh	r3, [r6, #0]
        i         = 0;
 800c962:	2300      	movs	r3, #0
        while(i < line_end - line_start) {
 800c964:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        i         = 0;
 800c966:	931c      	str	r3, [sp, #112]	; 0x70
        while(i < line_end - line_start) {
 800c968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c96a:	1a99      	subs	r1, r3, r2
 800c96c:	910c      	str	r1, [sp, #48]	; 0x30
 800c96e:	4293      	cmp	r3, r2
 800c970:	d100      	bne.n	800c974 <lv_draw_label+0x1e4>
 800c972:	e165      	b.n	800cc40 <lv_draw_label+0x4b0>
        pos.y += line_height;
 800c974:	466b      	mov	r3, sp
 800c976:	2248      	movs	r2, #72	; 0x48
 800c978:	189b      	adds	r3, r3, r2
 800c97a:	881b      	ldrh	r3, [r3, #0]
        while(i < line_end - line_start) {
 800c97c:	2100      	movs	r1, #0
        pos.y += line_height;
 800c97e:	9314      	str	r3, [sp, #80]	; 0x50
        cmd_state = CMD_STATE_WAIT;
 800c980:	2300      	movs	r3, #0
 800c982:	9307      	str	r3, [sp, #28]
 800c984:	ab1e      	add	r3, sp, #120	; 0x78
 800c986:	4698      	mov	r8, r3
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800c988:	4b93      	ldr	r3, [pc, #588]	; (800cbd8 <lv_draw_label+0x448>)
 800c98a:	469b      	mov	fp, r3
 800c98c:	4643      	mov	r3, r8
 800c98e:	46a0      	mov	r8, r4
 800c990:	930d      	str	r3, [sp, #52]	; 0x34
 800c992:	9b06      	ldr	r3, [sp, #24]
 800c994:	455b      	cmp	r3, fp
 800c996:	d100      	bne.n	800c99a <lv_draw_label+0x20a>
 800c998:	e09d      	b.n	800cad6 <lv_draw_label+0x346>
 800c99a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c99c:	455b      	cmp	r3, fp
 800c99e:	d100      	bne.n	800c9a2 <lv_draw_label+0x212>
 800c9a0:	e099      	b.n	800cad6 <lv_draw_label+0x346>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800c9a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c9a6:	469c      	mov	ip, r3
 800c9a8:	4653      	mov	r3, sl
 800c9aa:	4461      	add	r1, ip
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4798      	blx	r3
 800c9b0:	0004      	movs	r4, r0
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 800c9b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9b6:	ab1c      	add	r3, sp, #112	; 0x70
 800c9b8:	a91d      	add	r1, sp, #116	; 0x74
 800c9ba:	f007 f9c3 	bl	8013d44 <_lv_txt_encoded_letter_next_2>
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 800c9be:	2201      	movs	r2, #1
 800c9c0:	0010      	movs	r0, r2
 800c9c2:	7f7b      	ldrb	r3, [r7, #29]
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800c9c4:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c9c6:	4018      	ands	r0, r3
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 800c9c8:	421a      	tst	r2, r3
 800c9ca:	d006      	beq.n	800c9da <lv_draw_label+0x24a>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800c9cc:	9b07      	ldr	r3, [sp, #28]
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800c9ce:	2923      	cmp	r1, #35	; 0x23
 800c9d0:	d100      	bne.n	800c9d4 <lv_draw_label+0x244>
 800c9d2:	e083      	b.n	800cadc <lv_draw_label+0x34c>
                if(cmd_state == CMD_STATE_PAR) {
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d100      	bne.n	800c9da <lv_draw_label+0x24a>
 800c9d8:	e08b      	b.n	800caf2 <lv_draw_label+0x362>
            color = dsc->color;
 800c9da:	89bb      	ldrh	r3, [r7, #12]
 800c9dc:	9305      	str	r3, [sp, #20]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800c9de:	9b07      	ldr	r3, [sp, #28]
 800c9e0:	2b02      	cmp	r3, #2
 800c9e2:	d101      	bne.n	800c9e8 <lv_draw_label+0x258>
 800c9e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c9e6:	9305      	str	r3, [sp, #20]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800c9e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c9ea:	9808      	ldr	r0, [sp, #32]
 800c9ec:	f003 fd70 	bl	80104d0 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800c9f0:	9b06      	ldr	r3, [sp, #24]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800c9f2:	0005      	movs	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800c9f4:	455b      	cmp	r3, fp
 800c9f6:	d007      	beq.n	800ca08 <lv_draw_label+0x278>
 800c9f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9fa:	455a      	cmp	r2, fp
 800c9fc:	d004      	beq.n	800ca08 <lv_draw_label+0x278>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800c9fe:	42a3      	cmp	r3, r4
 800ca00:	d802      	bhi.n	800ca08 <lv_draw_label+0x278>
 800ca02:	42a2      	cmp	r2, r4
 800ca04:	d900      	bls.n	800ca08 <lv_draw_label+0x278>
 800ca06:	e081      	b.n	800cb0c <lv_draw_label+0x37c>
            dsc_mod.color = color;
 800ca08:	464b      	mov	r3, r9

void lv_draw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                    uint32_t letter)
{
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 800ca0a:	4640      	mov	r0, r8
            dsc_mod.color = color;
 800ca0c:	9a05      	ldr	r2, [sp, #20]
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 800ca0e:	4649      	mov	r1, r9
            dsc_mod.color = color;
 800ca10:	819a      	strh	r2, [r3, #12]
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 800ca12:	69c4      	ldr	r4, [r0, #28]
 800ca14:	0032      	movs	r2, r6
 800ca16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca18:	47a0      	blx	r4
            if(letter_w > 0) {
 800ca1a:	2d00      	cmp	r5, #0
 800ca1c:	d004      	beq.n	800ca28 <lv_draw_label+0x298>
                pos.x += letter_w + dsc->letter_space;
 800ca1e:	8830      	ldrh	r0, [r6, #0]
 800ca20:	8abb      	ldrh	r3, [r7, #20]
 800ca22:	18c0      	adds	r0, r0, r3
 800ca24:	182d      	adds	r5, r5, r0
 800ca26:	8035      	strh	r5, [r6, #0]
        while(i < line_end - line_start) {
 800ca28:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ca2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca2c:	428b      	cmp	r3, r1
 800ca2e:	d8b0      	bhi.n	800c992 <lv_draw_label+0x202>
 800ca30:	4644      	mov	r4, r8
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800ca32:	7fbb      	ldrb	r3, [r7, #30]
 800ca34:	075b      	lsls	r3, r3, #29
 800ca36:	0f5a      	lsrs	r2, r3, #29
 800ca38:	005b      	lsls	r3, r3, #1
 800ca3a:	d500      	bpl.n	800ca3e <lv_draw_label+0x2ae>
 800ca3c:	e0a2      	b.n	800cb84 <lv_draw_label+0x3f4>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800ca3e:	07d3      	lsls	r3, r2, #31
 800ca40:	d500      	bpl.n	800ca44 <lv_draw_label+0x2b4>
 800ca42:	e081      	b.n	800cb48 <lv_draw_label+0x3b8>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800ca44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca46:	2114      	movs	r1, #20
 800ca48:	5e7a      	ldrsh	r2, [r7, r1]
 800ca4a:	4698      	mov	r8, r3
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ca50:	7f7b      	ldrb	r3, [r7, #29]
 800ca52:	4445      	add	r5, r8
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	9100      	str	r1, [sp, #0]
 800ca58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca5a:	9908      	ldr	r1, [sp, #32]
 800ca5c:	0028      	movs	r0, r5
 800ca5e:	f006 ff1d 	bl	801389c <_lv_txt_get_next_line>
 800ca62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca64:	0001      	movs	r1, r0
 800ca66:	4698      	mov	r8, r3
        pos.x = coords->x1;
 800ca68:	9b10      	ldr	r3, [sp, #64]	; 0x40
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800ca6a:	4480      	add	r8, r0
        pos.x = coords->x1;
 800ca6c:	881b      	ldrh	r3, [r3, #0]
 800ca6e:	8033      	strh	r3, [r6, #0]
        if(align == LV_TEXT_ALIGN_CENTER) {
 800ca70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca72:	2b02      	cmp	r3, #2
 800ca74:	d100      	bne.n	800ca78 <lv_draw_label+0x2e8>
 800ca76:	e0b6      	b.n	800cbe6 <lv_draw_label+0x456>
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 800ca78:	2b03      	cmp	r3, #3
 800ca7a:	d100      	bne.n	800ca7e <lv_draw_label+0x2ee>
 800ca7c:	e0c9      	b.n	800cc12 <lv_draw_label+0x482>
        pos.y += line_height;
 800ca7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca80:	8873      	ldrh	r3, [r6, #2]
 800ca82:	4694      	mov	ip, r2
        line_start = line_end;
 800ca84:	990f      	ldr	r1, [sp, #60]	; 0x3c
        pos.y += line_height;
 800ca86:	4463      	add	r3, ip
        if(pos.y > draw_ctx->clip_area->y2) return;
 800ca88:	68a2      	ldr	r2, [r4, #8]
        pos.y += line_height;
 800ca8a:	b21b      	sxth	r3, r3
 800ca8c:	8073      	strh	r3, [r6, #2]
        line_start = line_end;
 800ca8e:	910e      	str	r1, [sp, #56]	; 0x38
        if(pos.y > draw_ctx->clip_area->y2) return;
 800ca90:	2006      	movs	r0, #6
 800ca92:	5e12      	ldrsh	r2, [r2, r0]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	da00      	bge.n	800ca9a <lv_draw_label+0x30a>
 800ca98:	e6a2      	b.n	800c7e0 <lv_draw_label+0x50>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800ca9a:	4643      	mov	r3, r8
 800ca9c:	468c      	mov	ip, r1
 800ca9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800caa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caa2:	4463      	add	r3, ip
 800caa4:	9309      	str	r3, [sp, #36]	; 0x24
 800caa6:	e753      	b.n	800c950 <lv_draw_label+0x1c0>
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800caa8:	2800      	cmp	r0, #0
 800caaa:	db00      	blt.n	800caae <lv_draw_label+0x31e>
 800caac:	e6d2      	b.n	800c854 <lv_draw_label+0xc4>
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800caae:	68aa      	ldr	r2, [r5, #8]
 800cab0:	1a10      	subs	r0, r2, r0
 800cab2:	9205      	str	r2, [sp, #20]
 800cab4:	17c2      	asrs	r2, r0, #31
 800cab6:	1880      	adds	r0, r0, r2
 800cab8:	4050      	eors	r0, r2
 800caba:	2280      	movs	r2, #128	; 0x80
 800cabc:	0092      	lsls	r2, r2, #2
 800cabe:	1b12      	subs	r2, r2, r4
 800cac0:	0052      	lsls	r2, r2, #1
 800cac2:	4290      	cmp	r0, r2
 800cac4:	dc00      	bgt.n	800cac8 <lv_draw_label+0x338>
 800cac6:	e1bc      	b.n	800ce42 <lv_draw_label+0x6b2>
            hint->line_start = -1;
 800cac8:	2301      	movs	r3, #1
 800caca:	425b      	negs	r3, r3
 800cacc:	602b      	str	r3, [r5, #0]
    uint32_t line_start     = 0;
 800cace:	2300      	movs	r3, #0
            hint->line_start = -1;
 800cad0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    uint32_t line_start     = 0;
 800cad2:	930e      	str	r3, [sp, #56]	; 0x38
 800cad4:	e6c1      	b.n	800c85a <lv_draw_label+0xca>
            uint32_t logical_char_pos = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	001c      	movs	r4, r3
 800cada:	e76a      	b.n	800c9b2 <lv_draw_label+0x222>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d02e      	beq.n	800cb3e <lv_draw_label+0x3ae>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d100      	bne.n	800cae6 <lv_draw_label+0x356>
 800cae4:	e07a      	b.n	800cbdc <lv_draw_label+0x44c>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d100      	bne.n	800caec <lv_draw_label+0x35c>
 800caea:	e0a5      	b.n	800cc38 <lv_draw_label+0x4a8>
            color = dsc->color;
 800caec:	89bb      	ldrh	r3, [r7, #12]
 800caee:	9305      	str	r3, [sp, #20]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800caf0:	e77a      	b.n	800c9e8 <lv_draw_label+0x258>
                    if(letter == ' ') {
 800caf2:	2920      	cmp	r1, #32
 800caf4:	d198      	bne.n	800ca28 <lv_draw_label+0x298>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800caf6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800caf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cafa:	1acb      	subs	r3, r1, r3
 800cafc:	2b07      	cmp	r3, #7
 800cafe:	d100      	bne.n	800cb02 <lv_draw_label+0x372>
 800cb00:	e10a      	b.n	800cd18 <lv_draw_label+0x588>
                            recolor.full = dsc->color.full;
 800cb02:	89bb      	ldrh	r3, [r7, #12]
 800cb04:	9313      	str	r3, [sp, #76]	; 0x4c
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800cb06:	2302      	movs	r3, #2
 800cb08:	9307      	str	r3, [sp, #28]
 800cb0a:	e78e      	b.n	800ca2a <lv_draw_label+0x29a>
                    sel_coords.x1 = pos.x;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	5ef1      	ldrsh	r1, [r6, r3]
                    sel_coords.y1 = pos.y;
 800cb10:	2202      	movs	r2, #2
 800cb12:	5eb3      	ldrsh	r3, [r6, r2]
                    sel_coords.x1 = pos.x;
 800cb14:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800cb16:	3901      	subs	r1, #1
                    sel_coords.x1 = pos.x;
 800cb18:	9221      	str	r2, [sp, #132]	; 0x84
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800cb1a:	8aba      	ldrh	r2, [r7, #20]
                    sel_coords.y2 = pos.y + line_height - 1;
 800cb1c:	3b01      	subs	r3, #1
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800cb1e:	1852      	adds	r2, r2, r1
 800cb20:	1882      	adds	r2, r0, r2
 800cb22:	a916      	add	r1, sp, #88	; 0x58
 800cb24:	860a      	strh	r2, [r1, #48]	; 0x30
                    sel_coords.y2 = pos.y + line_height - 1;
 800cb26:	9a14      	ldr	r2, [sp, #80]	; 0x50
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 800cb28:	4640      	mov	r0, r8
                    sel_coords.y2 = pos.y + line_height - 1;
 800cb2a:	4694      	mov	ip, r2
 800cb2c:	4463      	add	r3, ip
 800cb2e:	864b      	strh	r3, [r1, #50]	; 0x32
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 800cb30:	aa21      	add	r2, sp, #132	; 0x84
 800cb32:	a92e      	add	r1, sp, #184	; 0xb8
 800cb34:	f000 fa64 	bl	800d000 <lv_draw_rect>
                    color = dsc->sel_color;
 800cb38:	89fb      	ldrh	r3, [r7, #14]
 800cb3a:	9305      	str	r3, [sp, #20]
 800cb3c:	e764      	b.n	800ca08 <lv_draw_label+0x278>
                        par_start = i;
 800cb3e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
                        cmd_state = CMD_STATE_PAR;
 800cb40:	9007      	str	r0, [sp, #28]
                        continue;
 800cb42:	0019      	movs	r1, r3
                        par_start = i;
 800cb44:	9317      	str	r3, [sp, #92]	; 0x5c
                        continue;
 800cb46:	e770      	b.n	800ca2a <lv_draw_label+0x29a>
            p1.x = pos_x_start;
 800cb48:	ab1e      	add	r3, sp, #120	; 0x78
 800cb4a:	4698      	mov	r8, r3
 800cb4c:	9a18      	ldr	r2, [sp, #96]	; 0x60
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800cb4e:	0020      	movs	r0, r4
            p1.x = pos_x_start;
 800cb50:	801a      	strh	r2, [r3, #0]
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800cb52:	683a      	ldr	r2, [r7, #0]
 800cb54:	8873      	ldrh	r3, [r6, #2]
 800cb56:	8911      	ldrh	r1, [r2, #8]
 800cb58:	8952      	ldrh	r2, [r2, #10]
 800cb5a:	185b      	adds	r3, r3, r1
 800cb5c:	1a9b      	subs	r3, r3, r2
 800cb5e:	9a08      	ldr	r2, [sp, #32]
            p2.x = pos.x;
 800cb60:	a916      	add	r1, sp, #88	; 0x58
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800cb62:	7b52      	ldrb	r2, [r2, #13]
 800cb64:	b252      	sxtb	r2, r2
 800cb66:	1a9b      	subs	r3, r3, r2
 800cb68:	4642      	mov	r2, r8
 800cb6a:	b21b      	sxth	r3, r3
 800cb6c:	8053      	strh	r3, [r2, #2]
            p2.x = pos.x;
 800cb6e:	8832      	ldrh	r2, [r6, #0]
            p2.y = p1.y;
 800cb70:	85cb      	strh	r3, [r1, #46]	; 0x2e
            line_dsc.color = color;
 800cb72:	9b05      	ldr	r3, [sp, #20]
            p2.x = pos.x;
 800cb74:	858a      	strh	r2, [r1, #44]	; 0x2c
            line_dsc.color = color;
 800cb76:	a923      	add	r1, sp, #140	; 0x8c
 800cb78:	800b      	strh	r3, [r1, #0]
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800cb7a:	4642      	mov	r2, r8
 800cb7c:	ab21      	add	r3, sp, #132	; 0x84
 800cb7e:	f000 fa0d 	bl	800cf9c <lv_draw_line>
 800cb82:	e75f      	b.n	800ca44 <lv_draw_label+0x2b4>
            p1.x = pos_x_start;
 800cb84:	ab1e      	add	r3, sp, #120	; 0x78
 800cb86:	4698      	mov	r8, r3
 800cb88:	9a18      	ldr	r2, [sp, #96]	; 0x60
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800cb8a:	0020      	movs	r0, r4
            p1.x = pos_x_start;
 800cb8c:	801a      	strh	r2, [r3, #0]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800cb8e:	ab16      	add	r3, sp, #88	; 0x58
 800cb90:	2236      	movs	r2, #54	; 0x36
 800cb92:	5e9a      	ldrsh	r2, [r3, r2]
 800cb94:	0fd3      	lsrs	r3, r2, #31
 800cb96:	189b      	adds	r3, r3, r2
 800cb98:	8872      	ldrh	r2, [r6, #2]
 800cb9a:	105b      	asrs	r3, r3, #1
 800cb9c:	189b      	adds	r3, r3, r2
 800cb9e:	683a      	ldr	r2, [r7, #0]
 800cba0:	2108      	movs	r1, #8
 800cba2:	5e51      	ldrsh	r1, [r2, r1]
 800cba4:	0fca      	lsrs	r2, r1, #31
 800cba6:	1852      	adds	r2, r2, r1
 800cba8:	1052      	asrs	r2, r2, #1
 800cbaa:	189b      	adds	r3, r3, r2
 800cbac:	4642      	mov	r2, r8
 800cbae:	b21b      	sxth	r3, r3
 800cbb0:	8053      	strh	r3, [r2, #2]
            p2.x = pos.x;
 800cbb2:	8832      	ldrh	r2, [r6, #0]
 800cbb4:	a916      	add	r1, sp, #88	; 0x58
 800cbb6:	858a      	strh	r2, [r1, #44]	; 0x2c
            line_dsc.color = color;
 800cbb8:	9a05      	ldr	r2, [sp, #20]
            p2.y = p1.y;
 800cbba:	85cb      	strh	r3, [r1, #46]	; 0x2e
            line_dsc.color = color;
 800cbbc:	868a      	strh	r2, [r1, #52]	; 0x34
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800cbbe:	ab21      	add	r3, sp, #132	; 0x84
 800cbc0:	4642      	mov	r2, r8
 800cbc2:	a923      	add	r1, sp, #140	; 0x8c
 800cbc4:	f000 f9ea 	bl	800cf9c <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800cbc8:	7fba      	ldrb	r2, [r7, #30]
 800cbca:	0752      	lsls	r2, r2, #29
 800cbcc:	0f52      	lsrs	r2, r2, #29
 800cbce:	e736      	b.n	800ca3e <lv_draw_label+0x2ae>
 800cbd0:	fffffc00 	.word	0xfffffc00
 800cbd4:	20000014 	.word	0x20000014
 800cbd8:	0000ffff 	.word	0x0000ffff
            color = dsc->color;
 800cbdc:	89bb      	ldrh	r3, [r7, #12]
 800cbde:	9305      	str	r3, [sp, #20]
                        cmd_state = CMD_STATE_WAIT;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	9307      	str	r3, [sp, #28]
 800cbe4:	e700      	b.n	800c9e8 <lv_draw_label+0x258>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800cbe6:	2214      	movs	r2, #20
 800cbe8:	5ebb      	ldrsh	r3, [r7, r2]
 800cbea:	7f7a      	ldrb	r2, [r7, #29]
 800cbec:	0028      	movs	r0, r5
 800cbee:	9200      	str	r2, [sp, #0]
 800cbf0:	9a08      	ldr	r2, [sp, #32]
 800cbf2:	f007 f873 	bl	8013cdc <lv_txt_get_width>
 800cbf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cbf8:	8893      	ldrh	r3, [r2, #4]
 800cbfa:	8812      	ldrh	r2, [r2, #0]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800cc00:	b21b      	sxth	r3, r3
 800cc02:	1a18      	subs	r0, r3, r0
 800cc04:	0fc3      	lsrs	r3, r0, #31
 800cc06:	1818      	adds	r0, r3, r0
 800cc08:	8833      	ldrh	r3, [r6, #0]
 800cc0a:	1040      	asrs	r0, r0, #1
 800cc0c:	18c0      	adds	r0, r0, r3
 800cc0e:	8030      	strh	r0, [r6, #0]
 800cc10:	e735      	b.n	800ca7e <lv_draw_label+0x2ee>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800cc12:	2214      	movs	r2, #20
 800cc14:	5ebb      	ldrsh	r3, [r7, r2]
 800cc16:	7f7a      	ldrb	r2, [r7, #29]
 800cc18:	0028      	movs	r0, r5
 800cc1a:	9200      	str	r2, [sp, #0]
 800cc1c:	9a08      	ldr	r2, [sp, #32]
 800cc1e:	f007 f85d 	bl	8013cdc <lv_txt_get_width>
 800cc22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cc24:	8893      	ldrh	r3, [r2, #4]
 800cc26:	8812      	ldrh	r2, [r2, #0]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 800cc2c:	b21b      	sxth	r3, r3
 800cc2e:	1a1b      	subs	r3, r3, r0
 800cc30:	8830      	ldrh	r0, [r6, #0]
 800cc32:	181b      	adds	r3, r3, r0
 800cc34:	8033      	strh	r3, [r6, #0]
 800cc36:	e722      	b.n	800ca7e <lv_draw_label+0x2ee>
                        cmd_state = CMD_STATE_WAIT;
 800cc38:	2300      	movs	r3, #0
                        par_start = i;
 800cc3a:	991c      	ldr	r1, [sp, #112]	; 0x70
                        cmd_state = CMD_STATE_WAIT;
 800cc3c:	9307      	str	r3, [sp, #28]
 800cc3e:	e6f4      	b.n	800ca2a <lv_draw_label+0x29a>
        pos.y += line_height;
 800cc40:	466b      	mov	r3, sp
 800cc42:	2248      	movs	r2, #72	; 0x48
 800cc44:	189b      	adds	r3, r3, r2
 800cc46:	881b      	ldrh	r3, [r3, #0]
 800cc48:	9314      	str	r3, [sp, #80]	; 0x50
 800cc4a:	e6f2      	b.n	800ca32 <lv_draw_label+0x2a2>
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800cc4c:	2214      	movs	r2, #20
 800cc4e:	5ebb      	ldrsh	r3, [r7, r2]
 800cc50:	4a9b      	ldr	r2, [pc, #620]	; (800cec0 <lv_draw_label+0x730>)
 800cc52:	9102      	str	r1, [sp, #8]
 800cc54:	9201      	str	r2, [sp, #4]
 800cc56:	2112      	movs	r1, #18
 800cc58:	5e7a      	ldrsh	r2, [r7, r1]
 800cc5a:	ac2e      	add	r4, sp, #184	; 0xb8
 800cc5c:	9200      	str	r2, [sp, #0]
 800cc5e:	683a      	ldr	r2, [r7, #0]
 800cc60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc62:	0020      	movs	r0, r4
 800cc64:	f006 ffa4 	bl	8013bb0 <lv_txt_get_size>
        w = p.x;
 800cc68:	2200      	movs	r2, #0
 800cc6a:	5ea3      	ldrsh	r3, [r4, r2]
 800cc6c:	9311      	str	r3, [sp, #68]	; 0x44
    pos.x = coords->x1;
 800cc6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800cc70:	7f79      	ldrb	r1, [r7, #29]
    pos.x = coords->x1;
 800cc72:	2200      	movs	r2, #0
 800cc74:	5e9a      	ldrsh	r2, [r3, r2]
 800cc76:	e5d0      	b.n	800c81a <lv_draw_label+0x8a>
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800cc78:	2314      	movs	r3, #20
 800cc7a:	5efa      	ldrsh	r2, [r7, r3]
 800cc7c:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800cc7e:	9101      	str	r1, [sp, #4]
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	9908      	ldr	r1, [sp, #32]
 800cc84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc86:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800cc88:	f006 fe08 	bl	801389c <_lv_txt_get_next_line>
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800cc8c:	2202      	movs	r2, #2
 800cc8e:	5eb3      	ldrsh	r3, [r6, r2]
 800cc90:	2200      	movs	r2, #0
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800cc92:	2500      	movs	r5, #0
 800cc94:	0011      	movs	r1, r2
 800cc96:	0004      	movs	r4, r0
 800cc98:	46ba      	mov	sl, r7
 800cc9a:	e01a      	b.n	800ccd2 <lv_draw_label+0x542>
 800cc9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc9e:	9908      	ldr	r1, [sp, #32]
 800cca0:	191f      	adds	r7, r3, r4
 800cca2:	4653      	mov	r3, sl
 800cca4:	2214      	movs	r2, #20
 800cca6:	5e9a      	ldrsh	r2, [r3, r2]
 800cca8:	4653      	mov	r3, sl
 800ccaa:	7f5b      	ldrb	r3, [r3, #29]
 800ccac:	0038      	movs	r0, r7
 800ccae:	9301      	str	r3, [sp, #4]
 800ccb0:	9500      	str	r5, [sp, #0]
 800ccb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ccb4:	f006 fdf2 	bl	801389c <_lv_txt_get_next_line>
        pos.y += line_height;
 800ccb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ccba:	8873      	ldrh	r3, [r6, #2]
 800ccbc:	4694      	mov	ip, r2
        if(txt[line_start] == '\0') return;
 800ccbe:	783a      	ldrb	r2, [r7, #0]
        pos.y += line_height;
 800ccc0:	4463      	add	r3, ip
 800ccc2:	b21b      	sxth	r3, r3
 800ccc4:	0021      	movs	r1, r4
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800ccc6:	1820      	adds	r0, r4, r0
        pos.y += line_height;
 800ccc8:	8073      	strh	r3, [r6, #2]
        if(txt[line_start] == '\0') return;
 800ccca:	2a00      	cmp	r2, #0
 800cccc:	d100      	bne.n	800ccd0 <lv_draw_label+0x540>
 800ccce:	e587      	b.n	800c7e0 <lv_draw_label+0x50>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800ccd0:	0004      	movs	r4, r0
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800ccd2:	465a      	mov	r2, fp
 800ccd4:	6892      	ldr	r2, [r2, #8]
 800ccd6:	4443      	add	r3, r8
 800ccd8:	2002      	movs	r0, #2
 800ccda:	5e12      	ldrsh	r2, [r2, r0]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	dcdd      	bgt.n	800cc9c <lv_draw_label+0x50c>
 800cce0:	4657      	mov	r7, sl
 800cce2:	910e      	str	r1, [sp, #56]	; 0x38
 800cce4:	940f      	str	r4, [sp, #60]	; 0x3c
 800cce6:	e606      	b.n	800c8f6 <lv_draw_label+0x166>
        lv_draw_line_dsc_init(&line_dsc);
 800cce8:	ac23      	add	r4, sp, #140	; 0x8c
 800ccea:	0020      	movs	r0, r4
 800ccec:	f000 f94a 	bl	800cf84 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800ccf0:	89bb      	ldrh	r3, [r7, #12]
 800ccf2:	8023      	strh	r3, [r4, #0]
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800ccf4:	9b08      	ldr	r3, [sp, #32]
 800ccf6:	7b9b      	ldrb	r3, [r3, #14]
 800ccf8:	b25b      	sxtb	r3, r3
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d100      	bne.n	800cd00 <lv_draw_label+0x570>
 800ccfe:	3301      	adds	r3, #1
        line_dsc.blend_mode = dsc->blend_mode;
 800cd00:	2103      	movs	r1, #3
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800cd02:	8063      	strh	r3, [r4, #2]
        line_dsc.opa = dsc->opa;
 800cd04:	7ebb      	ldrb	r3, [r7, #26]
        line_dsc.blend_mode = dsc->blend_mode;
 800cd06:	7fba      	ldrb	r2, [r7, #30]
        line_dsc.opa = dsc->opa;
 800cd08:	7223      	strb	r3, [r4, #8]
        line_dsc.blend_mode = dsc->blend_mode;
 800cd0a:	7a63      	ldrb	r3, [r4, #9]
 800cd0c:	08d2      	lsrs	r2, r2, #3
 800cd0e:	400a      	ands	r2, r1
 800cd10:	438b      	bics	r3, r1
 800cd12:	4313      	orrs	r3, r2
 800cd14:	7263      	strb	r3, [r4, #9]
 800cd16:	e607      	b.n	800c928 <lv_draw_label+0x198>
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800cd18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd1a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cd1c:	0013      	movs	r3, r2
 800cd1e:	4684      	mov	ip, r0
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
 800cd20:	5c14      	ldrb	r4, [r2, r0]
 800cd22:	4463      	add	r3, ip
 800cd24:	9407      	str	r4, [sp, #28]
 800cd26:	7858      	ldrb	r0, [r3, #1]
 800cd28:	791c      	ldrb	r4, [r3, #4]
 800cd2a:	789a      	ldrb	r2, [r3, #2]
 800cd2c:	78dd      	ldrb	r5, [r3, #3]
 800cd2e:	795b      	ldrb	r3, [r3, #5]
 800cd30:	9413      	str	r4, [sp, #76]	; 0x4c
 800cd32:	9319      	str	r3, [sp, #100]	; 0x64
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 800cd34:	9b07      	ldr	r3, [sp, #28]
 800cd36:	3b30      	subs	r3, #48	; 0x30
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	2b09      	cmp	r3, #9
 800cd3c:	d90e      	bls.n	800cd5c <lv_draw_label+0x5cc>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800cd3e:	9b07      	ldr	r3, [sp, #28]
 800cd40:	2b60      	cmp	r3, #96	; 0x60
 800cd42:	d902      	bls.n	800cd4a <lv_draw_label+0x5ba>
 800cd44:	3b20      	subs	r3, #32
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	9307      	str	r3, [sp, #28]
            uint32_t logical_char_pos = 0;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	9c07      	ldr	r4, [sp, #28]
 800cd4e:	469c      	mov	ip, r3
 800cd50:	0023      	movs	r3, r4
 800cd52:	3b41      	subs	r3, #65	; 0x41
 800cd54:	2b05      	cmp	r3, #5
 800cd56:	d803      	bhi.n	800cd60 <lv_draw_label+0x5d0>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800cd58:	330a      	adds	r3, #10
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	011b      	lsls	r3, r3, #4
 800cd5e:	469c      	mov	ip, r3
    if(hex >= '0' && hex <= '9') {
 800cd60:	0003      	movs	r3, r0
 800cd62:	3b30      	subs	r3, #48	; 0x30
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	2b09      	cmp	r3, #9
 800cd68:	d900      	bls.n	800cd6c <lv_draw_label+0x5dc>
 800cd6a:	e09b      	b.n	800cea4 <lv_draw_label+0x714>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800cd6c:	449c      	add	ip, r3
    if(hex >= '0' && hex <= '9') {
 800cd6e:	0013      	movs	r3, r2
 800cd70:	3b30      	subs	r3, #48	; 0x30
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	2b09      	cmp	r3, #9
 800cd76:	d90a      	bls.n	800cd8e <lv_draw_label+0x5fe>
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800cd78:	2a60      	cmp	r2, #96	; 0x60
 800cd7a:	d901      	bls.n	800cd80 <lv_draw_label+0x5f0>
 800cd7c:	3a20      	subs	r2, #32
 800cd7e:	b2d2      	uxtb	r2, r2

        switch(hex) {
 800cd80:	0013      	movs	r3, r2
 800cd82:	3b41      	subs	r3, #65	; 0x41
            uint32_t logical_char_pos = 0;
 800cd84:	2000      	movs	r0, #0
 800cd86:	2b05      	cmp	r3, #5
 800cd88:	d802      	bhi.n	800cd90 <lv_draw_label+0x600>
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800cd8a:	330a      	adds	r3, #10
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	0118      	lsls	r0, r3, #4
    if(hex >= '0' && hex <= '9') {
 800cd90:	002b      	movs	r3, r5
 800cd92:	3b30      	subs	r3, #48	; 0x30
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	2b09      	cmp	r3, #9
 800cd98:	d877      	bhi.n	800ce8a <lv_draw_label+0x6fa>
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800cd9a:	18c0      	adds	r0, r0, r3
    if(hex >= '0' && hex <= '9') {
 800cd9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cd9e:	3a30      	subs	r2, #48	; 0x30
 800cda0:	b2d2      	uxtb	r2, r2
 800cda2:	2a09      	cmp	r2, #9
 800cda4:	d90e      	bls.n	800cdc4 <lv_draw_label+0x634>
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800cda6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cda8:	2b60      	cmp	r3, #96	; 0x60
 800cdaa:	d902      	bls.n	800cdb2 <lv_draw_label+0x622>
 800cdac:	3b20      	subs	r3, #32
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	9313      	str	r3, [sp, #76]	; 0x4c
        switch(hex) {
 800cdb2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
            uint32_t logical_char_pos = 0;
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	0023      	movs	r3, r4
 800cdb8:	3b41      	subs	r3, #65	; 0x41
 800cdba:	2b05      	cmp	r3, #5
 800cdbc:	d803      	bhi.n	800cdc6 <lv_draw_label+0x636>
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800cdbe:	0022      	movs	r2, r4
 800cdc0:	3a37      	subs	r2, #55	; 0x37
 800cdc2:	b2d2      	uxtb	r2, r2
 800cdc4:	0112      	lsls	r2, r2, #4
    if(hex >= '0' && hex <= '9') {
 800cdc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cdc8:	3b30      	subs	r3, #48	; 0x30
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	2b09      	cmp	r3, #9
 800cdce:	d90c      	bls.n	800cdea <lv_draw_label+0x65a>
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800cdd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cdd2:	2b60      	cmp	r3, #96	; 0x60
 800cdd4:	d902      	bls.n	800cddc <lv_draw_label+0x64c>
 800cdd6:	3b20      	subs	r3, #32
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	9319      	str	r3, [sp, #100]	; 0x64
        switch(hex) {
 800cddc:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800cdde:	0023      	movs	r3, r4
 800cde0:	3b41      	subs	r3, #65	; 0x41
 800cde2:	2b05      	cmp	r3, #5
 800cde4:	d802      	bhi.n	800cdec <lv_draw_label+0x65c>
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800cde6:	330a      	adds	r3, #10
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	18d2      	adds	r2, r2, r3
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800cdec:	b2c3      	uxtb	r3, r0
 800cdee:	089b      	lsrs	r3, r3, #2
 800cdf0:	b2d2      	uxtb	r2, r2
 800cdf2:	015b      	lsls	r3, r3, #5
 800cdf4:	08d2      	lsrs	r2, r2, #3
 800cdf6:	431a      	orrs	r2, r3
 800cdf8:	4663      	mov	r3, ip
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	08db      	lsrs	r3, r3, #3
 800cdfe:	02db      	lsls	r3, r3, #11
 800ce00:	431a      	orrs	r2, r3
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800ce02:	2302      	movs	r3, #2
 800ce04:	9213      	str	r2, [sp, #76]	; 0x4c
 800ce06:	9307      	str	r3, [sp, #28]
 800ce08:	e60f      	b.n	800ca2a <lv_draw_label+0x29a>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800ce0a:	2214      	movs	r2, #20
 800ce0c:	5ebb      	ldrsh	r3, [r7, r2]
 800ce0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ce12:	4694      	mov	ip, r2
 800ce14:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ce16:	1a89      	subs	r1, r1, r2
 800ce18:	7f7a      	ldrb	r2, [r7, #29]
 800ce1a:	4460      	add	r0, ip
 800ce1c:	9200      	str	r2, [sp, #0]
 800ce1e:	9a08      	ldr	r2, [sp, #32]
 800ce20:	4680      	mov	r8, r0
 800ce22:	f006 ff5b 	bl	8013cdc <lv_txt_get_width>
 800ce26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ce28:	8893      	ldrh	r3, [r2, #4]
 800ce2a:	8812      	ldrh	r2, [r2, #0]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800ce30:	b21b      	sxth	r3, r3
 800ce32:	1a18      	subs	r0, r3, r0
 800ce34:	0fc3      	lsrs	r3, r0, #31
 800ce36:	8832      	ldrh	r2, [r6, #0]
 800ce38:	181b      	adds	r3, r3, r0
 800ce3a:	105b      	asrs	r3, r3, #1
 800ce3c:	189b      	adds	r3, r3, r2
 800ce3e:	8033      	strh	r3, [r6, #0]
 800ce40:	e566      	b.n	800c910 <lv_draw_label+0x180>
        last_line_start = hint->line_start;
 800ce42:	682a      	ldr	r2, [r5, #0]
    if(hint && last_line_start >= 0) {
 800ce44:	2a00      	cmp	r2, #0
 800ce46:	da00      	bge.n	800ce4a <lv_draw_label+0x6ba>
 800ce48:	e504      	b.n	800c854 <lv_draw_label+0xc4>
        pos.y += hint->y;
 800ce4a:	6868      	ldr	r0, [r5, #4]
        line_start = last_line_start;
 800ce4c:	920e      	str	r2, [sp, #56]	; 0x38
        pos.y += hint->y;
 800ce4e:	4684      	mov	ip, r0
 800ce50:	4463      	add	r3, ip
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800ce52:	4694      	mov	ip, r2
        pos.y += hint->y;
 800ce54:	9005      	str	r0, [sp, #20]
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800ce56:	980b      	ldr	r0, [sp, #44]	; 0x2c
        pos.y += hint->y;
 800ce58:	8073      	strh	r3, [r6, #2]
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800ce5a:	4460      	add	r0, ip
 800ce5c:	e4fd      	b.n	800c85a <lv_draw_label+0xca>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800ce5e:	4661      	mov	r1, ip
 800ce60:	2214      	movs	r2, #20
 800ce62:	5ebb      	ldrsh	r3, [r7, r2]
 800ce64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ce66:	4640      	mov	r0, r8
 800ce68:	1a51      	subs	r1, r2, r1
 800ce6a:	7f7a      	ldrb	r2, [r7, #29]
 800ce6c:	9200      	str	r2, [sp, #0]
 800ce6e:	9a08      	ldr	r2, [sp, #32]
 800ce70:	f006 ff34 	bl	8013cdc <lv_txt_get_width>
 800ce74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ce76:	8893      	ldrh	r3, [r2, #4]
 800ce78:	8812      	ldrh	r2, [r2, #0]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 800ce7e:	b21b      	sxth	r3, r3
 800ce80:	8832      	ldrh	r2, [r6, #0]
 800ce82:	1a1b      	subs	r3, r3, r0
 800ce84:	189b      	adds	r3, r3, r2
 800ce86:	8033      	strh	r3, [r6, #0]
 800ce88:	e542      	b.n	800c910 <lv_draw_label+0x180>
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800ce8a:	2d60      	cmp	r5, #96	; 0x60
 800ce8c:	d901      	bls.n	800ce92 <lv_draw_label+0x702>
 800ce8e:	3d20      	subs	r5, #32
 800ce90:	b2ed      	uxtb	r5, r5
        switch(hex) {
 800ce92:	002b      	movs	r3, r5
 800ce94:	3b41      	subs	r3, #65	; 0x41
 800ce96:	2b05      	cmp	r3, #5
 800ce98:	d900      	bls.n	800ce9c <lv_draw_label+0x70c>
 800ce9a:	e77f      	b.n	800cd9c <lv_draw_label+0x60c>
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800ce9c:	3d37      	subs	r5, #55	; 0x37
 800ce9e:	b2ed      	uxtb	r5, r5
 800cea0:	1940      	adds	r0, r0, r5
 800cea2:	e77b      	b.n	800cd9c <lv_draw_label+0x60c>
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800cea4:	2860      	cmp	r0, #96	; 0x60
 800cea6:	d901      	bls.n	800ceac <lv_draw_label+0x71c>
 800cea8:	3820      	subs	r0, #32
 800ceaa:	b2c0      	uxtb	r0, r0
        switch(hex) {
 800ceac:	0003      	movs	r3, r0
 800ceae:	3b41      	subs	r3, #65	; 0x41
 800ceb0:	2b05      	cmp	r3, #5
 800ceb2:	d900      	bls.n	800ceb6 <lv_draw_label+0x726>
 800ceb4:	e75b      	b.n	800cd6e <lv_draw_label+0x5de>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800ceb6:	3837      	subs	r0, #55	; 0x37
 800ceb8:	b2c0      	uxtb	r0, r0
 800ceba:	4484      	add	ip, r0
 800cebc:	e757      	b.n	800cd6e <lv_draw_label+0x5de>
 800cebe:	46c0      	nop			; (mov r8, r8)
 800cec0:	00001fff 	.word	0x00001fff

0800cec4 <lv_draw_layer_create>:
 *   GLOBAL FUNCTIONS
 **********************/

lv_draw_layer_ctx_t * lv_draw_layer_create(lv_draw_ctx_t * draw_ctx, const lv_area_t * layer_area,
                                           lv_draw_layer_flags_t flags)
{
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(draw_ctx->layer_init == NULL) return NULL;
 800cec6:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 800cec8:	0004      	movs	r4, r0
 800ceca:	000f      	movs	r7, r1
 800cecc:	0016      	movs	r6, r2
    if(draw_ctx->layer_init == NULL) return NULL;
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d024      	beq.n	800cf1c <lv_draw_layer_create+0x58>

    lv_draw_layer_ctx_t * layer_ctx = lv_mem_alloc(draw_ctx->layer_instance_size);
 800ced2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800ced4:	f005 f86a 	bl	8011fac <lv_mem_alloc>
 800ced8:	1e05      	subs	r5, r0, #0
    LV_ASSERT_MALLOC(layer_ctx);
 800ceda:	d01e      	beq.n	800cf1a <lv_draw_layer_create+0x56>
    if(layer_ctx == NULL) {
        LV_LOG_WARN("Couldn't allocate a new layer context");
        return NULL;
    }

    lv_memset_00(layer_ctx, draw_ctx->layer_instance_size);
 800cedc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cede:	f005 fbe7 	bl	80126b0 <lv_memset_00>

    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800cee2:	f7fe ff97 	bl	800be14 <_lv_refr_get_disp_refreshing>
    layer_ctx->original.buf = draw_ctx->buf;
    layer_ctx->original.buf_area = draw_ctx->buf_area;
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 800cee6:	6862      	ldr	r2, [r4, #4]
 800cee8:	6823      	ldr	r3, [r4, #0]
 800ceea:	68a1      	ldr	r1, [r4, #8]
 800ceec:	61ea      	str	r2, [r5, #28]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 800ceee:	2224      	movs	r2, #36	; 0x24
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 800cef0:	61a9      	str	r1, [r5, #24]
 800cef2:	622b      	str	r3, [r5, #32]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 800cef4:	6803      	ldr	r3, [r0, #0]
    layer_ctx->area_full = *layer_area;
 800cef6:	0039      	movs	r1, r7
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 800cef8:	7c1b      	ldrb	r3, [r3, #16]
    layer_ctx->area_full = *layer_area;
 800cefa:	0028      	movs	r0, r5
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 800cefc:	065b      	lsls	r3, r3, #25
 800cefe:	0fdb      	lsrs	r3, r3, #31
 800cf00:	54ab      	strb	r3, [r5, r2]
    layer_ctx->area_full = *layer_area;
 800cf02:	3a1c      	subs	r2, #28
 800cf04:	f00e fb7e 	bl	801b604 <memcpy>

    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 800cf08:	0020      	movs	r0, r4
 800cf0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cf0c:	0032      	movs	r2, r6
 800cf0e:	0029      	movs	r1, r5
 800cf10:	4798      	blx	r3
 800cf12:	1e04      	subs	r4, r0, #0
    if(NULL == init_layer_ctx) {
 800cf14:	d004      	beq.n	800cf20 <lv_draw_layer_create+0x5c>
        lv_mem_free(layer_ctx);
    }
    return init_layer_ctx;
}
 800cf16:	0020      	movs	r0, r4
 800cf18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(layer_ctx);
 800cf1a:	e7fe      	b.n	800cf1a <lv_draw_layer_create+0x56>
    if(draw_ctx->layer_init == NULL) return NULL;
 800cf1c:	2400      	movs	r4, #0
 800cf1e:	e7fa      	b.n	800cf16 <lv_draw_layer_create+0x52>
        lv_mem_free(layer_ctx);
 800cf20:	0028      	movs	r0, r5
 800cf22:	f005 f865 	bl	8011ff0 <lv_mem_free>
 800cf26:	e7f6      	b.n	800cf16 <lv_draw_layer_create+0x52>

0800cf28 <lv_draw_layer_adjust>:

void lv_draw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                          lv_draw_layer_flags_t flags)
{
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 800cf28:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 800cf2a:	b510      	push	{r4, lr}
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d000      	beq.n	800cf32 <lv_draw_layer_adjust+0xa>
 800cf30:	4798      	blx	r3
}
 800cf32:	bd10      	pop	{r4, pc}

0800cf34 <lv_draw_layer_blend>:

void lv_draw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                         lv_draw_img_dsc_t * draw_dsc)
{
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 800cf34:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 800cf36:	b510      	push	{r4, lr}
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d000      	beq.n	800cf3e <lv_draw_layer_blend+0xa>
 800cf3c:	4798      	blx	r3
}
 800cf3e:	bd10      	pop	{r4, pc}

0800cf40 <lv_draw_layer_destroy>:

void lv_draw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	000c      	movs	r4, r1
 800cf44:	0005      	movs	r5, r0

    lv_draw_wait_for_finish(draw_ctx);
 800cf46:	f7ff fa63 	bl	800c410 <lv_draw_wait_for_finish>
    draw_ctx->buf = layer_ctx->original.buf;
 800cf4a:	69a3      	ldr	r3, [r4, #24]
 800cf4c:	69e2      	ldr	r2, [r4, #28]
 800cf4e:	6a21      	ldr	r1, [r4, #32]
 800cf50:	606a      	str	r2, [r5, #4]
 800cf52:	6029      	str	r1, [r5, #0]
 800cf54:	60ab      	str	r3, [r5, #8]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
    draw_ctx->clip_area = layer_ctx->original.clip_area;
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800cf56:	f7fe ff5d 	bl	800be14 <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 800cf5a:	2324      	movs	r3, #36	; 0x24
 800cf5c:	6801      	ldr	r1, [r0, #0]
 800cf5e:	2040      	movs	r0, #64	; 0x40
 800cf60:	5ce2      	ldrb	r2, [r4, r3]
 800cf62:	3b23      	subs	r3, #35	; 0x23
 800cf64:	401a      	ands	r2, r3
 800cf66:	7c0b      	ldrb	r3, [r1, #16]
 800cf68:	0192      	lsls	r2, r2, #6
 800cf6a:	4383      	bics	r3, r0
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	740b      	strb	r3, [r1, #16]

    if(draw_ctx->layer_destroy) draw_ctx->layer_destroy(draw_ctx, layer_ctx);
 800cf70:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d002      	beq.n	800cf7c <lv_draw_layer_destroy+0x3c>
 800cf76:	0021      	movs	r1, r4
 800cf78:	0028      	movs	r0, r5
 800cf7a:	4798      	blx	r3
    lv_mem_free(layer_ctx);
 800cf7c:	0020      	movs	r0, r4
 800cf7e:	f005 f837 	bl	8011ff0 <lv_mem_free>
}
 800cf82:	bd70      	pop	{r4, r5, r6, pc}

0800cf84 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 800cf84:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800cf86:	210a      	movs	r1, #10
{
 800cf88:	0004      	movs	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800cf8a:	f005 fb91 	bl	80126b0 <lv_memset_00>
    dsc->width = 1;
    dsc->opa = LV_OPA_COVER;
 800cf8e:	23ff      	movs	r3, #255	; 0xff
 800cf90:	7223      	strb	r3, [r4, #8]
    dsc->color = lv_color_black();
 800cf92:	2300      	movs	r3, #0
 800cf94:	8023      	strh	r3, [r4, #0]
    dsc->width = 1;
 800cf96:	3301      	adds	r3, #1
 800cf98:	8063      	strh	r3, [r4, #2]
}
 800cf9a:	bd10      	pop	{r4, pc}

0800cf9c <lv_draw_line>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 800cf9c:	b570      	push	{r4, r5, r6, lr}
    if(dsc->width == 0) return;
 800cf9e:	2502      	movs	r5, #2
 800cfa0:	5f4c      	ldrsh	r4, [r1, r5]
 800cfa2:	2c00      	cmp	r4, #0
 800cfa4:	d004      	beq.n	800cfb0 <lv_draw_line+0x14>
    if(dsc->opa <= LV_OPA_MIN) return;
 800cfa6:	7a0c      	ldrb	r4, [r1, #8]
 800cfa8:	2c02      	cmp	r4, #2
 800cfaa:	d901      	bls.n	800cfb0 <lv_draw_line+0x14>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 800cfac:	6a04      	ldr	r4, [r0, #32]
 800cfae:	47a0      	blx	r4
}
 800cfb0:	bd70      	pop	{r4, r5, r6, pc}
 800cfb2:	46c0      	nop			; (mov r8, r8)

0800cfb4 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 800cfb4:	b510      	push	{r4, lr}
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800cfb6:	2138      	movs	r1, #56	; 0x38
{
 800cfb8:	0004      	movs	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800cfba:	f005 fb79 	bl	80126b0 <lv_memset_00>
    dsc->bg_color = lv_color_white();
    dsc->bg_grad.stops[0].color = lv_color_white();
    dsc->bg_grad.stops[1].color = lv_color_black();
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	8162      	strh	r2, [r4, #10]
    dsc->bg_grad.stops[1].frac = 0xFF;
    dsc->bg_grad.stops_count = 2;
    dsc->border_color = lv_color_black();
 800cfc2:	83e2      	strh	r2, [r4, #30]
    dsc->shadow_color = lv_color_black();
 800cfc4:	85a2      	strh	r2, [r4, #44]	; 0x2c
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 800cfc6:	4a0b      	ldr	r2, [pc, #44]	; (800cff4 <lv_draw_rect_dsc_init+0x40>)
    dsc->bg_grad.stops[1].frac = 0xFF;
 800cfc8:	23ff      	movs	r3, #255	; 0xff
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 800cfca:	6162      	str	r2, [r4, #20]
    dsc->bg_color = lv_color_white();
 800cfcc:	2201      	movs	r2, #1
    dsc->bg_grad.stops_count = 2;
 800cfce:	2102      	movs	r1, #2
    dsc->bg_color = lv_color_white();
 800cfd0:	4252      	negs	r2, r2
 800cfd2:	6062      	str	r2, [r4, #4]
    dsc->bg_opa = LV_OPA_COVER;
    dsc->bg_img_opa = LV_OPA_COVER;
 800cfd4:	76a2      	strb	r2, [r4, #26]
    dsc->outline_opa = LV_OPA_COVER;
 800cfd6:	322b      	adds	r2, #43	; 0x2b
    dsc->bg_grad.stops[1].frac = 0xFF;
 800cfd8:	7323      	strb	r3, [r4, #12]
    dsc->bg_opa = LV_OPA_COVER;
 800cfda:	70e3      	strb	r3, [r4, #3]
    dsc->bg_grad.stops_count = 2;
 800cfdc:	73a1      	strb	r1, [r4, #14]
    dsc->outline_opa = LV_OPA_COVER;
 800cfde:	54a3      	strb	r3, [r4, r2]
    dsc->border_opa = LV_OPA_COVER;
    dsc->shadow_opa = LV_OPA_COVER;
 800cfe0:	320c      	adds	r2, #12
 800cfe2:	54a3      	strb	r3, [r4, r2]
    dsc->border_opa = LV_OPA_COVER;
 800cfe4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800cfe6:	4a04      	ldr	r2, [pc, #16]	; (800cff8 <lv_draw_rect_dsc_init+0x44>)
 800cfe8:	401a      	ands	r2, r3
 800cfea:	4b04      	ldr	r3, [pc, #16]	; (800cffc <lv_draw_rect_dsc_init+0x48>)
 800cfec:	4313      	orrs	r3, r2
 800cfee:	8463      	strh	r3, [r4, #34]	; 0x22
    dsc->border_side = LV_BORDER_SIDE_FULL;
}
 800cff0:	bd10      	pop	{r4, pc}
 800cff2:	46c0      	nop			; (mov r8, r8)
 800cff4:	0801bfc8 	.word	0x0801bfc8
 800cff8:	ffffc100 	.word	0xffffc100
 800cffc:	00001eff 	.word	0x00001eff

0800d000 <lv_draw_rect>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d000:	88d3      	ldrh	r3, [r2, #6]
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 800d002:	b510      	push	{r4, lr}
 800d004:	8854      	ldrh	r4, [r2, #2]
 800d006:	3301      	adds	r3, #1
 800d008:	1b1b      	subs	r3, r3, r4
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800d00a:	b21b      	sxth	r3, r3
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	dd08      	ble.n	800d022 <lv_draw_rect+0x22>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d010:	8893      	ldrh	r3, [r2, #4]
 800d012:	8814      	ldrh	r4, [r2, #0]
 800d014:	3301      	adds	r3, #1
 800d016:	1b1b      	subs	r3, r3, r4
 800d018:	b21b      	sxth	r3, r3
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	dd01      	ble.n	800d022 <lv_draw_rect+0x22>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 800d01e:	68c3      	ldr	r3, [r0, #12]
 800d020:	4798      	blx	r3

    LV_ASSERT_MEM_INTEGRITY();
}
 800d022:	bd10      	pop	{r4, pc}

0800d024 <lv_draw_transform>:
 *   GLOBAL FUNCTIONS
 **********************/
void lv_draw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w,
                       lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 800d024:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d026:	b087      	sub	sp, #28
 800d028:	ac0c      	add	r4, sp, #48	; 0x30
 800d02a:	469c      	mov	ip, r3
 800d02c:	2300      	movs	r3, #0
 800d02e:	5ee5      	ldrsh	r5, [r4, r3]
 800d030:	ac0d      	add	r4, sp, #52	; 0x34
 800d032:	2300      	movs	r3, #0
 800d034:	5ee6      	ldrsh	r6, [r4, r3]
 800d036:	ac0f      	add	r4, sp, #60	; 0x3c
 800d038:	7827      	ldrb	r7, [r4, #0]
    LV_ASSERT_NULL(draw_ctx);
 800d03a:	2800      	cmp	r0, #0
 800d03c:	d00f      	beq.n	800d05e <lv_draw_transform+0x3a>
    if(draw_ctx->draw_transform == NULL) {
 800d03e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d040:	2c00      	cmp	r4, #0
 800d042:	d00a      	beq.n	800d05a <lv_draw_transform+0x36>
        LV_LOG_WARN("draw_ctx->draw_transform == NULL");
        return;
    }

    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 800d044:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d046:	9703      	str	r7, [sp, #12]
 800d048:	9305      	str	r3, [sp, #20]
 800d04a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d04c:	9601      	str	r6, [sp, #4]
 800d04e:	9304      	str	r3, [sp, #16]
 800d050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d052:	9500      	str	r5, [sp, #0]
 800d054:	9302      	str	r3, [sp, #8]
 800d056:	4663      	mov	r3, ip
 800d058:	47a0      	blx	r4

}
 800d05a:	b007      	add	sp, #28
 800d05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(draw_ctx);
 800d05e:	e7fe      	b.n	800d05e <lv_draw_transform+0x3a>

0800d060 <_lv_img_buf_get_transformed_area>:

#else
    LV_UNUSED(angle);
    LV_UNUSED(zoom);
    LV_UNUSED(pivot);
    res->x1 = 0;
 800d060:	2300      	movs	r3, #0
    res->y1 = 0;
    res->x2 = w - 1;
 800d062:	3901      	subs	r1, #1
    res->y2 = h - 1;
 800d064:	3a01      	subs	r2, #1
    res->x1 = 0;
 800d066:	8003      	strh	r3, [r0, #0]
    res->y1 = 0;
 800d068:	8043      	strh	r3, [r0, #2]
    res->x2 = w - 1;
 800d06a:	8081      	strh	r1, [r0, #4]
    res->y2 = h - 1;
 800d06c:	80c2      	strh	r2, [r0, #6]
#endif
}
 800d06e:	4770      	bx	lr

0800d070 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 800d070:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d072:	46c6      	mov	lr, r8
 800d074:	b500      	push	{lr}
 800d076:	0017      	movs	r7, r2
 800d078:	1c0e      	adds	r6, r1, #0
 800d07a:	0005      	movs	r5, r0
    }
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
 800d07c:	f003 fe3c 	bl	8010cf8 <lv_tick_get>
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800d080:	4c12      	ldr	r4, [pc, #72]	; (800d0cc <_lv_img_cache_open+0x5c>)
    uint32_t t_start  = lv_tick_get();
 800d082:	4680      	mov	r8, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800d084:	003b      	movs	r3, r7
 800d086:	0029      	movs	r1, r5
 800d088:	0020      	movs	r0, r4
 800d08a:	1c32      	adds	r2, r6, #0
 800d08c:	f000 fbf4 	bl	800d878 <lv_img_decoder_open>
    if(open_res == LV_RES_INV) {
 800d090:	2800      	cmp	r0, #0
 800d092:	d010      	beq.n	800d0b6 <_lv_img_cache_open+0x46>
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
        return NULL;
    }

    cached_src->life = 0;
 800d094:	2300      	movs	r3, #0
 800d096:	62a3      	str	r3, [r4, #40]	; 0x28

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
 800d098:	69e3      	ldr	r3, [r4, #28]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d003      	beq.n	800d0a6 <_lv_img_cache_open+0x36>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
 800d09e:	0020      	movs	r0, r4
}
 800d0a0:	bc80      	pop	{r7}
 800d0a2:	46b8      	mov	r8, r7
 800d0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800d0a6:	4640      	mov	r0, r8
 800d0a8:	f003 fe34 	bl	8010d14 <lv_tick_elaps>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	d10b      	bne.n	800d0c8 <_lv_img_cache_open+0x58>
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	61e3      	str	r3, [r4, #28]
 800d0b4:	e7f3      	b.n	800d09e <_lv_img_cache_open+0x2e>
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 800d0b6:	0020      	movs	r0, r4
 800d0b8:	212c      	movs	r1, #44	; 0x2c
 800d0ba:	f005 faf9 	bl	80126b0 <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 800d0be:	2380      	movs	r3, #128	; 0x80
 800d0c0:	061b      	lsls	r3, r3, #24
        return NULL;
 800d0c2:	2000      	movs	r0, #0
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 800d0c4:	62a3      	str	r3, [r4, #40]	; 0x28
        return NULL;
 800d0c6:	e7eb      	b.n	800d0a0 <_lv_img_cache_open+0x30>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800d0c8:	61e0      	str	r0, [r4, #28]
 800d0ca:	e7e8      	b.n	800d09e <_lv_img_cache_open+0x2e>
 800d0cc:	2000338c 	.word	0x2000338c

0800d0d0 <lv_img_cache_invalidate_src>:

            lv_memset_00(&cache[i], sizeof(_lv_img_cache_entry_t));
        }
    }
#endif
}
 800d0d0:	4770      	bx	lr
 800d0d2:	46c0      	nop			; (mov r8, r8)

0800d0d4 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800d0d4:	b570      	push	{r4, r5, r6, lr}
    LV_UNUSED(decoder); /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d0d6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
{
 800d0d8:	000c      	movs	r4, r1
    if(user_data) {
 800d0da:	2d00      	cmp	r5, #0
 800d0dc:	d011      	beq.n	800d102 <lv_img_decoder_built_in_close+0x2e>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d0de:	7c0b      	ldrb	r3, [r1, #16]
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d00f      	beq.n	800d104 <lv_img_decoder_built_in_close+0x30>
            lv_fs_close(&user_data->f);
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 800d0e4:	68e8      	ldr	r0, [r5, #12]
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	d001      	beq.n	800d0ee <lv_img_decoder_built_in_close+0x1a>
 800d0ea:	f004 ff81 	bl	8011ff0 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 800d0ee:	6928      	ldr	r0, [r5, #16]
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d001      	beq.n	800d0f8 <lv_img_decoder_built_in_close+0x24>
 800d0f4:	f004 ff7c 	bl	8011ff0 <lv_mem_free>

        lv_mem_free(user_data);
 800d0f8:	0028      	movs	r0, r5
 800d0fa:	f004 ff79 	bl	8011ff0 <lv_mem_free>
        dsc->user_data = NULL;
 800d0fe:	2300      	movs	r3, #0
 800d100:	6263      	str	r3, [r4, #36]	; 0x24
    }
}
 800d102:	bd70      	pop	{r4, r5, r6, pc}
            lv_fs_close(&user_data->f);
 800d104:	0028      	movs	r0, r5
 800d106:	f004 fcdd 	bl	8011ac4 <lv_fs_close>
 800d10a:	e7eb      	b.n	800d0e4 <lv_img_decoder_built_in_close+0x10>

0800d10c <lv_img_decoder_built_in_info>:
{
 800d10c:	b570      	push	{r4, r5, r6, lr}
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800d10e:	0008      	movs	r0, r1
{
 800d110:	b084      	sub	sp, #16
 800d112:	000d      	movs	r5, r1
 800d114:	0016      	movs	r6, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800d116:	f7ff fb15 	bl	800c744 <lv_img_src_get_type>
 800d11a:	1e04      	subs	r4, r0, #0
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800d11c:	d11a      	bne.n	800d154 <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800d11e:	782b      	ldrb	r3, [r5, #0]
 800d120:	06db      	lsls	r3, r3, #27
 800d122:	0edb      	lsrs	r3, r3, #27
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800d124:	3b04      	subs	r3, #4
 800d126:	b2db      	uxtb	r3, r3
 800d128:	2b10      	cmp	r3, #16
 800d12a:	d810      	bhi.n	800d14e <lv_img_decoder_built_in_info+0x42>
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800d12c:	886a      	ldrh	r2, [r5, #2]
 800d12e:	8873      	ldrh	r3, [r6, #2]
 800d130:	0952      	lsrs	r2, r2, #5
 800d132:	0151      	lsls	r1, r2, #5
 800d134:	221f      	movs	r2, #31
 800d136:	401a      	ands	r2, r3
 800d138:	430a      	orrs	r2, r1
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800d13a:	6828      	ldr	r0, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800d13c:	8072      	strh	r2, [r6, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800d13e:	6832      	ldr	r2, [r6, #0]
 800d140:	4b21      	ldr	r3, [pc, #132]	; (800d1c8 <lv_img_decoder_built_in_info+0xbc>)
    return LV_RES_OK;
 800d142:	3401      	adds	r4, #1
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800d144:	4013      	ands	r3, r2
 800d146:	4a21      	ldr	r2, [pc, #132]	; (800d1cc <lv_img_decoder_built_in_info+0xc0>)
 800d148:	4002      	ands	r2, r0
 800d14a:	4313      	orrs	r3, r2
 800d14c:	6033      	str	r3, [r6, #0]
}
 800d14e:	0020      	movs	r0, r4
 800d150:	b004      	add	sp, #16
 800d152:	bd70      	pop	{r4, r5, r6, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800d154:	2801      	cmp	r0, #1
 800d156:	d00b      	beq.n	800d170 <lv_img_decoder_built_in_info+0x64>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800d158:	2400      	movs	r4, #0
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800d15a:	2802      	cmp	r0, #2
 800d15c:	d1f7      	bne.n	800d14e <lv_img_decoder_built_in_info+0x42>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800d15e:	22f8      	movs	r2, #248	; 0xf8
 800d160:	6833      	ldr	r3, [r6, #0]
 800d162:	0092      	lsls	r2, r2, #2
 800d164:	401a      	ands	r2, r3
 800d166:	4b1a      	ldr	r3, [pc, #104]	; (800d1d0 <lv_img_decoder_built_in_info+0xc4>)
    return LV_RES_OK;
 800d168:	3401      	adds	r4, #1
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800d16a:	4313      	orrs	r3, r2
 800d16c:	6033      	str	r3, [r6, #0]
 800d16e:	e7ee      	b.n	800d14e <lv_img_decoder_built_in_info+0x42>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 800d170:	0028      	movs	r0, r5
 800d172:	f004 fdf1 	bl	8011d58 <lv_fs_get_ext>
 800d176:	4917      	ldr	r1, [pc, #92]	; (800d1d4 <lv_img_decoder_built_in_info+0xc8>)
 800d178:	f7f2 ffc4 	bl	8000104 <strcmp>
 800d17c:	2800      	cmp	r0, #0
 800d17e:	d001      	beq.n	800d184 <lv_img_decoder_built_in_info+0x78>
 800d180:	2400      	movs	r4, #0
 800d182:	e7e4      	b.n	800d14e <lv_img_decoder_built_in_info+0x42>
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 800d184:	2202      	movs	r2, #2
 800d186:	0029      	movs	r1, r5
 800d188:	a801      	add	r0, sp, #4
 800d18a:	f004 fc41 	bl	8011a10 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800d18e:	2800      	cmp	r0, #0
 800d190:	d008      	beq.n	800d1a4 <lv_img_decoder_built_in_info+0x98>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800d192:	221f      	movs	r2, #31
 800d194:	7833      	ldrb	r3, [r6, #0]
 800d196:	06db      	lsls	r3, r3, #27
 800d198:	0edb      	lsrs	r3, r3, #27
 800d19a:	331c      	adds	r3, #28
 800d19c:	4013      	ands	r3, r2
 800d19e:	2b10      	cmp	r3, #16
 800d1a0:	d9d5      	bls.n	800d14e <lv_img_decoder_built_in_info+0x42>
 800d1a2:	e7ed      	b.n	800d180 <lv_img_decoder_built_in_info+0x74>
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 800d1a4:	466b      	mov	r3, sp
 800d1a6:	2204      	movs	r2, #4
 800d1a8:	0031      	movs	r1, r6
 800d1aa:	a801      	add	r0, sp, #4
 800d1ac:	f004 fcb0 	bl	8011b10 <lv_fs_read>
 800d1b0:	0005      	movs	r5, r0
            lv_fs_close(&f);
 800d1b2:	a801      	add	r0, sp, #4
 800d1b4:	f004 fc86 	bl	8011ac4 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 800d1b8:	2d00      	cmp	r5, #0
 800d1ba:	d1e1      	bne.n	800d180 <lv_img_decoder_built_in_info+0x74>
 800d1bc:	9b00      	ldr	r3, [sp, #0]
 800d1be:	2b04      	cmp	r3, #4
 800d1c0:	d0e7      	beq.n	800d192 <lv_img_decoder_built_in_info+0x86>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 800d1c2:	2400      	movs	r4, #0
 800d1c4:	e7c3      	b.n	800d14e <lv_img_decoder_built_in_info+0x42>
 800d1c6:	46c0      	nop			; (mov r8, r8)
 800d1c8:	ffe003e0 	.word	0xffe003e0
 800d1cc:	001ffc1f 	.word	0x001ffc1f
 800d1d0:	0020040b 	.word	0x0020040b
 800d1d4:	0801b914 	.word	0x0801b914

0800d1d8 <lv_img_decoder_built_in_read_line>:
{
 800d1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1da:	46de      	mov	lr, fp
 800d1dc:	464e      	mov	r6, r9
 800d1de:	4657      	mov	r7, sl
 800d1e0:	4645      	mov	r5, r8
 800d1e2:	b5e0      	push	{r5, r6, r7, lr}
 800d1e4:	b08b      	sub	sp, #44	; 0x2c
 800d1e6:	469b      	mov	fp, r3
 800d1e8:	ab14      	add	r3, sp, #80	; 0x50
 800d1ea:	2600      	movs	r6, #0
 800d1ec:	5f9e      	ldrsh	r6, [r3, r6]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800d1ee:	231e      	movs	r3, #30
 800d1f0:	7d08      	ldrb	r0, [r1, #20]
{
 800d1f2:	000c      	movs	r4, r1
 800d1f4:	9201      	str	r2, [sp, #4]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800d1f6:	4003      	ands	r3, r0
 800d1f8:	2b04      	cmp	r3, #4
 800d1fa:	d014      	beq.n	800d226 <lv_img_decoder_built_in_read_line+0x4e>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800d1fc:	231f      	movs	r3, #31
 800d1fe:	4003      	ands	r3, r0
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800d200:	2b06      	cmp	r3, #6
 800d202:	d010      	beq.n	800d226 <lv_img_decoder_built_in_read_line+0x4e>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800d204:	001a      	movs	r2, r3
 800d206:	3a0b      	subs	r2, #11
 800d208:	2a03      	cmp	r2, #3
 800d20a:	d800      	bhi.n	800d20e <lv_img_decoder_built_in_read_line+0x36>
 800d20c:	e09d      	b.n	800d34a <lv_img_decoder_built_in_read_line+0x172>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800d20e:	3b07      	subs	r3, #7
 800d210:	2b03      	cmp	r3, #3
 800d212:	d935      	bls.n	800d280 <lv_img_decoder_built_in_read_line+0xa8>
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t * fs_buf = lv_mem_buf_get(w);
    if(fs_buf == NULL) return LV_RES_INV;
 800d214:	2500      	movs	r5, #0
}
 800d216:	0028      	movs	r0, r5
 800d218:	b00b      	add	sp, #44	; 0x2c
 800d21a:	bcf0      	pop	{r4, r5, r6, r7}
 800d21c:	46bb      	mov	fp, r7
 800d21e:	46b2      	mov	sl, r6
 800d220:	46a9      	mov	r9, r5
 800d222:	46a0      	mov	r8, r4
 800d224:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d226:	7c25      	ldrb	r5, [r4, #16]
 800d228:	2d01      	cmp	r5, #1
 800d22a:	d1f3      	bne.n	800d214 <lv_img_decoder_built_in_read_line+0x3c>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d22c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800d22e:	06c0      	lsls	r0, r0, #27
 800d230:	0ec0      	lsrs	r0, r0, #27
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d232:	4699      	mov	r9, r3
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800d234:	f7ff fa7c 	bl	800c730 <lv_img_cf_get_px_size>
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800d238:	465b      	mov	r3, fp
 800d23a:	6961      	ldr	r1, [r4, #20]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800d23c:	4682      	mov	sl, r0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800d23e:	02c9      	lsls	r1, r1, #11
 800d240:	0d49      	lsrs	r1, r1, #21
 800d242:	434b      	muls	r3, r1
 800d244:	0019      	movs	r1, r3
 800d246:	9b01      	ldr	r3, [sp, #4]
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800d248:	2200      	movs	r2, #0
    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800d24a:	469c      	mov	ip, r3
 800d24c:	4461      	add	r1, ip
 800d24e:	4341      	muls	r1, r0
 800d250:	10c9      	asrs	r1, r1, #3
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800d252:	4648      	mov	r0, r9
    pos += 4; /*Skip the header*/
 800d254:	3104      	adds	r1, #4
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800d256:	f004 fd2d 	bl	8011cb4 <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 800d25a:	2800      	cmp	r0, #0
 800d25c:	d1da      	bne.n	800d214 <lv_img_decoder_built_in_read_line+0x3c>
    uint32_t btr = len * (px_size >> 3);
 800d25e:	4653      	mov	r3, sl
 800d260:	08db      	lsrs	r3, r3, #3
 800d262:	b2db      	uxtb	r3, r3
 800d264:	435e      	muls	r6, r3
    uint32_t br  = 0;
 800d266:	9006      	str	r0, [sp, #24]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 800d268:	0032      	movs	r2, r6
 800d26a:	4648      	mov	r0, r9
 800d26c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d26e:	ab06      	add	r3, sp, #24
 800d270:	f004 fc4e 	bl	8011b10 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 800d274:	2800      	cmp	r0, #0
 800d276:	d1cd      	bne.n	800d214 <lv_img_decoder_built_in_read_line+0x3c>
 800d278:	9b06      	ldr	r3, [sp, #24]
 800d27a:	429e      	cmp	r6, r3
 800d27c:	d1ca      	bne.n	800d214 <lv_img_decoder_built_in_read_line+0x3c>
 800d27e:	e7ca      	b.n	800d216 <lv_img_decoder_built_in_read_line+0x3e>
}

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800d280:	06c0      	lsls	r0, r0, #27
 800d282:	0ec0      	lsrs	r0, r0, #27
 800d284:	f7ff fa54 	bl	800c730 <lv_img_cf_get_px_size>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 800d288:	7d22      	ldrb	r2, [r4, #20]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800d28a:	4680      	mov	r8, r0
    switch(dsc->header.cf) {
 800d28c:	06d2      	lsls	r2, r2, #27
 800d28e:	0ed2      	lsrs	r2, r2, #27
 800d290:	2a09      	cmp	r2, #9
 800d292:	d100      	bne.n	800d296 <lv_img_decoder_built_in_read_line+0xbe>
 800d294:	e144      	b.n	800d520 <lv_img_decoder_built_in_read_line+0x348>
 800d296:	d900      	bls.n	800d29a <lv_img_decoder_built_in_read_line+0xc2>
 800d298:	e0ea      	b.n	800d470 <lv_img_decoder_built_in_read_line+0x298>
 800d29a:	2a07      	cmp	r2, #7
 800d29c:	d100      	bne.n	800d2a0 <lv_img_decoder_built_in_read_line+0xc8>
 800d29e:	e153      	b.n	800d548 <lv_img_decoder_built_in_read_line+0x370>
 800d2a0:	2a08      	cmp	r2, #8
 800d2a2:	d000      	beq.n	800d2a6 <lv_img_decoder_built_in_read_line+0xce>
 800d2a4:	e167      	b.n	800d576 <lv_img_decoder_built_in_read_line+0x39e>
            ofs += w * y + (x >> 3); /*First pixel*/
            ofs += 8;                /*Skip the palette*/
            pos = 7 - (x & 0x7);
            break;
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d2a6:	6963      	ldr	r3, [r4, #20]
            ofs += w * y + (x >> 2); /*First pixel*/
 800d2a8:	465d      	mov	r5, fp
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d2aa:	02d8      	lsls	r0, r3, #11
            ofs += 16;               /*Skip the palette*/
 800d2ac:	2310      	movs	r3, #16
 800d2ae:	469a      	mov	sl, r3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d2b0:	0d40      	lsrs	r0, r0, #21
 800d2b2:	3003      	adds	r0, #3
 800d2b4:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 800d2b6:	4345      	muls	r5, r0
 800d2b8:	9a01      	ldr	r2, [sp, #4]
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;

    uint8_t * fs_buf = lv_mem_buf_get(w);
 800d2ba:	4683      	mov	fp, r0
            ofs += w * y + (x >> 2); /*First pixel*/
 800d2bc:	1091      	asrs	r1, r2, #2
 800d2be:	186d      	adds	r5, r5, r1
            ofs += 16;               /*Skip the palette*/
 800d2c0:	44aa      	add	sl, r5
            pos = 6 - (x & 0x3) * 2;
 800d2c2:	2503      	movs	r5, #3
 800d2c4:	b297      	uxth	r7, r2
 800d2c6:	43bd      	bics	r5, r7
 800d2c8:	006d      	lsls	r5, r5, #1
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800d2ca:	4658      	mov	r0, fp
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d2cc:	6a67      	ldr	r7, [r4, #36]	; 0x24
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800d2ce:	f004 feeb 	bl	80120a8 <lv_mem_buf_get>
 800d2d2:	4681      	mov	r9, r0
    if(fs_buf == NULL) return LV_RES_INV;
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	d09d      	beq.n	800d214 <lv_img_decoder_built_in_read_line+0x3c>
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800d2d8:	7c23      	ldrb	r3, [r4, #16]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d000      	beq.n	800d2e0 <lv_img_decoder_built_in_read_line+0x108>
 800d2de:	e0ef      	b.n	800d4c0 <lv_img_decoder_built_in_read_line+0x2e8>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
 800d2e0:	6863      	ldr	r3, [r4, #4]
 800d2e2:	6899      	ldr	r1, [r3, #8]
 800d2e4:	4451      	add	r1, sl
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 800d2e6:	2e00      	cmp	r6, #0
 800d2e8:	dd2a      	ble.n	800d340 <lv_img_decoder_built_in_read_line+0x168>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800d2ea:	4643      	mov	r3, r8
 800d2ec:	2001      	movs	r0, #1
 800d2ee:	3e01      	subs	r6, #1
 800d2f0:	b2b6      	uxth	r6, r6
 800d2f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d2f4:	4098      	lsls	r0, r3
 800d2f6:	0073      	lsls	r3, r6, #1
 800d2f8:	199e      	adds	r6, r3, r6
 800d2fa:	1cd3      	adds	r3, r2, #3
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800d2fc:	2408      	movs	r4, #8
 800d2fe:	18f6      	adds	r6, r6, r3
 800d300:	4643      	mov	r3, r8
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800d302:	3801      	subs	r0, #1
            pos = 8 - px_size;
 800d304:	1ae4      	subs	r4, r4, r3
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800d306:	b240      	sxtb	r0, r0
            pos = 8 - px_size;
 800d308:	b263      	sxtb	r3, r4
 800d30a:	469c      	mov	ip, r3
 800d30c:	4682      	mov	sl, r0
 800d30e:	46c3      	mov	fp, r8
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800d310:	780b      	ldrb	r3, [r1, #0]
 800d312:	4650      	mov	r0, sl
 800d314:	412b      	asrs	r3, r5
 800d316:	4003      	ands	r3, r0
        lv_color_t color = user_data->palette[val_act];
 800d318:	68fc      	ldr	r4, [r7, #12]
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	0058      	lsls	r0, r3, #1
 800d31e:	5b00      	ldrh	r0, [r0, r4]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 800d320:	7010      	strb	r0, [r2, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 800d322:	0a00      	lsrs	r0, r0, #8
 800d324:	7050      	strb	r0, [r2, #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 800d326:	6938      	ldr	r0, [r7, #16]
 800d328:	5cc3      	ldrb	r3, [r0, r3]
 800d32a:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
 800d32c:	465b      	mov	r3, fp
 800d32e:	1aeb      	subs	r3, r5, r3
 800d330:	b25d      	sxtb	r5, r3
        if(pos < 0) {
 800d332:	061b      	lsls	r3, r3, #24
 800d334:	d501      	bpl.n	800d33a <lv_img_decoder_built_in_read_line+0x162>
            pos = 8 - px_size;
 800d336:	4665      	mov	r5, ip
            data_tmp++;
 800d338:	3101      	adds	r1, #1
    for(i = 0; i < len; i++) {
 800d33a:	3203      	adds	r2, #3
 800d33c:	42b2      	cmp	r2, r6
 800d33e:	d1e7      	bne.n	800d310 <lv_img_decoder_built_in_read_line+0x138>
        }
    }
    lv_mem_buf_release(fs_buf);
 800d340:	4648      	mov	r0, r9
 800d342:	f004 ff55 	bl	80121f0 <lv_mem_buf_release>
    return LV_RES_OK;
 800d346:	2501      	movs	r5, #1
 800d348:	e765      	b.n	800d216 <lv_img_decoder_built_in_read_line+0x3e>
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800d34a:	4b8d      	ldr	r3, [pc, #564]	; (800d580 <lv_img_decoder_built_in_read_line+0x3a8>)
 800d34c:	aa04      	add	r2, sp, #16
 800d34e:	8013      	strh	r3, [r2, #0]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800d350:	4b8c      	ldr	r3, [pc, #560]	; (800d584 <lv_img_decoder_built_in_read_line+0x3ac>)
 800d352:	9305      	str	r3, [sp, #20]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800d354:	ab06      	add	r3, sp, #24
 800d356:	469a      	mov	sl, r3
 800d358:	4652      	mov	r2, sl
 800d35a:	4b8b      	ldr	r3, [pc, #556]	; (800d588 <lv_img_decoder_built_in_read_line+0x3b0>)
 800d35c:	cba2      	ldmia	r3!, {r1, r5, r7}
 800d35e:	c2a2      	stmia	r2!, {r1, r5, r7}
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6013      	str	r3, [r2, #0]
    lv_color_t bg_color = dsc->color;
 800d364:	8922      	ldrh	r2, [r4, #8]
    for(i = 0; i < len; i++) {
 800d366:	2e00      	cmp	r6, #0
 800d368:	dd0d      	ble.n	800d386 <lv_img_decoder_built_in_read_line+0x1ae>
 800d36a:	2000      	movs	r0, #0
 800d36c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d36e:	9f01      	ldr	r7, [sp, #4]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800d370:	0a11      	lsrs	r1, r2, #8
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 800d372:	b2d2      	uxtb	r2, r2
 800d374:	3001      	adds	r0, #1
 800d376:	b200      	sxth	r0, r0
 800d378:	701a      	strb	r2, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800d37a:	7059      	strb	r1, [r3, #1]
    for(i = 0; i < len; i++) {
 800d37c:	3303      	adds	r3, #3
 800d37e:	4286      	cmp	r6, r0
 800d380:	d1f8      	bne.n	800d374 <lv_img_decoder_built_in_read_line+0x19c>
 800d382:	7d20      	ldrb	r0, [r4, #20]
 800d384:	9701      	str	r7, [sp, #4]
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 800d386:	06c0      	lsls	r0, r0, #27
 800d388:	0ec0      	lsrs	r0, r0, #27
 800d38a:	f7ff f9d1 	bl	800c730 <lv_img_cf_get_px_size>
    switch(dsc->header.cf) {
 800d38e:	7d23      	ldrb	r3, [r4, #20]
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 800d390:	4680      	mov	r8, r0
    switch(dsc->header.cf) {
 800d392:	06db      	lsls	r3, r3, #27
 800d394:	0edb      	lsrs	r3, r3, #27
 800d396:	2b0d      	cmp	r3, #13
 800d398:	d100      	bne.n	800d39c <lv_img_decoder_built_in_read_line+0x1c4>
 800d39a:	e09f      	b.n	800d4dc <lv_img_decoder_built_in_read_line+0x304>
 800d39c:	d859      	bhi.n	800d452 <lv_img_decoder_built_in_read_line+0x27a>
 800d39e:	2b0b      	cmp	r3, #11
 800d3a0:	d100      	bne.n	800d3a4 <lv_img_decoder_built_in_read_line+0x1cc>
 800d3a2:	e0ac      	b.n	800d4fe <lv_img_decoder_built_in_read_line+0x326>
 800d3a4:	2b0c      	cmp	r3, #12
 800d3a6:	d000      	beq.n	800d3aa <lv_img_decoder_built_in_read_line+0x1d2>
 800d3a8:	e0df      	b.n	800d56a <lv_img_decoder_built_in_read_line+0x392>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d3aa:	6963      	ldr	r3, [r4, #20]
            ofs += w * y + (x >> 2); /*First pixel*/
 800d3ac:	465d      	mov	r5, fp
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d3ae:	02d8      	lsls	r0, r3, #11
 800d3b0:	0d40      	lsrs	r0, r0, #21
            ofs += w * y + (x >> 2); /*First pixel*/
 800d3b2:	9b01      	ldr	r3, [sp, #4]
            pos = 6 - (x & 0x3) * 2;
 800d3b4:	2703      	movs	r7, #3
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800d3b6:	3003      	adds	r0, #3
 800d3b8:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 800d3ba:	1099      	asrs	r1, r3, #2
            pos = 6 - (x & 0x3) * 2;
 800d3bc:	b29a      	uxth	r2, r3
            opa_table = alpha2_opa_table;
 800d3be:	ab05      	add	r3, sp, #20
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800d3c0:	4681      	mov	r9, r0
            opa_table = alpha2_opa_table;
 800d3c2:	469a      	mov	sl, r3
            ofs += w * y + (x >> 2); /*First pixel*/
 800d3c4:	4345      	muls	r5, r0
            pos = 6 - (x & 0x3) * 2;
 800d3c6:	4397      	bics	r7, r2
            ofs += w * y + (x >> 2); /*First pixel*/
 800d3c8:	186d      	adds	r5, r5, r1
            pos = 6 - (x & 0x3) * 2;
 800d3ca:	007f      	lsls	r7, r7, #1
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d3cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800d3ce:	4648      	mov	r0, r9
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d3d0:	469b      	mov	fp, r3
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800d3d2:	f004 fe69 	bl	80120a8 <lv_mem_buf_get>
 800d3d6:	9003      	str	r0, [sp, #12]
    if(fs_buf == NULL) return LV_RES_INV;
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d100      	bne.n	800d3de <lv_img_decoder_built_in_read_line+0x206>
 800d3dc:	e71a      	b.n	800d214 <lv_img_decoder_built_in_read_line+0x3c>
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800d3de:	7c23      	ldrb	r3, [r4, #16]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d160      	bne.n	800d4a6 <lv_img_decoder_built_in_read_line+0x2ce>
        data_tmp = img_dsc->data + ofs;
 800d3e4:	6863      	ldr	r3, [r4, #4]
 800d3e6:	6899      	ldr	r1, [r3, #8]
 800d3e8:	194d      	adds	r5, r1, r5
    for(i = 0; i < len; i++) {
 800d3ea:	2e00      	cmp	r6, #0
 800d3ec:	dd2c      	ble.n	800d448 <lv_img_decoder_built_in_read_line+0x270>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800d3ee:	4642      	mov	r2, r8
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	4093      	lsls	r3, r2
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800d3f4:	221f      	movs	r2, #31
            pos = 8 - px_size;
 800d3f6:	4641      	mov	r1, r8
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800d3f8:	4691      	mov	r9, r2
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800d3fa:	3b01      	subs	r3, #1
            pos = 8 - px_size;
 800d3fc:	2208      	movs	r2, #8
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800d3fe:	b25b      	sxtb	r3, r3
 800d400:	469c      	mov	ip, r3
            pos = 8 - px_size;
 800d402:	1a52      	subs	r2, r2, r1
 800d404:	b252      	sxtb	r2, r2
 800d406:	4693      	mov	fp, r2
 800d408:	4662      	mov	r2, ip
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800d40a:	2000      	movs	r0, #0
 800d40c:	9b15      	ldr	r3, [sp, #84]	; 0x54
            pos = 8 - px_size;
 800d40e:	9201      	str	r2, [sp, #4]
 800d410:	3302      	adds	r3, #2
 800d412:	9402      	str	r4, [sp, #8]
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800d414:	782a      	ldrb	r2, [r5, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800d416:	464c      	mov	r4, r9
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800d418:	413a      	asrs	r2, r7
 800d41a:	9901      	ldr	r1, [sp, #4]
 800d41c:	400a      	ands	r2, r1
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800d41e:	9902      	ldr	r1, [sp, #8]
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800d420:	b2d2      	uxtb	r2, r2
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800d422:	7d09      	ldrb	r1, [r1, #20]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800d424:	4021      	ands	r1, r4
 800d426:	290e      	cmp	r1, #14
 800d428:	d001      	beq.n	800d42e <lv_img_decoder_built_in_read_line+0x256>
 800d42a:	4651      	mov	r1, sl
 800d42c:	5c8a      	ldrb	r2, [r1, r2]
 800d42e:	701a      	strb	r2, [r3, #0]
        pos -= px_size;
 800d430:	4642      	mov	r2, r8
 800d432:	1aba      	subs	r2, r7, r2
 800d434:	b257      	sxtb	r7, r2
        if(pos < 0) {
 800d436:	0612      	lsls	r2, r2, #24
 800d438:	d501      	bpl.n	800d43e <lv_img_decoder_built_in_read_line+0x266>
            pos = 8 - px_size;
 800d43a:	465f      	mov	r7, fp
            data_tmp++;
 800d43c:	3501      	adds	r5, #1
    for(i = 0; i < len; i++) {
 800d43e:	3001      	adds	r0, #1
 800d440:	b200      	sxth	r0, r0
 800d442:	3303      	adds	r3, #3
 800d444:	4286      	cmp	r6, r0
 800d446:	d1e5      	bne.n	800d414 <lv_img_decoder_built_in_read_line+0x23c>
    lv_mem_buf_release(fs_buf);
 800d448:	9803      	ldr	r0, [sp, #12]
 800d44a:	f004 fed1 	bl	80121f0 <lv_mem_buf_release>
    return LV_RES_OK;
 800d44e:	2501      	movs	r5, #1
 800d450:	e6e1      	b.n	800d216 <lv_img_decoder_built_in_read_line+0x3e>
    switch(dsc->header.cf) {
 800d452:	2b0e      	cmp	r3, #14
 800d454:	d11c      	bne.n	800d490 <lv_img_decoder_built_in_read_line+0x2b8>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800d456:	6963      	ldr	r3, [r4, #20]
            ofs += w * y + x;  /*First pixel*/
 800d458:	465d      	mov	r5, fp
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800d45a:	02da      	lsls	r2, r3, #11
            ofs += w * y + x;  /*First pixel*/
 800d45c:	9b01      	ldr	r3, [sp, #4]
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800d45e:	0d52      	lsrs	r2, r2, #21
            ofs += w * y + x;  /*First pixel*/
 800d460:	469c      	mov	ip, r3
    const lv_opa_t * opa_table = NULL;
 800d462:	2300      	movs	r3, #0
            ofs += w * y + x;  /*First pixel*/
 800d464:	4355      	muls	r5, r2
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800d466:	4691      	mov	r9, r2
            pos = 0;
 800d468:	2700      	movs	r7, #0
    const lv_opa_t * opa_table = NULL;
 800d46a:	469a      	mov	sl, r3
            ofs += w * y + x;  /*First pixel*/
 800d46c:	4465      	add	r5, ip
            break;
 800d46e:	e7ad      	b.n	800d3cc <lv_img_decoder_built_in_read_line+0x1f4>
    switch(dsc->header.cf) {
 800d470:	2a0a      	cmp	r2, #10
 800d472:	d113      	bne.n	800d49c <lv_img_decoder_built_in_read_line+0x2c4>
            ofs += w * y + x;  /*First pixel*/
 800d474:	465d      	mov	r5, fp
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800d476:	6963      	ldr	r3, [r4, #20]
            ofs += w * y + x;  /*First pixel*/
 800d478:	9a01      	ldr	r2, [sp, #4]
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800d47a:	02db      	lsls	r3, r3, #11
 800d47c:	0d5b      	lsrs	r3, r3, #21
            ofs += w * y + x;  /*First pixel*/
 800d47e:	435d      	muls	r5, r3
 800d480:	18af      	adds	r7, r5, r2
            ofs += 1024;       /*Skip the palette*/
 800d482:	2280      	movs	r2, #128	; 0x80
 800d484:	00d2      	lsls	r2, r2, #3
 800d486:	4692      	mov	sl, r2
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800d488:	469b      	mov	fp, r3
            pos = 0;
 800d48a:	2500      	movs	r5, #0
            ofs += 1024;       /*Skip the palette*/
 800d48c:	44ba      	add	sl, r7
            break;
 800d48e:	e71c      	b.n	800d2ca <lv_img_decoder_built_in_read_line+0xf2>
    switch(dsc->header.cf) {
 800d490:	2300      	movs	r3, #0
 800d492:	2700      	movs	r7, #0
 800d494:	4699      	mov	r9, r3
 800d496:	2500      	movs	r5, #0
 800d498:	469a      	mov	sl, r3
 800d49a:	e797      	b.n	800d3cc <lv_img_decoder_built_in_read_line+0x1f4>
    switch(dsc->header.cf) {
 800d49c:	2300      	movs	r3, #0
 800d49e:	2500      	movs	r5, #0
 800d4a0:	469b      	mov	fp, r3
 800d4a2:	469a      	mov	sl, r3
 800d4a4:	e711      	b.n	800d2ca <lv_img_decoder_built_in_read_line+0xf2>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 800d4a6:	1d29      	adds	r1, r5, #4
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	4658      	mov	r0, fp
 800d4ac:	f004 fc02 	bl	8011cb4 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800d4b0:	9d03      	ldr	r5, [sp, #12]
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	464a      	mov	r2, r9
 800d4b6:	0029      	movs	r1, r5
 800d4b8:	4658      	mov	r0, fp
 800d4ba:	f004 fb29 	bl	8011b10 <lv_fs_read>
        data_tmp = fs_buf;
 800d4be:	e794      	b.n	800d3ea <lv_img_decoder_built_in_read_line+0x212>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 800d4c0:	4651      	mov	r1, sl
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	3104      	adds	r1, #4
 800d4c6:	0038      	movs	r0, r7
 800d4c8:	f004 fbf4 	bl	8011cb4 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800d4cc:	4649      	mov	r1, r9
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	465a      	mov	r2, fp
 800d4d2:	0038      	movs	r0, r7
 800d4d4:	f004 fb1c 	bl	8011b10 <lv_fs_read>
 800d4d8:	4649      	mov	r1, r9
 800d4da:	e704      	b.n	800d2e6 <lv_img_decoder_built_in_read_line+0x10e>
            ofs += w * y + (x >> 1); /*First pixel*/
 800d4dc:	465d      	mov	r5, fp
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d4de:	6963      	ldr	r3, [r4, #20]
            pos = 4 - (x & 0x1) * 4;
 800d4e0:	2704      	movs	r7, #4
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d4e2:	02da      	lsls	r2, r3, #11
 800d4e4:	0d52      	lsrs	r2, r2, #21
 800d4e6:	3201      	adds	r2, #1
 800d4e8:	1052      	asrs	r2, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800d4ea:	4355      	muls	r5, r2
 800d4ec:	9b01      	ldr	r3, [sp, #4]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800d4ee:	4691      	mov	r9, r2
            ofs += w * y + (x >> 1); /*First pixel*/
 800d4f0:	1059      	asrs	r1, r3, #1
 800d4f2:	186d      	adds	r5, r5, r1
            pos = 4 - (x & 0x1) * 4;
 800d4f4:	07db      	lsls	r3, r3, #31
 800d4f6:	d400      	bmi.n	800d4fa <lv_img_decoder_built_in_read_line+0x322>
 800d4f8:	e768      	b.n	800d3cc <lv_img_decoder_built_in_read_line+0x1f4>
 800d4fa:	2700      	movs	r7, #0
 800d4fc:	e766      	b.n	800d3cc <lv_img_decoder_built_in_read_line+0x1f4>
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800d4fe:	6963      	ldr	r3, [r4, #20]
            ofs += w * y + (x >> 3); /*First pixel*/
 800d500:	465d      	mov	r5, fp
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800d502:	02da      	lsls	r2, r3, #11
            pos = 7 - (x & 0x7);
 800d504:	2307      	movs	r3, #7
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800d506:	0d52      	lsrs	r2, r2, #21
 800d508:	3207      	adds	r2, #7
 800d50a:	10d2      	asrs	r2, r2, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 800d50c:	9801      	ldr	r0, [sp, #4]
 800d50e:	4355      	muls	r5, r2
            pos = 7 - (x & 0x7);
 800d510:	4383      	bics	r3, r0
 800d512:	001f      	movs	r7, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 800d514:	10c1      	asrs	r1, r0, #3
            opa_table = alpha1_opa_table;
 800d516:	ab04      	add	r3, sp, #16
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800d518:	4691      	mov	r9, r2
            opa_table = alpha1_opa_table;
 800d51a:	469a      	mov	sl, r3
            ofs += w * y + (x >> 3); /*First pixel*/
 800d51c:	186d      	adds	r5, r5, r1
            break;
 800d51e:	e755      	b.n	800d3cc <lv_img_decoder_built_in_read_line+0x1f4>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d520:	6963      	ldr	r3, [r4, #20]
            ofs += w * y + (x >> 1); /*First pixel*/
 800d522:	465d      	mov	r5, fp
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d524:	02da      	lsls	r2, r3, #11
            ofs += 64;               /*Skip the palette*/
 800d526:	2340      	movs	r3, #64	; 0x40
 800d528:	469a      	mov	sl, r3
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800d52a:	0d52      	lsrs	r2, r2, #21
 800d52c:	3201      	adds	r2, #1
 800d52e:	1052      	asrs	r2, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800d530:	4355      	muls	r5, r2
 800d532:	9801      	ldr	r0, [sp, #4]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800d534:	4693      	mov	fp, r2
            ofs += w * y + (x >> 1); /*First pixel*/
 800d536:	1041      	asrs	r1, r0, #1
 800d538:	186d      	adds	r5, r5, r1
            ofs += 64;               /*Skip the palette*/
 800d53a:	44aa      	add	sl, r5
            pos = 4 - (x & 0x1) * 4;
 800d53c:	2504      	movs	r5, #4
 800d53e:	07c3      	lsls	r3, r0, #31
 800d540:	d400      	bmi.n	800d544 <lv_img_decoder_built_in_read_line+0x36c>
 800d542:	e6c2      	b.n	800d2ca <lv_img_decoder_built_in_read_line+0xf2>
            pos = 0;
 800d544:	2500      	movs	r5, #0
 800d546:	e6c0      	b.n	800d2ca <lv_img_decoder_built_in_read_line+0xf2>
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800d548:	6963      	ldr	r3, [r4, #20]
            ofs += w * y + (x >> 3); /*First pixel*/
 800d54a:	465d      	mov	r5, fp
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800d54c:	02d8      	lsls	r0, r3, #11
            ofs += 8;                /*Skip the palette*/
 800d54e:	2308      	movs	r3, #8
 800d550:	469a      	mov	sl, r3
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800d552:	0d40      	lsrs	r0, r0, #21
 800d554:	3007      	adds	r0, #7
 800d556:	10c0      	asrs	r0, r0, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 800d558:	4345      	muls	r5, r0
 800d55a:	9f01      	ldr	r7, [sp, #4]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800d55c:	4683      	mov	fp, r0
            ofs += w * y + (x >> 3); /*First pixel*/
 800d55e:	10f9      	asrs	r1, r7, #3
 800d560:	186d      	adds	r5, r5, r1
            pos = 7 - (x & 0x7);
 800d562:	43ba      	bics	r2, r7
            ofs += 8;                /*Skip the palette*/
 800d564:	44aa      	add	sl, r5
            pos = 7 - (x & 0x7);
 800d566:	0015      	movs	r5, r2
            break;
 800d568:	e6af      	b.n	800d2ca <lv_img_decoder_built_in_read_line+0xf2>
    switch(dsc->header.cf) {
 800d56a:	2300      	movs	r3, #0
 800d56c:	4699      	mov	r9, r3
 800d56e:	001f      	movs	r7, r3
 800d570:	001d      	movs	r5, r3
 800d572:	469a      	mov	sl, r3
 800d574:	e72a      	b.n	800d3cc <lv_img_decoder_built_in_read_line+0x1f4>
    switch(dsc->header.cf) {
 800d576:	2300      	movs	r3, #0
 800d578:	469b      	mov	fp, r3
 800d57a:	469a      	mov	sl, r3
 800d57c:	001d      	movs	r5, r3
 800d57e:	e6a4      	b.n	800d2ca <lv_img_decoder_built_in_read_line+0xf2>
 800d580:	ffffff00 	.word	0xffffff00
 800d584:	ffaa5500 	.word	0xffaa5500
 800d588:	0801b674 	.word	0x0801b674

0800d58c <lv_img_decoder_built_in_open>:
{
 800d58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d58e:	46c6      	mov	lr, r8
 800d590:	b500      	push	{lr}
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d592:	7c0b      	ldrb	r3, [r1, #16]
{
 800d594:	000c      	movs	r4, r1
 800d596:	b084      	sub	sp, #16
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d03a      	beq.n	800d612 <lv_img_decoder_built_in_open+0x86>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d110      	bne.n	800d5c2 <lv_img_decoder_built_in_open+0x36>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 800d5a0:	684a      	ldr	r2, [r1, #4]
 800d5a2:	6893      	ldr	r3, [r2, #8]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d032      	beq.n	800d60e <lv_img_decoder_built_in_open+0x82>
    lv_img_cf_t cf = dsc->header.cf;
 800d5a8:	7d08      	ldrb	r0, [r1, #20]
 800d5aa:	06c0      	lsls	r0, r0, #27
 800d5ac:	0ec0      	lsrs	r0, r0, #27
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800d5ae:	1f01      	subs	r1, r0, #4
 800d5b0:	2902      	cmp	r1, #2
 800d5b2:	d85e      	bhi.n	800d672 <lv_img_decoder_built_in_open+0xe6>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800d5b4:	61a3      	str	r3, [r4, #24]
            return LV_RES_OK;
 800d5b6:	2501      	movs	r5, #1
}
 800d5b8:	0028      	movs	r0, r5
 800d5ba:	b004      	add	sp, #16
 800d5bc:	bc80      	pop	{r7}
 800d5be:	46b8      	mov	r8, r7
 800d5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_img_cf_t cf = dsc->header.cf;
 800d5c2:	7d08      	ldrb	r0, [r1, #20]
 800d5c4:	06c0      	lsls	r0, r0, #27
 800d5c6:	0ec0      	lsrs	r0, r0, #27
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800d5c8:	1f03      	subs	r3, r0, #4
 800d5ca:	2b02      	cmp	r3, #2
 800d5cc:	d9f3      	bls.n	800d5b6 <lv_img_decoder_built_in_open+0x2a>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 800d5ce:	2814      	cmp	r0, #20
 800d5d0:	d0f1      	beq.n	800d5b6 <lv_img_decoder_built_in_open+0x2a>
 800d5d2:	280e      	cmp	r0, #14
 800d5d4:	d046      	beq.n	800d664 <lv_img_decoder_built_in_open+0xd8>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800d5d6:	1fc3      	subs	r3, r0, #7
 800d5d8:	2b03      	cmp	r3, #3
 800d5da:	d94e      	bls.n	800d67a <lv_img_decoder_built_in_open+0xee>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT) {
 800d5dc:	380b      	subs	r0, #11
 800d5de:	2802      	cmp	r0, #2
 800d5e0:	d9e9      	bls.n	800d5b6 <lv_img_decoder_built_in_open+0x2a>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d5e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if(user_data) {
 800d5e4:	2d00      	cmp	r5, #0
 800d5e6:	d012      	beq.n	800d60e <lv_img_decoder_built_in_open+0x82>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d5e8:	7c23      	ldrb	r3, [r4, #16]
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d100      	bne.n	800d5f0 <lv_img_decoder_built_in_open+0x64>
 800d5ee:	e0c1      	b.n	800d774 <lv_img_decoder_built_in_open+0x1e8>
        if(user_data->palette) lv_mem_free(user_data->palette);
 800d5f0:	68e8      	ldr	r0, [r5, #12]
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	d001      	beq.n	800d5fa <lv_img_decoder_built_in_open+0x6e>
 800d5f6:	f004 fcfb 	bl	8011ff0 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 800d5fa:	6928      	ldr	r0, [r5, #16]
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	d001      	beq.n	800d604 <lv_img_decoder_built_in_open+0x78>
 800d600:	f004 fcf6 	bl	8011ff0 <lv_mem_free>
        lv_mem_free(user_data);
 800d604:	0028      	movs	r0, r5
 800d606:	f004 fcf3 	bl	8011ff0 <lv_mem_free>
        dsc->user_data = NULL;
 800d60a:	2300      	movs	r3, #0
 800d60c:	6263      	str	r3, [r4, #36]	; 0x24
        return LV_RES_INV;
 800d60e:	2500      	movs	r5, #0
 800d610:	e7d2      	b.n	800d5b8 <lv_img_decoder_built_in_open+0x2c>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800d612:	6848      	ldr	r0, [r1, #4]
 800d614:	f004 fba0 	bl	8011d58 <lv_fs_get_ext>
 800d618:	496b      	ldr	r1, [pc, #428]	; (800d7c8 <lv_img_decoder_built_in_open+0x23c>)
 800d61a:	f7f2 fd73 	bl	8000104 <strcmp>
 800d61e:	2800      	cmp	r0, #0
 800d620:	d1f5      	bne.n	800d60e <lv_img_decoder_built_in_open+0x82>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800d622:	af01      	add	r7, sp, #4
 800d624:	2202      	movs	r2, #2
 800d626:	0038      	movs	r0, r7
 800d628:	6861      	ldr	r1, [r4, #4]
 800d62a:	f004 f9f1 	bl	8011a10 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800d62e:	2800      	cmp	r0, #0
 800d630:	d1ed      	bne.n	800d60e <lv_img_decoder_built_in_open+0x82>
        if(dsc->user_data == NULL) {
 800d632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d634:	2b00      	cmp	r3, #0
 800d636:	d100      	bne.n	800d63a <lv_img_decoder_built_in_open+0xae>
 800d638:	e090      	b.n	800d75c <lv_img_decoder_built_in_open+0x1d0>
    while(len) {
 800d63a:	466a      	mov	r2, sp
 800d63c:	3205      	adds	r2, #5
 800d63e:	1a9a      	subs	r2, r3, r2
 800d640:	2a02      	cmp	r2, #2
 800d642:	d972      	bls.n	800d72a <lv_img_decoder_built_in_open+0x19e>
 800d644:	079a      	lsls	r2, r3, #30
 800d646:	d170      	bne.n	800d72a <lv_img_decoder_built_in_open+0x19e>
        *d8 = *s8;
 800d648:	9a01      	ldr	r2, [sp, #4]
 800d64a:	601a      	str	r2, [r3, #0]
 800d64c:	9a02      	ldr	r2, [sp, #8]
 800d64e:	605a      	str	r2, [r3, #4]
 800d650:	9a03      	ldr	r2, [sp, #12]
 800d652:	609a      	str	r2, [r3, #8]
    lv_img_cf_t cf = dsc->header.cf;
 800d654:	7d20      	ldrb	r0, [r4, #20]
 800d656:	06c0      	lsls	r0, r0, #27
 800d658:	0ec0      	lsrs	r0, r0, #27
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800d65a:	1f03      	subs	r3, r0, #4
 800d65c:	2b02      	cmp	r3, #2
 800d65e:	d901      	bls.n	800d664 <lv_img_decoder_built_in_open+0xd8>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 800d660:	2814      	cmp	r0, #20
 800d662:	d1b6      	bne.n	800d5d2 <lv_img_decoder_built_in_open+0x46>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800d664:	7c23      	ldrb	r3, [r4, #16]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1a5      	bne.n	800d5b6 <lv_img_decoder_built_in_open+0x2a>
 800d66a:	6862      	ldr	r2, [r4, #4]
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800d66c:	6893      	ldr	r3, [r2, #8]
 800d66e:	61a3      	str	r3, [r4, #24]
 800d670:	e7a1      	b.n	800d5b6 <lv_img_decoder_built_in_open+0x2a>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 800d672:	2814      	cmp	r0, #20
 800d674:	d1ad      	bne.n	800d5d2 <lv_img_decoder_built_in_open+0x46>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800d676:	6893      	ldr	r3, [r2, #8]
 800d678:	e7f9      	b.n	800d66e <lv_img_decoder_built_in_open+0xe2>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 800d67a:	f7ff f859 	bl	800c730 <lv_img_cf_get_px_size>
        if(dsc->user_data == NULL) {
 800d67e:	6a66      	ldr	r6, [r4, #36]	; 0x24
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 800d680:	0005      	movs	r5, r0
        if(dsc->user_data == NULL) {
 800d682:	2e00      	cmp	r6, #0
 800d684:	d045      	beq.n	800d712 <lv_img_decoder_built_in_open+0x186>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800d686:	2002      	movs	r0, #2
 800d688:	40a8      	lsls	r0, r5
 800d68a:	f004 fc8f 	bl	8011fac <lv_mem_alloc>
 800d68e:	60f0      	str	r0, [r6, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 800d690:	2800      	cmp	r0, #0
 800d692:	d03c      	beq.n	800d70e <lv_img_decoder_built_in_open+0x182>
        uint32_t palette_size = 1 << px_size;
 800d694:	2701      	movs	r7, #1
 800d696:	40af      	lsls	r7, r5
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 800d698:	0038      	movs	r0, r7
 800d69a:	f004 fc87 	bl	8011fac <lv_mem_alloc>
        uint32_t palette_size = 1 << px_size;
 800d69e:	46b8      	mov	r8, r7
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 800d6a0:	6130      	str	r0, [r6, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	d034      	beq.n	800d710 <lv_img_decoder_built_in_open+0x184>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 800d6a6:	68f3      	ldr	r3, [r6, #12]
 800d6a8:	469c      	mov	ip, r3
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d099      	beq.n	800d5e2 <lv_img_decoder_built_in_open+0x56>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d6ae:	7c25      	ldrb	r5, [r4, #16]
 800d6b0:	2d01      	cmp	r5, #1
 800d6b2:	d063      	beq.n	800d77c <lv_img_decoder_built_in_open+0x1f0>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800d6b4:	6863      	ldr	r3, [r4, #4]
 800d6b6:	6899      	ldr	r1, [r3, #8]
            for(i = 0; i < palette_size; i++) {
 800d6b8:	2f00      	cmp	r7, #0
 800d6ba:	d100      	bne.n	800d6be <lv_img_decoder_built_in_open+0x132>
 800d6bc:	e77b      	b.n	800d5b6 <lv_img_decoder_built_in_open+0x2a>
 800d6be:	784b      	ldrb	r3, [r1, #1]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800d6c0:	089b      	lsrs	r3, r3, #2
 800d6c2:	015a      	lsls	r2, r3, #5
 800d6c4:	780b      	ldrb	r3, [r1, #0]
 800d6c6:	08db      	lsrs	r3, r3, #3
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	788a      	ldrb	r2, [r1, #2]
 800d6cc:	08d2      	lsrs	r2, r2, #3
 800d6ce:	02d2      	lsls	r2, r2, #11
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	4662      	mov	r2, ip
 800d6d4:	8013      	strh	r3, [r2, #0]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 800d6d6:	78cb      	ldrb	r3, [r1, #3]
 800d6d8:	3104      	adds	r1, #4
 800d6da:	7003      	strb	r3, [r0, #0]
            for(i = 0; i < palette_size; i++) {
 800d6dc:	2001      	movs	r0, #1
 800d6de:	2f01      	cmp	r7, #1
 800d6e0:	d100      	bne.n	800d6e4 <lv_img_decoder_built_in_open+0x158>
 800d6e2:	e768      	b.n	800d5b6 <lv_img_decoder_built_in_open+0x2a>
 800d6e4:	784b      	ldrb	r3, [r1, #1]
 800d6e6:	788a      	ldrb	r2, [r1, #2]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800d6e8:	089b      	lsrs	r3, r3, #2
 800d6ea:	015f      	lsls	r7, r3, #5
 800d6ec:	780b      	ldrb	r3, [r1, #0]
 800d6ee:	08d2      	lsrs	r2, r2, #3
 800d6f0:	08db      	lsrs	r3, r3, #3
 800d6f2:	02d2      	lsls	r2, r2, #11
 800d6f4:	433b      	orrs	r3, r7
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	68f2      	ldr	r2, [r6, #12]
 800d6fa:	0045      	lsls	r5, r0, #1
                user_data->opa[i]     = palette_p[i].ch.alpha;
 800d6fc:	6934      	ldr	r4, [r6, #16]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800d6fe:	52ab      	strh	r3, [r5, r2]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 800d700:	78cb      	ldrb	r3, [r1, #3]
            for(i = 0; i < palette_size; i++) {
 800d702:	3104      	adds	r1, #4
                user_data->opa[i]     = palette_p[i].ch.alpha;
 800d704:	5423      	strb	r3, [r4, r0]
            for(i = 0; i < palette_size; i++) {
 800d706:	3001      	adds	r0, #1
 800d708:	4580      	cmp	r8, r0
 800d70a:	d1eb      	bne.n	800d6e4 <lv_img_decoder_built_in_open+0x158>
 800d70c:	e753      	b.n	800d5b6 <lv_img_decoder_built_in_open+0x2a>
        LV_ASSERT_MALLOC(user_data->palette);
 800d70e:	e7fe      	b.n	800d70e <lv_img_decoder_built_in_open+0x182>
        LV_ASSERT_MALLOC(user_data->opa);
 800d710:	e7fe      	b.n	800d710 <lv_img_decoder_built_in_open+0x184>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800d712:	2014      	movs	r0, #20
 800d714:	f004 fc4a 	bl	8011fac <lv_mem_alloc>
 800d718:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 800d71a:	2800      	cmp	r0, #0
 800d71c:	d004      	beq.n	800d728 <lv_img_decoder_built_in_open+0x19c>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800d71e:	2114      	movs	r1, #20
 800d720:	f004 ffc6 	bl	80126b0 <lv_memset_00>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d724:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d726:	e7ae      	b.n	800d686 <lv_img_decoder_built_in_open+0xfa>
            LV_ASSERT_MALLOC(dsc->user_data);
 800d728:	e7fe      	b.n	800d728 <lv_img_decoder_built_in_open+0x19c>
 800d72a:	783a      	ldrb	r2, [r7, #0]
 800d72c:	701a      	strb	r2, [r3, #0]
 800d72e:	787a      	ldrb	r2, [r7, #1]
 800d730:	705a      	strb	r2, [r3, #1]
 800d732:	78ba      	ldrb	r2, [r7, #2]
 800d734:	709a      	strb	r2, [r3, #2]
 800d736:	78fa      	ldrb	r2, [r7, #3]
 800d738:	70da      	strb	r2, [r3, #3]
 800d73a:	793a      	ldrb	r2, [r7, #4]
 800d73c:	711a      	strb	r2, [r3, #4]
 800d73e:	797a      	ldrb	r2, [r7, #5]
 800d740:	715a      	strb	r2, [r3, #5]
 800d742:	79ba      	ldrb	r2, [r7, #6]
 800d744:	719a      	strb	r2, [r3, #6]
 800d746:	79fa      	ldrb	r2, [r7, #7]
 800d748:	71da      	strb	r2, [r3, #7]
 800d74a:	7a3a      	ldrb	r2, [r7, #8]
 800d74c:	721a      	strb	r2, [r3, #8]
 800d74e:	7a7a      	ldrb	r2, [r7, #9]
 800d750:	725a      	strb	r2, [r3, #9]
 800d752:	7aba      	ldrb	r2, [r7, #10]
 800d754:	729a      	strb	r2, [r3, #10]
 800d756:	7afa      	ldrb	r2, [r7, #11]
 800d758:	72da      	strb	r2, [r3, #11]
    while(len) {
 800d75a:	e77b      	b.n	800d654 <lv_img_decoder_built_in_open+0xc8>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800d75c:	3014      	adds	r0, #20
 800d75e:	f004 fc25 	bl	8011fac <lv_mem_alloc>
 800d762:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 800d764:	2800      	cmp	r0, #0
 800d766:	d004      	beq.n	800d772 <lv_img_decoder_built_in_open+0x1e6>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800d768:	2114      	movs	r1, #20
 800d76a:	f004 ffa1 	bl	80126b0 <lv_memset_00>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d76e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d770:	e763      	b.n	800d63a <lv_img_decoder_built_in_open+0xae>
            LV_ASSERT_MALLOC(dsc->user_data);
 800d772:	e7fe      	b.n	800d772 <lv_img_decoder_built_in_open+0x1e6>
            lv_fs_close(&user_data->f);
 800d774:	0028      	movs	r0, r5
 800d776:	f004 f9a5 	bl	8011ac4 <lv_fs_close>
 800d77a:	e739      	b.n	800d5f0 <lv_img_decoder_built_in_open+0x64>
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 800d77c:	2200      	movs	r2, #0
 800d77e:	2104      	movs	r1, #4
 800d780:	0030      	movs	r0, r6
 800d782:	f004 fa97 	bl	8011cb4 <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 800d786:	4643      	mov	r3, r8
 800d788:	2400      	movs	r4, #0
 800d78a:	af01      	add	r7, sp, #4
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d100      	bne.n	800d792 <lv_img_decoder_built_in_open+0x206>
 800d790:	e712      	b.n	800d5b8 <lv_img_decoder_built_in_open+0x2c>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 800d792:	2300      	movs	r3, #0
 800d794:	2204      	movs	r2, #4
 800d796:	0039      	movs	r1, r7
 800d798:	0030      	movs	r0, r6
 800d79a:	f004 f9b9 	bl	8011b10 <lv_fs_read>
 800d79e:	787b      	ldrb	r3, [r7, #1]
 800d7a0:	78ba      	ldrb	r2, [r7, #2]
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 800d7a2:	089b      	lsrs	r3, r3, #2
 800d7a4:	0158      	lsls	r0, r3, #5
 800d7a6:	783b      	ldrb	r3, [r7, #0]
 800d7a8:	08d2      	lsrs	r2, r2, #3
 800d7aa:	08db      	lsrs	r3, r3, #3
 800d7ac:	02d2      	lsls	r2, r2, #11
 800d7ae:	4303      	orrs	r3, r0
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	68f2      	ldr	r2, [r6, #12]
 800d7b4:	0061      	lsls	r1, r4, #1
 800d7b6:	528b      	strh	r3, [r1, r2]
                user_data->opa[i]     = cur_color.ch.alpha;
 800d7b8:	78fb      	ldrb	r3, [r7, #3]
 800d7ba:	6932      	ldr	r2, [r6, #16]
 800d7bc:	5513      	strb	r3, [r2, r4]
            for(i = 0; i < palette_size; i++) {
 800d7be:	3401      	adds	r4, #1
 800d7c0:	45a0      	cmp	r8, r4
 800d7c2:	d1e6      	bne.n	800d792 <lv_img_decoder_built_in_open+0x206>
 800d7c4:	e6f8      	b.n	800d5b8 <lv_img_decoder_built_in_open+0x2c>
 800d7c6:	46c0      	nop			; (mov r8, r8)
 800d7c8:	0801b914 	.word	0x0801b914

0800d7cc <_lv_img_decoder_init>:
{
 800d7cc:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 800d7ce:	4c0b      	ldr	r4, [pc, #44]	; (800d7fc <_lv_img_decoder_init+0x30>)
 800d7d0:	2110      	movs	r1, #16
 800d7d2:	0020      	movs	r0, r4
 800d7d4:	f004 fad8 	bl	8011d88 <_lv_ll_init>
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 800d7d8:	0020      	movs	r0, r4
 800d7da:	f004 fadd 	bl	8011d98 <_lv_ll_ins_head>
 800d7de:	1e04      	subs	r4, r0, #0
    LV_ASSERT_MALLOC(decoder);
 800d7e0:	d00b      	beq.n	800d7fa <_lv_img_decoder_init+0x2e>
    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 800d7e2:	2110      	movs	r1, #16
 800d7e4:	f004 ff64 	bl	80126b0 <lv_memset_00>
    decoder->info_cb = info_cb;
 800d7e8:	4b05      	ldr	r3, [pc, #20]	; (800d800 <_lv_img_decoder_init+0x34>)
 800d7ea:	6023      	str	r3, [r4, #0]
    decoder->open_cb = open_cb;
 800d7ec:	4b05      	ldr	r3, [pc, #20]	; (800d804 <_lv_img_decoder_init+0x38>)
 800d7ee:	6063      	str	r3, [r4, #4]
    decoder->read_line_cb = read_line_cb;
 800d7f0:	4b05      	ldr	r3, [pc, #20]	; (800d808 <_lv_img_decoder_init+0x3c>)
 800d7f2:	60a3      	str	r3, [r4, #8]
    decoder->close_cb = close_cb;
 800d7f4:	4b05      	ldr	r3, [pc, #20]	; (800d80c <_lv_img_decoder_init+0x40>)
 800d7f6:	60e3      	str	r3, [r4, #12]
}
 800d7f8:	bd10      	pop	{r4, pc}
    LV_ASSERT_MALLOC(decoder);
 800d7fa:	e7fe      	b.n	800d7fa <_lv_img_decoder_init+0x2e>
 800d7fc:	200033b8 	.word	0x200033b8
 800d800:	0800d10d 	.word	0x0800d10d
 800d804:	0800d58d 	.word	0x0800d58d
 800d808:	0800d1d9 	.word	0x0800d1d9
 800d80c:	0800d0d5 	.word	0x0800d0d5

0800d810 <lv_img_decoder_get_info>:
{
 800d810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d812:	000f      	movs	r7, r1
 800d814:	46c6      	mov	lr, r8
 800d816:	0006      	movs	r6, r0
 800d818:	b500      	push	{lr}
    lv_memset_00(header, sizeof(lv_img_header_t));
 800d81a:	2104      	movs	r1, #4
 800d81c:	0038      	movs	r0, r7
 800d81e:	f004 ff47 	bl	80126b0 <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 800d822:	2e00      	cmp	r6, #0
 800d824:	d023      	beq.n	800d86e <lv_img_decoder_get_info+0x5e>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800d826:	0030      	movs	r0, r6
 800d828:	f7fe ff8c 	bl	800c744 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800d82c:	2800      	cmp	r0, #0
 800d82e:	d102      	bne.n	800d836 <lv_img_decoder_get_info+0x26>
        if(img_dsc->data == NULL) return LV_RES_INV;
 800d830:	68b3      	ldr	r3, [r6, #8]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d01b      	beq.n	800d86e <lv_img_decoder_get_info+0x5e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800d836:	4b0f      	ldr	r3, [pc, #60]	; (800d874 <lv_img_decoder_get_info+0x64>)
 800d838:	0018      	movs	r0, r3
 800d83a:	4698      	mov	r8, r3
 800d83c:	f004 fb06 	bl	8011e4c <_lv_ll_get_head>
 800d840:	1e04      	subs	r4, r0, #0
 800d842:	d014      	beq.n	800d86e <lv_img_decoder_get_info+0x5e>
    lv_res_t res = LV_RES_INV;
 800d844:	2500      	movs	r5, #0
        if(d->info_cb) {
 800d846:	6823      	ldr	r3, [r4, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d006      	beq.n	800d85a <lv_img_decoder_get_info+0x4a>
            res = d->info_cb(d, src, header);
 800d84c:	003a      	movs	r2, r7
 800d84e:	0031      	movs	r1, r6
 800d850:	0020      	movs	r0, r4
 800d852:	4798      	blx	r3
 800d854:	0005      	movs	r5, r0
            if(res == LV_RES_OK) break;
 800d856:	2801      	cmp	r0, #1
 800d858:	d005      	beq.n	800d866 <lv_img_decoder_get_info+0x56>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800d85a:	0021      	movs	r1, r4
 800d85c:	4640      	mov	r0, r8
 800d85e:	f004 fb01 	bl	8011e64 <_lv_ll_get_next>
 800d862:	1e04      	subs	r4, r0, #0
 800d864:	d1ef      	bne.n	800d846 <lv_img_decoder_get_info+0x36>
}
 800d866:	0028      	movs	r0, r5
 800d868:	bc80      	pop	{r7}
 800d86a:	46b8      	mov	r8, r7
 800d86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(src == NULL) return LV_RES_INV;
 800d86e:	2500      	movs	r5, #0
 800d870:	e7f9      	b.n	800d866 <lv_img_decoder_get_info+0x56>
 800d872:	46c0      	nop			; (mov r8, r8)
 800d874:	200033b8 	.word	0x200033b8

0800d878 <lv_img_decoder_open>:
{
 800d878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d87a:	464f      	mov	r7, r9
 800d87c:	4646      	mov	r6, r8
 800d87e:	46d6      	mov	lr, sl
 800d880:	b5c0      	push	{r6, r7, lr}
 800d882:	000f      	movs	r7, r1
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 800d884:	2128      	movs	r1, #40	; 0x28
{
 800d886:	0006      	movs	r6, r0
 800d888:	001c      	movs	r4, r3
 800d88a:	1c15      	adds	r5, r2, #0
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 800d88c:	f004 ff10 	bl	80126b0 <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 800d890:	2f00      	cmp	r7, #0
 800d892:	d057      	beq.n	800d944 <lv_img_decoder_open+0xcc>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800d894:	0038      	movs	r0, r7
 800d896:	f7fe ff55 	bl	800c744 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d140      	bne.n	800d920 <lv_img_decoder_open+0xa8>
        if(img_dsc->data == NULL) return LV_RES_INV;
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d04f      	beq.n	800d944 <lv_img_decoder_open+0xcc>
    dsc->color    = color;
 800d8a4:	8135      	strh	r5, [r6, #8]
    dsc->src_type = src_type;
 800d8a6:	7430      	strb	r0, [r6, #16]
    dsc->frame_id = frame_id;
 800d8a8:	60f4      	str	r4, [r6, #12]
        dsc->src = src;
 800d8aa:	6077      	str	r7, [r6, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800d8ac:	4b29      	ldr	r3, [pc, #164]	; (800d954 <lv_img_decoder_open+0xdc>)
    lv_res_t res = LV_RES_INV;
 800d8ae:	2500      	movs	r5, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800d8b0:	0018      	movs	r0, r3
 800d8b2:	4699      	mov	r9, r3
 800d8b4:	f004 faca 	bl	8011e4c <_lv_ll_get_head>
 800d8b8:	1e04      	subs	r4, r0, #0
 800d8ba:	d028      	beq.n	800d90e <lv_img_decoder_open+0x96>
        res = decoder->info_cb(decoder, src, &dsc->header);
 800d8bc:	2314      	movs	r3, #20
 800d8be:	469a      	mov	sl, r3
        dsc->error_msg = NULL;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	4698      	mov	r8, r3
        res = decoder->info_cb(decoder, src, &dsc->header);
 800d8c4:	44b2      	add	sl, r6
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 800d8c6:	6823      	ldr	r3, [r4, #0]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d01a      	beq.n	800d902 <lv_img_decoder_open+0x8a>
 800d8cc:	6862      	ldr	r2, [r4, #4]
 800d8ce:	2a00      	cmp	r2, #0
 800d8d0:	d017      	beq.n	800d902 <lv_img_decoder_open+0x8a>
        res = decoder->info_cb(decoder, src, &dsc->header);
 800d8d2:	4652      	mov	r2, sl
 800d8d4:	0039      	movs	r1, r7
 800d8d6:	0020      	movs	r0, r4
 800d8d8:	4798      	blx	r3
 800d8da:	0005      	movs	r5, r0
        if(res != LV_RES_OK) continue;
 800d8dc:	2801      	cmp	r0, #1
 800d8de:	d110      	bne.n	800d902 <lv_img_decoder_open+0x8a>
        res = decoder->open_cb(decoder, dsc);
 800d8e0:	0031      	movs	r1, r6
 800d8e2:	0020      	movs	r0, r4
 800d8e4:	6863      	ldr	r3, [r4, #4]
        dsc->decoder = decoder;
 800d8e6:	6034      	str	r4, [r6, #0]
        res = decoder->open_cb(decoder, dsc);
 800d8e8:	4798      	blx	r3
 800d8ea:	0005      	movs	r5, r0
        if(res == LV_RES_OK) return res;
 800d8ec:	2801      	cmp	r0, #1
 800d8ee:	d011      	beq.n	800d914 <lv_img_decoder_open+0x9c>
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 800d8f0:	2104      	movs	r1, #4
 800d8f2:	4650      	mov	r0, sl
 800d8f4:	f004 fedc 	bl	80126b0 <lv_memset_00>
        dsc->error_msg = NULL;
 800d8f8:	4643      	mov	r3, r8
 800d8fa:	6233      	str	r3, [r6, #32]
        dsc->img_data  = NULL;
 800d8fc:	61b3      	str	r3, [r6, #24]
        dsc->user_data = NULL;
 800d8fe:	6273      	str	r3, [r6, #36]	; 0x24
        dsc->time_to_open = 0;
 800d900:	61f3      	str	r3, [r6, #28]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800d902:	0021      	movs	r1, r4
 800d904:	4648      	mov	r0, r9
 800d906:	f004 faad 	bl	8011e64 <_lv_ll_get_next>
 800d90a:	1e04      	subs	r4, r0, #0
 800d90c:	d1db      	bne.n	800d8c6 <lv_img_decoder_open+0x4e>
    if(dsc->src_type == LV_IMG_SRC_FILE)
 800d90e:	7c33      	ldrb	r3, [r6, #16]
 800d910:	2b01      	cmp	r3, #1
 800d912:	d01a      	beq.n	800d94a <lv_img_decoder_open+0xd2>
}
 800d914:	0028      	movs	r0, r5
 800d916:	bce0      	pop	{r5, r6, r7}
 800d918:	46ba      	mov	sl, r7
 800d91a:	46b1      	mov	r9, r6
 800d91c:	46a8      	mov	r8, r5
 800d91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dsc->color    = color;
 800d920:	8135      	strh	r5, [r6, #8]
    dsc->src_type = src_type;
 800d922:	7430      	strb	r0, [r6, #16]
    dsc->frame_id = frame_id;
 800d924:	60f4      	str	r4, [r6, #12]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d926:	2801      	cmp	r0, #1
 800d928:	d1bf      	bne.n	800d8aa <lv_img_decoder_open+0x32>
        size_t fnlen = strlen(src);
 800d92a:	0038      	movs	r0, r7
 800d92c:	f7f2 fbf4 	bl	8000118 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 800d930:	3001      	adds	r0, #1
 800d932:	f004 fb3b 	bl	8011fac <lv_mem_alloc>
 800d936:	6070      	str	r0, [r6, #4]
        LV_ASSERT_MALLOC(dsc->src);
 800d938:	2800      	cmp	r0, #0
 800d93a:	d005      	beq.n	800d948 <lv_img_decoder_open+0xd0>
        strcpy((char *)dsc->src, src);
 800d93c:	0039      	movs	r1, r7
 800d93e:	f00d fe85 	bl	801b64c <strcpy>
 800d942:	e7b3      	b.n	800d8ac <lv_img_decoder_open+0x34>
    if(src == NULL) return LV_RES_INV;
 800d944:	2500      	movs	r5, #0
 800d946:	e7e5      	b.n	800d914 <lv_img_decoder_open+0x9c>
        LV_ASSERT_MALLOC(dsc->src);
 800d948:	e7fe      	b.n	800d948 <lv_img_decoder_open+0xd0>
        lv_mem_free((void *)dsc->src);
 800d94a:	6870      	ldr	r0, [r6, #4]
 800d94c:	f004 fb50 	bl	8011ff0 <lv_mem_free>
 800d950:	e7e0      	b.n	800d914 <lv_img_decoder_open+0x9c>
 800d952:	46c0      	nop			; (mov r8, r8)
 800d954:	200033b8 	.word	0x200033b8

0800d958 <lv_img_decoder_read_line>:
{
 800d958:	b570      	push	{r4, r5, r6, lr}
 800d95a:	0004      	movs	r4, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800d95c:	6800      	ldr	r0, [r0, #0]
{
 800d95e:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800d960:	6885      	ldr	r5, [r0, #8]
 800d962:	2d00      	cmp	r5, #0
 800d964:	d008      	beq.n	800d978 <lv_img_decoder_read_line+0x20>
 800d966:	9e06      	ldr	r6, [sp, #24]
 800d968:	9300      	str	r3, [sp, #0]
 800d96a:	9601      	str	r6, [sp, #4]
 800d96c:	0013      	movs	r3, r2
 800d96e:	000a      	movs	r2, r1
 800d970:	0021      	movs	r1, r4
 800d972:	47a8      	blx	r5
}
 800d974:	b002      	add	sp, #8
 800d976:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
 800d978:	2000      	movs	r0, #0
 800d97a:	e7fb      	b.n	800d974 <lv_img_decoder_read_line+0x1c>

0800d97c <lv_img_decoder_close>:
{
 800d97c:	b510      	push	{r4, lr}
 800d97e:	0004      	movs	r4, r0
    if(dsc->decoder) {
 800d980:	6800      	ldr	r0, [r0, #0]
 800d982:	2800      	cmp	r0, #0
 800d984:	d007      	beq.n	800d996 <lv_img_decoder_close+0x1a>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800d986:	68c3      	ldr	r3, [r0, #12]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d001      	beq.n	800d990 <lv_img_decoder_close+0x14>
 800d98c:	0021      	movs	r1, r4
 800d98e:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d990:	7c23      	ldrb	r3, [r4, #16]
 800d992:	2b01      	cmp	r3, #1
 800d994:	d000      	beq.n	800d998 <lv_img_decoder_close+0x1c>
}
 800d996:	bd10      	pop	{r4, pc}
            lv_mem_free((void *)dsc->src);
 800d998:	6860      	ldr	r0, [r4, #4]
 800d99a:	f004 fb29 	bl	8011ff0 <lv_mem_free>
            dsc->src = NULL;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	6063      	str	r3, [r4, #4]
}
 800d9a2:	e7f8      	b.n	800d996 <lv_img_decoder_close+0x1a>

0800d9a4 <lv_draw_sw_wait_for_finish>:

void lv_draw_sw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
    LV_UNUSED(draw_ctx);
    /*Nothing to wait for*/
}
 800d9a4:	4770      	bx	lr
 800d9a6:	46c0      	nop			; (mov r8, r8)

0800d9a8 <lv_draw_sw_buffer_copy>:

void lv_draw_sw_buffer_copy(lv_draw_ctx_t * draw_ctx,
                            void * dest_buf, lv_coord_t dest_stride, const lv_area_t * dest_area,
                            void * src_buf, lv_coord_t src_stride, const lv_area_t * src_area)
{
 800d9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9aa:	4646      	mov	r6, r8
 800d9ac:	464f      	mov	r7, r9
 800d9ae:	46d6      	mov	lr, sl
 800d9b0:	4698      	mov	r8, r3
 800d9b2:	b5c0      	push	{r6, r7, lr}
 800d9b4:	ab08      	add	r3, sp, #32
 800d9b6:	000d      	movs	r5, r1
 800d9b8:	cb02      	ldmia	r3!, {r1}
 800d9ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d9bc:	2000      	movs	r0, #0
 800d9be:	5e18      	ldrsh	r0, [r3, r0]

    lv_color_t * dest_bufc =  dest_buf;
    lv_color_t * src_bufc =  src_buf;

    /*Got the first pixel of each buffer*/
    dest_bufc += dest_stride * dest_area->y1;
 800d9c0:	4643      	mov	r3, r8
 800d9c2:	2402      	movs	r4, #2
 800d9c4:	5f1c      	ldrsh	r4, [r3, r4]
    dest_bufc += dest_area->x1;
 800d9c6:	4643      	mov	r3, r8
{
 800d9c8:	468c      	mov	ip, r1
    dest_bufc += dest_area->x1;
 800d9ca:	2100      	movs	r1, #0
 800d9cc:	5e59      	ldrsh	r1, [r3, r1]
    dest_bufc += dest_stride * dest_area->y1;
 800d9ce:	0023      	movs	r3, r4
 800d9d0:	4353      	muls	r3, r2
    dest_bufc += dest_area->x1;
 800d9d2:	185b      	adds	r3, r3, r1
 800d9d4:	005b      	lsls	r3, r3, #1
 800d9d6:	18ed      	adds	r5, r5, r3

    src_bufc += src_stride * src_area->y1;
 800d9d8:	2602      	movs	r6, #2
 800d9da:	5fbb      	ldrsh	r3, [r7, r6]
    src_bufc += src_area->x1;
 800d9dc:	2600      	movs	r6, #0
 800d9de:	5fbf      	ldrsh	r7, [r7, r6]
    src_bufc += src_stride * src_area->y1;
 800d9e0:	4343      	muls	r3, r0
    src_bufc += src_area->x1;
 800d9e2:	19db      	adds	r3, r3, r7
 800d9e4:	005b      	lsls	r3, r3, #1
 800d9e6:	4463      	add	r3, ip
 800d9e8:	001e      	movs	r6, r3
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d9ea:	4643      	mov	r3, r8
 800d9ec:	889f      	ldrh	r7, [r3, #4]
 800d9ee:	3701      	adds	r7, #1
 800d9f0:	1a7f      	subs	r7, r7, r1

    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
    lv_coord_t y;
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800d9f2:	2106      	movs	r1, #6
 800d9f4:	5e5b      	ldrsh	r3, [r3, r1]
    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
 800d9f6:	b23f      	sxth	r7, r7
 800d9f8:	007f      	lsls	r7, r7, #1
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800d9fa:	42a3      	cmp	r3, r4
 800d9fc:	db11      	blt.n	800da22 <lv_draw_sw_buffer_copy+0x7a>
        lv_memcpy(dest_bufc, src_bufc, line_length);
        dest_bufc += dest_stride;
 800d9fe:	0053      	lsls	r3, r2, #1
 800da00:	4699      	mov	r9, r3
        src_bufc += src_stride;
 800da02:	0043      	lsls	r3, r0, #1
 800da04:	469a      	mov	sl, r3
        lv_memcpy(dest_bufc, src_bufc, line_length);
 800da06:	003a      	movs	r2, r7
 800da08:	0031      	movs	r1, r6
 800da0a:	0028      	movs	r0, r5
 800da0c:	f004 fc82 	bl	8012314 <lv_memcpy>
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800da10:	4643      	mov	r3, r8
 800da12:	3401      	adds	r4, #1
 800da14:	2206      	movs	r2, #6
 800da16:	5e9a      	ldrsh	r2, [r3, r2]
 800da18:	b224      	sxth	r4, r4
        dest_bufc += dest_stride;
 800da1a:	444d      	add	r5, r9
        src_bufc += src_stride;
 800da1c:	4456      	add	r6, sl
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800da1e:	42a2      	cmp	r2, r4
 800da20:	daf1      	bge.n	800da06 <lv_draw_sw_buffer_copy+0x5e>
    }
}
 800da22:	bce0      	pop	{r5, r6, r7}
 800da24:	46ba      	mov	sl, r7
 800da26:	46b1      	mov	r9, r6
 800da28:	46a8      	mov	r8, r5
 800da2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da2c <lv_draw_sw_init_ctx>:
{
 800da2c:	b510      	push	{r4, lr}
 800da2e:	000c      	movs	r4, r1
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
 800da30:	2150      	movs	r1, #80	; 0x50
 800da32:	0020      	movs	r0, r4
 800da34:	f004 fe3c 	bl	80126b0 <lv_memset_00>
    draw_sw_ctx->base_draw.draw_arc = lv_draw_sw_arc;
 800da38:	4b0f      	ldr	r3, [pc, #60]	; (800da78 <lv_draw_sw_init_ctx+0x4c>)
 800da3a:	6123      	str	r3, [r4, #16]
    draw_sw_ctx->base_draw.draw_rect = lv_draw_sw_rect;
 800da3c:	4b0f      	ldr	r3, [pc, #60]	; (800da7c <lv_draw_sw_init_ctx+0x50>)
 800da3e:	60e3      	str	r3, [r4, #12]
    draw_sw_ctx->base_draw.draw_bg = lv_draw_sw_bg;
 800da40:	4b0f      	ldr	r3, [pc, #60]	; (800da80 <lv_draw_sw_init_ctx+0x54>)
 800da42:	62e3      	str	r3, [r4, #44]	; 0x2c
    draw_sw_ctx->base_draw.draw_letter = lv_draw_sw_letter;
 800da44:	4b0f      	ldr	r3, [pc, #60]	; (800da84 <lv_draw_sw_init_ctx+0x58>)
 800da46:	61e3      	str	r3, [r4, #28]
    draw_sw_ctx->base_draw.draw_img_decoded = lv_draw_sw_img_decoded;
 800da48:	4b0f      	ldr	r3, [pc, #60]	; (800da88 <lv_draw_sw_init_ctx+0x5c>)
 800da4a:	6163      	str	r3, [r4, #20]
    draw_sw_ctx->base_draw.draw_line = lv_draw_sw_line;
 800da4c:	4b0f      	ldr	r3, [pc, #60]	; (800da8c <lv_draw_sw_init_ctx+0x60>)
 800da4e:	6223      	str	r3, [r4, #32]
    draw_sw_ctx->base_draw.draw_polygon = lv_draw_sw_polygon;
 800da50:	4b0f      	ldr	r3, [pc, #60]	; (800da90 <lv_draw_sw_init_ctx+0x64>)
 800da52:	6263      	str	r3, [r4, #36]	; 0x24
    draw_sw_ctx->base_draw.wait_for_finish = lv_draw_sw_wait_for_finish;
 800da54:	4b0f      	ldr	r3, [pc, #60]	; (800da94 <lv_draw_sw_init_ctx+0x68>)
 800da56:	6323      	str	r3, [r4, #48]	; 0x30
    draw_sw_ctx->base_draw.buffer_copy = lv_draw_sw_buffer_copy;
 800da58:	4b0f      	ldr	r3, [pc, #60]	; (800da98 <lv_draw_sw_init_ctx+0x6c>)
 800da5a:	6363      	str	r3, [r4, #52]	; 0x34
    draw_sw_ctx->base_draw.layer_init = lv_draw_sw_layer_create;
 800da5c:	4b0f      	ldr	r3, [pc, #60]	; (800da9c <lv_draw_sw_init_ctx+0x70>)
 800da5e:	63a3      	str	r3, [r4, #56]	; 0x38
    draw_sw_ctx->base_draw.layer_adjust = lv_draw_sw_layer_adjust;
 800da60:	4b0f      	ldr	r3, [pc, #60]	; (800daa0 <lv_draw_sw_init_ctx+0x74>)
 800da62:	63e3      	str	r3, [r4, #60]	; 0x3c
    draw_sw_ctx->base_draw.layer_blend = lv_draw_sw_layer_blend;
 800da64:	4b0f      	ldr	r3, [pc, #60]	; (800daa4 <lv_draw_sw_init_ctx+0x78>)
 800da66:	6423      	str	r3, [r4, #64]	; 0x40
    draw_sw_ctx->base_draw.layer_destroy = lv_draw_sw_layer_destroy;
 800da68:	4b0f      	ldr	r3, [pc, #60]	; (800daa8 <lv_draw_sw_init_ctx+0x7c>)
 800da6a:	6463      	str	r3, [r4, #68]	; 0x44
    draw_sw_ctx->blend = lv_draw_sw_blend_basic;
 800da6c:	4b0f      	ldr	r3, [pc, #60]	; (800daac <lv_draw_sw_init_ctx+0x80>)
 800da6e:	64e3      	str	r3, [r4, #76]	; 0x4c
    draw_ctx->layer_instance_size = sizeof(lv_draw_sw_layer_ctx_t);
 800da70:	232c      	movs	r3, #44	; 0x2c
 800da72:	64a3      	str	r3, [r4, #72]	; 0x48
}
 800da74:	bd10      	pop	{r4, pc}
 800da76:	46c0      	nop			; (mov r8, r8)
 800da78:	0800dab1 	.word	0x0800dab1
 800da7c:	0800f819 	.word	0x0800f819
 800da80:	0800fcd5 	.word	0x0800fcd5
 800da84:	0800f0c1 	.word	0x0800f0c1
 800da88:	0800e915 	.word	0x0800e915
 800da8c:	0800f49d 	.word	0x0800f49d
 800da90:	0800f6f9 	.word	0x0800f6f9
 800da94:	0800d9a5 	.word	0x0800d9a5
 800da98:	0800d9a9 	.word	0x0800d9a9
 800da9c:	0800eedd 	.word	0x0800eedd
 800daa0:	0800efcd 	.word	0x0800efcd
 800daa4:	0800f029 	.word	0x0800f029
 800daa8:	0800f0b5 	.word	0x0800f0b5
 800daac:	0800dae9 	.word	0x0800dae9

0800dab0 <lv_draw_sw_arc>:
    LV_UNUSED(start_angle);
    LV_UNUSED(end_angle);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(dsc);
#endif /*LV_DRAW_COMPLEX*/
}
 800dab0:	4770      	bx	lr
 800dab2:	46c0      	nop			; (mov r8, r8)

0800dab4 <lv_draw_sw_blend>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_blend(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 800dab4:	b530      	push	{r4, r5, lr}
    /*Do not draw transparent things*/
    if(dsc->opa <= LV_OPA_MIN) return;
 800dab6:	7e0b      	ldrb	r3, [r1, #24]
{
 800dab8:	0005      	movs	r5, r0
 800daba:	000c      	movs	r4, r1
 800dabc:	b083      	sub	sp, #12
    if(dsc->opa <= LV_OPA_MIN) return;
 800dabe:	2b02      	cmp	r3, #2
 800dac0:	d801      	bhi.n	800dac6 <lv_draw_sw_blend+0x12>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;

    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);

    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
}
 800dac2:	b003      	add	sp, #12
 800dac4:	bd30      	pop	{r4, r5, pc}
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 800dac6:	6882      	ldr	r2, [r0, #8]
 800dac8:	6809      	ldr	r1, [r1, #0]
 800daca:	4668      	mov	r0, sp
 800dacc:	f003 fc5e 	bl	801138c <_lv_area_intersect>
 800dad0:	2800      	cmp	r0, #0
 800dad2:	d0f6      	beq.n	800dac2 <lv_draw_sw_blend+0xe>
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800dad4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d001      	beq.n	800dade <lv_draw_sw_blend+0x2a>
 800dada:	0028      	movs	r0, r5
 800dadc:	4798      	blx	r3
    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
 800dade:	0021      	movs	r1, r4
 800dae0:	0028      	movs	r0, r5
 800dae2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800dae4:	4798      	blx	r3
 800dae6:	e7ec      	b.n	800dac2 <lv_draw_sw_blend+0xe>

0800dae8 <lv_draw_sw_blend_basic>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_blend_basic(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 800dae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daea:	46de      	mov	lr, fp
 800daec:	4657      	mov	r7, sl
 800daee:	4645      	mov	r5, r8
 800daf0:	464e      	mov	r6, r9
 800daf2:	b5e0      	push	{r5, r6, r7, lr}
    const lv_opa_t * mask;
    if(dsc->mask_buf == NULL) mask = NULL;
 800daf4:	68cb      	ldr	r3, [r1, #12]
{
 800daf6:	0005      	movs	r5, r0
 800daf8:	000f      	movs	r7, r1
    if(dsc->mask_buf == NULL) mask = NULL;
 800dafa:	469b      	mov	fp, r3
{
 800dafc:	b091      	sub	sp, #68	; 0x44
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d100      	bne.n	800db04 <lv_draw_sw_blend_basic+0x1c>
 800db02:	e0d7      	b.n	800dcb4 <lv_draw_sw_blend_basic+0x1cc>
 800db04:	7c0b      	ldrb	r3, [r1, #16]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d014      	beq.n	800db34 <lv_draw_sw_blend_basic+0x4c>
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 800db0a:	3b01      	subs	r3, #1
 800db0c:	1e5a      	subs	r2, r3, #1
 800db0e:	4193      	sbcs	r3, r2
 800db10:	465a      	mov	r2, fp
 800db12:	425b      	negs	r3, r3
 800db14:	401a      	ands	r2, r3
    else mask = dsc->mask_buf;

    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
 800db16:	686b      	ldr	r3, [r5, #4]
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 800db18:	4693      	mov	fp, r2

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 800db1a:	ac0e      	add	r4, sp, #56	; 0x38
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800db1c:	2204      	movs	r2, #4
 800db1e:	5e9e      	ldrsh	r6, [r3, r2]
 800db20:	2200      	movs	r2, #0
 800db22:	5e9b      	ldrsh	r3, [r3, r2]
 800db24:	0020      	movs	r0, r4
 800db26:	68aa      	ldr	r2, [r5, #8]
 800db28:	6839      	ldr	r1, [r7, #0]
 800db2a:	4698      	mov	r8, r3
 800db2c:	f003 fc2e 	bl	801138c <_lv_area_intersect>
 800db30:	2800      	cmp	r0, #0
 800db32:	d106      	bne.n	800db42 <lv_draw_sw_blend_basic+0x5a>
        else {
            map_blended(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
        }
#endif
    }
}
 800db34:	b011      	add	sp, #68	; 0x44
 800db36:	bcf0      	pop	{r4, r5, r6, r7}
 800db38:	46bb      	mov	fp, r7
 800db3a:	46b2      	mov	sl, r6
 800db3c:	46a9      	mov	r9, r5
 800db3e:	46a0      	mov	r8, r4
 800db40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db42:	4643      	mov	r3, r8
 800db44:	3601      	adds	r6, #1
 800db46:	1af6      	subs	r6, r6, r3
 800db48:	b233      	sxth	r3, r6
 800db4a:	930d      	str	r3, [sp, #52]	; 0x34
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800db4c:	f7fe f962 	bl	800be14 <_lv_refr_get_disp_refreshing>
    lv_color_t * dest_buf = draw_ctx->buf;
 800db50:	682b      	ldr	r3, [r5, #0]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800db52:	4680      	mov	r8, r0
    lv_color_t * dest_buf = draw_ctx->buf;
 800db54:	469a      	mov	sl, r3
    if(disp->driver->set_px_cb == NULL) {
 800db56:	6803      	ldr	r3, [r0, #0]
 800db58:	69da      	ldr	r2, [r3, #28]
 800db5a:	2a00      	cmp	r2, #0
 800db5c:	d100      	bne.n	800db60 <lv_draw_sw_blend_basic+0x78>
 800db5e:	e174      	b.n	800de4a <lv_draw_sw_blend_basic+0x362>
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 800db60:	686b      	ldr	r3, [r5, #4]
 800db62:	2102      	movs	r1, #2
 800db64:	5e5a      	ldrsh	r2, [r3, r1]
 800db66:	2100      	movs	r1, #0
 800db68:	5e59      	ldrsh	r1, [r3, r1]
    const lv_color_t * src_buf = dsc->src_buf;
 800db6a:	687b      	ldr	r3, [r7, #4]
    if(src_buf) {
 800db6c:	9308      	str	r3, [sp, #32]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d100      	bne.n	800db74 <lv_draw_sw_blend_basic+0x8c>
 800db72:	e168      	b.n	800de46 <lv_draw_sw_blend_basic+0x35e>
        src_stride = lv_area_get_width(dsc->blend_area);
 800db74:	6838      	ldr	r0, [r7, #0]
 800db76:	2600      	movs	r6, #0
 800db78:	5f85      	ldrsh	r5, [r0, r6]
 800db7a:	46ac      	mov	ip, r5
 800db7c:	4663      	mov	r3, ip
 800db7e:	8885      	ldrh	r5, [r0, #4]
        src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 - dsc->blend_area->x1);
 800db80:	2602      	movs	r6, #2
 800db82:	5f80      	ldrsh	r0, [r0, r6]
 800db84:	3501      	adds	r5, #1
 800db86:	1aed      	subs	r5, r5, r3
 800db88:	2602      	movs	r6, #2
 800db8a:	5fa3      	ldrsh	r3, [r4, r6]
 800db8c:	b22d      	sxth	r5, r5
 800db8e:	1a1b      	subs	r3, r3, r0
 800db90:	2600      	movs	r6, #0
 800db92:	5fa0      	ldrsh	r0, [r4, r6]
 800db94:	4666      	mov	r6, ip
 800db96:	436b      	muls	r3, r5
 800db98:	1b80      	subs	r0, r0, r6
 800db9a:	181b      	adds	r3, r3, r0
 800db9c:	9808      	ldr	r0, [sp, #32]
 800db9e:	005b      	lsls	r3, r3, #1
 800dba0:	4684      	mov	ip, r0
 800dba2:	449c      	add	ip, r3
 800dba4:	4663      	mov	r3, ip
 800dba6:	9308      	str	r3, [sp, #32]
    if(mask) {
 800dba8:	465b      	mov	r3, fp
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d100      	bne.n	800dbb0 <lv_draw_sw_blend_basic+0xc8>
 800dbae:	e146      	b.n	800de3e <lv_draw_sw_blend_basic+0x356>
        mask_stride = lv_area_get_width(dsc->mask_area);
 800dbb0:	6978      	ldr	r0, [r7, #20]
 800dbb2:	2600      	movs	r6, #0
 800dbb4:	5f83      	ldrsh	r3, [r0, r6]
 800dbb6:	469c      	mov	ip, r3
 800dbb8:	4666      	mov	r6, ip
 800dbba:	8883      	ldrh	r3, [r0, #4]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	1b9b      	subs	r3, r3, r6
 800dbc0:	b21b      	sxth	r3, r3
        mask += mask_stride * (blend_area.y1 - dsc->mask_area->y1) + (blend_area.x1 - dsc->mask_area->x1);
 800dbc2:	4699      	mov	r9, r3
 800dbc4:	930a      	str	r3, [sp, #40]	; 0x28
 800dbc6:	2602      	movs	r6, #2
 800dbc8:	5f80      	ldrsh	r0, [r0, r6]
 800dbca:	2602      	movs	r6, #2
 800dbcc:	5fa3      	ldrsh	r3, [r4, r6]
 800dbce:	1a1b      	subs	r3, r3, r0
 800dbd0:	4648      	mov	r0, r9
 800dbd2:	4343      	muls	r3, r0
 800dbd4:	2600      	movs	r6, #0
 800dbd6:	5fa0      	ldrsh	r0, [r4, r6]
 800dbd8:	4666      	mov	r6, ip
 800dbda:	1b80      	subs	r0, r0, r6
 800dbdc:	181b      	adds	r3, r3, r0
 800dbde:	449b      	add	fp, r3
    lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
 800dbe0:	4252      	negs	r2, r2
 800dbe2:	4249      	negs	r1, r1
 800dbe4:	0020      	movs	r0, r4
 800dbe6:	b212      	sxth	r2, r2
 800dbe8:	b209      	sxth	r1, r1
 800dbea:	f003 fbbf 	bl	801136c <lv_area_move>
    if(disp->driver->set_px_cb) {
 800dbee:	4643      	mov	r3, r8
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	69db      	ldr	r3, [r3, #28]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d100      	bne.n	800dbfa <lv_draw_sw_blend_basic+0x112>
 800dbf8:	e0ae      	b.n	800dd58 <lv_draw_sw_blend_basic+0x270>
        if(dsc->src_buf == NULL) {
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d05b      	beq.n	800dcb8 <lv_draw_sw_blend_basic+0x1d0>
            map_set_px(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 800dc00:	7e3b      	ldrb	r3, [r7, #24]
 800dc02:	9306      	str	r3, [sp, #24]

static void map_set_px(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                       const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800dc04:	f7fe f906 	bl	800be14 <_lv_refr_get_disp_refreshing>
 800dc08:	88a7      	ldrh	r7, [r4, #4]
 800dc0a:	8823      	ldrh	r3, [r4, #0]
 800dc0c:	3701      	adds	r7, #1
 800dc0e:	1aff      	subs	r7, r7, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800dc10:	88e3      	ldrh	r3, [r4, #6]
 800dc12:	8862      	ldrh	r2, [r4, #2]
 800dc14:	3301      	adds	r3, #1
 800dc16:	1a9b      	subs	r3, r3, r2
    int32_t h = lv_area_get_height(dest_area);

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 800dc18:	465a      	mov	r2, fp
    int32_t h = lv_area_get_height(dest_area);
 800dc1a:	b21b      	sxth	r3, r3
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800dc1c:	4681      	mov	r9, r0
    int32_t w = lv_area_get_width(dest_area);
 800dc1e:	b23f      	sxth	r7, r7
    int32_t h = lv_area_get_height(dest_area);
 800dc20:	930b      	str	r3, [sp, #44]	; 0x2c
    if(mask == NULL) {
 800dc22:	2a00      	cmp	r2, #0
 800dc24:	d100      	bne.n	800dc28 <lv_draw_sw_blend_basic+0x140>
 800dc26:	e138      	b.n	800de9a <lv_draw_sw_blend_basic+0x3b2>
            }
            src_buf += src_stride;
        }
    }
    else {
        for(y = 0; y < h; y++) {
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	dc00      	bgt.n	800dc2e <lv_draw_sw_blend_basic+0x146>
 800dc2c:	e782      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
                }
            }
            mask += mask_stride;
            src_buf += src_stride;
 800dc2e:	006b      	lsls	r3, r5, #1
 800dc30:	930c      	str	r3, [sp, #48]	; 0x30
        for(y = 0; y < h; y++) {
 800dc32:	2300      	movs	r3, #0
 800dc34:	9307      	str	r3, [sp, #28]
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 800dc36:	ab01      	add	r3, sp, #4
 800dc38:	9309      	str	r3, [sp, #36]	; 0x24
 800dc3a:	2f00      	cmp	r7, #0
 800dc3c:	dc00      	bgt.n	800dc40 <lv_draw_sw_blend_basic+0x158>
 800dc3e:	e779      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
 800dc40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc42:	46b8      	mov	r8, r7
 800dc44:	465f      	mov	r7, fp
 800dc46:	469b      	mov	fp, r3
            for(x = 0; x < w; x++) {
 800dc48:	4642      	mov	r2, r8
 800dc4a:	2500      	movs	r5, #0
 800dc4c:	46b8      	mov	r8, r7
 800dc4e:	9e08      	ldr	r6, [sp, #32]
 800dc50:	9205      	str	r2, [sp, #20]
                if(mask[x]) {
 800dc52:	4643      	mov	r3, r8
 800dc54:	5d5a      	ldrb	r2, [r3, r5]
 800dc56:	2a00      	cmp	r2, #0
 800dc58:	d016      	beq.n	800dc88 <lv_draw_sw_blend_basic+0x1a0>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 800dc5a:	464b      	mov	r3, r9
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 800dc5c:	9906      	ldr	r1, [sp, #24]
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 800dc5e:	6818      	ldr	r0, [r3, #0]
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 800dc60:	434a      	muls	r2, r1
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 800dc62:	0a12      	lsrs	r2, r2, #8
 800dc64:	8823      	ldrh	r3, [r4, #0]
 800dc66:	9202      	str	r2, [sp, #8]
 800dc68:	8832      	ldrh	r2, [r6, #0]
 800dc6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc6c:	195b      	adds	r3, r3, r5
 800dc6e:	800a      	strh	r2, [r1, #0]
 800dc70:	9907      	ldr	r1, [sp, #28]
 800dc72:	8862      	ldrh	r2, [r4, #2]
 800dc74:	468c      	mov	ip, r1
 800dc76:	4462      	add	r2, ip
 800dc78:	b212      	sxth	r2, r2
 800dc7a:	9200      	str	r2, [sp, #0]
 800dc7c:	69c2      	ldr	r2, [r0, #28]
 800dc7e:	4651      	mov	r1, sl
 800dc80:	0017      	movs	r7, r2
 800dc82:	b21b      	sxth	r3, r3
 800dc84:	465a      	mov	r2, fp
 800dc86:	47b8      	blx	r7
            for(x = 0; x < w; x++) {
 800dc88:	9b05      	ldr	r3, [sp, #20]
 800dc8a:	3501      	adds	r5, #1
 800dc8c:	3602      	adds	r6, #2
 800dc8e:	42ab      	cmp	r3, r5
 800dc90:	dcdf      	bgt.n	800dc52 <lv_draw_sw_blend_basic+0x16a>
            mask += mask_stride;
 800dc92:	4647      	mov	r7, r8
 800dc94:	4698      	mov	r8, r3
 800dc96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            src_buf += src_stride;
 800dc98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            mask += mask_stride;
 800dc9a:	469c      	mov	ip, r3
 800dc9c:	4467      	add	r7, ip
            src_buf += src_stride;
 800dc9e:	4694      	mov	ip, r2
 800dca0:	9b08      	ldr	r3, [sp, #32]
        for(y = 0; y < h; y++) {
 800dca2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
            src_buf += src_stride;
 800dca4:	4463      	add	r3, ip
 800dca6:	9308      	str	r3, [sp, #32]
        for(y = 0; y < h; y++) {
 800dca8:	9b07      	ldr	r3, [sp, #28]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	9307      	str	r3, [sp, #28]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	dcca      	bgt.n	800dc48 <lv_draw_sw_blend_basic+0x160>
 800dcb2:	e73f      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800dcb4:	7c0b      	ldrb	r3, [r1, #16]
 800dcb6:	e728      	b.n	800db0a <lv_draw_sw_blend_basic+0x22>
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 800dcb8:	466a      	mov	r2, sp
 800dcba:	7e3b      	ldrb	r3, [r7, #24]
 800dcbc:	9305      	str	r3, [sp, #20]
 800dcbe:	893b      	ldrh	r3, [r7, #8]
 800dcc0:	8313      	strh	r3, [r2, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800dcc2:	f7fe f8a7 	bl	800be14 <_lv_refr_get_disp_refreshing>
    if(mask == NULL) {
 800dcc6:	465b      	mov	r3, fp
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d100      	bne.n	800dcce <lv_draw_sw_blend_basic+0x1e6>
 800dccc:	e283      	b.n	800e1d6 <lv_draw_sw_blend_basic+0x6ee>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800dcce:	88a3      	ldrh	r3, [r4, #4]
 800dcd0:	8822      	ldrh	r2, [r4, #0]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	1a9b      	subs	r3, r3, r2
        int32_t w = lv_area_get_width(blend_area);
 800dcd6:	b21b      	sxth	r3, r3
 800dcd8:	4698      	mov	r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800dcda:	88e3      	ldrh	r3, [r4, #6]
 800dcdc:	8862      	ldrh	r2, [r4, #2]
 800dcde:	3301      	adds	r3, #1
 800dce0:	1a9b      	subs	r3, r3, r2
        int32_t h = lv_area_get_height(blend_area);
 800dce2:	b21b      	sxth	r3, r3
 800dce4:	9309      	str	r3, [sp, #36]	; 0x24
        for(y = 0; y < h; y++) {
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	dc00      	bgt.n	800dcec <lv_draw_sw_blend_basic+0x204>
 800dcea:	e723      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
 800dcec:	2300      	movs	r3, #0
 800dcee:	9307      	str	r3, [sp, #28]
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 800dcf0:	ab01      	add	r3, sp, #4
 800dcf2:	9308      	str	r3, [sp, #32]
 800dcf4:	4643      	mov	r3, r8
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	dc00      	bgt.n	800dcfc <lv_draw_sw_blend_basic+0x214>
 800dcfa:	e71b      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
 800dcfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcfe:	465e      	mov	r6, fp
 800dd00:	4699      	mov	r9, r3
 800dd02:	4683      	mov	fp, r0
 800dd04:	4647      	mov	r7, r8
            for(x = 0; x < w; x++) {
 800dd06:	2500      	movs	r5, #0
                if(mask[x]) {
 800dd08:	5d72      	ldrb	r2, [r6, r5]
 800dd0a:	2a00      	cmp	r2, #0
 800dd0c:	d017      	beq.n	800dd3e <lv_draw_sw_blend_basic+0x256>
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 800dd0e:	9905      	ldr	r1, [sp, #20]
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 800dd10:	465b      	mov	r3, fp
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 800dd12:	434a      	muls	r2, r1
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 800dd14:	4669      	mov	r1, sp
 800dd16:	0a12      	lsrs	r2, r2, #8
 800dd18:	6818      	ldr	r0, [r3, #0]
 800dd1a:	8823      	ldrh	r3, [r4, #0]
 800dd1c:	9202      	str	r2, [sp, #8]
 800dd1e:	8b09      	ldrh	r1, [r1, #24]
 800dd20:	9a08      	ldr	r2, [sp, #32]
 800dd22:	195b      	adds	r3, r3, r5
 800dd24:	8011      	strh	r1, [r2, #0]
 800dd26:	9907      	ldr	r1, [sp, #28]
 800dd28:	8862      	ldrh	r2, [r4, #2]
 800dd2a:	468c      	mov	ip, r1
 800dd2c:	4462      	add	r2, ip
 800dd2e:	b212      	sxth	r2, r2
 800dd30:	9200      	str	r2, [sp, #0]
 800dd32:	69c2      	ldr	r2, [r0, #28]
 800dd34:	4651      	mov	r1, sl
 800dd36:	4690      	mov	r8, r2
 800dd38:	b21b      	sxth	r3, r3
 800dd3a:	464a      	mov	r2, r9
 800dd3c:	47c0      	blx	r8
            for(x = 0; x < w; x++) {
 800dd3e:	3501      	adds	r5, #1
 800dd40:	42af      	cmp	r7, r5
 800dd42:	dce1      	bgt.n	800dd08 <lv_draw_sw_blend_basic+0x220>
            mask += mask_stide;
 800dd44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        for(y = 0; y < h; y++) {
 800dd46:	9a09      	ldr	r2, [sp, #36]	; 0x24
            mask += mask_stide;
 800dd48:	469c      	mov	ip, r3
        for(y = 0; y < h; y++) {
 800dd4a:	9b07      	ldr	r3, [sp, #28]
            mask += mask_stide;
 800dd4c:	4466      	add	r6, ip
        for(y = 0; y < h; y++) {
 800dd4e:	3301      	adds	r3, #1
 800dd50:	9307      	str	r3, [sp, #28]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	dcd7      	bgt.n	800dd06 <lv_draw_sw_blend_basic+0x21e>
 800dd56:	e6ed      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 800dd58:	7e78      	ldrb	r0, [r7, #25]
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	d000      	beq.n	800dd60 <lv_draw_sw_blend_basic+0x278>
 800dd5e:	e6e9      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
        if(dsc->src_buf == NULL) {
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d100      	bne.n	800dd68 <lv_draw_sw_blend_basic+0x280>
 800dd66:	e0cf      	b.n	800df08 <lv_draw_sw_blend_basic+0x420>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800dd68:	88a0      	ldrh	r0, [r4, #4]
 800dd6a:	8823      	ldrh	r3, [r4, #0]
 800dd6c:	3001      	adds	r0, #1
 800dd6e:	1ac0      	subs	r0, r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800dd70:	88e3      	ldrh	r3, [r4, #6]
 800dd72:	8862      	ldrh	r2, [r4, #2]
 800dd74:	3301      	adds	r3, #1
 800dd76:	1a9b      	subs	r3, r3, r2
LV_ATTRIBUTE_FAST_MEM static void map_normal(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                                             const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
    int32_t w = lv_area_get_width(dest_area);
    int32_t h = lv_area_get_height(dest_area);
 800dd78:	b21b      	sxth	r3, r3
            map_normal(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 800dd7a:	7e3f      	ldrb	r7, [r7, #24]
    int32_t h = lv_area_get_height(dest_area);
 800dd7c:	9306      	str	r3, [sp, #24]

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 800dd7e:	465b      	mov	r3, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800dd80:	b200      	sxth	r0, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d101      	bne.n	800dd8a <lv_draw_sw_blend_basic+0x2a2>
 800dd86:	f000 fc36 	bl	800e5f6 <lv_draw_sw_blend_basic+0xb0e>
        }
    }
    /*Masked*/
    else {
        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
 800dd8a:	2ffd      	cmp	r7, #253	; 0xfd
 800dd8c:	d900      	bls.n	800dd90 <lv_draw_sw_blend_basic+0x2a8>
 800dd8e:	e259      	b.n	800e244 <lv_draw_sw_blend_basic+0x75c>
                mask += mask_stride;
            }
        }
        /*Handle opa and mask values too*/
        else {
            for(y = 0; y < h; y++) {
 800dd90:	9b06      	ldr	r3, [sp, #24]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	dc00      	bgt.n	800dd98 <lv_draw_sw_blend_basic+0x2b0>
 800dd96:	e6cd      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
                    if(mask[x]) {
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
                    }
                }
                dest_buf += dest_stride;
 800dd98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd9a:	005b      	lsls	r3, r3, #1
 800dd9c:	9307      	str	r3, [sp, #28]
                src_buf += src_stride;
 800dd9e:	006b      	lsls	r3, r5, #1
 800dda0:	4699      	mov	r9, r3
            for(y = 0; y < h; y++) {
 800dda2:	2300      	movs	r3, #0
 800dda4:	4698      	mov	r8, r3
 800dda6:	2800      	cmp	r0, #0
 800dda8:	dc00      	bgt.n	800ddac <lv_draw_sw_blend_basic+0x2c4>
 800ddaa:	e6c3      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
 800ddac:	464b      	mov	r3, r9
 800ddae:	9309      	str	r3, [sp, #36]	; 0x24
 800ddb0:	9b08      	ldr	r3, [sp, #32]
 800ddb2:	46b9      	mov	r9, r7
 800ddb4:	0001      	movs	r1, r0
 800ddb6:	465f      	mov	r7, fp
 800ddb8:	469b      	mov	fp, r3
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0 && LV_COLOR_MIX_ROUND_OFS == 0
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800ddba:	4ece      	ldr	r6, [pc, #824]	; (800e0f4 <lv_draw_sw_blend_basic+0x60c>)
                for(x = 0; x < w; x++) {
 800ddbc:	4653      	mov	r3, sl
            for(y = 0; y < h; y++) {
 800ddbe:	2400      	movs	r4, #0
                for(x = 0; x < w; x++) {
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	0008      	movs	r0, r1
 800ddc4:	9305      	str	r3, [sp, #20]
                    if(mask[x]) {
 800ddc6:	5cbb      	ldrb	r3, [r7, r2]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d021      	beq.n	800de10 <lv_draw_sw_blend_basic+0x328>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800ddcc:	4649      	mov	r1, r9
 800ddce:	2bfc      	cmp	r3, #252	; 0xfc
 800ddd0:	d801      	bhi.n	800ddd6 <lv_draw_sw_blend_basic+0x2ee>
 800ddd2:	434b      	muls	r3, r1
 800ddd4:	0a19      	lsrs	r1, r3, #8
 800ddd6:	9b05      	ldr	r3, [sp, #20]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800ddd8:	3104      	adds	r1, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800ddda:	5b1b      	ldrh	r3, [r3, r4]
 800dddc:	469c      	mov	ip, r3
 800ddde:	4665      	mov	r5, ip
 800dde0:	041b      	lsls	r3, r3, #16
 800dde2:	432b      	orrs	r3, r5
 800dde4:	4033      	ands	r3, r6
 800dde6:	469c      	mov	ip, r3
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800dde8:	465b      	mov	r3, fp
 800ddea:	5b1b      	ldrh	r3, [r3, r4]
 800ddec:	469a      	mov	sl, r3
 800ddee:	4655      	mov	r5, sl
 800ddf0:	041b      	lsls	r3, r3, #16
 800ddf2:	432b      	orrs	r3, r5
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800ddf4:	4665      	mov	r5, ip
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800ddf6:	4033      	ands	r3, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800ddf8:	1b5b      	subs	r3, r3, r5
 800ddfa:	469a      	mov	sl, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800ddfc:	08cb      	lsrs	r3, r1, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800ddfe:	4651      	mov	r1, sl
 800de00:	434b      	muls	r3, r1
 800de02:	095b      	lsrs	r3, r3, #5
 800de04:	4463      	add	r3, ip
 800de06:	4033      	ands	r3, r6
    ret.full = (uint16_t)((result >> 16) | result);
 800de08:	0c19      	lsrs	r1, r3, #16
 800de0a:	430b      	orrs	r3, r1
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 800de0c:	9905      	ldr	r1, [sp, #20]
 800de0e:	530b      	strh	r3, [r1, r4]
                for(x = 0; x < w; x++) {
 800de10:	3201      	adds	r2, #1
 800de12:	3402      	adds	r4, #2
 800de14:	4290      	cmp	r0, r2
 800de16:	dcd6      	bgt.n	800ddc6 <lv_draw_sw_blend_basic+0x2de>
                dest_buf += dest_stride;
 800de18:	9b05      	ldr	r3, [sp, #20]
 800de1a:	0001      	movs	r1, r0
 800de1c:	469a      	mov	sl, r3
 800de1e:	9b07      	ldr	r3, [sp, #28]
 800de20:	469c      	mov	ip, r3
                src_buf += src_stride;
 800de22:	9b09      	ldr	r3, [sp, #36]	; 0x24
                dest_buf += dest_stride;
 800de24:	44e2      	add	sl, ip
                src_buf += src_stride;
 800de26:	469c      	mov	ip, r3
                mask += mask_stride;
 800de28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                src_buf += src_stride;
 800de2a:	44e3      	add	fp, ip
                mask += mask_stride;
 800de2c:	469c      	mov	ip, r3
            for(y = 0; y < h; y++) {
 800de2e:	2301      	movs	r3, #1
                mask += mask_stride;
 800de30:	4467      	add	r7, ip
            for(y = 0; y < h; y++) {
 800de32:	469c      	mov	ip, r3
 800de34:	9b06      	ldr	r3, [sp, #24]
 800de36:	44e0      	add	r8, ip
 800de38:	4543      	cmp	r3, r8
 800de3a:	dcbf      	bgt.n	800ddbc <lv_draw_sw_blend_basic+0x2d4>
 800de3c:	e67a      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
 800de3e:	2300      	movs	r3, #0
 800de40:	4699      	mov	r9, r3
        mask_stride = 0;
 800de42:	930a      	str	r3, [sp, #40]	; 0x28
 800de44:	e6cc      	b.n	800dbe0 <lv_draw_sw_blend_basic+0xf8>
        src_stride = 0;
 800de46:	2500      	movs	r5, #0
 800de48:	e6ae      	b.n	800dba8 <lv_draw_sw_blend_basic+0xc0>
        if(disp->driver->screen_transp == 0) {
 800de4a:	7c1b      	ldrb	r3, [r3, #16]
 800de4c:	065b      	lsls	r3, r3, #25
 800de4e:	d410      	bmi.n	800de72 <lv_draw_sw_blend_basic+0x38a>
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 800de50:	686b      	ldr	r3, [r5, #4]
 800de52:	2102      	movs	r1, #2
 800de54:	5e5a      	ldrsh	r2, [r3, r1]
 800de56:	2100      	movs	r1, #0
 800de58:	5e59      	ldrsh	r1, [r3, r1]
 800de5a:	2002      	movs	r0, #2
 800de5c:	5e23      	ldrsh	r3, [r4, r0]
 800de5e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800de60:	1a9b      	subs	r3, r3, r2
 800de62:	4343      	muls	r3, r0
 800de64:	2500      	movs	r5, #0
 800de66:	5f60      	ldrsh	r0, [r4, r5]
 800de68:	1a40      	subs	r0, r0, r1
 800de6a:	181b      	adds	r3, r3, r0
 800de6c:	005b      	lsls	r3, r3, #1
 800de6e:	449a      	add	sl, r3
 800de70:	e67b      	b.n	800db6a <lv_draw_sw_blend_basic+0x82>
            dest_buf8 += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800de72:	686b      	ldr	r3, [r5, #4]
 800de74:	2102      	movs	r1, #2
 800de76:	5e5a      	ldrsh	r2, [r3, r1]
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800de78:	2100      	movs	r1, #0
 800de7a:	5e59      	ldrsh	r1, [r3, r1]
            dest_buf8 += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800de7c:	2002      	movs	r0, #2
 800de7e:	5e23      	ldrsh	r3, [r4, r0]
 800de80:	980d      	ldr	r0, [sp, #52]	; 0x34
 800de82:	1a9b      	subs	r3, r3, r2
 800de84:	4343      	muls	r3, r0
 800de86:	0058      	lsls	r0, r3, #1
 800de88:	18c3      	adds	r3, r0, r3
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800de8a:	2500      	movs	r5, #0
 800de8c:	5f60      	ldrsh	r0, [r4, r5]
 800de8e:	1a40      	subs	r0, r0, r1
 800de90:	0045      	lsls	r5, r0, #1
 800de92:	1828      	adds	r0, r5, r0
 800de94:	181b      	adds	r3, r3, r0
 800de96:	449a      	add	sl, r3
            dest_buf = (lv_color_t *)dest_buf8;
 800de98:	e667      	b.n	800db6a <lv_draw_sw_blend_basic+0x82>
        for(y = 0; y < h; y++) {
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	dc00      	bgt.n	800dea0 <lv_draw_sw_blend_basic+0x3b8>
 800de9e:	e649      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
            src_buf += src_stride;
 800dea0:	006b      	lsls	r3, r5, #1
 800dea2:	930a      	str	r3, [sp, #40]	; 0x28
        for(y = 0; y < h; y++) {
 800dea4:	2300      	movs	r3, #0
 800dea6:	9309      	str	r3, [sp, #36]	; 0x24
 800dea8:	ab01      	add	r3, sp, #4
 800deaa:	9305      	str	r3, [sp, #20]
 800deac:	2f00      	cmp	r7, #0
 800deae:	dc00      	bgt.n	800deb2 <lv_draw_sw_blend_basic+0x3ca>
 800deb0:	e640      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
 800deb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800deb4:	9707      	str	r7, [sp, #28]
 800deb6:	469b      	mov	fp, r3
            for(x = 0; x < w; x++) {
 800deb8:	466b      	mov	r3, sp
 800deba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800debc:	2500      	movs	r5, #0
 800debe:	4698      	mov	r8, r3
 800dec0:	9f08      	ldr	r7, [sp, #32]
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 800dec2:	464b      	mov	r3, r9
 800dec4:	9a06      	ldr	r2, [sp, #24]
 800dec6:	6818      	ldr	r0, [r3, #0]
 800dec8:	8823      	ldrh	r3, [r4, #0]
 800deca:	9202      	str	r2, [sp, #8]
 800decc:	883a      	ldrh	r2, [r7, #0]
 800dece:	9905      	ldr	r1, [sp, #20]
 800ded0:	195b      	adds	r3, r3, r5
 800ded2:	800a      	strh	r2, [r1, #0]
 800ded4:	8862      	ldrh	r2, [r4, #2]
 800ded6:	b21b      	sxth	r3, r3
 800ded8:	4442      	add	r2, r8
 800deda:	b212      	sxth	r2, r2
 800dedc:	9200      	str	r2, [sp, #0]
 800dede:	4651      	mov	r1, sl
 800dee0:	465a      	mov	r2, fp
 800dee2:	69c6      	ldr	r6, [r0, #28]
 800dee4:	47b0      	blx	r6
            for(x = 0; x < w; x++) {
 800dee6:	9b07      	ldr	r3, [sp, #28]
 800dee8:	3501      	adds	r5, #1
 800deea:	3702      	adds	r7, #2
 800deec:	42ab      	cmp	r3, r5
 800deee:	dce8      	bgt.n	800dec2 <lv_draw_sw_blend_basic+0x3da>
            src_buf += src_stride;
 800def0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800def2:	9b08      	ldr	r3, [sp, #32]
 800def4:	4694      	mov	ip, r2
 800def6:	4463      	add	r3, ip
 800def8:	9308      	str	r3, [sp, #32]
        for(y = 0; y < h; y++) {
 800defa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800defc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800defe:	3301      	adds	r3, #1
 800df00:	9309      	str	r3, [sp, #36]	; 0x24
 800df02:	429a      	cmp	r2, r3
 800df04:	dcd8      	bgt.n	800deb8 <lv_draw_sw_blend_basic+0x3d0>
 800df06:	e615      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
            fill_normal(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 800df08:	7e3b      	ldrb	r3, [r7, #24]
 800df0a:	893d      	ldrh	r5, [r7, #8]
 800df0c:	88a7      	ldrh	r7, [r4, #4]
 800df0e:	469c      	mov	ip, r3
 800df10:	8823      	ldrh	r3, [r4, #0]
 800df12:	3701      	adds	r7, #1
 800df14:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800df16:	88e3      	ldrh	r3, [r4, #6]
 800df18:	8862      	ldrh	r2, [r4, #2]
 800df1a:	3301      	adds	r3, #1
 800df1c:	1a9b      	subs	r3, r3, r2
    int32_t h = lv_area_get_height(dest_area);
 800df1e:	b21b      	sxth	r3, r3
 800df20:	9305      	str	r3, [sp, #20]
    if(mask == NULL) {
 800df22:	465b      	mov	r3, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800df24:	b23f      	sxth	r7, r7
 800df26:	2b00      	cmp	r3, #0
 800df28:	d101      	bne.n	800df2e <lv_draw_sw_blend_basic+0x446>
 800df2a:	f000 fc2b 	bl	800e784 <lv_draw_sw_blend_basic+0xc9c>
        if(opa >= LV_OPA_MAX) {
 800df2e:	4662      	mov	r2, ip
        uint32_t c32 = color.full + ((uint32_t)color.full << 16);
 800df30:	042b      	lsls	r3, r5, #16
        if(opa >= LV_OPA_MAX) {
 800df32:	2afc      	cmp	r2, #252	; 0xfc
 800df34:	d800      	bhi.n	800df38 <lv_draw_sw_blend_basic+0x450>
 800df36:	e3c7      	b.n	800e6c8 <lv_draw_sw_blend_basic+0xbe0>
            int32_t x_end4 = w - 4;
 800df38:	1f3a      	subs	r2, r7, #4
 800df3a:	4694      	mov	ip, r2
            for(y = 0; y < h; y++) {
 800df3c:	9a05      	ldr	r2, [sp, #20]
 800df3e:	2a00      	cmp	r2, #0
 800df40:	dc00      	bgt.n	800df44 <lv_draw_sw_blend_basic+0x45c>
 800df42:	e5f7      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
        uint32_t c32 = color.full + ((uint32_t)color.full << 16);
 800df44:	18ea      	adds	r2, r5, r3
 800df46:	9206      	str	r2, [sp, #24]
                dest_buf += (dest_stride - w);
 800df48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800df4a:	432b      	orrs	r3, r5
 800df4c:	1bd6      	subs	r6, r2, r7
 800df4e:	0072      	lsls	r2, r6, #1
 800df50:	9209      	str	r2, [sp, #36]	; 0x24
                mask += (mask_stride - w);
 800df52:	464a      	mov	r2, r9
 800df54:	1bd2      	subs	r2, r2, r7
 800df56:	920a      	str	r2, [sp, #40]	; 0x28
            for(y = 0; y < h; y++) {
 800df58:	2200      	movs	r2, #0
 800df5a:	9207      	str	r2, [sp, #28]
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 800df5c:	3203      	adds	r2, #3
 800df5e:	4690      	mov	r8, r2
 800df60:	4a64      	ldr	r2, [pc, #400]	; (800e0f4 <lv_draw_sw_blend_basic+0x60c>)
 800df62:	4658      	mov	r0, fp
 800df64:	4013      	ands	r3, r2
 800df66:	4699      	mov	r9, r3
 800df68:	4663      	mov	r3, ip
 800df6a:	46cc      	mov	ip, r9
 800df6c:	46b9      	mov	r9, r7
 800df6e:	4657      	mov	r7, sl
 800df70:	9308      	str	r3, [sp, #32]
 800df72:	464b      	mov	r3, r9
 800df74:	2200      	movs	r2, #0
 800df76:	2b00      	cmp	r3, #0
 800df78:	dd28      	ble.n	800dfcc <lv_draw_sw_blend_basic+0x4e4>
 800df7a:	4643      	mov	r3, r8
 800df7c:	464c      	mov	r4, r9
 800df7e:	4218      	tst	r0, r3
 800df80:	d104      	bne.n	800df8c <lv_draw_sw_blend_basic+0x4a4>
 800df82:	e123      	b.n	800e1cc <lv_draw_sw_blend_basic+0x6e4>
 800df84:	4643      	mov	r3, r8
 800df86:	4218      	tst	r0, r3
 800df88:	d100      	bne.n	800df8c <lv_draw_sw_blend_basic+0x4a4>
 800df8a:	e11e      	b.n	800e1ca <lv_draw_sw_blend_basic+0x6e2>
                    FILL_NORMAL_MASK_PX(color)
 800df8c:	7803      	ldrb	r3, [r0, #0]
 800df8e:	0029      	movs	r1, r5
 800df90:	2bff      	cmp	r3, #255	; 0xff
 800df92:	d014      	beq.n	800dfbe <lv_draw_sw_blend_basic+0x4d6>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800df94:	8839      	ldrh	r1, [r7, #0]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800df96:	3304      	adds	r3, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800df98:	4689      	mov	r9, r1
 800df9a:	464e      	mov	r6, r9
 800df9c:	0409      	lsls	r1, r1, #16
 800df9e:	4331      	orrs	r1, r6
 800dfa0:	4e54      	ldr	r6, [pc, #336]	; (800e0f4 <lv_draw_sw_blend_basic+0x60c>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800dfa2:	08db      	lsrs	r3, r3, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800dfa4:	4031      	ands	r1, r6
 800dfa6:	4689      	mov	r9, r1
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800dfa8:	4661      	mov	r1, ip
 800dfaa:	464e      	mov	r6, r9
 800dfac:	1b89      	subs	r1, r1, r6
 800dfae:	434b      	muls	r3, r1
 800dfb0:	4950      	ldr	r1, [pc, #320]	; (800e0f4 <lv_draw_sw_blend_basic+0x60c>)
 800dfb2:	095b      	lsrs	r3, r3, #5
 800dfb4:	444b      	add	r3, r9
 800dfb6:	400b      	ands	r3, r1
    ret.full = (uint16_t)((result >> 16) | result);
 800dfb8:	0c19      	lsrs	r1, r3, #16
 800dfba:	4319      	orrs	r1, r3
 800dfbc:	b289      	uxth	r1, r1
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 800dfbe:	3201      	adds	r2, #1
 800dfc0:	8039      	strh	r1, [r7, #0]
                    FILL_NORMAL_MASK_PX(color)
 800dfc2:	3001      	adds	r0, #1
 800dfc4:	3702      	adds	r7, #2
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 800dfc6:	4294      	cmp	r4, r2
 800dfc8:	dcdc      	bgt.n	800df84 <lv_draw_sw_blend_basic+0x49c>
 800dfca:	46a1      	mov	r9, r4
                for(; x <= x_end4; x += 4) {
 800dfcc:	9b08      	ldr	r3, [sp, #32]
 800dfce:	4293      	cmp	r3, r2
 800dfd0:	da00      	bge.n	800dfd4 <lv_draw_sw_blend_basic+0x4ec>
 800dfd2:	e080      	b.n	800e0d6 <lv_draw_sw_blend_basic+0x5ee>
 800dfd4:	0001      	movs	r1, r0
 800dfd6:	1d04      	adds	r4, r0, #4
 800dfd8:	9808      	ldr	r0, [sp, #32]
 800dfda:	003b      	movs	r3, r7
 800dfdc:	4682      	mov	sl, r0
 800dfde:	e061      	b.n	800e0a4 <lv_draw_sw_blend_basic+0x5bc>
                    else if(mask32) {
 800dfe0:	2800      	cmp	r0, #0
 800dfe2:	d06e      	beq.n	800e0c2 <lv_draw_sw_blend_basic+0x5da>
                        FILL_NORMAL_MASK_PX(color)
 800dfe4:	7808      	ldrb	r0, [r1, #0]
 800dfe6:	002f      	movs	r7, r5
 800dfe8:	28ff      	cmp	r0, #255	; 0xff
 800dfea:	d010      	beq.n	800e00e <lv_draw_sw_blend_basic+0x526>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800dfec:	881e      	ldrh	r6, [r3, #0]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800dfee:	3004      	adds	r0, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800dff0:	0437      	lsls	r7, r6, #16
 800dff2:	4337      	orrs	r7, r6
 800dff4:	4e3f      	ldr	r6, [pc, #252]	; (800e0f4 <lv_draw_sw_blend_basic+0x60c>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800dff6:	08c0      	lsrs	r0, r0, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800dff8:	4037      	ands	r7, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800dffa:	4666      	mov	r6, ip
 800dffc:	1bf6      	subs	r6, r6, r7
 800dffe:	4370      	muls	r0, r6
 800e000:	0940      	lsrs	r0, r0, #5
 800e002:	19c7      	adds	r7, r0, r7
 800e004:	483b      	ldr	r0, [pc, #236]	; (800e0f4 <lv_draw_sw_blend_basic+0x60c>)
 800e006:	4007      	ands	r7, r0
    ret.full = (uint16_t)((result >> 16) | result);
 800e008:	0c38      	lsrs	r0, r7, #16
 800e00a:	4307      	orrs	r7, r0
 800e00c:	b2bf      	uxth	r7, r7
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 800e00e:	801f      	strh	r7, [r3, #0]
                        FILL_NORMAL_MASK_PX(color)
 800e010:	7848      	ldrb	r0, [r1, #1]
 800e012:	002f      	movs	r7, r5
 800e014:	28ff      	cmp	r0, #255	; 0xff
 800e016:	d010      	beq.n	800e03a <lv_draw_sw_blend_basic+0x552>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e018:	885e      	ldrh	r6, [r3, #2]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e01a:	3004      	adds	r0, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e01c:	0437      	lsls	r7, r6, #16
 800e01e:	4337      	orrs	r7, r6
 800e020:	4e34      	ldr	r6, [pc, #208]	; (800e0f4 <lv_draw_sw_blend_basic+0x60c>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e022:	08c0      	lsrs	r0, r0, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e024:	4037      	ands	r7, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e026:	4666      	mov	r6, ip
 800e028:	1bf6      	subs	r6, r6, r7
 800e02a:	4370      	muls	r0, r6
 800e02c:	0940      	lsrs	r0, r0, #5
 800e02e:	19c7      	adds	r7, r0, r7
 800e030:	4830      	ldr	r0, [pc, #192]	; (800e0f4 <lv_draw_sw_blend_basic+0x60c>)
 800e032:	4007      	ands	r7, r0
    ret.full = (uint16_t)((result >> 16) | result);
 800e034:	0c38      	lsrs	r0, r7, #16
 800e036:	4307      	orrs	r7, r0
 800e038:	b2bf      	uxth	r7, r7
    return ret;
 800e03a:	805f      	strh	r7, [r3, #2]
                        FILL_NORMAL_MASK_PX(color)
 800e03c:	7888      	ldrb	r0, [r1, #2]
 800e03e:	002f      	movs	r7, r5
 800e040:	28ff      	cmp	r0, #255	; 0xff
 800e042:	d010      	beq.n	800e066 <lv_draw_sw_blend_basic+0x57e>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e044:	889e      	ldrh	r6, [r3, #4]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e046:	3004      	adds	r0, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e048:	0437      	lsls	r7, r6, #16
 800e04a:	4337      	orrs	r7, r6
 800e04c:	4e29      	ldr	r6, [pc, #164]	; (800e0f4 <lv_draw_sw_blend_basic+0x60c>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e04e:	08c0      	lsrs	r0, r0, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e050:	4037      	ands	r7, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e052:	4666      	mov	r6, ip
 800e054:	1bf6      	subs	r6, r6, r7
 800e056:	4370      	muls	r0, r6
 800e058:	0940      	lsrs	r0, r0, #5
 800e05a:	19c7      	adds	r7, r0, r7
 800e05c:	4825      	ldr	r0, [pc, #148]	; (800e0f4 <lv_draw_sw_blend_basic+0x60c>)
 800e05e:	4007      	ands	r7, r0
    ret.full = (uint16_t)((result >> 16) | result);
 800e060:	0c38      	lsrs	r0, r7, #16
 800e062:	4307      	orrs	r7, r0
 800e064:	b2bf      	uxth	r7, r7
    return ret;
 800e066:	809f      	strh	r7, [r3, #4]
                        FILL_NORMAL_MASK_PX(color)
 800e068:	78c8      	ldrb	r0, [r1, #3]
 800e06a:	002f      	movs	r7, r5
 800e06c:	28ff      	cmp	r0, #255	; 0xff
 800e06e:	d010      	beq.n	800e092 <lv_draw_sw_blend_basic+0x5aa>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e070:	88de      	ldrh	r6, [r3, #6]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e072:	3004      	adds	r0, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e074:	0437      	lsls	r7, r6, #16
 800e076:	4337      	orrs	r7, r6
 800e078:	4e1e      	ldr	r6, [pc, #120]	; (800e0f4 <lv_draw_sw_blend_basic+0x60c>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e07a:	08c0      	lsrs	r0, r0, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e07c:	4037      	ands	r7, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e07e:	4666      	mov	r6, ip
 800e080:	1bf6      	subs	r6, r6, r7
 800e082:	4370      	muls	r0, r6
 800e084:	0940      	lsrs	r0, r0, #5
 800e086:	19c7      	adds	r7, r0, r7
 800e088:	481a      	ldr	r0, [pc, #104]	; (800e0f4 <lv_draw_sw_blend_basic+0x60c>)
 800e08a:	4007      	ands	r7, r0
    ret.full = (uint16_t)((result >> 16) | result);
 800e08c:	0c38      	lsrs	r0, r7, #16
 800e08e:	4307      	orrs	r7, r0
 800e090:	b2bf      	uxth	r7, r7
    return ret;
 800e092:	80df      	strh	r7, [r3, #6]
 800e094:	3308      	adds	r3, #8
 800e096:	0020      	movs	r0, r4
 800e098:	001f      	movs	r7, r3
                for(; x <= x_end4; x += 4) {
 800e09a:	3204      	adds	r2, #4
 800e09c:	3104      	adds	r1, #4
 800e09e:	3404      	adds	r4, #4
 800e0a0:	4592      	cmp	sl, r2
 800e0a2:	db29      	blt.n	800e0f8 <lv_draw_sw_blend_basic+0x610>
                    uint32_t mask32 = *((uint32_t *)mask);
 800e0a4:	6808      	ldr	r0, [r1, #0]
                    if(mask32 == 0xFFFFFFFF) {
 800e0a6:	1c46      	adds	r6, r0, #1
 800e0a8:	d19a      	bne.n	800dfe0 <lv_draw_sw_blend_basic+0x4f8>
                        if((lv_uintptr_t)dest_buf & 0x3) {
 800e0aa:	4640      	mov	r0, r8
 800e0ac:	4218      	tst	r0, r3
 800e0ae:	d00c      	beq.n	800e0ca <lv_draw_sw_blend_basic+0x5e2>
                            *d = c32;
 800e0b0:	9e06      	ldr	r6, [sp, #24]
 800e0b2:	1c98      	adds	r0, r3, #2
                            *(dest_buf + 0) = color;
 800e0b4:	801d      	strh	r5, [r3, #0]
                            *d = c32;
 800e0b6:	6006      	str	r6, [r0, #0]
                            *(dest_buf + 3) = color;
 800e0b8:	80dd      	strh	r5, [r3, #6]
                        dest_buf += 4;
 800e0ba:	3308      	adds	r3, #8
 800e0bc:	001f      	movs	r7, r3
                        mask += 4;
 800e0be:	0020      	movs	r0, r4
 800e0c0:	e7eb      	b.n	800e09a <lv_draw_sw_blend_basic+0x5b2>
                        mask += 4;
 800e0c2:	3308      	adds	r3, #8
 800e0c4:	0020      	movs	r0, r4
                        dest_buf += 4;
 800e0c6:	001f      	movs	r7, r3
 800e0c8:	e7e7      	b.n	800e09a <lv_draw_sw_blend_basic+0x5b2>
                            *d = c32;
 800e0ca:	9806      	ldr	r0, [sp, #24]
 800e0cc:	6018      	str	r0, [r3, #0]
                            *(d + 1) = c32;
 800e0ce:	6058      	str	r0, [r3, #4]
 800e0d0:	e7f3      	b.n	800e0ba <lv_draw_sw_blend_basic+0x5d2>
                    FILL_NORMAL_MASK_PX(color)
 800e0d2:	0027      	movs	r7, r4
 800e0d4:	0008      	movs	r0, r1
                dest_buf += (dest_stride - w);
 800e0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for(y = 0; y < h; y++) {
 800e0d8:	9a05      	ldr	r2, [sp, #20]
                dest_buf += (dest_stride - w);
 800e0da:	469a      	mov	sl, r3
                mask += (mask_stride - w);
 800e0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                dest_buf += (dest_stride - w);
 800e0de:	4457      	add	r7, sl
                mask += (mask_stride - w);
 800e0e0:	469a      	mov	sl, r3
            for(y = 0; y < h; y++) {
 800e0e2:	9b07      	ldr	r3, [sp, #28]
                mask += (mask_stride - w);
 800e0e4:	4450      	add	r0, sl
            for(y = 0; y < h; y++) {
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	9307      	str	r3, [sp, #28]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	dd00      	ble.n	800e0f0 <lv_draw_sw_blend_basic+0x608>
 800e0ee:	e740      	b.n	800df72 <lv_draw_sw_blend_basic+0x48a>
 800e0f0:	e520      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
 800e0f2:	46c0      	nop			; (mov r8, r8)
 800e0f4:	07e0f81f 	.word	0x07e0f81f
                for(; x < w ; x++) {
 800e0f8:	4591      	cmp	r9, r2
 800e0fa:	ddec      	ble.n	800e0d6 <lv_draw_sw_blend_basic+0x5ee>
                    FILL_NORMAL_MASK_PX(color)
 800e0fc:	7803      	ldrb	r3, [r0, #0]
 800e0fe:	0029      	movs	r1, r5
 800e100:	2bff      	cmp	r3, #255	; 0xff
 800e102:	d00f      	beq.n	800e124 <lv_draw_sw_blend_basic+0x63c>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e104:	883c      	ldrh	r4, [r7, #0]
 800e106:	4eca      	ldr	r6, [pc, #808]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
 800e108:	0421      	lsls	r1, r4, #16
 800e10a:	4321      	orrs	r1, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e10c:	4664      	mov	r4, ip
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e10e:	4031      	ands	r1, r6
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e110:	3304      	adds	r3, #4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e112:	1a64      	subs	r4, r4, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e114:	08db      	lsrs	r3, r3, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e116:	4363      	muls	r3, r4
 800e118:	095b      	lsrs	r3, r3, #5
 800e11a:	1859      	adds	r1, r3, r1
 800e11c:	4031      	ands	r1, r6
    ret.full = (uint16_t)((result >> 16) | result);
 800e11e:	0c0b      	lsrs	r3, r1, #16
 800e120:	4319      	orrs	r1, r3
 800e122:	b289      	uxth	r1, r1
                for(; x < w ; x++) {
 800e124:	1c53      	adds	r3, r2, #1
 800e126:	8039      	strh	r1, [r7, #0]
                    FILL_NORMAL_MASK_PX(color)
 800e128:	1cbc      	adds	r4, r7, #2
 800e12a:	1c41      	adds	r1, r0, #1
                for(; x < w ; x++) {
 800e12c:	4599      	cmp	r9, r3
 800e12e:	ddd0      	ble.n	800e0d2 <lv_draw_sw_blend_basic+0x5ea>
                    FILL_NORMAL_MASK_PX(color)
 800e130:	7843      	ldrb	r3, [r0, #1]
 800e132:	0029      	movs	r1, r5
 800e134:	2bff      	cmp	r3, #255	; 0xff
 800e136:	d00f      	beq.n	800e158 <lv_draw_sw_blend_basic+0x670>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e138:	887c      	ldrh	r4, [r7, #2]
 800e13a:	4ebd      	ldr	r6, [pc, #756]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
 800e13c:	0421      	lsls	r1, r4, #16
 800e13e:	4321      	orrs	r1, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e140:	4664      	mov	r4, ip
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e142:	4031      	ands	r1, r6
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e144:	3304      	adds	r3, #4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e146:	1a64      	subs	r4, r4, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e148:	08db      	lsrs	r3, r3, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e14a:	4363      	muls	r3, r4
 800e14c:	095b      	lsrs	r3, r3, #5
 800e14e:	1859      	adds	r1, r3, r1
 800e150:	4031      	ands	r1, r6
    ret.full = (uint16_t)((result >> 16) | result);
 800e152:	0c0b      	lsrs	r3, r1, #16
 800e154:	4319      	orrs	r1, r3
 800e156:	b289      	uxth	r1, r1
                for(; x < w ; x++) {
 800e158:	1c93      	adds	r3, r2, #2
 800e15a:	8079      	strh	r1, [r7, #2]
                    FILL_NORMAL_MASK_PX(color)
 800e15c:	1d3c      	adds	r4, r7, #4
 800e15e:	1c81      	adds	r1, r0, #2
                for(; x < w ; x++) {
 800e160:	4599      	cmp	r9, r3
 800e162:	ddb6      	ble.n	800e0d2 <lv_draw_sw_blend_basic+0x5ea>
                    FILL_NORMAL_MASK_PX(color)
 800e164:	7883      	ldrb	r3, [r0, #2]
 800e166:	0029      	movs	r1, r5
 800e168:	2bff      	cmp	r3, #255	; 0xff
 800e16a:	d00f      	beq.n	800e18c <lv_draw_sw_blend_basic+0x6a4>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e16c:	88bc      	ldrh	r4, [r7, #4]
 800e16e:	4eb0      	ldr	r6, [pc, #704]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
 800e170:	0421      	lsls	r1, r4, #16
 800e172:	4321      	orrs	r1, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e174:	4664      	mov	r4, ip
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e176:	4031      	ands	r1, r6
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e178:	3304      	adds	r3, #4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e17a:	1a64      	subs	r4, r4, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e17c:	08db      	lsrs	r3, r3, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e17e:	4363      	muls	r3, r4
 800e180:	095b      	lsrs	r3, r3, #5
 800e182:	1859      	adds	r1, r3, r1
 800e184:	4031      	ands	r1, r6
    ret.full = (uint16_t)((result >> 16) | result);
 800e186:	0c0b      	lsrs	r3, r1, #16
 800e188:	4319      	orrs	r1, r3
 800e18a:	b289      	uxth	r1, r1
                for(; x < w ; x++) {
 800e18c:	3203      	adds	r2, #3
 800e18e:	80b9      	strh	r1, [r7, #4]
                    FILL_NORMAL_MASK_PX(color)
 800e190:	1cc3      	adds	r3, r0, #3
 800e192:	1db9      	adds	r1, r7, #6
                for(; x < w ; x++) {
 800e194:	4591      	cmp	r9, r2
 800e196:	dc00      	bgt.n	800e19a <lv_draw_sw_blend_basic+0x6b2>
 800e198:	e30d      	b.n	800e7b6 <lv_draw_sw_blend_basic+0xcce>
                    FILL_NORMAL_MASK_PX(color)
 800e19a:	78c3      	ldrb	r3, [r0, #3]
 800e19c:	002a      	movs	r2, r5
 800e19e:	2bff      	cmp	r3, #255	; 0xff
 800e1a0:	d00f      	beq.n	800e1c2 <lv_draw_sw_blend_basic+0x6da>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e1a2:	88f9      	ldrh	r1, [r7, #6]
 800e1a4:	4ca2      	ldr	r4, [pc, #648]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
 800e1a6:	040a      	lsls	r2, r1, #16
 800e1a8:	430a      	orrs	r2, r1
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e1aa:	4661      	mov	r1, ip
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e1ac:	4022      	ands	r2, r4
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e1ae:	3304      	adds	r3, #4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e1b0:	1a89      	subs	r1, r1, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e1b2:	08db      	lsrs	r3, r3, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e1b4:	434b      	muls	r3, r1
 800e1b6:	095b      	lsrs	r3, r3, #5
 800e1b8:	189a      	adds	r2, r3, r2
 800e1ba:	4022      	ands	r2, r4
    ret.full = (uint16_t)((result >> 16) | result);
 800e1bc:	0c13      	lsrs	r3, r2, #16
 800e1be:	431a      	orrs	r2, r3
 800e1c0:	b292      	uxth	r2, r2
    return ret;
 800e1c2:	80fa      	strh	r2, [r7, #6]
 800e1c4:	3004      	adds	r0, #4
 800e1c6:	3708      	adds	r7, #8
                for(; x < w ; x++) {
 800e1c8:	e785      	b.n	800e0d6 <lv_draw_sw_blend_basic+0x5ee>
 800e1ca:	46a1      	mov	r9, r4
                for(; x <= x_end4; x += 4) {
 800e1cc:	9b08      	ldr	r3, [sp, #32]
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	db00      	blt.n	800e1d4 <lv_draw_sw_blend_basic+0x6ec>
 800e1d2:	e6ff      	b.n	800dfd4 <lv_draw_sw_blend_basic+0x4ec>
 800e1d4:	e792      	b.n	800e0fc <lv_draw_sw_blend_basic+0x614>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 800e1d6:	2302      	movs	r3, #2
 800e1d8:	5ee2      	ldrsh	r2, [r4, r3]
 800e1da:	9207      	str	r2, [sp, #28]
 800e1dc:	2106      	movs	r1, #6
 800e1de:	5e63      	ldrsh	r3, [r4, r1]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	dd00      	ble.n	800e1e6 <lv_draw_sw_blend_basic+0x6fe>
 800e1e4:	e4a6      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 800e1e6:	2204      	movs	r2, #4
 800e1e8:	5ea3      	ldrsh	r3, [r4, r2]
 800e1ea:	aa01      	add	r2, sp, #4
 800e1ec:	4693      	mov	fp, r2
 800e1ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e1f0:	4681      	mov	r9, r0
 800e1f2:	4690      	mov	r8, r2
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	5ea5      	ldrsh	r5, [r4, r2]
 800e1f8:	429d      	cmp	r5, r3
 800e1fa:	dd00      	ble.n	800e1fe <lv_draw_sw_blend_basic+0x716>
 800e1fc:	e49a      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 800e1fe:	466b      	mov	r3, sp
 800e200:	271c      	movs	r7, #28
 800e202:	5fdf      	ldrsh	r7, [r3, r7]
 800e204:	003b      	movs	r3, r7
 800e206:	4647      	mov	r7, r8
 800e208:	4698      	mov	r8, r3
 800e20a:	464b      	mov	r3, r9
 800e20c:	9a05      	ldr	r2, [sp, #20]
 800e20e:	4669      	mov	r1, sp
 800e210:	6818      	ldr	r0, [r3, #0]
 800e212:	9202      	str	r2, [sp, #8]
 800e214:	465a      	mov	r2, fp
 800e216:	8b09      	ldrh	r1, [r1, #24]
 800e218:	b22b      	sxth	r3, r5
 800e21a:	8011      	strh	r1, [r2, #0]
 800e21c:	4642      	mov	r2, r8
 800e21e:	9200      	str	r2, [sp, #0]
 800e220:	4651      	mov	r1, sl
 800e222:	003a      	movs	r2, r7
 800e224:	69c6      	ldr	r6, [r0, #28]
 800e226:	47b0      	blx	r6
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 800e228:	2204      	movs	r2, #4
 800e22a:	5ea3      	ldrsh	r3, [r4, r2]
 800e22c:	3501      	adds	r5, #1
 800e22e:	429d      	cmp	r5, r3
 800e230:	ddeb      	ble.n	800e20a <lv_draw_sw_blend_basic+0x722>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 800e232:	9907      	ldr	r1, [sp, #28]
 800e234:	46b8      	mov	r8, r7
 800e236:	3101      	adds	r1, #1
 800e238:	9107      	str	r1, [sp, #28]
 800e23a:	2006      	movs	r0, #6
 800e23c:	5e22      	ldrsh	r2, [r4, r0]
 800e23e:	428a      	cmp	r2, r1
 800e240:	dad8      	bge.n	800e1f4 <lv_draw_sw_blend_basic+0x70c>
 800e242:	e477      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
            int32_t x_end4 = w - 4;
 800e244:	1f03      	subs	r3, r0, #4
 800e246:	4699      	mov	r9, r3
            for(y = 0; y < h; y++) {
 800e248:	9b06      	ldr	r3, [sp, #24]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	dc00      	bgt.n	800e250 <lv_draw_sw_blend_basic+0x768>
 800e24e:	e471      	b.n	800db34 <lv_draw_sw_blend_basic+0x4c>
                dest_buf += dest_stride;
 800e250:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e252:	005b      	lsls	r3, r3, #1
 800e254:	9309      	str	r3, [sp, #36]	; 0x24
                src_buf += src_stride;
 800e256:	006b      	lsls	r3, r5, #1
 800e258:	930b      	str	r3, [sp, #44]	; 0x2c
            for(y = 0; y < h; y++) {
 800e25a:	2300      	movs	r3, #0
 800e25c:	9305      	str	r3, [sp, #20]
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800e25e:	465b      	mov	r3, fp
 800e260:	2800      	cmp	r0, #0
 800e262:	dd36      	ble.n	800e2d2 <lv_draw_sw_blend_basic+0x7ea>
 800e264:	2203      	movs	r2, #3
 800e266:	2100      	movs	r1, #0
 800e268:	4213      	tst	r3, r2
 800e26a:	d100      	bne.n	800e26e <lv_draw_sw_blend_basic+0x786>
 800e26c:	e1a8      	b.n	800e5c0 <lv_draw_sw_blend_basic+0xad8>
 800e26e:	4654      	mov	r4, sl
 800e270:	465b      	mov	r3, fp
 800e272:	2100      	movs	r1, #0
 800e274:	9f08      	ldr	r7, [sp, #32]
 800e276:	e024      	b.n	800e2c2 <lv_draw_sw_blend_basic+0x7da>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e278:	8825      	ldrh	r5, [r4, #0]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e27a:	3204      	adds	r2, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e27c:	46ac      	mov	ip, r5
 800e27e:	4666      	mov	r6, ip
 800e280:	042d      	lsls	r5, r5, #16
 800e282:	4335      	orrs	r5, r6
 800e284:	4e6a      	ldr	r6, [pc, #424]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e286:	08d2      	lsrs	r2, r2, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e288:	4035      	ands	r5, r6
 800e28a:	46ac      	mov	ip, r5
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e28c:	883d      	ldrh	r5, [r7, #0]
 800e28e:	46a8      	mov	r8, r5
 800e290:	4646      	mov	r6, r8
 800e292:	042d      	lsls	r5, r5, #16
 800e294:	4335      	orrs	r5, r6
 800e296:	4e66      	ldr	r6, [pc, #408]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
 800e298:	4035      	ands	r5, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e29a:	4666      	mov	r6, ip
 800e29c:	1bad      	subs	r5, r5, r6
 800e29e:	436a      	muls	r2, r5
 800e2a0:	4d63      	ldr	r5, [pc, #396]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
 800e2a2:	0952      	lsrs	r2, r2, #5
 800e2a4:	4462      	add	r2, ip
 800e2a6:	402a      	ands	r2, r5
    ret.full = (uint16_t)((result >> 16) | result);
 800e2a8:	0c15      	lsrs	r5, r2, #16
 800e2aa:	432a      	orrs	r2, r5
                    MAP_NORMAL_MASK_PX(x)
 800e2ac:	8022      	strh	r2, [r4, #0]
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800e2ae:	3101      	adds	r1, #1
                    MAP_NORMAL_MASK_PX(x)
 800e2b0:	3301      	adds	r3, #1
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800e2b2:	4288      	cmp	r0, r1
 800e2b4:	dd0e      	ble.n	800e2d4 <lv_draw_sw_blend_basic+0x7ec>
 800e2b6:	2203      	movs	r2, #3
 800e2b8:	3702      	adds	r7, #2
 800e2ba:	3402      	adds	r4, #2
 800e2bc:	4213      	tst	r3, r2
 800e2be:	d100      	bne.n	800e2c2 <lv_draw_sw_blend_basic+0x7da>
 800e2c0:	e17e      	b.n	800e5c0 <lv_draw_sw_blend_basic+0xad8>
                    MAP_NORMAL_MASK_PX(x)
 800e2c2:	781a      	ldrb	r2, [r3, #0]
 800e2c4:	2a00      	cmp	r2, #0
 800e2c6:	d0f2      	beq.n	800e2ae <lv_draw_sw_blend_basic+0x7c6>
 800e2c8:	2aff      	cmp	r2, #255	; 0xff
 800e2ca:	d1d5      	bne.n	800e278 <lv_draw_sw_blend_basic+0x790>
 800e2cc:	883a      	ldrh	r2, [r7, #0]
 800e2ce:	8022      	strh	r2, [r4, #0]
 800e2d0:	e7ed      	b.n	800e2ae <lv_draw_sw_blend_basic+0x7c6>
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800e2d2:	2100      	movs	r1, #0
                for(; x < x_end4; x += 4) {
 800e2d4:	4589      	cmp	r9, r1
 800e2d6:	dc00      	bgt.n	800e2da <lv_draw_sw_blend_basic+0x7f2>
 800e2d8:	e15e      	b.n	800e598 <lv_draw_sw_blend_basic+0xab0>
 800e2da:	9c08      	ldr	r4, [sp, #32]
 800e2dc:	004a      	lsls	r2, r1, #1
 800e2de:	18a4      	adds	r4, r4, r2
 800e2e0:	464f      	mov	r7, r9
 800e2e2:	4452      	add	r2, sl
 800e2e4:	9007      	str	r0, [sp, #28]
 800e2e6:	e094      	b.n	800e412 <lv_draw_sw_blend_basic+0x92a>
                            MAP_NORMAL_MASK_PX(x)
 800e2e8:	781d      	ldrb	r5, [r3, #0]
 800e2ea:	2d00      	cmp	r5, #0
 800e2ec:	d01f      	beq.n	800e32e <lv_draw_sw_blend_basic+0x846>
 800e2ee:	2dff      	cmp	r5, #255	; 0xff
 800e2f0:	d100      	bne.n	800e2f4 <lv_draw_sw_blend_basic+0x80c>
 800e2f2:	e169      	b.n	800e5c8 <lv_draw_sw_blend_basic+0xae0>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e2f4:	8816      	ldrh	r6, [r2, #0]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e2f6:	3504      	adds	r5, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e2f8:	46b0      	mov	r8, r6
 800e2fa:	4640      	mov	r0, r8
 800e2fc:	0436      	lsls	r6, r6, #16
 800e2fe:	4306      	orrs	r6, r0
 800e300:	484b      	ldr	r0, [pc, #300]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e302:	08ed      	lsrs	r5, r5, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e304:	4006      	ands	r6, r0
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e306:	8820      	ldrh	r0, [r4, #0]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e308:	46b4      	mov	ip, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e30a:	4681      	mov	r9, r0
 800e30c:	0400      	lsls	r0, r0, #16
 800e30e:	0006      	movs	r6, r0
 800e310:	4648      	mov	r0, r9
 800e312:	4306      	orrs	r6, r0
 800e314:	4846      	ldr	r0, [pc, #280]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
 800e316:	4006      	ands	r6, r0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e318:	0030      	movs	r0, r6
 800e31a:	4666      	mov	r6, ip
 800e31c:	1b80      	subs	r0, r0, r6
 800e31e:	4345      	muls	r5, r0
 800e320:	4843      	ldr	r0, [pc, #268]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
 800e322:	096d      	lsrs	r5, r5, #5
 800e324:	4465      	add	r5, ip
 800e326:	4005      	ands	r5, r0
    ret.full = (uint16_t)((result >> 16) | result);
 800e328:	0c28      	lsrs	r0, r5, #16
 800e32a:	4305      	orrs	r5, r0
 800e32c:	8015      	strh	r5, [r2, #0]
                            MAP_NORMAL_MASK_PX(x + 1)
 800e32e:	785d      	ldrb	r5, [r3, #1]
 800e330:	2d00      	cmp	r5, #0
 800e332:	d020      	beq.n	800e376 <lv_draw_sw_blend_basic+0x88e>
 800e334:	2dff      	cmp	r5, #255	; 0xff
 800e336:	d100      	bne.n	800e33a <lv_draw_sw_blend_basic+0x852>
 800e338:	e14c      	b.n	800e5d4 <lv_draw_sw_blend_basic+0xaec>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e33a:	8850      	ldrh	r0, [r2, #2]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e33c:	3504      	adds	r5, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e33e:	4680      	mov	r8, r0
 800e340:	0400      	lsls	r0, r0, #16
 800e342:	0006      	movs	r6, r0
 800e344:	4640      	mov	r0, r8
 800e346:	4306      	orrs	r6, r0
 800e348:	4839      	ldr	r0, [pc, #228]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e34a:	08ed      	lsrs	r5, r5, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e34c:	4006      	ands	r6, r0
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e34e:	8860      	ldrh	r0, [r4, #2]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e350:	46b4      	mov	ip, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e352:	4681      	mov	r9, r0
 800e354:	0400      	lsls	r0, r0, #16
 800e356:	0006      	movs	r6, r0
 800e358:	4648      	mov	r0, r9
 800e35a:	4306      	orrs	r6, r0
 800e35c:	4834      	ldr	r0, [pc, #208]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
 800e35e:	4006      	ands	r6, r0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e360:	0030      	movs	r0, r6
 800e362:	4666      	mov	r6, ip
 800e364:	1b80      	subs	r0, r0, r6
 800e366:	4345      	muls	r5, r0
 800e368:	4831      	ldr	r0, [pc, #196]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
 800e36a:	096d      	lsrs	r5, r5, #5
 800e36c:	4465      	add	r5, ip
 800e36e:	4005      	ands	r5, r0
    ret.full = (uint16_t)((result >> 16) | result);
 800e370:	0c28      	lsrs	r0, r5, #16
 800e372:	4305      	orrs	r5, r0
 800e374:	8055      	strh	r5, [r2, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
 800e376:	789d      	ldrb	r5, [r3, #2]
 800e378:	2d00      	cmp	r5, #0
 800e37a:	d020      	beq.n	800e3be <lv_draw_sw_blend_basic+0x8d6>
 800e37c:	2dff      	cmp	r5, #255	; 0xff
 800e37e:	d100      	bne.n	800e382 <lv_draw_sw_blend_basic+0x89a>
 800e380:	e12b      	b.n	800e5da <lv_draw_sw_blend_basic+0xaf2>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e382:	8890      	ldrh	r0, [r2, #4]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e384:	3504      	adds	r5, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e386:	4680      	mov	r8, r0
 800e388:	0400      	lsls	r0, r0, #16
 800e38a:	0006      	movs	r6, r0
 800e38c:	4640      	mov	r0, r8
 800e38e:	4306      	orrs	r6, r0
 800e390:	4827      	ldr	r0, [pc, #156]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e392:	08ed      	lsrs	r5, r5, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e394:	4006      	ands	r6, r0
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e396:	88a0      	ldrh	r0, [r4, #4]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e398:	46b4      	mov	ip, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e39a:	4681      	mov	r9, r0
 800e39c:	0400      	lsls	r0, r0, #16
 800e39e:	0006      	movs	r6, r0
 800e3a0:	4648      	mov	r0, r9
 800e3a2:	4306      	orrs	r6, r0
 800e3a4:	4822      	ldr	r0, [pc, #136]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
 800e3a6:	4006      	ands	r6, r0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e3a8:	0030      	movs	r0, r6
 800e3aa:	4666      	mov	r6, ip
 800e3ac:	1b80      	subs	r0, r0, r6
 800e3ae:	4345      	muls	r5, r0
 800e3b0:	481f      	ldr	r0, [pc, #124]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
 800e3b2:	096d      	lsrs	r5, r5, #5
 800e3b4:	4465      	add	r5, ip
 800e3b6:	4005      	ands	r5, r0
    ret.full = (uint16_t)((result >> 16) | result);
 800e3b8:	0c28      	lsrs	r0, r5, #16
 800e3ba:	4305      	orrs	r5, r0
 800e3bc:	8095      	strh	r5, [r2, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 800e3be:	78dd      	ldrb	r5, [r3, #3]
 800e3c0:	2d00      	cmp	r5, #0
 800e3c2:	d020      	beq.n	800e406 <lv_draw_sw_blend_basic+0x91e>
 800e3c4:	2dff      	cmp	r5, #255	; 0xff
 800e3c6:	d100      	bne.n	800e3ca <lv_draw_sw_blend_basic+0x8e2>
 800e3c8:	e101      	b.n	800e5ce <lv_draw_sw_blend_basic+0xae6>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e3ca:	88d0      	ldrh	r0, [r2, #6]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e3cc:	3504      	adds	r5, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e3ce:	4680      	mov	r8, r0
 800e3d0:	0400      	lsls	r0, r0, #16
 800e3d2:	0006      	movs	r6, r0
 800e3d4:	4640      	mov	r0, r8
 800e3d6:	4306      	orrs	r6, r0
 800e3d8:	4815      	ldr	r0, [pc, #84]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e3da:	08ed      	lsrs	r5, r5, #3
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e3dc:	4006      	ands	r6, r0
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e3de:	88e0      	ldrh	r0, [r4, #6]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e3e0:	46b4      	mov	ip, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e3e2:	4681      	mov	r9, r0
 800e3e4:	0400      	lsls	r0, r0, #16
 800e3e6:	0006      	movs	r6, r0
 800e3e8:	4648      	mov	r0, r9
 800e3ea:	4306      	orrs	r6, r0
 800e3ec:	4810      	ldr	r0, [pc, #64]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
 800e3ee:	4006      	ands	r6, r0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e3f0:	0030      	movs	r0, r6
 800e3f2:	4666      	mov	r6, ip
 800e3f4:	1b80      	subs	r0, r0, r6
 800e3f6:	4345      	muls	r5, r0
 800e3f8:	480d      	ldr	r0, [pc, #52]	; (800e430 <lv_draw_sw_blend_basic+0x948>)
 800e3fa:	096d      	lsrs	r5, r5, #5
 800e3fc:	4465      	add	r5, ip
 800e3fe:	4005      	ands	r5, r0
    ret.full = (uint16_t)((result >> 16) | result);
 800e400:	0c28      	lsrs	r0, r5, #16
 800e402:	4305      	orrs	r5, r0
 800e404:	80d5      	strh	r5, [r2, #6]
                for(; x < x_end4; x += 4) {
 800e406:	3104      	adds	r1, #4
                    mask32++;
 800e408:	3304      	adds	r3, #4
                for(; x < x_end4; x += 4) {
 800e40a:	3408      	adds	r4, #8
 800e40c:	3208      	adds	r2, #8
 800e40e:	428f      	cmp	r7, r1
 800e410:	dd10      	ble.n	800e434 <lv_draw_sw_blend_basic+0x94c>
                    if(*mask32) {
 800e412:	681d      	ldr	r5, [r3, #0]
 800e414:	2d00      	cmp	r5, #0
 800e416:	d0f6      	beq.n	800e406 <lv_draw_sw_blend_basic+0x91e>
                        if((*mask32) == 0xFFFFFFFF) {
 800e418:	3501      	adds	r5, #1
 800e41a:	d000      	beq.n	800e41e <lv_draw_sw_blend_basic+0x936>
 800e41c:	e764      	b.n	800e2e8 <lv_draw_sw_blend_basic+0x800>
                            dest_buf[x] = src_buf[x];
 800e41e:	8825      	ldrh	r5, [r4, #0]
 800e420:	8015      	strh	r5, [r2, #0]
                            dest_buf[x + 1] = src_buf[x + 1];
 800e422:	8865      	ldrh	r5, [r4, #2]
 800e424:	8055      	strh	r5, [r2, #2]
                            dest_buf[x + 2] = src_buf[x + 2];
 800e426:	88a5      	ldrh	r5, [r4, #4]
 800e428:	8095      	strh	r5, [r2, #4]
                            dest_buf[x + 3] = src_buf[x + 3];
 800e42a:	88e5      	ldrh	r5, [r4, #6]
 800e42c:	80d5      	strh	r5, [r2, #6]
 800e42e:	e7ea      	b.n	800e406 <lv_draw_sw_blend_basic+0x91e>
 800e430:	07e0f81f 	.word	0x07e0f81f
                for(; x < w ; x++) {
 800e434:	9807      	ldr	r0, [sp, #28]
 800e436:	46b9      	mov	r9, r7
 800e438:	4288      	cmp	r0, r1
 800e43a:	dc00      	bgt.n	800e43e <lv_draw_sw_blend_basic+0x956>
 800e43c:	e0ac      	b.n	800e598 <lv_draw_sw_blend_basic+0xab0>
                    MAP_NORMAL_MASK_PX(x)
 800e43e:	781a      	ldrb	r2, [r3, #0]
 800e440:	2a00      	cmp	r2, #0
 800e442:	d01c      	beq.n	800e47e <lv_draw_sw_blend_basic+0x996>
 800e444:	2aff      	cmp	r2, #255	; 0xff
 800e446:	d100      	bne.n	800e44a <lv_draw_sw_blend_basic+0x962>
 800e448:	e0ca      	b.n	800e5e0 <lv_draw_sw_blend_basic+0xaf8>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e44a:	4654      	mov	r4, sl
 800e44c:	004f      	lsls	r7, r1, #1
 800e44e:	5be4      	ldrh	r4, [r4, r7]
 800e450:	4ecb      	ldr	r6, [pc, #812]	; (800e780 <lv_draw_sw_blend_basic+0xc98>)
 800e452:	0425      	lsls	r5, r4, #16
 800e454:	4325      	orrs	r5, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e456:	9c08      	ldr	r4, [sp, #32]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e458:	4035      	ands	r5, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e45a:	5be4      	ldrh	r4, [r4, r7]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e45c:	3204      	adds	r2, #4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e45e:	46a4      	mov	ip, r4
 800e460:	4666      	mov	r6, ip
 800e462:	0424      	lsls	r4, r4, #16
 800e464:	4334      	orrs	r4, r6
 800e466:	4ec6      	ldr	r6, [pc, #792]	; (800e780 <lv_draw_sw_blend_basic+0xc98>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e468:	08d2      	lsrs	r2, r2, #3
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e46a:	4034      	ands	r4, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e46c:	1b64      	subs	r4, r4, r5
 800e46e:	4362      	muls	r2, r4
 800e470:	0952      	lsrs	r2, r2, #5
 800e472:	1955      	adds	r5, r2, r5
 800e474:	4035      	ands	r5, r6
    ret.full = (uint16_t)((result >> 16) | result);
 800e476:	0c2a      	lsrs	r2, r5, #16
 800e478:	4315      	orrs	r5, r2
 800e47a:	4652      	mov	r2, sl
 800e47c:	53d5      	strh	r5, [r2, r7]
                for(; x < w ; x++) {
 800e47e:	1c4c      	adds	r4, r1, #1
 800e480:	4284      	cmp	r4, r0
 800e482:	db00      	blt.n	800e486 <lv_draw_sw_blend_basic+0x99e>
 800e484:	e088      	b.n	800e598 <lv_draw_sw_blend_basic+0xab0>
                    MAP_NORMAL_MASK_PX(x)
 800e486:	785a      	ldrb	r2, [r3, #1]
 800e488:	2a00      	cmp	r2, #0
 800e48a:	d01c      	beq.n	800e4c6 <lv_draw_sw_blend_basic+0x9de>
 800e48c:	0064      	lsls	r4, r4, #1
 800e48e:	2aff      	cmp	r2, #255	; 0xff
 800e490:	d100      	bne.n	800e494 <lv_draw_sw_blend_basic+0x9ac>
 800e492:	e0ab      	b.n	800e5ec <lv_draw_sw_blend_basic+0xb04>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e494:	4655      	mov	r5, sl
 800e496:	5b2d      	ldrh	r5, [r5, r4]
 800e498:	4eb9      	ldr	r6, [pc, #740]	; (800e780 <lv_draw_sw_blend_basic+0xc98>)
 800e49a:	042f      	lsls	r7, r5, #16
 800e49c:	432f      	orrs	r7, r5
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e49e:	9d08      	ldr	r5, [sp, #32]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e4a0:	4037      	ands	r7, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e4a2:	5b2d      	ldrh	r5, [r5, r4]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e4a4:	3204      	adds	r2, #4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e4a6:	46ac      	mov	ip, r5
 800e4a8:	4666      	mov	r6, ip
 800e4aa:	042d      	lsls	r5, r5, #16
 800e4ac:	4335      	orrs	r5, r6
 800e4ae:	4eb4      	ldr	r6, [pc, #720]	; (800e780 <lv_draw_sw_blend_basic+0xc98>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e4b0:	08d2      	lsrs	r2, r2, #3
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e4b2:	4035      	ands	r5, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e4b4:	1bed      	subs	r5, r5, r7
 800e4b6:	436a      	muls	r2, r5
 800e4b8:	0952      	lsrs	r2, r2, #5
 800e4ba:	19d7      	adds	r7, r2, r7
 800e4bc:	4037      	ands	r7, r6
    ret.full = (uint16_t)((result >> 16) | result);
 800e4be:	0c3a      	lsrs	r2, r7, #16
 800e4c0:	4317      	orrs	r7, r2
 800e4c2:	4652      	mov	r2, sl
 800e4c4:	5317      	strh	r7, [r2, r4]
                for(; x < w ; x++) {
 800e4c6:	1c8c      	adds	r4, r1, #2
 800e4c8:	42a0      	cmp	r0, r4
 800e4ca:	dd65      	ble.n	800e598 <lv_draw_sw_blend_basic+0xab0>
                    MAP_NORMAL_MASK_PX(x)
 800e4cc:	789a      	ldrb	r2, [r3, #2]
 800e4ce:	2a00      	cmp	r2, #0
 800e4d0:	d01c      	beq.n	800e50c <lv_draw_sw_blend_basic+0xa24>
 800e4d2:	0064      	lsls	r4, r4, #1
 800e4d4:	2aff      	cmp	r2, #255	; 0xff
 800e4d6:	d100      	bne.n	800e4da <lv_draw_sw_blend_basic+0x9f2>
 800e4d8:	e0cb      	b.n	800e672 <lv_draw_sw_blend_basic+0xb8a>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e4da:	4655      	mov	r5, sl
 800e4dc:	5b2d      	ldrh	r5, [r5, r4]
 800e4de:	4ea8      	ldr	r6, [pc, #672]	; (800e780 <lv_draw_sw_blend_basic+0xc98>)
 800e4e0:	042f      	lsls	r7, r5, #16
 800e4e2:	432f      	orrs	r7, r5
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e4e4:	9d08      	ldr	r5, [sp, #32]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e4e6:	4037      	ands	r7, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e4e8:	5b2d      	ldrh	r5, [r5, r4]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e4ea:	3204      	adds	r2, #4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e4ec:	46ac      	mov	ip, r5
 800e4ee:	4666      	mov	r6, ip
 800e4f0:	042d      	lsls	r5, r5, #16
 800e4f2:	4335      	orrs	r5, r6
 800e4f4:	4ea2      	ldr	r6, [pc, #648]	; (800e780 <lv_draw_sw_blend_basic+0xc98>)
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e4f6:	08d2      	lsrs	r2, r2, #3
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e4f8:	4035      	ands	r5, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e4fa:	1bed      	subs	r5, r5, r7
 800e4fc:	436a      	muls	r2, r5
 800e4fe:	0952      	lsrs	r2, r2, #5
 800e500:	19d7      	adds	r7, r2, r7
 800e502:	4037      	ands	r7, r6
    ret.full = (uint16_t)((result >> 16) | result);
 800e504:	0c3a      	lsrs	r2, r7, #16
 800e506:	4317      	orrs	r7, r2
 800e508:	4652      	mov	r2, sl
 800e50a:	5317      	strh	r7, [r2, r4]
                for(; x < w ; x++) {
 800e50c:	1ccc      	adds	r4, r1, #3
 800e50e:	42a0      	cmp	r0, r4
 800e510:	dd42      	ble.n	800e598 <lv_draw_sw_blend_basic+0xab0>
                    MAP_NORMAL_MASK_PX(x)
 800e512:	78da      	ldrb	r2, [r3, #3]
 800e514:	2a00      	cmp	r2, #0
 800e516:	d01e      	beq.n	800e556 <lv_draw_sw_blend_basic+0xa6e>
 800e518:	0064      	lsls	r4, r4, #1
 800e51a:	2aff      	cmp	r2, #255	; 0xff
 800e51c:	d100      	bne.n	800e520 <lv_draw_sw_blend_basic+0xa38>
 800e51e:	e0ad      	b.n	800e67c <lv_draw_sw_blend_basic+0xb94>
 800e520:	46a4      	mov	ip, r4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e522:	4654      	mov	r4, sl
 800e524:	4665      	mov	r5, ip
 800e526:	5b64      	ldrh	r4, [r4, r5]
 800e528:	4e95      	ldr	r6, [pc, #596]	; (800e780 <lv_draw_sw_blend_basic+0xc98>)
 800e52a:	0425      	lsls	r5, r4, #16
 800e52c:	4325      	orrs	r5, r4
 800e52e:	4035      	ands	r5, r6
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e530:	4666      	mov	r6, ip
 800e532:	9c08      	ldr	r4, [sp, #32]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e534:	3204      	adds	r2, #4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e536:	5ba7      	ldrh	r7, [r4, r6]
 800e538:	4e91      	ldr	r6, [pc, #580]	; (800e780 <lv_draw_sw_blend_basic+0xc98>)
 800e53a:	043c      	lsls	r4, r7, #16
 800e53c:	433c      	orrs	r4, r7
 800e53e:	4034      	ands	r4, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e540:	1b64      	subs	r4, r4, r5
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e542:	08d2      	lsrs	r2, r2, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e544:	4362      	muls	r2, r4
 800e546:	0952      	lsrs	r2, r2, #5
 800e548:	1955      	adds	r5, r2, r5
 800e54a:	4035      	ands	r5, r6
    ret.full = (uint16_t)((result >> 16) | result);
 800e54c:	0c2a      	lsrs	r2, r5, #16
 800e54e:	4315      	orrs	r5, r2
 800e550:	4664      	mov	r4, ip
 800e552:	4652      	mov	r2, sl
 800e554:	5315      	strh	r5, [r2, r4]
                for(; x < w ; x++) {
 800e556:	3104      	adds	r1, #4
 800e558:	4288      	cmp	r0, r1
 800e55a:	dd1d      	ble.n	800e598 <lv_draw_sw_blend_basic+0xab0>
                    MAP_NORMAL_MASK_PX(x)
 800e55c:	791b      	ldrb	r3, [r3, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d01a      	beq.n	800e598 <lv_draw_sw_blend_basic+0xab0>
 800e562:	0049      	lsls	r1, r1, #1
 800e564:	2bff      	cmp	r3, #255	; 0xff
 800e566:	d100      	bne.n	800e56a <lv_draw_sw_blend_basic+0xa82>
 800e568:	e08d      	b.n	800e686 <lv_draw_sw_blend_basic+0xb9e>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e56a:	4652      	mov	r2, sl
 800e56c:	4d84      	ldr	r5, [pc, #528]	; (800e780 <lv_draw_sw_blend_basic+0xc98>)
 800e56e:	5a52      	ldrh	r2, [r2, r1]
 800e570:	002e      	movs	r6, r5
 800e572:	0414      	lsls	r4, r2, #16
 800e574:	4314      	orrs	r4, r2
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e576:	9a08      	ldr	r2, [sp, #32]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e578:	402c      	ands	r4, r5
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e57a:	5a55      	ldrh	r5, [r2, r1]
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e57c:	3304      	adds	r3, #4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e57e:	042a      	lsls	r2, r5, #16
 800e580:	432a      	orrs	r2, r5
 800e582:	4032      	ands	r2, r6
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e584:	1b12      	subs	r2, r2, r4
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e586:	08db      	lsrs	r3, r3, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e588:	4353      	muls	r3, r2
 800e58a:	095b      	lsrs	r3, r3, #5
 800e58c:	191c      	adds	r4, r3, r4
 800e58e:	4034      	ands	r4, r6
    ret.full = (uint16_t)((result >> 16) | result);
 800e590:	0c23      	lsrs	r3, r4, #16
 800e592:	431c      	orrs	r4, r3
 800e594:	4653      	mov	r3, sl
 800e596:	525c      	strh	r4, [r3, r1]
                dest_buf += dest_stride;
 800e598:	9b09      	ldr	r3, [sp, #36]	; 0x24
                src_buf += src_stride;
 800e59a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
                dest_buf += dest_stride;
 800e59c:	469c      	mov	ip, r3
 800e59e:	44e2      	add	sl, ip
                src_buf += src_stride;
 800e5a0:	4694      	mov	ip, r2
 800e5a2:	9b08      	ldr	r3, [sp, #32]
            for(y = 0; y < h; y++) {
 800e5a4:	9a06      	ldr	r2, [sp, #24]
                src_buf += src_stride;
 800e5a6:	4463      	add	r3, ip
 800e5a8:	9308      	str	r3, [sp, #32]
                mask += mask_stride;
 800e5aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5ac:	469c      	mov	ip, r3
            for(y = 0; y < h; y++) {
 800e5ae:	9b05      	ldr	r3, [sp, #20]
                mask += mask_stride;
 800e5b0:	44e3      	add	fp, ip
            for(y = 0; y < h; y++) {
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	9305      	str	r3, [sp, #20]
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	dd00      	ble.n	800e5bc <lv_draw_sw_blend_basic+0xad4>
 800e5ba:	e650      	b.n	800e25e <lv_draw_sw_blend_basic+0x776>
 800e5bc:	f7ff faba 	bl	800db34 <lv_draw_sw_blend_basic+0x4c>
                for(; x < x_end4; x += 4) {
 800e5c0:	4589      	cmp	r9, r1
 800e5c2:	dd00      	ble.n	800e5c6 <lv_draw_sw_blend_basic+0xade>
 800e5c4:	e689      	b.n	800e2da <lv_draw_sw_blend_basic+0x7f2>
 800e5c6:	e73a      	b.n	800e43e <lv_draw_sw_blend_basic+0x956>
                            MAP_NORMAL_MASK_PX(x)
 800e5c8:	8825      	ldrh	r5, [r4, #0]
 800e5ca:	8015      	strh	r5, [r2, #0]
 800e5cc:	e6af      	b.n	800e32e <lv_draw_sw_blend_basic+0x846>
                            MAP_NORMAL_MASK_PX(x + 3)
 800e5ce:	88e5      	ldrh	r5, [r4, #6]
 800e5d0:	80d5      	strh	r5, [r2, #6]
 800e5d2:	e718      	b.n	800e406 <lv_draw_sw_blend_basic+0x91e>
                            MAP_NORMAL_MASK_PX(x + 1)
 800e5d4:	8865      	ldrh	r5, [r4, #2]
 800e5d6:	8055      	strh	r5, [r2, #2]
 800e5d8:	e6cd      	b.n	800e376 <lv_draw_sw_blend_basic+0x88e>
                            MAP_NORMAL_MASK_PX(x + 2)
 800e5da:	88a5      	ldrh	r5, [r4, #4]
 800e5dc:	8095      	strh	r5, [r2, #4]
 800e5de:	e6ee      	b.n	800e3be <lv_draw_sw_blend_basic+0x8d6>
                    MAP_NORMAL_MASK_PX(x)
 800e5e0:	4655      	mov	r5, sl
 800e5e2:	9c08      	ldr	r4, [sp, #32]
 800e5e4:	004a      	lsls	r2, r1, #1
 800e5e6:	5aa4      	ldrh	r4, [r4, r2]
 800e5e8:	52ac      	strh	r4, [r5, r2]
 800e5ea:	e748      	b.n	800e47e <lv_draw_sw_blend_basic+0x996>
 800e5ec:	4655      	mov	r5, sl
 800e5ee:	9a08      	ldr	r2, [sp, #32]
 800e5f0:	5b12      	ldrh	r2, [r2, r4]
 800e5f2:	532a      	strh	r2, [r5, r4]
 800e5f4:	e767      	b.n	800e4c6 <lv_draw_sw_blend_basic+0x9de>
            for(y = 0; y < h; y++) {
 800e5f6:	9b06      	ldr	r3, [sp, #24]
        if(opa >= LV_OPA_MAX) {
 800e5f8:	2ffc      	cmp	r7, #252	; 0xfc
 800e5fa:	d849      	bhi.n	800e690 <lv_draw_sw_blend_basic+0xba8>
            for(y = 0; y < h; y++) {
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	dc01      	bgt.n	800e604 <lv_draw_sw_blend_basic+0xb1c>
 800e600:	f7ff fa98 	bl	800db34 <lv_draw_sw_blend_basic+0x4c>
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e604:	3704      	adds	r7, #4
 800e606:	08fb      	lsrs	r3, r7, #3
 800e608:	469c      	mov	ip, r3
                dest_buf += dest_stride;
 800e60a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(y = 0; y < h; y++) {
 800e60c:	2600      	movs	r6, #0
                dest_buf += dest_stride;
 800e60e:	005b      	lsls	r3, r3, #1
 800e610:	4698      	mov	r8, r3
                src_buf += src_stride;
 800e612:	006b      	lsls	r3, r5, #1
 800e614:	4699      	mov	r9, r3
 800e616:	2800      	cmp	r0, #0
 800e618:	dc01      	bgt.n	800e61e <lv_draw_sw_blend_basic+0xb36>
 800e61a:	f7ff fa8b 	bl	800db34 <lv_draw_sw_blend_basic+0x4c>
 800e61e:	0002      	movs	r2, r0
 800e620:	4663      	mov	r3, ip
 800e622:	4650      	mov	r0, sl
 800e624:	4692      	mov	sl, r2
 800e626:	46b3      	mov	fp, r6
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e628:	4f55      	ldr	r7, [pc, #340]	; (800e780 <lv_draw_sw_blend_basic+0xc98>)
 800e62a:	9e08      	ldr	r6, [sp, #32]
 800e62c:	9305      	str	r3, [sp, #20]
            for(y = 0; y < h; y++) {
 800e62e:	2100      	movs	r1, #0
                for(x = 0; x < w; x++) {
 800e630:	2400      	movs	r4, #0
 800e632:	5a42      	ldrh	r2, [r0, r1]
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e634:	5a75      	ldrh	r5, [r6, r1]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e636:	0413      	lsls	r3, r2, #16
 800e638:	4313      	orrs	r3, r2
 800e63a:	403b      	ands	r3, r7
 800e63c:	001a      	movs	r2, r3
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e63e:	042b      	lsls	r3, r5, #16
 800e640:	432b      	orrs	r3, r5
 800e642:	403b      	ands	r3, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e644:	9d05      	ldr	r5, [sp, #20]
 800e646:	1a9b      	subs	r3, r3, r2
 800e648:	436b      	muls	r3, r5
 800e64a:	095b      	lsrs	r3, r3, #5
 800e64c:	189b      	adds	r3, r3, r2
 800e64e:	403b      	ands	r3, r7
    ret.full = (uint16_t)((result >> 16) | result);
 800e650:	0c1a      	lsrs	r2, r3, #16
 800e652:	4313      	orrs	r3, r2
 800e654:	3401      	adds	r4, #1
                    dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
 800e656:	5243      	strh	r3, [r0, r1]
                for(x = 0; x < w; x++) {
 800e658:	3102      	adds	r1, #2
 800e65a:	45a2      	cmp	sl, r4
 800e65c:	dce9      	bgt.n	800e632 <lv_draw_sw_blend_basic+0xb4a>
            for(y = 0; y < h; y++) {
 800e65e:	2301      	movs	r3, #1
 800e660:	469c      	mov	ip, r3
 800e662:	9b06      	ldr	r3, [sp, #24]
 800e664:	44e3      	add	fp, ip
                dest_buf += dest_stride;
 800e666:	4440      	add	r0, r8
                src_buf += src_stride;
 800e668:	444e      	add	r6, r9
            for(y = 0; y < h; y++) {
 800e66a:	455b      	cmp	r3, fp
 800e66c:	dcdf      	bgt.n	800e62e <lv_draw_sw_blend_basic+0xb46>
 800e66e:	f7ff fa61 	bl	800db34 <lv_draw_sw_blend_basic+0x4c>
                    MAP_NORMAL_MASK_PX(x)
 800e672:	4655      	mov	r5, sl
 800e674:	9a08      	ldr	r2, [sp, #32]
 800e676:	5b12      	ldrh	r2, [r2, r4]
 800e678:	532a      	strh	r2, [r5, r4]
 800e67a:	e747      	b.n	800e50c <lv_draw_sw_blend_basic+0xa24>
 800e67c:	4655      	mov	r5, sl
 800e67e:	9a08      	ldr	r2, [sp, #32]
 800e680:	5b12      	ldrh	r2, [r2, r4]
 800e682:	532a      	strh	r2, [r5, r4]
 800e684:	e767      	b.n	800e556 <lv_draw_sw_blend_basic+0xa6e>
 800e686:	4652      	mov	r2, sl
 800e688:	9b08      	ldr	r3, [sp, #32]
 800e68a:	5a5b      	ldrh	r3, [r3, r1]
 800e68c:	5253      	strh	r3, [r2, r1]
 800e68e:	e783      	b.n	800e598 <lv_draw_sw_blend_basic+0xab0>
            for(y = 0; y < h; y++) {
 800e690:	2b00      	cmp	r3, #0
 800e692:	dc01      	bgt.n	800e698 <lv_draw_sw_blend_basic+0xbb0>
 800e694:	f7ff fa4e 	bl	800db34 <lv_draw_sw_blend_basic+0x4c>
                dest_buf += dest_stride;
 800e698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                src_buf += src_stride;
 800e69a:	006d      	lsls	r5, r5, #1
                dest_buf += dest_stride;
 800e69c:	005e      	lsls	r6, r3, #1
            for(y = 0; y < h; y++) {
 800e69e:	002b      	movs	r3, r5
 800e6a0:	2400      	movs	r4, #0
 800e6a2:	4655      	mov	r5, sl
 800e6a4:	469a      	mov	sl, r3
 800e6a6:	46b1      	mov	r9, r6
 800e6a8:	0026      	movs	r6, r4
 800e6aa:	9c08      	ldr	r4, [sp, #32]
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 800e6ac:	0047      	lsls	r7, r0, #1
 800e6ae:	0021      	movs	r1, r4
 800e6b0:	0028      	movs	r0, r5
 800e6b2:	003a      	movs	r2, r7
 800e6b4:	f003 fe2e 	bl	8012314 <lv_memcpy>
            for(y = 0; y < h; y++) {
 800e6b8:	9b06      	ldr	r3, [sp, #24]
 800e6ba:	3601      	adds	r6, #1
                dest_buf += dest_stride;
 800e6bc:	444d      	add	r5, r9
                src_buf += src_stride;
 800e6be:	4454      	add	r4, sl
            for(y = 0; y < h; y++) {
 800e6c0:	42b3      	cmp	r3, r6
 800e6c2:	dcf4      	bgt.n	800e6ae <lv_draw_sw_blend_basic+0xbc6>
 800e6c4:	f7ff fa36 	bl	800db34 <lv_draw_sw_blend_basic+0x4c>
            last_dest_color.full = dest_buf[0].full;
 800e6c8:	4652      	mov	r2, sl
 800e6ca:	8811      	ldrh	r1, [r2, #0]
            for(y = 0; y < h; y++) {
 800e6cc:	9a05      	ldr	r2, [sp, #20]
 800e6ce:	2a00      	cmp	r2, #0
 800e6d0:	dc01      	bgt.n	800e6d6 <lv_draw_sw_blend_basic+0xbee>
 800e6d2:	f7ff fa2f 	bl	800db34 <lv_draw_sw_blend_basic+0x4c>
                dest_buf += dest_stride;
 800e6d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e6d8:	0052      	lsls	r2, r2, #1
 800e6da:	9208      	str	r2, [sp, #32]
                mask += (mask_stride - w);
 800e6dc:	464a      	mov	r2, r9
 800e6de:	1bd2      	subs	r2, r2, r7
 800e6e0:	2f00      	cmp	r7, #0
 800e6e2:	dc01      	bgt.n	800e6e8 <lv_draw_sw_blend_basic+0xc00>
 800e6e4:	f7ff fa26 	bl	800db34 <lv_draw_sw_blend_basic+0x4c>
 800e6e8:	007c      	lsls	r4, r7, #1
 800e6ea:	4454      	add	r4, sl
 800e6ec:	46a0      	mov	r8, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e6ee:	431d      	orrs	r5, r3
 800e6f0:	4b23      	ldr	r3, [pc, #140]	; (800e780 <lv_draw_sw_blend_basic+0xc98>)
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 800e6f2:	2400      	movs	r4, #0
 800e6f4:	401d      	ands	r5, r3
 800e6f6:	46a9      	mov	r9, r5
 800e6f8:	000b      	movs	r3, r1
 800e6fa:	4646      	mov	r6, r8
 800e6fc:	000d      	movs	r5, r1
 800e6fe:	18ba      	adds	r2, r7, r2
 800e700:	9406      	str	r4, [sp, #24]
            for(y = 0; y < h; y++) {
 800e702:	9407      	str	r4, [sp, #28]
 800e704:	9209      	str	r2, [sp, #36]	; 0x24
                for(x = 0; x < w; x++) {
 800e706:	4652      	mov	r2, sl
            for(y = 0; y < h; y++) {
 800e708:	4659      	mov	r1, fp
                    if(*mask) {
 800e70a:	780c      	ldrb	r4, [r1, #0]
 800e70c:	2c00      	cmp	r4, #0
 800e70e:	d01a      	beq.n	800e746 <lv_draw_sw_blend_basic+0xc5e>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 800e710:	4284      	cmp	r4, r0
 800e712:	d02c      	beq.n	800e76e <lv_draw_sw_blend_basic+0xc86>
 800e714:	2cff      	cmp	r4, #255	; 0xff
 800e716:	d030      	beq.n	800e77a <lv_draw_sw_blend_basic+0xc92>
                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
 800e718:	4660      	mov	r0, ip
 800e71a:	4360      	muls	r0, r4
 800e71c:	0a03      	lsrs	r3, r0, #8
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 800e71e:	9306      	str	r3, [sp, #24]
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 800e720:	8815      	ldrh	r5, [r2, #0]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800e722:	4f17      	ldr	r7, [pc, #92]	; (800e780 <lv_draw_sw_blend_basic+0xc98>)
 800e724:	0428      	lsls	r0, r5, #16
 800e726:	4328      	orrs	r0, r5
 800e728:	4038      	ands	r0, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e72a:	464f      	mov	r7, r9
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e72c:	3304      	adds	r3, #4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e72e:	1a3f      	subs	r7, r7, r0
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e730:	08db      	lsrs	r3, r3, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e732:	437b      	muls	r3, r7
 800e734:	095b      	lsrs	r3, r3, #5
 800e736:	1818      	adds	r0, r3, r0
 800e738:	4b11      	ldr	r3, [pc, #68]	; (800e780 <lv_draw_sw_blend_basic+0xc98>)
 800e73a:	4018      	ands	r0, r3
    ret.full = (uint16_t)((result >> 16) | result);
 800e73c:	0c03      	lsrs	r3, r0, #16
 800e73e:	4303      	orrs	r3, r0
 800e740:	0020      	movs	r0, r4
 800e742:	b29b      	uxth	r3, r3
                        dest_buf[x] = last_res_color;
 800e744:	8013      	strh	r3, [r2, #0]
                for(x = 0; x < w; x++) {
 800e746:	3202      	adds	r2, #2
                    mask++;
 800e748:	3101      	adds	r1, #1
                for(x = 0; x < w; x++) {
 800e74a:	4296      	cmp	r6, r2
 800e74c:	d1dd      	bne.n	800e70a <lv_draw_sw_blend_basic+0xc22>
                dest_buf += dest_stride;
 800e74e:	9908      	ldr	r1, [sp, #32]
 800e750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e752:	4688      	mov	r8, r1
 800e754:	44c2      	add	sl, r8
                mask += (mask_stride - w);
 800e756:	4690      	mov	r8, r2
 800e758:	44c3      	add	fp, r8
            for(y = 0; y < h; y++) {
 800e75a:	4688      	mov	r8, r1
 800e75c:	9a07      	ldr	r2, [sp, #28]
 800e75e:	9905      	ldr	r1, [sp, #20]
 800e760:	3201      	adds	r2, #1
 800e762:	9207      	str	r2, [sp, #28]
 800e764:	4446      	add	r6, r8
 800e766:	4291      	cmp	r1, r2
 800e768:	dccd      	bgt.n	800e706 <lv_draw_sw_blend_basic+0xc1e>
 800e76a:	f7ff f9e3 	bl	800db34 <lv_draw_sw_blend_basic+0x4c>
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 800e76e:	8817      	ldrh	r7, [r2, #0]
 800e770:	42af      	cmp	r7, r5
 800e772:	d0e7      	beq.n	800e744 <lv_draw_sw_blend_basic+0xc5c>
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e774:	003d      	movs	r5, r7
 800e776:	9b06      	ldr	r3, [sp, #24]
 800e778:	e7d3      	b.n	800e722 <lv_draw_sw_blend_basic+0xc3a>
 800e77a:	4663      	mov	r3, ip
 800e77c:	9306      	str	r3, [sp, #24]
 800e77e:	e7cf      	b.n	800e720 <lv_draw_sw_blend_basic+0xc38>
 800e780:	07e0f81f 	.word	0x07e0f81f
        if(opa >= LV_OPA_MAX) {
 800e784:	4663      	mov	r3, ip
 800e786:	2bfc      	cmp	r3, #252	; 0xfc
 800e788:	d918      	bls.n	800e7bc <lv_draw_sw_blend_basic+0xcd4>
            for(y = 0; y < h; y++) {
 800e78a:	9b05      	ldr	r3, [sp, #20]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	dc01      	bgt.n	800e794 <lv_draw_sw_blend_basic+0xcac>
 800e790:	f7ff f9d0 	bl	800db34 <lv_draw_sw_blend_basic+0x4c>
 800e794:	46a8      	mov	r8, r5
 800e796:	2400      	movs	r4, #0
 800e798:	4655      	mov	r5, sl
                dest_buf += dest_stride;
 800e79a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e79c:	005e      	lsls	r6, r3, #1
                lv_color_fill(dest_buf, color, w);
 800e79e:	0028      	movs	r0, r5
 800e7a0:	003a      	movs	r2, r7
 800e7a2:	4641      	mov	r1, r8
 800e7a4:	f003 f894 	bl	80118d0 <lv_color_fill>
            for(y = 0; y < h; y++) {
 800e7a8:	9b05      	ldr	r3, [sp, #20]
 800e7aa:	3401      	adds	r4, #1
                dest_buf += dest_stride;
 800e7ac:	19ad      	adds	r5, r5, r6
            for(y = 0; y < h; y++) {
 800e7ae:	42a3      	cmp	r3, r4
 800e7b0:	dcf5      	bgt.n	800e79e <lv_draw_sw_blend_basic+0xcb6>
 800e7b2:	f7ff f9bf 	bl	800db34 <lv_draw_sw_blend_basic+0x4c>
                    FILL_NORMAL_MASK_PX(color)
 800e7b6:	000f      	movs	r7, r1
 800e7b8:	0018      	movs	r0, r3
 800e7ba:	e48c      	b.n	800e0d6 <lv_draw_sw_blend_basic+0x5ee>
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e7bc:	042b      	lsls	r3, r5, #16
 800e7be:	0018      	movs	r0, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e7c0:	4661      	mov	r1, ip
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e7c2:	4a52      	ldr	r2, [pc, #328]	; (800e90c <lv_draw_sw_blend_basic+0xe24>)
 800e7c4:	4328      	orrs	r0, r5
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800e7c6:	3104      	adds	r1, #4
 800e7c8:	08c9      	lsrs	r1, r1, #3
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800e7ca:	4010      	ands	r0, r2
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e7cc:	4348      	muls	r0, r1
            opa = opa << 3;
 800e7ce:	00c9      	lsls	r1, r1, #3
 800e7d0:	b2c9      	uxtb	r1, r1
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 800e7d2:	0edb      	lsrs	r3, r3, #27
 800e7d4:	434b      	muls	r3, r1
 800e7d6:	9306      	str	r3, [sp, #24]
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 800e7d8:	056b      	lsls	r3, r5, #21
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 800e7da:	06ed      	lsls	r5, r5, #27
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 800e7dc:	0e9b      	lsrs	r3, r3, #26
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 800e7de:	0eed      	lsrs	r5, r5, #27
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 800e7e0:	434b      	muls	r3, r1
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 800e7e2:	434d      	muls	r5, r1
            lv_opa_t opa_inv = 255 - opa;
 800e7e4:	43c9      	mvns	r1, r1
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800e7e6:	0940      	lsrs	r0, r0, #5
 800e7e8:	4010      	ands	r0, r2
    return ret;
 800e7ea:	06c2      	lsls	r2, r0, #27
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 800e7ec:	9307      	str	r3, [sp, #28]
 800e7ee:	b2cb      	uxtb	r3, r1
 800e7f0:	0ed2      	lsrs	r2, r2, #27
 800e7f2:	4699      	mov	r9, r3
            for(y = 0; y < h; y++) {
 800e7f4:	9b05      	ldr	r3, [sp, #20]
 800e7f6:	0016      	movs	r6, r2
 800e7f8:	0d42      	lsrs	r2, r0, #21
 800e7fa:	0400      	lsls	r0, r0, #16
 800e7fc:	4690      	mov	r8, r2
 800e7fe:	0ec0      	lsrs	r0, r0, #27
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 800e800:	9508      	str	r5, [sp, #32]
 800e802:	2b00      	cmp	r3, #0
 800e804:	dc01      	bgt.n	800e80a <lv_draw_sw_blend_basic+0xd22>
 800e806:	f7ff f995 	bl	800db34 <lv_draw_sw_blend_basic+0x4c>
                dest_buf += dest_stride;
 800e80a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e80c:	005b      	lsls	r3, r3, #1
 800e80e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e810:	2f00      	cmp	r7, #0
 800e812:	dc01      	bgt.n	800e818 <lv_draw_sw_blend_basic+0xd30>
 800e814:	f7ff f98e 	bl	800db34 <lv_draw_sw_blend_basic+0x4c>
            for(y = 0; y < h; y++) {
 800e818:	2200      	movs	r2, #0
 800e81a:	007f      	lsls	r7, r7, #1
 800e81c:	003b      	movs	r3, r7
 800e81e:	920a      	str	r2, [sp, #40]	; 0x28
                    dest_buf[x] = last_res_color;
 800e820:	4a3b      	ldr	r2, [pc, #236]	; (800e910 <lv_draw_sw_blend_basic+0xe28>)
 800e822:	4453      	add	r3, sl
 800e824:	4693      	mov	fp, r2
 800e826:	4652      	mov	r2, sl
                dest_buf += dest_stride;
 800e828:	2100      	movs	r1, #0
                    dest_buf[x] = last_res_color;
 800e82a:	241f      	movs	r4, #31
 800e82c:	464f      	mov	r7, r9
 800e82e:	469c      	mov	ip, r3
 800e830:	9209      	str	r2, [sp, #36]	; 0x24
            for(y = 0; y < h; y++) {
 800e832:	000b      	movs	r3, r1
 800e834:	46b1      	mov	r9, r6
 800e836:	9a09      	ldr	r2, [sp, #36]	; 0x24
                    if(last_dest_color.full != dest_buf[x].full) {
 800e838:	8811      	ldrh	r1, [r2, #0]
 800e83a:	4299      	cmp	r1, r3
 800e83c:	d041      	beq.n	800e8c2 <lv_draw_sw_blend_basic+0xdda>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800e83e:	7850      	ldrb	r0, [r2, #1]
 800e840:	9b06      	ldr	r3, [sp, #24]
 800e842:	08c0      	lsrs	r0, r0, #3
 800e844:	4378      	muls	r0, r7
 800e846:	18c5      	adds	r5, r0, r3
 800e848:	0228      	lsls	r0, r5, #8
 800e84a:	1940      	adds	r0, r0, r5
 800e84c:	01c0      	lsls	r0, r0, #7
 800e84e:	1940      	adds	r0, r0, r5
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800e850:	9d07      	ldr	r5, [sp, #28]
 800e852:	054b      	lsls	r3, r1, #21
 800e854:	46a8      	mov	r8, r5
 800e856:	0e9b      	lsrs	r3, r3, #26
 800e858:	437b      	muls	r3, r7
 800e85a:	4443      	add	r3, r8
 800e85c:	021d      	lsls	r5, r3, #8
 800e85e:	18ed      	adds	r5, r5, r3
 800e860:	01ed      	lsls	r5, r5, #7
 800e862:	18eb      	adds	r3, r5, r3
 800e864:	253f      	movs	r5, #63	; 0x3f
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800e866:	9e08      	ldr	r6, [sp, #32]
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800e868:	0ddb      	lsrs	r3, r3, #23
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800e86a:	46b1      	mov	r9, r6
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800e86c:	401d      	ands	r5, r3
 800e86e:	46a8      	mov	r8, r5
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800e870:	7815      	ldrb	r5, [r2, #0]
 800e872:	0026      	movs	r6, r4
 800e874:	46aa      	mov	sl, r5
 800e876:	06ed      	lsls	r5, r5, #27
 800e878:	0eed      	lsrs	r5, r5, #27
 800e87a:	437d      	muls	r5, r7
 800e87c:	44a9      	add	r9, r5
 800e87e:	464d      	mov	r5, r9
 800e880:	022d      	lsls	r5, r5, #8
 800e882:	444d      	add	r5, r9
 800e884:	01ed      	lsls	r5, r5, #7
 800e886:	444d      	add	r5, r9
 800e888:	0ded      	lsrs	r5, r5, #23
 800e88a:	402e      	ands	r6, r5
                    dest_buf[x] = last_res_color;
 800e88c:	0035      	movs	r5, r6
 800e88e:	46b1      	mov	r9, r6
 800e890:	4656      	mov	r6, sl
 800e892:	43a6      	bics	r6, r4
 800e894:	4335      	orrs	r5, r6
 800e896:	465e      	mov	r6, fp
 800e898:	7015      	strb	r5, [r2, #0]
 800e89a:	8815      	ldrh	r5, [r2, #0]
 800e89c:	4643      	mov	r3, r8
 800e89e:	4035      	ands	r5, r6
 800e8a0:	002e      	movs	r6, r5
 800e8a2:	015b      	lsls	r3, r3, #5
 800e8a4:	431e      	orrs	r6, r3
 800e8a6:	8016      	strh	r6, [r2, #0]
 800e8a8:	0a33      	lsrs	r3, r6, #8
 800e8aa:	2607      	movs	r6, #7
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800e8ac:	0dc0      	lsrs	r0, r0, #23
 800e8ae:	4020      	ands	r0, r4
 800e8b0:	00c5      	lsls	r5, r0, #3
 800e8b2:	4033      	ands	r3, r6
 800e8b4:	432b      	orrs	r3, r5
 800e8b6:	7053      	strb	r3, [r2, #1]
                for(x = 0; x < w; x++) {
 800e8b8:	3202      	adds	r2, #2
 800e8ba:	4562      	cmp	r2, ip
 800e8bc:	d017      	beq.n	800e8ee <lv_draw_sw_blend_basic+0xe06>
                    if(last_dest_color.full != dest_buf[x].full) {
 800e8be:	000b      	movs	r3, r1
 800e8c0:	e7ba      	b.n	800e838 <lv_draw_sw_blend_basic+0xd50>
                    dest_buf[x] = last_res_color;
 800e8c2:	464d      	mov	r5, r9
 800e8c4:	465e      	mov	r6, fp
 800e8c6:	7813      	ldrb	r3, [r2, #0]
 800e8c8:	43a3      	bics	r3, r4
 800e8ca:	432b      	orrs	r3, r5
 800e8cc:	7013      	strb	r3, [r2, #0]
 800e8ce:	8815      	ldrh	r5, [r2, #0]
 800e8d0:	4643      	mov	r3, r8
 800e8d2:	4035      	ands	r5, r6
 800e8d4:	002e      	movs	r6, r5
 800e8d6:	015b      	lsls	r3, r3, #5
 800e8d8:	431e      	orrs	r6, r3
 800e8da:	8016      	strh	r6, [r2, #0]
 800e8dc:	0a33      	lsrs	r3, r6, #8
 800e8de:	2607      	movs	r6, #7
 800e8e0:	00c5      	lsls	r5, r0, #3
 800e8e2:	4033      	ands	r3, r6
 800e8e4:	431d      	orrs	r5, r3
 800e8e6:	7055      	strb	r5, [r2, #1]
                for(x = 0; x < w; x++) {
 800e8e8:	3202      	adds	r2, #2
 800e8ea:	4562      	cmp	r2, ip
 800e8ec:	d1e7      	bne.n	800e8be <lv_draw_sw_blend_basic+0xdd6>
                dest_buf += dest_stride;
 800e8ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8f0:	464e      	mov	r6, r9
 800e8f2:	4691      	mov	r9, r2
 800e8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
            for(y = 0; y < h; y++) {
 800e8f6:	9a05      	ldr	r2, [sp, #20]
                dest_buf += dest_stride;
 800e8f8:	444b      	add	r3, r9
 800e8fa:	9309      	str	r3, [sp, #36]	; 0x24
            for(y = 0; y < h; y++) {
 800e8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8fe:	44cc      	add	ip, r9
 800e900:	3301      	adds	r3, #1
 800e902:	930a      	str	r3, [sp, #40]	; 0x28
 800e904:	429a      	cmp	r2, r3
 800e906:	dc94      	bgt.n	800e832 <lv_draw_sw_blend_basic+0xd4a>
 800e908:	f7ff f914 	bl	800db34 <lv_draw_sw_blend_basic+0x4c>
 800e90c:	07e0f81f 	.word	0x07e0f81f
 800e910:	fffff81f 	.word	0xfffff81f

0800e914 <lv_draw_sw_img_decoded>:
 **********************/


LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_img_decoded(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                  const lv_area_t * coords, const uint8_t * src_buf, lv_img_cf_t cf)
{
 800e914:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e916:	46de      	mov	lr, fp
 800e918:	4657      	mov	r7, sl
 800e91a:	464e      	mov	r6, r9
 800e91c:	4645      	mov	r5, r8
 800e91e:	468a      	mov	sl, r1
 800e920:	b5e0      	push	{r5, r6, r7, lr}
 800e922:	b0a5      	sub	sp, #148	; 0x94
 800e924:	930f      	str	r3, [sp, #60]	; 0x3c
 800e926:	ab2e      	add	r3, sp, #184	; 0xb8
 800e928:	781b      	ldrb	r3, [r3, #0]
    /*Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, draw_ctx->clip_area);

    bool mask_any = lv_draw_mask_is_any(&draw_area);
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 800e92a:	680c      	ldr	r4, [r1, #0]
{
 800e92c:	4683      	mov	fp, r0

    lv_area_t blend_area;
    lv_draw_sw_blend_dsc_t blend_dsc;

    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 800e92e:	211c      	movs	r1, #28
 800e930:	a81d      	add	r0, sp, #116	; 0x74
{
 800e932:	920b      	str	r2, [sp, #44]	; 0x2c
 800e934:	9309      	str	r3, [sp, #36]	; 0x24
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 800e936:	940d      	str	r4, [sp, #52]	; 0x34
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 800e938:	f003 feba 	bl	80126b0 <lv_memset_00>
    blend_dsc.opa = draw_dsc->opa;
 800e93c:	4653      	mov	r3, sl
 800e93e:	2144      	movs	r1, #68	; 0x44
 800e940:	7adb      	ldrb	r3, [r3, #11]
 800e942:	aa12      	add	r2, sp, #72	; 0x48
 800e944:	1852      	adds	r2, r2, r1
 800e946:	7013      	strb	r3, [r2, #0]
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 800e948:	4653      	mov	r3, sl
 800e94a:	7b1b      	ldrb	r3, [r3, #12]
 800e94c:	aa12      	add	r2, sp, #72	; 0x48
 800e94e:	071b      	lsls	r3, r3, #28
 800e950:	3101      	adds	r1, #1
 800e952:	0f1b      	lsrs	r3, r3, #28
 800e954:	1852      	adds	r2, r2, r1
 800e956:	7013      	strb	r3, [r2, #0]
    blend_dsc.blend_area = &blend_area;
 800e958:	ab19      	add	r3, sp, #100	; 0x64
 800e95a:	931d      	str	r3, [sp, #116]	; 0x74

    /*The simplest case just copy the pixels into the draw_buf*/
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800e95c:	2380      	movs	r3, #128	; 0x80
 800e95e:	045b      	lsls	r3, r3, #17
 800e960:	429c      	cmp	r4, r3
 800e962:	d100      	bne.n	800e966 <lv_draw_sw_img_decoded+0x52>
 800e964:	e261      	b.n	800ee2a <lv_draw_sw_img_decoded+0x516>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        blend_area.x1 = draw_ctx->clip_area->x1;
 800e966:	465b      	mov	r3, fp
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	2200      	movs	r2, #0
 800e96c:	5e9f      	ldrsh	r7, [r3, r2]
 800e96e:	aa12      	add	r2, sp, #72	; 0x48
 800e970:	8397      	strh	r7, [r2, #28]
        blend_area.x2 = draw_ctx->clip_area->x2;
 800e972:	2204      	movs	r2, #4
 800e974:	5e9c      	ldrsh	r4, [r3, r2]
 800e976:	aa12      	add	r2, sp, #72	; 0x48
 800e978:	8414      	strh	r4, [r2, #32]
        blend_area.y1 = draw_ctx->clip_area->y1;
 800e97a:	2102      	movs	r1, #2
 800e97c:	5e5a      	ldrsh	r2, [r3, r1]
 800e97e:	3401      	adds	r4, #1
 800e980:	4690      	mov	r8, r2
 800e982:	4641      	mov	r1, r8
 800e984:	aa12      	add	r2, sp, #72	; 0x48
 800e986:	83d1      	strh	r1, [r2, #30]
        blend_area.y2 = draw_ctx->clip_area->y2;
 800e988:	2506      	movs	r5, #6
 800e98a:	5f5d      	ldrsh	r5, [r3, r5]
 800e98c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e98e:	8455      	strh	r5, [r2, #34]	; 0x22
 800e990:	888b      	ldrh	r3, [r1, #4]
 800e992:	880a      	ldrh	r2, [r1, #0]
 800e994:	1be7      	subs	r7, r4, r7
 800e996:	1a9b      	subs	r3, r3, r2
 800e998:	b29b      	uxth	r3, r3
 800e99a:	9316      	str	r3, [sp, #88]	; 0x58
 800e99c:	3301      	adds	r3, #1
 800e99e:	b21b      	sxth	r3, r3
 800e9a0:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e9a2:	88cb      	ldrh	r3, [r1, #6]
 800e9a4:	884a      	ldrh	r2, [r1, #2]
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	1a9b      	subs	r3, r3, r2
 800e9aa:	b21b      	sxth	r3, r3
 800e9ac:	9310      	str	r3, [sp, #64]	; 0x40
        lv_coord_t src_w = lv_area_get_width(coords);
        lv_coord_t src_h = lv_area_get_height(coords);
        lv_coord_t blend_h = lv_area_get_height(&blend_area);
        lv_coord_t blend_w = lv_area_get_width(&blend_area);

        uint32_t max_buf_size = MAX_BUF_SIZE;
 800e9ae:	f7fd fa31 	bl	800be14 <_lv_refr_get_disp_refreshing>
 800e9b2:	f002 f8e1 	bl	8010b78 <lv_disp_get_hor_res>
 800e9b6:	0006      	movs	r6, r0
        uint32_t blend_size = lv_area_get_size(&blend_area);
 800e9b8:	a819      	add	r0, sp, #100	; 0x64
 800e9ba:	f002 fcb7 	bl	801132c <lv_area_get_size>
        uint32_t buf_h;
        uint32_t buf_w = blend_w;
 800e9be:	b23f      	sxth	r7, r7
        if(blend_size <= max_buf_size) {
 800e9c0:	4286      	cmp	r6, r0
 800e9c2:	d300      	bcc.n	800e9c6 <lv_draw_sw_img_decoded+0xb2>
 800e9c4:	e098      	b.n	800eaf8 <lv_draw_sw_img_decoded+0x1e4>
            buf_h = blend_h;
        }
        else {
            /*Round to full lines*/
            buf_h = max_buf_size / blend_w;
 800e9c6:	0039      	movs	r1, r7
 800e9c8:	0030      	movs	r0, r6
 800e9ca:	f7f1 fbad 	bl	8000128 <__udivsi3>
 800e9ce:	0004      	movs	r4, r0
        }

        /*Create buffers and masks*/
        uint32_t buf_size = buf_w * buf_h;
 800e9d0:	4367      	muls	r7, r4

        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 800e9d2:	007d      	lsls	r5, r7, #1
 800e9d4:	0028      	movs	r0, r5
        uint32_t buf_size = buf_w * buf_h;
 800e9d6:	003e      	movs	r6, r7
 800e9d8:	9715      	str	r7, [sp, #84]	; 0x54
        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 800e9da:	f003 fb65 	bl	80120a8 <lv_mem_buf_get>
 800e9de:	0007      	movs	r7, r0
 800e9e0:	9006      	str	r0, [sp, #24]
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 800e9e2:	0030      	movs	r0, r6
 800e9e4:	f003 fb60 	bl	80120a8 <lv_mem_buf_get>
        blend_dsc.mask_buf = mask_buf;
        blend_dsc.mask_area = &blend_area;
 800e9e8:	ab19      	add	r3, sp, #100	; 0x64
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 800e9ea:	900c      	str	r0, [sp, #48]	; 0x30
        blend_dsc.mask_buf = mask_buf;
 800e9ec:	9020      	str	r0, [sp, #128]	; 0x80
        blend_dsc.mask_area = &blend_area;
 800e9ee:	9322      	str	r3, [sp, #136]	; 0x88
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        blend_dsc.src_buf = rgb_buf;
 800e9f0:	971e      	str	r7, [sp, #120]	; 0x78
        lv_coord_t y_last = blend_area.y2;
 800e9f2:	ab12      	add	r3, sp, #72	; 0x48
 800e9f4:	2222      	movs	r2, #34	; 0x22
 800e9f6:	5e9b      	ldrsh	r3, [r3, r2]
        blend_area.y2 = blend_area.y1 + buf_h - 1;

        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 800e9f8:	9809      	ldr	r0, [sp, #36]	; 0x24
        lv_coord_t y_last = blend_area.y2;
 800e9fa:	9307      	str	r3, [sp, #28]
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 800e9fc:	ab12      	add	r3, sp, #72	; 0x48
 800e9fe:	221e      	movs	r2, #30
 800ea00:	5e9a      	ldrsh	r2, [r3, r2]
 800ea02:	b2a3      	uxth	r3, r4
 800ea04:	0019      	movs	r1, r3
 800ea06:	468c      	mov	ip, r1
 800ea08:	930e      	str	r3, [sp, #56]	; 0x38
 800ea0a:	1e53      	subs	r3, r2, #1
 800ea0c:	4463      	add	r3, ip
 800ea0e:	a912      	add	r1, sp, #72	; 0x48
 800ea10:	b21b      	sxth	r3, r3
 800ea12:	844b      	strh	r3, [r1, #34]	; 0x22
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 800ea14:	2102      	movs	r1, #2
 800ea16:	2804      	cmp	r0, #4
 800ea18:	d108      	bne.n	800ea2c <lv_draw_sw_img_decoded+0x118>
 800ea1a:	20ff      	movs	r0, #255	; 0xff
 800ea1c:	4651      	mov	r1, sl
 800ea1e:	0600      	lsls	r0, r0, #24
 800ea20:	4684      	mov	ip, r0
 800ea22:	6809      	ldr	r1, [r1, #0]
 800ea24:	4461      	add	r1, ip
 800ea26:	1e48      	subs	r0, r1, #1
 800ea28:	4181      	sbcs	r1, r0
 800ea2a:	3101      	adds	r1, #1
                                           draw_dsc->zoom != LV_IMG_ZOOM_NONE) ?
                                          LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
        blend_dsc.mask_res = mask_res_def;
 800ea2c:	243c      	movs	r4, #60	; 0x3c
 800ea2e:	a812      	add	r0, sp, #72	; 0x48
 800ea30:	1900      	adds	r0, r0, r4
 800ea32:	7001      	strb	r1, [r0, #0]

        while(blend_area.y1 <= y_last) {
 800ea34:	9907      	ldr	r1, [sp, #28]
 800ea36:	428a      	cmp	r2, r1
 800ea38:	dc51      	bgt.n	800eade <lv_draw_sw_img_decoded+0x1ca>

    const uint8_t * src_tmp8 = (const uint8_t *)src_buf;
    lv_coord_t y;
    lv_coord_t x;

    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800ea3a:	2102      	movs	r1, #2
 800ea3c:	9809      	ldr	r0, [sp, #36]	; 0x24

        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);

        lv_coord_t dest_h = lv_area_get_height(dest_area);
        lv_coord_t dest_w = lv_area_get_width(dest_area);
        for(y = 0; y < dest_h; y++) {
 800ea3e:	465f      	mov	r7, fp
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800ea40:	4388      	bics	r0, r1
 800ea42:	9014      	str	r0, [sp, #80]	; 0x50
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 800ea44:	980a      	ldr	r0, [sp, #40]	; 0x28
        for(y = 0; y < dest_h; y++) {
 800ea46:	4656      	mov	r6, sl
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 800ea48:	0041      	lsls	r1, r0, #1
 800ea4a:	b209      	sxth	r1, r1
 800ea4c:	9108      	str	r1, [sp, #32]
            cbuf += dest_w;
            src_tmp8 += src_stride_byte;
        }

        src_tmp8 = (const uint8_t *)src_buf;
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 800ea4e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ea50:	4341      	muls	r1, r0
 800ea52:	0049      	lsls	r1, r1, #1
 800ea54:	9117      	str	r1, [sp, #92]	; 0x5c
 800ea56:	9906      	ldr	r1, [sp, #24]
 800ea58:	4689      	mov	r9, r1
 800ea5a:	44a9      	add	r9, r5
        for(y = 0; y < dest_h; y++) {
 800ea5c:	464d      	mov	r5, r9
    dest->x1 = src->x1;
 800ea5e:	a812      	add	r0, sp, #72	; 0x48
 800ea60:	a912      	add	r1, sp, #72	; 0x48
    dest->y1 = src->y1;
 800ea62:	84c2      	strh	r2, [r0, #38]	; 0x26
    dest->x1 = src->x1;
 800ea64:	8b89      	ldrh	r1, [r1, #28]
    dest->x2 = src->x2;
 800ea66:	8c02      	ldrh	r2, [r0, #32]
    dest->y2 = src->y2;
 800ea68:	8543      	strh	r3, [r0, #42]	; 0x2a
            lv_area_move(&transform_area, -coords->x1, -coords->y1);
 800ea6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dest->x1 = src->x1;
 800ea6c:	8481      	strh	r1, [r0, #36]	; 0x24
    dest->x2 = src->x2;
 800ea6e:	8502      	strh	r2, [r0, #40]	; 0x28
 800ea70:	885a      	ldrh	r2, [r3, #2]
 800ea72:	8819      	ldrh	r1, [r3, #0]
 800ea74:	4252      	negs	r2, r2
 800ea76:	4249      	negs	r1, r1
 800ea78:	b212      	sxth	r2, r2
 800ea7a:	b209      	sxth	r1, r1
 800ea7c:	a81b      	add	r0, sp, #108	; 0x6c
 800ea7e:	f002 fc75 	bl	801136c <lv_area_move>
            if(transform) {
 800ea82:	2280      	movs	r2, #128	; 0x80
 800ea84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea86:	0452      	lsls	r2, r2, #17
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d040      	beq.n	800eb0e <lv_draw_sw_img_decoded+0x1fa>
                lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 800ea8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ea90:	9305      	str	r3, [sp, #20]
 800ea92:	9b06      	ldr	r3, [sp, #24]
 800ea94:	9200      	str	r2, [sp, #0]
 800ea96:	9304      	str	r3, [sp, #16]
 800ea98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea9a:	0038      	movs	r0, r7
 800ea9c:	9303      	str	r3, [sp, #12]
 800ea9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eaa2:	9602      	str	r6, [sp, #8]
 800eaa4:	9301      	str	r3, [sp, #4]
 800eaa6:	a91b      	add	r1, sp, #108	; 0x6c
 800eaa8:	f7fe fabc 	bl	800d024 <lv_draw_transform>
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 800eaac:	7ab4      	ldrb	r4, [r6, #10]
 800eaae:	2c02      	cmp	r4, #2
 800eab0:	d900      	bls.n	800eab4 <lv_draw_sw_img_decoded+0x1a0>
 800eab2:	e099      	b.n	800ebe8 <lv_draw_sw_img_decoded+0x2d4>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800eab4:	a91d      	add	r1, sp, #116	; 0x74
 800eab6:	0038      	movs	r0, r7
 800eab8:	f7fe fffc 	bl	800dab4 <lv_draw_sw_blend>
            blend_area.y1 = blend_area.y2 + 1;
 800eabc:	ab12      	add	r3, sp, #72	; 0x48
 800eabe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800eac0:	a912      	add	r1, sp, #72	; 0x48
 800eac2:	1c5a      	adds	r2, r3, #1
 800eac4:	b212      	sxth	r2, r2
 800eac6:	83ca      	strh	r2, [r1, #30]
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 800eac8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800eaca:	468c      	mov	ip, r1
            if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 800eacc:	9907      	ldr	r1, [sp, #28]
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 800eace:	4463      	add	r3, ip
 800ead0:	b21b      	sxth	r3, r3
            if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 800ead2:	428b      	cmp	r3, r1
 800ead4:	dc15      	bgt.n	800eb02 <lv_draw_sw_img_decoded+0x1ee>
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 800ead6:	a812      	add	r0, sp, #72	; 0x48
 800ead8:	8443      	strh	r3, [r0, #34]	; 0x22
        while(blend_area.y1 <= y_last) {
 800eada:	428a      	cmp	r2, r1
 800eadc:	ddbf      	ble.n	800ea5e <lv_draw_sw_img_decoded+0x14a>
        lv_mem_buf_release(mask_buf);
 800eade:	980c      	ldr	r0, [sp, #48]	; 0x30
 800eae0:	f003 fb86 	bl	80121f0 <lv_mem_buf_release>
        lv_mem_buf_release(rgb_buf);
 800eae4:	9806      	ldr	r0, [sp, #24]
 800eae6:	f003 fb83 	bl	80121f0 <lv_mem_buf_release>
}
 800eaea:	b025      	add	sp, #148	; 0x94
 800eaec:	bcf0      	pop	{r4, r5, r6, r7}
 800eaee:	46bb      	mov	fp, r7
 800eaf0:	46b2      	mov	sl, r6
 800eaf2:	46a9      	mov	r9, r5
 800eaf4:	46a0      	mov	r8, r4
 800eaf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eaf8:	4643      	mov	r3, r8
 800eafa:	3501      	adds	r5, #1
 800eafc:	1aec      	subs	r4, r5, r3
            buf_h = blend_h;
 800eafe:	b224      	sxth	r4, r4
 800eb00:	e766      	b.n	800e9d0 <lv_draw_sw_img_decoded+0xbc>
 800eb02:	000b      	movs	r3, r1
            if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 800eb04:	a912      	add	r1, sp, #72	; 0x48
 800eb06:	844b      	strh	r3, [r1, #34]	; 0x22
        while(blend_area.y1 <= y_last) {
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	dda8      	ble.n	800ea5e <lv_draw_sw_img_decoded+0x14a>
 800eb0c:	e7e7      	b.n	800eade <lv_draw_sw_img_decoded+0x1ca>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800eb0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb10:	2b04      	cmp	r3, #4
 800eb12:	d100      	bne.n	800eb16 <lv_draw_sw_img_decoded+0x202>
 800eb14:	e0cd      	b.n	800ecb2 <lv_draw_sw_img_decoded+0x39e>
    else if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 800eb16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb18:	2b05      	cmp	r3, #5
 800eb1a:	d100      	bne.n	800eb1e <lv_draw_sw_img_decoded+0x20a>
 800eb1c:	e120      	b.n	800ed60 <lv_draw_sw_img_decoded+0x44c>
    else if(cf == LV_IMG_CF_RGB565A8) {
 800eb1e:	2b14      	cmp	r3, #20
 800eb20:	d1c4      	bne.n	800eaac <lv_draw_sw_img_decoded+0x198>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 800eb22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eb24:	ab12      	add	r3, sp, #72	; 0x48
 800eb26:	4690      	mov	r8, r2
 800eb28:	2026      	movs	r0, #38	; 0x26
 800eb2a:	5e18      	ldrsh	r0, [r3, r0]
 800eb2c:	ab12      	add	r3, sp, #72	; 0x48
 800eb2e:	2124      	movs	r1, #36	; 0x24
 800eb30:	5e59      	ldrsh	r1, [r3, r1]
 800eb32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb34:	4343      	muls	r3, r0
 800eb36:	185b      	adds	r3, r3, r1
 800eb38:	005b      	lsls	r3, r3, #1
 800eb3a:	4498      	add	r8, r3
 800eb3c:	ab12      	add	r3, sp, #72	; 0x48
 800eb3e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800eb40:	3201      	adds	r2, #1
 800eb42:	1a12      	subs	r2, r2, r0
 800eb44:	b212      	sxth	r2, r2
 800eb46:	9211      	str	r2, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eb48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	1a5b      	subs	r3, r3, r1
 800eb4e:	b21b      	sxth	r3, r3
 800eb50:	469a      	mov	sl, r3
        for(y = 0; y < dest_h; y++) {
 800eb52:	2a00      	cmp	r2, #0
 800eb54:	ddaa      	ble.n	800eaac <lv_draw_sw_img_decoded+0x198>
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 800eb56:	005b      	lsls	r3, r3, #1
 800eb58:	469b      	mov	fp, r3
            src_tmp8 += src_stride_byte;
 800eb5a:	9b06      	ldr	r3, [sp, #24]
        for(y = 0; y < dest_h; y++) {
 800eb5c:	2400      	movs	r4, #0
            src_tmp8 += src_stride_byte;
 800eb5e:	4699      	mov	r9, r3
        for(y = 0; y < dest_h; y++) {
 800eb60:	0033      	movs	r3, r6
 800eb62:	4646      	mov	r6, r8
 800eb64:	46a8      	mov	r8, r5
 800eb66:	464d      	mov	r5, r9
 800eb68:	46b9      	mov	r9, r7
 800eb6a:	465f      	mov	r7, fp
 800eb6c:	469b      	mov	fp, r3
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 800eb6e:	0031      	movs	r1, r6
 800eb70:	0028      	movs	r0, r5
 800eb72:	003a      	movs	r2, r7
 800eb74:	f003 fbce 	bl	8012314 <lv_memcpy>
            src_tmp8 += src_stride_byte;
 800eb78:	9b08      	ldr	r3, [sp, #32]
 800eb7a:	3401      	adds	r4, #1
 800eb7c:	469c      	mov	ip, r3
        for(y = 0; y < dest_h; y++) {
 800eb7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eb80:	b224      	sxth	r4, r4
            cbuf += dest_w;
 800eb82:	19ed      	adds	r5, r5, r7
            src_tmp8 += src_stride_byte;
 800eb84:	4466      	add	r6, ip
        for(y = 0; y < dest_h; y++) {
 800eb86:	42a3      	cmp	r3, r4
 800eb88:	d1f1      	bne.n	800eb6e <lv_draw_sw_img_decoded+0x25a>
 800eb8a:	464f      	mov	r7, r9
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 800eb8c:	ab12      	add	r3, sp, #72	; 0x48
 800eb8e:	2226      	movs	r2, #38	; 0x26
 800eb90:	5e9b      	ldrsh	r3, [r3, r2]
 800eb92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb94:	4645      	mov	r5, r8
 800eb96:	4353      	muls	r3, r2
 800eb98:	aa12      	add	r2, sp, #72	; 0x48
 800eb9a:	2124      	movs	r1, #36	; 0x24
 800eb9c:	5e52      	ldrsh	r2, [r2, r1]
 800eb9e:	0039      	movs	r1, r7
 800eba0:	189b      	adds	r3, r3, r2
 800eba2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eba4:	46a9      	mov	r9, r5
 800eba6:	4694      	mov	ip, r2
 800eba8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ebaa:	4463      	add	r3, ip
 800ebac:	4690      	mov	r8, r2
 800ebae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ebb0:	4498      	add	r8, r3
 800ebb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebb4:	4657      	mov	r7, sl
 800ebb6:	4646      	mov	r6, r8
 800ebb8:	2400      	movs	r4, #0
 800ebba:	4690      	mov	r8, r2
 800ebbc:	468a      	mov	sl, r1
 800ebbe:	001d      	movs	r5, r3
        for(y = 0; y < dest_h; y++) {
            lv_memcpy(abuf, src_tmp8, dest_w);
 800ebc0:	0031      	movs	r1, r6
 800ebc2:	0028      	movs	r0, r5
 800ebc4:	003a      	movs	r2, r7
 800ebc6:	f003 fba5 	bl	8012314 <lv_memcpy>
            abuf += dest_w;
            src_tmp8 += src_stride;
 800ebca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebcc:	3401      	adds	r4, #1
 800ebce:	469c      	mov	ip, r3
 800ebd0:	b224      	sxth	r4, r4
            abuf += dest_w;
 800ebd2:	19ed      	adds	r5, r5, r7
            src_tmp8 += src_stride;
 800ebd4:	4466      	add	r6, ip
        for(y = 0; y < dest_h; y++) {
 800ebd6:	45a0      	cmp	r8, r4
 800ebd8:	d1f2      	bne.n	800ebc0 <lv_draw_sw_img_decoded+0x2ac>
 800ebda:	465e      	mov	r6, fp
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 800ebdc:	7ab4      	ldrb	r4, [r6, #10]
 800ebde:	464d      	mov	r5, r9
 800ebe0:	4657      	mov	r7, sl
 800ebe2:	2c02      	cmp	r4, #2
 800ebe4:	d800      	bhi.n	800ebe8 <lv_draw_sw_img_decoded+0x2d4>
 800ebe6:	e765      	b.n	800eab4 <lv_draw_sw_img_decoded+0x1a0>
                lv_color_t recolor = draw_dsc->recolor;
 800ebe8:	7a73      	ldrb	r3, [r6, #9]
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 800ebea:	08db      	lsrs	r3, r3, #3
 800ebec:	4363      	muls	r3, r4
 800ebee:	4698      	mov	r8, r3
 800ebf0:	8933      	ldrh	r3, [r6, #8]
 800ebf2:	055b      	lsls	r3, r3, #21
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 800ebf4:	0e9b      	lsrs	r3, r3, #26
 800ebf6:	4363      	muls	r3, r4
 800ebf8:	469c      	mov	ip, r3
 800ebfa:	7a33      	ldrb	r3, [r6, #8]
 800ebfc:	06db      	lsls	r3, r3, #27
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 800ebfe:	0edb      	lsrs	r3, r3, #27
 800ec00:	4363      	muls	r3, r4
                recolor_opa = 255 - recolor_opa;
 800ec02:	43e4      	mvns	r4, r4
 800ec04:	469a      	mov	sl, r3
                for(i = 0; i < buf_size; i++) {
 800ec06:	9b15      	ldr	r3, [sp, #84]	; 0x54
                recolor_opa = 255 - recolor_opa;
 800ec08:	b2e4      	uxtb	r4, r4
                for(i = 0; i < buf_size; i++) {
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d100      	bne.n	800ec10 <lv_draw_sw_img_decoded+0x2fc>
 800ec0e:	e751      	b.n	800eab4 <lv_draw_sw_img_decoded+0x1a0>
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 800ec10:	231f      	movs	r3, #31
 800ec12:	4651      	mov	r1, sl
 800ec14:	4699      	mov	r9, r3
 800ec16:	46b2      	mov	sl, r6
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800ec18:	9806      	ldr	r0, [sp, #24]
 800ec1a:	7802      	ldrb	r2, [r0, #0]
 800ec1c:	06d3      	lsls	r3, r2, #27
 800ec1e:	0edb      	lsrs	r3, r3, #27
 800ec20:	4363      	muls	r3, r4
 800ec22:	185e      	adds	r6, r3, r1
 800ec24:	0233      	lsls	r3, r6, #8
 800ec26:	199b      	adds	r3, r3, r6
 800ec28:	01db      	lsls	r3, r3, #7
 800ec2a:	199b      	adds	r3, r3, r6
 800ec2c:	464e      	mov	r6, r9
 800ec2e:	0ddb      	lsrs	r3, r3, #23
 800ec30:	4033      	ands	r3, r6
 800ec32:	43b2      	bics	r2, r6
 800ec34:	4313      	orrs	r3, r2
 800ec36:	7003      	strb	r3, [r0, #0]
                for(i = 0; i < buf_size; i++) {
 800ec38:	3002      	adds	r0, #2
 800ec3a:	42a8      	cmp	r0, r5
 800ec3c:	d1ed      	bne.n	800ec1a <lv_draw_sw_img_decoded+0x306>
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 800ec3e:	233f      	movs	r3, #63	; 0x3f
                for(i = 0; i < buf_size; i++) {
 800ec40:	4656      	mov	r6, sl
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 800ec42:	469a      	mov	sl, r3
 800ec44:	4ba4      	ldr	r3, [pc, #656]	; (800eed8 <lv_draw_sw_img_decoded+0x5c4>)
 800ec46:	4661      	mov	r1, ip
 800ec48:	4699      	mov	r9, r3
 800ec4a:	46b4      	mov	ip, r6
                for(i = 0; i < buf_size; i++) {
 800ec4c:	9806      	ldr	r0, [sp, #24]
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800ec4e:	8802      	ldrh	r2, [r0, #0]
 800ec50:	0553      	lsls	r3, r2, #21
 800ec52:	0e9b      	lsrs	r3, r3, #26
 800ec54:	4363      	muls	r3, r4
 800ec56:	185e      	adds	r6, r3, r1
 800ec58:	0233      	lsls	r3, r6, #8
 800ec5a:	199b      	adds	r3, r3, r6
 800ec5c:	01db      	lsls	r3, r3, #7
 800ec5e:	199b      	adds	r3, r3, r6
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 800ec60:	4656      	mov	r6, sl
 800ec62:	0ddb      	lsrs	r3, r3, #23
 800ec64:	4033      	ands	r3, r6
 800ec66:	464e      	mov	r6, r9
 800ec68:	015b      	lsls	r3, r3, #5
 800ec6a:	4032      	ands	r2, r6
 800ec6c:	4313      	orrs	r3, r2
 800ec6e:	8003      	strh	r3, [r0, #0]
                for(i = 0; i < buf_size; i++) {
 800ec70:	3002      	adds	r0, #2
 800ec72:	42a8      	cmp	r0, r5
 800ec74:	d1eb      	bne.n	800ec4e <lv_draw_sw_img_decoded+0x33a>
 800ec76:	4666      	mov	r6, ip
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 800ec78:	2307      	movs	r3, #7
 800ec7a:	469c      	mov	ip, r3
 800ec7c:	0033      	movs	r3, r6
 800ec7e:	003a      	movs	r2, r7
 800ec80:	002e      	movs	r6, r5
 800ec82:	4645      	mov	r5, r8
 800ec84:	4698      	mov	r8, r3
                for(i = 0; i < buf_size; i++) {
 800ec86:	9906      	ldr	r1, [sp, #24]
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800ec88:	7848      	ldrb	r0, [r1, #1]
 800ec8a:	08c3      	lsrs	r3, r0, #3
 800ec8c:	4363      	muls	r3, r4
 800ec8e:	195f      	adds	r7, r3, r5
 800ec90:	023b      	lsls	r3, r7, #8
 800ec92:	19db      	adds	r3, r3, r7
 800ec94:	01db      	lsls	r3, r3, #7
 800ec96:	19db      	adds	r3, r3, r7
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 800ec98:	4667      	mov	r7, ip
 800ec9a:	0ddb      	lsrs	r3, r3, #23
 800ec9c:	00db      	lsls	r3, r3, #3
 800ec9e:	4038      	ands	r0, r7
 800eca0:	4303      	orrs	r3, r0
 800eca2:	704b      	strb	r3, [r1, #1]
                for(i = 0; i < buf_size; i++) {
 800eca4:	3102      	adds	r1, #2
 800eca6:	42b1      	cmp	r1, r6
 800eca8:	d1ee      	bne.n	800ec88 <lv_draw_sw_img_decoded+0x374>
 800ecaa:	0035      	movs	r5, r6
 800ecac:	0017      	movs	r7, r2
 800ecae:	4646      	mov	r6, r8
 800ecb0:	e700      	b.n	800eab4 <lv_draw_sw_img_decoded+0x1a0>
        uint32_t px_cnt = lv_area_get_size(dest_area);
 800ecb2:	a81b      	add	r0, sp, #108	; 0x6c
 800ecb4:	f002 fb3a 	bl	801132c <lv_area_get_size>
        lv_memset_ff(abuf, px_cnt);
 800ecb8:	0001      	movs	r1, r0
        uint32_t px_cnt = lv_area_get_size(dest_area);
 800ecba:	4683      	mov	fp, r0
        lv_memset_ff(abuf, px_cnt);
 800ecbc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ecbe:	f003 fd63 	bl	8012788 <lv_memset_ff>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 800ecc2:	ab12      	add	r3, sp, #72	; 0x48
 800ecc4:	2426      	movs	r4, #38	; 0x26
 800ecc6:	5f1c      	ldrsh	r4, [r3, r4]
 800ecc8:	ab12      	add	r3, sp, #72	; 0x48
 800ecca:	2124      	movs	r1, #36	; 0x24
 800eccc:	5e59      	ldrsh	r1, [r3, r1]
 800ecce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ecd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecd2:	4698      	mov	r8, r3
 800ecd4:	ab12      	add	r3, sp, #72	; 0x48
 800ecd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ecd8:	4362      	muls	r2, r4
 800ecda:	3301      	adds	r3, #1
 800ecdc:	1a5b      	subs	r3, r3, r1
        uint32_t dest_w = lv_area_get_width(dest_area);
 800ecde:	b21b      	sxth	r3, r3
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 800ece0:	005b      	lsls	r3, r3, #1
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 800ece2:	1852      	adds	r2, r2, r1
 800ece4:	0052      	lsls	r2, r2, #1
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 800ece6:	469a      	mov	sl, r3
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800ece8:	ab12      	add	r3, sp, #72	; 0x48
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 800ecea:	4490      	add	r8, r2
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800ecec:	222a      	movs	r2, #42	; 0x2a
 800ecee:	5e9b      	ldrsh	r3, [r3, r2]
        lv_color_t * cbuf_tmp = cbuf;
 800ecf0:	9a06      	ldr	r2, [sp, #24]
 800ecf2:	4691      	mov	r9, r2
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800ecf4:	42a3      	cmp	r3, r4
 800ecf6:	db1a      	blt.n	800ed2e <lv_draw_sw_img_decoded+0x41a>
 800ecf8:	4643      	mov	r3, r8
 800ecfa:	0032      	movs	r2, r6
 800ecfc:	46a8      	mov	r8, r5
 800ecfe:	464e      	mov	r6, r9
 800ed00:	001d      	movs	r5, r3
 800ed02:	46b9      	mov	r9, r7
 800ed04:	4657      	mov	r7, sl
 800ed06:	4692      	mov	sl, r2
            lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 800ed08:	003a      	movs	r2, r7
 800ed0a:	0029      	movs	r1, r5
 800ed0c:	0030      	movs	r0, r6
 800ed0e:	f003 fb01 	bl	8012314 <lv_memcpy>
            src_tmp8 += src_stride_byte;
 800ed12:	9b08      	ldr	r3, [sp, #32]
 800ed14:	3401      	adds	r4, #1
 800ed16:	469c      	mov	ip, r3
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800ed18:	ab12      	add	r3, sp, #72	; 0x48
 800ed1a:	222a      	movs	r2, #42	; 0x2a
 800ed1c:	5e9b      	ldrsh	r3, [r3, r2]
 800ed1e:	b224      	sxth	r4, r4
            src_tmp8 += src_stride_byte;
 800ed20:	4465      	add	r5, ip
            cbuf_tmp += dest_w;
 800ed22:	19f6      	adds	r6, r6, r7
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800ed24:	42a3      	cmp	r3, r4
 800ed26:	daef      	bge.n	800ed08 <lv_draw_sw_img_decoded+0x3f4>
 800ed28:	4645      	mov	r5, r8
 800ed2a:	464f      	mov	r7, r9
 800ed2c:	4656      	mov	r6, sl
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800ed2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed30:	2b06      	cmp	r3, #6
 800ed32:	d000      	beq.n	800ed36 <lv_draw_sw_img_decoded+0x422>
 800ed34:	e6ba      	b.n	800eaac <lv_draw_sw_img_decoded+0x198>
            for(i = 0; i < px_cnt; i++) {
 800ed36:	465b      	mov	r3, fp
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d100      	bne.n	800ed3e <lv_draw_sw_img_decoded+0x42a>
 800ed3c:	e6b6      	b.n	800eaac <lv_draw_sw_img_decoded+0x198>
 800ed3e:	0058      	lsls	r0, r3, #1
 800ed40:	9b06      	ldr	r3, [sp, #24]
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 800ed42:	24fc      	movs	r4, #252	; 0xfc
 800ed44:	469c      	mov	ip, r3
 800ed46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed48:	4460      	add	r0, ip
 800ed4a:	00e4      	lsls	r4, r4, #3
 800ed4c:	8819      	ldrh	r1, [r3, #0]
 800ed4e:	42a1      	cmp	r1, r4
 800ed50:	d101      	bne.n	800ed56 <lv_draw_sw_img_decoded+0x442>
 800ed52:	2100      	movs	r1, #0
 800ed54:	7011      	strb	r1, [r2, #0]
            for(i = 0; i < px_cnt; i++) {
 800ed56:	3302      	adds	r3, #2
 800ed58:	3201      	adds	r2, #1
 800ed5a:	4283      	cmp	r3, r0
 800ed5c:	d1f6      	bne.n	800ed4c <lv_draw_sw_img_decoded+0x438>
 800ed5e:	e6a5      	b.n	800eaac <lv_draw_sw_img_decoded+0x198>
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800ed60:	ab12      	add	r3, sp, #72	; 0x48
 800ed62:	2126      	movs	r1, #38	; 0x26
 800ed64:	5e59      	ldrsh	r1, [r3, r1]
 800ed66:	ab12      	add	r3, sp, #72	; 0x48
 800ed68:	2224      	movs	r2, #36	; 0x24
 800ed6a:	5e9b      	ldrsh	r3, [r3, r2]
 800ed6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed6e:	434a      	muls	r2, r1
 800ed70:	18d2      	adds	r2, r2, r3
 800ed72:	0050      	lsls	r0, r2, #1
 800ed74:	1882      	adds	r2, r0, r2
 800ed76:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ed78:	b29b      	uxth	r3, r3
 800ed7a:	4683      	mov	fp, r0
 800ed7c:	4493      	add	fp, r2
 800ed7e:	aa12      	add	r2, sp, #72	; 0x48
 800ed80:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800ed82:	1c60      	adds	r0, r4, #1
 800ed84:	1ac0      	subs	r0, r0, r3
 800ed86:	b282      	uxth	r2, r0
 800ed88:	b200      	sxth	r0, r0
 800ed8a:	4681      	mov	r9, r0
        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
 800ed8c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ed8e:	1b1b      	subs	r3, r3, r4
 800ed90:	4684      	mov	ip, r0
 800ed92:	4463      	add	r3, ip
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800ed94:	0058      	lsls	r0, r3, #1
 800ed96:	181b      	adds	r3, r3, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ed98:	a812      	add	r0, sp, #72	; 0x48
 800ed9a:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
 800ed9c:	b21b      	sxth	r3, r3
 800ed9e:	3001      	adds	r0, #1
 800eda0:	1a41      	subs	r1, r0, r1
 800eda2:	b209      	sxth	r1, r1
 800eda4:	9111      	str	r1, [sp, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 800eda6:	2900      	cmp	r1, #0
 800eda8:	dc00      	bgt.n	800edac <lv_draw_sw_img_decoded+0x498>
 800edaa:	e67f      	b.n	800eaac <lv_draw_sw_img_decoded+0x198>
            cbuf += dest_w;
 800edac:	4649      	mov	r1, r9
 800edae:	0049      	lsls	r1, r1, #1
 800edb0:	9112      	str	r1, [sp, #72]	; 0x48
 800edb2:	4649      	mov	r1, r9
 800edb4:	2900      	cmp	r1, #0
 800edb6:	dc00      	bgt.n	800edba <lv_draw_sw_img_decoded+0x4a6>
 800edb8:	e678      	b.n	800eaac <lv_draw_sw_img_decoded+0x198>
 800edba:	3a01      	subs	r2, #1
 800edbc:	b292      	uxth	r2, r2
 800edbe:	0051      	lsls	r1, r2, #1
 800edc0:	188a      	adds	r2, r1, r2
 800edc2:	18d3      	adds	r3, r2, r3
            src_tmp8 += src_new_line_step_byte;
 800edc4:	9a06      	ldr	r2, [sp, #24]
 800edc6:	3303      	adds	r3, #3
 800edc8:	4690      	mov	r8, r2
 800edca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800edcc:	9313      	str	r3, [sp, #76]	; 0x4c
 800edce:	4694      	mov	ip, r2
        for(y = 0; y < dest_h; y++) {
 800edd0:	2200      	movs	r2, #0
 800edd2:	0033      	movs	r3, r6
 800edd4:	4692      	mov	sl, r2
 800edd6:	002a      	movs	r2, r5
 800edd8:	4646      	mov	r6, r8
 800edda:	4665      	mov	r5, ip
 800eddc:	46b8      	mov	r8, r7
 800edde:	0011      	movs	r1, r2
 800ede0:	464f      	mov	r7, r9
 800ede2:	4699      	mov	r9, r3
            for(i = 0; i < px_cnt; i++) {
 800ede4:	465a      	mov	r2, fp
 800ede6:	2300      	movs	r3, #0
 800ede8:	468c      	mov	ip, r1
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800edea:	7891      	ldrb	r1, [r2, #2]
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
 800edec:	0058      	lsls	r0, r3, #1
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800edee:	54e9      	strb	r1, [r5, r3]
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
 800edf0:	7854      	ldrb	r4, [r2, #1]
 800edf2:	7811      	ldrb	r1, [r2, #0]
 800edf4:	0224      	lsls	r4, r4, #8
 800edf6:	1909      	adds	r1, r1, r4
            for(x = 0; x < dest_w; x++) {
 800edf8:	3301      	adds	r3, #1
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
 800edfa:	5231      	strh	r1, [r6, r0]
            for(x = 0; x < dest_w; x++) {
 800edfc:	b219      	sxth	r1, r3
                src_tmp8 += LV_IMG_PX_SIZE_ALPHA_BYTE;
 800edfe:	3203      	adds	r2, #3
            for(x = 0; x < dest_w; x++) {
 800ee00:	428f      	cmp	r7, r1
 800ee02:	dcf2      	bgt.n	800edea <lv_draw_sw_img_decoded+0x4d6>
            cbuf += dest_w;
 800ee04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ee06:	4661      	mov	r1, ip
 800ee08:	469c      	mov	ip, r3
 800ee0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ee0c:	4466      	add	r6, ip
            abuf += dest_w;
 800ee0e:	469c      	mov	ip, r3
 800ee10:	4653      	mov	r3, sl
 800ee12:	3301      	adds	r3, #1
 800ee14:	b21b      	sxth	r3, r3
 800ee16:	469a      	mov	sl, r3
        for(y = 0; y < dest_h; y++) {
 800ee18:	9b11      	ldr	r3, [sp, #68]	; 0x44
            abuf += dest_w;
 800ee1a:	19ed      	adds	r5, r5, r7
            src_tmp8 += src_new_line_step_byte;
 800ee1c:	44e3      	add	fp, ip
        for(y = 0; y < dest_h; y++) {
 800ee1e:	4553      	cmp	r3, sl
 800ee20:	d1e0      	bne.n	800ede4 <lv_draw_sw_img_decoded+0x4d0>
 800ee22:	000d      	movs	r5, r1
 800ee24:	4647      	mov	r7, r8
 800ee26:	464e      	mov	r6, r9
 800ee28:	e640      	b.n	800eaac <lv_draw_sw_img_decoded+0x198>
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800ee2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee2c:	2b04      	cmp	r3, #4
 800ee2e:	d044      	beq.n	800eeba <lv_draw_sw_img_decoded+0x5a6>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 800ee30:	2b0e      	cmp	r3, #14
 800ee32:	d025      	beq.n	800ee80 <lv_draw_sw_img_decoded+0x56c>
    else if(!mask_any && !transform && cf == LV_IMG_CF_RGB565A8 && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800ee34:	2b14      	cmp	r3, #20
 800ee36:	d000      	beq.n	800ee3a <lv_draw_sw_img_decoded+0x526>
 800ee38:	e595      	b.n	800e966 <lv_draw_sw_img_decoded+0x52>
 800ee3a:	4653      	mov	r3, sl
 800ee3c:	7a9b      	ldrb	r3, [r3, #10]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d000      	beq.n	800ee44 <lv_draw_sw_img_decoded+0x530>
 800ee42:	e590      	b.n	800e966 <lv_draw_sw_img_decoded+0x52>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ee44:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ee46:	8883      	ldrh	r3, [r0, #4]
 800ee48:	8802      	ldrh	r2, [r0, #0]
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	1a9a      	subs	r2, r3, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ee4e:	88c3      	ldrh	r3, [r0, #6]
 800ee50:	8841      	ldrh	r1, [r0, #2]
 800ee52:	3301      	adds	r3, #1
 800ee54:	1a5b      	subs	r3, r3, r1
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 800ee56:	990f      	ldr	r1, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ee58:	b212      	sxth	r2, r2
        blend_dsc.mask_buf += sizeof(lv_color_t) * src_w * src_h;
 800ee5a:	468c      	mov	ip, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ee5c:	b21b      	sxth	r3, r3
 800ee5e:	4353      	muls	r3, r2
 800ee60:	005b      	lsls	r3, r3, #1
 800ee62:	4463      	add	r3, ip
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 800ee64:	911e      	str	r1, [sp, #120]	; 0x78
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ee66:	213c      	movs	r1, #60	; 0x3c
        blend_dsc.mask_buf += sizeof(lv_color_t) * src_w * src_h;
 800ee68:	9320      	str	r3, [sp, #128]	; 0x80
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ee6a:	2302      	movs	r3, #2
 800ee6c:	aa12      	add	r2, sp, #72	; 0x48
 800ee6e:	1852      	adds	r2, r2, r1
        blend_dsc.blend_area = coords;
 800ee70:	901d      	str	r0, [sp, #116]	; 0x74
        blend_dsc.mask_area = coords;
 800ee72:	9022      	str	r0, [sp, #136]	; 0x88
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ee74:	a91d      	add	r1, sp, #116	; 0x74
 800ee76:	4658      	mov	r0, fp
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800ee78:	7013      	strb	r3, [r2, #0]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ee7a:	f7fe fe1b 	bl	800dab4 <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_RGB565A8 && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800ee7e:	e634      	b.n	800eaea <lv_draw_sw_img_decoded+0x1d6>
        if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
 800ee80:	465b      	mov	r3, fp
 800ee82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ee84:	689a      	ldr	r2, [r3, #8]
 800ee86:	0021      	movs	r1, r4
 800ee88:	a81b      	add	r0, sp, #108	; 0x6c
 800ee8a:	f002 fa7f 	bl	801138c <_lv_area_intersect>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	d100      	bne.n	800ee94 <lv_draw_sw_img_decoded+0x580>
 800ee92:	e62a      	b.n	800eaea <lv_draw_sw_img_decoded+0x1d6>
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 800ee94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        blend_dsc.mask_area = coords;
 800ee96:	9422      	str	r4, [sp, #136]	; 0x88
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 800ee98:	9320      	str	r3, [sp, #128]	; 0x80
        blend_dsc.src_buf = NULL;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	931e      	str	r3, [sp, #120]	; 0x78
        blend_dsc.color = draw_dsc->recolor;
 800ee9e:	4653      	mov	r3, sl
 800eea0:	891b      	ldrh	r3, [r3, #8]
 800eea2:	a912      	add	r1, sp, #72	; 0x48
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800eea4:	203c      	movs	r0, #60	; 0x3c
        blend_dsc.color = draw_dsc->recolor;
 800eea6:	868b      	strh	r3, [r1, #52]	; 0x34
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800eea8:	2302      	movs	r3, #2
 800eeaa:	1809      	adds	r1, r1, r0
 800eeac:	700b      	strb	r3, [r1, #0]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800eeae:	4658      	mov	r0, fp
 800eeb0:	a91d      	add	r1, sp, #116	; 0x74
        blend_dsc.blend_area = coords;
 800eeb2:	941d      	str	r4, [sp, #116]	; 0x74
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800eeb4:	f7fe fdfe 	bl	800dab4 <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 800eeb8:	e617      	b.n	800eaea <lv_draw_sw_img_decoded+0x1d6>
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800eeba:	4653      	mov	r3, sl
 800eebc:	7a9b      	ldrb	r3, [r3, #10]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d000      	beq.n	800eec4 <lv_draw_sw_img_decoded+0x5b0>
 800eec2:	e550      	b.n	800e966 <lv_draw_sw_img_decoded+0x52>
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 800eec4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800eec6:	4658      	mov	r0, fp
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 800eec8:	931e      	str	r3, [sp, #120]	; 0x78
        blend_dsc.blend_area = coords;
 800eeca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800eecc:	a91d      	add	r1, sp, #116	; 0x74
        blend_dsc.blend_area = coords;
 800eece:	931d      	str	r3, [sp, #116]	; 0x74
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800eed0:	f7fe fdf0 	bl	800dab4 <lv_draw_sw_blend>
 800eed4:	e609      	b.n	800eaea <lv_draw_sw_img_decoded+0x1d6>
 800eed6:	46c0      	nop			; (mov r8, r8)
 800eed8:	fffff81f 	.word	0xfffff81f

0800eedc <lv_draw_sw_layer_create>:
 **********************/


struct _lv_draw_layer_ctx_t * lv_draw_sw_layer_create(struct _lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                                                      lv_draw_layer_flags_t flags)
{
 800eedc:	b570      	push	{r4, r5, r6, lr}
 800eede:	0005      	movs	r5, r0
 800eee0:	000c      	movs	r4, r1
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 800eee2:	07d3      	lsls	r3, r2, #31
 800eee4:	d500      	bpl.n	800eee8 <lv_draw_sw_layer_create+0xc>
 800eee6:	e06f      	b.n	800efc8 <lv_draw_sw_layer_create+0xec>
        return NULL;
    }

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
    uint32_t px_size = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800eee8:	0793      	lsls	r3, r2, #30
 800eeea:	d535      	bpl.n	800ef58 <lv_draw_sw_layer_create+0x7c>
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 800eeec:	22c0      	movs	r2, #192	; 0xc0
 800eeee:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800eef0:	01d2      	lsls	r2, r2, #7
 800eef2:	0fdb      	lsrs	r3, r3, #31
 800eef4:	07db      	lsls	r3, r3, #31
 800eef6:	4313      	orrs	r3, r2
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 800eef8:	0008      	movs	r0, r1
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 800eefa:	628b      	str	r3, [r1, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 800eefc:	f002 fa16 	bl	801132c <lv_area_get_size>
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 800ef00:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 800ef02:	0002      	movs	r2, r0
 800ef04:	0045      	lsls	r5, r0, #1
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 800ef06:	0048      	lsls	r0, r1, #1
 800ef08:	0840      	lsrs	r0, r0, #1
 800ef0a:	42a8      	cmp	r0, r5
 800ef0c:	d905      	bls.n	800ef1a <lv_draw_sw_layer_create+0x3e>
 800ef0e:	0090      	lsls	r0, r2, #2
 800ef10:	0fc9      	lsrs	r1, r1, #31
 800ef12:	0840      	lsrs	r0, r0, #1
 800ef14:	07c9      	lsls	r1, r1, #31
 800ef16:	4301      	orrs	r1, r0
 800ef18:	62a1      	str	r1, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 800ef1a:	f003 f847 	bl	8011fac <lv_mem_alloc>
 800ef1e:	6160      	str	r0, [r4, #20]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 800ef20:	2800      	cmp	r0, #0
 800ef22:	d045      	beq.n	800efb0 <lv_draw_sw_layer_create+0xd4>
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
            if(layer_sw_ctx->base_draw.buf == NULL) {
                return NULL;
            }
        }
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 800ef24:	0023      	movs	r3, r4
 800ef26:	0022      	movs	r2, r4
 800ef28:	3308      	adds	r3, #8
 800ef2a:	ca03      	ldmia	r2!, {r0, r1}
 800ef2c:	c303      	stmia	r3!, {r0, r1}
        layer_sw_ctx->base_draw.area_act.y2 = layer_sw_ctx->base_draw.area_full.y1;
 800ef2e:	8863      	ldrh	r3, [r4, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ef30:	89a1      	ldrh	r1, [r4, #12]
 800ef32:	81e3      	strh	r3, [r4, #14]
        lv_coord_t w = lv_area_get_width(&layer_sw_ctx->base_draw.area_act);
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 800ef34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ef36:	3101      	adds	r1, #1
 800ef38:	0058      	lsls	r0, r3, #1
 800ef3a:	8923      	ldrh	r3, [r4, #8]
 800ef3c:	0840      	lsrs	r0, r0, #1
 800ef3e:	1ac9      	subs	r1, r1, r3
 800ef40:	b209      	sxth	r1, r1
 800ef42:	f7f1 f97b 	bl	800023c <__divsi3>
 800ef46:	2103      	movs	r1, #3
 800ef48:	0005      	movs	r5, r0
 800ef4a:	f7f1 f977 	bl	800023c <__divsi3>
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 800ef4e:	086d      	lsrs	r5, r5, #1
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 800ef50:	8220      	strh	r0, [r4, #16]
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 800ef52:	8265      	strh	r5, [r4, #18]
 800ef54:	0020      	movs	r0, r4
 800ef56:	e02a      	b.n	800efae <lv_draw_sw_layer_create+0xd2>
    }
    else {
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 800ef58:	000b      	movs	r3, r1
 800ef5a:	000e      	movs	r6, r1
 800ef5c:	3308      	adds	r3, #8
 800ef5e:	ce06      	ldmia	r6!, {r1, r2}
 800ef60:	c306      	stmia	r3!, {r1, r2}
        layer_sw_ctx->buf_size_bytes = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 800ef62:	0020      	movs	r0, r4
 800ef64:	f002 f9e2 	bl	801132c <lv_area_get_size>
 800ef68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ef6a:	0082      	lsls	r2, r0, #2
 800ef6c:	0fdb      	lsrs	r3, r3, #31
 800ef6e:	0850      	lsrs	r0, r2, #1
 800ef70:	07db      	lsls	r3, r3, #31
 800ef72:	4303      	orrs	r3, r0
 800ef74:	62a3      	str	r3, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 800ef76:	f003 f819 	bl	8011fac <lv_mem_alloc>
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 800ef7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 800ef7c:	6160      	str	r0, [r4, #20]
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 800ef7e:	0059      	lsls	r1, r3, #1
 800ef80:	0849      	lsrs	r1, r1, #1
 800ef82:	f003 fb95 	bl	80126b0 <lv_memset_00>
        layer_sw_ctx->has_alpha = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 800ef86:	0022      	movs	r2, r4
 800ef88:	237f      	movs	r3, #127	; 0x7f
 800ef8a:	3228      	adds	r2, #40	; 0x28
 800ef8c:	78d1      	ldrb	r1, [r2, #3]
 800ef8e:	400b      	ands	r3, r1
 800ef90:	70d3      	strb	r3, [r2, #3]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 800ef92:	6963      	ldr	r3, [r4, #20]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d017      	beq.n	800efc8 <lv_draw_sw_layer_create+0xec>
            return NULL;
        }

        draw_ctx->buf = layer_sw_ctx->base_draw.buf;
 800ef98:	602b      	str	r3, [r5, #0]
        draw_ctx->buf_area = &layer_sw_ctx->base_draw.area_act;
 800ef9a:	606e      	str	r6, [r5, #4]
        draw_ctx->clip_area = &layer_sw_ctx->base_draw.area_act;
 800ef9c:	60ae      	str	r6, [r5, #8]

        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800ef9e:	f7fc ff39 	bl	800be14 <_lv_refr_get_disp_refreshing>
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 800efa2:	2140      	movs	r1, #64	; 0x40
 800efa4:	6802      	ldr	r2, [r0, #0]
 800efa6:	0020      	movs	r0, r4
 800efa8:	7c13      	ldrb	r3, [r2, #16]
 800efaa:	438b      	bics	r3, r1
 800efac:	7413      	strb	r3, [r2, #16]
    }

    return layer_ctx;
}
 800efae:	bd70      	pop	{r4, r5, r6, pc}
            layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE;
 800efb0:	20c0      	movs	r0, #192	; 0xc0
 800efb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800efb4:	0100      	lsls	r0, r0, #4
 800efb6:	0fdb      	lsrs	r3, r3, #31
 800efb8:	07db      	lsls	r3, r3, #31
 800efba:	4303      	orrs	r3, r0
 800efbc:	62a3      	str	r3, [r4, #40]	; 0x28
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 800efbe:	f002 fff5 	bl	8011fac <lv_mem_alloc>
 800efc2:	6160      	str	r0, [r4, #20]
            if(layer_sw_ctx->base_draw.buf == NULL) {
 800efc4:	2800      	cmp	r0, #0
 800efc6:	d1ad      	bne.n	800ef24 <lv_draw_sw_layer_create+0x48>
        return NULL;
 800efc8:	2000      	movs	r0, #0
 800efca:	e7f0      	b.n	800efae <lv_draw_sw_layer_create+0xd2>

0800efcc <lv_draw_sw_layer_adjust>:

void lv_draw_sw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 800efcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efce:	0005      	movs	r5, r0
 800efd0:	000c      	movs	r4, r1
 800efd2:	0017      	movs	r7, r2

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800efd4:	f7fc ff1e 	bl	800be14 <_lv_refr_get_disp_refreshing>
 800efd8:	0006      	movs	r6, r0
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800efda:	07fb      	lsls	r3, r7, #31
 800efdc:	d410      	bmi.n	800f000 <lv_draw_sw_layer_adjust+0x34>
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
        layer_sw_ctx->has_alpha = 1;
        disp_refr->driver->screen_transp = 1;
    }
    else {
        layer_sw_ctx->has_alpha = 0;
 800efde:	0022      	movs	r2, r4
 800efe0:	237f      	movs	r3, #127	; 0x7f
 800efe2:	3228      	adds	r2, #40	; 0x28
 800efe4:	78d1      	ldrb	r1, [r2, #3]
 800efe6:	400b      	ands	r3, r1
        disp_refr->driver->screen_transp = 0;
 800efe8:	2140      	movs	r1, #64	; 0x40
        layer_sw_ctx->has_alpha = 0;
 800efea:	70d3      	strb	r3, [r2, #3]
        disp_refr->driver->screen_transp = 0;
 800efec:	6802      	ldr	r2, [r0, #0]
 800efee:	7c13      	ldrb	r3, [r2, #16]
 800eff0:	438b      	bics	r3, r1
 800eff2:	7413      	strb	r3, [r2, #16]
    }

    draw_ctx->buf = layer_ctx->buf;
 800eff4:	6963      	ldr	r3, [r4, #20]
    draw_ctx->buf_area = &layer_ctx->area_act;
 800eff6:	3408      	adds	r4, #8
    draw_ctx->buf = layer_ctx->buf;
 800eff8:	602b      	str	r3, [r5, #0]
    draw_ctx->buf_area = &layer_ctx->area_act;
 800effa:	606c      	str	r4, [r5, #4]
    draw_ctx->clip_area = &layer_ctx->area_act;
 800effc:	60ac      	str	r4, [r5, #8]
}
 800effe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
 800f000:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f002:	6960      	ldr	r0, [r4, #20]
 800f004:	0059      	lsls	r1, r3, #1
 800f006:	0849      	lsrs	r1, r1, #1
 800f008:	f003 fb52 	bl	80126b0 <lv_memset_00>
        layer_sw_ctx->has_alpha = 1;
 800f00c:	0022      	movs	r2, r4
 800f00e:	2380      	movs	r3, #128	; 0x80
 800f010:	3228      	adds	r2, #40	; 0x28
 800f012:	78d1      	ldrb	r1, [r2, #3]
 800f014:	425b      	negs	r3, r3
 800f016:	430b      	orrs	r3, r1
        disp_refr->driver->screen_transp = 1;
 800f018:	2140      	movs	r1, #64	; 0x40
        layer_sw_ctx->has_alpha = 1;
 800f01a:	70d3      	strb	r3, [r2, #3]
        disp_refr->driver->screen_transp = 1;
 800f01c:	6832      	ldr	r2, [r6, #0]
 800f01e:	7c13      	ldrb	r3, [r2, #16]
 800f020:	430b      	orrs	r3, r1
 800f022:	7413      	strb	r3, [r2, #16]
 800f024:	e7e6      	b.n	800eff4 <lv_draw_sw_layer_adjust+0x28>
 800f026:	46c0      	nop			; (mov r8, r8)

0800f028 <lv_draw_sw_layer_blend>:

void lv_draw_sw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                            const lv_draw_img_dsc_t * draw_dsc)
{
 800f028:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;

    lv_img_dsc_t img;
    img.data = draw_ctx->buf;
 800f02a:	6803      	ldr	r3, [r0, #0]
{
 800f02c:	b085      	sub	sp, #20
 800f02e:	0017      	movs	r7, r2
    img.header.always_zero = 0;
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 800f030:	6842      	ldr	r2, [r0, #4]
    img.data = draw_ctx->buf;
 800f032:	9303      	str	r3, [sp, #12]
 800f034:	8893      	ldrh	r3, [r2, #4]
{
 800f036:	000c      	movs	r4, r1
 800f038:	8811      	ldrh	r1, [r2, #0]
 800f03a:	3301      	adds	r3, #1
 800f03c:	1a5b      	subs	r3, r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f03e:	88d1      	ldrh	r1, [r2, #6]
 800f040:	8852      	ldrh	r2, [r2, #2]
 800f042:	3101      	adds	r1, #1
 800f044:	1a8a      	subs	r2, r1, r2
    img.header.always_zero = 0;
 800f046:	055b      	lsls	r3, r3, #21
 800f048:	0552      	lsls	r2, r2, #21
 800f04a:	0adb      	lsrs	r3, r3, #11
 800f04c:	9901      	ldr	r1, [sp, #4]
 800f04e:	4313      	orrs	r3, r2
 800f050:	4a17      	ldr	r2, [pc, #92]	; (800f0b0 <lv_draw_sw_layer_blend+0x88>)
{
 800f052:	0005      	movs	r5, r0
    img.header.always_zero = 0;
 800f054:	400a      	ands	r2, r1
 800f056:	4313      	orrs	r3, r2
 800f058:	9301      	str	r3, [sp, #4]
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 800f05a:	232b      	movs	r3, #43	; 0x2b
 800f05c:	5ce2      	ldrb	r2, [r4, r3]
 800f05e:	3354      	adds	r3, #84	; 0x54
 800f060:	4293      	cmp	r3, r2
 800f062:	419b      	sbcs	r3, r3
    img.data = draw_ctx->buf;
 800f064:	ae01      	add	r6, sp, #4
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 800f066:	425b      	negs	r3, r3
    lv_img_cache_invalidate_src(&img);
 800f068:	0030      	movs	r0, r6
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 800f06a:	3304      	adds	r3, #4
 800f06c:	7033      	strb	r3, [r6, #0]
    lv_img_cache_invalidate_src(&img);
 800f06e:	f7fe f82f 	bl	800d0d0 <lv_img_cache_invalidate_src>

    /*Restore the original draw_ctx*/
    draw_ctx->buf = layer_ctx->original.buf;
 800f072:	69a3      	ldr	r3, [r4, #24]
 800f074:	69e2      	ldr	r2, [r4, #28]
 800f076:	6a21      	ldr	r1, [r4, #32]
 800f078:	606a      	str	r2, [r5, #4]
 800f07a:	6029      	str	r1, [r5, #0]
 800f07c:	60ab      	str	r3, [r5, #8]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
    draw_ctx->clip_area = layer_ctx->original.clip_area;
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800f07e:	f7fc fec9 	bl	800be14 <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 800f082:	2324      	movs	r3, #36	; 0x24
 800f084:	6801      	ldr	r1, [r0, #0]
 800f086:	2040      	movs	r0, #64	; 0x40
 800f088:	5ce2      	ldrb	r2, [r4, r3]
 800f08a:	3b23      	subs	r3, #35	; 0x23
 800f08c:	401a      	ands	r2, r3
 800f08e:	7c0b      	ldrb	r3, [r1, #16]
 800f090:	0192      	lsls	r2, r2, #6
 800f092:	4383      	bics	r3, r0
 800f094:	4313      	orrs	r3, r2

    /*Blend the layer*/
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 800f096:	0022      	movs	r2, r4
 800f098:	0028      	movs	r0, r5
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 800f09a:	740b      	strb	r3, [r1, #16]
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 800f09c:	3208      	adds	r2, #8
 800f09e:	0033      	movs	r3, r6
 800f0a0:	0039      	movs	r1, r7
 800f0a2:	f7fd f9cb 	bl	800c43c <lv_draw_img>
    lv_draw_wait_for_finish(draw_ctx);
 800f0a6:	0028      	movs	r0, r5
 800f0a8:	f7fd f9b2 	bl	800c410 <lv_draw_wait_for_finish>
}
 800f0ac:	b005      	add	sp, #20
 800f0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0b0:	0000031f 	.word	0x0000031f

0800f0b4 <lv_draw_sw_layer_destroy>:

void lv_draw_sw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 800f0b4:	b510      	push	{r4, lr}
    LV_UNUSED(draw_ctx);

    lv_mem_free(layer_ctx->buf);
 800f0b6:	6948      	ldr	r0, [r1, #20]
 800f0b8:	f002 ff9a 	bl	8011ff0 <lv_mem_free>
}
 800f0bc:	bd10      	pop	{r4, pc}
 800f0be:	46c0      	nop			; (mov r8, r8)

0800f0c0 <lv_draw_sw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_sw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                       uint32_t letter)
{
 800f0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0c2:	4657      	mov	r7, sl
 800f0c4:	464e      	mov	r6, r9
 800f0c6:	4645      	mov	r5, r8
 800f0c8:	46de      	mov	lr, fp
 800f0ca:	b5e0      	push	{r5, r6, r7, lr}
 800f0cc:	000e      	movs	r6, r1
 800f0ce:	001d      	movs	r5, r3
 800f0d0:	b09d      	sub	sp, #116	; 0x74
 800f0d2:	0004      	movs	r4, r0
 800f0d4:	0017      	movs	r7, r2
    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(dsc->font, &g, letter, '\0');
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	002a      	movs	r2, r5
 800f0da:	6830      	ldr	r0, [r6, #0]
 800f0dc:	a911      	add	r1, sp, #68	; 0x44
 800f0de:	f001 f9bd 	bl	801045c <lv_font_get_glyph_dsc>
    if(g_ret == false) {
 800f0e2:	2800      	cmp	r0, #0
 800f0e4:	d033      	beq.n	800f14e <lv_draw_sw_letter+0x8e>
        }
        return;
    }

    /*Don't draw anything if the character is empty. E.g. space*/
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800f0e6:	ab0e      	add	r3, sp, #56	; 0x38
 800f0e8:	8a9b      	ldrh	r3, [r3, #20]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d02f      	beq.n	800f14e <lv_draw_sw_letter+0x8e>
 800f0ee:	aa0e      	add	r2, sp, #56	; 0x38
 800f0f0:	8a52      	ldrh	r2, [r2, #18]
 800f0f2:	2a00      	cmp	r2, #0
 800f0f4:	d02b      	beq.n	800f14e <lv_draw_sw_letter+0x8e>

    lv_point_t gpos;
    gpos.x = pos_p->x + g.ofs_x;
 800f0f6:	a80e      	add	r0, sp, #56	; 0x38
 800f0f8:	8ac0      	ldrh	r0, [r0, #22]
 800f0fa:	8839      	ldrh	r1, [r7, #0]
 800f0fc:	1809      	adds	r1, r1, r0
 800f0fe:	b288      	uxth	r0, r1
 800f100:	b209      	sxth	r1, r1
 800f102:	468a      	mov	sl, r1
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;

    /*If the letter is completely out of mask don't draw it*/
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 800f104:	4452      	add	r2, sl
 800f106:	4694      	mov	ip, r2
 800f108:	9102      	str	r1, [sp, #8]
 800f10a:	68a1      	ldr	r1, [r4, #8]
    gpos.x = pos_p->x + g.ofs_x;
 800f10c:	9001      	str	r0, [sp, #4]
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 800f10e:	2200      	movs	r2, #0
 800f110:	5e88      	ldrsh	r0, [r1, r2]
 800f112:	4584      	cmp	ip, r0
 800f114:	db1b      	blt.n	800f14e <lv_draw_sw_letter+0x8e>
 800f116:	2004      	movs	r0, #4
 800f118:	5e0a      	ldrsh	r2, [r1, r0]
 800f11a:	4552      	cmp	r2, sl
 800f11c:	db17      	blt.n	800f14e <lv_draw_sw_letter+0x8e>
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 800f11e:	aa0e      	add	r2, sp, #56	; 0x38
 800f120:	8b10      	ldrh	r0, [r2, #24]
 800f122:	887a      	ldrh	r2, [r7, #2]
 800f124:	1818      	adds	r0, r3, r0
 800f126:	1a12      	subs	r2, r2, r0
 800f128:	6830      	ldr	r0, [r6, #0]
 800f12a:	8907      	ldrh	r7, [r0, #8]
 800f12c:	8940      	ldrh	r0, [r0, #10]
 800f12e:	19d2      	adds	r2, r2, r7
 800f130:	1a12      	subs	r2, r2, r0
 800f132:	b290      	uxth	r0, r2
 800f134:	b212      	sxth	r2, r2
 800f136:	4693      	mov	fp, r2
 800f138:	9003      	str	r0, [sp, #12]
       gpos.x > draw_ctx->clip_area->x2 ||
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 800f13a:	0017      	movs	r7, r2
 800f13c:	2002      	movs	r0, #2
 800f13e:	5e0a      	ldrsh	r2, [r1, r0]
 800f140:	445b      	add	r3, fp
       gpos.x > draw_ctx->clip_area->x2 ||
 800f142:	4293      	cmp	r3, r2
 800f144:	db03      	blt.n	800f14e <lv_draw_sw_letter+0x8e>
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 800f146:	2206      	movs	r2, #6
 800f148:	5e8b      	ldrsh	r3, [r1, r2]
 800f14a:	455b      	cmp	r3, fp
 800f14c:	da06      	bge.n	800f15c <lv_draw_sw_letter+0x9c>
#endif
    }
    else {
        draw_letter_normal(draw_ctx, dsc, &gpos, &g, map_p);
    }
}
 800f14e:	b01d      	add	sp, #116	; 0x74
 800f150:	bcf0      	pop	{r4, r5, r6, r7}
 800f152:	46bb      	mov	fp, r7
 800f154:	46b2      	mov	sl, r6
 800f156:	46a9      	mov	r9, r5
 800f158:	46a0      	mov	r8, r4
 800f15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    const uint8_t * map_p = lv_font_get_glyph_bitmap(g.resolved_font, letter);
 800f15c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f15e:	0029      	movs	r1, r5
 800f160:	0018      	movs	r0, r3
 800f162:	9304      	str	r3, [sp, #16]
 800f164:	f001 f972 	bl	801044c <lv_font_get_glyph_bitmap>
 800f168:	4684      	mov	ip, r0
    if(map_p == NULL) {
 800f16a:	2800      	cmp	r0, #0
 800f16c:	d0ef      	beq.n	800f14e <lv_draw_sw_letter+0x8e>
    if(g.resolved_font->subpx) {
 800f16e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f170:	9304      	str	r3, [sp, #16]
 800f172:	7b1b      	ldrb	r3, [r3, #12]
 800f174:	079b      	lsls	r3, r3, #30
 800f176:	d1ea      	bne.n	800f14e <lv_draw_sw_letter+0x8e>
{

    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 800f178:	ab0e      	add	r3, sp, #56	; 0x38
 800f17a:	7e9b      	ldrb	r3, [r3, #26]
    lv_opa_t opa = dsc->opa;
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 800f17c:	220f      	movs	r2, #15
    uint32_t bpp = g->bpp;
 800f17e:	071b      	lsls	r3, r3, #28
 800f180:	0f1b      	lsrs	r3, r3, #28
    if(bpp == 3) bpp = 4;
 800f182:	0018      	movs	r0, r3
 800f184:	300d      	adds	r0, #13
    lv_opa_t opa = dsc->opa;
 800f186:	7eb1      	ldrb	r1, [r6, #26]
    if(bpp == 3) bpp = 4;
 800f188:	4002      	ands	r2, r0
 800f18a:	2a01      	cmp	r2, #1
 800f18c:	d800      	bhi.n	800f190 <lv_draw_sw_letter+0xd0>
 800f18e:	e159      	b.n	800f444 <lv_draw_sw_letter+0x384>
        lv_draw_img(draw_ctx, &img_dsc, &fill_area, map_p);
        return;
    }
#endif

    switch(bpp) {
 800f190:	2b04      	cmp	r3, #4
 800f192:	d900      	bls.n	800f196 <lv_draw_sw_letter+0xd6>
 800f194:	e13d      	b.n	800f412 <lv_draw_sw_letter+0x352>
 800f196:	2b01      	cmp	r3, #1
 800f198:	d100      	bne.n	800f19c <lv_draw_sw_letter+0xdc>
 800f19a:	e15c      	b.n	800f456 <lv_draw_sw_letter+0x396>
 800f19c:	2b02      	cmp	r3, #2
 800f19e:	d1d6      	bne.n	800f14e <lv_draw_sw_letter+0x8e>
 800f1a0:	2306      	movs	r3, #6
            shades = 2;
            break;
        case 2:
            bpp_opa_table_p = _lv_bpp2_opa_table;
            bitmask_init  = 0xC0;
            shades = 4;
 800f1a2:	2004      	movs	r0, #4
    switch(bpp) {
 800f1a4:	930c      	str	r3, [sp, #48]	; 0x30
 800f1a6:	3b04      	subs	r3, #4
 800f1a8:	4699      	mov	r9, r3
            bitmask_init  = 0xC0;
 800f1aa:	33be      	adds	r3, #190	; 0xbe
 800f1ac:	930d      	str	r3, [sp, #52]	; 0x34
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800f1ae:	4bb4      	ldr	r3, [pc, #720]	; (800f480 <lv_draw_sw_letter+0x3c0>)
 800f1b0:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 800f1b2:	29fc      	cmp	r1, #252	; 0xfc
 800f1b4:	d81d      	bhi.n	800f1f2 <lv_draw_sw_letter+0x132>
        if(prev_opa != opa || prev_bpp != bpp) {
 800f1b6:	4bb3      	ldr	r3, [pc, #716]	; (800f484 <lv_draw_sw_letter+0x3c4>)
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	428b      	cmp	r3, r1
 800f1bc:	d100      	bne.n	800f1c0 <lv_draw_sw_letter+0x100>
 800f1be:	e154      	b.n	800f46a <lv_draw_sw_letter+0x3aa>
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	4bb1      	ldr	r3, [pc, #708]	; (800f488 <lv_draw_sw_letter+0x3c8>)
 800f1c4:	9304      	str	r3, [sp, #16]
 800f1c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1c8:	4db0      	ldr	r5, [pc, #704]	; (800f48c <lv_draw_sw_letter+0x3cc>)
 800f1ca:	4698      	mov	r8, r3
            uint32_t i;
            for(i = 0; i < shades; i++) {
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800f1cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1ce:	5c9b      	ldrb	r3, [r3, r2]
 800f1d0:	2bff      	cmp	r3, #255	; 0xff
 800f1d2:	d100      	bne.n	800f1d6 <lv_draw_sw_letter+0x116>
 800f1d4:	e117      	b.n	800f406 <lv_draw_sw_letter+0x346>
 800f1d6:	434b      	muls	r3, r1
 800f1d8:	121b      	asrs	r3, r3, #8
 800f1da:	54ab      	strb	r3, [r5, r2]
            for(i = 0; i < shades; i++) {
 800f1dc:	3201      	adds	r2, #1
 800f1de:	4282      	cmp	r2, r0
 800f1e0:	d1f4      	bne.n	800f1cc <lv_draw_sw_letter+0x10c>
 800f1e2:	4643      	mov	r3, r8
 800f1e4:	930c      	str	r3, [sp, #48]	; 0x30
            }
        }
        bpp_opa_table_p = opa_table;
        prev_opa = opa;
        prev_bpp = bpp;
 800f1e6:	464a      	mov	r2, r9
        prev_opa = opa;
 800f1e8:	4ba6      	ldr	r3, [pc, #664]	; (800f484 <lv_draw_sw_letter+0x3c4>)
        bpp_opa_table_p = opa_table;
 800f1ea:	950b      	str	r5, [sp, #44]	; 0x2c
        prev_opa = opa;
 800f1ec:	7019      	strb	r1, [r3, #0]
        prev_bpp = bpp;
 800f1ee:	9b04      	ldr	r3, [sp, #16]
 800f1f0:	601a      	str	r2, [r3, #0]
    }

    int32_t col, row;
    int32_t box_w = g->box_w;
 800f1f2:	ab0e      	add	r3, sp, #56	; 0x38
 800f1f4:	8a59      	ldrh	r1, [r3, #18]
 800f1f6:	9105      	str	r1, [sp, #20]
    int32_t box_h = g->box_h;
 800f1f8:	8a9b      	ldrh	r3, [r3, #20]
 800f1fa:	9308      	str	r3, [sp, #32]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/

    /*Calculate the col/row start/end on the map*/
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 800f1fc:	68a3      	ldr	r3, [r4, #8]
 800f1fe:	2100      	movs	r1, #0
 800f200:	5e5a      	ldrsh	r2, [r3, r1]
 800f202:	4592      	cmp	sl, r2
 800f204:	db00      	blt.n	800f208 <lv_draw_sw_letter+0x148>
 800f206:	e112      	b.n	800f42e <lv_draw_sw_letter+0x36e>
 800f208:	4651      	mov	r1, sl
 800f20a:	1a55      	subs	r5, r2, r1
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
    blend_dsc.mask_buf = mask_buf;
    int32_t mask_p = 0;

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos->x;
 800f20c:	46a8      	mov	r8, r5
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800f20e:	4648      	mov	r0, r9
    fill_area.x1 = col_start + pos->x;
 800f210:	9901      	ldr	r1, [sp, #4]
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800f212:	4368      	muls	r0, r5
    fill_area.x1 = col_start + pos->x;
 800f214:	4441      	add	r1, r8
 800f216:	b20a      	sxth	r2, r1
 800f218:	4692      	mov	sl, r2
#endif
    blend_dsc.blend_area = &fill_area;
    blend_dsc.mask_area = &fill_area;

    uint32_t col_bit_max = 8 - bpp;
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800f21a:	9905      	ldr	r1, [sp, #20]
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 800f21c:	9506      	str	r5, [sp, #24]
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800f21e:	4441      	add	r1, r8
 800f220:	9109      	str	r1, [sp, #36]	; 0x24
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 800f222:	2204      	movs	r2, #4
 800f224:	5e99      	ldrsh	r1, [r3, r2]
 800f226:	9d02      	ldr	r5, [sp, #8]
 800f228:	9a05      	ldr	r2, [sp, #20]
 800f22a:	9104      	str	r1, [sp, #16]
 800f22c:	4690      	mov	r8, r2
 800f22e:	0029      	movs	r1, r5
 800f230:	9a04      	ldr	r2, [sp, #16]
 800f232:	4441      	add	r1, r8
 800f234:	4291      	cmp	r1, r2
 800f236:	dc00      	bgt.n	800f23a <lv_draw_sw_letter+0x17a>
 800f238:	e0ff      	b.n	800f43a <lv_draw_sw_letter+0x37a>
 800f23a:	1b55      	subs	r5, r2, r5
 800f23c:	1c6a      	adds	r2, r5, #1
    fill_area.x2 = col_end  + pos->x - 1;
 800f23e:	b291      	uxth	r1, r2
 800f240:	910a      	str	r1, [sp, #40]	; 0x28
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800f242:	9909      	ldr	r1, [sp, #36]	; 0x24
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 800f244:	9207      	str	r2, [sp, #28]
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800f246:	1a89      	subs	r1, r1, r2
 800f248:	464a      	mov	r2, r9
 800f24a:	434a      	muls	r2, r1
 800f24c:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 800f24e:	2102      	movs	r1, #2
 800f250:	5e5a      	ldrsh	r2, [r3, r1]
 800f252:	2100      	movs	r1, #0
 800f254:	9102      	str	r1, [sp, #8]
 800f256:	4593      	cmp	fp, r2
 800f258:	da0c      	bge.n	800f274 <lv_draw_sw_letter+0x1b4>
 800f25a:	4659      	mov	r1, fp
 800f25c:	1a51      	subs	r1, r2, r1
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800f25e:	464a      	mov	r2, r9
    fill_area.y1 = row_start + pos->y;
 800f260:	4688      	mov	r8, r1
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800f262:	9d05      	ldr	r5, [sp, #20]
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 800f264:	9102      	str	r1, [sp, #8]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800f266:	436a      	muls	r2, r5
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800f268:	434a      	muls	r2, r1
 800f26a:	1880      	adds	r0, r0, r2
    fill_area.y1 = row_start + pos->y;
 800f26c:	9a03      	ldr	r2, [sp, #12]
 800f26e:	4442      	add	r2, r8
 800f270:	b212      	sxth	r2, r2
 800f272:	4693      	mov	fp, r2
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 800f274:	9908      	ldr	r1, [sp, #32]
 800f276:	2206      	movs	r2, #6
 800f278:	5e9a      	ldrsh	r2, [r3, r2]
 800f27a:	187b      	adds	r3, r7, r1
 800f27c:	9104      	str	r1, [sp, #16]
 800f27e:	4293      	cmp	r3, r2
 800f280:	dd02      	ble.n	800f288 <lv_draw_sw_letter+0x1c8>
 800f282:	1bd2      	subs	r2, r2, r7
 800f284:	1c53      	adds	r3, r2, #1
 800f286:	9304      	str	r3, [sp, #16]
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 800f288:	2507      	movs	r5, #7
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800f28a:	211c      	movs	r1, #28
    map_p += bit_ofs >> 3;
 800f28c:	08c7      	lsrs	r7, r0, #3
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 800f28e:	4005      	ands	r5, r0
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800f290:	a815      	add	r0, sp, #84	; 0x54
    map_p += bit_ofs >> 3;
 800f292:	4467      	add	r7, ip
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800f294:	f003 fa0c 	bl	80126b0 <lv_memset_00>
    blend_dsc.opa = dsc->opa;
 800f298:	2134      	movs	r1, #52	; 0x34
    blend_dsc.color = dsc->color;
 800f29a:	89b3      	ldrh	r3, [r6, #12]
 800f29c:	aa0e      	add	r2, sp, #56	; 0x38
 800f29e:	8493      	strh	r3, [r2, #36]	; 0x24
    blend_dsc.opa = dsc->opa;
 800f2a0:	7eb3      	ldrb	r3, [r6, #26]
 800f2a2:	1852      	adds	r2, r2, r1
 800f2a4:	7013      	strb	r3, [r2, #0]
    blend_dsc.blend_mode = dsc->blend_mode;
 800f2a6:	7fb3      	ldrb	r3, [r6, #30]
 800f2a8:	3101      	adds	r1, #1
 800f2aa:	069b      	lsls	r3, r3, #26
 800f2ac:	aa0e      	add	r2, sp, #56	; 0x38
 800f2ae:	0f5b      	lsrs	r3, r3, #29
 800f2b0:	1852      	adds	r2, r2, r1
 800f2b2:	7013      	strb	r3, [r2, #0]
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800f2b4:	f7fc fdae 	bl	800be14 <_lv_refr_get_disp_refreshing>
 800f2b8:	f001 fc5e 	bl	8010b78 <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800f2bc:	9a05      	ldr	r2, [sp, #20]
 800f2be:	9b08      	ldr	r3, [sp, #32]
 800f2c0:	4353      	muls	r3, r2
 800f2c2:	9305      	str	r3, [sp, #20]
 800f2c4:	4283      	cmp	r3, r0
 800f2c6:	dd00      	ble.n	800f2ca <lv_draw_sw_letter+0x20a>
 800f2c8:	9005      	str	r0, [sp, #20]
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800f2ca:	9805      	ldr	r0, [sp, #20]
 800f2cc:	f002 feec 	bl	80120a8 <lv_mem_buf_get>
    fill_area.x1 = col_start + pos->x;
 800f2d0:	4651      	mov	r1, sl
 800f2d2:	ab0e      	add	r3, sp, #56	; 0x38
 800f2d4:	8099      	strh	r1, [r3, #4]
    fill_area.x2 = col_end  + pos->x - 1;
 800f2d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f2d8:	9b01      	ldr	r3, [sp, #4]
 800f2da:	468c      	mov	ip, r1
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	4463      	add	r3, ip
 800f2e0:	a90e      	add	r1, sp, #56	; 0x38
 800f2e2:	810b      	strh	r3, [r1, #8]
    fill_area.y1 = row_start + pos->y;
 800f2e4:	000b      	movs	r3, r1
 800f2e6:	4659      	mov	r1, fp
 800f2e8:	80d9      	strh	r1, [r3, #6]
    fill_area.y2 = fill_area.y1;
 800f2ea:	8159      	strh	r1, [r3, #10]
    blend_dsc.blend_area = &fill_area;
 800f2ec:	ab0f      	add	r3, sp, #60	; 0x3c
                lv_memset_00(mask_buf + mask_p_start, fill_w);
            }
        }
#endif

        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800f2ee:	9906      	ldr	r1, [sp, #24]
    blend_dsc.blend_area = &fill_area;
 800f2f0:	9315      	str	r3, [sp, #84]	; 0x54
    blend_dsc.mask_area = &fill_area;
 800f2f2:	931a      	str	r3, [sp, #104]	; 0x68
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800f2f4:	9b07      	ldr	r3, [sp, #28]
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800f2f6:	0002      	movs	r2, r0
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800f2f8:	1a5b      	subs	r3, r3, r1
 800f2fa:	4698      	mov	r8, r3
 800f2fc:	9301      	str	r3, [sp, #4]
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 800f2fe:	23ff      	movs	r3, #255	; 0xff
    int32_t mask_p = 0;
 800f300:	2100      	movs	r1, #0
 800f302:	4442      	add	r2, r8
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 800f304:	469a      	mov	sl, r3
 800f306:	920a      	str	r2, [sp, #40]	; 0x28
    for(row = row_start ; row < row_end; row++) {
 800f308:	9b02      	ldr	r3, [sp, #8]
 800f30a:	9a04      	ldr	r2, [sp, #16]
    int32_t mask_p = 0;
 800f30c:	468c      	mov	ip, r1
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800f30e:	9008      	str	r0, [sp, #32]
    blend_dsc.mask_buf = mask_buf;
 800f310:	9018      	str	r0, [sp, #96]	; 0x60
    for(row = row_start ; row < row_end; row++) {
 800f312:	4293      	cmp	r3, r2
 800f314:	da5f      	bge.n	800f3d6 <lv_draw_sw_letter+0x316>
 800f316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f318:	46cb      	mov	fp, r9
 800f31a:	9303      	str	r3, [sp, #12]
 800f31c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f31e:	940b      	str	r4, [sp, #44]	; 0x2c
 800f320:	4698      	mov	r8, r3
 800f322:	9c0c      	ldr	r4, [sp, #48]	; 0x30
        bitmask = bitmask_init >> col_bit;
 800f324:	4641      	mov	r1, r8
        for(col = col_start; col < col_end; col++) {
 800f326:	9b06      	ldr	r3, [sp, #24]
 800f328:	9a07      	ldr	r2, [sp, #28]
        bitmask = bitmask_init >> col_bit;
 800f32a:	40e9      	lsrs	r1, r5
        for(col = col_start; col < col_end; col++) {
 800f32c:	4293      	cmp	r3, r2
 800f32e:	da28      	bge.n	800f382 <lv_draw_sw_letter+0x2c2>
 800f330:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f332:	9a08      	ldr	r2, [sp, #32]
 800f334:	9b03      	ldr	r3, [sp, #12]
 800f336:	4460      	add	r0, ip
 800f338:	465e      	mov	r6, fp
 800f33a:	4699      	mov	r9, r3
 800f33c:	4683      	mov	fp, r0
 800f33e:	4462      	add	r2, ip
 800f340:	e00b      	b.n	800f35a <lv_draw_sw_letter+0x29a>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 800f342:	4650      	mov	r0, sl
 800f344:	4003      	ands	r3, r0
 800f346:	4648      	mov	r0, r9
 800f348:	5cc3      	ldrb	r3, [r0, r3]
 800f34a:	7013      	strb	r3, [r2, #0]
            if(col_bit < col_bit_max) {
 800f34c:	42a5      	cmp	r5, r4
 800f34e:	d20e      	bcs.n	800f36e <lv_draw_sw_letter+0x2ae>
                bitmask = bitmask >> bpp;
 800f350:	40f1      	lsrs	r1, r6
                col_bit += bpp;
 800f352:	19ad      	adds	r5, r5, r6
        for(col = col_start; col < col_end; col++) {
 800f354:	3201      	adds	r2, #1
 800f356:	4593      	cmp	fp, r2
 800f358:	d00d      	beq.n	800f376 <lv_draw_sw_letter+0x2b6>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800f35a:	783b      	ldrb	r3, [r7, #0]
 800f35c:	1b60      	subs	r0, r4, r5
 800f35e:	400b      	ands	r3, r1
 800f360:	40c3      	lsrs	r3, r0
            if(letter_px) {
 800f362:	b2d8      	uxtb	r0, r3
 800f364:	2800      	cmp	r0, #0
 800f366:	d1ec      	bne.n	800f342 <lv_draw_sw_letter+0x282>
                mask_buf[mask_p] = 0;
 800f368:	7010      	strb	r0, [r2, #0]
            if(col_bit < col_bit_max) {
 800f36a:	42a5      	cmp	r5, r4
 800f36c:	d3f0      	bcc.n	800f350 <lv_draw_sw_letter+0x290>
                bitmask = bitmask_init;
 800f36e:	4641      	mov	r1, r8
                col_bit = 0;
 800f370:	2500      	movs	r5, #0
                map_p++;
 800f372:	3701      	adds	r7, #1
 800f374:	e7ee      	b.n	800f354 <lv_draw_sw_letter+0x294>
            mask_p++;
 800f376:	464b      	mov	r3, r9
 800f378:	9303      	str	r3, [sp, #12]
 800f37a:	9b01      	ldr	r3, [sp, #4]
 800f37c:	46b3      	mov	fp, r6
 800f37e:	4699      	mov	r9, r3
 800f380:	44cc      	add	ip, r9
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800f382:	9b01      	ldr	r3, [sp, #4]
 800f384:	9a05      	ldr	r2, [sp, #20]
 800f386:	4463      	add	r3, ip
 800f388:	429a      	cmp	r2, r3
 800f38a:	d928      	bls.n	800f3de <lv_draw_sw_letter+0x31e>
            fill_area.y2 ++;
 800f38c:	ab0e      	add	r3, sp, #56	; 0x38
 800f38e:	220a      	movs	r2, #10
 800f390:	5e9a      	ldrsh	r2, [r3, r2]
 800f392:	a90e      	add	r1, sp, #56	; 0x38
 800f394:	1c53      	adds	r3, r2, #1
 800f396:	b21b      	sxth	r3, r3
 800f398:	814b      	strh	r3, [r1, #10]
            fill_area.y1 = fill_area.y2 + 1;
            fill_area.y2 = fill_area.y1;
            mask_p = 0;
        }

        col_bit += col_bit_row_ofs;
 800f39a:	9909      	ldr	r1, [sp, #36]	; 0x24
    for(row = row_start ; row < row_end; row++) {
 800f39c:	9804      	ldr	r0, [sp, #16]
        col_bit += col_bit_row_ofs;
 800f39e:	4689      	mov	r9, r1
 800f3a0:	444d      	add	r5, r9
        map_p += (col_bit >> 3);
 800f3a2:	08e9      	lsrs	r1, r5, #3
 800f3a4:	187f      	adds	r7, r7, r1
        col_bit = col_bit & 0x7;
 800f3a6:	2107      	movs	r1, #7
 800f3a8:	400d      	ands	r5, r1
    for(row = row_start ; row < row_end; row++) {
 800f3aa:	9902      	ldr	r1, [sp, #8]
 800f3ac:	3101      	adds	r1, #1
 800f3ae:	9102      	str	r1, [sp, #8]
 800f3b0:	4281      	cmp	r1, r0
 800f3b2:	d1b7      	bne.n	800f324 <lv_draw_sw_letter+0x264>
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 800f3b4:	a90e      	add	r1, sp, #56	; 0x38
 800f3b6:	2006      	movs	r0, #6
 800f3b8:	5e09      	ldrsh	r1, [r1, r0]
 800f3ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f3bc:	4299      	cmp	r1, r3
 800f3be:	d00a      	beq.n	800f3d6 <lv_draw_sw_letter+0x316>
        fill_area.y2--;
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800f3c0:	212c      	movs	r1, #44	; 0x2c
        fill_area.y2--;
 800f3c2:	ab0e      	add	r3, sp, #56	; 0x38
 800f3c4:	815a      	strh	r2, [r3, #10]
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800f3c6:	2302      	movs	r3, #2
 800f3c8:	aa0e      	add	r2, sp, #56	; 0x38
 800f3ca:	1852      	adds	r2, r2, r1
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f3cc:	0020      	movs	r0, r4
 800f3ce:	a915      	add	r1, sp, #84	; 0x54
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800f3d0:	7013      	strb	r3, [r2, #0]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f3d2:	f7fe fb6f 	bl	800dab4 <lv_draw_sw_blend>
        mask_p = 0;
    }

    lv_mem_buf_release(mask_buf);
 800f3d6:	9808      	ldr	r0, [sp, #32]
 800f3d8:	f002 ff0a 	bl	80121f0 <lv_mem_buf_release>
 800f3dc:	e6b7      	b.n	800f14e <lv_draw_sw_letter+0x8e>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800f3de:	212c      	movs	r1, #44	; 0x2c
 800f3e0:	2302      	movs	r3, #2
 800f3e2:	aa0e      	add	r2, sp, #56	; 0x38
 800f3e4:	1852      	adds	r2, r2, r1
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f3e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f3e8:	a915      	add	r1, sp, #84	; 0x54
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800f3ea:	7013      	strb	r3, [r2, #0]
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f3ec:	f7fe fb62 	bl	800dab4 <lv_draw_sw_blend>
            fill_area.y1 = fill_area.y2 + 1;
 800f3f0:	ab0e      	add	r3, sp, #56	; 0x38
 800f3f2:	220a      	movs	r2, #10
 800f3f4:	5e9a      	ldrsh	r2, [r3, r2]
 800f3f6:	a90e      	add	r1, sp, #56	; 0x38
 800f3f8:	1c53      	adds	r3, r2, #1
 800f3fa:	b21b      	sxth	r3, r3
 800f3fc:	80cb      	strh	r3, [r1, #6]
            fill_area.y2 = fill_area.y1;
 800f3fe:	814b      	strh	r3, [r1, #10]
            mask_p = 0;
 800f400:	2100      	movs	r1, #0
 800f402:	468c      	mov	ip, r1
 800f404:	e7c9      	b.n	800f39a <lv_draw_sw_letter+0x2da>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800f406:	54a9      	strb	r1, [r5, r2]
            for(i = 0; i < shades; i++) {
 800f408:	3201      	adds	r2, #1
 800f40a:	4290      	cmp	r0, r2
 800f40c:	d000      	beq.n	800f410 <lv_draw_sw_letter+0x350>
 800f40e:	e6dd      	b.n	800f1cc <lv_draw_sw_letter+0x10c>
 800f410:	e6e7      	b.n	800f1e2 <lv_draw_sw_letter+0x122>
    switch(bpp) {
 800f412:	2b08      	cmp	r3, #8
 800f414:	d000      	beq.n	800f418 <lv_draw_sw_letter+0x358>
 800f416:	e69a      	b.n	800f14e <lv_draw_sw_letter+0x8e>
 800f418:	2300      	movs	r3, #0
            shades = 256;
 800f41a:	2080      	movs	r0, #128	; 0x80
    switch(bpp) {
 800f41c:	930c      	str	r3, [sp, #48]	; 0x30
 800f41e:	3308      	adds	r3, #8
 800f420:	4699      	mov	r9, r3
            bitmask_init  = 0xFF;
 800f422:	33f7      	adds	r3, #247	; 0xf7
 800f424:	930d      	str	r3, [sp, #52]	; 0x34
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800f426:	4b1a      	ldr	r3, [pc, #104]	; (800f490 <lv_draw_sw_letter+0x3d0>)
            shades = 256;
 800f428:	0040      	lsls	r0, r0, #1
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800f42a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f42c:	e6c1      	b.n	800f1b2 <lv_draw_sw_letter+0xf2>
 800f42e:	9a05      	ldr	r2, [sp, #20]
 800f430:	2000      	movs	r0, #0
 800f432:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 800f434:	2200      	movs	r2, #0
 800f436:	9206      	str	r2, [sp, #24]
 800f438:	e6f3      	b.n	800f222 <lv_draw_sw_letter+0x162>
 800f43a:	9a05      	ldr	r2, [sp, #20]
 800f43c:	9009      	str	r0, [sp, #36]	; 0x24
 800f43e:	920a      	str	r2, [sp, #40]	; 0x28
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 800f440:	9207      	str	r2, [sp, #28]
 800f442:	e704      	b.n	800f24e <lv_draw_sw_letter+0x18e>
 800f444:	2304      	movs	r3, #4
    if(bpp == 3) bpp = 4;
 800f446:	4699      	mov	r9, r3
 800f448:	930c      	str	r3, [sp, #48]	; 0x30
            bitmask_init  = 0xF0;
 800f44a:	33ec      	adds	r3, #236	; 0xec
 800f44c:	930d      	str	r3, [sp, #52]	; 0x34
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800f44e:	4b11      	ldr	r3, [pc, #68]	; (800f494 <lv_draw_sw_letter+0x3d4>)
            shades = 16;
 800f450:	2010      	movs	r0, #16
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800f452:	930b      	str	r3, [sp, #44]	; 0x2c
 800f454:	e6ad      	b.n	800f1b2 <lv_draw_sw_letter+0xf2>
    switch(bpp) {
 800f456:	2307      	movs	r3, #7
 800f458:	930c      	str	r3, [sp, #48]	; 0x30
 800f45a:	3b06      	subs	r3, #6
 800f45c:	4699      	mov	r9, r3
 800f45e:	337f      	adds	r3, #127	; 0x7f
 800f460:	930d      	str	r3, [sp, #52]	; 0x34
 800f462:	4b0d      	ldr	r3, [pc, #52]	; (800f498 <lv_draw_sw_letter+0x3d8>)
 800f464:	2002      	movs	r0, #2
 800f466:	930b      	str	r3, [sp, #44]	; 0x2c
 800f468:	e6a3      	b.n	800f1b2 <lv_draw_sw_letter+0xf2>
        if(prev_opa != opa || prev_bpp != bpp) {
 800f46a:	4b07      	ldr	r3, [pc, #28]	; (800f488 <lv_draw_sw_letter+0x3c8>)
 800f46c:	2200      	movs	r2, #0
 800f46e:	9304      	str	r3, [sp, #16]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	9305      	str	r3, [sp, #20]
 800f474:	454b      	cmp	r3, r9
 800f476:	d000      	beq.n	800f47a <lv_draw_sw_letter+0x3ba>
 800f478:	e6a5      	b.n	800f1c6 <lv_draw_sw_letter+0x106>
 800f47a:	4d04      	ldr	r5, [pc, #16]	; (800f48c <lv_draw_sw_letter+0x3cc>)
 800f47c:	e6b3      	b.n	800f1e6 <lv_draw_sw_letter+0x126>
 800f47e:	46c0      	nop			; (mov r8, r8)
 800f480:	0801b91c 	.word	0x0801b91c
 800f484:	20003310 	.word	0x20003310
 800f488:	2000330c 	.word	0x2000330c
 800f48c:	2000320c 	.word	0x2000320c
 800f490:	0801b930 	.word	0x0801b930
 800f494:	0801b920 	.word	0x0801b920
 800f498:	0801b918 	.word	0x0801b918

0800f49c <lv_draw_sw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                           const lv_point_t * point1, const lv_point_t * point2)
{
 800f49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f49e:	4645      	mov	r5, r8
 800f4a0:	464e      	mov	r6, r9
 800f4a2:	46de      	mov	lr, fp
 800f4a4:	4657      	mov	r7, sl
 800f4a6:	b5e0      	push	{r5, r6, r7, lr}
 800f4a8:	000c      	movs	r4, r1
 800f4aa:	001e      	movs	r6, r3
    if(dsc->width == 0) return;
 800f4ac:	2302      	movs	r3, #2
 800f4ae:	5ec9      	ldrsh	r1, [r1, r3]
{
 800f4b0:	4680      	mov	r8, r0
 800f4b2:	0015      	movs	r5, r2
 800f4b4:	b093      	sub	sp, #76	; 0x4c
    if(dsc->width == 0) return;
 800f4b6:	2900      	cmp	r1, #0
 800f4b8:	d051      	beq.n	800f55e <lv_draw_sw_line+0xc2>
    if(dsc->opa <= LV_OPA_MIN) return;
 800f4ba:	7a23      	ldrb	r3, [r4, #8]
 800f4bc:	2b02      	cmp	r3, #2
 800f4be:	d94e      	bls.n	800f55e <lv_draw_sw_line+0xc2>

    if(point1->x == point2->x && point1->y == point2->y) return;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	5ed2      	ldrsh	r2, [r2, r3]
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	5ef7      	ldrsh	r7, [r6, r3]
 800f4c8:	2002      	movs	r0, #2
 800f4ca:	5e2b      	ldrsh	r3, [r5, r0]
 800f4cc:	469c      	mov	ip, r3
 800f4ce:	2302      	movs	r3, #2
 800f4d0:	5ef0      	ldrsh	r0, [r6, r3]
 800f4d2:	42ba      	cmp	r2, r7
 800f4d4:	d101      	bne.n	800f4da <lv_draw_sw_line+0x3e>
 800f4d6:	4584      	cmp	ip, r0
 800f4d8:	d041      	beq.n	800f55e <lv_draw_sw_line+0xc2>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800f4da:	0fcb      	lsrs	r3, r1, #31
 800f4dc:	1859      	adds	r1, r3, r1
 800f4de:	1049      	asrs	r1, r1, #1
 800f4e0:	b28b      	uxth	r3, r1
 800f4e2:	4699      	mov	r9, r3
 800f4e4:	1c13      	adds	r3, r2, #0
 800f4e6:	42ba      	cmp	r2, r7
 800f4e8:	dc53      	bgt.n	800f592 <lv_draw_sw_line+0xf6>
 800f4ea:	4649      	mov	r1, r9
 800f4ec:	1a5b      	subs	r3, r3, r1
 800f4ee:	4669      	mov	r1, sp
 800f4f0:	800b      	strh	r3, [r1, #0]
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 800f4f2:	1c13      	adds	r3, r2, #0
 800f4f4:	42ba      	cmp	r2, r7
 800f4f6:	db44      	blt.n	800f582 <lv_draw_sw_line+0xe6>
 800f4f8:	466a      	mov	r2, sp
 800f4fa:	444b      	add	r3, r9
 800f4fc:	8093      	strh	r3, [r2, #4]
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800f4fe:	1c03      	adds	r3, r0, #0
 800f500:	4560      	cmp	r0, ip
 800f502:	dc35      	bgt.n	800f570 <lv_draw_sw_line+0xd4>
 800f504:	464a      	mov	r2, r9
 800f506:	1a9b      	subs	r3, r3, r2
 800f508:	466a      	mov	r2, sp
 800f50a:	8053      	strh	r3, [r2, #2]
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800f50c:	1c03      	adds	r3, r0, #0
 800f50e:	4560      	cmp	r0, ip
 800f510:	db2c      	blt.n	800f56c <lv_draw_sw_line+0xd0>
 800f512:	0019      	movs	r1, r3
 800f514:	466b      	mov	r3, sp
 800f516:	4449      	add	r1, r9
 800f518:	80d9      	strh	r1, [r3, #6]

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800f51a:	4643      	mov	r3, r8
 800f51c:	4669      	mov	r1, sp
 800f51e:	4668      	mov	r0, sp
 800f520:	689a      	ldr	r2, [r3, #8]
 800f522:	f001 ff33 	bl	801138c <_lv_area_intersect>
    if(!is_common) return;
 800f526:	2800      	cmp	r0, #0
 800f528:	d019      	beq.n	800f55e <lv_draw_sw_line+0xc2>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f52a:	4643      	mov	r3, r8
 800f52c:	689b      	ldr	r3, [r3, #8]
    draw_ctx->clip_area = &clip_line;
 800f52e:	466a      	mov	r2, sp
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f530:	4699      	mov	r9, r3
    draw_ctx->clip_area = &clip_line;
 800f532:	4643      	mov	r3, r8
 800f534:	609a      	str	r2, [r3, #8]

    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 800f536:	2202      	movs	r2, #2
 800f538:	5eab      	ldrsh	r3, [r5, r2]
 800f53a:	2202      	movs	r2, #2
 800f53c:	5eb1      	ldrsh	r1, [r6, r2]
 800f53e:	428b      	cmp	r3, r1
 800f540:	d05b      	beq.n	800f5fa <lv_draw_sw_line+0x15e>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 800f542:	2200      	movs	r2, #0
 800f544:	5ea8      	ldrsh	r0, [r5, r2]
 800f546:	2700      	movs	r7, #0
 800f548:	5ff2      	ldrsh	r2, [r6, r7]
 800f54a:	4282      	cmp	r2, r0
 800f54c:	d100      	bne.n	800f550 <lv_draw_sw_line+0xb4>
 800f54e:	e087      	b.n	800f660 <lv_draw_sw_line+0x1c4>
    else draw_line_skew(draw_ctx, dsc, point1, point2);

    if(dsc->round_end || dsc->round_start) {
 800f550:	220c      	movs	r2, #12
 800f552:	7a63      	ldrb	r3, [r4, #9]
 800f554:	421a      	tst	r2, r3
 800f556:	d125      	bne.n	800f5a4 <lv_draw_sw_line+0x108>
            cir_area.y2 = point2->y + r - r_corr ;
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 800f558:	4643      	mov	r3, r8
 800f55a:	464a      	mov	r2, r9
 800f55c:	609a      	str	r2, [r3, #8]
}
 800f55e:	b013      	add	sp, #76	; 0x4c
 800f560:	bcf0      	pop	{r4, r5, r6, r7}
 800f562:	46bb      	mov	fp, r7
 800f564:	46b2      	mov	sl, r6
 800f566:	46a9      	mov	r9, r5
 800f568:	46a0      	mov	r8, r4
 800f56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800f56c:	4663      	mov	r3, ip
 800f56e:	e7d0      	b.n	800f512 <lv_draw_sw_line+0x76>
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800f570:	464a      	mov	r2, r9
 800f572:	4663      	mov	r3, ip
 800f574:	1a9b      	subs	r3, r3, r2
 800f576:	466a      	mov	r2, sp
 800f578:	8053      	strh	r3, [r2, #2]
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800f57a:	1c03      	adds	r3, r0, #0
 800f57c:	4560      	cmp	r0, ip
 800f57e:	dac8      	bge.n	800f512 <lv_draw_sw_line+0x76>
 800f580:	e7f4      	b.n	800f56c <lv_draw_sw_line+0xd0>
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 800f582:	466a      	mov	r2, sp
 800f584:	1c3b      	adds	r3, r7, #0
 800f586:	444b      	add	r3, r9
 800f588:	8093      	strh	r3, [r2, #4]
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800f58a:	1c03      	adds	r3, r0, #0
 800f58c:	4560      	cmp	r0, ip
 800f58e:	ddb9      	ble.n	800f504 <lv_draw_sw_line+0x68>
 800f590:	e7ee      	b.n	800f570 <lv_draw_sw_line+0xd4>
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800f592:	4649      	mov	r1, r9
 800f594:	1c3b      	adds	r3, r7, #0
 800f596:	1a5b      	subs	r3, r3, r1
 800f598:	4669      	mov	r1, sp
 800f59a:	800b      	strh	r3, [r1, #0]
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 800f59c:	1c13      	adds	r3, r2, #0
 800f59e:	42ba      	cmp	r2, r7
 800f5a0:	daaa      	bge.n	800f4f8 <lv_draw_sw_line+0x5c>
 800f5a2:	e7ee      	b.n	800f582 <lv_draw_sw_line+0xe6>
        lv_draw_rect_dsc_init(&cir_dsc);
 800f5a4:	af04      	add	r7, sp, #16
 800f5a6:	0038      	movs	r0, r7
 800f5a8:	f7fd fd04 	bl	800cfb4 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 800f5ac:	8823      	ldrh	r3, [r4, #0]
 800f5ae:	80bb      	strh	r3, [r7, #4]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800f5b0:	4b50      	ldr	r3, [pc, #320]	; (800f6f4 <lv_draw_sw_line+0x258>)
 800f5b2:	803b      	strh	r3, [r7, #0]
        cir_dsc.bg_opa = dsc->opa;
 800f5b4:	7a23      	ldrb	r3, [r4, #8]
 800f5b6:	70fb      	strb	r3, [r7, #3]
        int32_t r = (dsc->width >> 1);
 800f5b8:	2202      	movs	r2, #2
 800f5ba:	5ea3      	ldrsh	r3, [r4, r2]
 800f5bc:	105a      	asrs	r2, r3, #1
 800f5be:	4692      	mov	sl, r2
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	439a      	bics	r2, r3
        if(dsc->round_start) {
 800f5c4:	7a63      	ldrb	r3, [r4, #9]
 800f5c6:	4693      	mov	fp, r2
 800f5c8:	075a      	lsls	r2, r3, #29
 800f5ca:	d47c      	bmi.n	800f6c6 <lv_draw_sw_line+0x22a>
        if(dsc->round_end) {
 800f5cc:	071b      	lsls	r3, r3, #28
 800f5ce:	d5c3      	bpl.n	800f558 <lv_draw_sw_line+0xbc>
            cir_area.x1 = point2->x - r;
 800f5d0:	4653      	mov	r3, sl
 800f5d2:	8831      	ldrh	r1, [r6, #0]
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	aa02      	add	r2, sp, #8
 800f5d8:	1ac8      	subs	r0, r1, r3
 800f5da:	8010      	strh	r0, [r2, #0]
            cir_area.y1 = point2->y - r;
 800f5dc:	8870      	ldrh	r0, [r6, #2]
            cir_area.x2 = point2->x + r - r_corr;
 800f5de:	18c9      	adds	r1, r1, r3
            cir_area.y1 = point2->y - r;
 800f5e0:	1ac4      	subs	r4, r0, r3
 800f5e2:	8054      	strh	r4, [r2, #2]
            cir_area.x2 = point2->x + r - r_corr;
 800f5e4:	465c      	mov	r4, fp
            cir_area.y2 = point2->y + r - r_corr ;
 800f5e6:	181b      	adds	r3, r3, r0
            cir_area.x2 = point2->x + r - r_corr;
 800f5e8:	1b09      	subs	r1, r1, r4
            cir_area.y2 = point2->y + r - r_corr ;
 800f5ea:	1b1b      	subs	r3, r3, r4
            cir_area.x2 = point2->x + r - r_corr;
 800f5ec:	8091      	strh	r1, [r2, #4]
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800f5ee:	4640      	mov	r0, r8
 800f5f0:	0039      	movs	r1, r7
            cir_area.y2 = point2->y + r - r_corr ;
 800f5f2:	80d3      	strh	r3, [r2, #6]
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800f5f4:	f7fd fd04 	bl	800d000 <lv_draw_rect>
 800f5f8:	e7ae      	b.n	800f558 <lv_draw_sw_line+0xbc>
    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 800f5fa:	2100      	movs	r1, #0
 800f5fc:	5e6a      	ldrsh	r2, [r5, r1]
 800f5fe:	2000      	movs	r0, #0
 800f600:	5e31      	ldrsh	r1, [r6, r0]
    int32_t w = dsc->width - 1;
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 800f602:	4694      	mov	ip, r2
 800f604:	468a      	mov	sl, r1
    int32_t w = dsc->width - 1;
 800f606:	2102      	movs	r1, #2
 800f608:	5e60      	ldrsh	r0, [r4, r1]
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 800f60a:	af02      	add	r7, sp, #8
    int32_t w = dsc->width - 1;
 800f60c:	3801      	subs	r0, #1
    int32_t w_half0 = w >> 1;
 800f60e:	1041      	asrs	r1, r0, #1
 800f610:	468b      	mov	fp, r1
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 800f612:	4552      	cmp	r2, sl
 800f614:	dc55      	bgt.n	800f6c2 <lv_draw_sw_line+0x226>
 800f616:	4661      	mov	r1, ip
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800f618:	4694      	mov	ip, r2
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 800f61a:	8039      	strh	r1, [r7, #0]
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800f61c:	4552      	cmp	r2, sl
 800f61e:	db4e      	blt.n	800f6be <lv_draw_sw_line+0x222>
 800f620:	4662      	mov	r2, ip
 800f622:	3a01      	subs	r2, #1
 800f624:	80ba      	strh	r2, [r7, #4]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800f626:	2201      	movs	r2, #1
 800f628:	4002      	ands	r2, r0
    blend_area.y1 = point1->y - w_half1;
 800f62a:	b29b      	uxth	r3, r3
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800f62c:	445a      	add	r2, fp
    blend_area.y1 = point1->y - w_half1;
 800f62e:	1a9a      	subs	r2, r3, r2
    blend_area.y2 = point1->y + w_half0;
 800f630:	445b      	add	r3, fp
    blend_area.y1 = point1->y - w_half1;
 800f632:	807a      	strh	r2, [r7, #2]
    blend_area.y2 = point1->y + w_half0;
 800f634:	80fb      	strh	r3, [r7, #6]
    blend_area.x2 = point1->x + w_half0;
    blend_area.y1 = LV_MIN(point1->y, point2->y);
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800f636:	466a      	mov	r2, sp
 800f638:	0039      	movs	r1, r7
 800f63a:	0038      	movs	r0, r7
 800f63c:	f001 fea6 	bl	801138c <_lv_area_intersect>
    if(!is_common) return;
 800f640:	2800      	cmp	r0, #0
 800f642:	d100      	bne.n	800f646 <lv_draw_sw_line+0x1aa>
 800f644:	e784      	b.n	800f550 <lv_draw_sw_line+0xb4>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800f646:	2206      	movs	r2, #6
 800f648:	5ea3      	ldrsh	r3, [r4, r2]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d026      	beq.n	800f69c <lv_draw_sw_line+0x200>
 800f64e:	2204      	movs	r2, #4
 800f650:	5ea3      	ldrsh	r3, [r4, r2]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d022      	beq.n	800f69c <lv_draw_sw_line+0x200>
    bool simple_mode = true;
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
    else if(dashed) simple_mode = false;

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800f656:	211c      	movs	r1, #28
 800f658:	a804      	add	r0, sp, #16
 800f65a:	f003 f829 	bl	80126b0 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
    blend_dsc.color = dsc->color;
    blend_dsc.opa = dsc->opa;

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 800f65e:	e777      	b.n	800f550 <lv_draw_sw_line+0xb4>
    int32_t w = dsc->width - 1;
 800f660:	2702      	movs	r7, #2
 800f662:	5fe0      	ldrsh	r0, [r4, r7]
    blend_area.x1 = point1->x - w_half1;
 800f664:	b292      	uxth	r2, r2
    int32_t w = dsc->width - 1;
 800f666:	3801      	subs	r0, #1
 800f668:	4682      	mov	sl, r0
    int32_t w_half0 = w >> 1;
 800f66a:	1040      	asrs	r0, r0, #1
 800f66c:	4684      	mov	ip, r0
    blend_area.x1 = point1->x - w_half1;
 800f66e:	4693      	mov	fp, r2
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800f670:	2001      	movs	r0, #1
 800f672:	4652      	mov	r2, sl
 800f674:	4010      	ands	r0, r2
    blend_area.x1 = point1->x - w_half1;
 800f676:	465a      	mov	r2, fp
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800f678:	4460      	add	r0, ip
    blend_area.x1 = point1->x - w_half1;
 800f67a:	af02      	add	r7, sp, #8
 800f67c:	1a10      	subs	r0, r2, r0
    blend_area.x2 = point1->x + w_half0;
 800f67e:	4462      	add	r2, ip
 800f680:	80ba      	strh	r2, [r7, #4]
    blend_area.x1 = point1->x - w_half1;
 800f682:	8038      	strh	r0, [r7, #0]
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 800f684:	1c1a      	adds	r2, r3, #0
 800f686:	428b      	cmp	r3, r1
 800f688:	dd00      	ble.n	800f68c <lv_draw_sw_line+0x1f0>
 800f68a:	1c0a      	adds	r2, r1, #0
 800f68c:	807a      	strh	r2, [r7, #2]
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800f68e:	1c1a      	adds	r2, r3, #0
 800f690:	428b      	cmp	r3, r1
 800f692:	da00      	bge.n	800f696 <lv_draw_sw_line+0x1fa>
 800f694:	1c0a      	adds	r2, r1, #0
 800f696:	3a01      	subs	r2, #1
 800f698:	80fa      	strh	r2, [r7, #6]
 800f69a:	e7cc      	b.n	800f636 <lv_draw_sw_line+0x19a>
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800f69c:	a804      	add	r0, sp, #16
 800f69e:	211c      	movs	r1, #28
 800f6a0:	f003 f806 	bl	80126b0 <lv_memset_00>
    blend_dsc.color = dsc->color;
 800f6a4:	466a      	mov	r2, sp
    blend_dsc.opa = dsc->opa;
 800f6a6:	2128      	movs	r1, #40	; 0x28
    blend_dsc.color = dsc->color;
 800f6a8:	8823      	ldrh	r3, [r4, #0]
    blend_dsc.blend_area = &blend_area;
 800f6aa:	9704      	str	r7, [sp, #16]
    blend_dsc.color = dsc->color;
 800f6ac:	8313      	strh	r3, [r2, #24]
    blend_dsc.opa = dsc->opa;
 800f6ae:	7a23      	ldrb	r3, [r4, #8]
 800f6b0:	1852      	adds	r2, r2, r1
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f6b2:	4640      	mov	r0, r8
    blend_dsc.opa = dsc->opa;
 800f6b4:	7013      	strb	r3, [r2, #0]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f6b6:	a904      	add	r1, sp, #16
 800f6b8:	f7fe f9fc 	bl	800dab4 <lv_draw_sw_blend>
 800f6bc:	e748      	b.n	800f550 <lv_draw_sw_line+0xb4>
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800f6be:	46d4      	mov	ip, sl
 800f6c0:	e7ae      	b.n	800f620 <lv_draw_sw_line+0x184>
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 800f6c2:	46d4      	mov	ip, sl
 800f6c4:	e7a7      	b.n	800f616 <lv_draw_sw_line+0x17a>
            cir_area.x1 = point1->x - r;
 800f6c6:	4653      	mov	r3, sl
 800f6c8:	8829      	ldrh	r1, [r5, #0]
 800f6ca:	b29b      	uxth	r3, r3
 800f6cc:	aa02      	add	r2, sp, #8
 800f6ce:	1ac8      	subs	r0, r1, r3
 800f6d0:	8010      	strh	r0, [r2, #0]
            cir_area.y1 = point1->y - r;
 800f6d2:	8868      	ldrh	r0, [r5, #2]
            cir_area.x2 = point1->x + r - r_corr;
 800f6d4:	18c9      	adds	r1, r1, r3
            cir_area.y1 = point1->y - r;
 800f6d6:	1ac5      	subs	r5, r0, r3
 800f6d8:	8055      	strh	r5, [r2, #2]
            cir_area.x2 = point1->x + r - r_corr;
 800f6da:	465d      	mov	r5, fp
            cir_area.y2 = point1->y + r - r_corr ;
 800f6dc:	181b      	adds	r3, r3, r0
 800f6de:	1b5b      	subs	r3, r3, r5
            cir_area.x2 = point1->x + r - r_corr;
 800f6e0:	1b49      	subs	r1, r1, r5
 800f6e2:	8091      	strh	r1, [r2, #4]
            cir_area.y2 = point1->y + r - r_corr ;
 800f6e4:	80d3      	strh	r3, [r2, #6]
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800f6e6:	0039      	movs	r1, r7
 800f6e8:	4640      	mov	r0, r8
 800f6ea:	f7fd fc89 	bl	800d000 <lv_draw_rect>
        if(dsc->round_end) {
 800f6ee:	7a63      	ldrb	r3, [r4, #9]
 800f6f0:	e76c      	b.n	800f5cc <lv_draw_sw_line+0x130>
 800f6f2:	46c0      	nop			; (mov r8, r8)
 800f6f4:	00007fff 	.word	0x00007fff

0800f6f8 <lv_draw_sw_polygon>:
    LV_UNUSED(point_cnt);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(draw_dsc);
    LV_LOG_WARN("Can't draw polygon with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 800f6f8:	4770      	bx	lr
 800f6fa:	46c0      	nop			; (mov r8, r8)

0800f6fc <draw_border_simple>:

#endif /*LV_DRAW_COMPLEX*/
}
static void draw_border_simple(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                               lv_color_t color, lv_opa_t opa)
{
 800f6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6fe:	46de      	mov	lr, fp
 800f700:	4657      	mov	r7, sl
 800f702:	464e      	mov	r6, r9
 800f704:	4645      	mov	r5, r8
 800f706:	4698      	mov	r8, r3
 800f708:	b5e0      	push	{r5, r6, r7, lr}
 800f70a:	b08f      	sub	sp, #60	; 0x3c
 800f70c:	ab18      	add	r3, sp, #96	; 0x60
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	000d      	movs	r5, r1
 800f712:	0007      	movs	r7, r0
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 800f714:	211c      	movs	r1, #28
 800f716:	a807      	add	r0, sp, #28
{
 800f718:	0016      	movs	r6, r2
 800f71a:	4699      	mov	r9, r3
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 800f71c:	f002 ffc8 	bl	80126b0 <lv_memset_00>
    blend_dsc.blend_area = &a;
    blend_dsc.color = color;
 800f720:	4642      	mov	r2, r8
 800f722:	ab04      	add	r3, sp, #16
 800f724:	829a      	strh	r2, [r3, #20]
    blend_dsc.opa = opa;
 800f726:	2224      	movs	r2, #36	; 0x24
 800f728:	189b      	adds	r3, r3, r2
 800f72a:	464a      	mov	r2, r9
 800f72c:	701a      	strb	r2, [r3, #0]

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 800f72e:	2202      	movs	r2, #2
 800f730:	5eab      	ldrsh	r3, [r5, r2]
    blend_dsc.blend_area = &a;
 800f732:	ac05      	add	r4, sp, #20
    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 800f734:	469b      	mov	fp, r3
 800f736:	2202      	movs	r2, #2
 800f738:	5eb3      	ldrsh	r3, [r6, r2]
    blend_dsc.blend_area = &a;
 800f73a:	9407      	str	r4, [sp, #28]
    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 800f73c:	469a      	mov	sl, r3
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 800f73e:	2206      	movs	r2, #6
 800f740:	5eab      	ldrsh	r3, [r5, r2]
 800f742:	4699      	mov	r9, r3
 800f744:	2206      	movs	r2, #6
 800f746:	5eb3      	ldrsh	r3, [r6, r2]
 800f748:	4698      	mov	r8, r3
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 800f74a:	2200      	movs	r2, #0
 800f74c:	5eab      	ldrsh	r3, [r5, r2]
 800f74e:	2100      	movs	r1, #0
 800f750:	5e72      	ldrsh	r2, [r6, r1]
 800f752:	9300      	str	r3, [sp, #0]
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;


    /*Top*/
    a.x1 = outer_area->x1;
 800f754:	8023      	strh	r3, [r4, #0]
    a.x2 = outer_area->x2;
    a.y1 = outer_area->y1;
 800f756:	465b      	mov	r3, fp
 800f758:	8063      	strh	r3, [r4, #2]
    a.y2 = inner_area->y1 - 1;
 800f75a:	4653      	mov	r3, sl
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 800f75c:	9201      	str	r2, [sp, #4]
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 800f75e:	2104      	movs	r1, #4
 800f760:	5e6a      	ldrsh	r2, [r5, r1]
 800f762:	2004      	movs	r0, #4
 800f764:	5e31      	ldrsh	r1, [r6, r0]
    a.y2 = inner_area->y1 - 1;
 800f766:	3b01      	subs	r3, #1
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 800f768:	9202      	str	r2, [sp, #8]
    a.x2 = outer_area->x2;
 800f76a:	80a2      	strh	r2, [r4, #4]
    a.y2 = inner_area->y1 - 1;
 800f76c:	80e3      	strh	r3, [r4, #6]
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 800f76e:	464a      	mov	r2, r9
 800f770:	4643      	mov	r3, r8
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 800f772:	9103      	str	r1, [sp, #12]
    if(top_side) {
 800f774:	45d3      	cmp	fp, sl
 800f776:	dd38      	ble.n	800f7ea <draw_border_simple+0xee>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 800f778:	3301      	adds	r3, #1
 800f77a:	8063      	strh	r3, [r4, #2]
    a.y2 = outer_area->y2;
 800f77c:	80e2      	strh	r2, [r4, #6]
    if(bottom_side) {
 800f77e:	45c1      	cmp	r9, r8
 800f780:	da40      	bge.n	800f804 <draw_border_simple+0x108>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    /*Left*/
    a.x1 = outer_area->x1;
 800f782:	882b      	ldrh	r3, [r5, #0]
 800f784:	8023      	strh	r3, [r4, #0]
    a.x2 = inner_area->x1 - 1;
 800f786:	8833      	ldrh	r3, [r6, #0]
 800f788:	3b01      	subs	r3, #1
 800f78a:	80a3      	strh	r3, [r4, #4]
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 800f78c:	45d3      	cmp	fp, sl
 800f78e:	dc1b      	bgt.n	800f7c8 <draw_border_simple+0xcc>
 800f790:	2202      	movs	r2, #2
 800f792:	5eb3      	ldrsh	r3, [r6, r2]
 800f794:	8063      	strh	r3, [r4, #2]
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 800f796:	45c1      	cmp	r9, r8
 800f798:	db1b      	blt.n	800f7d2 <draw_border_simple+0xd6>
 800f79a:	2206      	movs	r2, #6
 800f79c:	5eb3      	ldrsh	r3, [r6, r2]
    if(left_side) {
 800f79e:	9a01      	ldr	r2, [sp, #4]
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 800f7a0:	80e3      	strh	r3, [r4, #6]
    if(left_side) {
 800f7a2:	9b00      	ldr	r3, [sp, #0]
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	dd1b      	ble.n	800f7e0 <draw_border_simple+0xe4>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 800f7a8:	88b3      	ldrh	r3, [r6, #4]
    a.x2 = outer_area->x2;
    if(right_side) {
 800f7aa:	9a03      	ldr	r2, [sp, #12]
    a.x1 = inner_area->x2 + 1;
 800f7ac:	3301      	adds	r3, #1
 800f7ae:	8023      	strh	r3, [r4, #0]
    a.x2 = outer_area->x2;
 800f7b0:	88ab      	ldrh	r3, [r5, #4]
 800f7b2:	80a3      	strh	r3, [r4, #4]
    if(right_side) {
 800f7b4:	9b02      	ldr	r3, [sp, #8]
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	da29      	bge.n	800f80e <draw_border_simple+0x112>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }
}
 800f7ba:	b00f      	add	sp, #60	; 0x3c
 800f7bc:	bcf0      	pop	{r4, r5, r6, r7}
 800f7be:	46bb      	mov	fp, r7
 800f7c0:	46b2      	mov	sl, r6
 800f7c2:	46a9      	mov	r9, r5
 800f7c4:	46a0      	mov	r8, r4
 800f7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 800f7c8:	2202      	movs	r2, #2
 800f7ca:	5eab      	ldrsh	r3, [r5, r2]
 800f7cc:	8063      	strh	r3, [r4, #2]
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 800f7ce:	45c1      	cmp	r9, r8
 800f7d0:	dae3      	bge.n	800f79a <draw_border_simple+0x9e>
 800f7d2:	2206      	movs	r2, #6
 800f7d4:	5eab      	ldrsh	r3, [r5, r2]
    if(left_side) {
 800f7d6:	9a01      	ldr	r2, [sp, #4]
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 800f7d8:	80e3      	strh	r3, [r4, #6]
    if(left_side) {
 800f7da:	9b00      	ldr	r3, [sp, #0]
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	dce3      	bgt.n	800f7a8 <draw_border_simple+0xac>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f7e0:	0038      	movs	r0, r7
 800f7e2:	a907      	add	r1, sp, #28
 800f7e4:	f7fe f966 	bl	800dab4 <lv_draw_sw_blend>
 800f7e8:	e7de      	b.n	800f7a8 <draw_border_simple+0xac>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f7ea:	a907      	add	r1, sp, #28
 800f7ec:	0038      	movs	r0, r7
 800f7ee:	f7fe f961 	bl	800dab4 <lv_draw_sw_blend>
    a.y1 = inner_area->y2 + 1;
 800f7f2:	2206      	movs	r2, #6
 800f7f4:	5eb3      	ldrsh	r3, [r6, r2]
    a.y2 = outer_area->y2;
 800f7f6:	2106      	movs	r1, #6
 800f7f8:	5e6a      	ldrsh	r2, [r5, r1]
    a.y1 = inner_area->y2 + 1;
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	8063      	strh	r3, [r4, #2]
    a.y2 = outer_area->y2;
 800f7fe:	80e2      	strh	r2, [r4, #6]
    if(bottom_side) {
 800f800:	45c1      	cmp	r9, r8
 800f802:	dbbe      	blt.n	800f782 <draw_border_simple+0x86>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f804:	0038      	movs	r0, r7
 800f806:	a907      	add	r1, sp, #28
 800f808:	f7fe f954 	bl	800dab4 <lv_draw_sw_blend>
 800f80c:	e7b9      	b.n	800f782 <draw_border_simple+0x86>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f80e:	0038      	movs	r0, r7
 800f810:	a907      	add	r1, sp, #28
 800f812:	f7fe f94f 	bl	800dab4 <lv_draw_sw_blend>
}
 800f816:	e7d0      	b.n	800f7ba <draw_border_simple+0xbe>

0800f818 <lv_draw_sw_rect>:
{
 800f818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f81a:	4645      	mov	r5, r8
 800f81c:	46de      	mov	lr, fp
 800f81e:	4657      	mov	r7, sl
 800f820:	464e      	mov	r6, r9
 800f822:	b5e0      	push	{r5, r6, r7, lr}
 800f824:	b097      	sub	sp, #92	; 0x5c
 800f826:	9004      	str	r0, [sp, #16]
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 800f828:	78cb      	ldrb	r3, [r1, #3]
{
 800f82a:	000c      	movs	r4, r1
 800f82c:	0015      	movs	r5, r2
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 800f82e:	2b02      	cmp	r3, #2
 800f830:	d962      	bls.n	800f8f8 <lv_draw_sw_rect+0xe0>
    dest->x1 = src->x1;
 800f832:	2300      	movs	r3, #0
 800f834:	5ed0      	ldrsh	r0, [r2, r3]
 800f836:	ae0a      	add	r6, sp, #40	; 0x28
 800f838:	8030      	strh	r0, [r6, #0]
    dest->y1 = src->y1;
 800f83a:	2302      	movs	r3, #2
 800f83c:	5ed1      	ldrsh	r1, [r2, r3]
 800f83e:	8071      	strh	r1, [r6, #2]
    dest->x2 = src->x2;
 800f840:	2304      	movs	r3, #4
 800f842:	5ed2      	ldrsh	r2, [r2, r3]
 800f844:	80b2      	strh	r2, [r6, #4]
    dest->y2 = src->y2;
 800f846:	2706      	movs	r7, #6
 800f848:	5feb      	ldrsh	r3, [r5, r7]
 800f84a:	80f3      	strh	r3, [r6, #6]
 800f84c:	469b      	mov	fp, r3
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 800f84e:	2320      	movs	r3, #32
 800f850:	5ee7      	ldrsh	r7, [r4, r3]
 800f852:	2f01      	cmp	r7, #1
 800f854:	dd26      	ble.n	800f8a4 <lv_draw_sw_rect+0x8c>
 800f856:	2722      	movs	r7, #34	; 0x22
 800f858:	5de7      	ldrb	r7, [r4, r7]
 800f85a:	2ffc      	cmp	r7, #252	; 0xfc
 800f85c:	d922      	bls.n	800f8a4 <lv_draw_sw_rect+0x8c>
 800f85e:	2700      	movs	r7, #0
 800f860:	5fe3      	ldrsh	r3, [r4, r7]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d01e      	beq.n	800f8a4 <lv_draw_sw_rect+0x8c>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800f866:	2323      	movs	r3, #35	; 0x23
 800f868:	5ce3      	ldrb	r3, [r4, r3]
 800f86a:	069b      	lsls	r3, r3, #26
 800f86c:	4699      	mov	r9, r3
 800f86e:	0edb      	lsrs	r3, r3, #27
 800f870:	4698      	mov	r8, r3
 800f872:	464b      	mov	r3, r9
 800f874:	0f5b      	lsrs	r3, r3, #29
 800f876:	469a      	mov	sl, r3
 800f878:	2301      	movs	r3, #1
 800f87a:	469c      	mov	ip, r3
 800f87c:	4653      	mov	r3, sl
 800f87e:	4667      	mov	r7, ip
 800f880:	403b      	ands	r3, r7
 800f882:	469a      	mov	sl, r3
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800f884:	464b      	mov	r3, r9
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800f886:	4450      	add	r0, sl
 800f888:	8030      	strh	r0, [r6, #0]
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800f88a:	0f18      	lsrs	r0, r3, #28
 800f88c:	4038      	ands	r0, r7
 800f88e:	1809      	adds	r1, r1, r0
 800f890:	8071      	strh	r1, [r6, #2]
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800f892:	0f99      	lsrs	r1, r3, #30
 800f894:	4039      	ands	r1, r7
 800f896:	1a52      	subs	r2, r2, r1
 800f898:	80b2      	strh	r2, [r6, #4]
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800f89a:	4642      	mov	r2, r8
 800f89c:	465b      	mov	r3, fp
 800f89e:	403a      	ands	r2, r7
 800f8a0:	1a9b      	subs	r3, r3, r2
 800f8a2:	80f3      	strh	r3, [r6, #6]
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 800f8a4:	9b04      	ldr	r3, [sp, #16]
 800f8a6:	0031      	movs	r1, r6
 800f8a8:	689a      	ldr	r2, [r3, #8]
 800f8aa:	a80c      	add	r0, sp, #48	; 0x30
 800f8ac:	f001 fd6e 	bl	801138c <_lv_area_intersect>
 800f8b0:	2800      	cmp	r0, #0
 800f8b2:	d021      	beq.n	800f8f8 <lv_draw_sw_rect+0xe0>
    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 800f8b4:	7be3      	ldrb	r3, [r4, #15]
 800f8b6:	075b      	lsls	r3, r3, #29
 800f8b8:	0f5a      	lsrs	r2, r3, #29
 800f8ba:	4692      	mov	sl, r2
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d000      	beq.n	800f8c2 <lv_draw_sw_rect+0xaa>
 800f8c0:	e0dd      	b.n	800fa7e <lv_draw_sw_rect+0x266>
 800f8c2:	88a3      	ldrh	r3, [r4, #4]
 800f8c4:	4699      	mov	r9, r3
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 800f8c6:	8963      	ldrh	r3, [r4, #10]
 800f8c8:	454b      	cmp	r3, r9
 800f8ca:	d100      	bne.n	800f8ce <lv_draw_sw_rect+0xb6>
 800f8cc:	e0dd      	b.n	800fa8a <lv_draw_sw_rect+0x272>
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 800f8ce:	ab0e      	add	r3, sp, #56	; 0x38
 800f8d0:	4698      	mov	r8, r3
 800f8d2:	221c      	movs	r2, #28
 800f8d4:	0018      	movs	r0, r3
 800f8d6:	2100      	movs	r1, #0
 800f8d8:	f00b feb0 	bl	801b63c <memset>
    blend_dsc.blend_mode = dsc->blend_mode;
 800f8dc:	4642      	mov	r2, r8
 800f8de:	78a3      	ldrb	r3, [r4, #2]
 800f8e0:	7653      	strb	r3, [r2, #25]
    blend_dsc.color = bg_color;
 800f8e2:	4643      	mov	r3, r8
 800f8e4:	464a      	mov	r2, r9
 800f8e6:	811a      	strh	r2, [r3, #8]
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	5ea3      	ldrsh	r3, [r4, r2]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d103      	bne.n	800f8f8 <lv_draw_sw_rect+0xe0>
 800f8f0:	4653      	mov	r3, sl
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d100      	bne.n	800f8f8 <lv_draw_sw_rect+0xe0>
 800f8f6:	e0da      	b.n	800faae <lv_draw_sw_rect+0x296>
    if(dsc->bg_img_src == NULL) return;
 800f8f8:	6923      	ldr	r3, [r4, #16]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d003      	beq.n	800f906 <lv_draw_sw_rect+0xee>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 800f8fe:	7ea3      	ldrb	r3, [r4, #26]
 800f900:	2b02      	cmp	r3, #2
 800f902:	d900      	bls.n	800f906 <lv_draw_sw_rect+0xee>
 800f904:	e06d      	b.n	800f9e2 <lv_draw_sw_rect+0x1ca>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 800f906:	2322      	movs	r3, #34	; 0x22
 800f908:	5ce1      	ldrb	r1, [r4, r3]
 800f90a:	2902      	cmp	r1, #2
 800f90c:	d957      	bls.n	800f9be <lv_draw_sw_rect+0x1a6>
    if(dsc->border_width == 0) return;
 800f90e:	2320      	movs	r3, #32
 800f910:	5ee2      	ldrsh	r2, [r4, r3]
 800f912:	2a00      	cmp	r2, #0
 800f914:	d053      	beq.n	800f9be <lv_draw_sw_rect+0x1a6>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 800f916:	2323      	movs	r3, #35	; 0x23
 800f918:	203e      	movs	r0, #62	; 0x3e
 800f91a:	5ce3      	ldrb	r3, [r4, r3]
 800f91c:	4218      	tst	r0, r3
 800f91e:	d04e      	beq.n	800f9be <lv_draw_sw_rect+0x1a6>
    if(dsc->border_post) return;
 800f920:	07db      	lsls	r3, r3, #31
 800f922:	d44c      	bmi.n	800f9be <lv_draw_sw_rect+0x1a6>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f924:	88ab      	ldrh	r3, [r5, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f926:	886e      	ldrh	r6, [r5, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f928:	469c      	mov	ip, r3
 800f92a:	882b      	ldrh	r3, [r5, #0]
 800f92c:	4699      	mov	r9, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f92e:	88eb      	ldrh	r3, [r5, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f930:	464f      	mov	r7, r9
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f932:	469b      	mov	fp, r3
    int32_t rout = dsc->radius;
 800f934:	2300      	movs	r3, #0
 800f936:	5ee0      	ldrsh	r0, [r4, r3]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f938:	4663      	mov	r3, ip
 800f93a:	3301      	adds	r3, #1
 800f93c:	1bdb      	subs	r3, r3, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f93e:	2701      	movs	r7, #1
 800f940:	445f      	add	r7, fp
 800f942:	1bbf      	subs	r7, r7, r6
    int32_t coords_h = lv_area_get_height(coords);
 800f944:	b23f      	sxth	r7, r7
    int32_t short_side = LV_MIN(coords_w, coords_h);
 800f946:	b21b      	sxth	r3, r3
 800f948:	42bb      	cmp	r3, r7
 800f94a:	dd00      	ble.n	800f94e <lv_draw_sw_rect+0x136>
 800f94c:	003b      	movs	r3, r7
    if(rout > short_side >> 1) rout = short_side >> 1;
 800f94e:	105b      	asrs	r3, r3, #1
 800f950:	4283      	cmp	r3, r0
 800f952:	dd00      	ble.n	800f956 <lv_draw_sw_rect+0x13e>
 800f954:	0003      	movs	r3, r0
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800f956:	2023      	movs	r0, #35	; 0x23
 800f958:	5c20      	ldrb	r0, [r4, r0]
 800f95a:	0680      	lsls	r0, r0, #26
 800f95c:	0ec7      	lsrs	r7, r0, #27
 800f95e:	46ba      	mov	sl, r7
 800f960:	0080      	lsls	r0, r0, #2
 800f962:	d400      	bmi.n	800f966 <lv_draw_sw_rect+0x14e>
 800f964:	e0ac      	b.n	800fac0 <lv_draw_sw_rect+0x2a8>
 800f966:	b292      	uxth	r2, r2
 800f968:	0010      	movs	r0, r2
 800f96a:	af0e      	add	r7, sp, #56	; 0x38
 800f96c:	444a      	add	r2, r9
 800f96e:	803a      	strh	r2, [r7, #0]
 800f970:	46b8      	mov	r8, r7
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800f972:	4657      	mov	r7, sl
 800f974:	0002      	movs	r2, r0
 800f976:	073f      	lsls	r7, r7, #28
 800f978:	d402      	bmi.n	800f980 <lv_draw_sw_rect+0x168>
 800f97a:	18c2      	adds	r2, r0, r3
 800f97c:	4252      	negs	r2, r2
 800f97e:	b292      	uxth	r2, r2
 800f980:	4667      	mov	r7, ip
 800f982:	1aba      	subs	r2, r7, r2
 800f984:	4647      	mov	r7, r8
 800f986:	80ba      	strh	r2, [r7, #4]
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800f988:	4657      	mov	r7, sl
 800f98a:	0002      	movs	r2, r0
 800f98c:	07bf      	lsls	r7, r7, #30
 800f98e:	d402      	bmi.n	800f996 <lv_draw_sw_rect+0x17e>
 800f990:	18c2      	adds	r2, r0, r3
 800f992:	4252      	negs	r2, r2
 800f994:	b292      	uxth	r2, r2
 800f996:	18b6      	adds	r6, r6, r2
 800f998:	4642      	mov	r2, r8
 800f99a:	8056      	strh	r6, [r2, #2]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800f99c:	4652      	mov	r2, sl
 800f99e:	07d2      	lsls	r2, r2, #31
 800f9a0:	d402      	bmi.n	800f9a8 <lv_draw_sw_rect+0x190>
 800f9a2:	18c3      	adds	r3, r0, r3
 800f9a4:	425a      	negs	r2, r3
 800f9a6:	b290      	uxth	r0, r2
 800f9a8:	465b      	mov	r3, fp
 800f9aa:	1a18      	subs	r0, r3, r0
 800f9ac:	4643      	mov	r3, r8
 800f9ae:	80d8      	strh	r0, [r3, #6]
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 800f9b0:	8be3      	ldrh	r3, [r4, #30]
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
 800f9b2:	4642      	mov	r2, r8
 800f9b4:	9100      	str	r1, [sp, #0]
 800f9b6:	9804      	ldr	r0, [sp, #16]
 800f9b8:	0029      	movs	r1, r5
 800f9ba:	f7ff fe9f 	bl	800f6fc <draw_border_simple>
    draw_outline(draw_ctx, dsc, coords);
 800f9be:	2326      	movs	r3, #38	; 0x26
 800f9c0:	5ee0      	ldrsh	r0, [r4, r3]
 800f9c2:	2328      	movs	r3, #40	; 0x28
 800f9c4:	5ee2      	ldrsh	r2, [r4, r3]
 800f9c6:	232a      	movs	r3, #42	; 0x2a
 800f9c8:	5ce6      	ldrb	r6, [r4, r3]
 800f9ca:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 800f9cc:	2e02      	cmp	r6, #2
 800f9ce:	d901      	bls.n	800f9d4 <lv_draw_sw_rect+0x1bc>
    if(dsc->outline_width == 0) return;
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	d123      	bne.n	800fa1c <lv_draw_sw_rect+0x204>
}
 800f9d4:	b017      	add	sp, #92	; 0x5c
 800f9d6:	bcf0      	pop	{r4, r5, r6, r7}
 800f9d8:	46bb      	mov	fp, r7
 800f9da:	46b2      	mov	sl, r6
 800f9dc:	46a9      	mov	r9, r5
 800f9de:	46a0      	mov	r8, r4
 800f9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 800f9e2:	9e04      	ldr	r6, [sp, #16]
 800f9e4:	0029      	movs	r1, r5
 800f9e6:	68b2      	ldr	r2, [r6, #8]
 800f9e8:	a80a      	add	r0, sp, #40	; 0x28
 800f9ea:	f001 fccf 	bl	801138c <_lv_area_intersect>
 800f9ee:	2800      	cmp	r0, #0
 800f9f0:	d100      	bne.n	800f9f4 <lv_draw_sw_rect+0x1dc>
 800f9f2:	e788      	b.n	800f906 <lv_draw_sw_rect+0xee>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f9f4:	68b3      	ldr	r3, [r6, #8]
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 800f9f6:	6920      	ldr	r0, [r4, #16]
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800f9f8:	4699      	mov	r9, r3
    draw_ctx->clip_area = &clip_area;
 800f9fa:	ab0a      	add	r3, sp, #40	; 0x28
 800f9fc:	60b3      	str	r3, [r6, #8]
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 800f9fe:	f7fc fea1 	bl	800c744 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 800fa02:	2802      	cmp	r0, #2
 800fa04:	d061      	beq.n	800faca <lv_draw_sw_rect+0x2b2>
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 800fa06:	6920      	ldr	r0, [r4, #16]
 800fa08:	a909      	add	r1, sp, #36	; 0x24
 800fa0a:	f7fd ff01 	bl	800d810 <lv_img_decoder_get_info>
        if(res == LV_RES_OK) {
 800fa0e:	2801      	cmp	r0, #1
 800fa10:	d100      	bne.n	800fa14 <lv_draw_sw_rect+0x1fc>
 800fa12:	e0a6      	b.n	800fb62 <lv_draw_sw_rect+0x34a>
    draw_ctx->clip_area = clip_area_ori;
 800fa14:	464b      	mov	r3, r9
 800fa16:	9a04      	ldr	r2, [sp, #16]
 800fa18:	6093      	str	r3, [r2, #8]
 800fa1a:	e774      	b.n	800f906 <lv_draw_sw_rect+0xee>
    dest->y1 = src->y1;
 800fa1c:	2402      	movs	r4, #2
 800fa1e:	5f29      	ldrsh	r1, [r5, r4]
    lv_coord_t pad = dsc->outline_pad - 1;
 800fa20:	3a01      	subs	r2, #1
 800fa22:	4688      	mov	r8, r1
    dest->x2 = src->x2;
 800fa24:	2404      	movs	r4, #4
 800fa26:	5f29      	ldrsh	r1, [r5, r4]
    area_outer.x1 -= dsc->outline_width;
 800fa28:	b280      	uxth	r0, r0
 800fa2a:	4689      	mov	r9, r1
    dest->y2 = src->y2;
 800fa2c:	2106      	movs	r1, #6
 800fa2e:	5e6c      	ldrsh	r4, [r5, r1]
    lv_coord_t pad = dsc->outline_pad - 1;
 800fa30:	b291      	uxth	r1, r2
    area_inner.x1 -= pad;
 800fa32:	882a      	ldrh	r2, [r5, #0]
    area_inner.y2 += pad;
 800fa34:	190c      	adds	r4, r1, r4
    area_inner.x1 -= pad;
 800fa36:	1a52      	subs	r2, r2, r1
 800fa38:	b292      	uxth	r2, r2
 800fa3a:	4694      	mov	ip, r2
 800fa3c:	4665      	mov	r5, ip
 800fa3e:	aa0c      	add	r2, sp, #48	; 0x30
 800fa40:	8015      	strh	r5, [r2, #0]
    area_inner.y1 -= pad;
 800fa42:	4645      	mov	r5, r8
 800fa44:	1a6d      	subs	r5, r5, r1
 800fa46:	b2ad      	uxth	r5, r5
 800fa48:	46a8      	mov	r8, r5
 800fa4a:	8055      	strh	r5, [r2, #2]
    area_inner.x2 += pad;
 800fa4c:	464d      	mov	r5, r9
 800fa4e:	194d      	adds	r5, r1, r5
 800fa50:	b2ad      	uxth	r5, r5
    area_outer.x1 -= dsc->outline_width;
 800fa52:	4661      	mov	r1, ip
    area_inner.x2 += pad;
 800fa54:	46a9      	mov	r9, r5
 800fa56:	8095      	strh	r5, [r2, #4]
    area_outer.x1 -= dsc->outline_width;
 800fa58:	1a09      	subs	r1, r1, r0
 800fa5a:	ad0e      	add	r5, sp, #56	; 0x38
 800fa5c:	8029      	strh	r1, [r5, #0]
    area_outer.x2 += dsc->outline_width;
 800fa5e:	4649      	mov	r1, r9
 800fa60:	1809      	adds	r1, r1, r0
 800fa62:	80a9      	strh	r1, [r5, #4]
    area_outer.y1 -= dsc->outline_width;
 800fa64:	4641      	mov	r1, r8
    area_inner.y2 += pad;
 800fa66:	b2a4      	uxth	r4, r4
    area_outer.y1 -= dsc->outline_width;
 800fa68:	1a09      	subs	r1, r1, r0
    area_outer.y2 += dsc->outline_width;
 800fa6a:	1820      	adds	r0, r4, r0
    area_outer.y1 -= dsc->outline_width;
 800fa6c:	8069      	strh	r1, [r5, #2]
    area_outer.y2 += dsc->outline_width;
 800fa6e:	80e8      	strh	r0, [r5, #6]
    area_inner.y2 += pad;
 800fa70:	80d4      	strh	r4, [r2, #6]
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
 800fa72:	0029      	movs	r1, r5
 800fa74:	9804      	ldr	r0, [sp, #16]
 800fa76:	9600      	str	r6, [sp, #0]
 800fa78:	f7ff fe40 	bl	800f6fc <draw_border_simple>
        return;
 800fa7c:	e7aa      	b.n	800f9d4 <lv_draw_sw_rect+0x1bc>
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 800fa7e:	88e3      	ldrh	r3, [r4, #6]
 800fa80:	4699      	mov	r9, r3
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 800fa82:	8963      	ldrh	r3, [r4, #10]
 800fa84:	454b      	cmp	r3, r9
 800fa86:	d000      	beq.n	800fa8a <lv_draw_sw_rect+0x272>
 800fa88:	e721      	b.n	800f8ce <lv_draw_sw_rect+0xb6>
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 800fa8a:	ab0e      	add	r3, sp, #56	; 0x38
 800fa8c:	4698      	mov	r8, r3
 800fa8e:	221c      	movs	r2, #28
 800fa90:	0018      	movs	r0, r3
 800fa92:	2100      	movs	r1, #0
 800fa94:	f00b fdd2 	bl	801b63c <memset>
    blend_dsc.blend_mode = dsc->blend_mode;
 800fa98:	4642      	mov	r2, r8
 800fa9a:	78a3      	ldrb	r3, [r4, #2]
 800fa9c:	7653      	strb	r3, [r2, #25]
    blend_dsc.color = bg_color;
 800fa9e:	4643      	mov	r3, r8
 800faa0:	464a      	mov	r2, r9
 800faa2:	811a      	strh	r2, [r3, #8]
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 800faa4:	2200      	movs	r2, #0
 800faa6:	5ea3      	ldrsh	r3, [r4, r2]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d000      	beq.n	800faae <lv_draw_sw_rect+0x296>
 800faac:	e724      	b.n	800f8f8 <lv_draw_sw_rect+0xe0>
        blend_dsc.opa = dsc->bg_opa;
 800faae:	4642      	mov	r2, r8
        blend_dsc.blend_area = &bg_coords;
 800fab0:	960e      	str	r6, [sp, #56]	; 0x38
        blend_dsc.opa = dsc->bg_opa;
 800fab2:	78e3      	ldrb	r3, [r4, #3]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800fab4:	4641      	mov	r1, r8
 800fab6:	9804      	ldr	r0, [sp, #16]
        blend_dsc.opa = dsc->bg_opa;
 800fab8:	7613      	strb	r3, [r2, #24]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800faba:	f7fd fffb 	bl	800dab4 <lv_draw_sw_blend>
        return;
 800fabe:	e71b      	b.n	800f8f8 <lv_draw_sw_rect+0xe0>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800fac0:	b290      	uxth	r0, r2
 800fac2:	18c2      	adds	r2, r0, r3
 800fac4:	4252      	negs	r2, r2
 800fac6:	b292      	uxth	r2, r2
 800fac8:	e74f      	b.n	800f96a <lv_draw_sw_rect+0x152>
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 800faca:	2300      	movs	r3, #0
 800facc:	4698      	mov	r8, r3
 800face:	9302      	str	r3, [sp, #8]
 800fad0:	4b7f      	ldr	r3, [pc, #508]	; (800fcd0 <lv_draw_sw_rect+0x4b8>)
 800fad2:	a809      	add	r0, sp, #36	; 0x24
 800fad4:	9301      	str	r3, [sp, #4]
 800fad6:	4643      	mov	r3, r8
 800fad8:	9300      	str	r3, [sp, #0]
 800fada:	6962      	ldr	r2, [r4, #20]
 800fadc:	6921      	ldr	r1, [r4, #16]
 800fade:	f004 f867 	bl	8013bb0 <lv_txt_get_size>
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 800fae2:	aa04      	add	r2, sp, #16
 800fae4:	2014      	movs	r0, #20
 800fae6:	5e10      	ldrsh	r0, [r2, r0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fae8:	88aa      	ldrh	r2, [r5, #4]
 800faea:	882b      	ldrh	r3, [r5, #0]
 800faec:	3201      	adds	r2, #1
 800faee:	1ad2      	subs	r2, r2, r3
 800faf0:	b211      	sxth	r1, r2
 800faf2:	0fca      	lsrs	r2, r1, #31
 800faf4:	1852      	adds	r2, r2, r1
 800faf6:	0fc1      	lsrs	r1, r0, #31
 800faf8:	1809      	adds	r1, r1, r0
 800fafa:	1049      	asrs	r1, r1, #1
 800fafc:	1052      	asrs	r2, r2, #1
 800fafe:	1a5b      	subs	r3, r3, r1
 800fb00:	18d3      	adds	r3, r2, r3
 800fb02:	ae0c      	add	r6, sp, #48	; 0x30
 800fb04:	b29b      	uxth	r3, r3
        a.x2 = a.x1 + size.x - 1;
 800fb06:	3801      	subs	r0, #1
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 800fb08:	8033      	strh	r3, [r6, #0]
        a.x2 = a.x1 + size.x - 1;
 800fb0a:	181b      	adds	r3, r3, r0
 800fb0c:	80b3      	strh	r3, [r6, #4]
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800fb0e:	aa04      	add	r2, sp, #16
 800fb10:	2016      	movs	r0, #22
 800fb12:	5e10      	ldrsh	r0, [r2, r0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fb14:	88ea      	ldrh	r2, [r5, #6]
 800fb16:	886b      	ldrh	r3, [r5, #2]
 800fb18:	3201      	adds	r2, #1
 800fb1a:	1ad2      	subs	r2, r2, r3
 800fb1c:	b211      	sxth	r1, r2
 800fb1e:	0fca      	lsrs	r2, r1, #31
 800fb20:	1852      	adds	r2, r2, r1
 800fb22:	0fc1      	lsrs	r1, r0, #31
 800fb24:	1809      	adds	r1, r1, r0
 800fb26:	1049      	asrs	r1, r1, #1
 800fb28:	1052      	asrs	r2, r2, #1
 800fb2a:	1a5b      	subs	r3, r3, r1
 800fb2c:	18d3      	adds	r3, r2, r3
 800fb2e:	b29b      	uxth	r3, r3
        a.y2 = a.y1 + size.y - 1;
 800fb30:	3801      	subs	r0, #1
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800fb32:	8073      	strh	r3, [r6, #2]
        a.y2 = a.y1 + size.y - 1;
 800fb34:	181b      	adds	r3, r3, r0
 800fb36:	80f3      	strh	r3, [r6, #6]
        lv_draw_label_dsc_init(&label_draw_dsc);
 800fb38:	a80e      	add	r0, sp, #56	; 0x38
 800fb3a:	f7fc fe11 	bl	800c760 <lv_draw_label_dsc_init>
        label_draw_dsc.opa = dsc->bg_img_opa;
 800fb3e:	2142      	movs	r1, #66	; 0x42
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 800fb40:	6963      	ldr	r3, [r4, #20]
        label_draw_dsc.color = dsc->bg_img_recolor;
 800fb42:	aa04      	add	r2, sp, #16
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 800fb44:	930e      	str	r3, [sp, #56]	; 0x38
        label_draw_dsc.color = dsc->bg_img_recolor;
 800fb46:	8b23      	ldrh	r3, [r4, #24]
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 800fb48:	9804      	ldr	r0, [sp, #16]
        label_draw_dsc.color = dsc->bg_img_recolor;
 800fb4a:	8693      	strh	r3, [r2, #52]	; 0x34
        label_draw_dsc.opa = dsc->bg_img_opa;
 800fb4c:	7ea3      	ldrb	r3, [r4, #26]
 800fb4e:	1852      	adds	r2, r2, r1
 800fb50:	7013      	strb	r3, [r2, #0]
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 800fb52:	4643      	mov	r3, r8
 800fb54:	9300      	str	r3, [sp, #0]
 800fb56:	0032      	movs	r2, r6
 800fb58:	6923      	ldr	r3, [r4, #16]
 800fb5a:	a90e      	add	r1, sp, #56	; 0x38
 800fb5c:	f7fc fe18 	bl	800c790 <lv_draw_label>
 800fb60:	e758      	b.n	800fa14 <lv_draw_sw_rect+0x1fc>
            lv_draw_img_dsc_init(&img_dsc);
 800fb62:	ab0e      	add	r3, sp, #56	; 0x38
 800fb64:	4698      	mov	r8, r3
 800fb66:	0018      	movs	r0, r3
 800fb68:	f7fc fc58 	bl	800c41c <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 800fb6c:	4643      	mov	r3, r8
 800fb6e:	210f      	movs	r1, #15
 800fb70:	78a2      	ldrb	r2, [r4, #2]
 800fb72:	7b1b      	ldrb	r3, [r3, #12]
 800fb74:	400a      	ands	r2, r1
 800fb76:	438b      	bics	r3, r1
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	4642      	mov	r2, r8
 800fb7c:	7313      	strb	r3, [r2, #12]
            img_dsc.recolor = dsc->bg_img_recolor;
 800fb7e:	8b23      	ldrh	r3, [r4, #24]
 800fb80:	8113      	strh	r3, [r2, #8]
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 800fb82:	8b63      	ldrh	r3, [r4, #26]
 800fb84:	ba5b      	rev16	r3, r3
 800fb86:	8153      	strh	r3, [r2, #10]
            if(dsc->bg_img_tiled == false) {
 800fb88:	7f23      	ldrb	r3, [r4, #28]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d069      	beq.n	800fc62 <lv_draw_sw_rect+0x44a>
                area.y1 = coords->y1;
 800fb8e:	2302      	movs	r3, #2
 800fb90:	5ee8      	ldrsh	r0, [r5, r3]
                area.y2 = area.y1 + header.h - 1;
 800fb92:	ab04      	add	r3, sp, #16
 800fb94:	8adb      	ldrh	r3, [r3, #22]
                area.y1 = coords->y1;
 800fb96:	ae0c      	add	r6, sp, #48	; 0x30
                area.y2 = area.y1 + header.h - 1;
 800fb98:	095b      	lsrs	r3, r3, #5
 800fb9a:	469c      	mov	ip, r3
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	18c3      	adds	r3, r0, r3
 800fba0:	b21a      	sxth	r2, r3
                area.y1 = coords->y1;
 800fba2:	8070      	strh	r0, [r6, #2]
                area.y2 = area.y1 + header.h - 1;
 800fba4:	80f2      	strh	r2, [r6, #6]
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800fba6:	2106      	movs	r1, #6
 800fba8:	5e6b      	ldrsh	r3, [r5, r1]
 800fbaa:	469b      	mov	fp, r3
 800fbac:	4298      	cmp	r0, r3
 800fbae:	dd00      	ble.n	800fbb2 <lv_draw_sw_rect+0x39a>
 800fbb0:	e730      	b.n	800fa14 <lv_draw_sw_rect+0x1fc>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800fbb2:	2704      	movs	r7, #4
 800fbb4:	5fe9      	ldrsh	r1, [r5, r7]
 800fbb6:	464f      	mov	r7, r9
                    area.x2 = area.x1 + header.w - 1;
 800fbb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800fbba:	9707      	str	r7, [sp, #28]
                    area.x2 = area.x1 + header.w - 1;
 800fbbc:	02db      	lsls	r3, r3, #11
 800fbbe:	0d5b      	lsrs	r3, r3, #21
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800fbc0:	9f04      	ldr	r7, [sp, #16]
 800fbc2:	9305      	str	r3, [sp, #20]
 800fbc4:	9206      	str	r2, [sp, #24]
                    area.x1 = coords->x1;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	5eea      	ldrsh	r2, [r5, r3]
                    area.x2 = area.x1 + header.w - 1;
 800fbca:	9b05      	ldr	r3, [sp, #20]
                    area.x1 = coords->x1;
 800fbcc:	4691      	mov	r9, r2
 800fbce:	8032      	strh	r2, [r6, #0]
                    area.x2 = area.x1 + header.w - 1;
 800fbd0:	2201      	movs	r2, #1
 800fbd2:	4252      	negs	r2, r2
 800fbd4:	444a      	add	r2, r9
 800fbd6:	4692      	mov	sl, r2
 800fbd8:	4453      	add	r3, sl
 800fbda:	80b3      	strh	r3, [r6, #4]
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800fbdc:	4589      	cmp	r9, r1
 800fbde:	dc2b      	bgt.n	800fc38 <lv_draw_sw_rect+0x420>
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 800fbe0:	0032      	movs	r2, r6
 800fbe2:	4641      	mov	r1, r8
 800fbe4:	0038      	movs	r0, r7
 800fbe6:	6923      	ldr	r3, [r4, #16]
 800fbe8:	f7fc fc28 	bl	800c43c <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800fbec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbee:	8832      	ldrh	r2, [r6, #0]
 800fbf0:	02db      	lsls	r3, r3, #11
 800fbf2:	88b1      	ldrh	r1, [r6, #4]
 800fbf4:	0d5b      	lsrs	r3, r3, #21
 800fbf6:	189a      	adds	r2, r3, r2
 800fbf8:	1859      	adds	r1, r3, r1
 800fbfa:	b212      	sxth	r2, r2
 800fbfc:	8032      	strh	r2, [r6, #0]
 800fbfe:	80b1      	strh	r1, [r6, #4]
 800fc00:	2004      	movs	r0, #4
 800fc02:	5e29      	ldrsh	r1, [r5, r0]
 800fc04:	428a      	cmp	r2, r1
 800fc06:	ddeb      	ble.n	800fbe0 <lv_draw_sw_rect+0x3c8>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800fc08:	aa04      	add	r2, sp, #16
 800fc0a:	8ad2      	ldrh	r2, [r2, #22]
 800fc0c:	9305      	str	r3, [sp, #20]
 800fc0e:	0952      	lsrs	r2, r2, #5
 800fc10:	2306      	movs	r3, #6
 800fc12:	5ee8      	ldrsh	r0, [r5, r3]
 800fc14:	4694      	mov	ip, r2
 800fc16:	4683      	mov	fp, r0
 800fc18:	2306      	movs	r3, #6
 800fc1a:	5ef2      	ldrsh	r2, [r6, r3]
 800fc1c:	8870      	ldrh	r0, [r6, #2]
 800fc1e:	4462      	add	r2, ip
 800fc20:	4460      	add	r0, ip
 800fc22:	b213      	sxth	r3, r2
 800fc24:	b200      	sxth	r0, r0
 800fc26:	8070      	strh	r0, [r6, #2]
 800fc28:	9306      	str	r3, [sp, #24]
 800fc2a:	80f3      	strh	r3, [r6, #6]
 800fc2c:	4558      	cmp	r0, fp
 800fc2e:	ddca      	ble.n	800fbc6 <lv_draw_sw_rect+0x3ae>
 800fc30:	9b07      	ldr	r3, [sp, #28]
 800fc32:	9704      	str	r7, [sp, #16]
 800fc34:	4699      	mov	r9, r3
 800fc36:	e6ed      	b.n	800fa14 <lv_draw_sw_rect+0x1fc>
 800fc38:	9b07      	ldr	r3, [sp, #28]
 800fc3a:	9a06      	ldr	r2, [sp, #24]
 800fc3c:	4699      	mov	r9, r3
 800fc3e:	0013      	movs	r3, r2
 800fc40:	4460      	add	r0, ip
 800fc42:	4463      	add	r3, ip
 800fc44:	b200      	sxth	r0, r0
 800fc46:	80f3      	strh	r3, [r6, #6]
 800fc48:	465a      	mov	r2, fp
 800fc4a:	4663      	mov	r3, ip
 800fc4c:	9704      	str	r7, [sp, #16]
 800fc4e:	8070      	strh	r0, [r6, #2]
 800fc50:	4558      	cmp	r0, fp
 800fc52:	dd00      	ble.n	800fc56 <lv_draw_sw_rect+0x43e>
 800fc54:	e6de      	b.n	800fa14 <lv_draw_sw_rect+0x1fc>
 800fc56:	1818      	adds	r0, r3, r0
 800fc58:	b200      	sxth	r0, r0
 800fc5a:	4282      	cmp	r2, r0
 800fc5c:	dafb      	bge.n	800fc56 <lv_draw_sw_rect+0x43e>
 800fc5e:	9704      	str	r7, [sp, #16]
 800fc60:	e6d8      	b.n	800fa14 <lv_draw_sw_rect+0x1fc>
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800fc62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc64:	8829      	ldrh	r1, [r5, #0]
 800fc66:	02da      	lsls	r2, r3, #11
 800fc68:	0d53      	lsrs	r3, r2, #21
 800fc6a:	469a      	mov	sl, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fc6c:	88ab      	ldrh	r3, [r5, #4]
 800fc6e:	0d92      	lsrs	r2, r2, #22
 800fc70:	3301      	adds	r3, #1
 800fc72:	1a5b      	subs	r3, r3, r1
 800fc74:	b21b      	sxth	r3, r3
 800fc76:	0fd8      	lsrs	r0, r3, #31
 800fc78:	18c0      	adds	r0, r0, r3
 800fc7a:	1a89      	subs	r1, r1, r2
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800fc7c:	ae04      	add	r6, sp, #16
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800fc7e:	1040      	asrs	r0, r0, #1
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800fc80:	46b4      	mov	ip, r6
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800fc82:	1840      	adds	r0, r0, r1
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800fc84:	2116      	movs	r1, #22
 800fc86:	4461      	add	r1, ip
 800fc88:	8809      	ldrh	r1, [r1, #0]
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800fc8a:	aa0c      	add	r2, sp, #48	; 0x30
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800fc8c:	468b      	mov	fp, r1
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800fc8e:	b280      	uxth	r0, r0
 800fc90:	8010      	strh	r0, [r2, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fc92:	88ee      	ldrh	r6, [r5, #6]
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800fc94:	886b      	ldrh	r3, [r5, #2]
 800fc96:	3601      	adds	r6, #1
 800fc98:	1af6      	subs	r6, r6, r3
 800fc9a:	b236      	sxth	r6, r6
 800fc9c:	0949      	lsrs	r1, r1, #5
 800fc9e:	468c      	mov	ip, r1
 800fca0:	0ff1      	lsrs	r1, r6, #31
 800fca2:	1989      	adds	r1, r1, r6
 800fca4:	465e      	mov	r6, fp
 800fca6:	09b6      	lsrs	r6, r6, #6
 800fca8:	1049      	asrs	r1, r1, #1
 800fcaa:	1b9b      	subs	r3, r3, r6
 800fcac:	18cb      	adds	r3, r1, r3
                area.x2 = area.x1 + header.w - 1;
 800fcae:	4651      	mov	r1, sl
 800fcb0:	3901      	subs	r1, #1
 800fcb2:	1840      	adds	r0, r0, r1
                area.y2 = area.y1 + header.h - 1;
 800fcb4:	4661      	mov	r1, ip
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800fcb6:	b29b      	uxth	r3, r3
                area.y2 = area.y1 + header.h - 1;
 800fcb8:	3901      	subs	r1, #1
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800fcba:	8053      	strh	r3, [r2, #2]
                area.y2 = area.y1 + header.h - 1;
 800fcbc:	185b      	adds	r3, r3, r1
                area.x2 = area.x1 + header.w - 1;
 800fcbe:	8090      	strh	r0, [r2, #4]
                area.y2 = area.y1 + header.h - 1;
 800fcc0:	80d3      	strh	r3, [r2, #6]
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 800fcc2:	4641      	mov	r1, r8
 800fcc4:	6923      	ldr	r3, [r4, #16]
 800fcc6:	9804      	ldr	r0, [sp, #16]
 800fcc8:	f7fc fbb8 	bl	800c43c <lv_draw_img>
 800fccc:	e6a2      	b.n	800fa14 <lv_draw_sw_rect+0x1fc>
 800fcce:	46c0      	nop			; (mov r8, r8)
 800fcd0:	00001fff 	.word	0x00001fff

0800fcd4 <lv_draw_sw_bg>:
{
 800fcd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcd6:	4657      	mov	r7, sl
 800fcd8:	4645      	mov	r5, r8
 800fcda:	46de      	mov	lr, fp
 800fcdc:	464e      	mov	r6, r9
 800fcde:	b5e0      	push	{r5, r6, r7, lr}
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 800fce0:	78cb      	ldrb	r3, [r1, #3]
{
 800fce2:	0007      	movs	r7, r0
 800fce4:	000c      	movs	r4, r1
 800fce6:	0015      	movs	r5, r2
 800fce8:	b095      	sub	sp, #84	; 0x54
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 800fcea:	2b02      	cmp	r3, #2
 800fcec:	d961      	bls.n	800fdb2 <lv_draw_sw_bg+0xde>
    dest->x1 = src->x1;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	5ed0      	ldrsh	r0, [r2, r3]
 800fcf2:	ae08      	add	r6, sp, #32
 800fcf4:	8030      	strh	r0, [r6, #0]
    dest->y1 = src->y1;
 800fcf6:	2302      	movs	r3, #2
 800fcf8:	5ed1      	ldrsh	r1, [r2, r3]
 800fcfa:	8071      	strh	r1, [r6, #2]
    dest->x2 = src->x2;
 800fcfc:	2304      	movs	r3, #4
 800fcfe:	5ed2      	ldrsh	r2, [r2, r3]
 800fd00:	80b2      	strh	r2, [r6, #4]
 800fd02:	4693      	mov	fp, r2
    dest->y2 = src->y2;
 800fd04:	2306      	movs	r3, #6
 800fd06:	5eea      	ldrsh	r2, [r5, r3]
 800fd08:	9204      	str	r2, [sp, #16]
 800fd0a:	80f2      	strh	r2, [r6, #6]
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 800fd0c:	2220      	movs	r2, #32
 800fd0e:	5ea3      	ldrsh	r3, [r4, r2]
 800fd10:	2b01      	cmp	r3, #1
 800fd12:	dd28      	ble.n	800fd66 <lv_draw_sw_bg+0x92>
 800fd14:	2322      	movs	r3, #34	; 0x22
 800fd16:	5ce3      	ldrb	r3, [r4, r3]
 800fd18:	2bfc      	cmp	r3, #252	; 0xfc
 800fd1a:	d924      	bls.n	800fd66 <lv_draw_sw_bg+0x92>
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	5ea3      	ldrsh	r3, [r4, r2]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d020      	beq.n	800fd66 <lv_draw_sw_bg+0x92>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800fd24:	2323      	movs	r3, #35	; 0x23
 800fd26:	5ce3      	ldrb	r3, [r4, r3]
 800fd28:	069b      	lsls	r3, r3, #26
 800fd2a:	4699      	mov	r9, r3
 800fd2c:	0edb      	lsrs	r3, r3, #27
 800fd2e:	4698      	mov	r8, r3
 800fd30:	464b      	mov	r3, r9
 800fd32:	0f5b      	lsrs	r3, r3, #29
 800fd34:	469a      	mov	sl, r3
 800fd36:	2301      	movs	r3, #1
 800fd38:	469c      	mov	ip, r3
 800fd3a:	4653      	mov	r3, sl
 800fd3c:	4662      	mov	r2, ip
 800fd3e:	4013      	ands	r3, r2
 800fd40:	469a      	mov	sl, r3
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800fd42:	464b      	mov	r3, r9
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800fd44:	4450      	add	r0, sl
 800fd46:	8030      	strh	r0, [r6, #0]
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800fd48:	0f18      	lsrs	r0, r3, #28
 800fd4a:	4010      	ands	r0, r2
 800fd4c:	1809      	adds	r1, r1, r0
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800fd4e:	4658      	mov	r0, fp
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800fd50:	8071      	strh	r1, [r6, #2]
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800fd52:	0f99      	lsrs	r1, r3, #30
 800fd54:	4011      	ands	r1, r2
 800fd56:	1a42      	subs	r2, r0, r1
 800fd58:	4663      	mov	r3, ip
 800fd5a:	80b2      	strh	r2, [r6, #4]
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800fd5c:	4642      	mov	r2, r8
 800fd5e:	401a      	ands	r2, r3
 800fd60:	9b04      	ldr	r3, [sp, #16]
 800fd62:	1a9b      	subs	r3, r3, r2
 800fd64:	80f3      	strh	r3, [r6, #6]
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 800fd66:	0031      	movs	r1, r6
 800fd68:	68ba      	ldr	r2, [r7, #8]
 800fd6a:	a80a      	add	r0, sp, #40	; 0x28
 800fd6c:	f001 fb0e 	bl	801138c <_lv_area_intersect>
 800fd70:	2800      	cmp	r0, #0
 800fd72:	d01e      	beq.n	800fdb2 <lv_draw_sw_bg+0xde>
    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 800fd74:	7be3      	ldrb	r3, [r4, #15]
 800fd76:	075b      	lsls	r3, r3, #29
 800fd78:	0f5a      	lsrs	r2, r3, #29
 800fd7a:	4692      	mov	sl, r2
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d13e      	bne.n	800fdfe <lv_draw_sw_bg+0x12a>
 800fd80:	88a3      	ldrh	r3, [r4, #4]
 800fd82:	4699      	mov	r9, r3
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 800fd84:	8963      	ldrh	r3, [r4, #10]
 800fd86:	454b      	cmp	r3, r9
 800fd88:	d03e      	beq.n	800fe08 <lv_draw_sw_bg+0x134>
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 800fd8a:	ab0c      	add	r3, sp, #48	; 0x30
 800fd8c:	4698      	mov	r8, r3
 800fd8e:	221c      	movs	r2, #28
 800fd90:	0018      	movs	r0, r3
 800fd92:	2100      	movs	r1, #0
 800fd94:	f00b fc52 	bl	801b63c <memset>
    blend_dsc.blend_mode = dsc->blend_mode;
 800fd98:	4642      	mov	r2, r8
 800fd9a:	78a3      	ldrb	r3, [r4, #2]
 800fd9c:	7653      	strb	r3, [r2, #25]
    blend_dsc.color = bg_color;
 800fd9e:	4643      	mov	r3, r8
 800fda0:	464a      	mov	r2, r9
 800fda2:	811a      	strh	r2, [r3, #8]
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 800fda4:	2200      	movs	r2, #0
 800fda6:	5ea3      	ldrsh	r3, [r4, r2]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d102      	bne.n	800fdb2 <lv_draw_sw_bg+0xde>
 800fdac:	4653      	mov	r3, sl
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d03b      	beq.n	800fe2a <lv_draw_sw_bg+0x156>
    if(dsc->bg_img_src == NULL) return;
 800fdb2:	6923      	ldr	r3, [r4, #16]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d002      	beq.n	800fdbe <lv_draw_sw_bg+0xea>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 800fdb8:	7ea3      	ldrb	r3, [r4, #26]
 800fdba:	2b02      	cmp	r3, #2
 800fdbc:	d806      	bhi.n	800fdcc <lv_draw_sw_bg+0xf8>
}
 800fdbe:	b015      	add	sp, #84	; 0x54
 800fdc0:	bcf0      	pop	{r4, r5, r6, r7}
 800fdc2:	46bb      	mov	fp, r7
 800fdc4:	46b2      	mov	sl, r6
 800fdc6:	46a9      	mov	r9, r5
 800fdc8:	46a0      	mov	r8, r4
 800fdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 800fdcc:	0029      	movs	r1, r5
 800fdce:	68ba      	ldr	r2, [r7, #8]
 800fdd0:	a808      	add	r0, sp, #32
 800fdd2:	f001 fadb 	bl	801138c <_lv_area_intersect>
 800fdd6:	2800      	cmp	r0, #0
 800fdd8:	d0f1      	beq.n	800fdbe <lv_draw_sw_bg+0xea>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800fdda:	68bb      	ldr	r3, [r7, #8]
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 800fddc:	6920      	ldr	r0, [r4, #16]
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800fdde:	4699      	mov	r9, r3
    draw_ctx->clip_area = &clip_area;
 800fde0:	ab08      	add	r3, sp, #32
 800fde2:	60bb      	str	r3, [r7, #8]
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 800fde4:	f7fc fcae 	bl	800c744 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 800fde8:	2802      	cmp	r0, #2
 800fdea:	d027      	beq.n	800fe3c <lv_draw_sw_bg+0x168>
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 800fdec:	6920      	ldr	r0, [r4, #16]
 800fdee:	a907      	add	r1, sp, #28
 800fdf0:	f7fd fd0e 	bl	800d810 <lv_img_decoder_get_info>
        if(res == LV_RES_OK) {
 800fdf4:	2801      	cmp	r0, #1
 800fdf6:	d06d      	beq.n	800fed4 <lv_draw_sw_bg+0x200>
    draw_ctx->clip_area = clip_area_ori;
 800fdf8:	464b      	mov	r3, r9
 800fdfa:	60bb      	str	r3, [r7, #8]
 800fdfc:	e7df      	b.n	800fdbe <lv_draw_sw_bg+0xea>
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 800fdfe:	88e3      	ldrh	r3, [r4, #6]
 800fe00:	4699      	mov	r9, r3
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 800fe02:	8963      	ldrh	r3, [r4, #10]
 800fe04:	454b      	cmp	r3, r9
 800fe06:	d1c0      	bne.n	800fd8a <lv_draw_sw_bg+0xb6>
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 800fe08:	ab0c      	add	r3, sp, #48	; 0x30
 800fe0a:	4698      	mov	r8, r3
 800fe0c:	221c      	movs	r2, #28
 800fe0e:	0018      	movs	r0, r3
 800fe10:	2100      	movs	r1, #0
 800fe12:	f00b fc13 	bl	801b63c <memset>
    blend_dsc.blend_mode = dsc->blend_mode;
 800fe16:	4642      	mov	r2, r8
 800fe18:	78a3      	ldrb	r3, [r4, #2]
 800fe1a:	7653      	strb	r3, [r2, #25]
    blend_dsc.color = bg_color;
 800fe1c:	4643      	mov	r3, r8
 800fe1e:	464a      	mov	r2, r9
 800fe20:	811a      	strh	r2, [r3, #8]
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 800fe22:	2200      	movs	r2, #0
 800fe24:	5ea3      	ldrsh	r3, [r4, r2]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1c3      	bne.n	800fdb2 <lv_draw_sw_bg+0xde>
        blend_dsc.opa = dsc->bg_opa;
 800fe2a:	4642      	mov	r2, r8
        blend_dsc.blend_area = &bg_coords;
 800fe2c:	960c      	str	r6, [sp, #48]	; 0x30
        blend_dsc.opa = dsc->bg_opa;
 800fe2e:	78e3      	ldrb	r3, [r4, #3]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800fe30:	4641      	mov	r1, r8
 800fe32:	0038      	movs	r0, r7
        blend_dsc.opa = dsc->bg_opa;
 800fe34:	7613      	strb	r3, [r2, #24]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800fe36:	f7fd fe3d 	bl	800dab4 <lv_draw_sw_blend>
        return;
 800fe3a:	e7ba      	b.n	800fdb2 <lv_draw_sw_bg+0xde>
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	4698      	mov	r8, r3
 800fe40:	9302      	str	r3, [sp, #8]
 800fe42:	4b78      	ldr	r3, [pc, #480]	; (8010024 <lv_draw_sw_bg+0x350>)
 800fe44:	a807      	add	r0, sp, #28
 800fe46:	9301      	str	r3, [sp, #4]
 800fe48:	4643      	mov	r3, r8
 800fe4a:	9300      	str	r3, [sp, #0]
 800fe4c:	6962      	ldr	r2, [r4, #20]
 800fe4e:	6921      	ldr	r1, [r4, #16]
 800fe50:	f003 feae 	bl	8013bb0 <lv_txt_get_size>
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 800fe54:	aa02      	add	r2, sp, #8
 800fe56:	2014      	movs	r0, #20
 800fe58:	5e10      	ldrsh	r0, [r2, r0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fe5a:	88aa      	ldrh	r2, [r5, #4]
 800fe5c:	882b      	ldrh	r3, [r5, #0]
 800fe5e:	3201      	adds	r2, #1
 800fe60:	1ad2      	subs	r2, r2, r3
 800fe62:	b211      	sxth	r1, r2
 800fe64:	0fca      	lsrs	r2, r1, #31
 800fe66:	1852      	adds	r2, r2, r1
 800fe68:	0fc1      	lsrs	r1, r0, #31
 800fe6a:	1809      	adds	r1, r1, r0
 800fe6c:	1049      	asrs	r1, r1, #1
 800fe6e:	1052      	asrs	r2, r2, #1
 800fe70:	1a5b      	subs	r3, r3, r1
 800fe72:	18d3      	adds	r3, r2, r3
 800fe74:	ae0a      	add	r6, sp, #40	; 0x28
 800fe76:	b29b      	uxth	r3, r3
        a.x2 = a.x1 + size.x - 1;
 800fe78:	3801      	subs	r0, #1
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 800fe7a:	8033      	strh	r3, [r6, #0]
        a.x2 = a.x1 + size.x - 1;
 800fe7c:	181b      	adds	r3, r3, r0
 800fe7e:	80b3      	strh	r3, [r6, #4]
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800fe80:	aa02      	add	r2, sp, #8
 800fe82:	2016      	movs	r0, #22
 800fe84:	5e10      	ldrsh	r0, [r2, r0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fe86:	88ea      	ldrh	r2, [r5, #6]
 800fe88:	886b      	ldrh	r3, [r5, #2]
 800fe8a:	3201      	adds	r2, #1
 800fe8c:	1ad2      	subs	r2, r2, r3
 800fe8e:	b211      	sxth	r1, r2
 800fe90:	0fca      	lsrs	r2, r1, #31
 800fe92:	1852      	adds	r2, r2, r1
 800fe94:	0fc1      	lsrs	r1, r0, #31
 800fe96:	1809      	adds	r1, r1, r0
 800fe98:	1049      	asrs	r1, r1, #1
 800fe9a:	1052      	asrs	r2, r2, #1
 800fe9c:	1a5b      	subs	r3, r3, r1
 800fe9e:	18d3      	adds	r3, r2, r3
 800fea0:	b29b      	uxth	r3, r3
        a.y2 = a.y1 + size.y - 1;
 800fea2:	3801      	subs	r0, #1
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800fea4:	8073      	strh	r3, [r6, #2]
        a.y2 = a.y1 + size.y - 1;
 800fea6:	181b      	adds	r3, r3, r0
 800fea8:	80f3      	strh	r3, [r6, #6]
        lv_draw_label_dsc_init(&label_draw_dsc);
 800feaa:	a80c      	add	r0, sp, #48	; 0x30
 800feac:	f7fc fc58 	bl	800c760 <lv_draw_label_dsc_init>
        label_draw_dsc.opa = dsc->bg_img_opa;
 800feb0:	2142      	movs	r1, #66	; 0x42
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 800feb2:	6963      	ldr	r3, [r4, #20]
        label_draw_dsc.color = dsc->bg_img_recolor;
 800feb4:	aa02      	add	r2, sp, #8
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 800feb6:	930c      	str	r3, [sp, #48]	; 0x30
        label_draw_dsc.color = dsc->bg_img_recolor;
 800feb8:	8b23      	ldrh	r3, [r4, #24]
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 800feba:	0038      	movs	r0, r7
        label_draw_dsc.color = dsc->bg_img_recolor;
 800febc:	8693      	strh	r3, [r2, #52]	; 0x34
        label_draw_dsc.opa = dsc->bg_img_opa;
 800febe:	7ea3      	ldrb	r3, [r4, #26]
 800fec0:	1852      	adds	r2, r2, r1
 800fec2:	7013      	strb	r3, [r2, #0]
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 800fec4:	4642      	mov	r2, r8
 800fec6:	6923      	ldr	r3, [r4, #16]
 800fec8:	a90c      	add	r1, sp, #48	; 0x30
 800feca:	9200      	str	r2, [sp, #0]
 800fecc:	0032      	movs	r2, r6
 800fece:	f7fc fc5f 	bl	800c790 <lv_draw_label>
 800fed2:	e791      	b.n	800fdf8 <lv_draw_sw_bg+0x124>
            lv_draw_img_dsc_init(&img_dsc);
 800fed4:	ab0c      	add	r3, sp, #48	; 0x30
 800fed6:	4698      	mov	r8, r3
 800fed8:	0018      	movs	r0, r3
 800feda:	f7fc fa9f 	bl	800c41c <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 800fede:	4643      	mov	r3, r8
 800fee0:	210f      	movs	r1, #15
 800fee2:	78a2      	ldrb	r2, [r4, #2]
 800fee4:	7b1b      	ldrb	r3, [r3, #12]
 800fee6:	400a      	ands	r2, r1
 800fee8:	438b      	bics	r3, r1
 800feea:	4313      	orrs	r3, r2
 800feec:	4642      	mov	r2, r8
 800feee:	7313      	strb	r3, [r2, #12]
            img_dsc.recolor = dsc->bg_img_recolor;
 800fef0:	8b23      	ldrh	r3, [r4, #24]
 800fef2:	8113      	strh	r3, [r2, #8]
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 800fef4:	8b63      	ldrh	r3, [r4, #26]
 800fef6:	ba5b      	rev16	r3, r3
 800fef8:	8153      	strh	r3, [r2, #10]
            if(dsc->bg_img_tiled == false) {
 800fefa:	7f23      	ldrb	r3, [r4, #28]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d05c      	beq.n	800ffba <lv_draw_sw_bg+0x2e6>
                area.y1 = coords->y1;
 800ff00:	2302      	movs	r3, #2
 800ff02:	5ee8      	ldrsh	r0, [r5, r3]
                area.y2 = area.y1 + header.h - 1;
 800ff04:	ab02      	add	r3, sp, #8
 800ff06:	8adb      	ldrh	r3, [r3, #22]
                area.y1 = coords->y1;
 800ff08:	ae0a      	add	r6, sp, #40	; 0x28
                area.y2 = area.y1 + header.h - 1;
 800ff0a:	095b      	lsrs	r3, r3, #5
 800ff0c:	469c      	mov	ip, r3
 800ff0e:	3b01      	subs	r3, #1
 800ff10:	18c3      	adds	r3, r0, r3
                area.y1 = coords->y1;
 800ff12:	8070      	strh	r0, [r6, #2]
                area.y2 = area.y1 + header.h - 1;
 800ff14:	80f3      	strh	r3, [r6, #6]
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800ff16:	2206      	movs	r2, #6
 800ff18:	5eab      	ldrsh	r3, [r5, r2]
 800ff1a:	469b      	mov	fp, r3
 800ff1c:	4298      	cmp	r0, r3
 800ff1e:	dd00      	ble.n	800ff22 <lv_draw_sw_bg+0x24e>
 800ff20:	e76a      	b.n	800fdf8 <lv_draw_sw_bg+0x124>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800ff22:	2204      	movs	r2, #4
 800ff24:	5ea9      	ldrsh	r1, [r5, r2]
 800ff26:	4662      	mov	r2, ip
                    area.x2 = area.x1 + header.w - 1;
 800ff28:	9b07      	ldr	r3, [sp, #28]
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800ff2a:	9405      	str	r4, [sp, #20]
                    area.x2 = area.x1 + header.w - 1;
 800ff2c:	02db      	lsls	r3, r3, #11
 800ff2e:	0d5b      	lsrs	r3, r3, #21
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800ff30:	9304      	str	r3, [sp, #16]
                    area.x1 = coords->x1;
 800ff32:	2300      	movs	r3, #0
 800ff34:	5eec      	ldrsh	r4, [r5, r3]
                    area.x2 = area.x1 + header.w - 1;
 800ff36:	9b04      	ldr	r3, [sp, #16]
                    area.x1 = coords->x1;
 800ff38:	46a4      	mov	ip, r4
 800ff3a:	8034      	strh	r4, [r6, #0]
                    area.x2 = area.x1 + header.w - 1;
 800ff3c:	2401      	movs	r4, #1
 800ff3e:	4264      	negs	r4, r4
 800ff40:	4464      	add	r4, ip
 800ff42:	46a2      	mov	sl, r4
 800ff44:	4453      	add	r3, sl
 800ff46:	80b3      	strh	r3, [r6, #4]
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800ff48:	458c      	cmp	ip, r1
 800ff4a:	dc29      	bgt.n	800ffa0 <lv_draw_sw_bg+0x2cc>
 800ff4c:	9c05      	ldr	r4, [sp, #20]
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 800ff4e:	0032      	movs	r2, r6
 800ff50:	4641      	mov	r1, r8
 800ff52:	0038      	movs	r0, r7
 800ff54:	6923      	ldr	r3, [r4, #16]
 800ff56:	f7fc fa71 	bl	800c43c <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800ff5a:	9b07      	ldr	r3, [sp, #28]
 800ff5c:	8832      	ldrh	r2, [r6, #0]
 800ff5e:	02db      	lsls	r3, r3, #11
 800ff60:	88b1      	ldrh	r1, [r6, #4]
 800ff62:	0d5b      	lsrs	r3, r3, #21
 800ff64:	189a      	adds	r2, r3, r2
 800ff66:	1859      	adds	r1, r3, r1
 800ff68:	b212      	sxth	r2, r2
 800ff6a:	8032      	strh	r2, [r6, #0]
 800ff6c:	80b1      	strh	r1, [r6, #4]
 800ff6e:	2004      	movs	r0, #4
 800ff70:	5e29      	ldrsh	r1, [r5, r0]
 800ff72:	428a      	cmp	r2, r1
 800ff74:	ddeb      	ble.n	800ff4e <lv_draw_sw_bg+0x27a>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800ff76:	9405      	str	r4, [sp, #20]
 800ff78:	9304      	str	r3, [sp, #16]
 800ff7a:	2306      	movs	r3, #6
 800ff7c:	5ef0      	ldrsh	r0, [r6, r3]
 800ff7e:	aa02      	add	r2, sp, #8
 800ff80:	4684      	mov	ip, r0
 800ff82:	8ad2      	ldrh	r2, [r2, #22]
 800ff84:	2306      	movs	r3, #6
 800ff86:	5ee8      	ldrsh	r0, [r5, r3]
 800ff88:	0952      	lsrs	r2, r2, #5
 800ff8a:	4494      	add	ip, r2
 800ff8c:	4683      	mov	fp, r0
 800ff8e:	4664      	mov	r4, ip
 800ff90:	8870      	ldrh	r0, [r6, #2]
 800ff92:	80f4      	strh	r4, [r6, #6]
 800ff94:	1810      	adds	r0, r2, r0
 800ff96:	b200      	sxth	r0, r0
 800ff98:	8070      	strh	r0, [r6, #2]
 800ff9a:	4583      	cmp	fp, r0
 800ff9c:	dac9      	bge.n	800ff32 <lv_draw_sw_bg+0x25e>
 800ff9e:	e72b      	b.n	800fdf8 <lv_draw_sw_bg+0x124>
 800ffa0:	4694      	mov	ip, r2
 800ffa2:	4460      	add	r0, ip
 800ffa4:	b200      	sxth	r0, r0
 800ffa6:	4558      	cmp	r0, fp
 800ffa8:	dd00      	ble.n	800ffac <lv_draw_sw_bg+0x2d8>
 800ffaa:	e725      	b.n	800fdf8 <lv_draw_sw_bg+0x124>
 800ffac:	0013      	movs	r3, r2
 800ffae:	465a      	mov	r2, fp
 800ffb0:	1818      	adds	r0, r3, r0
 800ffb2:	b200      	sxth	r0, r0
 800ffb4:	4282      	cmp	r2, r0
 800ffb6:	dafb      	bge.n	800ffb0 <lv_draw_sw_bg+0x2dc>
 800ffb8:	e71e      	b.n	800fdf8 <lv_draw_sw_bg+0x124>
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800ffba:	9b07      	ldr	r3, [sp, #28]
 800ffbc:	8829      	ldrh	r1, [r5, #0]
 800ffbe:	02da      	lsls	r2, r3, #11
 800ffc0:	0d53      	lsrs	r3, r2, #21
 800ffc2:	469c      	mov	ip, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ffc4:	88ab      	ldrh	r3, [r5, #4]
 800ffc6:	0d92      	lsrs	r2, r2, #22
 800ffc8:	3301      	adds	r3, #1
 800ffca:	1a5b      	subs	r3, r3, r1
 800ffcc:	b21b      	sxth	r3, r3
 800ffce:	0fd8      	lsrs	r0, r3, #31
 800ffd0:	18c0      	adds	r0, r0, r3
 800ffd2:	1a89      	subs	r1, r1, r2
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800ffd4:	ae02      	add	r6, sp, #8
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800ffd6:	1040      	asrs	r0, r0, #1
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800ffd8:	46b2      	mov	sl, r6
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800ffda:	1840      	adds	r0, r0, r1
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800ffdc:	2116      	movs	r1, #22
 800ffde:	4451      	add	r1, sl
 800ffe0:	8809      	ldrh	r1, [r1, #0]
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800ffe2:	aa0a      	add	r2, sp, #40	; 0x28
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800ffe4:	468a      	mov	sl, r1
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800ffe6:	b280      	uxth	r0, r0
 800ffe8:	8010      	strh	r0, [r2, #0]
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800ffea:	094e      	lsrs	r6, r1, #5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ffec:	88e9      	ldrh	r1, [r5, #6]
 800ffee:	886b      	ldrh	r3, [r5, #2]
 800fff0:	3101      	adds	r1, #1
 800fff2:	1ac9      	subs	r1, r1, r3
 800fff4:	b20d      	sxth	r5, r1
 800fff6:	0fe9      	lsrs	r1, r5, #31
 800fff8:	1949      	adds	r1, r1, r5
 800fffa:	4655      	mov	r5, sl
 800fffc:	09ad      	lsrs	r5, r5, #6
 800fffe:	1049      	asrs	r1, r1, #1
 8010000:	1b5b      	subs	r3, r3, r5
 8010002:	18cb      	adds	r3, r1, r3
                area.x2 = area.x1 + header.w - 1;
 8010004:	4661      	mov	r1, ip
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8010006:	b29b      	uxth	r3, r3
                area.x2 = area.x1 + header.w - 1;
 8010008:	3901      	subs	r1, #1
                area.y2 = area.y1 + header.h - 1;
 801000a:	3e01      	subs	r6, #1
                area.x2 = area.x1 + header.w - 1;
 801000c:	1840      	adds	r0, r0, r1
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 801000e:	8053      	strh	r3, [r2, #2]
                area.y2 = area.y1 + header.h - 1;
 8010010:	199b      	adds	r3, r3, r6
                area.x2 = area.x1 + header.w - 1;
 8010012:	8090      	strh	r0, [r2, #4]
                area.y2 = area.y1 + header.h - 1;
 8010014:	80d3      	strh	r3, [r2, #6]
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8010016:	4641      	mov	r1, r8
 8010018:	0038      	movs	r0, r7
 801001a:	6923      	ldr	r3, [r4, #16]
 801001c:	f7fc fa0e 	bl	800c43c <lv_draw_img>
 8010020:	e6ea      	b.n	800fdf8 <lv_draw_sw_bg+0x124>
 8010022:	46c0      	nop			; (mov r8, r8)
 8010024:	00001fff 	.word	0x00001fff

08010028 <lv_extra_init>:
    lv_freetype_init(LV_FREETYPE_CACHE_FT_FACES, LV_FREETYPE_CACHE_FT_SIZES, LV_FREETYPE_CACHE_SIZE);
#  else
    lv_freetype_init(0, 0, 0);
#  endif
#endif
}
 8010028:	4770      	bx	lr
 801002a:	46c0      	nop			; (mov r8, r8)

0801002c <theme_apply>:
    return (lv_theme_t *)&theme;
}


static void theme_apply(lv_theme_t * th, lv_obj_t * obj)
{
 801002c:	b570      	push	{r4, r5, r6, lr}
    LV_UNUSED(th);

    if(lv_obj_get_parent(obj) == NULL) {
 801002e:	0008      	movs	r0, r1
{
 8010030:	000c      	movs	r4, r1
    if(lv_obj_get_parent(obj) == NULL) {
 8010032:	f7fa ff89 	bl	800af48 <lv_obj_get_parent>
 8010036:	2800      	cmp	r0, #0
 8010038:	d04c      	beq.n	80100d4 <theme_apply+0xa8>
        lv_obj_add_style(obj, &styles->scr, 0);
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
        return;
    }

    if(lv_obj_check_type(obj, &lv_obj_class)) {
 801003a:	0020      	movs	r0, r4
 801003c:	493f      	ldr	r1, [pc, #252]	; (801013c <theme_apply+0x110>)
 801003e:	f7f5 f83d 	bl	80050bc <lv_obj_check_type>
 8010042:	2800      	cmp	r0, #0
 8010044:	d10d      	bne.n	8010062 <theme_apply+0x36>
#endif
        lv_obj_add_style(obj, &styles->white, 0);
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
    }
#if LV_USE_BTN
    else if(lv_obj_check_type(obj, &lv_btn_class)) {
 8010046:	0020      	movs	r0, r4
 8010048:	493d      	ldr	r1, [pc, #244]	; (8010140 <theme_apply+0x114>)
 801004a:	f7f5 f837 	bl	80050bc <lv_obj_check_type>
 801004e:	2800      	cmp	r0, #0
 8010050:	d016      	beq.n	8010080 <theme_apply+0x54>
        lv_obj_add_style(obj, &styles->dark, 0);
 8010052:	4b3c      	ldr	r3, [pc, #240]	; (8010144 <theme_apply+0x118>)
 8010054:	2200      	movs	r2, #0
 8010056:	6819      	ldr	r1, [r3, #0]
 8010058:	0020      	movs	r0, r4
 801005a:	3120      	adds	r1, #32
 801005c:	f7f9 fd08 	bl	8009a70 <lv_obj_add_style>
#if LV_USE_LED
    else if(lv_obj_check_type(obj, &lv_led_class)) {
        lv_obj_add_style(obj, &styles->light, 0);
    }
#endif
}
 8010060:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_add_style(obj, &styles->white, 0);
 8010062:	2200      	movs	r2, #0
 8010064:	4d37      	ldr	r5, [pc, #220]	; (8010144 <theme_apply+0x118>)
 8010066:	6829      	ldr	r1, [r5, #0]
 8010068:	3110      	adds	r1, #16
 801006a:	0020      	movs	r0, r4
 801006c:	f7f9 fd00 	bl	8009a70 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8010070:	2280      	movs	r2, #128	; 0x80
 8010072:	6829      	ldr	r1, [r5, #0]
 8010074:	0020      	movs	r0, r4
 8010076:	3130      	adds	r1, #48	; 0x30
 8010078:	0252      	lsls	r2, r2, #9
 801007a:	f7f9 fcf9 	bl	8009a70 <lv_obj_add_style>
 801007e:	e7ef      	b.n	8010060 <theme_apply+0x34>
    else if(lv_obj_check_type(obj, &lv_switch_class)) {
 8010080:	0020      	movs	r0, r4
 8010082:	4931      	ldr	r1, [pc, #196]	; (8010148 <theme_apply+0x11c>)
 8010084:	f7f5 f81a 	bl	80050bc <lv_obj_check_type>
 8010088:	2800      	cmp	r0, #0
 801008a:	d114      	bne.n	80100b6 <theme_apply+0x8a>
    else if(lv_obj_check_type(obj, &lv_roller_class)) {
 801008c:	0020      	movs	r0, r4
 801008e:	492f      	ldr	r1, [pc, #188]	; (801014c <theme_apply+0x120>)
 8010090:	f7f5 f814 	bl	80050bc <lv_obj_check_type>
 8010094:	2800      	cmp	r0, #0
 8010096:	d021      	beq.n	80100dc <theme_apply+0xb0>
        lv_obj_add_style(obj, &styles->light, 0);
 8010098:	4d2a      	ldr	r5, [pc, #168]	; (8010144 <theme_apply+0x118>)
 801009a:	0020      	movs	r0, r4
 801009c:	6829      	ldr	r1, [r5, #0]
 801009e:	2200      	movs	r2, #0
 80100a0:	3118      	adds	r1, #24
 80100a2:	f7f9 fce5 	bl	8009a70 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->dark, LV_PART_SELECTED);
 80100a6:	2280      	movs	r2, #128	; 0x80
 80100a8:	6829      	ldr	r1, [r5, #0]
 80100aa:	0020      	movs	r0, r4
 80100ac:	3120      	adds	r1, #32
 80100ae:	02d2      	lsls	r2, r2, #11
 80100b0:	f7f9 fcde 	bl	8009a70 <lv_obj_add_style>
 80100b4:	e7d4      	b.n	8010060 <theme_apply+0x34>
        lv_obj_add_style(obj, &styles->light, 0);
 80100b6:	4d23      	ldr	r5, [pc, #140]	; (8010144 <theme_apply+0x118>)
 80100b8:	0020      	movs	r0, r4
 80100ba:	6829      	ldr	r1, [r5, #0]
 80100bc:	2200      	movs	r2, #0
 80100be:	3118      	adds	r1, #24
 80100c0:	f7f9 fcd6 	bl	8009a70 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->dim, LV_PART_KNOB);
 80100c4:	22c0      	movs	r2, #192	; 0xc0
 80100c6:	6829      	ldr	r1, [r5, #0]
 80100c8:	0020      	movs	r0, r4
 80100ca:	3128      	adds	r1, #40	; 0x28
 80100cc:	0292      	lsls	r2, r2, #10
 80100ce:	f7f9 fccf 	bl	8009a70 <lv_obj_add_style>
 80100d2:	e7c5      	b.n	8010060 <theme_apply+0x34>
        lv_obj_add_style(obj, &styles->scr, 0);
 80100d4:	4d1b      	ldr	r5, [pc, #108]	; (8010144 <theme_apply+0x118>)
 80100d6:	2200      	movs	r2, #0
 80100d8:	6829      	ldr	r1, [r5, #0]
 80100da:	e7c6      	b.n	801006a <theme_apply+0x3e>
    else if(lv_obj_check_type(obj, &lv_dropdown_class)) {
 80100dc:	0020      	movs	r0, r4
 80100de:	491c      	ldr	r1, [pc, #112]	; (8010150 <theme_apply+0x124>)
 80100e0:	f7f4 ffec 	bl	80050bc <lv_obj_check_type>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	d121      	bne.n	801012c <theme_apply+0x100>
    else if(lv_obj_check_type(obj, &lv_dropdownlist_class)) {
 80100e8:	0020      	movs	r0, r4
 80100ea:	491a      	ldr	r1, [pc, #104]	; (8010154 <theme_apply+0x128>)
 80100ec:	f7f4 ffe6 	bl	80050bc <lv_obj_check_type>
 80100f0:	2800      	cmp	r0, #0
 80100f2:	d0b5      	beq.n	8010060 <theme_apply+0x34>
        lv_obj_add_style(obj, &styles->white, 0);
 80100f4:	4d13      	ldr	r5, [pc, #76]	; (8010144 <theme_apply+0x118>)
 80100f6:	0020      	movs	r0, r4
 80100f8:	6829      	ldr	r1, [r5, #0]
 80100fa:	2200      	movs	r2, #0
 80100fc:	3110      	adds	r1, #16
 80100fe:	f7f9 fcb7 	bl	8009a70 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8010102:	2280      	movs	r2, #128	; 0x80
 8010104:	6829      	ldr	r1, [r5, #0]
 8010106:	0020      	movs	r0, r4
 8010108:	3130      	adds	r1, #48	; 0x30
 801010a:	0252      	lsls	r2, r2, #9
 801010c:	f7f9 fcb0 	bl	8009a70 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->light, LV_PART_SELECTED);
 8010110:	2280      	movs	r2, #128	; 0x80
 8010112:	6829      	ldr	r1, [r5, #0]
 8010114:	0020      	movs	r0, r4
 8010116:	3118      	adds	r1, #24
 8010118:	02d2      	lsls	r2, r2, #11
 801011a:	f7f9 fca9 	bl	8009a70 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->dark, LV_PART_SELECTED | LV_STATE_CHECKED);
 801011e:	6829      	ldr	r1, [r5, #0]
 8010120:	0020      	movs	r0, r4
 8010122:	4a0d      	ldr	r2, [pc, #52]	; (8010158 <theme_apply+0x12c>)
 8010124:	3120      	adds	r1, #32
 8010126:	f7f9 fca3 	bl	8009a70 <lv_obj_add_style>
 801012a:	e799      	b.n	8010060 <theme_apply+0x34>
        lv_obj_add_style(obj, &styles->white, 0);
 801012c:	4b05      	ldr	r3, [pc, #20]	; (8010144 <theme_apply+0x118>)
 801012e:	2200      	movs	r2, #0
 8010130:	6819      	ldr	r1, [r3, #0]
 8010132:	0020      	movs	r0, r4
 8010134:	3110      	adds	r1, #16
 8010136:	f7f9 fc9b 	bl	8009a70 <lv_obj_add_style>
 801013a:	e791      	b.n	8010060 <theme_apply+0x34>
 801013c:	0801b748 	.word	0x0801b748
 8010140:	0801be88 	.word	0x0801be88
 8010144:	20003314 	.word	0x20003314
 8010148:	0801bf88 	.word	0x0801bf88
 801014c:	0801bf58 	.word	0x0801bf58
 8010150:	0801bec0 	.word	0x0801bec0
 8010154:	0801bed8 	.word	0x0801bed8
 8010158:	00040001 	.word	0x00040001

0801015c <lv_theme_basic_init>:
{
 801015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801015e:	46c6      	mov	lr, r8
    return  LV_GC_ROOT(_lv_theme_basic_styles) == NULL ? false : true;
 8010160:	4cb4      	ldr	r4, [pc, #720]	; (8010434 <lv_theme_basic_init+0x2d8>)
{
 8010162:	0007      	movs	r7, r0
    if(!lv_theme_basic_is_inited()) {
 8010164:	6823      	ldr	r3, [r4, #0]
{
 8010166:	b500      	push	{lr}
    if(!lv_theme_basic_is_inited()) {
 8010168:	2b00      	cmp	r3, #0
 801016a:	d100      	bne.n	801016e <lv_theme_basic_init+0x12>
 801016c:	e158      	b.n	8010420 <lv_theme_basic_init+0x2c4>
    style_init_reset(&styles->scrollbar);
 801016e:	4cb2      	ldr	r4, [pc, #712]	; (8010438 <lv_theme_basic_init+0x2dc>)
 8010170:	4db2      	ldr	r5, [pc, #712]	; (801043c <lv_theme_basic_init+0x2e0>)
 8010172:	6820      	ldr	r0, [r4, #0]
    theme.disp = disp;
 8010174:	4eb2      	ldr	r6, [pc, #712]	; (8010440 <lv_theme_basic_init+0x2e4>)
    theme.font_small = LV_FONT_DEFAULT;
 8010176:	4bb3      	ldr	r3, [pc, #716]	; (8010444 <lv_theme_basic_init+0x2e8>)
    theme.disp = disp;
 8010178:	60f7      	str	r7, [r6, #12]
    theme.font_small = LV_FONT_DEFAULT;
 801017a:	6173      	str	r3, [r6, #20]
    theme.font_normal = LV_FONT_DEFAULT;
 801017c:	61b3      	str	r3, [r6, #24]
    theme.font_large = LV_FONT_DEFAULT;
 801017e:	61f3      	str	r3, [r6, #28]
    theme.apply_cb = theme_apply;
 8010180:	4bb1      	ldr	r3, [pc, #708]	; (8010448 <lv_theme_basic_init+0x2ec>)
    style_init_reset(&styles->scrollbar);
 8010182:	3030      	adds	r0, #48	; 0x30
    theme.apply_cb = theme_apply;
 8010184:	6033      	str	r3, [r6, #0]
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
    if(inited) {
 8010186:	782b      	ldrb	r3, [r5, #0]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d100      	bne.n	801018e <lv_theme_basic_init+0x32>
 801018c:	e145      	b.n	801041a <lv_theme_basic_init+0x2be>
        lv_style_reset(style);
 801018e:	f002 fb69 	bl	8012864 <lv_style_reset>
    lv_style_set_bg_opa(&styles->scrollbar, LV_OPA_COVER);
 8010192:	6820      	ldr	r0, [r4, #0]
 8010194:	21ff      	movs	r1, #255	; 0xff
 8010196:	3030      	adds	r0, #48	; 0x30
 8010198:	f002 fd2e 	bl	8012bf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scrollbar, COLOR_DARK);
 801019c:	2230      	movs	r2, #48	; 0x30
 801019e:	4694      	mov	ip, r2
 80101a0:	6823      	ldr	r3, [r4, #0]
 80101a2:	2012      	movs	r0, #18
 80101a4:	4463      	add	r3, ip
 80101a6:	4698      	mov	r8, r3
 80101a8:	f001 fbfe 	bl	80119a8 <lv_palette_main>
 80101ac:	1c01      	adds	r1, r0, #0
 80101ae:	4640      	mov	r0, r8
 80101b0:	f002 fd16 	bl	8012be0 <lv_style_set_bg_color>
    lv_style_set_width(&styles->scrollbar,  SCROLLBAR_WIDTH);
 80101b4:	6820      	ldr	r0, [r4, #0]
 80101b6:	2102      	movs	r1, #2
 80101b8:	3030      	adds	r0, #48	; 0x30
 80101ba:	f002 fd0b 	bl	8012bd4 <lv_style_set_width>
    if(inited) {
 80101be:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->scr);
 80101c0:	6820      	ldr	r0, [r4, #0]
    if(inited) {
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d100      	bne.n	80101c8 <lv_theme_basic_init+0x6c>
 80101c6:	e125      	b.n	8010414 <lv_theme_basic_init+0x2b8>
        lv_style_reset(style);
 80101c8:	f002 fb4c 	bl	8012864 <lv_style_reset>
    lv_style_set_bg_opa(&styles->scr, LV_OPA_COVER);
 80101cc:	21ff      	movs	r1, #255	; 0xff
 80101ce:	6820      	ldr	r0, [r4, #0]
 80101d0:	f002 fd12 	bl	8012bf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scr, COLOR_SCR);
 80101d4:	6823      	ldr	r3, [r4, #0]
 80101d6:	2104      	movs	r1, #4
 80101d8:	2012      	movs	r0, #18
 80101da:	4698      	mov	r8, r3
 80101dc:	f001 fbee 	bl	80119bc <lv_palette_lighten>
 80101e0:	1c01      	adds	r1, r0, #0
 80101e2:	4640      	mov	r0, r8
 80101e4:	f002 fcfc 	bl	8012be0 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->scr, COLOR_DIM);
 80101e8:	6823      	ldr	r3, [r4, #0]
 80101ea:	2102      	movs	r1, #2
 80101ec:	2012      	movs	r0, #18
 80101ee:	4698      	mov	r8, r3
 80101f0:	f001 fbf6 	bl	80119e0 <lv_palette_darken>
 80101f4:	1c01      	adds	r1, r0, #0
 80101f6:	4640      	mov	r0, r8
 80101f8:	f002 fd28 	bl	8012c4c <lv_style_set_text_color>
    style_init_reset(&styles->transp);
 80101fc:	6820      	ldr	r0, [r4, #0]
    if(inited) {
 80101fe:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->transp);
 8010200:	3008      	adds	r0, #8
    if(inited) {
 8010202:	2b00      	cmp	r3, #0
 8010204:	d100      	bne.n	8010208 <lv_theme_basic_init+0xac>
 8010206:	e102      	b.n	801040e <lv_theme_basic_init+0x2b2>
        lv_style_reset(style);
 8010208:	f002 fb2c 	bl	8012864 <lv_style_reset>
    lv_style_set_bg_opa(&styles->transp, LV_OPA_TRANSP);
 801020c:	6820      	ldr	r0, [r4, #0]
 801020e:	2100      	movs	r1, #0
 8010210:	3008      	adds	r0, #8
 8010212:	f002 fcf1 	bl	8012bf8 <lv_style_set_bg_opa>
    style_init_reset(&styles->white);
 8010216:	6820      	ldr	r0, [r4, #0]
    if(inited) {
 8010218:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->white);
 801021a:	3010      	adds	r0, #16
    if(inited) {
 801021c:	2b00      	cmp	r3, #0
 801021e:	d100      	bne.n	8010222 <lv_theme_basic_init+0xc6>
 8010220:	e0f2      	b.n	8010408 <lv_theme_basic_init+0x2ac>
        lv_style_reset(style);
 8010222:	f002 fb1f 	bl	8012864 <lv_style_reset>
    lv_style_set_bg_opa(&styles->white, LV_OPA_COVER);
 8010226:	6820      	ldr	r0, [r4, #0]
 8010228:	21ff      	movs	r1, #255	; 0xff
 801022a:	3010      	adds	r0, #16
 801022c:	f002 fce4 	bl	8012bf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->white, COLOR_WHITE);
 8010230:	2301      	movs	r3, #1
 8010232:	6820      	ldr	r0, [r4, #0]
 8010234:	425b      	negs	r3, r3
 8010236:	1c19      	adds	r1, r3, #0
 8010238:	3010      	adds	r0, #16
 801023a:	f002 fcd1 	bl	8012be0 <lv_style_set_bg_color>
    lv_style_set_line_width(&styles->white, 1);
 801023e:	6820      	ldr	r0, [r4, #0]
 8010240:	2101      	movs	r1, #1
 8010242:	3010      	adds	r0, #16
 8010244:	f002 fcde 	bl	8012c04 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->white, COLOR_WHITE);
 8010248:	2301      	movs	r3, #1
 801024a:	6820      	ldr	r0, [r4, #0]
 801024c:	425b      	negs	r3, r3
 801024e:	1c19      	adds	r1, r3, #0
 8010250:	3010      	adds	r0, #16
 8010252:	f002 fcdd 	bl	8012c10 <lv_style_set_line_color>
    lv_style_set_arc_width(&styles->white, 2);
 8010256:	6820      	ldr	r0, [r4, #0]
 8010258:	2102      	movs	r1, #2
 801025a:	3010      	adds	r0, #16
 801025c:	f002 fce4 	bl	8012c28 <lv_style_set_arc_width>
    lv_style_set_arc_color(&styles->white, COLOR_WHITE);
 8010260:	2301      	movs	r3, #1
 8010262:	6820      	ldr	r0, [r4, #0]
 8010264:	425b      	negs	r3, r3
 8010266:	3010      	adds	r0, #16
 8010268:	1c19      	adds	r1, r3, #0
 801026a:	f002 fce3 	bl	8012c34 <lv_style_set_arc_color>
    style_init_reset(&styles->light);
 801026e:	6820      	ldr	r0, [r4, #0]
    if(inited) {
 8010270:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->light);
 8010272:	3018      	adds	r0, #24
    if(inited) {
 8010274:	2b00      	cmp	r3, #0
 8010276:	d100      	bne.n	801027a <lv_theme_basic_init+0x11e>
 8010278:	e0c3      	b.n	8010402 <lv_theme_basic_init+0x2a6>
        lv_style_reset(style);
 801027a:	f002 faf3 	bl	8012864 <lv_style_reset>
    lv_style_set_bg_opa(&styles->light, LV_OPA_COVER);
 801027e:	6820      	ldr	r0, [r4, #0]
 8010280:	21ff      	movs	r1, #255	; 0xff
 8010282:	3018      	adds	r0, #24
 8010284:	f002 fcb8 	bl	8012bf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->light, COLOR_LIGHT);
 8010288:	2218      	movs	r2, #24
 801028a:	4694      	mov	ip, r2
 801028c:	6823      	ldr	r3, [r4, #0]
 801028e:	2102      	movs	r1, #2
 8010290:	4463      	add	r3, ip
 8010292:	2012      	movs	r0, #18
 8010294:	4698      	mov	r8, r3
 8010296:	f001 fb91 	bl	80119bc <lv_palette_lighten>
 801029a:	1c01      	adds	r1, r0, #0
 801029c:	4640      	mov	r0, r8
 801029e:	f002 fc9f 	bl	8012be0 <lv_style_set_bg_color>
    lv_style_set_line_width(&styles->light, 1);
 80102a2:	6820      	ldr	r0, [r4, #0]
 80102a4:	2101      	movs	r1, #1
 80102a6:	3018      	adds	r0, #24
 80102a8:	f002 fcac 	bl	8012c04 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->light, COLOR_LIGHT);
 80102ac:	2218      	movs	r2, #24
 80102ae:	4694      	mov	ip, r2
 80102b0:	6823      	ldr	r3, [r4, #0]
 80102b2:	2102      	movs	r1, #2
 80102b4:	4463      	add	r3, ip
 80102b6:	2012      	movs	r0, #18
 80102b8:	4698      	mov	r8, r3
 80102ba:	f001 fb7f 	bl	80119bc <lv_palette_lighten>
 80102be:	1c01      	adds	r1, r0, #0
 80102c0:	4640      	mov	r0, r8
 80102c2:	f002 fca5 	bl	8012c10 <lv_style_set_line_color>
    lv_style_set_arc_width(&styles->light, 2);
 80102c6:	6820      	ldr	r0, [r4, #0]
 80102c8:	2102      	movs	r1, #2
 80102ca:	3018      	adds	r0, #24
 80102cc:	f002 fcac 	bl	8012c28 <lv_style_set_arc_width>
    lv_style_set_arc_color(&styles->light, COLOR_LIGHT);
 80102d0:	2218      	movs	r2, #24
 80102d2:	4694      	mov	ip, r2
 80102d4:	6823      	ldr	r3, [r4, #0]
 80102d6:	2102      	movs	r1, #2
 80102d8:	4463      	add	r3, ip
 80102da:	2012      	movs	r0, #18
 80102dc:	4698      	mov	r8, r3
 80102de:	f001 fb6d 	bl	80119bc <lv_palette_lighten>
 80102e2:	1c01      	adds	r1, r0, #0
 80102e4:	4640      	mov	r0, r8
 80102e6:	f002 fca5 	bl	8012c34 <lv_style_set_arc_color>
    style_init_reset(&styles->dark);
 80102ea:	6820      	ldr	r0, [r4, #0]
    if(inited) {
 80102ec:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->dark);
 80102ee:	3020      	adds	r0, #32
    if(inited) {
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d100      	bne.n	80102f6 <lv_theme_basic_init+0x19a>
 80102f4:	e082      	b.n	80103fc <lv_theme_basic_init+0x2a0>
        lv_style_reset(style);
 80102f6:	f002 fab5 	bl	8012864 <lv_style_reset>
    lv_style_set_bg_opa(&styles->dark, LV_OPA_COVER);
 80102fa:	6820      	ldr	r0, [r4, #0]
 80102fc:	21ff      	movs	r1, #255	; 0xff
 80102fe:	3020      	adds	r0, #32
 8010300:	f002 fc7a 	bl	8012bf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->dark, COLOR_DARK);
 8010304:	2220      	movs	r2, #32
 8010306:	4694      	mov	ip, r2
 8010308:	6823      	ldr	r3, [r4, #0]
 801030a:	2012      	movs	r0, #18
 801030c:	4463      	add	r3, ip
 801030e:	4698      	mov	r8, r3
 8010310:	f001 fb4a 	bl	80119a8 <lv_palette_main>
 8010314:	1c01      	adds	r1, r0, #0
 8010316:	4640      	mov	r0, r8
 8010318:	f002 fc62 	bl	8012be0 <lv_style_set_bg_color>
    lv_style_set_line_width(&styles->dark, 1);
 801031c:	6820      	ldr	r0, [r4, #0]
 801031e:	2101      	movs	r1, #1
 8010320:	3020      	adds	r0, #32
 8010322:	f002 fc6f 	bl	8012c04 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->dark, COLOR_DARK);
 8010326:	2220      	movs	r2, #32
 8010328:	4694      	mov	ip, r2
 801032a:	6823      	ldr	r3, [r4, #0]
 801032c:	2012      	movs	r0, #18
 801032e:	4463      	add	r3, ip
 8010330:	4698      	mov	r8, r3
 8010332:	f001 fb39 	bl	80119a8 <lv_palette_main>
 8010336:	1c01      	adds	r1, r0, #0
 8010338:	4640      	mov	r0, r8
 801033a:	f002 fc69 	bl	8012c10 <lv_style_set_line_color>
    lv_style_set_arc_width(&styles->dark, 2);
 801033e:	6820      	ldr	r0, [r4, #0]
 8010340:	2102      	movs	r1, #2
 8010342:	3020      	adds	r0, #32
 8010344:	f002 fc70 	bl	8012c28 <lv_style_set_arc_width>
    lv_style_set_arc_color(&styles->dark, COLOR_DARK);
 8010348:	2220      	movs	r2, #32
 801034a:	4694      	mov	ip, r2
 801034c:	6823      	ldr	r3, [r4, #0]
 801034e:	2012      	movs	r0, #18
 8010350:	4463      	add	r3, ip
 8010352:	4698      	mov	r8, r3
 8010354:	f001 fb28 	bl	80119a8 <lv_palette_main>
 8010358:	1c01      	adds	r1, r0, #0
 801035a:	4640      	mov	r0, r8
 801035c:	f002 fc6a 	bl	8012c34 <lv_style_set_arc_color>
    style_init_reset(&styles->dim);
 8010360:	6820      	ldr	r0, [r4, #0]
    if(inited) {
 8010362:	782b      	ldrb	r3, [r5, #0]
    style_init_reset(&styles->dim);
 8010364:	3028      	adds	r0, #40	; 0x28
    if(inited) {
 8010366:	2b00      	cmp	r3, #0
 8010368:	d045      	beq.n	80103f6 <lv_theme_basic_init+0x29a>
        lv_style_reset(style);
 801036a:	f002 fa7b 	bl	8012864 <lv_style_reset>
    lv_style_set_bg_opa(&styles->dim, LV_OPA_COVER);
 801036e:	6820      	ldr	r0, [r4, #0]
 8010370:	21ff      	movs	r1, #255	; 0xff
 8010372:	3028      	adds	r0, #40	; 0x28
 8010374:	f002 fc40 	bl	8012bf8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->dim, COLOR_DIM);
 8010378:	2228      	movs	r2, #40	; 0x28
 801037a:	4694      	mov	ip, r2
 801037c:	6823      	ldr	r3, [r4, #0]
 801037e:	2102      	movs	r1, #2
 8010380:	4463      	add	r3, ip
 8010382:	2012      	movs	r0, #18
 8010384:	4698      	mov	r8, r3
 8010386:	f001 fb2b 	bl	80119e0 <lv_palette_darken>
 801038a:	1c01      	adds	r1, r0, #0
 801038c:	4640      	mov	r0, r8
 801038e:	f002 fc27 	bl	8012be0 <lv_style_set_bg_color>
    lv_style_set_line_width(&styles->dim, 1);
 8010392:	6820      	ldr	r0, [r4, #0]
 8010394:	2101      	movs	r1, #1
 8010396:	3028      	adds	r0, #40	; 0x28
 8010398:	f002 fc34 	bl	8012c04 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->dim, COLOR_DIM);
 801039c:	2228      	movs	r2, #40	; 0x28
 801039e:	4694      	mov	ip, r2
 80103a0:	6823      	ldr	r3, [r4, #0]
 80103a2:	2102      	movs	r1, #2
 80103a4:	4463      	add	r3, ip
 80103a6:	2012      	movs	r0, #18
 80103a8:	4698      	mov	r8, r3
 80103aa:	f001 fb19 	bl	80119e0 <lv_palette_darken>
 80103ae:	1c01      	adds	r1, r0, #0
 80103b0:	4640      	mov	r0, r8
 80103b2:	f002 fc2d 	bl	8012c10 <lv_style_set_line_color>
    lv_style_set_arc_width(&styles->dim, 2);
 80103b6:	6820      	ldr	r0, [r4, #0]
 80103b8:	2102      	movs	r1, #2
 80103ba:	3028      	adds	r0, #40	; 0x28
 80103bc:	f002 fc34 	bl	8012c28 <lv_style_set_arc_width>
    lv_style_set_arc_color(&styles->dim, COLOR_DIM);
 80103c0:	2102      	movs	r1, #2
 80103c2:	2012      	movs	r0, #18
 80103c4:	6824      	ldr	r4, [r4, #0]
 80103c6:	f001 fb0b 	bl	80119e0 <lv_palette_darken>
 80103ca:	3428      	adds	r4, #40	; 0x28
 80103cc:	1c01      	adds	r1, r0, #0
 80103ce:	0020      	movs	r0, r4
 80103d0:	f002 fc30 	bl	8012c34 <lv_style_set_arc_color>
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) {
 80103d4:	2f00      	cmp	r7, #0
 80103d6:	d00a      	beq.n	80103ee <lv_theme_basic_init+0x292>
 80103d8:	0038      	movs	r0, r7
 80103da:	f7f1 fa2d 	bl	8001838 <lv_disp_get_theme>
 80103de:	4286      	cmp	r6, r0
 80103e0:	d005      	beq.n	80103ee <lv_theme_basic_init+0x292>
    inited = true;
 80103e2:	2301      	movs	r3, #1
}
 80103e4:	0030      	movs	r0, r6
    inited = true;
 80103e6:	702b      	strb	r3, [r5, #0]
}
 80103e8:	bc80      	pop	{r7}
 80103ea:	46b8      	mov	r8, r7
 80103ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_report_style_change(NULL);
 80103ee:	2000      	movs	r0, #0
 80103f0:	f7f9 ff4e 	bl	800a290 <lv_obj_report_style_change>
 80103f4:	e7f5      	b.n	80103e2 <lv_theme_basic_init+0x286>
    }
    else {
        lv_style_init(style);
 80103f6:	f002 fa2f 	bl	8012858 <lv_style_init>
 80103fa:	e7b8      	b.n	801036e <lv_theme_basic_init+0x212>
 80103fc:	f002 fa2c 	bl	8012858 <lv_style_init>
 8010400:	e77b      	b.n	80102fa <lv_theme_basic_init+0x19e>
 8010402:	f002 fa29 	bl	8012858 <lv_style_init>
 8010406:	e73a      	b.n	801027e <lv_theme_basic_init+0x122>
 8010408:	f002 fa26 	bl	8012858 <lv_style_init>
 801040c:	e70b      	b.n	8010226 <lv_theme_basic_init+0xca>
 801040e:	f002 fa23 	bl	8012858 <lv_style_init>
 8010412:	e6fb      	b.n	801020c <lv_theme_basic_init+0xb0>
 8010414:	f002 fa20 	bl	8012858 <lv_style_init>
 8010418:	e6d8      	b.n	80101cc <lv_theme_basic_init+0x70>
 801041a:	f002 fa1d 	bl	8012858 <lv_style_init>
 801041e:	e6b8      	b.n	8010192 <lv_theme_basic_init+0x36>
        inited = false;
 8010420:	4d06      	ldr	r5, [pc, #24]	; (801043c <lv_theme_basic_init+0x2e0>)
        LV_GC_ROOT(_lv_theme_basic_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 8010422:	2038      	movs	r0, #56	; 0x38
        inited = false;
 8010424:	702b      	strb	r3, [r5, #0]
        LV_GC_ROOT(_lv_theme_basic_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 8010426:	f001 fdc1 	bl	8011fac <lv_mem_alloc>
 801042a:	6020      	str	r0, [r4, #0]
        styles = (my_theme_styles_t *)LV_GC_ROOT(_lv_theme_basic_styles);
 801042c:	4c02      	ldr	r4, [pc, #8]	; (8010438 <lv_theme_basic_init+0x2dc>)
 801042e:	6020      	str	r0, [r4, #0]
 8010430:	e6a0      	b.n	8010174 <lv_theme_basic_init+0x18>
 8010432:	46c0      	nop			; (mov r8, r8)
 8010434:	200033e4 	.word	0x200033e4
 8010438:	20003314 	.word	0x20003314
 801043c:	20003311 	.word	0x20003311
 8010440:	20003318 	.word	0x20003318
 8010444:	0801bfc8 	.word	0x0801bfc8
 8010448:	0801002d 	.word	0x0801002d

0801044c <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter a UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 801044c:	b510      	push	{r4, lr}
    LV_ASSERT_NULL(font_p);
 801044e:	2800      	cmp	r0, #0
 8010450:	d002      	beq.n	8010458 <lv_font_get_glyph_bitmap+0xc>
    return font_p->get_glyph_bitmap(font_p, letter);
 8010452:	6843      	ldr	r3, [r0, #4]
 8010454:	4798      	blx	r3
}
 8010456:	bd10      	pop	{r4, pc}
    LV_ASSERT_NULL(font_p);
 8010458:	e7fe      	b.n	8010458 <lv_font_get_glyph_bitmap+0xc>
 801045a:	46c0      	nop			; (mov r8, r8)

0801045c <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 801045c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801045e:	46d6      	mov	lr, sl
 8010460:	464f      	mov	r7, r9
 8010462:	4646      	mov	r6, r8
 8010464:	000d      	movs	r5, r1
 8010466:	b5c0      	push	{r6, r7, lr}
 8010468:	4680      	mov	r8, r0
 801046a:	4692      	mov	sl, r2
 801046c:	001f      	movs	r7, r3

    LV_ASSERT_NULL(font_p);
 801046e:	2800      	cmp	r0, #0
 8010470:	d029      	beq.n	80104c6 <lv_font_get_glyph_dsc+0x6a>
    LV_ASSERT_NULL(dsc_out);
 8010472:	2900      	cmp	r1, #0
 8010474:	d028      	beq.n	80104c8 <lv_font_get_glyph_dsc+0x6c>
    const lv_font_t * placeholder_font = NULL;
#endif

    const lv_font_t * f = font_p;

    dsc_out->resolved_font = NULL;
 8010476:	2300      	movs	r3, #0
 8010478:	600b      	str	r3, [r1, #0]

    while(f) {
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
        if(found) {
            if(!dsc_out->is_placeholder) {
 801047a:	3310      	adds	r3, #16
    dsc_out->resolved_font = NULL;
 801047c:	0004      	movs	r4, r0
            if(!dsc_out->is_placeholder) {
 801047e:	4699      	mov	r9, r3
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 8010480:	003b      	movs	r3, r7
 8010482:	4652      	mov	r2, sl
 8010484:	0029      	movs	r1, r5
 8010486:	0020      	movs	r0, r4
 8010488:	6826      	ldr	r6, [r4, #0]
 801048a:	47b0      	blx	r6
        if(found) {
 801048c:	2800      	cmp	r0, #0
 801048e:	d003      	beq.n	8010498 <lv_font_get_glyph_dsc+0x3c>
            if(!dsc_out->is_placeholder) {
 8010490:	464a      	mov	r2, r9
 8010492:	7bab      	ldrb	r3, [r5, #14]
 8010494:	421a      	tst	r2, r3
 8010496:	d018      	beq.n	80104ca <lv_font_get_glyph_dsc+0x6e>
            else if(placeholder_font == NULL) {
                placeholder_font = f;
            }
#endif
        }
        f = f->fallback;
 8010498:	6964      	ldr	r4, [r4, #20]
    while(f) {
 801049a:	2c00      	cmp	r4, #0
 801049c:	d1f0      	bne.n	8010480 <lv_font_get_glyph_dsc+0x24>
        dsc_out->resolved_font = placeholder_font;
        return true;
    }
#endif

    if(letter < 0x20 ||
 801049e:	4643      	mov	r3, r8
 80104a0:	606c      	str	r4, [r5, #4]
 80104a2:	2208      	movs	r2, #8
 80104a4:	5e9b      	ldrsh	r3, [r3, r2]

    dsc_out->resolved_font = NULL;
    dsc_out->box_h = font_p->line_height;
    dsc_out->ofs_x = 0;
    dsc_out->ofs_y = 0;
    dsc_out->bpp   = 1;
 80104a6:	221f      	movs	r2, #31
    dsc_out->box_h = font_p->line_height;
 80104a8:	812b      	strh	r3, [r5, #8]
    dsc_out->bpp   = 1;
 80104aa:	7bab      	ldrb	r3, [r5, #14]
 80104ac:	2000      	movs	r0, #0
 80104ae:	4393      	bics	r3, r2
 80104b0:	2211      	movs	r2, #17
 80104b2:	4313      	orrs	r3, r2
    dsc_out->resolved_font = NULL;
 80104b4:	602c      	str	r4, [r5, #0]
    dsc_out->ofs_x = 0;
 80104b6:	816c      	strh	r4, [r5, #10]
    dsc_out->ofs_y = 0;
 80104b8:	81ac      	strh	r4, [r5, #12]
    dsc_out->bpp   = 1;
 80104ba:	73ab      	strb	r3, [r5, #14]
    dsc_out->is_placeholder = true;

    return false;
}
 80104bc:	bce0      	pop	{r5, r6, r7}
 80104be:	46ba      	mov	sl, r7
 80104c0:	46b1      	mov	r9, r6
 80104c2:	46a8      	mov	r8, r5
 80104c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(font_p);
 80104c6:	e7fe      	b.n	80104c6 <lv_font_get_glyph_dsc+0x6a>
    LV_ASSERT_NULL(dsc_out);
 80104c8:	e7fe      	b.n	80104c8 <lv_font_get_glyph_dsc+0x6c>
                dsc_out->resolved_font = f;
 80104ca:	602c      	str	r4, [r5, #0]
                return true;
 80104cc:	e7f6      	b.n	80104bc <lv_font_get_glyph_dsc+0x60>
 80104ce:	46c0      	nop			; (mov r8, r8)

080104d0 <lv_font_get_glyph_width>:
 * @param letter a UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 80104d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104d2:	46c6      	mov	lr, r8
 80104d4:	b500      	push	{lr}
 80104d6:	0004      	movs	r4, r0
 80104d8:	000d      	movs	r5, r1
 80104da:	0016      	movs	r6, r2
 80104dc:	b084      	sub	sp, #16
    LV_ASSERT_NULL(font);
 80104de:	2800      	cmp	r0, #0
 80104e0:	d018      	beq.n	8010514 <lv_font_get_glyph_width+0x44>
    dsc_out->resolved_font = NULL;
 80104e2:	2300      	movs	r3, #0
 80104e4:	9300      	str	r3, [sp, #0]
            if(!dsc_out->is_placeholder) {
 80104e6:	3310      	adds	r3, #16
 80104e8:	4698      	mov	r8, r3
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 80104ea:	0033      	movs	r3, r6
 80104ec:	002a      	movs	r2, r5
 80104ee:	4669      	mov	r1, sp
 80104f0:	0020      	movs	r0, r4
 80104f2:	6827      	ldr	r7, [r4, #0]
 80104f4:	47b8      	blx	r7
        if(found) {
 80104f6:	2800      	cmp	r0, #0
 80104f8:	d004      	beq.n	8010504 <lv_font_get_glyph_width+0x34>
            if(!dsc_out->is_placeholder) {
 80104fa:	466b      	mov	r3, sp
 80104fc:	4642      	mov	r2, r8
 80104fe:	7b9b      	ldrb	r3, [r3, #14]
 8010500:	421a      	tst	r2, r3
 8010502:	d008      	beq.n	8010516 <lv_font_get_glyph_width+0x46>
        f = f->fallback;
 8010504:	6964      	ldr	r4, [r4, #20]
    while(f) {
 8010506:	2c00      	cmp	r4, #0
 8010508:	d1ef      	bne.n	80104ea <lv_font_get_glyph_width+0x1a>
 801050a:	2000      	movs	r0, #0
    lv_font_glyph_dsc_t g;
    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
    return g.adv_w;
}
 801050c:	b004      	add	sp, #16
 801050e:	bc80      	pop	{r7}
 8010510:	46b8      	mov	r8, r7
 8010512:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(font);
 8010514:	e7fe      	b.n	8010514 <lv_font_get_glyph_width+0x44>
    return g.adv_w;
 8010516:	466b      	mov	r3, sp
 8010518:	8898      	ldrh	r0, [r3, #4]
 801051a:	e7f7      	b.n	801050c <lv_font_get_glyph_width+0x3c>

0801051c <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 801051c:	7803      	ldrb	r3, [r0, #0]
 801051e:	780a      	ldrb	r2, [r1, #0]
 8010520:	4293      	cmp	r3, r2
 8010522:	d001      	beq.n	8010528 <kern_pair_8_compare+0xc>
 8010524:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];

}
 8010526:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
 8010528:	7840      	ldrb	r0, [r0, #1]
 801052a:	784b      	ldrb	r3, [r1, #1]
 801052c:	1ac0      	subs	r0, r0, r3
 801052e:	e7fa      	b.n	8010526 <kern_pair_8_compare+0xa>

08010530 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 8010530:	8803      	ldrh	r3, [r0, #0]
 8010532:	880a      	ldrh	r2, [r1, #0]
 8010534:	4293      	cmp	r3, r2
 8010536:	d001      	beq.n	801053c <kern_pair_16_compare+0xc>
 8010538:	1a98      	subs	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
}
 801053a:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
 801053c:	8840      	ldrh	r0, [r0, #2]
 801053e:	884b      	ldrh	r3, [r1, #2]
 8010540:	1ac0      	subs	r0, r0, r3
 8010542:	e7fa      	b.n	801053a <kern_pair_16_compare+0xa>

08010544 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 8010544:	8800      	ldrh	r0, [r0, #0]
 8010546:	880b      	ldrh	r3, [r1, #0]
 8010548:	1ac0      	subs	r0, r0, r3
}
 801054a:	4770      	bx	lr

0801054c <lv_font_get_bitmap_fmt_txt>:
{
 801054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801054e:	000d      	movs	r5, r1
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8010550:	6904      	ldr	r4, [r0, #16]
{
 8010552:	b085      	sub	sp, #20
    if(unicode_letter == '\t') unicode_letter = ' ';
 8010554:	2909      	cmp	r1, #9
 8010556:	d03c      	beq.n	80105d2 <lv_font_get_bitmap_fmt_txt+0x86>
    if(letter == '\0') return 0;
 8010558:	2900      	cmp	r1, #0
 801055a:	d037      	beq.n	80105cc <lv_font_get_bitmap_fmt_txt+0x80>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 801055c:	6961      	ldr	r1, [r4, #20]
 801055e:	2900      	cmp	r1, #0
 8010560:	d03b      	beq.n	80105da <lv_font_get_bitmap_fmt_txt+0x8e>
 8010562:	680b      	ldr	r3, [r1, #0]
 8010564:	429d      	cmp	r5, r3
 8010566:	d049      	beq.n	80105fc <lv_font_get_bitmap_fmt_txt+0xb0>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8010568:	8a63      	ldrh	r3, [r4, #18]
 801056a:	05db      	lsls	r3, r3, #23
 801056c:	0dda      	lsrs	r2, r3, #23
 801056e:	4694      	mov	ip, r2
 8010570:	2b00      	cmp	r3, #0
 8010572:	d028      	beq.n	80105c6 <lv_font_get_bitmap_fmt_txt+0x7a>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8010574:	2600      	movs	r6, #0
 8010576:	2000      	movs	r0, #0
 8010578:	68a3      	ldr	r3, [r4, #8]
 801057a:	681a      	ldr	r2, [r3, #0]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 801057c:	889f      	ldrh	r7, [r3, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801057e:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8010580:	42ba      	cmp	r2, r7
 8010582:	d831      	bhi.n	80105e8 <lv_font_get_bitmap_fmt_txt+0x9c>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8010584:	7c98      	ldrb	r0, [r3, #18]
 8010586:	2802      	cmp	r0, #2
 8010588:	d035      	beq.n	80105f6 <lv_font_get_bitmap_fmt_txt+0xaa>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 801058a:	2800      	cmp	r0, #0
 801058c:	d115      	bne.n	80105ba <lv_font_get_bitmap_fmt_txt+0x6e>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 801058e:	68d8      	ldr	r0, [r3, #12]
 8010590:	88db      	ldrh	r3, [r3, #6]
 8010592:	5c80      	ldrb	r0, [r0, r2]
 8010594:	18c0      	adds	r0, r0, r3
        if(fdsc->cache) {
 8010596:	2900      	cmp	r1, #0
 8010598:	d001      	beq.n	801059e <lv_font_get_bitmap_fmt_txt+0x52>
            fdsc->cache->last_letter = letter;
 801059a:	600d      	str	r5, [r1, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 801059c:	6048      	str	r0, [r1, #4]
    if(!gid) return NULL;
 801059e:	2800      	cmp	r0, #0
 80105a0:	d014      	beq.n	80105cc <lv_font_get_bitmap_fmt_txt+0x80>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 80105a2:	223f      	movs	r2, #63	; 0x3f
 80105a4:	7ce3      	ldrb	r3, [r4, #19]
 80105a6:	4393      	bics	r3, r2
 80105a8:	d110      	bne.n	80105cc <lv_font_get_bitmap_fmt_txt+0x80>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 80105aa:	6863      	ldr	r3, [r4, #4]
 80105ac:	00c0      	lsls	r0, r0, #3
 80105ae:	58c0      	ldr	r0, [r0, r3]
 80105b0:	0300      	lsls	r0, r0, #12
 80105b2:	0b03      	lsrs	r3, r0, #12
 80105b4:	6820      	ldr	r0, [r4, #0]
 80105b6:	18c0      	adds	r0, r0, r3
 80105b8:	e009      	b.n	80105ce <lv_font_get_bitmap_fmt_txt+0x82>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 80105ba:	2803      	cmp	r0, #3
 80105bc:	d020      	beq.n	8010600 <lv_font_get_bitmap_fmt_txt+0xb4>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 80105be:	2801      	cmp	r0, #1
 80105c0:	d034      	beq.n	801062c <lv_font_get_bitmap_fmt_txt+0xe0>
    if(fdsc->cache) {
 80105c2:	2900      	cmp	r1, #0
 80105c4:	d002      	beq.n	80105cc <lv_font_get_bitmap_fmt_txt+0x80>
        fdsc->cache->last_glyph_id = 0;
 80105c6:	2300      	movs	r3, #0
        fdsc->cache->last_letter = letter;
 80105c8:	600d      	str	r5, [r1, #0]
        fdsc->cache->last_glyph_id = 0;
 80105ca:	604b      	str	r3, [r1, #4]
    if(!gid) return NULL;
 80105cc:	2000      	movs	r0, #0
}
 80105ce:	b005      	add	sp, #20
 80105d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 80105d2:	6961      	ldr	r1, [r4, #20]
    if(unicode_letter == '\t') unicode_letter = ' ';
 80105d4:	3517      	adds	r5, #23
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 80105d6:	2900      	cmp	r1, #0
 80105d8:	d1c3      	bne.n	8010562 <lv_font_get_bitmap_fmt_txt+0x16>
    for(i = 0; i < fdsc->cmap_num; i++) {
 80105da:	8a63      	ldrh	r3, [r4, #18]
 80105dc:	05db      	lsls	r3, r3, #23
 80105de:	0dda      	lsrs	r2, r3, #23
 80105e0:	4694      	mov	ip, r2
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d1c6      	bne.n	8010574 <lv_font_get_bitmap_fmt_txt+0x28>
 80105e6:	e7f1      	b.n	80105cc <lv_font_get_bitmap_fmt_txt+0x80>
 80105e8:	3001      	adds	r0, #1
 80105ea:	b280      	uxth	r0, r0
 80105ec:	3614      	adds	r6, #20
 80105ee:	3314      	adds	r3, #20
 80105f0:	4560      	cmp	r0, ip
 80105f2:	d3c2      	bcc.n	801057a <lv_font_get_bitmap_fmt_txt+0x2e>
 80105f4:	e7e5      	b.n	80105c2 <lv_font_get_bitmap_fmt_txt+0x76>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 80105f6:	88d8      	ldrh	r0, [r3, #6]
 80105f8:	1880      	adds	r0, r0, r2
 80105fa:	e7cc      	b.n	8010596 <lv_font_get_bitmap_fmt_txt+0x4a>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 80105fc:	6848      	ldr	r0, [r1, #4]
 80105fe:	e7ce      	b.n	801059e <lv_font_get_bitmap_fmt_txt+0x52>
            uint16_t key = rcp;
 8010600:	300b      	adds	r0, #11
 8010602:	4468      	add	r0, sp
 8010604:	8002      	strh	r2, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8010606:	8a1a      	ldrh	r2, [r3, #16]
 8010608:	6899      	ldr	r1, [r3, #8]
 801060a:	4b17      	ldr	r3, [pc, #92]	; (8010668 <lv_font_get_bitmap_fmt_txt+0x11c>)
 801060c:	9300      	str	r3, [sp, #0]
 801060e:	2302      	movs	r3, #2
 8010610:	f003 fbb4 	bl	8013d7c <_lv_utils_bsearch>
            if(p) {
 8010614:	2800      	cmp	r0, #0
 8010616:	d020      	beq.n	801065a <lv_font_get_bitmap_fmt_txt+0x10e>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8010618:	68a3      	ldr	r3, [r4, #8]
        if(fdsc->cache) {
 801061a:	6961      	ldr	r1, [r4, #20]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801061c:	469c      	mov	ip, r3
 801061e:	4466      	add	r6, ip
 8010620:	68b3      	ldr	r3, [r6, #8]
 8010622:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8010624:	88f3      	ldrh	r3, [r6, #6]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8010626:	1040      	asrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8010628:	18c0      	adds	r0, r0, r3
 801062a:	e7b4      	b.n	8010596 <lv_font_get_bitmap_fmt_txt+0x4a>
            uint16_t key = rcp;
 801062c:	200e      	movs	r0, #14
 801062e:	4468      	add	r0, sp
 8010630:	8002      	strh	r2, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8010632:	8a1a      	ldrh	r2, [r3, #16]
 8010634:	6899      	ldr	r1, [r3, #8]
 8010636:	4b0c      	ldr	r3, [pc, #48]	; (8010668 <lv_font_get_bitmap_fmt_txt+0x11c>)
 8010638:	9300      	str	r3, [sp, #0]
 801063a:	2302      	movs	r3, #2
 801063c:	f003 fb9e 	bl	8013d7c <_lv_utils_bsearch>
            if(p) {
 8010640:	2800      	cmp	r0, #0
 8010642:	d00a      	beq.n	801065a <lv_font_get_bitmap_fmt_txt+0x10e>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8010644:	68a3      	ldr	r3, [r4, #8]
        if(fdsc->cache) {
 8010646:	6961      	ldr	r1, [r4, #20]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8010648:	469c      	mov	ip, r3
 801064a:	4466      	add	r6, ip
 801064c:	68b3      	ldr	r3, [r6, #8]
 801064e:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8010650:	68f3      	ldr	r3, [r6, #12]
 8010652:	5a18      	ldrh	r0, [r3, r0]
 8010654:	88f3      	ldrh	r3, [r6, #6]
 8010656:	18c0      	adds	r0, r0, r3
 8010658:	e79d      	b.n	8010596 <lv_font_get_bitmap_fmt_txt+0x4a>
        if(fdsc->cache) {
 801065a:	6963      	ldr	r3, [r4, #20]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d0b5      	beq.n	80105cc <lv_font_get_bitmap_fmt_txt+0x80>
            fdsc->cache->last_letter = letter;
 8010660:	601d      	str	r5, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 8010662:	6058      	str	r0, [r3, #4]
    if(!gid) return NULL;
 8010664:	e7b3      	b.n	80105ce <lv_font_get_bitmap_fmt_txt+0x82>
 8010666:	46c0      	nop			; (mov r8, r8)
 8010668:	08010545 	.word	0x08010545

0801066c <lv_font_get_glyph_dsc_fmt_txt>:
{
 801066c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801066e:	464e      	mov	r6, r9
 8010670:	4657      	mov	r7, sl
 8010672:	4645      	mov	r5, r8
 8010674:	46de      	mov	lr, fp
 8010676:	b5e0      	push	{r5, r6, r7, lr}
 8010678:	4699      	mov	r9, r3
 801067a:	0006      	movs	r6, r0
 801067c:	000c      	movs	r4, r1
 801067e:	4692      	mov	sl, r2
    if(unicode_letter == '\t') {
 8010680:	0013      	movs	r3, r2
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8010682:	6905      	ldr	r5, [r0, #16]
{
 8010684:	b087      	sub	sp, #28
    if(unicode_letter == '\t') {
 8010686:	2a09      	cmp	r2, #9
 8010688:	d00b      	beq.n	80106a2 <lv_font_get_glyph_dsc_fmt_txt+0x36>
    if(letter == '\0') return 0;
 801068a:	2a00      	cmp	r2, #0
 801068c:	d000      	beq.n	8010690 <lv_font_get_glyph_dsc_fmt_txt+0x24>
 801068e:	e0af      	b.n	80107f0 <lv_font_get_glyph_dsc_fmt_txt+0x184>
    if(!gid) return false;
 8010690:	2700      	movs	r7, #0
}
 8010692:	0038      	movs	r0, r7
 8010694:	b007      	add	sp, #28
 8010696:	bcf0      	pop	{r4, r5, r6, r7}
 8010698:	46bb      	mov	fp, r7
 801069a:	46b2      	mov	sl, r6
 801069c:	46a9      	mov	r9, r5
 801069e:	46a0      	mov	r8, r4
 80106a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 80106a2:	6969      	ldr	r1, [r5, #20]
        unicode_letter = ' ';
 80106a4:	3317      	adds	r3, #23
        is_tab = true;
 80106a6:	2701      	movs	r7, #1
        unicode_letter = ' ';
 80106a8:	469a      	mov	sl, r3
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 80106aa:	2900      	cmp	r1, #0
 80106ac:	d100      	bne.n	80106b0 <lv_font_get_glyph_dsc_fmt_txt+0x44>
 80106ae:	e0a4      	b.n	80107fa <lv_font_get_glyph_dsc_fmt_txt+0x18e>
 80106b0:	680b      	ldr	r3, [r1, #0]
 80106b2:	4553      	cmp	r3, sl
 80106b4:	d100      	bne.n	80106b8 <lv_font_get_glyph_dsc_fmt_txt+0x4c>
 80106b6:	e0df      	b.n	8010878 <lv_font_get_glyph_dsc_fmt_txt+0x20c>
    for(i = 0; i < fdsc->cmap_num; i++) {
 80106b8:	8a6b      	ldrh	r3, [r5, #18]
 80106ba:	05db      	lsls	r3, r3, #23
 80106bc:	0dda      	lsrs	r2, r3, #23
 80106be:	4694      	mov	ip, r2
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d100      	bne.n	80106c6 <lv_font_get_glyph_dsc_fmt_txt+0x5a>
 80106c4:	e0aa      	b.n	801081c <lv_font_get_glyph_dsc_fmt_txt+0x1b0>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 80106c6:	2200      	movs	r2, #0
 80106c8:	2000      	movs	r0, #0
 80106ca:	4693      	mov	fp, r2
 80106cc:	4662      	mov	r2, ip
 80106ce:	4680      	mov	r8, r0
 80106d0:	68ab      	ldr	r3, [r5, #8]
 80106d2:	9202      	str	r2, [sp, #8]
 80106d4:	4652      	mov	r2, sl
 80106d6:	6818      	ldr	r0, [r3, #0]
 80106d8:	1a12      	subs	r2, r2, r0
        if(rcp > fdsc->cmaps[i].range_length) continue;
 80106da:	8898      	ldrh	r0, [r3, #4]
 80106dc:	4282      	cmp	r2, r0
 80106de:	d900      	bls.n	80106e2 <lv_font_get_glyph_dsc_fmt_txt+0x76>
 80106e0:	e079      	b.n	80107d6 <lv_font_get_glyph_dsc_fmt_txt+0x16a>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 80106e2:	7c98      	ldrb	r0, [r3, #18]
 80106e4:	2802      	cmp	r0, #2
 80106e6:	d100      	bne.n	80106ea <lv_font_get_glyph_dsc_fmt_txt+0x7e>
 80106e8:	e0c2      	b.n	8010870 <lv_font_get_glyph_dsc_fmt_txt+0x204>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 80106ea:	2800      	cmp	r0, #0
 80106ec:	d000      	beq.n	80106f0 <lv_font_get_glyph_dsc_fmt_txt+0x84>
 80106ee:	e08c      	b.n	801080a <lv_font_get_glyph_dsc_fmt_txt+0x19e>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 80106f0:	68d8      	ldr	r0, [r3, #12]
 80106f2:	88db      	ldrh	r3, [r3, #6]
 80106f4:	5c82      	ldrb	r2, [r0, r2]
 80106f6:	4690      	mov	r8, r2
 80106f8:	4498      	add	r8, r3
        if(fdsc->cache) {
 80106fa:	2900      	cmp	r1, #0
 80106fc:	d003      	beq.n	8010706 <lv_font_get_glyph_dsc_fmt_txt+0x9a>
            fdsc->cache->last_letter = letter;
 80106fe:	4653      	mov	r3, sl
 8010700:	600b      	str	r3, [r1, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 8010702:	4643      	mov	r3, r8
 8010704:	604b      	str	r3, [r1, #4]
    if(!gid) return false;
 8010706:	4643      	mov	r3, r8
 8010708:	2b00      	cmp	r3, #0
 801070a:	d0c1      	beq.n	8010690 <lv_font_get_glyph_dsc_fmt_txt+0x24>
    if(fdsc->kern_dsc) {
 801070c:	68eb      	ldr	r3, [r5, #12]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d036      	beq.n	8010780 <lv_font_get_glyph_dsc_fmt_txt+0x114>
    if(letter == '\0') return 0;
 8010712:	464b      	mov	r3, r9
 8010714:	2b00      	cmp	r3, #0
 8010716:	d033      	beq.n	8010780 <lv_font_get_glyph_dsc_fmt_txt+0x114>
 8010718:	6933      	ldr	r3, [r6, #16]
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 801071a:	6959      	ldr	r1, [r3, #20]
 801071c:	469a      	mov	sl, r3
 801071e:	2900      	cmp	r1, #0
 8010720:	d100      	bne.n	8010724 <lv_font_get_glyph_dsc_fmt_txt+0xb8>
 8010722:	e0b9      	b.n	8010898 <lv_font_get_glyph_dsc_fmt_txt+0x22c>
 8010724:	680b      	ldr	r3, [r1, #0]
 8010726:	4599      	cmp	r9, r3
 8010728:	d100      	bne.n	801072c <lv_font_get_glyph_dsc_fmt_txt+0xc0>
 801072a:	e10b      	b.n	8010944 <lv_font_get_glyph_dsc_fmt_txt+0x2d8>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801072c:	4653      	mov	r3, sl
 801072e:	8a5b      	ldrh	r3, [r3, #18]
 8010730:	05db      	lsls	r3, r3, #23
 8010732:	0dda      	lsrs	r2, r3, #23
 8010734:	9203      	str	r2, [sp, #12]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d100      	bne.n	801073c <lv_font_get_glyph_dsc_fmt_txt+0xd0>
 801073a:	e0bd      	b.n	80108b8 <lv_font_get_glyph_dsc_fmt_txt+0x24c>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801073c:	2200      	movs	r2, #0
 801073e:	2000      	movs	r0, #0
 8010740:	4653      	mov	r3, sl
 8010742:	4693      	mov	fp, r2
 8010744:	4652      	mov	r2, sl
 8010746:	4684      	mov	ip, r0
 8010748:	689b      	ldr	r3, [r3, #8]
 801074a:	9202      	str	r2, [sp, #8]
 801074c:	464a      	mov	r2, r9
 801074e:	6818      	ldr	r0, [r3, #0]
 8010750:	1a12      	subs	r2, r2, r0
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8010752:	8898      	ldrh	r0, [r3, #4]
 8010754:	4282      	cmp	r2, r0
 8010756:	d900      	bls.n	801075a <lv_font_get_glyph_dsc_fmt_txt+0xee>
 8010758:	e091      	b.n	801087e <lv_font_get_glyph_dsc_fmt_txt+0x212>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 801075a:	9802      	ldr	r0, [sp, #8]
 801075c:	4682      	mov	sl, r0
 801075e:	7c98      	ldrb	r0, [r3, #18]
 8010760:	2802      	cmp	r0, #2
 8010762:	d004      	beq.n	801076e <lv_font_get_glyph_dsc_fmt_txt+0x102>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8010764:	2800      	cmp	r0, #0
 8010766:	d000      	beq.n	801076a <lv_font_get_glyph_dsc_fmt_txt+0xfe>
 8010768:	e09e      	b.n	80108a8 <lv_font_get_glyph_dsc_fmt_txt+0x23c>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 801076a:	68d8      	ldr	r0, [r3, #12]
 801076c:	5c82      	ldrb	r2, [r0, r2]
 801076e:	88db      	ldrh	r3, [r3, #6]
 8010770:	18d2      	adds	r2, r2, r3
        if(fdsc->cache) {
 8010772:	2900      	cmp	r1, #0
 8010774:	d002      	beq.n	801077c <lv_font_get_glyph_dsc_fmt_txt+0x110>
            fdsc->cache->last_letter = letter;
 8010776:	464b      	mov	r3, r9
            fdsc->cache->last_glyph_id = glyph_id;
 8010778:	604a      	str	r2, [r1, #4]
            fdsc->cache->last_letter = letter;
 801077a:	600b      	str	r3, [r1, #0]
        if(gid_next) {
 801077c:	2a00      	cmp	r2, #0
 801077e:	d152      	bne.n	8010826 <lv_font_get_glyph_dsc_fmt_txt+0x1ba>
 8010780:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8010782:	4642      	mov	r2, r8
 8010784:	00d1      	lsls	r1, r2, #3
 8010786:	686a      	ldr	r2, [r5, #4]
 8010788:	4694      	mov	ip, r2
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 801078a:	8a2a      	ldrh	r2, [r5, #16]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 801078c:	4461      	add	r1, ip
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 801078e:	435a      	muls	r2, r3
    uint32_t adv_w = gdsc->adv_w;
 8010790:	8848      	ldrh	r0, [r1, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8010792:	1112      	asrs	r2, r2, #4
    uint32_t adv_w = gdsc->adv_w;
 8010794:	0900      	lsrs	r0, r0, #4
    if(is_tab) adv_w *= 2;
 8010796:	2f00      	cmp	r7, #0
 8010798:	d000      	beq.n	801079c <lv_font_get_glyph_dsc_fmt_txt+0x130>
 801079a:	0040      	lsls	r0, r0, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 801079c:	0013      	movs	r3, r2
 801079e:	3308      	adds	r3, #8
 80107a0:	181b      	adds	r3, r3, r0
 80107a2:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 80107a4:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_h = gdsc->box_h;
 80107a6:	794b      	ldrb	r3, [r1, #5]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 80107a8:	7cea      	ldrb	r2, [r5, #19]
    dsc_out->box_h = gdsc->box_h;
 80107aa:	8123      	strh	r3, [r4, #8]
    dsc_out->ofs_x = gdsc->ofs_x;
 80107ac:	2306      	movs	r3, #6
    dsc_out->box_w = gdsc->box_w;
 80107ae:	7908      	ldrb	r0, [r1, #4]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 80107b0:	06d2      	lsls	r2, r2, #27
    dsc_out->box_w = gdsc->box_w;
 80107b2:	80e0      	strh	r0, [r4, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 80107b4:	56cb      	ldrsb	r3, [r1, r3]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 80107b6:	0f12      	lsrs	r2, r2, #28
    dsc_out->ofs_x = gdsc->ofs_x;
 80107b8:	8163      	strh	r3, [r4, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 80107ba:	2307      	movs	r3, #7
 80107bc:	56cb      	ldrsb	r3, [r1, r3]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 80107be:	211f      	movs	r1, #31
    dsc_out->ofs_y = gdsc->ofs_y;
 80107c0:	81a3      	strh	r3, [r4, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 80107c2:	7ba3      	ldrb	r3, [r4, #14]
 80107c4:	400a      	ands	r2, r1
 80107c6:	438b      	bics	r3, r1
 80107c8:	4313      	orrs	r3, r2
 80107ca:	73a3      	strb	r3, [r4, #14]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 80107cc:	2f00      	cmp	r7, #0
 80107ce:	d04d      	beq.n	801086c <lv_font_get_glyph_dsc_fmt_txt+0x200>
 80107d0:	0040      	lsls	r0, r0, #1
 80107d2:	80e0      	strh	r0, [r4, #6]
 80107d4:	e75d      	b.n	8010692 <lv_font_get_glyph_dsc_fmt_txt+0x26>
    for(i = 0; i < fdsc->cmap_num; i++) {
 80107d6:	4642      	mov	r2, r8
 80107d8:	3201      	adds	r2, #1
 80107da:	b292      	uxth	r2, r2
 80107dc:	4690      	mov	r8, r2
 80107de:	2214      	movs	r2, #20
 80107e0:	4694      	mov	ip, r2
 80107e2:	9a02      	ldr	r2, [sp, #8]
 80107e4:	44e3      	add	fp, ip
 80107e6:	3314      	adds	r3, #20
 80107e8:	4590      	cmp	r8, r2
 80107ea:	d200      	bcs.n	80107ee <lv_font_get_glyph_dsc_fmt_txt+0x182>
 80107ec:	e772      	b.n	80106d4 <lv_font_get_glyph_dsc_fmt_txt+0x68>
 80107ee:	e012      	b.n	8010816 <lv_font_get_glyph_dsc_fmt_txt+0x1aa>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 80107f0:	6969      	ldr	r1, [r5, #20]
    bool is_tab = false;
 80107f2:	2700      	movs	r7, #0
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 80107f4:	2900      	cmp	r1, #0
 80107f6:	d000      	beq.n	80107fa <lv_font_get_glyph_dsc_fmt_txt+0x18e>
 80107f8:	e75a      	b.n	80106b0 <lv_font_get_glyph_dsc_fmt_txt+0x44>
    for(i = 0; i < fdsc->cmap_num; i++) {
 80107fa:	8a6b      	ldrh	r3, [r5, #18]
 80107fc:	05db      	lsls	r3, r3, #23
 80107fe:	0dda      	lsrs	r2, r3, #23
 8010800:	4694      	mov	ip, r2
 8010802:	2b00      	cmp	r3, #0
 8010804:	d000      	beq.n	8010808 <lv_font_get_glyph_dsc_fmt_txt+0x19c>
 8010806:	e75e      	b.n	80106c6 <lv_font_get_glyph_dsc_fmt_txt+0x5a>
 8010808:	e742      	b.n	8010690 <lv_font_get_glyph_dsc_fmt_txt+0x24>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 801080a:	2803      	cmp	r0, #3
 801080c:	d100      	bne.n	8010810 <lv_font_get_glyph_dsc_fmt_txt+0x1a4>
 801080e:	e084      	b.n	801091a <lv_font_get_glyph_dsc_fmt_txt+0x2ae>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8010810:	2801      	cmp	r0, #1
 8010812:	d100      	bne.n	8010816 <lv_font_get_glyph_dsc_fmt_txt+0x1aa>
 8010814:	e098      	b.n	8010948 <lv_font_get_glyph_dsc_fmt_txt+0x2dc>
    if(fdsc->cache) {
 8010816:	2900      	cmp	r1, #0
 8010818:	d100      	bne.n	801081c <lv_font_get_glyph_dsc_fmt_txt+0x1b0>
 801081a:	e739      	b.n	8010690 <lv_font_get_glyph_dsc_fmt_txt+0x24>
        fdsc->cache->last_letter = letter;
 801081c:	4653      	mov	r3, sl
 801081e:	600b      	str	r3, [r1, #0]
        fdsc->cache->last_glyph_id = 0;
 8010820:	2300      	movs	r3, #0
 8010822:	604b      	str	r3, [r1, #4]
 8010824:	e734      	b.n	8010690 <lv_font_get_glyph_dsc_fmt_txt+0x24>
            kvalue = get_kern_value(font, gid, gid_next);
 8010826:	6933      	ldr	r3, [r6, #16]
    if(fdsc->kern_classes == 0) {
 8010828:	7cd9      	ldrb	r1, [r3, #19]
 801082a:	0689      	lsls	r1, r1, #26
 801082c:	d449      	bmi.n	80108c2 <lv_font_get_glyph_dsc_fmt_txt+0x256>
        if(kdsc->glyph_ids_size == 0) {
 801082e:	213f      	movs	r1, #63	; 0x3f
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 8010830:	68de      	ldr	r6, [r3, #12]
        if(kdsc->glyph_ids_size == 0) {
 8010832:	7af3      	ldrb	r3, [r6, #11]
 8010834:	438b      	bics	r3, r1
 8010836:	d100      	bne.n	801083a <lv_font_get_glyph_dsc_fmt_txt+0x1ce>
 8010838:	e0a5      	b.n	8010986 <lv_font_get_glyph_dsc_fmt_txt+0x31a>
        else if(kdsc->glyph_ids_size == 1) {
 801083a:	2b40      	cmp	r3, #64	; 0x40
 801083c:	d1a0      	bne.n	8010780 <lv_font_get_glyph_dsc_fmt_txt+0x114>
            const uint32_t * g_ids = kdsc->glyph_ids;
 801083e:	6833      	ldr	r3, [r6, #0]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 8010840:	0412      	lsls	r2, r2, #16
            const uint32_t * g_ids = kdsc->glyph_ids;
 8010842:	4699      	mov	r9, r3
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8010844:	68b3      	ldr	r3, [r6, #8]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 8010846:	4442      	add	r2, r8
 8010848:	9205      	str	r2, [sp, #20]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 801084a:	009a      	lsls	r2, r3, #2
 801084c:	4b6a      	ldr	r3, [pc, #424]	; (80109f8 <lv_font_get_glyph_dsc_fmt_txt+0x38c>)
 801084e:	4649      	mov	r1, r9
 8010850:	9300      	str	r3, [sp, #0]
 8010852:	0892      	lsrs	r2, r2, #2
 8010854:	2304      	movs	r3, #4
 8010856:	a805      	add	r0, sp, #20
 8010858:	f003 fa90 	bl	8013d7c <_lv_utils_bsearch>
            if(kid_p) {
 801085c:	2800      	cmp	r0, #0
 801085e:	d08f      	beq.n	8010780 <lv_font_get_glyph_dsc_fmt_txt+0x114>
                lv_uintptr_t ofs = kid_p - g_ids;
 8010860:	464b      	mov	r3, r9
 8010862:	1ac0      	subs	r0, r0, r3
                value = kdsc->values[ofs];
 8010864:	6873      	ldr	r3, [r6, #4]
                lv_uintptr_t ofs = kid_p - g_ids;
 8010866:	1080      	asrs	r0, r0, #2
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8010868:	561b      	ldrsb	r3, [r3, r0]
 801086a:	e78a      	b.n	8010782 <lv_font_get_glyph_dsc_fmt_txt+0x116>
    return true;
 801086c:	2701      	movs	r7, #1
 801086e:	e710      	b.n	8010692 <lv_font_get_glyph_dsc_fmt_txt+0x26>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8010870:	88db      	ldrh	r3, [r3, #6]
 8010872:	4698      	mov	r8, r3
 8010874:	4490      	add	r8, r2
 8010876:	e740      	b.n	80106fa <lv_font_get_glyph_dsc_fmt_txt+0x8e>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8010878:	684b      	ldr	r3, [r1, #4]
 801087a:	4698      	mov	r8, r3
 801087c:	e743      	b.n	8010706 <lv_font_get_glyph_dsc_fmt_txt+0x9a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801087e:	4662      	mov	r2, ip
 8010880:	3201      	adds	r2, #1
 8010882:	b292      	uxth	r2, r2
 8010884:	4694      	mov	ip, r2
 8010886:	2214      	movs	r2, #20
 8010888:	4692      	mov	sl, r2
 801088a:	9a03      	ldr	r2, [sp, #12]
 801088c:	44d3      	add	fp, sl
 801088e:	3314      	adds	r3, #20
 8010890:	4594      	cmp	ip, r2
 8010892:	d200      	bcs.n	8010896 <lv_font_get_glyph_dsc_fmt_txt+0x22a>
 8010894:	e75a      	b.n	801074c <lv_font_get_glyph_dsc_fmt_txt+0xe0>
 8010896:	e00c      	b.n	80108b2 <lv_font_get_glyph_dsc_fmt_txt+0x246>
 8010898:	8a5b      	ldrh	r3, [r3, #18]
 801089a:	05db      	lsls	r3, r3, #23
 801089c:	0dda      	lsrs	r2, r3, #23
 801089e:	9203      	str	r2, [sp, #12]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d000      	beq.n	80108a6 <lv_font_get_glyph_dsc_fmt_txt+0x23a>
 80108a4:	e74a      	b.n	801073c <lv_font_get_glyph_dsc_fmt_txt+0xd0>
 80108a6:	e76b      	b.n	8010780 <lv_font_get_glyph_dsc_fmt_txt+0x114>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 80108a8:	2803      	cmp	r0, #3
 80108aa:	d020      	beq.n	80108ee <lv_font_get_glyph_dsc_fmt_txt+0x282>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 80108ac:	2801      	cmp	r0, #1
 80108ae:	d100      	bne.n	80108b2 <lv_font_get_glyph_dsc_fmt_txt+0x246>
 80108b0:	e081      	b.n	80109b6 <lv_font_get_glyph_dsc_fmt_txt+0x34a>
    if(fdsc->cache) {
 80108b2:	2900      	cmp	r1, #0
 80108b4:	d100      	bne.n	80108b8 <lv_font_get_glyph_dsc_fmt_txt+0x24c>
 80108b6:	e763      	b.n	8010780 <lv_font_get_glyph_dsc_fmt_txt+0x114>
        fdsc->cache->last_letter = letter;
 80108b8:	464b      	mov	r3, r9
 80108ba:	600b      	str	r3, [r1, #0]
        fdsc->cache->last_glyph_id = 0;
 80108bc:	2300      	movs	r3, #0
 80108be:	604b      	str	r3, [r1, #4]
        if(gid_next) {
 80108c0:	e75f      	b.n	8010782 <lv_font_get_glyph_dsc_fmt_txt+0x116>
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 80108c2:	4640      	mov	r0, r8
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 80108c4:	68db      	ldr	r3, [r3, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 80108c6:	6859      	ldr	r1, [r3, #4]
 80108c8:	5c09      	ldrb	r1, [r1, r0]
        if(left_class > 0 && right_class > 0) {
 80108ca:	2900      	cmp	r1, #0
 80108cc:	d100      	bne.n	80108d0 <lv_font_get_glyph_dsc_fmt_txt+0x264>
 80108ce:	e757      	b.n	8010780 <lv_font_get_glyph_dsc_fmt_txt+0x114>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 80108d0:	6898      	ldr	r0, [r3, #8]
 80108d2:	5c82      	ldrb	r2, [r0, r2]
        if(left_class > 0 && right_class > 0) {
 80108d4:	2a00      	cmp	r2, #0
 80108d6:	d100      	bne.n	80108da <lv_font_get_glyph_dsc_fmt_txt+0x26e>
 80108d8:	e752      	b.n	8010780 <lv_font_get_glyph_dsc_fmt_txt+0x114>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 80108da:	7b58      	ldrb	r0, [r3, #13]
 80108dc:	3901      	subs	r1, #1
 80108de:	4348      	muls	r0, r1
 80108e0:	6819      	ldr	r1, [r3, #0]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 80108e2:	2301      	movs	r3, #1
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 80108e4:	1889      	adds	r1, r1, r2
 80108e6:	1809      	adds	r1, r1, r0
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 80108e8:	425b      	negs	r3, r3
 80108ea:	56cb      	ldrsb	r3, [r1, r3]
 80108ec:	e749      	b.n	8010782 <lv_font_get_glyph_dsc_fmt_txt+0x116>
            uint16_t key = rcp;
 80108ee:	a805      	add	r0, sp, #20
 80108f0:	8002      	strh	r2, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80108f2:	8a1a      	ldrh	r2, [r3, #16]
 80108f4:	6899      	ldr	r1, [r3, #8]
 80108f6:	4b41      	ldr	r3, [pc, #260]	; (80109fc <lv_font_get_glyph_dsc_fmt_txt+0x390>)
 80108f8:	9300      	str	r3, [sp, #0]
 80108fa:	2302      	movs	r3, #2
 80108fc:	f003 fa3e 	bl	8013d7c <_lv_utils_bsearch>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8010900:	4653      	mov	r3, sl
            if(p) {
 8010902:	2800      	cmp	r0, #0
 8010904:	d06e      	beq.n	80109e4 <lv_font_get_glyph_dsc_fmt_txt+0x378>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8010906:	689b      	ldr	r3, [r3, #8]
 8010908:	445b      	add	r3, fp
 801090a:	689a      	ldr	r2, [r3, #8]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 801090c:	88db      	ldrh	r3, [r3, #6]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801090e:	1a82      	subs	r2, r0, r2
 8010910:	1052      	asrs	r2, r2, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8010912:	18d2      	adds	r2, r2, r3
        if(fdsc->cache) {
 8010914:	4653      	mov	r3, sl
 8010916:	6959      	ldr	r1, [r3, #20]
 8010918:	e72b      	b.n	8010772 <lv_font_get_glyph_dsc_fmt_txt+0x106>
            uint16_t key = rcp;
 801091a:	a805      	add	r0, sp, #20
 801091c:	8002      	strh	r2, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801091e:	8a1a      	ldrh	r2, [r3, #16]
 8010920:	6899      	ldr	r1, [r3, #8]
 8010922:	4b36      	ldr	r3, [pc, #216]	; (80109fc <lv_font_get_glyph_dsc_fmt_txt+0x390>)
 8010924:	9300      	str	r3, [sp, #0]
 8010926:	2302      	movs	r3, #2
 8010928:	f003 fa28 	bl	8013d7c <_lv_utils_bsearch>
            if(p) {
 801092c:	2800      	cmp	r0, #0
 801092e:	d021      	beq.n	8010974 <lv_font_get_glyph_dsc_fmt_txt+0x308>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8010930:	68ab      	ldr	r3, [r5, #8]
        if(fdsc->cache) {
 8010932:	6969      	ldr	r1, [r5, #20]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8010934:	445b      	add	r3, fp
 8010936:	689a      	ldr	r2, [r3, #8]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8010938:	88db      	ldrh	r3, [r3, #6]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801093a:	1a80      	subs	r0, r0, r2
 801093c:	1040      	asrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 801093e:	4680      	mov	r8, r0
 8010940:	4498      	add	r8, r3
 8010942:	e6da      	b.n	80106fa <lv_font_get_glyph_dsc_fmt_txt+0x8e>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8010944:	684a      	ldr	r2, [r1, #4]
 8010946:	e719      	b.n	801077c <lv_font_get_glyph_dsc_fmt_txt+0x110>
            uint16_t key = rcp;
 8010948:	a805      	add	r0, sp, #20
 801094a:	8002      	strh	r2, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801094c:	8a1a      	ldrh	r2, [r3, #16]
 801094e:	6899      	ldr	r1, [r3, #8]
 8010950:	4b2a      	ldr	r3, [pc, #168]	; (80109fc <lv_font_get_glyph_dsc_fmt_txt+0x390>)
 8010952:	9300      	str	r3, [sp, #0]
 8010954:	2302      	movs	r3, #2
 8010956:	f003 fa11 	bl	8013d7c <_lv_utils_bsearch>
            if(p) {
 801095a:	2800      	cmp	r0, #0
 801095c:	d00a      	beq.n	8010974 <lv_font_get_glyph_dsc_fmt_txt+0x308>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 801095e:	68ab      	ldr	r3, [r5, #8]
        if(fdsc->cache) {
 8010960:	6969      	ldr	r1, [r5, #20]
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8010962:	445b      	add	r3, fp
 8010964:	689a      	ldr	r2, [r3, #8]
 8010966:	1a80      	subs	r0, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8010968:	68da      	ldr	r2, [r3, #12]
 801096a:	88db      	ldrh	r3, [r3, #6]
 801096c:	5a12      	ldrh	r2, [r2, r0]
 801096e:	4690      	mov	r8, r2
 8010970:	4498      	add	r8, r3
 8010972:	e6c2      	b.n	80106fa <lv_font_get_glyph_dsc_fmt_txt+0x8e>
        if(fdsc->cache) {
 8010974:	696b      	ldr	r3, [r5, #20]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d100      	bne.n	801097c <lv_font_get_glyph_dsc_fmt_txt+0x310>
 801097a:	e689      	b.n	8010690 <lv_font_get_glyph_dsc_fmt_txt+0x24>
            fdsc->cache->last_letter = letter;
 801097c:	4652      	mov	r2, sl
    if(!gid) return false;
 801097e:	2700      	movs	r7, #0
            fdsc->cache->last_letter = letter;
 8010980:	601a      	str	r2, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 8010982:	6058      	str	r0, [r3, #4]
    if(!gid) return false;
 8010984:	e685      	b.n	8010692 <lv_font_get_glyph_dsc_fmt_txt+0x26>
            const uint16_t * g_ids = kdsc->glyph_ids;
 8010986:	6833      	ldr	r3, [r6, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8010988:	0212      	lsls	r2, r2, #8
            const uint16_t * g_ids = kdsc->glyph_ids;
 801098a:	4699      	mov	r9, r3
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 801098c:	68b3      	ldr	r3, [r6, #8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 801098e:	4442      	add	r2, r8
 8010990:	a805      	add	r0, sp, #20
 8010992:	8002      	strh	r2, [r0, #0]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8010994:	009a      	lsls	r2, r3, #2
 8010996:	4b1a      	ldr	r3, [pc, #104]	; (8010a00 <lv_font_get_glyph_dsc_fmt_txt+0x394>)
 8010998:	4649      	mov	r1, r9
 801099a:	9300      	str	r3, [sp, #0]
 801099c:	0892      	lsrs	r2, r2, #2
 801099e:	2302      	movs	r3, #2
 80109a0:	f003 f9ec 	bl	8013d7c <_lv_utils_bsearch>
            if(kid_p) {
 80109a4:	2800      	cmp	r0, #0
 80109a6:	d100      	bne.n	80109aa <lv_font_get_glyph_dsc_fmt_txt+0x33e>
 80109a8:	e6ea      	b.n	8010780 <lv_font_get_glyph_dsc_fmt_txt+0x114>
                lv_uintptr_t ofs = kid_p - g_ids;
 80109aa:	464b      	mov	r3, r9
 80109ac:	1ac0      	subs	r0, r0, r3
                value = kdsc->values[ofs];
 80109ae:	6873      	ldr	r3, [r6, #4]
                lv_uintptr_t ofs = kid_p - g_ids;
 80109b0:	1040      	asrs	r0, r0, #1
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 80109b2:	561b      	ldrsb	r3, [r3, r0]
 80109b4:	e6e5      	b.n	8010782 <lv_font_get_glyph_dsc_fmt_txt+0x116>
            uint16_t key = rcp;
 80109b6:	a805      	add	r0, sp, #20
 80109b8:	8002      	strh	r2, [r0, #0]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80109ba:	8a1a      	ldrh	r2, [r3, #16]
 80109bc:	6899      	ldr	r1, [r3, #8]
 80109be:	4b0f      	ldr	r3, [pc, #60]	; (80109fc <lv_font_get_glyph_dsc_fmt_txt+0x390>)
 80109c0:	9300      	str	r3, [sp, #0]
 80109c2:	2302      	movs	r3, #2
 80109c4:	f003 f9da 	bl	8013d7c <_lv_utils_bsearch>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80109c8:	4653      	mov	r3, sl
            if(p) {
 80109ca:	2800      	cmp	r0, #0
 80109cc:	d00a      	beq.n	80109e4 <lv_font_get_glyph_dsc_fmt_txt+0x378>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80109ce:	689b      	ldr	r3, [r3, #8]
 80109d0:	445b      	add	r3, fp
 80109d2:	689a      	ldr	r2, [r3, #8]
 80109d4:	1a80      	subs	r0, r0, r2
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80109d6:	68da      	ldr	r2, [r3, #12]
 80109d8:	88db      	ldrh	r3, [r3, #6]
 80109da:	5a12      	ldrh	r2, [r2, r0]
 80109dc:	18d2      	adds	r2, r2, r3
        if(fdsc->cache) {
 80109de:	4653      	mov	r3, sl
 80109e0:	6959      	ldr	r1, [r3, #20]
 80109e2:	e6c6      	b.n	8010772 <lv_font_get_glyph_dsc_fmt_txt+0x106>
 80109e4:	695b      	ldr	r3, [r3, #20]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d100      	bne.n	80109ec <lv_font_get_glyph_dsc_fmt_txt+0x380>
 80109ea:	e6c9      	b.n	8010780 <lv_font_get_glyph_dsc_fmt_txt+0x114>
            fdsc->cache->last_letter = letter;
 80109ec:	464a      	mov	r2, r9
            fdsc->cache->last_glyph_id = glyph_id;
 80109ee:	6058      	str	r0, [r3, #4]
            fdsc->cache->last_letter = letter;
 80109f0:	601a      	str	r2, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 80109f2:	2300      	movs	r3, #0
 80109f4:	e6c5      	b.n	8010782 <lv_font_get_glyph_dsc_fmt_txt+0x116>
 80109f6:	46c0      	nop			; (mov r8, r8)
 80109f8:	08010531 	.word	0x08010531
 80109fc:	08010545 	.word	0x08010545
 8010a00:	0801051d 	.word	0x0801051d

08010a04 <_lv_font_clean_up_fmt_txt>:
}
 8010a04:	4770      	bx	lr
 8010a06:	46c0      	nop			; (mov r8, r8)

08010a08 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 8010a08:	b510      	push	{r4, lr}
 8010a0a:	0004      	movs	r4, r0
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 8010a0c:	214c      	movs	r1, #76	; 0x4c
 8010a0e:	f001 fe4f 	bl	80126b0 <lv_memset_00>

    driver->hor_res          = 320;
 8010a12:	4b0b      	ldr	r3, [pc, #44]	; (8010a40 <lv_disp_drv_init+0x38>)
    driver->ver_res          = 240;
    driver->physical_hor_res = -1;
    driver->physical_ver_res = -1;
    driver->offset_x         = 0;
    driver->offset_y         = 0;
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8010a14:	4a0b      	ldr	r2, [pc, #44]	; (8010a44 <lv_disp_drv_init+0x3c>)
    driver->hor_res          = 320;
 8010a16:	6023      	str	r3, [r4, #0]
 8010a18:	2301      	movs	r3, #1
 8010a1a:	425b      	negs	r3, r3
 8010a1c:	6063      	str	r3, [r4, #4]
 8010a1e:	2300      	movs	r3, #0
 8010a20:	60a3      	str	r3, [r4, #8]
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8010a22:	6923      	ldr	r3, [r4, #16]
 8010a24:	401a      	ands	r2, r3
 8010a26:	4b08      	ldr	r3, [pc, #32]	; (8010a48 <lv_disp_drv_init+0x40>)
 8010a28:	4313      	orrs	r3, r2
 8010a2a:	6123      	str	r3, [r4, #16]
    driver->screen_transp    = 0;
    driver->dpi              = LV_DPI_DEF;
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 8010a2c:	23fc      	movs	r3, #252	; 0xfc
 8010a2e:	00db      	lsls	r3, r3, #3
 8010a30:	8723      	strh	r3, [r4, #56]	; 0x38
#elif LV_USE_GPU_ARM2D
    driver->draw_ctx_init = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_deinit = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_size = sizeof(lv_draw_arm2d_ctx_t);
#else
    driver->draw_ctx_init = lv_draw_sw_init_ctx;
 8010a32:	4b06      	ldr	r3, [pc, #24]	; (8010a4c <lv_disp_drv_init+0x44>)
 8010a34:	6423      	str	r3, [r4, #64]	; 0x40
    driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
 8010a36:	6463      	str	r3, [r4, #68]	; 0x44
    driver->draw_ctx_size = sizeof(lv_draw_sw_ctx_t);
 8010a38:	2350      	movs	r3, #80	; 0x50
 8010a3a:	64a3      	str	r3, [r4, #72]	; 0x48
#endif

}
 8010a3c:	bd10      	pop	{r4, pc}
 8010a3e:	46c0      	nop			; (mov r8, r8)
 8010a40:	00f00140 	.word	0x00f00140
 8010a44:	fffe0037 	.word	0xfffe0037
 8010a48:	00004108 	.word	0x00004108
 8010a4c:	0800da2d 	.word	0x0800da2d

08010a50 <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 8010a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a52:	0004      	movs	r4, r0
 8010a54:	000d      	movs	r5, r1
 8010a56:	0017      	movs	r7, r2
 8010a58:	001e      	movs	r6, r3
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 8010a5a:	211c      	movs	r1, #28
 8010a5c:	f001 fe28 	bl	80126b0 <lv_memset_00>

    draw_buf->buf1    = buf1;
 8010a60:	6025      	str	r5, [r4, #0]
    draw_buf->buf2    = buf2;
 8010a62:	6067      	str	r7, [r4, #4]
    draw_buf->buf_act = draw_buf->buf1;
 8010a64:	60a5      	str	r5, [r4, #8]
    draw_buf->size    = size_in_px_cnt;
 8010a66:	60e6      	str	r6, [r4, #12]
}
 8010a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a6a:	46c0      	nop			; (mov r8, r8)

08010a6c <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8010a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a6e:	0006      	movs	r6, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 8010a70:	483a      	ldr	r0, [pc, #232]	; (8010b5c <lv_disp_drv_register+0xf0>)
 8010a72:	f001 f991 	bl	8011d98 <_lv_ll_ins_head>
 8010a76:	1e04      	subs	r4, r0, #0
    LV_ASSERT_MALLOC(disp);
 8010a78:	d05c      	beq.n	8010b34 <lv_disp_drv_register+0xc8>
    if(!disp) {
        return NULL;
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 8010a7a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d05b      	beq.n	8010b38 <lv_disp_drv_register+0xcc>
        if(draw_ctx == NULL) return NULL;
        driver->draw_ctx_init(driver, draw_ctx);
        driver->draw_ctx = draw_ctx;
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 8010a80:	21ae      	movs	r1, #174	; 0xae
 8010a82:	0020      	movs	r0, r4
 8010a84:	0049      	lsls	r1, r1, #1
 8010a86:	f001 fe13 	bl	80126b0 <lv_memset_00>

    disp->driver = driver;

    disp->inv_en_cnt = 1;
 8010a8a:	23aa      	movs	r3, #170	; 0xaa
 8010a8c:	2201      	movs	r2, #1

    lv_disp_t * disp_def_tmp = disp_def;
 8010a8e:	4d34      	ldr	r5, [pc, #208]	; (8010b60 <lv_disp_drv_register+0xf4>)
    disp->inv_en_cnt = 1;
 8010a90:	005b      	lsls	r3, r3, #1
    disp->driver = driver;
 8010a92:	6026      	str	r6, [r4, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 8010a94:	211e      	movs	r1, #30
    disp->inv_en_cnt = 1;
 8010a96:	50e2      	str	r2, [r4, r3]
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 8010a98:	4832      	ldr	r0, [pc, #200]	; (8010b64 <lv_disp_drv_register+0xf8>)
 8010a9a:	0022      	movs	r2, r4
    lv_disp_t * disp_def_tmp = disp_def;
 8010a9c:	682f      	ldr	r7, [r5, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 8010a9e:	602c      	str	r4, [r5, #0]
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 8010aa0:	f002 f9f0 	bl	8012e84 <lv_timer_create>
 8010aa4:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 8010aa6:	2800      	cmp	r0, #0
 8010aa8:	d045      	beq.n	8010b36 <lv_disp_drv_register+0xca>
    if(disp->refr_timer == NULL) {
        lv_mem_free(disp);
        return NULL;
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 8010aaa:	2202      	movs	r2, #2
 8010aac:	7c33      	ldrb	r3, [r6, #16]
 8010aae:	421a      	tst	r2, r3
 8010ab0:	d00a      	beq.n	8010ac8 <lv_disp_drv_register+0x5c>
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	5e70      	ldrsh	r0, [r6, r1]
 8010ab6:	4684      	mov	ip, r0
 8010ab8:	2002      	movs	r0, #2
 8010aba:	5e31      	ldrsh	r1, [r6, r0]
 8010abc:	4660      	mov	r0, ip
 8010abe:	4341      	muls	r1, r0
 8010ac0:	68f0      	ldr	r0, [r6, #12]
 8010ac2:	68c0      	ldr	r0, [r0, #12]
 8010ac4:	4288      	cmp	r0, r1
 8010ac6:	d343      	bcc.n	8010b50 <lv_disp_drv_register+0xe4>

    disp->bg_color = lv_color_white();
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 8010ac8:	22ff      	movs	r2, #255	; 0xff
 8010aca:	2329      	movs	r3, #41	; 0x29
 8010acc:	54e2      	strb	r2, [r4, r3]
    disp->bg_color = lv_color_white();
 8010ace:	3b2a      	subs	r3, #42	; 0x2a
 8010ad0:	8563      	strh	r3, [r4, #42]	; 0x2a
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 8010ad2:	2000      	movs	r0, #0
 8010ad4:	f7f4 fa18 	bl	8004f08 <lv_obj_create>
 8010ad8:	6120      	str	r0, [r4, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 8010ada:	2000      	movs	r0, #0
 8010adc:	f7f4 fa14 	bl	8004f08 <lv_obj_create>
 8010ae0:	61e0      	str	r0, [r4, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 8010ae2:	2000      	movs	r0, #0
 8010ae4:	f7f4 fa10 	bl	8004f08 <lv_obj_create>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8010ae8:	2100      	movs	r1, #0
 8010aea:	4a1f      	ldr	r2, [pc, #124]	; (8010b68 <lv_disp_drv_register+0xfc>)
 8010aec:	6220      	str	r0, [r4, #32]
 8010aee:	69e0      	ldr	r0, [r4, #28]
 8010af0:	f7f9 f8da 	bl	8009ca8 <lv_obj_remove_style>
 8010af4:	4a1c      	ldr	r2, [pc, #112]	; (8010b68 <lv_disp_drv_register+0xfc>)
 8010af6:	2100      	movs	r1, #0
 8010af8:	6a20      	ldr	r0, [r4, #32]
 8010afa:	f7f9 f8d5 	bl	8009ca8 <lv_obj_remove_style>
    lv_obj_remove_style_all(disp->top_layer);
    lv_obj_remove_style_all(disp->sys_layer);
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 8010afe:	2102      	movs	r1, #2
 8010b00:	69e0      	ldr	r0, [r4, #28]
 8010b02:	f7f4 fa49 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 8010b06:	2102      	movs	r1, #2
 8010b08:	6a20      	ldr	r0, [r4, #32]
 8010b0a:	f7f4 fa45 	bl	8004f98 <lv_obj_clear_flag>

    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 8010b0e:	2100      	movs	r1, #0
 8010b10:	69e0      	ldr	r0, [r4, #28]
 8010b12:	f7f7 f893 	bl	8007c3c <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 8010b16:	6a20      	ldr	r0, [r4, #32]
 8010b18:	2100      	movs	r1, #0
 8010b1a:	f7f7 f88f 	bl	8007c3c <lv_obj_set_scrollbar_mode>

    lv_obj_invalidate(disp->act_scr);
 8010b1e:	6920      	ldr	r0, [r4, #16]
 8010b20:	f7f5 fd0e 	bl	8006540 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 8010b24:	2f00      	cmp	r7, #0
 8010b26:	d016      	beq.n	8010b56 <lv_disp_drv_register+0xea>
    disp_def = disp_def_tmp; /*Revert the default display*/
 8010b28:	602f      	str	r7, [r5, #0]

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 8010b2a:	6860      	ldr	r0, [r4, #4]
 8010b2c:	f002 f9d6 	bl	8012edc <lv_timer_ready>

    return disp;
}
 8010b30:	0020      	movs	r0, r4
 8010b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(disp);
 8010b34:	e7fe      	b.n	8010b34 <lv_disp_drv_register+0xc8>
    LV_ASSERT_MALLOC(disp->refr_timer);
 8010b36:	e7fe      	b.n	8010b36 <lv_disp_drv_register+0xca>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 8010b38:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8010b3a:	f001 fa37 	bl	8011fac <lv_mem_alloc>
 8010b3e:	1e05      	subs	r5, r0, #0
        LV_ASSERT_MALLOC(draw_ctx);
 8010b40:	d005      	beq.n	8010b4e <lv_disp_drv_register+0xe2>
        driver->draw_ctx_init(driver, draw_ctx);
 8010b42:	0001      	movs	r1, r0
 8010b44:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8010b46:	0030      	movs	r0, r6
 8010b48:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 8010b4a:	63f5      	str	r5, [r6, #60]	; 0x3c
 8010b4c:	e798      	b.n	8010a80 <lv_disp_drv_register+0x14>
        LV_ASSERT_MALLOC(draw_ctx);
 8010b4e:	e7fe      	b.n	8010b4e <lv_disp_drv_register+0xe2>
        driver->full_refresh = 0;
 8010b50:	4393      	bics	r3, r2
 8010b52:	7433      	strb	r3, [r6, #16]
 8010b54:	e7b8      	b.n	8010ac8 <lv_disp_drv_register+0x5c>
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 8010b56:	602c      	str	r4, [r5, #0]
 8010b58:	e7e7      	b.n	8010b2a <lv_disp_drv_register+0xbe>
 8010b5a:	46c0      	nop			; (mov r8, r8)
 8010b5c:	20003368 	.word	0x20003368
 8010b60:	2000333c 	.word	0x2000333c
 8010b64:	0800be21 	.word	0x0800be21
 8010b68:	000fffff 	.word	0x000fffff

08010b6c <lv_disp_get_default>:
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
 8010b6c:	4b01      	ldr	r3, [pc, #4]	; (8010b74 <lv_disp_get_default+0x8>)
 8010b6e:	6818      	ldr	r0, [r3, #0]
}
 8010b70:	4770      	bx	lr
 8010b72:	46c0      	nop			; (mov r8, r8)
 8010b74:	2000333c 	.word	0x2000333c

08010b78 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 8010b78:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 8010b7a:	d009      	beq.n	8010b90 <lv_disp_get_hor_res+0x18>

    if(disp == NULL) {
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	7c1a      	ldrb	r2, [r3, #16]
 8010b80:	06d2      	lsls	r2, r2, #27
 8010b82:	d402      	bmi.n	8010b8a <lv_disp_get_hor_res+0x12>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
            default:
                return disp->driver->hor_res;
 8010b84:	2000      	movs	r0, #0
 8010b86:	5e18      	ldrsh	r0, [r3, r0]
        }
    }
}
 8010b88:	4770      	bx	lr
                return disp->driver->ver_res;
 8010b8a:	2002      	movs	r0, #2
 8010b8c:	5e18      	ldrsh	r0, [r3, r0]
 8010b8e:	e7fb      	b.n	8010b88 <lv_disp_get_hor_res+0x10>
    return disp_def;
 8010b90:	4b02      	ldr	r3, [pc, #8]	; (8010b9c <lv_disp_get_hor_res+0x24>)
        return 0;
 8010b92:	2000      	movs	r0, #0
    return disp_def;
 8010b94:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) {
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d0f6      	beq.n	8010b88 <lv_disp_get_hor_res+0x10>
 8010b9a:	e7ef      	b.n	8010b7c <lv_disp_get_hor_res+0x4>
 8010b9c:	2000333c 	.word	0x2000333c

08010ba0 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 8010ba0:	1e03      	subs	r3, r0, #0
    if(disp == NULL) disp = lv_disp_get_default();
 8010ba2:	d009      	beq.n	8010bb8 <lv_disp_get_ver_res+0x18>

    if(disp == NULL) {
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	7c1a      	ldrb	r2, [r3, #16]
 8010ba8:	06d2      	lsls	r2, r2, #27
 8010baa:	d402      	bmi.n	8010bb2 <lv_disp_get_ver_res+0x12>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
            default:
                return disp->driver->ver_res;
 8010bac:	2002      	movs	r0, #2
 8010bae:	5e18      	ldrsh	r0, [r3, r0]
        }
    }
}
 8010bb0:	4770      	bx	lr
                return disp->driver->hor_res;
 8010bb2:	2000      	movs	r0, #0
 8010bb4:	5e18      	ldrsh	r0, [r3, r0]
 8010bb6:	e7fb      	b.n	8010bb0 <lv_disp_get_ver_res+0x10>
    return disp_def;
 8010bb8:	4b02      	ldr	r3, [pc, #8]	; (8010bc4 <lv_disp_get_ver_res+0x24>)
        return 0;
 8010bba:	2000      	movs	r0, #0
    return disp_def;
 8010bbc:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) {
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d0f6      	beq.n	8010bb0 <lv_disp_get_ver_res+0x10>
 8010bc2:	e7ef      	b.n	8010ba4 <lv_disp_get_ver_res+0x4>
 8010bc4:	2000333c 	.word	0x2000333c

08010bc8 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8010bc8:	2800      	cmp	r0, #0
 8010bca:	d004      	beq.n	8010bd6 <lv_disp_get_dpi+0xe>
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
    return disp->driver->dpi;
 8010bcc:	6803      	ldr	r3, [r0, #0]
 8010bce:	6918      	ldr	r0, [r3, #16]
 8010bd0:	03c0      	lsls	r0, r0, #15
 8010bd2:	0d80      	lsrs	r0, r0, #22
}
 8010bd4:	4770      	bx	lr
    return disp_def;
 8010bd6:	4b03      	ldr	r3, [pc, #12]	; (8010be4 <lv_disp_get_dpi+0x1c>)
 8010bd8:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	d1f6      	bne.n	8010bcc <lv_disp_get_dpi+0x4>
 8010bde:	2082      	movs	r0, #130	; 0x82
 8010be0:	e7f8      	b.n	8010bd4 <lv_disp_get_dpi+0xc>
 8010be2:	46c0      	nop			; (mov r8, r8)
 8010be4:	2000333c 	.word	0x2000333c

08010be8 <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->draw_buf->flushing = 0;
 8010be8:	2200      	movs	r2, #0
 8010bea:	68c3      	ldr	r3, [r0, #12]
 8010bec:	611a      	str	r2, [r3, #16]
    disp_drv->draw_buf->flushing_last = 0;
 8010bee:	615a      	str	r2, [r3, #20]
}
 8010bf0:	4770      	bx	lr
 8010bf2:	46c0      	nop			; (mov r8, r8)

08010bf4 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
 8010bf4:	0001      	movs	r1, r0
 8010bf6:	b510      	push	{r4, lr}
    if(disp == NULL)
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8010bf8:	4804      	ldr	r0, [pc, #16]	; (8010c0c <lv_disp_get_next+0x18>)
    if(disp == NULL)
 8010bfa:	2900      	cmp	r1, #0
 8010bfc:	d002      	beq.n	8010c04 <lv_disp_get_next+0x10>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 8010bfe:	f001 f931 	bl	8011e64 <_lv_ll_get_next>
}
 8010c02:	bd10      	pop	{r4, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8010c04:	f001 f922 	bl	8011e4c <_lv_ll_get_head>
 8010c08:	e7fb      	b.n	8010c02 <lv_disp_get_next+0xe>
 8010c0a:	46c0      	nop			; (mov r8, r8)
 8010c0c:	20003368 	.word	0x20003368

08010c10 <lv_disp_get_draw_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
    return disp->driver->draw_buf;
 8010c10:	6803      	ldr	r3, [r0, #0]
 8010c12:	68d8      	ldr	r0, [r3, #12]
}
 8010c14:	4770      	bx	lr
 8010c16:	46c0      	nop			; (mov r8, r8)

08010c18 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
 8010c18:	b510      	push	{r4, lr}
    lv_memset_00(driver, sizeof(lv_indev_drv_t));
 8010c1a:	211c      	movs	r1, #28
{
 8010c1c:	0004      	movs	r4, r0
    lv_memset_00(driver, sizeof(lv_indev_drv_t));
 8010c1e:	f001 fd47 	bl	80126b0 <lv_memset_00>

    driver->type                 = LV_INDEV_TYPE_NONE;
 8010c22:	2300      	movs	r3, #0
 8010c24:	7023      	strb	r3, [r4, #0]
    driver->scroll_limit         = LV_INDEV_DEF_SCROLL_LIMIT;
    driver->scroll_throw         = LV_INDEV_DEF_SCROLL_THROW;
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
 8010c26:	4b02      	ldr	r3, [pc, #8]	; (8010c30 <lv_indev_drv_init+0x18>)
 8010c28:	61a3      	str	r3, [r4, #24]
    driver->scroll_limit         = LV_INDEV_DEF_SCROLL_LIMIT;
 8010c2a:	4b02      	ldr	r3, [pc, #8]	; (8010c34 <lv_indev_drv_init+0x1c>)
 8010c2c:	6163      	str	r3, [r4, #20]
    driver->long_press_repeat_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
}
 8010c2e:	bd10      	pop	{r4, pc}
 8010c30:	00640190 	.word	0x00640190
 8010c34:	32030a0a 	.word	0x32030a0a

08010c38 <lv_indev_drv_register>:
 * Only pointer is saved, so the driver should be static or dynamically allocated.
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 8010c38:	68c3      	ldr	r3, [r0, #12]
{
 8010c3a:	b570      	push	{r4, r5, r6, lr}
 8010c3c:	0005      	movs	r5, r0
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d015      	beq.n	8010c6e <lv_indev_drv_register+0x36>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 8010c42:	480e      	ldr	r0, [pc, #56]	; (8010c7c <lv_indev_drv_register+0x44>)
 8010c44:	f001 f8a8 	bl	8011d98 <_lv_ll_ins_head>
 8010c48:	1e04      	subs	r4, r0, #0
    LV_ASSERT_MALLOC(indev);
 8010c4a:	d00f      	beq.n	8010c6c <lv_indev_drv_register+0x34>
    if(!indev) {
        return NULL;
    }

    lv_memset_00(indev, sizeof(lv_indev_t));
 8010c4c:	2158      	movs	r1, #88	; 0x58
 8010c4e:	f001 fd2f 	bl	80126b0 <lv_memset_00>
    indev->driver = driver;

    indev->proc.reset_query  = 1;
 8010c52:	2202      	movs	r2, #2
 8010c54:	7963      	ldrb	r3, [r4, #5]
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 8010c56:	211e      	movs	r1, #30
    indev->proc.reset_query  = 1;
 8010c58:	4313      	orrs	r3, r2
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 8010c5a:	4809      	ldr	r0, [pc, #36]	; (8010c80 <lv_indev_drv_register+0x48>)
 8010c5c:	0022      	movs	r2, r4
    indev->driver = driver;
 8010c5e:	6025      	str	r5, [r4, #0]
    indev->proc.reset_query  = 1;
 8010c60:	7163      	strb	r3, [r4, #5]
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 8010c62:	f002 f90f 	bl	8012e84 <lv_timer_create>
 8010c66:	6128      	str	r0, [r5, #16]

    return indev;
}
 8010c68:	0020      	movs	r0, r4
 8010c6a:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MALLOC(indev);
 8010c6c:	e7fe      	b.n	8010c6c <lv_indev_drv_register+0x34>
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 8010c6e:	f7ff ff7d 	bl	8010b6c <lv_disp_get_default>
 8010c72:	1e04      	subs	r4, r0, #0
 8010c74:	60e8      	str	r0, [r5, #12]
    if(driver->disp == NULL) {
 8010c76:	d0f7      	beq.n	8010c68 <lv_indev_drv_register+0x30>
 8010c78:	e7e3      	b.n	8010c42 <lv_indev_drv_register+0xa>
 8010c7a:	46c0      	nop			; (mov r8, r8)
 8010c7c:	200033c4 	.word	0x200033c4
 8010c80:	08002e9d 	.word	0x08002e9d

08010c84 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 8010c84:	0001      	movs	r1, r0
 8010c86:	b510      	push	{r4, lr}
    if(indev == NULL)
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8010c88:	4804      	ldr	r0, [pc, #16]	; (8010c9c <lv_indev_get_next+0x18>)
    if(indev == NULL)
 8010c8a:	2900      	cmp	r1, #0
 8010c8c:	d002      	beq.n	8010c94 <lv_indev_get_next+0x10>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 8010c8e:	f001 f8e9 	bl	8011e64 <_lv_ll_get_next>
}
 8010c92:	bd10      	pop	{r4, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8010c94:	f001 f8da 	bl	8011e4c <_lv_ll_get_head>
 8010c98:	e7fb      	b.n	8010c92 <lv_indev_get_next+0xe>
 8010c9a:	46c0      	nop			; (mov r8, r8)
 8010c9c:	200033c4 	.word	0x200033c4

08010ca0 <_lv_indev_read>:
 * Read data from an input device.
 * @param indev pointer to an input device
 * @param data input device will write its data here
 */
void _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 8010ca0:	b570      	push	{r4, r5, r6, lr}
 8010ca2:	000c      	movs	r4, r1
 8010ca4:	0005      	movs	r5, r0
    lv_memset_00(data, sizeof(lv_indev_data_t));
 8010ca6:	2110      	movs	r1, #16
 8010ca8:	0020      	movs	r0, r4
 8010caa:	f001 fd01 	bl	80126b0 <lv_memset_00>

    /* For touchpad sometimes users don't set the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver->type == LV_INDEV_TYPE_POINTER) {
 8010cae:	6828      	ldr	r0, [r5, #0]
 8010cb0:	7803      	ldrb	r3, [r0, #0]
 8010cb2:	2b01      	cmp	r3, #1
 8010cb4:	d00e      	beq.n	8010cd4 <_lv_indev_read+0x34>
        data->point.x = indev->proc.types.pointer.last_raw_point.x;
        data->point.y = indev->proc.types.pointer.last_raw_point.y;
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8010cb6:	2b02      	cmp	r3, #2
 8010cb8:	d004      	beq.n	8010cc4 <_lv_indev_read+0x24>
        data->key = indev->proc.types.keypad.last_key;
    }
    /*For compatibility assume that used button was enter (encoder push)*/
    else if(indev->driver->type == LV_INDEV_TYPE_ENCODER) {
 8010cba:	2b04      	cmp	r3, #4
 8010cbc:	d104      	bne.n	8010cc8 <_lv_indev_read+0x28>
        data->key = LV_KEY_ENTER;
 8010cbe:	3306      	adds	r3, #6
 8010cc0:	6063      	str	r3, [r4, #4]
 8010cc2:	e001      	b.n	8010cc8 <_lv_indev_read+0x28>
        data->key = indev->proc.types.keypad.last_key;
 8010cc4:	68eb      	ldr	r3, [r5, #12]
 8010cc6:	6063      	str	r3, [r4, #4]
    }

    if(indev->driver->read_cb) {
 8010cc8:	6843      	ldr	r3, [r0, #4]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d001      	beq.n	8010cd2 <_lv_indev_read+0x32>
        INDEV_TRACE("calling indev_read_cb");
        indev->driver->read_cb(indev->driver, data);
 8010cce:	0021      	movs	r1, r4
 8010cd0:	4798      	blx	r3
    }
    else {
        LV_LOG_WARN("indev_read_cb is not registered");
    }
}
 8010cd2:	bd70      	pop	{r4, r5, r6, pc}
        data->point.x = indev->proc.types.pointer.last_raw_point.x;
 8010cd4:	692b      	ldr	r3, [r5, #16]
 8010cd6:	6023      	str	r3, [r4, #0]
 8010cd8:	e7f6      	b.n	8010cc8 <_lv_indev_read+0x28>
 8010cda:	46c0      	nop			; (mov r8, r8)

08010cdc <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 8010cdc:	2200      	movs	r2, #0
 8010cde:	4b04      	ldr	r3, [pc, #16]	; (8010cf0 <lv_tick_inc+0x14>)
 8010ce0:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 8010ce2:	4b04      	ldr	r3, [pc, #16]	; (8010cf4 <lv_tick_inc+0x18>)
 8010ce4:	681a      	ldr	r2, [r3, #0]
 8010ce6:	4694      	mov	ip, r2
 8010ce8:	4460      	add	r0, ip
 8010cea:	6018      	str	r0, [r3, #0]
}
 8010cec:	4770      	bx	lr
 8010cee:	46c0      	nop			; (mov r8, r8)
 8010cf0:	20003344 	.word	0x20003344
 8010cf4:	20003340 	.word	0x20003340

08010cf8 <lv_tick_get>:
     *This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
 8010cf8:	2101      	movs	r1, #1
        result        = sys_time;
 8010cfa:	4b04      	ldr	r3, [pc, #16]	; (8010d0c <lv_tick_get+0x14>)
 8010cfc:	6818      	ldr	r0, [r3, #0]
 8010cfe:	4b04      	ldr	r3, [pc, #16]	; (8010d10 <lv_tick_get+0x18>)
        tick_irq_flag = 1;
 8010d00:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 8010d02:	781a      	ldrb	r2, [r3, #0]
 8010d04:	2a00      	cmp	r2, #0
 8010d06:	d0fb      	beq.n	8010d00 <lv_tick_get+0x8>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 8010d08:	4770      	bx	lr
 8010d0a:	46c0      	nop			; (mov r8, r8)
 8010d0c:	20003340 	.word	0x20003340
 8010d10:	20003344 	.word	0x20003344

08010d14 <lv_tick_elaps>:
        tick_irq_flag = 1;
 8010d14:	2101      	movs	r1, #1
        result        = sys_time;
 8010d16:	4b05      	ldr	r3, [pc, #20]	; (8010d2c <lv_tick_elaps+0x18>)
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8010d18:	b510      	push	{r4, lr}
        result        = sys_time;
 8010d1a:	681c      	ldr	r4, [r3, #0]
 8010d1c:	4b04      	ldr	r3, [pc, #16]	; (8010d30 <lv_tick_elaps+0x1c>)
        tick_irq_flag = 1;
 8010d1e:	7019      	strb	r1, [r3, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 8010d20:	781a      	ldrb	r2, [r3, #0]
 8010d22:	2a00      	cmp	r2, #0
 8010d24:	d0fb      	beq.n	8010d1e <lv_tick_elaps+0xa>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 8010d26:	1a20      	subs	r0, r4, r0
 8010d28:	bd10      	pop	{r4, pc}
 8010d2a:	46c0      	nop			; (mov r8, r8)
 8010d2c:	20003340 	.word	0x20003340
 8010d30:	20003344 	.word	0x20003344

08010d34 <lv_anim_path_linear>:
}

int32_t lv_anim_path_linear(const lv_anim_t * a)
{
    /*Calculate the current step*/
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8010d34:	2380      	movs	r3, #128	; 0x80
{
 8010d36:	b510      	push	{r4, lr}
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8010d38:	00db      	lsls	r3, r3, #3
{
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	0004      	movs	r4, r0
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8010d3e:	9300      	str	r3, [sp, #0]
 8010d40:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8010d42:	2300      	movs	r3, #0
 8010d44:	2100      	movs	r1, #0
 8010d46:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8010d48:	f001 f904 	bl	8011f54 <lv_map>

    /*Get the new value which will be proportional to `step`
     *and the `start` and `end` values*/
    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 8010d4c:	69e3      	ldr	r3, [r4, #28]
 8010d4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010d50:	1ad2      	subs	r2, r2, r3
 8010d52:	4350      	muls	r0, r2
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 8010d54:	1280      	asrs	r0, r0, #10
    new_value += a->start_value;
 8010d56:	1818      	adds	r0, r3, r0

    return new_value;
}
 8010d58:	b002      	add	sp, #8
 8010d5a:	bd10      	pop	{r4, pc}

08010d5c <anim_timer>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_timer(lv_timer_t * param)
{
 8010d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d5e:	46de      	mov	lr, fp
 8010d60:	4657      	mov	r7, sl
 8010d62:	464e      	mov	r6, r9
 8010d64:	4645      	mov	r5, r8
 8010d66:	b5e0      	push	{r5, r6, r7, lr}
    LV_UNUSED(param);

    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8010d68:	4b71      	ldr	r3, [pc, #452]	; (8010f30 <anim_timer+0x1d4>)
{
 8010d6a:	b083      	sub	sp, #12
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8010d6c:	6818      	ldr	r0, [r3, #0]
 8010d6e:	469a      	mov	sl, r3
 8010d70:	f7ff ffd0 	bl	8010d14 <lv_tick_elaps>

    /*Flip the run round*/
    anim_run_round = anim_run_round ? false : true;
 8010d74:	2201      	movs	r2, #1
 8010d76:	4e6f      	ldr	r6, [pc, #444]	; (8010f34 <anim_timer+0x1d8>)

    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8010d78:	4f6f      	ldr	r7, [pc, #444]	; (8010f38 <anim_timer+0x1dc>)
    anim_run_round = anim_run_round ? false : true;
 8010d7a:	7833      	ldrb	r3, [r6, #0]
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8010d7c:	4680      	mov	r8, r0
    anim_run_round = anim_run_round ? false : true;
 8010d7e:	4053      	eors	r3, r2
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8010d80:	0038      	movs	r0, r7
    anim_run_round = anim_run_round ? false : true;
 8010d82:	7033      	strb	r3, [r6, #0]
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8010d84:	f001 f862 	bl	8011e4c <_lv_ll_get_head>
 8010d88:	1e04      	subs	r4, r0, #0

    while(a != NULL) {
 8010d8a:	d03c      	beq.n	8010e06 <anim_timer+0xaa>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	4699      	mov	r9, r3
{
    anim_list_changed = true;
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
        lv_timer_pause(_lv_anim_tmr);
    else
        lv_timer_resume(_lv_anim_tmr);
 8010d90:	4b6a      	ldr	r3, [pc, #424]	; (8010f3c <anim_timer+0x1e0>)
 8010d92:	4d6b      	ldr	r5, [pc, #428]	; (8010f40 <anim_timer+0x1e4>)
 8010d94:	469b      	mov	fp, r3
        anim_list_changed = false;
 8010d96:	464b      	mov	r3, r9
        if(a->run_round != anim_run_round) {
 8010d98:	213e      	movs	r1, #62	; 0x3e
        anim_list_changed = false;
 8010d9a:	702b      	strb	r3, [r5, #0]
        if(a->run_round != anim_run_round) {
 8010d9c:	5c63      	ldrb	r3, [r4, r1]
 8010d9e:	7830      	ldrb	r0, [r6, #0]
 8010da0:	075a      	lsls	r2, r3, #29
 8010da2:	0fd2      	lsrs	r2, r2, #31
 8010da4:	4282      	cmp	r2, r0
 8010da6:	d05f      	beq.n	8010e68 <anim_timer+0x10c>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 8010da8:	2201      	movs	r2, #1
 8010daa:	4010      	ands	r0, r2
 8010dac:	3203      	adds	r2, #3
 8010dae:	4393      	bics	r3, r2
            int32_t new_act_time = a->act_time + elaps;
 8010db0:	4642      	mov	r2, r8
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 8010db2:	0080      	lsls	r0, r0, #2
 8010db4:	4303      	orrs	r3, r0
 8010db6:	5463      	strb	r3, [r4, r1]
            int32_t new_act_time = a->act_time + elaps;
 8010db8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010dba:	1881      	adds	r1, r0, r2
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8010dbc:	071a      	lsls	r2, r3, #28
 8010dbe:	d401      	bmi.n	8010dc4 <anim_timer+0x68>
 8010dc0:	2800      	cmp	r0, #0
 8010dc2:	dd57      	ble.n	8010e74 <anim_timer+0x118>
            a->act_time += elaps;
 8010dc4:	62e1      	str	r1, [r4, #44]	; 0x2c
            if(a->act_time >= 0) {
 8010dc6:	2900      	cmp	r1, #0
 8010dc8:	db14      	blt.n	8010df4 <anim_timer+0x98>
                if(a->act_time > a->time) a->act_time = a->time;
 8010dca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010dcc:	428b      	cmp	r3, r1
 8010dce:	da00      	bge.n	8010dd2 <anim_timer+0x76>
 8010dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
                new_value = a->path_cb(a);
 8010dd2:	69a3      	ldr	r3, [r4, #24]
 8010dd4:	0020      	movs	r0, r4
 8010dd6:	4798      	blx	r3
                if(new_value != a->current_value) {
 8010dd8:	6a23      	ldr	r3, [r4, #32]
                new_value = a->path_cb(a);
 8010dda:	0001      	movs	r1, r0
                if(new_value != a->current_value) {
 8010ddc:	4283      	cmp	r3, r0
 8010dde:	d005      	beq.n	8010dec <anim_timer+0x90>
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8010de0:	6863      	ldr	r3, [r4, #4]
                    a->current_value = new_value;
 8010de2:	6220      	str	r0, [r4, #32]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d001      	beq.n	8010dec <anim_timer+0x90>
 8010de8:	6820      	ldr	r0, [r4, #0]
 8010dea:	4798      	blx	r3
                if(a->act_time >= a->time) {
 8010dec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010dee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010df0:	429a      	cmp	r2, r3
 8010df2:	da13      	bge.n	8010e1c <anim_timer+0xc0>
        if(anim_list_changed)
 8010df4:	782b      	ldrb	r3, [r5, #0]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d036      	beq.n	8010e68 <anim_timer+0x10c>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8010dfa:	0038      	movs	r0, r7
 8010dfc:	f001 f826 	bl	8011e4c <_lv_ll_get_head>
 8010e00:	0004      	movs	r4, r0
    while(a != NULL) {
 8010e02:	2c00      	cmp	r4, #0
 8010e04:	d1c7      	bne.n	8010d96 <anim_timer+0x3a>
    last_timer_run = lv_tick_get();
 8010e06:	f7ff ff77 	bl	8010cf8 <lv_tick_get>
 8010e0a:	4653      	mov	r3, sl
 8010e0c:	6018      	str	r0, [r3, #0]
}
 8010e0e:	b003      	add	sp, #12
 8010e10:	bcf0      	pop	{r4, r5, r6, r7}
 8010e12:	46bb      	mov	fp, r7
 8010e14:	46b2      	mov	sl, r6
 8010e16:	46a9      	mov	r9, r5
 8010e18:	46a0      	mov	r8, r4
 8010e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8010e1c:	2002      	movs	r0, #2
 8010e1e:	223e      	movs	r2, #62	; 0x3e
 8010e20:	0001      	movs	r1, r0
 8010e22:	5ca2      	ldrb	r2, [r4, r2]
 8010e24:	4011      	ands	r1, r2
 8010e26:	4210      	tst	r0, r2
 8010e28:	d042      	beq.n	8010eb0 <anim_timer+0x154>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8010e2a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8010e2c:	2a00      	cmp	r2, #0
 8010e2e:	d04a      	beq.n	8010ec6 <anim_timer+0x16a>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 8010e30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010e32:	4252      	negs	r2, r2
 8010e34:	62e2      	str	r2, [r4, #44]	; 0x2c
        if(a->playback_time != 0) {
 8010e36:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010e38:	2a00      	cmp	r2, #0
 8010e3a:	d0db      	beq.n	8010df4 <anim_timer+0x98>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 8010e3c:	2900      	cmp	r1, #0
 8010e3e:	d068      	beq.n	8010f12 <anim_timer+0x1b6>
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8010e40:	4248      	negs	r0, r1
 8010e42:	4141      	adcs	r1, r0
 8010e44:	203e      	movs	r0, #62	; 0x3e
 8010e46:	0049      	lsls	r1, r1, #1
 8010e48:	9101      	str	r1, [sp, #4]
 8010e4a:	5c21      	ldrb	r1, [r4, r0]
 8010e4c:	383c      	subs	r0, #60	; 0x3c
 8010e4e:	4381      	bics	r1, r0
 8010e50:	9801      	ldr	r0, [sp, #4]
 8010e52:	4301      	orrs	r1, r0
 8010e54:	203e      	movs	r0, #62	; 0x3e
 8010e56:	5421      	strb	r1, [r4, r0]
            int32_t tmp    = a->start_value;
 8010e58:	69e1      	ldr	r1, [r4, #28]
            a->start_value = a->end_value;
 8010e5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
            a->time = a->playback_time;
 8010e5c:	62a2      	str	r2, [r4, #40]	; 0x28
            a->start_value = a->end_value;
 8010e5e:	61e0      	str	r0, [r4, #28]
            a->end_value   = tmp;
 8010e60:	6261      	str	r1, [r4, #36]	; 0x24
            a->playback_time = tmp;
 8010e62:	6363      	str	r3, [r4, #52]	; 0x34
 8010e64:	e7c6      	b.n	8010df4 <anim_timer+0x98>
            a->act_time += elaps;
 8010e66:	62e1      	str	r1, [r4, #44]	; 0x2c
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8010e68:	0021      	movs	r1, r4
 8010e6a:	0038      	movs	r0, r7
 8010e6c:	f000 fffa 	bl	8011e64 <_lv_ll_get_next>
 8010e70:	0004      	movs	r4, r0
 8010e72:	e7c6      	b.n	8010e02 <anim_timer+0xa6>
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8010e74:	2900      	cmp	r1, #0
 8010e76:	dbf6      	blt.n	8010e66 <anim_timer+0x10a>
                if(a->early_apply == 0 && a->get_value_cb) {
 8010e78:	2201      	movs	r2, #1
 8010e7a:	421a      	tst	r2, r3
 8010e7c:	d10b      	bne.n	8010e96 <anim_timer+0x13a>
 8010e7e:	6963      	ldr	r3, [r4, #20]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d008      	beq.n	8010e96 <anim_timer+0x13a>
                    int32_t v_ofs = a->get_value_cb(a);
 8010e84:	0020      	movs	r0, r4
 8010e86:	4798      	blx	r3
                    a->start_value += v_ofs;
 8010e88:	69e3      	ldr	r3, [r4, #28]
 8010e8a:	181b      	adds	r3, r3, r0
 8010e8c:	61e3      	str	r3, [r4, #28]
                    a->end_value += v_ofs;
 8010e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e90:	469c      	mov	ip, r3
 8010e92:	4460      	add	r0, ip
 8010e94:	6260      	str	r0, [r4, #36]	; 0x24
                if(a->start_cb) a->start_cb(a);
 8010e96:	68a3      	ldr	r3, [r4, #8]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d001      	beq.n	8010ea0 <anim_timer+0x144>
 8010e9c:	0020      	movs	r0, r4
 8010e9e:	4798      	blx	r3
                a->start_cb_called = 1;
 8010ea0:	223e      	movs	r2, #62	; 0x3e
 8010ea2:	2108      	movs	r1, #8
 8010ea4:	5ca3      	ldrb	r3, [r4, r2]
 8010ea6:	430b      	orrs	r3, r1
 8010ea8:	54a3      	strb	r3, [r4, r2]
            a->act_time += elaps;
 8010eaa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010eac:	4441      	add	r1, r8
 8010eae:	e789      	b.n	8010dc4 <anim_timer+0x68>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8010eb0:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8010eb2:	2a00      	cmp	r2, #0
 8010eb4:	d02a      	beq.n	8010f0c <anim_timer+0x1b0>
 8010eb6:	4823      	ldr	r0, [pc, #140]	; (8010f44 <anim_timer+0x1e8>)
 8010eb8:	4282      	cmp	r2, r0
 8010eba:	d02e      	beq.n	8010f1a <anim_timer+0x1be>
        a->repeat_cnt--;
 8010ebc:	3a01      	subs	r2, #1
 8010ebe:	b292      	uxth	r2, r2
 8010ec0:	87a2      	strh	r2, [r4, #60]	; 0x3c
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8010ec2:	2a00      	cmp	r2, #0
 8010ec4:	d1b4      	bne.n	8010e30 <anim_timer+0xd4>
 8010ec6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010ec8:	2a00      	cmp	r2, #0
 8010eca:	d001      	beq.n	8010ed0 <anim_timer+0x174>
 8010ecc:	2900      	cmp	r1, #0
 8010ece:	d020      	beq.n	8010f12 <anim_timer+0x1b6>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8010ed0:	0021      	movs	r1, r4
 8010ed2:	0038      	movs	r0, r7
 8010ed4:	f000 ff90 	bl	8011df8 <_lv_ll_remove>
    anim_list_changed = true;
 8010ed8:	2301      	movs	r3, #1
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8010eda:	0038      	movs	r0, r7
    anim_list_changed = true;
 8010edc:	702b      	strb	r3, [r5, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8010ede:	f000 ffb5 	bl	8011e4c <_lv_ll_get_head>
        lv_timer_pause(_lv_anim_tmr);
 8010ee2:	465b      	mov	r3, fp
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8010ee4:	2800      	cmp	r0, #0
 8010ee6:	d01f      	beq.n	8010f28 <anim_timer+0x1cc>
        lv_timer_resume(_lv_anim_tmr);
 8010ee8:	6818      	ldr	r0, [r3, #0]
 8010eea:	f001 fff1 	bl	8012ed0 <lv_timer_resume>
        if(a->ready_cb != NULL) a->ready_cb(a);
 8010eee:	68e3      	ldr	r3, [r4, #12]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d001      	beq.n	8010ef8 <anim_timer+0x19c>
 8010ef4:	0020      	movs	r0, r4
 8010ef6:	4798      	blx	r3
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 8010ef8:	6923      	ldr	r3, [r4, #16]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d001      	beq.n	8010f02 <anim_timer+0x1a6>
 8010efe:	0020      	movs	r0, r4
 8010f00:	4798      	blx	r3
        lv_mem_free(a);
 8010f02:	0020      	movs	r0, r4
 8010f04:	f001 f874 	bl	8011ff0 <lv_mem_free>
        if(anim_list_changed)
 8010f08:	782b      	ldrb	r3, [r5, #0]
        lv_mem_free(a);
 8010f0a:	e774      	b.n	8010df6 <anim_timer+0x9a>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8010f0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010f0e:	2a00      	cmp	r2, #0
 8010f10:	d0de      	beq.n	8010ed0 <anim_timer+0x174>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 8010f12:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010f14:	4240      	negs	r0, r0
 8010f16:	62e0      	str	r0, [r4, #44]	; 0x2c
 8010f18:	e792      	b.n	8010e40 <anim_timer+0xe4>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 8010f1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010f1c:	4252      	negs	r2, r2
 8010f1e:	62e2      	str	r2, [r4, #44]	; 0x2c
        if(a->playback_time != 0) {
 8010f20:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010f22:	2a00      	cmp	r2, #0
 8010f24:	d1f5      	bne.n	8010f12 <anim_timer+0x1b6>
 8010f26:	e765      	b.n	8010df4 <anim_timer+0x98>
        lv_timer_pause(_lv_anim_tmr);
 8010f28:	6818      	ldr	r0, [r3, #0]
 8010f2a:	f001 ffcb 	bl	8012ec4 <lv_timer_pause>
}
 8010f2e:	e7de      	b.n	8010eee <anim_timer+0x192>
 8010f30:	20003350 	.word	0x20003350
 8010f34:	2000334d 	.word	0x2000334d
 8010f38:	2000335c 	.word	0x2000335c
 8010f3c:	20003348 	.word	0x20003348
 8010f40:	2000334c 	.word	0x2000334c
 8010f44:	0000ffff 	.word	0x0000ffff

08010f48 <_lv_anim_core_init>:
{
 8010f48:	b570      	push	{r4, r5, r6, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8010f4a:	4e0f      	ldr	r6, [pc, #60]	; (8010f88 <_lv_anim_core_init+0x40>)
 8010f4c:	2140      	movs	r1, #64	; 0x40
 8010f4e:	0030      	movs	r0, r6
 8010f50:	f000 ff1a 	bl	8011d88 <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 8010f54:	2200      	movs	r2, #0
 8010f56:	211e      	movs	r1, #30
 8010f58:	480c      	ldr	r0, [pc, #48]	; (8010f8c <_lv_anim_core_init+0x44>)
 8010f5a:	f001 ff93 	bl	8012e84 <lv_timer_create>
    anim_list_changed = true;
 8010f5e:	2301      	movs	r3, #1
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 8010f60:	4d0b      	ldr	r5, [pc, #44]	; (8010f90 <_lv_anim_core_init+0x48>)
    anim_list_changed = true;
 8010f62:	4c0c      	ldr	r4, [pc, #48]	; (8010f94 <_lv_anim_core_init+0x4c>)
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 8010f64:	6028      	str	r0, [r5, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8010f66:	0030      	movs	r0, r6
    anim_list_changed = true;
 8010f68:	7023      	strb	r3, [r4, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8010f6a:	f000 ff6f 	bl	8011e4c <_lv_ll_get_head>
 8010f6e:	2800      	cmp	r0, #0
 8010f70:	d005      	beq.n	8010f7e <_lv_anim_core_init+0x36>
        lv_timer_resume(_lv_anim_tmr);
 8010f72:	6828      	ldr	r0, [r5, #0]
 8010f74:	f001 ffac 	bl	8012ed0 <lv_timer_resume>
    anim_list_changed = false;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	7023      	strb	r3, [r4, #0]
}
 8010f7c:	bd70      	pop	{r4, r5, r6, pc}
        lv_timer_pause(_lv_anim_tmr);
 8010f7e:	6828      	ldr	r0, [r5, #0]
 8010f80:	f001 ffa0 	bl	8012ec4 <lv_timer_pause>
}
 8010f84:	e7f8      	b.n	8010f78 <_lv_anim_core_init+0x30>
 8010f86:	46c0      	nop			; (mov r8, r8)
 8010f88:	2000335c 	.word	0x2000335c
 8010f8c:	08010d5d 	.word	0x08010d5d
 8010f90:	20003348 	.word	0x20003348
 8010f94:	2000334c 	.word	0x2000334c

08010f98 <lv_anim_init>:
{
 8010f98:	b510      	push	{r4, lr}
    lv_memset_00(a, sizeof(lv_anim_t));
 8010f9a:	2140      	movs	r1, #64	; 0x40
{
 8010f9c:	0004      	movs	r4, r0
    lv_memset_00(a, sizeof(lv_anim_t));
 8010f9e:	f001 fb87 	bl	80126b0 <lv_memset_00>
    a->time = 500;
 8010fa2:	23fa      	movs	r3, #250	; 0xfa
 8010fa4:	005b      	lsls	r3, r3, #1
 8010fa6:	62a3      	str	r3, [r4, #40]	; 0x28
    a->start_value = 0;
 8010fa8:	2300      	movs	r3, #0
    a->early_apply = 1;
 8010faa:	223e      	movs	r2, #62	; 0x3e
 8010fac:	2101      	movs	r1, #1
    a->start_value = 0;
 8010fae:	61e3      	str	r3, [r4, #28]
    a->end_value = 100;
 8010fb0:	3364      	adds	r3, #100	; 0x64
 8010fb2:	6263      	str	r3, [r4, #36]	; 0x24
    a->repeat_cnt = 1;
 8010fb4:	3b63      	subs	r3, #99	; 0x63
 8010fb6:	87a3      	strh	r3, [r4, #60]	; 0x3c
    a->path_cb = lv_anim_path_linear;
 8010fb8:	4b02      	ldr	r3, [pc, #8]	; (8010fc4 <lv_anim_init+0x2c>)
 8010fba:	61a3      	str	r3, [r4, #24]
    a->early_apply = 1;
 8010fbc:	5ca3      	ldrb	r3, [r4, r2]
 8010fbe:	430b      	orrs	r3, r1
 8010fc0:	54a3      	strb	r3, [r4, r2]
}
 8010fc2:	bd10      	pop	{r4, pc}
 8010fc4:	08010d35 	.word	0x08010d35

08010fc8 <lv_anim_del>:
{
 8010fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fca:	46de      	mov	lr, fp
 8010fcc:	4657      	mov	r7, sl
 8010fce:	464e      	mov	r6, r9
 8010fd0:	4645      	mov	r5, r8
 8010fd2:	b5e0      	push	{r5, r6, r7, lr}
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8010fd4:	4e6e      	ldr	r6, [pc, #440]	; (8011190 <lv_anim_del+0x1c8>)
{
 8010fd6:	0007      	movs	r7, r0
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8010fd8:	0030      	movs	r0, r6
{
 8010fda:	4688      	mov	r8, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8010fdc:	f000 ff36 	bl	8011e4c <_lv_ll_get_head>
 8010fe0:	1e04      	subs	r4, r0, #0
    while(a != NULL) {
 8010fe2:	d100      	bne.n	8010fe6 <lv_anim_del+0x1e>
 8010fe4:	e0c6      	b.n	8011174 <lv_anim_del+0x1ac>
 8010fe6:	4643      	mov	r3, r8
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d039      	beq.n	8011060 <lv_anim_del+0x98>
    bool del = false;
 8010fec:	2300      	movs	r3, #0
 8010fee:	4699      	mov	r9, r3
    anim_list_changed = true;
 8010ff0:	4b68      	ldr	r3, [pc, #416]	; (8011194 <lv_anim_del+0x1cc>)
 8010ff2:	2f00      	cmp	r7, #0
 8010ff4:	d069      	beq.n	80110ca <lv_anim_del+0x102>
 8010ff6:	469b      	mov	fp, r3
        lv_timer_resume(_lv_anim_tmr);
 8010ff8:	4b67      	ldr	r3, [pc, #412]	; (8011198 <lv_anim_del+0x1d0>)
 8010ffa:	469a      	mov	sl, r3
 8010ffc:	e001      	b.n	8011002 <lv_anim_del+0x3a>
    while(a != NULL) {
 8010ffe:	2c00      	cmp	r4, #0
 8011000:	d027      	beq.n	8011052 <lv_anim_del+0x8a>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8011002:	0025      	movs	r5, r4
 8011004:	0021      	movs	r1, r4
 8011006:	0030      	movs	r0, r6
 8011008:	f000 ff2c 	bl	8011e64 <_lv_ll_get_next>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 801100c:	682b      	ldr	r3, [r5, #0]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 801100e:	0004      	movs	r4, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8011010:	429f      	cmp	r7, r3
 8011012:	d1f4      	bne.n	8010ffe <lv_anim_del+0x36>
 8011014:	686b      	ldr	r3, [r5, #4]
 8011016:	4598      	cmp	r8, r3
 8011018:	d1f1      	bne.n	8010ffe <lv_anim_del+0x36>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 801101a:	0029      	movs	r1, r5
 801101c:	0030      	movs	r0, r6
 801101e:	f000 feeb 	bl	8011df8 <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 8011022:	692b      	ldr	r3, [r5, #16]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d001      	beq.n	801102c <lv_anim_del+0x64>
 8011028:	0028      	movs	r0, r5
 801102a:	4798      	blx	r3
            lv_mem_free(a);
 801102c:	0028      	movs	r0, r5
 801102e:	f000 ffdf 	bl	8011ff0 <lv_mem_free>
    anim_list_changed = true;
 8011032:	2301      	movs	r3, #1
 8011034:	465a      	mov	r2, fp
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8011036:	0030      	movs	r0, r6
    anim_list_changed = true;
 8011038:	7013      	strb	r3, [r2, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 801103a:	f000 ff07 	bl	8011e4c <_lv_ll_get_head>
        lv_timer_pause(_lv_anim_tmr);
 801103e:	4653      	mov	r3, sl
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8011040:	2800      	cmp	r0, #0
 8011042:	d03c      	beq.n	80110be <lv_anim_del+0xf6>
        lv_timer_resume(_lv_anim_tmr);
 8011044:	6818      	ldr	r0, [r3, #0]
 8011046:	f001 ff43 	bl	8012ed0 <lv_timer_resume>
            del = true;
 801104a:	2301      	movs	r3, #1
 801104c:	4699      	mov	r9, r3
    while(a != NULL) {
 801104e:	2c00      	cmp	r4, #0
 8011050:	d1d7      	bne.n	8011002 <lv_anim_del+0x3a>
}
 8011052:	4648      	mov	r0, r9
 8011054:	bcf0      	pop	{r4, r5, r6, r7}
 8011056:	46bb      	mov	fp, r7
 8011058:	46b2      	mov	sl, r6
 801105a:	46a9      	mov	r9, r5
 801105c:	46a0      	mov	r8, r4
 801105e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011060:	2f00      	cmp	r7, #0
 8011062:	d05a      	beq.n	801111a <lv_anim_del+0x152>
    bool del = false;
 8011064:	2300      	movs	r3, #0
 8011066:	4699      	mov	r9, r3
    anim_list_changed = true;
 8011068:	4b4a      	ldr	r3, [pc, #296]	; (8011194 <lv_anim_del+0x1cc>)
 801106a:	469a      	mov	sl, r3
        lv_timer_pause(_lv_anim_tmr);
 801106c:	4b4a      	ldr	r3, [pc, #296]	; (8011198 <lv_anim_del+0x1d0>)
 801106e:	4698      	mov	r8, r3
 8011070:	e001      	b.n	8011076 <lv_anim_del+0xae>
    while(a != NULL) {
 8011072:	2c00      	cmp	r4, #0
 8011074:	d0ed      	beq.n	8011052 <lv_anim_del+0x8a>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8011076:	0025      	movs	r5, r4
 8011078:	0021      	movs	r1, r4
 801107a:	0030      	movs	r0, r6
 801107c:	f000 fef2 	bl	8011e64 <_lv_ll_get_next>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8011080:	682b      	ldr	r3, [r5, #0]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8011082:	0004      	movs	r4, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8011084:	429f      	cmp	r7, r3
 8011086:	d1f4      	bne.n	8011072 <lv_anim_del+0xaa>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8011088:	0029      	movs	r1, r5
 801108a:	0030      	movs	r0, r6
 801108c:	f000 feb4 	bl	8011df8 <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 8011090:	692b      	ldr	r3, [r5, #16]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d001      	beq.n	801109a <lv_anim_del+0xd2>
 8011096:	0028      	movs	r0, r5
 8011098:	4798      	blx	r3
            lv_mem_free(a);
 801109a:	0028      	movs	r0, r5
 801109c:	f000 ffa8 	bl	8011ff0 <lv_mem_free>
    anim_list_changed = true;
 80110a0:	2301      	movs	r3, #1
 80110a2:	4652      	mov	r2, sl
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 80110a4:	0030      	movs	r0, r6
    anim_list_changed = true;
 80110a6:	7013      	strb	r3, [r2, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 80110a8:	f000 fed0 	bl	8011e4c <_lv_ll_get_head>
        lv_timer_pause(_lv_anim_tmr);
 80110ac:	4643      	mov	r3, r8
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 80110ae:	2800      	cmp	r0, #0
 80110b0:	d05a      	beq.n	8011168 <lv_anim_del+0x1a0>
        lv_timer_resume(_lv_anim_tmr);
 80110b2:	6818      	ldr	r0, [r3, #0]
 80110b4:	f001 ff0c 	bl	8012ed0 <lv_timer_resume>
            del = true;
 80110b8:	2301      	movs	r3, #1
 80110ba:	4699      	mov	r9, r3
 80110bc:	e7d9      	b.n	8011072 <lv_anim_del+0xaa>
        lv_timer_pause(_lv_anim_tmr);
 80110be:	6818      	ldr	r0, [r3, #0]
 80110c0:	f001 ff00 	bl	8012ec4 <lv_timer_pause>
            del = true;
 80110c4:	2301      	movs	r3, #1
 80110c6:	4699      	mov	r9, r3
 80110c8:	e799      	b.n	8010ffe <lv_anim_del+0x36>
    anim_list_changed = true;
 80110ca:	469a      	mov	sl, r3
        lv_timer_pause(_lv_anim_tmr);
 80110cc:	4f32      	ldr	r7, [pc, #200]	; (8011198 <lv_anim_del+0x1d0>)
 80110ce:	e001      	b.n	80110d4 <lv_anim_del+0x10c>
    while(a != NULL) {
 80110d0:	2c00      	cmp	r4, #0
 80110d2:	d0be      	beq.n	8011052 <lv_anim_del+0x8a>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80110d4:	0025      	movs	r5, r4
 80110d6:	0021      	movs	r1, r4
 80110d8:	0030      	movs	r0, r6
 80110da:	f000 fec3 	bl	8011e64 <_lv_ll_get_next>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80110de:	686b      	ldr	r3, [r5, #4]
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80110e0:	0004      	movs	r4, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80110e2:	4598      	cmp	r8, r3
 80110e4:	d1f4      	bne.n	80110d0 <lv_anim_del+0x108>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 80110e6:	0029      	movs	r1, r5
 80110e8:	0030      	movs	r0, r6
 80110ea:	f000 fe85 	bl	8011df8 <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 80110ee:	692b      	ldr	r3, [r5, #16]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d001      	beq.n	80110f8 <lv_anim_del+0x130>
 80110f4:	0028      	movs	r0, r5
 80110f6:	4798      	blx	r3
            lv_mem_free(a);
 80110f8:	0028      	movs	r0, r5
 80110fa:	f000 ff79 	bl	8011ff0 <lv_mem_free>
    anim_list_changed = true;
 80110fe:	2301      	movs	r3, #1
 8011100:	4652      	mov	r2, sl
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8011102:	0030      	movs	r0, r6
    anim_list_changed = true;
 8011104:	7013      	strb	r3, [r2, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8011106:	f000 fea1 	bl	8011e4c <_lv_ll_get_head>
 801110a:	2800      	cmp	r0, #0
 801110c:	d035      	beq.n	801117a <lv_anim_del+0x1b2>
        lv_timer_resume(_lv_anim_tmr);
 801110e:	6838      	ldr	r0, [r7, #0]
 8011110:	f001 fede 	bl	8012ed0 <lv_timer_resume>
            del = true;
 8011114:	2301      	movs	r3, #1
 8011116:	4699      	mov	r9, r3
 8011118:	e7da      	b.n	80110d0 <lv_anim_del+0x108>
 801111a:	4b1e      	ldr	r3, [pc, #120]	; (8011194 <lv_anim_del+0x1cc>)
    anim_list_changed = true;
 801111c:	3701      	adds	r7, #1
 801111e:	4699      	mov	r9, r3
 8011120:	4b1d      	ldr	r3, [pc, #116]	; (8011198 <lv_anim_del+0x1d0>)
 8011122:	4698      	mov	r8, r3
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8011124:	0021      	movs	r1, r4
 8011126:	0030      	movs	r0, r6
 8011128:	f000 fe9c 	bl	8011e64 <_lv_ll_get_next>
 801112c:	0025      	movs	r5, r4
 801112e:	0004      	movs	r4, r0
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8011130:	0029      	movs	r1, r5
 8011132:	0030      	movs	r0, r6
 8011134:	f000 fe60 	bl	8011df8 <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 8011138:	692b      	ldr	r3, [r5, #16]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d001      	beq.n	8011142 <lv_anim_del+0x17a>
 801113e:	0028      	movs	r0, r5
 8011140:	4798      	blx	r3
            lv_mem_free(a);
 8011142:	0028      	movs	r0, r5
 8011144:	f000 ff54 	bl	8011ff0 <lv_mem_free>
    anim_list_changed = true;
 8011148:	464b      	mov	r3, r9
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 801114a:	0030      	movs	r0, r6
    anim_list_changed = true;
 801114c:	701f      	strb	r7, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 801114e:	f000 fe7d 	bl	8011e4c <_lv_ll_get_head>
        lv_timer_pause(_lv_anim_tmr);
 8011152:	4643      	mov	r3, r8
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8011154:	2800      	cmp	r0, #0
 8011156:	d016      	beq.n	8011186 <lv_anim_del+0x1be>
        lv_timer_resume(_lv_anim_tmr);
 8011158:	6818      	ldr	r0, [r3, #0]
 801115a:	f001 feb9 	bl	8012ed0 <lv_timer_resume>
    while(a != NULL) {
 801115e:	2c00      	cmp	r4, #0
 8011160:	d1e0      	bne.n	8011124 <lv_anim_del+0x15c>
 8011162:	2301      	movs	r3, #1
 8011164:	4699      	mov	r9, r3
 8011166:	e774      	b.n	8011052 <lv_anim_del+0x8a>
        lv_timer_pause(_lv_anim_tmr);
 8011168:	6818      	ldr	r0, [r3, #0]
 801116a:	f001 feab 	bl	8012ec4 <lv_timer_pause>
            del = true;
 801116e:	2301      	movs	r3, #1
 8011170:	4699      	mov	r9, r3
 8011172:	e77e      	b.n	8011072 <lv_anim_del+0xaa>
    bool del = false;
 8011174:	2300      	movs	r3, #0
 8011176:	4699      	mov	r9, r3
 8011178:	e76b      	b.n	8011052 <lv_anim_del+0x8a>
        lv_timer_pause(_lv_anim_tmr);
 801117a:	6838      	ldr	r0, [r7, #0]
 801117c:	f001 fea2 	bl	8012ec4 <lv_timer_pause>
            del = true;
 8011180:	2301      	movs	r3, #1
 8011182:	4699      	mov	r9, r3
 8011184:	e7a4      	b.n	80110d0 <lv_anim_del+0x108>
        lv_timer_pause(_lv_anim_tmr);
 8011186:	6818      	ldr	r0, [r3, #0]
 8011188:	f001 fe9c 	bl	8012ec4 <lv_timer_pause>
}
 801118c:	e7e7      	b.n	801115e <lv_anim_del+0x196>
 801118e:	46c0      	nop			; (mov r8, r8)
 8011190:	2000335c 	.word	0x2000335c
 8011194:	2000334c 	.word	0x2000334c
 8011198:	20003348 	.word	0x20003348

0801119c <lv_anim_start>:
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 801119c:	6841      	ldr	r1, [r0, #4]
{
 801119e:	b570      	push	{r4, r5, r6, lr}
 80111a0:	0005      	movs	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 80111a2:	2900      	cmp	r1, #0
 80111a4:	d002      	beq.n	80111ac <lv_anim_start+0x10>
 80111a6:	6800      	ldr	r0, [r0, #0]
 80111a8:	f7ff ff0e 	bl	8010fc8 <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 80111ac:	4e26      	ldr	r6, [pc, #152]	; (8011248 <lv_anim_start+0xac>)
 80111ae:	0030      	movs	r0, r6
 80111b0:	f000 fe70 	bl	8011e94 <_lv_ll_is_empty>
 80111b4:	2800      	cmp	r0, #0
 80111b6:	d13b      	bne.n	8011230 <lv_anim_start+0x94>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 80111b8:	0030      	movs	r0, r6
 80111ba:	f000 fded 	bl	8011d98 <_lv_ll_ins_head>
 80111be:	1e04      	subs	r4, r0, #0
    LV_ASSERT_MALLOC(new_anim);
 80111c0:	d035      	beq.n	801122e <lv_anim_start+0x92>
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 80111c2:	2240      	movs	r2, #64	; 0x40
 80111c4:	0029      	movs	r1, r5
 80111c6:	f001 f8a5 	bl	8012314 <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 80111ca:	682b      	ldr	r3, [r5, #0]
 80111cc:	42ab      	cmp	r3, r5
 80111ce:	d034      	beq.n	801123a <lv_anim_start+0x9e>
    new_anim->run_round = anim_run_round;
 80111d0:	2101      	movs	r1, #1
 80111d2:	203e      	movs	r0, #62	; 0x3e
 80111d4:	2504      	movs	r5, #4
 80111d6:	4b1d      	ldr	r3, [pc, #116]	; (801124c <lv_anim_start+0xb0>)
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	400b      	ands	r3, r1
 80111dc:	009a      	lsls	r2, r3, #2
 80111de:	5c23      	ldrb	r3, [r4, r0]
 80111e0:	43ab      	bics	r3, r5
 80111e2:	4313      	orrs	r3, r2
 80111e4:	5423      	strb	r3, [r4, r0]
    if(new_anim->early_apply) {
 80111e6:	4219      	tst	r1, r3
 80111e8:	d013      	beq.n	8011212 <lv_anim_start+0x76>
        if(new_anim->get_value_cb) {
 80111ea:	6963      	ldr	r3, [r4, #20]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d008      	beq.n	8011202 <lv_anim_start+0x66>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 80111f0:	0020      	movs	r0, r4
 80111f2:	4798      	blx	r3
            new_anim->start_value += v_ofs;
 80111f4:	69e3      	ldr	r3, [r4, #28]
 80111f6:	181b      	adds	r3, r3, r0
 80111f8:	61e3      	str	r3, [r4, #28]
            new_anim->end_value += v_ofs;
 80111fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111fc:	469c      	mov	ip, r3
 80111fe:	4460      	add	r0, ip
 8011200:	6260      	str	r0, [r4, #36]	; 0x24
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 8011202:	6863      	ldr	r3, [r4, #4]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d004      	beq.n	8011212 <lv_anim_start+0x76>
 8011208:	6820      	ldr	r0, [r4, #0]
 801120a:	2800      	cmp	r0, #0
 801120c:	d001      	beq.n	8011212 <lv_anim_start+0x76>
 801120e:	69e1      	ldr	r1, [r4, #28]
 8011210:	4798      	blx	r3
    anim_list_changed = true;
 8011212:	2201      	movs	r2, #1
 8011214:	4b0e      	ldr	r3, [pc, #56]	; (8011250 <lv_anim_start+0xb4>)
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8011216:	0030      	movs	r0, r6
    anim_list_changed = true;
 8011218:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 801121a:	f000 fe17 	bl	8011e4c <_lv_ll_get_head>
        lv_timer_pause(_lv_anim_tmr);
 801121e:	4b0d      	ldr	r3, [pc, #52]	; (8011254 <lv_anim_start+0xb8>)
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8011220:	2800      	cmp	r0, #0
 8011222:	d00c      	beq.n	801123e <lv_anim_start+0xa2>
        lv_timer_resume(_lv_anim_tmr);
 8011224:	6818      	ldr	r0, [r3, #0]
 8011226:	f001 fe53 	bl	8012ed0 <lv_timer_resume>
}
 801122a:	0020      	movs	r0, r4
 801122c:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MALLOC(new_anim);
 801122e:	e7fe      	b.n	801122e <lv_anim_start+0x92>
        last_timer_run = lv_tick_get();
 8011230:	f7ff fd62 	bl	8010cf8 <lv_tick_get>
 8011234:	4b08      	ldr	r3, [pc, #32]	; (8011258 <lv_anim_start+0xbc>)
 8011236:	6018      	str	r0, [r3, #0]
 8011238:	e7be      	b.n	80111b8 <lv_anim_start+0x1c>
    if(a->var == a) new_anim->var = new_anim;
 801123a:	6024      	str	r4, [r4, #0]
 801123c:	e7c8      	b.n	80111d0 <lv_anim_start+0x34>
        lv_timer_pause(_lv_anim_tmr);
 801123e:	6818      	ldr	r0, [r3, #0]
 8011240:	f001 fe40 	bl	8012ec4 <lv_timer_pause>
}
 8011244:	e7f1      	b.n	801122a <lv_anim_start+0x8e>
 8011246:	46c0      	nop			; (mov r8, r8)
 8011248:	2000335c 	.word	0x2000335c
 801124c:	2000334d 	.word	0x2000334d
 8011250:	2000334c 	.word	0x2000334c
 8011254:	20003348 	.word	0x20003348
 8011258:	20003350 	.word	0x20003350

0801125c <lv_anim_get>:
{
 801125c:	b570      	push	{r4, r5, r6, lr}
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 801125e:	4d11      	ldr	r5, [pc, #68]	; (80112a4 <lv_anim_get+0x48>)
{
 8011260:	0004      	movs	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8011262:	0028      	movs	r0, r5
{
 8011264:	000e      	movs	r6, r1
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8011266:	f000 fdf1 	bl	8011e4c <_lv_ll_get_head>
 801126a:	1e01      	subs	r1, r0, #0
 801126c:	d018      	beq.n	80112a0 <lv_anim_get+0x44>
 801126e:	2e00      	cmp	r6, #0
 8011270:	d105      	bne.n	801127e <lv_anim_get+0x22>
 8011272:	e011      	b.n	8011298 <lv_anim_get+0x3c>
 8011274:	0028      	movs	r0, r5
 8011276:	f000 fdf5 	bl	8011e64 <_lv_ll_get_next>
 801127a:	1e01      	subs	r1, r0, #0
 801127c:	d010      	beq.n	80112a0 <lv_anim_get+0x44>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 801127e:	680b      	ldr	r3, [r1, #0]
 8011280:	429c      	cmp	r4, r3
 8011282:	d1f7      	bne.n	8011274 <lv_anim_get+0x18>
 8011284:	684b      	ldr	r3, [r1, #4]
 8011286:	429e      	cmp	r6, r3
 8011288:	d1f4      	bne.n	8011274 <lv_anim_get+0x18>
}
 801128a:	0008      	movs	r0, r1
 801128c:	bd70      	pop	{r4, r5, r6, pc}
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 801128e:	0028      	movs	r0, r5
 8011290:	f000 fde8 	bl	8011e64 <_lv_ll_get_next>
 8011294:	1e01      	subs	r1, r0, #0
 8011296:	d003      	beq.n	80112a0 <lv_anim_get+0x44>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8011298:	680b      	ldr	r3, [r1, #0]
 801129a:	42a3      	cmp	r3, r4
 801129c:	d1f7      	bne.n	801128e <lv_anim_get+0x32>
 801129e:	e7f4      	b.n	801128a <lv_anim_get+0x2e>
    return NULL;
 80112a0:	2100      	movs	r1, #0
 80112a2:	e7f2      	b.n	801128a <lv_anim_get+0x2e>
 80112a4:	2000335c 	.word	0x2000335c

080112a8 <lv_anim_speed_to_time>:
{
 80112a8:	b570      	push	{r4, r5, r6, lr}
 80112aa:	0005      	movs	r5, r0
    uint32_t d    = LV_ABS(start - end);
 80112ac:	1a8a      	subs	r2, r1, r2
 80112ae:	17d3      	asrs	r3, r2, #31
 80112b0:	18d2      	adds	r2, r2, r3
 80112b2:	405a      	eors	r2, r3
    uint32_t time = (d * 1000) / speed;
 80112b4:	0153      	lsls	r3, r2, #5
 80112b6:	1a9b      	subs	r3, r3, r2
 80112b8:	009c      	lsls	r4, r3, #2
 80112ba:	18a4      	adds	r4, r4, r2
 80112bc:	00e4      	lsls	r4, r4, #3
 80112be:	0001      	movs	r1, r0
 80112c0:	0020      	movs	r0, r4
        time++;
 80112c2:	42ac      	cmp	r4, r5
 80112c4:	41a4      	sbcs	r4, r4
    uint32_t time = (d * 1000) / speed;
 80112c6:	f7ee ff2f 	bl	8000128 <__udivsi3>
        time++;
 80112ca:	4264      	negs	r4, r4
 80112cc:	1900      	adds	r0, r0, r4
}
 80112ce:	bd70      	pop	{r4, r5, r6, pc}

080112d0 <lv_anim_path_ease_out>:
{
 80112d0:	b530      	push	{r4, r5, lr}
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 80112d2:	2580      	movs	r5, #128	; 0x80
{
 80112d4:	b083      	sub	sp, #12
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 80112d6:	00ed      	lsls	r5, r5, #3
 80112d8:	9500      	str	r5, [sp, #0]
{
 80112da:	0004      	movs	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 80112dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80112de:	2300      	movs	r3, #0
 80112e0:	2100      	movs	r1, #0
 80112e2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80112e4:	f000 fe36 	bl	8011f54 <lv_map>
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 80112e8:	22e1      	movs	r2, #225	; 0xe1
 80112ea:	2100      	movs	r1, #0
 80112ec:	4b06      	ldr	r3, [pc, #24]	; (8011308 <lv_anim_path_ease_out+0x38>)
 80112ee:	9500      	str	r5, [sp, #0]
 80112f0:	0092      	lsls	r2, r2, #2
 80112f2:	f000 fe0d 	bl	8011f10 <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 80112f6:	69e3      	ldr	r3, [r4, #28]
 80112f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80112fa:	1ad2      	subs	r2, r2, r3
 80112fc:	4350      	muls	r0, r2
    new_value = new_value >> LV_BEZIER_VAL_SHIFT;
 80112fe:	1280      	asrs	r0, r0, #10
    new_value += a->start_value;
 8011300:	1818      	adds	r0, r3, r0
}
 8011302:	b003      	add	sp, #12
 8011304:	bd30      	pop	{r4, r5, pc}
 8011306:	46c0      	nop			; (mov r8, r8)
 8011308:	000003b6 	.word	0x000003b6

0801130c <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 801130c:	b530      	push	{r4, r5, lr}
 801130e:	ac03      	add	r4, sp, #12
 8011310:	2500      	movs	r5, #0
 8011312:	5f64      	ldrsh	r4, [r4, r5]
    area_p->x1 = x1;
 8011314:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 8011316:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
 8011318:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 801131a:	80c4      	strh	r4, [r0, #6]
}
 801131c:	bd30      	pop	{r4, r5, pc}
 801131e:	46c0      	nop			; (mov r8, r8)

08011320 <lv_area_set_height>:
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
    area_p->y2 = area_p->y1 + h - 1;
 8011320:	1e4b      	subs	r3, r1, #1
 8011322:	8841      	ldrh	r1, [r0, #2]
 8011324:	18c9      	adds	r1, r1, r3
 8011326:	80c1      	strh	r1, [r0, #6]
}
 8011328:	4770      	bx	lr
 801132a:	46c0      	nop			; (mov r8, r8)

0801132c <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 801132c:	0002      	movs	r2, r0
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 801132e:	2304      	movs	r3, #4
 8011330:	5ec0      	ldrsh	r0, [r0, r3]
 8011332:	2300      	movs	r3, #0
 8011334:	5ed1      	ldrsh	r1, [r2, r3]
 8011336:	1a41      	subs	r1, r0, r1
 8011338:	2006      	movs	r0, #6
 801133a:	5e13      	ldrsh	r3, [r2, r0]
 801133c:	2002      	movs	r0, #2
 801133e:	5e10      	ldrsh	r0, [r2, r0]
 8011340:	3101      	adds	r1, #1
 8011342:	1a18      	subs	r0, r3, r0
 8011344:	3001      	adds	r0, #1
 8011346:	4348      	muls	r0, r1

    return size;
}
 8011348:	4770      	bx	lr
 801134a:	46c0      	nop			; (mov r8, r8)

0801134c <lv_area_increase>:

void lv_area_increase(lv_area_t * area, lv_coord_t w_extra, lv_coord_t h_extra)
{
    area->x1 -= w_extra;
 801134c:	8803      	ldrh	r3, [r0, #0]
 801134e:	b289      	uxth	r1, r1
 8011350:	1a5b      	subs	r3, r3, r1
 8011352:	8003      	strh	r3, [r0, #0]
    area->x2 += w_extra;
 8011354:	8883      	ldrh	r3, [r0, #4]
    area->y1 -= h_extra;
 8011356:	b292      	uxth	r2, r2
    area->x2 += w_extra;
 8011358:	18c9      	adds	r1, r1, r3
    area->y1 -= h_extra;
 801135a:	8843      	ldrh	r3, [r0, #2]
    area->x2 += w_extra;
 801135c:	8081      	strh	r1, [r0, #4]
    area->y1 -= h_extra;
 801135e:	1a9b      	subs	r3, r3, r2
 8011360:	8043      	strh	r3, [r0, #2]
    area->y2 += h_extra;
 8011362:	88c3      	ldrh	r3, [r0, #6]
 8011364:	18d2      	adds	r2, r2, r3
 8011366:	80c2      	strh	r2, [r0, #6]
}
 8011368:	4770      	bx	lr
 801136a:	46c0      	nop			; (mov r8, r8)

0801136c <lv_area_move>:

void lv_area_move(lv_area_t * area, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
    area->x1 += x_ofs;
 801136c:	8803      	ldrh	r3, [r0, #0]
 801136e:	b289      	uxth	r1, r1
 8011370:	18cb      	adds	r3, r1, r3
 8011372:	8003      	strh	r3, [r0, #0]
    area->x2 += x_ofs;
 8011374:	8883      	ldrh	r3, [r0, #4]
    area->y1 += y_ofs;
 8011376:	b292      	uxth	r2, r2
    area->x2 += x_ofs;
 8011378:	18c9      	adds	r1, r1, r3
    area->y1 += y_ofs;
 801137a:	8843      	ldrh	r3, [r0, #2]
    area->x2 += x_ofs;
 801137c:	8081      	strh	r1, [r0, #4]
    area->y1 += y_ofs;
 801137e:	18d3      	adds	r3, r2, r3
 8011380:	8043      	strh	r3, [r0, #2]
    area->y2 += y_ofs;
 8011382:	88c3      	ldrh	r3, [r0, #6]
 8011384:	18d2      	adds	r2, r2, r3
 8011386:	80c2      	strh	r2, [r0, #6]
}
 8011388:	4770      	bx	lr
 801138a:	46c0      	nop			; (mov r8, r8)

0801138c <_lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 801138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801138e:	46c6      	mov	lr, r8
    /*Get the smaller area from 'a1_p' and 'a2_p'*/
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8011390:	8813      	ldrh	r3, [r2, #0]
 8011392:	2700      	movs	r7, #0
 8011394:	5fcd      	ldrsh	r5, [r1, r7]
 8011396:	1c1c      	adds	r4, r3, #0
 8011398:	b21b      	sxth	r3, r3
{
 801139a:	b500      	push	{lr}
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 801139c:	880e      	ldrh	r6, [r1, #0]
 801139e:	42ab      	cmp	r3, r5
 80113a0:	da00      	bge.n	80113a4 <_lv_area_intersect+0x18>
 80113a2:	1c34      	adds	r4, r6, #0
 80113a4:	8004      	strh	r4, [r0, #0]
 80113a6:	b223      	sxth	r3, r4
 80113a8:	4698      	mov	r8, r3
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 80113aa:	8853      	ldrh	r3, [r2, #2]
 80113ac:	2502      	movs	r5, #2
 80113ae:	5f4e      	ldrsh	r6, [r1, r5]
 80113b0:	1c1c      	adds	r4, r3, #0
 80113b2:	b21b      	sxth	r3, r3
 80113b4:	884f      	ldrh	r7, [r1, #2]
 80113b6:	42b3      	cmp	r3, r6
 80113b8:	da00      	bge.n	80113bc <_lv_area_intersect+0x30>
 80113ba:	1c3c      	adds	r4, r7, #0
 80113bc:	8044      	strh	r4, [r0, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 80113be:	888b      	ldrh	r3, [r1, #4]
 80113c0:	2504      	movs	r5, #4
 80113c2:	5f4f      	ldrsh	r7, [r1, r5]
 80113c4:	469c      	mov	ip, r3
 80113c6:	8893      	ldrh	r3, [r2, #4]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 80113c8:	b226      	sxth	r6, r4
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 80113ca:	1c1c      	adds	r4, r3, #0
 80113cc:	b21b      	sxth	r3, r3
 80113ce:	42bb      	cmp	r3, r7
 80113d0:	dd00      	ble.n	80113d4 <_lv_area_intersect+0x48>
 80113d2:	4664      	mov	r4, ip
 80113d4:	8084      	strh	r4, [r0, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 80113d6:	88d3      	ldrh	r3, [r2, #6]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 80113d8:	b227      	sxth	r7, r4
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 80113da:	88cc      	ldrh	r4, [r1, #6]
 80113dc:	2506      	movs	r5, #6
 80113de:	5f49      	ldrsh	r1, [r1, r5]
 80113e0:	1c1a      	adds	r2, r3, #0
 80113e2:	b21b      	sxth	r3, r3
 80113e4:	428b      	cmp	r3, r1
 80113e6:	dd00      	ble.n	80113ea <_lv_area_intersect+0x5e>
 80113e8:	1c22      	adds	r2, r4, #0
 80113ea:	80c2      	strh	r2, [r0, #6]
 80113ec:	b213      	sxth	r3, r2

    /*If x1 or y1 greater than x2 or y2 then the areas union is empty*/
    bool union_ok = true;
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
        union_ok = false;
 80113ee:	2000      	movs	r0, #0
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 80113f0:	45b8      	cmp	r8, r7
 80113f2:	dc04      	bgt.n	80113fe <_lv_area_intersect+0x72>
 80113f4:	0ff0      	lsrs	r0, r6, #31
 80113f6:	17da      	asrs	r2, r3, #31
 80113f8:	42b3      	cmp	r3, r6
 80113fa:	4150      	adcs	r0, r2
 80113fc:	b2c0      	uxtb	r0, r0
    }

    return union_ok;
}
 80113fe:	bc80      	pop	{r7}
 8011400:	46b8      	mov	r8, r7
 8011402:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011404 <_lv_area_join>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 8011404:	8813      	ldrh	r3, [r2, #0]
{
 8011406:	b5f0      	push	{r4, r5, r6, r7, lr}
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 8011408:	2700      	movs	r7, #0
 801140a:	5fcd      	ldrsh	r5, [r1, r7]
 801140c:	1c1c      	adds	r4, r3, #0
 801140e:	b21b      	sxth	r3, r3
 8011410:	880e      	ldrh	r6, [r1, #0]
 8011412:	42ab      	cmp	r3, r5
 8011414:	dd00      	ble.n	8011418 <_lv_area_join+0x14>
 8011416:	1c34      	adds	r4, r6, #0
 8011418:	8004      	strh	r4, [r0, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 801141a:	8853      	ldrh	r3, [r2, #2]
 801141c:	2702      	movs	r7, #2
 801141e:	5fcd      	ldrsh	r5, [r1, r7]
 8011420:	1c1c      	adds	r4, r3, #0
 8011422:	b21b      	sxth	r3, r3
 8011424:	884e      	ldrh	r6, [r1, #2]
 8011426:	42ab      	cmp	r3, r5
 8011428:	dd00      	ble.n	801142c <_lv_area_join+0x28>
 801142a:	1c34      	adds	r4, r6, #0
 801142c:	8044      	strh	r4, [r0, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 801142e:	8893      	ldrh	r3, [r2, #4]
 8011430:	2704      	movs	r7, #4
 8011432:	5fcd      	ldrsh	r5, [r1, r7]
 8011434:	1c1c      	adds	r4, r3, #0
 8011436:	b21b      	sxth	r3, r3
 8011438:	888e      	ldrh	r6, [r1, #4]
 801143a:	42ab      	cmp	r3, r5
 801143c:	da00      	bge.n	8011440 <_lv_area_join+0x3c>
 801143e:	1c34      	adds	r4, r6, #0
 8011440:	8084      	strh	r4, [r0, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 8011442:	88d3      	ldrh	r3, [r2, #6]
 8011444:	88cc      	ldrh	r4, [r1, #6]
 8011446:	2506      	movs	r5, #6
 8011448:	5f49      	ldrsh	r1, [r1, r5]
 801144a:	1c1a      	adds	r2, r3, #0
 801144c:	b21b      	sxth	r3, r3
 801144e:	428b      	cmp	r3, r1
 8011450:	da00      	bge.n	8011454 <_lv_area_join+0x50>
 8011452:	1c22      	adds	r2, r4, #0
 8011454:	80c2      	strh	r2, [r0, #6]
}
 8011456:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011458 <_lv_area_is_point_on>:
 * @param p_p pointer to a point
 * @param radius radius of area (e.g. for rounded rectangle)
 * @return false:the point is out of the area
 */
bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius)
{
 8011458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801145a:	464e      	mov	r6, r9
 801145c:	4645      	mov	r5, r8
 801145e:	46de      	mov	lr, fp
 8011460:	4657      	mov	r7, sl
 8011462:	b5e0      	push	{r5, r6, r7, lr}
    /*First check the basic area*/
    bool is_on_rect = false;
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8011464:	2300      	movs	r3, #0
 8011466:	5ecd      	ldrsh	r5, [r1, r3]
 8011468:	2300      	movs	r3, #0
 801146a:	5ec6      	ldrsh	r6, [r0, r3]
{
 801146c:	000c      	movs	r4, r1
 801146e:	b089      	sub	sp, #36	; 0x24
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8011470:	42b5      	cmp	r5, r6
 8011472:	db62      	blt.n	801153a <_lv_area_is_point_on+0xe2>
 8011474:	2104      	movs	r1, #4
 8011476:	5e43      	ldrsh	r3, [r0, r1]
 8011478:	4699      	mov	r9, r3
 801147a:	429d      	cmp	r5, r3
 801147c:	dc5d      	bgt.n	801153a <_lv_area_is_point_on+0xe2>
 801147e:	2302      	movs	r3, #2
 8011480:	5ee7      	ldrsh	r7, [r4, r3]
 8011482:	2102      	movs	r1, #2
 8011484:	5e43      	ldrsh	r3, [r0, r1]
 8011486:	469a      	mov	sl, r3
 8011488:	429f      	cmp	r7, r3
 801148a:	db56      	blt.n	801153a <_lv_area_is_point_on+0xe2>
 801148c:	2306      	movs	r3, #6
 801148e:	5ec1      	ldrsh	r1, [r0, r3]
 8011490:	9100      	str	r1, [sp, #0]
 8011492:	428f      	cmp	r7, r1
 8011494:	dc51      	bgt.n	801153a <_lv_area_is_point_on+0xe2>
        is_on_rect = true;
    }
    if(!is_on_rect)
        return false;
    /*Now handle potential rounded rectangles*/
    if(radius <= 0) {
 8011496:	2a00      	cmp	r2, #0
 8011498:	dc00      	bgt.n	801149c <_lv_area_is_point_on+0x44>
 801149a:	e081      	b.n	80115a0 <_lv_area_is_point_on+0x148>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801149c:	b2b1      	uxth	r1, r6
 801149e:	468b      	mov	fp, r1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80114a0:	4669      	mov	r1, sp
 80114a2:	4650      	mov	r0, sl
 80114a4:	8809      	ldrh	r1, [r1, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80114a6:	464b      	mov	r3, r9
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80114a8:	9102      	str	r1, [sp, #8]
 80114aa:	b281      	uxth	r1, r0
        radius = max_radius;

    /*Check if it's in one of the corners*/
    lv_area_t corner_area;
    /*Top left*/
    corner_area.x1 = a_p->x1;
 80114ac:	a806      	add	r0, sp, #24
 80114ae:	8006      	strh	r6, [r0, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80114b0:	4658      	mov	r0, fp
 80114b2:	b29b      	uxth	r3, r3
 80114b4:	9304      	str	r3, [sp, #16]
 80114b6:	3301      	adds	r3, #1
 80114b8:	1a1b      	subs	r3, r3, r0
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 80114ba:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80114bc:	9101      	str	r1, [sp, #4]
 80114be:	0fd9      	lsrs	r1, r3, #31
 80114c0:	18c9      	adds	r1, r1, r3
 80114c2:	9b02      	ldr	r3, [sp, #8]
 80114c4:	9801      	ldr	r0, [sp, #4]
 80114c6:	3301      	adds	r3, #1
 80114c8:	1a1b      	subs	r3, r3, r0
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 80114ca:	b21b      	sxth	r3, r3
 80114cc:	0fd8      	lsrs	r0, r3, #31
 80114ce:	4684      	mov	ip, r0
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 80114d0:	1049      	asrs	r1, r1, #1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 80114d2:	4463      	add	r3, ip
    lv_coord_t max_radius = LV_MIN(w, h);
 80114d4:	4688      	mov	r8, r1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 80114d6:	1058      	asrs	r0, r3, #1
    lv_coord_t max_radius = LV_MIN(w, h);
 80114d8:	4281      	cmp	r1, r0
 80114da:	dd00      	ble.n	80114de <_lv_area_is_point_on+0x86>
 80114dc:	4680      	mov	r8, r0
    corner_area.x2 = a_p->x1 + radius;
 80114de:	4643      	mov	r3, r8
 80114e0:	b219      	sxth	r1, r3
 80114e2:	4291      	cmp	r1, r2
 80114e4:	dd00      	ble.n	80114e8 <_lv_area_is_point_on+0x90>
 80114e6:	1c13      	adds	r3, r2, #0
 80114e8:	b29b      	uxth	r3, r3
 80114ea:	4698      	mov	r8, r3
 80114ec:	445b      	add	r3, fp
 80114ee:	b29a      	uxth	r2, r3
 80114f0:	a906      	add	r1, sp, #24
 80114f2:	b21b      	sxth	r3, r3
 80114f4:	808b      	strh	r3, [r1, #4]
    corner_area.y1 = a_p->y1;
    corner_area.y2 = a_p->y1 + radius;
 80114f6:	9901      	ldr	r1, [sp, #4]
    corner_area.x2 = a_p->x1 + radius;
 80114f8:	9203      	str	r2, [sp, #12]
    corner_area.y2 = a_p->y1 + radius;
 80114fa:	000a      	movs	r2, r1
 80114fc:	4442      	add	r2, r8
 80114fe:	b210      	sxth	r0, r2
 8011500:	9005      	str	r0, [sp, #20]
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8011502:	429d      	cmp	r5, r3
 8011504:	dc21      	bgt.n	801154a <_lv_area_is_point_on+0xf2>
 8011506:	4287      	cmp	r7, r0
 8011508:	dc1f      	bgt.n	801154a <_lv_area_is_point_on+0xf2>
    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
 801150a:	465a      	mov	r2, fp
    lv_coord_t py = p->y - cy;

    uint32_t r_sqrd = r * r;
    uint32_t dist = (px * px) + (py * py);

    if(dist <= r_sqrd)
 801150c:	2000      	movs	r0, #0
        corner_area.x2 += radius;
 801150e:	9b03      	ldr	r3, [sp, #12]
    lv_coord_t px = p->x - cx;
 8011510:	1aad      	subs	r5, r5, r2
        corner_area.x2 += radius;
 8011512:	4443      	add	r3, r8
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8011514:	b21b      	sxth	r3, r3
 8011516:	1b9b      	subs	r3, r3, r6
 8011518:	0fde      	lsrs	r6, r3, #31
 801151a:	18f6      	adds	r6, r6, r3
 801151c:	1076      	asrs	r6, r6, #1
    lv_coord_t cx = area->x1 + r;
 801151e:	b2b3      	uxth	r3, r6
    lv_coord_t py = p->y - cy;
 8011520:	1a7f      	subs	r7, r7, r1
    lv_coord_t px = p->x - cx;
 8011522:	1aed      	subs	r5, r5, r3
    lv_coord_t py = p->y - cy;
 8011524:	1aff      	subs	r7, r7, r3
    uint32_t dist = (px * px) + (py * py);
 8011526:	b22d      	sxth	r5, r5
 8011528:	b23f      	sxth	r7, r7
 801152a:	436d      	muls	r5, r5
 801152c:	437f      	muls	r7, r7
    uint32_t r_sqrd = r * r;
 801152e:	4376      	muls	r6, r6
    uint32_t dist = (px * px) + (py * py);
 8011530:	19ed      	adds	r5, r5, r7
    if(dist <= r_sqrd)
 8011532:	42ae      	cmp	r6, r5
 8011534:	4140      	adcs	r0, r0
 8011536:	b2c0      	uxtb	r0, r0
 8011538:	e000      	b.n	801153c <_lv_area_is_point_on+0xe4>
        return false;
 801153a:	2000      	movs	r0, #0
}
 801153c:	b009      	add	sp, #36	; 0x24
 801153e:	bcf0      	pop	{r4, r5, r6, r7}
 8011540:	46bb      	mov	fp, r7
 8011542:	46b2      	mov	sl, r6
 8011544:	46a9      	mov	r9, r5
 8011546:	46a0      	mov	r8, r4
 8011548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    corner_area.y1 = a_p->y2 - radius;
 801154a:	4641      	mov	r1, r8
 801154c:	9b02      	ldr	r3, [sp, #8]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801154e:	2200      	movs	r2, #0
    corner_area.y1 = a_p->y2 - radius;
 8011550:	1a5b      	subs	r3, r3, r1
 8011552:	a906      	add	r1, sp, #24
 8011554:	804b      	strh	r3, [r1, #2]
    corner_area.y2 = a_p->y2;
 8011556:	9b00      	ldr	r3, [sp, #0]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8011558:	a806      	add	r0, sp, #24
    corner_area.y2 = a_p->y2;
 801155a:	80cb      	strh	r3, [r1, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801155c:	0021      	movs	r1, r4
 801155e:	f7ff ff7b 	bl	8011458 <_lv_area_is_point_on>
 8011562:	9000      	str	r0, [sp, #0]
 8011564:	2800      	cmp	r0, #0
 8011566:	d01d      	beq.n	80115a4 <_lv_area_is_point_on+0x14c>
    lv_coord_t px = p->x - cx;
 8011568:	4658      	mov	r0, fp
        corner_area.x2 += radius;
 801156a:	9903      	ldr	r1, [sp, #12]
    lv_coord_t py = p->y - cy;
 801156c:	9a02      	ldr	r2, [sp, #8]
        corner_area.x2 += radius;
 801156e:	4441      	add	r1, r8
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8011570:	b20b      	sxth	r3, r1
 8011572:	1b9e      	subs	r6, r3, r6
 8011574:	0ff3      	lsrs	r3, r6, #31
 8011576:	199e      	adds	r6, r3, r6
    lv_coord_t px = p->x - cx;
 8011578:	1a2b      	subs	r3, r5, r0
    lv_coord_t py = p->y - cy;
 801157a:	4640      	mov	r0, r8
 801157c:	1aba      	subs	r2, r7, r2
 801157e:	0047      	lsls	r7, r0, #1
    if(dist <= r_sqrd)
 8011580:	2000      	movs	r0, #0
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8011582:	1076      	asrs	r6, r6, #1
    lv_coord_t cx = area->x1 + r;
 8011584:	b2b1      	uxth	r1, r6
    lv_coord_t py = p->y - cy;
 8011586:	19d2      	adds	r2, r2, r7
    lv_coord_t px = p->x - cx;
 8011588:	1a5b      	subs	r3, r3, r1
    lv_coord_t py = p->y - cy;
 801158a:	1a52      	subs	r2, r2, r1
    uint32_t dist = (px * px) + (py * py);
 801158c:	b21b      	sxth	r3, r3
 801158e:	b212      	sxth	r2, r2
 8011590:	435b      	muls	r3, r3
 8011592:	4352      	muls	r2, r2
    uint32_t r_sqrd = r * r;
 8011594:	4376      	muls	r6, r6
    uint32_t dist = (px * px) + (py * py);
 8011596:	189b      	adds	r3, r3, r2
    if(dist <= r_sqrd)
 8011598:	429e      	cmp	r6, r3
 801159a:	4140      	adcs	r0, r0
 801159c:	b2c0      	uxtb	r0, r0
 801159e:	e7cd      	b.n	801153c <_lv_area_is_point_on+0xe4>
        return true;
 80115a0:	2001      	movs	r0, #1
 80115a2:	e7cb      	b.n	801153c <_lv_area_is_point_on+0xe4>
    corner_area.x1 = a_p->x2 - radius;
 80115a4:	4642      	mov	r2, r8
    corner_area.x2 = a_p->x2;
 80115a6:	4648      	mov	r0, r9
    corner_area.x1 = a_p->x2 - radius;
 80115a8:	9b04      	ldr	r3, [sp, #16]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80115aa:	0021      	movs	r1, r4
    corner_area.x1 = a_p->x2 - radius;
 80115ac:	1a9e      	subs	r6, r3, r2
 80115ae:	b2b6      	uxth	r6, r6
 80115b0:	aa06      	add	r2, sp, #24
    corner_area.x2 = a_p->x2;
 80115b2:	8090      	strh	r0, [r2, #4]
    corner_area.x1 = a_p->x2 - radius;
 80115b4:	8016      	strh	r6, [r2, #0]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80115b6:	a806      	add	r0, sp, #24
 80115b8:	2200      	movs	r2, #0
 80115ba:	f7ff ff4d 	bl	8011458 <_lv_area_is_point_on>
 80115be:	4683      	mov	fp, r0
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d01e      	beq.n	8011602 <_lv_area_is_point_on+0x1aa>
        corner_area.x1 -= radius;
 80115c4:	4642      	mov	r2, r8
 80115c6:	1ab3      	subs	r3, r6, r2
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80115c8:	464a      	mov	r2, r9
 80115ca:	4644      	mov	r4, r8
 80115cc:	b21b      	sxth	r3, r3
 80115ce:	1ad3      	subs	r3, r2, r3
 80115d0:	0fda      	lsrs	r2, r3, #31
 80115d2:	18d2      	adds	r2, r2, r3
    lv_coord_t px = p->x - cx;
 80115d4:	9904      	ldr	r1, [sp, #16]
 80115d6:	0063      	lsls	r3, r4, #1
    lv_coord_t py = p->y - cy;
 80115d8:	9c02      	ldr	r4, [sp, #8]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 80115da:	1052      	asrs	r2, r2, #1
    lv_coord_t cx = area->x1 + r;
 80115dc:	b29b      	uxth	r3, r3
    lv_coord_t px = p->x - cx;
 80115de:	1a69      	subs	r1, r5, r1
    lv_coord_t py = p->y - cy;
 80115e0:	1b3f      	subs	r7, r7, r4
    lv_coord_t cx = area->x1 + r;
 80115e2:	b290      	uxth	r0, r2
    lv_coord_t px = p->x - cx;
 80115e4:	1859      	adds	r1, r3, r1
    lv_coord_t py = p->y - cy;
 80115e6:	19db      	adds	r3, r3, r7
    lv_coord_t px = p->x - cx;
 80115e8:	1a09      	subs	r1, r1, r0
    lv_coord_t py = p->y - cy;
 80115ea:	1a1b      	subs	r3, r3, r0
    uint32_t dist = (px * px) + (py * py);
 80115ec:	b209      	sxth	r1, r1
 80115ee:	b21b      	sxth	r3, r3
 80115f0:	4349      	muls	r1, r1
 80115f2:	435b      	muls	r3, r3
    uint32_t r_sqrd = r * r;
 80115f4:	4352      	muls	r2, r2
    if(dist <= r_sqrd)
 80115f6:	9800      	ldr	r0, [sp, #0]
    uint32_t dist = (px * px) + (py * py);
 80115f8:	18cb      	adds	r3, r1, r3
    if(dist <= r_sqrd)
 80115fa:	429a      	cmp	r2, r3
 80115fc:	4140      	adcs	r0, r0
 80115fe:	b2c0      	uxtb	r0, r0
 8011600:	e79c      	b.n	801153c <_lv_area_is_point_on+0xe4>
    corner_area.y1 = a_p->y1;
 8011602:	4652      	mov	r2, sl
 8011604:	ab06      	add	r3, sp, #24
 8011606:	805a      	strh	r2, [r3, #2]
    corner_area.y2 = a_p->y1 + radius;
 8011608:	9a05      	ldr	r2, [sp, #20]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801160a:	0021      	movs	r1, r4
    corner_area.y2 = a_p->y1 + radius;
 801160c:	80da      	strh	r2, [r3, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 801160e:	0018      	movs	r0, r3
 8011610:	2200      	movs	r2, #0
 8011612:	f7ff ff21 	bl	8011458 <_lv_area_is_point_on>
 8011616:	2800      	cmp	r0, #0
 8011618:	d0c2      	beq.n	80115a0 <_lv_area_is_point_on+0x148>
        corner_area.x1 -= radius;
 801161a:	4643      	mov	r3, r8
    lv_coord_t r = (area->x2 - area->x1) / 2;
 801161c:	464a      	mov	r2, r9
        corner_area.x1 -= radius;
 801161e:	1af3      	subs	r3, r6, r3
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8011620:	b21b      	sxth	r3, r3
 8011622:	1ad3      	subs	r3, r2, r3
 8011624:	0fda      	lsrs	r2, r3, #31
 8011626:	18d3      	adds	r3, r2, r3
    lv_coord_t px = p->x - cx;
 8011628:	4642      	mov	r2, r8
    if(dist <= r_sqrd)
 801162a:	465e      	mov	r6, fp
    lv_coord_t px = p->x - cx;
 801162c:	0051      	lsls	r1, r2, #1
 801162e:	9a04      	ldr	r2, [sp, #16]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8011630:	105b      	asrs	r3, r3, #1
    lv_coord_t px = p->x - cx;
 8011632:	1aad      	subs	r5, r5, r2
    lv_coord_t py = p->y - cy;
 8011634:	9a01      	ldr	r2, [sp, #4]
    lv_coord_t cx = area->x1 + r;
 8011636:	b298      	uxth	r0, r3
    lv_coord_t px = p->x - cx;
 8011638:	1949      	adds	r1, r1, r5
    lv_coord_t py = p->y - cy;
 801163a:	1aba      	subs	r2, r7, r2
    lv_coord_t px = p->x - cx;
 801163c:	1a09      	subs	r1, r1, r0
    lv_coord_t py = p->y - cy;
 801163e:	1a12      	subs	r2, r2, r0
    uint32_t dist = (px * px) + (py * py);
 8011640:	b209      	sxth	r1, r1
 8011642:	b212      	sxth	r2, r2
 8011644:	4349      	muls	r1, r1
 8011646:	4352      	muls	r2, r2
    uint32_t r_sqrd = r * r;
 8011648:	435b      	muls	r3, r3
    uint32_t dist = (px * px) + (py * py);
 801164a:	188a      	adds	r2, r1, r2
    if(dist <= r_sqrd)
 801164c:	4293      	cmp	r3, r2
 801164e:	4176      	adcs	r6, r6
 8011650:	b2f0      	uxtb	r0, r6
 8011652:	e773      	b.n	801153c <_lv_area_is_point_on+0xe4>

08011654 <_lv_area_is_on>:
{
 8011654:	b510      	push	{r4, lr}
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8011656:	2300      	movs	r3, #0
 8011658:	5ec2      	ldrsh	r2, [r0, r3]
 801165a:	2404      	movs	r4, #4
 801165c:	5f0b      	ldrsh	r3, [r1, r4]
 801165e:	429a      	cmp	r2, r3
 8011660:	dc15      	bgt.n	801168e <_lv_area_is_on+0x3a>
 8011662:	2304      	movs	r3, #4
 8011664:	5ec2      	ldrsh	r2, [r0, r3]
 8011666:	2400      	movs	r4, #0
 8011668:	5f0b      	ldrsh	r3, [r1, r4]
 801166a:	429a      	cmp	r2, r3
 801166c:	db0f      	blt.n	801168e <_lv_area_is_on+0x3a>
 801166e:	2302      	movs	r3, #2
 8011670:	5ec2      	ldrsh	r2, [r0, r3]
 8011672:	2406      	movs	r4, #6
 8011674:	5f0b      	ldrsh	r3, [r1, r4]
 8011676:	429a      	cmp	r2, r3
 8011678:	dc09      	bgt.n	801168e <_lv_area_is_on+0x3a>
 801167a:	2306      	movs	r3, #6
 801167c:	5ec2      	ldrsh	r2, [r0, r3]
 801167e:	2302      	movs	r3, #2
 8011680:	5ecb      	ldrsh	r3, [r1, r3]
 8011682:	17d0      	asrs	r0, r2, #31
 8011684:	0fd9      	lsrs	r1, r3, #31
 8011686:	429a      	cmp	r2, r3
 8011688:	4148      	adcs	r0, r1
 801168a:	b2c0      	uxtb	r0, r0
 801168c:	e000      	b.n	8011690 <_lv_area_is_on+0x3c>
        return false;
 801168e:	2000      	movs	r0, #0
}
 8011690:	bd10      	pop	{r4, pc}
 8011692:	46c0      	nop			; (mov r8, r8)

08011694 <_lv_area_is_in>:
{
 8011694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011696:	46ce      	mov	lr, r9
 8011698:	4647      	mov	r7, r8
 801169a:	b580      	push	{r7, lr}
 801169c:	0015      	movs	r5, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 801169e:	2300      	movs	r3, #0
 80116a0:	5ec6      	ldrsh	r6, [r0, r3]
 80116a2:	2200      	movs	r2, #0
 80116a4:	5e8b      	ldrsh	r3, [r1, r2]
{
 80116a6:	000c      	movs	r4, r1
 80116a8:	b083      	sub	sp, #12
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80116aa:	42b3      	cmp	r3, r6
 80116ac:	dc20      	bgt.n	80116f0 <_lv_area_is_in+0x5c>
 80116ae:	2202      	movs	r2, #2
 80116b0:	5e83      	ldrsh	r3, [r0, r2]
 80116b2:	2102      	movs	r1, #2
 80116b4:	5e62      	ldrsh	r2, [r4, r1]
 80116b6:	429a      	cmp	r2, r3
 80116b8:	dc1a      	bgt.n	80116f0 <_lv_area_is_in+0x5c>
 80116ba:	2104      	movs	r1, #4
 80116bc:	5e42      	ldrsh	r2, [r0, r1]
 80116be:	4690      	mov	r8, r2
 80116c0:	2104      	movs	r1, #4
 80116c2:	5e62      	ldrsh	r2, [r4, r1]
 80116c4:	4542      	cmp	r2, r8
 80116c6:	db13      	blt.n	80116f0 <_lv_area_is_in+0x5c>
       ain_p->y2 <= aholder_p->y2) {
 80116c8:	2106      	movs	r1, #6
 80116ca:	5e42      	ldrsh	r2, [r0, r1]
 80116cc:	4691      	mov	r9, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 80116ce:	2106      	movs	r1, #6
 80116d0:	5e62      	ldrsh	r2, [r4, r1]
 80116d2:	454a      	cmp	r2, r9
 80116d4:	db0c      	blt.n	80116f0 <_lv_area_is_in+0x5c>
    if(radius == 0) return true;
 80116d6:	2001      	movs	r0, #1
 80116d8:	2d00      	cmp	r5, #0
 80116da:	d00a      	beq.n	80116f2 <_lv_area_is_in+0x5e>
    p.x = ain_p->x1;
 80116dc:	af01      	add	r7, sp, #4
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80116de:	002a      	movs	r2, r5
 80116e0:	0039      	movs	r1, r7
 80116e2:	0020      	movs	r0, r4
    p.x = ain_p->x1;
 80116e4:	803e      	strh	r6, [r7, #0]
    p.y = ain_p->y1;
 80116e6:	807b      	strh	r3, [r7, #2]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80116e8:	f7ff feb6 	bl	8011458 <_lv_area_is_point_on>
 80116ec:	2800      	cmp	r0, #0
 80116ee:	d105      	bne.n	80116fc <_lv_area_is_in+0x68>
    if(!is_in) return false;
 80116f0:	2000      	movs	r0, #0
}
 80116f2:	b003      	add	sp, #12
 80116f4:	bcc0      	pop	{r6, r7}
 80116f6:	46b9      	mov	r9, r7
 80116f8:	46b0      	mov	r8, r6
 80116fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p.x = ain_p->x2;
 80116fc:	4643      	mov	r3, r8
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80116fe:	002a      	movs	r2, r5
 8011700:	0039      	movs	r1, r7
 8011702:	0020      	movs	r0, r4
    p.x = ain_p->x2;
 8011704:	803b      	strh	r3, [r7, #0]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8011706:	f7ff fea7 	bl	8011458 <_lv_area_is_point_on>
 801170a:	2800      	cmp	r0, #0
 801170c:	d0f0      	beq.n	80116f0 <_lv_area_is_in+0x5c>
    p.y = ain_p->y2;
 801170e:	464b      	mov	r3, r9
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8011710:	002a      	movs	r2, r5
 8011712:	0039      	movs	r1, r7
 8011714:	0020      	movs	r0, r4
    p.x = ain_p->x1;
 8011716:	803e      	strh	r6, [r7, #0]
    p.y = ain_p->y2;
 8011718:	807b      	strh	r3, [r7, #2]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801171a:	f7ff fe9d 	bl	8011458 <_lv_area_is_point_on>
 801171e:	2800      	cmp	r0, #0
 8011720:	d0e6      	beq.n	80116f0 <_lv_area_is_in+0x5c>
    p.x = ain_p->x2;
 8011722:	4643      	mov	r3, r8
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8011724:	002a      	movs	r2, r5
 8011726:	0039      	movs	r1, r7
 8011728:	0020      	movs	r0, r4
    p.x = ain_p->x2;
 801172a:	803b      	strh	r3, [r7, #0]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 801172c:	f7ff fe94 	bl	8011458 <_lv_area_is_point_on>
 8011730:	e7df      	b.n	80116f2 <_lv_area_is_in+0x5e>
 8011732:	46c0      	nop			; (mov r8, r8)

08011734 <lv_point_transform>:
{
 8011734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011736:	4645      	mov	r5, r8
 8011738:	4657      	mov	r7, sl
 801173a:	46de      	mov	lr, fp
 801173c:	464e      	mov	r6, r9
 801173e:	b5e0      	push	{r5, r6, r7, lr}
 8011740:	0004      	movs	r4, r0
 8011742:	000f      	movs	r7, r1
 8011744:	4690      	mov	r8, r2
 8011746:	001d      	movs	r5, r3
 8011748:	b085      	sub	sp, #20
    if(angle == 0 && zoom == 256) {
 801174a:	2900      	cmp	r1, #0
 801174c:	d120      	bne.n	8011790 <lv_point_transform+0x5c>
 801174e:	2380      	movs	r3, #128	; 0x80
 8011750:	005b      	lsls	r3, r3, #1
 8011752:	429a      	cmp	r2, r3
 8011754:	d015      	beq.n	8011782 <lv_point_transform+0x4e>
    p->x -= pivot->x;
 8011756:	882a      	ldrh	r2, [r5, #0]
 8011758:	8803      	ldrh	r3, [r0, #0]
 801175a:	1a9b      	subs	r3, r3, r2
 801175c:	b21b      	sxth	r3, r3
 801175e:	8003      	strh	r3, [r0, #0]
    p->y -= pivot->y;
 8011760:	8869      	ldrh	r1, [r5, #2]
 8011762:	8842      	ldrh	r2, [r0, #2]
 8011764:	1a52      	subs	r2, r2, r1
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 8011766:	4641      	mov	r1, r8
 8011768:	434b      	muls	r3, r1
    p->y -= pivot->y;
 801176a:	b212      	sxth	r2, r2
 801176c:	8042      	strh	r2, [r0, #2]
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 801176e:	8829      	ldrh	r1, [r5, #0]
 8011770:	121b      	asrs	r3, r3, #8
 8011772:	185b      	adds	r3, r3, r1
 8011774:	8003      	strh	r3, [r0, #0]
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 8011776:	4643      	mov	r3, r8
 8011778:	435a      	muls	r2, r3
 801177a:	886b      	ldrh	r3, [r5, #2]
 801177c:	1212      	asrs	r2, r2, #8
 801177e:	18d2      	adds	r2, r2, r3
 8011780:	8042      	strh	r2, [r0, #2]
}
 8011782:	b005      	add	sp, #20
 8011784:	bcf0      	pop	{r4, r5, r6, r7}
 8011786:	46bb      	mov	fp, r7
 8011788:	46b2      	mov	sl, r6
 801178a:	46a9      	mov	r9, r5
 801178c:	46a0      	mov	r8, r4
 801178e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p->x -= pivot->x;
 8011790:	881b      	ldrh	r3, [r3, #0]
 8011792:	8800      	ldrh	r0, [r0, #0]
 8011794:	1ac0      	subs	r0, r0, r3
 8011796:	b200      	sxth	r0, r0
 8011798:	8020      	strh	r0, [r4, #0]
    p->y -= pivot->y;
 801179a:	886a      	ldrh	r2, [r5, #2]
 801179c:	8863      	ldrh	r3, [r4, #2]
 801179e:	1a9b      	subs	r3, r3, r2
    if(angle_prev != angle) {
 80117a0:	4a47      	ldr	r2, [pc, #284]	; (80118c0 <lv_point_transform+0x18c>)
    p->y -= pivot->y;
 80117a2:	b21b      	sxth	r3, r3
    if(angle_prev != angle) {
 80117a4:	4692      	mov	sl, r2
 80117a6:	6812      	ldr	r2, [r2, #0]
    p->y -= pivot->y;
 80117a8:	8063      	strh	r3, [r4, #2]
    if(angle_prev != angle) {
 80117aa:	428a      	cmp	r2, r1
 80117ac:	d066      	beq.n	801187c <lv_point_transform+0x148>
        if(angle_limited > 3600) angle_limited -= 3600;
 80117ae:	23e1      	movs	r3, #225	; 0xe1
 80117b0:	011b      	lsls	r3, r3, #4
 80117b2:	429f      	cmp	r7, r3
 80117b4:	dd00      	ble.n	80117b8 <lv_point_transform+0x84>
 80117b6:	e080      	b.n	80118ba <lv_point_transform+0x186>
        if(angle_limited < 0) angle_limited += 3600;
 80117b8:	1e3e      	subs	r6, r7, #0
 80117ba:	da02      	bge.n	80117c2 <lv_point_transform+0x8e>
 80117bc:	23e1      	movs	r3, #225	; 0xe1
 80117be:	011b      	lsls	r3, r3, #4
 80117c0:	18fe      	adds	r6, r7, r3
        int32_t angle_low = angle_limited / 10;
 80117c2:	210a      	movs	r1, #10
 80117c4:	0030      	movs	r0, r6
 80117c6:	f7ee fd39 	bl	800023c <__divsi3>
        int32_t angle_high = angle_low + 1;
 80117ca:	2301      	movs	r3, #1
        int32_t angle_low = angle_limited / 10;
 80117cc:	4681      	mov	r9, r0
        int32_t angle_high = angle_low + 1;
 80117ce:	444b      	add	r3, r9
 80117d0:	469b      	mov	fp, r3
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 80117d2:	0003      	movs	r3, r0
 80117d4:	0740      	lsls	r0, r0, #29
 80117d6:	1ac0      	subs	r0, r0, r3
 80117d8:	0080      	lsls	r0, r0, #2
 80117da:	1ac0      	subs	r0, r0, r3
 80117dc:	0040      	lsls	r0, r0, #1
 80117de:	1986      	adds	r6, r0, r6
        int32_t s1 = lv_trigo_sin(angle_low);
 80117e0:	b218      	sxth	r0, r3
 80117e2:	f000 fb65 	bl	8011eb0 <lv_trigo_sin>
        int32_t s2 = lv_trigo_sin(angle_high);
 80117e6:	465a      	mov	r2, fp
        int32_t s1 = lv_trigo_sin(angle_low);
 80117e8:	9001      	str	r0, [sp, #4]
        int32_t s2 = lv_trigo_sin(angle_high);
 80117ea:	b210      	sxth	r0, r2
 80117ec:	f000 fb60 	bl	8011eb0 <lv_trigo_sin>
        int32_t c1 = lv_trigo_sin(angle_low + 90);
 80117f0:	464b      	mov	r3, r9
 80117f2:	335a      	adds	r3, #90	; 0x5a
        int32_t s2 = lv_trigo_sin(angle_high);
 80117f4:	4683      	mov	fp, r0
        int32_t c1 = lv_trigo_sin(angle_low + 90);
 80117f6:	b218      	sxth	r0, r3
 80117f8:	f000 fb5a 	bl	8011eb0 <lv_trigo_sin>
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 80117fc:	464b      	mov	r3, r9
 80117fe:	335b      	adds	r3, #91	; 0x5b
        int32_t c1 = lv_trigo_sin(angle_low + 90);
 8011800:	9002      	str	r0, [sp, #8]
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 8011802:	b218      	sxth	r0, r3
 8011804:	f000 fb54 	bl	8011eb0 <lv_trigo_sin>
 8011808:	9003      	str	r0, [sp, #12]
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 801180a:	200a      	movs	r0, #10
 801180c:	9b01      	ldr	r3, [sp, #4]
 801180e:	1b82      	subs	r2, r0, r6
 8011810:	4353      	muls	r3, r2
 8011812:	0018      	movs	r0, r3
 8011814:	465b      	mov	r3, fp
 8011816:	4373      	muls	r3, r6
 8011818:	210a      	movs	r1, #10
 801181a:	18c0      	adds	r0, r0, r3
 801181c:	4691      	mov	r9, r2
 801181e:	f7ee fd0d 	bl	800023c <__divsi3>
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8011822:	4b28      	ldr	r3, [pc, #160]	; (80118c4 <lv_point_transform+0x190>)
 8011824:	1142      	asrs	r2, r0, #5
 8011826:	601a      	str	r2, [r3, #0]
 8011828:	4693      	mov	fp, r2
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 801182a:	464a      	mov	r2, r9
 801182c:	9b02      	ldr	r3, [sp, #8]
 801182e:	210a      	movs	r1, #10
 8011830:	4353      	muls	r3, r2
 8011832:	0018      	movs	r0, r3
 8011834:	9b03      	ldr	r3, [sp, #12]
 8011836:	435e      	muls	r6, r3
 8011838:	1980      	adds	r0, r0, r6
 801183a:	f7ee fcff 	bl	800023c <__divsi3>
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 801183e:	4b22      	ldr	r3, [pc, #136]	; (80118c8 <lv_point_transform+0x194>)
 8011840:	1142      	asrs	r2, r0, #5
 8011842:	601a      	str	r2, [r3, #0]
        angle_prev = angle;
 8011844:	4653      	mov	r3, sl
 8011846:	601f      	str	r7, [r3, #0]
    int32_t x = p->x;
 8011848:	2300      	movs	r3, #0
 801184a:	5ee0      	ldrsh	r0, [r4, r3]
    int32_t y = p->y;
 801184c:	2102      	movs	r1, #2
 801184e:	5e63      	ldrsh	r3, [r4, r1]
    if(zoom == 256) {
 8011850:	2180      	movs	r1, #128	; 0x80
 8011852:	0049      	lsls	r1, r1, #1
 8011854:	4588      	cmp	r8, r1
 8011856:	d11a      	bne.n	801188e <lv_point_transform+0x15a>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8011858:	0011      	movs	r1, r2
 801185a:	465e      	mov	r6, fp
 801185c:	4341      	muls	r1, r0
 801185e:	435e      	muls	r6, r3
 8011860:	1b89      	subs	r1, r1, r6
 8011862:	882e      	ldrh	r6, [r5, #0]
 8011864:	1289      	asrs	r1, r1, #10
 8011866:	1989      	adds	r1, r1, r6
 8011868:	8021      	strh	r1, [r4, #0]
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 801186a:	4659      	mov	r1, fp
 801186c:	435a      	muls	r2, r3
 801186e:	4341      	muls	r1, r0
 8011870:	886b      	ldrh	r3, [r5, #2]
 8011872:	188a      	adds	r2, r1, r2
 8011874:	1292      	asrs	r2, r2, #10
 8011876:	18d2      	adds	r2, r2, r3
 8011878:	8062      	strh	r2, [r4, #2]
 801187a:	e782      	b.n	8011782 <lv_point_transform+0x4e>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 801187c:	4911      	ldr	r1, [pc, #68]	; (80118c4 <lv_point_transform+0x190>)
 801187e:	4a12      	ldr	r2, [pc, #72]	; (80118c8 <lv_point_transform+0x194>)
 8011880:	6809      	ldr	r1, [r1, #0]
 8011882:	6812      	ldr	r2, [r2, #0]
 8011884:	468b      	mov	fp, r1
    if(zoom == 256) {
 8011886:	2180      	movs	r1, #128	; 0x80
 8011888:	0049      	lsls	r1, r1, #1
 801188a:	4588      	cmp	r8, r1
 801188c:	d0e4      	beq.n	8011858 <lv_point_transform+0x124>
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 801188e:	0011      	movs	r1, r2
 8011890:	465e      	mov	r6, fp
 8011892:	4341      	muls	r1, r0
 8011894:	435e      	muls	r6, r3
 8011896:	1b89      	subs	r1, r1, r6
 8011898:	4646      	mov	r6, r8
 801189a:	4371      	muls	r1, r6
 801189c:	882e      	ldrh	r6, [r5, #0]
 801189e:	1489      	asrs	r1, r1, #18
 80118a0:	1989      	adds	r1, r1, r6
 80118a2:	8021      	strh	r1, [r4, #0]
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 80118a4:	4659      	mov	r1, fp
 80118a6:	435a      	muls	r2, r3
 80118a8:	4643      	mov	r3, r8
 80118aa:	4341      	muls	r1, r0
 80118ac:	188a      	adds	r2, r1, r2
 80118ae:	435a      	muls	r2, r3
 80118b0:	8868      	ldrh	r0, [r5, #2]
 80118b2:	1492      	asrs	r2, r2, #18
 80118b4:	1812      	adds	r2, r2, r0
 80118b6:	8062      	strh	r2, [r4, #2]
 80118b8:	e763      	b.n	8011782 <lv_point_transform+0x4e>
        if(angle_limited > 3600) angle_limited -= 3600;
 80118ba:	4b04      	ldr	r3, [pc, #16]	; (80118cc <lv_point_transform+0x198>)
 80118bc:	18fe      	adds	r6, r7, r3
        if(angle_limited < 0) angle_limited += 3600;
 80118be:	e780      	b.n	80117c2 <lv_point_transform+0x8e>
 80118c0:	20000008 	.word	0x20000008
 80118c4:	20003358 	.word	0x20003358
 80118c8:	20003354 	.word	0x20003354
 80118cc:	fffff1f0 	.word	0xfffff1f0

080118d0 <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
 80118d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118d2:	b28c      	uxth	r4, r1
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t)buf;
    if(buf_int & 0x3) {
 80118d4:	0783      	lsls	r3, r0, #30
 80118d6:	d002      	beq.n	80118de <lv_color_fill+0xe>
        *buf = color;
 80118d8:	8001      	strh	r1, [r0, #0]
        buf++;
        px_num--;
 80118da:	3a01      	subs	r2, #1
        buf++;
 80118dc:	3002      	adds	r0, #2
    }

    uint32_t c32 = (uint32_t)color.full + ((uint32_t)color.full << 16);
 80118de:	0423      	lsls	r3, r4, #16
 80118e0:	191b      	adds	r3, r3, r4
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
 80118e2:	2a10      	cmp	r2, #16
 80118e4:	d95c      	bls.n	80119a0 <lv_color_fill+0xd0>
 80118e6:	0016      	movs	r6, r2
 80118e8:	3e11      	subs	r6, #17
 80118ea:	0744      	lsls	r4, r0, #29
 80118ec:	d148      	bne.n	8011980 <lv_color_fill+0xb0>
 80118ee:	2e2f      	cmp	r6, #47	; 0x2f
 80118f0:	d946      	bls.n	8011980 <lv_color_fill+0xb0>
 80118f2:	0004      	movs	r4, r0
 80118f4:	2500      	movs	r5, #0
 80118f6:	0936      	lsrs	r6, r6, #4
 80118f8:	1c77      	adds	r7, r6, #1
        buf32++;
        *buf32 = c32;
        buf32++;
        *buf32 = c32;
        buf32++;
        *buf32 = c32;
 80118fa:	3501      	adds	r5, #1
        *buf32 = c32;
 80118fc:	6023      	str	r3, [r4, #0]
 80118fe:	6063      	str	r3, [r4, #4]
 8011900:	60a3      	str	r3, [r4, #8]
 8011902:	60e3      	str	r3, [r4, #12]
 8011904:	6123      	str	r3, [r4, #16]
 8011906:	6163      	str	r3, [r4, #20]
 8011908:	61a3      	str	r3, [r4, #24]
 801190a:	61e3      	str	r3, [r4, #28]
    while(px_num > 16) {
 801190c:	3420      	adds	r4, #32
 801190e:	42af      	cmp	r7, r5
 8011910:	d8f3      	bhi.n	80118fa <lv_color_fill+0x2a>
        buf32++;
 8011912:	1c73      	adds	r3, r6, #1
 8011914:	015b      	lsls	r3, r3, #5
 8011916:	3a10      	subs	r2, #16

        px_num -= 16;
 8011918:	0136      	lsls	r6, r6, #4
        buf32++;
 801191a:	18c0      	adds	r0, r0, r3
        px_num -= 16;
 801191c:	1b92      	subs	r2, r2, r6
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
        *buf = color;
 801191e:	8001      	strh	r1, [r0, #0]
    while(px_num) {
 8011920:	2a01      	cmp	r2, #1
 8011922:	d02c      	beq.n	801197e <lv_color_fill+0xae>
        *buf = color;
 8011924:	8041      	strh	r1, [r0, #2]
    while(px_num) {
 8011926:	2a02      	cmp	r2, #2
 8011928:	d029      	beq.n	801197e <lv_color_fill+0xae>
        *buf = color;
 801192a:	8081      	strh	r1, [r0, #4]
    while(px_num) {
 801192c:	2a03      	cmp	r2, #3
 801192e:	d026      	beq.n	801197e <lv_color_fill+0xae>
        *buf = color;
 8011930:	80c1      	strh	r1, [r0, #6]
    while(px_num) {
 8011932:	2a04      	cmp	r2, #4
 8011934:	d023      	beq.n	801197e <lv_color_fill+0xae>
        *buf = color;
 8011936:	8101      	strh	r1, [r0, #8]
    while(px_num) {
 8011938:	2a05      	cmp	r2, #5
 801193a:	d020      	beq.n	801197e <lv_color_fill+0xae>
        *buf = color;
 801193c:	8141      	strh	r1, [r0, #10]
    while(px_num) {
 801193e:	2a06      	cmp	r2, #6
 8011940:	d01d      	beq.n	801197e <lv_color_fill+0xae>
        *buf = color;
 8011942:	8181      	strh	r1, [r0, #12]
    while(px_num) {
 8011944:	2a07      	cmp	r2, #7
 8011946:	d01a      	beq.n	801197e <lv_color_fill+0xae>
        *buf = color;
 8011948:	81c1      	strh	r1, [r0, #14]
    while(px_num) {
 801194a:	2a08      	cmp	r2, #8
 801194c:	d017      	beq.n	801197e <lv_color_fill+0xae>
        *buf = color;
 801194e:	8201      	strh	r1, [r0, #16]
    while(px_num) {
 8011950:	2a09      	cmp	r2, #9
 8011952:	d014      	beq.n	801197e <lv_color_fill+0xae>
        *buf = color;
 8011954:	8241      	strh	r1, [r0, #18]
    while(px_num) {
 8011956:	2a0a      	cmp	r2, #10
 8011958:	d011      	beq.n	801197e <lv_color_fill+0xae>
        *buf = color;
 801195a:	8281      	strh	r1, [r0, #20]
    while(px_num) {
 801195c:	2a0b      	cmp	r2, #11
 801195e:	d00e      	beq.n	801197e <lv_color_fill+0xae>
        *buf = color;
 8011960:	82c1      	strh	r1, [r0, #22]
    while(px_num) {
 8011962:	2a0c      	cmp	r2, #12
 8011964:	d00b      	beq.n	801197e <lv_color_fill+0xae>
        *buf = color;
 8011966:	8301      	strh	r1, [r0, #24]
    while(px_num) {
 8011968:	2a0d      	cmp	r2, #13
 801196a:	d008      	beq.n	801197e <lv_color_fill+0xae>
        buf++;
        px_num--;
 801196c:	0013      	movs	r3, r2
        *buf = color;
 801196e:	8341      	strh	r1, [r0, #26]
        px_num--;
 8011970:	3b0e      	subs	r3, #14
    while(px_num) {
 8011972:	2a0e      	cmp	r2, #14
 8011974:	d003      	beq.n	801197e <lv_color_fill+0xae>
        *buf = color;
 8011976:	8381      	strh	r1, [r0, #28]
    while(px_num) {
 8011978:	2b01      	cmp	r3, #1
 801197a:	d000      	beq.n	801197e <lv_color_fill+0xae>
        *buf = color;
 801197c:	83c1      	strh	r1, [r0, #30]
        *buf = color;
        buf++;
        px_num--;
    }
#endif
}
 801197e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t * buf32 = (uint32_t *)buf;
 8011980:	0004      	movs	r4, r0
    while(px_num > 16) {
 8011982:	0015      	movs	r5, r2
        px_num -= 16;
 8011984:	3d10      	subs	r5, #16
        *buf32 = c32;
 8011986:	6023      	str	r3, [r4, #0]
        *buf32 = c32;
 8011988:	6063      	str	r3, [r4, #4]
        *buf32 = c32;
 801198a:	60a3      	str	r3, [r4, #8]
        *buf32 = c32;
 801198c:	60e3      	str	r3, [r4, #12]
        *buf32 = c32;
 801198e:	6123      	str	r3, [r4, #16]
        *buf32 = c32;
 8011990:	6163      	str	r3, [r4, #20]
        *buf32 = c32;
 8011992:	61a3      	str	r3, [r4, #24]
        *buf32 = c32;
 8011994:	61e3      	str	r3, [r4, #28]
        buf32++;
 8011996:	3420      	adds	r4, #32
    while(px_num > 16) {
 8011998:	2d10      	cmp	r5, #16
 801199a:	d8f3      	bhi.n	8011984 <lv_color_fill+0xb4>
 801199c:	0936      	lsrs	r6, r6, #4
 801199e:	e7b8      	b.n	8011912 <lv_color_fill+0x42>
    while(px_num) {
 80119a0:	2a00      	cmp	r2, #0
 80119a2:	d0ec      	beq.n	801197e <lv_color_fill+0xae>
 80119a4:	e7bb      	b.n	801191e <lv_color_fill+0x4e>
 80119a6:	46c0      	nop			; (mov r8, r8)

080119a8 <lv_palette_main>:
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 80119a8:	2812      	cmp	r0, #18
 80119aa:	d803      	bhi.n	80119b4 <lv_palette_main+0xc>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    return colors[p];
 80119ac:	4b02      	ldr	r3, [pc, #8]	; (80119b8 <lv_palette_main+0x10>)
 80119ae:	0040      	lsls	r0, r0, #1
 80119b0:	5a18      	ldrh	r0, [r3, r0]

}
 80119b2:	4770      	bx	lr
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80119b4:	2000      	movs	r0, #0
        return lv_color_black();
 80119b6:	e7fc      	b.n	80119b2 <lv_palette_main+0xa>
 80119b8:	0801bb88 	.word	0x0801bb88

080119bc <lv_palette_lighten>:
        {LV_COLOR_MAKE(0x8D, 0x6E, 0x63), LV_COLOR_MAKE(0xA1, 0x88, 0x7F), LV_COLOR_MAKE(0xBC, 0xAA, 0xA4), LV_COLOR_MAKE(0xD7, 0xCC, 0xC8), LV_COLOR_MAKE(0xEF, 0xEB, 0xE9)},
        {LV_COLOR_MAKE(0x78, 0x90, 0x9C), LV_COLOR_MAKE(0x90, 0xA4, 0xAE), LV_COLOR_MAKE(0xB0, 0xBE, 0xC5), LV_COLOR_MAKE(0xCF, 0xD8, 0xDC), LV_COLOR_MAKE(0xEC, 0xEF, 0xF1)},
        {LV_COLOR_MAKE(0xBD, 0xBD, 0xBD), LV_COLOR_MAKE(0xE0, 0xE0, 0xE0), LV_COLOR_MAKE(0xEE, 0xEE, 0xEE), LV_COLOR_MAKE(0xF5, 0xF5, 0xF5), LV_COLOR_MAKE(0xFA, 0xFA, 0xFA)},
    };

    if(p >= _LV_PALETTE_LAST) {
 80119bc:	2812      	cmp	r0, #18
 80119be:	d80a      	bhi.n	80119d6 <lv_palette_lighten+0x1a>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    if(lvl == 0 || lvl > 5) {
 80119c0:	3901      	subs	r1, #1
 80119c2:	b2c9      	uxtb	r1, r1
 80119c4:	2904      	cmp	r1, #4
 80119c6:	d806      	bhi.n	80119d6 <lv_palette_lighten+0x1a>
        return lv_color_black();
    }

    lvl--;

    return colors[p][lvl];
 80119c8:	0083      	lsls	r3, r0, #2
 80119ca:	1818      	adds	r0, r3, r0
 80119cc:	1841      	adds	r1, r0, r1
 80119ce:	4b03      	ldr	r3, [pc, #12]	; (80119dc <lv_palette_lighten+0x20>)
 80119d0:	0049      	lsls	r1, r1, #1
 80119d2:	5a58      	ldrh	r0, [r3, r1]
 80119d4:	e000      	b.n	80119d8 <lv_palette_lighten+0x1c>
 80119d6:	2000      	movs	r0, #0
}
 80119d8:	4770      	bx	lr
 80119da:	46c0      	nop			; (mov r8, r8)
 80119dc:	0801bac8 	.word	0x0801bac8

080119e0 <lv_palette_darken>:
        {LV_COLOR_MAKE(0x6D, 0x4C, 0x41), LV_COLOR_MAKE(0x5D, 0x40, 0x37), LV_COLOR_MAKE(0x4E, 0x34, 0x2E), LV_COLOR_MAKE(0x3E, 0x27, 0x23)},
        {LV_COLOR_MAKE(0x54, 0x6E, 0x7A), LV_COLOR_MAKE(0x45, 0x5A, 0x64), LV_COLOR_MAKE(0x37, 0x47, 0x4F), LV_COLOR_MAKE(0x26, 0x32, 0x38)},
        {LV_COLOR_MAKE(0x75, 0x75, 0x75), LV_COLOR_MAKE(0x61, 0x61, 0x61), LV_COLOR_MAKE(0x42, 0x42, 0x42), LV_COLOR_MAKE(0x21, 0x21, 0x21)},
    };

    if(p >= _LV_PALETTE_LAST) {
 80119e0:	2812      	cmp	r0, #18
 80119e2:	d809      	bhi.n	80119f8 <lv_palette_darken+0x18>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    if(lvl == 0 || lvl > 4) {
 80119e4:	3901      	subs	r1, #1
 80119e6:	b2c9      	uxtb	r1, r1
 80119e8:	2903      	cmp	r1, #3
 80119ea:	d805      	bhi.n	80119f8 <lv_palette_darken+0x18>
        return lv_color_black();
    }

    lvl--;

    return colors[p][lvl];
 80119ec:	0080      	lsls	r0, r0, #2
 80119ee:	4b03      	ldr	r3, [pc, #12]	; (80119fc <lv_palette_darken+0x1c>)
 80119f0:	1840      	adds	r0, r0, r1
 80119f2:	0040      	lsls	r0, r0, #1
 80119f4:	5a18      	ldrh	r0, [r3, r0]
 80119f6:	e000      	b.n	80119fa <lv_palette_darken+0x1a>
 80119f8:	2000      	movs	r0, #0
}
 80119fa:	4770      	bx	lr
 80119fc:	0801ba30 	.word	0x0801ba30

08011a00 <_lv_fs_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
 8011a00:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 8011a02:	2104      	movs	r1, #4
 8011a04:	4801      	ldr	r0, [pc, #4]	; (8011a0c <_lv_fs_init+0xc>)
 8011a06:	f000 f9bf 	bl	8011d88 <_lv_ll_init>
}
 8011a0a:	bd10      	pop	{r4, pc}
 8011a0c:	20003374 	.word	0x20003374

08011a10 <lv_fs_open>:

    return drv->ready_cb(drv);
}

lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 8011a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a12:	46ce      	mov	lr, r9
 8011a14:	4647      	mov	r7, r8
 8011a16:	4681      	mov	r9, r0
 8011a18:	000e      	movs	r6, r1
 8011a1a:	4690      	mov	r8, r2
 8011a1c:	b580      	push	{r7, lr}
    if(path == NULL) {
 8011a1e:	2900      	cmp	r1, #0
 8011a20:	d037      	beq.n	8011a92 <lv_fs_open+0x82>

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8011a22:	4c27      	ldr	r4, [pc, #156]	; (8011ac0 <lv_fs_open+0xb0>)
    char letter = path[0];
 8011a24:	780d      	ldrb	r5, [r1, #0]
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8011a26:	0020      	movs	r0, r4
 8011a28:	f000 fa10 	bl	8011e4c <_lv_ll_get_head>
 8011a2c:	1e01      	subs	r1, r0, #0
 8011a2e:	d105      	bne.n	8011a3c <lv_fs_open+0x2c>
 8011a30:	e029      	b.n	8011a86 <lv_fs_open+0x76>
 8011a32:	0020      	movs	r0, r4
 8011a34:	f000 fa16 	bl	8011e64 <_lv_ll_get_next>
 8011a38:	1e01      	subs	r1, r0, #0
 8011a3a:	d024      	beq.n	8011a86 <lv_fs_open+0x76>
        if((*drv)->letter == letter) {
 8011a3c:	680f      	ldr	r7, [r1, #0]
 8011a3e:	783b      	ldrb	r3, [r7, #0]
 8011a40:	42ab      	cmp	r3, r5
 8011a42:	d1f6      	bne.n	8011a32 <lv_fs_open+0x22>
    if(drv->ready_cb) {
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d003      	beq.n	8011a52 <lv_fs_open+0x42>
        if(drv->ready_cb(drv) == false) {
 8011a4a:	0038      	movs	r0, r7
 8011a4c:	4798      	blx	r3
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	d01b      	beq.n	8011a8a <lv_fs_open+0x7a>
    if(drv->open_cb == NULL) {
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d01a      	beq.n	8011a8e <lv_fs_open+0x7e>
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
    path++; /*Ignore the driver letter*/
    if(*path == ':') path++;
 8011a58:	7871      	ldrb	r1, [r6, #1]
    void * file_d = drv->open_cb(drv, real_path, mode);
 8011a5a:	0038      	movs	r0, r7
    path++; /*Ignore the driver letter*/
 8011a5c:	393a      	subs	r1, #58	; 0x3a
 8011a5e:	424a      	negs	r2, r1
 8011a60:	4151      	adcs	r1, r2
 8011a62:	1871      	adds	r1, r6, r1
    void * file_d = drv->open_cb(drv, real_path, mode);
 8011a64:	4642      	mov	r2, r8
    path++; /*Ignore the driver letter*/
 8011a66:	3101      	adds	r1, #1
    void * file_d = drv->open_cb(drv, real_path, mode);
 8011a68:	4798      	blx	r3
    if(file_d == NULL || file_d == (void *)(-1)) {
 8011a6a:	1e43      	subs	r3, r0, #1
 8011a6c:	3303      	adds	r3, #3
 8011a6e:	d825      	bhi.n	8011abc <lv_fs_open+0xac>
    file_p->drv = drv;
 8011a70:	464b      	mov	r3, r9
    file_p->file_d = file_d;
 8011a72:	c381      	stmia	r3!, {r0, r7}
    if(drv->cache_size) {
 8011a74:	887b      	ldrh	r3, [r7, #2]
    return LV_FS_RES_OK;
 8011a76:	2400      	movs	r4, #0
    if(drv->cache_size) {
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d10c      	bne.n	8011a96 <lv_fs_open+0x86>
}
 8011a7c:	0020      	movs	r0, r4
 8011a7e:	bcc0      	pop	{r6, r7}
 8011a80:	46b9      	mov	r9, r7
 8011a82:	46b0      	mov	r8, r6
 8011a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LV_FS_RES_NOT_EX;
 8011a86:	2403      	movs	r4, #3
 8011a88:	e7f8      	b.n	8011a7c <lv_fs_open+0x6c>
            return LV_FS_RES_HW_ERR;
 8011a8a:	2401      	movs	r4, #1
 8011a8c:	e7f6      	b.n	8011a7c <lv_fs_open+0x6c>
        return LV_FS_RES_NOT_IMP;
 8011a8e:	2409      	movs	r4, #9
 8011a90:	e7f4      	b.n	8011a7c <lv_fs_open+0x6c>
        return LV_FS_RES_INV_PARAM;
 8011a92:	240b      	movs	r4, #11
 8011a94:	e7f2      	b.n	8011a7c <lv_fs_open+0x6c>
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 8011a96:	2010      	movs	r0, #16
 8011a98:	f000 fa88 	bl	8011fac <lv_mem_alloc>
 8011a9c:	464b      	mov	r3, r9
 8011a9e:	6098      	str	r0, [r3, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	d00a      	beq.n	8011aba <lv_fs_open+0xaa>
        lv_memset_00(file_p->cache, sizeof(lv_fs_file_cache_t));
 8011aa4:	2110      	movs	r1, #16
 8011aa6:	f000 fe03 	bl	80126b0 <lv_memset_00>
        file_p->cache->start = UINT32_MAX;  /*Set an invalid range by default*/
 8011aaa:	464b      	mov	r3, r9
 8011aac:	2201      	movs	r2, #1
 8011aae:	689b      	ldr	r3, [r3, #8]
 8011ab0:	4252      	negs	r2, r2
 8011ab2:	601a      	str	r2, [r3, #0]
        file_p->cache->end = UINT32_MAX - 1;
 8011ab4:	1892      	adds	r2, r2, r2
 8011ab6:	605a      	str	r2, [r3, #4]
 8011ab8:	e7e0      	b.n	8011a7c <lv_fs_open+0x6c>
        LV_ASSERT_MALLOC(file_p->cache);
 8011aba:	e7fe      	b.n	8011aba <lv_fs_open+0xaa>
        return LV_FS_RES_UNKNOWN;
 8011abc:	240c      	movs	r4, #12
 8011abe:	e7dd      	b.n	8011a7c <lv_fs_open+0x6c>
 8011ac0:	20003374 	.word	0x20003374

08011ac4 <lv_fs_close>:
{
 8011ac4:	b570      	push	{r4, r5, r6, lr}
 8011ac6:	0004      	movs	r4, r0
    if(file_p->drv == NULL) {
 8011ac8:	6840      	ldr	r0, [r0, #4]
 8011aca:	2800      	cmp	r0, #0
 8011acc:	d01b      	beq.n	8011b06 <lv_fs_close+0x42>
    if(file_p->drv->close_cb == NULL) {
 8011ace:	68c3      	ldr	r3, [r0, #12]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d01a      	beq.n	8011b0a <lv_fs_close+0x46>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8011ad4:	6821      	ldr	r1, [r4, #0]
 8011ad6:	4798      	blx	r3
    if(file_p->drv->cache_size && file_p->cache) {
 8011ad8:	6863      	ldr	r3, [r4, #4]
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8011ada:	0005      	movs	r5, r0
    if(file_p->drv->cache_size && file_p->cache) {
 8011adc:	885b      	ldrh	r3, [r3, #2]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d00b      	beq.n	8011afa <lv_fs_close+0x36>
 8011ae2:	68a0      	ldr	r0, [r4, #8]
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	d008      	beq.n	8011afa <lv_fs_close+0x36>
        if(file_p->cache->buffer) {
 8011ae8:	68c3      	ldr	r3, [r0, #12]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d003      	beq.n	8011af6 <lv_fs_close+0x32>
            lv_mem_free(file_p->cache->buffer);
 8011aee:	0018      	movs	r0, r3
 8011af0:	f000 fa7e 	bl	8011ff0 <lv_mem_free>
        lv_mem_free(file_p->cache);
 8011af4:	68a0      	ldr	r0, [r4, #8]
 8011af6:	f000 fa7b 	bl	8011ff0 <lv_mem_free>
    file_p->file_d = NULL;
 8011afa:	2300      	movs	r3, #0
 8011afc:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
 8011afe:	6063      	str	r3, [r4, #4]
    file_p->cache  = NULL;
 8011b00:	60a3      	str	r3, [r4, #8]
}
 8011b02:	0028      	movs	r0, r5
 8011b04:	bd70      	pop	{r4, r5, r6, pc}
        return LV_FS_RES_INV_PARAM;
 8011b06:	250b      	movs	r5, #11
 8011b08:	e7fb      	b.n	8011b02 <lv_fs_close+0x3e>
        return LV_FS_RES_NOT_IMP;
 8011b0a:	2509      	movs	r5, #9
 8011b0c:	e7f9      	b.n	8011b02 <lv_fs_close+0x3e>
 8011b0e:	46c0      	nop			; (mov r8, r8)

08011b10 <lv_fs_read>:
{
 8011b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b12:	4657      	mov	r7, sl
 8011b14:	464e      	mov	r6, r9
 8011b16:	4645      	mov	r5, r8
 8011b18:	46de      	mov	lr, fp
 8011b1a:	b5e0      	push	{r5, r6, r7, lr}
 8011b1c:	001c      	movs	r4, r3
 8011b1e:	0005      	movs	r5, r0
 8011b20:	000f      	movs	r7, r1
 8011b22:	0016      	movs	r6, r2
 8011b24:	b087      	sub	sp, #28
    if(br != NULL) *br = 0;
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d001      	beq.n	8011b2e <lv_fs_read+0x1e>
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8011b2e:	6868      	ldr	r0, [r5, #4]
 8011b30:	2800      	cmp	r0, #0
 8011b32:	d069      	beq.n	8011c08 <lv_fs_read+0xf8>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8011b34:	6903      	ldr	r3, [r0, #16]
 8011b36:	4698      	mov	r8, r3
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d100      	bne.n	8011b3e <lv_fs_read+0x2e>
 8011b3c:	e082      	b.n	8011c44 <lv_fs_read+0x134>
    uint32_t br_tmp = 0;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	9304      	str	r3, [sp, #16]
    if(file_p->drv->cache_size) {
 8011b42:	8843      	ldrh	r3, [r0, #2]
 8011b44:	4699      	mov	r9, r3
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d112      	bne.n	8011b70 <lv_fs_read+0x60>
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 8011b4a:	ab04      	add	r3, sp, #16
 8011b4c:	9300      	str	r3, [sp, #0]
 8011b4e:	003a      	movs	r2, r7
 8011b50:	0033      	movs	r3, r6
 8011b52:	6829      	ldr	r1, [r5, #0]
 8011b54:	47c0      	blx	r8
 8011b56:	4680      	mov	r8, r0
    if(br != NULL) *br = br_tmp;
 8011b58:	2c00      	cmp	r4, #0
 8011b5a:	d001      	beq.n	8011b60 <lv_fs_read+0x50>
 8011b5c:	9b04      	ldr	r3, [sp, #16]
 8011b5e:	6023      	str	r3, [r4, #0]
}
 8011b60:	4640      	mov	r0, r8
 8011b62:	b007      	add	sp, #28
 8011b64:	bcf0      	pop	{r4, r5, r6, r7}
 8011b66:	46bb      	mov	fp, r7
 8011b68:	46b2      	mov	sl, r6
 8011b6a:	46a9      	mov	r9, r5
 8011b6c:	46a0      	mov	r8, r4
 8011b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t file_position = file_p->cache->file_position;
 8011b70:	68ab      	ldr	r3, [r5, #8]
 8011b72:	469a      	mov	sl, r3
 8011b74:	689b      	ldr	r3, [r3, #8]
 8011b76:	469b      	mov	fp, r3
    uint32_t start = file_p->cache->start;
 8011b78:	4653      	mov	r3, sl
 8011b7a:	6819      	ldr	r1, [r3, #0]
    char * buffer = file_p->cache->buffer;
 8011b7c:	68db      	ldr	r3, [r3, #12]
 8011b7e:	9303      	str	r3, [sp, #12]
    if(start <= file_position && file_position < end) {
 8011b80:	458b      	cmp	fp, r1
 8011b82:	d214      	bcs.n	8011bae <lv_fs_read+0x9e>
        if(btr > buffer_size) {
 8011b84:	454e      	cmp	r6, r9
 8011b86:	d942      	bls.n	8011c0e <lv_fs_read+0xfe>
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 8011b88:	ab04      	add	r3, sp, #16
 8011b8a:	9300      	str	r3, [sp, #0]
 8011b8c:	003a      	movs	r2, r7
 8011b8e:	0033      	movs	r3, r6
 8011b90:	6829      	ldr	r1, [r5, #0]
 8011b92:	47c0      	blx	r8
 8011b94:	4680      	mov	r8, r0
    if(res == LV_FS_RES_OK) {
 8011b96:	4643      	mov	r3, r8
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d1dd      	bne.n	8011b58 <lv_fs_read+0x48>
        file_p->cache->file_position += *br;
 8011b9c:	9e04      	ldr	r6, [sp, #16]
 8011b9e:	68ab      	ldr	r3, [r5, #8]
 8011ba0:	689a      	ldr	r2, [r3, #8]
 8011ba2:	4694      	mov	ip, r2
 8011ba4:	4466      	add	r6, ip
 8011ba6:	609e      	str	r6, [r3, #8]
 8011ba8:	2300      	movs	r3, #0
 8011baa:	4698      	mov	r8, r3
 8011bac:	e7d4      	b.n	8011b58 <lv_fs_read+0x48>
    uint32_t end = file_p->cache->end;
 8011bae:	4653      	mov	r3, sl
 8011bb0:	685a      	ldr	r2, [r3, #4]
    if(start <= file_position && file_position < end) {
 8011bb2:	4593      	cmp	fp, r2
 8011bb4:	d2e6      	bcs.n	8011b84 <lv_fs_read+0x74>
        uint16_t buffer_offset = file_position - start;
 8011bb6:	465b      	mov	r3, fp
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 8011bb8:	4658      	mov	r0, fp
        uint16_t buffer_offset = file_position - start;
 8011bba:	1a59      	subs	r1, r3, r1
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 8011bbc:	464b      	mov	r3, r9
 8011bbe:	b289      	uxth	r1, r1
 8011bc0:	1a12      	subs	r2, r2, r0
 8011bc2:	4693      	mov	fp, r2
 8011bc4:	1a5b      	subs	r3, r3, r1
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d847      	bhi.n	8011c5a <lv_fs_read+0x14a>
            lv_memcpy(buf, buffer + buffer_offset, btr);
 8011bca:	9b03      	ldr	r3, [sp, #12]
 8011bcc:	469c      	mov	ip, r3
 8011bce:	4461      	add	r1, ip
        if(btr <= buffer_remaining_length) {
 8011bd0:	455e      	cmp	r6, fp
 8011bd2:	d93c      	bls.n	8011c4e <lv_fs_read+0x13e>
            lv_memcpy(buf, buffer + buffer_offset, buffer_remaining_length);
 8011bd4:	465a      	mov	r2, fp
 8011bd6:	0038      	movs	r0, r7
 8011bd8:	f000 fb9c 	bl	8012314 <lv_memcpy>
            uint32_t bytes_read_to_buffer = 0;
 8011bdc:	2300      	movs	r3, #0
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 8011bde:	6868      	ldr	r0, [r5, #4]
            uint32_t bytes_read_to_buffer = 0;
 8011be0:	9305      	str	r3, [sp, #20]
            if(btr > buffer_size) {
 8011be2:	454e      	cmp	r6, r9
 8011be4:	d94a      	bls.n	8011c7c <lv_fs_read+0x16c>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 8011be6:	003a      	movs	r2, r7
 8011be8:	465b      	mov	r3, fp
 8011bea:	a905      	add	r1, sp, #20
 8011bec:	9100      	str	r1, [sp, #0]
 8011bee:	6907      	ldr	r7, [r0, #16]
 8011bf0:	6829      	ldr	r1, [r5, #0]
 8011bf2:	1af3      	subs	r3, r6, r3
 8011bf4:	445a      	add	r2, fp
 8011bf6:	47b8      	blx	r7
 8011bf8:	4680      	mov	r8, r0
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 8011bfa:	9b05      	ldr	r3, [sp, #20]
 8011bfc:	445b      	add	r3, fp
 8011bfe:	42b3      	cmp	r3, r6
 8011c00:	d900      	bls.n	8011c04 <lv_fs_read+0xf4>
 8011c02:	0033      	movs	r3, r6
 8011c04:	9304      	str	r3, [sp, #16]
 8011c06:	e7c6      	b.n	8011b96 <lv_fs_read+0x86>
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8011c08:	230b      	movs	r3, #11
 8011c0a:	4698      	mov	r8, r3
 8011c0c:	e7a8      	b.n	8011b60 <lv_fs_read+0x50>
            if(buffer == NULL) {
 8011c0e:	9b03      	ldr	r3, [sp, #12]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d024      	beq.n	8011c5e <lv_fs_read+0x14e>
            uint32_t bytes_read_to_buffer = 0;
 8011c14:	2300      	movs	r3, #0
 8011c16:	9305      	str	r3, [sp, #20]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8011c18:	ab05      	add	r3, sp, #20
 8011c1a:	9a03      	ldr	r2, [sp, #12]
 8011c1c:	6829      	ldr	r1, [r5, #0]
 8011c1e:	9300      	str	r3, [sp, #0]
 8011c20:	464b      	mov	r3, r9
 8011c22:	47c0      	blx	r8
            file_p->cache->start = file_position;
 8011c24:	465b      	mov	r3, fp
 8011c26:	68aa      	ldr	r2, [r5, #8]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8011c28:	4680      	mov	r8, r0
            file_p->cache->start = file_position;
 8011c2a:	6013      	str	r3, [r2, #0]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8011c2c:	9905      	ldr	r1, [sp, #20]
 8011c2e:	185b      	adds	r3, r3, r1
 8011c30:	6053      	str	r3, [r2, #4]
            *br = LV_MIN(btr, bytes_read_to_buffer);
 8011c32:	0032      	movs	r2, r6
 8011c34:	428e      	cmp	r6, r1
 8011c36:	d808      	bhi.n	8011c4a <lv_fs_read+0x13a>
            lv_memcpy(buf, buffer, *br);
 8011c38:	0038      	movs	r0, r7
 8011c3a:	9903      	ldr	r1, [sp, #12]
            *br = LV_MIN(btr, bytes_read_to_buffer);
 8011c3c:	9204      	str	r2, [sp, #16]
            lv_memcpy(buf, buffer, *br);
 8011c3e:	f000 fb69 	bl	8012314 <lv_memcpy>
 8011c42:	e7a8      	b.n	8011b96 <lv_fs_read+0x86>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8011c44:	2309      	movs	r3, #9
 8011c46:	4698      	mov	r8, r3
 8011c48:	e78a      	b.n	8011b60 <lv_fs_read+0x50>
            *br = LV_MIN(btr, bytes_read_to_buffer);
 8011c4a:	000a      	movs	r2, r1
 8011c4c:	e7f4      	b.n	8011c38 <lv_fs_read+0x128>
            lv_memcpy(buf, buffer + buffer_offset, btr);
 8011c4e:	0032      	movs	r2, r6
 8011c50:	0038      	movs	r0, r7
 8011c52:	f000 fb5f 	bl	8012314 <lv_memcpy>
            *br = btr;
 8011c56:	9604      	str	r6, [sp, #16]
    if(res == LV_FS_RES_OK) {
 8011c58:	e7a1      	b.n	8011b9e <lv_fs_read+0x8e>
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 8011c5a:	469b      	mov	fp, r3
 8011c5c:	e7b5      	b.n	8011bca <lv_fs_read+0xba>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 8011c5e:	4648      	mov	r0, r9
 8011c60:	f000 f9a4 	bl	8011fac <lv_mem_alloc>
 8011c64:	4653      	mov	r3, sl
 8011c66:	60d8      	str	r0, [r3, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 8011c68:	68ab      	ldr	r3, [r5, #8]
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	9303      	str	r3, [sp, #12]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d003      	beq.n	8011c7a <lv_fs_read+0x16a>
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8011c72:	6868      	ldr	r0, [r5, #4]
 8011c74:	6903      	ldr	r3, [r0, #16]
 8011c76:	4698      	mov	r8, r3
 8011c78:	e7cc      	b.n	8011c14 <lv_fs_read+0x104>
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 8011c7a:	e7fe      	b.n	8011c7a <lv_fs_read+0x16a>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8011c7c:	ab05      	add	r3, sp, #20
 8011c7e:	9300      	str	r3, [sp, #0]
 8011c80:	6903      	ldr	r3, [r0, #16]
 8011c82:	9a03      	ldr	r2, [sp, #12]
 8011c84:	4698      	mov	r8, r3
 8011c86:	6829      	ldr	r1, [r5, #0]
 8011c88:	464b      	mov	r3, r9
 8011c8a:	47c0      	blx	r8
                file_p->cache->start = file_p->cache->end;
 8011c8c:	68aa      	ldr	r2, [r5, #8]
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8011c8e:	4680      	mov	r8, r0
                file_p->cache->start = file_p->cache->end;
 8011c90:	6853      	ldr	r3, [r2, #4]
 8011c92:	6013      	str	r3, [r2, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8011c94:	9905      	ldr	r1, [sp, #20]
 8011c96:	185b      	adds	r3, r3, r1
 8011c98:	6053      	str	r3, [r2, #4]
                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 8011c9a:	465b      	mov	r3, fp
 8011c9c:	1af3      	subs	r3, r6, r3
 8011c9e:	428b      	cmp	r3, r1
 8011ca0:	d900      	bls.n	8011ca4 <lv_fs_read+0x194>
 8011ca2:	000b      	movs	r3, r1
                lv_memcpy(buf + buffer_remaining_length, buffer, data_chunk_remaining);
 8011ca4:	0038      	movs	r0, r7
 8011ca6:	041b      	lsls	r3, r3, #16
 8011ca8:	9903      	ldr	r1, [sp, #12]
 8011caa:	0c1a      	lsrs	r2, r3, #16
 8011cac:	4458      	add	r0, fp
 8011cae:	f000 fb31 	bl	8012314 <lv_memcpy>
 8011cb2:	e7a2      	b.n	8011bfa <lv_fs_read+0xea>

08011cb4 <lv_fs_seek>:
{
 8011cb4:	b570      	push	{r4, r5, r6, lr}
    if(file_p->drv == NULL) {
 8011cb6:	6845      	ldr	r5, [r0, #4]
{
 8011cb8:	0004      	movs	r4, r0
 8011cba:	0013      	movs	r3, r2
 8011cbc:	b082      	sub	sp, #8
    if(file_p->drv == NULL) {
 8011cbe:	2d00      	cmp	r5, #0
 8011cc0:	d01f      	beq.n	8011d02 <lv_fs_seek+0x4e>
    if(file_p->drv->seek_cb == NULL) {
 8011cc2:	69ae      	ldr	r6, [r5, #24]
 8011cc4:	2e00      	cmp	r6, #0
 8011cc6:	d03c      	beq.n	8011d42 <lv_fs_seek+0x8e>
    if(file_p->drv->cache_size) {
 8011cc8:	886a      	ldrh	r2, [r5, #2]
 8011cca:	2a00      	cmp	r2, #0
 8011ccc:	d012      	beq.n	8011cf4 <lv_fs_seek+0x40>
        switch(whence) {
 8011cce:	2b01      	cmp	r3, #1
 8011cd0:	d02b      	beq.n	8011d2a <lv_fs_seek+0x76>
 8011cd2:	2b02      	cmp	r3, #2
 8011cd4:	d017      	beq.n	8011d06 <lv_fs_seek+0x52>
 8011cd6:	2000      	movs	r0, #0
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d110      	bne.n	8011cfe <lv_fs_seek+0x4a>
                    file_p->cache->file_position = pos;
 8011cdc:	68a3      	ldr	r3, [r4, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8011cde:	681a      	ldr	r2, [r3, #0]
                    file_p->cache->file_position = pos;
 8011ce0:	6099      	str	r1, [r3, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8011ce2:	428a      	cmp	r2, r1
 8011ce4:	d934      	bls.n	8011d50 <lv_fs_seek+0x9c>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8011ce6:	6820      	ldr	r0, [r4, #0]
 8011ce8:	000a      	movs	r2, r1
 8011cea:	2300      	movs	r3, #0
 8011cec:	0001      	movs	r1, r0
 8011cee:	0028      	movs	r0, r5
 8011cf0:	47b0      	blx	r6
 8011cf2:	e004      	b.n	8011cfe <lv_fs_seek+0x4a>
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8011cf4:	6800      	ldr	r0, [r0, #0]
 8011cf6:	000a      	movs	r2, r1
 8011cf8:	0001      	movs	r1, r0
 8011cfa:	0028      	movs	r0, r5
 8011cfc:	47b0      	blx	r6
}
 8011cfe:	b002      	add	sp, #8
 8011d00:	bd70      	pop	{r4, r5, r6, pc}
        return LV_FS_RES_INV_PARAM;
 8011d02:	200b      	movs	r0, #11
 8011d04:	e7fb      	b.n	8011cfe <lv_fs_seek+0x4a>
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8011d06:	000a      	movs	r2, r1
 8011d08:	2302      	movs	r3, #2
 8011d0a:	6801      	ldr	r1, [r0, #0]
 8011d0c:	0028      	movs	r0, r5
 8011d0e:	47b0      	blx	r6
                    if(res == LV_FS_RES_OK) {
 8011d10:	2800      	cmp	r0, #0
 8011d12:	d1f4      	bne.n	8011cfe <lv_fs_seek+0x4a>
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 8011d14:	6860      	ldr	r0, [r4, #4]
 8011d16:	6821      	ldr	r1, [r4, #0]
 8011d18:	69c3      	ldr	r3, [r0, #28]
 8011d1a:	aa01      	add	r2, sp, #4
 8011d1c:	4798      	blx	r3
                        if(res == LV_FS_RES_OK) {
 8011d1e:	2800      	cmp	r0, #0
 8011d20:	d1ed      	bne.n	8011cfe <lv_fs_seek+0x4a>
                            file_p->cache->file_position = tmp_position;
 8011d22:	68a3      	ldr	r3, [r4, #8]
 8011d24:	9a01      	ldr	r2, [sp, #4]
 8011d26:	609a      	str	r2, [r3, #8]
 8011d28:	e7e9      	b.n	8011cfe <lv_fs_seek+0x4a>
                    file_p->cache->file_position += pos;
 8011d2a:	6883      	ldr	r3, [r0, #8]
 8011d2c:	689a      	ldr	r2, [r3, #8]
 8011d2e:	188a      	adds	r2, r1, r2
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8011d30:	6819      	ldr	r1, [r3, #0]
                    file_p->cache->file_position += pos;
 8011d32:	609a      	str	r2, [r3, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8011d34:	428a      	cmp	r2, r1
 8011d36:	d206      	bcs.n	8011d46 <lv_fs_seek+0x92>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8011d38:	2300      	movs	r3, #0
 8011d3a:	0028      	movs	r0, r5
 8011d3c:	6821      	ldr	r1, [r4, #0]
 8011d3e:	47b0      	blx	r6
 8011d40:	e7dd      	b.n	8011cfe <lv_fs_seek+0x4a>
        return LV_FS_RES_NOT_IMP;
 8011d42:	2009      	movs	r0, #9
 8011d44:	e7db      	b.n	8011cfe <lv_fs_seek+0x4a>
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d8f5      	bhi.n	8011d38 <lv_fs_seek+0x84>
    lv_fs_res_t res = LV_FS_RES_OK;
 8011d4c:	2000      	movs	r0, #0
 8011d4e:	e7d6      	b.n	8011cfe <lv_fs_seek+0x4a>
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	428b      	cmp	r3, r1
 8011d54:	d3c7      	bcc.n	8011ce6 <lv_fs_seek+0x32>
 8011d56:	e7f9      	b.n	8011d4c <lv_fs_seek+0x98>

08011d58 <lv_fs_get_ext>:
{
 8011d58:	b510      	push	{r4, lr}
 8011d5a:	0004      	movs	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 8011d5c:	f7ee f9dc 	bl	8000118 <strlen>
 8011d60:	1e03      	subs	r3, r0, #0
 8011d62:	d107      	bne.n	8011d74 <lv_fs_get_ext+0x1c>
 8011d64:	e00c      	b.n	8011d80 <lv_fs_get_ext+0x28>
        else if(fn[i] == '/' || fn[i] == '\\') {
 8011d66:	2a2f      	cmp	r2, #47	; 0x2f
 8011d68:	d00a      	beq.n	8011d80 <lv_fs_get_ext+0x28>
 8011d6a:	2a5c      	cmp	r2, #92	; 0x5c
 8011d6c:	d008      	beq.n	8011d80 <lv_fs_get_ext+0x28>
    for(i = strlen(fn); i > 0; i--) {
 8011d6e:	3b01      	subs	r3, #1
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d005      	beq.n	8011d80 <lv_fs_get_ext+0x28>
        if(fn[i] == '.') {
 8011d74:	5ce2      	ldrb	r2, [r4, r3]
 8011d76:	2a2e      	cmp	r2, #46	; 0x2e
 8011d78:	d1f5      	bne.n	8011d66 <lv_fs_get_ext+0xe>
            return &fn[i + 1];
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	18e0      	adds	r0, r4, r3
 8011d7e:	e000      	b.n	8011d82 <lv_fs_get_ext+0x2a>
    return ""; /*Empty string if no '.' in the file name.*/
 8011d80:	4800      	ldr	r0, [pc, #0]	; (8011d84 <lv_fs_get_ext+0x2c>)
}
 8011d82:	bd10      	pop	{r4, pc}
 8011d84:	0801d988 	.word	0x0801d988

08011d88 <_lv_ll_init>:
 * @param ll_p pointer to lv_ll_t variable
 * @param node_size the size of 1 node in bytes
 */
void _lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
    ll_p->head = NULL;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 8011d8c:	6083      	str	r3, [r0, #8]
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    node_size = (node_size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    node_size = (node_size + 3) & (~0x3);
 8011d8e:	3103      	adds	r1, #3
 8011d90:	3303      	adds	r3, #3
 8011d92:	4399      	bics	r1, r3
#endif

    ll_p->n_size = node_size;
 8011d94:	6001      	str	r1, [r0, #0]
}
 8011d96:	4770      	bx	lr

08011d98 <_lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * _lv_ll_ins_head(lv_ll_t * ll_p)
{
 8011d98:	b510      	push	{r4, lr}
 8011d9a:	0004      	movs	r4, r0
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8011d9c:	6800      	ldr	r0, [r0, #0]
 8011d9e:	3008      	adds	r0, #8
 8011da0:	f000 f904 	bl	8011fac <lv_mem_alloc>

    if(n_new != NULL) {
 8011da4:	2800      	cmp	r0, #0
 8011da6:	d00c      	beq.n	8011dc2 <_lv_ll_ins_head+0x2a>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 8011da8:	2200      	movs	r2, #0
    act8 += LL_PREV_P_OFFSET(ll_p);
 8011daa:	6823      	ldr	r3, [r4, #0]
    *act_node_p = *prev_node_p;
 8011dac:	50c2      	str	r2, [r0, r3]
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8011dae:	6862      	ldr	r2, [r4, #4]

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 8011db0:	18c1      	adds	r1, r0, r3
 8011db2:	604a      	str	r2, [r1, #4]
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8011db4:	2a00      	cmp	r2, #0
 8011db6:	d000      	beq.n	8011dba <_lv_ll_ins_head+0x22>
    *act_node_p = *prev_node_p;
 8011db8:	50d0      	str	r0, [r2, r3]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8011dba:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8011dbc:	6060      	str	r0, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d000      	beq.n	8011dc4 <_lv_ll_ins_head+0x2c>
}
 8011dc2:	bd10      	pop	{r4, pc}
            ll_p->tail = n_new;
 8011dc4:	60a0      	str	r0, [r4, #8]
    return n_new;
 8011dc6:	e7fc      	b.n	8011dc2 <_lv_ll_ins_head+0x2a>

08011dc8 <_lv_ll_ins_tail>:
{
 8011dc8:	b510      	push	{r4, lr}
 8011dca:	0004      	movs	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8011dcc:	6800      	ldr	r0, [r0, #0]
 8011dce:	3008      	adds	r0, #8
 8011dd0:	f000 f8ec 	bl	8011fac <lv_mem_alloc>
    if(n_new != NULL) {
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d00c      	beq.n	8011df2 <_lv_ll_ins_tail+0x2a>
    *act_node_p = *next_node_p;
 8011dd8:	2300      	movs	r3, #0
    act8 += LL_NEXT_P_OFFSET(ll_p);
 8011dda:	6822      	ldr	r2, [r4, #0]
 8011ddc:	1d11      	adds	r1, r2, #4
    *act_node_p = *next_node_p;
 8011dde:	5043      	str	r3, [r0, r1]
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 8011de0:	68a3      	ldr	r3, [r4, #8]
    *act_node_p = *prev_node_p;
 8011de2:	5083      	str	r3, [r0, r2]
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d000      	beq.n	8011dea <_lv_ll_ins_tail+0x22>
    *act_node_p = *next_node_p;
 8011de8:	5058      	str	r0, [r3, r1]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8011dea:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8011dec:	60a0      	str	r0, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d000      	beq.n	8011df4 <_lv_ll_ins_tail+0x2c>
}
 8011df2:	bd10      	pop	{r4, pc}
            ll_p->head = n_new;
 8011df4:	6060      	str	r0, [r4, #4]
    return n_new;
 8011df6:	e7fc      	b.n	8011df2 <_lv_ll_ins_tail+0x2a>

08011df8 <_lv_ll_remove>:
{
 8011df8:	b510      	push	{r4, lr}
    if(ll_p == NULL) return;
 8011dfa:	2800      	cmp	r0, #0
 8011dfc:	d00f      	beq.n	8011e1e <_lv_ll_remove+0x26>
    if(_lv_ll_get_head(ll_p) == node_p) {
 8011dfe:	6843      	ldr	r3, [r0, #4]
 8011e00:	4299      	cmp	r1, r3
 8011e02:	d00d      	beq.n	8011e20 <_lv_ll_remove+0x28>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8011e04:	6883      	ldr	r3, [r0, #8]
 8011e06:	4299      	cmp	r1, r3
 8011e08:	d013      	beq.n	8011e32 <_lv_ll_remove+0x3a>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8011e0a:	6803      	ldr	r3, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
 8011e0c:	58c8      	ldr	r0, [r1, r3]
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8011e0e:	1d1c      	adds	r4, r3, #4
    return *((lv_ll_node_t **)n_act_d);
 8011e10:	590a      	ldr	r2, [r1, r4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8011e12:	2800      	cmp	r0, #0
 8011e14:	d000      	beq.n	8011e18 <_lv_ll_remove+0x20>
    *act_node_p = *next_node_p;
 8011e16:	5102      	str	r2, [r0, r4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8011e18:	2a00      	cmp	r2, #0
 8011e1a:	d000      	beq.n	8011e1e <_lv_ll_remove+0x26>
    *act_node_p = *prev_node_p;
 8011e1c:	50d0      	str	r0, [r2, r3]
}
 8011e1e:	bd10      	pop	{r4, pc}
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8011e20:	6802      	ldr	r2, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
 8011e22:	1889      	adds	r1, r1, r2
 8011e24:	684b      	ldr	r3, [r1, #4]
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 8011e26:	6043      	str	r3, [r0, #4]
        if(ll_p->head == NULL) {
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d00b      	beq.n	8011e44 <_lv_ll_remove+0x4c>
    *act_node_p = *prev_node_p;
 8011e2c:	2100      	movs	r1, #0
 8011e2e:	5099      	str	r1, [r3, r2]
 8011e30:	e7f5      	b.n	8011e1e <_lv_ll_remove+0x26>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8011e32:	6802      	ldr	r2, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
 8011e34:	588b      	ldr	r3, [r1, r2]
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8011e36:	6083      	str	r3, [r0, #8]
        if(ll_p->tail == NULL) {
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d005      	beq.n	8011e48 <_lv_ll_remove+0x50>
    *act_node_p = *next_node_p;
 8011e3c:	189b      	adds	r3, r3, r2
 8011e3e:	2200      	movs	r2, #0
 8011e40:	605a      	str	r2, [r3, #4]
 8011e42:	e7ec      	b.n	8011e1e <_lv_ll_remove+0x26>
            ll_p->tail = NULL;
 8011e44:	6083      	str	r3, [r0, #8]
 8011e46:	e7ea      	b.n	8011e1e <_lv_ll_remove+0x26>
            ll_p->head = NULL;
 8011e48:	6043      	str	r3, [r0, #4]
 8011e4a:	e7e8      	b.n	8011e1e <_lv_ll_remove+0x26>

08011e4c <_lv_ll_get_head>:
    if(ll_p == NULL) return NULL;
 8011e4c:	2800      	cmp	r0, #0
 8011e4e:	d001      	beq.n	8011e54 <_lv_ll_get_head+0x8>
    return ll_p->head;
 8011e50:	6840      	ldr	r0, [r0, #4]
}
 8011e52:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
 8011e54:	2000      	movs	r0, #0
 8011e56:	e7fc      	b.n	8011e52 <_lv_ll_get_head+0x6>

08011e58 <_lv_ll_get_tail>:
    if(ll_p == NULL) return NULL;
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	d001      	beq.n	8011e60 <_lv_ll_get_tail+0x8>
    return ll_p->tail;
 8011e5c:	6880      	ldr	r0, [r0, #8]
}
 8011e5e:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
 8011e60:	2000      	movs	r0, #0
 8011e62:	e7fc      	b.n	8011e5e <_lv_ll_get_tail+0x6>

08011e64 <_lv_ll_get_next>:
    return *((lv_ll_node_t **)n_act_d);
 8011e64:	6803      	ldr	r3, [r0, #0]
 8011e66:	18c9      	adds	r1, r1, r3
 8011e68:	6848      	ldr	r0, [r1, #4]
}
 8011e6a:	4770      	bx	lr

08011e6c <_lv_ll_get_prev>:
    return *((lv_ll_node_t **)n_act_d);
 8011e6c:	6803      	ldr	r3, [r0, #0]
 8011e6e:	58c8      	ldr	r0, [r1, r3]
}
 8011e70:	4770      	bx	lr
 8011e72:	46c0      	nop			; (mov r8, r8)

08011e74 <_lv_ll_get_len>:
    if(ll_p == NULL) return NULL;
 8011e74:	2800      	cmp	r0, #0
 8011e76:	d00a      	beq.n	8011e8e <_lv_ll_get_len+0x1a>
    return ll_p->head;
 8011e78:	6843      	ldr	r3, [r0, #4]
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d007      	beq.n	8011e8e <_lv_ll_get_len+0x1a>
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8011e7e:	6802      	ldr	r2, [r0, #0]
 8011e80:	2000      	movs	r0, #0
 8011e82:	3204      	adds	r2, #4
    return *((lv_ll_node_t **)n_act_d);
 8011e84:	589b      	ldr	r3, [r3, r2]
        len++;
 8011e86:	3001      	adds	r0, #1
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d1fb      	bne.n	8011e84 <_lv_ll_get_len+0x10>
}
 8011e8c:	4770      	bx	lr
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 8011e8e:	2000      	movs	r0, #0
    return len;
 8011e90:	e7fc      	b.n	8011e8c <_lv_ll_get_len+0x18>
 8011e92:	46c0      	nop			; (mov r8, r8)

08011e94 <_lv_ll_is_empty>:
{
 8011e94:	1e03      	subs	r3, r0, #0
    if(ll_p == NULL) return true;
 8011e96:	d009      	beq.n	8011eac <_lv_ll_is_empty+0x18>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8011e98:	685a      	ldr	r2, [r3, #4]
    return false;
 8011e9a:	2000      	movs	r0, #0
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8011e9c:	2a00      	cmp	r2, #0
 8011e9e:	d000      	beq.n	8011ea2 <_lv_ll_is_empty+0xe>
}
 8011ea0:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8011ea2:	6898      	ldr	r0, [r3, #8]
 8011ea4:	4243      	negs	r3, r0
 8011ea6:	4158      	adcs	r0, r3
 8011ea8:	b2c0      	uxtb	r0, r0
 8011eaa:	e7f9      	b.n	8011ea0 <_lv_ll_is_empty+0xc>
    if(ll_p == NULL) return true;
 8011eac:	2001      	movs	r0, #1
 8011eae:	e7f7      	b.n	8011ea0 <_lv_ll_is_empty+0xc>

08011eb0 <lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 8011eb0:	21b4      	movs	r1, #180	; 0xb4
{
 8011eb2:	b510      	push	{r4, lr}
    angle       = angle % 360;
 8011eb4:	0049      	lsls	r1, r1, #1
 8011eb6:	f7ee faa7 	bl	8000408 <__aeabi_idivmod>
 8011eba:	b20b      	sxth	r3, r1

    if(angle < 0) angle = 360 + angle;
 8011ebc:	040a      	lsls	r2, r1, #16
 8011ebe:	d502      	bpl.n	8011ec6 <lv_trigo_sin+0x16>
 8011ec0:	3369      	adds	r3, #105	; 0x69
 8011ec2:	33ff      	adds	r3, #255	; 0xff
 8011ec4:	b21b      	sxth	r3, r3

    if(angle < 90) {
 8011ec6:	2b59      	cmp	r3, #89	; 0x59
 8011ec8:	dd07      	ble.n	8011eda <lv_trigo_sin+0x2a>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
 8011eca:	b29b      	uxth	r3, r3
 8011ecc:	001a      	movs	r2, r3
 8011ece:	3a5a      	subs	r2, #90	; 0x5a
 8011ed0:	2a59      	cmp	r2, #89	; 0x59
 8011ed2:	d806      	bhi.n	8011ee2 <lv_trigo_sin+0x32>
        angle = 180 - angle;
 8011ed4:	22b4      	movs	r2, #180	; 0xb4
 8011ed6:	1ad3      	subs	r3, r2, r3
        ret   = sin0_90_table[angle];
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	4a0c      	ldr	r2, [pc, #48]	; (8011f0c <lv_trigo_sin+0x5c>)
 8011edc:	005b      	lsls	r3, r3, #1
 8011ede:	5e98      	ldrsh	r0, [r3, r2]
        angle = 360 - angle;
        ret   = -sin0_90_table[angle];
    }

    return ret;
}
 8011ee0:	bd10      	pop	{r4, pc}
    else if(angle >= 180 && angle < 270) {
 8011ee2:	001a      	movs	r2, r3
 8011ee4:	3ab4      	subs	r2, #180	; 0xb4
 8011ee6:	b292      	uxth	r2, r2
 8011ee8:	2a59      	cmp	r2, #89	; 0x59
 8011eea:	d805      	bhi.n	8011ef8 <lv_trigo_sin+0x48>
        ret   = -sin0_90_table[angle];
 8011eec:	4b07      	ldr	r3, [pc, #28]	; (8011f0c <lv_trigo_sin+0x5c>)
 8011eee:	0052      	lsls	r2, r2, #1
 8011ef0:	5ad0      	ldrh	r0, [r2, r3]
 8011ef2:	4240      	negs	r0, r0
 8011ef4:	b200      	sxth	r0, r0
 8011ef6:	e7f3      	b.n	8011ee0 <lv_trigo_sin+0x30>
        angle = 360 - angle;
 8011ef8:	22b4      	movs	r2, #180	; 0xb4
 8011efa:	0052      	lsls	r2, r2, #1
 8011efc:	1ad3      	subs	r3, r2, r3
        ret   = -sin0_90_table[angle];
 8011efe:	b29b      	uxth	r3, r3
 8011f00:	4a02      	ldr	r2, [pc, #8]	; (8011f0c <lv_trigo_sin+0x5c>)
 8011f02:	005b      	lsls	r3, r3, #1
 8011f04:	5a98      	ldrh	r0, [r3, r2]
 8011f06:	4240      	negs	r0, r0
 8011f08:	b200      	sxth	r0, r0
 8011f0a:	e7e9      	b.n	8011ee0 <lv_trigo_sin+0x30>
 8011f0c:	0801bbb0 	.word	0x0801bbb0

08011f10 <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 8011f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t t_rem  = 1024 - t;
 8011f12:	2780      	movs	r7, #128	; 0x80
 8011f14:	00ff      	lsls	r7, r7, #3
 8011f16:	1a3f      	subs	r7, r7, r0
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8011f18:	003d      	movs	r5, r7
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
    uint32_t t2     = (t * t) >> 10;
 8011f1a:	0006      	movs	r6, r0
{
 8011f1c:	0004      	movs	r4, r0
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8011f1e:	437d      	muls	r5, r7
    uint32_t t3     = (t2 * t) >> 10;

    uint32_t v1 = (t_rem3 * u0) >> 10;
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8011f20:	4342      	muls	r2, r0
    uint32_t t2     = (t * t) >> 10;
 8011f22:	4346      	muls	r6, r0
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8011f24:	0aad      	lsrs	r5, r5, #10
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8011f26:	436a      	muls	r2, r5
    uint32_t t2     = (t * t) >> 10;
 8011f28:	0ab6      	lsrs	r6, r6, #10
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8011f2a:	437b      	muls	r3, r7
    uint32_t t3     = (t2 * t) >> 10;
 8011f2c:	4374      	muls	r4, r6
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8011f2e:	437d      	muls	r5, r7
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8011f30:	0050      	lsls	r0, r2, #1
 8011f32:	1880      	adds	r0, r0, r2
    uint32_t v4 = (t3 * u3) >> 10;
 8011f34:	9a05      	ldr	r2, [sp, #20]
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8011f36:	4373      	muls	r3, r6
    uint32_t t3     = (t2 * t) >> 10;
 8011f38:	0aa4      	lsrs	r4, r4, #10
    uint32_t v4 = (t3 * u3) >> 10;
 8011f3a:	4354      	muls	r4, r2
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8011f3c:	0aad      	lsrs	r5, r5, #10
    uint32_t v1 = (t_rem3 * u0) >> 10;
 8011f3e:	4369      	muls	r1, r5
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8011f40:	005e      	lsls	r6, r3, #1
    uint32_t v4 = (t3 * u3) >> 10;
 8011f42:	0aa4      	lsrs	r4, r4, #10
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8011f44:	18f6      	adds	r6, r6, r3
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8011f46:	0d00      	lsrs	r0, r0, #20
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8011f48:	0d36      	lsrs	r6, r6, #20

    return v1 + v2 + v3 + v4;
 8011f4a:	1900      	adds	r0, r0, r4
 8011f4c:	1980      	adds	r0, r0, r6
    uint32_t v1 = (t_rem3 * u0) >> 10;
 8011f4e:	0a89      	lsrs	r1, r1, #10
    return v1 + v2 + v3 + v4;
 8011f50:	1840      	adds	r0, r0, r1
}
 8011f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011f54 <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
 8011f54:	b570      	push	{r4, r5, r6, lr}
 8011f56:	0004      	movs	r4, r0
 8011f58:	001d      	movs	r5, r3
    if(max_in >= min_in && x >= max_in) return max_out;
 8011f5a:	9804      	ldr	r0, [sp, #16]
 8011f5c:	428a      	cmp	r2, r1
 8011f5e:	da0d      	bge.n	8011f7c <lv_map+0x28>
    if(max_in >= min_in && x <= min_in) return min_out;

    if(max_in <= min_in && x <= max_in) return max_out;
 8011f60:	42a2      	cmp	r2, r4
 8011f62:	da0a      	bge.n	8011f7a <lv_map+0x26>
    if(max_in >= min_in && x <= min_in) return min_out;
 8011f64:	0018      	movs	r0, r3
    if(max_in <= min_in && x >= min_in) return min_out;
 8011f66:	42a1      	cmp	r1, r4
 8011f68:	dd07      	ble.n	8011f7a <lv_map+0x26>
     * To avoid rounding error reorder the operations:
     *   (x - min_in) * (delta_out / delta_min) + min_out
     */

    int32_t delta_in = max_in - min_in;
    int32_t delta_out = max_out - min_out;
 8011f6a:	9b04      	ldr	r3, [sp, #16]

    return ((x - min_in) * delta_out) / delta_in + min_out;
 8011f6c:	1a60      	subs	r0, r4, r1
    int32_t delta_out = max_out - min_out;
 8011f6e:	1b5c      	subs	r4, r3, r5
    return ((x - min_in) * delta_out) / delta_in + min_out;
 8011f70:	4360      	muls	r0, r4
    int32_t delta_in = max_in - min_in;
 8011f72:	1a51      	subs	r1, r2, r1
    return ((x - min_in) * delta_out) / delta_in + min_out;
 8011f74:	f7ee f962 	bl	800023c <__divsi3>
 8011f78:	1940      	adds	r0, r0, r5
}
 8011f7a:	bd70      	pop	{r4, r5, r6, pc}
    if(max_in >= min_in && x >= max_in) return max_out;
 8011f7c:	42a2      	cmp	r2, r4
 8011f7e:	ddfc      	ble.n	8011f7a <lv_map+0x26>
    if(max_in >= min_in && x <= min_in) return min_out;
 8011f80:	0018      	movs	r0, r3
 8011f82:	42a1      	cmp	r1, r4
 8011f84:	daf9      	bge.n	8011f7a <lv_map+0x26>
    if(max_in <= min_in && x <= max_in) return max_out;
 8011f86:	428a      	cmp	r2, r1
 8011f88:	d1ef      	bne.n	8011f6a <lv_map+0x16>
    if(max_in >= min_in && x >= max_in) return max_out;
 8011f8a:	9804      	ldr	r0, [sp, #16]
 8011f8c:	e7f5      	b.n	8011f7a <lv_map+0x26>
 8011f8e:	46c0      	nop			; (mov r8, r8)

08011f90 <lv_mem_init>:
#ifdef LV_MEM_POOL_ALLOC
    tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_POOL_ALLOC(LV_MEM_SIZE), LV_MEM_SIZE);
#else
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_ATTRIBUTE_LARGE_RAM_ARRAY MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 8011f90:	2190      	movs	r1, #144	; 0x90
{
 8011f92:	b510      	push	{r4, lr}
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 8011f94:	4803      	ldr	r0, [pc, #12]	; (8011fa4 <lv_mem_init+0x14>)
 8011f96:	01c9      	lsls	r1, r1, #7
 8011f98:	f001 f8b2 	bl	8013100 <lv_tlsf_create_with_pool>
 8011f9c:	4b02      	ldr	r3, [pc, #8]	; (8011fa8 <lv_mem_init+0x18>)
 8011f9e:	6018      	str	r0, [r3, #0]
#endif

#if LV_MEM_ADD_JUNK
    LV_LOG_WARN("LV_MEM_ADD_JUNK is enabled which makes LVGL much slower");
#endif
}
 8011fa0:	bd10      	pop	{r4, pc}
 8011fa2:	46c0      	nop			; (mov r8, r8)
 8011fa4:	20003484 	.word	0x20003484
 8011fa8:	20003480 	.word	0x20003480

08011fac <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
 8011fac:	b510      	push	{r4, lr}
 8011fae:	1e04      	subs	r4, r0, #0
    MEM_TRACE("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 8011fb0:	d101      	bne.n	8011fb6 <lv_mem_alloc+0xa>
        MEM_TRACE("using zero_mem");
        return &zero_mem;
 8011fb2:	480b      	ldr	r0, [pc, #44]	; (8011fe0 <lv_mem_alloc+0x34>)
        max_used = LV_MAX(cur_used, max_used);
#endif
        MEM_TRACE("allocated at %p", alloc);
    }
    return alloc;
}
 8011fb4:	bd10      	pop	{r4, pc}
    void * alloc = lv_tlsf_malloc(tlsf, size);
 8011fb6:	4b0b      	ldr	r3, [pc, #44]	; (8011fe4 <lv_mem_alloc+0x38>)
 8011fb8:	0021      	movs	r1, r4
 8011fba:	6818      	ldr	r0, [r3, #0]
 8011fbc:	f001 f93a 	bl	8013234 <lv_tlsf_malloc>
    if(alloc) {
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	d0f7      	beq.n	8011fb4 <lv_mem_alloc+0x8>
        cur_used += size;
 8011fc4:	4b08      	ldr	r3, [pc, #32]	; (8011fe8 <lv_mem_alloc+0x3c>)
 8011fc6:	681a      	ldr	r2, [r3, #0]
 8011fc8:	4694      	mov	ip, r2
        max_used = LV_MAX(cur_used, max_used);
 8011fca:	4a08      	ldr	r2, [pc, #32]	; (8011fec <lv_mem_alloc+0x40>)
        cur_used += size;
 8011fcc:	4464      	add	r4, ip
 8011fce:	601c      	str	r4, [r3, #0]
        max_used = LV_MAX(cur_used, max_used);
 8011fd0:	6813      	ldr	r3, [r2, #0]
 8011fd2:	42a3      	cmp	r3, r4
 8011fd4:	d301      	bcc.n	8011fda <lv_mem_alloc+0x2e>
 8011fd6:	6013      	str	r3, [r2, #0]
 8011fd8:	e7ec      	b.n	8011fb4 <lv_mem_alloc+0x8>
 8011fda:	0023      	movs	r3, r4
 8011fdc:	6013      	str	r3, [r2, #0]
 8011fde:	e7e9      	b.n	8011fb4 <lv_mem_alloc+0x8>
 8011fe0:	2000000c 	.word	0x2000000c
 8011fe4:	20003480 	.word	0x20003480
 8011fe8:	20003478 	.word	0x20003478
 8011fec:	2000347c 	.word	0x2000347c

08011ff0 <lv_mem_free>:
 * @param data pointer to an allocated memory
 */
void lv_mem_free(void * data)
{
    MEM_TRACE("freeing %p", data);
    if(data == &zero_mem) return;
 8011ff0:	4b0a      	ldr	r3, [pc, #40]	; (801201c <lv_mem_free+0x2c>)
{
 8011ff2:	0001      	movs	r1, r0
 8011ff4:	b510      	push	{r4, lr}
    if(data == &zero_mem) return;
 8011ff6:	4298      	cmp	r0, r3
 8011ff8:	d00b      	beq.n	8012012 <lv_mem_free+0x22>
    if(data == NULL) return;
 8011ffa:	2800      	cmp	r0, #0
 8011ffc:	d009      	beq.n	8012012 <lv_mem_free+0x22>

#if LV_MEM_CUSTOM == 0
#  if LV_MEM_ADD_JUNK
    lv_memset(data, 0xbb, lv_tlsf_block_size(data));
#  endif
    size_t size = lv_tlsf_free(tlsf, data);
 8011ffe:	4b08      	ldr	r3, [pc, #32]	; (8012020 <lv_mem_free+0x30>)
 8012000:	6818      	ldr	r0, [r3, #0]
 8012002:	f001 f99d 	bl	8013340 <lv_tlsf_free>
    if(cur_used > size) cur_used -= size;
 8012006:	4a07      	ldr	r2, [pc, #28]	; (8012024 <lv_mem_free+0x34>)
 8012008:	6813      	ldr	r3, [r2, #0]
 801200a:	4298      	cmp	r0, r3
 801200c:	d202      	bcs.n	8012014 <lv_mem_free+0x24>
 801200e:	1a18      	subs	r0, r3, r0
 8012010:	6010      	str	r0, [r2, #0]
    else cur_used = 0;
#else
    LV_MEM_CUSTOM_FREE(data);
#endif
}
 8012012:	bd10      	pop	{r4, pc}
    else cur_used = 0;
 8012014:	2300      	movs	r3, #0
 8012016:	6013      	str	r3, [r2, #0]
 8012018:	e7fb      	b.n	8012012 <lv_mem_free+0x22>
 801201a:	46c0      	nop			; (mov r8, r8)
 801201c:	2000000c 	.word	0x2000000c
 8012020:	20003480 	.word	0x20003480
 8012024:	20003478 	.word	0x20003478

08012028 <lv_mem_realloc>:
 * Its content will be copied to the new memory block and freed
 * @param new_size the desired new size in byte
 * @return pointer to the new memory
 */
void * lv_mem_realloc(void * data_p, size_t new_size)
{
 8012028:	b570      	push	{r4, r5, r6, lr}
 801202a:	0003      	movs	r3, r0
 801202c:	1e0c      	subs	r4, r1, #0
    if(data == &zero_mem) return;
 801202e:	4a1a      	ldr	r2, [pc, #104]	; (8012098 <lv_mem_realloc+0x70>)
    MEM_TRACE("reallocating %p with %lu size", data_p, (unsigned long)new_size);
    if(new_size == 0) {
 8012030:	d00a      	beq.n	8012048 <lv_mem_realloc+0x20>
        MEM_TRACE("using zero_mem");
        lv_mem_free(data_p);
        return &zero_mem;
    }

    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 8012032:	4290      	cmp	r0, r2
 8012034:	d01a      	beq.n	801206c <lv_mem_realloc+0x44>

#if LV_MEM_CUSTOM == 0
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 8012036:	4a19      	ldr	r2, [pc, #100]	; (801209c <lv_mem_realloc+0x74>)
 8012038:	6810      	ldr	r0, [r2, #0]
 801203a:	000a      	movs	r2, r1
 801203c:	0019      	movs	r1, r3
 801203e:	f001 fa07 	bl	8013450 <lv_tlsf_realloc>
 8012042:	0005      	movs	r5, r0
        return NULL;
    }

    MEM_TRACE("allocated at %p", new_p);
    return new_p;
}
 8012044:	0028      	movs	r0, r5
 8012046:	bd70      	pop	{r4, r5, r6, pc}
    if(data == &zero_mem) return;
 8012048:	0005      	movs	r5, r0
 801204a:	4290      	cmp	r0, r2
 801204c:	d0fa      	beq.n	8012044 <lv_mem_realloc+0x1c>
    if(data == NULL) return;
 801204e:	0015      	movs	r5, r2
 8012050:	2800      	cmp	r0, #0
 8012052:	d0f7      	beq.n	8012044 <lv_mem_realloc+0x1c>
    size_t size = lv_tlsf_free(tlsf, data);
 8012054:	4a11      	ldr	r2, [pc, #68]	; (801209c <lv_mem_realloc+0x74>)
 8012056:	0019      	movs	r1, r3
 8012058:	6810      	ldr	r0, [r2, #0]
 801205a:	f001 f971 	bl	8013340 <lv_tlsf_free>
    if(cur_used > size) cur_used -= size;
 801205e:	4a10      	ldr	r2, [pc, #64]	; (80120a0 <lv_mem_realloc+0x78>)
 8012060:	6813      	ldr	r3, [r2, #0]
 8012062:	4298      	cmp	r0, r3
 8012064:	d213      	bcs.n	801208e <lv_mem_realloc+0x66>
 8012066:	1a18      	subs	r0, r3, r0
 8012068:	6010      	str	r0, [r2, #0]
 801206a:	e7eb      	b.n	8012044 <lv_mem_realloc+0x1c>
    void * alloc = lv_tlsf_malloc(tlsf, size);
 801206c:	4b0b      	ldr	r3, [pc, #44]	; (801209c <lv_mem_realloc+0x74>)
 801206e:	6818      	ldr	r0, [r3, #0]
 8012070:	f001 f8e0 	bl	8013234 <lv_tlsf_malloc>
 8012074:	1e05      	subs	r5, r0, #0
    if(alloc) {
 8012076:	d0e5      	beq.n	8012044 <lv_mem_realloc+0x1c>
        cur_used += size;
 8012078:	4b09      	ldr	r3, [pc, #36]	; (80120a0 <lv_mem_realloc+0x78>)
 801207a:	681a      	ldr	r2, [r3, #0]
 801207c:	4694      	mov	ip, r2
        max_used = LV_MAX(cur_used, max_used);
 801207e:	4a09      	ldr	r2, [pc, #36]	; (80120a4 <lv_mem_realloc+0x7c>)
        cur_used += size;
 8012080:	4464      	add	r4, ip
 8012082:	601c      	str	r4, [r3, #0]
        max_used = LV_MAX(cur_used, max_used);
 8012084:	6813      	ldr	r3, [r2, #0]
 8012086:	42a3      	cmp	r3, r4
 8012088:	d303      	bcc.n	8012092 <lv_mem_realloc+0x6a>
 801208a:	6013      	str	r3, [r2, #0]
 801208c:	e7da      	b.n	8012044 <lv_mem_realloc+0x1c>
    else cur_used = 0;
 801208e:	6014      	str	r4, [r2, #0]
 8012090:	e7d8      	b.n	8012044 <lv_mem_realloc+0x1c>
        max_used = LV_MAX(cur_used, max_used);
 8012092:	0023      	movs	r3, r4
 8012094:	6013      	str	r3, [r2, #0]
 8012096:	e7d5      	b.n	8012044 <lv_mem_realloc+0x1c>
 8012098:	2000000c 	.word	0x2000000c
 801209c:	20003480 	.word	0x20003480
 80120a0:	20003478 	.word	0x20003478
 80120a4:	2000347c 	.word	0x2000347c

080120a8 <lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * lv_mem_buf_get(uint32_t size)
{
 80120a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120aa:	1e07      	subs	r7, r0, #0
    if(size == 0) return NULL;
 80120ac:	d100      	bne.n	80120b0 <lv_mem_buf_get+0x8>
 80120ae:	e07a      	b.n	80121a6 <lv_mem_buf_get+0xfe>

    MEM_TRACE("begin, getting %d bytes", size);

    /*Try to find a free buffer with suitable size*/
    int8_t i_guess = -1;
 80120b0:	2201      	movs	r2, #1
 80120b2:	4252      	negs	r2, r2
    if(size == 0) return NULL;
 80120b4:	2300      	movs	r3, #0
    int8_t i_guess = -1;
 80120b6:	4694      	mov	ip, r2
 80120b8:	494c      	ldr	r1, [pc, #304]	; (80121ec <lv_mem_buf_get+0x144>)
 80120ba:	1f0e      	subs	r6, r1, #4
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 80120bc:	00dc      	lsls	r4, r3, #3
 80120be:	1935      	adds	r5, r6, r4
 80120c0:	79aa      	ldrb	r2, [r5, #6]
 80120c2:	1c10      	adds	r0, r2, #0
 80120c4:	07d2      	lsls	r2, r2, #31
 80120c6:	d40f      	bmi.n	80120e8 <lv_mem_buf_get+0x40>
 80120c8:	880a      	ldrh	r2, [r1, #0]
 80120ca:	42ba      	cmp	r2, r7
 80120cc:	d30c      	bcc.n	80120e8 <lv_mem_buf_get+0x40>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 80120ce:	d100      	bne.n	80120d2 <lv_mem_buf_get+0x2a>
 80120d0:	e06b      	b.n	80121aa <lv_mem_buf_get+0x102>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
                return LV_GC_ROOT(lv_mem_buf[i]).p;
            }
            else if(i_guess < 0) {
 80120d2:	4660      	mov	r0, ip
 80120d4:	3001      	adds	r0, #1
 80120d6:	d005      	beq.n	80120e4 <lv_mem_buf_get+0x3c>
                i_guess = i;
            }
            /*If size of `i` is closer to `size` prefer it*/
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 80120d8:	4660      	mov	r0, ip
 80120da:	00c0      	lsls	r0, r0, #3
 80120dc:	1830      	adds	r0, r6, r0
 80120de:	8880      	ldrh	r0, [r0, #4]
 80120e0:	4290      	cmp	r0, r2
 80120e2:	d901      	bls.n	80120e8 <lv_mem_buf_get+0x40>
                i_guess = i;
 80120e4:	b25a      	sxtb	r2, r3
 80120e6:	4694      	mov	ip, r2
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80120e8:	3301      	adds	r3, #1
 80120ea:	3108      	adds	r1, #8
 80120ec:	2b10      	cmp	r3, #16
 80120ee:	d1e5      	bne.n	80120bc <lv_mem_buf_get+0x14>
            }
        }
    }

    if(i_guess >= 0) {
 80120f0:	4663      	mov	r3, ip
 80120f2:	3301      	adds	r3, #1
 80120f4:	d13d      	bne.n	8012172 <lv_mem_buf_get+0xca>
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
    }

    /*Reallocate a free buffer*/
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 80120f6:	79b3      	ldrb	r3, [r6, #6]
 80120f8:	07db      	lsls	r3, r3, #31
 80120fa:	d543      	bpl.n	8012184 <lv_mem_buf_get+0xdc>
 80120fc:	7bb3      	ldrb	r3, [r6, #14]
 80120fe:	07db      	lsls	r3, r3, #31
 8012100:	d55a      	bpl.n	80121b8 <lv_mem_buf_get+0x110>
 8012102:	7db3      	ldrb	r3, [r6, #22]
 8012104:	07db      	lsls	r3, r3, #31
 8012106:	d559      	bpl.n	80121bc <lv_mem_buf_get+0x114>
 8012108:	7fb3      	ldrb	r3, [r6, #30]
 801210a:	07db      	lsls	r3, r3, #31
 801210c:	d558      	bpl.n	80121c0 <lv_mem_buf_get+0x118>
 801210e:	2326      	movs	r3, #38	; 0x26
 8012110:	5cf3      	ldrb	r3, [r6, r3]
 8012112:	07db      	lsls	r3, r3, #31
 8012114:	d556      	bpl.n	80121c4 <lv_mem_buf_get+0x11c>
 8012116:	232e      	movs	r3, #46	; 0x2e
 8012118:	5cf3      	ldrb	r3, [r6, r3]
 801211a:	07db      	lsls	r3, r3, #31
 801211c:	d554      	bpl.n	80121c8 <lv_mem_buf_get+0x120>
 801211e:	2336      	movs	r3, #54	; 0x36
 8012120:	5cf3      	ldrb	r3, [r6, r3]
 8012122:	07db      	lsls	r3, r3, #31
 8012124:	d556      	bpl.n	80121d4 <lv_mem_buf_get+0x12c>
 8012126:	233e      	movs	r3, #62	; 0x3e
 8012128:	5cf3      	ldrb	r3, [r6, r3]
 801212a:	07db      	lsls	r3, r3, #31
 801212c:	d54e      	bpl.n	80121cc <lv_mem_buf_get+0x124>
 801212e:	2346      	movs	r3, #70	; 0x46
 8012130:	5cf3      	ldrb	r3, [r6, r3]
 8012132:	07db      	lsls	r3, r3, #31
 8012134:	d54c      	bpl.n	80121d0 <lv_mem_buf_get+0x128>
 8012136:	234e      	movs	r3, #78	; 0x4e
 8012138:	5cf3      	ldrb	r3, [r6, r3]
 801213a:	07db      	lsls	r3, r3, #31
 801213c:	d54e      	bpl.n	80121dc <lv_mem_buf_get+0x134>
 801213e:	2356      	movs	r3, #86	; 0x56
 8012140:	5cf3      	ldrb	r3, [r6, r3]
 8012142:	07db      	lsls	r3, r3, #31
 8012144:	d548      	bpl.n	80121d8 <lv_mem_buf_get+0x130>
 8012146:	235e      	movs	r3, #94	; 0x5e
 8012148:	5cf3      	ldrb	r3, [r6, r3]
 801214a:	07db      	lsls	r3, r3, #31
 801214c:	d532      	bpl.n	80121b4 <lv_mem_buf_get+0x10c>
 801214e:	2366      	movs	r3, #102	; 0x66
 8012150:	5cf3      	ldrb	r3, [r6, r3]
 8012152:	07db      	lsls	r3, r3, #31
 8012154:	d544      	bpl.n	80121e0 <lv_mem_buf_get+0x138>
 8012156:	236e      	movs	r3, #110	; 0x6e
 8012158:	5cf3      	ldrb	r3, [r6, r3]
 801215a:	07db      	lsls	r3, r3, #31
 801215c:	d544      	bpl.n	80121e8 <lv_mem_buf_get+0x140>
 801215e:	2376      	movs	r3, #118	; 0x76
 8012160:	5cf3      	ldrb	r3, [r6, r3]
 8012162:	07db      	lsls	r3, r3, #31
 8012164:	d53e      	bpl.n	80121e4 <lv_mem_buf_get+0x13c>
 8012166:	237e      	movs	r3, #126	; 0x7e
 8012168:	5cf3      	ldrb	r3, [r6, r3]
 801216a:	240f      	movs	r4, #15
 801216c:	07db      	lsls	r3, r3, #31
 801216e:	d50a      	bpl.n	8012186 <lv_mem_buf_get+0xde>
            return LV_GC_ROOT(lv_mem_buf[i]).p;
        }
    }

    LV_LOG_ERROR("no more buffers. (increase LV_MEM_BUF_MAX_NUM)");
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 8012170:	e7fe      	b.n	8012170 <lv_mem_buf_get+0xc8>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8012172:	4663      	mov	r3, ip
 8012174:	2001      	movs	r0, #1
 8012176:	00db      	lsls	r3, r3, #3
 8012178:	18f1      	adds	r1, r6, r3
 801217a:	798a      	ldrb	r2, [r1, #6]
 801217c:	4302      	orrs	r2, r0
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 801217e:	58f0      	ldr	r0, [r6, r3]
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8012180:	718a      	strb	r2, [r1, #6]
    return NULL;
}
 8012182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 8012184:	2400      	movs	r4, #0
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 8012186:	00e4      	lsls	r4, r4, #3
 8012188:	0039      	movs	r1, r7
 801218a:	5930      	ldr	r0, [r6, r4]
 801218c:	f7ff ff4c 	bl	8012028 <lv_mem_realloc>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 8012190:	2800      	cmp	r0, #0
 8012192:	d007      	beq.n	80121a4 <lv_mem_buf_get+0xfc>
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8012194:	2101      	movs	r1, #1
 8012196:	1933      	adds	r3, r6, r4
 8012198:	799a      	ldrb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 801219a:	809f      	strh	r7, [r3, #4]
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 801219c:	430a      	orrs	r2, r1
 801219e:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 80121a0:	5130      	str	r0, [r6, r4]
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 80121a2:	e7ee      	b.n	8012182 <lv_mem_buf_get+0xda>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 80121a4:	e7fe      	b.n	80121a4 <lv_mem_buf_get+0xfc>
    if(size == 0) return NULL;
 80121a6:	2000      	movs	r0, #0
 80121a8:	e7eb      	b.n	8012182 <lv_mem_buf_get+0xda>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 80121aa:	2301      	movs	r3, #1
 80121ac:	4318      	orrs	r0, r3
 80121ae:	71a8      	strb	r0, [r5, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 80121b0:	5930      	ldr	r0, [r6, r4]
 80121b2:	e7e6      	b.n	8012182 <lv_mem_buf_get+0xda>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 80121b4:	240b      	movs	r4, #11
 80121b6:	e7e6      	b.n	8012186 <lv_mem_buf_get+0xde>
 80121b8:	2401      	movs	r4, #1
 80121ba:	e7e4      	b.n	8012186 <lv_mem_buf_get+0xde>
 80121bc:	2402      	movs	r4, #2
 80121be:	e7e2      	b.n	8012186 <lv_mem_buf_get+0xde>
 80121c0:	2403      	movs	r4, #3
 80121c2:	e7e0      	b.n	8012186 <lv_mem_buf_get+0xde>
 80121c4:	2404      	movs	r4, #4
 80121c6:	e7de      	b.n	8012186 <lv_mem_buf_get+0xde>
 80121c8:	2405      	movs	r4, #5
 80121ca:	e7dc      	b.n	8012186 <lv_mem_buf_get+0xde>
 80121cc:	2407      	movs	r4, #7
 80121ce:	e7da      	b.n	8012186 <lv_mem_buf_get+0xde>
 80121d0:	2408      	movs	r4, #8
 80121d2:	e7d8      	b.n	8012186 <lv_mem_buf_get+0xde>
 80121d4:	2406      	movs	r4, #6
 80121d6:	e7d6      	b.n	8012186 <lv_mem_buf_get+0xde>
 80121d8:	240a      	movs	r4, #10
 80121da:	e7d4      	b.n	8012186 <lv_mem_buf_get+0xde>
 80121dc:	2409      	movs	r4, #9
 80121de:	e7d2      	b.n	8012186 <lv_mem_buf_get+0xde>
 80121e0:	240c      	movs	r4, #12
 80121e2:	e7d0      	b.n	8012186 <lv_mem_buf_get+0xde>
 80121e4:	240e      	movs	r4, #14
 80121e6:	e7ce      	b.n	8012186 <lv_mem_buf_get+0xde>
 80121e8:	240d      	movs	r4, #13
 80121ea:	e7cc      	b.n	8012186 <lv_mem_buf_get+0xde>
 80121ec:	200033fc 	.word	0x200033fc

080121f0 <lv_mem_buf_release>:
void lv_mem_buf_release(void * p)
{
    MEM_TRACE("begin (address: %p)", p);

    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 80121f0:	4b2b      	ldr	r3, [pc, #172]	; (80122a0 <lv_mem_buf_release+0xb0>)
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	4290      	cmp	r0, r2
 80121f6:	d02d      	beq.n	8012254 <lv_mem_buf_release+0x64>
 80121f8:	689a      	ldr	r2, [r3, #8]
 80121fa:	4290      	cmp	r0, r2
 80121fc:	d032      	beq.n	8012264 <lv_mem_buf_release+0x74>
 80121fe:	691a      	ldr	r2, [r3, #16]
 8012200:	4290      	cmp	r0, r2
 8012202:	d033      	beq.n	801226c <lv_mem_buf_release+0x7c>
 8012204:	699a      	ldr	r2, [r3, #24]
 8012206:	4290      	cmp	r0, r2
 8012208:	d032      	beq.n	8012270 <lv_mem_buf_release+0x80>
 801220a:	6a1a      	ldr	r2, [r3, #32]
 801220c:	4290      	cmp	r0, r2
 801220e:	d031      	beq.n	8012274 <lv_mem_buf_release+0x84>
 8012210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012212:	4290      	cmp	r0, r2
 8012214:	d030      	beq.n	8012278 <lv_mem_buf_release+0x88>
 8012216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012218:	4290      	cmp	r0, r2
 801221a:	d02f      	beq.n	801227c <lv_mem_buf_release+0x8c>
 801221c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801221e:	4290      	cmp	r0, r2
 8012220:	d02e      	beq.n	8012280 <lv_mem_buf_release+0x90>
 8012222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012224:	4290      	cmp	r0, r2
 8012226:	d02d      	beq.n	8012284 <lv_mem_buf_release+0x94>
 8012228:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801222a:	4290      	cmp	r0, r2
 801222c:	d02c      	beq.n	8012288 <lv_mem_buf_release+0x98>
 801222e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012230:	4290      	cmp	r0, r2
 8012232:	d02b      	beq.n	801228c <lv_mem_buf_release+0x9c>
 8012234:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012236:	4290      	cmp	r0, r2
 8012238:	d02a      	beq.n	8012290 <lv_mem_buf_release+0xa0>
 801223a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801223c:	4290      	cmp	r0, r2
 801223e:	d013      	beq.n	8012268 <lv_mem_buf_release+0x78>
 8012240:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8012242:	4290      	cmp	r0, r2
 8012244:	d026      	beq.n	8012294 <lv_mem_buf_release+0xa4>
 8012246:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012248:	4290      	cmp	r0, r2
 801224a:	d025      	beq.n	8012298 <lv_mem_buf_release+0xa8>
 801224c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801224e:	4282      	cmp	r2, r0
 8012250:	d024      	beq.n	801229c <lv_mem_buf_release+0xac>
            return;
        }
    }

    LV_LOG_ERROR("p is not a known buffer");
}
 8012252:	4770      	bx	lr
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8012254:	2200      	movs	r2, #0
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8012256:	2101      	movs	r1, #1
 8012258:	00d2      	lsls	r2, r2, #3
 801225a:	189b      	adds	r3, r3, r2
 801225c:	799a      	ldrb	r2, [r3, #6]
 801225e:	438a      	bics	r2, r1
 8012260:	719a      	strb	r2, [r3, #6]
            return;
 8012262:	e7f6      	b.n	8012252 <lv_mem_buf_release+0x62>
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8012264:	2201      	movs	r2, #1
 8012266:	e7f6      	b.n	8012256 <lv_mem_buf_release+0x66>
 8012268:	220c      	movs	r2, #12
 801226a:	e7f4      	b.n	8012256 <lv_mem_buf_release+0x66>
 801226c:	2202      	movs	r2, #2
 801226e:	e7f2      	b.n	8012256 <lv_mem_buf_release+0x66>
 8012270:	2203      	movs	r2, #3
 8012272:	e7f0      	b.n	8012256 <lv_mem_buf_release+0x66>
 8012274:	2204      	movs	r2, #4
 8012276:	e7ee      	b.n	8012256 <lv_mem_buf_release+0x66>
 8012278:	2205      	movs	r2, #5
 801227a:	e7ec      	b.n	8012256 <lv_mem_buf_release+0x66>
 801227c:	2206      	movs	r2, #6
 801227e:	e7ea      	b.n	8012256 <lv_mem_buf_release+0x66>
 8012280:	2207      	movs	r2, #7
 8012282:	e7e8      	b.n	8012256 <lv_mem_buf_release+0x66>
 8012284:	2208      	movs	r2, #8
 8012286:	e7e6      	b.n	8012256 <lv_mem_buf_release+0x66>
 8012288:	2209      	movs	r2, #9
 801228a:	e7e4      	b.n	8012256 <lv_mem_buf_release+0x66>
 801228c:	220a      	movs	r2, #10
 801228e:	e7e2      	b.n	8012256 <lv_mem_buf_release+0x66>
 8012290:	220b      	movs	r2, #11
 8012292:	e7e0      	b.n	8012256 <lv_mem_buf_release+0x66>
 8012294:	220d      	movs	r2, #13
 8012296:	e7de      	b.n	8012256 <lv_mem_buf_release+0x66>
 8012298:	220e      	movs	r2, #14
 801229a:	e7dc      	b.n	8012256 <lv_mem_buf_release+0x66>
 801229c:	220f      	movs	r2, #15
 801229e:	e7da      	b.n	8012256 <lv_mem_buf_release+0x66>
 80122a0:	200033f8 	.word	0x200033f8

080122a4 <lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void lv_mem_buf_free_all(void)
{
 80122a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122a6:	4647      	mov	r7, r8
 80122a8:	46ce      	mov	lr, r9
    if(data == &zero_mem) return;
 80122aa:	4b16      	ldr	r3, [pc, #88]	; (8012304 <lv_mem_buf_free_all+0x60>)
{
 80122ac:	b580      	push	{r7, lr}
    if(data == &zero_mem) return;
 80122ae:	4698      	mov	r8, r3
 80122b0:	4f15      	ldr	r7, [pc, #84]	; (8012308 <lv_mem_buf_free_all+0x64>)
    size_t size = lv_tlsf_free(tlsf, data);
 80122b2:	4b16      	ldr	r3, [pc, #88]	; (801230c <lv_mem_buf_free_all+0x68>)
 80122b4:	003c      	movs	r4, r7
{
 80122b6:	2500      	movs	r5, #0
    size_t size = lv_tlsf_free(tlsf, data);
 80122b8:	4699      	mov	r9, r3
    if(cur_used > size) cur_used -= size;
 80122ba:	4e15      	ldr	r6, [pc, #84]	; (8012310 <lv_mem_buf_free_all+0x6c>)
 80122bc:	e00e      	b.n	80122dc <lv_mem_buf_free_all+0x38>
 80122be:	1a18      	subs	r0, r3, r0
 80122c0:	6030      	str	r0, [r6, #0]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 80122c2:	2100      	movs	r1, #0
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 80122c4:	2001      	movs	r0, #1
 80122c6:	00eb      	lsls	r3, r5, #3
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 80122c8:	6021      	str	r1, [r4, #0]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 80122ca:	18fb      	adds	r3, r7, r3
 80122cc:	799a      	ldrb	r2, [r3, #6]
 80122ce:	4382      	bics	r2, r0
 80122d0:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 80122d2:	80a1      	strh	r1, [r4, #4]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80122d4:	3501      	adds	r5, #1
 80122d6:	3408      	adds	r4, #8
 80122d8:	2d10      	cmp	r5, #16
 80122da:	d00e      	beq.n	80122fa <lv_mem_buf_free_all+0x56>
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 80122dc:	6821      	ldr	r1, [r4, #0]
 80122de:	2900      	cmp	r1, #0
 80122e0:	d0f8      	beq.n	80122d4 <lv_mem_buf_free_all+0x30>
    if(data == &zero_mem) return;
 80122e2:	4541      	cmp	r1, r8
 80122e4:	d0ed      	beq.n	80122c2 <lv_mem_buf_free_all+0x1e>
    size_t size = lv_tlsf_free(tlsf, data);
 80122e6:	464b      	mov	r3, r9
 80122e8:	6818      	ldr	r0, [r3, #0]
 80122ea:	f001 f829 	bl	8013340 <lv_tlsf_free>
    if(cur_used > size) cur_used -= size;
 80122ee:	6833      	ldr	r3, [r6, #0]
 80122f0:	4298      	cmp	r0, r3
 80122f2:	d3e4      	bcc.n	80122be <lv_mem_buf_free_all+0x1a>
    else cur_used = 0;
 80122f4:	2300      	movs	r3, #0
 80122f6:	6033      	str	r3, [r6, #0]
 80122f8:	e7e3      	b.n	80122c2 <lv_mem_buf_free_all+0x1e>
        }
    }
}
 80122fa:	bcc0      	pop	{r6, r7}
 80122fc:	46b9      	mov	r9, r7
 80122fe:	46b0      	mov	r8, r6
 8012300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012302:	46c0      	nop			; (mov r8, r8)
 8012304:	2000000c 	.word	0x2000000c
 8012308:	200033f8 	.word	0x200033f8
 801230c:	20003480 	.word	0x20003480
 8012310:	20003478 	.word	0x20003478

08012314 <lv_memcpy>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * lv_memcpy(void * dst, const void * src, size_t len)
{
 8012314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012316:	468c      	mov	ip, r1
 8012318:	46de      	mov	lr, fp
 801231a:	4645      	mov	r5, r8
 801231c:	4657      	mov	r7, sl
 801231e:	464e      	mov	r6, r9
    uint8_t * d8 = dst;
    const uint8_t * s8 = src;

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8012320:	2103      	movs	r1, #3
{
 8012322:	b5e0      	push	{r5, r6, r7, lr}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8012324:	0004      	movs	r4, r0
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 8012326:	4665      	mov	r5, ip
{
 8012328:	4683      	mov	fp, r0
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 801232a:	4663      	mov	r3, ip
{
 801232c:	b087      	sub	sp, #28
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 801232e:	400c      	ands	r4, r1
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 8012330:	400d      	ands	r5, r1

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 8012332:	42ac      	cmp	r4, r5
 8012334:	d100      	bne.n	8012338 <lv_memcpy+0x24>
 8012336:	e097      	b.n	8012468 <lv_memcpy+0x154>
        while(len > 32) {
 8012338:	2a20      	cmp	r2, #32
 801233a:	d800      	bhi.n	801233e <lv_memcpy+0x2a>
 801233c:	e132      	b.n	80125a4 <lv_memcpy+0x290>
 801233e:	4664      	mov	r4, ip
 8012340:	4304      	orrs	r4, r0
 8012342:	4221      	tst	r1, r4
 8012344:	d000      	beq.n	8012348 <lv_memcpy+0x34>
 8012346:	e140      	b.n	80125ca <lv_memcpy+0x2b6>
 8012348:	0001      	movs	r1, r0
 801234a:	311f      	adds	r1, #31
 801234c:	1ac9      	subs	r1, r1, r3
 801234e:	293e      	cmp	r1, #62	; 0x3e
 8012350:	d800      	bhi.n	8012354 <lv_memcpy+0x40>
 8012352:	e13a      	b.n	80125ca <lv_memcpy+0x2b6>
 8012354:	2121      	movs	r1, #33	; 0x21
 8012356:	4249      	negs	r1, r1
 8012358:	4688      	mov	r8, r1
 801235a:	4490      	add	r8, r2
 801235c:	4641      	mov	r1, r8
 801235e:	9104      	str	r1, [sp, #16]
 8012360:	0949      	lsrs	r1, r1, #5
 8012362:	3101      	adds	r1, #1
 8012364:	9103      	str	r1, [sp, #12]
 8012366:	4682      	mov	sl, r0
 8012368:	2100      	movs	r1, #0
 801236a:	4693      	mov	fp, r2
            REPEAT8(COPY8);
 801236c:	685a      	ldr	r2, [r3, #4]
 801236e:	691f      	ldr	r7, [r3, #16]
 8012370:	4691      	mov	r9, r2
 8012372:	689a      	ldr	r2, [r3, #8]
 8012374:	695e      	ldr	r6, [r3, #20]
 8012376:	4690      	mov	r8, r2
 8012378:	68da      	ldr	r2, [r3, #12]
 801237a:	699d      	ldr	r5, [r3, #24]
 801237c:	9200      	str	r2, [sp, #0]
 801237e:	681a      	ldr	r2, [r3, #0]
 8012380:	69dc      	ldr	r4, [r3, #28]
 8012382:	6002      	str	r2, [r0, #0]
 8012384:	464a      	mov	r2, r9
 8012386:	6042      	str	r2, [r0, #4]
 8012388:	4642      	mov	r2, r8
 801238a:	6082      	str	r2, [r0, #8]
 801238c:	9a00      	ldr	r2, [sp, #0]
 801238e:	3101      	adds	r1, #1
 8012390:	60c2      	str	r2, [r0, #12]
 8012392:	9a03      	ldr	r2, [sp, #12]
 8012394:	6107      	str	r7, [r0, #16]
 8012396:	6146      	str	r6, [r0, #20]
 8012398:	6185      	str	r5, [r0, #24]
 801239a:	61c4      	str	r4, [r0, #28]
        while(len > 32) {
 801239c:	3320      	adds	r3, #32
 801239e:	3020      	adds	r0, #32
 80123a0:	428a      	cmp	r2, r1
 80123a2:	d8e3      	bhi.n	801236c <lv_memcpy+0x58>
 80123a4:	465a      	mov	r2, fp
 80123a6:	46d3      	mov	fp, sl
 80123a8:	9b04      	ldr	r3, [sp, #16]
 80123aa:	3a20      	subs	r2, #32
 80123ac:	0959      	lsrs	r1, r3, #5
            REPEAT8(COPY8);
            REPEAT8(COPY8);
            REPEAT8(COPY8);
            len -= 32;
 80123ae:	014b      	lsls	r3, r1, #5
 80123b0:	1ad2      	subs	r2, r2, r3
            REPEAT8(COPY8);
 80123b2:	465b      	mov	r3, fp
 80123b4:	3101      	adds	r1, #1
 80123b6:	0149      	lsls	r1, r1, #5
 80123b8:	185b      	adds	r3, r3, r1
 80123ba:	448c      	add	ip, r1
 80123bc:	4660      	mov	r0, ip
 80123be:	2103      	movs	r1, #3
 80123c0:	4318      	orrs	r0, r3
 80123c2:	4001      	ands	r1, r0
 80123c4:	4248      	negs	r0, r1
 80123c6:	4141      	adcs	r1, r0
 80123c8:	4660      	mov	r0, ip
 80123ca:	1c44      	adds	r4, r0, #1
 80123cc:	2002      	movs	r0, #2
 80123ce:	1b1c      	subs	r4, r3, r4
 80123d0:	42a0      	cmp	r0, r4
 80123d2:	4180      	sbcs	r0, r0
 80123d4:	4240      	negs	r0, r0
 80123d6:	4208      	tst	r0, r1
 80123d8:	d100      	bne.n	80123dc <lv_memcpy+0xc8>
 80123da:	e0ee      	b.n	80125ba <lv_memcpy+0x2a6>
 80123dc:	1e51      	subs	r1, r2, #1
 80123de:	2908      	cmp	r1, #8
 80123e0:	d800      	bhi.n	80123e4 <lv_memcpy+0xd0>
 80123e2:	e0ea      	b.n	80125ba <lv_memcpy+0x2a6>
        }
        while(len) {
            COPY8
 80123e4:	4660      	mov	r0, ip
 80123e6:	6800      	ldr	r0, [r0, #0]
 80123e8:	0891      	lsrs	r1, r2, #2
 80123ea:	6018      	str	r0, [r3, #0]
        while(len) {
 80123ec:	2901      	cmp	r1, #1
 80123ee:	d020      	beq.n	8012432 <lv_memcpy+0x11e>
            COPY8
 80123f0:	4660      	mov	r0, ip
 80123f2:	6840      	ldr	r0, [r0, #4]
 80123f4:	6058      	str	r0, [r3, #4]
        while(len) {
 80123f6:	2902      	cmp	r1, #2
 80123f8:	d01b      	beq.n	8012432 <lv_memcpy+0x11e>
            COPY8
 80123fa:	4660      	mov	r0, ip
 80123fc:	6880      	ldr	r0, [r0, #8]
 80123fe:	6098      	str	r0, [r3, #8]
        while(len) {
 8012400:	2903      	cmp	r1, #3
 8012402:	d016      	beq.n	8012432 <lv_memcpy+0x11e>
            COPY8
 8012404:	4660      	mov	r0, ip
 8012406:	68c0      	ldr	r0, [r0, #12]
 8012408:	60d8      	str	r0, [r3, #12]
        while(len) {
 801240a:	2904      	cmp	r1, #4
 801240c:	d011      	beq.n	8012432 <lv_memcpy+0x11e>
            COPY8
 801240e:	4660      	mov	r0, ip
 8012410:	6900      	ldr	r0, [r0, #16]
 8012412:	6118      	str	r0, [r3, #16]
        while(len) {
 8012414:	2905      	cmp	r1, #5
 8012416:	d00c      	beq.n	8012432 <lv_memcpy+0x11e>
            COPY8
 8012418:	4660      	mov	r0, ip
 801241a:	6940      	ldr	r0, [r0, #20]
 801241c:	6158      	str	r0, [r3, #20]
        while(len) {
 801241e:	2906      	cmp	r1, #6
 8012420:	d007      	beq.n	8012432 <lv_memcpy+0x11e>
            COPY8
 8012422:	4660      	mov	r0, ip
 8012424:	6980      	ldr	r0, [r0, #24]
 8012426:	6198      	str	r0, [r3, #24]
        while(len) {
 8012428:	2907      	cmp	r1, #7
 801242a:	d002      	beq.n	8012432 <lv_memcpy+0x11e>
            COPY8
 801242c:	4661      	mov	r1, ip
 801242e:	69c9      	ldr	r1, [r1, #28]
 8012430:	61d9      	str	r1, [r3, #28]
        while(len) {
 8012432:	2103      	movs	r1, #3
 8012434:	0010      	movs	r0, r2
 8012436:	4388      	bics	r0, r1
 8012438:	4661      	mov	r1, ip
 801243a:	1a14      	subs	r4, r2, r0
 801243c:	181b      	adds	r3, r3, r0
 801243e:	1809      	adds	r1, r1, r0
 8012440:	4282      	cmp	r2, r0
 8012442:	d009      	beq.n	8012458 <lv_memcpy+0x144>
            COPY8
 8012444:	780a      	ldrb	r2, [r1, #0]
 8012446:	701a      	strb	r2, [r3, #0]
        while(len) {
 8012448:	2c01      	cmp	r4, #1
 801244a:	d005      	beq.n	8012458 <lv_memcpy+0x144>
            COPY8
 801244c:	784a      	ldrb	r2, [r1, #1]
 801244e:	705a      	strb	r2, [r3, #1]
        while(len) {
 8012450:	2c02      	cmp	r4, #2
 8012452:	d001      	beq.n	8012458 <lv_memcpy+0x144>
            COPY8
 8012454:	788a      	ldrb	r2, [r1, #2]
 8012456:	709a      	strb	r2, [r3, #2]
        COPY8
        len--;
    }

    return dst;
}
 8012458:	4658      	mov	r0, fp
 801245a:	b007      	add	sp, #28
 801245c:	bcf0      	pop	{r4, r5, r6, r7}
 801245e:	46bb      	mov	fp, r7
 8012460:	46b2      	mov	sl, r6
 8012462:	46a9      	mov	r9, r5
 8012464:	46a0      	mov	r8, r4
 8012466:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(d_align) {
 8012468:	4681      	mov	r9, r0
 801246a:	2c00      	cmp	r4, #0
 801246c:	d029      	beq.n	80124c2 <lv_memcpy+0x1ae>
        while(d_align && len) {
 801246e:	2a00      	cmp	r2, #0
 8012470:	d0f2      	beq.n	8012458 <lv_memcpy+0x144>
            COPY8;
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	7003      	strb	r3, [r0, #0]
 8012476:	2301      	movs	r3, #1
 8012478:	445b      	add	r3, fp
 801247a:	4699      	mov	r9, r3
 801247c:	4663      	mov	r3, ip
            d_align--;
 801247e:	1b08      	subs	r0, r1, r4
            COPY8;
 8012480:	1c5d      	adds	r5, r3, #1
            len--;
 8012482:	1e53      	subs	r3, r2, #1
        while(d_align && len) {
 8012484:	42a1      	cmp	r1, r4
 8012486:	d100      	bne.n	801248a <lv_memcpy+0x176>
 8012488:	e10f      	b.n	80126aa <lv_memcpy+0x396>
 801248a:	2b00      	cmp	r3, #0
 801248c:	d0e4      	beq.n	8012458 <lv_memcpy+0x144>
            COPY8;
 801248e:	4663      	mov	r3, ip
 8012490:	4659      	mov	r1, fp
 8012492:	785b      	ldrb	r3, [r3, #1]
 8012494:	704b      	strb	r3, [r1, #1]
 8012496:	2302      	movs	r3, #2
 8012498:	445b      	add	r3, fp
 801249a:	4699      	mov	r9, r3
 801249c:	4663      	mov	r3, ip
 801249e:	1c99      	adds	r1, r3, #2
            len--;
 80124a0:	1e93      	subs	r3, r2, #2
        while(d_align && len) {
 80124a2:	2801      	cmp	r0, #1
 80124a4:	d100      	bne.n	80124a8 <lv_memcpy+0x194>
 80124a6:	e0fd      	b.n	80126a4 <lv_memcpy+0x390>
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d0d5      	beq.n	8012458 <lv_memcpy+0x144>
            COPY8;
 80124ac:	4663      	mov	r3, ip
 80124ae:	4659      	mov	r1, fp
 80124b0:	789b      	ldrb	r3, [r3, #2]
            len--;
 80124b2:	3a03      	subs	r2, #3
            COPY8;
 80124b4:	708b      	strb	r3, [r1, #2]
 80124b6:	2303      	movs	r3, #3
 80124b8:	445b      	add	r3, fp
 80124ba:	4699      	mov	r9, r3
 80124bc:	2303      	movs	r3, #3
 80124be:	4698      	mov	r8, r3
 80124c0:	44c4      	add	ip, r8
    while(len > 32) {
 80124c2:	2a20      	cmp	r2, #32
 80124c4:	d973      	bls.n	80125ae <lv_memcpy+0x29a>
 80124c6:	464b      	mov	r3, r9
 80124c8:	4661      	mov	r1, ip
 80124ca:	4319      	orrs	r1, r3
 80124cc:	2307      	movs	r3, #7
 80124ce:	4660      	mov	r0, ip
 80124d0:	400b      	ands	r3, r1
 80124d2:	4259      	negs	r1, r3
 80124d4:	414b      	adcs	r3, r1
 80124d6:	4649      	mov	r1, r9
 80124d8:	301f      	adds	r0, #31
 80124da:	1a40      	subs	r0, r0, r1
 80124dc:	213e      	movs	r1, #62	; 0x3e
 80124de:	4281      	cmp	r1, r0
 80124e0:	4189      	sbcs	r1, r1
 80124e2:	0014      	movs	r4, r2
 80124e4:	4249      	negs	r1, r1
 80124e6:	3c21      	subs	r4, #33	; 0x21
 80124e8:	4219      	tst	r1, r3
 80124ea:	d100      	bne.n	80124ee <lv_memcpy+0x1da>
 80124ec:	e0be      	b.n	801266c <lv_memcpy+0x358>
 80124ee:	2c1f      	cmp	r4, #31
 80124f0:	d800      	bhi.n	80124f4 <lv_memcpy+0x1e0>
 80124f2:	e0bb      	b.n	801266c <lv_memcpy+0x358>
 80124f4:	2100      	movs	r1, #0
 80124f6:	468a      	mov	sl, r1
 80124f8:	4661      	mov	r1, ip
 80124fa:	9105      	str	r1, [sp, #20]
 80124fc:	0011      	movs	r1, r2
 80124fe:	0963      	lsrs	r3, r4, #5
 8012500:	9304      	str	r3, [sp, #16]
 8012502:	3301      	adds	r3, #1
 8012504:	464a      	mov	r2, r9
 8012506:	46c8      	mov	r8, r9
 8012508:	9303      	str	r3, [sp, #12]
 801250a:	4689      	mov	r9, r1
 801250c:	4663      	mov	r3, ip
        REPEAT8(COPY32)
 801250e:	6998      	ldr	r0, [r3, #24]
 8012510:	69d9      	ldr	r1, [r3, #28]
 8012512:	689e      	ldr	r6, [r3, #8]
 8012514:	68df      	ldr	r7, [r3, #12]
 8012516:	691c      	ldr	r4, [r3, #16]
 8012518:	695d      	ldr	r5, [r3, #20]
 801251a:	9000      	str	r0, [sp, #0]
 801251c:	9101      	str	r1, [sp, #4]
 801251e:	6818      	ldr	r0, [r3, #0]
 8012520:	6859      	ldr	r1, [r3, #4]
 8012522:	6010      	str	r0, [r2, #0]
 8012524:	6051      	str	r1, [r2, #4]
 8012526:	9800      	ldr	r0, [sp, #0]
 8012528:	9901      	ldr	r1, [sp, #4]
 801252a:	6190      	str	r0, [r2, #24]
 801252c:	61d1      	str	r1, [r2, #28]
    while(len > 32) {
 801252e:	2101      	movs	r1, #1
 8012530:	468c      	mov	ip, r1
 8012532:	9903      	ldr	r1, [sp, #12]
 8012534:	44e2      	add	sl, ip
        REPEAT8(COPY32)
 8012536:	6096      	str	r6, [r2, #8]
 8012538:	60d7      	str	r7, [r2, #12]
 801253a:	6114      	str	r4, [r2, #16]
 801253c:	6155      	str	r5, [r2, #20]
 801253e:	3320      	adds	r3, #32
 8012540:	3220      	adds	r2, #32
 8012542:	4551      	cmp	r1, sl
 8012544:	d8e3      	bhi.n	801250e <lv_memcpy+0x1fa>
 8012546:	9b05      	ldr	r3, [sp, #20]
 8012548:	464a      	mov	r2, r9
 801254a:	469c      	mov	ip, r3
 801254c:	46c1      	mov	r9, r8
 801254e:	9904      	ldr	r1, [sp, #16]
 8012550:	3a20      	subs	r2, #32
 8012552:	1c4b      	adds	r3, r1, #1
 8012554:	015b      	lsls	r3, r3, #5
 8012556:	4499      	add	r9, r3
 8012558:	449c      	add	ip, r3
        len -= 32;
 801255a:	014b      	lsls	r3, r1, #5
 801255c:	1ad2      	subs	r2, r2, r3
    while(len > 4) {
 801255e:	2a04      	cmp	r2, #4
 8012560:	d908      	bls.n	8012574 <lv_memcpy+0x260>
 8012562:	464b      	mov	r3, r9
 8012564:	4661      	mov	r1, ip
        COPY32;
 8012566:	c901      	ldmia	r1!, {r0}
        len -= 4;
 8012568:	3a04      	subs	r2, #4
        COPY32;
 801256a:	c301      	stmia	r3!, {r0}
    while(len > 4) {
 801256c:	2a04      	cmp	r2, #4
 801256e:	d8fa      	bhi.n	8012566 <lv_memcpy+0x252>
 8012570:	4699      	mov	r9, r3
 8012572:	468c      	mov	ip, r1
        COPY8
 8012574:	4663      	mov	r3, ip
 8012576:	4649      	mov	r1, r9
 8012578:	781b      	ldrb	r3, [r3, #0]
 801257a:	700b      	strb	r3, [r1, #0]
    while(len) {
 801257c:	2a01      	cmp	r2, #1
 801257e:	d100      	bne.n	8012582 <lv_memcpy+0x26e>
 8012580:	e76a      	b.n	8012458 <lv_memcpy+0x144>
        COPY8
 8012582:	4663      	mov	r3, ip
 8012584:	785b      	ldrb	r3, [r3, #1]
 8012586:	704b      	strb	r3, [r1, #1]
        len--;
 8012588:	1e93      	subs	r3, r2, #2
    while(len) {
 801258a:	2a02      	cmp	r2, #2
 801258c:	d100      	bne.n	8012590 <lv_memcpy+0x27c>
 801258e:	e763      	b.n	8012458 <lv_memcpy+0x144>
        COPY8
 8012590:	4662      	mov	r2, ip
 8012592:	7892      	ldrb	r2, [r2, #2]
 8012594:	708a      	strb	r2, [r1, #2]
    while(len) {
 8012596:	2b01      	cmp	r3, #1
 8012598:	d100      	bne.n	801259c <lv_memcpy+0x288>
 801259a:	e75d      	b.n	8012458 <lv_memcpy+0x144>
        COPY8
 801259c:	4663      	mov	r3, ip
 801259e:	78db      	ldrb	r3, [r3, #3]
 80125a0:	70cb      	strb	r3, [r1, #3]
    while(len) {
 80125a2:	e759      	b.n	8012458 <lv_memcpy+0x144>
        while(len) {
 80125a4:	2a00      	cmp	r2, #0
 80125a6:	d100      	bne.n	80125aa <lv_memcpy+0x296>
 80125a8:	e756      	b.n	8012458 <lv_memcpy+0x144>
 80125aa:	0003      	movs	r3, r0
 80125ac:	e706      	b.n	80123bc <lv_memcpy+0xa8>
    while(len > 4) {
 80125ae:	2a04      	cmp	r2, #4
 80125b0:	d8d7      	bhi.n	8012562 <lv_memcpy+0x24e>
    while(len) {
 80125b2:	2a00      	cmp	r2, #0
 80125b4:	d100      	bne.n	80125b8 <lv_memcpy+0x2a4>
 80125b6:	e74f      	b.n	8012458 <lv_memcpy+0x144>
 80125b8:	e7dc      	b.n	8012574 <lv_memcpy+0x260>
        while(len) {
 80125ba:	2100      	movs	r1, #0
 80125bc:	4664      	mov	r4, ip
            COPY8
 80125be:	5c60      	ldrb	r0, [r4, r1]
 80125c0:	5458      	strb	r0, [r3, r1]
        while(len) {
 80125c2:	3101      	adds	r1, #1
 80125c4:	428a      	cmp	r2, r1
 80125c6:	d1fa      	bne.n	80125be <lv_memcpy+0x2aa>
 80125c8:	e746      	b.n	8012458 <lv_memcpy+0x144>
 80125ca:	2321      	movs	r3, #33	; 0x21
 80125cc:	425b      	negs	r3, r3
 80125ce:	4698      	mov	r8, r3
 80125d0:	4490      	add	r8, r2
 80125d2:	4643      	mov	r3, r8
        while(len > 32) {
 80125d4:	4661      	mov	r1, ip
 80125d6:	095c      	lsrs	r4, r3, #5
 80125d8:	9304      	str	r3, [sp, #16]
 80125da:	465b      	mov	r3, fp
 80125dc:	3401      	adds	r4, #1
 80125de:	0164      	lsls	r4, r4, #5
 80125e0:	445c      	add	r4, fp
            REPEAT8(COPY8);
 80125e2:	7808      	ldrb	r0, [r1, #0]
 80125e4:	7018      	strb	r0, [r3, #0]
 80125e6:	7848      	ldrb	r0, [r1, #1]
 80125e8:	7058      	strb	r0, [r3, #1]
 80125ea:	7888      	ldrb	r0, [r1, #2]
 80125ec:	7098      	strb	r0, [r3, #2]
 80125ee:	78c8      	ldrb	r0, [r1, #3]
 80125f0:	70d8      	strb	r0, [r3, #3]
 80125f2:	7908      	ldrb	r0, [r1, #4]
 80125f4:	7118      	strb	r0, [r3, #4]
 80125f6:	7948      	ldrb	r0, [r1, #5]
 80125f8:	7158      	strb	r0, [r3, #5]
 80125fa:	7988      	ldrb	r0, [r1, #6]
 80125fc:	7198      	strb	r0, [r3, #6]
 80125fe:	79c8      	ldrb	r0, [r1, #7]
 8012600:	71d8      	strb	r0, [r3, #7]
            REPEAT8(COPY8);
 8012602:	7a08      	ldrb	r0, [r1, #8]
 8012604:	7218      	strb	r0, [r3, #8]
 8012606:	7a48      	ldrb	r0, [r1, #9]
 8012608:	7258      	strb	r0, [r3, #9]
 801260a:	7a88      	ldrb	r0, [r1, #10]
 801260c:	7298      	strb	r0, [r3, #10]
 801260e:	7ac8      	ldrb	r0, [r1, #11]
 8012610:	72d8      	strb	r0, [r3, #11]
 8012612:	7b08      	ldrb	r0, [r1, #12]
 8012614:	7318      	strb	r0, [r3, #12]
 8012616:	7b48      	ldrb	r0, [r1, #13]
 8012618:	7358      	strb	r0, [r3, #13]
 801261a:	7b88      	ldrb	r0, [r1, #14]
 801261c:	7398      	strb	r0, [r3, #14]
 801261e:	7bc8      	ldrb	r0, [r1, #15]
 8012620:	73d8      	strb	r0, [r3, #15]
            REPEAT8(COPY8);
 8012622:	7c08      	ldrb	r0, [r1, #16]
 8012624:	7418      	strb	r0, [r3, #16]
 8012626:	7c48      	ldrb	r0, [r1, #17]
 8012628:	7458      	strb	r0, [r3, #17]
 801262a:	7c88      	ldrb	r0, [r1, #18]
 801262c:	7498      	strb	r0, [r3, #18]
 801262e:	7cc8      	ldrb	r0, [r1, #19]
 8012630:	74d8      	strb	r0, [r3, #19]
 8012632:	7d08      	ldrb	r0, [r1, #20]
 8012634:	7518      	strb	r0, [r3, #20]
 8012636:	7d48      	ldrb	r0, [r1, #21]
 8012638:	7558      	strb	r0, [r3, #21]
 801263a:	7d88      	ldrb	r0, [r1, #22]
 801263c:	7598      	strb	r0, [r3, #22]
 801263e:	7dc8      	ldrb	r0, [r1, #23]
 8012640:	75d8      	strb	r0, [r3, #23]
            REPEAT8(COPY8);
 8012642:	7e08      	ldrb	r0, [r1, #24]
 8012644:	7618      	strb	r0, [r3, #24]
 8012646:	7e48      	ldrb	r0, [r1, #25]
 8012648:	7658      	strb	r0, [r3, #25]
 801264a:	7e88      	ldrb	r0, [r1, #26]
 801264c:	7698      	strb	r0, [r3, #26]
 801264e:	7ec8      	ldrb	r0, [r1, #27]
 8012650:	76d8      	strb	r0, [r3, #27]
 8012652:	7f08      	ldrb	r0, [r1, #28]
 8012654:	7718      	strb	r0, [r3, #28]
 8012656:	7f48      	ldrb	r0, [r1, #29]
 8012658:	7758      	strb	r0, [r3, #29]
 801265a:	7f88      	ldrb	r0, [r1, #30]
 801265c:	7798      	strb	r0, [r3, #30]
 801265e:	7fc8      	ldrb	r0, [r1, #31]
 8012660:	3120      	adds	r1, #32
 8012662:	77d8      	strb	r0, [r3, #31]
 8012664:	3320      	adds	r3, #32
        while(len > 32) {
 8012666:	429c      	cmp	r4, r3
 8012668:	d1bb      	bne.n	80125e2 <lv_memcpy+0x2ce>
 801266a:	e69d      	b.n	80123a8 <lv_memcpy+0x94>
 801266c:	0963      	lsrs	r3, r4, #5
 801266e:	1c58      	adds	r0, r3, #1
 8012670:	9304      	str	r3, [sp, #16]
    while(len > 32) {
 8012672:	4661      	mov	r1, ip
 8012674:	464b      	mov	r3, r9
 8012676:	0140      	lsls	r0, r0, #5
 8012678:	4448      	add	r0, r9
        REPEAT8(COPY32)
 801267a:	680c      	ldr	r4, [r1, #0]
 801267c:	601c      	str	r4, [r3, #0]
 801267e:	684c      	ldr	r4, [r1, #4]
 8012680:	605c      	str	r4, [r3, #4]
 8012682:	688c      	ldr	r4, [r1, #8]
 8012684:	609c      	str	r4, [r3, #8]
 8012686:	68cc      	ldr	r4, [r1, #12]
 8012688:	60dc      	str	r4, [r3, #12]
 801268a:	690c      	ldr	r4, [r1, #16]
 801268c:	611c      	str	r4, [r3, #16]
 801268e:	694c      	ldr	r4, [r1, #20]
 8012690:	615c      	str	r4, [r3, #20]
 8012692:	698c      	ldr	r4, [r1, #24]
 8012694:	619c      	str	r4, [r3, #24]
 8012696:	69cc      	ldr	r4, [r1, #28]
 8012698:	3120      	adds	r1, #32
 801269a:	61dc      	str	r4, [r3, #28]
 801269c:	3320      	adds	r3, #32
    while(len > 32) {
 801269e:	4298      	cmp	r0, r3
 80126a0:	d1eb      	bne.n	801267a <lv_memcpy+0x366>
 80126a2:	e754      	b.n	801254e <lv_memcpy+0x23a>
            COPY8;
 80126a4:	468c      	mov	ip, r1
            len--;
 80126a6:	001a      	movs	r2, r3
 80126a8:	e70b      	b.n	80124c2 <lv_memcpy+0x1ae>
            COPY8;
 80126aa:	46ac      	mov	ip, r5
            len--;
 80126ac:	001a      	movs	r2, r3
 80126ae:	e708      	b.n	80124c2 <lv_memcpy+0x1ae>

080126b0 <lv_memset_00>:
 * Same as `memset(dst, 0x00, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_00(void * dst, size_t len)
{
 80126b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t * d8 = (uint8_t *)dst;
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 80126b2:	2303      	movs	r3, #3
{
 80126b4:	000a      	movs	r2, r1
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 80126b6:	0019      	movs	r1, r3
 80126b8:	4001      	ands	r1, r0

    /*Make the address aligned*/
    if(d_align) {
 80126ba:	4218      	tst	r0, r3
 80126bc:	d014      	beq.n	80126e8 <lv_memset_00+0x38>
        d_align = ALIGN_MASK + 1 - d_align;
        while(d_align && len) {
 80126be:	2a00      	cmp	r2, #0
 80126c0:	d03c      	beq.n	801273c <lv_memset_00+0x8c>
            SET8(0);
 80126c2:	2400      	movs	r4, #0
 80126c4:	1c47      	adds	r7, r0, #1
 80126c6:	7004      	strb	r4, [r0, #0]
            len--;
 80126c8:	1e55      	subs	r5, r2, #1
            d_align--;
 80126ca:	1a5e      	subs	r6, r3, r1
        while(d_align && len) {
 80126cc:	428b      	cmp	r3, r1
 80126ce:	d055      	beq.n	801277c <lv_memset_00+0xcc>
 80126d0:	2d00      	cmp	r5, #0
 80126d2:	d033      	beq.n	801273c <lv_memset_00+0x8c>
            SET8(0);
 80126d4:	7044      	strb	r4, [r0, #1]
 80126d6:	1c81      	adds	r1, r0, #2
            len--;
 80126d8:	1e93      	subs	r3, r2, #2
        while(d_align && len) {
 80126da:	2e01      	cmp	r6, #1
 80126dc:	d051      	beq.n	8012782 <lv_memset_00+0xd2>
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d02c      	beq.n	801273c <lv_memset_00+0x8c>
            SET8(0);
 80126e2:	7084      	strb	r4, [r0, #2]
            len--;
 80126e4:	3a03      	subs	r2, #3
            SET8(0);
 80126e6:	3003      	adds	r0, #3
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
    while(len > 32) {
 80126e8:	2a20      	cmp	r2, #32
 80126ea:	d928      	bls.n	801273e <lv_memset_00+0x8e>
 80126ec:	0017      	movs	r7, r2
 80126ee:	3f21      	subs	r7, #33	; 0x21
 80126f0:	0743      	lsls	r3, r0, #29
 80126f2:	d129      	bne.n	8012748 <lv_memset_00+0x98>
 80126f4:	2f5f      	cmp	r7, #95	; 0x5f
 80126f6:	d927      	bls.n	8012748 <lv_memset_00+0x98>
 80126f8:	0003      	movs	r3, r0
 80126fa:	2100      	movs	r1, #0
        REPEAT8(SET32(0));
 80126fc:	2400      	movs	r4, #0
 80126fe:	2500      	movs	r5, #0
 8012700:	097f      	lsrs	r7, r7, #5
 8012702:	1c7e      	adds	r6, r7, #1
 8012704:	3101      	adds	r1, #1
 8012706:	601c      	str	r4, [r3, #0]
 8012708:	605d      	str	r5, [r3, #4]
 801270a:	609c      	str	r4, [r3, #8]
 801270c:	60dd      	str	r5, [r3, #12]
 801270e:	611c      	str	r4, [r3, #16]
 8012710:	615d      	str	r5, [r3, #20]
 8012712:	619c      	str	r4, [r3, #24]
 8012714:	61dd      	str	r5, [r3, #28]
    while(len > 32) {
 8012716:	3320      	adds	r3, #32
 8012718:	428e      	cmp	r6, r1
 801271a:	d8f3      	bhi.n	8012704 <lv_memset_00+0x54>
        REPEAT8(SET32(0));
 801271c:	1c7b      	adds	r3, r7, #1
 801271e:	015b      	lsls	r3, r3, #5
 8012720:	3a20      	subs	r2, #32
        len -= 32;
 8012722:	017f      	lsls	r7, r7, #5
        REPEAT8(SET32(0));
 8012724:	18c0      	adds	r0, r0, r3
        len -= 32;
 8012726:	1bd2      	subs	r2, r2, r7
    }

    while(len > 4) {
 8012728:	2a04      	cmp	r2, #4
 801272a:	d904      	bls.n	8012736 <lv_memset_00+0x86>
        SET32(0);
 801272c:	2300      	movs	r3, #0
        len -= 4;
 801272e:	3a04      	subs	r2, #4
        SET32(0);
 8012730:	c008      	stmia	r0!, {r3}
    while(len > 4) {
 8012732:	2a04      	cmp	r2, #4
 8012734:	d8fb      	bhi.n	801272e <lv_memset_00+0x7e>
    }

    d8 = (uint8_t *)d32;
    while(len) {
        SET8(0);
 8012736:	2100      	movs	r1, #0
 8012738:	f008 ff80 	bl	801b63c <memset>
        len--;
    }
}
 801273c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(len > 4) {
 801273e:	2a04      	cmp	r2, #4
 8012740:	d8f4      	bhi.n	801272c <lv_memset_00+0x7c>
    while(len) {
 8012742:	2a00      	cmp	r2, #0
 8012744:	d0fa      	beq.n	801273c <lv_memset_00+0x8c>
 8012746:	e7f6      	b.n	8012736 <lv_memset_00+0x86>
    while(len > 32) {
 8012748:	0003      	movs	r3, r0
        REPEAT8(SET32(0));
 801274a:	2100      	movs	r1, #0
 801274c:	097f      	lsrs	r7, r7, #5
 801274e:	1c7c      	adds	r4, r7, #1
 8012750:	0164      	lsls	r4, r4, #5
 8012752:	1904      	adds	r4, r0, r4
 8012754:	6019      	str	r1, [r3, #0]
 8012756:	6059      	str	r1, [r3, #4]
 8012758:	6099      	str	r1, [r3, #8]
 801275a:	60d9      	str	r1, [r3, #12]
 801275c:	6119      	str	r1, [r3, #16]
 801275e:	6159      	str	r1, [r3, #20]
 8012760:	6199      	str	r1, [r3, #24]
 8012762:	61d9      	str	r1, [r3, #28]
 8012764:	3320      	adds	r3, #32
    while(len > 32) {
 8012766:	429c      	cmp	r4, r3
 8012768:	d1f4      	bne.n	8012754 <lv_memset_00+0xa4>
        REPEAT8(SET32(0));
 801276a:	1c7b      	adds	r3, r7, #1
 801276c:	015b      	lsls	r3, r3, #5
 801276e:	3a20      	subs	r2, #32
        len -= 32;
 8012770:	017f      	lsls	r7, r7, #5
        REPEAT8(SET32(0));
 8012772:	18c0      	adds	r0, r0, r3
        len -= 32;
 8012774:	1bd2      	subs	r2, r2, r7
    while(len > 4) {
 8012776:	2a04      	cmp	r2, #4
 8012778:	d8d8      	bhi.n	801272c <lv_memset_00+0x7c>
 801277a:	e7dc      	b.n	8012736 <lv_memset_00+0x86>
            SET8(0);
 801277c:	0038      	movs	r0, r7
            len--;
 801277e:	002a      	movs	r2, r5
 8012780:	e7b2      	b.n	80126e8 <lv_memset_00+0x38>
            SET8(0);
 8012782:	0008      	movs	r0, r1
            len--;
 8012784:	001a      	movs	r2, r3
 8012786:	e7af      	b.n	80126e8 <lv_memset_00+0x38>

08012788 <lv_memset_ff>:
 * Same as `memset(dst, 0xFF, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_ff(void * dst, size_t len)
{
 8012788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t * d8 = (uint8_t *)dst;
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 801278a:	2303      	movs	r3, #3
{
 801278c:	000a      	movs	r2, r1
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 801278e:	0019      	movs	r1, r3
 8012790:	4001      	ands	r1, r0

    /*Make the address aligned*/
    if(d_align) {
 8012792:	4218      	tst	r0, r3
 8012794:	d014      	beq.n	80127c0 <lv_memset_ff+0x38>
        d_align = ALIGN_MASK + 1 - d_align;
        while(d_align && len) {
 8012796:	2a00      	cmp	r2, #0
 8012798:	d03e      	beq.n	8012818 <lv_memset_ff+0x90>
            SET8(0xFF);
 801279a:	24ff      	movs	r4, #255	; 0xff
 801279c:	1c47      	adds	r7, r0, #1
 801279e:	7004      	strb	r4, [r0, #0]
            len--;
 80127a0:	1e55      	subs	r5, r2, #1
            d_align--;
 80127a2:	1a5e      	subs	r6, r3, r1
        while(d_align && len) {
 80127a4:	428b      	cmp	r3, r1
 80127a6:	d050      	beq.n	801284a <lv_memset_ff+0xc2>
 80127a8:	2d00      	cmp	r5, #0
 80127aa:	d035      	beq.n	8012818 <lv_memset_ff+0x90>
            SET8(0xFF);
 80127ac:	7044      	strb	r4, [r0, #1]
 80127ae:	1c81      	adds	r1, r0, #2
            len--;
 80127b0:	1e93      	subs	r3, r2, #2
        while(d_align && len) {
 80127b2:	2e01      	cmp	r6, #1
 80127b4:	d04c      	beq.n	8012850 <lv_memset_ff+0xc8>
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d02e      	beq.n	8012818 <lv_memset_ff+0x90>
            SET8(0xFF);
 80127ba:	7084      	strb	r4, [r0, #2]
            len--;
 80127bc:	3a03      	subs	r2, #3
            SET8(0xFF);
 80127be:	3003      	adds	r0, #3
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
    while(len > 32) {
 80127c0:	2a20      	cmp	r2, #32
 80127c2:	d92a      	bls.n	801281a <lv_memset_ff+0x92>
 80127c4:	0017      	movs	r7, r2
 80127c6:	3f21      	subs	r7, #33	; 0x21
 80127c8:	0743      	lsls	r3, r0, #29
 80127ca:	d12b      	bne.n	8012824 <lv_memset_ff+0x9c>
 80127cc:	2f5f      	cmp	r7, #95	; 0x5f
 80127ce:	d929      	bls.n	8012824 <lv_memset_ff+0x9c>
 80127d0:	0003      	movs	r3, r0
 80127d2:	2100      	movs	r1, #0
        REPEAT8(SET32(0xFFFFFFFF));
 80127d4:	2401      	movs	r4, #1
 80127d6:	4264      	negs	r4, r4
 80127d8:	17e5      	asrs	r5, r4, #31
 80127da:	097f      	lsrs	r7, r7, #5
 80127dc:	1c7e      	adds	r6, r7, #1
 80127de:	3101      	adds	r1, #1
 80127e0:	601c      	str	r4, [r3, #0]
 80127e2:	605d      	str	r5, [r3, #4]
 80127e4:	609c      	str	r4, [r3, #8]
 80127e6:	60dd      	str	r5, [r3, #12]
 80127e8:	611c      	str	r4, [r3, #16]
 80127ea:	615d      	str	r5, [r3, #20]
 80127ec:	619c      	str	r4, [r3, #24]
 80127ee:	61dd      	str	r5, [r3, #28]
    while(len > 32) {
 80127f0:	3320      	adds	r3, #32
 80127f2:	428e      	cmp	r6, r1
 80127f4:	d8f3      	bhi.n	80127de <lv_memset_ff+0x56>
        REPEAT8(SET32(0xFFFFFFFF));
 80127f6:	1c7b      	adds	r3, r7, #1
 80127f8:	015b      	lsls	r3, r3, #5
 80127fa:	3a20      	subs	r2, #32
        len -= 32;
 80127fc:	017f      	lsls	r7, r7, #5
        REPEAT8(SET32(0xFFFFFFFF));
 80127fe:	18c0      	adds	r0, r0, r3
        len -= 32;
 8012800:	1bd2      	subs	r2, r2, r7
    }

    while(len > 4) {
 8012802:	2a04      	cmp	r2, #4
 8012804:	d905      	bls.n	8012812 <lv_memset_ff+0x8a>
        SET32(0xFFFFFFFF);
 8012806:	2301      	movs	r3, #1
 8012808:	425b      	negs	r3, r3
        len -= 4;
 801280a:	3a04      	subs	r2, #4
        SET32(0xFFFFFFFF);
 801280c:	c008      	stmia	r0!, {r3}
    while(len > 4) {
 801280e:	2a04      	cmp	r2, #4
 8012810:	d8fb      	bhi.n	801280a <lv_memset_ff+0x82>
    }

    d8 = (uint8_t *)d32;
    while(len) {
        SET8(0xFF);
 8012812:	21ff      	movs	r1, #255	; 0xff
 8012814:	f008 ff12 	bl	801b63c <memset>
        len--;
    }
}
 8012818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(len > 4) {
 801281a:	2a04      	cmp	r2, #4
 801281c:	d8f3      	bhi.n	8012806 <lv_memset_ff+0x7e>
    while(len) {
 801281e:	2a00      	cmp	r2, #0
 8012820:	d0fa      	beq.n	8012818 <lv_memset_ff+0x90>
 8012822:	e7f6      	b.n	8012812 <lv_memset_ff+0x8a>
        REPEAT8(SET32(0xFFFFFFFF));
 8012824:	2101      	movs	r1, #1
    while(len > 32) {
 8012826:	0003      	movs	r3, r0
 8012828:	097f      	lsrs	r7, r7, #5
 801282a:	1c7c      	adds	r4, r7, #1
 801282c:	0164      	lsls	r4, r4, #5
 801282e:	1904      	adds	r4, r0, r4
        REPEAT8(SET32(0xFFFFFFFF));
 8012830:	4249      	negs	r1, r1
 8012832:	6019      	str	r1, [r3, #0]
 8012834:	6059      	str	r1, [r3, #4]
 8012836:	6099      	str	r1, [r3, #8]
 8012838:	60d9      	str	r1, [r3, #12]
 801283a:	6119      	str	r1, [r3, #16]
 801283c:	6159      	str	r1, [r3, #20]
 801283e:	6199      	str	r1, [r3, #24]
 8012840:	61d9      	str	r1, [r3, #28]
 8012842:	3320      	adds	r3, #32
    while(len > 32) {
 8012844:	429c      	cmp	r4, r3
 8012846:	d1f4      	bne.n	8012832 <lv_memset_ff+0xaa>
 8012848:	e7d5      	b.n	80127f6 <lv_memset_ff+0x6e>
            SET8(0xFF);
 801284a:	0038      	movs	r0, r7
            len--;
 801284c:	002a      	movs	r2, r5
 801284e:	e7b7      	b.n	80127c0 <lv_memset_ff+0x38>
            SET8(0xFF);
 8012850:	0008      	movs	r0, r1
            len--;
 8012852:	001a      	movs	r2, r3
 8012854:	e7b4      	b.n	80127c0 <lv_memset_ff+0x38>
 8012856:	46c0      	nop			; (mov r8, r8)

08012858 <lv_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_style_init(lv_style_t * style)
{
 8012858:	b510      	push	{r4, lr}
    if(style->sentinel == LV_STYLE_SENTINEL_VALUE && style->prop_cnt > 1) {
        LV_LOG_WARN("Style might be already inited. (Potential memory leak)");
    }
#endif

    lv_memset_00(style, sizeof(lv_style_t));
 801285a:	2108      	movs	r1, #8
 801285c:	f7ff ff28 	bl	80126b0 <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
#endif
}
 8012860:	bd10      	pop	{r4, pc}
 8012862:	46c0      	nop			; (mov r8, r8)

08012864 <lv_style_reset>:

void lv_style_reset(lv_style_t * style)
{
 8012864:	b510      	push	{r4, lr}
    LV_ASSERT_STYLE(style);

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8012866:	4b08      	ldr	r3, [pc, #32]	; (8012888 <lv_style_reset+0x24>)
 8012868:	8882      	ldrh	r2, [r0, #4]
{
 801286a:	0004      	movs	r4, r0
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 801286c:	429a      	cmp	r2, r3
 801286e:	d006      	beq.n	801287e <lv_style_reset+0x1a>
        LV_LOG_ERROR("Cannot reset const style");
        return;
    }

    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8012870:	79c3      	ldrb	r3, [r0, #7]
 8012872:	2b01      	cmp	r3, #1
 8012874:	d804      	bhi.n	8012880 <lv_style_reset+0x1c>
    lv_memset_00(style, sizeof(lv_style_t));
 8012876:	2108      	movs	r1, #8
 8012878:	0020      	movs	r0, r4
 801287a:	f7ff ff19 	bl	80126b0 <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
#endif
}
 801287e:	bd10      	pop	{r4, pc}
    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8012880:	6800      	ldr	r0, [r0, #0]
 8012882:	f7ff fbb5 	bl	8011ff0 <lv_mem_free>
 8012886:	e7f6      	b.n	8012876 <lv_style_reset+0x12>
 8012888:	0000ffff 	.word	0x0000ffff

0801288c <lv_style_remove_prop>:
{
    return last_custom_prop_id - _LV_STYLE_LAST_BUILT_IN_PROP;
}

bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop)
{
 801288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801288e:	46ce      	mov	lr, r9
 8012890:	4647      	mov	r7, r8
 8012892:	b580      	push	{r7, lr}
    LV_ASSERT_STYLE(style);

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8012894:	4a2f      	ldr	r2, [pc, #188]	; (8012954 <lv_style_remove_prop+0xc8>)
 8012896:	8883      	ldrh	r3, [r0, #4]
{
 8012898:	0006      	movs	r6, r0
 801289a:	000c      	movs	r4, r1
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 801289c:	4293      	cmp	r3, r2
 801289e:	d011      	beq.n	80128c4 <lv_style_remove_prop+0x38>
        LV_LOG_ERROR("Cannot remove prop from const style");
        return false;
    }

    if(style->prop_cnt == 0)  return false;
 80128a0:	79c0      	ldrb	r0, [r0, #7]
 80128a2:	2800      	cmp	r0, #0
 80128a4:	d00e      	beq.n	80128c4 <lv_style_remove_prop+0x38>

    if(style->prop_cnt == 1) {
 80128a6:	2801      	cmp	r0, #1
 80128a8:	d011      	beq.n	80128ce <lv_style_remove_prop+0x42>
    }

    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
    uint16_t * old_props = (uint16_t *)tmp;
    uint32_t i;
    for(i = 0; i < style->prop_cnt; i++) {
 80128aa:	2200      	movs	r2, #0
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80128ac:	6837      	ldr	r7, [r6, #0]
 80128ae:	0085      	lsls	r5, r0, #2
 80128b0:	197d      	adds	r5, r7, r5
        if(LV_STYLE_PROP_ID_MASK(old_props[i]) == prop) {
 80128b2:	0053      	lsls	r3, r2, #1
 80128b4:	5aeb      	ldrh	r3, [r5, r3]
 80128b6:	049b      	lsls	r3, r3, #18
 80128b8:	0c9b      	lsrs	r3, r3, #18
 80128ba:	42a3      	cmp	r3, r4
 80128bc:	d00f      	beq.n	80128de <lv_style_remove_prop+0x52>
    for(i = 0; i < style->prop_cnt; i++) {
 80128be:	3201      	adds	r2, #1
 80128c0:	4290      	cmp	r0, r2
 80128c2:	d8f6      	bhi.n	80128b2 <lv_style_remove_prop+0x26>
        return false;
 80128c4:	2000      	movs	r0, #0
            return true;
        }
    }

    return false;
}
 80128c6:	bcc0      	pop	{r6, r7}
 80128c8:	46b9      	mov	r9, r7
 80128ca:	46b0      	mov	r8, r6
 80128cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 80128ce:	049b      	lsls	r3, r3, #18
 80128d0:	0c9b      	lsrs	r3, r3, #18
 80128d2:	428b      	cmp	r3, r1
 80128d4:	d1f6      	bne.n	80128c4 <lv_style_remove_prop+0x38>
            style->prop1 = LV_STYLE_PROP_INV;
 80128d6:	2300      	movs	r3, #0
 80128d8:	80b3      	strh	r3, [r6, #4]
            style->prop_cnt = 0;
 80128da:	71f3      	strb	r3, [r6, #7]
            return true;
 80128dc:	e7f3      	b.n	80128c6 <lv_style_remove_prop+0x3a>
            if(style->prop_cnt == 2) {
 80128de:	2802      	cmp	r0, #2
 80128e0:	d029      	beq.n	8012936 <lv_style_remove_prop+0xaa>
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 80128e2:	3801      	subs	r0, #1
 80128e4:	0043      	lsls	r3, r0, #1
 80128e6:	1818      	adds	r0, r3, r0
 80128e8:	0040      	lsls	r0, r0, #1
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 80128ea:	f7ff fb5f 	bl	8011fac <lv_mem_alloc>
 80128ee:	4681      	mov	r9, r0
                if(new_values_and_props == NULL) return false;
 80128f0:	2800      	cmp	r0, #0
 80128f2:	d0e7      	beq.n	80128c4 <lv_style_remove_prop+0x38>
                style->prop_cnt--;
 80128f4:	79f3      	ldrb	r3, [r6, #7]
                for(i = j = 0; j <= style->prop_cnt;
 80128f6:	2200      	movs	r2, #0
                style->prop_cnt--;
 80128f8:	3b01      	subs	r3, #1
 80128fa:	b2db      	uxtb	r3, r3
 80128fc:	469c      	mov	ip, r3
 80128fe:	71f3      	strb	r3, [r6, #7]
                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8012900:	009b      	lsls	r3, r3, #2
 8012902:	4698      	mov	r8, r3
                for(i = j = 0; j <= style->prop_cnt;
 8012904:	2300      	movs	r3, #0
                style->v_p.values_and_props = new_values_and_props;
 8012906:	6030      	str	r0, [r6, #0]
                    if(old_props[j] != prop) {
 8012908:	8829      	ldrh	r1, [r5, #0]
 801290a:	42a1      	cmp	r1, r4
 801290c:	d00a      	beq.n	8012924 <lv_style_remove_prop+0x98>
                        new_values[i] = old_values[j];
 801290e:	4648      	mov	r0, r9
 8012910:	009e      	lsls	r6, r3, #2
 8012912:	59be      	ldr	r6, [r7, r6]
 8012914:	0091      	lsls	r1, r2, #2
 8012916:	500e      	str	r6, [r1, r0]
                        new_props[i++] = old_props[j];
 8012918:	4640      	mov	r0, r8
 801291a:	0051      	lsls	r1, r2, #1
 801291c:	882e      	ldrh	r6, [r5, #0]
 801291e:	4449      	add	r1, r9
 8012920:	520e      	strh	r6, [r1, r0]
 8012922:	3201      	adds	r2, #1
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8012924:	3301      	adds	r3, #1
                for(i = j = 0; j <= style->prop_cnt;
 8012926:	3502      	adds	r5, #2
 8012928:	459c      	cmp	ip, r3
 801292a:	d2ed      	bcs.n	8012908 <lv_style_remove_prop+0x7c>
            lv_mem_free(old_values);
 801292c:	0038      	movs	r0, r7
 801292e:	f7ff fb5f 	bl	8011ff0 <lv_mem_free>
            return true;
 8012932:	2001      	movs	r0, #1
 8012934:	e7c7      	b.n	80128c6 <lv_style_remove_prop+0x3a>
                style->prop_cnt = 1;
 8012936:	2301      	movs	r3, #1
 8012938:	71f3      	strb	r3, [r6, #7]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 801293a:	2a00      	cmp	r2, #0
 801293c:	d104      	bne.n	8012948 <lv_style_remove_prop+0xbc>
 801293e:	886b      	ldrh	r3, [r5, #2]
 8012940:	80b3      	strh	r3, [r6, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6033      	str	r3, [r6, #0]
 8012946:	e7f1      	b.n	801292c <lv_style_remove_prop+0xa0>
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8012948:	882b      	ldrh	r3, [r5, #0]
 801294a:	80b3      	strh	r3, [r6, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	6033      	str	r3, [r6, #0]
 8012950:	e7ec      	b.n	801292c <lv_style_remove_prop+0xa0>
 8012952:	46c0      	nop			; (mov r8, r8)
 8012954:	0000ffff 	.word	0x0000ffff

08012958 <lv_style_set_prop>:

void lv_style_set_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t value)
{
 8012958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801295a:	4646      	mov	r6, r8
 801295c:	46d6      	mov	lr, sl
 801295e:	464f      	mov	r7, r9
 8012960:	b5c0      	push	{r6, r7, lr}
 8012962:	4692      	mov	sl, r2
static void lv_style_set_prop_internal(lv_style_t * style, lv_style_prop_t prop_and_meta, lv_style_value_t value,
                                       void (*value_adjustment_helper)(lv_style_prop_t, lv_style_value_t, uint16_t *, lv_style_value_t *))
{
    LV_ASSERT_STYLE(style);

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8012964:	8883      	ldrh	r3, [r0, #4]
 8012966:	4a45      	ldr	r2, [pc, #276]	; (8012a7c <lv_style_set_prop+0x124>)
{
 8012968:	0006      	movs	r6, r0
 801296a:	4688      	mov	r8, r1
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 801296c:	4293      	cmp	r3, r2
 801296e:	d046      	beq.n	80129fe <lv_style_set_prop+0xa6>
        LV_LOG_ERROR("Cannot set property of constant style");
        return;
    }

    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 8012970:	048d      	lsls	r5, r1, #18
 8012972:	000a      	movs	r2, r1

    if(style->prop_cnt > 1) {
 8012974:	79c1      	ldrb	r1, [r0, #7]
    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 8012976:	0cad      	lsrs	r5, r5, #18
    if(style->prop_cnt > 1) {
 8012978:	2901      	cmp	r1, #1
 801297a:	d945      	bls.n	8012a08 <lv_style_set_prop+0xb0>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 801297c:	6800      	ldr	r0, [r0, #0]
 801297e:	008a      	lsls	r2, r1, #2
        uint16_t * props = (uint16_t *)tmp;
        int32_t i;
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8012980:	1e4c      	subs	r4, r1, #1
 8012982:	1882      	adds	r2, r0, r2
            if(LV_STYLE_PROP_ID_MASK(props[i]) == prop_id) {
 8012984:	0063      	lsls	r3, r4, #1
 8012986:	18d7      	adds	r7, r2, r3
 8012988:	5ad3      	ldrh	r3, [r2, r3]
 801298a:	049b      	lsls	r3, r3, #18
 801298c:	0c9b      	lsrs	r3, r3, #18
 801298e:	429d      	cmp	r5, r3
 8012990:	d04e      	beq.n	8012a30 <lv_style_set_prop+0xd8>
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8012992:	3c01      	subs	r4, #1
 8012994:	d2f6      	bcs.n	8012984 <lv_style_set_prop+0x2c>
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
                return;
            }
        }

        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8012996:	1c4b      	adds	r3, r1, #1
 8012998:	0059      	lsls	r1, r3, #1
 801299a:	18c9      	adds	r1, r1, r3
 801299c:	0049      	lsls	r1, r1, #1
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 801299e:	f7ff fb43 	bl	8012028 <lv_mem_realloc>
 80129a2:	4681      	mov	r9, r0
        if(values_and_props == NULL) return;
 80129a4:	2800      	cmp	r0, #0
 80129a6:	d02a      	beq.n	80129fe <lv_style_set_prop+0xa6>
        style->v_p.values_and_props = values_and_props;

        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80129a8:	79f2      	ldrb	r2, [r6, #7]
        style->v_p.values_and_props = values_and_props;
 80129aa:	6030      	str	r0, [r6, #0]
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80129ac:	0094      	lsls	r4, r2, #2
 80129ae:	444c      	add	r4, r9
        props = (uint16_t *)tmp;
        /*Shift all props to make place for the value before them*/
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80129b0:	2a00      	cmp	r2, #0
 80129b2:	d060      	beq.n	8012a76 <lv_style_set_prop+0x11e>
 80129b4:	1c57      	adds	r7, r2, #1
 80129b6:	0050      	lsls	r0, r2, #1
 80129b8:	007b      	lsls	r3, r7, #1
 80129ba:	0052      	lsls	r2, r2, #1
 80129bc:	18e3      	adds	r3, r4, r3
 80129be:	4240      	negs	r0, r0
 80129c0:	3402      	adds	r4, #2
 80129c2:	3a04      	subs	r2, #4
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 80129c4:	18c1      	adds	r1, r0, r3
 80129c6:	5a89      	ldrh	r1, [r1, r2]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80129c8:	3b02      	subs	r3, #2
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 80129ca:	8059      	strh	r1, [r3, #2]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80129cc:	429c      	cmp	r4, r3
 80129ce:	d1f9      	bne.n	80129c4 <lv_style_set_prop+0x6c>
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
        props = (uint16_t *)tmp;
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;

        /*Set the new property and value*/
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 80129d0:	4a2b      	ldr	r2, [pc, #172]	; (8012a80 <lv_style_set_prop+0x128>)
        style->prop_cnt++;
 80129d2:	b2f8      	uxtb	r0, r7
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 80129d4:	4694      	mov	ip, r2
    *prop_storage = prop;
 80129d6:	4642      	mov	r2, r8
        style->prop_cnt++;
 80129d8:	71f0      	strb	r0, [r6, #7]
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80129da:	0083      	lsls	r3, r0, #2
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 80129dc:	4460      	add	r0, ip
    *prop_storage = prop;
 80129de:	0040      	lsls	r0, r0, #1
 80129e0:	4448      	add	r0, r9
 80129e2:	52c2      	strh	r2, [r0, r3]
    *value_storage = value;
 80129e4:	4652      	mov	r2, sl
 80129e6:	444b      	add	r3, r9
 80129e8:	3b04      	subs	r3, #4
 80129ea:	601a      	str	r2, [r3, #0]
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 80129ec:	2318      	movs	r3, #24
    uint16_t group = (prop & 0x1FF) >> 4;
 80129ee:	092d      	lsrs	r5, r5, #4
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 80129f0:	422b      	tst	r3, r5
 80129f2:	d014      	beq.n	8012a1e <lv_style_set_prop+0xc6>
 80129f4:	2380      	movs	r3, #128	; 0x80
        style->prop_cnt = 1;
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
    }

    uint8_t group = _lv_style_get_prop_group(prop_id);
    style->has_group |= 1 << group;
 80129f6:	79b2      	ldrb	r2, [r6, #6]
 80129f8:	425b      	negs	r3, r3
 80129fa:	4313      	orrs	r3, r2
 80129fc:	71b3      	strb	r3, [r6, #6]
}
 80129fe:	bce0      	pop	{r5, r6, r7}
 8012a00:	46ba      	mov	sl, r7
 8012a02:	46b1      	mov	r9, r6
 8012a04:	46a8      	mov	r8, r5
 8012a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(style->prop_cnt == 1) {
 8012a08:	2901      	cmp	r1, #1
 8012a0a:	d017      	beq.n	8012a3c <lv_style_set_prop+0xe4>
        style->prop_cnt = 1;
 8012a0c:	2301      	movs	r3, #1
 8012a0e:	71c3      	strb	r3, [r0, #7]
    *value_storage = value;
 8012a10:	4653      	mov	r3, sl
    *prop_storage = prop;
 8012a12:	80b2      	strh	r2, [r6, #4]
    *value_storage = value;
 8012a14:	6003      	str	r3, [r0, #0]
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8012a16:	2318      	movs	r3, #24
    uint16_t group = (prop & 0x1FF) >> 4;
 8012a18:	092d      	lsrs	r5, r5, #4
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8012a1a:	422b      	tst	r3, r5
 8012a1c:	d1ea      	bne.n	80129f4 <lv_style_set_prop+0x9c>
    style->has_group |= 1 << group;
 8012a1e:	3307      	adds	r3, #7
 8012a20:	401d      	ands	r5, r3
 8012a22:	3b1e      	subs	r3, #30
 8012a24:	40ab      	lsls	r3, r5
 8012a26:	79b2      	ldrb	r2, [r6, #6]
 8012a28:	b25b      	sxtb	r3, r3
 8012a2a:	4313      	orrs	r3, r2
 8012a2c:	71b3      	strb	r3, [r6, #6]
}
 8012a2e:	e7e6      	b.n	80129fe <lv_style_set_prop+0xa6>
    *prop_storage = prop;
 8012a30:	4643      	mov	r3, r8
 8012a32:	803b      	strh	r3, [r7, #0]
    *value_storage = value;
 8012a34:	4653      	mov	r3, sl
 8012a36:	00a4      	lsls	r4, r4, #2
 8012a38:	5023      	str	r3, [r4, r0]
                return;
 8012a3a:	e7e0      	b.n	80129fe <lv_style_set_prop+0xa6>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
 8012a3c:	049b      	lsls	r3, r3, #18
 8012a3e:	0c9b      	lsrs	r3, r3, #18
 8012a40:	429d      	cmp	r5, r3
 8012a42:	d014      	beq.n	8012a6e <lv_style_set_prop+0x116>
        uint8_t * values_and_props = lv_mem_alloc(size);
 8012a44:	200c      	movs	r0, #12
 8012a46:	f7ff fab1 	bl	8011fac <lv_mem_alloc>
        if(values_and_props == NULL) return;
 8012a4a:	2800      	cmp	r0, #0
 8012a4c:	d0d7      	beq.n	80129fe <lv_style_set_prop+0xa6>
        style->prop_cnt++;
 8012a4e:	79f3      	ldrb	r3, [r6, #7]
        lv_style_value_t value_tmp = style->v_p.value1;
 8012a50:	6832      	ldr	r2, [r6, #0]
        style->prop_cnt++;
 8012a52:	3301      	adds	r3, #1
 8012a54:	b2db      	uxtb	r3, r3
 8012a56:	71f3      	strb	r3, [r6, #7]
        props[0] = style->prop1;
 8012a58:	88b1      	ldrh	r1, [r6, #4]
        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8012a5a:	009b      	lsls	r3, r3, #2
 8012a5c:	18c3      	adds	r3, r0, r3
        style->v_p.values_and_props = values_and_props;
 8012a5e:	6030      	str	r0, [r6, #0]
        props[0] = style->prop1;
 8012a60:	8019      	strh	r1, [r3, #0]
        values[0] = value_tmp;
 8012a62:	6002      	str	r2, [r0, #0]
    *prop_storage = prop;
 8012a64:	4642      	mov	r2, r8
 8012a66:	805a      	strh	r2, [r3, #2]
    *value_storage = value;
 8012a68:	4653      	mov	r3, sl
 8012a6a:	6043      	str	r3, [r0, #4]
 8012a6c:	e7d3      	b.n	8012a16 <lv_style_set_prop+0xbe>
 8012a6e:	4653      	mov	r3, sl
    *prop_storage = prop;
 8012a70:	80b2      	strh	r2, [r6, #4]
    *value_storage = value;
 8012a72:	6003      	str	r3, [r0, #0]
            return;
 8012a74:	e7c3      	b.n	80129fe <lv_style_set_prop+0xa6>
 8012a76:	2701      	movs	r7, #1
 8012a78:	e7aa      	b.n	80129d0 <lv_style_set_prop+0x78>
 8012a7a:	46c0      	nop			; (mov r8, r8)
 8012a7c:	0000ffff 	.word	0x0000ffff
 8012a80:	7fffffff 	.word	0x7fffffff

08012a84 <lv_style_prop_get_default>:
    switch(prop) {
 8012a84:	3803      	subs	r0, #3
 8012a86:	b280      	uxth	r0, r0
 8012a88:	2869      	cmp	r0, #105	; 0x69
 8012a8a:	d803      	bhi.n	8012a94 <lv_style_prop_get_default+0x10>
 8012a8c:	4b09      	ldr	r3, [pc, #36]	; (8012ab4 <lv_style_prop_get_default+0x30>)
 8012a8e:	0080      	lsls	r0, r0, #2
 8012a90:	581b      	ldr	r3, [r3, r0]
 8012a92:	469f      	mov	pc, r3
            value.ptr = NULL;
 8012a94:	2000      	movs	r0, #0
}
 8012a96:	4770      	bx	lr
            value.num = LV_OPA_COVER;
 8012a98:	20ff      	movs	r0, #255	; 0xff
            break;
 8012a9a:	e7fc      	b.n	8012a96 <lv_style_prop_get_default+0x12>
            value.num = LV_COORD_MAX;
 8012a9c:	4806      	ldr	r0, [pc, #24]	; (8012ab8 <lv_style_prop_get_default+0x34>)
            break;
 8012a9e:	e7fa      	b.n	8012a96 <lv_style_prop_get_default+0x12>
            value.num = LV_BORDER_SIDE_FULL;
 8012aa0:	200f      	movs	r0, #15
            break;
 8012aa2:	e7f8      	b.n	8012a96 <lv_style_prop_get_default+0x12>
            value.ptr = LV_FONT_DEFAULT;
 8012aa4:	4805      	ldr	r0, [pc, #20]	; (8012abc <lv_style_prop_get_default+0x38>)
            break;
 8012aa6:	e7f6      	b.n	8012a96 <lv_style_prop_get_default+0x12>
 8012aa8:	4805      	ldr	r0, [pc, #20]	; (8012ac0 <lv_style_prop_get_default+0x3c>)
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
 8012aaa:	e7f4      	b.n	8012a96 <lv_style_prop_get_default+0x12>
            value.num = LV_IMG_ZOOM_NONE;
 8012aac:	2080      	movs	r0, #128	; 0x80
 8012aae:	0040      	lsls	r0, r0, #1
            break;
 8012ab0:	e7f1      	b.n	8012a96 <lv_style_prop_get_default+0x12>
 8012ab2:	46c0      	nop			; (mov r8, r8)
 8012ab4:	0801bc68 	.word	0x0801bc68
 8012ab8:	00001fff 	.word	0x00001fff
 8012abc:	0801bfc8 	.word	0x0801bfc8
 8012ac0:	0000ffff 	.word	0x0000ffff

08012ac4 <lv_style_get_prop>:
{
 8012ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ac6:	0016      	movs	r6, r2
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8012ac8:	8883      	ldrh	r3, [r0, #4]
 8012aca:	4a28      	ldr	r2, [pc, #160]	; (8012b6c <lv_style_get_prop+0xa8>)
 8012acc:	4293      	cmp	r3, r2
 8012ace:	d014      	beq.n	8012afa <lv_style_get_prop+0x36>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8012ad0:	79c4      	ldrb	r4, [r0, #7]
 8012ad2:	2c00      	cmp	r4, #0
 8012ad4:	d00f      	beq.n	8012af6 <lv_style_get_prop+0x32>

    if(style->prop_cnt > 1) {
 8012ad6:	2c01      	cmp	r4, #1
 8012ad8:	d025      	beq.n	8012b26 <lv_style_get_prop+0x62>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8012ada:	6807      	ldr	r7, [r0, #0]
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8012adc:	2000      	movs	r0, #0
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8012ade:	00a2      	lsls	r2, r4, #2
 8012ae0:	18ba      	adds	r2, r7, r2
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8012ae2:	8815      	ldrh	r5, [r2, #0]
 8012ae4:	04ab      	lsls	r3, r5, #18
 8012ae6:	0c9b      	lsrs	r3, r3, #18
            if(prop_id == prop) {
 8012ae8:	4299      	cmp	r1, r3
 8012aea:	d02a      	beq.n	8012b42 <lv_style_get_prop+0x7e>
        for(i = 0; i < style->prop_cnt; i++) {
 8012aec:	3001      	adds	r0, #1
 8012aee:	3202      	adds	r2, #2
 8012af0:	4284      	cmp	r4, r0
 8012af2:	d8f6      	bhi.n	8012ae2 <lv_style_get_prop+0x1e>
        return LV_STYLE_RES_NOT_FOUND;
 8012af4:	2400      	movs	r4, #0
}
 8012af6:	0020      	movs	r0, r4
 8012af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for(const_prop = style->v_p.const_props; const_prop->prop != LV_STYLE_PROP_INV; const_prop++) {
 8012afa:	6805      	ldr	r5, [r0, #0]
 8012afc:	882c      	ldrh	r4, [r5, #0]
 8012afe:	2c00      	cmp	r4, #0
 8012b00:	d104      	bne.n	8012b0c <lv_style_get_prop+0x48>
 8012b02:	e7f7      	b.n	8012af4 <lv_style_get_prop+0x30>
 8012b04:	892c      	ldrh	r4, [r5, #8]
 8012b06:	3508      	adds	r5, #8
 8012b08:	2c00      	cmp	r4, #0
 8012b0a:	d0f4      	beq.n	8012af6 <lv_style_get_prop+0x32>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8012b0c:	04a3      	lsls	r3, r4, #18
 8012b0e:	0c9b      	lsrs	r3, r3, #18
            if(prop_id == prop) {
 8012b10:	4299      	cmp	r1, r3
 8012b12:	d1f7      	bne.n	8012b04 <lv_style_get_prop+0x40>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8012b14:	b223      	sxth	r3, r4
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	db11      	blt.n	8012b3e <lv_style_get_prop+0x7a>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8012b1a:	0463      	lsls	r3, r4, #17
 8012b1c:	d41b      	bmi.n	8012b56 <lv_style_get_prop+0x92>
 8012b1e:	686b      	ldr	r3, [r5, #4]
                return LV_STYLE_RES_FOUND;
 8012b20:	2401      	movs	r4, #1
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8012b22:	6033      	str	r3, [r6, #0]
 8012b24:	e7e7      	b.n	8012af6 <lv_style_get_prop+0x32>
                }
                return LV_STYLE_RES_FOUND;
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8012b26:	049a      	lsls	r2, r3, #18
 8012b28:	0c92      	lsrs	r2, r2, #18
 8012b2a:	4291      	cmp	r1, r2
 8012b2c:	d1e2      	bne.n	8012af4 <lv_style_get_prop+0x30>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8012b2e:	b21a      	sxth	r2, r3
 8012b30:	2a00      	cmp	r2, #0
 8012b32:	db04      	blt.n	8012b3e <lv_style_get_prop+0x7a>
            return LV_STYLE_RES_INHERIT;
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8012b34:	045b      	lsls	r3, r3, #17
 8012b36:	d414      	bmi.n	8012b62 <lv_style_get_prop+0x9e>
 8012b38:	6803      	ldr	r3, [r0, #0]
 8012b3a:	6033      	str	r3, [r6, #0]
 8012b3c:	e7db      	b.n	8012af6 <lv_style_get_prop+0x32>
                    return LV_STYLE_RES_INHERIT;
 8012b3e:	2402      	movs	r4, #2
 8012b40:	e7d9      	b.n	8012af6 <lv_style_get_prop+0x32>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8012b42:	b22b      	sxth	r3, r5
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	dbfa      	blt.n	8012b3e <lv_style_get_prop+0x7a>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8012b48:	046b      	lsls	r3, r5, #17
 8012b4a:	d404      	bmi.n	8012b56 <lv_style_get_prop+0x92>
                    *value = values[i];
 8012b4c:	0080      	lsls	r0, r0, #2
 8012b4e:	59c3      	ldr	r3, [r0, r7]
                return LV_STYLE_RES_FOUND;
 8012b50:	2401      	movs	r4, #1
                    *value = values[i];
 8012b52:	6033      	str	r3, [r6, #0]
 8012b54:	e7cf      	b.n	8012af6 <lv_style_get_prop+0x32>
                    *value = lv_style_prop_get_default(prop_id);
 8012b56:	0008      	movs	r0, r1
 8012b58:	f7ff ff94 	bl	8012a84 <lv_style_prop_get_default>
                return LV_STYLE_RES_FOUND;
 8012b5c:	2401      	movs	r4, #1
                    *value = lv_style_prop_get_default(prop_id);
 8012b5e:	6030      	str	r0, [r6, #0]
 8012b60:	e7c9      	b.n	8012af6 <lv_style_get_prop+0x32>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8012b62:	0008      	movs	r0, r1
 8012b64:	f7ff ff8e 	bl	8012a84 <lv_style_prop_get_default>
 8012b68:	6030      	str	r0, [r6, #0]
 8012b6a:	e7c4      	b.n	8012af6 <lv_style_get_prop+0x32>
 8012b6c:	0000ffff 	.word	0x0000ffff

08012b70 <lv_style_is_empty>:
    return style->prop_cnt == 0 ? true : false;
 8012b70:	79c0      	ldrb	r0, [r0, #7]
 8012b72:	4243      	negs	r3, r0
 8012b74:	4158      	adcs	r0, r3
 8012b76:	b2c0      	uxtb	r0, r0
}
 8012b78:	4770      	bx	lr
 8012b7a:	46c0      	nop			; (mov r8, r8)

08012b7c <_lv_style_get_prop_group>:
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8012b7c:	2218      	movs	r2, #24
    uint16_t group = (prop & 0x1FF) >> 4;
 8012b7e:	0903      	lsrs	r3, r0, #4
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8012b80:	2007      	movs	r0, #7
 8012b82:	421a      	tst	r2, r3
 8012b84:	d101      	bne.n	8012b8a <_lv_style_get_prop_group+0xe>
    return (uint8_t)group;
 8012b86:	3018      	adds	r0, #24
 8012b88:	4018      	ands	r0, r3
}
 8012b8a:	4770      	bx	lr

08012b8c <_lv_style_prop_lookup_flags>:
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 8012b8c:	4b0d      	ldr	r3, [pc, #52]	; (8012bc4 <_lv_style_prop_lookup_flags+0x38>)
 8012b8e:	4298      	cmp	r0, r3
 8012b90:	d016      	beq.n	8012bc0 <_lv_style_prop_lookup_flags+0x34>
    if(prop == LV_STYLE_PROP_INV) return 0;
 8012b92:	2800      	cmp	r0, #0
 8012b94:	d00d      	beq.n	8012bb2 <_lv_style_prop_lookup_flags+0x26>
    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS)
 8012b96:	286f      	cmp	r0, #111	; 0x6f
 8012b98:	d90d      	bls.n	8012bb6 <_lv_style_prop_lookup_flags+0x2a>
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 8012b9a:	4b0b      	ldr	r3, [pc, #44]	; (8012bc8 <_lv_style_prop_lookup_flags+0x3c>)
 8012b9c:	681a      	ldr	r2, [r3, #0]
 8012b9e:	2a00      	cmp	r2, #0
 8012ba0:	d007      	beq.n	8012bb2 <_lv_style_prop_lookup_flags+0x26>
 8012ba2:	490a      	ldr	r1, [pc, #40]	; (8012bcc <_lv_style_prop_lookup_flags+0x40>)
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
 8012ba4:	3870      	subs	r0, #112	; 0x70
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 8012ba6:	6809      	ldr	r1, [r1, #0]
 8012ba8:	b283      	uxth	r3, r0
    if(prop == LV_STYLE_PROP_INV) return 0;
 8012baa:	2000      	movs	r0, #0
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 8012bac:	428b      	cmp	r3, r1
 8012bae:	d305      	bcc.n	8012bbc <_lv_style_prop_lookup_flags+0x30>
}
 8012bb0:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_INV) return 0;
 8012bb2:	2000      	movs	r0, #0
 8012bb4:	e7fc      	b.n	8012bb0 <_lv_style_prop_lookup_flags+0x24>
        return _lv_style_builtin_prop_flag_lookup_table[prop];
 8012bb6:	4b06      	ldr	r3, [pc, #24]	; (8012bd0 <_lv_style_prop_lookup_flags+0x44>)
 8012bb8:	5c18      	ldrb	r0, [r3, r0]
 8012bba:	e7f9      	b.n	8012bb0 <_lv_style_prop_lookup_flags+0x24>
        return LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[prop];
 8012bbc:	5cd0      	ldrb	r0, [r2, r3]
 8012bbe:	e7f7      	b.n	8012bb0 <_lv_style_prop_lookup_flags+0x24>
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 8012bc0:	201f      	movs	r0, #31
 8012bc2:	e7f5      	b.n	8012bb0 <_lv_style_prop_lookup_flags+0x24>
 8012bc4:	0000ffff 	.word	0x0000ffff
 8012bc8:	200033e0 	.word	0x200033e0
 8012bcc:	20007c84 	.word	0x20007c84
 8012bd0:	0801be10 	.word	0x0801be10

08012bd4 <lv_style_set_width>:
#include "lv_style.h"

void lv_style_set_width(lv_style_t * style, lv_coord_t value)
{
 8012bd4:	b510      	push	{r4, lr}
 8012bd6:	000a      	movs	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_WIDTH, v);
 8012bd8:	2101      	movs	r1, #1
 8012bda:	f7ff febd 	bl	8012958 <lv_style_set_prop>
}
 8012bde:	bd10      	pop	{r4, pc}

08012be0 <lv_style_set_bg_color>:
    };
    lv_style_set_prop(style, LV_STYLE_PAD_COLUMN, v);
}

void lv_style_set_bg_color(lv_style_t * style, lv_color_t value)
{
 8012be0:	b500      	push	{lr}
 8012be2:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8012be4:	2300      	movs	r3, #0
 8012be6:	466a      	mov	r2, sp
 8012be8:	8013      	strh	r3, [r2, #0]
 8012bea:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8012bec:	2120      	movs	r1, #32
 8012bee:	f7ff feb3 	bl	8012958 <lv_style_set_prop>
}
 8012bf2:	b003      	add	sp, #12
 8012bf4:	bd00      	pop	{pc}
 8012bf6:	46c0      	nop			; (mov r8, r8)

08012bf8 <lv_style_set_bg_opa>:

void lv_style_set_bg_opa(lv_style_t * style, lv_opa_t value)
{
 8012bf8:	b510      	push	{r4, lr}
 8012bfa:	000a      	movs	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BG_OPA, v);
 8012bfc:	2121      	movs	r1, #33	; 0x21
 8012bfe:	f7ff feab 	bl	8012958 <lv_style_set_prop>
}
 8012c02:	bd10      	pop	{r4, pc}

08012c04 <lv_style_set_line_width>:
    };
    lv_style_set_prop(style, LV_STYLE_IMG_RECOLOR_OPA, v);
}

void lv_style_set_line_width(lv_style_t * style, lv_coord_t value)
{
 8012c04:	b510      	push	{r4, lr}
 8012c06:	000a      	movs	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_WIDTH, v);
 8012c08:	2149      	movs	r1, #73	; 0x49
 8012c0a:	f7ff fea5 	bl	8012958 <lv_style_set_prop>
}
 8012c0e:	bd10      	pop	{r4, pc}

08012c10 <lv_style_set_line_color>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_ROUNDED, v);
}

void lv_style_set_line_color(lv_style_t * style, lv_color_t value)
{
 8012c10:	b500      	push	{lr}
 8012c12:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8012c14:	2300      	movs	r3, #0
 8012c16:	466a      	mov	r2, sp
 8012c18:	8013      	strh	r3, [r2, #0]
 8012c1a:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 8012c1c:	214d      	movs	r1, #77	; 0x4d
 8012c1e:	f7ff fe9b 	bl	8012958 <lv_style_set_prop>
}
 8012c22:	b003      	add	sp, #12
 8012c24:	bd00      	pop	{pc}
 8012c26:	46c0      	nop			; (mov r8, r8)

08012c28 <lv_style_set_arc_width>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_OPA, v);
}

void lv_style_set_arc_width(lv_style_t * style, lv_coord_t value)
{
 8012c28:	b510      	push	{r4, lr}
 8012c2a:	000a      	movs	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_WIDTH, v);
 8012c2c:	2150      	movs	r1, #80	; 0x50
 8012c2e:	f7ff fe93 	bl	8012958 <lv_style_set_prop>
}
 8012c32:	bd10      	pop	{r4, pc}

08012c34 <lv_style_set_arc_color>:
    };
    lv_style_set_prop(style, LV_STYLE_ARC_ROUNDED, v);
}

void lv_style_set_arc_color(lv_style_t * style, lv_color_t value)
{
 8012c34:	b500      	push	{lr}
 8012c36:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8012c38:	2300      	movs	r3, #0
 8012c3a:	466a      	mov	r2, sp
 8012c3c:	8013      	strh	r3, [r2, #0]
 8012c3e:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8012c40:	2152      	movs	r1, #82	; 0x52
 8012c42:	f7ff fe89 	bl	8012958 <lv_style_set_prop>
}
 8012c46:	b003      	add	sp, #12
 8012c48:	bd00      	pop	{pc}
 8012c4a:	46c0      	nop			; (mov r8, r8)

08012c4c <lv_style_set_text_color>:
    };
    lv_style_set_prop(style, LV_STYLE_ARC_IMG_SRC, v);
}

void lv_style_set_text_color(lv_style_t * style, lv_color_t value)
{
 8012c4c:	b500      	push	{lr}
 8012c4e:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8012c50:	2300      	movs	r3, #0
 8012c52:	466a      	mov	r2, sp
 8012c54:	8013      	strh	r3, [r2, #0]
 8012c56:	b28a      	uxth	r2, r1
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 8012c58:	2155      	movs	r1, #85	; 0x55
 8012c5a:	f7ff fe7d 	bl	8012958 <lv_style_set_prop>
}
 8012c5e:	b003      	add	sp, #12
 8012c60:	bd00      	pop	{pc}
 8012c62:	46c0      	nop			; (mov r8, r8)

08012c64 <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 8012c64:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 8012c66:	2118      	movs	r1, #24
 8012c68:	4803      	ldr	r0, [pc, #12]	; (8012c78 <_lv_timer_core_init+0x14>)
 8012c6a:	f7ff f88d 	bl	8011d88 <_lv_ll_init>
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
    lv_timer_run = en;
 8012c6e:	2201      	movs	r2, #1
 8012c70:	4b02      	ldr	r3, [pc, #8]	; (8012c7c <_lv_timer_core_init+0x18>)
 8012c72:	701a      	strb	r2, [r3, #0]
}
 8012c74:	bd10      	pop	{r4, pc}
 8012c76:	46c0      	nop			; (mov r8, r8)
 8012c78:	200033ec 	.word	0x200033ec
 8012c7c:	20007c98 	.word	0x20007c98

08012c80 <lv_timer_handler>:
{
 8012c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c82:	46de      	mov	lr, fp
 8012c84:	4657      	mov	r7, sl
 8012c86:	464e      	mov	r6, r9
 8012c88:	4645      	mov	r5, r8
 8012c8a:	b5e0      	push	{r5, r6, r7, lr}
    if(already_running) {
 8012c8c:	4b73      	ldr	r3, [pc, #460]	; (8012e5c <lv_timer_handler+0x1dc>)
{
 8012c8e:	b083      	sub	sp, #12
    if(already_running) {
 8012c90:	781b      	ldrb	r3, [r3, #0]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d000      	beq.n	8012c98 <lv_timer_handler+0x18>
 8012c96:	e0ca      	b.n	8012e2e <lv_timer_handler+0x1ae>
    already_running = true;
 8012c98:	4a70      	ldr	r2, [pc, #448]	; (8012e5c <lv_timer_handler+0x1dc>)
 8012c9a:	3301      	adds	r3, #1
 8012c9c:	7013      	strb	r3, [r2, #0]
    if(lv_timer_run == false) {
 8012c9e:	4b70      	ldr	r3, [pc, #448]	; (8012e60 <lv_timer_handler+0x1e0>)
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d109      	bne.n	8012cba <lv_timer_handler+0x3a>
        return 1;
 8012ca6:	2501      	movs	r5, #1
        already_running = false; /*Release mutex*/
 8012ca8:	7013      	strb	r3, [r2, #0]
}
 8012caa:	0028      	movs	r0, r5
 8012cac:	b003      	add	sp, #12
 8012cae:	bcf0      	pop	{r4, r5, r6, r7}
 8012cb0:	46bb      	mov	fp, r7
 8012cb2:	46b2      	mov	sl, r6
 8012cb4:	46a9      	mov	r9, r5
 8012cb6:	46a0      	mov	r8, r4
 8012cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t handler_start = lv_tick_get();
 8012cba:	f7fe f81d 	bl	8010cf8 <lv_tick_get>
 8012cbe:	9001      	str	r0, [sp, #4]
    if(handler_start == 0) {
 8012cc0:	2800      	cmp	r0, #0
 8012cc2:	d100      	bne.n	8012cc6 <lv_timer_handler+0x46>
 8012cc4:	e0b7      	b.n	8012e36 <lv_timer_handler+0x1b6>
 8012cc6:	4b67      	ldr	r3, [pc, #412]	; (8012e64 <lv_timer_handler+0x1e4>)
 8012cc8:	4f67      	ldr	r7, [pc, #412]	; (8012e68 <lv_timer_handler+0x1e8>)
 8012cca:	4698      	mov	r8, r3
 8012ccc:	4b67      	ldr	r3, [pc, #412]	; (8012e6c <lv_timer_handler+0x1ec>)
 8012cce:	4e68      	ldr	r6, [pc, #416]	; (8012e70 <lv_timer_handler+0x1f0>)
 8012cd0:	469b      	mov	fp, r3
 * @param timer pointer to lv_timer
 * @return true: execute, false: not executed
 */
static bool lv_timer_exec(lv_timer_t * timer)
{
    if(timer->paused) return false;
 8012cd2:	2301      	movs	r3, #1
 8012cd4:	4699      	mov	r9, r3
        timer_deleted             = false;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	4642      	mov	r2, r8
 8012cda:	7013      	strb	r3, [r2, #0]
        timer_created             = false;
 8012cdc:	465a      	mov	r2, fp
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012cde:	0038      	movs	r0, r7
        timer_created             = false;
 8012ce0:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012ce2:	f7ff f8b3 	bl	8011e4c <_lv_ll_get_head>
 8012ce6:	0004      	movs	r4, r0
 8012ce8:	6034      	str	r4, [r6, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8012cea:	2c00      	cmp	r4, #0
 8012cec:	d023      	beq.n	8012d36 <lv_timer_handler+0xb6>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8012cee:	0021      	movs	r1, r4
 8012cf0:	0038      	movs	r0, r7
 8012cf2:	f7ff f8b7 	bl	8011e64 <_lv_ll_get_next>
    if(timer->paused) return false;
 8012cf6:	464a      	mov	r2, r9
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 8012cf8:	6835      	ldr	r5, [r6, #0]
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8012cfa:	0004      	movs	r4, r0
    if(timer->paused) return false;
 8012cfc:	7d2b      	ldrb	r3, [r5, #20]
 8012cfe:	421a      	tst	r2, r3
 8012d00:	d1f2      	bne.n	8012ce8 <lv_timer_handler+0x68>
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8012d02:	6868      	ldr	r0, [r5, #4]
 8012d04:	f7fe f806 	bl	8010d14 <lv_tick_elaps>
    if(elp >= timer->period)
 8012d08:	682b      	ldr	r3, [r5, #0]
 8012d0a:	4298      	cmp	r0, r3
 8012d0c:	d25e      	bcs.n	8012dcc <lv_timer_handler+0x14c>
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 8012d0e:	4643      	mov	r3, r8
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d1e8      	bne.n	8012ce8 <lv_timer_handler+0x68>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8012d16:	692b      	ldr	r3, [r5, #16]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d1e5      	bne.n	8012ce8 <lv_timer_handler+0x68>
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 8012d1c:	0029      	movs	r1, r5
 8012d1e:	0038      	movs	r0, r7
 8012d20:	f7ff f86a 	bl	8011df8 <_lv_ll_remove>
    timer_deleted = true;
 8012d24:	4643      	mov	r3, r8
 8012d26:	464a      	mov	r2, r9
    lv_mem_free(timer);
 8012d28:	0028      	movs	r0, r5
    timer_deleted = true;
 8012d2a:	701a      	strb	r2, [r3, #0]
    lv_mem_free(timer);
 8012d2c:	f7ff f960 	bl	8011ff0 <lv_mem_free>
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012d30:	6034      	str	r4, [r6, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8012d32:	2c00      	cmp	r4, #0
 8012d34:	d1db      	bne.n	8012cee <lv_timer_handler+0x6e>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012d36:	0038      	movs	r0, r7
 8012d38:	f7ff f888 	bl	8011e4c <_lv_ll_get_head>
    uint32_t time_till_next = LV_NO_TIMER_READY;
 8012d3c:	2501      	movs	r5, #1
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8012d3e:	0004      	movs	r4, r0
        if(!next->paused) {
 8012d40:	2601      	movs	r6, #1
    uint32_t time_till_next = LV_NO_TIMER_READY;
 8012d42:	426d      	negs	r5, r5
    while(next) {
 8012d44:	2800      	cmp	r0, #0
 8012d46:	d106      	bne.n	8012d56 <lv_timer_handler+0xd6>
 8012d48:	e018      	b.n	8012d7c <lv_timer_handler+0xfc>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8012d4a:	0021      	movs	r1, r4
 8012d4c:	0038      	movs	r0, r7
 8012d4e:	f7ff f889 	bl	8011e64 <_lv_ll_get_next>
 8012d52:	1e04      	subs	r4, r0, #0
    while(next) {
 8012d54:	d012      	beq.n	8012d7c <lv_timer_handler+0xfc>
        if(!next->paused) {
 8012d56:	7d23      	ldrb	r3, [r4, #20]
 8012d58:	421e      	tst	r6, r3
 8012d5a:	d1f6      	bne.n	8012d4a <lv_timer_handler+0xca>
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8012d5c:	6860      	ldr	r0, [r4, #4]
 8012d5e:	f7fd ffd9 	bl	8010d14 <lv_tick_elaps>
    if(elp >= timer->period)
 8012d62:	6823      	ldr	r3, [r4, #0]
 8012d64:	4298      	cmp	r0, r3
 8012d66:	d264      	bcs.n	8012e32 <lv_timer_handler+0x1b2>
        return 0;
    return timer->period - elp;
 8012d68:	1a18      	subs	r0, r3, r0
 8012d6a:	4285      	cmp	r5, r0
 8012d6c:	d9ed      	bls.n	8012d4a <lv_timer_handler+0xca>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8012d6e:	0021      	movs	r1, r4
 8012d70:	0005      	movs	r5, r0
 8012d72:	0038      	movs	r0, r7
 8012d74:	f7ff f876 	bl	8011e64 <_lv_ll_get_next>
 8012d78:	1e04      	subs	r4, r0, #0
    while(next) {
 8012d7a:	d1ec      	bne.n	8012d56 <lv_timer_handler+0xd6>
    busy_time += lv_tick_elaps(handler_start);
 8012d7c:	9801      	ldr	r0, [sp, #4]
 8012d7e:	f7fd ffc9 	bl	8010d14 <lv_tick_elaps>
 8012d82:	4c3c      	ldr	r4, [pc, #240]	; (8012e74 <lv_timer_handler+0x1f4>)
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8012d84:	4e3c      	ldr	r6, [pc, #240]	; (8012e78 <lv_timer_handler+0x1f8>)
    busy_time += lv_tick_elaps(handler_start);
 8012d86:	6823      	ldr	r3, [r4, #0]
 8012d88:	469c      	mov	ip, r3
 8012d8a:	4460      	add	r0, ip
 8012d8c:	6020      	str	r0, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8012d8e:	6830      	ldr	r0, [r6, #0]
 8012d90:	f7fd ffc0 	bl	8010d14 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8012d94:	23fa      	movs	r3, #250	; 0xfa
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8012d96:	0001      	movs	r1, r0
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8012d98:	005b      	lsls	r3, r3, #1
 8012d9a:	4298      	cmp	r0, r3
 8012d9c:	d312      	bcc.n	8012dc4 <lv_timer_handler+0x144>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 8012d9e:	2064      	movs	r0, #100	; 0x64
 8012da0:	6823      	ldr	r3, [r4, #0]
 8012da2:	4358      	muls	r0, r3
 8012da4:	f7ed f9c0 	bl	8000128 <__udivsi3>
 8012da8:	b2c0      	uxtb	r0, r0
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8012daa:	2300      	movs	r3, #0
 8012dac:	2864      	cmp	r0, #100	; 0x64
 8012dae:	d802      	bhi.n	8012db6 <lv_timer_handler+0x136>
 8012db0:	2364      	movs	r3, #100	; 0x64
 8012db2:	1a1b      	subs	r3, r3, r0
 8012db4:	b2db      	uxtb	r3, r3
 8012db6:	4a31      	ldr	r2, [pc, #196]	; (8012e7c <lv_timer_handler+0x1fc>)
 8012db8:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
 8012dbe:	f7fd ff9b 	bl	8010cf8 <lv_tick_get>
 8012dc2:	6030      	str	r0, [r6, #0]
    already_running = false; /*Release the mutex*/
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	4a25      	ldr	r2, [pc, #148]	; (8012e5c <lv_timer_handler+0x1dc>)
 8012dc8:	7013      	strb	r3, [r2, #0]
    return time_till_next;
 8012dca:	e76e      	b.n	8012caa <lv_timer_handler+0x2a>
        int32_t original_repeat_count = timer->repeat_count;
 8012dcc:	692b      	ldr	r3, [r5, #16]
 8012dce:	469a      	mov	sl, r3
        if(timer->repeat_count > 0) timer->repeat_count--;
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	dd12      	ble.n	8012dfa <lv_timer_handler+0x17a>
 8012dd4:	3b01      	subs	r3, #1
 8012dd6:	612b      	str	r3, [r5, #16]
        timer->last_run = lv_tick_get();
 8012dd8:	f7fd ff8e 	bl	8010cf8 <lv_tick_get>
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8012ddc:	68ab      	ldr	r3, [r5, #8]
        timer->last_run = lv_tick_get();
 8012dde:	6068      	str	r0, [r5, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d013      	beq.n	8012e0c <lv_timer_handler+0x18c>
 8012de4:	0028      	movs	r0, r5
 8012de6:	4798      	blx	r3
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 8012de8:	4643      	mov	r3, r8
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d011      	beq.n	8012e14 <lv_timer_handler+0x194>
    } while(LV_GC_ROOT(_lv_timer_act));
 8012df0:	6833      	ldr	r3, [r6, #0]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d000      	beq.n	8012df8 <lv_timer_handler+0x178>
 8012df6:	e76e      	b.n	8012cd6 <lv_timer_handler+0x56>
 8012df8:	e79d      	b.n	8012d36 <lv_timer_handler+0xb6>
        timer->last_run = lv_tick_get();
 8012dfa:	f7fd ff7d 	bl	8010cf8 <lv_tick_get>
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8012dfe:	68ab      	ldr	r3, [r5, #8]
        timer->last_run = lv_tick_get();
 8012e00:	6068      	str	r0, [r5, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d002      	beq.n	8012e0c <lv_timer_handler+0x18c>
 8012e06:	4652      	mov	r2, sl
 8012e08:	2a00      	cmp	r2, #0
 8012e0a:	d1eb      	bne.n	8012de4 <lv_timer_handler+0x164>
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 8012e0c:	4643      	mov	r3, r8
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d1ed      	bne.n	8012df0 <lv_timer_handler+0x170>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8012e14:	692b      	ldr	r3, [r5, #16]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d015      	beq.n	8012e46 <lv_timer_handler+0x1c6>
                if(timer_created || timer_deleted) {
 8012e1a:	465b      	mov	r3, fp
 8012e1c:	781b      	ldrb	r3, [r3, #0]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d1e6      	bne.n	8012df0 <lv_timer_handler+0x170>
 8012e22:	4643      	mov	r3, r8
 8012e24:	781b      	ldrb	r3, [r3, #0]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d100      	bne.n	8012e2c <lv_timer_handler+0x1ac>
 8012e2a:	e75d      	b.n	8012ce8 <lv_timer_handler+0x68>
 8012e2c:	e7e0      	b.n	8012df0 <lv_timer_handler+0x170>
        return 1;
 8012e2e:	2501      	movs	r5, #1
 8012e30:	e73b      	b.n	8012caa <lv_timer_handler+0x2a>
 8012e32:	2500      	movs	r5, #0
            if(delay < time_till_next)
 8012e34:	e789      	b.n	8012d4a <lv_timer_handler+0xca>
        run_cnt++;
 8012e36:	4a12      	ldr	r2, [pc, #72]	; (8012e80 <lv_timer_handler+0x200>)
 8012e38:	6813      	ldr	r3, [r2, #0]
 8012e3a:	3301      	adds	r3, #1
        if(run_cnt > 100) {
 8012e3c:	2b64      	cmp	r3, #100	; 0x64
 8012e3e:	d900      	bls.n	8012e42 <lv_timer_handler+0x1c2>
            run_cnt = 0;
 8012e40:	9b01      	ldr	r3, [sp, #4]
 8012e42:	6013      	str	r3, [r2, #0]
 8012e44:	e73f      	b.n	8012cc6 <lv_timer_handler+0x46>
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 8012e46:	0038      	movs	r0, r7
 8012e48:	0029      	movs	r1, r5
 8012e4a:	f7fe ffd5 	bl	8011df8 <_lv_ll_remove>
    timer_deleted = true;
 8012e4e:	4643      	mov	r3, r8
 8012e50:	464a      	mov	r2, r9
    lv_mem_free(timer);
 8012e52:	0028      	movs	r0, r5
    timer_deleted = true;
 8012e54:	701a      	strb	r2, [r3, #0]
    lv_mem_free(timer);
 8012e56:	f7ff f8cb 	bl	8011ff0 <lv_mem_free>
 8012e5a:	e7de      	b.n	8012e1a <lv_timer_handler+0x19a>
 8012e5c:	20007c88 	.word	0x20007c88
 8012e60:	20007c98 	.word	0x20007c98
 8012e64:	20007ca1 	.word	0x20007ca1
 8012e68:	200033ec 	.word	0x200033ec
 8012e6c:	20007ca0 	.word	0x20007ca0
 8012e70:	200033e8 	.word	0x200033e8
 8012e74:	20007c8c 	.word	0x20007c8c
 8012e78:	20007c94 	.word	0x20007c94
 8012e7c:	20007c90 	.word	0x20007c90
 8012e80:	20007c9c 	.word	0x20007c9c

08012e84 <lv_timer_create>:
{
 8012e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e86:	0005      	movs	r5, r0
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8012e88:	480c      	ldr	r0, [pc, #48]	; (8012ebc <lv_timer_create+0x38>)
{
 8012e8a:	000e      	movs	r6, r1
 8012e8c:	0017      	movs	r7, r2
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8012e8e:	f7fe ff83 	bl	8011d98 <_lv_ll_ins_head>
 8012e92:	1e04      	subs	r4, r0, #0
    LV_ASSERT_MALLOC(new_timer);
 8012e94:	d010      	beq.n	8012eb8 <lv_timer_create+0x34>
    new_timer->repeat_count = -1;
 8012e96:	2301      	movs	r3, #1
    new_timer->timer_cb = timer_xcb;
 8012e98:	6085      	str	r5, [r0, #8]
    new_timer->paused = 0;
 8012e9a:	2501      	movs	r5, #1
    new_timer->repeat_count = -1;
 8012e9c:	425b      	negs	r3, r3
 8012e9e:	6103      	str	r3, [r0, #16]
    new_timer->paused = 0;
 8012ea0:	7d03      	ldrb	r3, [r0, #20]
    new_timer->period = period;
 8012ea2:	6006      	str	r6, [r0, #0]
    new_timer->paused = 0;
 8012ea4:	43ab      	bics	r3, r5
 8012ea6:	7503      	strb	r3, [r0, #20]
    new_timer->last_run = lv_tick_get();
 8012ea8:	f7fd ff26 	bl	8010cf8 <lv_tick_get>
    timer_created = true;
 8012eac:	4b04      	ldr	r3, [pc, #16]	; (8012ec0 <lv_timer_create+0x3c>)
    new_timer->last_run = lv_tick_get();
 8012eae:	6060      	str	r0, [r4, #4]
    new_timer->user_data = user_data;
 8012eb0:	60e7      	str	r7, [r4, #12]
}
 8012eb2:	0020      	movs	r0, r4
    timer_created = true;
 8012eb4:	701d      	strb	r5, [r3, #0]
}
 8012eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(new_timer);
 8012eb8:	e7fe      	b.n	8012eb8 <lv_timer_create+0x34>
 8012eba:	46c0      	nop			; (mov r8, r8)
 8012ebc:	200033ec 	.word	0x200033ec
 8012ec0:	20007ca0 	.word	0x20007ca0

08012ec4 <lv_timer_pause>:
    timer->paused = true;
 8012ec4:	2201      	movs	r2, #1
 8012ec6:	7d03      	ldrb	r3, [r0, #20]
 8012ec8:	4313      	orrs	r3, r2
 8012eca:	7503      	strb	r3, [r0, #20]
}
 8012ecc:	4770      	bx	lr
 8012ece:	46c0      	nop			; (mov r8, r8)

08012ed0 <lv_timer_resume>:
    timer->paused = false;
 8012ed0:	2201      	movs	r2, #1
 8012ed2:	7d03      	ldrb	r3, [r0, #20]
 8012ed4:	4393      	bics	r3, r2
 8012ed6:	7503      	strb	r3, [r0, #20]
}
 8012ed8:	4770      	bx	lr
 8012eda:	46c0      	nop			; (mov r8, r8)

08012edc <lv_timer_ready>:
{
 8012edc:	b510      	push	{r4, lr}
 8012ede:	0004      	movs	r4, r0
    timer->last_run = lv_tick_get() - timer->period - 1;
 8012ee0:	f7fd ff0a 	bl	8010cf8 <lv_tick_get>
 8012ee4:	6823      	ldr	r3, [r4, #0]
 8012ee6:	43db      	mvns	r3, r3
 8012ee8:	181b      	adds	r3, r3, r0
 8012eea:	6063      	str	r3, [r4, #4]
}
 8012eec:	bd10      	pop	{r4, pc}
 8012eee:	46c0      	nop			; (mov r8, r8)

08012ef0 <block_split>:
                     tlsf_cast(unsigned char *, ptr) - block_start_offset);
}

static void * block_to_ptr(const block_header_t * block)
{
    return tlsf_cast(void *,
 8012ef0:	1843      	adds	r3, r0, r1
    return block_size(block) >= sizeof(block_header_t) + size;
}

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 8012ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
    return tlsf_cast(void *,
 8012ef4:	001c      	movs	r4, r3
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8012ef6:	2203      	movs	r2, #3
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8012ef8:	1d1d      	adds	r5, r3, #4
    return tlsf_cast(void *,
 8012efa:	340c      	adds	r4, #12
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8012efc:	330f      	adds	r3, #15
 8012efe:	4393      	bics	r3, r2
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);

    const size_t remain_size = block_size(block) - (size + block_header_overhead);

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 8012f00:	429c      	cmp	r4, r3
 8012f02:	d000      	beq.n	8012f06 <block_split+0x16>
 8012f04:	e7fe      	b.n	8012f04 <block_split+0x14>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8012f06:	6843      	ldr	r3, [r0, #4]
 8012f08:	4393      	bics	r3, r2
    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 8012f0a:	1a5e      	subs	r6, r3, r1
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 8012f0c:	1f37      	subs	r7, r6, #4
 8012f0e:	198e      	adds	r6, r1, r6
 8012f10:	429e      	cmp	r6, r3
 8012f12:	d000      	beq.n	8012f16 <block_split+0x26>
 8012f14:	e7fe      	b.n	8012f14 <block_split+0x24>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8012f16:	686b      	ldr	r3, [r5, #4]
 8012f18:	4013      	ands	r3, r2
 8012f1a:	433b      	orrs	r3, r7
 8012f1c:	606b      	str	r3, [r5, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8012f1e:	4393      	bics	r3, r2
    block_set_size(remaining, remain_size);
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8012f20:	2b0b      	cmp	r3, #11
 8012f22:	d907      	bls.n	8012f34 <block_split+0x44>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8012f24:	6843      	ldr	r3, [r0, #4]
 8012f26:	4013      	ands	r3, r2
 8012f28:	4319      	orrs	r1, r3
 8012f2a:	6041      	str	r1, [r0, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8012f2c:	686b      	ldr	r3, [r5, #4]
 8012f2e:	4393      	bics	r3, r2
    tlsf_assert(!block_is_last(block));
 8012f30:	d101      	bne.n	8012f36 <block_split+0x46>
 8012f32:	e7fe      	b.n	8012f32 <block_split+0x42>
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8012f34:	e7fe      	b.n	8012f34 <block_split+0x44>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8012f36:	18e4      	adds	r4, r4, r3
    block->size |= block_header_prev_free_bit;
 8012f38:	2302      	movs	r3, #2
 8012f3a:	6822      	ldr	r2, [r4, #0]
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8012f3c:	3c04      	subs	r4, #4
    block->size |= block_header_prev_free_bit;
 8012f3e:	4313      	orrs	r3, r2
 8012f40:	6063      	str	r3, [r4, #4]
    block->size |= block_header_free_bit;
 8012f42:	2301      	movs	r3, #1
 8012f44:	686a      	ldr	r2, [r5, #4]

    block_set_size(block, size);
    block_mark_as_free(remaining);

    return remaining;
}
 8012f46:	0028      	movs	r0, r5
    block->size |= block_header_free_bit;
 8012f48:	4313      	orrs	r3, r2
    next->prev_phys_block = block;
 8012f4a:	6025      	str	r5, [r4, #0]
    block->size |= block_header_free_bit;
 8012f4c:	606b      	str	r3, [r5, #4]
}
 8012f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012f50 <block_insert>:
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8012f50:	2303      	movs	r3, #3
{
 8012f52:	b570      	push	{r4, r5, r6, lr}
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8012f54:	684c      	ldr	r4, [r1, #4]
{
 8012f56:	0006      	movs	r6, r0
 8012f58:	000d      	movs	r5, r1
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8012f5a:	439c      	bics	r4, r3
    if(size < SMALL_BLOCK_SIZE) {
 8012f5c:	2c7f      	cmp	r4, #127	; 0x7f
 8012f5e:	d809      	bhi.n	8012f74 <block_insert+0x24>
        fl = 0;
 8012f60:	2200      	movs	r2, #0
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8012f62:	10a4      	asrs	r4, r4, #2
    block_header_t * current = control->blocks[fl][sl];
 8012f64:	0153      	lsls	r3, r2, #5
 8012f66:	191b      	adds	r3, r3, r4
 8012f68:	009b      	lsls	r3, r3, #2
 8012f6a:	18f3      	adds	r3, r6, r3
 8012f6c:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tlsf_assert(current && "free list cannot have a null entry");
 8012f6e:	2900      	cmp	r1, #0
 8012f70:	d111      	bne.n	8012f96 <block_insert+0x46>
 8012f72:	e7fe      	b.n	8012f72 <block_insert+0x22>
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8012f74:	0020      	movs	r0, r4
 8012f76:	f7ed fa4d 	bl	8000414 <__clzsi2>
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8012f7a:	231a      	movs	r3, #26
        fl -= (FL_INDEX_SHIFT - 1);
 8012f7c:	2219      	movs	r2, #25
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8012f7e:	1a1b      	subs	r3, r3, r0
 8012f80:	40dc      	lsrs	r4, r3
 8012f82:	2320      	movs	r3, #32
        fl -= (FL_INDEX_SHIFT - 1);
 8012f84:	1a12      	subs	r2, r2, r0
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8012f86:	405c      	eors	r4, r3
    block_header_t * current = control->blocks[fl][sl];
 8012f88:	0153      	lsls	r3, r2, #5
 8012f8a:	191b      	adds	r3, r3, r4
 8012f8c:	009b      	lsls	r3, r3, #2
 8012f8e:	18f3      	adds	r3, r6, r3
 8012f90:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tlsf_assert(current && "free list cannot have a null entry");
 8012f92:	2900      	cmp	r1, #0
 8012f94:	d0ed      	beq.n	8012f72 <block_insert+0x22>
    block->next_free = current;
 8012f96:	60a9      	str	r1, [r5, #8]
    block->prev_free = &control->block_null;
 8012f98:	60ee      	str	r6, [r5, #12]
    current->prev_free = block;
 8012f9a:	60cd      	str	r5, [r1, #12]
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8012f9c:	0029      	movs	r1, r5
 8012f9e:	2003      	movs	r0, #3
 8012fa0:	310b      	adds	r1, #11
 8012fa2:	4381      	bics	r1, r0
    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8012fa4:	0028      	movs	r0, r5
 8012fa6:	3008      	adds	r0, #8
 8012fa8:	4288      	cmp	r0, r1
 8012faa:	d000      	beq.n	8012fae <block_insert+0x5e>
 8012fac:	e7fe      	b.n	8012fac <block_insert+0x5c>
    control->blocks[fl][sl] = block;
 8012fae:	639d      	str	r5, [r3, #56]	; 0x38
    control->fl_bitmap |= (1U << fl);
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	0019      	movs	r1, r3
 8012fb4:	4091      	lsls	r1, r2
    control->sl_bitmap[fl] |= (1U << sl);
 8012fb6:	40a3      	lsls	r3, r4
    control->fl_bitmap |= (1U << fl);
 8012fb8:	6930      	ldr	r0, [r6, #16]
 8012fba:	0092      	lsls	r2, r2, #2
 8012fbc:	4301      	orrs	r1, r0
 8012fbe:	6131      	str	r1, [r6, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 8012fc0:	18b6      	adds	r6, r6, r2
 8012fc2:	6972      	ldr	r2, [r6, #20]
 8012fc4:	4313      	orrs	r3, r2
 8012fc6:	6173      	str	r3, [r6, #20]
}
 8012fc8:	bd70      	pop	{r4, r5, r6, pc}
 8012fca:	46c0      	nop			; (mov r8, r8)

08012fcc <block_prepare_used.part.0>:
    }

    return block;
}

static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
 8012fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return tlsf_cast(int, block->size & block_header_free_bit);
 8012fce:	684b      	ldr	r3, [r1, #4]
static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
 8012fd0:	0005      	movs	r5, r0
 8012fd2:	000c      	movs	r4, r1
    tlsf_assert(block_is_free(block) && "block must be free");
 8012fd4:	07d9      	lsls	r1, r3, #31
 8012fd6:	d514      	bpl.n	8013002 <block_prepare_used.part.0+0x36>
    return block_size(block) >= sizeof(block_header_t) + size;
 8012fd8:	0011      	movs	r1, r2
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8012fda:	2603      	movs	r6, #3
    return block_size(block) >= sizeof(block_header_t) + size;
 8012fdc:	3110      	adds	r1, #16
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8012fde:	43b3      	bics	r3, r6
    if(block_can_split(block, size)) {
 8012fe0:	428b      	cmp	r3, r1
 8012fe2:	d210      	bcs.n	8013006 <block_prepare_used.part.0+0x3a>
    return tlsf_cast(void *,
 8012fe4:	0027      	movs	r7, r4
 8012fe6:	3708      	adds	r7, #8
    tlsf_assert(!block_is_last(block));
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d00b      	beq.n	8013004 <block_prepare_used.part.0+0x38>
    block->size &= ~block_header_prev_free_bit;
 8012fec:	2202      	movs	r2, #2
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8012fee:	18fb      	adds	r3, r7, r3
    block->size &= ~block_header_prev_free_bit;
 8012ff0:	6819      	ldr	r1, [r3, #0]
        block_trim_free(control, block, size);
        block_mark_as_used(block);
        p = block_to_ptr(block);
    }
    return p;
}
 8012ff2:	0038      	movs	r0, r7
    block->size &= ~block_header_prev_free_bit;
 8012ff4:	4391      	bics	r1, r2
 8012ff6:	6019      	str	r1, [r3, #0]
    block->size &= ~block_header_free_bit;
 8012ff8:	2301      	movs	r3, #1
 8012ffa:	6862      	ldr	r2, [r4, #4]
 8012ffc:	439a      	bics	r2, r3
 8012ffe:	6062      	str	r2, [r4, #4]
}
 8013000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tlsf_assert(block_is_free(block) && "block must be free");
 8013002:	e7fe      	b.n	8013002 <block_prepare_used.part.0+0x36>
    tlsf_assert(!block_is_last(block));
 8013004:	e7fe      	b.n	8013004 <block_prepare_used.part.0+0x38>
        block_header_t * remaining_block = block_split(block, size);
 8013006:	0011      	movs	r1, r2
 8013008:	0020      	movs	r0, r4
 801300a:	f7ff ff71 	bl	8012ef0 <block_split>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801300e:	6863      	ldr	r3, [r4, #4]
        block_header_t * remaining_block = block_split(block, size);
 8013010:	0001      	movs	r1, r0
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8013012:	43b3      	bics	r3, r6
    tlsf_assert(!block_is_last(block));
 8013014:	d00e      	beq.n	8013034 <block_prepare_used.part.0+0x68>
    return tlsf_cast(void *,
 8013016:	0027      	movs	r7, r4
 8013018:	3708      	adds	r7, #8
    next->prev_phys_block = block;
 801301a:	19db      	adds	r3, r3, r7
 801301c:	3b04      	subs	r3, #4
 801301e:	601c      	str	r4, [r3, #0]
    block->size |= block_header_prev_free_bit;
 8013020:	2302      	movs	r3, #2
 8013022:	6842      	ldr	r2, [r0, #4]
 8013024:	4313      	orrs	r3, r2
 8013026:	6043      	str	r3, [r0, #4]
        block_insert(control, remaining_block);
 8013028:	0028      	movs	r0, r5
 801302a:	f7ff ff91 	bl	8012f50 <block_insert>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801302e:	6863      	ldr	r3, [r4, #4]
 8013030:	43b3      	bics	r3, r6
 8013032:	e7d9      	b.n	8012fe8 <block_prepare_used.part.0+0x1c>
    tlsf_assert(!block_is_last(block));
 8013034:	e7fe      	b.n	8013034 <block_prepare_used.part.0+0x68>
 8013036:	46c0      	nop			; (mov r8, r8)

08013038 <block_merge_next>:
{
 8013038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801303a:	684d      	ldr	r5, [r1, #4]
{
 801303c:	4647      	mov	r7, r8
 801303e:	46ce      	mov	lr, r9
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8013040:	2203      	movs	r2, #3
 8013042:	002b      	movs	r3, r5
{
 8013044:	b580      	push	{r7, lr}
 8013046:	000c      	movs	r4, r1
 8013048:	0007      	movs	r7, r0
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801304a:	4393      	bics	r3, r2
    tlsf_assert(!block_is_last(block));
 801304c:	d007      	beq.n	801305e <block_merge_next+0x26>
    return tlsf_cast(void *,
 801304e:	000e      	movs	r6, r1
 8013050:	3608      	adds	r6, #8
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8013052:	199b      	adds	r3, r3, r6
 8013054:	1f19      	subs	r1, r3, #4
 8013056:	4688      	mov	r8, r1
    tlsf_assert(next && "next physical block can't be null");
 8013058:	2b04      	cmp	r3, #4
 801305a:	d101      	bne.n	8013060 <block_merge_next+0x28>
 801305c:	e7fe      	b.n	801305c <block_merge_next+0x24>
    tlsf_assert(!block_is_last(block));
 801305e:	e7fe      	b.n	801305e <block_merge_next+0x26>
    return tlsf_cast(int, block->size & block_header_free_bit);
 8013060:	684b      	ldr	r3, [r1, #4]
    if(block_is_free(next)) {
 8013062:	07d9      	lsls	r1, r3, #31
 8013064:	d404      	bmi.n	8013070 <block_merge_next+0x38>
}
 8013066:	0020      	movs	r0, r4
 8013068:	bcc0      	pop	{r6, r7}
 801306a:	46b9      	mov	r9, r7
 801306c:	46b0      	mov	r8, r6
 801306e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8013070:	4393      	bics	r3, r2
 8013072:	4699      	mov	r9, r3
    if(size < SMALL_BLOCK_SIZE) {
 8013074:	2b7f      	cmp	r3, #127	; 0x7f
 8013076:	d92a      	bls.n	80130ce <block_merge_next+0x96>
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8013078:	0018      	movs	r0, r3
 801307a:	f7ed f9cb 	bl	8000414 <__clzsi2>
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 801307e:	231a      	movs	r3, #26
 8013080:	4649      	mov	r1, r9
 8013082:	1a1b      	subs	r3, r3, r0
 8013084:	40d9      	lsrs	r1, r3
        fl -= (FL_INDEX_SHIFT - 1);
 8013086:	2219      	movs	r2, #25
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8013088:	2320      	movs	r3, #32
 801308a:	4059      	eors	r1, r3
        fl -= (FL_INDEX_SHIFT - 1);
 801308c:	1a13      	subs	r3, r2, r0
 801308e:	469c      	mov	ip, r3
    block_header_t * prev = block->prev_free;
 8013090:	4643      	mov	r3, r8
 8013092:	68db      	ldr	r3, [r3, #12]
    tlsf_assert(prev && "prev_free field can not be null");
 8013094:	2b00      	cmp	r3, #0
 8013096:	d017      	beq.n	80130c8 <block_merge_next+0x90>
    block_header_t * next = block->next_free;
 8013098:	4642      	mov	r2, r8
 801309a:	6890      	ldr	r0, [r2, #8]
    tlsf_assert(next && "next_free field can not be null");
 801309c:	2800      	cmp	r0, #0
 801309e:	d014      	beq.n	80130ca <block_merge_next+0x92>
    next->prev_free = prev;
 80130a0:	60c3      	str	r3, [r0, #12]
    prev->next_free = next;
 80130a2:	6098      	str	r0, [r3, #8]
    if(control->blocks[fl][sl] == block) {
 80130a4:	4663      	mov	r3, ip
 80130a6:	015b      	lsls	r3, r3, #5
 80130a8:	185b      	adds	r3, r3, r1
 80130aa:	009b      	lsls	r3, r3, #2
 80130ac:	18fb      	adds	r3, r7, r3
 80130ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80130b0:	4542      	cmp	r2, r8
 80130b2:	d010      	beq.n	80130d6 <block_merge_next+0x9e>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80130b4:	2203      	movs	r2, #3
    prev->size += block_size(block) + block_header_overhead;
 80130b6:	1d2b      	adds	r3, r5, #4
 80130b8:	444b      	add	r3, r9
 80130ba:	6063      	str	r3, [r4, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80130bc:	4393      	bics	r3, r2
    tlsf_assert(!block_is_last(block));
 80130be:	d005      	beq.n	80130cc <block_merge_next+0x94>
    next->prev_phys_block = block;
 80130c0:	18f3      	adds	r3, r6, r3
 80130c2:	3b04      	subs	r3, #4
 80130c4:	601c      	str	r4, [r3, #0]
    return prev;
 80130c6:	e7ce      	b.n	8013066 <block_merge_next+0x2e>
    tlsf_assert(prev && "prev_free field can not be null");
 80130c8:	e7fe      	b.n	80130c8 <block_merge_next+0x90>
    tlsf_assert(next && "next_free field can not be null");
 80130ca:	e7fe      	b.n	80130ca <block_merge_next+0x92>
    tlsf_assert(!block_is_last(block));
 80130cc:	e7fe      	b.n	80130cc <block_merge_next+0x94>
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 80130ce:	1099      	asrs	r1, r3, #2
        fl = 0;
 80130d0:	2300      	movs	r3, #0
 80130d2:	469c      	mov	ip, r3
 80130d4:	e7dc      	b.n	8013090 <block_merge_next+0x58>
        control->blocks[fl][sl] = next;
 80130d6:	6398      	str	r0, [r3, #56]	; 0x38
        if(next == &control->block_null) {
 80130d8:	42b8      	cmp	r0, r7
 80130da:	d1eb      	bne.n	80130b4 <block_merge_next+0x7c>
            control->sl_bitmap[fl] &= ~(1U << sl);
 80130dc:	4663      	mov	r3, ip
 80130de:	0098      	lsls	r0, r3, #2
 80130e0:	2301      	movs	r3, #1
 80130e2:	001a      	movs	r2, r3
 80130e4:	408a      	lsls	r2, r1
 80130e6:	0011      	movs	r1, r2
 80130e8:	1838      	adds	r0, r7, r0
 80130ea:	6942      	ldr	r2, [r0, #20]
 80130ec:	438a      	bics	r2, r1
 80130ee:	6142      	str	r2, [r0, #20]
            if(!control->sl_bitmap[fl]) {
 80130f0:	d1e0      	bne.n	80130b4 <block_merge_next+0x7c>
                control->fl_bitmap &= ~(1U << fl);
 80130f2:	4662      	mov	r2, ip
 80130f4:	4093      	lsls	r3, r2
 80130f6:	693a      	ldr	r2, [r7, #16]
 80130f8:	439a      	bics	r2, r3
 80130fa:	613a      	str	r2, [r7, #16]
}
 80130fc:	e7da      	b.n	80130b4 <block_merge_next+0x7c>
 80130fe:	46c0      	nop			; (mov r8, r8)

08013100 <lv_tlsf_create_with_pool>:
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8013100:	2303      	movs	r3, #3

    return tlsf_cast(lv_tlsf_t, mem);
}

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 8013102:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8013104:	001a      	movs	r2, r3
{
 8013106:	464f      	mov	r7, r9
 8013108:	46d6      	mov	lr, sl
 801310a:	4646      	mov	r6, r8
 801310c:	0004      	movs	r4, r0
 801310e:	4689      	mov	r9, r1
 8013110:	b5c0      	push	{r6, r7, lr}
    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8013112:	4002      	ands	r2, r0
 8013114:	4218      	tst	r0, r3
 8013116:	d000      	beq.n	801311a <lv_tlsf_create_with_pool+0x1a>
 8013118:	e083      	b.n	8013222 <lv_tlsf_create_with_pool+0x122>
    control->fl_bitmap = 0;
 801311a:	6102      	str	r2, [r0, #16]
        control->sl_bitmap[i] = 0;
 801311c:	2100      	movs	r1, #0
    control->block_null.next_free = &control->block_null;
 801311e:	6080      	str	r0, [r0, #8]
    control->block_null.prev_free = &control->block_null;
 8013120:	60c0      	str	r0, [r0, #12]
        control->sl_bitmap[i] = 0;
 8013122:	2224      	movs	r2, #36	; 0x24
 8013124:	3014      	adds	r0, #20
 8013126:	f008 fa89 	bl	801b63c <memset>
 801312a:	2301      	movs	r3, #1
 801312c:	0020      	movs	r0, r4
 801312e:	469a      	mov	sl, r3
 8013130:	331f      	adds	r3, #31
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8013132:	2100      	movs	r1, #0
 8013134:	469c      	mov	ip, r3
 8013136:	3038      	adds	r0, #56	; 0x38
 8013138:	e030      	b.n	801319c <lv_tlsf_create_with_pool+0x9c>
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 801313a:	2501      	movs	r5, #1
            control->blocks[i][j] = &control->block_null;
 801313c:	6004      	str	r4, [r0, #0]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 801313e:	014b      	lsls	r3, r1, #5
 8013140:	001a      	movs	r2, r3
 8013142:	4666      	mov	r6, ip
 8013144:	320e      	adds	r2, #14
 8013146:	19d2      	adds	r2, r2, r7
 8013148:	0092      	lsls	r2, r2, #2
 801314a:	18a2      	adds	r2, r4, r2
            control->blocks[i][j] = &control->block_null;
 801314c:	1bf7      	subs	r7, r6, r7
 801314e:	6014      	str	r4, [r2, #0]
 8013150:	6054      	str	r4, [r2, #4]
 8013152:	6094      	str	r4, [r2, #8]
 8013154:	60d4      	str	r4, [r2, #12]
 8013156:	6114      	str	r4, [r2, #16]
 8013158:	6154      	str	r4, [r2, #20]
 801315a:	6194      	str	r4, [r2, #24]
 801315c:	61d4      	str	r4, [r2, #28]
 801315e:	6214      	str	r4, [r2, #32]
 8013160:	6254      	str	r4, [r2, #36]	; 0x24
 8013162:	6294      	str	r4, [r2, #40]	; 0x28
 8013164:	62d4      	str	r4, [r2, #44]	; 0x2c
 8013166:	6314      	str	r4, [r2, #48]	; 0x30
 8013168:	6354      	str	r4, [r2, #52]	; 0x34
 801316a:	6394      	str	r4, [r2, #56]	; 0x38
 801316c:	63d4      	str	r4, [r2, #60]	; 0x3c
 801316e:	6414      	str	r4, [r2, #64]	; 0x40
 8013170:	6454      	str	r4, [r2, #68]	; 0x44
 8013172:	6494      	str	r4, [r2, #72]	; 0x48
 8013174:	64d4      	str	r4, [r2, #76]	; 0x4c
 8013176:	6514      	str	r4, [r2, #80]	; 0x50
 8013178:	6554      	str	r4, [r2, #84]	; 0x54
 801317a:	6594      	str	r4, [r2, #88]	; 0x58
 801317c:	65d4      	str	r4, [r2, #92]	; 0x5c
 801317e:	6614      	str	r4, [r2, #96]	; 0x60
 8013180:	6654      	str	r4, [r2, #100]	; 0x64
 8013182:	6694      	str	r4, [r2, #104]	; 0x68
 8013184:	66d4      	str	r4, [r2, #108]	; 0x6c
 8013186:	6714      	str	r4, [r2, #112]	; 0x70
 8013188:	6754      	str	r4, [r2, #116]	; 0x74
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 801318a:	087e      	lsrs	r6, r7, #1
 801318c:	2e10      	cmp	r6, #16
 801318e:	d10e      	bne.n	80131ae <lv_tlsf_create_with_pool+0xae>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8013190:	3101      	adds	r1, #1
            control->blocks[i][j] = &control->block_null;
 8013192:	6794      	str	r4, [r2, #120]	; 0x78
 8013194:	67d4      	str	r4, [r2, #124]	; 0x7c
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8013196:	3080      	adds	r0, #128	; 0x80
 8013198:	2909      	cmp	r1, #9
 801319a:	d010      	beq.n	80131be <lv_tlsf_create_with_pool+0xbe>
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 801319c:	4657      	mov	r7, sl
 801319e:	4652      	mov	r2, sl
 80131a0:	0883      	lsrs	r3, r0, #2
 80131a2:	425b      	negs	r3, r3
 80131a4:	401f      	ands	r7, r3
 80131a6:	421a      	tst	r2, r3
 80131a8:	d1c7      	bne.n	801313a <lv_tlsf_create_with_pool+0x3a>
 80131aa:	2500      	movs	r5, #0
 80131ac:	e7c7      	b.n	801313e <lv_tlsf_create_with_pool+0x3e>
            control->blocks[i][j] = &control->block_null;
 80131ae:	195b      	adds	r3, r3, r5
 80131b0:	332c      	adds	r3, #44	; 0x2c
 80131b2:	009b      	lsls	r3, r3, #2
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 80131b4:	3101      	adds	r1, #1
            control->blocks[i][j] = &control->block_null;
 80131b6:	511c      	str	r4, [r3, r4]
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 80131b8:	3080      	adds	r0, #128	; 0x80
 80131ba:	2909      	cmp	r1, #9
 80131bc:	d1ee      	bne.n	801319c <lv_tlsf_create_with_pool+0x9c>
 80131be:	0026      	movs	r6, r4
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 80131c0:	2397      	movs	r3, #151	; 0x97
    return x - (x & (align - 1));
 80131c2:	2703      	movs	r7, #3
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 80131c4:	4d18      	ldr	r5, [pc, #96]	; (8013228 <lv_tlsf_create_with_pool+0x128>)
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 80131c6:	00db      	lsls	r3, r3, #3
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 80131c8:	444d      	add	r5, r9
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 80131ca:	18e3      	adds	r3, r4, r3
    return x - (x & (align - 1));
 80131cc:	43bd      	bics	r5, r7
    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 80131ce:	423b      	tst	r3, r7
 80131d0:	d121      	bne.n	8013216 <lv_tlsf_create_with_pool+0x116>
    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 80131d2:	002b      	movs	r3, r5
 80131d4:	4a15      	ldr	r2, [pc, #84]	; (801322c <lv_tlsf_create_with_pool+0x12c>)
 80131d6:	3b0c      	subs	r3, #12
 80131d8:	4293      	cmp	r3, r2
 80131da:	d81c      	bhi.n	8013216 <lv_tlsf_create_with_pool+0x116>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 80131dc:	4b14      	ldr	r3, [pc, #80]	; (8013230 <lv_tlsf_create_with_pool+0x130>)
    block->size &= ~block_header_prev_free_bit;
 80131de:	2201      	movs	r2, #1
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 80131e0:	4698      	mov	r8, r3
 80131e2:	44a0      	add	r8, r4
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 80131e4:	4643      	mov	r3, r8
 80131e6:	685b      	ldr	r3, [r3, #4]
    block_insert(tlsf_cast(control_t *, tlsf), block);
 80131e8:	4641      	mov	r1, r8
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 80131ea:	403b      	ands	r3, r7
 80131ec:	432b      	orrs	r3, r5
    block->size &= ~block_header_prev_free_bit;
 80131ee:	2502      	movs	r5, #2
 80131f0:	43ab      	bics	r3, r5
 80131f2:	4313      	orrs	r3, r2
 80131f4:	4642      	mov	r2, r8
    block_insert(tlsf_cast(control_t *, tlsf), block);
 80131f6:	0030      	movs	r0, r6
    block->size &= ~block_header_prev_free_bit;
 80131f8:	6053      	str	r3, [r2, #4]
    block_insert(tlsf_cast(control_t *, tlsf), block);
 80131fa:	f7ff fea9 	bl	8012f50 <block_insert>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80131fe:	4643      	mov	r3, r8
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	43bb      	bics	r3, r7
    tlsf_assert(!block_is_last(block));
 8013204:	d100      	bne.n	8013208 <lv_tlsf_create_with_pool+0x108>
 8013206:	e7fe      	b.n	8013206 <lv_tlsf_create_with_pool+0x106>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8013208:	18e4      	adds	r4, r4, r3
 801320a:	2397      	movs	r3, #151	; 0x97
 801320c:	00db      	lsls	r3, r3, #3
 801320e:	469c      	mov	ip, r3
    next->prev_phys_block = block;
 8013210:	4643      	mov	r3, r8
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8013212:	4464      	add	r4, ip
    block->size |= block_header_prev_free_bit;
 8013214:	c428      	stmia	r4!, {r3, r5}
    return tlsf;
}
 8013216:	0030      	movs	r0, r6
 8013218:	bce0      	pop	{r5, r6, r7}
 801321a:	46ba      	mov	sl, r7
 801321c:	46b1      	mov	r9, r6
 801321e:	46a8      	mov	r8, r5
 8013220:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 0;
 8013222:	2600      	movs	r6, #0
 8013224:	e7cc      	b.n	80131c0 <lv_tlsf_create_with_pool+0xc0>
 8013226:	46c0      	nop			; (mov r8, r8)
 8013228:	fffffb40 	.word	0xfffffb40
 801322c:	00007ff4 	.word	0x00007ff4
 8013230:	000004b4 	.word	0x000004b4

08013234 <lv_tlsf_malloc>:
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 8013234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013236:	46c6      	mov	lr, r8
 8013238:	0004      	movs	r4, r0
 801323a:	b500      	push	{lr}
    if(size) {
 801323c:	2900      	cmp	r1, #0
 801323e:	d024      	beq.n	801328a <lv_tlsf_malloc+0x56>
    return (x + (align - 1)) & ~(align - 1);
 8013240:	2303      	movs	r3, #3
        if(aligned < block_size_max) {
 8013242:	2280      	movs	r2, #128	; 0x80
    return (x + (align - 1)) & ~(align - 1);
 8013244:	3103      	adds	r1, #3
 8013246:	4399      	bics	r1, r3
        if(aligned < block_size_max) {
 8013248:	0212      	lsls	r2, r2, #8
 801324a:	4291      	cmp	r1, r2
 801324c:	d21d      	bcs.n	801328a <lv_tlsf_malloc+0x56>
            adjust = tlsf_max(aligned, block_size_min);
 801324e:	000d      	movs	r5, r1
 8013250:	290c      	cmp	r1, #12
 8013252:	d200      	bcs.n	8013256 <lv_tlsf_malloc+0x22>
 8013254:	250c      	movs	r5, #12
    if(size >= SMALL_BLOCK_SIZE) {
 8013256:	297f      	cmp	r1, #127	; 0x7f
 8013258:	d91c      	bls.n	8013294 <lv_tlsf_malloc+0x60>
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 801325a:	0028      	movs	r0, r5
 801325c:	f7ed f8da 	bl	8000414 <__clzsi2>
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 8013260:	271a      	movs	r7, #26
 8013262:	1a3b      	subs	r3, r7, r0
 8013264:	2001      	movs	r0, #1
 8013266:	4098      	lsls	r0, r3
 8013268:	3801      	subs	r0, #1
        size += round;
 801326a:	4680      	mov	r8, r0
 801326c:	44a8      	add	r8, r5
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 801326e:	4640      	mov	r0, r8
 8013270:	f7ed f8d0 	bl	8000414 <__clzsi2>
        fl -= (FL_INDEX_SHIFT - 1);
 8013274:	2619      	movs	r6, #25
    void * p = 0;
 8013276:	2100      	movs	r1, #0
        fl -= (FL_INDEX_SHIFT - 1);
 8013278:	1a36      	subs	r6, r6, r0
        if(fl < FL_INDEX_COUNT) {
 801327a:	2e09      	cmp	r6, #9
 801327c:	d006      	beq.n	801328c <lv_tlsf_malloc+0x58>
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 801327e:	4642      	mov	r2, r8
 8013280:	1a39      	subs	r1, r7, r0
 8013282:	40ca      	lsrs	r2, r1
 8013284:	2320      	movs	r3, #32
 8013286:	405a      	eors	r2, r3
 8013288:	e007      	b.n	801329a <lv_tlsf_malloc+0x66>
    void * p = 0;
 801328a:	2100      	movs	r1, #0
    control_t * control = tlsf_cast(control_t *, tlsf);
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
    block_header_t * block = block_locate_free(control, adjust);
    return block_prepare_used(control, block, adjust);
}
 801328c:	0008      	movs	r0, r1
 801328e:	bc80      	pop	{r7}
 8013290:	46b8      	mov	r8, r7
 8013292:	bdf0      	pop	{r4, r5, r6, r7, pc}
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8013294:	2101      	movs	r1, #1
        fl = 0;
 8013296:	2600      	movs	r6, #0
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8013298:	10aa      	asrs	r2, r5, #2
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 801329a:	1d33      	adds	r3, r6, #4
 801329c:	009b      	lsls	r3, r3, #2
 801329e:	18e3      	adds	r3, r4, r3
 80132a0:	685f      	ldr	r7, [r3, #4]
 80132a2:	2301      	movs	r3, #1
 80132a4:	425b      	negs	r3, r3
 80132a6:	0018      	movs	r0, r3
 80132a8:	4090      	lsls	r0, r2
 80132aa:	0002      	movs	r2, r0
 80132ac:	0038      	movs	r0, r7
 80132ae:	4010      	ands	r0, r2
    if(!sl_map) {
 80132b0:	4217      	tst	r7, r2
 80132b2:	d110      	bne.n	80132d6 <lv_tlsf_malloc+0xa2>
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 80132b4:	6922      	ldr	r2, [r4, #16]
 80132b6:	408b      	lsls	r3, r1
 80132b8:	0010      	movs	r0, r2
 80132ba:	4018      	ands	r0, r3
        if(!fl_map) {
 80132bc:	421a      	tst	r2, r3
 80132be:	d0e4      	beq.n	801328a <lv_tlsf_malloc+0x56>
    return __builtin_ffs(word) - 1;
 80132c0:	f7ed f8c6 	bl	8000450 <__ffssi2>
 80132c4:	1e46      	subs	r6, r0, #1
        sl_map = control->sl_bitmap[fl];
 80132c6:	3003      	adds	r0, #3
 80132c8:	0080      	lsls	r0, r0, #2
 80132ca:	1820      	adds	r0, r4, r0
 80132cc:	6840      	ldr	r0, [r0, #4]
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 80132ce:	2800      	cmp	r0, #0
 80132d0:	d100      	bne.n	80132d4 <lv_tlsf_malloc+0xa0>
 80132d2:	e7fe      	b.n	80132d2 <lv_tlsf_malloc+0x9e>
 80132d4:	0007      	movs	r7, r0
    return __builtin_ffs(word) - 1;
 80132d6:	f7ed f8bb 	bl	8000450 <__ffssi2>
 80132da:	0173      	lsls	r3, r6, #5
 80132dc:	3801      	subs	r0, #1
    return control->blocks[fl][sl];
 80132de:	181b      	adds	r3, r3, r0
 80132e0:	009b      	lsls	r3, r3, #2
 80132e2:	4698      	mov	r8, r3
 80132e4:	44a0      	add	r8, r4
 80132e6:	4643      	mov	r3, r8
 80132e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
    if(block) {
 80132ea:	2900      	cmp	r1, #0
 80132ec:	d0ce      	beq.n	801328c <lv_tlsf_malloc+0x58>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80132ee:	2203      	movs	r2, #3
 80132f0:	684b      	ldr	r3, [r1, #4]
 80132f2:	4393      	bics	r3, r2
        tlsf_assert(block_size(block) >= size);
 80132f4:	429d      	cmp	r5, r3
 80132f6:	d900      	bls.n	80132fa <lv_tlsf_malloc+0xc6>
 80132f8:	e7fe      	b.n	80132f8 <lv_tlsf_malloc+0xc4>
    block_header_t * prev = block->prev_free;
 80132fa:	68cb      	ldr	r3, [r1, #12]
    tlsf_assert(prev && "prev_free field can not be null");
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d00e      	beq.n	801331e <lv_tlsf_malloc+0xea>
    block_header_t * next = block->next_free;
 8013300:	688a      	ldr	r2, [r1, #8]
    tlsf_assert(next && "next_free field can not be null");
 8013302:	2a00      	cmp	r2, #0
 8013304:	d00c      	beq.n	8013320 <lv_tlsf_malloc+0xec>
    next->prev_free = prev;
 8013306:	60d3      	str	r3, [r2, #12]
    prev->next_free = next;
 8013308:	609a      	str	r2, [r3, #8]
        control->blocks[fl][sl] = next;
 801330a:	4643      	mov	r3, r8
 801330c:	639a      	str	r2, [r3, #56]	; 0x38
        if(next == &control->block_null) {
 801330e:	42a2      	cmp	r2, r4
 8013310:	d007      	beq.n	8013322 <lv_tlsf_malloc+0xee>
        tlsf_assert(size && "size must be non-zero");
 8013312:	002a      	movs	r2, r5
 8013314:	0020      	movs	r0, r4
 8013316:	f7ff fe59 	bl	8012fcc <block_prepare_used.part.0>
 801331a:	0001      	movs	r1, r0
 801331c:	e7b6      	b.n	801328c <lv_tlsf_malloc+0x58>
    tlsf_assert(prev && "prev_free field can not be null");
 801331e:	e7fe      	b.n	801331e <lv_tlsf_malloc+0xea>
    tlsf_assert(next && "next_free field can not be null");
 8013320:	e7fe      	b.n	8013320 <lv_tlsf_malloc+0xec>
            control->sl_bitmap[fl] &= ~(1U << sl);
 8013322:	2201      	movs	r2, #1
 8013324:	0013      	movs	r3, r2
 8013326:	4083      	lsls	r3, r0
 8013328:	439f      	bics	r7, r3
 801332a:	1d33      	adds	r3, r6, #4
 801332c:	009b      	lsls	r3, r3, #2
 801332e:	18e3      	adds	r3, r4, r3
 8013330:	605f      	str	r7, [r3, #4]
            if(!control->sl_bitmap[fl]) {
 8013332:	2f00      	cmp	r7, #0
 8013334:	d1ed      	bne.n	8013312 <lv_tlsf_malloc+0xde>
                control->fl_bitmap &= ~(1U << fl);
 8013336:	40b2      	lsls	r2, r6
 8013338:	6923      	ldr	r3, [r4, #16]
 801333a:	4393      	bics	r3, r2
 801333c:	6123      	str	r3, [r4, #16]
}
 801333e:	e7e8      	b.n	8013312 <lv_tlsf_malloc+0xde>

08013340 <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 8013340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013342:	46d6      	mov	lr, sl
 8013344:	464f      	mov	r7, r9
 8013346:	4646      	mov	r6, r8
 8013348:	0005      	movs	r5, r0
 801334a:	b5c0      	push	{r6, r7, lr}
    size_t size = 0;
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 801334c:	2900      	cmp	r1, #0
 801334e:	d027      	beq.n	80133a0 <lv_tlsf_free+0x60>
    return tlsf_cast(int, block->size & block_header_free_bit);
 8013350:	2301      	movs	r3, #1
 8013352:	000a      	movs	r2, r1
 8013354:	0018      	movs	r0, r3
 8013356:	3a08      	subs	r2, #8
 8013358:	6854      	ldr	r4, [r2, #4]
 801335a:	4020      	ands	r0, r4
        control_t * control = tlsf_cast(control_t *, tlsf);
        block_header_t * block = block_from_ptr(ptr);
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 801335c:	4223      	tst	r3, r4
 801335e:	d000      	beq.n	8013362 <lv_tlsf_free+0x22>
 8013360:	e7fe      	b.n	8013360 <lv_tlsf_free+0x20>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8013362:	2603      	movs	r6, #3
 8013364:	0027      	movs	r7, r4
 8013366:	46b4      	mov	ip, r6
 8013368:	43b7      	bics	r7, r6
    tlsf_assert(!block_is_last(block));
 801336a:	d018      	beq.n	801339e <lv_tlsf_free+0x5e>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 801336c:	3904      	subs	r1, #4
 801336e:	19c9      	adds	r1, r1, r7
    block->size |= block_header_prev_free_bit;
 8013370:	2702      	movs	r7, #2
 8013372:	46b8      	mov	r8, r7
 8013374:	4646      	mov	r6, r8
 8013376:	684f      	ldr	r7, [r1, #4]
    next->prev_phys_block = block;
 8013378:	600a      	str	r2, [r1, #0]
    block->size |= block_header_prev_free_bit;
 801337a:	4337      	orrs	r7, r6
 801337c:	604f      	str	r7, [r1, #4]
    block->size |= block_header_free_bit;
 801337e:	6857      	ldr	r7, [r2, #4]
    return tlsf_cast(block_header_t *,
 8013380:	4692      	mov	sl, r2
    block->size |= block_header_free_bit;
 8013382:	0039      	movs	r1, r7
 8013384:	4319      	orrs	r1, r3
 8013386:	6051      	str	r1, [r2, #4]
    if(block_is_prev_free(block)) {
 8013388:	420e      	tst	r6, r1
 801338a:	d042      	beq.n	8013412 <lv_tlsf_free+0xd2>
    return block->prev_phys_block;
 801338c:	6812      	ldr	r2, [r2, #0]
 801338e:	4692      	mov	sl, r2
        tlsf_assert(prev && "prev physical block can't be null");
 8013390:	2a00      	cmp	r2, #0
 8013392:	d00c      	beq.n	80133ae <lv_tlsf_free+0x6e>
    return tlsf_cast(int, block->size & block_header_free_bit);
 8013394:	6852      	ldr	r2, [r2, #4]
 8013396:	4691      	mov	r9, r2
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 8013398:	4213      	tst	r3, r2
 801339a:	d109      	bne.n	80133b0 <lv_tlsf_free+0x70>
 801339c:	e7fe      	b.n	801339c <lv_tlsf_free+0x5c>
    tlsf_assert(!block_is_last(block));
 801339e:	e7fe      	b.n	801339e <lv_tlsf_free+0x5e>
    size_t size = 0;
 80133a0:	2400      	movs	r4, #0
        block = block_merge_next(control, block);
        block_insert(control, block);
    }

    return size;
}
 80133a2:	0020      	movs	r0, r4
 80133a4:	bce0      	pop	{r5, r6, r7}
 80133a6:	46ba      	mov	sl, r7
 80133a8:	46b1      	mov	r9, r6
 80133aa:	46a8      	mov	r8, r5
 80133ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tlsf_assert(prev && "prev physical block can't be null");
 80133ae:	e7fe      	b.n	80133ae <lv_tlsf_free+0x6e>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80133b0:	0013      	movs	r3, r2
 80133b2:	4662      	mov	r2, ip
 80133b4:	4393      	bics	r3, r2
 80133b6:	4698      	mov	r8, r3
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 80133b8:	109a      	asrs	r2, r3, #2
    if(size < SMALL_BLOCK_SIZE) {
 80133ba:	2b7f      	cmp	r3, #127	; 0x7f
 80133bc:	d90a      	bls.n	80133d4 <lv_tlsf_free+0x94>
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 80133be:	0018      	movs	r0, r3
 80133c0:	f7ed f828 	bl	8000414 <__clzsi2>
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 80133c4:	231a      	movs	r3, #26
 80133c6:	4642      	mov	r2, r8
 80133c8:	1a1b      	subs	r3, r3, r0
 80133ca:	40da      	lsrs	r2, r3
 80133cc:	2320      	movs	r3, #32
 80133ce:	405a      	eors	r2, r3
        fl -= (FL_INDEX_SHIFT - 1);
 80133d0:	3b07      	subs	r3, #7
 80133d2:	1a18      	subs	r0, r3, r0
    block_header_t * prev = block->prev_free;
 80133d4:	4653      	mov	r3, sl
 80133d6:	68db      	ldr	r3, [r3, #12]
    tlsf_assert(prev && "prev_free field can not be null");
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d023      	beq.n	8013424 <lv_tlsf_free+0xe4>
    block_header_t * next = block->next_free;
 80133dc:	4651      	mov	r1, sl
 80133de:	6889      	ldr	r1, [r1, #8]
    tlsf_assert(next && "next_free field can not be null");
 80133e0:	2900      	cmp	r1, #0
 80133e2:	d021      	beq.n	8013428 <lv_tlsf_free+0xe8>
    next->prev_free = prev;
 80133e4:	60cb      	str	r3, [r1, #12]
    prev->next_free = next;
 80133e6:	6099      	str	r1, [r3, #8]
    if(control->blocks[fl][sl] == block) {
 80133e8:	0143      	lsls	r3, r0, #5
 80133ea:	189b      	adds	r3, r3, r2
 80133ec:	009b      	lsls	r3, r3, #2
 80133ee:	18eb      	adds	r3, r5, r3
 80133f0:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 80133f2:	45b2      	cmp	sl, r6
 80133f4:	d01a      	beq.n	801342c <lv_tlsf_free+0xec>
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 80133f6:	4643      	mov	r3, r8
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d014      	beq.n	8013426 <lv_tlsf_free+0xe6>
    prev->size += block_size(block) + block_header_overhead;
 80133fc:	2203      	movs	r2, #3
 80133fe:	003b      	movs	r3, r7
 8013400:	4651      	mov	r1, sl
 8013402:	4393      	bics	r3, r2
 8013404:	444b      	add	r3, r9
 8013406:	3304      	adds	r3, #4
 8013408:	604b      	str	r3, [r1, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801340a:	4393      	bics	r3, r2
    tlsf_assert(!block_is_last(block));
 801340c:	d00d      	beq.n	801342a <lv_tlsf_free+0xea>
    next->prev_phys_block = block;
 801340e:	4453      	add	r3, sl
 8013410:	6059      	str	r1, [r3, #4]
        block = block_merge_next(control, block);
 8013412:	4651      	mov	r1, sl
 8013414:	0028      	movs	r0, r5
 8013416:	f7ff fe0f 	bl	8013038 <block_merge_next>
 801341a:	0001      	movs	r1, r0
        block_insert(control, block);
 801341c:	0028      	movs	r0, r5
 801341e:	f7ff fd97 	bl	8012f50 <block_insert>
 8013422:	e7be      	b.n	80133a2 <lv_tlsf_free+0x62>
    tlsf_assert(prev && "prev_free field can not be null");
 8013424:	e7fe      	b.n	8013424 <lv_tlsf_free+0xe4>
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8013426:	e7fe      	b.n	8013426 <lv_tlsf_free+0xe6>
    tlsf_assert(next && "next_free field can not be null");
 8013428:	e7fe      	b.n	8013428 <lv_tlsf_free+0xe8>
    tlsf_assert(!block_is_last(block));
 801342a:	e7fe      	b.n	801342a <lv_tlsf_free+0xea>
        control->blocks[fl][sl] = next;
 801342c:	6399      	str	r1, [r3, #56]	; 0x38
        if(next == &control->block_null) {
 801342e:	42a9      	cmp	r1, r5
 8013430:	d1e1      	bne.n	80133f6 <lv_tlsf_free+0xb6>
            control->sl_bitmap[fl] &= ~(1U << sl);
 8013432:	2301      	movs	r3, #1
 8013434:	001e      	movs	r6, r3
 8013436:	4096      	lsls	r6, r2
 8013438:	0032      	movs	r2, r6
 801343a:	0081      	lsls	r1, r0, #2
 801343c:	1869      	adds	r1, r5, r1
 801343e:	694e      	ldr	r6, [r1, #20]
 8013440:	4396      	bics	r6, r2
 8013442:	614e      	str	r6, [r1, #20]
            if(!control->sl_bitmap[fl]) {
 8013444:	d1d7      	bne.n	80133f6 <lv_tlsf_free+0xb6>
                control->fl_bitmap &= ~(1U << fl);
 8013446:	4083      	lsls	r3, r0
 8013448:	692a      	ldr	r2, [r5, #16]
 801344a:	439a      	bics	r2, r3
 801344c:	612a      	str	r2, [r5, #16]
}
 801344e:	e7d2      	b.n	80133f6 <lv_tlsf_free+0xb6>

08013450 <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 8013450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013452:	464e      	mov	r6, r9
 8013454:	4645      	mov	r5, r8
 8013456:	46de      	mov	lr, fp
 8013458:	4657      	mov	r7, sl
 801345a:	000c      	movs	r4, r1
 801345c:	b5e0      	push	{r5, r6, r7, lr}
 801345e:	0006      	movs	r6, r0
 8013460:	0015      	movs	r5, r2
    control_t * control = tlsf_cast(control_t *, tlsf);
    void * p = 0;

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 8013462:	2900      	cmp	r1, #0
 8013464:	d06b      	beq.n	801353e <lv_tlsf_realloc+0xee>
 8013466:	2a00      	cmp	r2, #0
 8013468:	d100      	bne.n	801346c <lv_tlsf_realloc+0x1c>
 801346a:	e06d      	b.n	8013548 <lv_tlsf_realloc+0xf8>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801346c:	2308      	movs	r3, #8
 801346e:	425b      	negs	r3, r3
 8013470:	4699      	mov	r9, r3
 8013472:	4489      	add	r9, r1
 8013474:	464b      	mov	r3, r9
 8013476:	685b      	ldr	r3, [r3, #4]
 8013478:	2203      	movs	r2, #3
 801347a:	0019      	movs	r1, r3
 801347c:	4391      	bics	r1, r2
 801347e:	4688      	mov	r8, r1
    tlsf_assert(!block_is_last(block));
 8013480:	d100      	bne.n	8013484 <lv_tlsf_realloc+0x34>
 8013482:	e7fe      	b.n	8013482 <lv_tlsf_realloc+0x32>
    return (x + (align - 1)) & ~(align - 1);
 8013484:	1cef      	adds	r7, r5, #3
 8013486:	4397      	bics	r7, r2
        if(aligned < block_size_max) {
 8013488:	2280      	movs	r2, #128	; 0x80
 801348a:	0212      	lsls	r2, r2, #8
 801348c:	4297      	cmp	r7, r2
 801348e:	d22d      	bcs.n	80134ec <lv_tlsf_realloc+0x9c>
        if(size > cursize && adjust == 0) {
            /* The request is probably too large, fail */
            return NULL;
        }

        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8013490:	07da      	lsls	r2, r3, #31
 8013492:	d453      	bmi.n	801353c <lv_tlsf_realloc+0xec>
            adjust = tlsf_max(aligned, block_size_min);
 8013494:	46ba      	mov	sl, r7
 8013496:	2f0c      	cmp	r7, #12
 8013498:	d35a      	bcc.n	8013550 <lv_tlsf_realloc+0x100>

        /*
        ** If the next block is used, or when combined with the current
        ** block, does not offer enough space, we must reallocate and copy.
        */
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 801349a:	45d0      	cmp	r8, sl
 801349c:	d22c      	bcs.n	80134f8 <lv_tlsf_realloc+0xa8>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 801349e:	1f23      	subs	r3, r4, #4
 80134a0:	469b      	mov	fp, r3
 80134a2:	4643      	mov	r3, r8
    return tlsf_cast(int, block->size & block_header_free_bit);
 80134a4:	2701      	movs	r7, #1
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80134a6:	58e3      	ldr	r3, [r4, r3]
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 80134a8:	421f      	tst	r7, r3
 80134aa:	d006      	beq.n	80134ba <lv_tlsf_realloc+0x6a>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80134ac:	2203      	movs	r2, #3
 80134ae:	4393      	bics	r3, r2
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 80134b0:	4642      	mov	r2, r8
 80134b2:	3204      	adds	r2, #4
 80134b4:	189b      	adds	r3, r3, r2
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 80134b6:	4553      	cmp	r3, sl
 80134b8:	d236      	bcs.n	8013528 <lv_tlsf_realloc+0xd8>
            p = lv_tlsf_malloc(tlsf, size);
 80134ba:	0029      	movs	r1, r5
 80134bc:	0030      	movs	r0, r6
 80134be:	f7ff feb9 	bl	8013234 <lv_tlsf_malloc>
 80134c2:	1e07      	subs	r7, r0, #0
            if(p) {
 80134c4:	d00b      	beq.n	80134de <lv_tlsf_realloc+0x8e>
                const size_t minsize = tlsf_min(cursize, size);
 80134c6:	002a      	movs	r2, r5
 80134c8:	4545      	cmp	r5, r8
 80134ca:	d900      	bls.n	80134ce <lv_tlsf_realloc+0x7e>
 80134cc:	4642      	mov	r2, r8
                lv_memcpy(p, ptr, minsize);
 80134ce:	0021      	movs	r1, r4
 80134d0:	0038      	movs	r0, r7
 80134d2:	f7fe ff1f 	bl	8012314 <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 80134d6:	0021      	movs	r1, r4
 80134d8:	0030      	movs	r0, r6
 80134da:	f7ff ff31 	bl	8013340 <lv_tlsf_free>
            p = ptr;
        }
    }

    return p;
}
 80134de:	0038      	movs	r0, r7
 80134e0:	bcf0      	pop	{r4, r5, r6, r7}
 80134e2:	46bb      	mov	fp, r7
 80134e4:	46b2      	mov	sl, r6
 80134e6:	46a9      	mov	r9, r5
 80134e8:	46a0      	mov	r8, r4
 80134ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(size > cursize && adjust == 0) {
 80134ec:	428d      	cmp	r5, r1
 80134ee:	d832      	bhi.n	8013556 <lv_tlsf_realloc+0x106>
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 80134f0:	07da      	lsls	r2, r3, #31
 80134f2:	d423      	bmi.n	801353c <lv_tlsf_realloc+0xec>
 80134f4:	2200      	movs	r2, #0
 80134f6:	4692      	mov	sl, r2
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80134f8:	2203      	movs	r2, #3
 80134fa:	4393      	bics	r3, r2
    if(block_can_split(block, size)) {
 80134fc:	4652      	mov	r2, sl
 80134fe:	3210      	adds	r2, #16
 8013500:	0027      	movs	r7, r4
 8013502:	4293      	cmp	r3, r2
 8013504:	d3eb      	bcc.n	80134de <lv_tlsf_realloc+0x8e>
        block_header_t * remaining_block = block_split(block, size);
 8013506:	4651      	mov	r1, sl
 8013508:	4648      	mov	r0, r9
 801350a:	f7ff fcf1 	bl	8012ef0 <block_split>
    block->size &= ~block_header_prev_free_bit;
 801350e:	2302      	movs	r3, #2
 8013510:	6842      	ldr	r2, [r0, #4]
        block_header_t * remaining_block = block_split(block, size);
 8013512:	0001      	movs	r1, r0
    block->size &= ~block_header_prev_free_bit;
 8013514:	439a      	bics	r2, r3
 8013516:	6042      	str	r2, [r0, #4]
        remaining_block = block_merge_next(control, remaining_block);
 8013518:	0030      	movs	r0, r6
 801351a:	f7ff fd8d 	bl	8013038 <block_merge_next>
 801351e:	0001      	movs	r1, r0
        block_insert(control, remaining_block);
 8013520:	0030      	movs	r0, r6
 8013522:	f7ff fd15 	bl	8012f50 <block_insert>
 8013526:	e7da      	b.n	80134de <lv_tlsf_realloc+0x8e>
                block_merge_next(control, block);
 8013528:	4649      	mov	r1, r9
 801352a:	0030      	movs	r0, r6
 801352c:	f7ff fd84 	bl	8013038 <block_merge_next>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8013530:	464b      	mov	r3, r9
 8013532:	2203      	movs	r2, #3
 8013534:	685b      	ldr	r3, [r3, #4]
 8013536:	4393      	bics	r3, r2
    tlsf_assert(!block_is_last(block));
 8013538:	d10f      	bne.n	801355a <lv_tlsf_realloc+0x10a>
 801353a:	e7fe      	b.n	801353a <lv_tlsf_realloc+0xea>
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 801353c:	e7fe      	b.n	801353c <lv_tlsf_realloc+0xec>
        p = lv_tlsf_malloc(tlsf, size);
 801353e:	0011      	movs	r1, r2
 8013540:	f7ff fe78 	bl	8013234 <lv_tlsf_malloc>
 8013544:	0007      	movs	r7, r0
 8013546:	e7ca      	b.n	80134de <lv_tlsf_realloc+0x8e>
        lv_tlsf_free(tlsf, ptr);
 8013548:	f7ff fefa 	bl	8013340 <lv_tlsf_free>
    void * p = 0;
 801354c:	2700      	movs	r7, #0
        lv_tlsf_free(tlsf, ptr);
 801354e:	e7c6      	b.n	80134de <lv_tlsf_realloc+0x8e>
            adjust = tlsf_max(aligned, block_size_min);
 8013550:	220c      	movs	r2, #12
 8013552:	4692      	mov	sl, r2
 8013554:	e7a1      	b.n	801349a <lv_tlsf_realloc+0x4a>
            return NULL;
 8013556:	2700      	movs	r7, #0
 8013558:	e7c1      	b.n	80134de <lv_tlsf_realloc+0x8e>
    block->size &= ~block_header_prev_free_bit;
 801355a:	2202      	movs	r2, #2
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 801355c:	445b      	add	r3, fp
    block->size &= ~block_header_prev_free_bit;
 801355e:	6859      	ldr	r1, [r3, #4]
 8013560:	4391      	bics	r1, r2
 8013562:	6059      	str	r1, [r3, #4]
    block->size &= ~block_header_free_bit;
 8013564:	464b      	mov	r3, r9
 8013566:	464a      	mov	r2, r9
 8013568:	685b      	ldr	r3, [r3, #4]
 801356a:	43bb      	bics	r3, r7
 801356c:	6053      	str	r3, [r2, #4]
    return tlsf_cast(int, block->size & block_header_free_bit);
 801356e:	e7c3      	b.n	80134f8 <lv_tlsf_realloc+0xa8>

08013570 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4), 0 on invalid code.
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if(LV_IS_ASCII(str[0]))
 8013570:	2200      	movs	r2, #0
 8013572:	5682      	ldrsb	r2, [r0, r2]
 8013574:	7803      	ldrb	r3, [r0, #0]
        return 1;
 8013576:	2001      	movs	r0, #1
    if(LV_IS_ASCII(str[0]))
 8013578:	2a00      	cmp	r2, #0
 801357a:	da0f      	bge.n	801359c <lv_txt_utf8_size+0x2c>
    else if(LV_IS_2BYTES_UTF8_CODE(str[0]))
 801357c:	221f      	movs	r2, #31
 801357e:	0019      	movs	r1, r3
 8013580:	4391      	bics	r1, r2
 8013582:	29c0      	cmp	r1, #192	; 0xc0
 8013584:	d00d      	beq.n	80135a2 <lv_txt_utf8_size+0x32>
        return 2;
    else if(LV_IS_3BYTES_UTF8_CODE(str[0]))
 8013586:	220f      	movs	r2, #15
 8013588:	0019      	movs	r1, r3
 801358a:	4391      	bics	r1, r2
 801358c:	29e0      	cmp	r1, #224	; 0xe0
 801358e:	d006      	beq.n	801359e <lv_txt_utf8_size+0x2e>
        return 3;
    else if(LV_IS_4BYTES_UTF8_CODE(str[0]))
 8013590:	2207      	movs	r2, #7
 8013592:	4393      	bics	r3, r2
        return 4;
 8013594:	3bf0      	subs	r3, #240	; 0xf0
 8013596:	425a      	negs	r2, r3
 8013598:	4153      	adcs	r3, r2
 801359a:	0098      	lsls	r0, r3, #2
    return 0;
}
 801359c:	4770      	bx	lr
        return 3;
 801359e:	2003      	movs	r0, #3
 80135a0:	e7fc      	b.n	801359c <lv_txt_utf8_size+0x2c>
        return 2;
 80135a2:	2002      	movs	r0, #2
 80135a4:	e7fa      	b.n	801359c <lv_txt_utf8_size+0x2c>
 80135a6:	46c0      	nop			; (mov r8, r8)

080135a8 <lv_txt_utf8_next>:
     */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 80135a8:	2300      	movs	r3, #0
{
 80135aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135ac:	b083      	sub	sp, #12
 80135ae:	0002      	movs	r2, r0
    uint32_t i_tmp = 0;
 80135b0:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 80135b2:	2900      	cmp	r1, #0
 80135b4:	d01e      	beq.n	80135f4 <lv_txt_utf8_next+0x4c>

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
 80135b6:	680b      	ldr	r3, [r1, #0]
 80135b8:	18c4      	adds	r4, r0, r3
        result = txt[*i];
        (*i)++;
 80135ba:	1c5d      	adds	r5, r3, #1
    if(LV_IS_ASCII(txt[*i])) {
 80135bc:	7820      	ldrb	r0, [r4, #0]
 80135be:	7824      	ldrb	r4, [r4, #0]
 80135c0:	b264      	sxtb	r4, r4
 80135c2:	2c00      	cmp	r4, #0
 80135c4:	db02      	blt.n	80135cc <lv_txt_utf8_next+0x24>
        (*i)++;
 80135c6:	600d      	str	r5, [r1, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 80135c8:	b003      	add	sp, #12
 80135ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 80135cc:	241f      	movs	r4, #31
 80135ce:	0006      	movs	r6, r0
 80135d0:	43a6      	bics	r6, r4
 80135d2:	2ec0      	cmp	r6, #192	; 0xc0
 80135d4:	d054      	beq.n	8013680 <lv_txt_utf8_next+0xd8>
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 80135d6:	240f      	movs	r4, #15
 80135d8:	0006      	movs	r6, r0
 80135da:	43a6      	bics	r6, r4
 80135dc:	0034      	movs	r4, r6
 80135de:	2ee0      	cmp	r6, #224	; 0xe0
 80135e0:	d00d      	beq.n	80135fe <lv_txt_utf8_next+0x56>
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 80135e2:	2407      	movs	r4, #7
 80135e4:	0006      	movs	r6, r0
 80135e6:	43a6      	bics	r6, r4
 80135e8:	0034      	movs	r4, r6
            (*i)++;
 80135ea:	600d      	str	r5, [r1, #0]
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 80135ec:	2ef0      	cmp	r6, #240	; 0xf0
 80135ee:	d020      	beq.n	8013632 <lv_txt_utf8_next+0x8a>
    uint32_t result = 0;
 80135f0:	2000      	movs	r0, #0
 80135f2:	e7e9      	b.n	80135c8 <lv_txt_utf8_next+0x20>
 80135f4:	0004      	movs	r4, r0
 80135f6:	2501      	movs	r5, #1
 80135f8:	2300      	movs	r3, #0
    if(i == NULL) i = &i_tmp;
 80135fa:	a901      	add	r1, sp, #4
 80135fc:	e7de      	b.n	80135bc <lv_txt_utf8_next+0x14>
            (*i)++;
 80135fe:	600d      	str	r5, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8013600:	5d55      	ldrb	r5, [r2, r5]
 8013602:	3ca1      	subs	r4, #161	; 0xa1
 8013604:	002e      	movs	r6, r5
 8013606:	43a6      	bics	r6, r4
 8013608:	2e80      	cmp	r6, #128	; 0x80
 801360a:	d1f1      	bne.n	80135f0 <lv_txt_utf8_next+0x48>
            (*i)++;
 801360c:	1c9e      	adds	r6, r3, #2
 801360e:	600e      	str	r6, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8013610:	5d92      	ldrb	r2, [r2, r6]
 8013612:	0016      	movs	r6, r2
 8013614:	43a6      	bics	r6, r4
 8013616:	2e80      	cmp	r6, #128	; 0x80
 8013618:	d1ea      	bne.n	80135f0 <lv_txt_utf8_next+0x48>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 801361a:	0700      	lsls	r0, r0, #28
 801361c:	0c06      	lsrs	r6, r0, #16
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 801361e:	01a8      	lsls	r0, r5, #6
 8013620:	25fc      	movs	r5, #252	; 0xfc
 8013622:	012d      	lsls	r5, r5, #4
 8013624:	4028      	ands	r0, r5
            result += (txt[*i] & 0x3F);
 8013626:	4014      	ands	r4, r2
 8013628:	1900      	adds	r0, r0, r4
            (*i)++;
 801362a:	3303      	adds	r3, #3
            result += (txt[*i] & 0x3F);
 801362c:	1980      	adds	r0, r0, r6
            (*i)++;
 801362e:	600b      	str	r3, [r1, #0]
 8013630:	e7ca      	b.n	80135c8 <lv_txt_utf8_next+0x20>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8013632:	5d55      	ldrb	r5, [r2, r5]
 8013634:	3cb1      	subs	r4, #177	; 0xb1
 8013636:	002e      	movs	r6, r5
 8013638:	43a6      	bics	r6, r4
 801363a:	2e80      	cmp	r6, #128	; 0x80
 801363c:	d1d8      	bne.n	80135f0 <lv_txt_utf8_next+0x48>
            (*i)++;
 801363e:	1c9e      	adds	r6, r3, #2
 8013640:	600e      	str	r6, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8013642:	5d96      	ldrb	r6, [r2, r6]
 8013644:	0037      	movs	r7, r6
 8013646:	43a7      	bics	r7, r4
 8013648:	2f80      	cmp	r7, #128	; 0x80
 801364a:	d1d1      	bne.n	80135f0 <lv_txt_utf8_next+0x48>
            (*i)++;
 801364c:	1cdf      	adds	r7, r3, #3
 801364e:	600f      	str	r7, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8013650:	5dd2      	ldrb	r2, [r2, r7]
 8013652:	0017      	movs	r7, r2
 8013654:	43a7      	bics	r7, r4
 8013656:	2f80      	cmp	r7, #128	; 0x80
 8013658:	d1ca      	bne.n	80135f0 <lv_txt_utf8_next+0x48>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 801365a:	27e0      	movs	r7, #224	; 0xe0
 801365c:	0480      	lsls	r0, r0, #18
 801365e:	037f      	lsls	r7, r7, #13
 8013660:	4007      	ands	r7, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8013662:	0328      	lsls	r0, r5, #12
 8013664:	25fc      	movs	r5, #252	; 0xfc
 8013666:	02ad      	lsls	r5, r5, #10
 8013668:	4028      	ands	r0, r5
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 801366a:	25fc      	movs	r5, #252	; 0xfc
 801366c:	01b6      	lsls	r6, r6, #6
 801366e:	012d      	lsls	r5, r5, #4
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8013670:	4338      	orrs	r0, r7
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8013672:	402e      	ands	r6, r5
 8013674:	1980      	adds	r0, r0, r6
            result += txt[*i] & 0x3F;
 8013676:	4014      	ands	r4, r2
            (*i)++;
 8013678:	3304      	adds	r3, #4
            result += txt[*i] & 0x3F;
 801367a:	1820      	adds	r0, r4, r0
            (*i)++;
 801367c:	600b      	str	r3, [r1, #0]
 801367e:	e7a3      	b.n	80135c8 <lv_txt_utf8_next+0x20>
            (*i)++;
 8013680:	600d      	str	r5, [r1, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8013682:	5d54      	ldrb	r4, [r2, r5]
 8013684:	223f      	movs	r2, #63	; 0x3f
 8013686:	0025      	movs	r5, r4
 8013688:	4395      	bics	r5, r2
 801368a:	2d80      	cmp	r5, #128	; 0x80
 801368c:	d1b0      	bne.n	80135f0 <lv_txt_utf8_next+0x48>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 801368e:	25f8      	movs	r5, #248	; 0xf8
 8013690:	0180      	lsls	r0, r0, #6
 8013692:	00ed      	lsls	r5, r5, #3
 8013694:	4028      	ands	r0, r5
            result += (txt[*i] & 0x3F);
 8013696:	4022      	ands	r2, r4
            (*i)++;
 8013698:	3302      	adds	r3, #2
            result += (txt[*i] & 0x3F);
 801369a:	1810      	adds	r0, r2, r0
            (*i)++;
 801369c:	600b      	str	r3, [r1, #0]
 801369e:	e793      	b.n	80135c8 <lv_txt_utf8_next+0x20>

080136a0 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 80136a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136a2:	46c6      	mov	lr, r8
 80136a4:	0006      	movs	r6, r0
 80136a6:	000f      	movs	r7, r1
    uint32_t i;
    uint32_t byte_cnt = 0;
 80136a8:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80136aa:	2500      	movs	r5, #0
{
 80136ac:	b500      	push	{lr}
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80136ae:	2900      	cmp	r1, #0
 80136b0:	d012      	beq.n	80136d8 <lv_txt_utf8_get_byte_id+0x38>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 80136b2:	4b0b      	ldr	r3, [pc, #44]	; (80136e0 <lv_txt_utf8_get_byte_id+0x40>)
 80136b4:	4698      	mov	r8, r3
 80136b6:	e00b      	b.n	80136d0 <lv_txt_utf8_get_byte_id+0x30>
 80136b8:	4643      	mov	r3, r8
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	4798      	blx	r3
        /* If the char was invalid tell it's 1 byte long*/
        byte_cnt += c_size ? c_size : 1;
 80136be:	1c03      	adds	r3, r0, #0
 80136c0:	2800      	cmp	r0, #0
 80136c2:	d100      	bne.n	80136c6 <lv_txt_utf8_get_byte_id+0x26>
 80136c4:	2301      	movs	r3, #1
 80136c6:	b2db      	uxtb	r3, r3
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80136c8:	3501      	adds	r5, #1
        byte_cnt += c_size ? c_size : 1;
 80136ca:	18e4      	adds	r4, r4, r3
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80136cc:	42af      	cmp	r7, r5
 80136ce:	d003      	beq.n	80136d8 <lv_txt_utf8_get_byte_id+0x38>
 80136d0:	5d33      	ldrb	r3, [r6, r4]
 80136d2:	1930      	adds	r0, r6, r4
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d1ef      	bne.n	80136b8 <lv_txt_utf8_get_byte_id+0x18>
    }

    return byte_cnt;
}
 80136d8:	0020      	movs	r0, r4
 80136da:	bc80      	pop	{r7}
 80136dc:	46b8      	mov	r8, r7
 80136de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136e0:	20000020 	.word	0x20000020

080136e4 <lv_txt_utf8_get_char_id>:
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
    uint32_t i        = 0;
 80136e4:	2300      	movs	r3, #0
{
 80136e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136e8:	b083      	sub	sp, #12
 80136ea:	0006      	movs	r6, r0
 80136ec:	000d      	movs	r5, r1
    uint32_t char_cnt = 0;
 80136ee:	2400      	movs	r4, #0
    uint32_t i        = 0;
 80136f0:	9301      	str	r3, [sp, #4]

    while(i < byte_id) {
 80136f2:	2900      	cmp	r1, #0
 80136f4:	d008      	beq.n	8013708 <lv_txt_utf8_get_char_id+0x24>
 80136f6:	4f06      	ldr	r7, [pc, #24]	; (8013710 <lv_txt_utf8_get_char_id+0x2c>)
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	0030      	movs	r0, r6
 80136fc:	a901      	add	r1, sp, #4
 80136fe:	4798      	blx	r3
    while(i < byte_id) {
 8013700:	9b01      	ldr	r3, [sp, #4]
        char_cnt++;
 8013702:	3401      	adds	r4, #1
    while(i < byte_id) {
 8013704:	42ab      	cmp	r3, r5
 8013706:	d3f7      	bcc.n	80136f8 <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
}
 8013708:	0020      	movs	r0, r4
 801370a:	b003      	add	sp, #12
 801370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801370e:	46c0      	nop			; (mov r8, r8)
 8013710:	20000018 	.word	0x20000018

08013714 <lv_txt_utf8_get_length>:
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
    uint32_t len = 0;
    uint32_t i   = 0;
 8013714:	2300      	movs	r3, #0
{
 8013716:	b570      	push	{r4, r5, r6, lr}
 8013718:	b082      	sub	sp, #8
    uint32_t i   = 0;
 801371a:	9301      	str	r3, [sp, #4]

    while(txt[i] != '\0') {
 801371c:	7803      	ldrb	r3, [r0, #0]
{
 801371e:	0004      	movs	r4, r0
    uint32_t len = 0;
 8013720:	2500      	movs	r5, #0
    while(txt[i] != '\0') {
 8013722:	2b00      	cmp	r3, #0
 8013724:	d009      	beq.n	801373a <lv_txt_utf8_get_length+0x26>
 8013726:	4e06      	ldr	r6, [pc, #24]	; (8013740 <lv_txt_utf8_get_length+0x2c>)
        _lv_txt_encoded_next(txt, &i);
 8013728:	6833      	ldr	r3, [r6, #0]
 801372a:	0020      	movs	r0, r4
 801372c:	a901      	add	r1, sp, #4
 801372e:	4798      	blx	r3
    while(txt[i] != '\0') {
 8013730:	9b01      	ldr	r3, [sp, #4]
        len++;
 8013732:	3501      	adds	r5, #1
    while(txt[i] != '\0') {
 8013734:	5ce3      	ldrb	r3, [r4, r3]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d1f6      	bne.n	8013728 <lv_txt_utf8_get_length+0x14>
    }

    return len;
}
 801373a:	0028      	movs	r0, r5
 801373c:	b002      	add	sp, #8
 801373e:	bd70      	pop	{r4, r5, r6, pc}
 8013740:	20000018 	.word	0x20000018

08013744 <lv_txt_get_width.part.0>:
lv_coord_t lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
 8013744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013746:	464e      	mov	r6, r9
 8013748:	4645      	mov	r5, r8
 801374a:	46de      	mov	lr, fp
 801374c:	4657      	mov	r7, sl
 801374e:	4691      	mov	r9, r2
    uint32_t i                   = 0;
 8013750:	2200      	movs	r2, #0
lv_coord_t lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
 8013752:	b5e0      	push	{r5, r6, r7, lr}
 8013754:	b085      	sub	sp, #20
 8013756:	9300      	str	r3, [sp, #0]
 8013758:	ab0e      	add	r3, sp, #56	; 0x38
 801375a:	0005      	movs	r5, r0
 801375c:	4688      	mov	r8, r1
    lv_coord_t width             = 0;
 801375e:	2600      	movs	r6, #0
lv_coord_t lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
 8013760:	781b      	ldrb	r3, [r3, #0]
    uint32_t i                   = 0;
 8013762:	9203      	str	r2, [sp, #12]
    if(length != 0) {
 8013764:	2900      	cmp	r1, #0
 8013766:	d03b      	beq.n	80137e0 <lv_txt_get_width.part.0+0x9c>
 8013768:	2201      	movs	r2, #1
 801376a:	0011      	movs	r1, r2
 801376c:	4019      	ands	r1, r3
 801376e:	9101      	str	r1, [sp, #4]
 8013770:	421a      	tst	r2, r3
 8013772:	d040      	beq.n	80137f6 <lv_txt_get_width.part.0+0xb2>
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8013774:	2300      	movs	r3, #0
 8013776:	469b      	mov	fp, r3
 8013778:	ab03      	add	r3, sp, #12
 801377a:	469a      	mov	sl, r3
 801377c:	4f33      	ldr	r7, [pc, #204]	; (801384c <lv_txt_get_width.part.0+0x108>)
 801377e:	e011      	b.n	80137a4 <lv_txt_get_width.part.0+0x60>
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8013780:	9b03      	ldr	r3, [sp, #12]
 8013782:	2100      	movs	r1, #0
 8013784:	18e8      	adds	r0, r5, r3
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	4798      	blx	r3
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 801378a:	465b      	mov	r3, fp
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 801378c:	0002      	movs	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 801378e:	2c23      	cmp	r4, #35	; 0x23
 8013790:	d155      	bne.n	801383e <lv_txt_get_width.part.0+0xfa>
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 8013792:	2b00      	cmp	r3, #0
 8013794:	d02c      	beq.n	80137f0 <lv_txt_get_width.part.0+0xac>
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 8013796:	2b01      	cmp	r3, #1
 8013798:	d04e      	beq.n	8013838 <lv_txt_get_width.part.0+0xf4>
            *state = LV_TEXT_CMD_STATE_WAIT;
 801379a:	2300      	movs	r3, #0
 801379c:	469b      	mov	fp, r3
        while(i < length) {
 801379e:	9b03      	ldr	r3, [sp, #12]
 80137a0:	4598      	cmp	r8, r3
 80137a2:	d918      	bls.n	80137d6 <lv_txt_get_width.part.0+0x92>
    *letter = _lv_txt_encoded_next(txt, ofs);
 80137a4:	4651      	mov	r1, sl
 80137a6:	0028      	movs	r0, r5
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	4798      	blx	r3
 80137ac:	1e04      	subs	r4, r0, #0
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 80137ae:	d1e7      	bne.n	8013780 <lv_txt_get_width.part.0+0x3c>
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 80137b0:	465b      	mov	r3, fp
 80137b2:	2b01      	cmp	r3, #1
 80137b4:	d0f3      	beq.n	801379e <lv_txt_get_width.part.0+0x5a>
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 80137b6:	2200      	movs	r2, #0
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 80137b8:	0021      	movs	r1, r4
 80137ba:	4648      	mov	r0, r9
 80137bc:	f7fc fe88 	bl	80104d0 <lv_font_get_glyph_width>
            if(char_width > 0) {
 80137c0:	b203      	sxth	r3, r0
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	ddeb      	ble.n	801379e <lv_txt_get_width.part.0+0x5a>
                width += letter_space;
 80137c6:	9b00      	ldr	r3, [sp, #0]
 80137c8:	469c      	mov	ip, r3
        while(i < length) {
 80137ca:	9b03      	ldr	r3, [sp, #12]
                width += letter_space;
 80137cc:	4466      	add	r6, ip
 80137ce:	1986      	adds	r6, r0, r6
 80137d0:	b236      	sxth	r6, r6
        while(i < length) {
 80137d2:	4598      	cmp	r8, r3
 80137d4:	d8e6      	bhi.n	80137a4 <lv_txt_get_width.part.0+0x60>
        if(width > 0) {
 80137d6:	2e00      	cmp	r6, #0
 80137d8:	dd02      	ble.n	80137e0 <lv_txt_get_width.part.0+0x9c>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 80137da:	9b00      	ldr	r3, [sp, #0]
 80137dc:	1af6      	subs	r6, r6, r3
 80137de:	b236      	sxth	r6, r6
}
 80137e0:	0030      	movs	r0, r6
 80137e2:	b005      	add	sp, #20
 80137e4:	bcf0      	pop	{r4, r5, r6, r7}
 80137e6:	46bb      	mov	fp, r7
 80137e8:	46b2      	mov	sl, r6
 80137ea:	46a9      	mov	r9, r5
 80137ec:	46a0      	mov	r8, r4
 80137ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137f0:	9b01      	ldr	r3, [sp, #4]
 80137f2:	469b      	mov	fp, r3
 80137f4:	e7d3      	b.n	801379e <lv_txt_get_width.part.0+0x5a>
 80137f6:	ab03      	add	r3, sp, #12
 80137f8:	469a      	mov	sl, r3
 80137fa:	4f14      	ldr	r7, [pc, #80]	; (801384c <lv_txt_get_width.part.0+0x108>)
 80137fc:	e00f      	b.n	801381e <lv_txt_get_width.part.0+0xda>
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 80137fe:	2200      	movs	r2, #0
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8013800:	0021      	movs	r1, r4
 8013802:	4648      	mov	r0, r9
 8013804:	f7fc fe64 	bl	80104d0 <lv_font_get_glyph_width>
            if(char_width > 0) {
 8013808:	b203      	sxth	r3, r0
 801380a:	2b00      	cmp	r3, #0
 801380c:	dd04      	ble.n	8013818 <lv_txt_get_width.part.0+0xd4>
                width += letter_space;
 801380e:	9b00      	ldr	r3, [sp, #0]
 8013810:	469c      	mov	ip, r3
 8013812:	4466      	add	r6, ip
 8013814:	1986      	adds	r6, r0, r6
 8013816:	b236      	sxth	r6, r6
        while(i < length) {
 8013818:	9b03      	ldr	r3, [sp, #12]
 801381a:	4598      	cmp	r8, r3
 801381c:	d9db      	bls.n	80137d6 <lv_txt_get_width.part.0+0x92>
    *letter = _lv_txt_encoded_next(txt, ofs);
 801381e:	4651      	mov	r1, sl
 8013820:	0028      	movs	r0, r5
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	4798      	blx	r3
 8013826:	1e04      	subs	r4, r0, #0
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8013828:	d0e9      	beq.n	80137fe <lv_txt_get_width.part.0+0xba>
 801382a:	9b03      	ldr	r3, [sp, #12]
 801382c:	2100      	movs	r1, #0
 801382e:	18e8      	adds	r0, r5, r3
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	4798      	blx	r3
 8013834:	0002      	movs	r2, r0
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8013836:	e7e3      	b.n	8013800 <lv_txt_get_width.part.0+0xbc>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8013838:	2300      	movs	r3, #0
 801383a:	469b      	mov	fp, r3
 801383c:	e7bc      	b.n	80137b8 <lv_txt_get_width.part.0+0x74>
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 801383e:	2b01      	cmp	r3, #1
 8013840:	d1ba      	bne.n	80137b8 <lv_txt_get_width.part.0+0x74>
        if(c == ' ') {
 8013842:	2c20      	cmp	r4, #32
 8013844:	d1ab      	bne.n	801379e <lv_txt_get_width.part.0+0x5a>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8013846:	3301      	adds	r3, #1
 8013848:	469b      	mov	fp, r3
 801384a:	e7a8      	b.n	801379e <lv_txt_get_width.part.0+0x5a>
 801384c:	20000018 	.word	0x20000018

08013850 <lv_txt_utf8_prev>:
{
 8013850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013852:	000d      	movs	r5, r1
    (*i)--;
 8013854:	2404      	movs	r4, #4
 8013856:	680b      	ldr	r3, [r1, #0]
{
 8013858:	0006      	movs	r6, r0
 801385a:	4f0e      	ldr	r7, [pc, #56]	; (8013894 <lv_txt_utf8_prev+0x44>)
    (*i)--;
 801385c:	1e58      	subs	r0, r3, #1
{
 801385e:	b083      	sub	sp, #12
    (*i)--;
 8013860:	6008      	str	r0, [r1, #0]
        c_size = _lv_txt_encoded_size(&txt[*i]);
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	1830      	adds	r0, r6, r0
 8013866:	4798      	blx	r3
        if(c_size == 0) {
 8013868:	2800      	cmp	r0, #0
 801386a:	d008      	beq.n	801387e <lv_txt_utf8_prev+0x2e>
    uint32_t i_tmp  = *i;
 801386c:	682b      	ldr	r3, [r5, #0]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 801386e:	0030      	movs	r0, r6
    uint32_t i_tmp  = *i;
 8013870:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8013872:	4b09      	ldr	r3, [pc, #36]	; (8013898 <lv_txt_utf8_prev+0x48>)
 8013874:	a901      	add	r1, sp, #4
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	4798      	blx	r3
}
 801387a:	b003      	add	sp, #12
 801387c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(*i != 0)
 801387e:	6828      	ldr	r0, [r5, #0]
 8013880:	2800      	cmp	r0, #0
 8013882:	d005      	beq.n	8013890 <lv_txt_utf8_prev+0x40>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8013884:	3c01      	subs	r4, #1
                (*i)--;
 8013886:	3801      	subs	r0, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8013888:	b2e4      	uxtb	r4, r4
                (*i)--;
 801388a:	6028      	str	r0, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 801388c:	2c00      	cmp	r4, #0
 801388e:	d1e8      	bne.n	8013862 <lv_txt_utf8_prev+0x12>
                return 0;
 8013890:	2000      	movs	r0, #0
 8013892:	e7f2      	b.n	801387a <lv_txt_utf8_prev+0x2a>
 8013894:	20000020 	.word	0x20000020
 8013898:	20000018 	.word	0x20000018

0801389c <_lv_txt_get_next_line>:
{
 801389c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801389e:	46de      	mov	lr, fp
 80138a0:	4657      	mov	r7, sl
 80138a2:	464e      	mov	r6, r9
 80138a4:	4645      	mov	r5, r8
 80138a6:	b5e0      	push	{r5, r6, r7, lr}
 80138a8:	b093      	sub	sp, #76	; 0x4c
 80138aa:	9304      	str	r3, [sp, #16]
 80138ac:	ab1c      	add	r3, sp, #112	; 0x70
 80138ae:	9107      	str	r1, [sp, #28]
 80138b0:	cb02      	ldmia	r3!, {r1}
 80138b2:	9209      	str	r2, [sp, #36]	; 0x24
 80138b4:	9006      	str	r0, [sp, #24]
 80138b6:	781a      	ldrb	r2, [r3, #0]
 80138b8:	910c      	str	r1, [sp, #48]	; 0x30
    if(used_width) *used_width = 0;
 80138ba:	2900      	cmp	r1, #0
 80138bc:	d001      	beq.n	80138c2 <_lv_txt_get_next_line+0x26>
 80138be:	2300      	movs	r3, #0
 80138c0:	800b      	strh	r3, [r1, #0]
    if(txt == NULL) return 0;
 80138c2:	9b06      	ldr	r3, [sp, #24]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d100      	bne.n	80138ca <_lv_txt_get_next_line+0x2e>
 80138c8:	e0a3      	b.n	8013a12 <_lv_txt_get_next_line+0x176>
    if(txt[0] == '\0') return 0;
 80138ca:	781b      	ldrb	r3, [r3, #0]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d100      	bne.n	80138d2 <_lv_txt_get_next_line+0x36>
 80138d0:	e09f      	b.n	8013a12 <_lv_txt_get_next_line+0x176>
    if(font == NULL) return 0;
 80138d2:	9907      	ldr	r1, [sp, #28]
 80138d4:	2900      	cmp	r1, #0
 80138d6:	d100      	bne.n	80138da <_lv_txt_get_next_line+0x3e>
 80138d8:	e09b      	b.n	8013a12 <_lv_txt_get_next_line+0x176>
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 80138da:	2106      	movs	r1, #6
 80138dc:	4211      	tst	r1, r2
 80138de:	d000      	beq.n	80138e2 <_lv_txt_get_next_line+0x46>
 80138e0:	e120      	b.n	8013b24 <_lv_txt_get_next_line+0x288>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80138e2:	2302      	movs	r3, #2
 80138e4:	0019      	movs	r1, r3
 80138e6:	4011      	ands	r1, r2
 80138e8:	910d      	str	r1, [sp, #52]	; 0x34
 80138ea:	4213      	tst	r3, r2
 80138ec:	d000      	beq.n	80138f0 <_lv_txt_get_next_line+0x54>
 80138ee:	e116      	b.n	8013b1e <_lv_txt_get_next_line+0x282>
    uint32_t i = 0;                                        /*Iterating index into txt*/
 80138f0:	2300      	movs	r3, #0
 80138f2:	930f      	str	r3, [sp, #60]	; 0x3c
    while(txt[i] != '\0' && max_width > 0) {
 80138f4:	3301      	adds	r3, #1
 80138f6:	4013      	ands	r3, r2
 80138f8:	9302      	str	r3, [sp, #8]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80138fa:	2300      	movs	r3, #0
 80138fc:	9301      	str	r3, [sp, #4]
    uint32_t i = 0;                                        /*Iterating index into txt*/
 80138fe:	9b06      	ldr	r3, [sp, #24]
 8013900:	4698      	mov	r8, r3
    lv_coord_t line_w = 0;
 8013902:	2300      	movs	r3, #0
    while(txt[i] != '\0' && max_width > 0) {
 8013904:	469b      	mov	fp, r3
    lv_coord_t line_w = 0;
 8013906:	9308      	str	r3, [sp, #32]
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
        return true;
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8013908:	4ba4      	ldr	r3, [pc, #656]	; (8013b9c <_lv_txt_get_next_line+0x300>)
 801390a:	4647      	mov	r7, r8
 801390c:	4699      	mov	r9, r3
 801390e:	46da      	mov	sl, fp
    while(txt[i] != '\0' && max_width > 0) {
 8013910:	9b04      	ldr	r3, [sp, #16]
 8013912:	2b00      	cmp	r3, #0
 8013914:	dc00      	bgt.n	8013918 <_lv_txt_get_next_line+0x7c>
 8013916:	e0f5      	b.n	8013b04 <_lv_txt_get_next_line+0x268>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8013918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801391a:	2b00      	cmp	r3, #0
 801391c:	d000      	beq.n	8013920 <_lv_txt_get_next_line+0x84>
 801391e:	e0c5      	b.n	8013aac <_lv_txt_get_next_line+0x210>
 8013920:	9b04      	ldr	r3, [sp, #16]
 8013922:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8013924:	2300      	movs	r3, #0
 8013926:	9310      	str	r3, [sp, #64]	; 0x40
 8013928:	9311      	str	r3, [sp, #68]	; 0x44
    letter = _lv_txt_encoded_next(txt, &i_next);
 801392a:	4b9d      	ldr	r3, [pc, #628]	; (8013ba0 <_lv_txt_get_next_line+0x304>)
 801392c:	0038      	movs	r0, r7
 801392e:	469b      	mov	fp, r3
 8013930:	a910      	add	r1, sp, #64	; 0x40
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	4798      	blx	r3
    i_next_next = i_next;
 8013936:	9b10      	ldr	r3, [sp, #64]	; 0x40
    letter = _lv_txt_encoded_next(txt, &i_next);
 8013938:	0005      	movs	r5, r0
    i_next_next = i_next;
 801393a:	9300      	str	r3, [sp, #0]
 801393c:	9311      	str	r3, [sp, #68]	; 0x44
    while(txt[i] != '\0') {
 801393e:	783b      	ldrb	r3, [r7, #0]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d100      	bne.n	8013946 <_lv_txt_get_next_line+0xaa>
 8013944:	e125      	b.n	8013b92 <_lv_txt_get_next_line+0x2f6>
        uint32_t word_w = 0;
 8013946:	2300      	movs	r3, #0
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8013948:	4698      	mov	r8, r3
        uint32_t word_w = 0;
 801394a:	930a      	str	r3, [sp, #40]	; 0x28
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 801394c:	3b01      	subs	r3, #1
 801394e:	9300      	str	r3, [sp, #0]
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 8013950:	2300      	movs	r3, #0
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 8013952:	2600      	movs	r6, #0
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 8013954:	9303      	str	r3, [sp, #12]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8013956:	465b      	mov	r3, fp
 8013958:	0038      	movs	r0, r7
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	a911      	add	r1, sp, #68	; 0x44
 801395e:	4798      	blx	r3
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8013960:	9b02      	ldr	r3, [sp, #8]
 8013962:	002c      	movs	r4, r5
 8013964:	9605      	str	r6, [sp, #20]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8013966:	0005      	movs	r5, r0
        word_len++;
 8013968:	3601      	adds	r6, #1
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 801396a:	2b00      	cmp	r3, #0
 801396c:	d005      	beq.n	801397a <_lv_txt_get_next_line+0xde>
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 801396e:	9b01      	ldr	r3, [sp, #4]
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8013970:	2c23      	cmp	r4, #35	; 0x23
 8013972:	d058      	beq.n	8013a26 <_lv_txt_get_next_line+0x18a>
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8013974:	2b01      	cmp	r3, #1
 8013976:	d100      	bne.n	801397a <_lv_txt_get_next_line+0xde>
 8013978:	e093      	b.n	8013aa2 <_lv_txt_get_next_line+0x206>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 801397a:	002a      	movs	r2, r5
 801397c:	0021      	movs	r1, r4
 801397e:	9807      	ldr	r0, [sp, #28]
 8013980:	f7fc fda6 	bl	80104d0 <lv_font_get_glyph_width>
        cur_w += letter_w;
 8013984:	9b03      	ldr	r3, [sp, #12]
 8013986:	18c3      	adds	r3, r0, r3
        if(letter_w > 0) {
 8013988:	b200      	sxth	r0, r0
        cur_w += letter_w;
 801398a:	b29b      	uxth	r3, r3
        if(letter_w > 0) {
 801398c:	2800      	cmp	r0, #0
 801398e:	dd03      	ble.n	8013998 <_lv_txt_get_next_line+0xfc>
            cur_w += letter_space;
 8013990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013992:	4694      	mov	ip, r2
 8013994:	4463      	add	r3, ip
 8013996:	b29b      	uxth	r3, r3
 8013998:	b21b      	sxth	r3, r3
 801399a:	9303      	str	r3, [sp, #12]
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 801399c:	9b00      	ldr	r3, [sp, #0]
 801399e:	3301      	adds	r3, #1
 80139a0:	d100      	bne.n	80139a4 <_lv_txt_get_next_line+0x108>
 80139a2:	e074      	b.n	8013a8e <_lv_txt_get_next_line+0x1f2>
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 80139a4:	2c0a      	cmp	r4, #10
 80139a6:	d011      	beq.n	80139cc <_lv_txt_get_next_line+0x130>
 80139a8:	2c0d      	cmp	r4, #13
 80139aa:	d00f      	beq.n	80139cc <_lv_txt_get_next_line+0x130>
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 80139ac:	4b7d      	ldr	r3, [pc, #500]	; (8013ba4 <_lv_txt_get_next_line+0x308>)
 80139ae:	4a7e      	ldr	r2, [pc, #504]	; (8013ba8 <_lv_txt_get_next_line+0x30c>)
 80139b0:	18e3      	adds	r3, r4, r3
 80139b2:	4293      	cmp	r3, r2
 80139b4:	d90a      	bls.n	80139cc <_lv_txt_get_next_line+0x130>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80139b6:	2300      	movs	r3, #0
 80139b8:	2220      	movs	r2, #32
 80139ba:	e005      	b.n	80139c8 <_lv_txt_get_next_line+0x12c>
 80139bc:	464a      	mov	r2, r9
 80139be:	3301      	adds	r3, #1
 80139c0:	b2db      	uxtb	r3, r3
 80139c2:	5cd2      	ldrb	r2, [r2, r3]
 80139c4:	2a00      	cmp	r2, #0
 80139c6:	d050      	beq.n	8013a6a <_lv_txt_get_next_line+0x1ce>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 80139c8:	42a2      	cmp	r2, r4
 80139ca:	d1f7      	bne.n	80139bc <_lv_txt_get_next_line+0x120>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 80139cc:	4643      	mov	r3, r8
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d13c      	bne.n	8013a4c <_lv_txt_get_next_line+0x1b0>
 80139d2:	9b00      	ldr	r3, [sp, #0]
 80139d4:	3301      	adds	r3, #1
 80139d6:	d100      	bne.n	80139da <_lv_txt_get_next_line+0x13e>
 80139d8:	e0bf      	b.n	8013b5a <_lv_txt_get_next_line+0x2be>
    if(force) return break_index;
 80139da:	4653      	mov	r3, sl
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d06b      	beq.n	8013ab8 <_lv_txt_get_next_line+0x21c>
    if(i == 0) {
 80139e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80139e2:	469b      	mov	fp, r3
 80139e4:	465b      	mov	r3, fp
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d000      	beq.n	80139ec <_lv_txt_get_next_line+0x150>
 80139ea:	e090      	b.n	8013b0e <_lv_txt_get_next_line+0x272>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 80139ec:	4b6c      	ldr	r3, [pc, #432]	; (8013ba0 <_lv_txt_get_next_line+0x304>)
 80139ee:	a90f      	add	r1, sp, #60	; 0x3c
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	9806      	ldr	r0, [sp, #24]
 80139f4:	4798      	blx	r3
        if(used_width != NULL) {
 80139f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 80139f8:	0001      	movs	r1, r0
        if(used_width != NULL) {
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d100      	bne.n	8013a00 <_lv_txt_get_next_line+0x164>
 80139fe:	e0be      	b.n	8013b7e <_lv_txt_get_next_line+0x2e2>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 8013a00:	2200      	movs	r2, #0
 8013a02:	9807      	ldr	r0, [sp, #28]
 8013a04:	f7fc fd64 	bl	80104d0 <lv_font_get_glyph_width>
 8013a08:	b203      	sxth	r3, r0
 8013a0a:	9308      	str	r3, [sp, #32]
    return i;
 8013a0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013a0e:	469b      	mov	fp, r3
 8013a10:	e081      	b.n	8013b16 <_lv_txt_get_next_line+0x27a>
    if(txt == NULL) return 0;
 8013a12:	2300      	movs	r3, #0
 8013a14:	469b      	mov	fp, r3
}
 8013a16:	4658      	mov	r0, fp
 8013a18:	b013      	add	sp, #76	; 0x4c
 8013a1a:	bcf0      	pop	{r4, r5, r6, r7}
 8013a1c:	46bb      	mov	fp, r7
 8013a1e:	46b2      	mov	sl, r6
 8013a20:	46a9      	mov	r9, r5
 8013a22:	46a0      	mov	r8, r4
 8013a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d02e      	beq.n	8013a88 <_lv_txt_get_next_line+0x1ec>
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 8013a2a:	2b01      	cmp	r3, #1
 8013a2c:	d041      	beq.n	8013ab2 <_lv_txt_get_next_line+0x216>
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 8013a2e:	2b02      	cmp	r3, #2
 8013a30:	d1a3      	bne.n	801397a <_lv_txt_get_next_line+0xde>
 8013a32:	2300      	movs	r3, #0
 8013a34:	9301      	str	r3, [sp, #4]
        i = i_next;
 8013a36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a38:	4698      	mov	r8, r3
        i_next = i_next_next;
 8013a3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013a3c:	9310      	str	r3, [sp, #64]	; 0x40
    while(txt[i] != '\0') {
 8013a3e:	4643      	mov	r3, r8
 8013a40:	5cfb      	ldrb	r3, [r7, r3]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d000      	beq.n	8013a48 <_lv_txt_get_next_line+0x1ac>
 8013a46:	e786      	b.n	8013956 <_lv_txt_get_next_line+0xba>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8013a48:	002c      	movs	r4, r5
 8013a4a:	9605      	str	r6, [sp, #20]
    if(break_index == NO_BREAK_FOUND) {
 8013a4c:	9b00      	ldr	r3, [sp, #0]
 8013a4e:	3301      	adds	r3, #1
 8013a50:	d1c3      	bne.n	80139da <_lv_txt_get_next_line+0x13e>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8013a52:	9b05      	ldr	r3, [sp, #20]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d100      	bne.n	8013a5a <_lv_txt_get_next_line+0x1be>
 8013a58:	e085      	b.n	8013b66 <_lv_txt_get_next_line+0x2ca>
 8013a5a:	2c0d      	cmp	r4, #13
 8013a5c:	d100      	bne.n	8013a60 <_lv_txt_get_next_line+0x1c4>
 8013a5e:	e07f      	b.n	8013b60 <_lv_txt_get_next_line+0x2c4>
        max_width -= word_w;
 8013a60:	466b      	mov	r3, sp
 8013a62:	4642      	mov	r2, r8
 8013a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013a66:	9200      	str	r2, [sp, #0]
 8013a68:	e028      	b.n	8013abc <_lv_txt_get_next_line+0x220>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 8013a6a:	9b00      	ldr	r3, [sp, #0]
 8013a6c:	3301      	adds	r3, #1
 8013a6e:	d101      	bne.n	8013a74 <_lv_txt_get_next_line+0x1d8>
 8013a70:	9b03      	ldr	r3, [sp, #12]
 8013a72:	930a      	str	r3, [sp, #40]	; 0x28
        i = i_next;
 8013a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a76:	4698      	mov	r8, r3
        i_next = i_next_next;
 8013a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013a7a:	9310      	str	r3, [sp, #64]	; 0x40
    while(txt[i] != '\0') {
 8013a7c:	4643      	mov	r3, r8
 8013a7e:	5cfb      	ldrb	r3, [r7, r3]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d000      	beq.n	8013a86 <_lv_txt_get_next_line+0x1ea>
 8013a84:	e767      	b.n	8013956 <_lv_txt_get_next_line+0xba>
 8013a86:	e7df      	b.n	8013a48 <_lv_txt_get_next_line+0x1ac>
 8013a88:	9b02      	ldr	r3, [sp, #8]
 8013a8a:	9301      	str	r3, [sp, #4]
 8013a8c:	e7f2      	b.n	8013a74 <_lv_txt_get_next_line+0x1d8>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8013a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a90:	9b03      	ldr	r3, [sp, #12]
 8013a92:	1a9b      	subs	r3, r3, r2
 8013a94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013a96:	4293      	cmp	r3, r2
 8013a98:	dc00      	bgt.n	8013a9c <_lv_txt_get_next_line+0x200>
 8013a9a:	e783      	b.n	80139a4 <_lv_txt_get_next_line+0x108>
 8013a9c:	4643      	mov	r3, r8
 8013a9e:	9300      	str	r3, [sp, #0]
 8013aa0:	e780      	b.n	80139a4 <_lv_txt_get_next_line+0x108>
        if(c == ' ') {
 8013aa2:	2c20      	cmp	r4, #32
 8013aa4:	d1e6      	bne.n	8013a74 <_lv_txt_get_next_line+0x1d8>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8013aa6:	3301      	adds	r3, #1
 8013aa8:	9301      	str	r3, [sp, #4]
 8013aaa:	e7e3      	b.n	8013a74 <_lv_txt_get_next_line+0x1d8>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8013aac:	4b3f      	ldr	r3, [pc, #252]	; (8013bac <_lv_txt_get_next_line+0x310>)
 8013aae:	930b      	str	r3, [sp, #44]	; 0x2c
 8013ab0:	e738      	b.n	8013924 <_lv_txt_get_next_line+0x88>
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	9301      	str	r3, [sp, #4]
 8013ab6:	e760      	b.n	801397a <_lv_txt_get_next_line+0xde>
        max_width -= word_w;
 8013ab8:	466b      	mov	r3, sp
 8013aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013abc:	9a04      	ldr	r2, [sp, #16]
 8013abe:	1ad2      	subs	r2, r2, r3
 8013ac0:	b212      	sxth	r2, r2
 8013ac2:	9204      	str	r2, [sp, #16]
        line_w += word_w;
 8013ac4:	9a08      	ldr	r2, [sp, #32]
 8013ac6:	4694      	mov	ip, r2
 8013ac8:	4463      	add	r3, ip
 8013aca:	b21b      	sxth	r3, r3
 8013acc:	9308      	str	r3, [sp, #32]
        if(advance == 0) {
 8013ace:	9b00      	ldr	r3, [sp, #0]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d100      	bne.n	8013ad6 <_lv_txt_get_next_line+0x23a>
 8013ad4:	e784      	b.n	80139e0 <_lv_txt_get_next_line+0x144>
        i += advance;
 8013ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013ad8:	4694      	mov	ip, r2
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8013ada:	9a06      	ldr	r2, [sp, #24]
        i += advance;
 8013adc:	4463      	add	r3, ip
 8013ade:	469a      	mov	sl, r3
 8013ae0:	930f      	str	r3, [sp, #60]	; 0x3c
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8013ae2:	7813      	ldrb	r3, [r2, #0]
 8013ae4:	2b0a      	cmp	r3, #10
 8013ae6:	d00d      	beq.n	8013b04 <_lv_txt_get_next_line+0x268>
 8013ae8:	2b0d      	cmp	r3, #13
 8013aea:	d00b      	beq.n	8013b04 <_lv_txt_get_next_line+0x268>
        if(txt[i] == '\n' || txt[i] == '\r') {
 8013aec:	0017      	movs	r7, r2
 8013aee:	0013      	movs	r3, r2
 8013af0:	4652      	mov	r2, sl
 8013af2:	5c9b      	ldrb	r3, [r3, r2]
 8013af4:	4457      	add	r7, sl
 8013af6:	2b0a      	cmp	r3, #10
 8013af8:	d03a      	beq.n	8013b70 <_lv_txt_get_next_line+0x2d4>
 8013afa:	2b0d      	cmp	r3, #13
 8013afc:	d038      	beq.n	8013b70 <_lv_txt_get_next_line+0x2d4>
    while(txt[i] != '\0' && max_width > 0) {
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d000      	beq.n	8013b04 <_lv_txt_get_next_line+0x268>
 8013b02:	e705      	b.n	8013910 <_lv_txt_get_next_line+0x74>
 8013b04:	46d3      	mov	fp, sl
    if(i == 0) {
 8013b06:	465b      	mov	r3, fp
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d100      	bne.n	8013b0e <_lv_txt_get_next_line+0x272>
 8013b0c:	e76e      	b.n	80139ec <_lv_txt_get_next_line+0x150>
    if(used_width != NULL) {
 8013b0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d100      	bne.n	8013b16 <_lv_txt_get_next_line+0x27a>
 8013b14:	e77f      	b.n	8013a16 <_lv_txt_get_next_line+0x17a>
        *used_width = line_w;
 8013b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b18:	9a08      	ldr	r2, [sp, #32]
 8013b1a:	801a      	strh	r2, [r3, #0]
    return i;
 8013b1c:	e77b      	b.n	8013a16 <_lv_txt_get_next_line+0x17a>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8013b1e:	4b23      	ldr	r3, [pc, #140]	; (8013bac <_lv_txt_get_next_line+0x310>)
 8013b20:	9304      	str	r3, [sp, #16]
 8013b22:	e6e5      	b.n	80138f0 <_lv_txt_get_next_line+0x54>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8013b24:	2200      	movs	r2, #0
 8013b26:	2b0a      	cmp	r3, #10
 8013b28:	d035      	beq.n	8013b96 <_lv_txt_get_next_line+0x2fa>
 8013b2a:	0011      	movs	r1, r2
 8013b2c:	9806      	ldr	r0, [sp, #24]
 8013b2e:	e006      	b.n	8013b3e <_lv_txt_get_next_line+0x2a2>
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d027      	beq.n	8013b84 <_lv_txt_get_next_line+0x2e8>
 8013b34:	1c4a      	adds	r2, r1, #1
 8013b36:	5c83      	ldrb	r3, [r0, r2]
 8013b38:	2b0a      	cmp	r3, #10
 8013b3a:	d025      	beq.n	8013b88 <_lv_txt_get_next_line+0x2ec>
 8013b3c:	0011      	movs	r1, r2
 8013b3e:	2b0d      	cmp	r3, #13
 8013b40:	d1f6      	bne.n	8013b30 <_lv_txt_get_next_line+0x294>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 8013b42:	3b0c      	subs	r3, #12
 8013b44:	468b      	mov	fp, r1
 8013b46:	469c      	mov	ip, r3
 8013b48:	44e3      	add	fp, ip
        if(used_width) *used_width = -1;
 8013b4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b4c:	2a00      	cmp	r2, #0
 8013b4e:	d100      	bne.n	8013b52 <_lv_txt_get_next_line+0x2b6>
 8013b50:	e761      	b.n	8013a16 <_lv_txt_get_next_line+0x17a>
 8013b52:	2301      	movs	r3, #1
 8013b54:	425b      	negs	r3, r3
 8013b56:	8013      	strh	r3, [r2, #0]
 8013b58:	e75d      	b.n	8013a16 <_lv_txt_get_next_line+0x17a>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8013b5a:	9b03      	ldr	r3, [sp, #12]
 8013b5c:	930a      	str	r3, [sp, #40]	; 0x28
    if(break_index == NO_BREAK_FOUND) {
 8013b5e:	e778      	b.n	8013a52 <_lv_txt_get_next_line+0x1b6>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8013b60:	2d0a      	cmp	r5, #10
 8013b62:	d000      	beq.n	8013b66 <_lv_txt_get_next_line+0x2ca>
 8013b64:	e77c      	b.n	8013a60 <_lv_txt_get_next_line+0x1c4>
 8013b66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013b68:	9300      	str	r3, [sp, #0]
        max_width -= word_w;
 8013b6a:	466b      	mov	r3, sp
 8013b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013b6e:	e7a5      	b.n	8013abc <_lv_txt_get_next_line+0x220>
            i++;  /*Include the following newline in the current line*/
 8013b70:	2301      	movs	r3, #1
 8013b72:	46d3      	mov	fp, sl
 8013b74:	469c      	mov	ip, r3
 8013b76:	44e3      	add	fp, ip
 8013b78:	465b      	mov	r3, fp
 8013b7a:	930f      	str	r3, [sp, #60]	; 0x3c
            break;
 8013b7c:	e732      	b.n	80139e4 <_lv_txt_get_next_line+0x148>
    return i;
 8013b7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013b80:	469b      	mov	fp, r3
 8013b82:	e748      	b.n	8013a16 <_lv_txt_get_next_line+0x17a>
 8013b84:	468b      	mov	fp, r1
 8013b86:	e7e0      	b.n	8013b4a <_lv_txt_get_next_line+0x2ae>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 8013b88:	3b08      	subs	r3, #8
 8013b8a:	468b      	mov	fp, r1
 8013b8c:	469c      	mov	ip, r3
 8013b8e:	44e3      	add	fp, ip
 8013b90:	e7db      	b.n	8013b4a <_lv_txt_get_next_line+0x2ae>
    while(txt[i] != '\0') {
 8013b92:	2300      	movs	r3, #0
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8013b94:	e792      	b.n	8013abc <_lv_txt_get_next_line+0x220>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8013b96:	3b09      	subs	r3, #9
 8013b98:	469b      	mov	fp, r3
 8013b9a:	e7d6      	b.n	8013b4a <_lv_txt_get_next_line+0x2ae>
 8013b9c:	0801be80 	.word	0x0801be80
 8013ba0:	20000018 	.word	0x20000018
 8013ba4:	ffffb200 	.word	0xffffb200
 8013ba8:	000051a5 	.word	0x000051a5
 8013bac:	00001fff 	.word	0x00001fff

08013bb0 <lv_txt_get_size>:
{
 8013bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bb2:	4657      	mov	r7, sl
 8013bb4:	46de      	mov	lr, fp
 8013bb6:	464e      	mov	r6, r9
 8013bb8:	4645      	mov	r5, r8
 8013bba:	b5e0      	push	{r5, r6, r7, lr}
 8013bbc:	b087      	sub	sp, #28
 8013bbe:	4698      	mov	r8, r3
 8013bc0:	ab10      	add	r3, sp, #64	; 0x40
 8013bc2:	0017      	movs	r7, r2
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	5e9a      	ldrsh	r2, [r3, r2]
 8013bc8:	ab11      	add	r3, sp, #68	; 0x44
 8013bca:	468a      	mov	sl, r1
 8013bcc:	2100      	movs	r1, #0
 8013bce:	5e5b      	ldrsh	r3, [r3, r1]
 8013bd0:	0004      	movs	r4, r0
 8013bd2:	469b      	mov	fp, r3
 8013bd4:	ab12      	add	r3, sp, #72	; 0x48
 8013bd6:	781b      	ldrb	r3, [r3, #0]
 8013bd8:	4699      	mov	r9, r3
    size_res->x = 0;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	8003      	strh	r3, [r0, #0]
    size_res->y = 0;
 8013bde:	8043      	strh	r3, [r0, #2]
    if(text == NULL) return;
 8013be0:	4653      	mov	r3, sl
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d054      	beq.n	8013c90 <lv_txt_get_size+0xe0>
    if(font == NULL) return;
 8013be6:	2f00      	cmp	r7, #0
 8013be8:	d052      	beq.n	8013c90 <lv_txt_get_size+0xe0>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8013bea:	464b      	mov	r3, r9
 8013bec:	079b      	lsls	r3, r3, #30
 8013bee:	d466      	bmi.n	8013cbe <lv_txt_get_size+0x10e>
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 8013bf0:	2108      	movs	r1, #8
 8013bf2:	5e7b      	ldrsh	r3, [r7, r1]
    while(text[line_start] != '\0') {
 8013bf4:	4651      	mov	r1, sl
 8013bf6:	7809      	ldrb	r1, [r1, #0]
 8013bf8:	9304      	str	r3, [sp, #16]
    uint16_t letter_height = lv_font_get_line_height(font);
 8013bfa:	893b      	ldrh	r3, [r7, #8]
    while(text[line_start] != '\0') {
 8013bfc:	2900      	cmp	r1, #0
 8013bfe:	d061      	beq.n	8013cc4 <lv_txt_get_size+0x114>
 8013c00:	1899      	adds	r1, r3, r2
            size_res->y += line_space;
 8013c02:	b292      	uxth	r2, r2
 8013c04:	4694      	mov	ip, r2
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8013c06:	4655      	mov	r5, sl
    uint32_t line_start     = 0;
 8013c08:	2600      	movs	r6, #0
 8013c0a:	4463      	add	r3, ip
 8013c0c:	b29b      	uxth	r3, r3
 8013c0e:	9102      	str	r1, [sp, #8]
            size_res->y += line_space;
 8013c10:	9205      	str	r2, [sp, #20]
 8013c12:	9303      	str	r3, [sp, #12]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 8013c14:	464b      	mov	r3, r9
 8013c16:	9301      	str	r3, [sp, #4]
 8013c18:	2300      	movs	r3, #0
 8013c1a:	4642      	mov	r2, r8
 8013c1c:	0039      	movs	r1, r7
 8013c1e:	9300      	str	r3, [sp, #0]
 8013c20:	0028      	movs	r0, r5
 8013c22:	465b      	mov	r3, fp
 8013c24:	f7ff fe3a 	bl	801389c <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8013c28:	2202      	movs	r2, #2
 8013c2a:	5ea3      	ldrsh	r3, [r4, r2]
 8013c2c:	9a02      	ldr	r2, [sp, #8]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 8013c2e:	0001      	movs	r1, r0
 8013c30:	1836      	adds	r6, r6, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8013c32:	1898      	adds	r0, r3, r2
 8013c34:	2280      	movs	r2, #128	; 0x80
 8013c36:	0212      	lsls	r2, r2, #8
 8013c38:	4290      	cmp	r0, r2
 8013c3a:	d229      	bcs.n	8013c90 <lv_txt_get_size+0xe0>
            size_res->y += line_space;
 8013c3c:	9a03      	ldr	r2, [sp, #12]
 8013c3e:	4694      	mov	ip, r2
 8013c40:	4463      	add	r3, ip
 8013c42:	8063      	strh	r3, [r4, #2]
    if(txt[0] == '\0') return 0;
 8013c44:	782b      	ldrb	r3, [r5, #0]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d029      	beq.n	8013c9e <lv_txt_get_size+0xee>
 8013c4a:	464b      	mov	r3, r9
 8013c4c:	003a      	movs	r2, r7
 8013c4e:	9300      	str	r3, [sp, #0]
 8013c50:	0028      	movs	r0, r5
 8013c52:	4643      	mov	r3, r8
 8013c54:	f7ff fd76 	bl	8013744 <lv_txt_get_width.part.0>
        size_res->x = LV_MAX(act_line_length, size_res->x);
 8013c58:	8823      	ldrh	r3, [r4, #0]
 8013c5a:	1c1a      	adds	r2, r3, #0
 8013c5c:	b21b      	sxth	r3, r3
 8013c5e:	4283      	cmp	r3, r0
 8013c60:	da00      	bge.n	8013c64 <lv_txt_get_size+0xb4>
 8013c62:	1c02      	adds	r2, r0, #0
    while(text[line_start] != '\0') {
 8013c64:	4653      	mov	r3, sl
        size_res->x = LV_MAX(act_line_length, size_res->x);
 8013c66:	8022      	strh	r2, [r4, #0]
    while(text[line_start] != '\0') {
 8013c68:	199b      	adds	r3, r3, r6
 8013c6a:	781a      	ldrb	r2, [r3, #0]
 8013c6c:	001d      	movs	r5, r3
 8013c6e:	2a00      	cmp	r2, #0
 8013c70:	d1d0      	bne.n	8013c14 <lv_txt_get_size+0x64>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8013c72:	2e00      	cmp	r6, #0
 8013c74:	d005      	beq.n	8013c82 <lv_txt_get_size+0xd2>
 8013c76:	3b01      	subs	r3, #1
 8013c78:	781b      	ldrb	r3, [r3, #0]
 8013c7a:	2b0a      	cmp	r3, #10
 8013c7c:	d025      	beq.n	8013cca <lv_txt_get_size+0x11a>
 8013c7e:	2b0d      	cmp	r3, #13
 8013c80:	d023      	beq.n	8013cca <lv_txt_get_size+0x11a>
    if(size_res->y == 0)
 8013c82:	2202      	movs	r2, #2
 8013c84:	5ea3      	ldrsh	r3, [r4, r2]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d01c      	beq.n	8013cc4 <lv_txt_get_size+0x114>
        size_res->y -= line_space;
 8013c8a:	9a05      	ldr	r2, [sp, #20]
 8013c8c:	1a9b      	subs	r3, r3, r2
 8013c8e:	8063      	strh	r3, [r4, #2]
}
 8013c90:	b007      	add	sp, #28
 8013c92:	bcf0      	pop	{r4, r5, r6, r7}
 8013c94:	46bb      	mov	fp, r7
 8013c96:	46b2      	mov	sl, r6
 8013c98:	46a9      	mov	r9, r5
 8013c9a:	46a0      	mov	r8, r4
 8013c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        size_res->x = LV_MAX(act_line_length, size_res->x);
 8013c9e:	2100      	movs	r1, #0
 8013ca0:	5e63      	ldrsh	r3, [r4, r1]
 8013ca2:	8822      	ldrh	r2, [r4, #0]
 8013ca4:	43db      	mvns	r3, r3
 8013ca6:	17db      	asrs	r3, r3, #31
 8013ca8:	4013      	ands	r3, r2
 8013caa:	8023      	strh	r3, [r4, #0]
    while(text[line_start] != '\0') {
 8013cac:	4653      	mov	r3, sl
 8013cae:	199d      	adds	r5, r3, r6
 8013cb0:	782a      	ldrb	r2, [r5, #0]
 8013cb2:	002b      	movs	r3, r5
 8013cb4:	2a00      	cmp	r2, #0
 8013cb6:	d1ad      	bne.n	8013c14 <lv_txt_get_size+0x64>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8013cb8:	2e00      	cmp	r6, #0
 8013cba:	d1dc      	bne.n	8013c76 <lv_txt_get_size+0xc6>
 8013cbc:	e7e1      	b.n	8013c82 <lv_txt_get_size+0xd2>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8013cbe:	4b06      	ldr	r3, [pc, #24]	; (8013cd8 <lv_txt_get_size+0x128>)
 8013cc0:	469b      	mov	fp, r3
 8013cc2:	e795      	b.n	8013bf0 <lv_txt_get_size+0x40>
        size_res->y = letter_height;
 8013cc4:	9b04      	ldr	r3, [sp, #16]
 8013cc6:	8063      	strh	r3, [r4, #2]
 8013cc8:	e7e2      	b.n	8013c90 <lv_txt_get_size+0xe0>
        size_res->y += letter_height + line_space;
 8013cca:	9a03      	ldr	r2, [sp, #12]
 8013ccc:	8863      	ldrh	r3, [r4, #2]
 8013cce:	4694      	mov	ip, r2
 8013cd0:	4463      	add	r3, ip
 8013cd2:	b21b      	sxth	r3, r3
 8013cd4:	e7d7      	b.n	8013c86 <lv_txt_get_size+0xd6>
 8013cd6:	46c0      	nop			; (mov r8, r8)
 8013cd8:	00001fff 	.word	0x00001fff

08013cdc <lv_txt_get_width>:
{
 8013cdc:	b530      	push	{r4, r5, lr}
 8013cde:	b083      	sub	sp, #12
 8013ce0:	ac06      	add	r4, sp, #24
 8013ce2:	7824      	ldrb	r4, [r4, #0]
    if(txt == NULL) return 0;
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	d008      	beq.n	8013cfa <lv_txt_get_width+0x1e>
    if(font == NULL) return 0;
 8013ce8:	2a00      	cmp	r2, #0
 8013cea:	d006      	beq.n	8013cfa <lv_txt_get_width+0x1e>
    if(txt[0] == '\0') return 0;
 8013cec:	7805      	ldrb	r5, [r0, #0]
 8013cee:	2d00      	cmp	r5, #0
 8013cf0:	d003      	beq.n	8013cfa <lv_txt_get_width+0x1e>
 8013cf2:	9400      	str	r4, [sp, #0]
 8013cf4:	f7ff fd26 	bl	8013744 <lv_txt_get_width.part.0>
 8013cf8:	e000      	b.n	8013cfc <lv_txt_get_width+0x20>
    if(txt == NULL) return 0;
 8013cfa:	2000      	movs	r0, #0
}
 8013cfc:	b003      	add	sp, #12
 8013cfe:	bd30      	pop	{r4, r5, pc}

08013d00 <_lv_txt_is_cmd>:
{
 8013d00:	0003      	movs	r3, r0
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 8013d02:	7802      	ldrb	r2, [r0, #0]
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8013d04:	2923      	cmp	r1, #35	; 0x23
 8013d06:	d003      	beq.n	8013d10 <_lv_txt_is_cmd+0x10>
    bool ret = false;
 8013d08:	2000      	movs	r0, #0
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8013d0a:	2a01      	cmp	r2, #1
 8013d0c:	d00e      	beq.n	8013d2c <_lv_txt_is_cmd+0x2c>
}
 8013d0e:	4770      	bx	lr
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 8013d10:	2a00      	cmp	r2, #0
 8013d12:	d007      	beq.n	8013d24 <_lv_txt_is_cmd+0x24>
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 8013d14:	2a01      	cmp	r2, #1
 8013d16:	d00f      	beq.n	8013d38 <_lv_txt_is_cmd+0x38>
    bool ret = false;
 8013d18:	2000      	movs	r0, #0
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 8013d1a:	2a02      	cmp	r2, #2
 8013d1c:	d1f7      	bne.n	8013d0e <_lv_txt_is_cmd+0xe>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8013d1e:	7018      	strb	r0, [r3, #0]
            ret    = true;
 8013d20:	3001      	adds	r0, #1
 8013d22:	e7f4      	b.n	8013d0e <_lv_txt_is_cmd+0xe>
            *state = LV_TEXT_CMD_STATE_PAR;
 8013d24:	3201      	adds	r2, #1
 8013d26:	7002      	strb	r2, [r0, #0]
        ret = true;
 8013d28:	2001      	movs	r0, #1
 8013d2a:	e7f0      	b.n	8013d0e <_lv_txt_is_cmd+0xe>
        if(c == ' ') {
 8013d2c:	2920      	cmp	r1, #32
 8013d2e:	d107      	bne.n	8013d40 <_lv_txt_is_cmd+0x40>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8013d30:	3201      	adds	r2, #1
 8013d32:	701a      	strb	r2, [r3, #0]
        ret = true;
 8013d34:	3001      	adds	r0, #1
 8013d36:	e7ea      	b.n	8013d0e <_lv_txt_is_cmd+0xe>
            *state = LV_TEXT_CMD_STATE_WAIT;
 8013d38:	2200      	movs	r2, #0
 8013d3a:	7002      	strb	r2, [r0, #0]
    bool ret = false;
 8013d3c:	2000      	movs	r0, #0
 8013d3e:	e7e6      	b.n	8013d0e <_lv_txt_is_cmd+0xe>
        ret = true;
 8013d40:	2001      	movs	r0, #1
 8013d42:	e7e4      	b.n	8013d0e <_lv_txt_is_cmd+0xe>

08013d44 <_lv_txt_encoded_letter_next_2>:
{
 8013d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d46:	46c6      	mov	lr, r8
 8013d48:	001d      	movs	r5, r3
    *letter = _lv_txt_encoded_next(txt, ofs);
 8013d4a:	4b0b      	ldr	r3, [pc, #44]	; (8013d78 <_lv_txt_encoded_letter_next_2+0x34>)
{
 8013d4c:	000f      	movs	r7, r1
    *letter = _lv_txt_encoded_next(txt, ofs);
 8013d4e:	4698      	mov	r8, r3
 8013d50:	0029      	movs	r1, r5
{
 8013d52:	b500      	push	{lr}
    *letter = _lv_txt_encoded_next(txt, ofs);
 8013d54:	681b      	ldr	r3, [r3, #0]
{
 8013d56:	0004      	movs	r4, r0
 8013d58:	0016      	movs	r6, r2
    *letter = _lv_txt_encoded_next(txt, ofs);
 8013d5a:	4798      	blx	r3
 8013d5c:	6038      	str	r0, [r7, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	d005      	beq.n	8013d6e <_lv_txt_encoded_letter_next_2+0x2a>
 8013d62:	4643      	mov	r3, r8
 8013d64:	6828      	ldr	r0, [r5, #0]
 8013d66:	2100      	movs	r1, #0
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	1820      	adds	r0, r4, r0
 8013d6c:	4798      	blx	r3
 8013d6e:	6030      	str	r0, [r6, #0]
}
 8013d70:	bc80      	pop	{r7}
 8013d72:	46b8      	mov	r8, r7
 8013d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d76:	46c0      	nop			; (mov r8, r8)
 8013d78:	20000018 	.word	0x20000018

08013d7c <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8013d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d7e:	4657      	mov	r7, sl
 8013d80:	464e      	mov	r6, r9
 8013d82:	4645      	mov	r5, r8
 8013d84:	46de      	mov	lr, fp
 8013d86:	b5e0      	push	{r5, r6, r7, lr}
 8013d88:	4698      	mov	r8, r3
 8013d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d8c:	4681      	mov	r9, r0
 8013d8e:	000f      	movs	r7, r1
 8013d90:	1e14      	subs	r4, r2, #0
 8013d92:	469a      	mov	sl, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8013d94:	d014      	beq.n	8013dc0 <_lv_utils_bsearch+0x44>
 8013d96:	2301      	movs	r3, #1
 8013d98:	469b      	mov	fp, r3
 8013d9a:	e005      	b.n	8013da8 <_lv_utils_bsearch+0x2c>
        middle += (n / 2) * size;
        if((c = (*cmp)(key, middle)) > 0) {
            n    = (n / 2) - ((n & 1) == 0);
 8013d9c:	465b      	mov	r3, fp
            base = (middle += size);
 8013d9e:	4445      	add	r5, r8
 8013da0:	43a3      	bics	r3, r4
 8013da2:	002f      	movs	r7, r5
            n    = (n / 2) - ((n & 1) == 0);
 8013da4:	1af4      	subs	r4, r6, r3
    for(middle = base; n != 0;) {
 8013da6:	d00b      	beq.n	8013dc0 <_lv_utils_bsearch+0x44>
        middle += (n / 2) * size;
 8013da8:	4645      	mov	r5, r8
 8013daa:	0866      	lsrs	r6, r4, #1
 8013dac:	4375      	muls	r5, r6
 8013dae:	197d      	adds	r5, r7, r5
        if((c = (*cmp)(key, middle)) > 0) {
 8013db0:	0029      	movs	r1, r5
 8013db2:	4648      	mov	r0, r9
 8013db4:	47d0      	blx	sl
 8013db6:	2800      	cmp	r0, #0
 8013db8:	dcf0      	bgt.n	8013d9c <_lv_utils_bsearch+0x20>
        }
        else if(c < 0) {
 8013dba:	d002      	beq.n	8013dc2 <_lv_utils_bsearch+0x46>
            n /= 2;
 8013dbc:	1e34      	subs	r4, r6, #0
    for(middle = base; n != 0;) {
 8013dbe:	d1f3      	bne.n	8013da8 <_lv_utils_bsearch+0x2c>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 8013dc0:	2500      	movs	r5, #0
}
 8013dc2:	0028      	movs	r0, r5
 8013dc4:	bcf0      	pop	{r4, r5, r6, r7}
 8013dc6:	46bb      	mov	fp, r7
 8013dc8:	46b2      	mov	sl, r6
 8013dca:	46a9      	mov	r9, r5
 8013dcc:	46a0      	mov	r8, r4
 8013dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013dd0 <lv_btn_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_btn_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8013dd0:	b510      	push	{r4, lr}
 8013dd2:	000c      	movs	r4, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8013dd4:	0020      	movs	r0, r4
 8013dd6:	2110      	movs	r1, #16
 8013dd8:	f7f1 f8de 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8013ddc:	2180      	movs	r1, #128	; 0x80
 8013dde:	0020      	movs	r0, r4
 8013de0:	00c9      	lsls	r1, r1, #3
 8013de2:	f7f1 f89d 	bl	8004f20 <lv_obj_add_flag>

    LV_TRACE_OBJ_CREATE("finished");
}
 8013de6:	bd10      	pop	{r4, pc}

08013de8 <lv_btn_create>:
{
 8013de8:	b510      	push	{r4, lr}
 8013dea:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8013dec:	4803      	ldr	r0, [pc, #12]	; (8013dfc <lv_btn_create+0x14>)
 8013dee:	f7f1 f9a5 	bl	800513c <lv_obj_class_create_obj>
 8013df2:	0004      	movs	r4, r0
    lv_obj_class_init_obj(obj);
 8013df4:	f7f1 fa1a 	bl	800522c <lv_obj_class_init_obj>
}
 8013df8:	0020      	movs	r0, r4
 8013dfa:	bd10      	pop	{r4, pc}
 8013dfc:	0801be88 	.word	0x0801be88

08013e00 <lv_dropdownlist_destructor>:
{
    LV_UNUSED(class_p);
    lv_dropdown_list_t * list = (lv_dropdown_list_t *)list_obj;
    lv_obj_t * dropdown_obj = list->dropdown;
    lv_dropdown_t * dropdown = (lv_dropdown_t *)dropdown_obj;
    dropdown->list = NULL;
 8013e00:	2200      	movs	r2, #0
 8013e02:	6a0b      	ldr	r3, [r1, #32]
 8013e04:	621a      	str	r2, [r3, #32]
}
 8013e06:	4770      	bx	lr

08013e08 <position_to_selected>:
/**
 * Set the position of list when it is closed to show the selected item
 * @param ddlist pointer to a drop down list
 */
static void position_to_selected(lv_obj_t * dropdown_obj)
{
 8013e08:	b570      	push	{r4, r5, r6, lr}
 8013e0a:	0004      	movs	r4, r0
}

static lv_obj_t * get_label(const lv_obj_t * obj)
{
    lv_dropdown_t * dropdown = (lv_dropdown_t *)obj;
    if(dropdown->list == NULL) return NULL;
 8013e0c:	6a00      	ldr	r0, [r0, #32]
 8013e0e:	2800      	cmp	r0, #0
 8013e10:	d00c      	beq.n	8013e2c <position_to_selected+0x24>

    return lv_obj_get_child(dropdown->list, 0);
 8013e12:	2100      	movs	r1, #0
 8013e14:	f7f7 f89e 	bl	800af54 <lv_obj_get_child>
 8013e18:	1e05      	subs	r5, r0, #0
    if(label == NULL) return;
 8013e1a:	d007      	beq.n	8013e2c <position_to_selected+0x24>
    if(lv_obj_get_height(label) <= lv_obj_get_content_height(dropdown_obj)) return;
 8013e1c:	f7f1 fffa 	bl	8005e14 <lv_obj_get_height>
 8013e20:	0006      	movs	r6, r0
 8013e22:	0020      	movs	r0, r4
 8013e24:	f7f2 f81c 	bl	8005e60 <lv_obj_get_content_height>
 8013e28:	4286      	cmp	r6, r0
 8013e2a:	dc00      	bgt.n	8013e2e <position_to_selected+0x26>
}
 8013e2c:	bd70      	pop	{r4, r5, r6, pc}
    return (lv_opa_t)v.num;
}

static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8013e2e:	2257      	movs	r2, #87	; 0x57
 8013e30:	2100      	movs	r1, #0
 8013e32:	0028      	movs	r0, r5
 8013e34:	f7f5 fc5c 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8013e38:	2259      	movs	r2, #89	; 0x59
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 8013e3a:	2308      	movs	r3, #8
 8013e3c:	5ec6      	ldrsh	r6, [r0, r3]
 8013e3e:	2100      	movs	r1, #0
 8013e40:	0028      	movs	r0, r5
 8013e42:	f7f5 fc55 	bl	80096f0 <lv_obj_get_style_prop>
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 8013e46:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    lv_coord_t unit_h = font_h + line_space;
 8013e48:	1836      	adds	r6, r6, r0
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 8013e4a:	4371      	muls	r1, r6
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 8013e4c:	6a20      	ldr	r0, [r4, #32]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	b209      	sxth	r1, r1
 8013e52:	f7f5 f851 	bl	8008ef8 <lv_obj_scroll_to_y>
    lv_obj_invalidate(dropdown->list);
 8013e56:	6a20      	ldr	r0, [r4, #32]
 8013e58:	f7f2 fb72 	bl	8006540 <lv_obj_invalidate>
 8013e5c:	e7e6      	b.n	8013e2c <position_to_selected+0x24>
 8013e5e:	46c0      	nop			; (mov r8, r8)

08013e60 <draw_box>:
{
 8013e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e62:	46de      	mov	lr, fp
 8013e64:	4657      	mov	r7, sl
 8013e66:	464e      	mov	r6, r9
 8013e68:	4645      	mov	r5, r8
 8013e6a:	4693      	mov	fp, r2
 8013e6c:	b5e0      	push	{r5, r6, r7, lr}
    if(id == LV_DROPDOWN_PR_NONE) return;
 8013e6e:	4a2f      	ldr	r2, [pc, #188]	; (8013f2c <draw_box+0xcc>)
{
 8013e70:	0006      	movs	r6, r0
 8013e72:	000f      	movs	r7, r1
 8013e74:	b091      	sub	sp, #68	; 0x44
    if(id == LV_DROPDOWN_PR_NONE) return;
 8013e76:	4593      	cmp	fp, r2
 8013e78:	d04f      	beq.n	8013f1a <draw_box+0xba>
    lv_obj_t * list_obj = dropdown->list;
 8013e7a:	6a04      	ldr	r4, [r0, #32]
    lv_state_t state_ori = list_obj->state;
 8013e7c:	8ba2      	ldrh	r2, [r4, #28]
 8013e7e:	4690      	mov	r8, r2
    if(state != list_obj->state) {
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d004      	beq.n	8013e8e <draw_box+0x2e>
        list_obj->skip_trans = 1;
 8013e84:	2204      	movs	r2, #4
        list_obj->state = state;
 8013e86:	83a3      	strh	r3, [r4, #28]
        list_obj->skip_trans = 1;
 8013e88:	7fa3      	ldrb	r3, [r4, #30]
 8013e8a:	4313      	orrs	r3, r2
 8013e8c:	77a3      	strb	r3, [r4, #30]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8013e8e:	2180      	movs	r1, #128	; 0x80
 8013e90:	2257      	movs	r2, #87	; 0x57
 8013e92:	02c9      	lsls	r1, r1, #11
 8013e94:	0020      	movs	r0, r4
 8013e96:	f7f5 fc2b 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8013e9a:	2180      	movs	r1, #128	; 0x80
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8013e9c:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8013e9e:	2259      	movs	r2, #89	; 0x59
 8013ea0:	0020      	movs	r0, r4
 8013ea2:	02c9      	lsls	r1, r1, #11
 8013ea4:	f7f5 fc24 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8013ea8:	b203      	sxth	r3, r0
 8013eaa:	469a      	mov	sl, r3
 8013eac:	464b      	mov	r3, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8013eae:	0005      	movs	r5, r0
 8013eb0:	2208      	movs	r2, #8
 8013eb2:	5e9b      	ldrsh	r3, [r3, r2]
    if(dropdown->list == NULL) return NULL;
 8013eb4:	6a30      	ldr	r0, [r6, #32]
 8013eb6:	4699      	mov	r9, r3
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	d035      	beq.n	8013f28 <draw_box+0xc8>
    return lv_obj_get_child(dropdown->list, 0);
 8013ebc:	2100      	movs	r1, #0
 8013ebe:	f7f7 f849 	bl	800af54 <lv_obj_get_child>
    rect_area.y1 += id * (font_h + line_space);
 8013ec2:	464a      	mov	r2, r9
 8013ec4:	465b      	mov	r3, fp
 8013ec6:	4452      	add	r2, sl
 8013ec8:	435a      	muls	r2, r3
    rect_area.y1 -= line_space / 2;
 8013eca:	4653      	mov	r3, sl
 8013ecc:	0fdb      	lsrs	r3, r3, #31
 8013ece:	4453      	add	r3, sl
 8013ed0:	105b      	asrs	r3, r3, #1
 8013ed2:	1ad3      	subs	r3, r2, r3
 8013ed4:	8a42      	ldrh	r2, [r0, #18]
    rect_area.x1 = dropdown->list->coords.x1;
 8013ed6:	4669      	mov	r1, sp
    rect_area.y1 -= line_space / 2;
 8013ed8:	189b      	adds	r3, r3, r2
 8013eda:	466a      	mov	r2, sp
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 8013edc:	3d01      	subs	r5, #1
    rect_area.y1 -= line_space / 2;
 8013ede:	b29b      	uxth	r3, r3
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 8013ee0:	444d      	add	r5, r9
    rect_area.y1 -= line_space / 2;
 8013ee2:	8053      	strh	r3, [r2, #2]
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 8013ee4:	195b      	adds	r3, r3, r5
 8013ee6:	80d3      	strh	r3, [r2, #6]
    rect_area.x1 = dropdown->list->coords.x1;
 8013ee8:	6a33      	ldr	r3, [r6, #32]
    lv_draw_rect_dsc_init(&sel_rect);
 8013eea:	a802      	add	r0, sp, #8
    rect_area.x1 = dropdown->list->coords.x1;
 8013eec:	8a1a      	ldrh	r2, [r3, #16]
 8013eee:	800a      	strh	r2, [r1, #0]
    rect_area.x2 = dropdown->list->coords.x2;
 8013ef0:	8a9b      	ldrh	r3, [r3, #20]
 8013ef2:	808b      	strh	r3, [r1, #4]
    lv_draw_rect_dsc_init(&sel_rect);
 8013ef4:	f7f9 f85e 	bl	800cfb4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(list_obj,  LV_PART_SELECTED, &sel_rect);
 8013ef8:	2180      	movs	r1, #128	; 0x80
 8013efa:	0020      	movs	r0, r4
 8013efc:	aa02      	add	r2, sp, #8
 8013efe:	02c9      	lsls	r1, r1, #11
 8013f00:	f7f1 fa30 	bl	8005364 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &sel_rect, &rect_area);
 8013f04:	466a      	mov	r2, sp
 8013f06:	0038      	movs	r0, r7
 8013f08:	a902      	add	r1, sp, #8
 8013f0a:	f7f9 f879 	bl	800d000 <lv_draw_rect>
    list_obj->state = state_ori;
 8013f0e:	4643      	mov	r3, r8
    list_obj->skip_trans = 0;
 8013f10:	2204      	movs	r2, #4
    list_obj->state = state_ori;
 8013f12:	83a3      	strh	r3, [r4, #28]
    list_obj->skip_trans = 0;
 8013f14:	7fa3      	ldrb	r3, [r4, #30]
 8013f16:	4393      	bics	r3, r2
 8013f18:	77a3      	strb	r3, [r4, #30]
}
 8013f1a:	b011      	add	sp, #68	; 0x44
 8013f1c:	bcf0      	pop	{r4, r5, r6, r7}
 8013f1e:	46bb      	mov	fp, r7
 8013f20:	46b2      	mov	sl, r6
 8013f22:	46a9      	mov	r9, r5
 8013f24:	46a0      	mov	r8, r4
 8013f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rect_area.y1 = label->coords.y1;
 8013f28:	8a43      	ldrh	r3, [r0, #18]
 8013f2a:	deff      	udf	#255	; 0xff
 8013f2c:	0000ffff 	.word	0x0000ffff

08013f30 <draw_box_label>:
{
 8013f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f32:	46c6      	mov	lr, r8
 8013f34:	4690      	mov	r8, r2
 8013f36:	b500      	push	{lr}
    if(id == LV_DROPDOWN_PR_NONE) return;
 8013f38:	4a32      	ldr	r2, [pc, #200]	; (8014004 <draw_box_label+0xd4>)
{
 8013f3a:	0006      	movs	r6, r0
 8013f3c:	000d      	movs	r5, r1
 8013f3e:	b090      	sub	sp, #64	; 0x40
    if(id == LV_DROPDOWN_PR_NONE) return;
 8013f40:	4590      	cmp	r8, r2
 8013f42:	d047      	beq.n	8013fd4 <draw_box_label+0xa4>
    lv_obj_t * list_obj = dropdown->list;
 8013f44:	6a04      	ldr	r4, [r0, #32]
    lv_state_t state_orig = list_obj->state;
 8013f46:	8ba7      	ldrh	r7, [r4, #28]
    if(state != list_obj->state) {
 8013f48:	429f      	cmp	r7, r3
 8013f4a:	d004      	beq.n	8013f56 <draw_box_label+0x26>
        list_obj->skip_trans = 1;
 8013f4c:	2204      	movs	r2, #4
        list_obj->state = state;
 8013f4e:	83a3      	strh	r3, [r4, #28]
        list_obj->skip_trans = 1;
 8013f50:	7fa3      	ldrb	r3, [r4, #30]
 8013f52:	4313      	orrs	r3, r2
 8013f54:	77a3      	strb	r3, [r4, #30]
    lv_draw_label_dsc_init(&label_dsc);
 8013f56:	a808      	add	r0, sp, #32
 8013f58:	f7f8 fc02 	bl	800c760 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(list_obj, LV_PART_SELECTED, &label_dsc);
 8013f5c:	2180      	movs	r1, #128	; 0x80
 8013f5e:	0020      	movs	r0, r4
 8013f60:	aa08      	add	r2, sp, #32
 8013f62:	02c9      	lsls	r1, r1, #11
 8013f64:	f7f1 fae6 	bl	8005534 <lv_obj_init_draw_label_dsc>
 8013f68:	2180      	movs	r1, #128	; 0x80
 8013f6a:	2259      	movs	r2, #89	; 0x59
 8013f6c:	0020      	movs	r0, r4
 8013f6e:	02c9      	lsls	r1, r1, #11
 8013f70:	f7f5 fbbe 	bl	80096f0 <lv_obj_get_style_prop>
    label_dsc.line_space = lv_obj_get_style_text_line_space(list_obj,
 8013f74:	ab02      	add	r3, sp, #8
 8013f76:	8558      	strh	r0, [r3, #42]	; 0x2a
    if(dropdown->list == NULL) return NULL;
 8013f78:	6a30      	ldr	r0, [r6, #32]
 8013f7a:	2800      	cmp	r0, #0
 8013f7c:	d02a      	beq.n	8013fd4 <draw_box_label+0xa4>
    return lv_obj_get_child(dropdown->list, 0);
 8013f7e:	2100      	movs	r1, #0
 8013f80:	f7f6 ffe8 	bl	800af54 <lv_obj_get_child>
 8013f84:	1e06      	subs	r6, r0, #0
    if(label == NULL) return;
 8013f86:	d025      	beq.n	8013fd4 <draw_box_label+0xa4>
 8013f88:	9b08      	ldr	r3, [sp, #32]
 8013f8a:	9303      	str	r3, [sp, #12]
 8013f8c:	2008      	movs	r0, #8
 8013f8e:	5e18      	ldrsh	r0, [r3, r0]
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 8013f90:	ab02      	add	r3, sp, #8
 8013f92:	212a      	movs	r1, #42	; 0x2a
 8013f94:	5e59      	ldrsh	r1, [r3, r1]
 8013f96:	4643      	mov	r3, r8
 8013f98:	1842      	adds	r2, r0, r1
 8013f9a:	435a      	muls	r2, r3
    area_sel.y1 -= label_dsc.line_space / 2;
 8013f9c:	0fcb      	lsrs	r3, r1, #31
 8013f9e:	185b      	adds	r3, r3, r1
 8013fa0:	105b      	asrs	r3, r3, #1
 8013fa2:	1ad2      	subs	r2, r2, r3
 8013fa4:	8a73      	ldrh	r3, [r6, #18]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 8013fa6:	3901      	subs	r1, #1
    area_sel.y1 -= label_dsc.line_space / 2;
 8013fa8:	18d3      	adds	r3, r2, r3
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 8013faa:	1809      	adds	r1, r1, r0
    area_sel.y1 -= label_dsc.line_space / 2;
 8013fac:	aa04      	add	r2, sp, #16
 8013fae:	b29b      	uxth	r3, r3
 8013fb0:	8053      	strh	r3, [r2, #2]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 8013fb2:	185b      	adds	r3, r3, r1
 8013fb4:	80d3      	strh	r3, [r2, #6]
    area_sel.x1 = list_obj->coords.x1;
 8013fb6:	8a23      	ldrh	r3, [r4, #16]
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 8013fb8:	68a9      	ldr	r1, [r5, #8]
    area_sel.x1 = list_obj->coords.x1;
 8013fba:	8013      	strh	r3, [r2, #0]
    area_sel.x2 = list_obj->coords.x2;
 8013fbc:	8aa3      	ldrh	r3, [r4, #20]
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 8013fbe:	a806      	add	r0, sp, #24
    area_sel.x2 = list_obj->coords.x2;
 8013fc0:	8093      	strh	r3, [r2, #4]
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 8013fc2:	f7fd f9e3 	bl	801138c <_lv_area_intersect>
    if(area_ok) {
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	d108      	bne.n	8013fdc <draw_box_label+0xac>
    list_obj->skip_trans = 0;
 8013fca:	2204      	movs	r2, #4
 8013fcc:	7fa3      	ldrb	r3, [r4, #30]
    list_obj->state = state_orig;
 8013fce:	83a7      	strh	r7, [r4, #28]
    list_obj->skip_trans = 0;
 8013fd0:	4393      	bics	r3, r2
 8013fd2:	77a3      	strb	r3, [r4, #30]
}
 8013fd4:	b010      	add	sp, #64	; 0x40
 8013fd6:	bc80      	pop	{r7}
 8013fd8:	46b8      	mov	r8, r7
 8013fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8013fdc:	68ab      	ldr	r3, [r5, #8]
        lv_draw_label(draw_ctx, &label_dsc, &label->coords, lv_label_get_text(label), NULL);
 8013fde:	0030      	movs	r0, r6
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8013fe0:	4698      	mov	r8, r3
        draw_ctx->clip_area = &mask_sel;
 8013fe2:	ab06      	add	r3, sp, #24
 8013fe4:	60ab      	str	r3, [r5, #8]
        lv_draw_label(draw_ctx, &label_dsc, &label->coords, lv_label_get_text(label), NULL);
 8013fe6:	f002 f987 	bl	80162f8 <lv_label_get_text>
 8013fea:	2100      	movs	r1, #0
 8013fec:	0032      	movs	r2, r6
 8013fee:	0003      	movs	r3, r0
 8013ff0:	9100      	str	r1, [sp, #0]
 8013ff2:	0028      	movs	r0, r5
 8013ff4:	3210      	adds	r2, #16
 8013ff6:	a908      	add	r1, sp, #32
 8013ff8:	f7f8 fbca 	bl	800c790 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8013ffc:	4643      	mov	r3, r8
 8013ffe:	60ab      	str	r3, [r5, #8]
 8014000:	e7e3      	b.n	8013fca <draw_box_label+0x9a>
 8014002:	46c0      	nop			; (mov r8, r8)
 8014004:	0000ffff 	.word	0x0000ffff

08014008 <lv_dropdownlist_constructor>:
{
 8014008:	b510      	push	{r4, lr}
 801400a:	000c      	movs	r4, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801400c:	2180      	movs	r1, #128	; 0x80
 801400e:	0020      	movs	r0, r4
 8014010:	00c9      	lsls	r1, r1, #3
 8014012:	f7f0 ffc1 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 8014016:	0020      	movs	r0, r4
 8014018:	2104      	movs	r1, #4
 801401a:	f7f0 ffbd 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_IGNORE_LAYOUT);
 801401e:	2180      	movs	r1, #128	; 0x80
 8014020:	0020      	movs	r0, r4
 8014022:	0289      	lsls	r1, r1, #10
 8014024:	f7f0 ff7c 	bl	8004f20 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_HIDDEN);
 8014028:	2101      	movs	r1, #1
 801402a:	0020      	movs	r0, r4
 801402c:	f7f0 ff78 	bl	8004f20 <lv_obj_add_flag>
    lv_label_create(obj);
 8014030:	0020      	movs	r0, r4
 8014032:	f002 f8b3 	bl	801619c <lv_label_create>
}
 8014036:	bd10      	pop	{r4, pc}

08014038 <lv_dropdown_destructor>:
    if(dropdown->list) {
 8014038:	6a08      	ldr	r0, [r1, #32]
{
 801403a:	b570      	push	{r4, r5, r6, lr}
 801403c:	000c      	movs	r4, r1
    if(dropdown->list) {
 801403e:	2800      	cmp	r0, #0
 8014040:	d003      	beq.n	801404a <lv_dropdown_destructor+0x12>
        lv_obj_del(dropdown->list);
 8014042:	f7f6 fde3 	bl	800ac0c <lv_obj_del>
        dropdown->list = NULL;
 8014046:	2300      	movs	r3, #0
 8014048:	6223      	str	r3, [r4, #32]
    if(!dropdown->static_txt) {
 801404a:	2210      	movs	r2, #16
 801404c:	2338      	movs	r3, #56	; 0x38
 801404e:	0015      	movs	r5, r2
 8014050:	5ce3      	ldrb	r3, [r4, r3]
 8014052:	401d      	ands	r5, r3
 8014054:	421a      	tst	r2, r3
 8014056:	d000      	beq.n	801405a <lv_dropdown_destructor+0x22>
}
 8014058:	bd70      	pop	{r4, r5, r6, pc}
        lv_mem_free(dropdown->options);
 801405a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801405c:	f7fd ffc8 	bl	8011ff0 <lv_mem_free>
        dropdown->options = NULL;
 8014060:	62e5      	str	r5, [r4, #44]	; 0x2c
}
 8014062:	e7f9      	b.n	8014058 <lv_dropdown_destructor+0x20>

08014064 <lv_dropdown_constructor>:
{
 8014064:	b570      	push	{r4, r5, r6, lr}
    dropdown->list          = NULL;
 8014066:	2500      	movs	r5, #0
    dropdown->dir = LV_DIR_BOTTOM;
 8014068:	2238      	movs	r2, #56	; 0x38
    dropdown->symbol         = LV_SYMBOL_DOWN;
 801406a:	4b29      	ldr	r3, [pc, #164]	; (8014110 <lv_dropdown_constructor+0xac>)
    dropdown->list          = NULL;
 801406c:	620d      	str	r5, [r1, #32]
    dropdown->symbol         = LV_SYMBOL_DOWN;
 801406e:	628b      	str	r3, [r1, #40]	; 0x28
    dropdown->option_cnt      = 0;
 8014070:	4b28      	ldr	r3, [pc, #160]	; (8014114 <lv_dropdown_constructor+0xb0>)
    dropdown->text         = NULL;
 8014072:	624d      	str	r5, [r1, #36]	; 0x24
    dropdown->options     = NULL;
 8014074:	62cd      	str	r5, [r1, #44]	; 0x2c
    dropdown->option_cnt      = 0;
 8014076:	630d      	str	r5, [r1, #48]	; 0x30
 8014078:	634b      	str	r3, [r1, #52]	; 0x34
    dropdown->dir = LV_DIR_BOTTOM;
 801407a:	5c8b      	ldrb	r3, [r1, r2]
{
 801407c:	000c      	movs	r4, r1
    dropdown->dir = LV_DIR_BOTTOM;
 801407e:	213f      	movs	r1, #63	; 0x3f
 8014080:	438b      	bics	r3, r1
 8014082:	2138      	movs	r1, #56	; 0x38
 8014084:	430b      	orrs	r3, r1
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8014086:	2180      	movs	r1, #128	; 0x80
    dropdown->dir = LV_DIR_BOTTOM;
 8014088:	54a3      	strb	r3, [r4, r2]
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801408a:	00c9      	lsls	r1, r1, #3
 801408c:	0020      	movs	r0, r4
 801408e:	f7f0 ff47 	bl	8004f20 <lv_obj_add_flag>
    dropdown->option_cnt = 0;
 8014092:	2100      	movs	r1, #0
    for(i = 0; options[i] != '\0'; i++) {
 8014094:	2370      	movs	r3, #112	; 0x70
 8014096:	4a20      	ldr	r2, [pc, #128]	; (8014118 <lv_dropdown_constructor+0xb4>)
    dropdown->option_cnt = 0;
 8014098:	8625      	strh	r5, [r4, #48]	; 0x30
        if(options[i] == '\n') dropdown->option_cnt++;
 801409a:	2b0a      	cmp	r3, #10
 801409c:	d02e      	beq.n	80140fc <lv_dropdown_constructor+0x98>
    for(i = 0; options[i] != '\0'; i++) {
 801409e:	3201      	adds	r2, #1
 80140a0:	1e53      	subs	r3, r2, #1
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d1f8      	bne.n	801409a <lv_dropdown_constructor+0x36>
    dropdown->sel_opt_id      = 0;
 80140a8:	2300      	movs	r3, #0
 80140aa:	8663      	strh	r3, [r4, #50]	; 0x32
    dropdown->sel_opt_id_orig = 0;
 80140ac:	86a3      	strh	r3, [r4, #52]	; 0x34
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 80140ae:	3338      	adds	r3, #56	; 0x38
 80140b0:	5ce3      	ldrb	r3, [r4, r3]
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 80140b2:	3101      	adds	r1, #1
 80140b4:	8621      	strh	r1, [r4, #48]	; 0x30
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 80140b6:	06db      	lsls	r3, r3, #27
 80140b8:	d404      	bmi.n	80140c4 <lv_dropdown_constructor+0x60>
 80140ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80140bc:	2800      	cmp	r0, #0
 80140be:	d001      	beq.n	80140c4 <lv_dropdown_constructor+0x60>
        lv_mem_free(dropdown->options);
 80140c0:	f7fd ff96 	bl	8011ff0 <lv_mem_free>
    dropdown->static_txt = 1;
 80140c4:	2238      	movs	r2, #56	; 0x38
 80140c6:	2110      	movs	r1, #16
 80140c8:	5ca3      	ldrb	r3, [r4, r2]
    lv_obj_invalidate(obj);
 80140ca:	0020      	movs	r0, r4
    dropdown->static_txt = 1;
 80140cc:	430b      	orrs	r3, r1
 80140ce:	54a3      	strb	r3, [r4, r2]
    dropdown->options = (char *)options;
 80140d0:	4b12      	ldr	r3, [pc, #72]	; (801411c <lv_dropdown_constructor+0xb8>)
 80140d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    lv_obj_invalidate(obj);
 80140d4:	f7f2 fa34 	bl	8006540 <lv_obj_invalidate>
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 80140d8:	6a20      	ldr	r0, [r4, #32]
 80140da:	2800      	cmp	r0, #0
 80140dc:	d001      	beq.n	80140e2 <lv_dropdown_constructor+0x7e>
 80140de:	f7f2 fa2f 	bl	8006540 <lv_obj_invalidate>
    dropdown->list = lv_dropdown_list_create(lv_obj_get_screen(obj));
 80140e2:	0020      	movs	r0, r4
 80140e4:	f7f6 ff00 	bl	800aee8 <lv_obj_get_screen>
 80140e8:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdownlist_class, parent);
 80140ea:	480d      	ldr	r0, [pc, #52]	; (8014120 <lv_dropdown_constructor+0xbc>)
 80140ec:	f7f1 f826 	bl	800513c <lv_obj_class_create_obj>
 80140f0:	0005      	movs	r5, r0
    lv_obj_class_init_obj(obj);
 80140f2:	f7f1 f89b 	bl	800522c <lv_obj_class_init_obj>
    dropdown->list = lv_dropdown_list_create(lv_obj_get_screen(obj));
 80140f6:	6225      	str	r5, [r4, #32]
    list->dropdown = obj;
 80140f8:	622c      	str	r4, [r5, #32]
}
 80140fa:	bd70      	pop	{r4, r5, r6, pc}
        if(options[i] == '\n') dropdown->option_cnt++;
 80140fc:	3101      	adds	r1, #1
 80140fe:	b289      	uxth	r1, r1
    for(i = 0; options[i] != '\0'; i++) {
 8014100:	3201      	adds	r2, #1
        if(options[i] == '\n') dropdown->option_cnt++;
 8014102:	8621      	strh	r1, [r4, #48]	; 0x30
    for(i = 0; options[i] != '\0'; i++) {
 8014104:	1e53      	subs	r3, r2, #1
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d1c6      	bne.n	801409a <lv_dropdown_constructor+0x36>
 801410c:	e7cc      	b.n	80140a8 <lv_dropdown_constructor+0x44>
 801410e:	46c0      	nop			; (mov r8, r8)
 8014110:	0801bea0 	.word	0x0801bea0
 8014114:	ffff0000 	.word	0xffff0000
 8014118:	0801bea6 	.word	0x0801bea6
 801411c:	0801bea4 	.word	0x0801bea4
 8014120:	0801bed8 	.word	0x0801bed8

08014124 <lv_dropdown_list_event>:
{
 8014124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014126:	46ce      	mov	lr, r9
 8014128:	4647      	mov	r7, r8
 801412a:	b580      	push	{r7, lr}
    lv_event_code_t code = lv_event_get_code(e);
 801412c:	0008      	movs	r0, r1
{
 801412e:	b083      	sub	sp, #12
 8014130:	000c      	movs	r4, r1
    lv_event_code_t code = lv_event_get_code(e);
 8014132:	f7ed fe4f 	bl	8001dd4 <lv_event_get_code>
 8014136:	0005      	movs	r5, r0
    if(code != LV_EVENT_DRAW_POST) {
 8014138:	2818      	cmp	r0, #24
 801413a:	d01c      	beq.n	8014176 <lv_dropdown_list_event+0x52>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 801413c:	0021      	movs	r1, r4
 801413e:	489b      	ldr	r0, [pc, #620]	; (80143ac <lv_dropdown_list_event+0x288>)
 8014140:	f7ed fe2c 	bl	8001d9c <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8014144:	2801      	cmp	r0, #1
 8014146:	d004      	beq.n	8014152 <lv_dropdown_list_event+0x2e>
}
 8014148:	b003      	add	sp, #12
 801414a:	bcc0      	pop	{r6, r7}
 801414c:	46b9      	mov	r9, r7
 801414e:	46b0      	mov	r8, r6
 8014150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_obj_t * list = lv_event_get_target(e);
 8014152:	0020      	movs	r0, r4
 8014154:	f7ed fe3a 	bl	8001dcc <lv_event_get_target>
 8014158:	0004      	movs	r4, r0
    lv_obj_t * dropdown_obj = ((lv_dropdown_list_t *)list)->dropdown;
 801415a:	6a06      	ldr	r6, [r0, #32]
    if(code == LV_EVENT_RELEASED) {
 801415c:	2d08      	cmp	r5, #8
 801415e:	d047      	beq.n	80141f0 <lv_dropdown_list_event+0xcc>
    else if(code == LV_EVENT_PRESSED) {
 8014160:	2d01      	cmp	r5, #1
 8014162:	d100      	bne.n	8014166 <lv_dropdown_list_event+0x42>
 8014164:	e07a      	b.n	801425c <lv_dropdown_list_event+0x138>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8014166:	2d09      	cmp	r5, #9
 8014168:	d1ee      	bne.n	8014148 <lv_dropdown_list_event+0x24>
        dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 801416a:	2301      	movs	r3, #1
 801416c:	425b      	negs	r3, r3
 801416e:	86f3      	strh	r3, [r6, #54]	; 0x36
        lv_obj_invalidate(list);
 8014170:	f7f2 f9e6 	bl	8006540 <lv_obj_invalidate>
 8014174:	e7e8      	b.n	8014148 <lv_dropdown_list_event+0x24>
    lv_obj_t * list = lv_event_get_target(e);
 8014176:	0020      	movs	r0, r4
 8014178:	f7ed fe28 	bl	8001dcc <lv_event_get_target>
    lv_obj_t * list_obj = lv_event_get_target(e);
 801417c:	0020      	movs	r0, r4
 801417e:	f7ed fe25 	bl	8001dcc <lv_event_get_target>
    lv_obj_t * dropdown_obj = list->dropdown;
 8014182:	6a06      	ldr	r6, [r0, #32]
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8014184:	0020      	movs	r0, r4
 8014186:	f7ed fe87 	bl	8001e98 <lv_event_get_draw_ctx>
    has_common = _lv_area_intersect(&clip_area_core, draw_ctx->clip_area, &dropdown->list->coords);
 801418a:	6a32      	ldr	r2, [r6, #32]
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801418c:	0005      	movs	r5, r0
    has_common = _lv_area_intersect(&clip_area_core, draw_ctx->clip_area, &dropdown->list->coords);
 801418e:	6881      	ldr	r1, [r0, #8]
 8014190:	3210      	adds	r2, #16
 8014192:	4668      	mov	r0, sp
 8014194:	f7fd f8fa 	bl	801138c <_lv_area_intersect>
    if(has_common) {
 8014198:	2800      	cmp	r0, #0
 801419a:	d024      	beq.n	80141e6 <lv_dropdown_list_event+0xc2>
        draw_ctx->clip_area = &clip_area_core;
 801419c:	466b      	mov	r3, sp
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801419e:	68af      	ldr	r7, [r5, #8]
        draw_ctx->clip_area = &clip_area_core;
 80141a0:	60ab      	str	r3, [r5, #8]
        if(dropdown->selected_highlight) {
 80141a2:	2338      	movs	r3, #56	; 0x38
 80141a4:	5cf3      	ldrb	r3, [r6, r3]
            if(dropdown->pr_opt_id == dropdown->sel_opt_id) {
 80141a6:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
        if(dropdown->selected_highlight) {
 80141a8:	069b      	lsls	r3, r3, #26
 80141aa:	d400      	bmi.n	80141ae <lv_dropdown_list_event+0x8a>
 80141ac:	e0cc      	b.n	8014348 <lv_dropdown_list_event+0x224>
            if(dropdown->pr_opt_id == dropdown->sel_opt_id) {
 80141ae:	8e71      	ldrh	r1, [r6, #50]	; 0x32
 80141b0:	4291      	cmp	r1, r2
 80141b2:	d100      	bne.n	80141b6 <lv_dropdown_list_event+0x92>
 80141b4:	e0d5      	b.n	8014362 <lv_dropdown_list_event+0x23e>
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 80141b6:	2320      	movs	r3, #32
 80141b8:	0029      	movs	r1, r5
 80141ba:	0030      	movs	r0, r6
 80141bc:	f7ff fe50 	bl	8013e60 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 80141c0:	2320      	movs	r3, #32
 80141c2:	0029      	movs	r1, r5
 80141c4:	0030      	movs	r0, r6
 80141c6:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
 80141c8:	f7ff feb2 	bl	8013f30 <draw_box_label>
                draw_box(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 80141cc:	2301      	movs	r3, #1
 80141ce:	0029      	movs	r1, r5
 80141d0:	0030      	movs	r0, r6
 80141d2:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 80141d4:	f7ff fe44 	bl	8013e60 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 80141d8:	2301      	movs	r3, #1
 80141da:	0029      	movs	r1, r5
 80141dc:	0030      	movs	r0, r6
 80141de:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 80141e0:	f7ff fea6 	bl	8013f30 <draw_box_label>
        draw_ctx->clip_area = clip_area_ori;
 80141e4:	60af      	str	r7, [r5, #8]
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 80141e6:	0021      	movs	r1, r4
 80141e8:	4870      	ldr	r0, [pc, #448]	; (80143ac <lv_dropdown_list_event+0x288>)
 80141ea:	f7ed fdd7 	bl	8001d9c <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 80141ee:	e7ab      	b.n	8014148 <lv_dropdown_list_event+0x24>
        if(lv_indev_get_scroll_obj(lv_indev_get_act()) == NULL) {
 80141f0:	f7ee fad2 	bl	8002798 <lv_indev_get_act>
 80141f4:	f7ee fb80 	bl	80028f8 <lv_indev_get_scroll_obj>
 80141f8:	2800      	cmp	r0, #0
 80141fa:	d1a5      	bne.n	8014148 <lv_dropdown_list_event+0x24>
    lv_obj_t * dropdown_obj = list->dropdown;
 80141fc:	6a24      	ldr	r4, [r4, #32]
    lv_indev_t * indev = lv_indev_get_act();
 80141fe:	f7ee facb 	bl	8002798 <lv_indev_get_act>
 8014202:	0005      	movs	r5, r0
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 8014204:	f7ee face 	bl	80027a4 <lv_indev_get_type>
 8014208:	2804      	cmp	r0, #4
 801420a:	d100      	bne.n	801420e <lv_dropdown_list_event+0xea>
 801420c:	e0b9      	b.n	8014382 <lv_dropdown_list_event+0x25e>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801420e:	0028      	movs	r0, r5
 8014210:	f7ee fac8 	bl	80027a4 <lv_indev_get_type>
        lv_indev_get_point(indev, &p);
 8014214:	466e      	mov	r6, sp
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8014216:	2801      	cmp	r0, #1
 8014218:	d065      	beq.n	80142e6 <lv_dropdown_list_event+0x1c2>
 801421a:	0028      	movs	r0, r5
 801421c:	f7ee fac2 	bl	80027a4 <lv_indev_get_type>
 8014220:	2803      	cmp	r0, #3
 8014222:	d060      	beq.n	80142e6 <lv_dropdown_list_event+0x1c2>
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8014224:	2101      	movs	r1, #1
 8014226:	0020      	movs	r0, r4
 8014228:	f7f0 ff00 	bl	800502c <lv_obj_clear_state>
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 801422c:	2301      	movs	r3, #1
 801422e:	425b      	negs	r3, r3
 8014230:	86e3      	strh	r3, [r4, #54]	; 0x36
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8014232:	2101      	movs	r1, #1
 8014234:	6a20      	ldr	r0, [r4, #32]
 8014236:	f7f0 fe73 	bl	8004f20 <lv_obj_add_flag>
    lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 801423a:	2200      	movs	r2, #0
 801423c:	2120      	movs	r1, #32
 801423e:	0020      	movs	r0, r4
 8014240:	f7ed fd8c 	bl	8001d5c <lv_event_send>
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 8014244:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014246:	2b00      	cmp	r3, #0
 8014248:	d100      	bne.n	801424c <lv_dropdown_list_event+0x128>
 801424a:	e0aa      	b.n	80143a2 <lv_dropdown_list_event+0x27e>
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 801424c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 801424e:	0032      	movs	r2, r6
 8014250:	211c      	movs	r1, #28
 8014252:	0020      	movs	r0, r4
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 8014254:	9300      	str	r3, [sp, #0]
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 8014256:	f7ed fd81 	bl	8001d5c <lv_event_send>
    if(res != LV_RES_OK) return res;
 801425a:	e775      	b.n	8014148 <lv_dropdown_list_event+0x24>
    lv_indev_t * indev = lv_indev_get_act();
 801425c:	f7ee fa9c 	bl	8002798 <lv_indev_get_act>
 8014260:	1e05      	subs	r5, r0, #0
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 8014262:	d100      	bne.n	8014266 <lv_dropdown_list_event+0x142>
 8014264:	e770      	b.n	8014148 <lv_dropdown_list_event+0x24>
 8014266:	f7ee fa9d 	bl	80027a4 <lv_indev_get_type>
 801426a:	2801      	cmp	r0, #1
 801426c:	d005      	beq.n	801427a <lv_dropdown_list_event+0x156>
 801426e:	0028      	movs	r0, r5
 8014270:	f7ee fa98 	bl	80027a4 <lv_indev_get_type>
 8014274:	2803      	cmp	r0, #3
 8014276:	d000      	beq.n	801427a <lv_dropdown_list_event+0x156>
 8014278:	e766      	b.n	8014148 <lv_dropdown_list_event+0x24>
        lv_indev_get_point(indev, &p);
 801427a:	0028      	movs	r0, r5
 801427c:	4669      	mov	r1, sp
 801427e:	f7ee fb13 	bl	80028a8 <lv_indev_get_point>
        dropdown->pr_opt_id = get_id_on_point(dropdown_obj, p.y);
 8014282:	466b      	mov	r3, sp
    if(dropdown->list == NULL) return NULL;
 8014284:	6a30      	ldr	r0, [r6, #32]
        dropdown->pr_opt_id = get_id_on_point(dropdown_obj, p.y);
 8014286:	2202      	movs	r2, #2
 8014288:	5e9b      	ldrsh	r3, [r3, r2]
 801428a:	4698      	mov	r8, r3
    if(dropdown->list == NULL) return NULL;
 801428c:	2800      	cmp	r0, #0
 801428e:	d028      	beq.n	80142e2 <lv_dropdown_list_event+0x1be>
    return lv_obj_get_child(dropdown->list, 0);
 8014290:	2100      	movs	r1, #0
 8014292:	f7f6 fe5f 	bl	800af54 <lv_obj_get_child>
 8014296:	1e05      	subs	r5, r0, #0
    if(label == NULL) return 0;
 8014298:	d023      	beq.n	80142e2 <lv_dropdown_list_event+0x1be>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801429a:	2257      	movs	r2, #87	; 0x57
 801429c:	2100      	movs	r1, #0
    y -= label->coords.y1;
 801429e:	8a47      	ldrh	r7, [r0, #18]
 80142a0:	f7f5 fa26 	bl	80096f0 <lv_obj_get_style_prop>
 80142a4:	2208      	movs	r2, #8
 80142a6:	5e83      	ldrsh	r3, [r0, r2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80142a8:	2100      	movs	r1, #0
 80142aa:	2259      	movs	r2, #89	; 0x59
 80142ac:	0028      	movs	r0, r5
 80142ae:	4699      	mov	r9, r3
 80142b0:	f7f5 fa1e 	bl	80096f0 <lv_obj_get_style_prop>
 80142b4:	0001      	movs	r1, r0
    y += line_space / 2;
 80142b6:	b202      	sxth	r2, r0
 80142b8:	0fd3      	lsrs	r3, r2, #31
 80142ba:	189b      	adds	r3, r3, r2
 80142bc:	105b      	asrs	r3, r3, #1
 80142be:	4443      	add	r3, r8
 80142c0:	1bdb      	subs	r3, r3, r7
    lv_coord_t h = font_h + line_space;
 80142c2:	4449      	add	r1, r9
    uint16_t opt = y / h;
 80142c4:	b218      	sxth	r0, r3
 80142c6:	b209      	sxth	r1, r1
 80142c8:	f7eb ffb8 	bl	800023c <__divsi3>
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 80142cc:	8e33      	ldrh	r3, [r6, #48]	; 0x30
    uint16_t opt = y / h;
 80142ce:	b280      	uxth	r0, r0
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 80142d0:	4298      	cmp	r0, r3
 80142d2:	d301      	bcc.n	80142d8 <lv_dropdown_list_event+0x1b4>
 80142d4:	3b01      	subs	r3, #1
 80142d6:	b298      	uxth	r0, r3
        dropdown->pr_opt_id = get_id_on_point(dropdown_obj, p.y);
 80142d8:	86f0      	strh	r0, [r6, #54]	; 0x36
        lv_obj_invalidate(list_obj);
 80142da:	0020      	movs	r0, r4
 80142dc:	f7f2 f930 	bl	8006540 <lv_obj_invalidate>
 80142e0:	e732      	b.n	8014148 <lv_dropdown_list_event+0x24>
    if(label == NULL) return 0;
 80142e2:	2000      	movs	r0, #0
 80142e4:	e7f8      	b.n	80142d8 <lv_dropdown_list_event+0x1b4>
        lv_indev_get_point(indev, &p);
 80142e6:	0028      	movs	r0, r5
 80142e8:	0031      	movs	r1, r6
 80142ea:	f7ee fadd 	bl	80028a8 <lv_indev_get_point>
        dropdown->sel_opt_id     = get_id_on_point(dropdown_obj, p.y);
 80142ee:	2202      	movs	r2, #2
 80142f0:	5eb3      	ldrsh	r3, [r6, r2]
    if(dropdown->list == NULL) return NULL;
 80142f2:	6a20      	ldr	r0, [r4, #32]
        dropdown->sel_opt_id     = get_id_on_point(dropdown_obj, p.y);
 80142f4:	4698      	mov	r8, r3
    if(dropdown->list == NULL) return NULL;
 80142f6:	2800      	cmp	r0, #0
 80142f8:	d041      	beq.n	801437e <lv_dropdown_list_event+0x25a>
    return lv_obj_get_child(dropdown->list, 0);
 80142fa:	2100      	movs	r1, #0
 80142fc:	f7f6 fe2a 	bl	800af54 <lv_obj_get_child>
 8014300:	1e05      	subs	r5, r0, #0
    if(label == NULL) return 0;
 8014302:	d03c      	beq.n	801437e <lv_dropdown_list_event+0x25a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8014304:	2257      	movs	r2, #87	; 0x57
 8014306:	2100      	movs	r1, #0
    y -= label->coords.y1;
 8014308:	8a47      	ldrh	r7, [r0, #18]
 801430a:	f7f5 f9f1 	bl	80096f0 <lv_obj_get_style_prop>
 801430e:	2208      	movs	r2, #8
 8014310:	5e83      	ldrsh	r3, [r0, r2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8014312:	2100      	movs	r1, #0
 8014314:	2259      	movs	r2, #89	; 0x59
 8014316:	0028      	movs	r0, r5
 8014318:	4699      	mov	r9, r3
 801431a:	f7f5 f9e9 	bl	80096f0 <lv_obj_get_style_prop>
 801431e:	0001      	movs	r1, r0
    y += line_space / 2;
 8014320:	b202      	sxth	r2, r0
 8014322:	0fd3      	lsrs	r3, r2, #31
 8014324:	189b      	adds	r3, r3, r2
 8014326:	105b      	asrs	r3, r3, #1
 8014328:	4443      	add	r3, r8
 801432a:	1bdb      	subs	r3, r3, r7
    lv_coord_t h = font_h + line_space;
 801432c:	4449      	add	r1, r9
    uint16_t opt = y / h;
 801432e:	b218      	sxth	r0, r3
 8014330:	b209      	sxth	r1, r1
 8014332:	f7eb ff83 	bl	800023c <__divsi3>
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 8014336:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    uint16_t opt = y / h;
 8014338:	b280      	uxth	r0, r0
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 801433a:	4298      	cmp	r0, r3
 801433c:	d301      	bcc.n	8014342 <lv_dropdown_list_event+0x21e>
 801433e:	3b01      	subs	r3, #1
 8014340:	b298      	uxth	r0, r3
        dropdown->sel_opt_id     = get_id_on_point(dropdown_obj, p.y);
 8014342:	8660      	strh	r0, [r4, #50]	; 0x32
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8014344:	86a0      	strh	r0, [r4, #52]	; 0x34
 8014346:	e76d      	b.n	8014224 <lv_dropdown_list_event+0x100>
            draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8014348:	2320      	movs	r3, #32
 801434a:	0029      	movs	r1, r5
 801434c:	0030      	movs	r0, r6
 801434e:	f7ff fd87 	bl	8013e60 <draw_box>
            draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8014352:	2320      	movs	r3, #32
 8014354:	0029      	movs	r1, r5
 8014356:	0030      	movs	r0, r6
 8014358:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
 801435a:	f7ff fde9 	bl	8013f30 <draw_box_label>
        draw_ctx->clip_area = clip_area_ori;
 801435e:	60af      	str	r7, [r5, #8]
 8014360:	e741      	b.n	80141e6 <lv_dropdown_list_event+0xc2>
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 8014362:	000a      	movs	r2, r1
 8014364:	2321      	movs	r3, #33	; 0x21
 8014366:	0029      	movs	r1, r5
 8014368:	0030      	movs	r0, r6
 801436a:	f7ff fd79 	bl	8013e60 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 801436e:	2321      	movs	r3, #33	; 0x21
 8014370:	0029      	movs	r1, r5
 8014372:	0030      	movs	r0, r6
 8014374:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
 8014376:	f7ff fddb 	bl	8013f30 <draw_box_label>
        draw_ctx->clip_area = clip_area_ori;
 801437a:	60af      	str	r7, [r5, #8]
 801437c:	e733      	b.n	80141e6 <lv_dropdown_list_event+0xc2>
    if(label == NULL) return 0;
 801437e:	2000      	movs	r0, #0
 8014380:	e7df      	b.n	8014342 <lv_dropdown_list_event+0x21e>
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8014382:	8e63      	ldrh	r3, [r4, #50]	; 0x32
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 8014384:	0020      	movs	r0, r4
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8014386:	86a3      	strh	r3, [r4, #52]	; 0x34
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 8014388:	f7f0 fe70 	bl	800506c <lv_obj_get_group>
 801438c:	0006      	movs	r6, r0
        if(lv_group_get_editing(g)) {
 801438e:	f7ee f987 	bl	80026a0 <lv_group_get_editing>
 8014392:	2800      	cmp	r0, #0
 8014394:	d100      	bne.n	8014398 <lv_dropdown_list_event+0x274>
 8014396:	e73a      	b.n	801420e <lv_dropdown_list_event+0xea>
            lv_group_set_editing(g, false);
 8014398:	2100      	movs	r1, #0
 801439a:	0030      	movs	r0, r6
 801439c:	f7ee f922 	bl	80025e4 <lv_group_set_editing>
 80143a0:	e735      	b.n	801420e <lv_dropdown_list_event+0xea>
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 80143a2:	0020      	movs	r0, r4
 80143a4:	f7f2 f8cc 	bl	8006540 <lv_obj_invalidate>
 80143a8:	e750      	b.n	801424c <lv_dropdown_list_event+0x128>
 80143aa:	46c0      	nop			; (mov r8, r8)
 80143ac:	0801bed8 	.word	0x0801bed8

080143b0 <lv_dropdown_create>:
{
 80143b0:	b510      	push	{r4, lr}
 80143b2:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdown_class, parent);
 80143b4:	4803      	ldr	r0, [pc, #12]	; (80143c4 <lv_dropdown_create+0x14>)
 80143b6:	f7f0 fec1 	bl	800513c <lv_obj_class_create_obj>
 80143ba:	0004      	movs	r4, r0
    lv_obj_class_init_obj(obj);
 80143bc:	f7f0 ff36 	bl	800522c <lv_obj_class_init_obj>
}
 80143c0:	0020      	movs	r0, r4
 80143c2:	bd10      	pop	{r4, pc}
 80143c4:	0801bec0 	.word	0x0801bec0

080143c8 <lv_dropdown_set_options>:
{
 80143c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ca:	0005      	movs	r5, r0
 80143cc:	1e0e      	subs	r6, r1, #0
    LV_ASSERT_NULL(options);
 80143ce:	d038      	beq.n	8014442 <lv_dropdown_set_options+0x7a>
    dropdown->option_cnt = 0;
 80143d0:	2300      	movs	r3, #0
 80143d2:	8603      	strh	r3, [r0, #48]	; 0x30
    for(i = 0; options[i] != '\0'; i++) {
 80143d4:	780b      	ldrb	r3, [r1, #0]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d048      	beq.n	801446c <lv_dropdown_set_options+0xa4>
 80143da:	2400      	movs	r4, #0
 80143dc:	1c4a      	adds	r2, r1, #1
        if(options[i] == '\n') dropdown->option_cnt++;
 80143de:	2b0a      	cmp	r3, #10
 80143e0:	d031      	beq.n	8014446 <lv_dropdown_set_options+0x7e>
    for(i = 0; options[i] != '\0'; i++) {
 80143e2:	3201      	adds	r2, #1
 80143e4:	1e53      	subs	r3, r2, #1
 80143e6:	781b      	ldrb	r3, [r3, #0]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d1f8      	bne.n	80143de <lv_dropdown_set_options+0x16>
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 80143ec:	3401      	adds	r4, #1
 80143ee:	b2a4      	uxth	r4, r4
    dropdown->sel_opt_id      = 0;
 80143f0:	2300      	movs	r3, #0
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 80143f2:	862c      	strh	r4, [r5, #48]	; 0x30
    size_t len = strlen(options) + 1;
 80143f4:	0030      	movs	r0, r6
    dropdown->sel_opt_id      = 0;
 80143f6:	866b      	strh	r3, [r5, #50]	; 0x32
    dropdown->sel_opt_id_orig = 0;
 80143f8:	86ab      	strh	r3, [r5, #52]	; 0x34
    size_t len = strlen(options) + 1;
 80143fa:	f7eb fe8d 	bl	8000118 <strlen>
 80143fe:	1c44      	adds	r4, r0, #1
    if(dropdown->options != NULL && dropdown->static_txt == 0) {
 8014400:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8014402:	2800      	cmp	r0, #0
 8014404:	d006      	beq.n	8014414 <lv_dropdown_set_options+0x4c>
 8014406:	2210      	movs	r2, #16
 8014408:	2338      	movs	r3, #56	; 0x38
 801440a:	0017      	movs	r7, r2
 801440c:	5ceb      	ldrb	r3, [r5, r3]
 801440e:	401f      	ands	r7, r3
 8014410:	421a      	tst	r2, r3
 8014412:	d021      	beq.n	8014458 <lv_dropdown_set_options+0x90>
    dropdown->options = lv_mem_alloc(len);
 8014414:	0020      	movs	r0, r4
 8014416:	f7fd fdc9 	bl	8011fac <lv_mem_alloc>
 801441a:	62e8      	str	r0, [r5, #44]	; 0x2c
    LV_ASSERT_MALLOC(dropdown->options);
 801441c:	2800      	cmp	r0, #0
 801441e:	d011      	beq.n	8014444 <lv_dropdown_set_options+0x7c>
    strcpy(dropdown->options, options);
 8014420:	0031      	movs	r1, r6
 8014422:	f007 f913 	bl	801b64c <strcpy>
    dropdown->static_txt = 0;
 8014426:	2238      	movs	r2, #56	; 0x38
 8014428:	2110      	movs	r1, #16
 801442a:	5cab      	ldrb	r3, [r5, r2]
    lv_obj_invalidate(obj);
 801442c:	0028      	movs	r0, r5
    dropdown->static_txt = 0;
 801442e:	438b      	bics	r3, r1
 8014430:	54ab      	strb	r3, [r5, r2]
    lv_obj_invalidate(obj);
 8014432:	f7f2 f885 	bl	8006540 <lv_obj_invalidate>
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 8014436:	6a28      	ldr	r0, [r5, #32]
 8014438:	2800      	cmp	r0, #0
 801443a:	d001      	beq.n	8014440 <lv_dropdown_set_options+0x78>
 801443c:	f7f2 f880 	bl	8006540 <lv_obj_invalidate>
}
 8014440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(options);
 8014442:	e7fe      	b.n	8014442 <lv_dropdown_set_options+0x7a>
    LV_ASSERT_MALLOC(dropdown->options);
 8014444:	e7fe      	b.n	8014444 <lv_dropdown_set_options+0x7c>
        if(options[i] == '\n') dropdown->option_cnt++;
 8014446:	3401      	adds	r4, #1
 8014448:	b2a4      	uxth	r4, r4
    for(i = 0; options[i] != '\0'; i++) {
 801444a:	3201      	adds	r2, #1
        if(options[i] == '\n') dropdown->option_cnt++;
 801444c:	862c      	strh	r4, [r5, #48]	; 0x30
    for(i = 0; options[i] != '\0'; i++) {
 801444e:	1e53      	subs	r3, r2, #1
 8014450:	781b      	ldrb	r3, [r3, #0]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d1c3      	bne.n	80143de <lv_dropdown_set_options+0x16>
 8014456:	e7c9      	b.n	80143ec <lv_dropdown_set_options+0x24>
        lv_mem_free(dropdown->options);
 8014458:	f7fd fdca 	bl	8011ff0 <lv_mem_free>
    dropdown->options = lv_mem_alloc(len);
 801445c:	0020      	movs	r0, r4
        dropdown->options = NULL;
 801445e:	62ef      	str	r7, [r5, #44]	; 0x2c
    dropdown->options = lv_mem_alloc(len);
 8014460:	f7fd fda4 	bl	8011fac <lv_mem_alloc>
 8014464:	62e8      	str	r0, [r5, #44]	; 0x2c
    LV_ASSERT_MALLOC(dropdown->options);
 8014466:	2800      	cmp	r0, #0
 8014468:	d1da      	bne.n	8014420 <lv_dropdown_set_options+0x58>
 801446a:	e7eb      	b.n	8014444 <lv_dropdown_set_options+0x7c>
    for(i = 0; options[i] != '\0'; i++) {
 801446c:	2401      	movs	r4, #1
 801446e:	e7bf      	b.n	80143f0 <lv_dropdown_set_options+0x28>

08014470 <lv_dropdown_get_list>:
    return dropdown->list;
 8014470:	6a00      	ldr	r0, [r0, #32]
}
 8014472:	4770      	bx	lr

08014474 <lv_dropdown_open>:
{
 8014474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014476:	46ce      	mov	lr, r9
 8014478:	4647      	mov	r7, r8
 801447a:	0004      	movs	r4, r0
 801447c:	b580      	push	{r7, lr}
    lv_obj_add_state(dropdown_obj, LV_STATE_CHECKED);
 801447e:	2101      	movs	r1, #1
{
 8014480:	b083      	sub	sp, #12
    lv_obj_add_state(dropdown_obj, LV_STATE_CHECKED);
 8014482:	f7f0 fdcb 	bl	800501c <lv_obj_add_state>
    lv_obj_set_parent(dropdown->list, lv_obj_get_screen(dropdown_obj));
 8014486:	0020      	movs	r0, r4
 8014488:	6a25      	ldr	r5, [r4, #32]
 801448a:	f7f6 fd2d 	bl	800aee8 <lv_obj_get_screen>
 801448e:	0001      	movs	r1, r0
 8014490:	0028      	movs	r0, r5
 8014492:	f7f6 fc1d 	bl	800acd0 <lv_obj_set_parent>
    lv_obj_move_to_index(dropdown->list, -1);
 8014496:	2101      	movs	r1, #1
 8014498:	6a20      	ldr	r0, [r4, #32]
 801449a:	4249      	negs	r1, r1
 801449c:	f7f6 fcae 	bl	800adfc <lv_obj_move_to_index>
    lv_obj_clear_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 80144a0:	2101      	movs	r1, #1
 80144a2:	6a20      	ldr	r0, [r4, #32]
 80144a4:	f7f0 fd78 	bl	8004f98 <lv_obj_clear_flag>
    lv_event_send(dropdown_obj, LV_EVENT_READY, NULL);
 80144a8:	2200      	movs	r2, #0
 80144aa:	211f      	movs	r1, #31
 80144ac:	0020      	movs	r0, r4
 80144ae:	f7ed fc55 	bl	8001d5c <lv_event_send>
    if(dropdown->list == NULL) return NULL;
 80144b2:	6a27      	ldr	r7, [r4, #32]
 80144b4:	2f00      	cmp	r7, #0
 80144b6:	d004      	beq.n	80144c2 <lv_dropdown_open+0x4e>
    return lv_obj_get_child(dropdown->list, 0);
 80144b8:	0038      	movs	r0, r7
 80144ba:	2100      	movs	r1, #0
 80144bc:	f7f6 fd4a 	bl	800af54 <lv_obj_get_child>
 80144c0:	0007      	movs	r7, r0
    lv_label_set_text_static(label, dropdown->options);
 80144c2:	0038      	movs	r0, r7
 80144c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80144c6:	f001 fef5 	bl	80162b4 <lv_label_set_text_static>
    lv_obj_set_width(dropdown->list, LV_SIZE_CONTENT);
 80144ca:	498c      	ldr	r1, [pc, #560]	; (80146fc <lv_dropdown_open+0x288>)
 80144cc:	6a20      	ldr	r0, [r4, #32]
 80144ce:	f7f1 fb9b 	bl	8005c08 <lv_obj_set_width>
    lv_obj_update_layout(label);
 80144d2:	0038      	movs	r0, r7
 80144d4:	f7f3 f9f4 	bl	80078c0 <lv_obj_update_layout>
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 80144d8:	6a20      	ldr	r0, [r4, #32]
 80144da:	f7f1 fc93 	bl	8005e04 <lv_obj_get_width>
 80144de:	0005      	movs	r5, r0
 80144e0:	0020      	movs	r0, r4
 80144e2:	f7f1 fc8f 	bl	8005e04 <lv_obj_get_width>
 80144e6:	4285      	cmp	r5, r0
 80144e8:	dc07      	bgt.n	80144fa <lv_dropdown_open+0x86>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 80144ea:	2338      	movs	r3, #56	; 0x38
 80144ec:	5ce2      	ldrb	r2, [r4, r3]
 80144ee:	3b29      	subs	r3, #41	; 0x29
 80144f0:	4013      	ands	r3, r2
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 80144f2:	22fb      	movs	r2, #251	; 0xfb
 80144f4:	3b04      	subs	r3, #4
 80144f6:	4213      	tst	r3, r2
 80144f8:	d056      	beq.n	80145a8 <lv_dropdown_open+0x134>
    lv_coord_t label_h = lv_obj_get_height(label);
 80144fa:	0038      	movs	r0, r7
 80144fc:	f7f1 fc8a 	bl	8005e14 <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8014500:	2232      	movs	r2, #50	; 0x32
 8014502:	4681      	mov	r9, r0
 8014504:	2100      	movs	r1, #0
 8014506:	6a20      	ldr	r0, [r4, #32]
 8014508:	f7f5 f8f2 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801450c:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801450e:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014510:	2100      	movs	r1, #0
 8014512:	6a20      	ldr	r0, [r4, #32]
 8014514:	f7f5 f8ec 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014518:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801451a:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801451c:	2100      	movs	r1, #0
 801451e:	6a20      	ldr	r0, [r4, #32]
 8014520:	f7f5 f8e6 	bl	80096f0 <lv_obj_get_style_prop>
    lv_coord_t list_fit_h = label_h + top + bottom;
 8014524:	4643      	mov	r3, r8
 8014526:	005e      	lsls	r6, r3, #1
    lv_dir_t dir = dropdown->dir;
 8014528:	2338      	movs	r3, #56	; 0x38
    lv_coord_t list_fit_h = label_h + top + bottom;
 801452a:	182d      	adds	r5, r5, r0
    lv_dir_t dir = dropdown->dir;
 801452c:	5ce2      	ldrb	r2, [r4, r3]
    lv_coord_t list_fit_h = label_h + top + bottom;
 801452e:	19ad      	adds	r5, r5, r6
 8014530:	444d      	add	r5, r9
    lv_dir_t dir = dropdown->dir;
 8014532:	0716      	lsls	r6, r2, #28
    if(dropdown->dir == LV_DIR_BOTTOM) {
 8014534:	3b29      	subs	r3, #41	; 0x29
    lv_coord_t list_fit_h = label_h + top + bottom;
 8014536:	b22d      	sxth	r5, r5
    lv_dir_t dir = dropdown->dir;
 8014538:	0f36      	lsrs	r6, r6, #28
    if(dropdown->dir == LV_DIR_BOTTOM) {
 801453a:	4013      	ands	r3, r2
 801453c:	2b08      	cmp	r3, #8
 801453e:	d100      	bne.n	8014542 <lv_dropdown_open+0xce>
 8014540:	e077      	b.n	8014632 <lv_dropdown_open+0x1be>
    else if(dropdown->dir == LV_DIR_TOP) {
 8014542:	2b04      	cmp	r3, #4
 8014544:	d043      	beq.n	80145ce <lv_dropdown_open+0x15a>
    lv_obj_set_height(dropdown->list, list_h);
 8014546:	6a20      	ldr	r0, [r4, #32]
 8014548:	0029      	movs	r1, r5
 801454a:	f7f1 fb75 	bl	8005c38 <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 801454e:	0020      	movs	r0, r4
 8014550:	f7ff fc5a 	bl	8013e08 <position_to_selected>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8014554:	2e08      	cmp	r6, #8
 8014556:	d100      	bne.n	801455a <lv_dropdown_open+0xe6>
 8014558:	e0aa      	b.n	80146b0 <lv_dropdown_open+0x23c>
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 801455a:	2e04      	cmp	r6, #4
 801455c:	d100      	bne.n	8014560 <lv_dropdown_open+0xec>
 801455e:	e08d      	b.n	801467c <lv_dropdown_open+0x208>
    else if(dir == LV_DIR_LEFT)  lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_LEFT_TOP, 0, 0);
 8014560:	2e01      	cmp	r6, #1
 8014562:	d100      	bne.n	8014566 <lv_dropdown_open+0xf2>
 8014564:	e0b4      	b.n	80146d0 <lv_dropdown_open+0x25c>
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 8014566:	2e02      	cmp	r6, #2
 8014568:	d100      	bne.n	801456c <lv_dropdown_open+0xf8>
 801456a:	e0a9      	b.n	80146c0 <lv_dropdown_open+0x24c>
    lv_obj_update_layout(dropdown->list);
 801456c:	6a20      	ldr	r0, [r4, #32]
 801456e:	f7f3 f9a7 	bl	80078c0 <lv_obj_update_layout>
    if(dropdown->dir == LV_DIR_LEFT || dropdown->dir == LV_DIR_RIGHT) {
 8014572:	2338      	movs	r3, #56	; 0x38
 8014574:	5ce2      	ldrb	r2, [r4, r3]
 8014576:	3b29      	subs	r3, #41	; 0x29
 8014578:	4013      	ands	r3, r2
 801457a:	3b01      	subs	r3, #1
 801457c:	2b01      	cmp	r3, #1
 801457e:	d93c      	bls.n	80145fa <lv_dropdown_open+0x186>
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, dropdown->options);
 8014580:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014582:	2100      	movs	r1, #0
 8014584:	0038      	movs	r0, r7
 8014586:	f7f6 f96d 	bl	800a864 <lv_obj_calculate_style_text_align>
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 801458a:	2300      	movs	r3, #0
 801458c:	2200      	movs	r2, #0
    switch(align) {
 801458e:	2802      	cmp	r0, #2
 8014590:	d018      	beq.n	80145c4 <lv_dropdown_open+0x150>
 8014592:	2803      	cmp	r0, #3
 8014594:	d011      	beq.n	80145ba <lv_dropdown_open+0x146>
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 8014596:	2101      	movs	r1, #1
 8014598:	0038      	movs	r0, r7
 801459a:	f7f1 fb99 	bl	8005cd0 <lv_obj_align>
}
 801459e:	b003      	add	sp, #12
 80145a0:	bcc0      	pop	{r6, r7}
 80145a2:	46b9      	mov	r9, r7
 80145a4:	46b0      	mov	r8, r6
 80145a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_set_width(dropdown->list, lv_obj_get_width(dropdown_obj));
 80145a8:	0020      	movs	r0, r4
 80145aa:	6a25      	ldr	r5, [r4, #32]
 80145ac:	f7f1 fc2a 	bl	8005e04 <lv_obj_get_width>
 80145b0:	0001      	movs	r1, r0
 80145b2:	0028      	movs	r0, r5
 80145b4:	f7f1 fb28 	bl	8005c08 <lv_obj_set_width>
 80145b8:	e79f      	b.n	80144fa <lv_dropdown_open+0x86>
            lv_obj_align(label, LV_ALIGN_TOP_RIGHT, 0, 0);
 80145ba:	2103      	movs	r1, #3
 80145bc:	0038      	movs	r0, r7
 80145be:	f7f1 fb87 	bl	8005cd0 <lv_obj_align>
            break;
 80145c2:	e7ec      	b.n	801459e <lv_dropdown_open+0x12a>
            lv_obj_align(label, LV_ALIGN_TOP_MID, 0, 0);
 80145c4:	2102      	movs	r1, #2
 80145c6:	0038      	movs	r0, r7
 80145c8:	f7f1 fb82 	bl	8005cd0 <lv_obj_align>
}
 80145cc:	e7e7      	b.n	801459e <lv_dropdown_open+0x12a>
        if(dropdown_obj->coords.y1 - list_h < 0) {
 80145ce:	2212      	movs	r2, #18
 80145d0:	5ea3      	ldrsh	r3, [r4, r2]
 80145d2:	4698      	mov	r8, r3
 80145d4:	1b5b      	subs	r3, r3, r5
 80145d6:	d5b6      	bpl.n	8014546 <lv_dropdown_open+0xd2>
            if(dropdown_obj->coords.y1 < LV_VER_RES - dropdown_obj->coords.y2) {
 80145d8:	f7fc fac8 	bl	8010b6c <lv_disp_get_default>
 80145dc:	f7fc fae0 	bl	8010ba0 <lv_disp_get_ver_res>
 80145e0:	2216      	movs	r2, #22
 80145e2:	5ea3      	ldrsh	r3, [r4, r2]
 80145e4:	1ac0      	subs	r0, r0, r3
 80145e6:	4580      	cmp	r8, r0
 80145e8:	db50      	blt.n	801468c <lv_dropdown_open+0x218>
                list_h = dropdown_obj->coords.y1;
 80145ea:	8a63      	ldrh	r3, [r4, #18]
 80145ec:	1c1a      	adds	r2, r3, #0
 80145ee:	b21b      	sxth	r3, r3
 80145f0:	42ab      	cmp	r3, r5
 80145f2:	dd00      	ble.n	80145f6 <lv_dropdown_open+0x182>
 80145f4:	1c2a      	adds	r2, r5, #0
 80145f6:	b215      	sxth	r5, r2
 80145f8:	e7a5      	b.n	8014546 <lv_dropdown_open+0xd2>
        lv_coord_t y1 = lv_obj_get_y(dropdown->list);
 80145fa:	6a20      	ldr	r0, [r4, #32]
 80145fc:	f7f1 fbae 	bl	8005d5c <lv_obj_get_y>
 8014600:	0005      	movs	r5, r0
        lv_coord_t y2 = lv_obj_get_y2(dropdown->list);
 8014602:	6a20      	ldr	r0, [r4, #32]
 8014604:	f7f1 fbd0 	bl	8005da8 <lv_obj_get_y2>
 8014608:	0006      	movs	r6, r0
        if(y2 >= LV_VER_RES) {
 801460a:	f7fc faaf 	bl	8010b6c <lv_disp_get_default>
 801460e:	f7fc fac7 	bl	8010ba0 <lv_disp_get_ver_res>
 8014612:	42b0      	cmp	r0, r6
 8014614:	dcb4      	bgt.n	8014580 <lv_dropdown_open+0x10c>
            lv_obj_set_y(dropdown->list, y1 - (y2 - LV_VER_RES) - 1);
 8014616:	6a23      	ldr	r3, [r4, #32]
 8014618:	3d01      	subs	r5, #1
 801461a:	4698      	mov	r8, r3
 801461c:	f7fc faa6 	bl	8010b6c <lv_disp_get_default>
 8014620:	f7fc fabe 	bl	8010ba0 <lv_disp_get_ver_res>
 8014624:	1ba9      	subs	r1, r5, r6
 8014626:	1809      	adds	r1, r1, r0
 8014628:	b209      	sxth	r1, r1
 801462a:	4640      	mov	r0, r8
 801462c:	f7f1 fad4 	bl	8005bd8 <lv_obj_set_y>
 8014630:	e7a6      	b.n	8014580 <lv_dropdown_open+0x10c>
        if(dropdown_obj->coords.y2 + list_h > LV_VER_RES) {
 8014632:	2216      	movs	r2, #22
 8014634:	5ea3      	ldrsh	r3, [r4, r2]
 8014636:	4698      	mov	r8, r3
 8014638:	44a8      	add	r8, r5
 801463a:	f7fc fa97 	bl	8010b6c <lv_disp_get_default>
 801463e:	f7fc faaf 	bl	8010ba0 <lv_disp_get_ver_res>
 8014642:	4580      	cmp	r8, r0
 8014644:	dc00      	bgt.n	8014648 <lv_dropdown_open+0x1d4>
 8014646:	e77e      	b.n	8014546 <lv_dropdown_open+0xd2>
            if(dropdown_obj->coords.y1 > LV_VER_RES - dropdown_obj->coords.y2) {
 8014648:	2212      	movs	r2, #18
 801464a:	5ea3      	ldrsh	r3, [r4, r2]
 801464c:	4698      	mov	r8, r3
 801464e:	f7fc fa8d 	bl	8010b6c <lv_disp_get_default>
 8014652:	f7fc faa5 	bl	8010ba0 <lv_disp_get_ver_res>
 8014656:	2216      	movs	r2, #22
 8014658:	5ea3      	ldrsh	r3, [r4, r2]
 801465a:	1ac0      	subs	r0, r0, r3
 801465c:	4580      	cmp	r8, r0
 801465e:	dd3f      	ble.n	80146e0 <lv_dropdown_open+0x26c>
                list_h = dropdown_obj->coords.y1 - 1;
 8014660:	8a63      	ldrh	r3, [r4, #18]
    lv_obj_set_height(dropdown->list, list_h);
 8014662:	1c29      	adds	r1, r5, #0
                list_h = dropdown_obj->coords.y1 - 1;
 8014664:	3b01      	subs	r3, #1
 8014666:	b21b      	sxth	r3, r3
    lv_obj_set_height(dropdown->list, list_h);
 8014668:	429d      	cmp	r5, r3
 801466a:	dd00      	ble.n	801466e <lv_dropdown_open+0x1fa>
 801466c:	1c19      	adds	r1, r3, #0
 801466e:	6a20      	ldr	r0, [r4, #32]
 8014670:	b209      	sxth	r1, r1
 8014672:	f7f1 fae1 	bl	8005c38 <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 8014676:	0020      	movs	r0, r4
 8014678:	f7ff fbc6 	bl	8013e08 <position_to_selected>
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 801467c:	2300      	movs	r3, #0
 801467e:	220a      	movs	r2, #10
 8014680:	0021      	movs	r1, r4
 8014682:	6a20      	ldr	r0, [r4, #32]
 8014684:	9300      	str	r3, [sp, #0]
 8014686:	f7f2 fe55 	bl	8007334 <lv_obj_align_to>
 801468a:	e76f      	b.n	801456c <lv_dropdown_open+0xf8>
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 801468c:	f7fc fa6e 	bl	8010b6c <lv_disp_get_default>
 8014690:	f7fc fa86 	bl	8010ba0 <lv_disp_get_ver_res>
 8014694:	8ae3      	ldrh	r3, [r4, #22]
    lv_obj_set_height(dropdown->list, list_h);
 8014696:	1c29      	adds	r1, r5, #0
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 8014698:	1ac3      	subs	r3, r0, r3
 801469a:	b21b      	sxth	r3, r3
    lv_obj_set_height(dropdown->list, list_h);
 801469c:	429d      	cmp	r5, r3
 801469e:	dd00      	ble.n	80146a2 <lv_dropdown_open+0x22e>
 80146a0:	1c19      	adds	r1, r3, #0
 80146a2:	6a20      	ldr	r0, [r4, #32]
 80146a4:	b209      	sxth	r1, r1
 80146a6:	f7f1 fac7 	bl	8005c38 <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 80146aa:	0020      	movs	r0, r4
 80146ac:	f7ff fbac 	bl	8013e08 <position_to_selected>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 80146b0:	2300      	movs	r3, #0
 80146b2:	220d      	movs	r2, #13
 80146b4:	0021      	movs	r1, r4
 80146b6:	6a20      	ldr	r0, [r4, #32]
 80146b8:	9300      	str	r3, [sp, #0]
 80146ba:	f7f2 fe3b 	bl	8007334 <lv_obj_align_to>
 80146be:	e755      	b.n	801456c <lv_dropdown_open+0xf8>
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 80146c0:	2300      	movs	r3, #0
 80146c2:	2213      	movs	r2, #19
 80146c4:	0021      	movs	r1, r4
 80146c6:	6a20      	ldr	r0, [r4, #32]
 80146c8:	9300      	str	r3, [sp, #0]
 80146ca:	f7f2 fe33 	bl	8007334 <lv_obj_align_to>
 80146ce:	e74d      	b.n	801456c <lv_dropdown_open+0xf8>
    else if(dir == LV_DIR_LEFT)  lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_LEFT_TOP, 0, 0);
 80146d0:	2300      	movs	r3, #0
 80146d2:	2210      	movs	r2, #16
 80146d4:	0021      	movs	r1, r4
 80146d6:	6a20      	ldr	r0, [r4, #32]
 80146d8:	9300      	str	r3, [sp, #0]
 80146da:	f7f2 fe2b 	bl	8007334 <lv_obj_align_to>
 80146de:	e745      	b.n	801456c <lv_dropdown_open+0xf8>
                list_h = LV_VER_RES - dropdown_obj->coords.y2 - 1 ;
 80146e0:	f7fc fa44 	bl	8010b6c <lv_disp_get_default>
 80146e4:	f7fc fa5c 	bl	8010ba0 <lv_disp_get_ver_res>
 80146e8:	8ae3      	ldrh	r3, [r4, #22]
 80146ea:	43db      	mvns	r3, r3
 80146ec:	1818      	adds	r0, r3, r0
 80146ee:	1c03      	adds	r3, r0, #0
 80146f0:	b200      	sxth	r0, r0
 80146f2:	42a8      	cmp	r0, r5
 80146f4:	dd00      	ble.n	80146f8 <lv_dropdown_open+0x284>
 80146f6:	1c2b      	adds	r3, r5, #0
 80146f8:	b21d      	sxth	r5, r3
 80146fa:	e724      	b.n	8014546 <lv_dropdown_open+0xd2>
 80146fc:	000027d1 	.word	0x000027d1

08014700 <btn_release_handler.isra.0>:
static lv_res_t btn_release_handler(lv_obj_t * obj)
 8014700:	b530      	push	{r4, r5, lr}
 8014702:	b083      	sub	sp, #12
 8014704:	0004      	movs	r4, r0
    lv_indev_t * indev = lv_indev_get_act();
 8014706:	f7ee f847 	bl	8002798 <lv_indev_get_act>
 801470a:	0005      	movs	r5, r0
    if(lv_indev_get_scroll_obj(indev) == NULL) {
 801470c:	f7ee f8f4 	bl	80028f8 <lv_indev_get_scroll_obj>
 8014710:	2800      	cmp	r0, #0
 8014712:	d006      	beq.n	8014722 <btn_release_handler.isra.0+0x22>
        dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 8014714:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
        lv_obj_invalidate(obj);
 8014716:	0020      	movs	r0, r4
        dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 8014718:	8663      	strh	r3, [r4, #50]	; 0x32
        lv_obj_invalidate(obj);
 801471a:	f7f1 ff11 	bl	8006540 <lv_obj_invalidate>
}
 801471e:	b003      	add	sp, #12
 8014720:	bd30      	pop	{r4, r5, pc}
    return lv_obj_has_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN) ? false : true;
 8014722:	2101      	movs	r1, #1
 8014724:	6a20      	ldr	r0, [r4, #32]
 8014726:	f7f0 fc8b 	bl	8005040 <lv_obj_has_flag>
        if(lv_dropdown_is_open(obj)) {
 801472a:	2800      	cmp	r0, #0
 801472c:	d12b      	bne.n	8014786 <btn_release_handler.isra.0+0x86>
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 801472e:	2101      	movs	r1, #1
 8014730:	0020      	movs	r0, r4
 8014732:	f7f0 fc7b 	bl	800502c <lv_obj_clear_state>
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8014736:	2301      	movs	r3, #1
 8014738:	425b      	negs	r3, r3
 801473a:	86e3      	strh	r3, [r4, #54]	; 0x36
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 801473c:	2101      	movs	r1, #1
 801473e:	6a20      	ldr	r0, [r4, #32]
 8014740:	f7f0 fbee 	bl	8004f20 <lv_obj_add_flag>
    lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 8014744:	2200      	movs	r2, #0
 8014746:	2120      	movs	r1, #32
 8014748:	0020      	movs	r0, r4
 801474a:	f7ed fb07 	bl	8001d5c <lv_event_send>
            if(dropdown->sel_opt_id_orig != dropdown->sel_opt_id) {
 801474e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8014750:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8014752:	429a      	cmp	r2, r3
 8014754:	d00b      	beq.n	801476e <btn_release_handler.isra.0+0x6e>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8014756:	211c      	movs	r1, #28
 8014758:	0020      	movs	r0, r4
                dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 801475a:	86a3      	strh	r3, [r4, #52]	; 0x34
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801475c:	aa01      	add	r2, sp, #4
                uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 801475e:	9301      	str	r3, [sp, #4]
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8014760:	f7ed fafc 	bl	8001d5c <lv_event_send>
                if(res != LV_RES_OK) return res;
 8014764:	2801      	cmp	r0, #1
 8014766:	d1da      	bne.n	801471e <btn_release_handler.isra.0+0x1e>
                lv_obj_invalidate(obj);
 8014768:	0020      	movs	r0, r4
 801476a:	f7f1 fee9 	bl	8006540 <lv_obj_invalidate>
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801476e:	0028      	movs	r0, r5
 8014770:	f7ee f818 	bl	80027a4 <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8014774:	2804      	cmp	r0, #4
 8014776:	d1d2      	bne.n	801471e <btn_release_handler.isra.0+0x1e>
                lv_group_set_editing(lv_obj_get_group(obj), false);
 8014778:	0020      	movs	r0, r4
 801477a:	f7f0 fc77 	bl	800506c <lv_obj_get_group>
 801477e:	2100      	movs	r1, #0
 8014780:	f7ed ff30 	bl	80025e4 <lv_group_set_editing>
 8014784:	e7cb      	b.n	801471e <btn_release_handler.isra.0+0x1e>
            lv_dropdown_open(obj);
 8014786:	0020      	movs	r0, r4
 8014788:	f7ff fe74 	bl	8014474 <lv_dropdown_open>
 801478c:	e7c7      	b.n	801471e <btn_release_handler.isra.0+0x1e>
 801478e:	46c0      	nop			; (mov r8, r8)

08014790 <lv_dropdown_event>:
{
 8014790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014792:	4645      	mov	r5, r8
 8014794:	46de      	mov	lr, fp
 8014796:	4657      	mov	r7, sl
 8014798:	464e      	mov	r6, r9
 801479a:	b5e0      	push	{r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 801479c:	48cc      	ldr	r0, [pc, #816]	; (8014ad0 <lv_dropdown_event+0x340>)
{
 801479e:	b09f      	sub	sp, #124	; 0x7c
 80147a0:	000d      	movs	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 80147a2:	f7ed fafb 	bl	8001d9c <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80147a6:	2801      	cmp	r0, #1
 80147a8:	d006      	beq.n	80147b8 <lv_dropdown_event+0x28>
}
 80147aa:	b01f      	add	sp, #124	; 0x7c
 80147ac:	bcf0      	pop	{r4, r5, r6, r7}
 80147ae:	46bb      	mov	fp, r7
 80147b0:	46b2      	mov	sl, r6
 80147b2:	46a9      	mov	r9, r5
 80147b4:	46a0      	mov	r8, r4
 80147b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_event_code_t code = lv_event_get_code(e);
 80147b8:	0028      	movs	r0, r5
 80147ba:	f7ed fb0b 	bl	8001dd4 <lv_event_get_code>
 80147be:	0004      	movs	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80147c0:	0028      	movs	r0, r5
 80147c2:	f7ed fb03 	bl	8001dcc <lv_event_get_target>
 80147c6:	0006      	movs	r6, r0
    if(code == LV_EVENT_FOCUSED) {
 80147c8:	2c0e      	cmp	r4, #14
 80147ca:	d100      	bne.n	80147ce <lv_dropdown_event+0x3e>
 80147cc:	e0fa      	b.n	80149c4 <lv_dropdown_event+0x234>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 80147ce:	0023      	movs	r3, r4
 80147d0:	3b0f      	subs	r3, #15
 80147d2:	b2db      	uxtb	r3, r3
 80147d4:	2b01      	cmp	r3, #1
 80147d6:	d800      	bhi.n	80147da <lv_dropdown_event+0x4a>
 80147d8:	e104      	b.n	80149e4 <lv_dropdown_event+0x254>
    else if(code == LV_EVENT_RELEASED) {
 80147da:	2c08      	cmp	r4, #8
 80147dc:	d100      	bne.n	80147e0 <lv_dropdown_event+0x50>
 80147de:	e12c      	b.n	8014a3a <lv_dropdown_event+0x2aa>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 80147e0:	2c2a      	cmp	r4, #42	; 0x2a
 80147e2:	d100      	bne.n	80147e6 <lv_dropdown_event+0x56>
 80147e4:	e10f      	b.n	8014a06 <lv_dropdown_event+0x276>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 80147e6:	2c29      	cmp	r4, #41	; 0x29
 80147e8:	d100      	bne.n	80147ec <lv_dropdown_event+0x5c>
 80147ea:	e10c      	b.n	8014a06 <lv_dropdown_event+0x276>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 80147ec:	2c2c      	cmp	r4, #44	; 0x2c
 80147ee:	d100      	bne.n	80147f2 <lv_dropdown_event+0x62>
 80147f0:	e127      	b.n	8014a42 <lv_dropdown_event+0x2b2>
    else if(code == LV_EVENT_KEY) {
 80147f2:	2c0d      	cmp	r4, #13
 80147f4:	d100      	bne.n	80147f8 <lv_dropdown_event+0x68>
 80147f6:	e10a      	b.n	8014a0e <lv_dropdown_event+0x27e>
    else if(code == LV_EVENT_DRAW_MAIN) {
 80147f8:	2c15      	cmp	r4, #21
 80147fa:	d1d6      	bne.n	80147aa <lv_dropdown_event+0x1a>
    lv_obj_t * obj = lv_event_get_target(e);
 80147fc:	0028      	movs	r0, r5
 80147fe:	f7ed fae5 	bl	8001dcc <lv_event_get_target>
 8014802:	0004      	movs	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8014804:	0028      	movs	r0, r5
 8014806:	f7ed fb47 	bl	8001e98 <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801480a:	2232      	movs	r2, #50	; 0x32
 801480c:	2100      	movs	r1, #0
 801480e:	4682      	mov	sl, r0
 8014810:	0020      	movs	r0, r4
 8014812:	f7f4 ff6d 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014816:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8014818:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801481a:	2100      	movs	r1, #0
 801481c:	0020      	movs	r0, r4
 801481e:	f7f4 ff67 	bl	80096f0 <lv_obj_get_style_prop>
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8014822:	b2ad      	uxth	r5, r5
 8014824:	1828      	adds	r0, r5, r0
 8014826:	b283      	uxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014828:	2213      	movs	r2, #19
 801482a:	2100      	movs	r1, #0
 801482c:	0020      	movs	r0, r4
 801482e:	9305      	str	r3, [sp, #20]
 8014830:	f7f4 ff5e 	bl	80096f0 <lv_obj_get_style_prop>
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8014834:	1828      	adds	r0, r5, r0
 8014836:	b283      	uxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014838:	2210      	movs	r2, #16
 801483a:	2100      	movs	r1, #0
 801483c:	0020      	movs	r0, r4
 801483e:	9306      	str	r3, [sp, #24]
 8014840:	f7f4 ff56 	bl	80096f0 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8014844:	182d      	adds	r5, r5, r0
    lv_draw_label_dsc_init(&symbol_dsc);
 8014846:	a80e      	add	r0, sp, #56	; 0x38
 8014848:	f7f7 ff8a 	bl	800c760 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_INDICATOR, &symbol_dsc);
 801484c:	2180      	movs	r1, #128	; 0x80
 801484e:	0020      	movs	r0, r4
 8014850:	aa0e      	add	r2, sp, #56	; 0x38
 8014852:	0289      	lsls	r1, r1, #10
 8014854:	f7f0 fe6e 	bl	8005534 <lv_obj_init_draw_label_dsc>
    if(dropdown->text) opt_txt = dropdown->text;
 8014858:	6a63      	ldr	r3, [r4, #36]	; 0x24
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 801485a:	b2ad      	uxth	r5, r5
    if(dropdown->text) opt_txt = dropdown->text;
 801485c:	4699      	mov	r9, r3
 801485e:	2b00      	cmp	r3, #0
 8014860:	d100      	bne.n	8014864 <lv_dropdown_event+0xd4>
 8014862:	e17c      	b.n	8014b5e <lv_dropdown_event+0x3ce>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 8014864:	2338      	movs	r3, #56	; 0x38
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8014866:	2216      	movs	r2, #22
 8014868:	2100      	movs	r1, #0
 801486a:	0020      	movs	r0, r4
 801486c:	5ce6      	ldrb	r6, [r4, r3]
 801486e:	f7f4 ff3f 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8014872:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 8014874:	2801      	cmp	r0, #1
 8014876:	d100      	bne.n	801487a <lv_dropdown_event+0xea>
 8014878:	e111      	b.n	8014a9e <lv_dropdown_event+0x30e>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 801487a:	230f      	movs	r3, #15
 801487c:	4033      	ands	r3, r6
 801487e:	3b01      	subs	r3, #1
 8014880:	425a      	negs	r2, r3
 8014882:	4153      	adcs	r3, r2
 8014884:	b2db      	uxtb	r3, r3
 8014886:	4698      	mov	r8, r3
    if(dropdown->symbol) {
 8014888:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801488a:	2800      	cmp	r0, #0
 801488c:	d100      	bne.n	8014890 <lv_dropdown_event+0x100>
 801488e:	e0e8      	b.n	8014a62 <lv_dropdown_event+0x2d2>
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 8014890:	f7f7 ff58 	bl	800c744 <lv_img_src_get_type>
 8014894:	4683      	mov	fp, r0
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8014896:	2802      	cmp	r0, #2
 8014898:	d100      	bne.n	801489c <lv_dropdown_event+0x10c>
 801489a:	e11f      	b.n	8014adc <lv_dropdown_event+0x34c>
            lv_res_t res = lv_img_decoder_get_info(dropdown->symbol, &header);
 801489c:	ae16      	add	r6, sp, #88	; 0x58
 801489e:	0031      	movs	r1, r6
 80148a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80148a2:	f7f8 ffb5 	bl	800d810 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 80148a6:	2801      	cmp	r0, #1
 80148a8:	d100      	bne.n	80148ac <lv_dropdown_event+0x11c>
 80148aa:	e18a      	b.n	8014bc2 <lv_dropdown_event+0x432>
 80148ac:	4b89      	ldr	r3, [pc, #548]	; (8014ad4 <lv_dropdown_event+0x344>)
 80148ae:	0019      	movs	r1, r3
 80148b0:	9308      	str	r3, [sp, #32]
                symbol_h = -1;
 80148b2:	2301      	movs	r3, #1
 80148b4:	425b      	negs	r3, r3
 80148b6:	9307      	str	r3, [sp, #28]
                symbol_w = -1;
 80148b8:	9309      	str	r3, [sp, #36]	; 0x24
        if(symbol_to_left) {
 80148ba:	4643      	mov	r3, r8
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d100      	bne.n	80148c2 <lv_dropdown_event+0x132>
 80148c0:	e0fd      	b.n	8014abe <lv_dropdown_event+0x32e>
            symbol_area.x1 = obj->coords.x1 + left;
 80148c2:	9b05      	ldr	r3, [sp, #20]
 80148c4:	8a22      	ldrh	r2, [r4, #16]
 80148c6:	469c      	mov	ip, r3
 80148c8:	4462      	add	r2, ip
 80148ca:	b293      	uxth	r3, r2
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 80148cc:	3b01      	subs	r3, #1
 80148ce:	18cb      	adds	r3, r1, r3
            symbol_area.x1 = obj->coords.x1 + left;
 80148d0:	b212      	sxth	r2, r2
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 80148d2:	b21b      	sxth	r3, r3
 80148d4:	af0c      	add	r7, sp, #48	; 0x30
 80148d6:	80bb      	strh	r3, [r7, #4]
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 80148d8:	465b      	mov	r3, fp
 80148da:	803a      	strh	r2, [r7, #0]
 80148dc:	2b02      	cmp	r3, #2
 80148de:	d100      	bne.n	80148e2 <lv_dropdown_event+0x152>
 80148e0:	e11a      	b.n	8014b18 <lv_dropdown_event+0x388>
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 80148e2:	8a63      	ldrh	r3, [r4, #18]
 80148e4:	0020      	movs	r0, r4
 80148e6:	469b      	mov	fp, r3
 80148e8:	f7f1 fa94 	bl	8005e14 <lv_obj_get_height>
 80148ec:	9a07      	ldr	r2, [sp, #28]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 80148ee:	9908      	ldr	r1, [sp, #32]
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 80148f0:	1a80      	subs	r0, r0, r2
 80148f2:	0fc3      	lsrs	r3, r0, #31
 80148f4:	181b      	adds	r3, r3, r0
 80148f6:	105b      	asrs	r3, r3, #1
 80148f8:	445b      	add	r3, fp
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 80148fa:	3901      	subs	r1, #1
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 80148fc:	b29b      	uxth	r3, r3
 80148fe:	807b      	strh	r3, [r7, #2]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8014900:	185b      	adds	r3, r3, r1
 8014902:	80fb      	strh	r3, [r7, #6]
            lv_draw_img_dsc_init(&img_dsc);
 8014904:	0030      	movs	r0, r6
 8014906:	f7f7 fd89 	bl	800c41c <lv_draw_img_dsc_init>
            lv_obj_init_draw_img_dsc(obj, LV_PART_INDICATOR, &img_dsc);
 801490a:	2180      	movs	r1, #128	; 0x80
 801490c:	0032      	movs	r2, r6
 801490e:	0020      	movs	r0, r4
 8014910:	0289      	lsls	r1, r1, #10
 8014912:	f7f0 fe61 	bl	80055d8 <lv_obj_init_draw_img_dsc>
            img_dsc.pivot.x = symbol_w / 2;
 8014916:	9909      	ldr	r1, [sp, #36]	; 0x24
            img_dsc.pivot.y = symbol_h / 2;
 8014918:	9a07      	ldr	r2, [sp, #28]
            img_dsc.pivot.x = symbol_w / 2;
 801491a:	468c      	mov	ip, r1
 801491c:	0fcb      	lsrs	r3, r1, #31
 801491e:	4463      	add	r3, ip
            img_dsc.pivot.y = symbol_h / 2;
 8014920:	4694      	mov	ip, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8014922:	2180      	movs	r1, #128	; 0x80
            img_dsc.pivot.x = symbol_w / 2;
 8014924:	105b      	asrs	r3, r3, #1
 8014926:	80b3      	strh	r3, [r6, #4]
            img_dsc.pivot.y = symbol_h / 2;
 8014928:	0fd3      	lsrs	r3, r2, #31
 801492a:	4463      	add	r3, ip
 801492c:	105b      	asrs	r3, r3, #1
 801492e:	226d      	movs	r2, #109	; 0x6d
 8014930:	80f3      	strh	r3, [r6, #6]
 8014932:	0289      	lsls	r1, r1, #10
 8014934:	0020      	movs	r0, r4
 8014936:	f7f4 fedb 	bl	80096f0 <lv_obj_get_style_prop>
            lv_draw_img(draw_ctx, &img_dsc, &symbol_area, dropdown->symbol);
 801493a:	003a      	movs	r2, r7
            img_dsc.angle = lv_obj_get_style_transform_angle(obj, LV_PART_INDICATOR);
 801493c:	8030      	strh	r0, [r6, #0]
            lv_draw_img(draw_ctx, &img_dsc, &symbol_area, dropdown->symbol);
 801493e:	0031      	movs	r1, r6
 8014940:	4650      	mov	r0, sl
 8014942:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014944:	f7f7 fd7a 	bl	800c43c <lv_draw_img>
    lv_draw_label_dsc_init(&label_dsc);
 8014948:	0030      	movs	r0, r6
 801494a:	f7f7 ff09 	bl	800c760 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 801494e:	0032      	movs	r2, r6
 8014950:	2100      	movs	r1, #0
 8014952:	0020      	movs	r0, r4
 8014954:	f7f0 fdee 	bl	8005534 <lv_obj_init_draw_label_dsc>
    lv_txt_get_size(&size, opt_txt, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 8014958:	2214      	movs	r2, #20
 801495a:	5eb3      	ldrsh	r3, [r6, r2]
 801495c:	7f72      	ldrb	r2, [r6, #29]
 801495e:	a80b      	add	r0, sp, #44	; 0x2c
 8014960:	9202      	str	r2, [sp, #8]
 8014962:	4a5d      	ldr	r2, [pc, #372]	; (8014ad8 <lv_dropdown_event+0x348>)
 8014964:	9201      	str	r2, [sp, #4]
 8014966:	2112      	movs	r1, #18
 8014968:	5e72      	ldrsh	r2, [r6, r1]
 801496a:	4649      	mov	r1, r9
 801496c:	9200      	str	r2, [sp, #0]
 801496e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014970:	f7ff f91e 	bl	8013bb0 <lv_txt_get_size>
    txt_area.y1 = obj->coords.y1 + top;
 8014974:	8a63      	ldrh	r3, [r4, #18]
 8014976:	18ed      	adds	r5, r5, r3
 8014978:	b2ad      	uxth	r5, r5
 801497a:	807d      	strh	r5, [r7, #2]
    txt_area.y2 = txt_area.y1 + size.y;
 801497c:	ab06      	add	r3, sp, #24
 801497e:	8adb      	ldrh	r3, [r3, #22]
 8014980:	18ed      	adds	r5, r5, r3
    if(dropdown->symbol == NULL) {
 8014982:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    txt_area.y2 = txt_area.y1 + size.y;
 8014984:	80fd      	strh	r5, [r7, #6]
    if(dropdown->symbol == NULL) {
 8014986:	2b00      	cmp	r3, #0
 8014988:	d100      	bne.n	801498c <lv_dropdown_event+0x1fc>
 801498a:	e0d7      	b.n	8014b3c <lv_dropdown_event+0x3ac>
        if(symbol_to_left) {
 801498c:	4643      	mov	r3, r8
 801498e:	2b00      	cmp	r3, #0
 8014990:	d07a      	beq.n	8014a88 <lv_dropdown_event+0x2f8>
            txt_area.x1 = obj->coords.x2 - right - size.x;
 8014992:	8aa3      	ldrh	r3, [r4, #20]
 8014994:	9a06      	ldr	r2, [sp, #24]
 8014996:	1a9b      	subs	r3, r3, r2
 8014998:	aa06      	add	r2, sp, #24
 801499a:	8a92      	ldrh	r2, [r2, #20]
 801499c:	b29b      	uxth	r3, r3
 801499e:	1a9a      	subs	r2, r3, r2
 80149a0:	803a      	strh	r2, [r7, #0]
            txt_area.x2 = txt_area.x1 + size.x;
 80149a2:	80bb      	strh	r3, [r7, #4]
    lv_draw_label(draw_ctx, &label_dsc, &txt_area, opt_txt, NULL);
 80149a4:	2300      	movs	r3, #0
 80149a6:	003a      	movs	r2, r7
 80149a8:	9300      	str	r3, [sp, #0]
 80149aa:	0031      	movs	r1, r6
 80149ac:	464b      	mov	r3, r9
 80149ae:	4650      	mov	r0, sl
 80149b0:	f7f7 feee 	bl	800c790 <lv_draw_label>
    if(dropdown->text == NULL) {
 80149b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d000      	beq.n	80149bc <lv_dropdown_event+0x22c>
 80149ba:	e6f6      	b.n	80147aa <lv_dropdown_event+0x1a>
        lv_mem_buf_release((char *)opt_txt);
 80149bc:	4648      	mov	r0, r9
 80149be:	f7fd fc17 	bl	80121f0 <lv_mem_buf_release>
}
 80149c2:	e6f2      	b.n	80147aa <lv_dropdown_event+0x1a>
        lv_group_t * g             = lv_obj_get_group(obj);
 80149c4:	f7f0 fb52 	bl	800506c <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 80149c8:	f7ed fe6a 	bl	80026a0 <lv_group_get_editing>
 80149cc:	0004      	movs	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80149ce:	f7ed fee3 	bl	8002798 <lv_indev_get_act>
 80149d2:	f7ed fee7 	bl	80027a4 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 80149d6:	2804      	cmp	r0, #4
 80149d8:	d000      	beq.n	80149dc <lv_dropdown_event+0x24c>
 80149da:	e6e6      	b.n	80147aa <lv_dropdown_event+0x1a>
            if(editing) {
 80149dc:	2c00      	cmp	r4, #0
 80149de:	d13c      	bne.n	8014a5a <lv_dropdown_event+0x2ca>
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 80149e0:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 80149e2:	8673      	strh	r3, [r6, #50]	; 0x32
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 80149e4:	0030      	movs	r0, r6
 80149e6:	2101      	movs	r1, #1
 80149e8:	f7f0 fb20 	bl	800502c <lv_obj_clear_state>
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 80149ec:	2301      	movs	r3, #1
 80149ee:	425b      	negs	r3, r3
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 80149f0:	6a30      	ldr	r0, [r6, #32]
 80149f2:	2101      	movs	r1, #1
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 80149f4:	86f3      	strh	r3, [r6, #54]	; 0x36
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 80149f6:	f7f0 fa93 	bl	8004f20 <lv_obj_add_flag>
    lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 80149fa:	2200      	movs	r2, #0
 80149fc:	2120      	movs	r1, #32
 80149fe:	0030      	movs	r0, r6
 8014a00:	f7ed f9ac 	bl	8001d5c <lv_event_send>
}
 8014a04:	e6d1      	b.n	80147aa <lv_dropdown_event+0x1a>
        lv_obj_refresh_self_size(obj);
 8014a06:	0030      	movs	r0, r6
 8014a08:	f7f1 faa2 	bl	8005f50 <lv_obj_refresh_self_size>
 8014a0c:	e6cd      	b.n	80147aa <lv_dropdown_event+0x1a>
        char c = *((char *)lv_event_get_param(e));
 8014a0e:	0028      	movs	r0, r5
 8014a10:	f7ed f9e4 	bl	8001ddc <lv_event_get_param>
 8014a14:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8014a16:	001a      	movs	r2, r3
 8014a18:	3a12      	subs	r2, #18
 8014a1a:	2a01      	cmp	r2, #1
 8014a1c:	d942      	bls.n	8014aa4 <lv_dropdown_event+0x314>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8014a1e:	2b14      	cmp	r3, #20
 8014a20:	d022      	beq.n	8014a68 <lv_dropdown_event+0x2d8>
 8014a22:	2b11      	cmp	r3, #17
 8014a24:	d020      	beq.n	8014a68 <lv_dropdown_event+0x2d8>
        else if(c == LV_KEY_ESC) {
 8014a26:	2b1b      	cmp	r3, #27
 8014a28:	d0da      	beq.n	80149e0 <lv_dropdown_event+0x250>
        else if(c == LV_KEY_ENTER) {
 8014a2a:	2b0a      	cmp	r3, #10
 8014a2c:	d000      	beq.n	8014a30 <lv_dropdown_event+0x2a0>
 8014a2e:	e6bc      	b.n	80147aa <lv_dropdown_event+0x1a>
            lv_obj_t * indev_obj = lv_indev_get_obj_act();
 8014a30:	f7ed ff82 	bl	8002938 <lv_indev_get_obj_act>
            if(indev_obj != obj) {
 8014a34:	4286      	cmp	r6, r0
 8014a36:	d100      	bne.n	8014a3a <lv_dropdown_event+0x2aa>
 8014a38:	e6b7      	b.n	80147aa <lv_dropdown_event+0x1a>
                res = btn_release_handler(obj);
 8014a3a:	0030      	movs	r0, r6
 8014a3c:	f7ff fe60 	bl	8014700 <btn_release_handler.isra.0>
                if(res != LV_RES_OK) return;
 8014a40:	e6b3      	b.n	80147aa <lv_dropdown_event+0x1a>
        lv_point_t * p = lv_event_get_param(e);
 8014a42:	0028      	movs	r0, r5
 8014a44:	f7ed f9ca 	bl	8001ddc <lv_event_get_param>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8014a48:	2257      	movs	r2, #87	; 0x57
 8014a4a:	0004      	movs	r4, r0
 8014a4c:	2100      	movs	r1, #0
 8014a4e:	0030      	movs	r0, r6
 8014a50:	f7f4 fe4e 	bl	80096f0 <lv_obj_get_style_prop>
        p->y = lv_font_get_line_height(font);
 8014a54:	8903      	ldrh	r3, [r0, #8]
 8014a56:	8063      	strh	r3, [r4, #2]
 8014a58:	e6a7      	b.n	80147aa <lv_dropdown_event+0x1a>
                lv_dropdown_open(obj);
 8014a5a:	0030      	movs	r0, r6
 8014a5c:	f7ff fd0a 	bl	8014474 <lv_dropdown_open>
 8014a60:	e6a3      	b.n	80147aa <lv_dropdown_event+0x1a>
 8014a62:	ae16      	add	r6, sp, #88	; 0x58
 8014a64:	af0c      	add	r7, sp, #48	; 0x30
 8014a66:	e76f      	b.n	8014948 <lv_dropdown_event+0x1b8>
    return lv_obj_has_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN) ? false : true;
 8014a68:	2101      	movs	r1, #1
 8014a6a:	6a30      	ldr	r0, [r6, #32]
 8014a6c:	f7f0 fae8 	bl	8005040 <lv_obj_has_flag>
            if(!lv_dropdown_is_open(obj)) {
 8014a70:	2800      	cmp	r0, #0
 8014a72:	d1f2      	bne.n	8014a5a <lv_dropdown_event+0x2ca>
            else if(dropdown->sel_opt_id > 0) {
 8014a74:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d100      	bne.n	8014a7c <lv_dropdown_event+0x2ec>
 8014a7a:	e696      	b.n	80147aa <lv_dropdown_event+0x1a>
                dropdown->sel_opt_id--;
 8014a7c:	3b01      	subs	r3, #1
                position_to_selected(obj);
 8014a7e:	0030      	movs	r0, r6
                dropdown->sel_opt_id--;
 8014a80:	8673      	strh	r3, [r6, #50]	; 0x32
                position_to_selected(obj);
 8014a82:	f7ff f9c1 	bl	8013e08 <position_to_selected>
 8014a86:	e690      	b.n	80147aa <lv_dropdown_event+0x1a>
            txt_area.x1 = obj->coords.x1 + left;
 8014a88:	9a05      	ldr	r2, [sp, #20]
 8014a8a:	8a23      	ldrh	r3, [r4, #16]
 8014a8c:	4694      	mov	ip, r2
            txt_area.x2 = txt_area.x1 + size.x;
 8014a8e:	aa06      	add	r2, sp, #24
 8014a90:	8a92      	ldrh	r2, [r2, #20]
            txt_area.x1 = obj->coords.x1 + left;
 8014a92:	4463      	add	r3, ip
 8014a94:	b29b      	uxth	r3, r3
 8014a96:	803b      	strh	r3, [r7, #0]
            txt_area.x2 = txt_area.x1 + size.x;
 8014a98:	189b      	adds	r3, r3, r2
 8014a9a:	80bb      	strh	r3, [r7, #4]
 8014a9c:	e782      	b.n	80149a4 <lv_dropdown_event+0x214>
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 8014a9e:	2301      	movs	r3, #1
 8014aa0:	4698      	mov	r8, r3
 8014aa2:	e6f1      	b.n	8014888 <lv_dropdown_event+0xf8>
    return lv_obj_has_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN) ? false : true;
 8014aa4:	2101      	movs	r1, #1
 8014aa6:	6a30      	ldr	r0, [r6, #32]
 8014aa8:	f7f0 faca 	bl	8005040 <lv_obj_has_flag>
            if(!lv_dropdown_is_open(obj)) {
 8014aac:	2800      	cmp	r0, #0
 8014aae:	d1d4      	bne.n	8014a5a <lv_dropdown_event+0x2ca>
            else if(dropdown->sel_opt_id + 1 < dropdown->option_cnt) {
 8014ab0:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8014ab2:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8014ab4:	3301      	adds	r3, #1
 8014ab6:	4293      	cmp	r3, r2
 8014ab8:	db00      	blt.n	8014abc <lv_dropdown_event+0x32c>
 8014aba:	e676      	b.n	80147aa <lv_dropdown_event+0x1a>
 8014abc:	e7df      	b.n	8014a7e <lv_dropdown_event+0x2ee>
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 8014abe:	9a06      	ldr	r2, [sp, #24]
 8014ac0:	8aa3      	ldrh	r3, [r4, #20]
 8014ac2:	1a9b      	subs	r3, r3, r2
 8014ac4:	b29b      	uxth	r3, r3
 8014ac6:	1a5a      	subs	r2, r3, r1
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8014ac8:	3b01      	subs	r3, #1
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 8014aca:	b212      	sxth	r2, r2
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8014acc:	b21b      	sxth	r3, r3
 8014ace:	e701      	b.n	80148d4 <lv_dropdown_event+0x144>
 8014ad0:	0801bec0 	.word	0x0801bec0
 8014ad4:	0000ffff 	.word	0x0000ffff
 8014ad8:	00001fff 	.word	0x00001fff
            lv_txt_get_size(&size, dropdown->symbol, symbol_dsc.font, symbol_dsc.letter_space, symbol_dsc.line_space, LV_COORD_MAX,
 8014adc:	203d      	movs	r0, #61	; 0x3d
 8014ade:	ab06      	add	r3, sp, #24
 8014ae0:	2234      	movs	r2, #52	; 0x34
 8014ae2:	5e9b      	ldrsh	r3, [r3, r2]
 8014ae4:	aa06      	add	r2, sp, #24
 8014ae6:	1812      	adds	r2, r2, r0
 8014ae8:	7812      	ldrb	r2, [r2, #0]
 8014aea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014aec:	9202      	str	r2, [sp, #8]
 8014aee:	4a3f      	ldr	r2, [pc, #252]	; (8014bec <lv_dropdown_event+0x45c>)
 8014af0:	ae16      	add	r6, sp, #88	; 0x58
 8014af2:	9201      	str	r2, [sp, #4]
 8014af4:	aa06      	add	r2, sp, #24
 8014af6:	2032      	movs	r0, #50	; 0x32
 8014af8:	5e12      	ldrsh	r2, [r2, r0]
 8014afa:	0030      	movs	r0, r6
 8014afc:	9200      	str	r2, [sp, #0]
 8014afe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b00:	f7ff f856 	bl	8013bb0 <lv_txt_get_size>
            symbol_w = size.x;
 8014b04:	2200      	movs	r2, #0
 8014b06:	5eb3      	ldrsh	r3, [r6, r2]
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8014b08:	8831      	ldrh	r1, [r6, #0]
            symbol_w = size.x;
 8014b0a:	9309      	str	r3, [sp, #36]	; 0x24
            symbol_h = size.y;
 8014b0c:	2202      	movs	r2, #2
 8014b0e:	5eb3      	ldrsh	r3, [r6, r2]
 8014b10:	9307      	str	r3, [sp, #28]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8014b12:	8873      	ldrh	r3, [r6, #2]
 8014b14:	9308      	str	r3, [sp, #32]
 8014b16:	e6d0      	b.n	80148ba <lv_dropdown_event+0x12a>
 8014b18:	9a08      	ldr	r2, [sp, #32]
            symbol_area.y1 = obj->coords.y1 + top;
 8014b1a:	8a63      	ldrh	r3, [r4, #18]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8014b1c:	4694      	mov	ip, r2
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 8014b1e:	2200      	movs	r2, #0
            symbol_area.y1 = obj->coords.y1 + top;
 8014b20:	18eb      	adds	r3, r5, r3
 8014b22:	b29b      	uxth	r3, r3
 8014b24:	807b      	strh	r3, [r7, #2]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8014b26:	3b01      	subs	r3, #1
 8014b28:	4463      	add	r3, ip
 8014b2a:	80fb      	strh	r3, [r7, #6]
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 8014b2c:	4650      	mov	r0, sl
 8014b2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014b30:	a90e      	add	r1, sp, #56	; 0x38
 8014b32:	9200      	str	r2, [sp, #0]
 8014b34:	003a      	movs	r2, r7
 8014b36:	f7f7 fe2b 	bl	800c790 <lv_draw_label>
 8014b3a:	e705      	b.n	8014948 <lv_dropdown_event+0x1b8>
        txt_area.x1 = obj->coords.x1 + (lv_obj_get_width(obj) - size.x) / 2;
 8014b3c:	0020      	movs	r0, r4
 8014b3e:	8a25      	ldrh	r5, [r4, #16]
 8014b40:	f7f1 f960 	bl	8005e04 <lv_obj_get_width>
 8014b44:	ab06      	add	r3, sp, #24
 8014b46:	2214      	movs	r2, #20
 8014b48:	5e9a      	ldrsh	r2, [r3, r2]
 8014b4a:	1a80      	subs	r0, r0, r2
 8014b4c:	0fc3      	lsrs	r3, r0, #31
 8014b4e:	181b      	adds	r3, r3, r0
 8014b50:	105b      	asrs	r3, r3, #1
 8014b52:	18eb      	adds	r3, r5, r3
 8014b54:	b29b      	uxth	r3, r3
 8014b56:	803b      	strh	r3, [r7, #0]
        txt_area.x2 = txt_area.x1 + size.x;
 8014b58:	189b      	adds	r3, r3, r2
 8014b5a:	80bb      	strh	r3, [r7, #4]
 8014b5c:	e722      	b.n	80149a4 <lv_dropdown_event+0x214>
        char * buf = lv_mem_buf_get(128);
 8014b5e:	2080      	movs	r0, #128	; 0x80
 8014b60:	f7fd faa2 	bl	80120a8 <lv_mem_buf_get>
    if(dropdown->options)  {
 8014b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
        char * buf = lv_mem_buf_get(128);
 8014b66:	4681      	mov	r9, r0
    if(dropdown->options)  {
 8014b68:	2e00      	cmp	r6, #0
 8014b6a:	d03b      	beq.n	8014be4 <lv_dropdown_event+0x454>
        txt_len     = strlen(dropdown->options);
 8014b6c:	0030      	movs	r0, r6
 8014b6e:	f7eb fad3 	bl	8000118 <strlen>
 8014b72:	1e03      	subs	r3, r0, #0
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8014b74:	d021      	beq.n	8014bba <lv_dropdown_event+0x42a>
    uint32_t line        = 0;
 8014b76:	2100      	movs	r1, #0
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8014b78:	2200      	movs	r2, #0
 8014b7a:	46a4      	mov	ip, r4
 8014b7c:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8014b7e:	e007      	b.n	8014b90 <lv_dropdown_event+0x400>
        if(dropdown->options[i] == '\n') line++;
 8014b80:	5cb3      	ldrb	r3, [r6, r2]
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8014b82:	3201      	adds	r2, #1
        if(dropdown->options[i] == '\n') line++;
 8014b84:	3b0a      	subs	r3, #10
 8014b86:	425c      	negs	r4, r3
 8014b88:	4163      	adcs	r3, r4
 8014b8a:	18c9      	adds	r1, r1, r3
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8014b8c:	4290      	cmp	r0, r2
 8014b8e:	d026      	beq.n	8014bde <lv_dropdown_event+0x44e>
 8014b90:	428f      	cmp	r7, r1
 8014b92:	d1f5      	bne.n	8014b80 <lv_dropdown_event+0x3f0>
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 8014b94:	4664      	mov	r4, ip
 8014b96:	4290      	cmp	r0, r2
 8014b98:	d926      	bls.n	8014be8 <lv_dropdown_event+0x458>
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	464f      	mov	r7, r9
 8014b9e:	1a80      	subs	r0, r0, r2
 8014ba0:	e006      	b.n	8014bb0 <lv_dropdown_event+0x420>
        if(buf_size && c >= buf_size - 1) {
 8014ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8014ba4:	d008      	beq.n	8014bb8 <lv_dropdown_event+0x428>
        buf[c] = dropdown->options[i];
 8014ba6:	54f9      	strb	r1, [r7, r3]
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 8014ba8:	3301      	adds	r3, #1
 8014baa:	4298      	cmp	r0, r3
 8014bac:	d004      	beq.n	8014bb8 <lv_dropdown_event+0x428>
 8014bae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014bb0:	18b6      	adds	r6, r6, r2
 8014bb2:	5cf1      	ldrb	r1, [r6, r3]
 8014bb4:	290a      	cmp	r1, #10
 8014bb6:	d1f4      	bne.n	8014ba2 <lv_dropdown_event+0x412>
 8014bb8:	46b9      	mov	r9, r7
    buf[c] = '\0';
 8014bba:	2200      	movs	r2, #0
 8014bbc:	4649      	mov	r1, r9
 8014bbe:	54ca      	strb	r2, [r1, r3]
 8014bc0:	e650      	b.n	8014864 <lv_dropdown_event+0xd4>
                symbol_w = header.w;
 8014bc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
                symbol_h = header.h;
 8014bc4:	2242      	movs	r2, #66	; 0x42
                symbol_w = header.w;
 8014bc6:	02d9      	lsls	r1, r3, #11
 8014bc8:	0d4b      	lsrs	r3, r1, #21
 8014bca:	9309      	str	r3, [sp, #36]	; 0x24
                symbol_h = header.h;
 8014bcc:	ab06      	add	r3, sp, #24
 8014bce:	469c      	mov	ip, r3
 8014bd0:	4462      	add	r2, ip
 8014bd2:	8812      	ldrh	r2, [r2, #0]
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8014bd4:	0d49      	lsrs	r1, r1, #21
                symbol_h = header.h;
 8014bd6:	0953      	lsrs	r3, r2, #5
 8014bd8:	9307      	str	r3, [sp, #28]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8014bda:	9308      	str	r3, [sp, #32]
 8014bdc:	e66d      	b.n	80148ba <lv_dropdown_event+0x12a>
 8014bde:	4664      	mov	r4, ip
 8014be0:	2300      	movs	r3, #0
 8014be2:	e7ea      	b.n	8014bba <lv_dropdown_event+0x42a>
        buf[0] = '\0';
 8014be4:	7006      	strb	r6, [r0, #0]
        return;
 8014be6:	e63d      	b.n	8014864 <lv_dropdown_event+0xd4>
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 8014be8:	2300      	movs	r3, #0
 8014bea:	e7e6      	b.n	8014bba <lv_dropdown_event+0x42a>
 8014bec:	00001fff 	.word	0x00001fff

08014bf0 <lv_img_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_img_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8014bf0:	b570      	push	{r4, r5, r6, lr}
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_img_t * img = (lv_img_t *)obj;

    img->src       = NULL;
 8014bf2:	2500      	movs	r5, #0
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 8014bf4:	2234      	movs	r2, #52	; 0x34
    img->src       = NULL;
 8014bf6:	620d      	str	r5, [r1, #32]
{
 8014bf8:	000c      	movs	r4, r1
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 8014bfa:	5c8b      	ldrb	r3, [r1, r2]
 8014bfc:	217f      	movs	r1, #127	; 0x7f
 8014bfe:	438b      	bics	r3, r1
 8014c00:	2103      	movs	r1, #3
 8014c02:	430b      	orrs	r3, r1
 8014c04:	54a3      	strb	r3, [r4, r2]
    img->cf        = LV_IMG_CF_UNKNOWN;
    img->w         = lv_obj_get_width(obj);
 8014c06:	0020      	movs	r0, r4
 8014c08:	f7f1 f8fc 	bl	8005e04 <lv_obj_get_width>
 8014c0c:	8520      	strh	r0, [r4, #40]	; 0x28
    img->h         = lv_obj_get_height(obj);
 8014c0e:	0020      	movs	r0, r4
 8014c10:	f7f1 f900 	bl	8005e14 <lv_obj_get_height>
    img->zoom = LV_IMG_ZOOM_NONE;
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
    img->offset.x  = 0;
    img->offset.y  = 0;
    img->pivot.x = 0;
    img->pivot.y = 0;
 8014c14:	2380      	movs	r3, #128	; 0x80
 8014c16:	045b      	lsls	r3, r3, #17
 8014c18:	6323      	str	r3, [r4, #48]	; 0x30
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8014c1a:	4a09      	ldr	r2, [pc, #36]	; (8014c40 <lv_img_constructor+0x50>)
 8014c1c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    img->h         = lv_obj_get_height(obj);
 8014c1e:	8560      	strh	r0, [r4, #42]	; 0x2a
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8014c20:	4013      	ands	r3, r2
 8014c22:	2280      	movs	r2, #128	; 0x80
 8014c24:	4313      	orrs	r3, r2
    img->obj_size_mode = LV_IMG_SIZE_MODE_VIRTUAL;

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8014c26:	0020      	movs	r0, r4
    img->offset.x  = 0;
 8014c28:	6265      	str	r5, [r4, #36]	; 0x24
    img->angle = 0;
 8014c2a:	62e5      	str	r5, [r4, #44]	; 0x2c
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8014c2c:	86a3      	strh	r3, [r4, #52]	; 0x34
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8014c2e:	2102      	movs	r1, #2
 8014c30:	f7f0 f9b2 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8014c34:	2180      	movs	r1, #128	; 0x80
 8014c36:	0020      	movs	r0, r4
 8014c38:	0249      	lsls	r1, r1, #9
 8014c3a:	f7f0 f971 	bl	8004f20 <lv_obj_add_flag>

    LV_TRACE_OBJ_CREATE("finished");
}
 8014c3e:	bd70      	pop	{r4, r5, r6, pc}
 8014c40:	fffffc7f 	.word	0xfffffc7f

08014c44 <lv_img_destructor>:

static void lv_img_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8014c44:	b570      	push	{r4, r5, r6, lr}
    LV_UNUSED(class_p);
    lv_img_t * img = (lv_img_t *)obj;
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8014c46:	2534      	movs	r5, #52	; 0x34
 8014c48:	2303      	movs	r3, #3
 8014c4a:	5d4a      	ldrb	r2, [r1, r5]
{
 8014c4c:	000c      	movs	r4, r1
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8014c4e:	4013      	ands	r3, r2
 8014c50:	3b01      	subs	r3, #1
 8014c52:	2b01      	cmp	r3, #1
 8014c54:	d900      	bls.n	8014c58 <lv_img_destructor+0x14>
        lv_mem_free((void *)img->src);
        img->src      = NULL;
        img->src_type = LV_IMG_SRC_UNKNOWN;
    }
}
 8014c56:	bd70      	pop	{r4, r5, r6, pc}
        lv_mem_free((void *)img->src);
 8014c58:	6a08      	ldr	r0, [r1, #32]
 8014c5a:	f7fd f9c9 	bl	8011ff0 <lv_mem_free>
        img->src      = NULL;
 8014c5e:	2300      	movs	r3, #0
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8014c60:	2203      	movs	r2, #3
        img->src      = NULL;
 8014c62:	6223      	str	r3, [r4, #32]
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8014c64:	5d63      	ldrb	r3, [r4, r5]
 8014c66:	4313      	orrs	r3, r2
 8014c68:	5563      	strb	r3, [r4, r5]
}
 8014c6a:	e7f4      	b.n	8014c56 <lv_img_destructor+0x12>

08014c6c <lv_img_create>:
{
 8014c6c:	b510      	push	{r4, lr}
 8014c6e:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8014c70:	4803      	ldr	r0, [pc, #12]	; (8014c80 <lv_img_create+0x14>)
 8014c72:	f7f0 fa63 	bl	800513c <lv_obj_class_create_obj>
 8014c76:	0004      	movs	r4, r0
    lv_obj_class_init_obj(obj);
 8014c78:	f7f0 fad8 	bl	800522c <lv_obj_class_init_obj>
}
 8014c7c:	0020      	movs	r0, r4
 8014c7e:	bd10      	pop	{r4, pc}
 8014c80:	0801bef0 	.word	0x0801bef0

08014c84 <lv_img_set_src>:
{
 8014c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c86:	46c6      	mov	lr, r8
 8014c88:	000e      	movs	r6, r1
 8014c8a:	b500      	push	{lr}
 8014c8c:	b086      	sub	sp, #24
 8014c8e:	0004      	movs	r4, r0
    lv_obj_invalidate(obj);
 8014c90:	f7f1 fc56 	bl	8006540 <lv_obj_invalidate>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8014c94:	0030      	movs	r0, r6
 8014c96:	f7f7 fd55 	bl	800c744 <lv_img_src_get_type>
 8014c9a:	0005      	movs	r5, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8014c9c:	2803      	cmp	r0, #3
 8014c9e:	d100      	bne.n	8014ca2 <lv_img_set_src+0x1e>
 8014ca0:	e077      	b.n	8014d92 <lv_img_set_src+0x10e>
    lv_img_decoder_get_info(src, &header);
 8014ca2:	0030      	movs	r0, r6
 8014ca4:	a904      	add	r1, sp, #16
 8014ca6:	f7f8 fdb3 	bl	800d810 <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8014caa:	2d00      	cmp	r5, #0
 8014cac:	d137      	bne.n	8014d1e <lv_img_set_src+0x9a>
        if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8014cae:	2334      	movs	r3, #52	; 0x34
 8014cb0:	5ce2      	ldrb	r2, [r4, r3]
 8014cb2:	3b31      	subs	r3, #49	; 0x31
 8014cb4:	4013      	ands	r3, r2
 8014cb6:	3b01      	subs	r3, #1
 8014cb8:	2b01      	cmp	r3, #1
 8014cba:	d800      	bhi.n	8014cbe <lv_img_set_src+0x3a>
 8014cbc:	e08a      	b.n	8014dd4 <lv_img_set_src+0x150>
        img->src = src;
 8014cbe:	6226      	str	r6, [r4, #32]
    img->w        = header.w;
 8014cc0:	9b04      	ldr	r3, [sp, #16]
 8014cc2:	02da      	lsls	r2, r3, #11
    img->h        = header.h;
 8014cc4:	2312      	movs	r3, #18
 8014cc6:	446b      	add	r3, sp
 8014cc8:	8819      	ldrh	r1, [r3, #0]
    img->w        = header.w;
 8014cca:	0d52      	lsrs	r2, r2, #21
    img->h        = header.h;
 8014ccc:	0949      	lsrs	r1, r1, #5
    img->cf       = header.cf;
 8014cce:	466b      	mov	r3, sp
    img->src_type = src_type;
 8014cd0:	2003      	movs	r0, #3
    img->cf       = header.cf;
 8014cd2:	7c1b      	ldrb	r3, [r3, #16]
    img->src_type = src_type;
 8014cd4:	2634      	movs	r6, #52	; 0x34
    img->cf       = header.cf;
 8014cd6:	06db      	lsls	r3, r3, #27
    img->src_type = src_type;
 8014cd8:	0e5b      	lsrs	r3, r3, #25
 8014cda:	4005      	ands	r5, r0
 8014cdc:	431d      	orrs	r5, r3
 8014cde:	237f      	movs	r3, #127	; 0x7f
    img->w        = header.w;
 8014ce0:	8522      	strh	r2, [r4, #40]	; 0x28
    img->h        = header.h;
 8014ce2:	8561      	strh	r1, [r4, #42]	; 0x2a
    img->src_type = src_type;
 8014ce4:	5da0      	ldrb	r0, [r4, r6]
    img->pivot.x = header.w / 2;
 8014ce6:	1052      	asrs	r2, r2, #1
    img->src_type = src_type;
 8014ce8:	4398      	bics	r0, r3
 8014cea:	4305      	orrs	r5, r0
    img->pivot.y = header.h / 2;
 8014cec:	1049      	asrs	r1, r1, #1
    img->src_type = src_type;
 8014cee:	55a5      	strb	r5, [r4, r6]
    lv_obj_refresh_self_size(obj);
 8014cf0:	0020      	movs	r0, r4
    img->pivot.x = header.w / 2;
 8014cf2:	85e2      	strh	r2, [r4, #46]	; 0x2e
    img->pivot.y = header.h / 2;
 8014cf4:	8621      	strh	r1, [r4, #48]	; 0x30
    lv_obj_refresh_self_size(obj);
 8014cf6:	f7f1 f92b 	bl	8005f50 <lv_obj_refresh_self_size>
    if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_size(obj);
 8014cfa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d104      	bne.n	8014d0a <lv_img_set_src+0x86>
 8014d00:	3301      	adds	r3, #1
 8014d02:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8014d04:	33ff      	adds	r3, #255	; 0xff
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d002      	beq.n	8014d10 <lv_img_set_src+0x8c>
 8014d0a:	0020      	movs	r0, r4
 8014d0c:	f7f0 fd2e 	bl	800576c <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 8014d10:	0020      	movs	r0, r4
 8014d12:	f7f1 fc15 	bl	8006540 <lv_obj_invalidate>
}
 8014d16:	b006      	add	sp, #24
 8014d18:	bc80      	pop	{r7}
 8014d1a:	46b8      	mov	r8, r7
 8014d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 8014d1e:	1e6b      	subs	r3, r5, #1
 8014d20:	b2db      	uxtb	r3, r3
 8014d22:	2b01      	cmp	r3, #1
 8014d24:	d943      	bls.n	8014dae <lv_img_set_src+0x12a>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 8014d26:	2d02      	cmp	r5, #2
 8014d28:	d1ca      	bne.n	8014cc0 <lv_img_set_src+0x3c>
 8014d2a:	2257      	movs	r2, #87	; 0x57
 8014d2c:	2100      	movs	r1, #0
 8014d2e:	0020      	movs	r0, r4
 8014d30:	f7f4 fcde 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8014d34:	2258      	movs	r2, #88	; 0x58
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8014d36:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8014d38:	2100      	movs	r1, #0
 8014d3a:	0020      	movs	r0, r4
 8014d3c:	f7f4 fcd8 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8014d40:	2259      	movs	r2, #89	; 0x59
    return (lv_coord_t)v.num;
 8014d42:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8014d44:	2100      	movs	r1, #0
 8014d46:	0020      	movs	r0, r4
    return (lv_coord_t)v.num;
 8014d48:	4698      	mov	r8, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8014d4a:	f7f4 fcd1 	bl	80096f0 <lv_obj_get_style_prop>
        lv_txt_get_size(&size, src, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8014d4e:	2300      	movs	r3, #0
 8014d50:	9302      	str	r3, [sp, #8]
 8014d52:	4b31      	ldr	r3, [pc, #196]	; (8014e18 <lv_img_set_src+0x194>)
    return (lv_coord_t)v.num;
 8014d54:	b200      	sxth	r0, r0
 8014d56:	003a      	movs	r2, r7
 8014d58:	0031      	movs	r1, r6
 8014d5a:	9301      	str	r3, [sp, #4]
 8014d5c:	9000      	str	r0, [sp, #0]
 8014d5e:	4643      	mov	r3, r8
 8014d60:	a805      	add	r0, sp, #20
 8014d62:	f7fe ff25 	bl	8013bb0 <lv_txt_get_size>
        header.w = size.x;
 8014d66:	466b      	mov	r3, sp
 8014d68:	8a9b      	ldrh	r3, [r3, #20]
 8014d6a:	9804      	ldr	r0, [sp, #16]
 8014d6c:	055b      	lsls	r3, r3, #21
 8014d6e:	0ad9      	lsrs	r1, r3, #11
 8014d70:	0d5a      	lsrs	r2, r3, #21
 8014d72:	4b2a      	ldr	r3, [pc, #168]	; (8014e1c <lv_img_set_src+0x198>)
 8014d74:	4003      	ands	r3, r0
 8014d76:	430b      	orrs	r3, r1
        header.h = size.y;
 8014d78:	4669      	mov	r1, sp
        header.w = size.x;
 8014d7a:	9304      	str	r3, [sp, #16]
        header.h = size.y;
 8014d7c:	8ac8      	ldrh	r0, [r1, #22]
 8014d7e:	02db      	lsls	r3, r3, #11
 8014d80:	0540      	lsls	r0, r0, #21
 8014d82:	0d41      	lsrs	r1, r0, #21
 8014d84:	0edb      	lsrs	r3, r3, #27
 8014d86:	0c00      	lsrs	r0, r0, #16
 8014d88:	4303      	orrs	r3, r0
 8014d8a:	2012      	movs	r0, #18
 8014d8c:	4468      	add	r0, sp
 8014d8e:	8003      	strh	r3, [r0, #0]
 8014d90:	e79d      	b.n	8014cce <lv_img_set_src+0x4a>
        if(img->src_type == LV_IMG_SRC_SYMBOL || img->src_type == LV_IMG_SRC_FILE) {
 8014d92:	2334      	movs	r3, #52	; 0x34
 8014d94:	5ce0      	ldrb	r0, [r4, r3]
 8014d96:	4005      	ands	r5, r0
 8014d98:	3d01      	subs	r5, #1
 8014d9a:	2d01      	cmp	r5, #1
 8014d9c:	d91e      	bls.n	8014ddc <lv_img_set_src+0x158>
        img->src      = NULL;
 8014d9e:	2300      	movs	r3, #0
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8014da0:	2234      	movs	r2, #52	; 0x34
 8014da2:	2103      	movs	r1, #3
        img->src      = NULL;
 8014da4:	6223      	str	r3, [r4, #32]
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8014da6:	5ca3      	ldrb	r3, [r4, r2]
 8014da8:	430b      	orrs	r3, r1
 8014daa:	54a3      	strb	r3, [r4, r2]
        return;
 8014dac:	e7b3      	b.n	8014d16 <lv_img_set_src+0x92>
        if(img->src != src) {
 8014dae:	6a27      	ldr	r7, [r4, #32]
 8014db0:	42b7      	cmp	r7, r6
 8014db2:	d0b8      	beq.n	8014d26 <lv_img_set_src+0xa2>
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8014db4:	2334      	movs	r3, #52	; 0x34
 8014db6:	5ce2      	ldrb	r2, [r4, r3]
 8014db8:	3b31      	subs	r3, #49	; 0x31
 8014dba:	4013      	ands	r3, r2
 8014dbc:	3b01      	subs	r3, #1
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8014dbe:	0030      	movs	r0, r6
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8014dc0:	2b01      	cmp	r3, #1
 8014dc2:	d915      	bls.n	8014df0 <lv_img_set_src+0x16c>
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8014dc4:	f7eb f9a8 	bl	8000118 <strlen>
 8014dc8:	3001      	adds	r0, #1
 8014dca:	f7fd f8ef 	bl	8011fac <lv_mem_alloc>
 8014dce:	1e07      	subs	r7, r0, #0
            LV_ASSERT_MALLOC(new_str);
 8014dd0:	d108      	bne.n	8014de4 <lv_img_set_src+0x160>
 8014dd2:	e7fe      	b.n	8014dd2 <lv_img_set_src+0x14e>
            lv_mem_free((void *)img->src);
 8014dd4:	6a20      	ldr	r0, [r4, #32]
 8014dd6:	f7fd f90b 	bl	8011ff0 <lv_mem_free>
 8014dda:	e770      	b.n	8014cbe <lv_img_set_src+0x3a>
            lv_mem_free((void *)img->src);
 8014ddc:	6a20      	ldr	r0, [r4, #32]
 8014dde:	f7fd f907 	bl	8011ff0 <lv_mem_free>
 8014de2:	e7dc      	b.n	8014d9e <lv_img_set_src+0x11a>
            strcpy(new_str, src);
 8014de4:	0031      	movs	r1, r6
 8014de6:	0038      	movs	r0, r7
 8014de8:	f006 fc30 	bl	801b64c <strcpy>
            img->src = new_str;
 8014dec:	6227      	str	r7, [r4, #32]
            if(old_src) lv_mem_free((void *)old_src);
 8014dee:	e79a      	b.n	8014d26 <lv_img_set_src+0xa2>
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8014df0:	f7eb f992 	bl	8000118 <strlen>
 8014df4:	3001      	adds	r0, #1
 8014df6:	f7fd f8d9 	bl	8011fac <lv_mem_alloc>
 8014dfa:	4680      	mov	r8, r0
            LV_ASSERT_MALLOC(new_str);
 8014dfc:	2800      	cmp	r0, #0
 8014dfe:	d0e8      	beq.n	8014dd2 <lv_img_set_src+0x14e>
            strcpy(new_str, src);
 8014e00:	0031      	movs	r1, r6
 8014e02:	f006 fc23 	bl	801b64c <strcpy>
            img->src = new_str;
 8014e06:	4643      	mov	r3, r8
 8014e08:	6223      	str	r3, [r4, #32]
            if(old_src) lv_mem_free((void *)old_src);
 8014e0a:	2f00      	cmp	r7, #0
 8014e0c:	d08b      	beq.n	8014d26 <lv_img_set_src+0xa2>
 8014e0e:	0038      	movs	r0, r7
 8014e10:	f7fd f8ee 	bl	8011ff0 <lv_mem_free>
 8014e14:	e787      	b.n	8014d26 <lv_img_set_src+0xa2>
 8014e16:	46c0      	nop			; (mov r8, r8)
 8014e18:	00001fff 	.word	0x00001fff
 8014e1c:	ffe003ff 	.word	0xffe003ff

08014e20 <lv_img_event>:
        lv_area_get_width(&area_transform), lv_area_get_height(&area_transform)
    };
}

static void lv_img_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8014e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e22:	46de      	mov	lr, fp
 8014e24:	4645      	mov	r5, r8
 8014e26:	4657      	mov	r7, sl
 8014e28:	464e      	mov	r6, r9
 8014e2a:	b5e0      	push	{r5, r6, r7, lr}
    LV_UNUSED(class_p);

    lv_event_code_t code = lv_event_get_code(e);
 8014e2c:	0008      	movs	r0, r1
{
 8014e2e:	b09d      	sub	sp, #116	; 0x74
 8014e30:	000c      	movs	r4, r1
    lv_event_code_t code = lv_event_get_code(e);
 8014e32:	f7ec ffcf 	bl	8001dd4 <lv_event_get_code>
 8014e36:	0005      	movs	r5, r0

    /*Ancestor events will be called during drawing*/
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 8014e38:	2815      	cmp	r0, #21
 8014e3a:	d032      	beq.n	8014ea2 <lv_img_event+0x82>
 8014e3c:	2818      	cmp	r0, #24
 8014e3e:	d10e      	bne.n	8014e5e <lv_img_event+0x3e>
        /*Call the ancestor's event handler*/
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
        if(res != LV_RES_OK) return;
    }

    lv_obj_t * obj = lv_event_get_target(e);
 8014e40:	0020      	movs	r0, r4
 8014e42:	f7ec ffc3 	bl	8001dcc <lv_event_get_target>
        else {
            p->x = img->w;
            p->y = img->h;
        }
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8014e46:	2392      	movs	r3, #146	; 0x92
 8014e48:	045b      	lsls	r3, r3, #17
 8014e4a:	40eb      	lsrs	r3, r5
 8014e4c:	07db      	lsls	r3, r3, #31
 8014e4e:	d42b      	bmi.n	8014ea8 <lv_img_event+0x88>
        draw_img(e);
    }
}
 8014e50:	b01d      	add	sp, #116	; 0x74
 8014e52:	bcf0      	pop	{r4, r5, r6, r7}
 8014e54:	46bb      	mov	fp, r7
 8014e56:	46b2      	mov	sl, r6
 8014e58:	46a9      	mov	r9, r5
 8014e5a:	46a0      	mov	r8, r4
 8014e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8014e5e:	0021      	movs	r1, r4
 8014e60:	48c6      	ldr	r0, [pc, #792]	; (801517c <lv_img_event+0x35c>)
 8014e62:	f7ec ff9b 	bl	8001d9c <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8014e66:	2801      	cmp	r0, #1
 8014e68:	d1f2      	bne.n	8014e50 <lv_img_event+0x30>
    lv_obj_t * obj = lv_event_get_target(e);
 8014e6a:	0020      	movs	r0, r4
 8014e6c:	f7ec ffae 	bl	8001dcc <lv_event_get_target>
 8014e70:	0007      	movs	r7, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8014e72:	2d2a      	cmp	r5, #42	; 0x2a
 8014e74:	d109      	bne.n	8014e8a <lv_img_event+0x6a>
        if(img->src_type == LV_IMG_SRC_SYMBOL) {
 8014e76:	2334      	movs	r3, #52	; 0x34
 8014e78:	5cc2      	ldrb	r2, [r0, r3]
 8014e7a:	3b31      	subs	r3, #49	; 0x31
 8014e7c:	4013      	ands	r3, r2
 8014e7e:	2b02      	cmp	r3, #2
 8014e80:	d100      	bne.n	8014e84 <lv_img_event+0x64>
 8014e82:	e105      	b.n	8015090 <lv_img_event+0x270>
            lv_obj_refresh_ext_draw_size(obj);
 8014e84:	f7f0 fc72 	bl	800576c <lv_obj_refresh_ext_draw_size>
 8014e88:	e7e2      	b.n	8014e50 <lv_img_event+0x30>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8014e8a:	2d13      	cmp	r5, #19
 8014e8c:	d100      	bne.n	8014e90 <lv_img_event+0x70>
 8014e8e:	e113      	b.n	80150b8 <lv_img_event+0x298>
    else if(code == LV_EVENT_HIT_TEST) {
 8014e90:	2d11      	cmp	r5, #17
 8014e92:	d100      	bne.n	8014e96 <lv_img_event+0x76>
 8014e94:	e152      	b.n	801513c <lv_img_event+0x31c>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8014e96:	2d2c      	cmp	r5, #44	; 0x2c
 8014e98:	d100      	bne.n	8014e9c <lv_img_event+0x7c>
 8014e9a:	e0fd      	b.n	8015098 <lv_img_event+0x278>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8014e9c:	2d18      	cmp	r5, #24
 8014e9e:	d8d7      	bhi.n	8014e50 <lv_img_event+0x30>
 8014ea0:	e7d1      	b.n	8014e46 <lv_img_event+0x26>
    lv_obj_t * obj = lv_event_get_target(e);
 8014ea2:	0020      	movs	r0, r4
 8014ea4:	f7ec ff92 	bl	8001dcc <lv_event_get_target>

static void draw_img(lv_event_t * e)
{
    lv_event_code_t code = lv_event_get_code(e);
 8014ea8:	0020      	movs	r0, r4
 8014eaa:	f7ec ff93 	bl	8001dd4 <lv_event_get_code>
 8014eae:	0006      	movs	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8014eb0:	0020      	movs	r0, r4
 8014eb2:	f7ec ff8b 	bl	8001dcc <lv_event_get_target>
 8014eb6:	0005      	movs	r5, r0
    lv_img_t * img = (lv_img_t *)obj;
    if(code == LV_EVENT_COVER_CHECK) {
 8014eb8:	2e12      	cmp	r6, #18
 8014eba:	d100      	bne.n	8014ebe <lv_img_event+0x9e>
 8014ebc:	e160      	b.n	8015180 <lv_img_event+0x360>
                info->res = LV_COVER_RES_NOT_COVER;
                return;
            }
        }
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 8014ebe:	2e15      	cmp	r6, #21
 8014ec0:	d001      	beq.n	8014ec6 <lv_img_event+0xa6>
 8014ec2:	2e18      	cmp	r6, #24
 8014ec4:	d1c4      	bne.n	8014e50 <lv_img_event+0x30>

        lv_coord_t obj_w = lv_obj_get_width(obj);
 8014ec6:	0028      	movs	r0, r5
 8014ec8:	f7f0 ff9c 	bl	8005e04 <lv_obj_get_width>
 8014ecc:	4680      	mov	r8, r0
        lv_coord_t obj_h = lv_obj_get_height(obj);
 8014ece:	0028      	movs	r0, r5
 8014ed0:	f7f0 ffa0 	bl	8005e14 <lv_obj_get_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8014ed4:	2232      	movs	r2, #50	; 0x32
 8014ed6:	2100      	movs	r1, #0
 8014ed8:	4681      	mov	r9, r0
 8014eda:	0028      	movs	r0, r5
 8014edc:	f7f4 fc08 	bl	80096f0 <lv_obj_get_style_prop>
 8014ee0:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014ee2:	2212      	movs	r2, #18
 8014ee4:	2100      	movs	r1, #0
 8014ee6:	0028      	movs	r0, r5
 8014ee8:	f7f4 fc02 	bl	80096f0 <lv_obj_get_style_prop>

        lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
        lv_coord_t pleft = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8014eec:	b2bb      	uxth	r3, r7
 8014eee:	469a      	mov	sl, r3
 8014ef0:	4450      	add	r0, sl
 8014ef2:	b283      	uxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014ef4:	2213      	movs	r2, #19
 8014ef6:	2100      	movs	r1, #0
 8014ef8:	0028      	movs	r0, r5
 8014efa:	469b      	mov	fp, r3
 8014efc:	f7f4 fbf8 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014f00:	2210      	movs	r2, #16
 8014f02:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8014f04:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014f06:	0028      	movs	r0, r5
 8014f08:	f7f4 fbf2 	bl	80096f0 <lv_obj_get_style_prop>
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
        lv_coord_t ptop = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8014f0c:	4450      	add	r0, sl
 8014f0e:	b287      	uxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8014f10:	2211      	movs	r2, #17
 8014f12:	2100      	movs	r1, #0
 8014f14:	0028      	movs	r0, r5
 8014f16:	9705      	str	r7, [sp, #20]
 8014f18:	f7f4 fbea 	bl	80096f0 <lv_obj_get_style_prop>
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;

        lv_point_t bg_pivot;
        bg_pivot.x = img->pivot.x + pleft;
        bg_pivot.y = img->pivot.y + ptop;
 8014f1c:	46bc      	mov	ip, r7
 8014f1e:	9007      	str	r0, [sp, #28]
        bg_pivot.x = img->pivot.x + pleft;
 8014f20:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
 8014f22:	aa0d      	add	r2, sp, #52	; 0x34
 8014f24:	445b      	add	r3, fp
 8014f26:	8013      	strh	r3, [r2, #0]
        bg_pivot.y = img->pivot.y + ptop;
 8014f28:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8014f2a:	4463      	add	r3, ip
 8014f2c:	8053      	strh	r3, [r2, #2]
        lv_area_t bg_coords;

        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8014f2e:	2335      	movs	r3, #53	; 0x35
 8014f30:	5ce9      	ldrb	r1, [r5, r3]
 8014f32:	3b32      	subs	r3, #50	; 0x32
 8014f34:	400b      	ands	r3, r1
 8014f36:	2b01      	cmp	r3, #1
 8014f38:	d100      	bne.n	8014f3c <lv_img_event+0x11c>
 8014f3a:	e174      	b.n	8015226 <lv_img_event+0x406>
            /*Object size equals to transformed image size*/
            lv_obj_get_coords(obj, &bg_coords);
        }
        else {
            _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
 8014f3c:	212c      	movs	r1, #44	; 0x2c
 8014f3e:	5e6b      	ldrsh	r3, [r5, r1]
 8014f40:	9201      	str	r2, [sp, #4]
 8014f42:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 8014f44:	af0e      	add	r7, sp, #56	; 0x38
 8014f46:	4641      	mov	r1, r8
 8014f48:	0038      	movs	r0, r7
 8014f4a:	9200      	str	r2, [sp, #0]
 8014f4c:	464a      	mov	r2, r9
 8014f4e:	f7f8 f887 	bl	800d060 <_lv_img_buf_get_transformed_area>
                                             img->angle, img->zoom, &bg_pivot);

            /*Modify the coordinates to draw the background for the rotated and scaled coordinates*/
            bg_coords.x1 += obj->coords.x1;
 8014f52:	2210      	movs	r2, #16
 8014f54:	5eab      	ldrsh	r3, [r5, r2]
 8014f56:	8838      	ldrh	r0, [r7, #0]
 8014f58:	9303      	str	r3, [sp, #12]
 8014f5a:	8a2a      	ldrh	r2, [r5, #16]
 8014f5c:	1810      	adds	r0, r2, r0
 8014f5e:	b200      	sxth	r0, r0
 8014f60:	8038      	strh	r0, [r7, #0]
            bg_coords.y1 += obj->coords.y1;
 8014f62:	2112      	movs	r1, #18
 8014f64:	5e6b      	ldrsh	r3, [r5, r1]
 8014f66:	9304      	str	r3, [sp, #16]
 8014f68:	8a6b      	ldrh	r3, [r5, #18]
 8014f6a:	8879      	ldrh	r1, [r7, #2]
 8014f6c:	1859      	adds	r1, r3, r1
 8014f6e:	b209      	sxth	r1, r1
 8014f70:	9102      	str	r1, [sp, #8]
 8014f72:	8079      	strh	r1, [r7, #2]
            bg_coords.x2 += obj->coords.x1;
 8014f74:	88b9      	ldrh	r1, [r7, #4]
 8014f76:	468c      	mov	ip, r1
            bg_coords.y2 += obj->coords.y1;
 8014f78:	88f9      	ldrh	r1, [r7, #6]
            bg_coords.x2 += obj->coords.x1;
 8014f7a:	4462      	add	r2, ip
            bg_coords.y2 += obj->coords.y1;
 8014f7c:	468c      	mov	ip, r1
 8014f7e:	4463      	add	r3, ip
 8014f80:	b21b      	sxth	r3, r3
 8014f82:	469c      	mov	ip, r3
            bg_coords.x2 += obj->coords.x1;
 8014f84:	b212      	sxth	r2, r2
 8014f86:	80ba      	strh	r2, [r7, #4]
            bg_coords.y2 += obj->coords.y1;
 8014f88:	80fb      	strh	r3, [r7, #6]
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
    dest->y1 = src->y1;
    dest->x2 = src->x2;
 8014f8a:	2314      	movs	r3, #20
 8014f8c:	5ee9      	ldrsh	r1, [r5, r3]
    dest->x1 = src->x1;
 8014f8e:	8228      	strh	r0, [r5, #16]
    dest->x2 = src->x2;
 8014f90:	4689      	mov	r9, r1
    dest->y2 = src->y2;
 8014f92:	2316      	movs	r3, #22
 8014f94:	5ee9      	ldrsh	r1, [r5, r3]
    dest->y1 = src->y1;
 8014f96:	9b02      	ldr	r3, [sp, #8]
    dest->y2 = src->y2;
 8014f98:	4688      	mov	r8, r1
    dest->y1 = src->y1;
 8014f9a:	826b      	strh	r3, [r5, #18]
    dest->y2 = src->y2;
 8014f9c:	4663      	mov	r3, ip

        lv_area_t ori_coords;
        lv_area_copy(&ori_coords, &obj->coords);
        lv_area_copy(&obj->coords, &bg_coords);

        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8014f9e:	0021      	movs	r1, r4
 8014fa0:	4876      	ldr	r0, [pc, #472]	; (801517c <lv_img_event+0x35c>)
    dest->x2 = src->x2;
 8014fa2:	82aa      	strh	r2, [r5, #20]
    dest->y2 = src->y2;
 8014fa4:	82eb      	strh	r3, [r5, #22]
 8014fa6:	f7ec fef9 	bl	8001d9c <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8014faa:	2801      	cmp	r0, #1
 8014fac:	d000      	beq.n	8014fb0 <lv_img_event+0x190>
 8014fae:	e74f      	b.n	8014e50 <lv_img_event+0x30>
    dest->x1 = src->x1;
 8014fb0:	9b03      	ldr	r3, [sp, #12]
 8014fb2:	822b      	strh	r3, [r5, #16]
    dest->y1 = src->y1;
 8014fb4:	9b04      	ldr	r3, [sp, #16]
 8014fb6:	826b      	strh	r3, [r5, #18]
    dest->x2 = src->x2;
 8014fb8:	464b      	mov	r3, r9
 8014fba:	82ab      	strh	r3, [r5, #20]
    dest->y2 = src->y2;
 8014fbc:	4643      	mov	r3, r8
 8014fbe:	82eb      	strh	r3, [r5, #22]

        lv_area_copy(&obj->coords, &ori_coords);

        if(code == LV_EVENT_DRAW_MAIN) {
 8014fc0:	2e15      	cmp	r6, #21
 8014fc2:	d000      	beq.n	8014fc6 <lv_img_event+0x1a6>
 8014fc4:	e744      	b.n	8014e50 <lv_img_event+0x30>
            if(img->h == 0 || img->w == 0) return;
 8014fc6:	222a      	movs	r2, #42	; 0x2a
 8014fc8:	5eab      	ldrsh	r3, [r5, r2]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d100      	bne.n	8014fd0 <lv_img_event+0x1b0>
 8014fce:	e73f      	b.n	8014e50 <lv_img_event+0x30>
 8014fd0:	2228      	movs	r2, #40	; 0x28
 8014fd2:	5eab      	ldrsh	r3, [r5, r2]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d100      	bne.n	8014fda <lv_img_event+0x1ba>
 8014fd8:	e73a      	b.n	8014e50 <lv_img_event+0x30>
            if(img->zoom == 0) return;
 8014fda:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d100      	bne.n	8014fe2 <lv_img_event+0x1c2>
 8014fe0:	e736      	b.n	8014e50 <lv_img_event+0x30>

            lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8014fe2:	0020      	movs	r0, r4
 8014fe4:	f7ec ff58 	bl	8001e98 <lv_event_get_draw_ctx>
    dest->x1 = src->x1;
 8014fe8:	2310      	movs	r3, #16
 8014fea:	5eec      	ldrsh	r4, [r5, r3]
    dest->y1 = src->y1;
 8014fec:	2212      	movs	r2, #18
 8014fee:	5eab      	ldrsh	r3, [r5, r2]
 8014ff0:	4680      	mov	r8, r0
 8014ff2:	9303      	str	r3, [sp, #12]
    dest->x2 = src->x2;
 8014ff4:	2214      	movs	r2, #20
 8014ff6:	5eab      	ldrsh	r3, [r5, r2]
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
 8014ff8:	ae14      	add	r6, sp, #80	; 0x50
 8014ffa:	9304      	str	r3, [sp, #16]
    dest->y2 = src->y2;
 8014ffc:	2216      	movs	r2, #22
 8014ffe:	5eab      	ldrsh	r3, [r5, r2]
 8015000:	9308      	str	r3, [sp, #32]
 8015002:	222c      	movs	r2, #44	; 0x2c
 8015004:	5eab      	ldrsh	r3, [r5, r2]
 8015006:	212a      	movs	r1, #42	; 0x2a
 8015008:	5e6a      	ldrsh	r2, [r5, r1]
 801500a:	2028      	movs	r0, #40	; 0x28
 801500c:	5e29      	ldrsh	r1, [r5, r0]
                                     img->angle, img->zoom, &img->pivot);
 801500e:	0028      	movs	r0, r5
 8015010:	302e      	adds	r0, #46	; 0x2e
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
 8015012:	9001      	str	r0, [sp, #4]
 8015014:	8e68      	ldrh	r0, [r5, #50]	; 0x32
 8015016:	9000      	str	r0, [sp, #0]
 8015018:	0030      	movs	r0, r6
 801501a:	f7f8 f821 	bl	800d060 <_lv_img_buf_get_transformed_area>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801501e:	88b3      	ldrh	r3, [r6, #4]
 8015020:	8832      	ldrh	r2, [r6, #0]
 8015022:	3301      	adds	r3, #1
 8015024:	1a9b      	subs	r3, r3, r2
 8015026:	b29b      	uxth	r3, r3
 8015028:	4699      	mov	r9, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801502a:	88f3      	ldrh	r3, [r6, #6]
 801502c:	8872      	ldrh	r2, [r6, #2]
 801502e:	3301      	adds	r3, #1
 8015030:	1a9b      	subs	r3, r3, r2
 8015032:	b29b      	uxth	r3, r3
 8015034:	9302      	str	r3, [sp, #8]
            lv_area_t img_max_area;
            lv_area_copy(&img_max_area, &obj->coords);

            lv_point_t img_size_final = lv_img_get_transformed_size(obj);

            if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8015036:	2335      	movs	r3, #53	; 0x35
 8015038:	5cea      	ldrb	r2, [r5, r3]
 801503a:	3b32      	subs	r3, #50	; 0x32
 801503c:	4013      	ands	r3, r2
 801503e:	2b01      	cmp	r3, #1
 8015040:	d100      	bne.n	8015044 <lv_img_event+0x224>
 8015042:	e216      	b.n	8015472 <lv_img_event+0x652>
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
                img_max_area.y2 -= ((img->h - img_size_final.y) + 1) / 2;
            }
            else {
                img_max_area.x2 = img_max_area.x1 + lv_area_get_width(&bg_coords) - 1;
 8015044:	b2a1      	uxth	r1, r4
 8015046:	468c      	mov	ip, r1
 8015048:	9109      	str	r1, [sp, #36]	; 0x24
 801504a:	88bb      	ldrh	r3, [r7, #4]
 801504c:	883a      	ldrh	r2, [r7, #0]
 801504e:	1a9b      	subs	r3, r3, r2
 8015050:	4463      	add	r3, ip
 8015052:	b29b      	uxth	r3, r3
 8015054:	930a      	str	r3, [sp, #40]	; 0x28
                img_max_area.y2 = img_max_area.y1 + lv_area_get_height(&bg_coords) - 1;
 8015056:	466b      	mov	r3, sp
 8015058:	8999      	ldrh	r1, [r3, #12]
 801505a:	468c      	mov	ip, r1
 801505c:	910b      	str	r1, [sp, #44]	; 0x2c
 801505e:	88fb      	ldrh	r3, [r7, #6]
 8015060:	887a      	ldrh	r2, [r7, #2]
 8015062:	1a9b      	subs	r3, r3, r2
 8015064:	4463      	add	r3, ip
 8015066:	b29b      	uxth	r3, r3
 8015068:	9308      	str	r3, [sp, #32]
            img_max_area.x1 += pleft;
            img_max_area.y1 += ptop;
            img_max_area.x2 -= pright;
            img_max_area.y2 -= pbottom;

            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_VARIABLE) {
 801506a:	2434      	movs	r4, #52	; 0x34
 801506c:	5d2b      	ldrb	r3, [r5, r4]
 801506e:	079a      	lsls	r2, r3, #30
 8015070:	d400      	bmi.n	8015074 <lv_img_event+0x254>
 8015072:	e15d      	b.n	8015330 <lv_img_event+0x510>
        lv_area_copy(&obj->coords, &bg_coords);
 8015074:	002c      	movs	r4, r5
                        lv_draw_img(draw_ctx, &img_dsc, &coords_tmp, img->src);
                    }
                }
                draw_ctx->clip_area = clip_area_ori;
            }
            else if(img->src_type == LV_IMG_SRC_SYMBOL) {
 8015076:	2203      	movs	r2, #3
        lv_area_copy(&obj->coords, &bg_coords);
 8015078:	3410      	adds	r4, #16
            else if(img->src_type == LV_IMG_SRC_SYMBOL) {
 801507a:	4013      	ands	r3, r2
 801507c:	2b02      	cmp	r3, #2
 801507e:	d100      	bne.n	8015082 <lv_img_event+0x262>
 8015080:	e22e      	b.n	80154e0 <lv_img_event+0x6c0>
                lv_draw_label(draw_ctx, &label_dsc, &obj->coords, img->src, NULL);
            }
            else {
                /*Trigger the error handler of image draw*/
                LV_LOG_WARN("draw_img: image source type is unknown");
                lv_draw_img(draw_ctx, NULL, &obj->coords, NULL);
 8015082:	2300      	movs	r3, #0
 8015084:	0022      	movs	r2, r4
 8015086:	2100      	movs	r1, #0
 8015088:	4640      	mov	r0, r8
 801508a:	f7f7 f9d7 	bl	800c43c <lv_draw_img>
 801508e:	e6df      	b.n	8014e50 <lv_img_event+0x30>
            lv_img_set_src(obj, img->src);
 8015090:	6a01      	ldr	r1, [r0, #32]
 8015092:	f7ff fdf7 	bl	8014c84 <lv_img_set_src>
 8015096:	e6db      	b.n	8014e50 <lv_img_event+0x30>
        lv_point_t * p = lv_event_get_param(e);
 8015098:	0020      	movs	r0, r4
 801509a:	f7ec fe9f 	bl	8001ddc <lv_event_get_param>
        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 801509e:	2335      	movs	r3, #53	; 0x35
 80150a0:	5cfa      	ldrb	r2, [r7, r3]
 80150a2:	3b32      	subs	r3, #50	; 0x32
        lv_point_t * p = lv_event_get_param(e);
 80150a4:	0004      	movs	r4, r0
        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 80150a6:	4013      	ands	r3, r2
 80150a8:	2b01      	cmp	r3, #1
 80150aa:	d100      	bne.n	80150ae <lv_img_event+0x28e>
 80150ac:	e113      	b.n	80152d6 <lv_img_event+0x4b6>
            p->x = img->w;
 80150ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80150b0:	8003      	strh	r3, [r0, #0]
            p->y = img->h;
 80150b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80150b4:	8043      	strh	r3, [r0, #2]
 80150b6:	e6cb      	b.n	8014e50 <lv_img_event+0x30>
        lv_coord_t * s = lv_event_get_param(e);
 80150b8:	0020      	movs	r0, r4
 80150ba:	f7ec fe8f 	bl	8001ddc <lv_event_get_param>
        if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) {
 80150be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
        lv_coord_t * s = lv_event_get_param(e);
 80150c0:	0005      	movs	r5, r0
        if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) {
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d105      	bne.n	80150d2 <lv_img_event+0x2b2>
 80150c6:	3301      	adds	r3, #1
 80150c8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80150ca:	33ff      	adds	r3, #255	; 0xff
 80150cc:	429a      	cmp	r2, r3
 80150ce:	d100      	bne.n	80150d2 <lv_img_event+0x2b2>
 80150d0:	e6be      	b.n	8014e50 <lv_img_event+0x30>
            lv_coord_t w = lv_obj_get_width(obj);
 80150d2:	0038      	movs	r0, r7
 80150d4:	f7f0 fe96 	bl	8005e04 <lv_obj_get_width>
 80150d8:	4681      	mov	r9, r0
            lv_coord_t h = lv_obj_get_height(obj);
 80150da:	0038      	movs	r0, r7
 80150dc:	f7f0 fe9a 	bl	8005e14 <lv_obj_get_height>
            _lv_img_buf_get_transformed_area(&a, w, h, img->angle, img->zoom, &img->pivot);
 80150e0:	222c      	movs	r2, #44	; 0x2c
 80150e2:	5ebb      	ldrsh	r3, [r7, r2]
 80150e4:	003a      	movs	r2, r7
 80150e6:	322e      	adds	r2, #46	; 0x2e
 80150e8:	9201      	str	r2, [sp, #4]
 80150ea:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80150ec:	ae14      	add	r6, sp, #80	; 0x50
 80150ee:	4649      	mov	r1, r9
 80150f0:	9200      	str	r2, [sp, #0]
            lv_coord_t h = lv_obj_get_height(obj);
 80150f2:	4680      	mov	r8, r0
            _lv_img_buf_get_transformed_area(&a, w, h, img->angle, img->zoom, &img->pivot);
 80150f4:	0002      	movs	r2, r0
 80150f6:	0030      	movs	r0, r6
 80150f8:	f7f7 ffb2 	bl	800d060 <_lv_img_buf_get_transformed_area>
            *s = LV_MAX(*s, -a.x1);
 80150fc:	2200      	movs	r2, #0
 80150fe:	5eb3      	ldrsh	r3, [r6, r2]
 8015100:	2100      	movs	r1, #0
 8015102:	5e6a      	ldrsh	r2, [r5, r1]
 8015104:	425b      	negs	r3, r3
 8015106:	4293      	cmp	r3, r2
 8015108:	db36      	blt.n	8015178 <lv_img_event+0x358>
 801510a:	b21b      	sxth	r3, r3
 801510c:	802b      	strh	r3, [r5, #0]
            *s = LV_MAX(*s, -a.y1);
 801510e:	2202      	movs	r2, #2
 8015110:	5eb4      	ldrsh	r4, [r6, r2]
 8015112:	4264      	negs	r4, r4
 8015114:	429c      	cmp	r4, r3
 8015116:	db2d      	blt.n	8015174 <lv_img_event+0x354>
 8015118:	b224      	sxth	r4, r4
 801511a:	802c      	strh	r4, [r5, #0]
            *s = LV_MAX(*s, a.x2 - w);
 801511c:	2204      	movs	r2, #4
 801511e:	5eb3      	ldrsh	r3, [r6, r2]
 8015120:	464a      	mov	r2, r9
 8015122:	1a9b      	subs	r3, r3, r2
 8015124:	42a3      	cmp	r3, r4
 8015126:	db23      	blt.n	8015170 <lv_img_event+0x350>
 8015128:	b21b      	sxth	r3, r3
 801512a:	802b      	strh	r3, [r5, #0]
            *s = LV_MAX(*s, a.y2 - h);
 801512c:	2206      	movs	r2, #6
 801512e:	5eb0      	ldrsh	r0, [r6, r2]
 8015130:	4642      	mov	r2, r8
 8015132:	1a80      	subs	r0, r0, r2
 8015134:	4298      	cmp	r0, r3
 8015136:	db18      	blt.n	801516a <lv_img_event+0x34a>
 8015138:	8028      	strh	r0, [r5, #0]
 801513a:	e689      	b.n	8014e50 <lv_img_event+0x30>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 801513c:	0020      	movs	r0, r4
 801513e:	f7ec fe4d 	bl	8001ddc <lv_event_get_param>
 8015142:	0004      	movs	r4, r0
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8015144:	0038      	movs	r0, r7
 8015146:	2328      	movs	r3, #40	; 0x28
 8015148:	5efd      	ldrsh	r5, [r7, r3]
 801514a:	f7f0 fe5b 	bl	8005e04 <lv_obj_get_width>
 801514e:	4285      	cmp	r5, r0
 8015150:	d100      	bne.n	8015154 <lv_img_event+0x334>
 8015152:	e07e      	b.n	8015252 <lv_img_event+0x432>
            lv_obj_get_click_area(obj, &a);
 8015154:	0038      	movs	r0, r7
 8015156:	a914      	add	r1, sp, #80	; 0x50
 8015158:	f7f2 fbd0 	bl	80078fc <lv_obj_get_click_area>
            info->res = _lv_area_is_point_on(&a, info->point, 0);
 801515c:	2200      	movs	r2, #0
 801515e:	6821      	ldr	r1, [r4, #0]
 8015160:	a814      	add	r0, sp, #80	; 0x50
 8015162:	f7fc f979 	bl	8011458 <_lv_area_is_point_on>
 8015166:	7120      	strb	r0, [r4, #4]
 8015168:	e672      	b.n	8014e50 <lv_img_event+0x30>
            *s = LV_MAX(*s, a.y2 - h);
 801516a:	0018      	movs	r0, r3
 801516c:	8028      	strh	r0, [r5, #0]
 801516e:	e66f      	b.n	8014e50 <lv_img_event+0x30>
            *s = LV_MAX(*s, a.x2 - w);
 8015170:	0023      	movs	r3, r4
 8015172:	e7d9      	b.n	8015128 <lv_img_event+0x308>
            *s = LV_MAX(*s, -a.y1);
 8015174:	001c      	movs	r4, r3
 8015176:	e7cf      	b.n	8015118 <lv_img_event+0x2f8>
            *s = LV_MAX(*s, -a.x1);
 8015178:	0013      	movs	r3, r2
 801517a:	e7c6      	b.n	801510a <lv_img_event+0x2ea>
 801517c:	0801bef0 	.word	0x0801bef0
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8015180:	0020      	movs	r0, r4
 8015182:	f7ec fe2b 	bl	8001ddc <lv_event_get_param>
        if(info->res == LV_COVER_RES_MASKED) return;
 8015186:	7803      	ldrb	r3, [r0, #0]
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8015188:	0006      	movs	r6, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 801518a:	2b02      	cmp	r3, #2
 801518c:	d100      	bne.n	8015190 <lv_img_event+0x370>
 801518e:	e65f      	b.n	8014e50 <lv_img_event+0x30>
        if(img->src_type == LV_IMG_SRC_UNKNOWN || img->src_type == LV_IMG_SRC_SYMBOL) {
 8015190:	2334      	movs	r3, #52	; 0x34
 8015192:	5cea      	ldrb	r2, [r5, r3]
 8015194:	0793      	lsls	r3, r2, #30
 8015196:	d443      	bmi.n	8015220 <lv_img_event+0x400>
        if(img->cf != LV_IMG_CF_TRUE_COLOR && img->cf != LV_IMG_CF_RAW) {
 8015198:	237c      	movs	r3, #124	; 0x7c
 801519a:	4013      	ands	r3, r2
 801519c:	2b10      	cmp	r3, #16
 801519e:	d001      	beq.n	80151a4 <lv_img_event+0x384>
 80151a0:	2b04      	cmp	r3, #4
 80151a2:	d13d      	bne.n	8015220 <lv_img_event+0x400>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 80151a4:	2246      	movs	r2, #70	; 0x46
 80151a6:	2100      	movs	r1, #0
 80151a8:	0028      	movs	r0, r5
 80151aa:	f7f4 faa1 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80151ae:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_img_opa(obj, LV_PART_MAIN) != LV_OPA_COVER) {
 80151b0:	28ff      	cmp	r0, #255	; 0xff
 80151b2:	d135      	bne.n	8015220 <lv_img_event+0x400>
        if(img->angle != 0) {
 80151b4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d132      	bne.n	8015220 <lv_img_event+0x400>
        const lv_area_t * clip_area = lv_event_get_param(e);
 80151ba:	0020      	movs	r0, r4
 80151bc:	f7ec fe0e 	bl	8001ddc <lv_event_get_param>
        if(img->zoom == LV_IMG_ZOOM_NONE) {
 80151c0:	2380      	movs	r3, #128	; 0x80
 80151c2:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
        const lv_area_t * clip_area = lv_event_get_param(e);
 80151c4:	0007      	movs	r7, r0
        if(img->zoom == LV_IMG_ZOOM_NONE) {
 80151c6:	005b      	lsls	r3, r3, #1
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d100      	bne.n	80151ce <lv_img_event+0x3ae>
 80151cc:	e09d      	b.n	801530a <lv_img_event+0x4ea>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(obj), lv_obj_get_height(obj), 0, img->zoom, &img->pivot);
 80151ce:	0028      	movs	r0, r5
 80151d0:	f7f0 fe18 	bl	8005e04 <lv_obj_get_width>
 80151d4:	4680      	mov	r8, r0
 80151d6:	0028      	movs	r0, r5
 80151d8:	f7f0 fe1c 	bl	8005e14 <lv_obj_get_height>
 80151dc:	002b      	movs	r3, r5
 80151de:	332e      	adds	r3, #46	; 0x2e
 80151e0:	9301      	str	r3, [sp, #4]
 80151e2:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 80151e4:	ac14      	add	r4, sp, #80	; 0x50
 80151e6:	0002      	movs	r2, r0
 80151e8:	4641      	mov	r1, r8
 80151ea:	0020      	movs	r0, r4
 80151ec:	9300      	str	r3, [sp, #0]
 80151ee:	2300      	movs	r3, #0
 80151f0:	f7f7 ff36 	bl	800d060 <_lv_img_buf_get_transformed_area>
            a.x1 += obj->coords.x1;
 80151f4:	8a2a      	ldrh	r2, [r5, #16]
 80151f6:	8823      	ldrh	r3, [r4, #0]
            a.y1 += obj->coords.y1;
 80151f8:	8861      	ldrh	r1, [r4, #2]
            a.x1 += obj->coords.x1;
 80151fa:	18d3      	adds	r3, r2, r3
 80151fc:	8023      	strh	r3, [r4, #0]
            a.y1 += obj->coords.y1;
 80151fe:	8a6b      	ldrh	r3, [r5, #18]
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 8015200:	0038      	movs	r0, r7
            a.y1 += obj->coords.y1;
 8015202:	1859      	adds	r1, r3, r1
 8015204:	8061      	strh	r1, [r4, #2]
            a.x2 += obj->coords.x1;
 8015206:	88a1      	ldrh	r1, [r4, #4]
 8015208:	1852      	adds	r2, r2, r1
 801520a:	80a2      	strh	r2, [r4, #4]
            a.y2 += obj->coords.y1;
 801520c:	88e2      	ldrh	r2, [r4, #6]
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 801520e:	0021      	movs	r1, r4
            a.y2 += obj->coords.y1;
 8015210:	189b      	adds	r3, r3, r2
 8015212:	80e3      	strh	r3, [r4, #6]
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 8015214:	2200      	movs	r2, #0
 8015216:	f7fc fa3d 	bl	8011694 <_lv_area_is_in>
 801521a:	2800      	cmp	r0, #0
 801521c:	d000      	beq.n	8015220 <lv_img_event+0x400>
 801521e:	e617      	b.n	8014e50 <lv_img_event+0x30>
                info->res = LV_COVER_RES_NOT_COVER;
 8015220:	2301      	movs	r3, #1
 8015222:	7033      	strb	r3, [r6, #0]
                return;
 8015224:	e614      	b.n	8014e50 <lv_img_event+0x30>
            lv_obj_get_coords(obj, &bg_coords);
 8015226:	af0e      	add	r7, sp, #56	; 0x38
 8015228:	0039      	movs	r1, r7
 801522a:	0028      	movs	r0, r5
 801522c:	f7f0 fd88 	bl	8005d40 <lv_obj_get_coords>
    dest->x1 = src->x1;
 8015230:	2210      	movs	r2, #16
 8015232:	5eab      	ldrsh	r3, [r5, r2]
 8015234:	9303      	str	r3, [sp, #12]
    dest->y1 = src->y1;
 8015236:	2212      	movs	r2, #18
 8015238:	5eab      	ldrsh	r3, [r5, r2]
 801523a:	9304      	str	r3, [sp, #16]
 801523c:	2302      	movs	r3, #2
 801523e:	5efa      	ldrsh	r2, [r7, r3]
    dest->x1 = src->x1;
 8015240:	2300      	movs	r3, #0
 8015242:	5ef8      	ldrsh	r0, [r7, r3]
    dest->y1 = src->y1;
 8015244:	9202      	str	r2, [sp, #8]
    dest->y2 = src->y2;
 8015246:	2306      	movs	r3, #6
 8015248:	5ef9      	ldrsh	r1, [r7, r3]
    dest->x2 = src->x2;
 801524a:	2304      	movs	r3, #4
 801524c:	5efa      	ldrsh	r2, [r7, r3]
    dest->y2 = src->y2;
 801524e:	468c      	mov	ip, r1
 8015250:	e69b      	b.n	8014f8a <lv_img_event+0x16a>
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8015252:	0038      	movs	r0, r7
 8015254:	232a      	movs	r3, #42	; 0x2a
 8015256:	5efd      	ldrsh	r5, [r7, r3]
 8015258:	f7f0 fddc 	bl	8005e14 <lv_obj_get_height>
 801525c:	4285      	cmp	r5, r0
 801525e:	d000      	beq.n	8015262 <lv_img_event+0x442>
 8015260:	e778      	b.n	8015154 <lv_img_event+0x334>
 8015262:	2380      	movs	r3, #128	; 0x80
 8015264:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8015266:	005b      	lsls	r3, r3, #1
 8015268:	429a      	cmp	r2, r3
 801526a:	d10b      	bne.n	8015284 <lv_img_event+0x464>
           (img->zoom != LV_IMG_ZOOM_NONE || img->angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 801526c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801526e:	2b00      	cmp	r3, #0
 8015270:	d108      	bne.n	8015284 <lv_img_event+0x464>
 8015272:	2328      	movs	r3, #40	; 0x28
 8015274:	5efa      	ldrsh	r2, [r7, r3]
 8015276:	0fd3      	lsrs	r3, r2, #31
 8015278:	189b      	adds	r3, r3, r2
 801527a:	212e      	movs	r1, #46	; 0x2e
 801527c:	5e7a      	ldrsh	r2, [r7, r1]
 801527e:	105b      	asrs	r3, r3, #1
 8015280:	429a      	cmp	r2, r3
 8015282:	d04b      	beq.n	801531c <lv_img_event+0x4fc>
            lv_coord_t w = lv_obj_get_width(obj);
 8015284:	0038      	movs	r0, r7
 8015286:	f7f0 fdbd 	bl	8005e04 <lv_obj_get_width>
 801528a:	0006      	movs	r6, r0
            lv_coord_t h = lv_obj_get_height(obj);
 801528c:	0038      	movs	r0, r7
 801528e:	f7f0 fdc1 	bl	8005e14 <lv_obj_get_height>
            _lv_img_buf_get_transformed_area(&coords, w, h, img->angle, img->zoom, &img->pivot);
 8015292:	212c      	movs	r1, #44	; 0x2c
 8015294:	5e7b      	ldrsh	r3, [r7, r1]
 8015296:	0039      	movs	r1, r7
 8015298:	312e      	adds	r1, #46	; 0x2e
 801529a:	9101      	str	r1, [sp, #4]
 801529c:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 801529e:	ad14      	add	r5, sp, #80	; 0x50
            lv_coord_t h = lv_obj_get_height(obj);
 80152a0:	0002      	movs	r2, r0
            _lv_img_buf_get_transformed_area(&coords, w, h, img->angle, img->zoom, &img->pivot);
 80152a2:	9100      	str	r1, [sp, #0]
 80152a4:	0028      	movs	r0, r5
 80152a6:	0031      	movs	r1, r6
 80152a8:	f7f7 feda 	bl	800d060 <_lv_img_buf_get_transformed_area>
            coords.x1 += obj->coords.x1;
 80152ac:	8a3a      	ldrh	r2, [r7, #16]
 80152ae:	882b      	ldrh	r3, [r5, #0]
            coords.y1 += obj->coords.y1;
 80152b0:	8869      	ldrh	r1, [r5, #2]
            coords.x1 += obj->coords.x1;
 80152b2:	18d3      	adds	r3, r2, r3
 80152b4:	802b      	strh	r3, [r5, #0]
            coords.y1 += obj->coords.y1;
 80152b6:	8a7b      	ldrh	r3, [r7, #18]
            info->res = _lv_area_is_point_on(&coords, info->point, 0);
 80152b8:	0028      	movs	r0, r5
            coords.y1 += obj->coords.y1;
 80152ba:	1859      	adds	r1, r3, r1
 80152bc:	8069      	strh	r1, [r5, #2]
            coords.x2 += obj->coords.x1;
 80152be:	88a9      	ldrh	r1, [r5, #4]
 80152c0:	1852      	adds	r2, r2, r1
 80152c2:	80aa      	strh	r2, [r5, #4]
            coords.y2 += obj->coords.y1;
 80152c4:	88ea      	ldrh	r2, [r5, #6]
            info->res = _lv_area_is_point_on(&coords, info->point, 0);
 80152c6:	6821      	ldr	r1, [r4, #0]
            coords.y2 += obj->coords.y1;
 80152c8:	189b      	adds	r3, r3, r2
 80152ca:	80eb      	strh	r3, [r5, #6]
            info->res = _lv_area_is_point_on(&coords, info->point, 0);
 80152cc:	2200      	movs	r2, #0
 80152ce:	f7fc f8c3 	bl	8011458 <_lv_area_is_point_on>
 80152d2:	7120      	strb	r0, [r4, #4]
           (img->zoom != LV_IMG_ZOOM_NONE || img->angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 80152d4:	e5bc      	b.n	8014e50 <lv_img_event+0x30>
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
 80152d6:	222c      	movs	r2, #44	; 0x2c
 80152d8:	5ebb      	ldrsh	r3, [r7, r2]
 80152da:	212a      	movs	r1, #42	; 0x2a
 80152dc:	5e7a      	ldrsh	r2, [r7, r1]
 80152de:	2028      	movs	r0, #40	; 0x28
 80152e0:	5e39      	ldrsh	r1, [r7, r0]
                                     img->angle, img->zoom, &img->pivot);
 80152e2:	0038      	movs	r0, r7
 80152e4:	302e      	adds	r0, #46	; 0x2e
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
 80152e6:	9001      	str	r0, [sp, #4]
 80152e8:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 80152ea:	ad14      	add	r5, sp, #80	; 0x50
 80152ec:	9000      	str	r0, [sp, #0]
 80152ee:	0028      	movs	r0, r5
 80152f0:	f7f7 feb6 	bl	800d060 <_lv_img_buf_get_transformed_area>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80152f4:	88aa      	ldrh	r2, [r5, #4]
 80152f6:	882b      	ldrh	r3, [r5, #0]
 80152f8:	3201      	adds	r2, #1
 80152fa:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80152fc:	88eb      	ldrh	r3, [r5, #6]
 80152fe:	8869      	ldrh	r1, [r5, #2]
 8015300:	3301      	adds	r3, #1
 8015302:	1a5b      	subs	r3, r3, r1
            *p = lv_img_get_transformed_size(obj);
 8015304:	8022      	strh	r2, [r4, #0]
 8015306:	8063      	strh	r3, [r4, #2]
 8015308:	e5a2      	b.n	8014e50 <lv_img_event+0x30>
            if(_lv_area_is_in(clip_area, &obj->coords, 0) == false) {
 801530a:	0029      	movs	r1, r5
 801530c:	2200      	movs	r2, #0
 801530e:	3110      	adds	r1, #16
 8015310:	f7fc f9c0 	bl	8011694 <_lv_area_is_in>
 8015314:	2800      	cmp	r0, #0
 8015316:	d000      	beq.n	801531a <lv_img_event+0x4fa>
 8015318:	e59a      	b.n	8014e50 <lv_img_event+0x30>
 801531a:	e781      	b.n	8015220 <lv_img_event+0x400>
           (img->zoom != LV_IMG_ZOOM_NONE || img->angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 801531c:	232a      	movs	r3, #42	; 0x2a
 801531e:	5efa      	ldrsh	r2, [r7, r3]
 8015320:	0fd3      	lsrs	r3, r2, #31
 8015322:	189b      	adds	r3, r3, r2
 8015324:	2130      	movs	r1, #48	; 0x30
 8015326:	5e7a      	ldrsh	r2, [r7, r1]
 8015328:	105b      	asrs	r3, r3, #1
 801532a:	429a      	cmp	r2, r3
 801532c:	d1aa      	bne.n	8015284 <lv_img_event+0x464>
 801532e:	e711      	b.n	8015154 <lv_img_event+0x334>
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8015330:	9806      	ldr	r0, [sp, #24]
 8015332:	4450      	add	r0, sl
 8015334:	b283      	uxth	r3, r0
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8015336:	9807      	ldr	r0, [sp, #28]
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8015338:	9304      	str	r3, [sp, #16]
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 801533a:	4450      	add	r0, sl
 801533c:	b281      	uxth	r1, r0
                lv_draw_img_dsc_init(&img_dsc);
 801533e:	0030      	movs	r0, r6
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8015340:	9103      	str	r1, [sp, #12]
                lv_draw_img_dsc_init(&img_dsc);
 8015342:	f7f7 f86b 	bl	800c41c <lv_draw_img_dsc_init>
                lv_obj_init_draw_img_dsc(obj, LV_PART_MAIN, &img_dsc);
 8015346:	0032      	movs	r2, r6
 8015348:	2100      	movs	r1, #0
 801534a:	0028      	movs	r0, r5
 801534c:	f7f0 f944 	bl	80055d8 <lv_obj_init_draw_img_dsc>
                img_dsc.antialias = img->antialias;
 8015350:	2101      	movs	r1, #1
                img_dsc.zoom = img->zoom;
 8015352:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
                img_dsc.antialias = img->antialias;
 8015354:	5d2a      	ldrb	r2, [r5, r4]
                img_dsc.zoom = img->zoom;
 8015356:	8073      	strh	r3, [r6, #2]
                img_dsc.angle = img->angle;
 8015358:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
                img_dsc.antialias = img->antialias;
 801535a:	09d2      	lsrs	r2, r2, #7
                img_dsc.angle = img->angle;
 801535c:	8033      	strh	r3, [r6, #0]
                img_dsc.pivot.x = img->pivot.x;
 801535e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
                img_clip_area.x1 = bg_coords.x1 + pleft;
 8015360:	ac10      	add	r4, sp, #64	; 0x40
                img_dsc.pivot.x = img->pivot.x;
 8015362:	80b3      	strh	r3, [r6, #4]
                img_dsc.pivot.y = img->pivot.y;
 8015364:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 8015366:	0020      	movs	r0, r4
                img_dsc.pivot.y = img->pivot.y;
 8015368:	80f3      	strh	r3, [r6, #6]
                img_dsc.antialias = img->antialias;
 801536a:	7d33      	ldrb	r3, [r6, #20]
 801536c:	438b      	bics	r3, r1
 801536e:	4313      	orrs	r3, r2
                img_clip_area.y1 = bg_coords.y1 + ptop;
 8015370:	9a05      	ldr	r2, [sp, #20]
                img_dsc.antialias = img->antialias;
 8015372:	7533      	strb	r3, [r6, #20]
                img_clip_area.y1 = bg_coords.y1 + ptop;
 8015374:	4694      	mov	ip, r2
                img_clip_area.x1 = bg_coords.x1 + pleft;
 8015376:	883b      	ldrh	r3, [r7, #0]
                img_clip_area.x2 = bg_coords.x2 - pright;
 8015378:	9a04      	ldr	r2, [sp, #16]
                img_clip_area.x1 = bg_coords.x1 + pleft;
 801537a:	445b      	add	r3, fp
 801537c:	8023      	strh	r3, [r4, #0]
                img_clip_area.y1 = bg_coords.y1 + ptop;
 801537e:	887b      	ldrh	r3, [r7, #2]
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 8015380:	9903      	ldr	r1, [sp, #12]
                img_clip_area.y1 = bg_coords.y1 + ptop;
 8015382:	4463      	add	r3, ip
 8015384:	8063      	strh	r3, [r4, #2]
                img_clip_area.x2 = bg_coords.x2 - pright;
 8015386:	88bb      	ldrh	r3, [r7, #4]
 8015388:	1a9b      	subs	r3, r3, r2
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801538a:	4642      	mov	r2, r8
                img_clip_area.x2 = bg_coords.x2 - pright;
 801538c:	80a3      	strh	r3, [r4, #4]
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 801538e:	88fb      	ldrh	r3, [r7, #6]
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8015390:	6892      	ldr	r2, [r2, #8]
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 8015392:	1a5b      	subs	r3, r3, r1
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8015394:	9206      	str	r2, [sp, #24]
 8015396:	0011      	movs	r1, r2
                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 8015398:	0022      	movs	r2, r4
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 801539a:	80e3      	strh	r3, [r4, #6]
                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 801539c:	f7fb fff6 	bl	801138c <_lv_area_intersect>
 80153a0:	2800      	cmp	r0, #0
 80153a2:	d100      	bne.n	80153a6 <lv_img_event+0x586>
 80153a4:	e554      	b.n	8014e50 <lv_img_event+0x30>
            img_max_area.y1 += ptop;
 80153a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80153a8:	9b05      	ldr	r3, [sp, #20]
 80153aa:	4694      	mov	ip, r2
                draw_ctx->clip_area = &img_clip_area;
 80153ac:	4642      	mov	r2, r8
 80153ae:	6094      	str	r4, [r2, #8]
                coords_tmp.y1 = img_max_area.y1 + img->offset.y;
 80153b0:	8cea      	ldrh	r2, [r5, #38]	; 0x26
            img_max_area.y1 += ptop;
 80153b2:	4463      	add	r3, ip
 80153b4:	b29b      	uxth	r3, r3
                coords_tmp.y1 = img_max_area.y1 + img->offset.y;
 80153b6:	189a      	adds	r2, r3, r2
 80153b8:	b291      	uxth	r1, r2
 80153ba:	ac12      	add	r4, sp, #72	; 0x48
 80153bc:	b212      	sxth	r2, r2
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 80153be:	b21b      	sxth	r3, r3
                coords_tmp.y1 = img_max_area.y1 + img->offset.y;
 80153c0:	8062      	strh	r2, [r4, #2]
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 80153c2:	4293      	cmp	r3, r2
 80153c4:	da02      	bge.n	80153cc <lv_img_event+0x5ac>
 80153c6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80153c8:	1acb      	subs	r3, r1, r3
 80153ca:	8063      	strh	r3, [r4, #2]
            img_max_area.y2 -= pbottom;
 80153cc:	9a03      	ldr	r2, [sp, #12]
 80153ce:	9b08      	ldr	r3, [sp, #32]
 80153d0:	1a9b      	subs	r3, r3, r2
 80153d2:	b21b      	sxth	r3, r3
 80153d4:	469a      	mov	sl, r3
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 80153d6:	2302      	movs	r3, #2
 80153d8:	5ee2      	ldrsh	r2, [r4, r3]
 80153da:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80153dc:	1e51      	subs	r1, r2, #1
 80153de:	185b      	adds	r3, r3, r1
 80153e0:	80e3      	strh	r3, [r4, #6]
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 80153e2:	4592      	cmp	sl, r2
 80153e4:	dd3b      	ble.n	801545e <lv_img_event+0x63e>
            img_max_area.x1 += pleft;
 80153e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153e8:	445b      	add	r3, fp
 80153ea:	b29a      	uxth	r2, r3
 80153ec:	b21b      	sxth	r3, r3
 80153ee:	4693      	mov	fp, r2
 80153f0:	9303      	str	r3, [sp, #12]
            img_max_area.x2 -= pright;
 80153f2:	9a04      	ldr	r2, [sp, #16]
 80153f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153f6:	1a9f      	subs	r7, r3, r2
 80153f8:	0033      	movs	r3, r6
 80153fa:	002e      	movs	r6, r5
 80153fc:	464d      	mov	r5, r9
 80153fe:	4699      	mov	r9, r3
 8015400:	b23f      	sxth	r7, r7
                    coords_tmp.x1 = img_max_area.x1 + img->offset.x;
 8015402:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 8015404:	9a03      	ldr	r2, [sp, #12]
                    coords_tmp.x1 = img_max_area.x1 + img->offset.x;
 8015406:	445b      	add	r3, fp
 8015408:	b299      	uxth	r1, r3
 801540a:	b21b      	sxth	r3, r3
 801540c:	8023      	strh	r3, [r4, #0]
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 801540e:	429a      	cmp	r2, r3
 8015410:	db29      	blt.n	8015466 <lv_img_event+0x646>
 8015412:	8d32      	ldrh	r2, [r6, #40]	; 0x28
                    coords_tmp.x2 = coords_tmp.x1 + img->w - 1;
 8015414:	1852      	adds	r2, r2, r1
 8015416:	3a01      	subs	r2, #1
 8015418:	80a2      	strh	r2, [r4, #4]
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 801541a:	429f      	cmp	r7, r3
 801541c:	dd52      	ble.n	80154c4 <lv_img_event+0x6a4>
 801541e:	003b      	movs	r3, r7
 8015420:	4647      	mov	r7, r8
 8015422:	4698      	mov	r8, r3
                        lv_draw_img(draw_ctx, &img_dsc, &coords_tmp, img->src);
 8015424:	0022      	movs	r2, r4
 8015426:	6a33      	ldr	r3, [r6, #32]
 8015428:	4649      	mov	r1, r9
 801542a:	0038      	movs	r0, r7
 801542c:	f7f7 f806 	bl	800c43c <lv_draw_img>
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 8015430:	8823      	ldrh	r3, [r4, #0]
 8015432:	88a2      	ldrh	r2, [r4, #4]
 8015434:	18eb      	adds	r3, r5, r3
 8015436:	b21b      	sxth	r3, r3
 8015438:	18aa      	adds	r2, r5, r2
 801543a:	8023      	strh	r3, [r4, #0]
 801543c:	80a2      	strh	r2, [r4, #4]
 801543e:	4598      	cmp	r8, r3
 8015440:	dcf0      	bgt.n	8015424 <lv_img_event+0x604>
 8015442:	4643      	mov	r3, r8
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 8015444:	9902      	ldr	r1, [sp, #8]
 8015446:	46b8      	mov	r8, r7
 8015448:	468c      	mov	ip, r1
 801544a:	001f      	movs	r7, r3
 801544c:	8863      	ldrh	r3, [r4, #2]
 801544e:	88e2      	ldrh	r2, [r4, #6]
 8015450:	4463      	add	r3, ip
 8015452:	b21b      	sxth	r3, r3
 8015454:	4462      	add	r2, ip
 8015456:	8063      	strh	r3, [r4, #2]
 8015458:	80e2      	strh	r2, [r4, #6]
 801545a:	459a      	cmp	sl, r3
 801545c:	dcd1      	bgt.n	8015402 <lv_img_event+0x5e2>
                draw_ctx->clip_area = clip_area_ori;
 801545e:	4643      	mov	r3, r8
 8015460:	9a06      	ldr	r2, [sp, #24]
 8015462:	609a      	str	r2, [r3, #8]
 8015464:	e4f4      	b.n	8014e50 <lv_img_event+0x30>
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 8015466:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8015468:	1a8b      	subs	r3, r1, r2
 801546a:	b299      	uxth	r1, r3
 801546c:	b21b      	sxth	r3, r3
 801546e:	8023      	strh	r3, [r4, #0]
 8015470:	e7d0      	b.n	8015414 <lv_img_event+0x5f4>
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 8015472:	2228      	movs	r2, #40	; 0x28
 8015474:	5eab      	ldrsh	r3, [r5, r2]
 8015476:	464a      	mov	r2, r9
 8015478:	b212      	sxth	r2, r2
 801547a:	1a9a      	subs	r2, r3, r2
 801547c:	3201      	adds	r2, #1
 801547e:	0fd3      	lsrs	r3, r2, #31
 8015480:	189b      	adds	r3, r3, r2
 8015482:	105b      	asrs	r3, r3, #1
 8015484:	425b      	negs	r3, r3
 8015486:	b29b      	uxth	r3, r3
 8015488:	191c      	adds	r4, r3, r4
 801548a:	b2a2      	uxth	r2, r4
 801548c:	9209      	str	r2, [sp, #36]	; 0x24
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
 801548e:	9a04      	ldr	r2, [sp, #16]
 8015490:	4694      	mov	ip, r2
 8015492:	4463      	add	r3, ip
 8015494:	b29b      	uxth	r3, r3
 8015496:	930a      	str	r3, [sp, #40]	; 0x28
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 8015498:	222a      	movs	r2, #42	; 0x2a
 801549a:	5eab      	ldrsh	r3, [r5, r2]
 801549c:	466a      	mov	r2, sp
 801549e:	2108      	movs	r1, #8
 80154a0:	5e52      	ldrsh	r2, [r2, r1]
 80154a2:	1a9a      	subs	r2, r3, r2
 80154a4:	3201      	adds	r2, #1
 80154a6:	0fd3      	lsrs	r3, r2, #31
 80154a8:	189b      	adds	r3, r3, r2
 80154aa:	105b      	asrs	r3, r3, #1
 80154ac:	9a03      	ldr	r2, [sp, #12]
 80154ae:	425b      	negs	r3, r3
 80154b0:	b29b      	uxth	r3, r3
 80154b2:	189a      	adds	r2, r3, r2
 80154b4:	b292      	uxth	r2, r2
 80154b6:	920b      	str	r2, [sp, #44]	; 0x2c
                img_max_area.y2 -= ((img->h - img_size_final.y) + 1) / 2;
 80154b8:	9a08      	ldr	r2, [sp, #32]
 80154ba:	4694      	mov	ip, r2
 80154bc:	4463      	add	r3, ip
 80154be:	b29b      	uxth	r3, r3
 80154c0:	9308      	str	r3, [sp, #32]
 80154c2:	e5d2      	b.n	801506a <lv_img_event+0x24a>
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 80154c4:	9a02      	ldr	r2, [sp, #8]
 80154c6:	8863      	ldrh	r3, [r4, #2]
 80154c8:	4694      	mov	ip, r2
 80154ca:	4463      	add	r3, ip
 80154cc:	b21b      	sxth	r3, r3
 80154ce:	4652      	mov	r2, sl
 80154d0:	9902      	ldr	r1, [sp, #8]
 80154d2:	459a      	cmp	sl, r3
 80154d4:	ddc3      	ble.n	801545e <lv_img_event+0x63e>
 80154d6:	18cb      	adds	r3, r1, r3
 80154d8:	b21b      	sxth	r3, r3
 80154da:	4293      	cmp	r3, r2
 80154dc:	dbfb      	blt.n	80154d6 <lv_img_event+0x6b6>
 80154de:	e7be      	b.n	801545e <lv_img_event+0x63e>
                lv_draw_label_dsc_init(&label_dsc);
 80154e0:	0030      	movs	r0, r6
 80154e2:	f7f7 f93d 	bl	800c760 <lv_draw_label_dsc_init>
                lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 80154e6:	0032      	movs	r2, r6
 80154e8:	0028      	movs	r0, r5
 80154ea:	2100      	movs	r1, #0
 80154ec:	f7f0 f822 	bl	8005534 <lv_obj_init_draw_label_dsc>
                lv_draw_label(draw_ctx, &label_dsc, &obj->coords, img->src, NULL);
 80154f0:	2300      	movs	r3, #0
 80154f2:	9300      	str	r3, [sp, #0]
 80154f4:	0022      	movs	r2, r4
 80154f6:	0031      	movs	r1, r6
 80154f8:	4640      	mov	r0, r8
 80154fa:	6a2b      	ldr	r3, [r5, #32]
 80154fc:	f7f7 f948 	bl	800c790 <lv_draw_label>
 8015500:	e4a6      	b.n	8014e50 <lv_img_event+0x30>
 8015502:	46c0      	nop			; (mov r8, r8)

08015504 <lv_label_destructor>:
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8015504:	2330      	movs	r3, #48	; 0x30
 8015506:	5ccb      	ldrb	r3, [r1, r3]
{
 8015508:	b510      	push	{r4, lr}
 801550a:	000c      	movs	r4, r1
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 801550c:	065b      	lsls	r3, r3, #25
 801550e:	d504      	bpl.n	801551a <lv_label_destructor+0x16>
 8015510:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8015512:	2800      	cmp	r0, #0
 8015514:	d001      	beq.n	801551a <lv_label_destructor+0x16>
        lv_mem_free(label->dot.tmp_ptr);
 8015516:	f7fc fd6b 	bl	8011ff0 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 801551a:	2230      	movs	r2, #48	; 0x30
 801551c:	2140      	movs	r1, #64	; 0x40
 801551e:	5ca3      	ldrb	r3, [r4, r2]
 8015520:	438b      	bics	r3, r1
 8015522:	54a3      	strb	r3, [r4, r2]
    label->dot.tmp_ptr   = NULL;
 8015524:	2200      	movs	r2, #0
 8015526:	6262      	str	r2, [r4, #36]	; 0x24
    if(!label->static_txt) lv_mem_free(label->text);
 8015528:	071b      	lsls	r3, r3, #28
 801552a:	d502      	bpl.n	8015532 <lv_label_destructor+0x2e>
    label->text = NULL;
 801552c:	2300      	movs	r3, #0
 801552e:	6223      	str	r3, [r4, #32]
}
 8015530:	bd10      	pop	{r4, pc}
    if(!label->static_txt) lv_mem_free(label->text);
 8015532:	6a20      	ldr	r0, [r4, #32]
 8015534:	f7fc fd5c 	bl	8011ff0 <lv_mem_free>
 8015538:	e7f8      	b.n	801552c <lv_label_destructor+0x28>
 801553a:	46c0      	nop			; (mov r8, r8)

0801553c <set_ofs_y_anim>:
    label->offset.x    = v;
    lv_obj_invalidate(obj);
}

static void set_ofs_y_anim(void * obj, int32_t v)
{
 801553c:	b510      	push	{r4, lr}
    lv_label_t * label = (lv_label_t *)obj;
    label->offset.y    = v;
 801553e:	85c1      	strh	r1, [r0, #46]	; 0x2e
    lv_obj_invalidate(obj);
 8015540:	f7f0 fffe 	bl	8006540 <lv_obj_invalidate>
}
 8015544:	bd10      	pop	{r4, pc}
 8015546:	46c0      	nop			; (mov r8, r8)

08015548 <set_ofs_x_anim>:
{
 8015548:	b510      	push	{r4, lr}
    label->offset.x    = v;
 801554a:	8581      	strh	r1, [r0, #44]	; 0x2c
    lv_obj_invalidate(obj);
 801554c:	f7f0 fff8 	bl	8006540 <lv_obj_invalidate>
}
 8015550:	bd10      	pop	{r4, pc}
 8015552:	46c0      	nop			; (mov r8, r8)

08015554 <lv_label_revert_dots.part.0>:
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 8015554:	6a81      	ldr	r1, [r0, #40]	; 0x28
static void lv_label_revert_dots(lv_obj_t * obj)
 8015556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015558:	0004      	movs	r4, r0
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 801555a:	1c4b      	adds	r3, r1, #1
 801555c:	d031      	beq.n	80155c2 <lv_label_revert_dots.part.0+0x6e>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 801555e:	4b1a      	ldr	r3, [pc, #104]	; (80155c8 <lv_label_revert_dots.part.0+0x74>)
 8015560:	6a00      	ldr	r0, [r0, #32]
 8015562:	681b      	ldr	r3, [r3, #0]
    uint32_t letter_i = label->dot_end - LV_LABEL_DOT_NUM;
 8015564:	3903      	subs	r1, #3
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 8015566:	4798      	blx	r3
    if(label->dot_tmp_alloc) {
 8015568:	2330      	movs	r3, #48	; 0x30
        return label->dot.tmp;
 801556a:	0027      	movs	r7, r4
    if(label->dot_tmp_alloc) {
 801556c:	5ce3      	ldrb	r3, [r4, r3]
        return label->dot.tmp;
 801556e:	3724      	adds	r7, #36	; 0x24
    if(label->dot_tmp_alloc) {
 8015570:	065b      	lsls	r3, r3, #25
 8015572:	d427      	bmi.n	80155c4 <lv_label_revert_dots.part.0+0x70>
    while(label->text[byte_i + i] != '\0') {
 8015574:	6a23      	ldr	r3, [r4, #32]
 8015576:	181d      	adds	r5, r3, r0
 8015578:	5c1b      	ldrb	r3, [r3, r0]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d00d      	beq.n	801559a <lv_label_revert_dots.part.0+0x46>
    uint8_t i      = 0;
 801557e:	2300      	movs	r3, #0
    while(label->text[byte_i + i] != '\0') {
 8015580:	2600      	movs	r6, #0
        label->text[byte_i + i] = dot_tmp[i];
 8015582:	5dba      	ldrb	r2, [r7, r6]
        i++;
 8015584:	3301      	adds	r3, #1
        label->text[byte_i + i] = dot_tmp[i];
 8015586:	702a      	strb	r2, [r5, #0]
    while(label->text[byte_i + i] != '\0') {
 8015588:	6a21      	ldr	r1, [r4, #32]
        i++;
 801558a:	b2db      	uxtb	r3, r3
    while(label->text[byte_i + i] != '\0') {
 801558c:	18c2      	adds	r2, r0, r3
 801558e:	188d      	adds	r5, r1, r2
 8015590:	5c8a      	ldrb	r2, [r1, r2]
 8015592:	001e      	movs	r6, r3
 8015594:	2a00      	cmp	r2, #0
 8015596:	d1f4      	bne.n	8015582 <lv_label_revert_dots.part.0+0x2e>
    label->text[byte_i + i] = dot_tmp[i];
 8015598:	18ff      	adds	r7, r7, r3
 801559a:	783b      	ldrb	r3, [r7, #0]
 801559c:	702b      	strb	r3, [r5, #0]
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 801559e:	2330      	movs	r3, #48	; 0x30
 80155a0:	5ce3      	ldrb	r3, [r4, r3]
 80155a2:	065b      	lsls	r3, r3, #25
 80155a4:	d504      	bpl.n	80155b0 <lv_label_revert_dots.part.0+0x5c>
 80155a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80155a8:	2800      	cmp	r0, #0
 80155aa:	d001      	beq.n	80155b0 <lv_label_revert_dots.part.0+0x5c>
        lv_mem_free(label->dot.tmp_ptr);
 80155ac:	f7fc fd20 	bl	8011ff0 <lv_mem_free>
    label->dot_tmp_alloc = false;
 80155b0:	2230      	movs	r2, #48	; 0x30
 80155b2:	2140      	movs	r1, #64	; 0x40
 80155b4:	5ca3      	ldrb	r3, [r4, r2]
 80155b6:	438b      	bics	r3, r1
 80155b8:	54a3      	strb	r3, [r4, r2]
    label->dot.tmp_ptr   = NULL;
 80155ba:	2300      	movs	r3, #0
 80155bc:	6263      	str	r3, [r4, #36]	; 0x24
    label->dot_end = LV_LABEL_DOT_END_INV;
 80155be:	3b01      	subs	r3, #1
 80155c0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80155c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return label->dot.tmp_ptr;
 80155c4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80155c6:	e7d5      	b.n	8015574 <lv_label_revert_dots.part.0+0x20>
 80155c8:	20000010 	.word	0x20000010

080155cc <lv_label_get_letter_on.part.0>:
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 80155cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155ce:	46de      	mov	lr, fp
 80155d0:	4657      	mov	r7, sl
 80155d2:	4645      	mov	r5, r8
 80155d4:	464e      	mov	r6, r9
 80155d6:	b5e0      	push	{r5, r6, r7, lr}
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80155d8:	2200      	movs	r2, #0
 80155da:	5e8b      	ldrsh	r3, [r1, r2]
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
 80155dc:	b091      	sub	sp, #68	; 0x44
 80155de:	000d      	movs	r5, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80155e0:	2212      	movs	r2, #18
 80155e2:	2100      	movs	r1, #0
 80155e4:	0004      	movs	r4, r0
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80155e6:	9308      	str	r3, [sp, #32]
 80155e8:	f7f4 f882 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80155ec:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80155ee:	9009      	str	r0, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80155f0:	2100      	movs	r1, #0
 80155f2:	0020      	movs	r0, r4
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80155f4:	886d      	ldrh	r5, [r5, #2]
 80155f6:	f7f4 f87b 	bl	80096f0 <lv_obj_get_style_prop>
 80155fa:	1a2d      	subs	r5, r5, r0
 80155fc:	b22b      	sxth	r3, r5
    lv_obj_get_content_coords(obj, &txt_coords);
 80155fe:	0020      	movs	r0, r4
 8015600:	a90e      	add	r1, sp, #56	; 0x38
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8015602:	9304      	str	r3, [sp, #16]
    lv_obj_get_content_coords(obj, &txt_coords);
 8015604:	f7f0 fc4a 	bl	8005e9c <lv_obj_get_content_coords>
    return label->text;
 8015608:	6a23      	ldr	r3, [r4, #32]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801560a:	aa08      	add	r2, sp, #32
 801560c:	4699      	mov	r9, r3
 801560e:	ab08      	add	r3, sp, #32
 8015610:	8b9b      	ldrh	r3, [r3, #28]
 8015612:	8b12      	ldrh	r2, [r2, #24]
 8015614:	3301      	adds	r3, #1
 8015616:	1a9b      	subs	r3, r3, r2
 8015618:	b21b      	sxth	r3, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801561a:	2257      	movs	r2, #87	; 0x57
 801561c:	2100      	movs	r1, #0
 801561e:	0020      	movs	r0, r4
 8015620:	4698      	mov	r8, r3
 8015622:	f7f4 f865 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8015626:	2259      	movs	r2, #89	; 0x59
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8015628:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801562a:	2100      	movs	r1, #0
 801562c:	0020      	movs	r0, r4
 801562e:	f7f4 f85f 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8015632:	2258      	movs	r2, #88	; 0x58
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8015634:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8015636:	2100      	movs	r1, #0
 8015638:	0020      	movs	r0, r4
 801563a:	f7f4 f859 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801563e:	b203      	sxth	r3, r0
 8015640:	469a      	mov	sl, r3
 8015642:	465b      	mov	r3, fp
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8015644:	9006      	str	r0, [sp, #24]
 8015646:	2208      	movs	r2, #8
 8015648:	5e9b      	ldrsh	r3, [r3, r2]
 801564a:	9305      	str	r3, [sp, #20]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801564c:	2330      	movs	r3, #48	; 0x30
 801564e:	5ce3      	ldrb	r3, [r4, r3]
 8015650:	06da      	lsls	r2, r3, #27
 8015652:	0fd2      	lsrs	r2, r2, #31
 8015654:	9203      	str	r2, [sp, #12]
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015656:	069b      	lsls	r3, r3, #26
 8015658:	d502      	bpl.n	8015660 <lv_label_get_letter_on.part.0+0x94>
 801565a:	2302      	movs	r3, #2
 801565c:	431a      	orrs	r2, r3
 801565e:	9203      	str	r2, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8015660:	2201      	movs	r2, #1
 8015662:	2100      	movs	r1, #0
 8015664:	0020      	movs	r0, r4
 8015666:	f7f4 f843 	bl	80096f0 <lv_obj_get_style_prop>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801566a:	4b9e      	ldr	r3, [pc, #632]	; (80158e4 <lv_label_get_letter_on.part.0+0x318>)
    return (lv_coord_t)v.num;
 801566c:	b200      	sxth	r0, r0
 801566e:	4298      	cmp	r0, r3
 8015670:	d100      	bne.n	8015674 <lv_label_get_letter_on.part.0+0xa8>
 8015672:	e0c0      	b.n	80157f6 <lv_label_get_letter_on.part.0+0x22a>
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8015674:	2100      	movs	r1, #0
 8015676:	0020      	movs	r0, r4
 8015678:	6a22      	ldr	r2, [r4, #32]
 801567a:	f7f5 f8f3 	bl	800a864 <lv_obj_calculate_style_text_align>
    while(txt[line_start] != '\0') {
 801567e:	464b      	mov	r3, r9
 8015680:	781b      	ldrb	r3, [r3, #0]
        if(pos.y <= y + letter_height) {
 8015682:	464e      	mov	r6, r9
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8015684:	9007      	str	r0, [sp, #28]
    while(txt[line_start] != '\0') {
 8015686:	2b00      	cmp	r3, #0
 8015688:	d100      	bne.n	801568c <lv_label_get_letter_on.part.0+0xc0>
 801568a:	e125      	b.n	80158d8 <lv_label_get_letter_on.part.0+0x30c>
        y += letter_height + line_space;
 801568c:	9b05      	ldr	r3, [sp, #20]
    lv_coord_t y             = 0;
 801568e:	2500      	movs	r5, #0
        y += letter_height + line_space;
 8015690:	469c      	mov	ip, r3
 8015692:	4467      	add	r7, ip
 8015694:	9705      	str	r7, [sp, #20]
    uint32_t line_start      = 0;
 8015696:	2400      	movs	r4, #0
        y += letter_height + line_space;
 8015698:	464f      	mov	r7, r9
 801569a:	4699      	mov	r9, r3
 801569c:	e008      	b.n	80156b0 <lv_label_get_letter_on.part.0+0xe4>
 801569e:	9b05      	ldr	r3, [sp, #20]
    while(txt[line_start] != '\0') {
 80156a0:	193e      	adds	r6, r7, r4
 80156a2:	469c      	mov	ip, r3
 80156a4:	5d3b      	ldrb	r3, [r7, r4]
 80156a6:	4465      	add	r5, ip
 80156a8:	b22d      	sxth	r5, r5
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d100      	bne.n	80156b0 <lv_label_get_letter_on.part.0+0xe4>
 80156ae:	e085      	b.n	80157bc <lv_label_get_letter_on.part.0+0x1f0>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80156b0:	9b03      	ldr	r3, [sp, #12]
 80156b2:	4652      	mov	r2, sl
 80156b4:	9301      	str	r3, [sp, #4]
 80156b6:	2300      	movs	r3, #0
 80156b8:	4659      	mov	r1, fp
 80156ba:	9300      	str	r3, [sp, #0]
 80156bc:	0030      	movs	r0, r6
 80156be:	4643      	mov	r3, r8
 80156c0:	f7fe f8ec 	bl	801389c <_lv_txt_get_next_line>
        if(pos.y <= y + letter_height) {
 80156c4:	464b      	mov	r3, r9
 80156c6:	9904      	ldr	r1, [sp, #16]
 80156c8:	18eb      	adds	r3, r5, r3
 80156ca:	0022      	movs	r2, r4
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80156cc:	1824      	adds	r4, r4, r0
        if(pos.y <= y + letter_height) {
 80156ce:	428b      	cmp	r3, r1
 80156d0:	dbe5      	blt.n	801569e <lv_label_get_letter_on.part.0+0xd2>
            letter = _lv_txt_encoded_prev(txt, &tmp);
 80156d2:	ab0d      	add	r3, sp, #52	; 0x34
            uint32_t tmp = new_line_start;
 80156d4:	46b9      	mov	r9, r7
            letter = _lv_txt_encoded_prev(txt, &tmp);
 80156d6:	4698      	mov	r8, r3
 80156d8:	4b83      	ldr	r3, [pc, #524]	; (80158e8 <lv_label_get_letter_on.part.0+0x31c>)
 80156da:	4641      	mov	r1, r8
 80156dc:	4648      	mov	r0, r9
 80156de:	681b      	ldr	r3, [r3, #0]
            uint32_t tmp = new_line_start;
 80156e0:	940d      	str	r4, [sp, #52]	; 0x34
 80156e2:	0017      	movs	r7, r2
            letter = _lv_txt_encoded_prev(txt, &tmp);
 80156e4:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 80156e6:	280a      	cmp	r0, #10
 80156e8:	d004      	beq.n	80156f4 <lv_label_get_letter_on.part.0+0x128>
 80156ea:	464b      	mov	r3, r9
 80156ec:	5d1b      	ldrb	r3, [r3, r4]
 80156ee:	425a      	negs	r2, r3
 80156f0:	4153      	adcs	r3, r2
 80156f2:	18e4      	adds	r4, r4, r3
    if(align == LV_TEXT_ALIGN_CENTER) {
 80156f4:	9b07      	ldr	r3, [sp, #28]
 80156f6:	2b02      	cmp	r3, #2
 80156f8:	d065      	beq.n	80157c6 <lv_label_get_letter_on.part.0+0x1fa>
    lv_coord_t x = 0;
 80156fa:	2500      	movs	r5, #0
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 80156fc:	2b03      	cmp	r3, #3
 80156fe:	d100      	bne.n	8015702 <lv_label_get_letter_on.part.0+0x136>
 8015700:	e0c2      	b.n	8015888 <lv_label_get_letter_on.part.0+0x2bc>
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8015702:	2300      	movs	r3, #0
 8015704:	aa08      	add	r2, sp, #32
 8015706:	72d3      	strb	r3, [r2, #11]
    uint32_t i = 0;
 8015708:	930b      	str	r3, [sp, #44]	; 0x2c
    if(new_line_start > 0) {
 801570a:	2c00      	cmp	r4, #0
 801570c:	d044      	beq.n	8015798 <lv_label_get_letter_on.part.0+0x1cc>
        while(i + line_start < new_line_start) {
 801570e:	42bc      	cmp	r4, r7
 8015710:	d800      	bhi.n	8015714 <lv_label_get_letter_on.part.0+0x148>
 8015712:	e0e4      	b.n	80158de <lv_label_get_letter_on.part.0+0x312>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8015714:	9b08      	ldr	r3, [sp, #32]
 8015716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015718:	1a98      	subs	r0, r3, r2
 801571a:	b203      	sxth	r3, r0
 801571c:	9304      	str	r3, [sp, #16]
 801571e:	9b03      	ldr	r3, [sp, #12]
 8015720:	07db      	lsls	r3, r3, #31
 8015722:	d500      	bpl.n	8015726 <lv_label_get_letter_on.part.0+0x15a>
 8015724:	e071      	b.n	801580a <lv_label_get_letter_on.part.0+0x23e>
 8015726:	464a      	mov	r2, r9
    uint32_t i_act = i;
 8015728:	2300      	movs	r3, #0
 801572a:	9207      	str	r2, [sp, #28]
 801572c:	465a      	mov	r2, fp
 801572e:	9303      	str	r3, [sp, #12]
 8015730:	ab0d      	add	r3, sp, #52	; 0x34
 8015732:	4698      	mov	r8, r3
 8015734:	ab0b      	add	r3, sp, #44	; 0x2c
 8015736:	469a      	mov	sl, r3
 8015738:	ab0c      	add	r3, sp, #48	; 0x30
 801573a:	4699      	mov	r9, r3
 801573c:	46b3      	mov	fp, r6
 801573e:	9205      	str	r2, [sp, #20]
 8015740:	e014      	b.n	801576c <lv_label_get_letter_on.part.0+0x1a0>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 8015742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015744:	18fa      	adds	r2, r7, r3
 8015746:	4294      	cmp	r4, r2
 8015748:	d020      	beq.n	801578c <lv_label_get_letter_on.part.0+0x1c0>
 801574a:	9e03      	ldr	r6, [sp, #12]
 801574c:	9907      	ldr	r1, [sp, #28]
 801574e:	46b4      	mov	ip, r6
 8015750:	4461      	add	r1, ip
 8015752:	5dc9      	ldrb	r1, [r1, r7]
 8015754:	2900      	cmp	r1, #0
 8015756:	d100      	bne.n	801575a <lv_label_get_letter_on.part.0+0x18e>
 8015758:	e0b2      	b.n	80158c0 <lv_label_get_letter_on.part.0+0x2f4>
            x += letter_space;
 801575a:	9906      	ldr	r1, [sp, #24]
 801575c:	468c      	mov	ip, r1
 801575e:	4460      	add	r0, ip
 8015760:	1945      	adds	r5, r0, r5
 8015762:	b22d      	sxth	r5, r5
        while(i + line_start < new_line_start) {
 8015764:	4294      	cmp	r4, r2
 8015766:	d800      	bhi.n	801576a <lv_label_get_letter_on.part.0+0x19e>
 8015768:	e0a1      	b.n	80158ae <lv_label_get_letter_on.part.0+0x2e2>
 801576a:	9303      	str	r3, [sp, #12]
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 801576c:	4653      	mov	r3, sl
 801576e:	4642      	mov	r2, r8
 8015770:	4649      	mov	r1, r9
 8015772:	4658      	mov	r0, fp
 8015774:	f7fe fae6 	bl	8013d44 <_lv_txt_encoded_letter_next_2>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 8015778:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801577a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801577c:	9805      	ldr	r0, [sp, #20]
 801577e:	f7fa fea7 	bl	80104d0 <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 8015782:	9a04      	ldr	r2, [sp, #16]
 8015784:	b203      	sxth	r3, r0
 8015786:	18eb      	adds	r3, r5, r3
 8015788:	429a      	cmp	r2, r3
 801578a:	dada      	bge.n	8015742 <lv_label_get_letter_on.part.0+0x176>
 801578c:	9b07      	ldr	r3, [sp, #28]
 801578e:	465e      	mov	r6, fp
 8015790:	4699      	mov	r9, r3
 8015792:	9c03      	ldr	r4, [sp, #12]
 8015794:	0023      	movs	r3, r4
                i = i_act;
 8015796:	930b      	str	r3, [sp, #44]	; 0x2c
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 8015798:	4d54      	ldr	r5, [pc, #336]	; (80158ec <lv_label_get_letter_on.part.0+0x320>)
 801579a:	0021      	movs	r1, r4
 801579c:	682b      	ldr	r3, [r5, #0]
 801579e:	0030      	movs	r0, r6
 80157a0:	4798      	blx	r3
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 80157a2:	0039      	movs	r1, r7
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 80157a4:	0004      	movs	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 80157a6:	682b      	ldr	r3, [r5, #0]
 80157a8:	4648      	mov	r0, r9
 80157aa:	4798      	blx	r3
 80157ac:	1820      	adds	r0, r4, r0
}
 80157ae:	b011      	add	sp, #68	; 0x44
 80157b0:	bcf0      	pop	{r4, r5, r6, r7}
 80157b2:	46bb      	mov	fp, r7
 80157b4:	46b2      	mov	sl, r6
 80157b6:	46a9      	mov	r9, r5
 80157b8:	46a0      	mov	r8, r4
 80157ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(align == LV_TEXT_ALIGN_CENTER) {
 80157bc:	9b07      	ldr	r3, [sp, #28]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80157be:	46b9      	mov	r9, r7
 80157c0:	0027      	movs	r7, r4
    if(align == LV_TEXT_ALIGN_CENTER) {
 80157c2:	2b02      	cmp	r3, #2
 80157c4:	d199      	bne.n	80156fa <lv_label_get_letter_on.part.0+0x12e>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80157c6:	9b03      	ldr	r3, [sp, #12]
 80157c8:	465a      	mov	r2, fp
 80157ca:	9300      	str	r3, [sp, #0]
 80157cc:	0030      	movs	r0, r6
 80157ce:	4653      	mov	r3, sl
 80157d0:	1be1      	subs	r1, r4, r7
 80157d2:	f7fe fa83 	bl	8013cdc <lv_txt_get_width>
 80157d6:	ab08      	add	r3, sp, #32
 80157d8:	8b9b      	ldrh	r3, [r3, #28]
 80157da:	aa08      	add	r2, sp, #32
 80157dc:	8b12      	ldrh	r2, [r2, #24]
 80157de:	3301      	adds	r3, #1
 80157e0:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 80157e2:	b21b      	sxth	r3, r3
 80157e4:	0fda      	lsrs	r2, r3, #31
 80157e6:	18d3      	adds	r3, r2, r3
 80157e8:	0fc2      	lsrs	r2, r0, #31
 80157ea:	1810      	adds	r0, r2, r0
 80157ec:	105b      	asrs	r3, r3, #1
 80157ee:	1045      	asrs	r5, r0, #1
 80157f0:	1b5d      	subs	r5, r3, r5
 80157f2:	b22d      	sxth	r5, r5
 80157f4:	e785      	b.n	8015702 <lv_label_get_letter_on.part.0+0x136>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80157f6:	7fe3      	ldrb	r3, [r4, #31]
 80157f8:	075b      	lsls	r3, r3, #29
 80157fa:	d500      	bpl.n	80157fe <lv_label_get_letter_on.part.0+0x232>
 80157fc:	e73a      	b.n	8015674 <lv_label_get_letter_on.part.0+0xa8>
 80157fe:	2304      	movs	r3, #4
 8015800:	9a03      	ldr	r2, [sp, #12]
 8015802:	431a      	orrs	r2, r3
 8015804:	b2d3      	uxtb	r3, r2
 8015806:	9303      	str	r3, [sp, #12]
 8015808:	e734      	b.n	8015674 <lv_label_get_letter_on.part.0+0xa8>
    uint32_t i_act = i;
 801580a:	2300      	movs	r3, #0
 801580c:	464a      	mov	r2, r9
 801580e:	9303      	str	r3, [sp, #12]
 8015810:	ab0d      	add	r3, sp, #52	; 0x34
 8015812:	4698      	mov	r8, r3
 8015814:	ab0b      	add	r3, sp, #44	; 0x2c
 8015816:	469a      	mov	sl, r3
 8015818:	ab0c      	add	r3, sp, #48	; 0x30
 801581a:	4699      	mov	r9, r3
 801581c:	9207      	str	r2, [sp, #28]
 801581e:	9405      	str	r4, [sp, #20]
 8015820:	e01e      	b.n	8015860 <lv_label_get_letter_on.part.0+0x294>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 8015822:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015824:	4658      	mov	r0, fp
 8015826:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015828:	f7fa fe52 	bl	80104d0 <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 801582c:	9a04      	ldr	r2, [sp, #16]
 801582e:	b203      	sxth	r3, r0
 8015830:	18eb      	adds	r3, r5, r3
 8015832:	429a      	cmp	r2, r3
 8015834:	db38      	blt.n	80158a8 <lv_label_get_letter_on.part.0+0x2dc>
 8015836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015838:	9905      	ldr	r1, [sp, #20]
 801583a:	19da      	adds	r2, r3, r7
 801583c:	4291      	cmp	r1, r2
 801583e:	d033      	beq.n	80158a8 <lv_label_get_letter_on.part.0+0x2dc>
 8015840:	9c03      	ldr	r4, [sp, #12]
 8015842:	9907      	ldr	r1, [sp, #28]
 8015844:	46a4      	mov	ip, r4
 8015846:	4461      	add	r1, ip
 8015848:	5dc9      	ldrb	r1, [r1, r7]
 801584a:	2900      	cmp	r1, #0
 801584c:	d03f      	beq.n	80158ce <lv_label_get_letter_on.part.0+0x302>
            x += letter_space;
 801584e:	9906      	ldr	r1, [sp, #24]
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 8015850:	9303      	str	r3, [sp, #12]
            x += letter_space;
 8015852:	468c      	mov	ip, r1
 8015854:	4465      	add	r5, ip
 8015856:	1945      	adds	r5, r0, r5
 8015858:	b22d      	sxth	r5, r5
        while(i + line_start < new_line_start) {
 801585a:	9905      	ldr	r1, [sp, #20]
 801585c:	4291      	cmp	r1, r2
 801585e:	d92b      	bls.n	80158b8 <lv_label_get_letter_on.part.0+0x2ec>
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8015860:	4653      	mov	r3, sl
 8015862:	4642      	mov	r2, r8
 8015864:	4649      	mov	r1, r9
 8015866:	0030      	movs	r0, r6
 8015868:	f7fe fa6c 	bl	8013d44 <_lv_txt_encoded_letter_next_2>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 801586c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801586e:	aa08      	add	r2, sp, #32
 8015870:	4694      	mov	ip, r2
 8015872:	5cf1      	ldrb	r1, [r6, r3]
 8015874:	230b      	movs	r3, #11
 8015876:	4463      	add	r3, ip
 8015878:	0018      	movs	r0, r3
 801587a:	f7fe fa41 	bl	8013d00 <_lv_txt_is_cmd>
 801587e:	2800      	cmp	r0, #0
 8015880:	d0cf      	beq.n	8015822 <lv_label_get_letter_on.part.0+0x256>
        while(i + line_start < new_line_start) {
 8015882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015884:	19da      	adds	r2, r3, r7
 8015886:	e7e8      	b.n	801585a <lv_label_get_letter_on.part.0+0x28e>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8015888:	9b03      	ldr	r3, [sp, #12]
 801588a:	465a      	mov	r2, fp
 801588c:	9300      	str	r3, [sp, #0]
 801588e:	0030      	movs	r0, r6
 8015890:	4653      	mov	r3, sl
 8015892:	1be1      	subs	r1, r4, r7
 8015894:	f7fe fa22 	bl	8013cdc <lv_txt_get_width>
 8015898:	ab08      	add	r3, sp, #32
 801589a:	8b9d      	ldrh	r5, [r3, #28]
 801589c:	8b1b      	ldrh	r3, [r3, #24]
 801589e:	3501      	adds	r5, #1
 80158a0:	1aed      	subs	r5, r5, r3
        x += lv_area_get_width(&txt_coords) - line_w;
 80158a2:	1a2d      	subs	r5, r5, r0
 80158a4:	b22d      	sxth	r5, r5
 80158a6:	e72c      	b.n	8015702 <lv_label_get_letter_on.part.0+0x136>
 80158a8:	9b07      	ldr	r3, [sp, #28]
 80158aa:	4699      	mov	r9, r3
 80158ac:	e771      	b.n	8015792 <lv_label_get_letter_on.part.0+0x1c6>
        while(i + line_start < new_line_start) {
 80158ae:	9a07      	ldr	r2, [sp, #28]
 80158b0:	465e      	mov	r6, fp
 80158b2:	4691      	mov	r9, r2
 80158b4:	001c      	movs	r4, r3
 80158b6:	e76f      	b.n	8015798 <lv_label_get_letter_on.part.0+0x1cc>
 80158b8:	9a07      	ldr	r2, [sp, #28]
 80158ba:	001c      	movs	r4, r3
 80158bc:	4691      	mov	r9, r2
 80158be:	e76b      	b.n	8015798 <lv_label_get_letter_on.part.0+0x1cc>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 80158c0:	9b07      	ldr	r3, [sp, #28]
 80158c2:	0034      	movs	r4, r6
 80158c4:	4699      	mov	r9, r3
 80158c6:	4663      	mov	r3, ip
 80158c8:	465e      	mov	r6, fp
                i = i_act;
 80158ca:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
 80158cc:	e764      	b.n	8015798 <lv_label_get_letter_on.part.0+0x1cc>
 80158ce:	9b07      	ldr	r3, [sp, #28]
 80158d0:	4699      	mov	r9, r3
 80158d2:	0023      	movs	r3, r4
                i = i_act;
 80158d4:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
 80158d6:	e75f      	b.n	8015798 <lv_label_get_letter_on.part.0+0x1cc>
    uint32_t line_start      = 0;
 80158d8:	2700      	movs	r7, #0
 80158da:	2400      	movs	r4, #0
 80158dc:	e70a      	b.n	80156f4 <lv_label_get_letter_on.part.0+0x128>
        while(i + line_start < new_line_start) {
 80158de:	2400      	movs	r4, #0
 80158e0:	e75a      	b.n	8015798 <lv_label_get_letter_on.part.0+0x1cc>
 80158e2:	46c0      	nop			; (mov r8, r8)
 80158e4:	000027d1 	.word	0x000027d1
 80158e8:	2000001c 	.word	0x2000001c
 80158ec:	20000014 	.word	0x20000014

080158f0 <lv_label_refr_text.part.0>:
static void lv_label_refr_text(lv_obj_t * obj)
 80158f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158f2:	46de      	mov	lr, fp
 80158f4:	4657      	mov	r7, sl
 80158f6:	464e      	mov	r6, r9
 80158f8:	4645      	mov	r5, r8
 80158fa:	0004      	movs	r4, r0
 80158fc:	b5e0      	push	{r5, r6, r7, lr}
 80158fe:	b09b      	sub	sp, #108	; 0x6c
    lv_obj_get_content_coords(obj, &txt_coords);
 8015900:	ae08      	add	r6, sp, #32
 8015902:	0031      	movs	r1, r6
 8015904:	f7f0 faca 	bl	8005e9c <lv_obj_get_content_coords>
 8015908:	88b5      	ldrh	r5, [r6, #4]
 801590a:	8833      	ldrh	r3, [r6, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801590c:	2257      	movs	r2, #87	; 0x57
 801590e:	2100      	movs	r1, #0
 8015910:	0020      	movs	r0, r4
 8015912:	3501      	adds	r5, #1
 8015914:	1aed      	subs	r5, r5, r3
 8015916:	f7f3 feeb 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801591a:	2259      	movs	r2, #89	; 0x59
 801591c:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801591e:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8015920:	0020      	movs	r0, r4
 8015922:	f7f3 fee5 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8015926:	2258      	movs	r2, #88	; 0x58
    return (lv_coord_t)v.num;
 8015928:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801592a:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801592c:	2100      	movs	r1, #0
 801592e:	0020      	movs	r0, r4
    return (lv_coord_t)v.num;
 8015930:	469a      	mov	sl, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8015932:	f7f3 fedd 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8015936:	b203      	sxth	r3, r0
 8015938:	4698      	mov	r8, r3
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 801593a:	2330      	movs	r3, #48	; 0x30
 801593c:	5ce3      	ldrb	r3, [r4, r3]
 801593e:	b22d      	sxth	r5, r5
 8015940:	06da      	lsls	r2, r3, #27
 8015942:	0fd2      	lsrs	r2, r2, #31
 8015944:	4693      	mov	fp, r2
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015946:	069b      	lsls	r3, r3, #26
 8015948:	d502      	bpl.n	8015950 <lv_label_refr_text.part.0+0x60>
 801594a:	2302      	movs	r3, #2
 801594c:	431a      	orrs	r2, r3
 801594e:	4693      	mov	fp, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8015950:	2201      	movs	r2, #1
 8015952:	2100      	movs	r1, #0
 8015954:	0020      	movs	r0, r4
 8015956:	f7f3 fecb 	bl	80096f0 <lv_obj_get_style_prop>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801595a:	4bb8      	ldr	r3, [pc, #736]	; (8015c3c <lv_label_refr_text.part.0+0x34c>)
    return (lv_coord_t)v.num;
 801595c:	b200      	sxth	r0, r0
 801595e:	4298      	cmp	r0, r3
 8015960:	d03b      	beq.n	80159da <lv_label_refr_text.part.0+0xea>
    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 8015962:	465b      	mov	r3, fp
 8015964:	9302      	str	r3, [sp, #8]
 8015966:	4653      	mov	r3, sl
 8015968:	003a      	movs	r2, r7
 801596a:	6a21      	ldr	r1, [r4, #32]
 801596c:	9501      	str	r5, [sp, #4]
 801596e:	9300      	str	r3, [sp, #0]
 8015970:	a806      	add	r0, sp, #24
 8015972:	4643      	mov	r3, r8
 8015974:	f7fe f91c 	bl	8013bb0 <lv_txt_get_size>
    lv_obj_refresh_self_size(obj);
 8015978:	0020      	movs	r0, r4
 801597a:	f7f0 fae9 	bl	8005f50 <lv_obj_refresh_self_size>
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 801597e:	2330      	movs	r3, #48	; 0x30
 8015980:	2507      	movs	r5, #7
 8015982:	5ce3      	ldrb	r3, [r4, r3]
 8015984:	401d      	ands	r5, r3
 8015986:	2d02      	cmp	r5, #2
 8015988:	d030      	beq.n	80159ec <lv_label_refr_text.part.0+0xfc>
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 801598a:	2d03      	cmp	r5, #3
 801598c:	d100      	bne.n	8015990 <lv_label_refr_text.part.0+0xa0>
 801598e:	e0b9      	b.n	8015b04 <lv_label_refr_text.part.0+0x214>
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 8015990:	2d01      	cmp	r5, #1
 8015992:	d009      	beq.n	80159a8 <lv_label_refr_text.part.0+0xb8>
    lv_obj_invalidate(obj);
 8015994:	0020      	movs	r0, r4
 8015996:	f7f0 fdd3 	bl	8006540 <lv_obj_invalidate>
}
 801599a:	b01b      	add	sp, #108	; 0x6c
 801599c:	bcf0      	pop	{r4, r5, r6, r7}
 801599e:	46bb      	mov	fp, r7
 80159a0:	46b2      	mov	sl, r6
 80159a2:	46a9      	mov	r9, r5
 80159a4:	46a0      	mov	r8, r4
 80159a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 80159a8:	ab02      	add	r3, sp, #8
 80159aa:	2212      	movs	r2, #18
 80159ac:	5e9a      	ldrsh	r2, [r3, r2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80159ae:	88f3      	ldrh	r3, [r6, #6]
 80159b0:	8871      	ldrh	r1, [r6, #2]
 80159b2:	3301      	adds	r3, #1
 80159b4:	1a5b      	subs	r3, r3, r1
 80159b6:	b21b      	sxth	r3, r3
 80159b8:	429a      	cmp	r2, r3
 80159ba:	dd0a      	ble.n	80159d2 <lv_label_refr_text.part.0+0xe2>
        else if(size.y <= lv_font_get_line_height(font)) { /*No dots are required for one-line texts*/
 80159bc:	2108      	movs	r1, #8
 80159be:	5e7b      	ldrsh	r3, [r7, r1]
 80159c0:	4293      	cmp	r3, r2
 80159c2:	da06      	bge.n	80159d2 <lv_label_refr_text.part.0+0xe2>
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 80159c4:	4b9e      	ldr	r3, [pc, #632]	; (8015c40 <lv_label_refr_text.part.0+0x350>)
 80159c6:	6a20      	ldr	r0, [r4, #32]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	4798      	blx	r3
 80159cc:	2803      	cmp	r0, #3
 80159ce:	d900      	bls.n	80159d2 <lv_label_refr_text.part.0+0xe2>
 80159d0:	e13c      	b.n	8015c4c <lv_label_refr_text.part.0+0x35c>
            label->dot_end = LV_LABEL_DOT_END_INV;
 80159d2:	2301      	movs	r3, #1
 80159d4:	425b      	negs	r3, r3
 80159d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80159d8:	e7dc      	b.n	8015994 <lv_label_refr_text.part.0+0xa4>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80159da:	7fe3      	ldrb	r3, [r4, #31]
 80159dc:	075b      	lsls	r3, r3, #29
 80159de:	d4c0      	bmi.n	8015962 <lv_label_refr_text.part.0+0x72>
 80159e0:	2304      	movs	r3, #4
 80159e2:	465a      	mov	r2, fp
 80159e4:	431a      	orrs	r2, r3
 80159e6:	b2d3      	uxtb	r3, r2
 80159e8:	469b      	mov	fp, r3
 80159ea:	e7ba      	b.n	8015962 <lv_label_refr_text.part.0+0x72>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 80159ec:	2265      	movs	r2, #101	; 0x65
 80159ee:	2100      	movs	r1, #0
 80159f0:	0020      	movs	r0, r4
 80159f2:	f7f3 fe7d 	bl	80096f0 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 80159f6:	b283      	uxth	r3, r0
 80159f8:	4698      	mov	r8, r3
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d077      	beq.n	8015aee <lv_label_refr_text.part.0+0x1fe>
        lv_anim_init(&a);
 80159fe:	ad0a      	add	r5, sp, #40	; 0x28
 8015a00:	0028      	movs	r0, r5
 8015a02:	f7fb fac9 	bl	8010f98 <lv_anim_init>
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
 8015a06:	2301      	movs	r3, #1
 8015a08:	425b      	negs	r3, r3
    a->var = var;
 8015a0a:	940a      	str	r4, [sp, #40]	; 0x28
    a->repeat_cnt = cnt;
 8015a0c:	87ab      	strh	r3, [r5, #60]	; 0x3c
    a->playback_delay = delay;
 8015a0e:	332e      	adds	r3, #46	; 0x2e
 8015a10:	33ff      	adds	r3, #255	; 0xff
 8015a12:	632b      	str	r3, [r5, #48]	; 0x30
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
    a->repeat_delay = delay;
 8015a14:	63ab      	str	r3, [r5, #56]	; 0x38
        if(size.x > lv_area_get_width(&txt_coords)) {
 8015a16:	ab02      	add	r3, sp, #8
 8015a18:	2210      	movs	r2, #16
 8015a1a:	5e9a      	ldrsh	r2, [r3, r2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015a1c:	88b3      	ldrh	r3, [r6, #4]
 8015a1e:	8831      	ldrh	r1, [r6, #0]
 8015a20:	3301      	adds	r3, #1
 8015a22:	1a5b      	subs	r3, r3, r1
 8015a24:	b21b      	sxth	r3, r3
 8015a26:	429a      	cmp	r2, r3
 8015a28:	dd22      	ble.n	8015a70 <lv_label_refr_text.part.0+0x180>
    a->start_value = start;
 8015a2a:	2100      	movs	r1, #0
 8015a2c:	61e9      	str	r1, [r5, #28]
    a->current_value = start;
 8015a2e:	6229      	str	r1, [r5, #32]
    a->exec_cb = exec_cb;
 8015a30:	4984      	ldr	r1, [pc, #528]	; (8015c44 <lv_label_refr_text.part.0+0x354>)
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 8015a32:	1a9b      	subs	r3, r3, r2
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8015a34:	0020      	movs	r0, r4
    a->end_value = end;
 8015a36:	626b      	str	r3, [r5, #36]	; 0x24
    a->exec_cb = exec_cb;
 8015a38:	6069      	str	r1, [r5, #4]
 8015a3a:	f7fb fc0f 	bl	801125c <lv_anim_get>
            if(anim_cur) {
 8015a3e:	2800      	cmp	r0, #0
 8015a40:	d100      	bne.n	8015a44 <lv_label_refr_text.part.0+0x154>
 8015a42:	e1c4      	b.n	8015dce <lv_label_refr_text.part.0+0x4de>
                act_time = anim_cur->act_time;
 8015a44:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
            if(act_time < a.time) {
 8015a46:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8015a48:	429a      	cmp	r2, r3
 8015a4a:	da00      	bge.n	8015a4e <lv_label_refr_text.part.0+0x15e>
 8015a4c:	e0e2      	b.n	8015c14 <lv_label_refr_text.part.0+0x324>
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015a4e:	69e9      	ldr	r1, [r5, #28]
 8015a50:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8015a52:	4640      	mov	r0, r8
 8015a54:	f7fb fc28 	bl	80112a8 <lv_anim_speed_to_time>
    a->time = duration;
 8015a58:	62a8      	str	r0, [r5, #40]	; 0x28
    a->playback_time = time;
 8015a5a:	6368      	str	r0, [r5, #52]	; 0x34
            lv_anim_start(&a);
 8015a5c:	0028      	movs	r0, r5
 8015a5e:	f7fb fb9d 	bl	801119c <lv_anim_start>
            lv_anim_del(obj, set_ofs_y_anim);
 8015a62:	0020      	movs	r0, r4
 8015a64:	4978      	ldr	r1, [pc, #480]	; (8015c48 <lv_label_refr_text.part.0+0x358>)
 8015a66:	f7fb faaf 	bl	8010fc8 <lv_anim_del>
            label->offset.y = 0;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8015a6e:	e791      	b.n	8015994 <lv_label_refr_text.part.0+0xa4>
            lv_anim_del(obj, set_ofs_x_anim);
 8015a70:	4974      	ldr	r1, [pc, #464]	; (8015c44 <lv_label_refr_text.part.0+0x354>)
 8015a72:	0020      	movs	r0, r4
 8015a74:	f7fb faa8 	bl	8010fc8 <lv_anim_del>
            label->offset.x = 0;
 8015a78:	2200      	movs	r2, #0
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015a7a:	ab02      	add	r3, sp, #8
            label->offset.x = 0;
 8015a7c:	85a2      	strh	r2, [r4, #44]	; 0x2c
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015a7e:	2112      	movs	r1, #18
 8015a80:	5e59      	ldrsh	r1, [r3, r1]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015a82:	88f3      	ldrh	r3, [r6, #6]
 8015a84:	8870      	ldrh	r0, [r6, #2]
 8015a86:	3301      	adds	r3, #1
 8015a88:	1a1b      	subs	r3, r3, r0
 8015a8a:	b21b      	sxth	r3, r3
 8015a8c:	4299      	cmp	r1, r3
 8015a8e:	dde8      	ble.n	8015a62 <lv_label_refr_text.part.0+0x172>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 8015a90:	1a5b      	subs	r3, r3, r1
 8015a92:	2008      	movs	r0, #8
 8015a94:	5e39      	ldrsh	r1, [r7, r0]
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8015a96:	0020      	movs	r0, r4
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 8015a98:	1a5b      	subs	r3, r3, r1
    a->exec_cb = exec_cb;
 8015a9a:	496b      	ldr	r1, [pc, #428]	; (8015c48 <lv_label_refr_text.part.0+0x358>)
    a->start_value = start;
 8015a9c:	61ea      	str	r2, [r5, #28]
    a->current_value = start;
 8015a9e:	622a      	str	r2, [r5, #32]
    a->end_value = end;
 8015aa0:	626b      	str	r3, [r5, #36]	; 0x24
    a->exec_cb = exec_cb;
 8015aa2:	6069      	str	r1, [r5, #4]
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8015aa4:	f7fb fbda 	bl	801125c <lv_anim_get>
            if(anim_cur) {
 8015aa8:	2800      	cmp	r0, #0
 8015aaa:	d100      	bne.n	8015aae <lv_label_refr_text.part.0+0x1be>
 8015aac:	e181      	b.n	8015db2 <lv_label_refr_text.part.0+0x4c2>
                act_time = anim_cur->act_time;
 8015aae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
            if(act_time < a.time) {
 8015ab0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8015ab2:	429a      	cmp	r2, r3
 8015ab4:	db00      	blt.n	8015ab8 <lv_label_refr_text.part.0+0x1c8>
 8015ab6:	e185      	b.n	8015dc4 <lv_label_refr_text.part.0+0x4d4>
                playback_now = anim_cur->playback_now;
 8015ab8:	233e      	movs	r3, #62	; 0x3e
 8015aba:	5cc1      	ldrb	r1, [r0, r3]
                a.early_apply = 0;
 8015abc:	2001      	movs	r0, #1
                a.act_time = act_time;      /*To keep the old position*/
 8015abe:	62ea      	str	r2, [r5, #44]	; 0x2c
                a.early_apply = 0;
 8015ac0:	5cea      	ldrb	r2, [r5, r3]
 8015ac2:	4382      	bics	r2, r0
 8015ac4:	54ea      	strb	r2, [r5, r3]
                if(playback_now) {
 8015ac6:	078a      	lsls	r2, r1, #30
 8015ac8:	d400      	bmi.n	8015acc <lv_label_refr_text.part.0+0x1dc>
 8015aca:	e17b      	b.n	8015dc4 <lv_label_refr_text.part.0+0x4d4>
                    a.playback_now = 1;
 8015acc:	2102      	movs	r1, #2
 8015ace:	5cea      	ldrb	r2, [r5, r3]
 8015ad0:	430a      	orrs	r2, r1
 8015ad2:	54ea      	strb	r2, [r5, r3]
                    tmp      = a.start_value;
 8015ad4:	69ea      	ldr	r2, [r5, #28]
                    a.start_value = a.end_value;
 8015ad6:	6a69      	ldr	r1, [r5, #36]	; 0x24
                    a.end_value   = tmp;
 8015ad8:	626a      	str	r2, [r5, #36]	; 0x24
                    a.start_value = a.end_value;
 8015ada:	61e9      	str	r1, [r5, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015adc:	4640      	mov	r0, r8
 8015ade:	f7fb fbe3 	bl	80112a8 <lv_anim_speed_to_time>
    a->time = duration;
 8015ae2:	62a8      	str	r0, [r5, #40]	; 0x28
    a->playback_time = time;
 8015ae4:	6368      	str	r0, [r5, #52]	; 0x34
            lv_anim_start(&a);
 8015ae6:	0028      	movs	r0, r5
 8015ae8:	f7fb fb58 	bl	801119c <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015aec:	e752      	b.n	8015994 <lv_label_refr_text.part.0+0xa4>
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8015aee:	0020      	movs	r0, r4
 8015af0:	f7f5 fa02 	bl	800aef8 <lv_obj_get_disp>
 8015af4:	f7fb f868 	bl	8010bc8 <lv_disp_get_dpi>
 8015af8:	2103      	movs	r1, #3
 8015afa:	f7ea fb9f 	bl	800023c <__divsi3>
 8015afe:	b283      	uxth	r3, r0
 8015b00:	4698      	mov	r8, r3
 8015b02:	e77c      	b.n	80159fe <lv_label_refr_text.part.0+0x10e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 8015b04:	2263      	movs	r2, #99	; 0x63
 8015b06:	2100      	movs	r1, #0
 8015b08:	0020      	movs	r0, r4
 8015b0a:	f7f3 fdf1 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8015b0e:	2265      	movs	r2, #101	; 0x65
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 8015b10:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8015b12:	2100      	movs	r1, #0
 8015b14:	0020      	movs	r0, r4
 8015b16:	f7f3 fdeb 	bl	80096f0 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 8015b1a:	b283      	uxth	r3, r0
 8015b1c:	4698      	mov	r8, r3
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d06d      	beq.n	8015bfe <lv_label_refr_text.part.0+0x30e>
        lv_anim_init(&a);
 8015b22:	ad0a      	add	r5, sp, #40	; 0x28
 8015b24:	0028      	movs	r0, r5
 8015b26:	f7fb fa37 	bl	8010f98 <lv_anim_init>
    a->repeat_cnt = cnt;
 8015b2a:	2301      	movs	r3, #1
 8015b2c:	425b      	negs	r3, r3
    a->var = var;
 8015b2e:	940a      	str	r4, [sp, #40]	; 0x28
    a->repeat_cnt = cnt;
 8015b30:	87ab      	strh	r3, [r5, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015b32:	88b3      	ldrh	r3, [r6, #4]
 8015b34:	8832      	ldrh	r2, [r6, #0]
 8015b36:	3301      	adds	r3, #1
 8015b38:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 8015b3a:	aa02      	add	r2, sp, #8
 8015b3c:	2110      	movs	r1, #16
 8015b3e:	5e52      	ldrsh	r2, [r2, r1]
 8015b40:	b21b      	sxth	r3, r3
 8015b42:	429a      	cmp	r2, r3
 8015b44:	dd29      	ble.n	8015b9a <lv_label_refr_text.part.0+0x2aa>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 8015b46:	2220      	movs	r2, #32
 8015b48:	2120      	movs	r1, #32
 8015b4a:	0038      	movs	r0, r7
 8015b4c:	f7fa fcc0 	bl	80104d0 <lv_font_get_glyph_width>
 8015b50:	ab02      	add	r3, sp, #8
 8015b52:	0082      	lsls	r2, r0, #2
 8015b54:	1a82      	subs	r2, r0, r2
 8015b56:	2010      	movs	r0, #16
 8015b58:	5e18      	ldrsh	r0, [r3, r0]
    a->start_value = start;
 8015b5a:	2300      	movs	r3, #0
    a->exec_cb = exec_cb;
 8015b5c:	4e39      	ldr	r6, [pc, #228]	; (8015c44 <lv_label_refr_text.part.0+0x354>)
 8015b5e:	1a12      	subs	r2, r2, r0
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015b60:	2100      	movs	r1, #0
 8015b62:	4640      	mov	r0, r8
    a->start_value = start;
 8015b64:	61eb      	str	r3, [r5, #28]
    a->current_value = start;
 8015b66:	622b      	str	r3, [r5, #32]
    a->end_value = end;
 8015b68:	626a      	str	r2, [r5, #36]	; 0x24
    a->exec_cb = exec_cb;
 8015b6a:	606e      	str	r6, [r5, #4]
 8015b6c:	f7fb fb9c 	bl	80112a8 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8015b70:	0031      	movs	r1, r6
    a->time = duration;
 8015b72:	62a8      	str	r0, [r5, #40]	; 0x28
 8015b74:	0020      	movs	r0, r4
 8015b76:	f7fb fb71 	bl	801125c <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8015b7a:	2800      	cmp	r0, #0
 8015b7c:	d100      	bne.n	8015b80 <lv_label_refr_text.part.0+0x290>
 8015b7e:	e13c      	b.n	8015dfa <lv_label_refr_text.part.0+0x50a>
 8015b80:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
            if(anim_template) {
 8015b82:	464a      	mov	r2, r9
 8015b84:	2a00      	cmp	r2, #0
 8015b86:	d100      	bne.n	8015b8a <lv_label_refr_text.part.0+0x29a>
 8015b88:	e12c      	b.n	8015de4 <lv_label_refr_text.part.0+0x4f4>
                a.act_time = anim_template->act_time;
 8015b8a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8015b8c:	62eb      	str	r3, [r5, #44]	; 0x2c
                a.repeat_delay = anim_template->repeat_delay;
 8015b8e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8015b90:	63ab      	str	r3, [r5, #56]	; 0x38
            lv_anim_start(&a);
 8015b92:	0028      	movs	r0, r5
 8015b94:	f7fb fb02 	bl	801119c <lv_anim_start>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015b98:	e763      	b.n	8015a62 <lv_label_refr_text.part.0+0x172>
            lv_anim_del(obj, set_ofs_x_anim);
 8015b9a:	492a      	ldr	r1, [pc, #168]	; (8015c44 <lv_label_refr_text.part.0+0x354>)
 8015b9c:	0020      	movs	r0, r4
 8015b9e:	f7fb fa13 	bl	8010fc8 <lv_anim_del>
            label->offset.x = 0;
 8015ba2:	2100      	movs	r1, #0
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015ba4:	ab02      	add	r3, sp, #8
            label->offset.x = 0;
 8015ba6:	85a1      	strh	r1, [r4, #44]	; 0x2c
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015ba8:	2212      	movs	r2, #18
 8015baa:	5e9a      	ldrsh	r2, [r3, r2]
 8015bac:	88f3      	ldrh	r3, [r6, #6]
 8015bae:	8870      	ldrh	r0, [r6, #2]
 8015bb0:	3301      	adds	r3, #1
 8015bb2:	1a1b      	subs	r3, r3, r0
 8015bb4:	b21b      	sxth	r3, r3
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	dc00      	bgt.n	8015bbc <lv_label_refr_text.part.0+0x2cc>
 8015bba:	e752      	b.n	8015a62 <lv_label_refr_text.part.0+0x172>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 8015bbc:	2008      	movs	r0, #8
 8015bbe:	5e3b      	ldrsh	r3, [r7, r0]
    a->exec_cb = exec_cb;
 8015bc0:	4e21      	ldr	r6, [pc, #132]	; (8015c48 <lv_label_refr_text.part.0+0x358>)
 8015bc2:	4252      	negs	r2, r2
 8015bc4:	1ad2      	subs	r2, r2, r3
    a->start_value = start;
 8015bc6:	61e9      	str	r1, [r5, #28]
    a->current_value = start;
 8015bc8:	6229      	str	r1, [r5, #32]
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015bca:	4640      	mov	r0, r8
    a->end_value = end;
 8015bcc:	626a      	str	r2, [r5, #36]	; 0x24
    a->exec_cb = exec_cb;
 8015bce:	606e      	str	r6, [r5, #4]
 8015bd0:	f7fb fb6a 	bl	80112a8 <lv_anim_speed_to_time>
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8015bd4:	0031      	movs	r1, r6
    a->time = duration;
 8015bd6:	62a8      	str	r0, [r5, #40]	; 0x28
 8015bd8:	0020      	movs	r0, r4
 8015bda:	f7fb fb3f 	bl	801125c <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8015bde:	2800      	cmp	r0, #0
 8015be0:	d100      	bne.n	8015be4 <lv_label_refr_text.part.0+0x2f4>
 8015be2:	e0f2      	b.n	8015dca <lv_label_refr_text.part.0+0x4da>
 8015be4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
            if(anim_template) {
 8015be6:	464a      	mov	r2, r9
 8015be8:	2a00      	cmp	r2, #0
 8015bea:	d100      	bne.n	8015bee <lv_label_refr_text.part.0+0x2fe>
 8015bec:	e107      	b.n	8015dfe <lv_label_refr_text.part.0+0x50e>
                a.act_time = anim_template->act_time;
 8015bee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8015bf0:	62eb      	str	r3, [r5, #44]	; 0x2c
                a.repeat_delay = anim_template->repeat_delay;
 8015bf2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8015bf4:	63ab      	str	r3, [r5, #56]	; 0x38
            lv_anim_start(&a);
 8015bf6:	0028      	movs	r0, r5
 8015bf8:	f7fb fad0 	bl	801119c <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015bfc:	e6ca      	b.n	8015994 <lv_label_refr_text.part.0+0xa4>
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8015bfe:	0020      	movs	r0, r4
 8015c00:	f7f5 f97a 	bl	800aef8 <lv_obj_get_disp>
 8015c04:	f7fa ffe0 	bl	8010bc8 <lv_disp_get_dpi>
 8015c08:	2103      	movs	r1, #3
 8015c0a:	f7ea fb17 	bl	800023c <__divsi3>
 8015c0e:	b283      	uxth	r3, r0
 8015c10:	4698      	mov	r8, r3
 8015c12:	e786      	b.n	8015b22 <lv_label_refr_text.part.0+0x232>
                playback_now = anim_cur->playback_now;
 8015c14:	233e      	movs	r3, #62	; 0x3e
 8015c16:	5cc1      	ldrb	r1, [r0, r3]
                a.early_apply = 0;
 8015c18:	2001      	movs	r0, #1
                a.act_time = act_time;      /*To keep the old position*/
 8015c1a:	62ea      	str	r2, [r5, #44]	; 0x2c
                a.early_apply = 0;
 8015c1c:	5cea      	ldrb	r2, [r5, r3]
 8015c1e:	4382      	bics	r2, r0
 8015c20:	54ea      	strb	r2, [r5, r3]
                if(playback_now) {
 8015c22:	078a      	lsls	r2, r1, #30
 8015c24:	d400      	bmi.n	8015c28 <lv_label_refr_text.part.0+0x338>
 8015c26:	e712      	b.n	8015a4e <lv_label_refr_text.part.0+0x15e>
                    a.playback_now = 1;
 8015c28:	2102      	movs	r1, #2
 8015c2a:	5cea      	ldrb	r2, [r5, r3]
 8015c2c:	430a      	orrs	r2, r1
 8015c2e:	54ea      	strb	r2, [r5, r3]
                    tmp      = a.start_value;
 8015c30:	69ea      	ldr	r2, [r5, #28]
                    a.start_value = a.end_value;
 8015c32:	6a69      	ldr	r1, [r5, #36]	; 0x24
                    a.end_value   = tmp;
 8015c34:	626a      	str	r2, [r5, #36]	; 0x24
                    a.start_value = a.end_value;
 8015c36:	61e9      	str	r1, [r5, #28]
                    a.end_value   = tmp;
 8015c38:	e70b      	b.n	8015a52 <lv_label_refr_text.part.0+0x162>
 8015c3a:	46c0      	nop			; (mov r8, r8)
 8015c3c:	000027d1 	.word	0x000027d1
 8015c40:	20000024 	.word	0x20000024
 8015c44:	08015549 	.word	0x08015549
 8015c48:	0801553d 	.word	0x0801553d
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015c4c:	88b5      	ldrh	r5, [r6, #4]
 8015c4e:	8833      	ldrh	r3, [r6, #0]
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 8015c50:	222e      	movs	r2, #46	; 0x2e
 8015c52:	212e      	movs	r1, #46	; 0x2e
 8015c54:	0038      	movs	r0, r7
 8015c56:	3501      	adds	r5, #1
 8015c58:	1aed      	subs	r5, r5, r3
 8015c5a:	f7fa fc39 	bl	80104d0 <lv_font_get_glyph_width>
 8015c5e:	4440      	add	r0, r8
            p.x = lv_area_get_width(&txt_coords) -
 8015c60:	0383      	lsls	r3, r0, #14
 8015c62:	1a1b      	subs	r3, r3, r0
 8015c64:	009b      	lsls	r3, r3, #2
 8015c66:	b2ad      	uxth	r5, r5
 8015c68:	18c0      	adds	r0, r0, r3
 8015c6a:	1828      	adds	r0, r5, r0
 8015c6c:	ab02      	add	r3, sp, #8
 8015c6e:	8298      	strh	r0, [r3, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015c70:	88f0      	ldrh	r0, [r6, #6]
 8015c72:	8873      	ldrh	r3, [r6, #2]
 8015c74:	3001      	adds	r0, #1
 8015c76:	1ac0      	subs	r0, r0, r3
 8015c78:	2308      	movs	r3, #8
 8015c7a:	5efe      	ldrsh	r6, [r7, r3]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 8015c7c:	4653      	mov	r3, sl
 8015c7e:	b285      	uxth	r5, r0
 8015c80:	18f1      	adds	r1, r6, r3
            y_overed = p.y %
 8015c82:	b200      	sxth	r0, r0
 8015c84:	f7ea fbc0 	bl	8000408 <__aeabi_idivmod>
            if(y_overed >= lv_font_get_line_height(font)) {
 8015c88:	b20b      	sxth	r3, r1
 8015c8a:	429e      	cmp	r6, r3
 8015c8c:	dd00      	ble.n	8015c90 <lv_label_refr_text.part.0+0x3a0>
 8015c8e:	e0c1      	b.n	8015e14 <lv_label_refr_text.part.0+0x524>
                p.y += lv_font_get_line_height(font);
 8015c90:	19ad      	adds	r5, r5, r6
 8015c92:	1a6b      	subs	r3, r5, r1
 8015c94:	b21b      	sxth	r3, r3
 8015c96:	aa02      	add	r2, sp, #8
 8015c98:	a907      	add	r1, sp, #28
 8015c9a:	0020      	movs	r0, r4
 8015c9c:	82d3      	strh	r3, [r2, #22]
    LV_ASSERT_NULL(pos_in);
 8015c9e:	f7ff fc95 	bl	80155cc <lv_label_get_letter_on.part.0>
            size_t txt_len = strlen(label->text);
 8015ca2:	6a25      	ldr	r5, [r4, #32]
 8015ca4:	0007      	movs	r7, r0
 8015ca6:	0028      	movs	r0, r5
 8015ca8:	f7ea fa36 	bl	8000118 <strlen>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8015cac:	4b67      	ldr	r3, [pc, #412]	; (8015e4c <lv_label_refr_text.part.0+0x55c>)
            size_t txt_len = strlen(label->text);
 8015cae:	4681      	mov	r9, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	0028      	movs	r0, r5
 8015cb4:	0039      	movs	r1, r7
 8015cb6:	4798      	blx	r3
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8015cb8:	1cc3      	adds	r3, r0, #3
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8015cba:	0006      	movs	r6, r0
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8015cbc:	4698      	mov	r8, r3
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8015cbe:	900a      	str	r0, [sp, #40]	; 0x28
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8015cc0:	ad0a      	add	r5, sp, #40	; 0x28
 8015cc2:	4599      	cmp	r9, r3
 8015cc4:	d20c      	bcs.n	8015ce0 <lv_label_refr_text.part.0+0x3f0>
 8015cc6:	4b62      	ldr	r3, [pc, #392]	; (8015e50 <lv_label_refr_text.part.0+0x560>)
 8015cc8:	469a      	mov	sl, r3
                _lv_txt_encoded_prev(label->text, &byte_id);
 8015cca:	4653      	mov	r3, sl
 8015ccc:	0029      	movs	r1, r5
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	6a20      	ldr	r0, [r4, #32]
 8015cd2:	4798      	blx	r3
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8015cd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
                letter_id--;
 8015cd6:	3f01      	subs	r7, #1
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8015cd8:	1cf3      	adds	r3, r6, #3
 8015cda:	4698      	mov	r8, r3
 8015cdc:	4599      	cmp	r9, r3
 8015cde:	d3f4      	bcc.n	8015cca <lv_label_refr_text.part.0+0x3da>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8015ce0:	2304      	movs	r3, #4
 8015ce2:	9305      	str	r3, [sp, #20]
            uint8_t len = 0;
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	9304      	str	r3, [sp, #16]
 8015ce8:	4b5a      	ldr	r3, [pc, #360]	; (8015e54 <lv_label_refr_text.part.0+0x564>)
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8015cea:	0030      	movs	r0, r6
 8015cec:	469b      	mov	fp, r3
 8015cee:	4b5a      	ldr	r3, [pc, #360]	; (8015e58 <lv_label_refr_text.part.0+0x568>)
 8015cf0:	469a      	mov	sl, r3
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8015cf2:	6a23      	ldr	r3, [r4, #32]
 8015cf4:	469c      	mov	ip, r3
 8015cf6:	465b      	mov	r3, fp
 8015cf8:	4460      	add	r0, ip
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	4798      	blx	r3
 8015cfe:	9b04      	ldr	r3, [sp, #16]
                _lv_txt_encoded_next(label->text, &byte_id);
 8015d00:	4652      	mov	r2, sl
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8015d02:	469c      	mov	ip, r3
 8015d04:	4460      	add	r0, ip
 8015d06:	b2c3      	uxtb	r3, r0
                _lv_txt_encoded_next(label->text, &byte_id);
 8015d08:	0029      	movs	r1, r5
 8015d0a:	6a20      	ldr	r0, [r4, #32]
 8015d0c:	6812      	ldr	r2, [r2, #0]
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8015d0e:	9304      	str	r3, [sp, #16]
                _lv_txt_encoded_next(label->text, &byte_id);
 8015d10:	4790      	blx	r2
                if(len > LV_LABEL_DOT_NUM || byte_id > txt_len) {
 8015d12:	9b04      	ldr	r3, [sp, #16]
 8015d14:	2b03      	cmp	r3, #3
 8015d16:	d900      	bls.n	8015d1a <lv_label_refr_text.part.0+0x42a>
 8015d18:	e08b      	b.n	8015e32 <lv_label_refr_text.part.0+0x542>
 8015d1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015d1c:	4581      	cmp	r9, r0
 8015d1e:	d304      	bcc.n	8015d2a <lv_label_refr_text.part.0+0x43a>
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8015d20:	9b05      	ldr	r3, [sp, #20]
 8015d22:	3b01      	subs	r3, #1
 8015d24:	9305      	str	r3, [sp, #20]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d1e3      	bne.n	8015cf2 <lv_label_refr_text.part.0+0x402>
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8015d2a:	2240      	movs	r2, #64	; 0x40
 8015d2c:	2130      	movs	r1, #48	; 0x30
 8015d2e:	0010      	movs	r0, r2
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 8015d30:	6a23      	ldr	r3, [r4, #32]
 8015d32:	199d      	adds	r5, r3, r6
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8015d34:	5c63      	ldrb	r3, [r4, r1]
 8015d36:	4018      	ands	r0, r3
 8015d38:	421a      	tst	r2, r3
 8015d3a:	d070      	beq.n	8015e1e <lv_label_refr_text.part.0+0x52e>
 8015d3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015d3e:	2800      	cmp	r0, #0
 8015d40:	d100      	bne.n	8015d44 <lv_label_refr_text.part.0+0x454>
 8015d42:	e080      	b.n	8015e46 <lv_label_refr_text.part.0+0x556>
        lv_mem_free(label->dot.tmp_ptr);
 8015d44:	f7fc f954 	bl	8011ff0 <lv_mem_free>
    label->dot_tmp_alloc = false;
 8015d48:	2330      	movs	r3, #48	; 0x30
 8015d4a:	2240      	movs	r2, #64	; 0x40
 8015d4c:	4699      	mov	r9, r3
 8015d4e:	5ce3      	ldrb	r3, [r4, r3]
 8015d50:	4393      	bics	r3, r2
 8015d52:	464a      	mov	r2, r9
 8015d54:	54a3      	strb	r3, [r4, r2]
    label->dot.tmp_ptr   = NULL;
 8015d56:	2300      	movs	r3, #0
 8015d58:	469a      	mov	sl, r3
 8015d5a:	6263      	str	r3, [r4, #36]	; 0x24
    if(len > sizeof(char *)) {
 8015d5c:	9b04      	ldr	r3, [sp, #16]
 8015d5e:	2b04      	cmp	r3, #4
 8015d60:	d960      	bls.n	8015e24 <lv_label_refr_text.part.0+0x534>
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 8015d62:	1c58      	adds	r0, r3, #1
 8015d64:	f7fc f922 	bl	8011fac <lv_mem_alloc>
 8015d68:	6260      	str	r0, [r4, #36]	; 0x24
        if(label->dot.tmp_ptr == NULL) {
 8015d6a:	2800      	cmp	r0, #0
 8015d6c:	d100      	bne.n	8015d70 <lv_label_refr_text.part.0+0x480>
 8015d6e:	e611      	b.n	8015994 <lv_label_refr_text.part.0+0xa4>
        lv_memcpy(label->dot.tmp_ptr, data, len);
 8015d70:	9b04      	ldr	r3, [sp, #16]
 8015d72:	0029      	movs	r1, r5
 8015d74:	469b      	mov	fp, r3
 8015d76:	001a      	movs	r2, r3
 8015d78:	f7fc facc 	bl	8012314 <lv_memcpy>
        label->dot.tmp_ptr[len] = '\0';
 8015d7c:	465b      	mov	r3, fp
 8015d7e:	4652      	mov	r2, sl
 8015d80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015d82:	54ca      	strb	r2, [r1, r3]
        label->dot_tmp_alloc    = true;
 8015d84:	464b      	mov	r3, r9
 8015d86:	2240      	movs	r2, #64	; 0x40
 8015d88:	5ce3      	ldrb	r3, [r4, r3]
 8015d8a:	4313      	orrs	r3, r2
 8015d8c:	464a      	mov	r2, r9
 8015d8e:	54a3      	strb	r3, [r4, r2]
                    label->text[byte_id_ori + i] = '.';
 8015d90:	232e      	movs	r3, #46	; 0x2e
 8015d92:	6a22      	ldr	r2, [r4, #32]
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8015d94:	4641      	mov	r1, r8
                    label->text[byte_id_ori + i] = '.';
 8015d96:	5593      	strb	r3, [r2, r6]
 8015d98:	6a22      	ldr	r2, [r4, #32]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8015d9a:	3703      	adds	r7, #3
                    label->text[byte_id_ori + i] = '.';
 8015d9c:	1992      	adds	r2, r2, r6
 8015d9e:	7053      	strb	r3, [r2, #1]
 8015da0:	6a22      	ldr	r2, [r4, #32]
 8015da2:	4694      	mov	ip, r2
 8015da4:	4466      	add	r6, ip
 8015da6:	70b3      	strb	r3, [r6, #2]
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8015da8:	2300      	movs	r3, #0
 8015daa:	6a22      	ldr	r2, [r4, #32]
 8015dac:	5453      	strb	r3, [r2, r1]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8015dae:	62a7      	str	r7, [r4, #40]	; 0x28
 8015db0:	e5f0      	b.n	8015994 <lv_label_refr_text.part.0+0xa4>
            if(act_time < a.time) {
 8015db2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	dd05      	ble.n	8015dc4 <lv_label_refr_text.part.0+0x4d4>
                a.early_apply = 0;
 8015db8:	223e      	movs	r2, #62	; 0x3e
 8015dba:	2101      	movs	r1, #1
                a.act_time = act_time;      /*To keep the old position*/
 8015dbc:	62e8      	str	r0, [r5, #44]	; 0x2c
                a.early_apply = 0;
 8015dbe:	5cab      	ldrb	r3, [r5, r2]
 8015dc0:	438b      	bics	r3, r1
 8015dc2:	54ab      	strb	r3, [r5, r2]
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015dc4:	69e9      	ldr	r1, [r5, #28]
 8015dc6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8015dc8:	e688      	b.n	8015adc <lv_label_refr_text.part.0+0x1ec>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8015dca:	2300      	movs	r3, #0
 8015dcc:	e70b      	b.n	8015be6 <lv_label_refr_text.part.0+0x2f6>
            if(act_time < a.time) {
 8015dce:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	dc00      	bgt.n	8015dd6 <lv_label_refr_text.part.0+0x4e6>
 8015dd4:	e63b      	b.n	8015a4e <lv_label_refr_text.part.0+0x15e>
                a.early_apply = 0;
 8015dd6:	223e      	movs	r2, #62	; 0x3e
 8015dd8:	2101      	movs	r1, #1
                a.act_time = act_time;      /*To keep the old position*/
 8015dda:	62e8      	str	r0, [r5, #44]	; 0x2c
                a.early_apply = 0;
 8015ddc:	5cab      	ldrb	r3, [r5, r2]
 8015dde:	438b      	bics	r3, r1
 8015de0:	54ab      	strb	r3, [r5, r2]
 8015de2:	e634      	b.n	8015a4e <lv_label_refr_text.part.0+0x15e>
            else if(act_time < a.time) {
 8015de4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8015de6:	429a      	cmp	r2, r3
 8015de8:	dc00      	bgt.n	8015dec <lv_label_refr_text.part.0+0x4fc>
 8015dea:	e6d2      	b.n	8015b92 <lv_label_refr_text.part.0+0x2a2>
                a.early_apply = 0;
 8015dec:	223e      	movs	r2, #62	; 0x3e
 8015dee:	2101      	movs	r1, #1
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8015df0:	62eb      	str	r3, [r5, #44]	; 0x2c
                a.early_apply = 0;
 8015df2:	5cab      	ldrb	r3, [r5, r2]
 8015df4:	438b      	bics	r3, r1
 8015df6:	54ab      	strb	r3, [r5, r2]
 8015df8:	e6cb      	b.n	8015b92 <lv_label_refr_text.part.0+0x2a2>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	e6c1      	b.n	8015b82 <lv_label_refr_text.part.0+0x292>
            else if(act_time < a.time) {
 8015dfe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8015e00:	429a      	cmp	r2, r3
 8015e02:	dc00      	bgt.n	8015e06 <lv_label_refr_text.part.0+0x516>
 8015e04:	e6f7      	b.n	8015bf6 <lv_label_refr_text.part.0+0x306>
                a.early_apply = 0;
 8015e06:	223e      	movs	r2, #62	; 0x3e
 8015e08:	2101      	movs	r1, #1
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8015e0a:	62eb      	str	r3, [r5, #44]	; 0x2c
                a.early_apply = 0;
 8015e0c:	5cab      	ldrb	r3, [r5, r2]
 8015e0e:	438b      	bics	r3, r1
 8015e10:	54ab      	strb	r3, [r5, r2]
 8015e12:	e6f0      	b.n	8015bf6 <lv_label_refr_text.part.0+0x306>
                p.y -= line_space;
 8015e14:	464b      	mov	r3, r9
 8015e16:	1aed      	subs	r5, r5, r3
 8015e18:	1a6b      	subs	r3, r5, r1
 8015e1a:	b21b      	sxth	r3, r3
 8015e1c:	e73b      	b.n	8015c96 <lv_label_refr_text.part.0+0x3a6>
    label->dot_tmp_alloc = false;
 8015e1e:	4393      	bics	r3, r2
 8015e20:	5463      	strb	r3, [r4, r1]
    label->dot.tmp_ptr   = NULL;
 8015e22:	6260      	str	r0, [r4, #36]	; 0x24
        lv_memcpy(label->dot.tmp, data, len);
 8015e24:	0020      	movs	r0, r4
 8015e26:	0029      	movs	r1, r5
 8015e28:	9a04      	ldr	r2, [sp, #16]
 8015e2a:	3024      	adds	r0, #36	; 0x24
 8015e2c:	f7fc fa72 	bl	8012314 <lv_memcpy>
 8015e30:	e7ae      	b.n	8015d90 <lv_label_refr_text.part.0+0x4a0>
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 8015e32:	6a23      	ldr	r3, [r4, #32]
 8015e34:	199d      	adds	r5, r3, r6
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8015e36:	2330      	movs	r3, #48	; 0x30
 8015e38:	5ce3      	ldrb	r3, [r4, r3]
 8015e3a:	065b      	lsls	r3, r3, #25
 8015e3c:	d584      	bpl.n	8015d48 <lv_label_refr_text.part.0+0x458>
 8015e3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015e40:	2800      	cmp	r0, #0
 8015e42:	d081      	beq.n	8015d48 <lv_label_refr_text.part.0+0x458>
 8015e44:	e77e      	b.n	8015d44 <lv_label_refr_text.part.0+0x454>
    label->dot_tmp_alloc = false;
 8015e46:	4393      	bics	r3, r2
 8015e48:	5463      	strb	r3, [r4, r1]
    if(len > sizeof(char *)) {
 8015e4a:	e7eb      	b.n	8015e24 <lv_label_refr_text.part.0+0x534>
 8015e4c:	20000010 	.word	0x20000010
 8015e50:	2000001c 	.word	0x2000001c
 8015e54:	20000020 	.word	0x20000020
 8015e58:	20000018 	.word	0x20000018

08015e5c <lv_label_event>:
{
 8015e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e5e:	46d6      	mov	lr, sl
 8015e60:	464f      	mov	r7, r9
 8015e62:	4646      	mov	r6, r8
 8015e64:	b5c0      	push	{r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8015e66:	48c9      	ldr	r0, [pc, #804]	; (801618c <lv_label_event+0x330>)
{
 8015e68:	b092      	sub	sp, #72	; 0x48
 8015e6a:	000c      	movs	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8015e6c:	f7eb ff96 	bl	8001d9c <lv_obj_event_base>
 8015e70:	0005      	movs	r5, r0
    if(res != LV_RES_OK) return;
 8015e72:	2801      	cmp	r0, #1
 8015e74:	d005      	beq.n	8015e82 <lv_label_event+0x26>
}
 8015e76:	b012      	add	sp, #72	; 0x48
 8015e78:	bce0      	pop	{r5, r6, r7}
 8015e7a:	46ba      	mov	sl, r7
 8015e7c:	46b1      	mov	r9, r6
 8015e7e:	46a8      	mov	r8, r5
 8015e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8015e82:	0020      	movs	r0, r4
 8015e84:	f7eb ffa6 	bl	8001dd4 <lv_event_get_code>
 8015e88:	0006      	movs	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8015e8a:	0020      	movs	r0, r4
 8015e8c:	f7eb ff9e 	bl	8001dcc <lv_event_get_target>
 8015e90:	0007      	movs	r7, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8015e92:	2e2a      	cmp	r6, #42	; 0x2a
 8015e94:	d069      	beq.n	8015f6a <lv_label_event+0x10e>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8015e96:	2e13      	cmp	r6, #19
 8015e98:	d078      	beq.n	8015f8c <lv_label_event+0x130>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8015e9a:	2e29      	cmp	r6, #41	; 0x29
 8015e9c:	d065      	beq.n	8015f6a <lv_label_event+0x10e>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8015e9e:	2e2c      	cmp	r6, #44	; 0x2c
 8015ea0:	d100      	bne.n	8015ea4 <lv_label_event+0x48>
 8015ea2:	e082      	b.n	8015faa <lv_label_event+0x14e>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8015ea4:	2e15      	cmp	r6, #21
 8015ea6:	d1e6      	bne.n	8015e76 <lv_label_event+0x1a>
    lv_obj_t * obj = lv_event_get_target(e);
 8015ea8:	0020      	movs	r0, r4
 8015eaa:	f7eb ff8f 	bl	8001dcc <lv_event_get_target>
 8015eae:	0007      	movs	r7, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8015eb0:	0020      	movs	r0, r4
 8015eb2:	f7eb fff1 	bl	8001e98 <lv_event_get_draw_ctx>
    lv_obj_get_content_coords(obj, &txt_coords);
 8015eb6:	a906      	add	r1, sp, #24
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8015eb8:	0004      	movs	r4, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 8015eba:	0038      	movs	r0, r7
 8015ebc:	f7ef ffee 	bl	8005e9c <lv_obj_get_content_coords>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015ec0:	2330      	movs	r3, #48	; 0x30
 8015ec2:	5cfb      	ldrb	r3, [r7, r3]
 8015ec4:	0918      	lsrs	r0, r3, #4
 8015ec6:	4005      	ands	r5, r0
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015ec8:	069b      	lsls	r3, r3, #26
 8015eca:	d501      	bpl.n	8015ed0 <lv_label_event+0x74>
 8015ecc:	2302      	movs	r3, #2
 8015ece:	431d      	orrs	r5, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8015ed0:	2201      	movs	r2, #1
 8015ed2:	2100      	movs	r1, #0
 8015ed4:	0038      	movs	r0, r7
 8015ed6:	f7f3 fc0b 	bl	80096f0 <lv_obj_get_style_prop>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8015eda:	4bad      	ldr	r3, [pc, #692]	; (8016190 <lv_label_event+0x334>)
    return (lv_coord_t)v.num;
 8015edc:	b200      	sxth	r0, r0
 8015ede:	4298      	cmp	r0, r3
 8015ee0:	d100      	bne.n	8015ee4 <lv_label_event+0x88>
 8015ee2:	e0e0      	b.n	80160a6 <lv_label_event+0x24a>
    lv_draw_label_dsc_init(&label_draw_dsc);
 8015ee4:	ae0a      	add	r6, sp, #40	; 0x28
 8015ee6:	0030      	movs	r0, r6
 8015ee8:	f7f6 fc3a 	bl	800c760 <lv_draw_label_dsc_init>
    label_draw_dsc.ofs_x = label->offset.x;
 8015eec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8015eee:	2100      	movs	r1, #0
    label_draw_dsc.ofs_x = label->offset.x;
 8015ef0:	82f3      	strh	r3, [r6, #22]
    label_draw_dsc.ofs_y = label->offset.y;
 8015ef2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8015ef4:	0032      	movs	r2, r6
    label_draw_dsc.ofs_y = label->offset.y;
 8015ef6:	8333      	strh	r3, [r6, #24]
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8015ef8:	0038      	movs	r0, r7
    label_draw_dsc.flag = flag;
 8015efa:	7775      	strb	r5, [r6, #29]
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8015efc:	f7ef fb1a 	bl	8005534 <lv_obj_init_draw_label_dsc>
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8015f00:	7f33      	ldrb	r3, [r6, #28]
    lv_bidi_calculate_align(&label_draw_dsc.align, &label_draw_dsc.bidi_dir, label->text);
 8015f02:	6a39      	ldr	r1, [r7, #32]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d000      	beq.n	8015f0a <lv_label_event+0xae>
 8015f08:	e0a1      	b.n	801604e <lv_label_event+0x1f2>
 8015f0a:	3301      	adds	r3, #1
 8015f0c:	7733      	strb	r3, [r6, #28]
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 8015f0e:	4ba1      	ldr	r3, [pc, #644]	; (8016194 <lv_label_event+0x338>)
 8015f10:	6073      	str	r3, [r6, #4]
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 8015f12:	60b3      	str	r3, [r6, #8]
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8015f14:	ab08      	add	r3, sp, #32
 8015f16:	4698      	mov	r8, r3
    bool is_common = _lv_area_intersect(&txt_clip, &txt_coords, draw_ctx->clip_area);
 8015f18:	4640      	mov	r0, r8
 8015f1a:	68a2      	ldr	r2, [r4, #8]
 8015f1c:	a906      	add	r1, sp, #24
 8015f1e:	f7fb fa35 	bl	801138c <_lv_area_intersect>
    if(!is_common) return;
 8015f22:	2800      	cmp	r0, #0
 8015f24:	d0a7      	beq.n	8015e76 <lv_label_event+0x1a>
    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 8015f26:	2330      	movs	r3, #48	; 0x30
 8015f28:	5cfa      	ldrb	r2, [r7, r3]
 8015f2a:	4699      	mov	r9, r3
 8015f2c:	0753      	lsls	r3, r2, #29
 8015f2e:	d100      	bne.n	8015f32 <lv_label_event+0xd6>
 8015f30:	e0ce      	b.n	80160d0 <lv_label_event+0x274>
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8015f32:	2306      	movs	r3, #6
 8015f34:	4013      	ands	r3, r2
 8015f36:	2b02      	cmp	r3, #2
 8015f38:	d100      	bne.n	8015f3c <lv_label_event+0xe0>
 8015f3a:	e0bc      	b.n	80160b6 <lv_label_event+0x25a>
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	6a3b      	ldr	r3, [r7, #32]
 8015f40:	0031      	movs	r1, r6
 8015f42:	9200      	str	r2, [sp, #0]
 8015f44:	0020      	movs	r0, r4
 8015f46:	aa06      	add	r2, sp, #24
 8015f48:	f7f6 fc22 	bl	800c790 <lv_draw_label>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8015f4c:	68a3      	ldr	r3, [r4, #8]
 8015f4e:	4699      	mov	r9, r3
    draw_ctx->clip_area = &txt_clip;
 8015f50:	4643      	mov	r3, r8
 8015f52:	60a3      	str	r3, [r4, #8]
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8015f54:	2330      	movs	r3, #48	; 0x30
 8015f56:	2207      	movs	r2, #7
 8015f58:	5cfb      	ldrb	r3, [r7, r3]
 8015f5a:	401a      	ands	r2, r3
 8015f5c:	4690      	mov	r8, r2
 8015f5e:	2a03      	cmp	r2, #3
 8015f60:	d100      	bne.n	8015f64 <lv_label_event+0x108>
 8015f62:	e0c4      	b.n	80160ee <lv_label_event+0x292>
    draw_ctx->clip_area = clip_area_ori;
 8015f64:	464b      	mov	r3, r9
 8015f66:	60a3      	str	r3, [r4, #8]
 8015f68:	e785      	b.n	8015e76 <lv_label_event+0x1a>
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 8015f6a:	2330      	movs	r3, #48	; 0x30
 8015f6c:	5cfa      	ldrb	r2, [r7, r3]
 8015f6e:	3b29      	subs	r3, #41	; 0x29
 8015f70:	4013      	ands	r3, r2
 8015f72:	2b01      	cmp	r3, #1
 8015f74:	d102      	bne.n	8015f7c <lv_label_event+0x120>
 8015f76:	0038      	movs	r0, r7
 8015f78:	f7ff faec 	bl	8015554 <lv_label_revert_dots.part.0>
    if(label->text == NULL) return;
 8015f7c:	6a3b      	ldr	r3, [r7, #32]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d100      	bne.n	8015f84 <lv_label_event+0x128>
 8015f82:	e778      	b.n	8015e76 <lv_label_event+0x1a>
 8015f84:	0038      	movs	r0, r7
 8015f86:	f7ff fcb3 	bl	80158f0 <lv_label_refr_text.part.0>
 8015f8a:	e774      	b.n	8015e76 <lv_label_event+0x1a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8015f8c:	2257      	movs	r2, #87	; 0x57
 8015f8e:	2100      	movs	r1, #0
 8015f90:	f7f3 fbae 	bl	80096f0 <lv_obj_get_style_prop>
        lv_event_set_ext_draw_size(e, font_h / 4);
 8015f94:	2103      	movs	r1, #3
 8015f96:	2208      	movs	r2, #8
 8015f98:	5e83      	ldrsh	r3, [r0, r2]
 8015f9a:	0020      	movs	r0, r4
 8015f9c:	17da      	asrs	r2, r3, #31
 8015f9e:	4011      	ands	r1, r2
 8015fa0:	18c9      	adds	r1, r1, r3
 8015fa2:	1089      	asrs	r1, r1, #2
 8015fa4:	f7eb ff80 	bl	8001ea8 <lv_event_set_ext_draw_size>
 8015fa8:	e765      	b.n	8015e76 <lv_label_event+0x1a>
 8015faa:	2257      	movs	r2, #87	; 0x57
 8015fac:	2100      	movs	r1, #0
 8015fae:	f7f3 fb9f 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8015fb2:	2258      	movs	r2, #88	; 0x58
 8015fb4:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8015fb6:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8015fb8:	0038      	movs	r0, r7
 8015fba:	f7f3 fb99 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8015fbe:	2259      	movs	r2, #89	; 0x59
    return (lv_coord_t)v.num;
 8015fc0:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8015fc2:	2100      	movs	r1, #0
 8015fc4:	0038      	movs	r0, r7
    return (lv_coord_t)v.num;
 8015fc6:	4699      	mov	r9, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8015fc8:	f7f3 fb92 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8015fcc:	b203      	sxth	r3, r0
 8015fce:	469a      	mov	sl, r3
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015fd0:	2330      	movs	r3, #48	; 0x30
 8015fd2:	5cfb      	ldrb	r3, [r7, r3]
 8015fd4:	0918      	lsrs	r0, r3, #4
 8015fd6:	4005      	ands	r5, r0
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015fd8:	069b      	lsls	r3, r3, #26
 8015fda:	d501      	bpl.n	8015fe0 <lv_label_event+0x184>
 8015fdc:	2302      	movs	r3, #2
 8015fde:	431d      	orrs	r5, r3
        lv_coord_t w = lv_obj_get_content_width(obj);
 8015fe0:	0038      	movs	r0, r7
 8015fe2:	f7ef ff1f 	bl	8005e24 <lv_obj_get_content_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8015fe6:	2201      	movs	r2, #1
 8015fe8:	2100      	movs	r1, #0
 8015fea:	0038      	movs	r0, r7
 8015fec:	f7f3 fb80 	bl	80096f0 <lv_obj_get_style_prop>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8015ff0:	4b67      	ldr	r3, [pc, #412]	; (8016190 <lv_label_event+0x334>)
    return (lv_coord_t)v.num;
 8015ff2:	b200      	sxth	r0, r0
 8015ff4:	4298      	cmp	r0, r3
 8015ff6:	d126      	bne.n	8016046 <lv_label_event+0x1ea>
 8015ff8:	7ffb      	ldrb	r3, [r7, #31]
 8015ffa:	075b      	lsls	r3, r3, #29
 8015ffc:	d423      	bmi.n	8016046 <lv_label_event+0x1ea>
 8015ffe:	4866      	ldr	r0, [pc, #408]	; (8016198 <lv_label_event+0x33c>)
        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 8016000:	4653      	mov	r3, sl
 8016002:	ae0a      	add	r6, sp, #40	; 0x28
 8016004:	6a39      	ldr	r1, [r7, #32]
 8016006:	4642      	mov	r2, r8
 8016008:	9502      	str	r5, [sp, #8]
 801600a:	9001      	str	r0, [sp, #4]
 801600c:	9300      	str	r3, [sp, #0]
 801600e:	0030      	movs	r0, r6
 8016010:	464b      	mov	r3, r9
 8016012:	f7fd fdcd 	bl	8013bb0 <lv_txt_get_size>
        lv_point_t * self_size = lv_event_get_param(e);
 8016016:	0020      	movs	r0, r4
 8016018:	f7eb fee0 	bl	8001ddc <lv_event_get_param>
        self_size->x = LV_MAX(self_size->x, size.x);
 801601c:	8833      	ldrh	r3, [r6, #0]
 801601e:	2500      	movs	r5, #0
 8016020:	5f41      	ldrsh	r1, [r0, r5]
 8016022:	1c1a      	adds	r2, r3, #0
 8016024:	b21b      	sxth	r3, r3
 8016026:	8804      	ldrh	r4, [r0, #0]
 8016028:	428b      	cmp	r3, r1
 801602a:	da00      	bge.n	801602e <lv_label_event+0x1d2>
 801602c:	1c22      	adds	r2, r4, #0
 801602e:	8002      	strh	r2, [r0, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 8016030:	8873      	ldrh	r3, [r6, #2]
 8016032:	2502      	movs	r5, #2
 8016034:	5f41      	ldrsh	r1, [r0, r5]
 8016036:	1c1a      	adds	r2, r3, #0
 8016038:	b21b      	sxth	r3, r3
 801603a:	8844      	ldrh	r4, [r0, #2]
 801603c:	428b      	cmp	r3, r1
 801603e:	da00      	bge.n	8016042 <lv_label_event+0x1e6>
 8016040:	1c22      	adds	r2, r4, #0
 8016042:	8042      	strh	r2, [r0, #2]
 8016044:	e717      	b.n	8015e76 <lv_label_event+0x1a>
        else w = lv_obj_get_content_width(obj);
 8016046:	0038      	movs	r0, r7
 8016048:	f7ef feec 	bl	8005e24 <lv_obj_get_content_width>
 801604c:	e7d8      	b.n	8016000 <lv_label_event+0x1a4>
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 801604e:	4a51      	ldr	r2, [pc, #324]	; (8016194 <lv_label_event+0x338>)
 8016050:	6072      	str	r2, [r6, #4]
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 8016052:	60b2      	str	r2, [r6, #8]
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8016054:	2230      	movs	r2, #48	; 0x30
 8016056:	5cb8      	ldrb	r0, [r7, r2]
 8016058:	3a2a      	subs	r2, #42	; 0x2a
 801605a:	4002      	ands	r2, r0
 801605c:	a808      	add	r0, sp, #32
 801605e:	4680      	mov	r8, r0
 8016060:	2a02      	cmp	r2, #2
 8016062:	d000      	beq.n	8016066 <lv_label_event+0x20a>
 8016064:	e758      	b.n	8015f18 <lv_label_event+0xbc>
 8016066:	3b02      	subs	r3, #2
 8016068:	2b01      	cmp	r3, #1
 801606a:	d900      	bls.n	801606e <lv_label_event+0x212>
 801606c:	e754      	b.n	8015f18 <lv_label_event+0xbc>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 801606e:	2214      	movs	r2, #20
 8016070:	5eb3      	ldrsh	r3, [r6, r2]
 8016072:	4a49      	ldr	r2, [pc, #292]	; (8016198 <lv_label_event+0x33c>)
 8016074:	9502      	str	r5, [sp, #8]
 8016076:	9201      	str	r2, [sp, #4]
 8016078:	2012      	movs	r0, #18
 801607a:	5e32      	ldrsh	r2, [r6, r0]
 801607c:	4640      	mov	r0, r8
 801607e:	9200      	str	r2, [sp, #0]
 8016080:	6832      	ldr	r2, [r6, #0]
 8016082:	f7fd fd95 	bl	8013bb0 <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8016086:	466b      	mov	r3, sp
 8016088:	466a      	mov	r2, sp
 801608a:	8b9b      	ldrh	r3, [r3, #28]
 801608c:	8b12      	ldrh	r2, [r2, #24]
 801608e:	3301      	adds	r3, #1
 8016090:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 8016092:	4642      	mov	r2, r8
 8016094:	2100      	movs	r1, #0
 8016096:	5e52      	ldrsh	r2, [r2, r1]
 8016098:	b21b      	sxth	r3, r3
 801609a:	429a      	cmp	r2, r3
 801609c:	dc00      	bgt.n	80160a0 <lv_label_event+0x244>
 801609e:	e73b      	b.n	8015f18 <lv_label_event+0xbc>
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 80160a0:	2301      	movs	r3, #1
 80160a2:	7733      	strb	r3, [r6, #28]
 80160a4:	e738      	b.n	8015f18 <lv_label_event+0xbc>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80160a6:	7ffb      	ldrb	r3, [r7, #31]
 80160a8:	075b      	lsls	r3, r3, #29
 80160aa:	d500      	bpl.n	80160ae <lv_label_event+0x252>
 80160ac:	e71a      	b.n	8015ee4 <lv_label_event+0x88>
 80160ae:	2304      	movs	r3, #4
 80160b0:	431d      	orrs	r5, r3
 80160b2:	b2ed      	uxtb	r5, r5
 80160b4:	e716      	b.n	8015ee4 <lv_label_event+0x88>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80160b6:	68a3      	ldr	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80160b8:	2200      	movs	r2, #0
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80160ba:	4699      	mov	r9, r3
        draw_ctx->clip_area = &txt_clip;
 80160bc:	4643      	mov	r3, r8
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80160be:	0031      	movs	r1, r6
        draw_ctx->clip_area = &txt_clip;
 80160c0:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80160c2:	0020      	movs	r0, r4
 80160c4:	6a3b      	ldr	r3, [r7, #32]
 80160c6:	9200      	str	r2, [sp, #0]
 80160c8:	aa06      	add	r2, sp, #24
 80160ca:	f7f6 fb61 	bl	800c790 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 80160ce:	e73f      	b.n	8015f50 <lv_label_event+0xf4>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 80160d0:	0038      	movs	r0, r7
 80160d2:	f7f1 fe03 	bl	8007cdc <lv_obj_get_scroll_top>
        lv_area_move(&txt_coords, 0, -s);
 80160d6:	4242      	negs	r2, r0
 80160d8:	b212      	sxth	r2, r2
 80160da:	2100      	movs	r1, #0
 80160dc:	a806      	add	r0, sp, #24
 80160de:	f7fb f945 	bl	801136c <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 80160e2:	466a      	mov	r2, sp
 80160e4:	8afb      	ldrh	r3, [r7, #22]
 80160e6:	83d3      	strh	r3, [r2, #30]
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 80160e8:	464b      	mov	r3, r9
 80160ea:	5cfa      	ldrb	r2, [r7, r3]
 80160ec:	e721      	b.n	8015f32 <lv_label_event+0xd6>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 80160ee:	2214      	movs	r2, #20
 80160f0:	5eb3      	ldrsh	r3, [r6, r2]
 80160f2:	4a29      	ldr	r2, [pc, #164]	; (8016198 <lv_label_event+0x33c>)
 80160f4:	6a39      	ldr	r1, [r7, #32]
 80160f6:	9502      	str	r5, [sp, #8]
 80160f8:	9201      	str	r2, [sp, #4]
 80160fa:	2012      	movs	r0, #18
 80160fc:	5e32      	ldrsh	r2, [r6, r0]
 80160fe:	a805      	add	r0, sp, #20
 8016100:	9200      	str	r2, [sp, #0]
 8016102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016104:	f7fd fd54 	bl	8013bb0 <lv_txt_get_size>
        if(size.x > lv_area_get_width(&txt_coords)) {
 8016108:	466b      	mov	r3, sp
 801610a:	2214      	movs	r2, #20
 801610c:	5e9a      	ldrsh	r2, [r3, r2]
 801610e:	466b      	mov	r3, sp
 8016110:	4669      	mov	r1, sp
 8016112:	8b9b      	ldrh	r3, [r3, #28]
 8016114:	8b09      	ldrh	r1, [r1, #24]
 8016116:	3301      	adds	r3, #1
 8016118:	1a5b      	subs	r3, r3, r1
 801611a:	b21b      	sxth	r3, r3
 801611c:	429a      	cmp	r2, r3
 801611e:	dc1d      	bgt.n	801615c <lv_label_event+0x300>
        if(size.y > lv_area_get_height(&txt_coords)) {
 8016120:	466b      	mov	r3, sp
 8016122:	2216      	movs	r2, #22
 8016124:	5e9a      	ldrsh	r2, [r3, r2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016126:	466b      	mov	r3, sp
 8016128:	4669      	mov	r1, sp
 801612a:	8bdb      	ldrh	r3, [r3, #30]
 801612c:	8b49      	ldrh	r1, [r1, #26]
 801612e:	3301      	adds	r3, #1
 8016130:	1a5b      	subs	r3, r3, r1
 8016132:	b21b      	sxth	r3, r3
 8016134:	429a      	cmp	r2, r3
 8016136:	dc00      	bgt.n	801613a <lv_label_event+0x2de>
 8016138:	e714      	b.n	8015f64 <lv_label_event+0x108>
            label_draw_dsc.ofs_x = label->offset.x;
 801613a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 801613c:	0031      	movs	r1, r6
            label_draw_dsc.ofs_x = label->offset.x;
 801613e:	82f3      	strh	r3, [r6, #22]
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8016140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8016142:	0020      	movs	r0, r4
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8016144:	891b      	ldrh	r3, [r3, #8]
 8016146:	189b      	adds	r3, r3, r2
 8016148:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801614a:	189b      	adds	r3, r3, r2
 801614c:	8333      	strh	r3, [r6, #24]
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 801614e:	2300      	movs	r3, #0
 8016150:	9300      	str	r3, [sp, #0]
 8016152:	6a3b      	ldr	r3, [r7, #32]
 8016154:	aa06      	add	r2, sp, #24
 8016156:	f7f6 fb1b 	bl	800c790 <lv_draw_label>
 801615a:	e703      	b.n	8015f64 <lv_label_event+0x108>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801615c:	8dbd      	ldrh	r5, [r7, #44]	; 0x2c
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 801615e:	980a      	ldr	r0, [sp, #40]	; 0x28
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8016160:	18ad      	adds	r5, r5, r2
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8016162:	2220      	movs	r2, #32
 8016164:	0011      	movs	r1, r2
 8016166:	f7fa f9b3 	bl	80104d0 <lv_font_get_glyph_width>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 801616a:	4643      	mov	r3, r8
 801616c:	4343      	muls	r3, r0
 801616e:	b2ad      	uxth	r5, r5
 8016170:	18e8      	adds	r0, r5, r3
 8016172:	82f0      	strh	r0, [r6, #22]
            label_draw_dsc.ofs_y = label->offset.y;
 8016174:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8016176:	0031      	movs	r1, r6
            label_draw_dsc.ofs_y = label->offset.y;
 8016178:	8333      	strh	r3, [r6, #24]
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 801617a:	2300      	movs	r3, #0
 801617c:	9300      	str	r3, [sp, #0]
 801617e:	0020      	movs	r0, r4
 8016180:	6a3b      	ldr	r3, [r7, #32]
 8016182:	aa06      	add	r2, sp, #24
 8016184:	f7f6 fb04 	bl	800c790 <lv_draw_label>
 8016188:	e7ca      	b.n	8016120 <lv_label_event+0x2c4>
 801618a:	46c0      	nop			; (mov r8, r8)
 801618c:	0801bf10 	.word	0x0801bf10
 8016190:	000027d1 	.word	0x000027d1
 8016194:	0000ffff 	.word	0x0000ffff
 8016198:	00001fff 	.word	0x00001fff

0801619c <lv_label_create>:
{
 801619c:	b510      	push	{r4, lr}
 801619e:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80161a0:	4803      	ldr	r0, [pc, #12]	; (80161b0 <lv_label_create+0x14>)
 80161a2:	f7ee ffcb 	bl	800513c <lv_obj_class_create_obj>
 80161a6:	0004      	movs	r4, r0
    lv_obj_class_init_obj(obj);
 80161a8:	f7ef f840 	bl	800522c <lv_obj_class_init_obj>
}
 80161ac:	0020      	movs	r0, r4
 80161ae:	bd10      	pop	{r4, pc}
 80161b0:	0801bf10 	.word	0x0801bf10

080161b4 <lv_label_set_text>:
{
 80161b4:	b570      	push	{r4, r5, r6, lr}
 80161b6:	000d      	movs	r5, r1
 80161b8:	0004      	movs	r4, r0
    lv_obj_invalidate(obj);
 80161ba:	f7f0 f9c1 	bl	8006540 <lv_obj_invalidate>
    if(text == NULL) text = label->text;
 80161be:	2d00      	cmp	r5, #0
 80161c0:	d027      	beq.n	8016212 <lv_label_set_text+0x5e>
    if(label->text == text && label->static_txt == 0) {
 80161c2:	6a20      	ldr	r0, [r4, #32]
 80161c4:	42a8      	cmp	r0, r5
 80161c6:	d025      	beq.n	8016214 <lv_label_set_text+0x60>
        if(label->text != NULL && label->static_txt == 0) {
 80161c8:	2800      	cmp	r0, #0
 80161ca:	d009      	beq.n	80161e0 <lv_label_set_text+0x2c>
 80161cc:	2208      	movs	r2, #8
 80161ce:	2330      	movs	r3, #48	; 0x30
 80161d0:	0016      	movs	r6, r2
 80161d2:	5ce3      	ldrb	r3, [r4, r3]
 80161d4:	401e      	ands	r6, r3
 80161d6:	421a      	tst	r2, r3
 80161d8:	d102      	bne.n	80161e0 <lv_label_set_text+0x2c>
            lv_mem_free(label->text);
 80161da:	f7fb ff09 	bl	8011ff0 <lv_mem_free>
            label->text = NULL;
 80161de:	6226      	str	r6, [r4, #32]
        size_t len = strlen(text) + 1;
 80161e0:	0028      	movs	r0, r5
 80161e2:	f7e9 ff99 	bl	8000118 <strlen>
 80161e6:	3001      	adds	r0, #1
        label->text = lv_mem_alloc(len);
 80161e8:	f7fb fee0 	bl	8011fac <lv_mem_alloc>
 80161ec:	6220      	str	r0, [r4, #32]
        LV_ASSERT_MALLOC(label->text);
 80161ee:	2800      	cmp	r0, #0
 80161f0:	d00e      	beq.n	8016210 <lv_label_set_text+0x5c>
        strcpy(label->text, text);
 80161f2:	0029      	movs	r1, r5
 80161f4:	f005 fa2a 	bl	801b64c <strcpy>
        label->static_txt = 0;
 80161f8:	2230      	movs	r2, #48	; 0x30
 80161fa:	2108      	movs	r1, #8
 80161fc:	5ca3      	ldrb	r3, [r4, r2]
 80161fe:	438b      	bics	r3, r1
 8016200:	54a3      	strb	r3, [r4, r2]
    if(label->text == NULL) return;
 8016202:	6a23      	ldr	r3, [r4, #32]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d002      	beq.n	801620e <lv_label_set_text+0x5a>
 8016208:	0020      	movs	r0, r4
 801620a:	f7ff fb71 	bl	80158f0 <lv_label_refr_text.part.0>
}
 801620e:	bd70      	pop	{r4, r5, r6, pc}
        LV_ASSERT_MALLOC(label->text);
 8016210:	e7fe      	b.n	8016210 <lv_label_set_text+0x5c>
    if(text == NULL) text = label->text;
 8016212:	6a25      	ldr	r5, [r4, #32]
    if(label->text == text && label->static_txt == 0) {
 8016214:	2330      	movs	r3, #48	; 0x30
 8016216:	5ce3      	ldrb	r3, [r4, r3]
 8016218:	071b      	lsls	r3, r3, #28
 801621a:	d4e1      	bmi.n	80161e0 <lv_label_set_text+0x2c>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 801621c:	0028      	movs	r0, r5
 801621e:	f7e9 ff7b 	bl	8000118 <strlen>
 8016222:	1c41      	adds	r1, r0, #1
 8016224:	0028      	movs	r0, r5
 8016226:	f7fb feff 	bl	8012028 <lv_mem_realloc>
        LV_ASSERT_MALLOC(label->text);
 801622a:	2800      	cmp	r0, #0
 801622c:	d001      	beq.n	8016232 <lv_label_set_text+0x7e>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 801622e:	6220      	str	r0, [r4, #32]
 8016230:	e7ea      	b.n	8016208 <lv_label_set_text+0x54>
        LV_ASSERT_MALLOC(label->text);
 8016232:	e7fe      	b.n	8016232 <lv_label_set_text+0x7e>

08016234 <lv_label_constructor>:
    label->dot_end    = LV_LABEL_DOT_END_INV;
 8016234:	2301      	movs	r3, #1
{
 8016236:	b570      	push	{r4, r5, r6, lr}
    label->text       = NULL;
 8016238:	2600      	movs	r6, #0
    label->long_mode  = LV_LABEL_LONG_WRAP;
 801623a:	2530      	movs	r5, #48	; 0x30
 801623c:	225f      	movs	r2, #95	; 0x5f
{
 801623e:	000c      	movs	r4, r1
    label->dot_end    = LV_LABEL_DOT_END_INV;
 8016240:	425b      	negs	r3, r3
    label->text       = NULL;
 8016242:	620e      	str	r6, [r1, #32]
    label->dot.tmp_ptr   = NULL;
 8016244:	624e      	str	r6, [r1, #36]	; 0x24
    label->dot_end    = LV_LABEL_DOT_END_INV;
 8016246:	628b      	str	r3, [r1, #40]	; 0x28
    label->offset.x = 0;
 8016248:	62ce      	str	r6, [r1, #44]	; 0x2c
    label->long_mode  = LV_LABEL_LONG_WRAP;
 801624a:	5d4b      	ldrb	r3, [r1, r5]
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801624c:	0020      	movs	r0, r4
    label->long_mode  = LV_LABEL_LONG_WRAP;
 801624e:	4393      	bics	r3, r2
 8016250:	554b      	strb	r3, [r1, r5]
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8016252:	2102      	movs	r1, #2
 8016254:	f7ee fea0 	bl	8004f98 <lv_obj_clear_flag>
    lv_anim_del(obj, set_ofs_x_anim);
 8016258:	4913      	ldr	r1, [pc, #76]	; (80162a8 <lv_label_constructor+0x74>)
 801625a:	0020      	movs	r0, r4
 801625c:	f7fa feb4 	bl	8010fc8 <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 8016260:	0020      	movs	r0, r4
 8016262:	4912      	ldr	r1, [pc, #72]	; (80162ac <lv_label_constructor+0x78>)
 8016264:	f7fa feb0 	bl	8010fc8 <lv_anim_del>
        label->expand = 0;
 8016268:	2220      	movs	r2, #32
    label->offset.x = 0;
 801626a:	62e6      	str	r6, [r4, #44]	; 0x2c
        label->expand = 0;
 801626c:	5d63      	ldrb	r3, [r4, r5]
 801626e:	4393      	bics	r3, r2
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 8016270:	3a19      	subs	r2, #25
        label->expand = 0;
 8016272:	5563      	strb	r3, [r4, r5]
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 8016274:	4013      	ands	r3, r2
 8016276:	2b01      	cmp	r3, #1
 8016278:	d00f      	beq.n	801629a <lv_label_constructor+0x66>
    label->long_mode = long_mode;
 801627a:	2230      	movs	r2, #48	; 0x30
 801627c:	2107      	movs	r1, #7
 801627e:	5ca3      	ldrb	r3, [r4, r2]
 8016280:	438b      	bics	r3, r1
 8016282:	54a3      	strb	r3, [r4, r2]
    if(label->text == NULL) return;
 8016284:	6a23      	ldr	r3, [r4, #32]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d002      	beq.n	8016290 <lv_label_constructor+0x5c>
 801628a:	0020      	movs	r0, r4
 801628c:	f7ff fb30 	bl	80158f0 <lv_label_refr_text.part.0>
    lv_label_set_text(obj, "Text");
 8016290:	0020      	movs	r0, r4
 8016292:	4907      	ldr	r1, [pc, #28]	; (80162b0 <lv_label_constructor+0x7c>)
 8016294:	f7ff ff8e 	bl	80161b4 <lv_label_set_text>
}
 8016298:	bd70      	pop	{r4, r5, r6, pc}
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 801629a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801629c:	3301      	adds	r3, #1
 801629e:	d0ec      	beq.n	801627a <lv_label_constructor+0x46>
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 80162a0:	0020      	movs	r0, r4
 80162a2:	f7ff f957 	bl	8015554 <lv_label_revert_dots.part.0>
 80162a6:	e7e8      	b.n	801627a <lv_label_constructor+0x46>
 80162a8:	08015549 	.word	0x08015549
 80162ac:	0801553d 	.word	0x0801553d
 80162b0:	0801bf08 	.word	0x0801bf08

080162b4 <lv_label_set_text_static>:
    if(label->static_txt == 0 && label->text != NULL) {
 80162b4:	2208      	movs	r2, #8
 80162b6:	2330      	movs	r3, #48	; 0x30
{
 80162b8:	b570      	push	{r4, r5, r6, lr}
    if(label->static_txt == 0 && label->text != NULL) {
 80162ba:	0016      	movs	r6, r2
 80162bc:	5cc3      	ldrb	r3, [r0, r3]
{
 80162be:	0004      	movs	r4, r0
 80162c0:	000d      	movs	r5, r1
    if(label->static_txt == 0 && label->text != NULL) {
 80162c2:	401e      	ands	r6, r3
 80162c4:	421a      	tst	r2, r3
 80162c6:	d111      	bne.n	80162ec <lv_label_set_text_static+0x38>
 80162c8:	6a00      	ldr	r0, [r0, #32]
 80162ca:	2800      	cmp	r0, #0
 80162cc:	d002      	beq.n	80162d4 <lv_label_set_text_static+0x20>
        lv_mem_free(label->text);
 80162ce:	f7fb fe8f 	bl	8011ff0 <lv_mem_free>
        label->text = NULL;
 80162d2:	6226      	str	r6, [r4, #32]
    if(text != NULL) {
 80162d4:	2d00      	cmp	r5, #0
 80162d6:	d008      	beq.n	80162ea <lv_label_set_text_static+0x36>
        label->static_txt = 1;
 80162d8:	2230      	movs	r2, #48	; 0x30
 80162da:	2108      	movs	r1, #8
 80162dc:	5ca3      	ldrb	r3, [r4, r2]
 80162de:	430b      	orrs	r3, r1
 80162e0:	54a3      	strb	r3, [r4, r2]
        label->text       = (char *)text;
 80162e2:	6225      	str	r5, [r4, #32]
    if(label->text == NULL) return;
 80162e4:	0020      	movs	r0, r4
 80162e6:	f7ff fb03 	bl	80158f0 <lv_label_refr_text.part.0>
}
 80162ea:	bd70      	pop	{r4, r5, r6, pc}
    if(text != NULL) {
 80162ec:	2900      	cmp	r1, #0
 80162ee:	d1f3      	bne.n	80162d8 <lv_label_set_text_static+0x24>
    if(label->text == NULL) return;
 80162f0:	6a03      	ldr	r3, [r0, #32]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d0f9      	beq.n	80162ea <lv_label_set_text_static+0x36>
 80162f6:	e7f5      	b.n	80162e4 <lv_label_set_text_static+0x30>

080162f8 <lv_label_get_text>:
    return label->text;
 80162f8:	6a00      	ldr	r0, [r0, #32]
}
 80162fa:	4770      	bx	lr

080162fc <lv_label_get_letter_on>:
{
 80162fc:	b510      	push	{r4, lr}
    LV_ASSERT_NULL(pos_in);
 80162fe:	2900      	cmp	r1, #0
 8016300:	d002      	beq.n	8016308 <lv_label_get_letter_on+0xc>
}
 8016302:	f7ff f963 	bl	80155cc <lv_label_get_letter_on.part.0>
 8016306:	bd10      	pop	{r4, pc}
    LV_ASSERT_NULL(pos_in);
 8016308:	e7fe      	b.n	8016308 <lv_label_get_letter_on+0xc>
 801630a:	46c0      	nop			; (mov r8, r8)

0801630c <set_y_anim>:
    inf_normalize(obj);
}


static void set_y_anim(void * obj, int32_t v)
{
 801630c:	b510      	push	{r4, lr}
    lv_obj_set_y(obj, v);
 801630e:	b209      	sxth	r1, r1
 8016310:	f7ef fc62 	bl	8005bd8 <lv_obj_set_y>
}
 8016314:	bd10      	pop	{r4, pc}
 8016316:	46c0      	nop			; (mov r8, r8)

08016318 <get_sel_area>:
{
 8016318:	b5f0      	push	{r4, r5, r6, r7, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801631a:	2257      	movs	r2, #87	; 0x57
 801631c:	b083      	sub	sp, #12
 801631e:	000f      	movs	r7, r1
 8016320:	2100      	movs	r1, #0
 8016322:	0006      	movs	r6, r0
 8016324:	f7f3 f9e4 	bl	80096f0 <lv_obj_get_style_prop>
 8016328:	2180      	movs	r1, #128	; 0x80
 801632a:	0004      	movs	r4, r0
 801632c:	2257      	movs	r2, #87	; 0x57
 801632e:	0030      	movs	r0, r6
 8016330:	02c9      	lsls	r1, r1, #11
 8016332:	f7f3 f9dd 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8016336:	2259      	movs	r2, #89	; 0x59
 8016338:	2308      	movs	r3, #8
 801633a:	5ec5      	ldrsh	r5, [r0, r3]
 801633c:	2100      	movs	r1, #0
 801633e:	0030      	movs	r0, r6
 8016340:	2308      	movs	r3, #8
 8016342:	5ee4      	ldrsh	r4, [r4, r3]
 8016344:	f7f3 f9d4 	bl	80096f0 <lv_obj_get_style_prop>
    lv_coord_t d = (font_sel_h + font_main_h) / 2 + line_space;
 8016348:	192d      	adds	r5, r5, r4
 801634a:	0fec      	lsrs	r4, r5, #31
 801634c:	1964      	adds	r4, r4, r5
 801634e:	1064      	asrs	r4, r4, #1
 8016350:	1824      	adds	r4, r4, r0
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 8016352:	0030      	movs	r0, r6
 8016354:	8a75      	ldrh	r5, [r6, #18]
 8016356:	f7ef fd5d 	bl	8005e14 <lv_obj_get_height>
    lv_coord_t d = (font_sel_h + font_main_h) / 2 + line_space;
 801635a:	b2a4      	uxth	r4, r4
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 801635c:	b222      	sxth	r2, r4
 801635e:	0be3      	lsrs	r3, r4, #15
 8016360:	189b      	adds	r3, r3, r2
 8016362:	105b      	asrs	r3, r3, #1
 8016364:	1aeb      	subs	r3, r5, r3
 8016366:	0fc5      	lsrs	r5, r0, #31
 8016368:	182d      	adds	r5, r5, r0
 801636a:	106d      	asrs	r5, r5, #1
 801636c:	195b      	adds	r3, r3, r5
 801636e:	b29b      	uxth	r3, r3
 8016370:	807b      	strh	r3, [r7, #2]
    sel_area->y2 = sel_area->y1 + d;
 8016372:	18e3      	adds	r3, r4, r3
 8016374:	80fb      	strh	r3, [r7, #6]
    lv_obj_get_coords(obj, &roller_coords);
 8016376:	4669      	mov	r1, sp
 8016378:	0030      	movs	r0, r6
 801637a:	f7ef fce1 	bl	8005d40 <lv_obj_get_coords>
    sel_area->x1 = roller_coords.x1;
 801637e:	466b      	mov	r3, sp
 8016380:	881b      	ldrh	r3, [r3, #0]
 8016382:	803b      	strh	r3, [r7, #0]
    sel_area->x2 = roller_coords.x2;
 8016384:	466b      	mov	r3, sp
 8016386:	889b      	ldrh	r3, [r3, #4]
 8016388:	80bb      	strh	r3, [r7, #4]
}
 801638a:	b003      	add	sp, #12
 801638c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801638e:	46c0      	nop			; (mov r8, r8)

08016390 <inf_normalize.part.0>:
static void inf_normalize(lv_obj_t * obj)
 8016390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 8016392:	2103      	movs	r1, #3
static void inf_normalize(lv_obj_t * obj)
 8016394:	0004      	movs	r4, r0
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 8016396:	8c00      	ldrh	r0, [r0, #32]
 8016398:	f7e9 fec6 	bl	8000128 <__udivsi3>
 801639c:	b285      	uxth	r5, r0
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 801639e:	0029      	movs	r1, r5
 80163a0:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80163a2:	f7e9 ff47 	bl	8000234 <__aeabi_uidivmod>
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 80163a6:	1869      	adds	r1, r5, r1
 80163a8:	b288      	uxth	r0, r1
 80163aa:	8460      	strh	r0, [r4, #34]	; 0x22
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 80163ac:	0029      	movs	r1, r5
 80163ae:	f7e9 ff41 	bl	8000234 <__aeabi_uidivmod>
        roller->sel_opt_id_ori += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 80163b2:	186d      	adds	r5, r5, r1
 80163b4:	84a5      	strh	r5, [r4, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80163b6:	2257      	movs	r2, #87	; 0x57
 80163b8:	2100      	movs	r1, #0
 80163ba:	0020      	movs	r0, r4
 80163bc:	f7f3 f998 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80163c0:	2259      	movs	r2, #89	; 0x59
 80163c2:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80163c4:	0005      	movs	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80163c6:	0020      	movs	r0, r4
 80163c8:	f7f3 f992 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80163cc:	b206      	sxth	r6, r0
        lv_coord_t h                   = lv_obj_get_content_height(obj);
 80163ce:	0020      	movs	r0, r4
 80163d0:	2308      	movs	r3, #8
 80163d2:	5eed      	ldrsh	r5, [r5, r3]
 80163d4:	f7ef fd44 	bl	8005e60 <lv_obj_get_content_height>
 80163d8:	0007      	movs	r7, r0
    return lv_obj_get_child(obj, 0);
 80163da:	2100      	movs	r1, #0
 80163dc:	0020      	movs	r0, r4
 80163de:	f7f4 fdb9 	bl	800af54 <lv_obj_get_child>
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80163e2:	0ff9      	lsrs	r1, r7, #31
 80163e4:	19c9      	adds	r1, r1, r7
 80163e6:	104b      	asrs	r3, r1, #1
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 80163e8:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80163ea:	19ae      	adds	r6, r5, r6
 80163ec:	4371      	muls	r1, r6
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80163ee:	0fea      	lsrs	r2, r5, #31
 80163f0:	1952      	adds	r2, r2, r5
 80163f2:	1052      	asrs	r2, r2, #1
        lv_coord_t new_y = mid_y1 - sel_y1;
 80163f4:	1889      	adds	r1, r1, r2
 80163f6:	1a59      	subs	r1, r3, r1
        lv_obj_set_y(label, new_y);
 80163f8:	b209      	sxth	r1, r1
 80163fa:	f7ef fbed 	bl	8005bd8 <lv_obj_set_y>
}
 80163fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016400 <scroll_anim_ready_cb>:
{
 8016400:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_obj_get_parent(a->var); /*The label is animated*/
 8016402:	6800      	ldr	r0, [r0, #0]
 8016404:	f7f4 fda0 	bl	800af48 <lv_obj_get_parent>
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8016408:	2326      	movs	r3, #38	; 0x26
 801640a:	5cc3      	ldrb	r3, [r0, r3]
 801640c:	07db      	lsls	r3, r3, #31
 801640e:	d400      	bmi.n	8016412 <scroll_anim_ready_cb+0x12>
}
 8016410:	bd10      	pop	{r4, pc}
 8016412:	f7ff ffbd 	bl	8016390 <inf_normalize.part.0>
 8016416:	e7fb      	b.n	8016410 <scroll_anim_ready_cb+0x10>

08016418 <refr_position>:
{
 8016418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801641a:	46de      	mov	lr, fp
 801641c:	464e      	mov	r6, r9
 801641e:	4645      	mov	r5, r8
 8016420:	4657      	mov	r7, sl
 8016422:	b5e0      	push	{r5, r6, r7, lr}
 8016424:	000e      	movs	r6, r1
 8016426:	b091      	sub	sp, #68	; 0x44
    return lv_obj_get_child(obj, 0);
 8016428:	2100      	movs	r1, #0
{
 801642a:	0004      	movs	r4, r0
    return lv_obj_get_child(obj, 0);
 801642c:	f7f4 fd92 	bl	800af54 <lv_obj_get_child>
 8016430:	1e05      	subs	r5, r0, #0
    if(label == NULL) return;
 8016432:	d04c      	beq.n	80164ce <refr_position+0xb6>
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, lv_label_get_text(label));
 8016434:	f7ff ff60 	bl	80162f8 <lv_label_get_text>
 8016438:	2100      	movs	r1, #0
 801643a:	0002      	movs	r2, r0
 801643c:	0028      	movs	r0, r5
 801643e:	f7f4 fa11 	bl	800a864 <lv_obj_calculate_style_text_align>
    switch(align) {
 8016442:	2802      	cmp	r0, #2
 8016444:	d100      	bne.n	8016448 <refr_position+0x30>
 8016446:	e087      	b.n	8016558 <refr_position+0x140>
 8016448:	2803      	cmp	r0, #3
 801644a:	d100      	bne.n	801644e <refr_position+0x36>
 801644c:	e073      	b.n	8016536 <refr_position+0x11e>
 801644e:	2801      	cmp	r0, #1
 8016450:	d06c      	beq.n	801652c <refr_position+0x114>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8016452:	2257      	movs	r2, #87	; 0x57
 8016454:	2100      	movs	r1, #0
 8016456:	0020      	movs	r0, r4
 8016458:	f7f3 f94a 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801645c:	2259      	movs	r2, #89	; 0x59
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801645e:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8016460:	2100      	movs	r1, #0
 8016462:	0020      	movs	r0, r4
 8016464:	f7f3 f944 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016468:	b203      	sxth	r3, r0
 801646a:	4699      	mov	r9, r3
 801646c:	2208      	movs	r2, #8
 801646e:	5ebb      	ldrsh	r3, [r7, r2]
    lv_coord_t h                   = lv_obj_get_content_height(obj);
 8016470:	0020      	movs	r0, r4
 8016472:	469a      	mov	sl, r3
 8016474:	f7ef fcf4 	bl	8005e60 <lv_obj_get_content_height>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 8016478:	2264      	movs	r2, #100	; 0x64
 801647a:	4683      	mov	fp, r0
 801647c:	2100      	movs	r1, #0
 801647e:	0020      	movs	r0, r4
 8016480:	f7f3 f936 	bl	80096f0 <lv_obj_get_style_prop>
    uint16_t anim_time             = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);
 8016484:	b283      	uxth	r3, r0
 8016486:	0007      	movs	r7, r0
 8016488:	4698      	mov	r8, r3
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801648a:	2e00      	cmp	r6, #0
 801648c:	d126      	bne.n	80164dc <refr_position+0xc4>
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801648e:	2326      	movs	r3, #38	; 0x26
 8016490:	5ce3      	ldrb	r3, [r4, r3]
 8016492:	07db      	lsls	r3, r3, #31
 8016494:	d45c      	bmi.n	8016550 <refr_position+0x138>
    lv_coord_t sel_y1 = id * (font_h + line_space);
 8016496:	4648      	mov	r0, r9
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8016498:	4652      	mov	r2, sl
 801649a:	465b      	mov	r3, fp
    lv_coord_t sel_y1 = id * (font_h + line_space);
 801649c:	8c64      	ldrh	r4, [r4, #34]	; 0x22
 801649e:	4450      	add	r0, sl
 80164a0:	4344      	muls	r4, r0
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80164a2:	0fd0      	lsrs	r0, r2, #31
 80164a4:	0fdb      	lsrs	r3, r3, #31
 80164a6:	4450      	add	r0, sl
 80164a8:	445b      	add	r3, fp
 80164aa:	1040      	asrs	r0, r0, #1
 80164ac:	105b      	asrs	r3, r3, #1
    lv_coord_t new_y = mid_y1 - sel_y1;
 80164ae:	1824      	adds	r4, r4, r0
 80164b0:	1b1c      	subs	r4, r3, r4
 80164b2:	b224      	sxth	r4, r4
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 80164b4:	2e00      	cmp	r6, #0
 80164b6:	d002      	beq.n	80164be <refr_position+0xa6>
 80164b8:	4643      	mov	r3, r8
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d11f      	bne.n	80164fe <refr_position+0xe6>
        lv_anim_del(label, set_y_anim);
 80164be:	492e      	ldr	r1, [pc, #184]	; (8016578 <refr_position+0x160>)
 80164c0:	0028      	movs	r0, r5
 80164c2:	f7fa fd81 	bl	8010fc8 <lv_anim_del>
        lv_obj_set_y(label, new_y);
 80164c6:	0021      	movs	r1, r4
 80164c8:	0028      	movs	r0, r5
 80164ca:	f7ef fb85 	bl	8005bd8 <lv_obj_set_y>
}
 80164ce:	b011      	add	sp, #68	; 0x44
 80164d0:	bcf0      	pop	{r4, r5, r6, r7}
 80164d2:	46bb      	mov	fp, r7
 80164d4:	46b2      	mov	sl, r6
 80164d6:	46a9      	mov	r9, r5
 80164d8:	46a0      	mov	r8, r4
 80164da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d0d6      	beq.n	801648e <refr_position+0x76>
    lv_coord_t sel_y1 = id * (font_h + line_space);
 80164e0:	4648      	mov	r0, r9
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80164e2:	4652      	mov	r2, sl
 80164e4:	465b      	mov	r3, fp
    lv_coord_t sel_y1 = id * (font_h + line_space);
 80164e6:	8c64      	ldrh	r4, [r4, #34]	; 0x22
 80164e8:	4450      	add	r0, sl
 80164ea:	4344      	muls	r4, r0
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80164ec:	0fd0      	lsrs	r0, r2, #31
 80164ee:	0fdb      	lsrs	r3, r3, #31
 80164f0:	4450      	add	r0, sl
 80164f2:	445b      	add	r3, fp
 80164f4:	1040      	asrs	r0, r0, #1
 80164f6:	105b      	asrs	r3, r3, #1
    lv_coord_t new_y = mid_y1 - sel_y1;
 80164f8:	1824      	adds	r4, r4, r0
 80164fa:	1b1c      	subs	r4, r3, r4
 80164fc:	b224      	sxth	r4, r4
        lv_anim_init(&a);
 80164fe:	4668      	mov	r0, sp
 8016500:	f7fa fd4a 	bl	8010f98 <lv_anim_init>
    a->exec_cb = exec_cb;
 8016504:	4b1c      	ldr	r3, [pc, #112]	; (8016578 <refr_position+0x160>)
        lv_anim_set_values(&a, lv_obj_get_y(label), new_y);
 8016506:	0028      	movs	r0, r5
 8016508:	9301      	str	r3, [sp, #4]
    a->var = var;
 801650a:	9500      	str	r5, [sp, #0]
 801650c:	f7ef fc26 	bl	8005d5c <lv_obj_get_y>
    a->ready_cb = ready_cb;
 8016510:	4b1a      	ldr	r3, [pc, #104]	; (801657c <refr_position+0x164>)
    a->time = duration;
 8016512:	043f      	lsls	r7, r7, #16
    a->ready_cb = ready_cb;
 8016514:	9303      	str	r3, [sp, #12]
    a->path_cb = path_cb;
 8016516:	4b1a      	ldr	r3, [pc, #104]	; (8016580 <refr_position+0x168>)
    a->start_value = start;
 8016518:	9007      	str	r0, [sp, #28]
    a->current_value = start;
 801651a:	9008      	str	r0, [sp, #32]
    a->time = duration;
 801651c:	0c3f      	lsrs	r7, r7, #16
        lv_anim_start(&a);
 801651e:	4668      	mov	r0, sp
        lv_anim_set_values(&a, lv_obj_get_y(label), new_y);
 8016520:	9409      	str	r4, [sp, #36]	; 0x24
 8016522:	970a      	str	r7, [sp, #40]	; 0x28
    a->path_cb = path_cb;
 8016524:	9306      	str	r3, [sp, #24]
        lv_anim_start(&a);
 8016526:	f7fa fe39 	bl	801119c <lv_anim_start>
 801652a:	e7d0      	b.n	80164ce <refr_position+0xb6>
            lv_obj_set_x(label, 0);
 801652c:	2100      	movs	r1, #0
 801652e:	0028      	movs	r0, r5
 8016530:	f7ef fb3a 	bl	8005ba8 <lv_obj_set_x>
            break;
 8016534:	e78d      	b.n	8016452 <refr_position+0x3a>
            lv_obj_set_x(label, lv_obj_get_content_width(obj) - lv_obj_get_width(label));
 8016536:	0020      	movs	r0, r4
 8016538:	f7ef fc74 	bl	8005e24 <lv_obj_get_content_width>
 801653c:	0007      	movs	r7, r0
 801653e:	0028      	movs	r0, r5
 8016540:	f7ef fc60 	bl	8005e04 <lv_obj_get_width>
 8016544:	1a39      	subs	r1, r7, r0
 8016546:	b209      	sxth	r1, r1
 8016548:	0028      	movs	r0, r5
 801654a:	f7ef fb2d 	bl	8005ba8 <lv_obj_set_x>
            break;
 801654e:	e780      	b.n	8016452 <refr_position+0x3a>
 8016550:	0020      	movs	r0, r4
 8016552:	f7ff ff1d 	bl	8016390 <inf_normalize.part.0>
 8016556:	e79e      	b.n	8016496 <refr_position+0x7e>
            lv_obj_set_x(label, (lv_obj_get_content_width(obj) - lv_obj_get_width(label)) / 2);
 8016558:	0020      	movs	r0, r4
 801655a:	f7ef fc63 	bl	8005e24 <lv_obj_get_content_width>
 801655e:	0007      	movs	r7, r0
 8016560:	0028      	movs	r0, r5
 8016562:	f7ef fc4f 	bl	8005e04 <lv_obj_get_width>
 8016566:	1a38      	subs	r0, r7, r0
 8016568:	0fc1      	lsrs	r1, r0, #31
 801656a:	1809      	adds	r1, r1, r0
 801656c:	1049      	asrs	r1, r1, #1
 801656e:	0028      	movs	r0, r5
 8016570:	b209      	sxth	r1, r1
 8016572:	f7ef fb19 	bl	8005ba8 <lv_obj_set_x>
            break;
 8016576:	e76c      	b.n	8016452 <refr_position+0x3a>
 8016578:	0801630d 	.word	0x0801630d
 801657c:	08016401 	.word	0x08016401
 8016580:	080112d1 	.word	0x080112d1

08016584 <lv_roller_constructor>:
    roller->mode = LV_ROLLER_MODE_NORMAL;
 8016584:	2226      	movs	r2, #38	; 0x26
{
 8016586:	b570      	push	{r4, r5, r6, lr}
    roller->mode = LV_ROLLER_MODE_NORMAL;
 8016588:	5c8b      	ldrb	r3, [r1, r2]
{
 801658a:	000c      	movs	r4, r1
    roller->mode = LV_ROLLER_MODE_NORMAL;
 801658c:	2101      	movs	r1, #1
    roller->option_cnt = 0;
 801658e:	2600      	movs	r6, #0
    roller->mode = LV_ROLLER_MODE_NORMAL;
 8016590:	438b      	bics	r3, r1
 8016592:	54a3      	strb	r3, [r4, r2]
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8016594:	0020      	movs	r0, r4
 8016596:	310f      	adds	r1, #15
    roller->option_cnt = 0;
 8016598:	6226      	str	r6, [r4, #32]
    roller->sel_opt_id_ori = 0;
 801659a:	84a6      	strh	r6, [r4, #36]	; 0x24
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801659c:	f7ee fcfc 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN_VER);
 80165a0:	2180      	movs	r1, #128	; 0x80
 80165a2:	0020      	movs	r0, r4
 80165a4:	0089      	lsls	r1, r1, #2
 80165a6:	f7ee fcf7 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_t * label = lv_obj_class_create_obj(&lv_roller_label_class, obj);
 80165aa:	0021      	movs	r1, r4
 80165ac:	4817      	ldr	r0, [pc, #92]	; (801660c <lv_roller_constructor+0x88>)
 80165ae:	f7ee fdc5 	bl	800513c <lv_obj_class_create_obj>
    lv_obj_class_init_obj(label);
 80165b2:	f7ee fe3b 	bl	800522c <lv_obj_class_init_obj>
    return lv_obj_get_child(obj, 0);
 80165b6:	2100      	movs	r1, #0
 80165b8:	0020      	movs	r0, r4
 80165ba:	f7f4 fccb 	bl	800af54 <lv_obj_get_child>
    roller->option_cnt = 0;
 80165be:	2100      	movs	r1, #0
    return lv_obj_get_child(obj, 0);
 80165c0:	0005      	movs	r5, r0
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80165c2:	2370      	movs	r3, #112	; 0x70
 80165c4:	4a12      	ldr	r2, [pc, #72]	; (8016610 <lv_roller_constructor+0x8c>)
    roller->sel_opt_id_ori = 0;
 80165c6:	84a6      	strh	r6, [r4, #36]	; 0x24
    roller->option_cnt = 0;
 80165c8:	6226      	str	r6, [r4, #32]
        if(options[cnt] == '\n') roller->option_cnt++;
 80165ca:	2b0a      	cmp	r3, #10
 80165cc:	d015      	beq.n	80165fa <lv_roller_constructor+0x76>
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80165ce:	3201      	adds	r2, #1
 80165d0:	1e53      	subs	r3, r2, #1
 80165d2:	781b      	ldrb	r3, [r3, #0]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d1f8      	bne.n	80165ca <lv_roller_constructor+0x46>
        roller->mode = LV_ROLLER_MODE_NORMAL;
 80165d8:	2226      	movs	r2, #38	; 0x26
    roller->option_cnt++; /*Last option has no `\n`*/
 80165da:	3101      	adds	r1, #1
 80165dc:	8421      	strh	r1, [r4, #32]
        roller->mode = LV_ROLLER_MODE_NORMAL;
 80165de:	2101      	movs	r1, #1
 80165e0:	5ca3      	ldrb	r3, [r4, r2]
        lv_label_set_text(label, options);
 80165e2:	0028      	movs	r0, r5
        roller->mode = LV_ROLLER_MODE_NORMAL;
 80165e4:	438b      	bics	r3, r1
 80165e6:	54a3      	strb	r3, [r4, r2]
        lv_label_set_text(label, options);
 80165e8:	490a      	ldr	r1, [pc, #40]	; (8016614 <lv_roller_constructor+0x90>)
 80165ea:	f7ff fde3 	bl	80161b4 <lv_label_set_text>
    roller->sel_opt_id_ori = roller->sel_opt_id;
 80165ee:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    lv_obj_refresh_ext_draw_size(label);
 80165f0:	0028      	movs	r0, r5
    roller->sel_opt_id_ori = roller->sel_opt_id;
 80165f2:	84a3      	strh	r3, [r4, #36]	; 0x24
    lv_obj_refresh_ext_draw_size(label);
 80165f4:	f7ef f8ba 	bl	800576c <lv_obj_refresh_ext_draw_size>
}
 80165f8:	bd70      	pop	{r4, r5, r6, pc}
        if(options[cnt] == '\n') roller->option_cnt++;
 80165fa:	3101      	adds	r1, #1
 80165fc:	b289      	uxth	r1, r1
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80165fe:	3201      	adds	r2, #1
        if(options[cnt] == '\n') roller->option_cnt++;
 8016600:	8421      	strh	r1, [r4, #32]
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 8016602:	1e53      	subs	r3, r2, #1
 8016604:	781b      	ldrb	r3, [r3, #0]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d1df      	bne.n	80165ca <lv_roller_constructor+0x46>
 801660a:	e7e5      	b.n	80165d8 <lv_roller_constructor+0x54>
 801660c:	0801bf70 	.word	0x0801bf70
 8016610:	0801bf2a 	.word	0x0801bf2a
 8016614:	0801bf28 	.word	0x0801bf28

08016618 <lv_roller_label_event>:
{
 8016618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801661a:	46c6      	mov	lr, r8
 801661c:	b500      	push	{lr}
    lv_event_code_t code = lv_event_get_code(e);
 801661e:	0008      	movs	r0, r1
{
 8016620:	b092      	sub	sp, #72	; 0x48
 8016622:	000c      	movs	r4, r1
    lv_event_code_t code = lv_event_get_code(e);
 8016624:	f7eb fbd6 	bl	8001dd4 <lv_event_get_code>
 8016628:	0005      	movs	r5, r0
    if(code != LV_EVENT_DRAW_MAIN) {
 801662a:	2815      	cmp	r0, #21
 801662c:	d018      	beq.n	8016660 <lv_roller_label_event+0x48>
        res = lv_obj_event_base(MY_CLASS_LABEL, e);
 801662e:	0021      	movs	r1, r4
 8016630:	485e      	ldr	r0, [pc, #376]	; (80167ac <lv_roller_label_event+0x194>)
 8016632:	f7eb fbb3 	bl	8001d9c <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8016636:	2801      	cmp	r0, #1
 8016638:	d003      	beq.n	8016642 <lv_roller_label_event+0x2a>
}
 801663a:	b012      	add	sp, #72	; 0x48
 801663c:	bc80      	pop	{r7}
 801663e:	46b8      	mov	r8, r7
 8016640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_obj_t * label = lv_event_get_target(e);
 8016642:	0020      	movs	r0, r4
 8016644:	f7eb fbc2 	bl	8001dcc <lv_event_get_target>
 8016648:	0006      	movs	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801664a:	2d13      	cmp	r5, #19
 801664c:	d054      	beq.n	80166f8 <lv_roller_label_event+0xe0>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801664e:	2d29      	cmp	r5, #41	; 0x29
 8016650:	d1f3      	bne.n	801663a <lv_roller_label_event+0x22>
        refr_position(lv_obj_get_parent(label), LV_ANIM_OFF);
 8016652:	0030      	movs	r0, r6
 8016654:	f7f4 fc78 	bl	800af48 <lv_obj_get_parent>
 8016658:	2100      	movs	r1, #0
 801665a:	f7ff fedd 	bl	8016418 <refr_position>
 801665e:	e7ec      	b.n	801663a <lv_roller_label_event+0x22>
    lv_obj_t * label = lv_event_get_target(e);
 8016660:	0020      	movs	r0, r4
 8016662:	f7eb fbb3 	bl	8001dcc <lv_event_get_target>
    lv_obj_t * label_obj = lv_event_get_target(e);
 8016666:	0020      	movs	r0, r4
 8016668:	f7eb fbb0 	bl	8001dcc <lv_event_get_target>
 801666c:	0006      	movs	r6, r0
    lv_obj_t * roller = lv_obj_get_parent(label_obj);
 801666e:	f7f4 fc6b 	bl	800af48 <lv_obj_get_parent>
 8016672:	0005      	movs	r5, r0
    lv_draw_label_dsc_init(&label_draw_dsc);
 8016674:	a80a      	add	r0, sp, #40	; 0x28
 8016676:	f7f6 f873 	bl	800c760 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(roller, LV_PART_MAIN, &label_draw_dsc);
 801667a:	2100      	movs	r1, #0
 801667c:	aa0a      	add	r2, sp, #40	; 0x28
 801667e:	0028      	movs	r0, r5
 8016680:	f7ee ff58 	bl	8005534 <lv_obj_init_draw_label_dsc>
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016684:	0020      	movs	r0, r4
 8016686:	f7eb fc07 	bl	8001e98 <lv_event_get_draw_ctx>
    if(!_lv_area_intersect(&roller_clip_area, draw_ctx->clip_area, &roller->coords)) return;
 801668a:	002a      	movs	r2, r5
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801668c:	6887      	ldr	r7, [r0, #8]
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801668e:	0004      	movs	r4, r0
    if(!_lv_area_intersect(&roller_clip_area, draw_ctx->clip_area, &roller->coords)) return;
 8016690:	0039      	movs	r1, r7
 8016692:	3210      	adds	r2, #16
 8016694:	a806      	add	r0, sp, #24
 8016696:	f7fa fe79 	bl	801138c <_lv_area_intersect>
 801669a:	2800      	cmp	r0, #0
 801669c:	d0cd      	beq.n	801663a <lv_roller_label_event+0x22>
    draw_ctx->clip_area = &roller_clip_area;
 801669e:	ab06      	add	r3, sp, #24
    get_sel_area(roller, &sel_area);
 80166a0:	0028      	movs	r0, r5
    draw_ctx->clip_area = &roller_clip_area;
 80166a2:	60a3      	str	r3, [r4, #8]
    get_sel_area(roller, &sel_area);
 80166a4:	a908      	add	r1, sp, #32
 80166a6:	f7ff fe37 	bl	8016318 <get_sel_area>
    clip2.x1 = label_obj->coords.x1;
 80166aa:	8a73      	ldrh	r3, [r6, #18]
 80166ac:	8a32      	ldrh	r2, [r6, #16]
 80166ae:	041b      	lsls	r3, r3, #16
 80166b0:	431a      	orrs	r2, r3
 80166b2:	466b      	mov	r3, sp
 80166b4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80166b6:	8ab3      	ldrh	r3, [r6, #20]
 80166b8:	0409      	lsls	r1, r1, #16
 80166ba:	9204      	str	r2, [sp, #16]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80166bc:	aa04      	add	r2, sp, #16
    clip2.x1 = label_obj->coords.x1;
 80166be:	430b      	orrs	r3, r1
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80166c0:	0010      	movs	r0, r2
 80166c2:	68a1      	ldr	r1, [r4, #8]
    clip2.x1 = label_obj->coords.x1;
 80166c4:	9305      	str	r3, [sp, #20]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80166c6:	f7fa fe61 	bl	801138c <_lv_area_intersect>
        const lv_area_t * clip_area_ori2 = draw_ctx->clip_area;
 80166ca:	68a5      	ldr	r5, [r4, #8]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80166cc:	2800      	cmp	r0, #0
 80166ce:	d15c      	bne.n	801678a <lv_roller_label_event+0x172>
    clip2.x1 = label_obj->coords.x1;
 80166d0:	466b      	mov	r3, sp
 80166d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80166d4:	8a32      	ldrh	r2, [r6, #16]
 80166d6:	8af1      	ldrh	r1, [r6, #22]
 80166d8:	041b      	lsls	r3, r3, #16
 80166da:	431a      	orrs	r2, r3
 80166dc:	8ab3      	ldrh	r3, [r6, #20]
 80166de:	0409      	lsls	r1, r1, #16
 80166e0:	9204      	str	r2, [sp, #16]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80166e2:	aa04      	add	r2, sp, #16
    clip2.x1 = label_obj->coords.x1;
 80166e4:	430b      	orrs	r3, r1
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80166e6:	0010      	movs	r0, r2
 80166e8:	0029      	movs	r1, r5
    clip2.x1 = label_obj->coords.x1;
 80166ea:	9305      	str	r3, [sp, #20]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 80166ec:	f7fa fe4e 	bl	801138c <_lv_area_intersect>
 80166f0:	2800      	cmp	r0, #0
 80166f2:	d138      	bne.n	8016766 <lv_roller_label_event+0x14e>
    draw_ctx->clip_area = clip_area_ori;
 80166f4:	60a7      	str	r7, [r4, #8]
 80166f6:	e7a0      	b.n	801663a <lv_roller_label_event+0x22>
        lv_coord_t * s = lv_event_get_param(e);
 80166f8:	0020      	movs	r0, r4
 80166fa:	f7eb fb6f 	bl	8001ddc <lv_event_get_param>
 80166fe:	0005      	movs	r5, r0
        lv_obj_t * obj = lv_obj_get_parent(label);
 8016700:	0030      	movs	r0, r6
 8016702:	f7f4 fc21 	bl	800af48 <lv_obj_get_parent>
    return lv_obj_get_child(obj, 0);
 8016706:	2100      	movs	r1, #0
        lv_obj_t * obj = lv_obj_get_parent(label);
 8016708:	0004      	movs	r4, r0
    return lv_obj_get_child(obj, 0);
 801670a:	f7f4 fc23 	bl	800af54 <lv_obj_get_child>
 801670e:	1e07      	subs	r7, r0, #0
    if(label == NULL) return 0;
 8016710:	d039      	beq.n	8016786 <lv_roller_label_event+0x16e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8016712:	2180      	movs	r1, #128	; 0x80
 8016714:	2257      	movs	r2, #87	; 0x57
 8016716:	0020      	movs	r0, r4
 8016718:	02c9      	lsls	r1, r1, #11
 801671a:	f7f2 ffe9 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801671e:	2180      	movs	r1, #128	; 0x80
 8016720:	2258      	movs	r2, #88	; 0x58
 8016722:	02c9      	lsls	r1, r1, #11
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8016724:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8016726:	0020      	movs	r0, r4
 8016728:	f7f2 ffe2 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801672c:	b204      	sxth	r4, r0
    const char * txt = lv_label_get_text(label);
 801672e:	0038      	movs	r0, r7
 8016730:	f7ff fde2 	bl	80162f8 <lv_label_get_text>
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 8016734:	2300      	movs	r3, #0
 8016736:	4a1e      	ldr	r2, [pc, #120]	; (80167b0 <lv_roller_label_event+0x198>)
 8016738:	af0a      	add	r7, sp, #40	; 0x28
    const char * txt = lv_label_get_text(label);
 801673a:	0001      	movs	r1, r0
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 801673c:	9302      	str	r3, [sp, #8]
 801673e:	9201      	str	r2, [sp, #4]
 8016740:	9300      	str	r3, [sp, #0]
 8016742:	4642      	mov	r2, r8
 8016744:	0023      	movs	r3, r4
 8016746:	0038      	movs	r0, r7
 8016748:	f7fd fa32 	bl	8013bb0 <lv_txt_get_size>
        *s = LV_MAX(*s, sel_w - label_w);
 801674c:	2300      	movs	r3, #0
 801674e:	5efc      	ldrsh	r4, [r7, r3]
        lv_coord_t label_w = lv_obj_get_width(label);
 8016750:	0030      	movs	r0, r6
 8016752:	f7ef fb57 	bl	8005e04 <lv_obj_get_width>
        *s = LV_MAX(*s, sel_w - label_w);
 8016756:	2300      	movs	r3, #0
 8016758:	5eea      	ldrsh	r2, [r5, r3]
 801675a:	1a20      	subs	r0, r4, r0
 801675c:	4290      	cmp	r0, r2
 801675e:	da00      	bge.n	8016762 <lv_roller_label_event+0x14a>
 8016760:	0010      	movs	r0, r2
 8016762:	8028      	strh	r0, [r5, #0]
 8016764:	e769      	b.n	801663a <lv_roller_label_event+0x22>
        draw_ctx->clip_area = &clip2;
 8016766:	ab04      	add	r3, sp, #16
 8016768:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 801676a:	0030      	movs	r0, r6
 801676c:	f7ff fdc4 	bl	80162f8 <lv_label_get_text>
 8016770:	2100      	movs	r1, #0
 8016772:	0032      	movs	r2, r6
 8016774:	0003      	movs	r3, r0
 8016776:	9100      	str	r1, [sp, #0]
 8016778:	0020      	movs	r0, r4
 801677a:	3210      	adds	r2, #16
 801677c:	a90a      	add	r1, sp, #40	; 0x28
 801677e:	f7f6 f807 	bl	800c790 <lv_draw_label>
    draw_ctx->clip_area = clip_area_ori;
 8016782:	60a7      	str	r7, [r4, #8]
 8016784:	e759      	b.n	801663a <lv_roller_label_event+0x22>
 8016786:	2400      	movs	r4, #0
 8016788:	e7e2      	b.n	8016750 <lv_roller_label_event+0x138>
        draw_ctx->clip_area = &clip2;
 801678a:	ab04      	add	r3, sp, #16
 801678c:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 801678e:	0030      	movs	r0, r6
 8016790:	f7ff fdb2 	bl	80162f8 <lv_label_get_text>
 8016794:	2200      	movs	r2, #0
 8016796:	9200      	str	r2, [sp, #0]
 8016798:	0032      	movs	r2, r6
 801679a:	0003      	movs	r3, r0
 801679c:	3210      	adds	r2, #16
 801679e:	0020      	movs	r0, r4
 80167a0:	a90a      	add	r1, sp, #40	; 0x28
 80167a2:	f7f5 fff5 	bl	800c790 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori2;
 80167a6:	60a5      	str	r5, [r4, #8]
 80167a8:	e792      	b.n	80166d0 <lv_roller_label_event+0xb8>
 80167aa:	46c0      	nop			; (mov r8, r8)
 80167ac:	0801bf70 	.word	0x0801bf70
 80167b0:	00001fff 	.word	0x00001fff

080167b4 <lv_roller_create>:
{
 80167b4:	b510      	push	{r4, lr}
 80167b6:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80167b8:	4803      	ldr	r0, [pc, #12]	; (80167c8 <lv_roller_create+0x14>)
 80167ba:	f7ee fcbf 	bl	800513c <lv_obj_class_create_obj>
 80167be:	0004      	movs	r4, r0
    lv_obj_class_init_obj(obj);
 80167c0:	f7ee fd34 	bl	800522c <lv_obj_class_init_obj>
}
 80167c4:	0020      	movs	r0, r4
 80167c6:	bd10      	pop	{r4, pc}
 80167c8:	0801bf58 	.word	0x0801bf58

080167cc <lv_roller_set_options>:
{
 80167cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167ce:	464e      	mov	r6, r9
 80167d0:	4645      	mov	r5, r8
 80167d2:	46de      	mov	lr, fp
 80167d4:	4657      	mov	r7, sl
 80167d6:	b5e0      	push	{r5, r6, r7, lr}
 80167d8:	0004      	movs	r4, r0
 80167da:	000d      	movs	r5, r1
 80167dc:	0016      	movs	r6, r2
 80167de:	b083      	sub	sp, #12
    LV_ASSERT_NULL(options);
 80167e0:	2900      	cmp	r1, #0
 80167e2:	d02c      	beq.n	801683e <lv_roller_set_options+0x72>
    return lv_obj_get_child(obj, 0);
 80167e4:	2100      	movs	r1, #0
 80167e6:	f7f4 fbb5 	bl	800af54 <lv_obj_get_child>
    roller->sel_opt_id_ori = 0;
 80167ea:	2300      	movs	r3, #0
 80167ec:	84a3      	strh	r3, [r4, #36]	; 0x24
    roller->option_cnt = 0;
 80167ee:	6223      	str	r3, [r4, #32]
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80167f0:	782b      	ldrb	r3, [r5, #0]
    return lv_obj_get_child(obj, 0);
 80167f2:	4680      	mov	r8, r0
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d064      	beq.n	80168c2 <lv_roller_set_options+0xf6>
 80167f8:	2000      	movs	r0, #0
 80167fa:	1c69      	adds	r1, r5, #1
        if(options[cnt] == '\n') roller->option_cnt++;
 80167fc:	2b0a      	cmp	r3, #10
 80167fe:	d01f      	beq.n	8016840 <lv_roller_set_options+0x74>
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 8016800:	3101      	adds	r1, #1
 8016802:	1e4b      	subs	r3, r1, #1
 8016804:	781b      	ldrb	r3, [r3, #0]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d1f8      	bne.n	80167fc <lv_roller_set_options+0x30>
    roller->option_cnt++; /*Last option has no `\n`*/
 801680a:	3001      	adds	r0, #1
 801680c:	b280      	uxth	r0, r0
        roller->mode = LV_ROLLER_MODE_NORMAL;
 801680e:	2226      	movs	r2, #38	; 0x26
    roller->option_cnt++; /*Last option has no `\n`*/
 8016810:	8420      	strh	r0, [r4, #32]
        roller->mode = LV_ROLLER_MODE_NORMAL;
 8016812:	5ca3      	ldrb	r3, [r4, r2]
    if(mode == LV_ROLLER_MODE_NORMAL) {
 8016814:	2e00      	cmp	r6, #0
 8016816:	d11c      	bne.n	8016852 <lv_roller_set_options+0x86>
        roller->mode = LV_ROLLER_MODE_NORMAL;
 8016818:	2101      	movs	r1, #1
 801681a:	438b      	bics	r3, r1
 801681c:	54a3      	strb	r3, [r4, r2]
        lv_label_set_text(label, options);
 801681e:	0029      	movs	r1, r5
 8016820:	4640      	mov	r0, r8
 8016822:	f7ff fcc7 	bl	80161b4 <lv_label_set_text>
    roller->sel_opt_id_ori = roller->sel_opt_id;
 8016826:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    lv_obj_refresh_ext_draw_size(label);
 8016828:	4640      	mov	r0, r8
    roller->sel_opt_id_ori = roller->sel_opt_id;
 801682a:	84a3      	strh	r3, [r4, #36]	; 0x24
    lv_obj_refresh_ext_draw_size(label);
 801682c:	f7ee ff9e 	bl	800576c <lv_obj_refresh_ext_draw_size>
}
 8016830:	b003      	add	sp, #12
 8016832:	bcf0      	pop	{r4, r5, r6, r7}
 8016834:	46bb      	mov	fp, r7
 8016836:	46b2      	mov	sl, r6
 8016838:	46a9      	mov	r9, r5
 801683a:	46a0      	mov	r8, r4
 801683c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(options);
 801683e:	e7fe      	b.n	801683e <lv_roller_set_options+0x72>
        if(options[cnt] == '\n') roller->option_cnt++;
 8016840:	3001      	adds	r0, #1
 8016842:	b280      	uxth	r0, r0
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 8016844:	3101      	adds	r1, #1
        if(options[cnt] == '\n') roller->option_cnt++;
 8016846:	8420      	strh	r0, [r4, #32]
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 8016848:	1e4b      	subs	r3, r1, #1
 801684a:	781b      	ldrb	r3, [r3, #0]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d1d5      	bne.n	80167fc <lv_roller_set_options+0x30>
 8016850:	e7db      	b.n	801680a <lv_roller_set_options+0x3e>
        roller->mode = LV_ROLLER_MODE_INFINITE;
 8016852:	2101      	movs	r1, #1
 8016854:	430b      	orrs	r3, r1
 8016856:	54a3      	strb	r3, [r4, r2]
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 8016858:	0028      	movs	r0, r5
 801685a:	f7e9 fc5d 	bl	8000118 <strlen>
 801685e:	2301      	movs	r3, #1
 8016860:	4681      	mov	r9, r0
 8016862:	444b      	add	r3, r9
 8016864:	469b      	mov	fp, r3
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 8016866:	005b      	lsls	r3, r3, #1
 8016868:	445b      	add	r3, fp
 801686a:	0018      	movs	r0, r3
 801686c:	9301      	str	r3, [sp, #4]
 801686e:	f7fb fc1b 	bl	80120a8 <lv_mem_buf_get>
 8016872:	2603      	movs	r6, #3
 8016874:	4682      	mov	sl, r0
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 8016876:	0007      	movs	r7, r0
            strcpy(&opt_extra[opt_len * i], options);
 8016878:	0038      	movs	r0, r7
 801687a:	0029      	movs	r1, r5
 801687c:	f004 fee6 	bl	801b64c <strcpy>
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 8016880:	464b      	mov	r3, r9
 8016882:	220a      	movs	r2, #10
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 8016884:	3e01      	subs	r6, #1
 8016886:	b2f6      	uxtb	r6, r6
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 8016888:	54fa      	strb	r2, [r7, r3]
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801688a:	445f      	add	r7, fp
 801688c:	2e00      	cmp	r6, #0
 801688e:	d1f3      	bne.n	8016878 <lv_roller_set_options+0xac>
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 8016890:	9b01      	ldr	r3, [sp, #4]
        lv_label_set_text(label, opt_extra);
 8016892:	4651      	mov	r1, sl
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 8016894:	4453      	add	r3, sl
 8016896:	3b01      	subs	r3, #1
 8016898:	701e      	strb	r6, [r3, #0]
        lv_label_set_text(label, opt_extra);
 801689a:	4640      	mov	r0, r8
 801689c:	f7ff fc8a 	bl	80161b4 <lv_label_set_text>
        lv_mem_buf_release(opt_extra);
 80168a0:	4650      	mov	r0, sl
 80168a2:	f7fb fca5 	bl	80121f0 <lv_mem_buf_release>
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 80168a6:	8c23      	ldrh	r3, [r4, #32]
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 80168a8:	005a      	lsls	r2, r3, #1
 80168aa:	189a      	adds	r2, r3, r2
 80168ac:	8422      	strh	r2, [r4, #32]
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 80168ae:	2226      	movs	r2, #38	; 0x26
 80168b0:	5ca2      	ldrb	r2, [r4, r2]
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 80168b2:	8463      	strh	r3, [r4, #34]	; 0x22
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 80168b4:	07d2      	lsls	r2, r2, #31
 80168b6:	d5b7      	bpl.n	8016828 <lv_roller_set_options+0x5c>
 80168b8:	0020      	movs	r0, r4
 80168ba:	f7ff fd69 	bl	8016390 <inf_normalize.part.0>
    roller->sel_opt_id_ori = roller->sel_opt_id;
 80168be:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80168c0:	e7b2      	b.n	8016828 <lv_roller_set_options+0x5c>
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 80168c2:	2001      	movs	r0, #1
 80168c4:	e7a3      	b.n	801680e <lv_roller_set_options+0x42>
 80168c6:	46c0      	nop			; (mov r8, r8)

080168c8 <lv_roller_set_selected>:
{
 80168c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168ca:	4647      	mov	r7, r8
 80168cc:	46ce      	mov	lr, r9
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 80168ce:	2326      	movs	r3, #38	; 0x26
{
 80168d0:	b580      	push	{r7, lr}
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 80168d2:	5cc3      	ldrb	r3, [r0, r3]
{
 80168d4:	0004      	movs	r4, r0
 80168d6:	000d      	movs	r5, r1
 80168d8:	0016      	movs	r6, r2
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 80168da:	8c07      	ldrh	r7, [r0, #32]
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 80168dc:	07db      	lsls	r3, r3, #31
 80168de:	d509      	bpl.n	80168f4 <lv_roller_set_selected+0x2c>
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 80168e0:	2103      	movs	r1, #3
 80168e2:	0038      	movs	r0, r7
 80168e4:	f7e9 fc20 	bl	8000128 <__udivsi3>
 80168e8:	b283      	uxth	r3, r0
 80168ea:	4699      	mov	r9, r3
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 80168ec:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80168ee:	4698      	mov	r8, r3
        if(sel_opt < real_option_cnt) {
 80168f0:	45a9      	cmp	r9, r5
 80168f2:	d80d      	bhi.n	8016910 <lv_roller_set_selected+0x48>
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 80168f4:	42bd      	cmp	r5, r7
 80168f6:	d301      	bcc.n	80168fc <lv_roller_set_selected+0x34>
 80168f8:	3f01      	subs	r7, #1
 80168fa:	b2bd      	uxth	r5, r7
    refr_position(obj, anim);
 80168fc:	0031      	movs	r1, r6
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 80168fe:	8465      	strh	r5, [r4, #34]	; 0x22
    roller->sel_opt_id_ori = roller->sel_opt_id;
 8016900:	84a5      	strh	r5, [r4, #36]	; 0x24
    refr_position(obj, anim);
 8016902:	0020      	movs	r0, r4
 8016904:	f7ff fd88 	bl	8016418 <refr_position>
}
 8016908:	bcc0      	pop	{r6, r7}
 801690a:	46b9      	mov	r9, r7
 801690c:	46b0      	mov	r8, r6
 801690e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 8016910:	4649      	mov	r1, r9
 8016912:	0018      	movs	r0, r3
 8016914:	f7e9 fc08 	bl	8000128 <__udivsi3>
            uint16_t act_opt = roller->sel_opt_id - current_page * real_option_cnt;
 8016918:	464b      	mov	r3, r9
 801691a:	4358      	muls	r0, r3
 801691c:	4643      	mov	r3, r8
 801691e:	b282      	uxth	r2, r0
 8016920:	1a9b      	subs	r3, r3, r2
 8016922:	b298      	uxth	r0, r3
            if(LV_ABS((int16_t)act_opt - sel_opt) > real_option_cnt / 2) {
 8016924:	b21b      	sxth	r3, r3
 8016926:	1b5b      	subs	r3, r3, r5
 8016928:	17d9      	asrs	r1, r3, #31
 801692a:	185b      	adds	r3, r3, r1
 801692c:	404b      	eors	r3, r1
 801692e:	4649      	mov	r1, r9
 8016930:	0849      	lsrs	r1, r1, #1
 8016932:	428b      	cmp	r3, r1
 8016934:	d903      	bls.n	801693e <lv_roller_set_selected+0x76>
                if(act_opt > sel_opt) sel_opt_signed += real_option_cnt;
 8016936:	4285      	cmp	r5, r0
 8016938:	d204      	bcs.n	8016944 <lv_roller_set_selected+0x7c>
            sel_opt = sel_opt_signed + real_option_cnt * current_page;
 801693a:	444d      	add	r5, r9
 801693c:	b2ad      	uxth	r5, r5
 801693e:	1955      	adds	r5, r2, r5
 8016940:	b2ad      	uxth	r5, r5
 8016942:	e7d7      	b.n	80168f4 <lv_roller_set_selected+0x2c>
 8016944:	464b      	mov	r3, r9
 8016946:	1aed      	subs	r5, r5, r3
 8016948:	b2ad      	uxth	r5, r5
 801694a:	e7f8      	b.n	801693e <lv_roller_set_selected+0x76>

0801694c <lv_roller_event>:
{
 801694c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801694e:	4645      	mov	r5, r8
 8016950:	46de      	mov	lr, fp
 8016952:	4657      	mov	r7, sl
 8016954:	464e      	mov	r6, r9
 8016956:	b5e0      	push	{r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8016958:	48c9      	ldr	r0, [pc, #804]	; (8016c80 <lv_roller_event+0x334>)
{
 801695a:	b09f      	sub	sp, #124	; 0x7c
 801695c:	000d      	movs	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801695e:	f7eb fa1d 	bl	8001d9c <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8016962:	2801      	cmp	r0, #1
 8016964:	d006      	beq.n	8016974 <lv_roller_event+0x28>
}
 8016966:	b01f      	add	sp, #124	; 0x7c
 8016968:	bcf0      	pop	{r4, r5, r6, r7}
 801696a:	46bb      	mov	fp, r7
 801696c:	46b2      	mov	sl, r6
 801696e:	46a9      	mov	r9, r5
 8016970:	46a0      	mov	r8, r4
 8016972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8016974:	0028      	movs	r0, r5
 8016976:	f7eb fa2d 	bl	8001dd4 <lv_event_get_code>
 801697a:	0004      	movs	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801697c:	0028      	movs	r0, r5
 801697e:	f7eb fa25 	bl	8001dcc <lv_event_get_target>
 8016982:	0006      	movs	r6, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 8016984:	2c2c      	cmp	r4, #44	; 0x2c
 8016986:	d100      	bne.n	801698a <lv_roller_event+0x3e>
 8016988:	e0d6      	b.n	8016b38 <lv_roller_event+0x1ec>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 801698a:	2c2a      	cmp	r4, #42	; 0x2a
 801698c:	d100      	bne.n	8016990 <lv_roller_event+0x44>
 801698e:	e0ff      	b.n	8016b90 <lv_roller_event+0x244>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8016990:	2c29      	cmp	r4, #41	; 0x29
 8016992:	d100      	bne.n	8016996 <lv_roller_event+0x4a>
 8016994:	e134      	b.n	8016c00 <lv_roller_event+0x2b4>
    else if(code == LV_EVENT_PRESSED) {
 8016996:	2c01      	cmp	r4, #1
 8016998:	d100      	bne.n	801699c <lv_roller_event+0x50>
 801699a:	e146      	b.n	8016c2a <lv_roller_event+0x2de>
    else if(code == LV_EVENT_PRESSING) {
 801699c:	2c02      	cmp	r4, #2
 801699e:	d100      	bne.n	80169a2 <lv_roller_event+0x56>
 80169a0:	e14f      	b.n	8016c42 <lv_roller_event+0x2f6>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 80169a2:	2c08      	cmp	r4, #8
 80169a4:	d100      	bne.n	80169a8 <lv_roller_event+0x5c>
 80169a6:	e104      	b.n	8016bb2 <lv_roller_event+0x266>
 80169a8:	2c03      	cmp	r4, #3
 80169aa:	d100      	bne.n	80169ae <lv_roller_event+0x62>
 80169ac:	e101      	b.n	8016bb2 <lv_roller_event+0x266>
    else if(code == LV_EVENT_FOCUSED) {
 80169ae:	2c0e      	cmp	r4, #14
 80169b0:	d100      	bne.n	80169b4 <lv_roller_event+0x68>
 80169b2:	e12c      	b.n	8016c0e <lv_roller_event+0x2c2>
    else if(code == LV_EVENT_DEFOCUSED) {
 80169b4:	2c0f      	cmp	r4, #15
 80169b6:	d100      	bne.n	80169ba <lv_roller_event+0x6e>
 80169b8:	e1ad      	b.n	8016d16 <lv_roller_event+0x3ca>
    else if(code == LV_EVENT_KEY) {
 80169ba:	2c0d      	cmp	r4, #13
 80169bc:	d100      	bne.n	80169c0 <lv_roller_event+0x74>
 80169be:	e21d      	b.n	8016dfc <lv_roller_event+0x4b0>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80169c0:	2c13      	cmp	r4, #19
 80169c2:	d100      	bne.n	80169c6 <lv_roller_event+0x7a>
 80169c4:	e234      	b.n	8016e30 <lv_roller_event+0x4e4>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 80169c6:	2c15      	cmp	r4, #21
 80169c8:	d001      	beq.n	80169ce <lv_roller_event+0x82>
 80169ca:	2c18      	cmp	r4, #24
 80169cc:	d1cb      	bne.n	8016966 <lv_roller_event+0x1a>
    lv_event_code_t code = lv_event_get_code(e);
 80169ce:	0028      	movs	r0, r5
 80169d0:	f7eb fa00 	bl	8001dd4 <lv_event_get_code>
 80169d4:	0006      	movs	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80169d6:	0028      	movs	r0, r5
 80169d8:	f7eb f9f8 	bl	8001dcc <lv_event_get_target>
 80169dc:	0004      	movs	r4, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 80169de:	2e15      	cmp	r6, #21
 80169e0:	d100      	bne.n	80169e4 <lv_roller_event+0x98>
 80169e2:	e249      	b.n	8016e78 <lv_roller_event+0x52c>
    else if(code == LV_EVENT_DRAW_POST) {
 80169e4:	2e18      	cmp	r6, #24
 80169e6:	d1be      	bne.n	8016966 <lv_roller_event+0x1a>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80169e8:	0028      	movs	r0, r5
 80169ea:	f7eb fa55 	bl	8001e98 <lv_event_get_draw_ctx>
        lv_draw_label_dsc_init(&label_dsc);
 80169ee:	ad10      	add	r5, sp, #64	; 0x40
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80169f0:	4680      	mov	r8, r0
        lv_draw_label_dsc_init(&label_dsc);
 80169f2:	0028      	movs	r0, r5
 80169f4:	f7f5 feb4 	bl	800c760 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_SELECTED, &label_dsc);
 80169f8:	2180      	movs	r1, #128	; 0x80
 80169fa:	002a      	movs	r2, r5
 80169fc:	0020      	movs	r0, r4
 80169fe:	02c9      	lsls	r1, r1, #11
 8016a00:	f7ee fd98 	bl	8005534 <lv_obj_init_draw_label_dsc>
        get_sel_area(obj, &sel_area);
 8016a04:	0020      	movs	r0, r4
 8016a06:	a90a      	add	r1, sp, #40	; 0x28
 8016a08:	f7ff fc86 	bl	8016318 <get_sel_area>
        area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &sel_area);
 8016a0c:	ab0c      	add	r3, sp, #48	; 0x30
 8016a0e:	469a      	mov	sl, r3
 8016a10:	4643      	mov	r3, r8
 8016a12:	4650      	mov	r0, sl
 8016a14:	6899      	ldr	r1, [r3, #8]
 8016a16:	aa0a      	add	r2, sp, #40	; 0x28
 8016a18:	f7fa fcb8 	bl	801138c <_lv_area_intersect>
        if(area_ok) {
 8016a1c:	2800      	cmp	r0, #0
 8016a1e:	d0a2      	beq.n	8016966 <lv_roller_event+0x1a>
    return lv_obj_get_child(obj, 0);
 8016a20:	2100      	movs	r1, #0
 8016a22:	0020      	movs	r0, r4
 8016a24:	f7f4 fa96 	bl	800af54 <lv_obj_get_child>
 8016a28:	4681      	mov	r9, r0
            lv_txt_get_size(&res_p, lv_label_get_text(label), label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 8016a2a:	f7ff fc65 	bl	80162f8 <lv_label_get_text>
 8016a2e:	9005      	str	r0, [sp, #20]
 8016a30:	2214      	movs	r2, #20
 8016a32:	5eab      	ldrsh	r3, [r5, r2]
 8016a34:	0020      	movs	r0, r4
 8016a36:	9306      	str	r3, [sp, #24]
 8016a38:	2712      	movs	r7, #18
 8016a3a:	5fea      	ldrsh	r2, [r5, r7]
 8016a3c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016a3e:	9207      	str	r2, [sp, #28]
 8016a40:	f7ef f9e0 	bl	8005e04 <lv_obj_get_width>
 8016a44:	2102      	movs	r1, #2
 8016a46:	9a07      	ldr	r2, [sp, #28]
 8016a48:	af09      	add	r7, sp, #36	; 0x24
 8016a4a:	9b06      	ldr	r3, [sp, #24]
 8016a4c:	468b      	mov	fp, r1
 8016a4e:	9102      	str	r1, [sp, #8]
 8016a50:	9001      	str	r0, [sp, #4]
 8016a52:	9905      	ldr	r1, [sp, #20]
 8016a54:	0038      	movs	r0, r7
 8016a56:	9200      	str	r2, [sp, #0]
 8016a58:	0032      	movs	r2, r6
 8016a5a:	f7fd f8a9 	bl	8013bb0 <lv_txt_get_size>
            lv_coord_t roller_h = lv_obj_get_height(obj);
 8016a5e:	0020      	movs	r0, r4
 8016a60:	f7ef f9d8 	bl	8005e14 <lv_obj_get_height>
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 8016a64:	0fc3      	lsrs	r3, r0, #31
 8016a66:	181b      	adds	r3, r3, r0
 8016a68:	105b      	asrs	r3, r3, #1
 8016a6a:	b21a      	sxth	r2, r3
 8016a6c:	464b      	mov	r3, r9
 8016a6e:	4694      	mov	ip, r2
 8016a70:	2612      	movs	r6, #18
 8016a72:	5f9e      	ldrsh	r6, [r3, r6]
                                                       obj->coords.y1); /*label offset from the middle line of the roller*/
 8016a74:	2112      	movs	r1, #18
 8016a76:	5e63      	ldrsh	r3, [r4, r1]
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 8016a78:	4648      	mov	r0, r9
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 8016a7a:	4463      	add	r3, ip
 8016a7c:	1af6      	subs	r6, r6, r3
 8016a7e:	9205      	str	r2, [sp, #20]
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 8016a80:	f7ef f9c8 	bl	8005e14 <lv_obj_get_height>
 8016a84:	03b6      	lsls	r6, r6, #14
 8016a86:	0001      	movs	r1, r0
 8016a88:	0030      	movs	r0, r6
 8016a8a:	f7e9 fbd7 	bl	800023c <__divsi3>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8016a8e:	2100      	movs	r1, #0
 8016a90:	0006      	movs	r6, r0
 8016a92:	2257      	movs	r2, #87	; 0x57
 8016a94:	0020      	movs	r0, r4
 8016a96:	f7f2 fe2b 	bl	80096f0 <lv_obj_get_style_prop>
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 8016a9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a9c:	2108      	movs	r1, #8
 8016a9e:	5e42      	ldrsh	r2, [r0, r1]
 8016aa0:	2108      	movs	r1, #8
 8016aa2:	5e5b      	ldrsh	r3, [r3, r1]
 8016aa4:	1a9b      	subs	r3, r3, r2
 8016aa6:	0fda      	lsrs	r2, r3, #31
 8016aa8:	18d2      	adds	r2, r2, r3
            res_p.y -= corr;
 8016aaa:	887b      	ldrh	r3, [r7, #2]
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 8016aac:	1052      	asrs	r2, r2, #1
            res_p.y -= corr;
 8016aae:	1a9b      	subs	r3, r3, r2
 8016ab0:	b21b      	sxth	r3, r3
 8016ab2:	807b      	strh	r3, [r7, #2]
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 8016ab4:	2012      	movs	r0, #18
 8016ab6:	5e21      	ldrsh	r1, [r4, r0]
 8016ab8:	9805      	ldr	r0, [sp, #20]
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 8016aba:	4373      	muls	r3, r6
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 8016abc:	4684      	mov	ip, r0
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 8016abe:	139b      	asrs	r3, r3, #14
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 8016ac0:	4461      	add	r1, ip
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 8016ac2:	185b      	adds	r3, r3, r1
            label_sel_y -= corr;
 8016ac4:	1a99      	subs	r1, r3, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8016ac6:	0020      	movs	r0, r4
 8016ac8:	2232      	movs	r2, #50	; 0x32
 8016aca:	9105      	str	r1, [sp, #20]
 8016acc:	2100      	movs	r1, #0
 8016ace:	f7f2 fe0f 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016ad2:	2212      	movs	r2, #18
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8016ad4:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016ad6:	2100      	movs	r1, #0
 8016ad8:	0020      	movs	r0, r4
 8016ada:	f7f2 fe09 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8016ade:	2213      	movs	r2, #19
 8016ae0:	2100      	movs	r1, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016ae2:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8016ae4:	0020      	movs	r0, r4
 8016ae6:	f7f2 fe03 	bl	80096f0 <lv_obj_get_style_prop>
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 8016aea:	9a06      	ldr	r2, [sp, #24]
 8016aec:	8a21      	ldrh	r1, [r4, #16]
 8016aee:	b2b3      	uxth	r3, r6
 8016af0:	189a      	adds	r2, r3, r2
 8016af2:	1852      	adds	r2, r2, r1
            label_sel_area.y1 = label_sel_y;
 8016af4:	9905      	ldr	r1, [sp, #20]
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 8016af6:	ae0e      	add	r6, sp, #56	; 0x38
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 8016af8:	468c      	mov	ip, r1
            label_sel_area.y1 = label_sel_y;
 8016afa:	8071      	strh	r1, [r6, #2]
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 8016afc:	8032      	strh	r2, [r6, #0]
            label_sel_area.x2 = obj->coords.x2 - pright - bwidth;
 8016afe:	8aa2      	ldrh	r2, [r4, #20]
 8016b00:	181b      	adds	r3, r3, r0
 8016b02:	1ad3      	subs	r3, r2, r3
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 8016b04:	465a      	mov	r2, fp
            label_sel_area.x2 = obj->coords.x2 - pright - bwidth;
 8016b06:	80b3      	strh	r3, [r6, #4]
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 8016b08:	887b      	ldrh	r3, [r7, #2]
            lv_draw_label(draw_ctx, &label_dsc, &label_sel_area, lv_label_get_text(label), NULL);
 8016b0a:	4648      	mov	r0, r9
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 8016b0c:	4463      	add	r3, ip
 8016b0e:	80f3      	strh	r3, [r6, #6]
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 8016b10:	7f6b      	ldrb	r3, [r5, #29]
 8016b12:	4313      	orrs	r3, r2
 8016b14:	776b      	strb	r3, [r5, #29]
            draw_ctx->clip_area = &mask_sel;
 8016b16:	4652      	mov	r2, sl
            const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8016b18:	4643      	mov	r3, r8
 8016b1a:	689c      	ldr	r4, [r3, #8]
            draw_ctx->clip_area = &mask_sel;
 8016b1c:	609a      	str	r2, [r3, #8]
            lv_draw_label(draw_ctx, &label_dsc, &label_sel_area, lv_label_get_text(label), NULL);
 8016b1e:	f7ff fbeb 	bl	80162f8 <lv_label_get_text>
 8016b22:	2200      	movs	r2, #0
 8016b24:	0003      	movs	r3, r0
 8016b26:	9200      	str	r2, [sp, #0]
 8016b28:	0029      	movs	r1, r5
 8016b2a:	0032      	movs	r2, r6
 8016b2c:	4640      	mov	r0, r8
 8016b2e:	f7f5 fe2f 	bl	800c790 <lv_draw_label>
            draw_ctx->clip_area = clip_area_ori;
 8016b32:	4643      	mov	r3, r8
 8016b34:	609c      	str	r4, [r3, #8]
 8016b36:	e716      	b.n	8016966 <lv_roller_event+0x1a>
        lv_point_t * p = lv_event_get_param(e);
 8016b38:	0028      	movs	r0, r5
 8016b3a:	f7eb f94f 	bl	8001ddc <lv_event_get_param>
    return lv_obj_get_child(obj, 0);
 8016b3e:	2100      	movs	r1, #0
        lv_point_t * p = lv_event_get_param(e);
 8016b40:	0005      	movs	r5, r0
    return lv_obj_get_child(obj, 0);
 8016b42:	0030      	movs	r0, r6
 8016b44:	f7f4 fa06 	bl	800af54 <lv_obj_get_child>
 8016b48:	1e04      	subs	r4, r0, #0
    if(label == NULL) return 0;
 8016b4a:	d05d      	beq.n	8016c08 <lv_roller_event+0x2bc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8016b4c:	2180      	movs	r1, #128	; 0x80
 8016b4e:	2257      	movs	r2, #87	; 0x57
 8016b50:	0030      	movs	r0, r6
 8016b52:	02c9      	lsls	r1, r1, #11
 8016b54:	f7f2 fdcc 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8016b58:	2180      	movs	r1, #128	; 0x80
 8016b5a:	2258      	movs	r2, #88	; 0x58
 8016b5c:	02c9      	lsls	r1, r1, #11
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8016b5e:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8016b60:	0030      	movs	r0, r6
 8016b62:	f7f2 fdc5 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016b66:	b203      	sxth	r3, r0
    const char * txt = lv_label_get_text(label);
 8016b68:	0020      	movs	r0, r4
 8016b6a:	4698      	mov	r8, r3
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 8016b6c:	2600      	movs	r6, #0
    const char * txt = lv_label_get_text(label);
 8016b6e:	f7ff fbc3 	bl	80162f8 <lv_label_get_text>
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 8016b72:	4b44      	ldr	r3, [pc, #272]	; (8016c84 <lv_roller_event+0x338>)
 8016b74:	ac10      	add	r4, sp, #64	; 0x40
    const char * txt = lv_label_get_text(label);
 8016b76:	0001      	movs	r1, r0
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 8016b78:	003a      	movs	r2, r7
 8016b7a:	9301      	str	r3, [sp, #4]
 8016b7c:	0020      	movs	r0, r4
 8016b7e:	4643      	mov	r3, r8
 8016b80:	9602      	str	r6, [sp, #8]
 8016b82:	9600      	str	r6, [sp, #0]
 8016b84:	f7fd f814 	bl	8013bb0 <lv_txt_get_size>
    return size.x;
 8016b88:	2200      	movs	r2, #0
 8016b8a:	5ea3      	ldrsh	r3, [r4, r2]
        p->x = get_selected_label_width(obj);
 8016b8c:	802b      	strh	r3, [r5, #0]
 8016b8e:	e6ea      	b.n	8016966 <lv_roller_event+0x1a>
    return lv_obj_get_child(obj, 0);
 8016b90:	2100      	movs	r1, #0
 8016b92:	f7f4 f9df 	bl	800af54 <lv_obj_get_child>
        if(label) lv_event_send(label, LV_EVENT_STYLE_CHANGED, NULL);
 8016b96:	2800      	cmp	r0, #0
 8016b98:	d003      	beq.n	8016ba2 <lv_roller_event+0x256>
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	212a      	movs	r1, #42	; 0x2a
 8016b9e:	f7eb f8dd 	bl	8001d5c <lv_event_send>
        lv_obj_refresh_self_size(obj);
 8016ba2:	0030      	movs	r0, r6
 8016ba4:	f7ef f9d4 	bl	8005f50 <lv_obj_refresh_self_size>
        refr_position(obj, LV_ANIM_OFF);
 8016ba8:	2100      	movs	r1, #0
 8016baa:	0030      	movs	r0, r6
 8016bac:	f7ff fc34 	bl	8016418 <refr_position>
 8016bb0:	e6d9      	b.n	8016966 <lv_roller_event+0x1a>
    return lv_obj_get_child(obj, 0);
 8016bb2:	2100      	movs	r1, #0
 8016bb4:	0030      	movs	r0, r6
 8016bb6:	f7f4 f9cd 	bl	800af54 <lv_obj_get_child>
 8016bba:	1e04      	subs	r4, r0, #0
    if(label == NULL) return LV_RES_OK;
 8016bbc:	d100      	bne.n	8016bc0 <lv_roller_event+0x274>
 8016bbe:	e6d2      	b.n	8016966 <lv_roller_event+0x1a>
    lv_indev_t * indev = lv_indev_get_act();
 8016bc0:	f7eb fdea 	bl	8002798 <lv_indev_get_act>
 8016bc4:	0005      	movs	r5, r0
    lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8016bc6:	f7eb fded 	bl	80027a4 <lv_indev_get_type>
    if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 8016bca:	2804      	cmp	r0, #4
 8016bcc:	d100      	bne.n	8016bd0 <lv_roller_event+0x284>
 8016bce:	e135      	b.n	8016e3c <lv_roller_event+0x4f0>
 8016bd0:	2802      	cmp	r0, #2
 8016bd2:	d101      	bne.n	8016bd8 <lv_roller_event+0x28c>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 8016bd4:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 8016bd6:	84b3      	strh	r3, [r6, #36]	; 0x24
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8016bd8:	0028      	movs	r0, r5
 8016bda:	f7eb fde3 	bl	80027a4 <lv_indev_get_type>
 8016bde:	2801      	cmp	r0, #1
 8016be0:	d054      	beq.n	8016c8c <lv_roller_event+0x340>
 8016be2:	0028      	movs	r0, r5
 8016be4:	f7eb fdde 	bl	80027a4 <lv_indev_get_type>
 8016be8:	2803      	cmp	r0, #3
 8016bea:	d04f      	beq.n	8016c8c <lv_roller_event+0x340>
 8016bec:	ab10      	add	r3, sp, #64	; 0x40
 8016bee:	4698      	mov	r8, r3
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 8016bf0:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8016bf2:	4642      	mov	r2, r8
 8016bf4:	211c      	movs	r1, #28
 8016bf6:	0030      	movs	r0, r6
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 8016bf8:	9310      	str	r3, [sp, #64]	; 0x40
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8016bfa:	f7eb f8af 	bl	8001d5c <lv_event_send>
    return res;
 8016bfe:	e6b2      	b.n	8016966 <lv_roller_event+0x1a>
        refr_position(obj, LV_ANIM_OFF);
 8016c00:	2100      	movs	r1, #0
 8016c02:	f7ff fc09 	bl	8016418 <refr_position>
 8016c06:	e6ae      	b.n	8016966 <lv_roller_event+0x1a>
    if(label == NULL) return 0;
 8016c08:	2300      	movs	r3, #0
        p->x = get_selected_label_width(obj);
 8016c0a:	802b      	strh	r3, [r5, #0]
 8016c0c:	e6ab      	b.n	8016966 <lv_roller_event+0x1a>
        lv_group_t * g             = lv_obj_get_group(obj);
 8016c0e:	f7ee fa2d 	bl	800506c <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 8016c12:	f7eb fd45 	bl	80026a0 <lv_group_get_editing>
 8016c16:	0004      	movs	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8016c18:	f7eb fdbe 	bl	8002798 <lv_indev_get_act>
 8016c1c:	f7eb fdc2 	bl	80027a4 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8016c20:	2804      	cmp	r0, #4
 8016c22:	d075      	beq.n	8016d10 <lv_roller_event+0x3c4>
            roller->sel_opt_id_ori = roller->sel_opt_id; /*Save the current value. Used to revert this state if
 8016c24:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 8016c26:	84b3      	strh	r3, [r6, #36]	; 0x24
 8016c28:	e69d      	b.n	8016966 <lv_roller_event+0x1a>
        roller->moved = 0;
 8016c2a:	2226      	movs	r2, #38	; 0x26
 8016c2c:	2102      	movs	r1, #2
 8016c2e:	5c83      	ldrb	r3, [r0, r2]
 8016c30:	438b      	bics	r3, r1
 8016c32:	5483      	strb	r3, [r0, r2]
    return lv_obj_get_child(obj, 0);
 8016c34:	2100      	movs	r1, #0
 8016c36:	f7f4 f98d 	bl	800af54 <lv_obj_get_child>
        lv_anim_del(get_label(obj), set_y_anim);
 8016c3a:	4913      	ldr	r1, [pc, #76]	; (8016c88 <lv_roller_event+0x33c>)
 8016c3c:	f7fa f9c4 	bl	8010fc8 <lv_anim_del>
 8016c40:	e691      	b.n	8016966 <lv_roller_event+0x1a>
        lv_indev_t * indev = lv_indev_get_act();
 8016c42:	f7eb fda9 	bl	8002798 <lv_indev_get_act>
        lv_indev_get_vect(indev, &p);
 8016c46:	a910      	add	r1, sp, #64	; 0x40
 8016c48:	f7eb fe64 	bl	8002914 <lv_indev_get_vect>
        if(p.y) {
 8016c4c:	ab04      	add	r3, sp, #16
 8016c4e:	2232      	movs	r2, #50	; 0x32
 8016c50:	5e9b      	ldrsh	r3, [r3, r2]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d100      	bne.n	8016c58 <lv_roller_event+0x30c>
 8016c56:	e686      	b.n	8016966 <lv_roller_event+0x1a>
    return lv_obj_get_child(obj, 0);
 8016c58:	2100      	movs	r1, #0
 8016c5a:	0030      	movs	r0, r6
 8016c5c:	f7f4 f97a 	bl	800af54 <lv_obj_get_child>
 8016c60:	0004      	movs	r4, r0
            lv_obj_set_y(label, lv_obj_get_y(label) + p.y);
 8016c62:	f7ef f87b 	bl	8005d5c <lv_obj_get_y>
 8016c66:	ab04      	add	r3, sp, #16
 8016c68:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 8016c6a:	1809      	adds	r1, r1, r0
 8016c6c:	b209      	sxth	r1, r1
 8016c6e:	0020      	movs	r0, r4
 8016c70:	f7ee ffb2 	bl	8005bd8 <lv_obj_set_y>
            roller->moved = 1;
 8016c74:	2226      	movs	r2, #38	; 0x26
 8016c76:	2102      	movs	r1, #2
 8016c78:	5cb3      	ldrb	r3, [r6, r2]
 8016c7a:	430b      	orrs	r3, r1
 8016c7c:	54b3      	strb	r3, [r6, r2]
 8016c7e:	e672      	b.n	8016966 <lv_roller_event+0x1a>
 8016c80:	0801bf58 	.word	0x0801bf58
 8016c84:	00001fff 	.word	0x00001fff
 8016c88:	0801630d 	.word	0x0801630d
        if(roller->moved == 0) {
 8016c8c:	2202      	movs	r2, #2
 8016c8e:	2326      	movs	r3, #38	; 0x26
 8016c90:	0011      	movs	r1, r2
 8016c92:	5cf3      	ldrb	r3, [r6, r3]
 8016c94:	4019      	ands	r1, r3
 8016c96:	4688      	mov	r8, r1
 8016c98:	421a      	tst	r2, r3
 8016c9a:	d147      	bne.n	8016d2c <lv_roller_event+0x3e0>
            lv_indev_get_point(indev, &p);
 8016c9c:	af0e      	add	r7, sp, #56	; 0x38
 8016c9e:	0039      	movs	r1, r7
 8016ca0:	0028      	movs	r0, r5
 8016ca2:	f7eb fe01 	bl	80028a8 <lv_indev_get_point>
            p.y -= label->coords.y1;
 8016ca6:	8a62      	ldrh	r2, [r4, #18]
 8016ca8:	887b      	ldrh	r3, [r7, #2]
            letter_i = lv_label_get_letter_on(label, &p);
 8016caa:	0039      	movs	r1, r7
            p.y -= label->coords.y1;
 8016cac:	1a9b      	subs	r3, r3, r2
 8016cae:	807b      	strh	r3, [r7, #2]
            p.x -= label->coords.x1;
 8016cb0:	8a22      	ldrh	r2, [r4, #16]
 8016cb2:	883b      	ldrh	r3, [r7, #0]
            letter_i = lv_label_get_letter_on(label, &p);
 8016cb4:	0020      	movs	r0, r4
            p.x -= label->coords.x1;
 8016cb6:	1a9b      	subs	r3, r3, r2
 8016cb8:	803b      	strh	r3, [r7, #0]
            letter_i = lv_label_get_letter_on(label, &p);
 8016cba:	f7ff fb1f 	bl	80162fc <lv_label_get_letter_on>
 8016cbe:	0007      	movs	r7, r0
            const char * txt  = lv_label_get_text(label);
 8016cc0:	0020      	movs	r0, r4
 8016cc2:	f7ff fb19 	bl	80162f8 <lv_label_get_text>
            uint32_t i        = 0;
 8016cc6:	4643      	mov	r3, r8
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8016cc8:	2400      	movs	r4, #0
            new_opt = 0;
 8016cca:	2500      	movs	r5, #0
            uint32_t i        = 0;
 8016ccc:	9310      	str	r3, [sp, #64]	; 0x40
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8016cce:	2f00      	cmp	r7, #0
 8016cd0:	d100      	bne.n	8016cd4 <lv_roller_event+0x388>
 8016cd2:	e0e8      	b.n	8016ea6 <lv_roller_event+0x55a>
            uint32_t i_prev   = 0;
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	4699      	mov	r9, r3
 8016cd8:	ab10      	add	r3, sp, #64	; 0x40
 8016cda:	4698      	mov	r8, r3
 8016cdc:	4b75      	ldr	r3, [pc, #468]	; (8016eb4 <lv_roller_event+0x568>)
 8016cde:	46b2      	mov	sl, r6
 8016ce0:	469b      	mov	fp, r3
 8016ce2:	003e      	movs	r6, r7
 8016ce4:	0005      	movs	r5, r0
 8016ce6:	464f      	mov	r7, r9
 8016ce8:	e004      	b.n	8016cf4 <lv_roller_event+0x3a8>
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8016cea:	3401      	adds	r4, #1
                i_prev = i;
 8016cec:	9f10      	ldr	r7, [sp, #64]	; 0x40
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8016cee:	42a6      	cmp	r6, r4
 8016cf0:	d100      	bne.n	8016cf4 <lv_roller_event+0x3a8>
 8016cf2:	e080      	b.n	8016df6 <lv_roller_event+0x4aa>
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 8016cf4:	465b      	mov	r3, fp
 8016cf6:	4641      	mov	r1, r8
 8016cf8:	0028      	movs	r0, r5
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	4798      	blx	r3
                if(letter == '\n' && i_prev != letter_i) new_opt++;
 8016cfe:	280a      	cmp	r0, #10
 8016d00:	d1f3      	bne.n	8016cea <lv_roller_event+0x39e>
 8016d02:	42b7      	cmp	r7, r6
 8016d04:	d0f1      	beq.n	8016cea <lv_roller_event+0x39e>
 8016d06:	464b      	mov	r3, r9
 8016d08:	3301      	adds	r3, #1
 8016d0a:	b21b      	sxth	r3, r3
 8016d0c:	4699      	mov	r9, r3
 8016d0e:	e7ec      	b.n	8016cea <lv_roller_event+0x39e>
            if(!editing) {
 8016d10:	2c00      	cmp	r4, #0
 8016d12:	d000      	beq.n	8016d16 <lv_roller_event+0x3ca>
 8016d14:	e786      	b.n	8016c24 <lv_roller_event+0x2d8>
        if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 8016d16:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
 8016d18:	8c72      	ldrh	r2, [r6, #34]	; 0x22
 8016d1a:	429a      	cmp	r2, r3
 8016d1c:	d100      	bne.n	8016d20 <lv_roller_event+0x3d4>
 8016d1e:	e622      	b.n	8016966 <lv_roller_event+0x1a>
            refr_position(obj, LV_ANIM_ON);
 8016d20:	2101      	movs	r1, #1
 8016d22:	0030      	movs	r0, r6
            roller->sel_opt_id = roller->sel_opt_id_ori;
 8016d24:	8473      	strh	r3, [r6, #34]	; 0x22
            refr_position(obj, LV_ANIM_ON);
 8016d26:	f7ff fb77 	bl	8016418 <refr_position>
 8016d2a:	e61c      	b.n	8016966 <lv_roller_event+0x1a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8016d2c:	2257      	movs	r2, #87	; 0x57
 8016d2e:	2100      	movs	r1, #0
 8016d30:	0030      	movs	r0, r6
 8016d32:	f7f2 fcdd 	bl	80096f0 <lv_obj_get_style_prop>
 8016d36:	0007      	movs	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8016d38:	2259      	movs	r2, #89	; 0x59
 8016d3a:	2100      	movs	r1, #0
 8016d3c:	0030      	movs	r0, r6
 8016d3e:	f7f2 fcd7 	bl	80096f0 <lv_obj_get_style_prop>
            lv_coord_t label_unit = font_h + line_space;
 8016d42:	893b      	ldrh	r3, [r7, #8]
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8016d44:	210c      	movs	r1, #12
            lv_coord_t label_unit = font_h + line_space;
 8016d46:	181b      	adds	r3, r3, r0
 8016d48:	b21b      	sxth	r3, r3
 8016d4a:	4698      	mov	r8, r3
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8016d4c:	2312      	movs	r3, #18
 8016d4e:	5ef0      	ldrsh	r0, [r6, r3]
 8016d50:	2216      	movs	r2, #22
 8016d52:	5eb3      	ldrsh	r3, [r6, r2]
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8016d54:	8a64      	ldrh	r4, [r4, #18]
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8016d56:	1a1b      	subs	r3, r3, r0
 8016d58:	0fdf      	lsrs	r7, r3, #31
 8016d5a:	18ff      	adds	r7, r7, r3
 8016d5c:	107f      	asrs	r7, r7, #1
 8016d5e:	183f      	adds	r7, r7, r0
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8016d60:	0028      	movs	r0, r5
 8016d62:	f7ed fb43 	bl	80043ec <lv_indev_scroll_throw_predict>
 8016d66:	1820      	adds	r0, r4, r0
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8016d68:	b23f      	sxth	r7, r7
            int32_t id = (mid - label_y1) / label_unit;
 8016d6a:	b200      	sxth	r0, r0
 8016d6c:	4641      	mov	r1, r8
 8016d6e:	1a38      	subs	r0, r7, r0
 8016d70:	f7e9 fa64 	bl	800023c <__divsi3>
            if(id < 0) id = 0;
 8016d74:	43c3      	mvns	r3, r0
 8016d76:	17db      	asrs	r3, r3, #31
 8016d78:	4018      	ands	r0, r3
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 8016d7a:	8c33      	ldrh	r3, [r6, #32]
 8016d7c:	4298      	cmp	r0, r3
 8016d7e:	db00      	blt.n	8016d82 <lv_roller_event+0x436>
 8016d80:	1e58      	subs	r0, r3, #1
            new_opt = id;
 8016d82:	ab10      	add	r3, sp, #64	; 0x40
 8016d84:	4698      	mov	r8, r3
 8016d86:	b205      	sxth	r5, r0
        if(new_opt >= 0) {
 8016d88:	2d00      	cmp	r5, #0
 8016d8a:	da00      	bge.n	8016d8e <lv_roller_event+0x442>
 8016d8c:	e730      	b.n	8016bf0 <lv_roller_event+0x2a4>
            lv_roller_set_selected(obj, new_opt, LV_ANIM_ON);
 8016d8e:	b2ac      	uxth	r4, r5
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8016d90:	2326      	movs	r3, #38	; 0x26
 8016d92:	5cf3      	ldrb	r3, [r6, r3]
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 8016d94:	8c37      	ldrh	r7, [r6, #32]
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8016d96:	07db      	lsls	r3, r3, #31
 8016d98:	d522      	bpl.n	8016de0 <lv_roller_event+0x494>
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 8016d9a:	2103      	movs	r1, #3
 8016d9c:	0038      	movs	r0, r7
 8016d9e:	f7e9 f9c3 	bl	8000128 <__udivsi3>
 8016da2:	b283      	uxth	r3, r0
 8016da4:	469a      	mov	sl, r3
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 8016da6:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 8016da8:	4699      	mov	r9, r3
        if(sel_opt < real_option_cnt) {
 8016daa:	45a2      	cmp	sl, r4
 8016dac:	d918      	bls.n	8016de0 <lv_roller_event+0x494>
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 8016dae:	4651      	mov	r1, sl
 8016db0:	0018      	movs	r0, r3
 8016db2:	f7e9 f9b9 	bl	8000128 <__udivsi3>
            uint16_t act_opt = roller->sel_opt_id - current_page * real_option_cnt;
 8016db6:	4652      	mov	r2, sl
 8016db8:	464b      	mov	r3, r9
 8016dba:	4342      	muls	r2, r0
 8016dbc:	b292      	uxth	r2, r2
 8016dbe:	1a9b      	subs	r3, r3, r2
 8016dc0:	b298      	uxth	r0, r3
            if(LV_ABS((int16_t)act_opt - sel_opt) > real_option_cnt / 2) {
 8016dc2:	b21b      	sxth	r3, r3
 8016dc4:	1b1b      	subs	r3, r3, r4
 8016dc6:	17d9      	asrs	r1, r3, #31
 8016dc8:	185b      	adds	r3, r3, r1
 8016dca:	404b      	eors	r3, r1
 8016dcc:	4651      	mov	r1, sl
 8016dce:	0849      	lsrs	r1, r1, #1
 8016dd0:	428b      	cmp	r3, r1
 8016dd2:	d903      	bls.n	8016ddc <lv_roller_event+0x490>
                if(act_opt > sel_opt) sel_opt_signed += real_option_cnt;
 8016dd4:	42a0      	cmp	r0, r4
 8016dd6:	d969      	bls.n	8016eac <lv_roller_event+0x560>
 8016dd8:	4455      	add	r5, sl
            sel_opt = sel_opt_signed + real_option_cnt * current_page;
 8016dda:	b2ac      	uxth	r4, r5
 8016ddc:	1914      	adds	r4, r2, r4
 8016dde:	b2a4      	uxth	r4, r4
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 8016de0:	42bc      	cmp	r4, r7
 8016de2:	d301      	bcc.n	8016de8 <lv_roller_event+0x49c>
 8016de4:	3f01      	subs	r7, #1
 8016de6:	b2bc      	uxth	r4, r7
    refr_position(obj, anim);
 8016de8:	2101      	movs	r1, #1
 8016dea:	0030      	movs	r0, r6
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 8016dec:	8474      	strh	r4, [r6, #34]	; 0x22
    roller->sel_opt_id_ori = roller->sel_opt_id;
 8016dee:	84b4      	strh	r4, [r6, #36]	; 0x24
    refr_position(obj, anim);
 8016df0:	f7ff fb12 	bl	8016418 <refr_position>
}
 8016df4:	e6fc      	b.n	8016bf0 <lv_roller_event+0x2a4>
 8016df6:	4656      	mov	r6, sl
 8016df8:	464d      	mov	r5, r9
 8016dfa:	e7c5      	b.n	8016d88 <lv_roller_event+0x43c>
        char c = *((char *)lv_event_get_param(e));
 8016dfc:	0028      	movs	r0, r5
 8016dfe:	f7ea ffed 	bl	8001ddc <lv_event_get_param>
 8016e02:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8016e04:	001a      	movs	r2, r3
 8016e06:	3a12      	subs	r2, #18
 8016e08:	2a01      	cmp	r2, #1
 8016e0a:	d927      	bls.n	8016e5c <lv_roller_event+0x510>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8016e0c:	2b14      	cmp	r3, #20
 8016e0e:	d002      	beq.n	8016e16 <lv_roller_event+0x4ca>
 8016e10:	2b11      	cmp	r3, #17
 8016e12:	d000      	beq.n	8016e16 <lv_roller_event+0x4ca>
 8016e14:	e5a7      	b.n	8016966 <lv_roller_event+0x1a>
            if(roller->sel_opt_id > 0) {
 8016e16:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d100      	bne.n	8016e1e <lv_roller_event+0x4d2>
 8016e1c:	e5a3      	b.n	8016966 <lv_roller_event+0x1a>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 8016e1e:	8cb4      	ldrh	r4, [r6, #36]	; 0x24
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, LV_ANIM_ON);
 8016e20:	3b01      	subs	r3, #1
 8016e22:	2201      	movs	r2, #1
 8016e24:	0030      	movs	r0, r6
 8016e26:	b299      	uxth	r1, r3
 8016e28:	f7ff fd4e 	bl	80168c8 <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 8016e2c:	84b4      	strh	r4, [r6, #36]	; 0x24
 8016e2e:	e59a      	b.n	8016966 <lv_roller_event+0x1a>
    return lv_obj_get_child(obj, 0);
 8016e30:	2100      	movs	r1, #0
 8016e32:	f7f4 f88f 	bl	800af54 <lv_obj_get_child>
        lv_obj_refresh_ext_draw_size(label);
 8016e36:	f7ee fc99 	bl	800576c <lv_obj_refresh_ext_draw_size>
 8016e3a:	e594      	b.n	8016966 <lv_roller_event+0x1a>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 8016e3c:	8c73      	ldrh	r3, [r6, #34]	; 0x22
            lv_group_t * g      = lv_obj_get_group(obj);
 8016e3e:	0030      	movs	r0, r6
        roller->sel_opt_id_ori = roller->sel_opt_id;
 8016e40:	84b3      	strh	r3, [r6, #36]	; 0x24
            lv_group_t * g      = lv_obj_get_group(obj);
 8016e42:	f7ee f913 	bl	800506c <lv_obj_get_group>
 8016e46:	0007      	movs	r7, r0
            if(lv_group_get_editing(g)) {
 8016e48:	f7eb fc2a 	bl	80026a0 <lv_group_get_editing>
 8016e4c:	2800      	cmp	r0, #0
 8016e4e:	d100      	bne.n	8016e52 <lv_roller_event+0x506>
 8016e50:	e6c2      	b.n	8016bd8 <lv_roller_event+0x28c>
                lv_group_set_editing(g, false);
 8016e52:	2100      	movs	r1, #0
 8016e54:	0038      	movs	r0, r7
 8016e56:	f7eb fbc5 	bl	80025e4 <lv_group_set_editing>
 8016e5a:	e6bd      	b.n	8016bd8 <lv_roller_event+0x28c>
            if(roller->sel_opt_id + 1 < roller->option_cnt) {
 8016e5c:	8c71      	ldrh	r1, [r6, #34]	; 0x22
 8016e5e:	8c33      	ldrh	r3, [r6, #32]
 8016e60:	3101      	adds	r1, #1
 8016e62:	4299      	cmp	r1, r3
 8016e64:	db00      	blt.n	8016e68 <lv_roller_event+0x51c>
 8016e66:	e57e      	b.n	8016966 <lv_roller_event+0x1a>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 8016e68:	8cb4      	ldrh	r4, [r6, #36]	; 0x24
                lv_roller_set_selected(obj, roller->sel_opt_id + 1, LV_ANIM_ON);
 8016e6a:	2201      	movs	r2, #1
 8016e6c:	0030      	movs	r0, r6
 8016e6e:	b289      	uxth	r1, r1
 8016e70:	f7ff fd2a 	bl	80168c8 <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 8016e74:	84b4      	strh	r4, [r6, #36]	; 0x24
 8016e76:	e576      	b.n	8016966 <lv_roller_event+0x1a>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016e78:	0028      	movs	r0, r5
 8016e7a:	f7eb f80d 	bl	8001e98 <lv_event_get_draw_ctx>
        get_sel_area(obj, &sel_area);
 8016e7e:	a90e      	add	r1, sp, #56	; 0x38
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016e80:	0005      	movs	r5, r0
        get_sel_area(obj, &sel_area);
 8016e82:	0020      	movs	r0, r4
 8016e84:	f7ff fa48 	bl	8016318 <get_sel_area>
        lv_draw_rect_dsc_init(&sel_dsc);
 8016e88:	a810      	add	r0, sp, #64	; 0x40
 8016e8a:	f7f6 f893 	bl	800cfb4 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_SELECTED, &sel_dsc);
 8016e8e:	2180      	movs	r1, #128	; 0x80
 8016e90:	0020      	movs	r0, r4
 8016e92:	aa10      	add	r2, sp, #64	; 0x40
 8016e94:	02c9      	lsls	r1, r1, #11
 8016e96:	f7ee fa65 	bl	8005364 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(draw_ctx, &sel_dsc, &sel_area);
 8016e9a:	0028      	movs	r0, r5
 8016e9c:	aa0e      	add	r2, sp, #56	; 0x38
 8016e9e:	a910      	add	r1, sp, #64	; 0x40
 8016ea0:	f7f6 f8ae 	bl	800d000 <lv_draw_rect>
 8016ea4:	e55f      	b.n	8016966 <lv_roller_event+0x1a>
        if(new_opt >= 0) {
 8016ea6:	ab10      	add	r3, sp, #64	; 0x40
 8016ea8:	4698      	mov	r8, r3
 8016eaa:	e771      	b.n	8016d90 <lv_roller_event+0x444>
                else sel_opt_signed -= real_option_cnt;
 8016eac:	4653      	mov	r3, sl
 8016eae:	1aed      	subs	r5, r5, r3
            sel_opt = sel_opt_signed + real_option_cnt * current_page;
 8016eb0:	b2ac      	uxth	r4, r5
 8016eb2:	e793      	b.n	8016ddc <lv_roller_event+0x490>
 8016eb4:	20000018 	.word	0x20000018

08016eb8 <lv_switch_anim_ready>:
 * Resets the switch's animation state to "no animation in progress".
 */
static void lv_switch_anim_ready(lv_anim_t * a)
{
    lv_switch_t * sw = a->var;
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 8016eb8:	2301      	movs	r3, #1
{
 8016eba:	b510      	push	{r4, lr}
    lv_switch_t * sw = a->var;
 8016ebc:	6800      	ldr	r0, [r0, #0]
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 8016ebe:	425b      	negs	r3, r3
 8016ec0:	6203      	str	r3, [r0, #32]
    lv_obj_invalidate((lv_obj_t *)sw);
 8016ec2:	f7ef fb3d 	bl	8006540 <lv_obj_invalidate>
}
 8016ec6:	bd10      	pop	{r4, pc}

08016ec8 <lv_switch_anim_exec_cb>:
{
 8016ec8:	b510      	push	{r4, lr}
    sw->anim_state = value;
 8016eca:	6201      	str	r1, [r0, #32]
    lv_obj_invalidate((lv_obj_t *)sw);
 8016ecc:	f7ef fb38 	bl	8006540 <lv_obj_invalidate>
}
 8016ed0:	bd10      	pop	{r4, pc}
 8016ed2:	46c0      	nop			; (mov r8, r8)

08016ed4 <lv_switch_destructor>:
{
 8016ed4:	b510      	push	{r4, lr}
 8016ed6:	0008      	movs	r0, r1
    lv_anim_del(sw, NULL);
 8016ed8:	2100      	movs	r1, #0
 8016eda:	f7fa f875 	bl	8010fc8 <lv_anim_del>
}
 8016ede:	bd10      	pop	{r4, pc}

08016ee0 <lv_switch_constructor>:
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 8016ee0:	2301      	movs	r3, #1
{
 8016ee2:	b510      	push	{r4, lr}
 8016ee4:	000c      	movs	r4, r1
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 8016ee6:	425b      	negs	r3, r3
 8016ee8:	620b      	str	r3, [r1, #32]
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8016eea:	0020      	movs	r0, r4
 8016eec:	2110      	movs	r1, #16
 8016eee:	f7ee f853 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 8016ef2:	0020      	movs	r0, r4
 8016ef4:	2108      	movs	r1, #8
 8016ef6:	f7ee f813 	bl	8004f20 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8016efa:	2180      	movs	r1, #128	; 0x80
 8016efc:	0020      	movs	r0, r4
 8016efe:	00c9      	lsls	r1, r1, #3
 8016f00:	f7ee f80e 	bl	8004f20 <lv_obj_add_flag>
}
 8016f04:	bd10      	pop	{r4, pc}
 8016f06:	46c0      	nop			; (mov r8, r8)

08016f08 <lv_switch_event>:
{
 8016f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f0a:	46de      	mov	lr, fp
 8016f0c:	4657      	mov	r7, sl
 8016f0e:	464e      	mov	r6, r9
 8016f10:	4645      	mov	r5, r8
 8016f12:	b5e0      	push	{r5, r6, r7, lr}
    res = lv_obj_event_base(MY_CLASS, e);
 8016f14:	48b4      	ldr	r0, [pc, #720]	; (80171e8 <lv_switch_event+0x2e0>)
{
 8016f16:	b0a3      	sub	sp, #140	; 0x8c
 8016f18:	000c      	movs	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8016f1a:	f7ea ff3f 	bl	8001d9c <lv_obj_event_base>
 8016f1e:	0007      	movs	r7, r0
    if(res != LV_RES_OK) return;
 8016f20:	2801      	cmp	r0, #1
 8016f22:	d006      	beq.n	8016f32 <lv_switch_event+0x2a>
}
 8016f24:	b023      	add	sp, #140	; 0x8c
 8016f26:	bcf0      	pop	{r4, r5, r6, r7}
 8016f28:	46bb      	mov	fp, r7
 8016f2a:	46b2      	mov	sl, r6
 8016f2c:	46a9      	mov	r9, r5
 8016f2e:	46a0      	mov	r8, r4
 8016f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8016f32:	0020      	movs	r0, r4
 8016f34:	f7ea ff4e 	bl	8001dd4 <lv_event_get_code>
 8016f38:	0005      	movs	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8016f3a:	0020      	movs	r0, r4
 8016f3c:	f7ea ff46 	bl	8001dcc <lv_event_get_target>
 8016f40:	0006      	movs	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8016f42:	2d13      	cmp	r5, #19
 8016f44:	d100      	bne.n	8016f48 <lv_switch_event+0x40>
 8016f46:	e0ac      	b.n	80170a2 <lv_switch_event+0x19a>
    else if(code == LV_EVENT_VALUE_CHANGED) {
 8016f48:	2d1c      	cmp	r5, #28
 8016f4a:	d100      	bne.n	8016f4e <lv_switch_event+0x46>
 8016f4c:	e0ee      	b.n	801712c <lv_switch_event+0x224>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8016f4e:	2d15      	cmp	r5, #21
 8016f50:	d1e8      	bne.n	8016f24 <lv_switch_event+0x1c>
    lv_obj_t * obj = lv_event_get_target(e);
 8016f52:	0020      	movs	r0, r4
 8016f54:	f7ea ff3a 	bl	8001dcc <lv_event_get_target>
 8016f58:	0005      	movs	r5, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016f5a:	0020      	movs	r0, r4
 8016f5c:	f7ea ff9c 	bl	8001e98 <lv_event_get_draw_ctx>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016f60:	2212      	movs	r2, #18
 8016f62:	4682      	mov	sl, r0
 8016f64:	2100      	movs	r1, #0
 8016f66:	0028      	movs	r0, r5
 8016f68:	f7f2 fbc2 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8016f6c:	2213      	movs	r2, #19
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8016f6e:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8016f70:	2100      	movs	r1, #0
 8016f72:	0028      	movs	r0, r5
 8016f74:	f7f2 fbbc 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8016f78:	2210      	movs	r2, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8016f7a:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8016f7c:	2100      	movs	r1, #0
 8016f7e:	0028      	movs	r0, r5
 8016f80:	f7f2 fbb6 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8016f84:	2211      	movs	r2, #17
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8016f86:	0004      	movs	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8016f88:	2100      	movs	r1, #0
 8016f8a:	0028      	movs	r0, r5
 8016f8c:	f7f2 fbb0 	bl	80096f0 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 8016f90:	2312      	movs	r3, #18
 8016f92:	5eea      	ldrsh	r2, [r5, r3]
    dest->x2 = src->x2;
 8016f94:	2314      	movs	r3, #20
 8016f96:	5ee9      	ldrsh	r1, [r5, r3]
    dest->y1 = src->y1;
 8016f98:	4691      	mov	r9, r2
    dest->y2 = src->y2;
 8016f9a:	2316      	movs	r3, #22
 8016f9c:	5eea      	ldrsh	r2, [r5, r3]
    indic_area.x1 += bg_left;
 8016f9e:	8a2b      	ldrh	r3, [r5, #16]
 8016fa0:	4693      	mov	fp, r2
 8016fa2:	469c      	mov	ip, r3
 8016fa4:	44e0      	add	r8, ip
 8016fa6:	466b      	mov	r3, sp
 8016fa8:	4642      	mov	r2, r8
 8016faa:	801a      	strh	r2, [r3, #0]
    indic_area.y1 += bg_top;
 8016fac:	0022      	movs	r2, r4
    indic_area.x2 -= bg_right;
 8016fae:	1b89      	subs	r1, r1, r6
    indic_area.y1 += bg_top;
 8016fb0:	444a      	add	r2, r9
    indic_area.x2 -= bg_right;
 8016fb2:	8099      	strh	r1, [r3, #4]
    indic_area.y1 += bg_top;
 8016fb4:	805a      	strh	r2, [r3, #2]
    indic_area.y2 -= bg_bottom;
 8016fb6:	465b      	mov	r3, fp
 8016fb8:	466a      	mov	r2, sp
 8016fba:	1a1b      	subs	r3, r3, r0
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 8016fbc:	a804      	add	r0, sp, #16
    indic_area.y2 -= bg_bottom;
 8016fbe:	80d3      	strh	r3, [r2, #6]
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 8016fc0:	f7f5 fff8 	bl	800cfb4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_indic_dsc);
 8016fc4:	2180      	movs	r1, #128	; 0x80
 8016fc6:	0028      	movs	r0, r5
 8016fc8:	aa04      	add	r2, sp, #16
 8016fca:	0289      	lsls	r1, r1, #10
 8016fcc:	f7ee f9ca 	bl	8005364 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &draw_indic_dsc, &indic_area);
 8016fd0:	466a      	mov	r2, sp
 8016fd2:	4650      	mov	r0, sl
 8016fd4:	a904      	add	r1, sp, #16
 8016fd6:	f7f6 f813 	bl	800d000 <lv_draw_rect>
    lv_coord_t knob_size = lv_obj_get_height(obj);
 8016fda:	0028      	movs	r0, r5
 8016fdc:	f7ee ff1a 	bl	8005e14 <lv_obj_get_height>
    lv_coord_t anim_length = lv_area_get_width(&obj->coords) - knob_size;
 8016fe0:	8aac      	ldrh	r4, [r5, #20]
 8016fe2:	b286      	uxth	r6, r0
 8016fe4:	8a2b      	ldrh	r3, [r5, #16]
 8016fe6:	1ba4      	subs	r4, r4, r6
 8016fe8:	3401      	adds	r4, #1
 8016fea:	1ae4      	subs	r4, r4, r3
 8016fec:	b2a3      	uxth	r3, r4
 8016fee:	4698      	mov	r8, r3
    if(LV_SWITCH_IS_ANIMATING(sw)) {
 8016ff0:	6a2b      	ldr	r3, [r5, #32]
    lv_coord_t anim_length = lv_area_get_width(&obj->coords) - knob_size;
 8016ff2:	b224      	sxth	r4, r4
    if(LV_SWITCH_IS_ANIMATING(sw)) {
 8016ff4:	1c5a      	adds	r2, r3, #1
 8016ff6:	d100      	bne.n	8016ffa <lv_switch_event+0xf2>
 8016ff8:	e0da      	b.n	80171b0 <lv_switch_event+0x2a8>
        anim_value_x = (anim_length * sw->anim_state) / LV_SWITCH_ANIM_STATE_END;
 8016ffa:	4363      	muls	r3, r4
 8016ffc:	24ff      	movs	r4, #255	; 0xff
 8016ffe:	17da      	asrs	r2, r3, #31
 8017000:	4014      	ands	r4, r2
 8017002:	18e4      	adds	r4, r4, r3
 8017004:	1224      	asrs	r4, r4, #8
        anim_value_x = anim_length - anim_value_x;
 8017006:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8017008:	2216      	movs	r2, #22
 801700a:	2100      	movs	r1, #0
 801700c:	0028      	movs	r0, r5
 801700e:	f7f2 fb6f 	bl	80096f0 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8017012:	b2c0      	uxtb	r0, r0
    if(LV_BASE_DIR_RTL == lv_obj_get_style_base_dir(obj, LV_PART_MAIN)) {
 8017014:	2801      	cmp	r0, #1
 8017016:	d102      	bne.n	801701e <lv_switch_event+0x116>
        anim_value_x = anim_length - anim_value_x;
 8017018:	4643      	mov	r3, r8
 801701a:	1b1c      	subs	r4, r3, r4
 801701c:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801701e:	21c0      	movs	r1, #192	; 0xc0
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 8017020:	8a2b      	ldrh	r3, [r5, #16]
 8017022:	2212      	movs	r2, #18
 8017024:	18e3      	adds	r3, r4, r3
 8017026:	b29b      	uxth	r3, r3
 8017028:	ac02      	add	r4, sp, #8
 801702a:	8023      	strh	r3, [r4, #0]
    knob_area.x2 = knob_area.x1 + knob_size;
 801702c:	18f3      	adds	r3, r6, r3
 801702e:	80a3      	strh	r3, [r4, #4]
    knob_area.y1 = obj->coords.y1;
 8017030:	8a6b      	ldrh	r3, [r5, #18]
 8017032:	0028      	movs	r0, r5
 8017034:	8063      	strh	r3, [r4, #2]
    knob_area.y2 = obj->coords.y2;
 8017036:	8aeb      	ldrh	r3, [r5, #22]
 8017038:	0289      	lsls	r1, r1, #10
 801703a:	80e3      	strh	r3, [r4, #6]
 801703c:	f7f2 fb58 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8017040:	21c0      	movs	r1, #192	; 0xc0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8017042:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8017044:	2213      	movs	r2, #19
 8017046:	0028      	movs	r0, r5
 8017048:	0289      	lsls	r1, r1, #10
 801704a:	f7f2 fb51 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801704e:	21c0      	movs	r1, #192	; 0xc0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8017050:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017052:	2210      	movs	r2, #16
 8017054:	0028      	movs	r0, r5
 8017056:	0289      	lsls	r1, r1, #10
 8017058:	f7f2 fb4a 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801705c:	21c0      	movs	r1, #192	; 0xc0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801705e:	0006      	movs	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8017060:	2211      	movs	r2, #17
 8017062:	0028      	movs	r0, r5
 8017064:	0289      	lsls	r1, r1, #10
 8017066:	f7f2 fb43 	bl	80096f0 <lv_obj_get_style_prop>
    knob_area.x1 -= knob_left;
 801706a:	464b      	mov	r3, r9
    knob_area.x2 += knob_right;
 801706c:	88a2      	ldrh	r2, [r4, #4]
    knob_area.x1 -= knob_left;
 801706e:	8821      	ldrh	r1, [r4, #0]
    knob_area.x2 += knob_right;
 8017070:	4442      	add	r2, r8
    knob_area.x1 -= knob_left;
 8017072:	1ac9      	subs	r1, r1, r3
    knob_area.x2 += knob_right;
 8017074:	80a2      	strh	r2, [r4, #4]
    knob_area.y2 += knob_bottom;
 8017076:	88e3      	ldrh	r3, [r4, #6]
    knob_area.y1 -= knob_top;
 8017078:	8862      	ldrh	r2, [r4, #2]
    knob_area.y2 += knob_bottom;
 801707a:	181b      	adds	r3, r3, r0
    knob_area.y1 -= knob_top;
 801707c:	1b92      	subs	r2, r2, r6
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 801707e:	a812      	add	r0, sp, #72	; 0x48
    knob_area.x1 -= knob_left;
 8017080:	8021      	strh	r1, [r4, #0]
    knob_area.y1 -= knob_top;
 8017082:	8062      	strh	r2, [r4, #2]
    knob_area.y2 += knob_bottom;
 8017084:	80e3      	strh	r3, [r4, #6]
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8017086:	f7f5 ff95 	bl	800cfb4 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 801708a:	21c0      	movs	r1, #192	; 0xc0
 801708c:	0028      	movs	r0, r5
 801708e:	aa12      	add	r2, sp, #72	; 0x48
 8017090:	0289      	lsls	r1, r1, #10
 8017092:	f7ee f967 	bl	8005364 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &knob_rect_dsc, &knob_area);
 8017096:	0022      	movs	r2, r4
 8017098:	4650      	mov	r0, sl
 801709a:	a912      	add	r1, sp, #72	; 0x48
 801709c:	f7f5 ffb0 	bl	800d000 <lv_draw_rect>
}
 80170a0:	e740      	b.n	8016f24 <lv_switch_event+0x1c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80170a2:	21c0      	movs	r1, #192	; 0xc0
 80170a4:	2212      	movs	r2, #18
 80170a6:	0289      	lsls	r1, r1, #10
 80170a8:	f7f2 fb22 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80170ac:	21c0      	movs	r1, #192	; 0xc0
 80170ae:	2213      	movs	r2, #19
    return (lv_coord_t)v.num;
 80170b0:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80170b2:	0289      	lsls	r1, r1, #10
 80170b4:	0030      	movs	r0, r6
 80170b6:	f7f2 fb1b 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80170ba:	21c0      	movs	r1, #192	; 0xc0
    return (lv_coord_t)v.num;
 80170bc:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80170be:	2210      	movs	r2, #16
 80170c0:	0289      	lsls	r1, r1, #10
 80170c2:	0030      	movs	r0, r6
    return (lv_coord_t)v.num;
 80170c4:	4699      	mov	r9, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80170c6:	f7f2 fb13 	bl	80096f0 <lv_obj_get_style_prop>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80170ca:	21c0      	movs	r1, #192	; 0xc0
    return (lv_coord_t)v.num;
 80170cc:	b203      	sxth	r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80170ce:	2211      	movs	r2, #17
 80170d0:	0289      	lsls	r1, r1, #10
 80170d2:	0030      	movs	r0, r6
    return (lv_coord_t)v.num;
 80170d4:	4698      	mov	r8, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80170d6:	f7f2 fb0b 	bl	80096f0 <lv_obj_get_style_prop>
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 80170da:	21c0      	movs	r1, #192	; 0xc0
    return (lv_coord_t)v.num;
 80170dc:	b205      	sxth	r5, r0
 80170de:	0289      	lsls	r1, r1, #10
 80170e0:	0030      	movs	r0, r6
 80170e2:	f7ee fac5 	bl	8005670 <lv_obj_calculate_ext_draw_size>
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
 80170e6:	1c3b      	adds	r3, r7, #0
 80170e8:	454f      	cmp	r7, r9
 80170ea:	db2f      	blt.n	801714c <lv_switch_event+0x244>
 80170ec:	b21a      	sxth	r2, r3
 80170ee:	4542      	cmp	r2, r8
 80170f0:	db28      	blt.n	8017144 <lv_switch_event+0x23c>
 80170f2:	b21a      	sxth	r2, r3
 80170f4:	42aa      	cmp	r2, r5
 80170f6:	db23      	blt.n	8017140 <lv_switch_event+0x238>
        knob_size += _LV_SWITCH_KNOB_EXT_AREA_CORRECTION;
 80170f8:	3302      	adds	r3, #2
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 80170fa:	181b      	adds	r3, r3, r0
        lv_coord_t * s = lv_event_get_param(e);
 80170fc:	0020      	movs	r0, r4
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 80170fe:	b29d      	uxth	r5, r3
        lv_coord_t * s = lv_event_get_param(e);
 8017100:	f7ea fe6c 	bl	8001ddc <lv_event_get_param>
        *s = LV_MAX(*s, knob_size);
 8017104:	8803      	ldrh	r3, [r0, #0]
 8017106:	b229      	sxth	r1, r5
 8017108:	1c1a      	adds	r2, r3, #0
 801710a:	b21b      	sxth	r3, r3
        lv_coord_t * s = lv_event_get_param(e);
 801710c:	0004      	movs	r4, r0
        *s = LV_MAX(*s, knob_size);
 801710e:	428b      	cmp	r3, r1
 8017110:	db1a      	blt.n	8017148 <lv_switch_event+0x240>
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 8017112:	2180      	movs	r1, #128	; 0x80
 8017114:	0030      	movs	r0, r6
        *s = LV_MAX(*s, knob_size);
 8017116:	8022      	strh	r2, [r4, #0]
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 8017118:	0289      	lsls	r1, r1, #10
        *s = LV_MAX(*s, knob_size);
 801711a:	b215      	sxth	r5, r2
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 801711c:	f7ee faa8 	bl	8005670 <lv_obj_calculate_ext_draw_size>
 8017120:	4285      	cmp	r5, r0
 8017122:	dd15      	ble.n	8017150 <lv_switch_event+0x248>
 8017124:	2300      	movs	r3, #0
 8017126:	5ee0      	ldrsh	r0, [r4, r3]
 8017128:	8020      	strh	r0, [r4, #0]
 801712a:	e6fb      	b.n	8016f24 <lv_switch_event+0x1c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801712c:	2264      	movs	r2, #100	; 0x64
 801712e:	2100      	movs	r1, #0
 8017130:	f7f2 fade 	bl	80096f0 <lv_obj_get_style_prop>
 8017134:	1e05      	subs	r5, r0, #0
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_switch_t * sw = (lv_switch_t *)obj;

    uint32_t anim_dur_full = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);

    if(anim_dur_full > 0) {
 8017136:	d112      	bne.n	801715e <lv_switch_event+0x256>
        lv_obj_invalidate(obj);
 8017138:	0030      	movs	r0, r6
 801713a:	f7ef fa01 	bl	8006540 <lv_obj_invalidate>
 801713e:	e6f1      	b.n	8016f24 <lv_switch_event+0x1c>
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
 8017140:	1c2b      	adds	r3, r5, #0
 8017142:	e7d9      	b.n	80170f8 <lv_switch_event+0x1f0>
 8017144:	4643      	mov	r3, r8
 8017146:	e7d4      	b.n	80170f2 <lv_switch_event+0x1ea>
        *s = LV_MAX(*s, knob_size);
 8017148:	1c2a      	adds	r2, r5, #0
 801714a:	e7e2      	b.n	8017112 <lv_switch_event+0x20a>
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
 801714c:	464b      	mov	r3, r9
 801714e:	e7cd      	b.n	80170ec <lv_switch_event+0x1e4>
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 8017150:	2180      	movs	r1, #128	; 0x80
 8017152:	0030      	movs	r0, r6
 8017154:	0289      	lsls	r1, r1, #10
 8017156:	f7ee fa8b 	bl	8005670 <lv_obj_calculate_ext_draw_size>
 801715a:	8020      	strh	r0, [r4, #0]
 801715c:	e6e2      	b.n	8016f24 <lv_switch_event+0x1c>
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 801715e:	0030      	movs	r0, r6
 8017160:	f7ed ff7c 	bl	800505c <lv_obj_get_state>
 8017164:	4038      	ands	r0, r7
        int32_t anim_start;
        int32_t anim_end;
        /*No animation in progress -> simply set the values*/
        if(sw->anim_state == LV_SWITCH_ANIM_STATE_INV) {
 8017166:	6a37      	ldr	r7, [r6, #32]
 8017168:	b280      	uxth	r0, r0
 801716a:	1c7b      	adds	r3, r7, #1
 801716c:	d02a      	beq.n	80171c4 <lv_switch_event+0x2bc>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
        }
        /*Animation in progress. Start from the animation end value*/
        else {
            anim_start = sw->anim_state;
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 801716e:	2800      	cmp	r0, #0
 8017170:	d02f      	beq.n	80171d2 <lv_switch_event+0x2ca>
        }
        /*Calculate actual animation duration*/
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;
 8017172:	1e7c      	subs	r4, r7, #1
 8017174:	3cff      	subs	r4, #255	; 0xff
 8017176:	17e3      	asrs	r3, r4, #31
 8017178:	18e4      	adds	r4, r4, r3
 801717a:	405c      	eors	r4, r3
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 801717c:	2380      	movs	r3, #128	; 0x80
 801717e:	005b      	lsls	r3, r3, #1
 8017180:	4698      	mov	r8, r3

        /*Stop the previous animation if it exists*/
        lv_anim_del(sw, NULL);
 8017182:	2100      	movs	r1, #0
 8017184:	0030      	movs	r0, r6
 8017186:	f7f9 ff1f 	bl	8010fc8 <lv_anim_del>

        lv_anim_t a;
        lv_anim_init(&a);
 801718a:	a812      	add	r0, sp, #72	; 0x48
 801718c:	f7f9 ff04 	bl	8010f98 <lv_anim_init>
    a->exec_cb = exec_cb;
 8017190:	4b16      	ldr	r3, [pc, #88]	; (80171ec <lv_switch_event+0x2e4>)
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;
 8017192:	436c      	muls	r4, r5
 8017194:	9313      	str	r3, [sp, #76]	; 0x4c
    a->end_value = end;
 8017196:	4643      	mov	r3, r8
 8017198:	931b      	str	r3, [sp, #108]	; 0x6c
    a->ready_cb = ready_cb;
 801719a:	4b15      	ldr	r3, [pc, #84]	; (80171f0 <lv_switch_event+0x2e8>)
 801719c:	0a24      	lsrs	r4, r4, #8
        lv_anim_set_var(&a, sw);
        lv_anim_set_exec_cb(&a, lv_switch_anim_exec_cb);
        lv_anim_set_values(&a, anim_start, anim_end);
        lv_anim_set_ready_cb(&a, lv_switch_anim_ready);
        lv_anim_set_time(&a, anim_dur);
        lv_anim_start(&a);
 801719e:	a812      	add	r0, sp, #72	; 0x48
    a->var = var;
 80171a0:	9612      	str	r6, [sp, #72]	; 0x48
    a->start_value = start;
 80171a2:	9719      	str	r7, [sp, #100]	; 0x64
    a->current_value = start;
 80171a4:	971a      	str	r7, [sp, #104]	; 0x68
    a->ready_cb = ready_cb;
 80171a6:	9315      	str	r3, [sp, #84]	; 0x54
    a->time = duration;
 80171a8:	941c      	str	r4, [sp, #112]	; 0x70
 80171aa:	f7f9 fff7 	bl	801119c <lv_anim_start>
 80171ae:	e7c3      	b.n	8017138 <lv_switch_event+0x230>
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 80171b0:	0028      	movs	r0, r5
 80171b2:	f7ed ff53 	bl	800505c <lv_obj_get_state>
 80171b6:	4038      	ands	r0, r7
 80171b8:	b284      	uxth	r4, r0
        anim_value_x = chk ? anim_length : 0;
 80171ba:	2c00      	cmp	r4, #0
 80171bc:	d100      	bne.n	80171c0 <lv_switch_event+0x2b8>
 80171be:	e723      	b.n	8017008 <lv_switch_event+0x100>
 80171c0:	4644      	mov	r4, r8
 80171c2:	e721      	b.n	8017008 <lv_switch_event+0x100>
            anim_start = chk ? LV_SWITCH_ANIM_STATE_START : LV_SWITCH_ANIM_STATE_END;
 80171c4:	2480      	movs	r4, #128	; 0x80
 80171c6:	0064      	lsls	r4, r4, #1
 80171c8:	2800      	cmp	r0, #0
 80171ca:	d008      	beq.n	80171de <lv_switch_event+0x2d6>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 80171cc:	46a0      	mov	r8, r4
            anim_start = chk ? LV_SWITCH_ANIM_STATE_START : LV_SWITCH_ANIM_STATE_END;
 80171ce:	2700      	movs	r7, #0
 80171d0:	e7d7      	b.n	8017182 <lv_switch_event+0x27a>
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;
 80171d2:	17fb      	asrs	r3, r7, #31
 80171d4:	18fc      	adds	r4, r7, r3
 80171d6:	405c      	eors	r4, r3
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 80171d8:	2300      	movs	r3, #0
 80171da:	4698      	mov	r8, r3
 80171dc:	e7d1      	b.n	8017182 <lv_switch_event+0x27a>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 80171de:	2300      	movs	r3, #0
            anim_start = chk ? LV_SWITCH_ANIM_STATE_START : LV_SWITCH_ANIM_STATE_END;
 80171e0:	0027      	movs	r7, r4
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 80171e2:	4698      	mov	r8, r3
 80171e4:	e7cd      	b.n	8017182 <lv_switch_event+0x27a>
 80171e6:	46c0      	nop			; (mov r8, r8)
 80171e8:	0801bf88 	.word	0x0801bf88
 80171ec:	08016ec9 	.word	0x08016ec9
 80171f0:	08016eb9 	.word	0x08016eb9

080171f4 <lv_switch_create>:
{
 80171f4:	b510      	push	{r4, lr}
 80171f6:	0001      	movs	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80171f8:	4803      	ldr	r0, [pc, #12]	; (8017208 <lv_switch_create+0x14>)
 80171fa:	f7ed ff9f 	bl	800513c <lv_obj_class_create_obj>
 80171fe:	0004      	movs	r4, r0
    lv_obj_class_init_obj(obj);
 8017200:	f7ee f814 	bl	800522c <lv_obj_class_init_obj>
}
 8017204:	0020      	movs	r0, r4
 8017206:	bd10      	pop	{r4, pc}
 8017208:	0801bf88 	.word	0x0801bf88

0801720c <ui_event_Menu>:
///////////////////// ANIMATIONS ////////////////////
extern lv_indev_t * joy_indev;

///////////////////// FUNCTIONS ////////////////////
void ui_event_Menu(lv_event_t * e)
{
 801720c:	b570      	push	{r4, r5, r6, lr}
 801720e:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 8017210:	f7ea fde0 	bl	8001dd4 <lv_event_get_code>
 8017214:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 8017216:	0020      	movs	r0, r4
 8017218:	f7ea fdd8 	bl	8001dcc <lv_event_get_target>
    if(event_code == LV_EVENT_SCREEN_LOADED) {
 801721c:	2d27      	cmp	r5, #39	; 0x27
 801721e:	d000      	beq.n	8017222 <ui_event_Menu+0x16>
        lv_indev_set_group(joy_indev, group_main);
    }
}
 8017220:	bd70      	pop	{r4, r5, r6, pc}
        lv_indev_set_group(joy_indev, group_main);
 8017222:	4b03      	ldr	r3, [pc, #12]	; (8017230 <ui_event_Menu+0x24>)
 8017224:	6819      	ldr	r1, [r3, #0]
 8017226:	4b03      	ldr	r3, [pc, #12]	; (8017234 <ui_event_Menu+0x28>)
 8017228:	6818      	ldr	r0, [r3, #0]
 801722a:	f7eb fb35 	bl	8002898 <lv_indev_set_group>
}
 801722e:	e7f7      	b.n	8017220 <ui_event_Menu+0x14>
 8017230:	20007cb8 	.word	0x20007cb8
 8017234:	20002e58 	.word	0x20002e58

08017238 <ui_event_Aircon>:

void ui_event_Aircon(lv_event_t * e)
{
 8017238:	b570      	push	{r4, r5, r6, lr}
 801723a:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 801723c:	f7ea fdca 	bl	8001dd4 <lv_event_get_code>
 8017240:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 8017242:	0020      	movs	r0, r4
 8017244:	f7ea fdc2 	bl	8001dcc <lv_event_get_target>
    if(event_code == LV_EVENT_SCREEN_LOADED) {
 8017248:	2d27      	cmp	r5, #39	; 0x27
 801724a:	d000      	beq.n	801724e <ui_event_Aircon+0x16>
        lv_indev_set_group(joy_indev, group_aircon);
    }
}
 801724c:	bd70      	pop	{r4, r5, r6, pc}
        lv_indev_set_group(joy_indev, group_aircon);
 801724e:	4b03      	ldr	r3, [pc, #12]	; (801725c <ui_event_Aircon+0x24>)
 8017250:	6819      	ldr	r1, [r3, #0]
 8017252:	4b03      	ldr	r3, [pc, #12]	; (8017260 <ui_event_Aircon+0x28>)
 8017254:	6818      	ldr	r0, [r3, #0]
 8017256:	f7eb fb1f 	bl	8002898 <lv_indev_set_group>
}
 801725a:	e7f7      	b.n	801724c <ui_event_Aircon+0x14>
 801725c:	20007cb0 	.word	0x20007cb0
 8017260:	20002e58 	.word	0x20002e58

08017264 <ui_event_Clock>:

void ui_event_Clock(lv_event_t * e)
{
 8017264:	b570      	push	{r4, r5, r6, lr}
 8017266:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 8017268:	f7ea fdb4 	bl	8001dd4 <lv_event_get_code>
 801726c:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 801726e:	0020      	movs	r0, r4
 8017270:	f7ea fdac 	bl	8001dcc <lv_event_get_target>
    if(event_code == LV_EVENT_SCREEN_LOADED) {
 8017274:	2d27      	cmp	r5, #39	; 0x27
 8017276:	d000      	beq.n	801727a <ui_event_Clock+0x16>
        lv_indev_set_group(joy_indev, group_clock);
    }
}
 8017278:	bd70      	pop	{r4, r5, r6, pc}
        lv_indev_set_group(joy_indev, group_clock);
 801727a:	4b03      	ldr	r3, [pc, #12]	; (8017288 <ui_event_Clock+0x24>)
 801727c:	6819      	ldr	r1, [r3, #0]
 801727e:	4b03      	ldr	r3, [pc, #12]	; (801728c <ui_event_Clock+0x28>)
 8017280:	6818      	ldr	r0, [r3, #0]
 8017282:	f7eb fb09 	bl	8002898 <lv_indev_set_group>
}
 8017286:	e7f7      	b.n	8017278 <ui_event_Clock+0x14>
 8017288:	20007cb4 	.word	0x20007cb4
 801728c:	20002e58 	.word	0x20002e58

08017290 <ui_event_About>:

void ui_event_About(lv_event_t * e)
{
 8017290:	b570      	push	{r4, r5, r6, lr}
 8017292:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 8017294:	f7ea fd9e 	bl	8001dd4 <lv_event_get_code>
 8017298:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 801729a:	0020      	movs	r0, r4
 801729c:	f7ea fd96 	bl	8001dcc <lv_event_get_target>
    if(event_code == LV_EVENT_SCREEN_LOADED) {
 80172a0:	2d27      	cmp	r5, #39	; 0x27
 80172a2:	d000      	beq.n	80172a6 <ui_event_About+0x16>
        lv_indev_set_group(joy_indev, group_about);
    }
}
 80172a4:	bd70      	pop	{r4, r5, r6, pc}
        lv_indev_set_group(joy_indev, group_about);
 80172a6:	4b03      	ldr	r3, [pc, #12]	; (80172b4 <ui_event_About+0x24>)
 80172a8:	6819      	ldr	r1, [r3, #0]
 80172aa:	4b03      	ldr	r3, [pc, #12]	; (80172b8 <ui_event_About+0x28>)
 80172ac:	6818      	ldr	r0, [r3, #0]
 80172ae:	f7eb faf3 	bl	8002898 <lv_indev_set_group>
}
 80172b2:	e7f7      	b.n	80172a4 <ui_event_About+0x14>
 80172b4:	20007cac 	.word	0x20007cac
 80172b8:	20002e58 	.word	0x20002e58

080172bc <ui_event_Button_Aircon>:

void ui_event_Button_Aircon(lv_event_t * e)
{
 80172bc:	b570      	push	{r4, r5, r6, lr}
 80172be:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 80172c0:	f7ea fd88 	bl	8001dd4 <lv_event_get_code>
 80172c4:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 80172c6:	0020      	movs	r0, r4
 80172c8:	f7ea fd80 	bl	8001dcc <lv_event_get_target>
    if(event_code == LV_EVENT_CLICKED) {
 80172cc:	2d07      	cmp	r5, #7
 80172ce:	d000      	beq.n	80172d2 <ui_event_Button_Aircon+0x16>
        _ui_screen_change(ui_AirCon, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
    }
}
 80172d0:	bd70      	pop	{r4, r5, r6, pc}
        _ui_screen_change(ui_AirCon, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
 80172d2:	4b04      	ldr	r3, [pc, #16]	; (80172e4 <ui_event_Button_Aircon+0x28>)
 80172d4:	2200      	movs	r2, #0
 80172d6:	6818      	ldr	r0, [r3, #0]
 80172d8:	2109      	movs	r1, #9
 80172da:	2300      	movs	r3, #0
 80172dc:	f001 f8dc 	bl	8018498 <_ui_screen_change>
}
 80172e0:	e7f6      	b.n	80172d0 <ui_event_Button_Aircon+0x14>
 80172e2:	46c0      	nop			; (mov r8, r8)
 80172e4:	20007cc0 	.word	0x20007cc0

080172e8 <ui_event_Button_Time>:
void ui_event_Button_Time(lv_event_t * e)
{
 80172e8:	b570      	push	{r4, r5, r6, lr}
 80172ea:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 80172ec:	f7ea fd72 	bl	8001dd4 <lv_event_get_code>
 80172f0:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 80172f2:	0020      	movs	r0, r4
 80172f4:	f7ea fd6a 	bl	8001dcc <lv_event_get_target>
    if(event_code == LV_EVENT_CLICKED) {
 80172f8:	2d07      	cmp	r5, #7
 80172fa:	d000      	beq.n	80172fe <ui_event_Button_Time+0x16>
        _ui_screen_change(ui_SetTime, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
    }
}
 80172fc:	bd70      	pop	{r4, r5, r6, pc}
        _ui_screen_change(ui_SetTime, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
 80172fe:	4b04      	ldr	r3, [pc, #16]	; (8017310 <ui_event_Button_Time+0x28>)
 8017300:	2200      	movs	r2, #0
 8017302:	6818      	ldr	r0, [r3, #0]
 8017304:	2109      	movs	r1, #9
 8017306:	2300      	movs	r3, #0
 8017308:	f001 f8c6 	bl	8018498 <_ui_screen_change>
}
 801730c:	e7f6      	b.n	80172fc <ui_event_Button_Time+0x14>
 801730e:	46c0      	nop			; (mov r8, r8)
 8017310:	20007d10 	.word	0x20007d10

08017314 <ui_event_Button_About>:
void ui_event_Button_About(lv_event_t * e)
{
 8017314:	b570      	push	{r4, r5, r6, lr}
 8017316:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 8017318:	f7ea fd5c 	bl	8001dd4 <lv_event_get_code>
 801731c:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 801731e:	0020      	movs	r0, r4
 8017320:	f7ea fd54 	bl	8001dcc <lv_event_get_target>
    if(event_code == LV_EVENT_CLICKED) {
 8017324:	2d07      	cmp	r5, #7
 8017326:	d000      	beq.n	801732a <ui_event_Button_About+0x16>
        _ui_screen_change(ui_About, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
    }
}
 8017328:	bd70      	pop	{r4, r5, r6, pc}
        _ui_screen_change(ui_About, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
 801732a:	4b04      	ldr	r3, [pc, #16]	; (801733c <ui_event_Button_About+0x28>)
 801732c:	2200      	movs	r2, #0
 801732e:	6818      	ldr	r0, [r3, #0]
 8017330:	2109      	movs	r1, #9
 8017332:	2300      	movs	r3, #0
 8017334:	f001 f8b0 	bl	8018498 <_ui_screen_change>
}
 8017338:	e7f6      	b.n	8017328 <ui_event_Button_About+0x14>
 801733a:	46c0      	nop			; (mov r8, r8)
 801733c:	20007cbc 	.word	0x20007cbc

08017340 <ui_event_Header_Sub_Back_Back>:
void ui_event_Header_Sub_Back_Back(lv_event_t * e)
{
 8017340:	b570      	push	{r4, r5, r6, lr}
 8017342:	0004      	movs	r4, r0
    lv_event_code_t event_code = lv_event_get_code(e);
 8017344:	f7ea fd46 	bl	8001dd4 <lv_event_get_code>
 8017348:	0005      	movs	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 801734a:	0020      	movs	r0, r4
 801734c:	f7ea fd3e 	bl	8001dcc <lv_event_get_target>
    if(event_code == LV_EVENT_CLICKED) {
 8017350:	2d07      	cmp	r5, #7
 8017352:	d000      	beq.n	8017356 <ui_event_Header_Sub_Back_Back+0x16>
        _ui_screen_change(ui_Menu, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
    }
}
 8017354:	bd70      	pop	{r4, r5, r6, pc}
        _ui_screen_change(ui_Menu, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0);
 8017356:	4b04      	ldr	r3, [pc, #16]	; (8017368 <ui_event_Header_Sub_Back_Back+0x28>)
 8017358:	2200      	movs	r2, #0
 801735a:	6818      	ldr	r0, [r3, #0]
 801735c:	2109      	movs	r1, #9
 801735e:	2300      	movs	r3, #0
 8017360:	f001 f89a 	bl	8018498 <_ui_screen_change>
}
 8017364:	e7f6      	b.n	8017354 <ui_event_Header_Sub_Back_Back+0x14>
 8017366:	46c0      	nop			; (mov r8, r8)
 8017368:	20007cfc 	.word	0x20007cfc

0801736c <ui_event_Header_Sub2_Back_Back>:
 801736c:	b570      	push	{r4, r5, r6, lr}
 801736e:	0004      	movs	r4, r0
 8017370:	f7ea fd30 	bl	8001dd4 <lv_event_get_code>
 8017374:	0005      	movs	r5, r0
 8017376:	0020      	movs	r0, r4
 8017378:	f7ea fd28 	bl	8001dcc <lv_event_get_target>
 801737c:	2d07      	cmp	r5, #7
 801737e:	d000      	beq.n	8017382 <ui_event_Header_Sub2_Back_Back+0x16>
 8017380:	bd70      	pop	{r4, r5, r6, pc}
 8017382:	4b04      	ldr	r3, [pc, #16]	; (8017394 <ui_event_Header_Sub2_Back_Back+0x28>)
 8017384:	2200      	movs	r2, #0
 8017386:	6818      	ldr	r0, [r3, #0]
 8017388:	2109      	movs	r1, #9
 801738a:	2300      	movs	r3, #0
 801738c:	f001 f884 	bl	8018498 <_ui_screen_change>
 8017390:	e7f6      	b.n	8017380 <ui_event_Header_Sub2_Back_Back+0x14>
 8017392:	46c0      	nop			; (mov r8, r8)
 8017394:	20007cfc 	.word	0x20007cfc

08017398 <ui_event_Header_Sub1_Back_Back>:
 8017398:	b570      	push	{r4, r5, r6, lr}
 801739a:	0004      	movs	r4, r0
 801739c:	f7ea fd1a 	bl	8001dd4 <lv_event_get_code>
 80173a0:	0005      	movs	r5, r0
 80173a2:	0020      	movs	r0, r4
 80173a4:	f7ea fd12 	bl	8001dcc <lv_event_get_target>
 80173a8:	2d07      	cmp	r5, #7
 80173aa:	d000      	beq.n	80173ae <ui_event_Header_Sub1_Back_Back+0x16>
 80173ac:	bd70      	pop	{r4, r5, r6, pc}
 80173ae:	4b04      	ldr	r3, [pc, #16]	; (80173c0 <ui_event_Header_Sub1_Back_Back+0x28>)
 80173b0:	2200      	movs	r2, #0
 80173b2:	6818      	ldr	r0, [r3, #0]
 80173b4:	2109      	movs	r1, #9
 80173b6:	2300      	movs	r3, #0
 80173b8:	f001 f86e 	bl	8018498 <_ui_screen_change>
 80173bc:	e7f6      	b.n	80173ac <ui_event_Header_Sub1_Back_Back+0x14>
 80173be:	46c0      	nop			; (mov r8, r8)
 80173c0:	20007cfc 	.word	0x20007cfc

080173c4 <ui_Menu_screen_init>:
    }
}

///////////////////// SCREENS ////////////////////
void ui_Menu_screen_init(void)
{
 80173c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ui_Menu = lv_obj_create(NULL);
 80173c6:	2000      	movs	r0, #0
 80173c8:	f7ed fd9e 	bl	8004f08 <lv_obj_create>
 80173cc:	4c37      	ldr	r4, [pc, #220]	; (80174ac <ui_Menu_screen_init+0xe8>)
    lv_obj_clear_flag(ui_Menu, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 80173ce:	2110      	movs	r1, #16
    ui_Menu = lv_obj_create(NULL);
 80173d0:	6020      	str	r0, [r4, #0]
    lv_obj_clear_flag(ui_Menu, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 80173d2:	f7ed fde1 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_set_style_bg_img_tiled(ui_Menu, true, LV_PART_MAIN | LV_STATE_DEFAULT);
 80173d6:	2200      	movs	r2, #0
 80173d8:	2101      	movs	r1, #1
 80173da:	6820      	ldr	r0, [r4, #0]
 80173dc:	f7f3 facc 	bl	800a978 <lv_obj_set_style_bg_img_tiled>

    ui_Header = ui_Header_create(ui_Menu);
 80173e0:	6820      	ldr	r0, [r4, #0]
 80173e2:	f000 fdc1 	bl	8017f68 <ui_Header_create>
 80173e6:	4d32      	ldr	r5, [pc, #200]	; (80174b0 <ui_Menu_screen_init+0xec>)
    lv_obj_set_x(ui_Header, 0);
 80173e8:	2100      	movs	r1, #0
    ui_Header = ui_Header_create(ui_Menu);
 80173ea:	6028      	str	r0, [r5, #0]
    lv_obj_set_x(ui_Header, 0);
 80173ec:	f7ee fbdc 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_Header, 0);
 80173f0:	2100      	movs	r1, #0
 80173f2:	6828      	ldr	r0, [r5, #0]
 80173f4:	f7ee fbf0 	bl	8005bd8 <lv_obj_set_y>

    ui_Button_Aircon = ui_Button_create(ui_Menu);
 80173f8:	6820      	ldr	r0, [r4, #0]
 80173fa:	f000 fc5f 	bl	8017cbc <ui_Button_create>
 80173fe:	4f2d      	ldr	r7, [pc, #180]	; (80174b4 <ui_Menu_screen_init+0xf0>)
    lv_obj_set_x(ui_Button_Aircon, 0);
 8017400:	2100      	movs	r1, #0
    ui_Button_Aircon = ui_Button_create(ui_Menu);
 8017402:	6038      	str	r0, [r7, #0]
    lv_obj_set_x(ui_Button_Aircon, 0);
 8017404:	f7ee fbd0 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_Button_Aircon, 39);
 8017408:	6838      	ldr	r0, [r7, #0]
 801740a:	2127      	movs	r1, #39	; 0x27
 801740c:	f7ee fbe4 	bl	8005bd8 <lv_obj_set_y>

    ui_Button_Time = ui_Button_create(ui_Menu);
 8017410:	6820      	ldr	r0, [r4, #0]
 8017412:	f000 fc53 	bl	8017cbc <ui_Button_create>
 8017416:	4e28      	ldr	r6, [pc, #160]	; (80174b8 <ui_Menu_screen_init+0xf4>)
    lv_obj_set_x(ui_Button_Time, 0);
 8017418:	2100      	movs	r1, #0
    ui_Button_Time = ui_Button_create(ui_Menu);
 801741a:	6030      	str	r0, [r6, #0]
    lv_obj_set_x(ui_Button_Time, 0);
 801741c:	f7ee fbc4 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_Button_Time, 132);
 8017420:	6830      	ldr	r0, [r6, #0]
 8017422:	2184      	movs	r1, #132	; 0x84
 8017424:	f7ee fbd8 	bl	8005bd8 <lv_obj_set_y>

    lv_label_set_text(ui_comp_get_child(ui_Button_Time, UI_COMP_BUTTON_BUTTON_TEXT), "Set Time");
 8017428:	6830      	ldr	r0, [r6, #0]
 801742a:	2105      	movs	r1, #5
 801742c:	f000 fc36 	bl	8017c9c <ui_comp_get_child>
 8017430:	4922      	ldr	r1, [pc, #136]	; (80174bc <ui_Menu_screen_init+0xf8>)
 8017432:	f7fe febf 	bl	80161b4 <lv_label_set_text>

    lv_img_set_src(ui_comp_get_child(ui_Button_Time, UI_COMP_BUTTON_BUTTON_IMAGE), &ui_img_time_png);
 8017436:	6830      	ldr	r0, [r6, #0]
 8017438:	2106      	movs	r1, #6
 801743a:	f000 fc2f 	bl	8017c9c <ui_comp_get_child>
 801743e:	4920      	ldr	r1, [pc, #128]	; (80174c0 <ui_Menu_screen_init+0xfc>)
 8017440:	f7fd fc20 	bl	8014c84 <lv_img_set_src>

    ui_Button_About = ui_Button_create(ui_Menu);
 8017444:	6820      	ldr	r0, [r4, #0]
 8017446:	f000 fc39 	bl	8017cbc <ui_Button_create>
 801744a:	4d1e      	ldr	r5, [pc, #120]	; (80174c4 <ui_Menu_screen_init+0x100>)
    lv_obj_set_x(ui_Button_About, 0);
 801744c:	2100      	movs	r1, #0
    ui_Button_About = ui_Button_create(ui_Menu);
 801744e:	6028      	str	r0, [r5, #0]
    lv_obj_set_x(ui_Button_About, 0);
 8017450:	f7ee fbaa 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_Button_About, 225);
 8017454:	6828      	ldr	r0, [r5, #0]
 8017456:	21e1      	movs	r1, #225	; 0xe1
 8017458:	f7ee fbbe 	bl	8005bd8 <lv_obj_set_y>

    lv_label_set_text(ui_comp_get_child(ui_Button_About, UI_COMP_BUTTON_BUTTON_TEXT), "About");
 801745c:	6828      	ldr	r0, [r5, #0]
 801745e:	2105      	movs	r1, #5
 8017460:	f000 fc1c 	bl	8017c9c <ui_comp_get_child>
 8017464:	4918      	ldr	r1, [pc, #96]	; (80174c8 <ui_Menu_screen_init+0x104>)
 8017466:	f7fe fea5 	bl	80161b4 <lv_label_set_text>

    lv_img_set_src(ui_comp_get_child(ui_Button_About, UI_COMP_BUTTON_BUTTON_IMAGE), &ui_img_info_png);
 801746a:	6828      	ldr	r0, [r5, #0]
 801746c:	2106      	movs	r1, #6
 801746e:	f000 fc15 	bl	8017c9c <ui_comp_get_child>
 8017472:	4916      	ldr	r1, [pc, #88]	; (80174cc <ui_Menu_screen_init+0x108>)
 8017474:	f7fd fc06 	bl	8014c84 <lv_img_set_src>

    lv_obj_add_event_cb(ui_Button_Aircon, ui_event_Button_Aircon, LV_EVENT_ALL, NULL);
 8017478:	6838      	ldr	r0, [r7, #0]
 801747a:	2300      	movs	r3, #0
 801747c:	2200      	movs	r2, #0
 801747e:	4914      	ldr	r1, [pc, #80]	; (80174d0 <ui_Menu_screen_init+0x10c>)
 8017480:	f7ea fcd0 	bl	8001e24 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(ui_Button_Time, ui_event_Button_Time, LV_EVENT_ALL, NULL);
 8017484:	6830      	ldr	r0, [r6, #0]
 8017486:	2300      	movs	r3, #0
 8017488:	2200      	movs	r2, #0
 801748a:	4912      	ldr	r1, [pc, #72]	; (80174d4 <ui_Menu_screen_init+0x110>)
 801748c:	f7ea fcca 	bl	8001e24 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(ui_Button_About, ui_event_Button_About, LV_EVENT_ALL, NULL);
 8017490:	6828      	ldr	r0, [r5, #0]
 8017492:	2300      	movs	r3, #0
 8017494:	2200      	movs	r2, #0
 8017496:	4910      	ldr	r1, [pc, #64]	; (80174d8 <ui_Menu_screen_init+0x114>)
 8017498:	f7ea fcc4 	bl	8001e24 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(ui_Menu, ui_event_Menu, LV_EVENT_ALL, NULL);
 801749c:	2300      	movs	r3, #0
 801749e:	2200      	movs	r2, #0
 80174a0:	6820      	ldr	r0, [r4, #0]
 80174a2:	490e      	ldr	r1, [pc, #56]	; (80174dc <ui_Menu_screen_init+0x118>)
 80174a4:	f7ea fcbe 	bl	8001e24 <lv_obj_add_event_cb>

}
 80174a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174aa:	46c0      	nop			; (mov r8, r8)
 80174ac:	20007cfc 	.word	0x20007cfc
 80174b0:	20007cd8 	.word	0x20007cd8
 80174b4:	20007cc8 	.word	0x20007cc8
 80174b8:	20007ccc 	.word	0x20007ccc
 80174bc:	0801d650 	.word	0x0801d650
 80174c0:	0801f0f8 	.word	0x0801f0f8
 80174c4:	20007cc4 	.word	0x20007cc4
 80174c8:	0801d65c 	.word	0x0801d65c
 80174cc:	0801ef54 	.word	0x0801ef54
 80174d0:	080172bd 	.word	0x080172bd
 80174d4:	080172e9 	.word	0x080172e9
 80174d8:	08017315 	.word	0x08017315
 80174dc:	0801720d 	.word	0x0801720d

080174e0 <ui_AirCon_screen_init>:
void ui_AirCon_screen_init(void)
{
 80174e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ui_AirCon = lv_obj_create(NULL);
 80174e2:	2000      	movs	r0, #0
 80174e4:	f7ed fd10 	bl	8004f08 <lv_obj_create>
 80174e8:	4f96      	ldr	r7, [pc, #600]	; (8017744 <ui_AirCon_screen_init+0x264>)
 80174ea:	4d97      	ldr	r5, [pc, #604]	; (8017748 <ui_AirCon_screen_init+0x268>)
    lv_obj_clear_flag(ui_AirCon, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 80174ec:	2110      	movs	r1, #16
    ui_AirCon = lv_obj_create(NULL);
 80174ee:	6028      	str	r0, [r5, #0]
    lv_obj_clear_flag(ui_AirCon, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 80174f0:	f7ed fd52 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_set_style_bg_color(ui_AirCon, lv_color_hex(0x191F2B), LV_PART_MAIN | LV_STATE_DEFAULT);
 80174f4:	2200      	movs	r2, #0
 80174f6:	6828      	ldr	r0, [r5, #0]
 80174f8:	1c39      	adds	r1, r7, #0
 80174fa:	f7f3 fa0d 	bl	800a918 <lv_obj_set_style_bg_color>

    ui_Header_Sub = ui_Header_Sub_create(ui_AirCon);
 80174fe:	6828      	ldr	r0, [r5, #0]
 8017500:	f000 fc86 	bl	8017e10 <ui_Header_Sub_create>
 8017504:	4e91      	ldr	r6, [pc, #580]	; (801774c <ui_AirCon_screen_init+0x26c>)
    lv_obj_set_x(ui_Header_Sub, 0);
 8017506:	2100      	movs	r1, #0
    ui_Header_Sub = ui_Header_Sub_create(ui_AirCon);
 8017508:	6030      	str	r0, [r6, #0]
    lv_obj_set_x(ui_Header_Sub, 0);
 801750a:	f7ee fb4d 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_Header_Sub, 0);
 801750e:	6830      	ldr	r0, [r6, #0]
 8017510:	2100      	movs	r1, #0
 8017512:	f7ee fb61 	bl	8005bd8 <lv_obj_set_y>

    ui_List_Switch1 = ui_List_Switch_create(ui_AirCon);
 8017516:	6828      	ldr	r0, [r5, #0]
 8017518:	f000 fe3e 	bl	8018198 <ui_List_Switch_create>
 801751c:	4c8c      	ldr	r4, [pc, #560]	; (8017750 <ui_AirCon_screen_init+0x270>)
    lv_obj_set_x(ui_List_Switch1, 0);
 801751e:	2100      	movs	r1, #0
    ui_List_Switch1 = ui_List_Switch_create(ui_AirCon);
 8017520:	6020      	str	r0, [r4, #0]
    lv_obj_set_x(ui_List_Switch1, 0);
 8017522:	f7ee fb41 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_List_Switch1, 35);
 8017526:	2123      	movs	r1, #35	; 0x23
 8017528:	6820      	ldr	r0, [r4, #0]
 801752a:	f7ee fb55 	bl	8005bd8 <lv_obj_set_y>

    ui_List_Switch2 = ui_List_Switch_create(ui_AirCon);
 801752e:	6828      	ldr	r0, [r5, #0]
 8017530:	f000 fe32 	bl	8018198 <ui_List_Switch_create>
 8017534:	4c87      	ldr	r4, [pc, #540]	; (8017754 <ui_AirCon_screen_init+0x274>)
    lv_obj_set_x(ui_List_Switch2, 0);
 8017536:	2100      	movs	r1, #0
    ui_List_Switch2 = ui_List_Switch_create(ui_AirCon);
 8017538:	6020      	str	r0, [r4, #0]
    lv_obj_set_x(ui_List_Switch2, 0);
 801753a:	f7ee fb35 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_List_Switch2, 85);
 801753e:	6820      	ldr	r0, [r4, #0]
 8017540:	2155      	movs	r1, #85	; 0x55
 8017542:	f7ee fb49 	bl	8005bd8 <lv_obj_set_y>

    lv_label_set_text(ui_comp_get_child(ui_List_Switch2, UI_COMP_LIST_SWITCH_LIST_TEXT), "Turbo");
 8017546:	2101      	movs	r1, #1
 8017548:	6820      	ldr	r0, [r4, #0]
 801754a:	f000 fba7 	bl	8017c9c <ui_comp_get_child>
 801754e:	4982      	ldr	r1, [pc, #520]	; (8017758 <ui_AirCon_screen_init+0x278>)
 8017550:	f7fe fe30 	bl	80161b4 <lv_label_set_text>

    lv_obj_add_state(ui_comp_get_child(ui_List_Switch2, UI_COMP_LIST_SWITCH_SWITCH1), LV_STATE_CHECKED);       /// States
 8017554:	2102      	movs	r1, #2
 8017556:	6820      	ldr	r0, [r4, #0]
 8017558:	f000 fba0 	bl	8017c9c <ui_comp_get_child>
 801755c:	2101      	movs	r1, #1
 801755e:	f7ed fd5d 	bl	800501c <lv_obj_add_state>
    lv_obj_clear_state(ui_comp_get_child(ui_List_Switch2, UI_COMP_LIST_SWITCH_SWITCH1), LV_STATE_CHECKED);     /// States
 8017562:	2102      	movs	r1, #2
 8017564:	6820      	ldr	r0, [r4, #0]
 8017566:	f000 fb99 	bl	8017c9c <ui_comp_get_child>
 801756a:	2101      	movs	r1, #1
 801756c:	f7ed fd5e 	bl	800502c <lv_obj_clear_state>

    ui_List_Switch3 = ui_List_Switch_create(ui_AirCon);
 8017570:	6828      	ldr	r0, [r5, #0]
 8017572:	f000 fe11 	bl	8018198 <ui_List_Switch_create>
 8017576:	4c79      	ldr	r4, [pc, #484]	; (801775c <ui_AirCon_screen_init+0x27c>)
    lv_obj_set_x(ui_List_Switch3, 0);
 8017578:	2100      	movs	r1, #0
    ui_List_Switch3 = ui_List_Switch_create(ui_AirCon);
 801757a:	6020      	str	r0, [r4, #0]
    lv_obj_set_x(ui_List_Switch3, 0);
 801757c:	f7ee fb14 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_List_Switch3, 135);
 8017580:	6820      	ldr	r0, [r4, #0]
 8017582:	2187      	movs	r1, #135	; 0x87
 8017584:	f7ee fb28 	bl	8005bd8 <lv_obj_set_y>

    lv_label_set_text(ui_comp_get_child(ui_List_Switch3, UI_COMP_LIST_SWITCH_LIST_TEXT), "Fan Swing");
 8017588:	2101      	movs	r1, #1
 801758a:	6820      	ldr	r0, [r4, #0]
 801758c:	f000 fb86 	bl	8017c9c <ui_comp_get_child>
 8017590:	4973      	ldr	r1, [pc, #460]	; (8017760 <ui_AirCon_screen_init+0x280>)
 8017592:	f7fe fe0f 	bl	80161b4 <lv_label_set_text>

    lv_obj_add_flag(ui_comp_get_child(ui_List_Switch3, UI_COMP_LIST_SWITCH_SWITCH1),
 8017596:	2102      	movs	r1, #2
 8017598:	6820      	ldr	r0, [r4, #0]
 801759a:	f000 fb7f 	bl	8017c9c <ui_comp_get_child>
 801759e:	2103      	movs	r1, #3
 80175a0:	f7ed fcbe 	bl	8004f20 <lv_obj_add_flag>
                    LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_CLICKABLE);    /// Flags

    ui_Dropdown1 = lv_dropdown_create(ui_List_Switch3);
 80175a4:	6820      	ldr	r0, [r4, #0]
 80175a6:	f7fc ff03 	bl	80143b0 <lv_dropdown_create>
 80175aa:	4c6e      	ldr	r4, [pc, #440]	; (8017764 <ui_AirCon_screen_init+0x284>)
    lv_dropdown_set_options(ui_Dropdown1, "Off\nLow\nMid\nHigh");
 80175ac:	496e      	ldr	r1, [pc, #440]	; (8017768 <ui_AirCon_screen_init+0x288>)
    ui_Dropdown1 = lv_dropdown_create(ui_List_Switch3);
 80175ae:	6020      	str	r0, [r4, #0]
    lv_dropdown_set_options(ui_Dropdown1, "Off\nLow\nMid\nHigh");
 80175b0:	f7fc ff0a 	bl	80143c8 <lv_dropdown_set_options>
    lv_obj_set_width(ui_Dropdown1, 100);
 80175b4:	6820      	ldr	r0, [r4, #0]
 80175b6:	2164      	movs	r1, #100	; 0x64
 80175b8:	f7ee fb26 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_height(ui_Dropdown1, 26);
 80175bc:	6820      	ldr	r0, [r4, #0]
 80175be:	211a      	movs	r1, #26
 80175c0:	f7ee fb3a 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_x(ui_Dropdown1, 0);
 80175c4:	6820      	ldr	r0, [r4, #0]
 80175c6:	2100      	movs	r1, #0
 80175c8:	f7ee faee 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_Dropdown1, -1);
 80175cc:	2101      	movs	r1, #1
 80175ce:	6820      	ldr	r0, [r4, #0]
 80175d0:	4249      	negs	r1, r1
 80175d2:	f7ee fb01 	bl	8005bd8 <lv_obj_set_y>
    lv_obj_set_align(ui_Dropdown1, LV_ALIGN_RIGHT_MID);
 80175d6:	6820      	ldr	r0, [r4, #0]
 80175d8:	2108      	movs	r1, #8
 80175da:	f7ee fb73 	bl	8005cc4 <lv_obj_set_align>
    lv_obj_add_flag(ui_Dropdown1, LV_OBJ_FLAG_SCROLL_ON_FOCUS);     /// Flags
 80175de:	2180      	movs	r1, #128	; 0x80
 80175e0:	6820      	ldr	r0, [r4, #0]
 80175e2:	00c9      	lsls	r1, r1, #3
 80175e4:	f7ed fc9c 	bl	8004f20 <lv_obj_add_flag>
    lv_obj_set_style_text_color(ui_Dropdown1, lv_color_hex(0x181C29), LV_PART_MAIN | LV_STATE_DEFAULT);
 80175e8:	6820      	ldr	r0, [r4, #0]
 80175ea:	1c39      	adds	r1, r7, #0
 80175ec:	2200      	movs	r2, #0
 80175ee:	f7f3 fa03 	bl	800a9f8 <lv_obj_set_style_text_color>
    lv_obj_set_style_text_opa(ui_Dropdown1, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 80175f2:	6820      	ldr	r0, [r4, #0]
 80175f4:	2200      	movs	r2, #0
 80175f6:	21ff      	movs	r1, #255	; 0xff
 80175f8:	f7f3 fa0a 	bl	800aa10 <lv_obj_set_style_text_opa>
    lv_obj_set_style_pad_left(ui_Dropdown1, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 80175fc:	6820      	ldr	r0, [r4, #0]
 80175fe:	2200      	movs	r2, #0
 8017600:	2105      	movs	r1, #5
 8017602:	f7f3 f979 	bl	800a8f8 <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(ui_Dropdown1, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017606:	6820      	ldr	r0, [r4, #0]
 8017608:	2200      	movs	r2, #0
 801760a:	2105      	movs	r1, #5
 801760c:	f7f3 f97c 	bl	800a908 <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(ui_Dropdown1, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017610:	6820      	ldr	r0, [r4, #0]
 8017612:	2200      	movs	r2, #0
 8017614:	2105      	movs	r1, #5
 8017616:	f7f3 f95f 	bl	800a8d8 <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(ui_Dropdown1, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 801761a:	6820      	ldr	r0, [r4, #0]
 801761c:	2200      	movs	r2, #0
 801761e:	2100      	movs	r1, #0
 8017620:	f7f3 f962 	bl	800a8e8 <lv_obj_set_style_pad_bottom>

    lv_obj_set_style_outline_color(ui_Dropdown1, lv_color_hex(0xe0a721), LV_PART_MAIN | LV_STATE_FOCUSED);
 8017624:	4b51      	ldr	r3, [pc, #324]	; (801776c <ui_AirCon_screen_init+0x28c>)
 8017626:	6820      	ldr	r0, [r4, #0]
 8017628:	1c19      	adds	r1, r3, #0
 801762a:	2202      	movs	r2, #2
 801762c:	f7f3 f9d0 	bl	800a9d0 <lv_obj_set_style_outline_color>
    lv_obj_set_style_outline_width(ui_Dropdown1, 2, LV_PART_MAIN | LV_STATE_FOCUSED);
 8017630:	6820      	ldr	r0, [r4, #0]
 8017632:	2202      	movs	r2, #2
 8017634:	2102      	movs	r1, #2
 8017636:	f7f3 f9c3 	bl	800a9c0 <lv_obj_set_style_outline_width>
    lv_obj_set_style_outline_pad(ui_Dropdown1, 3, LV_PART_MAIN | LV_STATE_FOCUSED);
 801763a:	2202      	movs	r2, #2
 801763c:	2103      	movs	r1, #3
 801763e:	6820      	ldr	r0, [r4, #0]
 8017640:	f7f3 f9d2 	bl	800a9e8 <lv_obj_set_style_outline_pad>

    lv_obj_set_style_text_color(lv_dropdown_get_list(ui_Dropdown1), lv_color_hex(0x181C29), LV_PART_MAIN | LV_STATE_DEFAULT);
 8017644:	6820      	ldr	r0, [r4, #0]
 8017646:	f7fc ff13 	bl	8014470 <lv_dropdown_get_list>
 801764a:	1c39      	adds	r1, r7, #0
 801764c:	2200      	movs	r2, #0
 801764e:	f7f3 f9d3 	bl	800a9f8 <lv_obj_set_style_text_color>
    lv_obj_set_style_text_line_space(lv_dropdown_get_list(ui_Dropdown1), 8, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017652:	6820      	ldr	r0, [r4, #0]
 8017654:	f7fc ff0c 	bl	8014470 <lv_dropdown_get_list>
 8017658:	2200      	movs	r2, #0
 801765a:	2108      	movs	r1, #8
 801765c:	f7f3 f9e8 	bl	800aa30 <lv_obj_set_style_text_line_space>
    lv_obj_set_style_pad_hor(lv_dropdown_get_list(ui_Dropdown1), 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017660:	6820      	ldr	r0, [r4, #0]
 8017662:	f7fc ff05 	bl	8014470 <lv_dropdown_get_list>
 8017666:	0007      	movs	r7, r0
    lv_obj_set_style_pad_bottom(obj, value, selector);
}

static inline void lv_obj_set_style_pad_hor(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_obj_set_style_pad_left(obj, value, selector);
 8017668:	2200      	movs	r2, #0
 801766a:	2105      	movs	r1, #5
 801766c:	f7f3 f944 	bl	800a8f8 <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(obj, value, selector);
 8017670:	2200      	movs	r2, #0
 8017672:	2105      	movs	r1, #5
 8017674:	0038      	movs	r0, r7
 8017676:	f7f3 f947 	bl	800a908 <lv_obj_set_style_pad_right>
    lv_obj_set_style_size(lv_dropdown_get_list(ui_Dropdown1), 3, LV_PART_SCROLLBAR);
 801767a:	6820      	ldr	r0, [r4, #0]
 801767c:	f7fc fef8 	bl	8014470 <lv_dropdown_get_list>
    lv_obj_set_style_pad_column(obj, value, selector);
}

static inline void lv_obj_set_style_size(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
    lv_obj_set_style_width(obj, value, selector);
 8017680:	2780      	movs	r7, #128	; 0x80
 8017682:	0004      	movs	r4, r0
 8017684:	027f      	lsls	r7, r7, #9
 8017686:	003a      	movs	r2, r7
 8017688:	2103      	movs	r1, #3
 801768a:	f7f3 f8fd 	bl	800a888 <lv_obj_set_style_width>
    lv_obj_set_style_height(obj, value, selector);
 801768e:	003a      	movs	r2, r7
 8017690:	2103      	movs	r1, #3
 8017692:	0020      	movs	r0, r4
 8017694:	f7f3 f900 	bl	800a898 <lv_obj_set_style_height>


    ui_List_Switch4 = ui_List_Switch_create(ui_AirCon);
 8017698:	6828      	ldr	r0, [r5, #0]
 801769a:	f000 fd7d 	bl	8018198 <ui_List_Switch_create>
 801769e:	4c34      	ldr	r4, [pc, #208]	; (8017770 <ui_AirCon_screen_init+0x290>)
    lv_obj_set_height(ui_List_Switch4, 137);
 80176a0:	2189      	movs	r1, #137	; 0x89
    ui_List_Switch4 = ui_List_Switch_create(ui_AirCon);
 80176a2:	6020      	str	r0, [r4, #0]
    lv_obj_set_height(ui_List_Switch4, 137);
 80176a4:	f7ee fac8 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_width(ui_List_Switch4, lv_pct(100));
 80176a8:	6820      	ldr	r0, [r4, #0]
 80176aa:	4932      	ldr	r1, [pc, #200]	; (8017774 <ui_AirCon_screen_init+0x294>)
 80176ac:	f7ee faac 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_x(ui_List_Switch4, 0);
 80176b0:	6820      	ldr	r0, [r4, #0]
 80176b2:	2100      	movs	r1, #0
 80176b4:	f7ee fa78 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_List_Switch4, 185);
 80176b8:	6820      	ldr	r0, [r4, #0]
 80176ba:	21b9      	movs	r1, #185	; 0xb9
 80176bc:	f7ee fa8c 	bl	8005bd8 <lv_obj_set_y>
    lv_obj_set_style_pad_left(ui_List_Switch4, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 80176c0:	6820      	ldr	r0, [r4, #0]
 80176c2:	2200      	movs	r2, #0
 80176c4:	210a      	movs	r1, #10
 80176c6:	f7f3 f917 	bl	800a8f8 <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(ui_List_Switch4, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 80176ca:	6820      	ldr	r0, [r4, #0]
 80176cc:	2200      	movs	r2, #0
 80176ce:	210a      	movs	r1, #10
 80176d0:	f7f3 f91a 	bl	800a908 <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(ui_List_Switch4, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 80176d4:	6820      	ldr	r0, [r4, #0]
 80176d6:	2200      	movs	r2, #0
 80176d8:	210a      	movs	r1, #10
 80176da:	f7f3 f8fd 	bl	800a8d8 <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(ui_List_Switch4, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 80176de:	2200      	movs	r2, #0
 80176e0:	6820      	ldr	r0, [r4, #0]
 80176e2:	210a      	movs	r1, #10
 80176e4:	f7f3 f900 	bl	800a8e8 <lv_obj_set_style_pad_bottom>

    lv_obj_set_align(ui_comp_get_child(ui_List_Switch4, UI_COMP_LIST_SWITCH_LIST_TEXT), LV_ALIGN_TOP_MID);
 80176e8:	2101      	movs	r1, #1
 80176ea:	6820      	ldr	r0, [r4, #0]
 80176ec:	f000 fad6 	bl	8017c9c <ui_comp_get_child>
 80176f0:	2102      	movs	r1, #2
 80176f2:	f7ee fae7 	bl	8005cc4 <lv_obj_set_align>
    lv_label_set_text(ui_comp_get_child(ui_List_Switch4, UI_COMP_LIST_SWITCH_LIST_TEXT), "Mode selection");
 80176f6:	2101      	movs	r1, #1
 80176f8:	6820      	ldr	r0, [r4, #0]
 80176fa:	f000 facf 	bl	8017c9c <ui_comp_get_child>
 80176fe:	491e      	ldr	r1, [pc, #120]	; (8017778 <ui_AirCon_screen_init+0x298>)
 8017700:	f7fe fd58 	bl	80161b4 <lv_label_set_text>

    lv_obj_add_flag(ui_comp_get_child(ui_List_Switch4, UI_COMP_LIST_SWITCH_SWITCH1),
 8017704:	2102      	movs	r1, #2
 8017706:	6820      	ldr	r0, [r4, #0]
 8017708:	f000 fac8 	bl	8017c9c <ui_comp_get_child>
 801770c:	2103      	movs	r1, #3
 801770e:	f7ed fc07 	bl	8004f20 <lv_obj_add_flag>
                    LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_CLICKABLE);    /// Flags

    ui_Roller = ui_Roller_create(ui_List_Switch4);
 8017712:	6820      	ldr	r0, [r4, #0]
 8017714:	f000 fe4a 	bl	80183ac <ui_Roller_create>
 8017718:	4c18      	ldr	r4, [pc, #96]	; (801777c <ui_AirCon_screen_init+0x29c>)
    lv_obj_set_x(ui_Roller, 0);
 801771a:	2100      	movs	r1, #0
    ui_Roller = ui_Roller_create(ui_List_Switch4);
 801771c:	6020      	str	r0, [r4, #0]
    lv_obj_set_x(ui_Roller, 0);
 801771e:	f7ee fa43 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_Roller, 0);
 8017722:	6820      	ldr	r0, [r4, #0]
 8017724:	2100      	movs	r1, #0
 8017726:	f7ee fa57 	bl	8005bd8 <lv_obj_set_y>

    lv_obj_add_event_cb(ui_Header_Sub, ui_event_Header_Sub_Back_Back,
 801772a:	6830      	ldr	r0, [r6, #0]
 801772c:	2300      	movs	r3, #0
 801772e:	2200      	movs	r2, #0
 8017730:	4913      	ldr	r1, [pc, #76]	; (8017780 <ui_AirCon_screen_init+0x2a0>)
 8017732:	f7ea fb77 	bl	8001e24 <lv_obj_add_event_cb>
                        LV_EVENT_ALL, NULL);

    lv_obj_add_event_cb(ui_AirCon, ui_event_Aircon, LV_EVENT_ALL, NULL);
 8017736:	6828      	ldr	r0, [r5, #0]
 8017738:	2300      	movs	r3, #0
 801773a:	2200      	movs	r2, #0
 801773c:	4911      	ldr	r1, [pc, #68]	; (8017784 <ui_AirCon_screen_init+0x2a4>)
 801773e:	f7ea fb71 	bl	8001e24 <lv_obj_add_event_cb>

}
 8017742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017744:	000018e5 	.word	0x000018e5
 8017748:	20007cc0 	.word	0x20007cc0
 801774c:	20007cdc 	.word	0x20007cdc
 8017750:	20007ce8 	.word	0x20007ce8
 8017754:	20007cec 	.word	0x20007cec
 8017758:	0801d664 	.word	0x0801d664
 801775c:	20007cf0 	.word	0x20007cf0
 8017760:	0801d66c 	.word	0x0801d66c
 8017764:	20007cd0 	.word	0x20007cd0
 8017768:	0801d678 	.word	0x0801d678
 801776c:	ffffe524 	.word	0xffffe524
 8017770:	20007cf4 	.word	0x20007cf4
 8017774:	00002064 	.word	0x00002064
 8017778:	0801d68c 	.word	0x0801d68c
 801777c:	20007d04 	.word	0x20007d04
 8017780:	08017341 	.word	0x08017341
 8017784:	08017239 	.word	0x08017239

08017788 <ui_SetTime_screen_init>:
void ui_SetTime_screen_init(void)
{
 8017788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801778a:	46ce      	mov	lr, r9
 801778c:	4647      	mov	r7, r8
    ui_SetTime = lv_obj_create(NULL);
 801778e:	2000      	movs	r0, #0
{
 8017790:	b580      	push	{r7, lr}
    ui_SetTime = lv_obj_create(NULL);
 8017792:	f7ed fbb9 	bl	8004f08 <lv_obj_create>
 8017796:	4db4      	ldr	r5, [pc, #720]	; (8017a68 <ui_SetTime_screen_init+0x2e0>)
 8017798:	4fb4      	ldr	r7, [pc, #720]	; (8017a6c <ui_SetTime_screen_init+0x2e4>)
    lv_obj_clear_flag(ui_SetTime, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801779a:	2110      	movs	r1, #16
    ui_SetTime = lv_obj_create(NULL);
 801779c:	6028      	str	r0, [r5, #0]
    lv_obj_clear_flag(ui_SetTime, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801779e:	f7ed fbfb 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_set_style_bg_color(ui_SetTime, lv_color_hex(0x181C29), LV_PART_MAIN | LV_STATE_DEFAULT);
 80177a2:	2200      	movs	r2, #0
 80177a4:	6828      	ldr	r0, [r5, #0]
 80177a6:	1c39      	adds	r1, r7, #0
 80177a8:	f7f3 f8b6 	bl	800a918 <lv_obj_set_style_bg_color>

    ui_Header_Sub1 = ui_Header_Sub_create(ui_SetTime);
 80177ac:	6828      	ldr	r0, [r5, #0]
 80177ae:	f000 fb2f 	bl	8017e10 <ui_Header_Sub_create>
 80177b2:	4eaf      	ldr	r6, [pc, #700]	; (8017a70 <ui_SetTime_screen_init+0x2e8>)
    lv_obj_set_x(ui_Header_Sub1, 0);
 80177b4:	2100      	movs	r1, #0
    ui_Header_Sub1 = ui_Header_Sub_create(ui_SetTime);
 80177b6:	6030      	str	r0, [r6, #0]
    lv_obj_set_x(ui_Header_Sub1, 0);
 80177b8:	f7ee f9f6 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_Header_Sub1, 0);
 80177bc:	6830      	ldr	r0, [r6, #0]
 80177be:	2100      	movs	r1, #0
 80177c0:	f7ee fa0a 	bl	8005bd8 <lv_obj_set_y>

    lv_label_set_text(ui_comp_get_child(ui_Header_Sub1, UI_COMP_HEADER_SUB_LABEL1), "Set Time");
 80177c4:	6830      	ldr	r0, [r6, #0]
 80177c6:	2101      	movs	r1, #1
 80177c8:	f000 fa68 	bl	8017c9c <ui_comp_get_child>
 80177cc:	49a9      	ldr	r1, [pc, #676]	; (8017a74 <ui_SetTime_screen_init+0x2ec>)
 80177ce:	f7fe fcf1 	bl	80161b4 <lv_label_set_text>

    ui_Set_Hours = lv_label_create(ui_SetTime);
 80177d2:	6828      	ldr	r0, [r5, #0]
 80177d4:	f7fe fce2 	bl	801619c <lv_label_create>
    lv_obj_set_width(ui_Set_Hours, LV_SIZE_CONTENT);   /// 1
 80177d8:	4ba7      	ldr	r3, [pc, #668]	; (8017a78 <ui_SetTime_screen_init+0x2f0>)
    ui_Set_Hours = lv_label_create(ui_SetTime);
 80177da:	4ca8      	ldr	r4, [pc, #672]	; (8017a7c <ui_SetTime_screen_init+0x2f4>)
    lv_obj_set_width(ui_Set_Hours, LV_SIZE_CONTENT);   /// 1
 80177dc:	4698      	mov	r8, r3
 80177de:	0019      	movs	r1, r3
    ui_Set_Hours = lv_label_create(ui_SetTime);
 80177e0:	6020      	str	r0, [r4, #0]
    lv_obj_set_width(ui_Set_Hours, LV_SIZE_CONTENT);   /// 1
 80177e2:	f7ee fa11 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_height(ui_Set_Hours, LV_SIZE_CONTENT);    /// 1
 80177e6:	4641      	mov	r1, r8
 80177e8:	6820      	ldr	r0, [r4, #0]
 80177ea:	f7ee fa25 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_x(ui_Set_Hours, 44);
 80177ee:	6820      	ldr	r0, [r4, #0]
 80177f0:	212c      	movs	r1, #44	; 0x2c
 80177f2:	f7ee f9d9 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_Set_Hours, 52);
 80177f6:	6820      	ldr	r0, [r4, #0]
 80177f8:	2134      	movs	r1, #52	; 0x34
 80177fa:	f7ee f9ed 	bl	8005bd8 <lv_obj_set_y>
    lv_label_set_text(ui_Set_Hours, "Hours");
 80177fe:	6820      	ldr	r0, [r4, #0]
 8017800:	499f      	ldr	r1, [pc, #636]	; (8017a80 <ui_SetTime_screen_init+0x2f8>)
 8017802:	f7fe fcd7 	bl	80161b4 <lv_label_set_text>
    lv_obj_set_style_text_color(ui_Set_Hours, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 8017806:	2301      	movs	r3, #1
 8017808:	425b      	negs	r3, r3
 801780a:	1c19      	adds	r1, r3, #0
 801780c:	2200      	movs	r2, #0
 801780e:	6820      	ldr	r0, [r4, #0]
    r.full = (uint16_t)(((c & 0xF80000) >> 8) | ((c & 0xFC00) >> 5) | ((c & 0xFF) >> 3));
#else
    /* We want: rrrr rrrr GGGg gggg bbbb bbbb => gggb bbbb rrrr rGGG */
    r.full = (uint16_t)(((c & 0xF80000) >> 16) | ((c & 0xFC00) >> 13) | ((c & 0x1C00) << 3) | ((c & 0xF8) << 5));
#endif
    return r;
 8017810:	4699      	mov	r9, r3
 8017812:	f7f3 f8f1 	bl	800a9f8 <lv_obj_set_style_text_color>

    ui_Set_Minutes = lv_label_create(ui_SetTime);
 8017816:	6828      	ldr	r0, [r5, #0]
 8017818:	f7fe fcc0 	bl	801619c <lv_label_create>
 801781c:	4c99      	ldr	r4, [pc, #612]	; (8017a84 <ui_SetTime_screen_init+0x2fc>)
    lv_obj_set_width(ui_Set_Minutes, LV_SIZE_CONTENT);   /// 1
 801781e:	4641      	mov	r1, r8
    ui_Set_Minutes = lv_label_create(ui_SetTime);
 8017820:	6020      	str	r0, [r4, #0]
    lv_obj_set_width(ui_Set_Minutes, LV_SIZE_CONTENT);   /// 1
 8017822:	f7ee f9f1 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_height(ui_Set_Minutes, LV_SIZE_CONTENT);    /// 1
 8017826:	4641      	mov	r1, r8
 8017828:	6820      	ldr	r0, [r4, #0]
 801782a:	f7ee fa05 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_x(ui_Set_Minutes, -39);
 801782e:	2127      	movs	r1, #39	; 0x27
 8017830:	6820      	ldr	r0, [r4, #0]
 8017832:	4249      	negs	r1, r1
 8017834:	f7ee f9b8 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_Set_Minutes, 52);
 8017838:	6820      	ldr	r0, [r4, #0]
 801783a:	2134      	movs	r1, #52	; 0x34
 801783c:	f7ee f9cc 	bl	8005bd8 <lv_obj_set_y>
    lv_obj_set_align(ui_Set_Minutes, LV_ALIGN_TOP_RIGHT);
 8017840:	6820      	ldr	r0, [r4, #0]
 8017842:	2103      	movs	r1, #3
 8017844:	f7ee fa3e 	bl	8005cc4 <lv_obj_set_align>
    lv_label_set_text(ui_Set_Minutes, "Minutes");
 8017848:	6820      	ldr	r0, [r4, #0]
 801784a:	498f      	ldr	r1, [pc, #572]	; (8017a88 <ui_SetTime_screen_init+0x300>)
 801784c:	f7fe fcb2 	bl	80161b4 <lv_label_set_text>
    lv_obj_set_style_text_color(ui_Set_Minutes, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 8017850:	4649      	mov	r1, r9
 8017852:	2200      	movs	r2, #0
 8017854:	6820      	ldr	r0, [r4, #0]
 8017856:	f7f3 f8cf 	bl	800a9f8 <lv_obj_set_style_text_color>

    ui_Roller_Hour = ui_Roller_create(ui_SetTime);
 801785a:	6828      	ldr	r0, [r5, #0]
 801785c:	f000 fda6 	bl	80183ac <ui_Roller_create>
 8017860:	4c8a      	ldr	r4, [pc, #552]	; (8017a8c <ui_SetTime_screen_init+0x304>)
    lv_roller_set_options(ui_Roller_Hour,
 8017862:	2200      	movs	r2, #0
 8017864:	498a      	ldr	r1, [pc, #552]	; (8017a90 <ui_SetTime_screen_init+0x308>)
    ui_Roller_Hour = ui_Roller_create(ui_SetTime);
 8017866:	6020      	str	r0, [r4, #0]
    lv_roller_set_options(ui_Roller_Hour,
 8017868:	f7fe ffb0 	bl	80167cc <lv_roller_set_options>
                          "01\n02\n03\n04\n05\n06\n07\n08\n09\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24",
                          0);
    lv_obj_set_height(ui_Roller_Hour, 85);
 801786c:	6820      	ldr	r0, [r4, #0]
 801786e:	2155      	movs	r1, #85	; 0x55
 8017870:	f7ee f9e2 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_width(ui_Roller_Hour, lv_pct(30));
 8017874:	4b87      	ldr	r3, [pc, #540]	; (8017a94 <ui_SetTime_screen_init+0x30c>)
 8017876:	6820      	ldr	r0, [r4, #0]
 8017878:	0019      	movs	r1, r3
 801787a:	4698      	mov	r8, r3
 801787c:	f7ee f9c4 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_x(ui_Roller_Hour, 30);
 8017880:	6820      	ldr	r0, [r4, #0]
 8017882:	211e      	movs	r1, #30
 8017884:	f7ee f990 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_Roller_Hour, 70);
 8017888:	6820      	ldr	r0, [r4, #0]
 801788a:	2146      	movs	r1, #70	; 0x46
 801788c:	f7ee f9a4 	bl	8005bd8 <lv_obj_set_y>
    lv_obj_set_align(ui_Roller_Hour, LV_ALIGN_TOP_LEFT);
 8017890:	2101      	movs	r1, #1
 8017892:	6820      	ldr	r0, [r4, #0]
 8017894:	f7ee fa16 	bl	8005cc4 <lv_obj_set_align>

    ui_Roller_Minute = ui_Roller_create(ui_SetTime);
 8017898:	6828      	ldr	r0, [r5, #0]
 801789a:	f000 fd87 	bl	80183ac <ui_Roller_create>
 801789e:	4c7e      	ldr	r4, [pc, #504]	; (8017a98 <ui_SetTime_screen_init+0x310>)
    lv_roller_set_options(ui_Roller_Minute,
 80178a0:	2200      	movs	r2, #0
 80178a2:	497e      	ldr	r1, [pc, #504]	; (8017a9c <ui_SetTime_screen_init+0x314>)
    ui_Roller_Minute = ui_Roller_create(ui_SetTime);
 80178a4:	6020      	str	r0, [r4, #0]
    lv_roller_set_options(ui_Roller_Minute,
 80178a6:	f7fe ff91 	bl	80167cc <lv_roller_set_options>
                          "01\n02\n03\n04\n05\n06\n07\n08\n09\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59",
                          0);
    lv_obj_set_height(ui_Roller_Minute, 85);
 80178aa:	6820      	ldr	r0, [r4, #0]
 80178ac:	2155      	movs	r1, #85	; 0x55
 80178ae:	f7ee f9c3 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_width(ui_Roller_Minute, lv_pct(30));
 80178b2:	4641      	mov	r1, r8
 80178b4:	6820      	ldr	r0, [r4, #0]
 80178b6:	f7ee f9a7 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_x(ui_Roller_Minute, -30);
 80178ba:	211e      	movs	r1, #30
 80178bc:	6820      	ldr	r0, [r4, #0]
 80178be:	4249      	negs	r1, r1
 80178c0:	f7ee f972 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_Roller_Minute, 70);
 80178c4:	6820      	ldr	r0, [r4, #0]
 80178c6:	2146      	movs	r1, #70	; 0x46
 80178c8:	f7ee f986 	bl	8005bd8 <lv_obj_set_y>
    lv_obj_set_align(ui_Roller_Minute, LV_ALIGN_TOP_RIGHT);
 80178cc:	2103      	movs	r1, #3
 80178ce:	6820      	ldr	r0, [r4, #0]
 80178d0:	f7ee f9f8 	bl	8005cc4 <lv_obj_set_align>

    ui_List_Switch5 = ui_List_Switch_create(ui_SetTime);
 80178d4:	6828      	ldr	r0, [r5, #0]
 80178d6:	f000 fc5f 	bl	8018198 <ui_List_Switch_create>
 80178da:	4c71      	ldr	r4, [pc, #452]	; (8017aa0 <ui_SetTime_screen_init+0x318>)
    lv_obj_set_height(ui_List_Switch5, 78);
 80178dc:	214e      	movs	r1, #78	; 0x4e
    ui_List_Switch5 = ui_List_Switch_create(ui_SetTime);
 80178de:	6020      	str	r0, [r4, #0]
    lv_obj_set_height(ui_List_Switch5, 78);
 80178e0:	f7ee f9aa 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_width(ui_List_Switch5, lv_pct(100));
 80178e4:	4b6f      	ldr	r3, [pc, #444]	; (8017aa4 <ui_SetTime_screen_init+0x31c>)
 80178e6:	6820      	ldr	r0, [r4, #0]
 80178e8:	0019      	movs	r1, r3
 80178ea:	4698      	mov	r8, r3
 80178ec:	f7ee f98c 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_x(ui_List_Switch5, 0);
 80178f0:	6820      	ldr	r0, [r4, #0]
 80178f2:	2100      	movs	r1, #0
 80178f4:	f7ee f958 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_List_Switch5, 172);
 80178f8:	6820      	ldr	r0, [r4, #0]
 80178fa:	21ac      	movs	r1, #172	; 0xac
 80178fc:	f7ee f96c 	bl	8005bd8 <lv_obj_set_y>
    lv_obj_set_style_border_side(ui_List_Switch5, LV_BORDER_SIDE_TOP, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017900:	6820      	ldr	r0, [r4, #0]
 8017902:	2200      	movs	r2, #0
 8017904:	2102      	movs	r1, #2
 8017906:	f7f3 f853 	bl	800a9b0 <lv_obj_set_style_border_side>
    lv_obj_set_style_pad_left(ui_List_Switch5, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801790a:	6820      	ldr	r0, [r4, #0]
 801790c:	2200      	movs	r2, #0
 801790e:	210a      	movs	r1, #10
 8017910:	f7f2 fff2 	bl	800a8f8 <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(ui_List_Switch5, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017914:	6820      	ldr	r0, [r4, #0]
 8017916:	2200      	movs	r2, #0
 8017918:	210a      	movs	r1, #10
 801791a:	f7f2 fff5 	bl	800a908 <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(ui_List_Switch5, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 801791e:	6820      	ldr	r0, [r4, #0]
 8017920:	2200      	movs	r2, #0
 8017922:	210a      	movs	r1, #10
 8017924:	f7f2 ffd8 	bl	800a8d8 <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(ui_List_Switch5, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017928:	2200      	movs	r2, #0
 801792a:	6820      	ldr	r0, [r4, #0]
 801792c:	210a      	movs	r1, #10
 801792e:	f7f2 ffdb 	bl	800a8e8 <lv_obj_set_style_pad_bottom>

    lv_obj_set_align(ui_comp_get_child(ui_List_Switch5, UI_COMP_LIST_SWITCH_LIST_TEXT), LV_ALIGN_TOP_LEFT);
 8017932:	2101      	movs	r1, #1
 8017934:	6820      	ldr	r0, [r4, #0]
 8017936:	f000 f9b1 	bl	8017c9c <ui_comp_get_child>
 801793a:	2101      	movs	r1, #1
 801793c:	f7ee f9c2 	bl	8005cc4 <lv_obj_set_align>
    lv_label_set_text(ui_comp_get_child(ui_List_Switch5, UI_COMP_LIST_SWITCH_LIST_TEXT), "Timezone");
 8017940:	2101      	movs	r1, #1
 8017942:	6820      	ldr	r0, [r4, #0]
 8017944:	f000 f9aa 	bl	8017c9c <ui_comp_get_child>
 8017948:	4957      	ldr	r1, [pc, #348]	; (8017aa8 <ui_SetTime_screen_init+0x320>)
 801794a:	f7fe fc33 	bl	80161b4 <lv_label_set_text>

    lv_obj_add_flag(ui_comp_get_child(ui_List_Switch5, UI_COMP_LIST_SWITCH_SWITCH1),
 801794e:	2102      	movs	r1, #2
 8017950:	6820      	ldr	r0, [r4, #0]
 8017952:	f000 f9a3 	bl	8017c9c <ui_comp_get_child>
 8017956:	2103      	movs	r1, #3
 8017958:	f7ed fae2 	bl	8004f20 <lv_obj_add_flag>
                    LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_CLICKABLE);    /// Flags

    ui_Dropdown2 = lv_dropdown_create(ui_List_Switch5);
 801795c:	6820      	ldr	r0, [r4, #0]
 801795e:	f7fc fd27 	bl	80143b0 <lv_dropdown_create>
 8017962:	4c52      	ldr	r4, [pc, #328]	; (8017aac <ui_SetTime_screen_init+0x324>)
    lv_dropdown_set_options(ui_Dropdown2,
 8017964:	4952      	ldr	r1, [pc, #328]	; (8017ab0 <ui_SetTime_screen_init+0x328>)
    ui_Dropdown2 = lv_dropdown_create(ui_List_Switch5);
 8017966:	6020      	str	r0, [r4, #0]
    lv_dropdown_set_options(ui_Dropdown2,
 8017968:	f7fc fd2e 	bl	80143c8 <lv_dropdown_set_options>
                            "China\nNepal\nIndia\nCrimea\nSpain\nVenezuela\nSamoa\nUSA\nCanada\nSudan\nIran\nNew Zealand\nAustralia");
    lv_obj_set_height(ui_Dropdown2, 26);
 801796c:	6820      	ldr	r0, [r4, #0]
 801796e:	211a      	movs	r1, #26
 8017970:	f7ee f962 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_width(ui_Dropdown2, lv_pct(100));
 8017974:	4641      	mov	r1, r8
 8017976:	6820      	ldr	r0, [r4, #0]
 8017978:	f7ee f946 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_x(ui_Dropdown2, 0);
 801797c:	6820      	ldr	r0, [r4, #0]
 801797e:	2100      	movs	r1, #0
 8017980:	f7ee f912 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_Dropdown2, 27);
 8017984:	6820      	ldr	r0, [r4, #0]
 8017986:	211b      	movs	r1, #27
 8017988:	f7ee f926 	bl	8005bd8 <lv_obj_set_y>
    lv_obj_add_flag(ui_Dropdown2, LV_OBJ_FLAG_SCROLL_ON_FOCUS);     /// Flags
 801798c:	2180      	movs	r1, #128	; 0x80
 801798e:	6820      	ldr	r0, [r4, #0]
 8017990:	00c9      	lsls	r1, r1, #3
 8017992:	f7ed fac5 	bl	8004f20 <lv_obj_add_flag>
    lv_obj_set_style_text_color(ui_Dropdown2, lv_color_hex(0x181C29), LV_PART_MAIN | LV_STATE_DEFAULT);
 8017996:	6820      	ldr	r0, [r4, #0]
 8017998:	1c39      	adds	r1, r7, #0
 801799a:	2200      	movs	r2, #0
 801799c:	f7f3 f82c 	bl	800a9f8 <lv_obj_set_style_text_color>
    lv_obj_set_style_text_opa(ui_Dropdown2, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 80179a0:	6820      	ldr	r0, [r4, #0]
 80179a2:	2200      	movs	r2, #0
 80179a4:	21ff      	movs	r1, #255	; 0xff
 80179a6:	f7f3 f833 	bl	800aa10 <lv_obj_set_style_text_opa>
    lv_obj_set_style_pad_left(ui_Dropdown2, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 80179aa:	6820      	ldr	r0, [r4, #0]
 80179ac:	2200      	movs	r2, #0
 80179ae:	2105      	movs	r1, #5
 80179b0:	f7f2 ffa2 	bl	800a8f8 <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(ui_Dropdown2, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 80179b4:	6820      	ldr	r0, [r4, #0]
 80179b6:	2200      	movs	r2, #0
 80179b8:	2105      	movs	r1, #5
 80179ba:	f7f2 ffa5 	bl	800a908 <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(ui_Dropdown2, 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 80179be:	6820      	ldr	r0, [r4, #0]
 80179c0:	2200      	movs	r2, #0
 80179c2:	2105      	movs	r1, #5
 80179c4:	f7f2 ff88 	bl	800a8d8 <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(ui_Dropdown2, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 80179c8:	6820      	ldr	r0, [r4, #0]
 80179ca:	2200      	movs	r2, #0
 80179cc:	2100      	movs	r1, #0
 80179ce:	f7f2 ff8b 	bl	800a8e8 <lv_obj_set_style_pad_bottom>

    lv_obj_set_style_outline_color(ui_Dropdown2, lv_color_hex(0xe0a721), LV_PART_MAIN | LV_STATE_FOCUSED);
 80179d2:	4b38      	ldr	r3, [pc, #224]	; (8017ab4 <ui_SetTime_screen_init+0x32c>)
 80179d4:	6820      	ldr	r0, [r4, #0]
 80179d6:	1c19      	adds	r1, r3, #0
 80179d8:	2202      	movs	r2, #2
 80179da:	f7f2 fff9 	bl	800a9d0 <lv_obj_set_style_outline_color>
    lv_obj_set_style_outline_width(ui_Dropdown2, 2, LV_PART_MAIN | LV_STATE_FOCUSED);
 80179de:	6820      	ldr	r0, [r4, #0]
 80179e0:	2202      	movs	r2, #2
 80179e2:	2102      	movs	r1, #2
 80179e4:	f7f2 ffec 	bl	800a9c0 <lv_obj_set_style_outline_width>
    lv_obj_set_style_outline_pad(ui_Dropdown2, 3, LV_PART_MAIN | LV_STATE_FOCUSED);
 80179e8:	2202      	movs	r2, #2
 80179ea:	2103      	movs	r1, #3
 80179ec:	6820      	ldr	r0, [r4, #0]
 80179ee:	f7f2 fffb 	bl	800a9e8 <lv_obj_set_style_outline_pad>

    lv_obj_set_style_text_color(lv_dropdown_get_list(ui_Dropdown2), lv_color_hex(0x181C29), LV_PART_MAIN | LV_STATE_DEFAULT);
 80179f2:	6820      	ldr	r0, [r4, #0]
 80179f4:	f7fc fd3c 	bl	8014470 <lv_dropdown_get_list>
 80179f8:	1c39      	adds	r1, r7, #0
 80179fa:	2200      	movs	r2, #0
 80179fc:	f7f2 fffc 	bl	800a9f8 <lv_obj_set_style_text_color>
    lv_obj_set_style_text_line_space(lv_dropdown_get_list(ui_Dropdown2), 8, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017a00:	6820      	ldr	r0, [r4, #0]
 8017a02:	f7fc fd35 	bl	8014470 <lv_dropdown_get_list>
 8017a06:	2200      	movs	r2, #0
 8017a08:	2108      	movs	r1, #8
 8017a0a:	f7f3 f811 	bl	800aa30 <lv_obj_set_style_text_line_space>
    lv_obj_set_style_pad_hor(lv_dropdown_get_list(ui_Dropdown2), 5, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017a0e:	6820      	ldr	r0, [r4, #0]
 8017a10:	f7fc fd2e 	bl	8014470 <lv_dropdown_get_list>
 8017a14:	0007      	movs	r7, r0
    lv_obj_set_style_pad_left(obj, value, selector);
 8017a16:	2200      	movs	r2, #0
 8017a18:	2105      	movs	r1, #5
 8017a1a:	f7f2 ff6d 	bl	800a8f8 <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(obj, value, selector);
 8017a1e:	2200      	movs	r2, #0
 8017a20:	2105      	movs	r1, #5
 8017a22:	0038      	movs	r0, r7
 8017a24:	f7f2 ff70 	bl	800a908 <lv_obj_set_style_pad_right>
    lv_obj_set_style_size(lv_dropdown_get_list(ui_Dropdown2), 3, LV_PART_SCROLLBAR);
 8017a28:	6820      	ldr	r0, [r4, #0]
 8017a2a:	f7fc fd21 	bl	8014470 <lv_dropdown_get_list>
    lv_obj_set_style_width(obj, value, selector);
 8017a2e:	2780      	movs	r7, #128	; 0x80
 8017a30:	0004      	movs	r4, r0
 8017a32:	027f      	lsls	r7, r7, #9
 8017a34:	003a      	movs	r2, r7
 8017a36:	2103      	movs	r1, #3
 8017a38:	f7f2 ff26 	bl	800a888 <lv_obj_set_style_width>
    lv_obj_set_style_height(obj, value, selector);
 8017a3c:	003a      	movs	r2, r7
 8017a3e:	0020      	movs	r0, r4
 8017a40:	2103      	movs	r1, #3
 8017a42:	f7f2 ff29 	bl	800a898 <lv_obj_set_style_height>

    lv_obj_add_event_cb(ui_Header_Sub1, ui_event_Header_Sub1_Back_Back,
 8017a46:	6830      	ldr	r0, [r6, #0]
 8017a48:	2300      	movs	r3, #0
 8017a4a:	2200      	movs	r2, #0
 8017a4c:	491a      	ldr	r1, [pc, #104]	; (8017ab8 <ui_SetTime_screen_init+0x330>)
 8017a4e:	f7ea f9e9 	bl	8001e24 <lv_obj_add_event_cb>
                        LV_EVENT_ALL, NULL);

    lv_obj_add_event_cb(ui_SetTime, ui_event_Clock, LV_EVENT_ALL, NULL);
 8017a52:	6828      	ldr	r0, [r5, #0]
 8017a54:	2300      	movs	r3, #0
 8017a56:	2200      	movs	r2, #0
 8017a58:	4918      	ldr	r1, [pc, #96]	; (8017abc <ui_SetTime_screen_init+0x334>)
 8017a5a:	f7ea f9e3 	bl	8001e24 <lv_obj_add_event_cb>

}
 8017a5e:	bcc0      	pop	{r6, r7}
 8017a60:	46b9      	mov	r9, r7
 8017a62:	46b0      	mov	r8, r6
 8017a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a66:	46c0      	nop			; (mov r8, r8)
 8017a68:	20007d10 	.word	0x20007d10
 8017a6c:	000018e5 	.word	0x000018e5
 8017a70:	20007ce0 	.word	0x20007ce0
 8017a74:	0801d650 	.word	0x0801d650
 8017a78:	000027d1 	.word	0x000027d1
 8017a7c:	20007d14 	.word	0x20007d14
 8017a80:	0801d69c 	.word	0x0801d69c
 8017a84:	20007d18 	.word	0x20007d18
 8017a88:	0801d6a4 	.word	0x0801d6a4
 8017a8c:	20007d08 	.word	0x20007d08
 8017a90:	0801d6ac 	.word	0x0801d6ac
 8017a94:	0000201e 	.word	0x0000201e
 8017a98:	20007d0c 	.word	0x20007d0c
 8017a9c:	0801d6f4 	.word	0x0801d6f4
 8017aa0:	20007cf8 	.word	0x20007cf8
 8017aa4:	00002064 	.word	0x00002064
 8017aa8:	0801d7a8 	.word	0x0801d7a8
 8017aac:	20007cd4 	.word	0x20007cd4
 8017ab0:	0801d7b4 	.word	0x0801d7b4
 8017ab4:	ffffe524 	.word	0xffffe524
 8017ab8:	08017399 	.word	0x08017399
 8017abc:	08017265 	.word	0x08017265

08017ac0 <ui_About_screen_init>:
void ui_About_screen_init(void)
{
 8017ac0:	b570      	push	{r4, r5, r6, lr}
    ui_About = lv_obj_create(NULL);
 8017ac2:	2000      	movs	r0, #0
 8017ac4:	f7ed fa20 	bl	8004f08 <lv_obj_create>
 8017ac8:	4d3a      	ldr	r5, [pc, #232]	; (8017bb4 <ui_About_screen_init+0xf4>)
    lv_obj_clear_flag(ui_About, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 8017aca:	2110      	movs	r1, #16
    ui_About = lv_obj_create(NULL);
 8017acc:	6028      	str	r0, [r5, #0]
    lv_obj_clear_flag(ui_About, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 8017ace:	f7ed fa63 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_set_style_bg_color(ui_About, lv_color_hex(0x181C29), LV_PART_MAIN | LV_STATE_DEFAULT);
 8017ad2:	4b39      	ldr	r3, [pc, #228]	; (8017bb8 <ui_About_screen_init+0xf8>)
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	1c19      	adds	r1, r3, #0
 8017ad8:	6828      	ldr	r0, [r5, #0]
 8017ada:	f7f2 ff1d 	bl	800a918 <lv_obj_set_style_bg_color>

    ui_Panel2 = lv_obj_create(ui_About);
 8017ade:	6828      	ldr	r0, [r5, #0]
 8017ae0:	f7ed fa12 	bl	8004f08 <lv_obj_create>
    lv_obj_set_height(ui_Panel2, 288);
 8017ae4:	2190      	movs	r1, #144	; 0x90
    ui_Panel2 = lv_obj_create(ui_About);
 8017ae6:	4c35      	ldr	r4, [pc, #212]	; (8017bbc <ui_About_screen_init+0xfc>)
    lv_obj_set_width(ui_Panel2, lv_pct(100));
 8017ae8:	4e35      	ldr	r6, [pc, #212]	; (8017bc0 <ui_About_screen_init+0x100>)
    lv_obj_set_height(ui_Panel2, 288);
 8017aea:	0049      	lsls	r1, r1, #1
    ui_Panel2 = lv_obj_create(ui_About);
 8017aec:	6020      	str	r0, [r4, #0]
    lv_obj_set_height(ui_Panel2, 288);
 8017aee:	f7ee f8a3 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_width(ui_Panel2, lv_pct(100));
 8017af2:	0031      	movs	r1, r6
 8017af4:	6820      	ldr	r0, [r4, #0]
 8017af6:	f7ee f887 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_align(ui_Panel2, LV_ALIGN_BOTTOM_MID);
 8017afa:	6820      	ldr	r0, [r4, #0]
 8017afc:	2105      	movs	r1, #5
 8017afe:	f7ee f8e1 	bl	8005cc4 <lv_obj_set_align>
    lv_obj_set_style_bg_opa(ui_Panel2, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017b02:	6820      	ldr	r0, [r4, #0]
 8017b04:	2200      	movs	r2, #0
 8017b06:	2100      	movs	r1, #0
 8017b08:	f7f2 ff12 	bl	800a930 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_pad_left(ui_Panel2, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017b0c:	6820      	ldr	r0, [r4, #0]
 8017b0e:	2200      	movs	r2, #0
 8017b10:	210a      	movs	r1, #10
 8017b12:	f7f2 fef1 	bl	800a8f8 <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(ui_Panel2, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017b16:	6820      	ldr	r0, [r4, #0]
 8017b18:	2200      	movs	r2, #0
 8017b1a:	210a      	movs	r1, #10
 8017b1c:	f7f2 fef4 	bl	800a908 <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(ui_Panel2, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017b20:	6820      	ldr	r0, [r4, #0]
 8017b22:	2200      	movs	r2, #0
 8017b24:	210a      	movs	r1, #10
 8017b26:	f7f2 fed7 	bl	800a8d8 <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(ui_Panel2, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017b2a:	2200      	movs	r2, #0
 8017b2c:	6820      	ldr	r0, [r4, #0]
 8017b2e:	210a      	movs	r1, #10
 8017b30:	f7f2 feda 	bl	800a8e8 <lv_obj_set_style_pad_bottom>
    lv_obj_clear_flag(ui_Panel2, LV_OBJ_FLAG_SCROLLABLE);
 8017b34:	2110      	movs	r1, #16
 8017b36:	6820      	ldr	r0, [r4, #0]
 8017b38:	f7ed fa2e 	bl	8004f98 <lv_obj_clear_flag>

    ui_Set_Minutes1 = lv_label_create(ui_Panel2);
 8017b3c:	6820      	ldr	r0, [r4, #0]
 8017b3e:	f7fe fb2d 	bl	801619c <lv_label_create>
 8017b42:	4c20      	ldr	r4, [pc, #128]	; (8017bc4 <ui_About_screen_init+0x104>)
    lv_obj_set_width(ui_Set_Minutes1, lv_pct(100));   /// 1
 8017b44:	0031      	movs	r1, r6
    ui_Set_Minutes1 = lv_label_create(ui_Panel2);
 8017b46:	6020      	str	r0, [r4, #0]
    lv_obj_set_width(ui_Set_Minutes1, lv_pct(100));   /// 1
 8017b48:	f7ee f85e 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_height(ui_Set_Minutes1, LV_SIZE_CONTENT);    /// 1
 8017b4c:	6820      	ldr	r0, [r4, #0]
 8017b4e:	491e      	ldr	r1, [pc, #120]	; (8017bc8 <ui_About_screen_init+0x108>)
 8017b50:	f7ee f872 	bl	8005c38 <lv_obj_set_height>
    lv_label_set_text(ui_Set_Minutes1, "A minimal demo to control an Air Conditioner using an STM32G071 with 128kB Flash and 36 kB RAM running at 64MHz. No external memory is used.\n\n"
 8017b54:	6820      	ldr	r0, [r4, #0]
 8017b56:	491d      	ldr	r1, [pc, #116]	; (8017bcc <ui_About_screen_init+0x10c>)
 8017b58:	f7fe fb2c 	bl	80161b4 <lv_label_set_text>
"The board has no touchpad therefore the UI can be navigated by a joystick. Up/down selects the previous/next widget, left/right changes the selected widget's value. On press the selected value is applied or a button widget is clicked.");
    lv_obj_set_style_text_color(ui_Set_Minutes1, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 8017b5c:	2101      	movs	r1, #1
 8017b5e:	6820      	ldr	r0, [r4, #0]
 8017b60:	2200      	movs	r2, #0
 8017b62:	4249      	negs	r1, r1
 8017b64:	f7f2 ff48 	bl	800a9f8 <lv_obj_set_style_text_color>
    lv_obj_set_style_text_opa(ui_Set_Minutes1, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017b68:	2200      	movs	r2, #0
 8017b6a:	21ff      	movs	r1, #255	; 0xff
 8017b6c:	6820      	ldr	r0, [r4, #0]
 8017b6e:	f7f2 ff4f 	bl	800aa10 <lv_obj_set_style_text_opa>

    ui_Header_Sub2 = ui_Header_Sub_create(ui_About);
 8017b72:	6828      	ldr	r0, [r5, #0]
 8017b74:	f000 f94c 	bl	8017e10 <ui_Header_Sub_create>
 8017b78:	4c15      	ldr	r4, [pc, #84]	; (8017bd0 <ui_About_screen_init+0x110>)
    lv_obj_set_x(ui_Header_Sub2, 0);
 8017b7a:	2100      	movs	r1, #0
    ui_Header_Sub2 = ui_Header_Sub_create(ui_About);
 8017b7c:	6020      	str	r0, [r4, #0]
    lv_obj_set_x(ui_Header_Sub2, 0);
 8017b7e:	f7ee f813 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(ui_Header_Sub2, 0);
 8017b82:	6820      	ldr	r0, [r4, #0]
 8017b84:	2100      	movs	r1, #0
 8017b86:	f7ee f827 	bl	8005bd8 <lv_obj_set_y>

    lv_label_set_text(ui_comp_get_child(ui_Header_Sub2, UI_COMP_HEADER_SUB_LABEL1), "About");
 8017b8a:	2101      	movs	r1, #1
 8017b8c:	6820      	ldr	r0, [r4, #0]
 8017b8e:	f000 f885 	bl	8017c9c <ui_comp_get_child>
 8017b92:	4910      	ldr	r1, [pc, #64]	; (8017bd4 <ui_About_screen_init+0x114>)
 8017b94:	f7fe fb0e 	bl	80161b4 <lv_label_set_text>

    lv_obj_add_event_cb(ui_Header_Sub2, ui_event_Header_Sub2_Back_Back,
 8017b98:	2300      	movs	r3, #0
 8017b9a:	2200      	movs	r2, #0
 8017b9c:	6820      	ldr	r0, [r4, #0]
 8017b9e:	490e      	ldr	r1, [pc, #56]	; (8017bd8 <ui_About_screen_init+0x118>)
 8017ba0:	f7ea f940 	bl	8001e24 <lv_obj_add_event_cb>
                        LV_EVENT_ALL, NULL);

    lv_obj_add_event_cb(ui_About, ui_event_About, LV_EVENT_ALL, NULL);
 8017ba4:	6828      	ldr	r0, [r5, #0]
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	2200      	movs	r2, #0
 8017baa:	490c      	ldr	r1, [pc, #48]	; (8017bdc <ui_About_screen_init+0x11c>)
 8017bac:	f7ea f93a 	bl	8001e24 <lv_obj_add_event_cb>

}
 8017bb0:	bd70      	pop	{r4, r5, r6, pc}
 8017bb2:	46c0      	nop			; (mov r8, r8)
 8017bb4:	20007cbc 	.word	0x20007cbc
 8017bb8:	000018e5 	.word	0x000018e5
 8017bbc:	20007d00 	.word	0x20007d00
 8017bc0:	00002064 	.word	0x00002064
 8017bc4:	20007d1c 	.word	0x20007d1c
 8017bc8:	000027d1 	.word	0x000027d1
 8017bcc:	0801d810 	.word	0x0801d810
 8017bd0:	20007ce4 	.word	0x20007ce4
 8017bd4:	0801d65c 	.word	0x0801d65c
 8017bd8:	0801736d 	.word	0x0801736d
 8017bdc:	08017291 	.word	0x08017291

08017be0 <ui_init>:



void ui_init(void)
{
 8017be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017be2:	46c6      	mov	lr, r8
 8017be4:	b500      	push	{lr}
    LV_EVENT_GET_COMP_CHILD = lv_event_register_id();
 8017be6:	f7ea f8fd 	bl	8001de4 <lv_event_register_id>
 8017bea:	4b1c      	ldr	r3, [pc, #112]	; (8017c5c <ui_init+0x7c>)
 8017bec:	6018      	str	r0, [r3, #0]

    group_main = lv_group_create();
 8017bee:	f7ea fb8b 	bl	8002308 <lv_group_create>
 8017bf2:	4b1b      	ldr	r3, [pc, #108]	; (8017c60 <ui_init+0x80>)
 8017bf4:	4698      	mov	r8, r3
 8017bf6:	6018      	str	r0, [r3, #0]
    group_aircon = lv_group_create();
 8017bf8:	f7ea fb86 	bl	8002308 <lv_group_create>
 8017bfc:	4f19      	ldr	r7, [pc, #100]	; (8017c64 <ui_init+0x84>)
 8017bfe:	6038      	str	r0, [r7, #0]
    group_clock = lv_group_create();
 8017c00:	f7ea fb82 	bl	8002308 <lv_group_create>
 8017c04:	4e18      	ldr	r6, [pc, #96]	; (8017c68 <ui_init+0x88>)
 8017c06:	6030      	str	r0, [r6, #0]
    group_about = lv_group_create();
 8017c08:	f7ea fb7e 	bl	8002308 <lv_group_create>
 8017c0c:	4d17      	ldr	r5, [pc, #92]	; (8017c6c <ui_init+0x8c>)
 8017c0e:	6028      	str	r0, [r5, #0]

    lv_disp_t * dispp = lv_disp_get_default();
 8017c10:	f7f8 ffac 	bl	8010b6c <lv_disp_get_default>
 8017c14:	0004      	movs	r4, r0
    lv_theme_t * theme = lv_theme_basic_init(dispp);
 8017c16:	f7f8 faa1 	bl	801015c <lv_theme_basic_init>
 8017c1a:	0001      	movs	r1, r0
    lv_disp_set_theme(dispp, theme);
 8017c1c:	0020      	movs	r0, r4
 8017c1e:	f7e9 fde5 	bl	80017ec <lv_disp_set_theme>
    lv_group_set_default(group_main);
 8017c22:	4643      	mov	r3, r8
 8017c24:	6818      	ldr	r0, [r3, #0]
 8017c26:	f7ea fb87 	bl	8002338 <lv_group_set_default>
    ui_Menu_screen_init();
 8017c2a:	f7ff fbcb 	bl	80173c4 <ui_Menu_screen_init>
    lv_group_set_default(group_aircon);
 8017c2e:	6838      	ldr	r0, [r7, #0]
 8017c30:	f7ea fb82 	bl	8002338 <lv_group_set_default>
    ui_AirCon_screen_init();
 8017c34:	f7ff fc54 	bl	80174e0 <ui_AirCon_screen_init>
    lv_group_set_default(group_clock);
 8017c38:	6830      	ldr	r0, [r6, #0]
 8017c3a:	f7ea fb7d 	bl	8002338 <lv_group_set_default>
    ui_SetTime_screen_init();
 8017c3e:	f7ff fda3 	bl	8017788 <ui_SetTime_screen_init>
    lv_group_set_default(group_about);
 8017c42:	6828      	ldr	r0, [r5, #0]
 8017c44:	f7ea fb78 	bl	8002338 <lv_group_set_default>
    ui_About_screen_init();
 8017c48:	f7ff ff3a 	bl	8017ac0 <ui_About_screen_init>
    lv_disp_load_scr(ui_Menu);
 8017c4c:	4b08      	ldr	r3, [pc, #32]	; (8017c70 <ui_init+0x90>)
 8017c4e:	6818      	ldr	r0, [r3, #0]
 8017c50:	f7e9 ff82 	bl	8001b58 <lv_disp_load_scr>


}
 8017c54:	bc80      	pop	{r7}
 8017c56:	46b8      	mov	r8, r7
 8017c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c5a:	46c0      	nop			; (mov r8, r8)
 8017c5c:	20007d20 	.word	0x20007d20
 8017c60:	20007cb8 	.word	0x20007cb8
 8017c64:	20007cb0 	.word	0x20007cb0
 8017c68:	20007cb4 	.word	0x20007cb4
 8017c6c:	20007cac 	.word	0x20007cac
 8017c70:	20007cfc 	.word	0x20007cfc

08017c74 <get_component_child_event_cb>:
    lv_event_send(comp, LV_EVENT_GET_COMP_CHILD, &info);
    return info.child;
}

void get_component_child_event_cb(lv_event_t * e)
{
 8017c74:	b570      	push	{r4, r5, r6, lr}
 8017c76:	0004      	movs	r4, r0
    lv_obj_t ** c = lv_event_get_user_data(e);
 8017c78:	f7ea f8b2 	bl	8001de0 <lv_event_get_user_data>
 8017c7c:	0005      	movs	r5, r0
    ui_comp_get_child_t * info = lv_event_get_param(e);
 8017c7e:	0020      	movs	r0, r4
 8017c80:	f7ea f8ac 	bl	8001ddc <lv_event_get_param>
    info->child = c[info->child_idx];
 8017c84:	6803      	ldr	r3, [r0, #0]
 8017c86:	009b      	lsls	r3, r3, #2
 8017c88:	595b      	ldr	r3, [r3, r5]
 8017c8a:	6043      	str	r3, [r0, #4]
}
 8017c8c:	bd70      	pop	{r4, r5, r6, pc}
 8017c8e:	46c0      	nop			; (mov r8, r8)

08017c90 <del_component_child_event_cb>:

void del_component_child_event_cb(lv_event_t * e)
{
 8017c90:	b510      	push	{r4, lr}
    lv_obj_t ** c = lv_event_get_user_data(e);
 8017c92:	f7ea f8a5 	bl	8001de0 <lv_event_get_user_data>
    lv_mem_free(c);
 8017c96:	f7fa f9ab 	bl	8011ff0 <lv_mem_free>
}
 8017c9a:	bd10      	pop	{r4, pc}

08017c9c <ui_comp_get_child>:
    info.child = NULL;
 8017c9c:	2300      	movs	r3, #0
{
 8017c9e:	b500      	push	{lr}
 8017ca0:	b083      	sub	sp, #12
    info.child = NULL;
 8017ca2:	9301      	str	r3, [sp, #4]
    lv_event_send(comp, LV_EVENT_GET_COMP_CHILD, &info);
 8017ca4:	4b04      	ldr	r3, [pc, #16]	; (8017cb8 <ui_comp_get_child+0x1c>)
    info.child_idx = child_idx;
 8017ca6:	9100      	str	r1, [sp, #0]
    lv_event_send(comp, LV_EVENT_GET_COMP_CHILD, &info);
 8017ca8:	466a      	mov	r2, sp
 8017caa:	7819      	ldrb	r1, [r3, #0]
 8017cac:	f7ea f856 	bl	8001d5c <lv_event_send>
    return info.child;
 8017cb0:	9801      	ldr	r0, [sp, #4]
}
 8017cb2:	b003      	add	sp, #12
 8017cb4:	bd00      	pop	{pc}
 8017cb6:	46c0      	nop			; (mov r8, r8)
 8017cb8:	20007d20 	.word	0x20007d20

08017cbc <ui_Button_create>:


// COMPONENT Button

lv_obj_t * ui_Button_create(lv_obj_t * comp_parent)
{
 8017cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    lv_obj_t * cui_Button;
    cui_Button = lv_btn_create(comp_parent);
 8017cbe:	f7fc f893 	bl	8013de8 <lv_btn_create>
 8017cc2:	0004      	movs	r4, r0
    lv_obj_set_width(cui_Button, 160);
 8017cc4:	21a0      	movs	r1, #160	; 0xa0
 8017cc6:	f7ed ff9f 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_height(cui_Button, 81);
 8017cca:	0020      	movs	r0, r4
 8017ccc:	2151      	movs	r1, #81	; 0x51
 8017cce:	f7ed ffb3 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_x(cui_Button, 0);
 8017cd2:	0020      	movs	r0, r4
 8017cd4:	2100      	movs	r1, #0
 8017cd6:	f7ed ff67 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(cui_Button, 41);
 8017cda:	0020      	movs	r0, r4
 8017cdc:	2129      	movs	r1, #41	; 0x29
 8017cde:	f7ed ff7b 	bl	8005bd8 <lv_obj_set_y>
    lv_obj_set_align(cui_Button, LV_ALIGN_TOP_MID);
 8017ce2:	0020      	movs	r0, r4
 8017ce4:	2102      	movs	r1, #2
 8017ce6:	f7ed ffed 	bl	8005cc4 <lv_obj_set_align>
    lv_obj_clear_flag(cui_Button, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 8017cea:	0020      	movs	r0, r4
 8017cec:	2110      	movs	r1, #16
 8017cee:	f7ed f953 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_set_style_bg_color(cui_Button, lv_color_hex(0x20345A), LV_PART_MAIN | LV_STATE_DEFAULT);
 8017cf2:	4b3f      	ldr	r3, [pc, #252]	; (8017df0 <ui_Button_create+0x134>)
 8017cf4:	0020      	movs	r0, r4
 8017cf6:	1c19      	adds	r1, r3, #0
 8017cf8:	2200      	movs	r2, #0
 8017cfa:	f7f2 fe0d 	bl	800a918 <lv_obj_set_style_bg_color>
    lv_obj_set_style_bg_opa(cui_Button, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017cfe:	2200      	movs	r2, #0
 8017d00:	21ff      	movs	r1, #255	; 0xff
 8017d02:	0020      	movs	r0, r4
 8017d04:	f7f2 fe14 	bl	800a930 <lv_obj_set_style_bg_opa>

    lv_obj_t * cui_Button_Text;
    cui_Button_Text = lv_label_create(cui_Button);
 8017d08:	0020      	movs	r0, r4
 8017d0a:	f7fe fa47 	bl	801619c <lv_label_create>
 8017d0e:	0006      	movs	r6, r0
    lv_obj_set_width(cui_Button_Text, LV_SIZE_CONTENT);   /// 1
 8017d10:	4f38      	ldr	r7, [pc, #224]	; (8017df4 <ui_Button_create+0x138>)
 8017d12:	0039      	movs	r1, r7
 8017d14:	f7ed ff78 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_height(cui_Button_Text, LV_SIZE_CONTENT);    /// 1
 8017d18:	0030      	movs	r0, r6
 8017d1a:	0039      	movs	r1, r7
 8017d1c:	f7ed ff8c 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_x(cui_Button_Text, 0);
 8017d20:	0030      	movs	r0, r6
 8017d22:	2100      	movs	r1, #0
 8017d24:	f7ed ff40 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(cui_Button_Text, -8);
 8017d28:	2108      	movs	r1, #8
 8017d2a:	0030      	movs	r0, r6
 8017d2c:	4249      	negs	r1, r1
 8017d2e:	f7ed ff53 	bl	8005bd8 <lv_obj_set_y>
    lv_obj_set_align(cui_Button_Text, LV_ALIGN_BOTTOM_MID);
 8017d32:	0030      	movs	r0, r6
 8017d34:	2105      	movs	r1, #5
 8017d36:	f7ed ffc5 	bl	8005cc4 <lv_obj_set_align>
    lv_label_set_text(cui_Button_Text, "Air Conditioner");
 8017d3a:	0030      	movs	r0, r6
 8017d3c:	492e      	ldr	r1, [pc, #184]	; (8017df8 <ui_Button_create+0x13c>)
 8017d3e:	f7fe fa39 	bl	80161b4 <lv_label_set_text>
    lv_obj_set_style_text_color(cui_Button_Text, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 8017d42:	2101      	movs	r1, #1
 8017d44:	0030      	movs	r0, r6
 8017d46:	2200      	movs	r2, #0
 8017d48:	4249      	negs	r1, r1
 8017d4a:	f7f2 fe55 	bl	800a9f8 <lv_obj_set_style_text_color>
    lv_obj_set_style_text_opa(cui_Button_Text, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017d4e:	0030      	movs	r0, r6
 8017d50:	2200      	movs	r2, #0
 8017d52:	21ff      	movs	r1, #255	; 0xff
 8017d54:	f7f2 fe5c 	bl	800aa10 <lv_obj_set_style_text_opa>

    lv_obj_set_style_outline_color(cui_Button, lv_color_hex(0xe0a721), LV_PART_MAIN | LV_STATE_FOCUSED);
 8017d58:	4b28      	ldr	r3, [pc, #160]	; (8017dfc <ui_Button_create+0x140>)
 8017d5a:	0020      	movs	r0, r4
 8017d5c:	1c19      	adds	r1, r3, #0
 8017d5e:	2202      	movs	r2, #2
 8017d60:	f7f2 fe36 	bl	800a9d0 <lv_obj_set_style_outline_color>
    lv_obj_set_style_outline_width(cui_Button, 2, LV_PART_MAIN | LV_STATE_FOCUSED);
 8017d64:	0020      	movs	r0, r4
 8017d66:	2202      	movs	r2, #2
 8017d68:	2102      	movs	r1, #2
 8017d6a:	f7f2 fe29 	bl	800a9c0 <lv_obj_set_style_outline_width>
    lv_obj_set_style_outline_pad(cui_Button, 3, LV_PART_MAIN | LV_STATE_FOCUSED);
 8017d6e:	2202      	movs	r2, #2
 8017d70:	2103      	movs	r1, #3
 8017d72:	0020      	movs	r0, r4
 8017d74:	f7f2 fe38 	bl	800a9e8 <lv_obj_set_style_outline_pad>


    lv_obj_t * cui_Button_Image;
    cui_Button_Image = lv_img_create(cui_Button);
 8017d78:	0020      	movs	r0, r4
 8017d7a:	f7fc ff77 	bl	8014c6c <lv_img_create>
 8017d7e:	0005      	movs	r5, r0
    lv_img_set_src(cui_Button_Image, &ui_img_aircon_png);
 8017d80:	491f      	ldr	r1, [pc, #124]	; (8017e00 <ui_Button_create+0x144>)
 8017d82:	f7fc ff7f 	bl	8014c84 <lv_img_set_src>
    lv_obj_set_width(cui_Button_Image, LV_SIZE_CONTENT);   /// 1
 8017d86:	0028      	movs	r0, r5
 8017d88:	0039      	movs	r1, r7
 8017d8a:	f7ed ff3d 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_height(cui_Button_Image, LV_SIZE_CONTENT);    /// 1
 8017d8e:	0028      	movs	r0, r5
 8017d90:	0039      	movs	r1, r7
 8017d92:	f7ed ff51 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_x(cui_Button_Image, 0);
 8017d96:	0028      	movs	r0, r5
 8017d98:	2100      	movs	r1, #0
 8017d9a:	f7ed ff05 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(cui_Button_Image, -11);
 8017d9e:	210b      	movs	r1, #11
 8017da0:	0028      	movs	r0, r5
 8017da2:	4249      	negs	r1, r1
 8017da4:	f7ed ff18 	bl	8005bd8 <lv_obj_set_y>
    lv_obj_set_align(cui_Button_Image, LV_ALIGN_CENTER);
 8017da8:	0028      	movs	r0, r5
 8017daa:	2109      	movs	r1, #9
 8017dac:	f7ed ff8a 	bl	8005cc4 <lv_obj_set_align>
    lv_obj_add_flag(cui_Button_Image, LV_OBJ_FLAG_ADV_HITTEST);     /// Flags
 8017db0:	2180      	movs	r1, #128	; 0x80
 8017db2:	0028      	movs	r0, r5
 8017db4:	0249      	lsls	r1, r1, #9
 8017db6:	f7ed f8b3 	bl	8004f20 <lv_obj_add_flag>
    lv_obj_clear_flag(cui_Button_Image, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 8017dba:	0028      	movs	r0, r5
 8017dbc:	2110      	movs	r1, #16
 8017dbe:	f7ed f8eb 	bl	8004f98 <lv_obj_clear_flag>

    lv_obj_t ** children = lv_mem_alloc(sizeof(lv_obj_t *) * _UI_COMP_BUTTON_NUM);
 8017dc2:	201c      	movs	r0, #28
 8017dc4:	f7fa f8f2 	bl	8011fac <lv_mem_alloc>
 8017dc8:	0007      	movs	r7, r0
    children[UI_COMP_BUTTON_BUTTON] = cui_Button;
    children[UI_COMP_BUTTON_BUTTON_TEXT] = cui_Button_Text;
    children[UI_COMP_BUTTON_BUTTON_IMAGE] = cui_Button_Image;
    lv_obj_add_event_cb(cui_Button, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 8017dca:	4b0e      	ldr	r3, [pc, #56]	; (8017e04 <ui_Button_create+0x148>)
    children[UI_COMP_BUTTON_BUTTON_TEXT] = cui_Button_Text;
 8017dcc:	6146      	str	r6, [r0, #20]
    children[UI_COMP_BUTTON_BUTTON_IMAGE] = cui_Button_Image;
 8017dce:	6185      	str	r5, [r0, #24]
    lv_obj_add_event_cb(cui_Button, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 8017dd0:	781a      	ldrb	r2, [r3, #0]
    children[UI_COMP_BUTTON_BUTTON] = cui_Button;
 8017dd2:	6004      	str	r4, [r0, #0]
    lv_obj_add_event_cb(cui_Button, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 8017dd4:	0003      	movs	r3, r0
 8017dd6:	490c      	ldr	r1, [pc, #48]	; (8017e08 <ui_Button_create+0x14c>)
 8017dd8:	0020      	movs	r0, r4
 8017dda:	f7ea f823 	bl	8001e24 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(cui_Button, del_component_child_event_cb, LV_EVENT_DELETE, children);
 8017dde:	003b      	movs	r3, r7
 8017de0:	2221      	movs	r2, #33	; 0x21
 8017de2:	0020      	movs	r0, r4
 8017de4:	4909      	ldr	r1, [pc, #36]	; (8017e0c <ui_Button_create+0x150>)
 8017de6:	f7ea f81d 	bl	8001e24 <lv_obj_add_event_cb>
    return cui_Button;
}
 8017dea:	0020      	movs	r0, r4
 8017dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017dee:	46c0      	nop			; (mov r8, r8)
 8017df0:	000021ab 	.word	0x000021ab
 8017df4:	000027d1 	.word	0x000027d1
 8017df8:	0801d98c 	.word	0x0801d98c
 8017dfc:	ffffe524 	.word	0xffffe524
 8017e00:	0801d9cc 	.word	0x0801d9cc
 8017e04:	20007d20 	.word	0x20007d20
 8017e08:	08017c75 	.word	0x08017c75
 8017e0c:	08017c91 	.word	0x08017c91

08017e10 <ui_Header_Sub_create>:


// COMPONENT Header Sub

lv_obj_t * ui_Header_Sub_create(lv_obj_t * comp_parent)
{
 8017e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e12:	46c6      	mov	lr, r8
 8017e14:	b500      	push	{lr}

    lv_obj_t * cui_Header_Sub;
    cui_Header_Sub = lv_btn_create(comp_parent);
 8017e16:	f7fb ffe7 	bl	8013de8 <lv_btn_create>
 8017e1a:	0004      	movs	r4, r0
    lv_obj_set_height(cui_Header_Sub, 32);
 8017e1c:	2120      	movs	r1, #32
 8017e1e:	f7ed ff0b 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_width(cui_Header_Sub, lv_pct(100));
 8017e22:	0020      	movs	r0, r4
 8017e24:	4946      	ldr	r1, [pc, #280]	; (8017f40 <ui_Header_Sub_create+0x130>)
 8017e26:	f7ed feef 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_align(cui_Header_Sub, LV_ALIGN_TOP_MID);
 8017e2a:	0020      	movs	r0, r4
 8017e2c:	2102      	movs	r1, #2
 8017e2e:	f7ed ff49 	bl	8005cc4 <lv_obj_set_align>
    lv_obj_clear_flag(cui_Header_Sub, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 8017e32:	0020      	movs	r0, r4
 8017e34:	2110      	movs	r1, #16
 8017e36:	f7ed f8af 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_set_style_bg_color(cui_Header_Sub, lv_color_hex(0x20345A), LV_PART_MAIN | LV_STATE_DEFAULT);
 8017e3a:	4b42      	ldr	r3, [pc, #264]	; (8017f44 <ui_Header_Sub_create+0x134>)
 8017e3c:	0020      	movs	r0, r4
 8017e3e:	1c19      	adds	r1, r3, #0
 8017e40:	2200      	movs	r2, #0
 8017e42:	f7f2 fd69 	bl	800a918 <lv_obj_set_style_bg_color>
    lv_obj_set_style_bg_opa(cui_Header_Sub, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017e46:	0020      	movs	r0, r4
 8017e48:	2200      	movs	r2, #0
 8017e4a:	21ff      	movs	r1, #255	; 0xff
 8017e4c:	f7f2 fd70 	bl	800a930 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_pad_left(cui_Header_Sub, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017e50:	0020      	movs	r0, r4
 8017e52:	2200      	movs	r2, #0
 8017e54:	210a      	movs	r1, #10
 8017e56:	f7f2 fd4f 	bl	800a8f8 <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(cui_Header_Sub, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017e5a:	0020      	movs	r0, r4
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	210a      	movs	r1, #10
 8017e60:	f7f2 fd52 	bl	800a908 <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(cui_Header_Sub, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017e64:	0020      	movs	r0, r4
 8017e66:	2200      	movs	r2, #0
 8017e68:	2100      	movs	r1, #0
 8017e6a:	f7f2 fd35 	bl	800a8d8 <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(cui_Header_Sub, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017e6e:	0020      	movs	r0, r4
 8017e70:	2200      	movs	r2, #0
 8017e72:	2100      	movs	r1, #0
 8017e74:	f7f2 fd38 	bl	800a8e8 <lv_obj_set_style_pad_bottom>

    lv_obj_set_style_border_color(cui_Header_Sub, lv_color_hex(0xe0a721), LV_PART_MAIN | LV_STATE_FOCUSED);
 8017e78:	4b33      	ldr	r3, [pc, #204]	; (8017f48 <ui_Header_Sub_create+0x138>)
 8017e7a:	0020      	movs	r0, r4
 8017e7c:	1c19      	adds	r1, r3, #0
 8017e7e:	2202      	movs	r2, #2
 8017e80:	f7f2 fd82 	bl	800a988 <lv_obj_set_style_border_color>
    lv_obj_set_style_border_width(cui_Header_Sub, 2, LV_PART_MAIN | LV_STATE_FOCUSED);
 8017e84:	2202      	movs	r2, #2
 8017e86:	2102      	movs	r1, #2
 8017e88:	0020      	movs	r0, r4
 8017e8a:	f7f2 fd89 	bl	800a9a0 <lv_obj_set_style_border_width>


    lv_obj_t * cui_Label1;
    cui_Label1 = lv_label_create(cui_Header_Sub);
 8017e8e:	0020      	movs	r0, r4
 8017e90:	f7fe f984 	bl	801619c <lv_label_create>
 8017e94:	0006      	movs	r6, r0
    lv_obj_set_width(cui_Label1, LV_SIZE_CONTENT);   /// 1
 8017e96:	4f2d      	ldr	r7, [pc, #180]	; (8017f4c <ui_Header_Sub_create+0x13c>)
 8017e98:	0039      	movs	r1, r7
 8017e9a:	f7ed feb5 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_height(cui_Label1, LV_SIZE_CONTENT);    /// 1
 8017e9e:	0030      	movs	r0, r6
 8017ea0:	0039      	movs	r1, r7
 8017ea2:	f7ed fec9 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_align(cui_Label1, LV_ALIGN_CENTER);
 8017ea6:	0030      	movs	r0, r6
 8017ea8:	2109      	movs	r1, #9
 8017eaa:	f7ed ff0b 	bl	8005cc4 <lv_obj_set_align>
    lv_label_set_text(cui_Label1, "Air Conditioner");
 8017eae:	0030      	movs	r0, r6
 8017eb0:	4927      	ldr	r1, [pc, #156]	; (8017f50 <ui_Header_Sub_create+0x140>)
 8017eb2:	f7fe f97f 	bl	80161b4 <lv_label_set_text>
 8017eb6:	2301      	movs	r3, #1
 8017eb8:	425b      	negs	r3, r3
    lv_obj_set_style_text_color(cui_Label1, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 8017eba:	1c19      	adds	r1, r3, #0
 8017ebc:	0030      	movs	r0, r6
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	4698      	mov	r8, r3
 8017ec2:	f7f2 fd99 	bl	800a9f8 <lv_obj_set_style_text_color>
    lv_obj_set_style_text_opa(cui_Label1, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	0030      	movs	r0, r6
 8017eca:	21ff      	movs	r1, #255	; 0xff
 8017ecc:	f7f2 fda0 	bl	800aa10 <lv_obj_set_style_text_opa>

    lv_obj_t * cui_Back;
    cui_Back = lv_img_create(cui_Header_Sub);
 8017ed0:	0020      	movs	r0, r4
 8017ed2:	f7fc fecb 	bl	8014c6c <lv_img_create>
 8017ed6:	0005      	movs	r5, r0
    lv_img_set_src(cui_Back, LV_SYMBOL_LEFT);
 8017ed8:	491e      	ldr	r1, [pc, #120]	; (8017f54 <ui_Header_Sub_create+0x144>)
 8017eda:	f7fc fed3 	bl	8014c84 <lv_img_set_src>
    lv_obj_set_width(cui_Back, LV_SIZE_CONTENT);   /// 1
 8017ede:	0028      	movs	r0, r5
 8017ee0:	0039      	movs	r1, r7
 8017ee2:	f7ed fe91 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_height(cui_Back, LV_SIZE_CONTENT);    /// 1
 8017ee6:	0028      	movs	r0, r5
 8017ee8:	0039      	movs	r1, r7
 8017eea:	f7ed fea5 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_align(cui_Back, LV_ALIGN_LEFT_MID);
 8017eee:	0028      	movs	r0, r5
 8017ef0:	2107      	movs	r1, #7
 8017ef2:	f7ed fee7 	bl	8005cc4 <lv_obj_set_align>
    lv_obj_add_flag(cui_Back, LV_OBJ_FLAG_CLICKABLE | LV_OBJ_FLAG_ADV_HITTEST);     /// Flags
 8017ef6:	0028      	movs	r0, r5
 8017ef8:	4917      	ldr	r1, [pc, #92]	; (8017f58 <ui_Header_Sub_create+0x148>)
 8017efa:	f7ed f811 	bl	8004f20 <lv_obj_add_flag>
    lv_obj_clear_flag(cui_Back, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 8017efe:	0028      	movs	r0, r5
 8017f00:	2110      	movs	r1, #16
 8017f02:	f7ed f849 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_set_style_text_color(cui_Back, lv_color_hex(0xFFFFFF), 0);
 8017f06:	4641      	mov	r1, r8
 8017f08:	0028      	movs	r0, r5
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	f7f2 fd74 	bl	800a9f8 <lv_obj_set_style_text_color>

    lv_obj_t ** children = lv_mem_alloc(sizeof(lv_obj_t *) * _UI_COMP_HEADER_SUB_NUM);
 8017f10:	200c      	movs	r0, #12
 8017f12:	f7fa f84b 	bl	8011fac <lv_mem_alloc>
 8017f16:	0007      	movs	r7, r0
    children[UI_COMP_HEADER_SUB_HEADER_SUB] = cui_Header_Sub;
    children[UI_COMP_HEADER_SUB_LABEL1] = cui_Label1;
    children[UI_COMP_HEADER_SUB_BACK] = cui_Back;
    lv_obj_add_event_cb(cui_Header_Sub, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 8017f18:	4b10      	ldr	r3, [pc, #64]	; (8017f5c <ui_Header_Sub_create+0x14c>)
    children[UI_COMP_HEADER_SUB_LABEL1] = cui_Label1;
 8017f1a:	6046      	str	r6, [r0, #4]
    children[UI_COMP_HEADER_SUB_BACK] = cui_Back;
 8017f1c:	6085      	str	r5, [r0, #8]
    lv_obj_add_event_cb(cui_Header_Sub, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 8017f1e:	781a      	ldrb	r2, [r3, #0]
    children[UI_COMP_HEADER_SUB_HEADER_SUB] = cui_Header_Sub;
 8017f20:	6004      	str	r4, [r0, #0]
    lv_obj_add_event_cb(cui_Header_Sub, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 8017f22:	0003      	movs	r3, r0
 8017f24:	490e      	ldr	r1, [pc, #56]	; (8017f60 <ui_Header_Sub_create+0x150>)
 8017f26:	0020      	movs	r0, r4
 8017f28:	f7e9 ff7c 	bl	8001e24 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(cui_Header_Sub, del_component_child_event_cb, LV_EVENT_DELETE, children);
 8017f2c:	003b      	movs	r3, r7
 8017f2e:	2221      	movs	r2, #33	; 0x21
 8017f30:	0020      	movs	r0, r4
 8017f32:	490c      	ldr	r1, [pc, #48]	; (8017f64 <ui_Header_Sub_create+0x154>)
 8017f34:	f7e9 ff76 	bl	8001e24 <lv_obj_add_event_cb>
    return cui_Header_Sub;
}
 8017f38:	0020      	movs	r0, r4
 8017f3a:	bc80      	pop	{r7}
 8017f3c:	46b8      	mov	r8, r7
 8017f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f40:	00002064 	.word	0x00002064
 8017f44:	000021ab 	.word	0x000021ab
 8017f48:	ffffe524 	.word	0xffffe524
 8017f4c:	000027d1 	.word	0x000027d1
 8017f50:	0801d98c 	.word	0x0801d98c
 8017f54:	0801d99c 	.word	0x0801d99c
 8017f58:	00010002 	.word	0x00010002
 8017f5c:	20007d20 	.word	0x20007d20
 8017f60:	08017c75 	.word	0x08017c75
 8017f64:	08017c91 	.word	0x08017c91

08017f68 <ui_Header_create>:


// COMPONENT Header

lv_obj_t * ui_Header_create(lv_obj_t * comp_parent)
{
 8017f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f6a:	46de      	mov	lr, fp
 8017f6c:	4657      	mov	r7, sl
 8017f6e:	464e      	mov	r6, r9
 8017f70:	4645      	mov	r5, r8
 8017f72:	b5e0      	push	{r5, r6, r7, lr}

    lv_obj_t * cui_Header;
    cui_Header = lv_obj_create(comp_parent);
 8017f74:	f7ec ffc8 	bl	8004f08 <lv_obj_create>
 8017f78:	0004      	movs	r4, r0
    lv_obj_set_height(cui_Header, 26);
 8017f7a:	211a      	movs	r1, #26
 8017f7c:	f7ed fe5c 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_width(cui_Header, lv_pct(100));
 8017f80:	0020      	movs	r0, r4
 8017f82:	497a      	ldr	r1, [pc, #488]	; (801816c <ui_Header_create+0x204>)
 8017f84:	f7ed fe40 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_align(cui_Header, LV_ALIGN_TOP_MID);
 8017f88:	0020      	movs	r0, r4
 8017f8a:	2102      	movs	r1, #2
 8017f8c:	f7ed fe9a 	bl	8005cc4 <lv_obj_set_align>
    lv_obj_add_flag(cui_Header, LV_OBJ_FLAG_FLOATING);     /// Flags
 8017f90:	2180      	movs	r1, #128	; 0x80
 8017f92:	0020      	movs	r0, r4
 8017f94:	02c9      	lsls	r1, r1, #11
 8017f96:	f7ec ffc3 	bl	8004f20 <lv_obj_add_flag>
    lv_obj_clear_flag(cui_Header, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 8017f9a:	0020      	movs	r0, r4
 8017f9c:	2110      	movs	r1, #16
 8017f9e:	f7ec fffb 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_set_style_bg_color(cui_Header, lv_color_hex(0x233458), LV_PART_MAIN | LV_STATE_DEFAULT);
 8017fa2:	4b73      	ldr	r3, [pc, #460]	; (8018170 <ui_Header_create+0x208>)
 8017fa4:	0020      	movs	r0, r4
 8017fa6:	1c19      	adds	r1, r3, #0
 8017fa8:	2200      	movs	r2, #0
 8017faa:	f7f2 fcb5 	bl	800a918 <lv_obj_set_style_bg_color>
    lv_obj_set_style_bg_opa(cui_Header, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017fae:	0020      	movs	r0, r4
 8017fb0:	2200      	movs	r2, #0
 8017fb2:	21ff      	movs	r1, #255	; 0xff
 8017fb4:	f7f2 fcbc 	bl	800a930 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_pad_left(cui_Header, 4, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017fb8:	0020      	movs	r0, r4
 8017fba:	2200      	movs	r2, #0
 8017fbc:	2104      	movs	r1, #4
 8017fbe:	f7f2 fc9b 	bl	800a8f8 <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(cui_Header, 4, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017fc2:	0020      	movs	r0, r4
 8017fc4:	2200      	movs	r2, #0
 8017fc6:	2104      	movs	r1, #4
 8017fc8:	f7f2 fc9e 	bl	800a908 <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(cui_Header, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017fcc:	0020      	movs	r0, r4
 8017fce:	2200      	movs	r2, #0
 8017fd0:	2100      	movs	r1, #0
 8017fd2:	f7f2 fc81 	bl	800a8d8 <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(cui_Header, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 8017fd6:	2200      	movs	r2, #0
 8017fd8:	2100      	movs	r1, #0
 8017fda:	0020      	movs	r0, r4
 8017fdc:	f7f2 fc84 	bl	800a8e8 <lv_obj_set_style_pad_bottom>

    lv_obj_t * cui_Battery;
    cui_Battery = lv_img_create(cui_Header);
 8017fe0:	0020      	movs	r0, r4
 8017fe2:	f7fc fe43 	bl	8014c6c <lv_img_create>
 8017fe6:	4682      	mov	sl, r0
    lv_img_set_src(cui_Battery, &ui_img_battery_png);
    lv_obj_set_width(cui_Battery, LV_SIZE_CONTENT);   /// 89
 8017fe8:	4f62      	ldr	r7, [pc, #392]	; (8018174 <ui_Header_create+0x20c>)
    lv_img_set_src(cui_Battery, &ui_img_battery_png);
 8017fea:	4963      	ldr	r1, [pc, #396]	; (8018178 <ui_Header_create+0x210>)
 8017fec:	f7fc fe4a 	bl	8014c84 <lv_img_set_src>
    lv_obj_set_width(cui_Battery, LV_SIZE_CONTENT);   /// 89
 8017ff0:	4650      	mov	r0, sl
 8017ff2:	0039      	movs	r1, r7
 8017ff4:	f7ed fe08 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_height(cui_Battery, LV_SIZE_CONTENT);    /// 14
 8017ff8:	4650      	mov	r0, sl
 8017ffa:	0039      	movs	r1, r7
 8017ffc:	f7ed fe1c 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_align(cui_Battery, LV_ALIGN_RIGHT_MID);
 8018000:	4650      	mov	r0, sl
 8018002:	2108      	movs	r1, #8
 8018004:	f7ed fe5e 	bl	8005cc4 <lv_obj_set_align>
    lv_obj_add_flag(cui_Battery, LV_OBJ_FLAG_ADV_HITTEST);     /// Flags
 8018008:	2380      	movs	r3, #128	; 0x80
 801800a:	025b      	lsls	r3, r3, #9
 801800c:	0019      	movs	r1, r3
 801800e:	4650      	mov	r0, sl
 8018010:	4698      	mov	r8, r3
 8018012:	f7ec ff85 	bl	8004f20 <lv_obj_add_flag>
    lv_obj_clear_flag(cui_Battery, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 8018016:	4650      	mov	r0, sl
 8018018:	2110      	movs	r1, #16
 801801a:	f7ec ffbd 	bl	8004f98 <lv_obj_clear_flag>

    lv_obj_t * cui_Wifi;
    cui_Wifi = lv_img_create(cui_Header);
 801801e:	0020      	movs	r0, r4
 8018020:	f7fc fe24 	bl	8014c6c <lv_img_create>
 8018024:	0006      	movs	r6, r0
    lv_img_set_src(cui_Wifi, &ui_img_wifi_png);
 8018026:	4955      	ldr	r1, [pc, #340]	; (801817c <ui_Header_create+0x214>)
 8018028:	f7fc fe2c 	bl	8014c84 <lv_img_set_src>
    lv_obj_set_width(cui_Wifi, LV_SIZE_CONTENT);   /// 1
 801802c:	0030      	movs	r0, r6
 801802e:	0039      	movs	r1, r7
 8018030:	f7ed fdea 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_height(cui_Wifi, LV_SIZE_CONTENT);    /// 1
 8018034:	0030      	movs	r0, r6
 8018036:	0039      	movs	r1, r7
 8018038:	f7ed fdfe 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_x(cui_Wifi, -30);
 801803c:	211e      	movs	r1, #30
 801803e:	0030      	movs	r0, r6
 8018040:	4249      	negs	r1, r1
 8018042:	f7ed fdb1 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(cui_Wifi, 0);
 8018046:	0030      	movs	r0, r6
 8018048:	2100      	movs	r1, #0
 801804a:	f7ed fdc5 	bl	8005bd8 <lv_obj_set_y>
    lv_obj_set_align(cui_Wifi, LV_ALIGN_RIGHT_MID);
 801804e:	0030      	movs	r0, r6
 8018050:	2108      	movs	r1, #8
 8018052:	f7ed fe37 	bl	8005cc4 <lv_obj_set_align>
    lv_obj_add_flag(cui_Wifi, LV_OBJ_FLAG_ADV_HITTEST);     /// Flags
 8018056:	0030      	movs	r0, r6
 8018058:	4641      	mov	r1, r8
 801805a:	f7ec ff61 	bl	8004f20 <lv_obj_add_flag>
    lv_obj_clear_flag(cui_Wifi, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 801805e:	0030      	movs	r0, r6
 8018060:	2110      	movs	r1, #16
 8018062:	f7ec ff99 	bl	8004f98 <lv_obj_clear_flag>

    lv_obj_t * cui_BLE;
    cui_BLE = lv_img_create(cui_Header);
 8018066:	0020      	movs	r0, r4
 8018068:	f7fc fe00 	bl	8014c6c <lv_img_create>
 801806c:	0005      	movs	r5, r0
    lv_img_set_src(cui_BLE, &ui_img_ble_png);
 801806e:	4944      	ldr	r1, [pc, #272]	; (8018180 <ui_Header_create+0x218>)
 8018070:	f7fc fe08 	bl	8014c84 <lv_img_set_src>
    lv_obj_set_width(cui_BLE, LV_SIZE_CONTENT);   /// 1
 8018074:	0028      	movs	r0, r5
 8018076:	0039      	movs	r1, r7
 8018078:	f7ed fdc6 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_height(cui_BLE, LV_SIZE_CONTENT);    /// 1
 801807c:	0028      	movs	r0, r5
 801807e:	0039      	movs	r1, r7
 8018080:	f7ed fdda 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_x(cui_BLE, -57);
 8018084:	2139      	movs	r1, #57	; 0x39
 8018086:	0028      	movs	r0, r5
 8018088:	4249      	negs	r1, r1
 801808a:	f7ed fd8d 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(cui_BLE, 0);
 801808e:	0028      	movs	r0, r5
 8018090:	2100      	movs	r1, #0
 8018092:	f7ed fda1 	bl	8005bd8 <lv_obj_set_y>
    lv_obj_set_align(cui_BLE, LV_ALIGN_RIGHT_MID);
 8018096:	0028      	movs	r0, r5
 8018098:	2108      	movs	r1, #8
 801809a:	f7ed fe13 	bl	8005cc4 <lv_obj_set_align>
    lv_obj_add_flag(cui_BLE, LV_OBJ_FLAG_ADV_HITTEST);     /// Flags
 801809e:	0028      	movs	r0, r5
 80180a0:	4641      	mov	r1, r8
 80180a2:	f7ec ff3d 	bl	8004f20 <lv_obj_add_flag>
    lv_obj_clear_flag(cui_BLE, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 80180a6:	0028      	movs	r0, r5
 80180a8:	2110      	movs	r1, #16
 80180aa:	f7ec ff75 	bl	8004f98 <lv_obj_clear_flag>

    lv_obj_t * cui_Time;
    cui_Time = lv_label_create(cui_Header);
 80180ae:	0020      	movs	r0, r4
 80180b0:	f7fe f874 	bl	801619c <lv_label_create>
 80180b4:	4681      	mov	r9, r0
    lv_obj_set_width(cui_Time, LV_SIZE_CONTENT);   /// 1
 80180b6:	0039      	movs	r1, r7
 80180b8:	f7ed fda6 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_height(cui_Time, LV_SIZE_CONTENT);    /// 1
 80180bc:	4648      	mov	r0, r9
 80180be:	0039      	movs	r1, r7
 80180c0:	f7ed fdba 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_align(cui_Time, LV_ALIGN_CENTER);
 80180c4:	4648      	mov	r0, r9
 80180c6:	2109      	movs	r1, #9
 80180c8:	f7ed fdfc 	bl	8005cc4 <lv_obj_set_align>
    lv_label_set_text(cui_Time, "14:37");
 80180cc:	4648      	mov	r0, r9
 80180ce:	492d      	ldr	r1, [pc, #180]	; (8018184 <ui_Header_create+0x21c>)
 80180d0:	f7fe f870 	bl	80161b4 <lv_label_set_text>
 80180d4:	2301      	movs	r3, #1
 80180d6:	425b      	negs	r3, r3
    lv_obj_set_style_text_color(cui_Time, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 80180d8:	1c19      	adds	r1, r3, #0
 80180da:	4648      	mov	r0, r9
 80180dc:	2200      	movs	r2, #0
 80180de:	469b      	mov	fp, r3
 80180e0:	f7f2 fc8a 	bl	800a9f8 <lv_obj_set_style_text_color>
    lv_obj_set_style_text_opa(cui_Time, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 80180e4:	2200      	movs	r2, #0
 80180e6:	4648      	mov	r0, r9
 80180e8:	21ff      	movs	r1, #255	; 0xff
 80180ea:	f7f2 fc91 	bl	800aa10 <lv_obj_set_style_text_opa>

    lv_obj_t * cui_Date;
    cui_Date = lv_label_create(cui_Header);
 80180ee:	0020      	movs	r0, r4
 80180f0:	f7fe f854 	bl	801619c <lv_label_create>
 80180f4:	4680      	mov	r8, r0
    lv_obj_set_width(cui_Date, LV_SIZE_CONTENT);   /// 1
 80180f6:	0039      	movs	r1, r7
 80180f8:	f7ed fd86 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_height(cui_Date, LV_SIZE_CONTENT);    /// 1
 80180fc:	4640      	mov	r0, r8
 80180fe:	0039      	movs	r1, r7
 8018100:	f7ed fd9a 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_align(cui_Date, LV_ALIGN_LEFT_MID);
 8018104:	4640      	mov	r0, r8
 8018106:	2107      	movs	r1, #7
 8018108:	f7ed fddc 	bl	8005cc4 <lv_obj_set_align>
    lv_label_set_text(cui_Date, "10 June");
 801810c:	4640      	mov	r0, r8
 801810e:	491e      	ldr	r1, [pc, #120]	; (8018188 <ui_Header_create+0x220>)
 8018110:	f7fe f850 	bl	80161b4 <lv_label_set_text>
    lv_obj_set_style_text_color(cui_Date, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 8018114:	4659      	mov	r1, fp
 8018116:	4640      	mov	r0, r8
 8018118:	2200      	movs	r2, #0
 801811a:	f7f2 fc6d 	bl	800a9f8 <lv_obj_set_style_text_color>
    lv_obj_set_style_text_opa(cui_Date, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 801811e:	4640      	mov	r0, r8
 8018120:	2200      	movs	r2, #0
 8018122:	21ff      	movs	r1, #255	; 0xff
 8018124:	f7f2 fc74 	bl	800aa10 <lv_obj_set_style_text_opa>

    lv_obj_t ** children = lv_mem_alloc(sizeof(lv_obj_t *) * _UI_COMP_HEADER_NUM);
 8018128:	2018      	movs	r0, #24
 801812a:	f7f9 ff3f 	bl	8011fac <lv_mem_alloc>
    children[UI_COMP_HEADER_HEADER] = cui_Header;
    children[UI_COMP_HEADER_BATTERY] = cui_Battery;
 801812e:	4653      	mov	r3, sl
 8018130:	6043      	str	r3, [r0, #4]
    children[UI_COMP_HEADER_WIFI] = cui_Wifi;
    children[UI_COMP_HEADER_BLE] = cui_BLE;
    children[UI_COMP_HEADER_TIME] = cui_Time;
 8018132:	464b      	mov	r3, r9
 8018134:	6103      	str	r3, [r0, #16]
    children[UI_COMP_HEADER_DATE] = cui_Date;
 8018136:	4643      	mov	r3, r8
    lv_obj_t ** children = lv_mem_alloc(sizeof(lv_obj_t *) * _UI_COMP_HEADER_NUM);
 8018138:	0007      	movs	r7, r0
    children[UI_COMP_HEADER_DATE] = cui_Date;
 801813a:	6143      	str	r3, [r0, #20]
    lv_obj_add_event_cb(cui_Header, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801813c:	4b13      	ldr	r3, [pc, #76]	; (801818c <ui_Header_create+0x224>)
    children[UI_COMP_HEADER_WIFI] = cui_Wifi;
 801813e:	6086      	str	r6, [r0, #8]
    children[UI_COMP_HEADER_BLE] = cui_BLE;
 8018140:	60c5      	str	r5, [r0, #12]
    lv_obj_add_event_cb(cui_Header, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 8018142:	781a      	ldrb	r2, [r3, #0]
    children[UI_COMP_HEADER_HEADER] = cui_Header;
 8018144:	6004      	str	r4, [r0, #0]
    lv_obj_add_event_cb(cui_Header, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 8018146:	0003      	movs	r3, r0
 8018148:	4911      	ldr	r1, [pc, #68]	; (8018190 <ui_Header_create+0x228>)
 801814a:	0020      	movs	r0, r4
 801814c:	f7e9 fe6a 	bl	8001e24 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(cui_Header, del_component_child_event_cb, LV_EVENT_DELETE, children);
 8018150:	003b      	movs	r3, r7
 8018152:	2221      	movs	r2, #33	; 0x21
 8018154:	0020      	movs	r0, r4
 8018156:	490f      	ldr	r1, [pc, #60]	; (8018194 <ui_Header_create+0x22c>)
 8018158:	f7e9 fe64 	bl	8001e24 <lv_obj_add_event_cb>
    return cui_Header;
}
 801815c:	0020      	movs	r0, r4
 801815e:	bcf0      	pop	{r4, r5, r6, r7}
 8018160:	46bb      	mov	fp, r7
 8018162:	46b2      	mov	sl, r6
 8018164:	46a9      	mov	r9, r5
 8018166:	46a0      	mov	r8, r4
 8018168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801816a:	46c0      	nop			; (mov r8, r8)
 801816c:	00002064 	.word	0x00002064
 8018170:	000021ab 	.word	0x000021ab
 8018174:	000027d1 	.word	0x000027d1
 8018178:	0801db98 	.word	0x0801db98
 801817c:	0801f29c 	.word	0x0801f29c
 8018180:	0801dc08 	.word	0x0801dc08
 8018184:	0801d9a0 	.word	0x0801d9a0
 8018188:	0801d9a8 	.word	0x0801d9a8
 801818c:	20007d20 	.word	0x20007d20
 8018190:	08017c75 	.word	0x08017c75
 8018194:	08017c91 	.word	0x08017c91

08018198 <ui_List_Switch_create>:


// COMPONENT List Switch

lv_obj_t * ui_List_Switch_create(lv_obj_t * comp_parent)
{
 8018198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801819a:	46c6      	mov	lr, r8
 801819c:	b500      	push	{lr}

    lv_obj_t * cui_List_Switch;
    cui_List_Switch = lv_obj_create(comp_parent);
 801819e:	f7ec feb3 	bl	8004f08 <lv_obj_create>
 80181a2:	0005      	movs	r5, r0
    lv_obj_set_height(cui_List_Switch, 50);
 80181a4:	2132      	movs	r1, #50	; 0x32
 80181a6:	f7ed fd47 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_width(cui_List_Switch, lv_pct(100));
 80181aa:	0028      	movs	r0, r5
 80181ac:	4973      	ldr	r1, [pc, #460]	; (801837c <ui_List_Switch_create+0x1e4>)
 80181ae:	f7ed fd2b 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_x(cui_List_Switch, 0);
 80181b2:	0028      	movs	r0, r5
 80181b4:	2100      	movs	r1, #0
 80181b6:	f7ed fcf7 	bl	8005ba8 <lv_obj_set_x>
    lv_obj_set_y(cui_List_Switch, 28);
 80181ba:	0028      	movs	r0, r5
 80181bc:	211c      	movs	r1, #28
 80181be:	f7ed fd0b 	bl	8005bd8 <lv_obj_set_y>
    lv_obj_set_align(cui_List_Switch, LV_ALIGN_TOP_MID);
 80181c2:	0028      	movs	r0, r5
 80181c4:	2102      	movs	r1, #2
 80181c6:	f7ed fd7d 	bl	8005cc4 <lv_obj_set_align>
    lv_obj_clear_flag(cui_List_Switch, LV_OBJ_FLAG_SCROLLABLE);      /// Flags
 80181ca:	4e6d      	ldr	r6, [pc, #436]	; (8018380 <ui_List_Switch_create+0x1e8>)
 80181cc:	0028      	movs	r0, r5
 80181ce:	2110      	movs	r1, #16
 80181d0:	f7ec fee2 	bl	8004f98 <lv_obj_clear_flag>
    lv_obj_set_style_bg_opa(cui_List_Switch, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 80181d4:	0028      	movs	r0, r5
 80181d6:	2200      	movs	r2, #0
 80181d8:	2100      	movs	r1, #0
 80181da:	f7f2 fba9 	bl	800a930 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_border_color(cui_List_Switch, lv_color_hex(0x20345A), LV_PART_MAIN | LV_STATE_DEFAULT);
 80181de:	0028      	movs	r0, r5
 80181e0:	1c31      	adds	r1, r6, #0
 80181e2:	2200      	movs	r2, #0
 80181e4:	f7f2 fbd0 	bl	800a988 <lv_obj_set_style_border_color>
    lv_obj_set_style_border_width(cui_List_Switch, 2, LV_PART_MAIN | LV_STATE_DEFAULT);
 80181e8:	0028      	movs	r0, r5
 80181ea:	2200      	movs	r2, #0
 80181ec:	2102      	movs	r1, #2
 80181ee:	f7f2 fbd7 	bl	800a9a0 <lv_obj_set_style_border_width>
    lv_obj_set_style_border_side(cui_List_Switch, LV_BORDER_SIDE_BOTTOM, LV_PART_MAIN | LV_STATE_DEFAULT);
 80181f2:	0028      	movs	r0, r5
 80181f4:	2200      	movs	r2, #0
 80181f6:	2101      	movs	r1, #1
 80181f8:	f7f2 fbda 	bl	800a9b0 <lv_obj_set_style_border_side>
    lv_obj_set_style_pad_left(cui_List_Switch, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 80181fc:	0028      	movs	r0, r5
 80181fe:	2200      	movs	r2, #0
 8018200:	210a      	movs	r1, #10
 8018202:	f7f2 fb79 	bl	800a8f8 <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(cui_List_Switch, 10, LV_PART_MAIN | LV_STATE_DEFAULT);
 8018206:	0028      	movs	r0, r5
 8018208:	2200      	movs	r2, #0
 801820a:	210a      	movs	r1, #10
 801820c:	f7f2 fb7c 	bl	800a908 <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(cui_List_Switch, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 8018210:	0028      	movs	r0, r5
 8018212:	2200      	movs	r2, #0
 8018214:	2100      	movs	r1, #0
 8018216:	f7f2 fb5f 	bl	800a8d8 <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(cui_List_Switch, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 801821a:	2200      	movs	r2, #0
 801821c:	0028      	movs	r0, r5
 801821e:	2100      	movs	r1, #0
 8018220:	f7f2 fb62 	bl	800a8e8 <lv_obj_set_style_pad_bottom>

    lv_obj_t * cui_List_Text;
    cui_List_Text = lv_label_create(cui_List_Switch);
 8018224:	0028      	movs	r0, r5
 8018226:	f7fd ffb9 	bl	801619c <lv_label_create>
 801822a:	0007      	movs	r7, r0
    lv_obj_set_align(cui_List_Text, LV_ALIGN_LEFT_MID);
 801822c:	2107      	movs	r1, #7
 801822e:	f7ed fd49 	bl	8005cc4 <lv_obj_set_align>
    lv_label_set_text(cui_List_Text, "Quiet");
 8018232:	0038      	movs	r0, r7
 8018234:	4953      	ldr	r1, [pc, #332]	; (8018384 <ui_List_Switch_create+0x1ec>)
 8018236:	f7fd ffbd 	bl	80161b4 <lv_label_set_text>
    lv_obj_set_style_text_color(cui_List_Text, lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
 801823a:	2101      	movs	r1, #1
 801823c:	2200      	movs	r2, #0
 801823e:	0038      	movs	r0, r7
 8018240:	4249      	negs	r1, r1
 8018242:	f7f2 fbd9 	bl	800a9f8 <lv_obj_set_style_text_color>

    lv_obj_t * cui_Switch1;
    cui_Switch1 = lv_switch_create(cui_List_Switch);
 8018246:	0028      	movs	r0, r5
 8018248:	f7fe ffd4 	bl	80171f4 <lv_switch_create>
 801824c:	0004      	movs	r4, r0
    lv_obj_set_width(cui_Switch1, 50);
 801824e:	2132      	movs	r1, #50	; 0x32
 8018250:	f7ed fcda 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_height(cui_Switch1, 25);
 8018254:	0020      	movs	r0, r4
 8018256:	2119      	movs	r1, #25
 8018258:	f7ed fcee 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_align(cui_Switch1, LV_ALIGN_RIGHT_MID);
 801825c:	0020      	movs	r0, r4
 801825e:	2108      	movs	r1, #8
 8018260:	f7ed fd30 	bl	8005cc4 <lv_obj_set_align>
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 8018264:	0020      	movs	r0, r4
 8018266:	2200      	movs	r2, #0
 8018268:	2100      	movs	r1, #0
 801826a:	f7f2 fb61 	bl	800a930 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_bg_img_src(cui_Switch1, &ui_img_ellips_png, LV_PART_MAIN | LV_STATE_DEFAULT);
 801826e:	4b46      	ldr	r3, [pc, #280]	; (8018388 <ui_List_Switch_create+0x1f0>)
 8018270:	0020      	movs	r0, r4
 8018272:	0019      	movs	r1, r3
 8018274:	2200      	movs	r2, #0
 8018276:	4698      	mov	r8, r3
 8018278:	f7f2 fb62 	bl	800a940 <lv_obj_set_style_bg_img_src>
    lv_obj_set_style_bg_img_recolor(cui_Switch1, lv_color_hex(0x20345A), LV_PART_MAIN | LV_STATE_DEFAULT);
 801827c:	1c31      	adds	r1, r6, #0
    lv_obj_set_style_bg_img_recolor_opa(cui_Switch1, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_MAIN | LV_STATE_CHECKED);
    lv_obj_set_style_bg_img_src(cui_Switch1, &ui_img_ellips_png, LV_PART_MAIN | LV_STATE_CHECKED);

    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_INDICATOR | LV_STATE_DEFAULT);
 801827e:	2680      	movs	r6, #128	; 0x80
    lv_obj_set_style_bg_img_recolor(cui_Switch1, lv_color_hex(0x20345A), LV_PART_MAIN | LV_STATE_DEFAULT);
 8018280:	0020      	movs	r0, r4
 8018282:	2200      	movs	r2, #0
 8018284:	f7f2 fb64 	bl	800a950 <lv_obj_set_style_bg_img_recolor>
    lv_obj_set_style_bg_img_recolor_opa(cui_Switch1, 255, LV_PART_MAIN | LV_STATE_DEFAULT);
 8018288:	0020      	movs	r0, r4
 801828a:	2200      	movs	r2, #0
 801828c:	21ff      	movs	r1, #255	; 0xff
 801828e:	f7f2 fb6b 	bl	800a968 <lv_obj_set_style_bg_img_recolor_opa>
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_MAIN | LV_STATE_CHECKED);
 8018292:	0020      	movs	r0, r4
 8018294:	2201      	movs	r2, #1
 8018296:	2100      	movs	r1, #0
 8018298:	f7f2 fb4a 	bl	800a930 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_INDICATOR | LV_STATE_DEFAULT);
 801829c:	02b6      	lsls	r6, r6, #10
    lv_obj_set_style_bg_img_src(cui_Switch1, &ui_img_ellips_png, LV_PART_MAIN | LV_STATE_CHECKED);
 801829e:	4641      	mov	r1, r8
 80182a0:	0020      	movs	r0, r4
 80182a2:	2201      	movs	r2, #1
 80182a4:	f7f2 fb4c 	bl	800a940 <lv_obj_set_style_bg_img_src>
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_INDICATOR | LV_STATE_DEFAULT);
 80182a8:	0032      	movs	r2, r6
 80182aa:	0020      	movs	r0, r4
 80182ac:	2100      	movs	r1, #0
 80182ae:	f7f2 fb3f 	bl	800a930 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_bg_img_tiled(cui_Switch1, true, LV_PART_INDICATOR | LV_STATE_DEFAULT);
 80182b2:	0032      	movs	r2, r6
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_INDICATOR | LV_STATE_CHECKED);
 80182b4:	4e35      	ldr	r6, [pc, #212]	; (801838c <ui_List_Switch_create+0x1f4>)
    lv_obj_set_style_bg_img_tiled(cui_Switch1, true, LV_PART_INDICATOR | LV_STATE_DEFAULT);
 80182b6:	0020      	movs	r0, r4
 80182b8:	2101      	movs	r1, #1
 80182ba:	f7f2 fb5d 	bl	800a978 <lv_obj_set_style_bg_img_tiled>
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_INDICATOR | LV_STATE_CHECKED);
 80182be:	0032      	movs	r2, r6
 80182c0:	0020      	movs	r0, r4
 80182c2:	2100      	movs	r1, #0
 80182c4:	f7f2 fb34 	bl	800a930 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_bg_img_src(cui_Switch1, &ui_img_ellips_png, LV_PART_INDICATOR | LV_STATE_CHECKED);
 80182c8:	4641      	mov	r1, r8
 80182ca:	0032      	movs	r2, r6
 80182cc:	0020      	movs	r0, r4
 80182ce:	f7f2 fb37 	bl	800a940 <lv_obj_set_style_bg_img_src>
    lv_obj_set_style_bg_img_recolor(cui_Switch1, lv_color_hex(0x4DD549), LV_PART_INDICATOR | LV_STATE_CHECKED);
 80182d2:	4b2f      	ldr	r3, [pc, #188]	; (8018390 <ui_List_Switch_create+0x1f8>)
 80182d4:	0032      	movs	r2, r6
 80182d6:	1c19      	adds	r1, r3, #0
 80182d8:	0020      	movs	r0, r4
 80182da:	f7f2 fb39 	bl	800a950 <lv_obj_set_style_bg_img_recolor>
    lv_obj_set_style_bg_img_recolor_opa(cui_Switch1, 255, LV_PART_INDICATOR | LV_STATE_CHECKED);
 80182de:	0032      	movs	r2, r6

    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_KNOB | LV_STATE_DEFAULT);
 80182e0:	26c0      	movs	r6, #192	; 0xc0
    lv_obj_set_style_bg_img_recolor_opa(cui_Switch1, 255, LV_PART_INDICATOR | LV_STATE_CHECKED);
 80182e2:	0020      	movs	r0, r4
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_KNOB | LV_STATE_DEFAULT);
 80182e4:	02b6      	lsls	r6, r6, #10
    lv_obj_set_style_bg_img_recolor_opa(cui_Switch1, 255, LV_PART_INDICATOR | LV_STATE_CHECKED);
 80182e6:	21ff      	movs	r1, #255	; 0xff
 80182e8:	f7f2 fb3e 	bl	800a968 <lv_obj_set_style_bg_img_recolor_opa>
    lv_obj_set_style_bg_opa(cui_Switch1, 0, LV_PART_KNOB | LV_STATE_DEFAULT);
 80182ec:	0032      	movs	r2, r6
 80182ee:	0020      	movs	r0, r4
 80182f0:	2100      	movs	r1, #0
 80182f2:	f7f2 fb1d 	bl	800a930 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_bg_img_src(cui_Switch1, &ui_img_circle_png, LV_PART_KNOB | LV_STATE_DEFAULT);
 80182f6:	0032      	movs	r2, r6
    lv_obj_set_style_pad_left(cui_Switch1, 0, LV_PART_KNOB | LV_STATE_CHECKED);
 80182f8:	4e26      	ldr	r6, [pc, #152]	; (8018394 <ui_List_Switch_create+0x1fc>)
    lv_obj_set_style_bg_img_src(cui_Switch1, &ui_img_circle_png, LV_PART_KNOB | LV_STATE_DEFAULT);
 80182fa:	0020      	movs	r0, r4
 80182fc:	4926      	ldr	r1, [pc, #152]	; (8018398 <ui_List_Switch_create+0x200>)
 80182fe:	f7f2 fb1f 	bl	800a940 <lv_obj_set_style_bg_img_src>
    lv_obj_set_style_pad_left(cui_Switch1, 0, LV_PART_KNOB | LV_STATE_CHECKED);
 8018302:	0032      	movs	r2, r6
 8018304:	0020      	movs	r0, r4
 8018306:	2100      	movs	r1, #0
 8018308:	f7f2 faf6 	bl	800a8f8 <lv_obj_set_style_pad_left>
    lv_obj_set_style_pad_right(cui_Switch1, -3, LV_PART_KNOB | LV_STATE_CHECKED);
 801830c:	2103      	movs	r1, #3
 801830e:	0032      	movs	r2, r6
 8018310:	0020      	movs	r0, r4
 8018312:	4249      	negs	r1, r1
 8018314:	f7f2 faf8 	bl	800a908 <lv_obj_set_style_pad_right>
    lv_obj_set_style_pad_top(cui_Switch1, 0, LV_PART_KNOB | LV_STATE_CHECKED);
 8018318:	0032      	movs	r2, r6
 801831a:	0020      	movs	r0, r4
 801831c:	2100      	movs	r1, #0
 801831e:	f7f2 fadb 	bl	800a8d8 <lv_obj_set_style_pad_top>
    lv_obj_set_style_pad_bottom(cui_Switch1, 0, LV_PART_KNOB | LV_STATE_CHECKED);
 8018322:	0032      	movs	r2, r6
 8018324:	0020      	movs	r0, r4
 8018326:	2100      	movs	r1, #0
 8018328:	f7f2 fade 	bl	800a8e8 <lv_obj_set_style_pad_bottom>


    lv_obj_set_style_outline_color(cui_Switch1, lv_color_hex(0xe0a721), LV_PART_MAIN | LV_STATE_FOCUSED);
 801832c:	4b1b      	ldr	r3, [pc, #108]	; (801839c <ui_List_Switch_create+0x204>)
 801832e:	0020      	movs	r0, r4
 8018330:	1c19      	adds	r1, r3, #0
 8018332:	2202      	movs	r2, #2
 8018334:	f7f2 fb4c 	bl	800a9d0 <lv_obj_set_style_outline_color>
    lv_obj_set_style_outline_width(cui_Switch1, 2, LV_PART_MAIN | LV_STATE_FOCUSED);
 8018338:	0020      	movs	r0, r4
 801833a:	2202      	movs	r2, #2
 801833c:	2102      	movs	r1, #2
 801833e:	f7f2 fb3f 	bl	800a9c0 <lv_obj_set_style_outline_width>
    lv_obj_set_style_outline_pad(cui_Switch1, 3, LV_PART_MAIN | LV_STATE_FOCUSED);
 8018342:	2202      	movs	r2, #2
 8018344:	2103      	movs	r1, #3
 8018346:	0020      	movs	r0, r4
 8018348:	f7f2 fb4e 	bl	800a9e8 <lv_obj_set_style_outline_pad>

    lv_obj_t ** children = lv_mem_alloc(sizeof(lv_obj_t *) * _UI_COMP_LIST_SWITCH_NUM);
 801834c:	200c      	movs	r0, #12
 801834e:	f7f9 fe2d 	bl	8011fac <lv_mem_alloc>
 8018352:	0006      	movs	r6, r0
    children[UI_COMP_LIST_SWITCH_LIST_SWITCH] = cui_List_Switch;
    children[UI_COMP_LIST_SWITCH_LIST_TEXT] = cui_List_Text;
    children[UI_COMP_LIST_SWITCH_SWITCH1] = cui_Switch1;
    lv_obj_add_event_cb(cui_List_Switch, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 8018354:	4b12      	ldr	r3, [pc, #72]	; (80183a0 <ui_List_Switch_create+0x208>)
    children[UI_COMP_LIST_SWITCH_LIST_SWITCH] = cui_List_Switch;
 8018356:	6005      	str	r5, [r0, #0]
    children[UI_COMP_LIST_SWITCH_LIST_TEXT] = cui_List_Text;
 8018358:	6047      	str	r7, [r0, #4]
    lv_obj_add_event_cb(cui_List_Switch, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801835a:	781a      	ldrb	r2, [r3, #0]
    children[UI_COMP_LIST_SWITCH_SWITCH1] = cui_Switch1;
 801835c:	6084      	str	r4, [r0, #8]
    lv_obj_add_event_cb(cui_List_Switch, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801835e:	0003      	movs	r3, r0
 8018360:	4910      	ldr	r1, [pc, #64]	; (80183a4 <ui_List_Switch_create+0x20c>)
 8018362:	0028      	movs	r0, r5
 8018364:	f7e9 fd5e 	bl	8001e24 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(cui_List_Switch, del_component_child_event_cb, LV_EVENT_DELETE, children);
 8018368:	0033      	movs	r3, r6
 801836a:	0028      	movs	r0, r5
 801836c:	2221      	movs	r2, #33	; 0x21
 801836e:	490e      	ldr	r1, [pc, #56]	; (80183a8 <ui_List_Switch_create+0x210>)
 8018370:	f7e9 fd58 	bl	8001e24 <lv_obj_add_event_cb>
    return cui_List_Switch;
}
 8018374:	0028      	movs	r0, r5
 8018376:	bc80      	pop	{r7}
 8018378:	46b8      	mov	r8, r7
 801837a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801837c:	00002064 	.word	0x00002064
 8018380:	000021ab 	.word	0x000021ab
 8018384:	0801d9b0 	.word	0x0801d9b0
 8018388:	0801e0a0 	.word	0x0801e0a0
 801838c:	00020001 	.word	0x00020001
 8018390:	00004ea9 	.word	0x00004ea9
 8018394:	00030001 	.word	0x00030001
 8018398:	0801dc58 	.word	0x0801dc58
 801839c:	ffffe524 	.word	0xffffe524
 80183a0:	20007d20 	.word	0x20007d20
 80183a4:	08017c75 	.word	0x08017c75
 80183a8:	08017c91 	.word	0x08017c91

080183ac <ui_Roller_create>:


// COMPONENT Roller

lv_obj_t * ui_Roller_create(lv_obj_t * comp_parent)
{
 80183ac:	b570      	push	{r4, r5, r6, lr}
    lv_obj_t * cui_Roller;
    cui_Roller = lv_roller_create(comp_parent);
 80183ae:	f7fe fa01 	bl	80167b4 <lv_roller_create>
 80183b2:	0004      	movs	r4, r0
    lv_roller_set_options(cui_Roller, "Auto\nCool\nHeat\nFan", LV_ROLLER_MODE_NORMAL);
 80183b4:	2200      	movs	r2, #0
 80183b6:	4930      	ldr	r1, [pc, #192]	; (8018478 <ui_Roller_create+0xcc>)
 80183b8:	f7fe fa08 	bl	80167cc <lv_roller_set_options>
    lv_obj_set_height(cui_Roller, 85);
 80183bc:	0020      	movs	r0, r4
 80183be:	2155      	movs	r1, #85	; 0x55
 80183c0:	f7ed fc3a 	bl	8005c38 <lv_obj_set_height>
    lv_obj_set_width(cui_Roller, lv_pct(59));
 80183c4:	0020      	movs	r0, r4
 80183c6:	492d      	ldr	r1, [pc, #180]	; (801847c <ui_Roller_create+0xd0>)
 80183c8:	f7ed fc1e 	bl	8005c08 <lv_obj_set_width>
    lv_obj_set_align(cui_Roller, LV_ALIGN_BOTTOM_MID);
 80183cc:	0020      	movs	r0, r4
 80183ce:	2105      	movs	r1, #5
 80183d0:	f7ed fc78 	bl	8005cc4 <lv_obj_set_align>
    lv_obj_set_style_text_color(cui_Roller, lv_color_hex(0x7286AB), LV_PART_MAIN | LV_STATE_DEFAULT);
 80183d4:	4b2a      	ldr	r3, [pc, #168]	; (8018480 <ui_Roller_create+0xd4>)
 80183d6:	0020      	movs	r0, r4
 80183d8:	1c19      	adds	r1, r3, #0
 80183da:	2200      	movs	r2, #0
 80183dc:	f7f2 fb0c 	bl	800a9f8 <lv_obj_set_style_text_color>
    lv_obj_set_style_text_letter_space(cui_Roller, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 80183e0:	0020      	movs	r0, r4
 80183e2:	2200      	movs	r2, #0
 80183e4:	2100      	movs	r1, #0
 80183e6:	f7f2 fb1b 	bl	800aa20 <lv_obj_set_style_text_letter_space>
    lv_obj_set_style_text_line_space(cui_Roller, 8, LV_PART_MAIN | LV_STATE_DEFAULT);
 80183ea:	0020      	movs	r0, r4
 80183ec:	2200      	movs	r2, #0
 80183ee:	2108      	movs	r1, #8
 80183f0:	f7f2 fb1e 	bl	800aa30 <lv_obj_set_style_text_line_space>
    lv_obj_set_style_text_align(cui_Roller, LV_TEXT_ALIGN_CENTER, LV_PART_MAIN | LV_STATE_DEFAULT);
 80183f4:	0020      	movs	r0, r4
 80183f6:	2200      	movs	r2, #0
 80183f8:	2102      	movs	r1, #2
 80183fa:	f7f2 fb21 	bl	800aa40 <lv_obj_set_style_text_align>
    lv_obj_set_style_bg_opa(cui_Roller, 0, LV_PART_MAIN | LV_STATE_DEFAULT);
 80183fe:	0020      	movs	r0, r4
 8018400:	2200      	movs	r2, #0
 8018402:	2100      	movs	r1, #0
 8018404:	f7f2 fa94 	bl	800a930 <lv_obj_set_style_bg_opa>
    lv_obj_set_style_anim_time(cui_Roller, 300, LV_PART_MAIN | LV_STATE_DEFAULT);
 8018408:	2196      	movs	r1, #150	; 0x96

    lv_obj_set_style_text_color(cui_Roller, lv_color_hex(0x181C29), LV_PART_SELECTED | LV_STATE_DEFAULT);
 801840a:	2580      	movs	r5, #128	; 0x80
    lv_obj_set_style_anim_time(cui_Roller, 300, LV_PART_MAIN | LV_STATE_DEFAULT);
 801840c:	0020      	movs	r0, r4
 801840e:	2200      	movs	r2, #0
 8018410:	0049      	lsls	r1, r1, #1
 8018412:	f7f2 fb25 	bl	800aa60 <lv_obj_set_style_anim_time>
    lv_obj_set_style_text_color(cui_Roller, lv_color_hex(0x181C29), LV_PART_SELECTED | LV_STATE_DEFAULT);
 8018416:	4b1b      	ldr	r3, [pc, #108]	; (8018484 <ui_Roller_create+0xd8>)
 8018418:	02ed      	lsls	r5, r5, #11
 801841a:	1c19      	adds	r1, r3, #0
 801841c:	002a      	movs	r2, r5
 801841e:	0020      	movs	r0, r4
 8018420:	f7f2 faea 	bl	800a9f8 <lv_obj_set_style_text_color>
    lv_obj_set_style_bg_color(cui_Roller, lv_color_hex(0xFFFFFF), LV_PART_SELECTED | LV_STATE_DEFAULT);
 8018424:	2101      	movs	r1, #1
 8018426:	002a      	movs	r2, r5
 8018428:	0020      	movs	r0, r4
 801842a:	4249      	negs	r1, r1
 801842c:	f7f2 fa74 	bl	800a918 <lv_obj_set_style_bg_color>

    lv_obj_set_style_outline_color(cui_Roller, lv_color_hex(0xe0a721), LV_PART_MAIN | LV_STATE_FOCUSED);
 8018430:	4b15      	ldr	r3, [pc, #84]	; (8018488 <ui_Roller_create+0xdc>)
 8018432:	0020      	movs	r0, r4
 8018434:	1c19      	adds	r1, r3, #0
 8018436:	2202      	movs	r2, #2
 8018438:	f7f2 faca 	bl	800a9d0 <lv_obj_set_style_outline_color>
    lv_obj_set_style_outline_width(cui_Roller, 2, LV_PART_MAIN | LV_STATE_FOCUSED);
 801843c:	0020      	movs	r0, r4
 801843e:	2202      	movs	r2, #2
 8018440:	2102      	movs	r1, #2
 8018442:	f7f2 fabd 	bl	800a9c0 <lv_obj_set_style_outline_width>
    lv_obj_set_style_outline_pad(cui_Roller, 3, LV_PART_MAIN | LV_STATE_FOCUSED);
 8018446:	2202      	movs	r2, #2
 8018448:	2103      	movs	r1, #3
 801844a:	0020      	movs	r0, r4
 801844c:	f7f2 facc 	bl	800a9e8 <lv_obj_set_style_outline_pad>

    lv_obj_t ** children = lv_mem_alloc(sizeof(lv_obj_t *) * _UI_COMP_ROLLER_NUM);
 8018450:	2004      	movs	r0, #4
 8018452:	f7f9 fdab 	bl	8011fac <lv_mem_alloc>
 8018456:	0005      	movs	r5, r0
    children[UI_COMP_ROLLER_ROLLER] = cui_Roller;
    lv_obj_add_event_cb(cui_Roller, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 8018458:	4b0c      	ldr	r3, [pc, #48]	; (801848c <ui_Roller_create+0xe0>)
    children[UI_COMP_ROLLER_ROLLER] = cui_Roller;
 801845a:	6004      	str	r4, [r0, #0]
    lv_obj_add_event_cb(cui_Roller, get_component_child_event_cb, LV_EVENT_GET_COMP_CHILD, children);
 801845c:	781a      	ldrb	r2, [r3, #0]
 801845e:	490c      	ldr	r1, [pc, #48]	; (8018490 <ui_Roller_create+0xe4>)
 8018460:	0003      	movs	r3, r0
 8018462:	0020      	movs	r0, r4
 8018464:	f7e9 fcde 	bl	8001e24 <lv_obj_add_event_cb>
    lv_obj_add_event_cb(cui_Roller, del_component_child_event_cb, LV_EVENT_DELETE, children);
 8018468:	002b      	movs	r3, r5
 801846a:	2221      	movs	r2, #33	; 0x21
 801846c:	0020      	movs	r0, r4
 801846e:	4909      	ldr	r1, [pc, #36]	; (8018494 <ui_Roller_create+0xe8>)
 8018470:	f7e9 fcd8 	bl	8001e24 <lv_obj_add_event_cb>
    return cui_Roller;
}
 8018474:	0020      	movs	r0, r4
 8018476:	bd70      	pop	{r4, r5, r6, pc}
 8018478:	0801d9b8 	.word	0x0801d9b8
 801847c:	0000203b 	.word	0x0000203b
 8018480:	00007435 	.word	0x00007435
 8018484:	000018e5 	.word	0x000018e5
 8018488:	ffffe524 	.word	0xffffe524
 801848c:	20007d20 	.word	0x20007d20
 8018490:	08017c75 	.word	0x08017c75
 8018494:	08017c91 	.word	0x08017c91

08018498 <_ui_screen_change>:
    if(id == _UI_SLIDER_PROPERTY_VALUE) lv_slider_set_value(target, val, LV_ANIM_OFF);
}


void _ui_screen_change(lv_obj_t * target, lv_scr_load_anim_t fademode, int spd, int delay)
{
 8018498:	b510      	push	{r4, lr}
    lv_scr_load_anim(target, fademode, spd, delay, false);
 801849a:	2400      	movs	r4, #0
{
 801849c:	b082      	sub	sp, #8
    lv_scr_load_anim(target, fademode, spd, delay, false);
 801849e:	9400      	str	r4, [sp, #0]
 80184a0:	f7e9 f9d2 	bl	8001848 <lv_scr_load_anim>
}
 80184a4:	b002      	add	sp, #8
 80184a6:	bd10      	pop	{r4, pc}

080184a8 <MX25L6433F_Init>:
  * @brief  Initialize the MX25L6433F device
  * @param  Ctx Component object pointer
  * @retval error status
  */
int32_t MX25L6433F_Init(MX25L6433F_Object_t *pObj)
{
 80184a8:	1e03      	subs	r3, r0, #0
  int32_t ret = MX25L6433F_OK;

  if(pObj == NULL)
 80184aa:	d007      	beq.n	80184bc <MX25L6433F_Init+0x14>
  {
    ret = MX25L6433F_ERROR;
  }
  else if (pObj->IsInitialized == 0)
 80184ac:	2220      	movs	r2, #32
 80184ae:	5c81      	ldrb	r1, [r0, r2]
  int32_t ret = MX25L6433F_OK;
 80184b0:	2000      	movs	r0, #0
  else if (pObj->IsInitialized == 0)
 80184b2:	2900      	cmp	r1, #0
 80184b4:	d101      	bne.n	80184ba <MX25L6433F_Init+0x12>
  {
    pObj->IsInitialized = 1;
 80184b6:	3101      	adds	r1, #1
 80184b8:	5499      	strb	r1, [r3, r2]
    
    /* Nothing to do in SPI mode */
  }

  return ret;
}
 80184ba:	4770      	bx	lr
    ret = MX25L6433F_ERROR;
 80184bc:	2001      	movs	r0, #1
 80184be:	4240      	negs	r0, r0
 80184c0:	e7fb      	b.n	80184ba <MX25L6433F_Init+0x12>
 80184c2:	46c0      	nop			; (mov r8, r8)

080184c4 <MX25L6433F_DeInit>:
  * @brief  De-Initialize the ili9341 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t MX25L6433F_DeInit(MX25L6433F_Object_t *pObj)
{
 80184c4:	b510      	push	{r4, lr}
  return pObj->IO.DeInit();
 80184c6:	6843      	ldr	r3, [r0, #4]
 80184c8:	4798      	blx	r3
}
 80184ca:	bd10      	pop	{r4, pc}

080184cc <MX25L6433F_GetFlashInfo>:
  * @retval error status
  */
int32_t MX25L6433F_GetFlashInfo(MX25L6433F_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25L6433F_FLASH_SIZE;
 80184cc:	2380      	movs	r3, #128	; 0x80
 80184ce:	041b      	lsls	r3, r3, #16
 80184d0:	6003      	str	r3, [r0, #0]
  pInfo->EraseBlockSize         = MX25L6433F_BLOCK_64K;
 80184d2:	2380      	movs	r3, #128	; 0x80
  pInfo->EraseBlocksNumber      = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_64K);
  pInfo->EraseSubBlockSize      = MX25L6433F_BLOCK_32K;
  pInfo->EraseSubBlocksNumber   = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_32K);
  pInfo->EraseSectorSize        = MX25L6433F_SECTOR_4K;
 80184d4:	2180      	movs	r1, #128	; 0x80
  pInfo->EraseBlockSize         = MX25L6433F_BLOCK_64K;
 80184d6:	025b      	lsls	r3, r3, #9
 80184d8:	6043      	str	r3, [r0, #4]
  pInfo->EraseBlocksNumber      = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_64K);
 80184da:	2380      	movs	r3, #128	; 0x80
  pInfo->EraseSectorSize        = MX25L6433F_SECTOR_4K;
 80184dc:	0149      	lsls	r1, r1, #5
  pInfo->EraseBlocksNumber      = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_64K);
 80184de:	6083      	str	r3, [r0, #8]
  pInfo->EraseSectorSize        = MX25L6433F_SECTOR_4K;
 80184e0:	6141      	str	r1, [r0, #20]
  pInfo->EraseSubBlockSize      = MX25L6433F_BLOCK_32K;
 80184e2:	2380      	movs	r3, #128	; 0x80
  pInfo->EraseSubBlocksNumber   = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_32K);
 80184e4:	2280      	movs	r2, #128	; 0x80
  pInfo->EraseSectorsNumber     = (MX25L6433F_FLASH_SIZE/MX25L6433F_SECTOR_4K);
 80184e6:	2180      	movs	r1, #128	; 0x80
  pInfo->EraseSubBlockSize      = MX25L6433F_BLOCK_32K;
 80184e8:	021b      	lsls	r3, r3, #8
  pInfo->EraseSubBlocksNumber   = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_32K);
 80184ea:	0052      	lsls	r2, r2, #1
  pInfo->EraseSectorsNumber     = (MX25L6433F_FLASH_SIZE/MX25L6433F_SECTOR_4K);
 80184ec:	0109      	lsls	r1, r1, #4
  pInfo->EraseSubBlockSize      = MX25L6433F_BLOCK_32K;
 80184ee:	60c3      	str	r3, [r0, #12]
  pInfo->EraseSubBlocksNumber   = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_32K);
 80184f0:	6102      	str	r2, [r0, #16]
  pInfo->EraseSectorsNumber     = (MX25L6433F_FLASH_SIZE/MX25L6433F_SECTOR_4K);
 80184f2:	6181      	str	r1, [r0, #24]
  pInfo->ProgPageSize           = MX25L6433F_PAGE_SIZE;
 80184f4:	61c2      	str	r2, [r0, #28]
  pInfo->ProgPagesNumber        = (MX25L6433F_FLASH_SIZE/MX25L6433F_PAGE_SIZE);
 80184f6:	6203      	str	r3, [r0, #32]

  return MX25L6433F_OK;
};
 80184f8:	2000      	movs	r0, #0
 80184fa:	4770      	bx	lr

080184fc <MX25L6433F_Read>:
  * @param  ReadAddr Read start address
  * @param  Size Size of data to read
  * @retval QSPI memory status
  */
int32_t MX25L6433F_Read(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 80184fc:	b510      	push	{r4, lr}
 80184fe:	0004      	movs	r4, r0
 8018500:	0010      	movs	r0, r2
  int32_t ret = MX25L6433F_OK;

  switch(Mode)
 8018502:	2900      	cmp	r1, #0
 8018504:	d104      	bne.n	8018510 <MX25L6433F_Read+0x14>
  {
    case MX25L6433F_SPI_MODE :
      ret = pObj->IO.RecvData(pData, ReadAddr, Size);
 8018506:	0019      	movs	r1, r3
 8018508:	6964      	ldr	r4, [r4, #20]
 801850a:	9a02      	ldr	r2, [sp, #8]
 801850c:	47a0      	blx	r4
    default :
      return MX25L6433F_ERROR;
  }

  return ret;
}
 801850e:	bd10      	pop	{r4, pc}
      return MX25L6433F_ERROR;
 8018510:	2001      	movs	r0, #1
 8018512:	4240      	negs	r0, r0
 8018514:	e7fb      	b.n	801850e <MX25L6433F_Read+0x12>
 8018516:	46c0      	nop			; (mov r8, r8)

08018518 <MX25L6433F_ReadDMA>:
  * @param  ReadAddr Read start address
  * @param  Size Size of data to read
  * @retval QSPI memory status
  */
int32_t MX25L6433F_ReadDMA(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8018518:	b510      	push	{r4, lr}
 801851a:	0004      	movs	r4, r0
 801851c:	0010      	movs	r0, r2
  int32_t ret = MX25L6433F_OK;

  switch(Mode)
 801851e:	2900      	cmp	r1, #0
 8018520:	d104      	bne.n	801852c <MX25L6433F_ReadDMA+0x14>
  {
    case MX25L6433F_SPI_MODE :
      ret = pObj->IO.RecvDataDMA(pData, ReadAddr, Size);
 8018522:	0019      	movs	r1, r3
 8018524:	69a4      	ldr	r4, [r4, #24]
 8018526:	9a02      	ldr	r2, [sp, #8]
 8018528:	47a0      	blx	r4
    default :
      return MX25L6433F_ERROR;
  }

  return ret;
}
 801852a:	bd10      	pop	{r4, pc}
      return MX25L6433F_ERROR;
 801852c:	2001      	movs	r0, #1
 801852e:	4240      	negs	r0, r0
 8018530:	e7fb      	b.n	801852a <MX25L6433F_ReadDMA+0x12>
 8018532:	46c0      	nop			; (mov r8, r8)

08018534 <MX25L6433F_PageProgram>:
  * @note   Address size is forced to 3 Bytes when the 4 Bytes address size
  *         command is not available for the specified interface mode
  * @retval QSPI memory status
  */
int32_t MX25L6433F_PageProgram(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8018534:	b510      	push	{r4, lr}
 8018536:	0004      	movs	r4, r0
 8018538:	0010      	movs	r0, r2
  int32_t ret = MX25L6433F_OK;

  switch(Mode)
 801853a:	2900      	cmp	r1, #0
 801853c:	d104      	bne.n	8018548 <MX25L6433F_PageProgram+0x14>
  {
    case MX25L6433F_SPI_MODE :
      ret = pObj->IO.SendData(pData, WriteAddr, Size);
 801853e:	0019      	movs	r1, r3
 8018540:	68e4      	ldr	r4, [r4, #12]
 8018542:	9a02      	ldr	r2, [sp, #8]
 8018544:	47a0      	blx	r4
    default :
      ret = MX25L6433F_ERROR;
  }

  return ret;
}
 8018546:	bd10      	pop	{r4, pc}
      ret = MX25L6433F_ERROR;
 8018548:	2001      	movs	r0, #1
 801854a:	4240      	negs	r0, r0
  return ret;
 801854c:	e7fb      	b.n	8018546 <MX25L6433F_PageProgram+0x12>
 801854e:	46c0      	nop			; (mov r8, r8)

08018550 <MX25L6433F_PageProgramDMA>:
  * @note   Address size is forced to 3 Bytes when the 4 Bytes address size
  *         command is not available for the specified interface mode
  * @retval QSPI memory status
  */
int32_t MX25L6433F_PageProgramDMA(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8018550:	b510      	push	{r4, lr}
 8018552:	0004      	movs	r4, r0
 8018554:	0010      	movs	r0, r2
  int32_t ret = MX25L6433F_OK;

  switch(Mode)
 8018556:	2900      	cmp	r1, #0
 8018558:	d104      	bne.n	8018564 <MX25L6433F_PageProgramDMA+0x14>
  {
    case MX25L6433F_SPI_MODE :
      ret = pObj->IO.SendDataDMA(pData, WriteAddr, Size);
 801855a:	0019      	movs	r1, r3
 801855c:	6924      	ldr	r4, [r4, #16]
 801855e:	9a02      	ldr	r2, [sp, #8]
 8018560:	47a0      	blx	r4
    default :
      ret = MX25L6433F_ERROR;
  }

  return ret;
}
 8018562:	bd10      	pop	{r4, pc}
      ret = MX25L6433F_ERROR;
 8018564:	2001      	movs	r0, #1
 8018566:	4240      	negs	r0, r0
  return ret;
 8018568:	e7fb      	b.n	8018562 <MX25L6433F_PageProgramDMA+0x12>
 801856a:	46c0      	nop			; (mov r8, r8)

0801856c <MX25L6433F_BlockErase>:
      // break;
    default :
      ret = MX25L6433F_ERROR;	  
  }

  return ret;
 801856c:	2001      	movs	r0, #1
}
 801856e:	4240      	negs	r0, r0
 8018570:	4770      	bx	lr
 8018572:	46c0      	nop			; (mov r8, r8)

08018574 <MX25L6433F_ChipErase>:
  int32_t ret = MX25L6433F_OK;
  
  /* Send the command MX25L6433F_CHIP_ERASE_CMD */
  ret = MX25L6433F_ERROR;

  return ret;
 8018574:	2001      	movs	r0, #1
}
 8018576:	4240      	negs	r0, r0
 8018578:	4770      	bx	lr
 801857a:	46c0      	nop			; (mov r8, r8)

0801857c <MX25L6433F_ReadID>:
  int32_t ret = MX25L6433F_OK;
  
  /* Send the command MX25L6433F_READ_ID_CMD */
  ret = MX25L6433F_ERROR;

  return ret;
 801857c:	2001      	movs	r0, #1
}
 801857e:	4240      	negs	r0, r0
 8018580:	4770      	bx	lr
 8018582:	46c0      	nop			; (mov r8, r8)

08018584 <MX25L6433F_ResetEnable>:
 8018584:	2001      	movs	r0, #1
 8018586:	4240      	negs	r0, r0
 8018588:	4770      	bx	lr
 801858a:	46c0      	nop			; (mov r8, r8)

0801858c <MX25L6433F_ResetMemory>:
 801858c:	2001      	movs	r0, #1
 801858e:	4240      	negs	r0, r0
 8018590:	4770      	bx	lr
 8018592:	46c0      	nop			; (mov r8, r8)

08018594 <MX25L6433F_RegisterBusIO>:
{
 8018594:	b510      	push	{r4, lr}
  if(pObj == NULL)
 8018596:	2800      	cmp	r0, #0
 8018598:	d013      	beq.n	80185c2 <MX25L6433F_RegisterBusIO+0x2e>
    pObj->IO.DeInit       = pIO->DeInit;
 801859a:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init         = pIO->Init;
 801859c:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit       = pIO->DeInit;
 801859e:	6042      	str	r2, [r0, #4]
    pObj->IO.Address      = pIO->Address;
 80185a0:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init         = pIO->Init;
 80185a2:	6003      	str	r3, [r0, #0]
    pObj->IO.Address      = pIO->Address;
 80185a4:	6082      	str	r2, [r0, #8]
    pObj->IO.SendData     = pIO->SendData;
 80185a6:	68ca      	ldr	r2, [r1, #12]
 80185a8:	60c2      	str	r2, [r0, #12]
    pObj->IO.SendDataDMA  = pIO->SendDataDMA;
 80185aa:	690a      	ldr	r2, [r1, #16]
 80185ac:	6102      	str	r2, [r0, #16]
    pObj->IO.RecvData     = pIO->RecvData;
 80185ae:	694a      	ldr	r2, [r1, #20]
 80185b0:	6142      	str	r2, [r0, #20]
    pObj->IO.RecvDataDMA  = pIO->RecvDataDMA;
 80185b2:	698a      	ldr	r2, [r1, #24]
 80185b4:	6182      	str	r2, [r0, #24]
    pObj->IO.GetTick      = pIO->GetTick;
 80185b6:	69ca      	ldr	r2, [r1, #28]
 80185b8:	61c2      	str	r2, [r0, #28]
    if(pObj->IO.Init != NULL)
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d001      	beq.n	80185c2 <MX25L6433F_RegisterBusIO+0x2e>
      ret = pObj->IO.Init();
 80185be:	4798      	blx	r3
}
 80185c0:	bd10      	pop	{r4, pc}
    ret = MX25L6433F_ERROR;
 80185c2:	2001      	movs	r0, #1
 80185c4:	4240      	negs	r0, r0
 80185c6:	e7fb      	b.n	80185c0 <MX25L6433F_RegisterBusIO+0x2c>

080185c8 <ST7789V_DeInit>:
  * @brief  De-Initialize the st7789v LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7789V_DeInit(ST7789V_Object_t *pObj)
{
 80185c8:	b510      	push	{r4, lr}
  return pObj->IO.DeInit();
 80185ca:	6843      	ldr	r3, [r0, #4]
 80185cc:	4798      	blx	r3
}
 80185ce:	bd10      	pop	{r4, pc}

080185d0 <ST7789V_GetOrientation>:
  */
int32_t ST7789V_GetOrientation(ST7789V_Object_t *pObj, uint32_t *Orientation)
{
  (void)pObj;

  *Orientation = ST7789VCtx.Orientation;
 80185d0:	4b02      	ldr	r3, [pc, #8]	; (80185dc <ST7789V_GetOrientation+0xc>)

  return ST7789V_OK;
}
 80185d2:	2000      	movs	r0, #0
  *Orientation = ST7789VCtx.Orientation;
 80185d4:	689b      	ldr	r3, [r3, #8]
 80185d6:	600b      	str	r3, [r1, #0]
}
 80185d8:	4770      	bx	lr
 80185da:	46c0      	nop			; (mov r8, r8)
 80185dc:	20007d24 	.word	0x20007d24

080185e0 <ST7789V_GetXSize>:
  */
int32_t ST7789V_GetXSize(ST7789V_Object_t *pObj, uint32_t *XSize)
{
  (void)pObj;

  *XSize = ST7789VCtx.Width;
 80185e0:	4b02      	ldr	r3, [pc, #8]	; (80185ec <ST7789V_GetXSize+0xc>)

  return ST7789V_OK;
}
 80185e2:	2000      	movs	r0, #0
  *XSize = ST7789VCtx.Width;
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	600b      	str	r3, [r1, #0]
}
 80185e8:	4770      	bx	lr
 80185ea:	46c0      	nop			; (mov r8, r8)
 80185ec:	20007d24 	.word	0x20007d24

080185f0 <ST7789V_GetYSize>:
  */
int32_t ST7789V_GetYSize(ST7789V_Object_t *pObj, uint32_t *YSize)
{
  (void)pObj;

  *YSize = ST7789VCtx.Height;
 80185f0:	4b02      	ldr	r3, [pc, #8]	; (80185fc <ST7789V_GetYSize+0xc>)

  return ST7789V_OK;
}
 80185f2:	2000      	movs	r0, #0
  *YSize = ST7789VCtx.Height;
 80185f4:	685b      	ldr	r3, [r3, #4]
 80185f6:	600b      	str	r3, [r1, #0]
}
 80185f8:	4770      	bx	lr
 80185fa:	46c0      	nop			; (mov r8, r8)
 80185fc:	20007d24 	.word	0x20007d24

08018600 <ST7789V_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7789V_ReadRegWrap(void *Handle, uint8_t* Reg, uint32_t Length)
{
 8018600:	0003      	movs	r3, r0
 8018602:	b510      	push	{r4, lr}
 8018604:	0008      	movs	r0, r1
 8018606:	0011      	movs	r1, r2
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;

  return pObj->IO.ReadReg(Reg, Length);
 8018608:	691b      	ldr	r3, [r3, #16]
 801860a:	4798      	blx	r3
}
 801860c:	bd10      	pop	{r4, pc}
 801860e:	46c0      	nop			; (mov r8, r8)

08018610 <ST7789V_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7789V_WriteRegWrap(void *Handle, uint8_t* Reg, uint32_t Length)
{
 8018610:	0003      	movs	r3, r0
 8018612:	b510      	push	{r4, lr}
 8018614:	0008      	movs	r0, r1
 8018616:	0011      	movs	r1, r2
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;

  return pObj->IO.WriteReg(Reg, Length);
 8018618:	68db      	ldr	r3, [r3, #12]
 801861a:	4798      	blx	r3
}
 801861c:	bd10      	pop	{r4, pc}
 801861e:	46c0      	nop			; (mov r8, r8)

08018620 <ST7789V_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7789V_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8018620:	0003      	movs	r3, r0
 8018622:	b510      	push	{r4, lr}
 8018624:	0008      	movs	r0, r1
 8018626:	0011      	movs	r1, r2
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;

  return pObj->IO.SendData(pData, Length);
 8018628:	695b      	ldr	r3, [r3, #20]
 801862a:	4798      	blx	r3
}
 801862c:	bd10      	pop	{r4, pc}
 801862e:	46c0      	nop			; (mov r8, r8)

08018630 <ST7789V_SendDataDMAWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7789V_SendDataDMAWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8018630:	0003      	movs	r3, r0
 8018632:	b510      	push	{r4, lr}
 8018634:	0008      	movs	r0, r1
 8018636:	0011      	movs	r1, r2
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;

  return pObj->IO.SendDataDMA(pData, Length);
 8018638:	699b      	ldr	r3, [r3, #24]
 801863a:	4798      	blx	r3
}
 801863c:	bd10      	pop	{r4, pc}
 801863e:	46c0      	nop			; (mov r8, r8)

08018640 <ST7789V_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7789V_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8018640:	0003      	movs	r3, r0
 8018642:	b510      	push	{r4, lr}
 8018644:	0008      	movs	r0, r1
 8018646:	0011      	movs	r1, r2
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;

  return pObj->IO.RecvData(pData, Length);
 8018648:	69db      	ldr	r3, [r3, #28]
 801864a:	4798      	blx	r3
}
 801864c:	bd10      	pop	{r4, pc}
 801864e:	46c0      	nop			; (mov r8, r8)

08018650 <ST7789V_RecvDataDMAWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7789V_RecvDataDMAWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8018650:	0003      	movs	r3, r0
 8018652:	b510      	push	{r4, lr}
 8018654:	0008      	movs	r0, r1
 8018656:	0011      	movs	r1, r2
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;

  return pObj->IO.RecvDataDMA(pData, Length);
 8018658:	6a1b      	ldr	r3, [r3, #32]
 801865a:	4798      	blx	r3
}
 801865c:	bd10      	pop	{r4, pc}
 801865e:	46c0      	nop			; (mov r8, r8)

08018660 <ST7789V_DisplayOn>:
{
 8018660:	b500      	push	{lr}
 8018662:	b083      	sub	sp, #12
  uint8_t reg = ST7789V_DISPLAY_ON;
 8018664:	466b      	mov	r3, sp
 8018666:	1dd9      	adds	r1, r3, #7
 8018668:	2329      	movs	r3, #41	; 0x29
  return st7789v_write_reg(&pObj->Ctx, &reg, 1);
 801866a:	2201      	movs	r2, #1
 801866c:	302c      	adds	r0, #44	; 0x2c
  uint8_t reg = ST7789V_DISPLAY_ON;
 801866e:	700b      	strb	r3, [r1, #0]
  return st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018670:	f000 fb38 	bl	8018ce4 <st7789v_write_reg>
}
 8018674:	b003      	add	sp, #12
 8018676:	bd00      	pop	{pc}

08018678 <ST7789V_DisplayOff>:
{
 8018678:	b500      	push	{lr}
 801867a:	b083      	sub	sp, #12
  uint8_t reg = ST7789V_DISPLAY_OFF;
 801867c:	466b      	mov	r3, sp
 801867e:	1dd9      	adds	r1, r3, #7
 8018680:	2328      	movs	r3, #40	; 0x28
  return st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018682:	2201      	movs	r2, #1
 8018684:	302c      	adds	r0, #44	; 0x2c
  uint8_t reg = ST7789V_DISPLAY_OFF;
 8018686:	700b      	strb	r3, [r1, #0]
  return st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018688:	f000 fb2c 	bl	8018ce4 <st7789v_write_reg>
}
 801868c:	b003      	add	sp, #12
 801868e:	bd00      	pop	{pc}

08018690 <ST7789V_SetOrientation>:
{
 8018690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018692:	46c6      	mov	lr, r8
  parameter = (uint8_t)OrientationTab[Orientation];
 8018694:	2306      	movs	r3, #6
{
 8018696:	b500      	push	{lr}
 8018698:	b082      	sub	sp, #8
  parameter = (uint8_t)OrientationTab[Orientation];
 801869a:	446b      	add	r3, sp
 801869c:	4698      	mov	r8, r3
 801869e:	4b18      	ldr	r3, [pc, #96]	; (8018700 <ST7789V_SetOrientation+0x70>)
 80186a0:	008a      	lsls	r2, r1, #2
 80186a2:	58d3      	ldr	r3, [r2, r3]
 80186a4:	4642      	mov	r2, r8
 80186a6:	7013      	strb	r3, [r2, #0]
  reg = ST7789V_MAC;
 80186a8:	466b      	mov	r3, sp
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80186aa:	0007      	movs	r7, r0
{
 80186ac:	000c      	movs	r4, r1
  reg = ST7789V_MAC;
 80186ae:	1dd9      	adds	r1, r3, #7
 80186b0:	2336      	movs	r3, #54	; 0x36
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80186b2:	372c      	adds	r7, #44	; 0x2c
 80186b4:	2201      	movs	r2, #1
{
 80186b6:	0006      	movs	r6, r0
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80186b8:	0038      	movs	r0, r7
  reg = ST7789V_MAC;
 80186ba:	700b      	strb	r3, [r1, #0]
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80186bc:	f000 fb12 	bl	8018ce4 <st7789v_write_reg>
  ret += st7789v_send_data(&pObj->Ctx, &parameter, 1);
 80186c0:	2201      	movs	r2, #1
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80186c2:	0005      	movs	r5, r0
  ret += st7789v_send_data(&pObj->Ctx, &parameter, 1);
 80186c4:	4641      	mov	r1, r8
 80186c6:	0038      	movs	r0, r7
 80186c8:	f000 fb12 	bl	8018cf0 <st7789v_send_data>
 80186cc:	1828      	adds	r0, r5, r0
  if(ret == ST7789V_OK)
 80186ce:	2800      	cmp	r0, #0
 80186d0:	d112      	bne.n	80186f8 <ST7789V_SetOrientation+0x68>
    ST7789VCtx.Orientation = Orientation;
 80186d2:	4b0c      	ldr	r3, [pc, #48]	; (8018704 <ST7789V_SetOrientation+0x74>)
 80186d4:	609c      	str	r4, [r3, #8]
    switch (Orientation)
 80186d6:	3c02      	subs	r4, #2
 80186d8:	2c01      	cmp	r4, #1
 80186da:	d909      	bls.n	80186f0 <ST7789V_SetOrientation+0x60>
        ST7789VCtx.Height = ST7789V_HEIGHT;
 80186dc:	22a0      	movs	r2, #160	; 0xa0
        ST7789VCtx.Width  = ST7789V_WIDTH;
 80186de:	21f0      	movs	r1, #240	; 0xf0
        ST7789VCtx.Height = ST7789V_HEIGHT;
 80186e0:	0052      	lsls	r2, r2, #1
 80186e2:	c306      	stmia	r3!, {r1, r2}
    pObj->XSize = ST7789VCtx.Width;
 80186e4:	64f1      	str	r1, [r6, #76]	; 0x4c
    pObj->YSize = ST7789VCtx.Height;
 80186e6:	6532      	str	r2, [r6, #80]	; 0x50
}
 80186e8:	b002      	add	sp, #8
 80186ea:	bc80      	pop	{r7}
 80186ec:	46b8      	mov	r8, r7
 80186ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ST7789VCtx.Width  = ST7789V_HEIGHT;
 80186f0:	21a0      	movs	r1, #160	; 0xa0
        ST7789VCtx.Height = ST7789V_WIDTH;
 80186f2:	22f0      	movs	r2, #240	; 0xf0
        ST7789VCtx.Width  = ST7789V_HEIGHT;
 80186f4:	0049      	lsls	r1, r1, #1
 80186f6:	e7f4      	b.n	80186e2 <ST7789V_SetOrientation+0x52>
    ret = ST7789V_ERROR;
 80186f8:	2001      	movs	r0, #1
 80186fa:	4240      	negs	r0, r0
  return ret;
 80186fc:	e7f4      	b.n	80186e8 <ST7789V_SetOrientation+0x58>
 80186fe:	46c0      	nop			; (mov r8, r8)
 8018700:	20000028 	.word	0x20000028
 8018704:	20007d24 	.word	0x20007d24

08018708 <ST7789V_SetDisplayWindow>:
{
 8018708:	b5f0      	push	{r4, r5, r6, r7, lr}
 801870a:	46ce      	mov	lr, r9
 801870c:	4647      	mov	r7, r8
 801870e:	b580      	push	{r7, lr}
 8018710:	b083      	sub	sp, #12
 8018712:	4690      	mov	r8, r2
 8018714:	4699      	mov	r9, r3
  uint8_t reg = ST7789V_CASET;
 8018716:	466a      	mov	r2, sp
 8018718:	232a      	movs	r3, #42	; 0x2a
 801871a:	70d3      	strb	r3, [r2, #3]
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 801871c:	466b      	mov	r3, sp
{
 801871e:	000e      	movs	r6, r1
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018720:	2201      	movs	r2, #1
 8018722:	1cd9      	adds	r1, r3, #3
 8018724:	302c      	adds	r0, #44	; 0x2c
  parameter [0] = (uint8_t)(Xpos >> 8U);
 8018726:	ad01      	add	r5, sp, #4
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018728:	0007      	movs	r7, r0
 801872a:	f000 fadb 	bl	8018ce4 <st7789v_write_reg>
  parameter [0] = (uint8_t)(Xpos >> 8U);
 801872e:	0a33      	lsrs	r3, r6, #8
 8018730:	702b      	strb	r3, [r5, #0]
  parameter [2] = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8018732:	464b      	mov	r3, r9
  parameter [1] = (uint8_t)(Xpos & 0xFFU);
 8018734:	b2f2      	uxtb	r2, r6
  parameter [2] = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8018736:	3b01      	subs	r3, #1
  parameter [1] = (uint8_t)(Xpos & 0xFFU);
 8018738:	706a      	strb	r2, [r5, #1]
  parameter [2] = (uint8_t)((Xpos + Width - 1U) >> 8U);
 801873a:	199e      	adds	r6, r3, r6
  parameter [3] = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 801873c:	18d2      	adds	r2, r2, r3
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 801873e:	0029      	movs	r1, r5
  parameter [3] = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8018740:	70ea      	strb	r2, [r5, #3]
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018742:	0004      	movs	r4, r0
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 8018744:	2204      	movs	r2, #4
 8018746:	0038      	movs	r0, r7
  parameter [2] = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8018748:	0a36      	lsrs	r6, r6, #8
 801874a:	70ae      	strb	r6, [r5, #2]
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 801874c:	f000 fad0 	bl	8018cf0 <st7789v_send_data>
  reg = ST7789V_RASET;
 8018750:	466a      	mov	r2, sp
 8018752:	232b      	movs	r3, #43	; 0x2b
 8018754:	70d3      	strb	r3, [r2, #3]
  ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018756:	466b      	mov	r3, sp
 8018758:	2201      	movs	r2, #1
 801875a:	1cd9      	adds	r1, r3, #3
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 801875c:	1824      	adds	r4, r4, r0
  ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 801875e:	0038      	movs	r0, r7
 8018760:	f000 fac0 	bl	8018ce4 <st7789v_write_reg>
  parameter [0] = (uint8_t)(Ypos >> 8U);
 8018764:	4643      	mov	r3, r8
  parameter [2] = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8018766:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  parameter [0] = (uint8_t)(Ypos >> 8U);
 8018768:	0a1b      	lsrs	r3, r3, #8
  parameter [2] = (uint8_t)((Ypos + Height - 1U) >> 8U);
 801876a:	1e51      	subs	r1, r2, #1
 801876c:	4642      	mov	r2, r8
  parameter [0] = (uint8_t)(Ypos >> 8U);
 801876e:	702b      	strb	r3, [r5, #0]
  parameter [1] = (uint8_t)(Ypos & 0xFFU);
 8018770:	4643      	mov	r3, r8
  parameter [2] = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8018772:	188a      	adds	r2, r1, r2
  parameter [1] = (uint8_t)(Ypos & 0xFFU);
 8018774:	b2db      	uxtb	r3, r3
  parameter [2] = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8018776:	0a12      	lsrs	r2, r2, #8
  parameter [1] = (uint8_t)(Ypos & 0xFFU);
 8018778:	706b      	strb	r3, [r5, #1]
  parameter [2] = (uint8_t)((Ypos + Height - 1U) >> 8U);
 801877a:	70aa      	strb	r2, [r5, #2]
  parameter [3] = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 801877c:	185b      	adds	r3, r3, r1
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 801877e:	2204      	movs	r2, #4
 8018780:	0029      	movs	r1, r5
  ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018782:	1824      	adds	r4, r4, r0
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 8018784:	0038      	movs	r0, r7
  parameter [3] = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8018786:	70eb      	strb	r3, [r5, #3]
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 8018788:	f000 fab2 	bl	8018cf0 <st7789v_send_data>
  reg = ST7789V_GRAM;
 801878c:	466a      	mov	r2, sp
 801878e:	232c      	movs	r3, #44	; 0x2c
 8018790:	70d3      	strb	r3, [r2, #3]
  ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018792:	466b      	mov	r3, sp
  ret += st7789v_send_data(&pObj->Ctx, parameter, 4);
 8018794:	1824      	adds	r4, r4, r0
  ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018796:	1cd9      	adds	r1, r3, #3
 8018798:	2201      	movs	r2, #1
 801879a:	0038      	movs	r0, r7
 801879c:	f000 faa2 	bl	8018ce4 <st7789v_write_reg>
 80187a0:	1820      	adds	r0, r4, r0
  if(ret != ST7789V_OK)
 80187a2:	1e43      	subs	r3, r0, #1
 80187a4:	4198      	sbcs	r0, r3
 80187a6:	4240      	negs	r0, r0
}
 80187a8:	b003      	add	sp, #12
 80187aa:	bcc0      	pop	{r6, r7}
 80187ac:	46b9      	mov	r9, r7
 80187ae:	46b0      	mov	r8, r6
 80187b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187b2:	46c0      	nop			; (mov r8, r8)

080187b4 <ST7789V_ReadID>:
  uint8_t data[4] = {ST7789V_READ_DISPLAY_ID, 0, 0, 0 };
 80187b4:	2304      	movs	r3, #4
{
 80187b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187b8:	b083      	sub	sp, #12
  uint8_t data[4] = {ST7789V_READ_DISPLAY_ID, 0, 0, 0 };
 80187ba:	ac01      	add	r4, sp, #4
{
 80187bc:	000d      	movs	r5, r1
  if(st7789v_recv_data(&pObj->Ctx, data, 4) != ST7789V_OK)
 80187be:	2204      	movs	r2, #4
 80187c0:	0021      	movs	r1, r4
 80187c2:	302c      	adds	r0, #44	; 0x2c
  uint8_t data[4] = {ST7789V_READ_DISPLAY_ID, 0, 0, 0 };
 80187c4:	9301      	str	r3, [sp, #4]
  if(st7789v_recv_data(&pObj->Ctx, data, 4) != ST7789V_OK)
 80187c6:	f000 fa99 	bl	8018cfc <st7789v_recv_data>
 80187ca:	2800      	cmp	r0, #0
 80187cc:	d134      	bne.n	8018838 <ST7789V_ReadID+0x84>
    *Id = ((data[1] << 16) | (data[2] << 8) | data[3]);
 80187ce:	7862      	ldrb	r2, [r4, #1]
 80187d0:	78a1      	ldrb	r1, [r4, #2]
 80187d2:	78e6      	ldrb	r6, [r4, #3]
 80187d4:	020f      	lsls	r7, r1, #8
 80187d6:	0413      	lsls	r3, r2, #16
 80187d8:	433b      	orrs	r3, r7
    if(*Id != ST7789V_ID)
 80187da:	4f19      	ldr	r7, [pc, #100]	; (8018840 <ST7789V_ReadID+0x8c>)
    *Id = ((data[1] << 16) | (data[2] << 8) | data[3]);
 80187dc:	4333      	orrs	r3, r6
 80187de:	602b      	str	r3, [r5, #0]
    if(*Id != ST7789V_ID)
 80187e0:	42bb      	cmp	r3, r7
 80187e2:	d014      	beq.n	801880e <ST7789V_ReadID+0x5a>
      data[0] <<= 1;
 80187e4:	7823      	ldrb	r3, [r4, #0]
      if(data[1] & 0x80)
 80187e6:	b254      	sxtb	r4, r2
      data[0] <<= 1;
 80187e8:	005b      	lsls	r3, r3, #1
 80187ea:	b2db      	uxtb	r3, r3
      if(data[1] & 0x80)
 80187ec:	2c00      	cmp	r4, #0
 80187ee:	db1b      	blt.n	8018828 <ST7789V_ReadID+0x74>
      data[1] <<= 1;
 80187f0:	0052      	lsls	r2, r2, #1
      if(data[2] & 0x80)
 80187f2:	b24c      	sxtb	r4, r1
      data[1] <<= 1;
 80187f4:	b2d2      	uxtb	r2, r2
      if(data[2] & 0x80)
 80187f6:	2c00      	cmp	r4, #0
 80187f8:	db0e      	blt.n	8018818 <ST7789V_ReadID+0x64>
      data[2] <<= 1;
 80187fa:	0049      	lsls	r1, r1, #1
      if(data[3] & 0x80)
 80187fc:	b276      	sxtb	r6, r6
      data[2] <<= 1;
 80187fe:	b2c9      	uxtb	r1, r1
      if(data[3] & 0x80)
 8018800:	2e00      	cmp	r6, #0
 8018802:	db06      	blt.n	8018812 <ST7789V_ReadID+0x5e>
      *Id = ((data[0] << 16) | (data[1] << 8) | data[2]);
 8018804:	041b      	lsls	r3, r3, #16
 8018806:	0212      	lsls	r2, r2, #8
 8018808:	431a      	orrs	r2, r3
 801880a:	4311      	orrs	r1, r2
 801880c:	6029      	str	r1, [r5, #0]
}
 801880e:	b003      	add	sp, #12
 8018810:	bdf0      	pop	{r4, r5, r6, r7, pc}
        data[2] |= 1;
 8018812:	2401      	movs	r4, #1
 8018814:	4321      	orrs	r1, r4
 8018816:	e7f5      	b.n	8018804 <ST7789V_ReadID+0x50>
        data[1] |= 1;
 8018818:	2401      	movs	r4, #1
      data[2] <<= 1;
 801881a:	0049      	lsls	r1, r1, #1
      if(data[3] & 0x80)
 801881c:	b276      	sxtb	r6, r6
        data[1] |= 1;
 801881e:	4322      	orrs	r2, r4
      data[2] <<= 1;
 8018820:	b2c9      	uxtb	r1, r1
      if(data[3] & 0x80)
 8018822:	2e00      	cmp	r6, #0
 8018824:	daee      	bge.n	8018804 <ST7789V_ReadID+0x50>
 8018826:	e7f4      	b.n	8018812 <ST7789V_ReadID+0x5e>
        data[0] |= 1;
 8018828:	2401      	movs	r4, #1
      data[1] <<= 1;
 801882a:	0052      	lsls	r2, r2, #1
        data[0] |= 1;
 801882c:	4323      	orrs	r3, r4
      if(data[2] & 0x80)
 801882e:	b24c      	sxtb	r4, r1
      data[1] <<= 1;
 8018830:	b2d2      	uxtb	r2, r2
      if(data[2] & 0x80)
 8018832:	2c00      	cmp	r4, #0
 8018834:	dae1      	bge.n	80187fa <ST7789V_ReadID+0x46>
 8018836:	e7ef      	b.n	8018818 <ST7789V_ReadID+0x64>
    ret = ST7789V_ERROR;
 8018838:	2001      	movs	r0, #1
 801883a:	4240      	negs	r0, r0
  return ret;
 801883c:	e7e7      	b.n	801880e <ST7789V_ReadID+0x5a>
 801883e:	46c0      	nop			; (mov r8, r8)
 8018840:	00858552 	.word	0x00858552

08018844 <ST7789V_Init>:
{
 8018844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018846:	4645      	mov	r5, r8
 8018848:	46de      	mov	lr, fp
 801884a:	4657      	mov	r7, sl
 801884c:	464e      	mov	r6, r9
 801884e:	b5e0      	push	{r5, r6, r7, lr}
 8018850:	0004      	movs	r4, r0
 8018852:	4688      	mov	r8, r1
 8018854:	b08b      	sub	sp, #44	; 0x2c
  if((pObj == NULL) || (pInitParams->Orientation > ST7789V_ORIENTATION_LANDSCAPE_ROT180))
 8018856:	2800      	cmp	r0, #0
 8018858:	d100      	bne.n	801885c <ST7789V_Init+0x18>
 801885a:	e1ea      	b.n	8018c32 <ST7789V_Init+0x3ee>
 801885c:	68cb      	ldr	r3, [r1, #12]
 801885e:	2b03      	cmp	r3, #3
 8018860:	d900      	bls.n	8018864 <ST7789V_Init+0x20>
 8018862:	e1e6      	b.n	8018c32 <ST7789V_Init+0x3ee>
  else if (pObj->IsInitialized == 0)
 8018864:	2348      	movs	r3, #72	; 0x48
 8018866:	5cc3      	ldrb	r3, [r0, r3]
  int32_t ret = ST7789V_OK;
 8018868:	2000      	movs	r0, #0
  else if (pObj->IsInitialized == 0)
 801886a:	2b00      	cmp	r3, #0
 801886c:	d006      	beq.n	801887c <ST7789V_Init+0x38>
}
 801886e:	b00b      	add	sp, #44	; 0x2c
 8018870:	bcf0      	pop	{r4, r5, r6, r7}
 8018872:	46bb      	mov	fp, r7
 8018874:	46b2      	mov	sl, r6
 8018876:	46a9      	mov	r9, r5
 8018878:	46a0      	mov	r8, r4
 801887a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    reg = ST7789V_SPLIN;
 801887c:	ab02      	add	r3, sp, #8
 801887e:	469c      	mov	ip, r3
 8018880:	250d      	movs	r5, #13
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018882:	0026      	movs	r6, r4
    reg = ST7789V_SPLIN;
 8018884:	2310      	movs	r3, #16
 8018886:	4465      	add	r5, ip
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018888:	362c      	adds	r6, #44	; 0x2c
 801888a:	2201      	movs	r2, #1
 801888c:	0029      	movs	r1, r5
 801888e:	0030      	movs	r0, r6
    reg = ST7789V_SPLIN;
 8018890:	702b      	strb	r3, [r5, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018892:	f000 fa27 	bl	8018ce4 <st7789v_write_reg>
  * @retval Component error status
  */
static int32_t ST7789V_Delay(ST7789V_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8018896:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018898:	4681      	mov	r9, r0
  tickstart = pObj->IO.GetTick();
 801889a:	4798      	blx	r3
 801889c:	0007      	movs	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 801889e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188a0:	4798      	blx	r3
 80188a2:	1bc0      	subs	r0, r0, r7
 80188a4:	2809      	cmp	r0, #9
 80188a6:	d9fa      	bls.n	801889e <ST7789V_Init+0x5a>
    reg = ST7789V_SWRESET;
 80188a8:	2301      	movs	r3, #1
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80188aa:	2201      	movs	r2, #1
 80188ac:	0029      	movs	r1, r5
 80188ae:	0030      	movs	r0, r6
    reg = ST7789V_SWRESET;
 80188b0:	702b      	strb	r3, [r5, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80188b2:	f000 fa17 	bl	8018ce4 <st7789v_write_reg>
  tickstart = pObj->IO.GetTick();
 80188b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80188b8:	4481      	add	r9, r0
  tickstart = pObj->IO.GetTick();
 80188ba:	4798      	blx	r3
 80188bc:	0007      	movs	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80188be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188c0:	4798      	blx	r3
 80188c2:	1bc0      	subs	r0, r0, r7
 80188c4:	28c7      	cmp	r0, #199	; 0xc7
 80188c6:	d9fa      	bls.n	80188be <ST7789V_Init+0x7a>
    reg = ST7789V_SLEEP_OUT;
 80188c8:	2311      	movs	r3, #17
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80188ca:	2201      	movs	r2, #1
 80188cc:	0029      	movs	r1, r5
 80188ce:	0030      	movs	r0, r6
    reg = ST7789V_SLEEP_OUT;
 80188d0:	702b      	strb	r3, [r5, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80188d2:	f000 fa07 	bl	8018ce4 <st7789v_write_reg>
  tickstart = pObj->IO.GetTick();
 80188d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80188d8:	4481      	add	r9, r0
  tickstart = pObj->IO.GetTick();
 80188da:	4798      	blx	r3
 80188dc:	0007      	movs	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80188de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188e0:	4798      	blx	r3
 80188e2:	1bc0      	subs	r0, r0, r7
 80188e4:	2877      	cmp	r0, #119	; 0x77
 80188e6:	d9fa      	bls.n	80188de <ST7789V_Init+0x9a>
    reg = ST7789V_NORMAL_MODE_ON;
 80188e8:	2313      	movs	r3, #19
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80188ea:	2201      	movs	r2, #1
 80188ec:	0029      	movs	r1, r5
 80188ee:	0030      	movs	r0, r6
    reg = ST7789V_NORMAL_MODE_ON;
 80188f0:	702b      	strb	r3, [r5, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80188f2:	f000 f9f7 	bl	8018ce4 <st7789v_write_reg>
  tickstart = pObj->IO.GetTick();
 80188f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80188f8:	4481      	add	r9, r0
  tickstart = pObj->IO.GetTick();
 80188fa:	4798      	blx	r3
 80188fc:	0007      	movs	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80188fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018900:	4798      	blx	r3
 8018902:	1bc0      	subs	r0, r0, r7
 8018904:	2863      	cmp	r0, #99	; 0x63
 8018906:	d9fa      	bls.n	80188fe <ST7789V_Init+0xba>
    reg = ST7789V_RAM_CTRL;
 8018908:	23b0      	movs	r3, #176	; 0xb0
 801890a:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x00;
 801890c:	2300      	movs	r3, #0
 801890e:	af06      	add	r7, sp, #24
 8018910:	703b      	strb	r3, [r7, #0]
    if(pInitParams->Endian == ST7789V_ENDIAN_LITTLE)
 8018912:	4643      	mov	r3, r8
 8018914:	781b      	ldrb	r3, [r3, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018916:	0029      	movs	r1, r5
      parameter[1] = 0xF0;
 8018918:	3b01      	subs	r3, #1
 801891a:	425a      	negs	r2, r3
 801891c:	4153      	adcs	r3, r2
 801891e:	2208      	movs	r2, #8
 8018920:	00db      	lsls	r3, r3, #3
 8018922:	33f0      	adds	r3, #240	; 0xf0
 8018924:	707b      	strb	r3, [r7, #1]
 8018926:	4692      	mov	sl, r2
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018928:	0030      	movs	r0, r6
 801892a:	3a07      	subs	r2, #7
 801892c:	f000 f9da 	bl	8018ce4 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8018930:	2202      	movs	r2, #2
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018932:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8018934:	0039      	movs	r1, r7
 8018936:	0030      	movs	r0, r6
 8018938:	f000 f9da 	bl	8018cf0 <st7789v_send_data>
 801893c:	0003      	movs	r3, r0
 801893e:	444b      	add	r3, r9
 8018940:	9303      	str	r3, [sp, #12]
    if(pInitParams->SwapRB)
 8018942:	4643      	mov	r3, r8
 8018944:	685b      	ldr	r3, [r3, #4]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d000      	beq.n	801894c <ST7789V_Init+0x108>
 801894a:	e108      	b.n	8018b5e <ST7789V_Init+0x31a>
 801894c:	4bbc      	ldr	r3, [pc, #752]	; (8018c40 <ST7789V_Init+0x3fc>)
 801894e:	4699      	mov	r9, r3
    ret += ST7789V_SetOrientation(pObj, pInitParams->Orientation);
 8018950:	4643      	mov	r3, r8
 8018952:	68db      	ldr	r3, [r3, #12]
  parameter = (uint8_t)OrientationTab[Orientation];
 8018954:	aa02      	add	r2, sp, #8
 8018956:	4694      	mov	ip, r2
    ret += ST7789V_SetOrientation(pObj, pInitParams->Orientation);
 8018958:	469a      	mov	sl, r3
  parameter = (uint8_t)OrientationTab[Orientation];
 801895a:	230e      	movs	r3, #14
 801895c:	4463      	add	r3, ip
 801895e:	469b      	mov	fp, r3
 8018960:	4653      	mov	r3, sl
 8018962:	464a      	mov	r2, r9
 8018964:	009b      	lsls	r3, r3, #2
 8018966:	58d3      	ldr	r3, [r2, r3]
 8018968:	465a      	mov	r2, fp
  reg = ST7789V_MAC;
 801896a:	210f      	movs	r1, #15
  parameter = (uint8_t)OrientationTab[Orientation];
 801896c:	7013      	strb	r3, [r2, #0]
  reg = ST7789V_MAC;
 801896e:	2336      	movs	r3, #54	; 0x36
 8018970:	4461      	add	r1, ip
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018972:	2201      	movs	r2, #1
 8018974:	0030      	movs	r0, r6
  reg = ST7789V_MAC;
 8018976:	700b      	strb	r3, [r1, #0]
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018978:	f000 f9b4 	bl	8018ce4 <st7789v_write_reg>
  ret += st7789v_send_data(&pObj->Ctx, &parameter, 1);
 801897c:	2201      	movs	r2, #1
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 801897e:	4681      	mov	r9, r0
  ret += st7789v_send_data(&pObj->Ctx, &parameter, 1);
 8018980:	4659      	mov	r1, fp
 8018982:	0030      	movs	r0, r6
 8018984:	f000 f9b4 	bl	8018cf0 <st7789v_send_data>
 8018988:	4448      	add	r0, r9
  if(ret == ST7789V_OK)
 801898a:	2800      	cmp	r0, #0
 801898c:	d000      	beq.n	8018990 <ST7789V_Init+0x14c>
 801898e:	e153      	b.n	8018c38 <ST7789V_Init+0x3f4>
    ST7789VCtx.Orientation = Orientation;
 8018990:	4653      	mov	r3, sl
 8018992:	4aac      	ldr	r2, [pc, #688]	; (8018c44 <ST7789V_Init+0x400>)
 8018994:	6093      	str	r3, [r2, #8]
    switch (Orientation)
 8018996:	3b02      	subs	r3, #2
 8018998:	2b01      	cmp	r3, #1
 801899a:	d800      	bhi.n	801899e <ST7789V_Init+0x15a>
 801899c:	e10a      	b.n	8018bb4 <ST7789V_Init+0x370>
        ST7789VCtx.Height = ST7789V_HEIGHT;
 801899e:	23a0      	movs	r3, #160	; 0xa0
        ST7789VCtx.Width  = ST7789V_WIDTH;
 80189a0:	21f0      	movs	r1, #240	; 0xf0
        ST7789VCtx.Height = ST7789V_HEIGHT;
 80189a2:	005b      	lsls	r3, r3, #1
 80189a4:	c20a      	stmia	r2!, {r1, r3}
    pObj->XSize = ST7789VCtx.Width;
 80189a6:	64e1      	str	r1, [r4, #76]	; 0x4c
    pObj->YSize = ST7789VCtx.Height;
 80189a8:	6523      	str	r3, [r4, #80]	; 0x50
    ret += ST7789V_SetDisplayWindow(pObj, 0U, 0U, ST7789V_WIDTH, ST7789V_HEIGHT);
 80189aa:	23a0      	movs	r3, #160	; 0xa0
 80189ac:	005b      	lsls	r3, r3, #1
 80189ae:	2200      	movs	r2, #0
 80189b0:	2100      	movs	r1, #0
 80189b2:	9300      	str	r3, [sp, #0]
 80189b4:	0020      	movs	r0, r4
 80189b6:	3b50      	subs	r3, #80	; 0x50
 80189b8:	f7ff fea6 	bl	8018708 <ST7789V_SetDisplayWindow>
 80189bc:	9b03      	ldr	r3, [sp, #12]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80189be:	2201      	movs	r2, #1
    ret += ST7789V_SetDisplayWindow(pObj, 0U, 0U, ST7789V_WIDTH, ST7789V_HEIGHT);
 80189c0:	4699      	mov	r9, r3
    reg = ST7789V_PIXEL_FORMAT;
 80189c2:	233a      	movs	r3, #58	; 0x3a
 80189c4:	702b      	strb	r3, [r5, #0]
    parameter[0] = (uint8_t) pInitParams->ColorCoding;
 80189c6:	4643      	mov	r3, r8
 80189c8:	689b      	ldr	r3, [r3, #8]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80189ca:	0029      	movs	r1, r5
    parameter[0] = (uint8_t) pInitParams->ColorCoding;
 80189cc:	703b      	strb	r3, [r7, #0]
    ret += ST7789V_SetDisplayWindow(pObj, 0U, 0U, ST7789V_WIDTH, ST7789V_HEIGHT);
 80189ce:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80189d0:	0030      	movs	r0, r6
 80189d2:	f000 f987 	bl	8018ce4 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 80189d6:	2201      	movs	r2, #1
 80189d8:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80189da:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 80189dc:	0030      	movs	r0, r6
 80189de:	f000 f987 	bl	8018cf0 <st7789v_send_data>
    reg = ST7789V_FRAME_RATE_CTRL2;
 80189e2:	23c6      	movs	r3, #198	; 0xc6
 80189e4:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x0F; /* Default is 60 Hz */
 80189e6:	3bb7      	subs	r3, #183	; 0xb7
 80189e8:	703b      	strb	r3, [r7, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80189ea:	2201      	movs	r2, #1
 80189ec:	0029      	movs	r1, r5
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 80189ee:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80189f0:	0030      	movs	r0, r6
 80189f2:	f000 f977 	bl	8018ce4 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 80189f6:	2201      	movs	r2, #1
 80189f8:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80189fa:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 80189fc:	0030      	movs	r0, r6
 80189fe:	f000 f977 	bl	8018cf0 <st7789v_send_data>
    reg = ST7789V_PORCH_CTRL;
 8018a02:	23b2      	movs	r3, #178	; 0xb2
 8018a04:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x0C;
 8018a06:	4b90      	ldr	r3, [pc, #576]	; (8018c48 <ST7789V_Init+0x404>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a08:	2201      	movs	r2, #1
    parameter[0] = 0x0C;
 8018a0a:	9306      	str	r3, [sp, #24]
    parameter[4] = 0x33;
 8018a0c:	2333      	movs	r3, #51	; 0x33
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a0e:	0029      	movs	r1, r5
    parameter[4] = 0x33;
 8018a10:	713b      	strb	r3, [r7, #4]
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018a12:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a14:	0030      	movs	r0, r6
 8018a16:	f000 f965 	bl	8018ce4 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 5);
 8018a1a:	2205      	movs	r2, #5
 8018a1c:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a1e:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 5);
 8018a20:	0030      	movs	r0, r6
 8018a22:	f000 f965 	bl	8018cf0 <st7789v_send_data>
    reg = ST7789V_GATE_CTRL;
 8018a26:	23b7      	movs	r3, #183	; 0xb7
 8018a28:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x35;
 8018a2a:	3b82      	subs	r3, #130	; 0x82
 8018a2c:	703b      	strb	r3, [r7, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a2e:	2201      	movs	r2, #1
 8018a30:	0029      	movs	r1, r5
    ret += st7789v_send_data(&pObj->Ctx, parameter, 5);
 8018a32:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a34:	0030      	movs	r0, r6
    parameter[0] = 0x35;
 8018a36:	469a      	mov	sl, r3
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a38:	f000 f954 	bl	8018ce4 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018a3c:	2201      	movs	r2, #1
 8018a3e:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a40:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018a42:	0030      	movs	r0, r6
 8018a44:	f000 f954 	bl	8018cf0 <st7789v_send_data>
    reg = ST7789V_VCOM_SET;
 8018a48:	23bb      	movs	r3, #187	; 0xbb
 8018a4a:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x1F;
 8018a4c:	3b9c      	subs	r3, #156	; 0x9c
 8018a4e:	703b      	strb	r3, [r7, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a50:	2201      	movs	r2, #1
 8018a52:	0029      	movs	r1, r5
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018a54:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a56:	0030      	movs	r0, r6
 8018a58:	f000 f944 	bl	8018ce4 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018a5c:	2201      	movs	r2, #1
 8018a5e:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a60:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018a62:	0030      	movs	r0, r6
 8018a64:	f000 f944 	bl	8018cf0 <st7789v_send_data>
    reg = ST7789V_LCM_CTRL;
 8018a68:	23c0      	movs	r3, #192	; 0xc0
 8018a6a:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x2C;
 8018a6c:	3b94      	subs	r3, #148	; 0x94
 8018a6e:	703b      	strb	r3, [r7, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a70:	2201      	movs	r2, #1
 8018a72:	0029      	movs	r1, r5
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018a74:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a76:	0030      	movs	r0, r6
 8018a78:	f000 f934 	bl	8018ce4 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018a7c:	2201      	movs	r2, #1
 8018a7e:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a80:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018a82:	0030      	movs	r0, r6
 8018a84:	f000 f934 	bl	8018cf0 <st7789v_send_data>
    reg = ST7789V_VDV_VRH_EN;
 8018a88:	23c2      	movs	r3, #194	; 0xc2
 8018a8a:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x01;
 8018a8c:	4b6f      	ldr	r3, [pc, #444]	; (8018c4c <ST7789V_Init+0x408>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a8e:	2201      	movs	r2, #1
    parameter[0] = 0x01;
 8018a90:	803b      	strh	r3, [r7, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a92:	0029      	movs	r1, r5
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018a94:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018a96:	0030      	movs	r0, r6
 8018a98:	f000 f924 	bl	8018ce4 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8018a9c:	2202      	movs	r2, #2
 8018a9e:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018aa0:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8018aa2:	0030      	movs	r0, r6
 8018aa4:	f000 f924 	bl	8018cf0 <st7789v_send_data>
    reg = ST7789V_VDV_SET;
 8018aa8:	23c4      	movs	r3, #196	; 0xc4
 8018aaa:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0x20;
 8018aac:	3ba4      	subs	r3, #164	; 0xa4
 8018aae:	703b      	strb	r3, [r7, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018ab0:	2201      	movs	r2, #1
 8018ab2:	0029      	movs	r1, r5
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8018ab4:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018ab6:	0030      	movs	r0, r6
 8018ab8:	f000 f914 	bl	8018ce4 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018abc:	2201      	movs	r2, #1
 8018abe:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018ac0:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018ac2:	0030      	movs	r0, r6
 8018ac4:	f000 f914 	bl	8018cf0 <st7789v_send_data>
    reg = ST7789V_POWER_CTRL;
 8018ac8:	23d0      	movs	r3, #208	; 0xd0
 8018aca:	702b      	strb	r3, [r5, #0]
    parameter[0] = 0xA4;
 8018acc:	4b60      	ldr	r3, [pc, #384]	; (8018c50 <ST7789V_Init+0x40c>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018ace:	2201      	movs	r2, #1
    parameter[0] = 0xA4;
 8018ad0:	803b      	strh	r3, [r7, #0]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018ad2:	0029      	movs	r1, r5
    ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018ad4:	4481      	add	r9, r0
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018ad6:	0030      	movs	r0, r6
 8018ad8:	f000 f904 	bl	8018ce4 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8018adc:	2202      	movs	r2, #2
 8018ade:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018ae0:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8018ae2:	0030      	movs	r0, r6
 8018ae4:	f000 f904 	bl	8018cf0 <st7789v_send_data>
    reg = ST7789V_PV_GAMMA_CTRL;
 8018ae8:	23e0      	movs	r3, #224	; 0xe0
 8018aea:	702b      	strb	r3, [r5, #0]
    parameter[0]  = 0xD0;
 8018aec:	4b59      	ldr	r3, [pc, #356]	; (8018c54 <ST7789V_Init+0x410>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018aee:	2201      	movs	r2, #1
    parameter[0]  = 0xD0;
 8018af0:	9306      	str	r3, [sp, #24]
 8018af2:	4b59      	ldr	r3, [pc, #356]	; (8018c58 <ST7789V_Init+0x414>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018af4:	0029      	movs	r1, r5
    parameter[0]  = 0xD0;
 8018af6:	9307      	str	r3, [sp, #28]
 8018af8:	4b58      	ldr	r3, [pc, #352]	; (8018c5c <ST7789V_Init+0x418>)
    ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8018afa:	4481      	add	r9, r0
    parameter[0]  = 0xD0;
 8018afc:	9308      	str	r3, [sp, #32]
    parameter[12] = 0x29;
 8018afe:	4b58      	ldr	r3, [pc, #352]	; (8018c60 <ST7789V_Init+0x41c>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018b00:	0030      	movs	r0, r6
    parameter[12] = 0x29;
 8018b02:	81bb      	strh	r3, [r7, #12]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018b04:	f000 f8ee 	bl	8018ce4 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 14);
 8018b08:	220e      	movs	r2, #14
 8018b0a:	0039      	movs	r1, r7
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018b0c:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 14);
 8018b0e:	0030      	movs	r0, r6
 8018b10:	f000 f8ee 	bl	8018cf0 <st7789v_send_data>
    reg = ST7789V_NV_GAMMA_CTRL;
 8018b14:	23e1      	movs	r3, #225	; 0xe1
 8018b16:	702b      	strb	r3, [r5, #0]
    parameter[0]  = 0xD0;
 8018b18:	4b52      	ldr	r3, [pc, #328]	; (8018c64 <ST7789V_Init+0x420>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018b1a:	2201      	movs	r2, #1
    parameter[0]  = 0xD0;
 8018b1c:	9306      	str	r3, [sp, #24]
 8018b1e:	4b52      	ldr	r3, [pc, #328]	; (8018c68 <ST7789V_Init+0x424>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018b20:	0029      	movs	r1, r5
    parameter[0]  = 0xD0;
 8018b22:	9307      	str	r3, [sp, #28]
 8018b24:	4b51      	ldr	r3, [pc, #324]	; (8018c6c <ST7789V_Init+0x428>)
    ret += st7789v_send_data(&pObj->Ctx, parameter, 14);
 8018b26:	4481      	add	r9, r0
    parameter[0]  = 0xD0;
 8018b28:	9308      	str	r3, [sp, #32]
    parameter[12] = 0x2F;
 8018b2a:	4b51      	ldr	r3, [pc, #324]	; (8018c70 <ST7789V_Init+0x42c>)
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018b2c:	0030      	movs	r0, r6
    parameter[12] = 0x2F;
 8018b2e:	81bb      	strh	r3, [r7, #12]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018b30:	f000 f8d8 	bl	8018ce4 <st7789v_write_reg>
    ret += st7789v_send_data(&pObj->Ctx, parameter, 14);
 8018b34:	220e      	movs	r2, #14
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018b36:	4481      	add	r9, r0
    ret += st7789v_send_data(&pObj->Ctx, parameter, 14);
 8018b38:	0039      	movs	r1, r7
 8018b3a:	0030      	movs	r0, r6
 8018b3c:	f000 f8d8 	bl	8018cf0 <st7789v_send_data>
    if(pInitParams->TEMode == ST7789V_TE_MODE_1)
 8018b40:	4643      	mov	r3, r8
 8018b42:	7d1b      	ldrb	r3, [r3, #20]
    ret += st7789v_send_data(&pObj->Ctx, parameter, 14);
 8018b44:	4481      	add	r9, r0
    if(pInitParams->TEMode == ST7789V_TE_MODE_1)
 8018b46:	2b01      	cmp	r3, #1
 8018b48:	d038      	beq.n	8018bbc <ST7789V_Init+0x378>
    else if(pInitParams->TEMode == ST7789V_TE_MODE_2)
 8018b4a:	2b02      	cmp	r3, #2
 8018b4c:	d05d      	beq.n	8018c0a <ST7789V_Init+0x3c6>
    pObj->IsInitialized = 1U;
 8018b4e:	2348      	movs	r3, #72	; 0x48
 8018b50:	2201      	movs	r2, #1
  if(ret != ST7789V_OK)
 8018b52:	4648      	mov	r0, r9
    pObj->IsInitialized = 1U;
 8018b54:	54e2      	strb	r2, [r4, r3]
  if(ret != ST7789V_OK)
 8018b56:	1e43      	subs	r3, r0, #1
 8018b58:	4198      	sbcs	r0, r3
 8018b5a:	4240      	negs	r0, r0
  return ret;
 8018b5c:	e687      	b.n	801886e <ST7789V_Init+0x2a>
        OrientationTab[i] |= 0x08;
 8018b5e:	4b38      	ldr	r3, [pc, #224]	; (8018c40 <ST7789V_Init+0x3fc>)
 8018b60:	4652      	mov	r2, sl
 8018b62:	4699      	mov	r9, r3
 8018b64:	681b      	ldr	r3, [r3, #0]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018b66:	0029      	movs	r1, r5
        OrientationTab[i] |= 0x08;
 8018b68:	4313      	orrs	r3, r2
 8018b6a:	464a      	mov	r2, r9
 8018b6c:	6013      	str	r3, [r2, #0]
 8018b6e:	6853      	ldr	r3, [r2, #4]
 8018b70:	4652      	mov	r2, sl
 8018b72:	4313      	orrs	r3, r2
 8018b74:	464a      	mov	r2, r9
 8018b76:	6053      	str	r3, [r2, #4]
 8018b78:	6893      	ldr	r3, [r2, #8]
 8018b7a:	4652      	mov	r2, sl
 8018b7c:	4313      	orrs	r3, r2
 8018b7e:	464a      	mov	r2, r9
 8018b80:	6093      	str	r3, [r2, #8]
 8018b82:	4653      	mov	r3, sl
 8018b84:	68d2      	ldr	r2, [r2, #12]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018b86:	0030      	movs	r0, r6
        OrientationTab[i] |= 0x08;
 8018b88:	4313      	orrs	r3, r2
 8018b8a:	464a      	mov	r2, r9
 8018b8c:	60d3      	str	r3, [r2, #12]
      reg = ST7789V_LCM_CTRL;
 8018b8e:	23c0      	movs	r3, #192	; 0xc0
 8018b90:	702b      	strb	r3, [r5, #0]
      parameter[0] = 0x0C;
 8018b92:	3bb4      	subs	r3, #180	; 0xb4
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018b94:	2201      	movs	r2, #1
      parameter[0] = 0x0C;
 8018b96:	703b      	strb	r3, [r7, #0]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018b98:	f000 f8a4 	bl	8018ce4 <st7789v_write_reg>
 8018b9c:	9b03      	ldr	r3, [sp, #12]
      ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018b9e:	2201      	movs	r2, #1
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018ba0:	469a      	mov	sl, r3
      ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018ba2:	0039      	movs	r1, r7
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018ba4:	4482      	add	sl, r0
      ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018ba6:	0030      	movs	r0, r6
 8018ba8:	f000 f8a2 	bl	8018cf0 <st7789v_send_data>
 8018bac:	0003      	movs	r3, r0
 8018bae:	4453      	add	r3, sl
 8018bb0:	9303      	str	r3, [sp, #12]
 8018bb2:	e6cd      	b.n	8018950 <ST7789V_Init+0x10c>
        ST7789VCtx.Width  = ST7789V_HEIGHT;
 8018bb4:	21a0      	movs	r1, #160	; 0xa0
        ST7789VCtx.Height = ST7789V_WIDTH;
 8018bb6:	23f0      	movs	r3, #240	; 0xf0
        ST7789VCtx.Width  = ST7789V_HEIGHT;
 8018bb8:	0049      	lsls	r1, r1, #1
 8018bba:	e6f3      	b.n	80189a4 <ST7789V_Init+0x160>
      reg = ST7789V_SET_TEAR_SCANLINE;
 8018bbc:	3343      	adds	r3, #67	; 0x43
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018bbe:	2201      	movs	r2, #1
 8018bc0:	0029      	movs	r1, r5
 8018bc2:	0030      	movs	r0, r6
      reg = ST7789V_SET_TEAR_SCANLINE;
 8018bc4:	702b      	strb	r3, [r5, #0]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018bc6:	f000 f88d 	bl	8018ce4 <st7789v_write_reg>
      parameter[0] = (pInitParams->TEScanline & 0x100);
 8018bca:	2300      	movs	r3, #0
 8018bcc:	469b      	mov	fp, r3
 8018bce:	703b      	strb	r3, [r7, #0]
      parameter[1] = (pInitParams->TEScanline & 0x0FF);
 8018bd0:	4643      	mov	r3, r8
 8018bd2:	691b      	ldr	r3, [r3, #16]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018bd4:	4481      	add	r9, r0
      parameter[1] = (pInitParams->TEScanline & 0x0FF);
 8018bd6:	707b      	strb	r3, [r7, #1]
      ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8018bd8:	2202      	movs	r2, #2
 8018bda:	0039      	movs	r1, r7
 8018bdc:	0030      	movs	r0, r6
 8018bde:	f000 f887 	bl	8018cf0 <st7789v_send_data>
      reg = ST7789V_TEON;
 8018be2:	4653      	mov	r3, sl
 8018be4:	702b      	strb	r3, [r5, #0]
      parameter[0] = 0x00; /* VSYNC Only */
 8018be6:	465b      	mov	r3, fp
      ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8018be8:	4481      	add	r9, r0
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018bea:	0029      	movs	r1, r5
 8018bec:	2201      	movs	r2, #1
      parameter[0] = 0x01; /* VSYNC + HSYNC */
 8018bee:	703b      	strb	r3, [r7, #0]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018bf0:	0030      	movs	r0, r6
 8018bf2:	f000 f877 	bl	8018ce4 <st7789v_write_reg>
 8018bf6:	4448      	add	r0, r9
 8018bf8:	0005      	movs	r5, r0
      ret += st7789v_send_data(&pObj->Ctx, parameter, 1);
 8018bfa:	2201      	movs	r2, #1
 8018bfc:	0039      	movs	r1, r7
 8018bfe:	0030      	movs	r0, r6
 8018c00:	f000 f876 	bl	8018cf0 <st7789v_send_data>
 8018c04:	46a9      	mov	r9, r5
 8018c06:	4481      	add	r9, r0
 8018c08:	e7a1      	b.n	8018b4e <ST7789V_Init+0x30a>
      reg = ST7789V_SET_TEAR_SCANLINE;
 8018c0a:	3342      	adds	r3, #66	; 0x42
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018c0c:	2201      	movs	r2, #1
 8018c0e:	0029      	movs	r1, r5
 8018c10:	0030      	movs	r0, r6
      reg = ST7789V_SET_TEAR_SCANLINE;
 8018c12:	702b      	strb	r3, [r5, #0]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018c14:	f000 f866 	bl	8018ce4 <st7789v_write_reg>
      parameter[0] = 0;
 8018c18:	2300      	movs	r3, #0
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8018c1a:	4481      	add	r9, r0
      parameter[0] = 0;
 8018c1c:	803b      	strh	r3, [r7, #0]
      ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8018c1e:	2202      	movs	r2, #2
 8018c20:	0039      	movs	r1, r7
 8018c22:	0030      	movs	r0, r6
 8018c24:	f000 f864 	bl	8018cf0 <st7789v_send_data>
      reg = ST7789V_TEON;
 8018c28:	4653      	mov	r3, sl
      ret += st7789v_send_data(&pObj->Ctx, parameter, 2);
 8018c2a:	4481      	add	r9, r0
      reg = ST7789V_TEON;
 8018c2c:	702b      	strb	r3, [r5, #0]
      parameter[0] = 0x01; /* VSYNC + HSYNC */
 8018c2e:	2301      	movs	r3, #1
 8018c30:	e7db      	b.n	8018bea <ST7789V_Init+0x3a6>
    ret = ST7789V_ERROR;
 8018c32:	2001      	movs	r0, #1
 8018c34:	4240      	negs	r0, r0
 8018c36:	e61a      	b.n	801886e <ST7789V_Init+0x2a>
    ret += ST7789V_SetOrientation(pObj, pInitParams->Orientation);
 8018c38:	9b03      	ldr	r3, [sp, #12]
 8018c3a:	3b01      	subs	r3, #1
 8018c3c:	9303      	str	r3, [sp, #12]
 8018c3e:	e6b4      	b.n	80189aa <ST7789V_Init+0x166>
 8018c40:	20000028 	.word	0x20000028
 8018c44:	20007d24 	.word	0x20007d24
 8018c48:	33000c0c 	.word	0x33000c0c
 8018c4c:	ffffc301 	.word	0xffffc301
 8018c50:	ffffa1a4 	.word	0xffffa1a4
 8018c54:	081108d0 	.word	0x081108d0
 8018c58:	3339150c 	.word	0x3339150c
 8018c5c:	14133650 	.word	0x14133650
 8018c60:	00002d29 	.word	0x00002d29
 8018c64:	081008d0 	.word	0x081008d0
 8018c68:	44390606 	.word	0x44390606
 8018c6c:	14160b51 	.word	0x14160b51
 8018c70:	0000312f 	.word	0x0000312f

08018c74 <ST7789V_RegisterBusIO>:
{
 8018c74:	b510      	push	{r4, lr}
  if(pObj == NULL)
 8018c76:	2800      	cmp	r0, #0
 8018c78:	d024      	beq.n	8018cc4 <ST7789V_RegisterBusIO+0x50>
    pObj->IO.Init         = pIO->Init;
 8018c7a:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit       = pIO->DeInit;
 8018c7c:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init         = pIO->Init;
 8018c7e:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit       = pIO->DeInit;
 8018c80:	6042      	str	r2, [r0, #4]
    pObj->IO.Address      = pIO->Address;
 8018c82:	890a      	ldrh	r2, [r1, #8]
 8018c84:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg     = pIO->WriteReg;
 8018c86:	68ca      	ldr	r2, [r1, #12]
 8018c88:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg      = pIO->ReadReg;
 8018c8a:	690a      	ldr	r2, [r1, #16]
 8018c8c:	6102      	str	r2, [r0, #16]
    pObj->IO.SendData     = pIO->SendData;
 8018c8e:	694a      	ldr	r2, [r1, #20]
 8018c90:	6142      	str	r2, [r0, #20]
    pObj->IO.SendDataDMA  = pIO->SendDataDMA;
 8018c92:	698a      	ldr	r2, [r1, #24]
 8018c94:	6182      	str	r2, [r0, #24]
    pObj->IO.RecvData     = pIO->RecvData;
 8018c96:	69ca      	ldr	r2, [r1, #28]
 8018c98:	61c2      	str	r2, [r0, #28]
    pObj->IO.RecvDataDMA  = pIO->RecvDataDMA;
 8018c9a:	6a0a      	ldr	r2, [r1, #32]
 8018c9c:	6202      	str	r2, [r0, #32]
    pObj->IO.GetTick      = pIO->GetTick;
 8018c9e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8018ca0:	6242      	str	r2, [r0, #36]	; 0x24
    pObj->Ctx.ReadReg     = ST7789V_ReadRegWrap;
 8018ca2:	4a0a      	ldr	r2, [pc, #40]	; (8018ccc <ST7789V_RegisterBusIO+0x58>)
 8018ca4:	6302      	str	r2, [r0, #48]	; 0x30
    pObj->Ctx.WriteReg    = ST7789V_WriteRegWrap;
 8018ca6:	4a0a      	ldr	r2, [pc, #40]	; (8018cd0 <ST7789V_RegisterBusIO+0x5c>)
 8018ca8:	62c2      	str	r2, [r0, #44]	; 0x2c
    pObj->Ctx.SendData    = ST7789V_SendDataWrap;
 8018caa:	4a0a      	ldr	r2, [pc, #40]	; (8018cd4 <ST7789V_RegisterBusIO+0x60>)
 8018cac:	6342      	str	r2, [r0, #52]	; 0x34
    pObj->Ctx.SendDataDMA = ST7789V_SendDataDMAWrap;
 8018cae:	4a0a      	ldr	r2, [pc, #40]	; (8018cd8 <ST7789V_RegisterBusIO+0x64>)
 8018cb0:	6382      	str	r2, [r0, #56]	; 0x38
    pObj->Ctx.RecvData    = ST7789V_RecvDataWrap;
 8018cb2:	4a0a      	ldr	r2, [pc, #40]	; (8018cdc <ST7789V_RegisterBusIO+0x68>)
 8018cb4:	63c2      	str	r2, [r0, #60]	; 0x3c
    pObj->Ctx.RecvDataDMA = ST7789V_RecvDataDMAWrap;
 8018cb6:	4a0a      	ldr	r2, [pc, #40]	; (8018ce0 <ST7789V_RegisterBusIO+0x6c>)
 8018cb8:	6402      	str	r2, [r0, #64]	; 0x40
    pObj->Ctx.handle      = pObj;
 8018cba:	6440      	str	r0, [r0, #68]	; 0x44
    if(pObj->IO.Init != NULL)
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d001      	beq.n	8018cc4 <ST7789V_RegisterBusIO+0x50>
      ret = pObj->IO.Init();
 8018cc0:	4798      	blx	r3
}
 8018cc2:	bd10      	pop	{r4, pc}
    ret = ST7789V_ERROR;
 8018cc4:	2001      	movs	r0, #1
 8018cc6:	4240      	negs	r0, r0
 8018cc8:	e7fb      	b.n	8018cc2 <ST7789V_RegisterBusIO+0x4e>
 8018cca:	46c0      	nop			; (mov r8, r8)
 8018ccc:	08018601 	.word	0x08018601
 8018cd0:	08018611 	.word	0x08018611
 8018cd4:	08018621 	.word	0x08018621
 8018cd8:	08018631 	.word	0x08018631
 8018cdc:	08018641 	.word	0x08018641
 8018ce0:	08018651 	.word	0x08018651

08018ce4 <st7789v_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write  
  * @retval Component status
  */
int32_t st7789v_write_reg(st7789v_ctx_t *ctx, uint8_t* reg, uint32_t length)
{
 8018ce4:	0003      	movs	r3, r0
 8018ce6:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, reg, length);
 8018ce8:	6980      	ldr	r0, [r0, #24]
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	4798      	blx	r3
}
 8018cee:	bd10      	pop	{r4, pc}

08018cf0 <st7789v_send_data>:
  * @param  pdata  data to write
  * @param  Length Length of data to write
  * @retval Component status
  */
int32_t st7789v_send_data(st7789v_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8018cf0:	0003      	movs	r3, r0
 8018cf2:	b510      	push	{r4, lr}
  return ctx->SendData(ctx->handle, pdata, length);
 8018cf4:	6980      	ldr	r0, [r0, #24]
 8018cf6:	689b      	ldr	r3, [r3, #8]
 8018cf8:	4798      	blx	r3
}
 8018cfa:	bd10      	pop	{r4, pc}

08018cfc <st7789v_recv_data>:
  * @param  pdata  data to read
  * @param  Length Length of data to read
  * @retval Component status
  */
int32_t st7789v_recv_data(st7789v_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8018cfc:	0003      	movs	r3, r0
 8018cfe:	b510      	push	{r4, lr}
  return ctx->RecvData(ctx->handle, pdata, length);
 8018d00:	6980      	ldr	r0, [r0, #24]
 8018d02:	691b      	ldr	r3, [r3, #16]
 8018d04:	4798      	blx	r3
}
 8018d06:	bd10      	pop	{r4, pc}

08018d08 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8018d08:	4770      	bx	lr
 8018d0a:	46c0      	nop			; (mov r8, r8)

08018d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018d0c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8018d0e:	4b0f      	ldr	r3, [pc, #60]	; (8018d4c <HAL_InitTick+0x40>)
{
 8018d10:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8018d12:	7819      	ldrb	r1, [r3, #0]
 8018d14:	2900      	cmp	r1, #0
 8018d16:	d101      	bne.n	8018d1c <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8018d18:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8018d1a:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8018d1c:	20fa      	movs	r0, #250	; 0xfa
 8018d1e:	0080      	lsls	r0, r0, #2
 8018d20:	f7e7 fa02 	bl	8000128 <__udivsi3>
 8018d24:	4b0a      	ldr	r3, [pc, #40]	; (8018d50 <HAL_InitTick+0x44>)
 8018d26:	0001      	movs	r1, r0
 8018d28:	6818      	ldr	r0, [r3, #0]
 8018d2a:	f7e7 f9fd 	bl	8000128 <__udivsi3>
 8018d2e:	f000 f8a5 	bl	8018e7c <HAL_SYSTICK_Config>
 8018d32:	2800      	cmp	r0, #0
 8018d34:	d1f0      	bne.n	8018d18 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8018d36:	2c03      	cmp	r4, #3
 8018d38:	d8ee      	bhi.n	8018d18 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8018d3a:	3801      	subs	r0, #1
 8018d3c:	2200      	movs	r2, #0
 8018d3e:	0021      	movs	r1, r4
 8018d40:	f000 f84e 	bl	8018de0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8018d44:	4b03      	ldr	r3, [pc, #12]	; (8018d54 <HAL_InitTick+0x48>)
 8018d46:	2000      	movs	r0, #0
 8018d48:	601c      	str	r4, [r3, #0]
  return status;
 8018d4a:	e7e6      	b.n	8018d1a <HAL_InitTick+0xe>
 8018d4c:	2000008c 	.word	0x2000008c
 8018d50:	20000088 	.word	0x20000088
 8018d54:	20000090 	.word	0x20000090

08018d58 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018d58:	2380      	movs	r3, #128	; 0x80
 8018d5a:	4a08      	ldr	r2, [pc, #32]	; (8018d7c <HAL_Init+0x24>)
 8018d5c:	005b      	lsls	r3, r3, #1
 8018d5e:	6811      	ldr	r1, [r2, #0]
{
 8018d60:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018d62:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8018d64:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018d66:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8018d68:	f7ff ffd0 	bl	8018d0c <HAL_InitTick>
 8018d6c:	1e04      	subs	r4, r0, #0
 8018d6e:	d002      	beq.n	8018d76 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8018d70:	2401      	movs	r4, #1
}
 8018d72:	0020      	movs	r0, r4
 8018d74:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8018d76:	f7e7 fd59 	bl	800082c <HAL_MspInit>
 8018d7a:	e7fa      	b.n	8018d72 <HAL_Init+0x1a>
 8018d7c:	40022000 	.word	0x40022000

08018d80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8018d80:	4a03      	ldr	r2, [pc, #12]	; (8018d90 <HAL_IncTick+0x10>)
 8018d82:	4b04      	ldr	r3, [pc, #16]	; (8018d94 <HAL_IncTick+0x14>)
 8018d84:	6811      	ldr	r1, [r2, #0]
 8018d86:	781b      	ldrb	r3, [r3, #0]
 8018d88:	185b      	adds	r3, r3, r1
 8018d8a:	6013      	str	r3, [r2, #0]
}
 8018d8c:	4770      	bx	lr
 8018d8e:	46c0      	nop			; (mov r8, r8)
 8018d90:	20007d30 	.word	0x20007d30
 8018d94:	2000008c 	.word	0x2000008c

08018d98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8018d98:	4b01      	ldr	r3, [pc, #4]	; (8018da0 <HAL_GetTick+0x8>)
 8018d9a:	6818      	ldr	r0, [r3, #0]
}
 8018d9c:	4770      	bx	lr
 8018d9e:	46c0      	nop			; (mov r8, r8)
 8018da0:	20007d30 	.word	0x20007d30

08018da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018da4:	b570      	push	{r4, r5, r6, lr}
 8018da6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8018da8:	f7ff fff6 	bl	8018d98 <HAL_GetTick>
 8018dac:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8018dae:	1c63      	adds	r3, r4, #1
 8018db0:	d002      	beq.n	8018db8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8018db2:	4b04      	ldr	r3, [pc, #16]	; (8018dc4 <HAL_Delay+0x20>)
 8018db4:	781b      	ldrb	r3, [r3, #0]
 8018db6:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8018db8:	f7ff ffee 	bl	8018d98 <HAL_GetTick>
 8018dbc:	1b40      	subs	r0, r0, r5
 8018dbe:	42a0      	cmp	r0, r4
 8018dc0:	d3fa      	bcc.n	8018db8 <HAL_Delay+0x14>
  {
  }
}
 8018dc2:	bd70      	pop	{r4, r5, r6, pc}
 8018dc4:	2000008c 	.word	0x2000008c

08018dc8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8018dc8:	4a03      	ldr	r2, [pc, #12]	; (8018dd8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8018dca:	4904      	ldr	r1, [pc, #16]	; (8018ddc <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8018dcc:	6813      	ldr	r3, [r2, #0]
 8018dce:	400b      	ands	r3, r1
 8018dd0:	4303      	orrs	r3, r0
 8018dd2:	6013      	str	r3, [r2, #0]
}
 8018dd4:	4770      	bx	lr
 8018dd6:	46c0      	nop			; (mov r8, r8)
 8018dd8:	40010000 	.word	0x40010000
 8018ddc:	fffff9ff 	.word	0xfffff9ff

08018de0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8018de0:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8018de2:	2800      	cmp	r0, #0
 8018de4:	db14      	blt.n	8018e10 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8018de6:	4b15      	ldr	r3, [pc, #84]	; (8018e3c <HAL_NVIC_SetPriority+0x5c>)
 8018de8:	2203      	movs	r2, #3
 8018dea:	469c      	mov	ip, r3
 8018dec:	23ff      	movs	r3, #255	; 0xff
 8018dee:	0884      	lsrs	r4, r0, #2
 8018df0:	4010      	ands	r0, r2
 8018df2:	001a      	movs	r2, r3
 8018df4:	26c0      	movs	r6, #192	; 0xc0
 8018df6:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8018df8:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8018dfa:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8018dfc:	400b      	ands	r3, r1
 8018dfe:	4083      	lsls	r3, r0
 8018e00:	00a4      	lsls	r4, r4, #2
 8018e02:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8018e04:	00b6      	lsls	r6, r6, #2
 8018e06:	59a5      	ldr	r5, [r4, r6]
 8018e08:	4395      	bics	r5, r2
 8018e0a:	432b      	orrs	r3, r5
 8018e0c:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8018e0e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8018e10:	4a0b      	ldr	r2, [pc, #44]	; (8018e40 <HAL_NVIC_SetPriority+0x60>)
 8018e12:	230f      	movs	r3, #15
 8018e14:	4694      	mov	ip, r2
 8018e16:	2203      	movs	r2, #3
 8018e18:	4003      	ands	r3, r0
 8018e1a:	4010      	ands	r0, r2
 8018e1c:	32fc      	adds	r2, #252	; 0xfc
 8018e1e:	0015      	movs	r5, r2
 8018e20:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8018e22:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8018e24:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8018e26:	400a      	ands	r2, r1
 8018e28:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8018e2a:	3b08      	subs	r3, #8
 8018e2c:	089b      	lsrs	r3, r3, #2
 8018e2e:	009b      	lsls	r3, r3, #2
 8018e30:	4463      	add	r3, ip
 8018e32:	69dc      	ldr	r4, [r3, #28]
 8018e34:	43ac      	bics	r4, r5
 8018e36:	4322      	orrs	r2, r4
 8018e38:	61da      	str	r2, [r3, #28]
 8018e3a:	e7e8      	b.n	8018e0e <HAL_NVIC_SetPriority+0x2e>
 8018e3c:	e000e100 	.word	0xe000e100
 8018e40:	e000ed00 	.word	0xe000ed00

08018e44 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8018e44:	2800      	cmp	r0, #0
 8018e46:	db05      	blt.n	8018e54 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018e48:	231f      	movs	r3, #31
 8018e4a:	4018      	ands	r0, r3
 8018e4c:	3b1e      	subs	r3, #30
 8018e4e:	4083      	lsls	r3, r0
 8018e50:	4a01      	ldr	r2, [pc, #4]	; (8018e58 <HAL_NVIC_EnableIRQ+0x14>)
 8018e52:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8018e54:	4770      	bx	lr
 8018e56:	46c0      	nop			; (mov r8, r8)
 8018e58:	e000e100 	.word	0xe000e100

08018e5c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8018e5c:	2800      	cmp	r0, #0
 8018e5e:	db0a      	blt.n	8018e76 <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018e60:	231f      	movs	r3, #31
 8018e62:	4018      	ands	r0, r3
 8018e64:	3b1e      	subs	r3, #30
 8018e66:	4083      	lsls	r3, r0
 8018e68:	2280      	movs	r2, #128	; 0x80
 8018e6a:	4903      	ldr	r1, [pc, #12]	; (8018e78 <HAL_NVIC_DisableIRQ+0x1c>)
 8018e6c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8018e6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8018e72:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8018e76:	4770      	bx	lr
 8018e78:	e000e100 	.word	0xe000e100

08018e7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8018e7c:	2280      	movs	r2, #128	; 0x80
 8018e7e:	1e43      	subs	r3, r0, #1
 8018e80:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8018e82:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8018e84:	4293      	cmp	r3, r2
 8018e86:	d20e      	bcs.n	8018ea6 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8018e88:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8018e8a:	4a07      	ldr	r2, [pc, #28]	; (8018ea8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8018e8c:	4807      	ldr	r0, [pc, #28]	; (8018eac <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8018e8e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8018e90:	6a03      	ldr	r3, [r0, #32]
 8018e92:	0609      	lsls	r1, r1, #24
 8018e94:	021b      	lsls	r3, r3, #8
 8018e96:	0a1b      	lsrs	r3, r3, #8
 8018e98:	430b      	orrs	r3, r1
 8018e9a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8018e9c:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8018e9e:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8018ea0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8018ea2:	3307      	adds	r3, #7
 8018ea4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8018ea6:	4770      	bx	lr
 8018ea8:	e000e010 	.word	0xe000e010
 8018eac:	e000ed00 	.word	0xe000ed00

08018eb0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8018eb0:	b510      	push	{r4, lr}
 8018eb2:	1e04      	subs	r4, r0, #0
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8018eb4:	d02e      	beq.n	8018f14 <HAL_CRC_Init+0x64>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8018eb6:	7f43      	ldrb	r3, [r0, #29]
 8018eb8:	b2da      	uxtb	r2, r3
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d02c      	beq.n	8018f18 <HAL_CRC_Init+0x68>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8018ebe:	2302      	movs	r3, #2
 8018ec0:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8018ec2:	7923      	ldrb	r3, [r4, #4]
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d11e      	bne.n	8018f06 <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8018ec8:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8018eca:	6823      	ldr	r3, [r4, #0]
 8018ecc:	4a15      	ldr	r2, [pc, #84]	; (8018f24 <HAL_CRC_Init+0x74>)
 8018ece:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8018ed0:	689a      	ldr	r2, [r3, #8]
 8018ed2:	438a      	bics	r2, r1
 8018ed4:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8018ed6:	7962      	ldrb	r2, [r4, #5]
 8018ed8:	2a00      	cmp	r2, #0
 8018eda:	d011      	beq.n	8018f00 <HAL_CRC_Init+0x50>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8018edc:	6922      	ldr	r2, [r4, #16]
 8018ede:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8018ee0:	2160      	movs	r1, #96	; 0x60
 8018ee2:	689a      	ldr	r2, [r3, #8]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
 8018ee4:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8018ee6:	438a      	bics	r2, r1
 8018ee8:	6961      	ldr	r1, [r4, #20]
 8018eea:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8018eec:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8018eee:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8018ef0:	689a      	ldr	r2, [r3, #8]
 8018ef2:	438a      	bics	r2, r1
 8018ef4:	69a1      	ldr	r1, [r4, #24]
 8018ef6:	430a      	orrs	r2, r1
 8018ef8:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8018efa:	2301      	movs	r3, #1
 8018efc:	7763      	strb	r3, [r4, #29]
}
 8018efe:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8018f00:	3a01      	subs	r2, #1
 8018f02:	611a      	str	r2, [r3, #16]
 8018f04:	e7ec      	b.n	8018ee0 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8018f06:	0020      	movs	r0, r4
 8018f08:	68e2      	ldr	r2, [r4, #12]
 8018f0a:	68a1      	ldr	r1, [r4, #8]
 8018f0c:	f000 f80c 	bl	8018f28 <HAL_CRCEx_Polynomial_Set>
 8018f10:	2800      	cmp	r0, #0
 8018f12:	d005      	beq.n	8018f20 <HAL_CRC_Init+0x70>
    return HAL_ERROR;
 8018f14:	2001      	movs	r0, #1
 8018f16:	e7f2      	b.n	8018efe <HAL_CRC_Init+0x4e>
    hcrc->Lock = HAL_UNLOCKED;
 8018f18:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8018f1a:	f7e7 fca3 	bl	8000864 <HAL_CRC_MspInit>
 8018f1e:	e7ce      	b.n	8018ebe <HAL_CRC_Init+0xe>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8018f20:	6823      	ldr	r3, [r4, #0]
 8018f22:	e7d8      	b.n	8018ed6 <HAL_CRC_Init+0x26>
 8018f24:	04c11db7 	.word	0x04c11db7

08018f28 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8018f28:	b530      	push	{r4, r5, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8018f2a:	231e      	movs	r3, #30
 8018f2c:	2501      	movs	r5, #1
 8018f2e:	e001      	b.n	8018f34 <HAL_CRCEx_Polynomial_Set+0xc>
 8018f30:	3b01      	subs	r3, #1
 8018f32:	d31b      	bcc.n	8018f6c <HAL_CRCEx_Polynomial_Set+0x44>
 8018f34:	000c      	movs	r4, r1
 8018f36:	40dc      	lsrs	r4, r3
 8018f38:	4225      	tst	r5, r4
 8018f3a:	d0f9      	beq.n	8018f30 <HAL_CRCEx_Polynomial_Set+0x8>
  {
  }

  switch (PolyLength)
 8018f3c:	2a10      	cmp	r2, #16
 8018f3e:	d019      	beq.n	8018f74 <HAL_CRCEx_Polynomial_Set+0x4c>
 8018f40:	d80e      	bhi.n	8018f60 <HAL_CRCEx_Polynomial_Set+0x38>
 8018f42:	2a00      	cmp	r2, #0
 8018f44:	d003      	beq.n	8018f4e <HAL_CRCEx_Polynomial_Set+0x26>
 8018f46:	2a08      	cmp	r2, #8
 8018f48:	d10e      	bne.n	8018f68 <HAL_CRCEx_Polynomial_Set+0x40>
      {
        status =   HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8018f4a:	2b0f      	cmp	r3, #15
 8018f4c:	d80c      	bhi.n	8018f68 <HAL_CRCEx_Polynomial_Set+0x40>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8018f4e:	6800      	ldr	r0, [r0, #0]
 8018f50:	6141      	str	r1, [r0, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8018f52:	2118      	movs	r1, #24
 8018f54:	6883      	ldr	r3, [r0, #8]
 8018f56:	438b      	bics	r3, r1
 8018f58:	431a      	orrs	r2, r3
 8018f5a:	6082      	str	r2, [r0, #8]
 8018f5c:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 8018f5e:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 8018f60:	2a18      	cmp	r2, #24
 8018f62:	d101      	bne.n	8018f68 <HAL_CRCEx_Polynomial_Set+0x40>
      if (msb >= HAL_CRC_LENGTH_7B)
 8018f64:	2b06      	cmp	r3, #6
 8018f66:	d9f2      	bls.n	8018f4e <HAL_CRCEx_Polynomial_Set+0x26>
      status =  HAL_ERROR;
 8018f68:	2001      	movs	r0, #1
  return status;
 8018f6a:	e7f8      	b.n	8018f5e <HAL_CRCEx_Polynomial_Set+0x36>
  switch (PolyLength)
 8018f6c:	2a00      	cmp	r2, #0
 8018f6e:	d0ee      	beq.n	8018f4e <HAL_CRCEx_Polynomial_Set+0x26>
      status =  HAL_ERROR;
 8018f70:	2001      	movs	r0, #1
  return status;
 8018f72:	e7f4      	b.n	8018f5e <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_8B)
 8018f74:	2b07      	cmp	r3, #7
 8018f76:	d9ea      	bls.n	8018f4e <HAL_CRCEx_Polynomial_Set+0x26>
      status =  HAL_ERROR;
 8018f78:	2001      	movs	r0, #1
  return status;
 8018f7a:	e7f0      	b.n	8018f5e <HAL_CRCEx_Polynomial_Set+0x36>

08018f7c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8018f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f7e:	46c6      	mov	lr, r8
 8018f80:	0004      	movs	r4, r0
 8018f82:	b500      	push	{lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8018f84:	2800      	cmp	r0, #0
 8018f86:	d062      	beq.n	801904e <HAL_DMA_Init+0xd2>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8018f88:	6805      	ldr	r5, [r0, #0]
 8018f8a:	4b32      	ldr	r3, [pc, #200]	; (8019054 <HAL_DMA_Init+0xd8>)
 8018f8c:	2114      	movs	r1, #20
 8018f8e:	18e8      	adds	r0, r5, r3
 8018f90:	f7e7 f8ca 	bl	8000128 <__udivsi3>
 8018f94:	0083      	lsls	r3, r0, #2
 8018f96:	6423      	str	r3, [r4, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8018f98:	2202      	movs	r2, #2
 8018f9a:	2325      	movs	r3, #37	; 0x25
 8018f9c:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8018f9e:	682b      	ldr	r3, [r5, #0]
 8018fa0:	4a2d      	ldr	r2, [pc, #180]	; (8019058 <HAL_DMA_Init+0xdc>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8018fa2:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8018fa4:	4013      	ands	r3, r2
 8018fa6:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8018fa8:	68e3      	ldr	r3, [r4, #12]
 8018faa:	6921      	ldr	r1, [r4, #16]
 8018fac:	4333      	orrs	r3, r6
 8018fae:	430b      	orrs	r3, r1
 8018fb0:	6961      	ldr	r1, [r4, #20]
 8018fb2:	682a      	ldr	r2, [r5, #0]
 8018fb4:	430b      	orrs	r3, r1
 8018fb6:	69a1      	ldr	r1, [r4, #24]
 8018fb8:	430b      	orrs	r3, r1
 8018fba:	69e1      	ldr	r1, [r4, #28]
 8018fbc:	430b      	orrs	r3, r1
 8018fbe:	6a21      	ldr	r1, [r4, #32]
 8018fc0:	430b      	orrs	r3, r1
 8018fc2:	4313      	orrs	r3, r2
 8018fc4:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8018fc6:	4b25      	ldr	r3, [pc, #148]	; (801905c <HAL_DMA_Init+0xe0>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8018fc8:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8018fca:	469c      	mov	ip, r3
 8018fcc:	4460      	add	r0, ip
 8018fce:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8018fd0:	20ff      	movs	r0, #255	; 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8018fd2:	4b23      	ldr	r3, [pc, #140]	; (8019060 <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8018fd4:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8018fd6:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8018fd8:	6467      	str	r7, [r4, #68]	; 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8018fda:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8018fdc:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8018fde:	f7e7 f8a3 	bl	8000128 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8018fe2:	231f      	movs	r3, #31
 8018fe4:	2201      	movs	r2, #1
 8018fe6:	4003      	ands	r3, r0
 8018fe8:	0010      	movs	r0, r2
 8018fea:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8018fec:	2380      	movs	r3, #128	; 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8018fee:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8018ff0:	01db      	lsls	r3, r3, #7
 8018ff2:	429e      	cmp	r6, r3
 8018ff4:	d021      	beq.n	801903a <HAL_DMA_Init+0xbe>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8018ff6:	233f      	movs	r3, #63	; 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8018ff8:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8018ffa:	6861      	ldr	r1, [r4, #4]
 8018ffc:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8018ffe:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8019000:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019002:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8019004:	2903      	cmp	r1, #3
 8019006:	d81d      	bhi.n	8019044 <HAL_DMA_Init+0xc8>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8019008:	2003      	movs	r0, #3
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801900a:	4916      	ldr	r1, [pc, #88]	; (8019064 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801900c:	4d16      	ldr	r5, [pc, #88]	; (8019068 <HAL_DMA_Init+0xec>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801900e:	1859      	adds	r1, r3, r1
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8019010:	3b01      	subs	r3, #1
 8019012:	4003      	ands	r3, r0
 8019014:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8019016:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8019018:	0089      	lsls	r1, r1, #2
 801901a:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801901c:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 801901e:	65a2      	str	r2, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8019020:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019022:	606a      	str	r2, [r5, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8019024:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8019026:	2225      	movs	r2, #37	; 0x25
 8019028:	2101      	movs	r1, #1
  return HAL_OK;
 801902a:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801902c:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 801902e:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8019030:	3a01      	subs	r2, #1
 8019032:	54a3      	strb	r3, [r4, r2]
}
 8019034:	bc80      	pop	{r7}
 8019036:	46b8      	mov	r8, r7
 8019038:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801903a:	2300      	movs	r3, #0
 801903c:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801903e:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019040:	4643      	mov	r3, r8
 8019042:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8019044:	2300      	movs	r3, #0
 8019046:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8019048:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801904a:	65a3      	str	r3, [r4, #88]	; 0x58
 801904c:	e7ea      	b.n	8019024 <HAL_DMA_Init+0xa8>
    return HAL_ERROR;
 801904e:	2001      	movs	r0, #1
 8019050:	e7f0      	b.n	8019034 <HAL_DMA_Init+0xb8>
 8019052:	46c0      	nop			; (mov r8, r8)
 8019054:	bffdfff8 	.word	0xbffdfff8
 8019058:	ffff800f 	.word	0xffff800f
 801905c:	10008200 	.word	0x10008200
 8019060:	40020880 	.word	0x40020880
 8019064:	1000823f 	.word	0x1000823f
 8019068:	40020940 	.word	0x40020940

0801906c <HAL_DMA_DeInit>:
{
 801906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801906e:	46ce      	mov	lr, r9
 8019070:	4647      	mov	r7, r8
 8019072:	0004      	movs	r4, r0
 8019074:	b580      	push	{r7, lr}
  if (NULL == hdma)
 8019076:	2800      	cmp	r0, #0
 8019078:	d051      	beq.n	801911e <HAL_DMA_DeInit+0xb2>
  __HAL_DMA_DISABLE(hdma);
 801907a:	6803      	ldr	r3, [r0, #0]
 801907c:	2601      	movs	r6, #1
 801907e:	4698      	mov	r8, r3
 8019080:	4642      	mov	r2, r8
 8019082:	681b      	ldr	r3, [r3, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8019084:	4827      	ldr	r0, [pc, #156]	; (8019124 <HAL_DMA_DeInit+0xb8>)
  __HAL_DMA_DISABLE(hdma);
 8019086:	43b3      	bics	r3, r6
 8019088:	6013      	str	r3, [r2, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 801908a:	2114      	movs	r1, #20
 801908c:	4440      	add	r0, r8
 801908e:	f7e7 f84b 	bl	8000128 <__udivsi3>
  hdma->Instance->CCR = 0U;
 8019092:	2700      	movs	r7, #0
 8019094:	4643      	mov	r3, r8
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8019096:	0085      	lsls	r5, r0, #2
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8019098:	4923      	ldr	r1, [pc, #140]	; (8019128 <HAL_DMA_DeInit+0xbc>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 801909a:	6425      	str	r5, [r4, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 801909c:	601f      	str	r7, [r3, #0]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 801909e:	684b      	ldr	r3, [r1, #4]
 80190a0:	221c      	movs	r2, #28
 80190a2:	469c      	mov	ip, r3
 80190a4:	0033      	movs	r3, r6
 80190a6:	402a      	ands	r2, r5
 80190a8:	4093      	lsls	r3, r2
 80190aa:	4662      	mov	r2, ip
 80190ac:	4313      	orrs	r3, r2
 80190ae:	604b      	str	r3, [r1, #4]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80190b0:	4b1e      	ldr	r3, [pc, #120]	; (801912c <HAL_DMA_DeInit+0xc0>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80190b2:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80190b4:	469c      	mov	ip, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80190b6:	4b1e      	ldr	r3, [pc, #120]	; (8019130 <HAL_DMA_DeInit+0xc4>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80190b8:	4460      	add	r0, ip
 80190ba:	0085      	lsls	r5, r0, #2
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80190bc:	4699      	mov	r9, r3
 80190be:	64a3      	str	r3, [r4, #72]	; 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80190c0:	20ff      	movs	r0, #255	; 0xff
 80190c2:	4643      	mov	r3, r8
 80190c4:	4018      	ands	r0, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80190c6:	6465      	str	r5, [r4, #68]	; 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80190c8:	3808      	subs	r0, #8
 80190ca:	f7e7 f82d 	bl	8000128 <__udivsi3>
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80190ce:	231f      	movs	r3, #31
 80190d0:	0032      	movs	r2, r6
 80190d2:	4003      	ands	r3, r0
 80190d4:	409a      	lsls	r2, r3
 80190d6:	0013      	movs	r3, r2
 80190d8:	64e2      	str	r2, [r4, #76]	; 0x4c
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80190da:	464a      	mov	r2, r9
  hdma->DMAmuxChannel->CCR = 0U;
 80190dc:	602f      	str	r7, [r5, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80190de:	6053      	str	r3, [r2, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80190e0:	6863      	ldr	r3, [r4, #4]
 80190e2:	1e5a      	subs	r2, r3, #1
 80190e4:	2a03      	cmp	r2, #3
 80190e6:	d911      	bls.n	801910c <HAL_DMA_DeInit+0xa0>
  hdma->DMAmuxRequestGen = 0U;
 80190e8:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_RESET;
 80190ea:	2225      	movs	r2, #37	; 0x25
  return HAL_OK;
 80190ec:	2000      	movs	r0, #0
  hdma->DMAmuxRequestGen = 0U;
 80190ee:	6523      	str	r3, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 80190f0:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80190f2:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->XferCpltCallback = NULL;
 80190f4:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80190f6:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80190f8:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80190fa:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80190fc:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80190fe:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hdma);
 8019100:	3a01      	subs	r2, #1
 8019102:	54a3      	strb	r3, [r4, r2]
}
 8019104:	bcc0      	pop	{r6, r7}
 8019106:	46b9      	mov	r9, r7
 8019108:	46b0      	mov	r8, r6
 801910a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801910c:	4909      	ldr	r1, [pc, #36]	; (8019134 <HAL_DMA_DeInit+0xc8>)
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 801910e:	4096      	lsls	r6, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8019110:	468c      	mov	ip, r1
 8019112:	4463      	add	r3, ip
 8019114:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8019116:	601f      	str	r7, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019118:	4b07      	ldr	r3, [pc, #28]	; (8019138 <HAL_DMA_DeInit+0xcc>)
 801911a:	605e      	str	r6, [r3, #4]
 801911c:	e7e4      	b.n	80190e8 <HAL_DMA_DeInit+0x7c>
    return HAL_ERROR;
 801911e:	2001      	movs	r0, #1
 8019120:	e7f0      	b.n	8019104 <HAL_DMA_DeInit+0x98>
 8019122:	46c0      	nop			; (mov r8, r8)
 8019124:	bffdfff8 	.word	0xbffdfff8
 8019128:	40020000 	.word	0x40020000
 801912c:	10008200 	.word	0x10008200
 8019130:	40020880 	.word	0x40020880
 8019134:	1000823f 	.word	0x1000823f
 8019138:	40020940 	.word	0x40020940

0801913c <HAL_DMA_Start_IT>:
{
 801913c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801913e:	46c6      	mov	lr, r8
  __HAL_LOCK(hdma);
 8019140:	2424      	movs	r4, #36	; 0x24
{
 8019142:	b500      	push	{lr}
  __HAL_LOCK(hdma);
 8019144:	5d05      	ldrb	r5, [r0, r4]
 8019146:	2d01      	cmp	r5, #1
 8019148:	d04f      	beq.n	80191ea <HAL_DMA_Start_IT+0xae>
 801914a:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 801914c:	2625      	movs	r6, #37	; 0x25
  __HAL_LOCK(hdma);
 801914e:	5505      	strb	r5, [r0, r4]
  if (hdma->State == HAL_DMA_STATE_READY)
 8019150:	5d85      	ldrb	r5, [r0, r6]
 8019152:	b2ef      	uxtb	r7, r5
 8019154:	2d01      	cmp	r5, #1
 8019156:	d007      	beq.n	8019168 <HAL_DMA_Start_IT+0x2c>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8019158:	2380      	movs	r3, #128	; 0x80
 801915a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 801915c:	2300      	movs	r3, #0
 801915e:	5503      	strb	r3, [r0, r4]
    status = HAL_ERROR;
 8019160:	2001      	movs	r0, #1
}
 8019162:	bc80      	pop	{r7}
 8019164:	46b8      	mov	r8, r7
 8019166:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8019168:	3c22      	subs	r4, #34	; 0x22
 801916a:	5584      	strb	r4, [r0, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801916c:	2400      	movs	r4, #0
 801916e:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8019170:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019172:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8019174:	6825      	ldr	r5, [r4, #0]
 8019176:	43bd      	bics	r5, r7
 8019178:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801917a:	6c85      	ldr	r5, [r0, #72]	; 0x48
 801917c:	606e      	str	r6, [r5, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 801917e:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8019180:	2e00      	cmp	r6, #0
 8019182:	d002      	beq.n	801918a <HAL_DMA_Start_IT+0x4e>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019184:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8019186:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8019188:	606f      	str	r7, [r5, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 801918a:	271c      	movs	r7, #28
 801918c:	4d1e      	ldr	r5, [pc, #120]	; (8019208 <HAL_DMA_Start_IT+0xcc>)
 801918e:	46ac      	mov	ip, r5
 8019190:	686d      	ldr	r5, [r5, #4]
 8019192:	46a8      	mov	r8, r5
 8019194:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8019196:	402f      	ands	r7, r5
 8019198:	2501      	movs	r5, #1
 801919a:	40bd      	lsls	r5, r7
 801919c:	4647      	mov	r7, r8
 801919e:	433d      	orrs	r5, r7
 80191a0:	4667      	mov	r7, ip
 80191a2:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 80191a4:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80191a6:	6883      	ldr	r3, [r0, #8]
 80191a8:	2b10      	cmp	r3, #16
 80191aa:	d020      	beq.n	80191ee <HAL_DMA_Start_IT+0xb2>
    hdma->Instance->CPAR = SrcAddress;
 80191ac:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 80191ae:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80191b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d01e      	beq.n	80191f4 <HAL_DMA_Start_IT+0xb8>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80191b6:	220e      	movs	r2, #14
 80191b8:	6823      	ldr	r3, [r4, #0]
 80191ba:	4313      	orrs	r3, r2
 80191bc:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80191be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80191c0:	681a      	ldr	r2, [r3, #0]
 80191c2:	03d2      	lsls	r2, r2, #15
 80191c4:	d504      	bpl.n	80191d0 <HAL_DMA_Start_IT+0x94>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80191c6:	2280      	movs	r2, #128	; 0x80
 80191c8:	6819      	ldr	r1, [r3, #0]
 80191ca:	0052      	lsls	r2, r2, #1
 80191cc:	430a      	orrs	r2, r1
 80191ce:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80191d0:	2e00      	cmp	r6, #0
 80191d2:	d004      	beq.n	80191de <HAL_DMA_Start_IT+0xa2>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80191d4:	2380      	movs	r3, #128	; 0x80
 80191d6:	6832      	ldr	r2, [r6, #0]
 80191d8:	005b      	lsls	r3, r3, #1
 80191da:	4313      	orrs	r3, r2
 80191dc:	6033      	str	r3, [r6, #0]
    __HAL_DMA_ENABLE(hdma);
 80191de:	2201      	movs	r2, #1
 80191e0:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80191e2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80191e4:	4313      	orrs	r3, r2
 80191e6:	6023      	str	r3, [r4, #0]
 80191e8:	e7bb      	b.n	8019162 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 80191ea:	2002      	movs	r0, #2
 80191ec:	e7b9      	b.n	8019162 <HAL_DMA_Start_IT+0x26>
    hdma->Instance->CPAR = DstAddress;
 80191ee:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80191f0:	60e1      	str	r1, [r4, #12]
 80191f2:	e7dd      	b.n	80191b0 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80191f4:	2204      	movs	r2, #4
 80191f6:	6823      	ldr	r3, [r4, #0]
 80191f8:	4393      	bics	r3, r2
 80191fa:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80191fc:	6823      	ldr	r3, [r4, #0]
 80191fe:	3206      	adds	r2, #6
 8019200:	4313      	orrs	r3, r2
 8019202:	6023      	str	r3, [r4, #0]
 8019204:	e7db      	b.n	80191be <HAL_DMA_Start_IT+0x82>
 8019206:	46c0      	nop			; (mov r8, r8)
 8019208:	40020000 	.word	0x40020000

0801920c <HAL_DMA_Abort_IT>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 801920c:	2325      	movs	r3, #37	; 0x25
{
 801920e:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8019210:	5cc3      	ldrb	r3, [r0, r3]
 8019212:	2b02      	cmp	r3, #2
 8019214:	d003      	beq.n	801921e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8019216:	2304      	movs	r3, #4
 8019218:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 801921a:	2001      	movs	r0, #1
}
 801921c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801921e:	210e      	movs	r1, #14
 8019220:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8019222:	4c17      	ldr	r4, [pc, #92]	; (8019280 <HAL_DMA_Abort_IT+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8019224:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8019226:	6c06      	ldr	r6, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8019228:	438b      	bics	r3, r1
 801922a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 801922c:	2301      	movs	r3, #1
 801922e:	6811      	ldr	r1, [r2, #0]
 8019230:	4399      	bics	r1, r3
 8019232:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8019234:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8019236:	680a      	ldr	r2, [r1, #0]
 8019238:	4022      	ands	r2, r4
 801923a:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 801923c:	221c      	movs	r2, #28
 801923e:	4032      	ands	r2, r6
 8019240:	4093      	lsls	r3, r2
 8019242:	4910      	ldr	r1, [pc, #64]	; (8019284 <HAL_DMA_Abort_IT+0x78>)
 8019244:	684d      	ldr	r5, [r1, #4]
 8019246:	432b      	orrs	r3, r5
 8019248:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801924a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801924c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801924e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8019250:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8019252:	2b00      	cmp	r3, #0
 8019254:	d005      	beq.n	8019262 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8019256:	681a      	ldr	r2, [r3, #0]
 8019258:	4022      	ands	r2, r4
 801925a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801925c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801925e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8019260:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8019262:	2325      	movs	r3, #37	; 0x25
 8019264:	2201      	movs	r2, #1
 8019266:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8019268:	2200      	movs	r2, #0
 801926a:	3b01      	subs	r3, #1
 801926c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 801926e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019270:	2b00      	cmp	r3, #0
 8019272:	d002      	beq.n	801927a <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8019274:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8019276:	2000      	movs	r0, #0
 8019278:	e7d0      	b.n	801921c <HAL_DMA_Abort_IT+0x10>
 801927a:	2000      	movs	r0, #0
 801927c:	e7ce      	b.n	801921c <HAL_DMA_Abort_IT+0x10>
 801927e:	46c0      	nop			; (mov r8, r8)
 8019280:	fffffeff 	.word	0xfffffeff
 8019284:	40020000 	.word	0x40020000

08019288 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = DMA1->ISR;
 8019288:	4b2c      	ldr	r3, [pc, #176]	; (801933c <HAL_DMA_IRQHandler+0xb4>)
{
 801928a:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 801928c:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 801928e:	2504      	movs	r5, #4
 8019290:	231c      	movs	r3, #28
 8019292:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8019294:	6801      	ldr	r1, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8019296:	4023      	ands	r3, r4
 8019298:	002c      	movs	r4, r5
 801929a:	409c      	lsls	r4, r3
  uint32_t source_it = hdma->Instance->CCR;
 801929c:	680e      	ldr	r6, [r1, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 801929e:	4222      	tst	r2, r4
 80192a0:	d010      	beq.n	80192c4 <HAL_DMA_IRQHandler+0x3c>
 80192a2:	4235      	tst	r5, r6
 80192a4:	d00e      	beq.n	80192c4 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80192a6:	680b      	ldr	r3, [r1, #0]
 80192a8:	069b      	lsls	r3, r3, #26
 80192aa:	d402      	bmi.n	80192b2 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80192ac:	680b      	ldr	r3, [r1, #0]
 80192ae:	43ab      	bics	r3, r5
 80192b0:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80192b2:	4b22      	ldr	r3, [pc, #136]	; (801933c <HAL_DMA_IRQHandler+0xb4>)
 80192b4:	685a      	ldr	r2, [r3, #4]
 80192b6:	4314      	orrs	r4, r2
 80192b8:	605c      	str	r4, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80192ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d000      	beq.n	80192c2 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80192c0:	4798      	blx	r3
}
 80192c2:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80192c4:	2502      	movs	r5, #2
 80192c6:	002c      	movs	r4, r5
 80192c8:	409c      	lsls	r4, r3
 80192ca:	4222      	tst	r2, r4
 80192cc:	d017      	beq.n	80192fe <HAL_DMA_IRQHandler+0x76>
 80192ce:	4235      	tst	r5, r6
 80192d0:	d015      	beq.n	80192fe <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80192d2:	680b      	ldr	r3, [r1, #0]
 80192d4:	069b      	lsls	r3, r3, #26
 80192d6:	d406      	bmi.n	80192e6 <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80192d8:	220a      	movs	r2, #10
 80192da:	680b      	ldr	r3, [r1, #0]
 80192dc:	4393      	bics	r3, r2
 80192de:	600b      	str	r3, [r1, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80192e0:	2325      	movs	r3, #37	; 0x25
 80192e2:	3a09      	subs	r2, #9
 80192e4:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80192e6:	4b15      	ldr	r3, [pc, #84]	; (801933c <HAL_DMA_IRQHandler+0xb4>)
 80192e8:	685a      	ldr	r2, [r3, #4]
 80192ea:	4314      	orrs	r4, r2
 80192ec:	605c      	str	r4, [r3, #4]
      __HAL_UNLOCK(hdma);
 80192ee:	2200      	movs	r2, #0
 80192f0:	2324      	movs	r3, #36	; 0x24
 80192f2:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 80192f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d0e3      	beq.n	80192c2 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80192fa:	4798      	blx	r3
  return;
 80192fc:	e7e1      	b.n	80192c2 <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80192fe:	2408      	movs	r4, #8
 8019300:	0025      	movs	r5, r4
 8019302:	409d      	lsls	r5, r3
 8019304:	422a      	tst	r2, r5
 8019306:	d0dc      	beq.n	80192c2 <HAL_DMA_IRQHandler+0x3a>
 8019308:	4234      	tst	r4, r6
 801930a:	d0da      	beq.n	80192c2 <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801930c:	680a      	ldr	r2, [r1, #0]
 801930e:	3406      	adds	r4, #6
 8019310:	43a2      	bics	r2, r4
 8019312:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8019314:	2201      	movs	r2, #1
 8019316:	0015      	movs	r5, r2
 8019318:	409d      	lsls	r5, r3
 801931a:	002b      	movs	r3, r5
 801931c:	4907      	ldr	r1, [pc, #28]	; (801933c <HAL_DMA_IRQHandler+0xb4>)
 801931e:	684c      	ldr	r4, [r1, #4]
 8019320:	4323      	orrs	r3, r4
 8019322:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8019324:	2325      	movs	r3, #37	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8019326:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8019328:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 801932a:	2200      	movs	r2, #0
 801932c:	3b01      	subs	r3, #1
 801932e:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8019330:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8019332:	2b00      	cmp	r3, #0
 8019334:	d0c5      	beq.n	80192c2 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8019336:	4798      	blx	r3
  return;
 8019338:	e7c3      	b.n	80192c2 <HAL_DMA_IRQHandler+0x3a>
 801933a:	46c0      	nop			; (mov r8, r8)
 801933c:	40020000 	.word	0x40020000

08019340 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8019340:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8019342:	2901      	cmp	r1, #1
 8019344:	d005      	beq.n	8019352 <HAL_EXTI_RegisterCallback+0x12>
 8019346:	2902      	cmp	r1, #2
 8019348:	d00a      	beq.n	8019360 <HAL_EXTI_RegisterCallback+0x20>
 801934a:	2001      	movs	r0, #1
 801934c:	2900      	cmp	r1, #0
 801934e:	d003      	beq.n	8019358 <HAL_EXTI_RegisterCallback+0x18>
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8019350:	4770      	bx	lr
      hexti->RisingCallback = pPendingCbfn;
 8019352:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019354:	2000      	movs	r0, #0
      break;
 8019356:	e7fb      	b.n	8019350 <HAL_EXTI_RegisterCallback+0x10>
  HAL_StatusTypeDef status = HAL_OK;
 8019358:	2000      	movs	r0, #0
      hexti->RisingCallback = pPendingCbfn;
 801935a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 801935c:	609a      	str	r2, [r3, #8]
      break;
 801935e:	e7f7      	b.n	8019350 <HAL_EXTI_RegisterCallback+0x10>
      hexti->FallingCallback = pPendingCbfn;
 8019360:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8019362:	2000      	movs	r0, #0
      break;
 8019364:	e7f4      	b.n	8019350 <HAL_EXTI_RegisterCallback+0x10>
 8019366:	46c0      	nop			; (mov r8, r8)

08019368 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8019368:	2800      	cmp	r0, #0
 801936a:	d002      	beq.n	8019372 <HAL_EXTI_GetHandle+0xa>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 801936c:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 801936e:	2000      	movs	r0, #0
  }
}
 8019370:	4770      	bx	lr
    return HAL_ERROR;
 8019372:	2001      	movs	r0, #1
 8019374:	e7fc      	b.n	8019370 <HAL_EXTI_GetHandle+0x8>
 8019376:	46c0      	nop			; (mov r8, r8)

08019378 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8019378:	b570      	push	{r4, r5, r6, lr}
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 801937a:	2401      	movs	r4, #1
 801937c:	221f      	movs	r2, #31
 801937e:	0026      	movs	r6, r4
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8019380:	6803      	ldr	r3, [r0, #0]
{
 8019382:	0005      	movs	r5, r0
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8019384:	401a      	ands	r2, r3
 8019386:	4096      	lsls	r6, r2
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8019388:	0c1b      	lsrs	r3, r3, #16
 801938a:	401c      	ands	r4, r3

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 801938c:	4b0b      	ldr	r3, [pc, #44]	; (80193bc <HAL_EXTI_IRQHandler+0x44>)
 801938e:	0164      	lsls	r4, r4, #5
 8019390:	18e3      	adds	r3, r4, r3
  regval = (*regaddr & maskline);
 8019392:	681a      	ldr	r2, [r3, #0]

  if (regval != 0x00u)
 8019394:	4216      	tst	r6, r2
 8019396:	d004      	beq.n	80193a2 <HAL_EXTI_IRQHandler+0x2a>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8019398:	601e      	str	r6, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 801939a:	6843      	ldr	r3, [r0, #4]
 801939c:	2b00      	cmp	r3, #0
 801939e:	d000      	beq.n	80193a2 <HAL_EXTI_IRQHandler+0x2a>
    {
      hexti->RisingCallback();
 80193a0:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80193a2:	4b07      	ldr	r3, [pc, #28]	; (80193c0 <HAL_EXTI_IRQHandler+0x48>)
 80193a4:	469c      	mov	ip, r3
 80193a6:	4464      	add	r4, ip
  regval = (*regaddr & maskline);
 80193a8:	6823      	ldr	r3, [r4, #0]

  if (regval != 0x00u)
 80193aa:	421e      	tst	r6, r3
 80193ac:	d004      	beq.n	80193b8 <HAL_EXTI_IRQHandler+0x40>
  {
    /* Clear pending bit */
    *regaddr = maskline;

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80193ae:	68ab      	ldr	r3, [r5, #8]
    *regaddr = maskline;
 80193b0:	6026      	str	r6, [r4, #0]
    if (hexti->FallingCallback != NULL)
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d000      	beq.n	80193b8 <HAL_EXTI_IRQHandler+0x40>
    {
      hexti->FallingCallback();
 80193b6:	4798      	blx	r3
    }
  }
}
 80193b8:	bd70      	pop	{r4, r5, r6, pc}
 80193ba:	46c0      	nop			; (mov r8, r8)
 80193bc:	4002180c 	.word	0x4002180c
 80193c0:	40021810 	.word	0x40021810

080193c4 <HAL_EXTI_ClearPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80193c4:	2201      	movs	r2, #1
{
 80193c6:	b510      	push	{r4, lr}
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80193c8:	6804      	ldr	r4, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80193ca:	201f      	movs	r0, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80193cc:	0c23      	lsrs	r3, r4, #16
 80193ce:	4013      	ands	r3, r2
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80193d0:	4020      	ands	r0, r4
 80193d2:	4082      	lsls	r2, r0

  if (Edge != EXTI_TRIGGER_RISING)
  {
    /* Get falling edge pending register address */
    regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80193d4:	015b      	lsls	r3, r3, #5
  if (Edge != EXTI_TRIGGER_RISING)
 80193d6:	2901      	cmp	r1, #1
 80193d8:	d004      	beq.n	80193e4 <HAL_EXTI_ClearPending+0x20>
    regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80193da:	4904      	ldr	r1, [pc, #16]	; (80193ec <HAL_EXTI_ClearPending+0x28>)
 80193dc:	468c      	mov	ip, r1
 80193de:	4463      	add	r3, ip
    /* Get falling edge pending register address */
    regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
  }

  /* Clear Pending bit */
  *regaddr =  maskline;
 80193e0:	601a      	str	r2, [r3, #0]
}
 80193e2:	bd10      	pop	{r4, pc}
    regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80193e4:	4902      	ldr	r1, [pc, #8]	; (80193f0 <HAL_EXTI_ClearPending+0x2c>)
 80193e6:	468c      	mov	ip, r1
 80193e8:	4463      	add	r3, ip
 80193ea:	e7f9      	b.n	80193e0 <HAL_EXTI_ClearPending+0x1c>
 80193ec:	40021810 	.word	0x40021810
 80193f0:	4002180c 	.word	0x4002180c

080193f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80193f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193f6:	46de      	mov	lr, fp
 80193f8:	4657      	mov	r7, sl
 80193fa:	464e      	mov	r6, r9
 80193fc:	4645      	mov	r5, r8
 80193fe:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8019400:	680c      	ldr	r4, [r1, #0]
{
 8019402:	468c      	mov	ip, r1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8019404:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8019406:	2300      	movs	r3, #0
{
 8019408:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801940a:	2c00      	cmp	r4, #0
 801940c:	d07e      	beq.n	801950c <HAL_GPIO_Init+0x118>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801940e:	497b      	ldr	r1, [pc, #492]	; (80195fc <HAL_GPIO_Init+0x208>)
 8019410:	468b      	mov	fp, r1
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8019412:	4661      	mov	r1, ip
 8019414:	9101      	str	r1, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8019416:	2601      	movs	r6, #1
 8019418:	0021      	movs	r1, r4
 801941a:	409e      	lsls	r6, r3
 801941c:	4031      	ands	r1, r6
 801941e:	468a      	mov	sl, r1
    if (iocurrent != 0x00u)
 8019420:	4234      	tst	r4, r6
 8019422:	d06d      	beq.n	8019500 <HAL_GPIO_Init+0x10c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8019424:	9d01      	ldr	r5, [sp, #4]
 8019426:	6869      	ldr	r1, [r5, #4]
 8019428:	2503      	movs	r5, #3
 801942a:	400d      	ands	r5, r1
 801942c:	46ac      	mov	ip, r5
 801942e:	3d01      	subs	r5, #1
 8019430:	2d01      	cmp	r5, #1
 8019432:	d800      	bhi.n	8019436 <HAL_GPIO_Init+0x42>
 8019434:	e071      	b.n	801951a <HAL_GPIO_Init+0x126>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8019436:	4665      	mov	r5, ip
 8019438:	2d03      	cmp	r5, #3
 801943a:	d000      	beq.n	801943e <HAL_GPIO_Init+0x4a>
 801943c:	e0b5      	b.n	80195aa <HAL_GPIO_Init+0x1b6>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801943e:	4666      	mov	r6, ip
 8019440:	4096      	lsls	r6, r2
 8019442:	43f5      	mvns	r5, r6
 8019444:	9500      	str	r5, [sp, #0]
      temp = GPIOx->MODER;
 8019446:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8019448:	9d00      	ldr	r5, [sp, #0]
 801944a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801944c:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 801944e:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8019450:	25c0      	movs	r5, #192	; 0xc0
 8019452:	02ad      	lsls	r5, r5, #10
 8019454:	4229      	tst	r1, r5
 8019456:	d053      	beq.n	8019500 <HAL_GPIO_Init+0x10c>
        temp = EXTI->EXTICR[position >> 2u];
 8019458:	4e68      	ldr	r6, [pc, #416]	; (80195fc <HAL_GPIO_Init+0x208>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 801945a:	2703      	movs	r7, #3
 801945c:	46b4      	mov	ip, r6
        temp = EXTI->EXTICR[position >> 2u];
 801945e:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8019460:	401f      	ands	r7, r3
 8019462:	00ff      	lsls	r7, r7, #3
 8019464:	00ad      	lsls	r5, r5, #2
 8019466:	4465      	add	r5, ip
 8019468:	46bc      	mov	ip, r7
        temp = EXTI->EXTICR[position >> 2u];
 801946a:	6e2e      	ldr	r6, [r5, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 801946c:	270f      	movs	r7, #15
        temp = EXTI->EXTICR[position >> 2u];
 801946e:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8019470:	4666      	mov	r6, ip
 8019472:	40b7      	lsls	r7, r6
 8019474:	003e      	movs	r6, r7
 8019476:	464f      	mov	r7, r9
 8019478:	43b7      	bics	r7, r6
 801947a:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 801947c:	27a0      	movs	r7, #160	; 0xa0
 801947e:	05ff      	lsls	r7, r7, #23
 8019480:	42b8      	cmp	r0, r7
 8019482:	d012      	beq.n	80194aa <HAL_GPIO_Init+0xb6>
 8019484:	4f5e      	ldr	r7, [pc, #376]	; (8019600 <HAL_GPIO_Init+0x20c>)
 8019486:	42b8      	cmp	r0, r7
 8019488:	d100      	bne.n	801948c <HAL_GPIO_Init+0x98>
 801948a:	e0a7      	b.n	80195dc <HAL_GPIO_Init+0x1e8>
 801948c:	4f5d      	ldr	r7, [pc, #372]	; (8019604 <HAL_GPIO_Init+0x210>)
 801948e:	42b8      	cmp	r0, r7
 8019490:	d100      	bne.n	8019494 <HAL_GPIO_Init+0xa0>
 8019492:	e0ab      	b.n	80195ec <HAL_GPIO_Init+0x1f8>
 8019494:	4f5c      	ldr	r7, [pc, #368]	; (8019608 <HAL_GPIO_Init+0x214>)
 8019496:	42b8      	cmp	r0, r7
 8019498:	d100      	bne.n	801949c <HAL_GPIO_Init+0xa8>
 801949a:	e098      	b.n	80195ce <HAL_GPIO_Init+0x1da>
 801949c:	4666      	mov	r6, ip
 801949e:	2705      	movs	r7, #5
 80194a0:	40b7      	lsls	r7, r6
 80194a2:	003e      	movs	r6, r7
 80194a4:	464f      	mov	r7, r9
 80194a6:	4337      	orrs	r7, r6
 80194a8:	46b9      	mov	r9, r7
        EXTI->EXTICR[position >> 2u] = temp;
 80194aa:	464e      	mov	r6, r9
 80194ac:	662e      	str	r6, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 80194ae:	2680      	movs	r6, #128	; 0x80
 80194b0:	465d      	mov	r5, fp
 80194b2:	59ad      	ldr	r5, [r5, r6]
        temp &= ~(iocurrent);
 80194b4:	4656      	mov	r6, sl
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80194b6:	2780      	movs	r7, #128	; 0x80
        temp &= ~(iocurrent);
 80194b8:	43f6      	mvns	r6, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80194ba:	027f      	lsls	r7, r7, #9
        temp &= ~(iocurrent);
 80194bc:	46b0      	mov	r8, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80194be:	4239      	tst	r1, r7
 80194c0:	d000      	beq.n	80194c4 <HAL_GPIO_Init+0xd0>
 80194c2:	e081      	b.n	80195c8 <HAL_GPIO_Init+0x1d4>
        temp &= ~(iocurrent);
 80194c4:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80194c6:	465f      	mov	r7, fp
 80194c8:	2680      	movs	r6, #128	; 0x80
 80194ca:	51bd      	str	r5, [r7, r6]

        temp = EXTI->EMR1;
 80194cc:	2584      	movs	r5, #132	; 0x84
 80194ce:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80194d0:	038e      	lsls	r6, r1, #14
 80194d2:	d500      	bpl.n	80194d6 <HAL_GPIO_Init+0xe2>
 80194d4:	e075      	b.n	80195c2 <HAL_GPIO_Init+0x1ce>
        temp &= ~(iocurrent);
 80194d6:	4646      	mov	r6, r8
 80194d8:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80194da:	2684      	movs	r6, #132	; 0x84
 80194dc:	46b4      	mov	ip, r6
 80194de:	465e      	mov	r6, fp
 80194e0:	4667      	mov	r7, ip
 80194e2:	51f5      	str	r5, [r6, r7]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80194e4:	6835      	ldr	r5, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80194e6:	02ce      	lsls	r6, r1, #11
 80194e8:	d468      	bmi.n	80195bc <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 80194ea:	4646      	mov	r6, r8
 80194ec:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80194ee:	465e      	mov	r6, fp
 80194f0:	6035      	str	r5, [r6, #0]

        temp = EXTI->FTSR1;
 80194f2:	6875      	ldr	r5, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80194f4:	0289      	lsls	r1, r1, #10
 80194f6:	d45d      	bmi.n	80195b4 <HAL_GPIO_Init+0x1c0>
        temp &= ~(iocurrent);
 80194f8:	4641      	mov	r1, r8
 80194fa:	400d      	ands	r5, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80194fc:	4659      	mov	r1, fp
 80194fe:	604d      	str	r5, [r1, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8019500:	0021      	movs	r1, r4
      }
    }

    position++;
 8019502:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8019504:	40d9      	lsrs	r1, r3
 8019506:	3202      	adds	r2, #2
 8019508:	2900      	cmp	r1, #0
 801950a:	d184      	bne.n	8019416 <HAL_GPIO_Init+0x22>
  }
}
 801950c:	b003      	add	sp, #12
 801950e:	bcf0      	pop	{r4, r5, r6, r7}
 8019510:	46bb      	mov	fp, r7
 8019512:	46b2      	mov	sl, r6
 8019514:	46a9      	mov	r9, r5
 8019516:	46a0      	mov	r8, r4
 8019518:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 801951a:	6885      	ldr	r5, [r0, #8]
 801951c:	46a8      	mov	r8, r5
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801951e:	2503      	movs	r5, #3
 8019520:	4095      	lsls	r5, r2
 8019522:	43ef      	mvns	r7, r5
 8019524:	9700      	str	r7, [sp, #0]
 8019526:	4647      	mov	r7, r8
 8019528:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 801952a:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801952c:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 801952e:	68ef      	ldr	r7, [r5, #12]
 8019530:	4097      	lsls	r7, r2
 8019532:	46b8      	mov	r8, r7
 8019534:	464f      	mov	r7, r9
 8019536:	4645      	mov	r5, r8
 8019538:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 801953a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 801953c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801953e:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019540:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8019542:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8019544:	090e      	lsrs	r6, r1, #4
 8019546:	402e      	ands	r6, r5
 8019548:	409e      	lsls	r6, r3
 801954a:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 801954c:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 801954e:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8019550:	9d00      	ldr	r5, [sp, #0]
 8019552:	402e      	ands	r6, r5
 8019554:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8019556:	9d01      	ldr	r5, [sp, #4]
 8019558:	4647      	mov	r7, r8
 801955a:	68ae      	ldr	r6, [r5, #8]
 801955c:	4096      	lsls	r6, r2
 801955e:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8019560:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8019562:	4667      	mov	r7, ip
 8019564:	4666      	mov	r6, ip
 8019566:	4096      	lsls	r6, r2
 8019568:	2f02      	cmp	r7, #2
 801956a:	d000      	beq.n	801956e <HAL_GPIO_Init+0x17a>
 801956c:	e76b      	b.n	8019446 <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3u];
 801956e:	08dd      	lsrs	r5, r3, #3
 8019570:	00ad      	lsls	r5, r5, #2
 8019572:	46ac      	mov	ip, r5
 8019574:	4484      	add	ip, r0
 8019576:	4665      	mov	r5, ip
 8019578:	6a2d      	ldr	r5, [r5, #32]
 801957a:	46a9      	mov	r9, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801957c:	2507      	movs	r5, #7
 801957e:	002f      	movs	r7, r5
 8019580:	401f      	ands	r7, r3
 8019582:	00bd      	lsls	r5, r7, #2
 8019584:	270f      	movs	r7, #15
 8019586:	46a8      	mov	r8, r5
 8019588:	40af      	lsls	r7, r5
 801958a:	464d      	mov	r5, r9
 801958c:	43bd      	bics	r5, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801958e:	4647      	mov	r7, r8
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8019590:	46a9      	mov	r9, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8019592:	9d01      	ldr	r5, [sp, #4]
 8019594:	692d      	ldr	r5, [r5, #16]
 8019596:	40bd      	lsls	r5, r7
 8019598:	46a8      	mov	r8, r5
 801959a:	464d      	mov	r5, r9
 801959c:	4647      	mov	r7, r8
 801959e:	433d      	orrs	r5, r7
 80195a0:	46a9      	mov	r9, r5
        GPIOx->AFR[position >> 3u] = temp;
 80195a2:	4665      	mov	r5, ip
 80195a4:	464f      	mov	r7, r9
 80195a6:	622f      	str	r7, [r5, #32]
 80195a8:	e74d      	b.n	8019446 <HAL_GPIO_Init+0x52>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80195aa:	2503      	movs	r5, #3
 80195ac:	4095      	lsls	r5, r2
 80195ae:	43ed      	mvns	r5, r5
 80195b0:	9500      	str	r5, [sp, #0]
 80195b2:	e7cc      	b.n	801954e <HAL_GPIO_Init+0x15a>
          temp |= iocurrent;
 80195b4:	4651      	mov	r1, sl
 80195b6:	4329      	orrs	r1, r5
 80195b8:	000d      	movs	r5, r1
 80195ba:	e79f      	b.n	80194fc <HAL_GPIO_Init+0x108>
          temp |= iocurrent;
 80195bc:	4656      	mov	r6, sl
 80195be:	4335      	orrs	r5, r6
 80195c0:	e795      	b.n	80194ee <HAL_GPIO_Init+0xfa>
          temp |= iocurrent;
 80195c2:	4656      	mov	r6, sl
 80195c4:	4335      	orrs	r5, r6
 80195c6:	e788      	b.n	80194da <HAL_GPIO_Init+0xe6>
          temp |= iocurrent;
 80195c8:	4656      	mov	r6, sl
 80195ca:	4335      	orrs	r5, r6
 80195cc:	e77b      	b.n	80194c6 <HAL_GPIO_Init+0xd2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80195ce:	4667      	mov	r7, ip
 80195d0:	2603      	movs	r6, #3
 80195d2:	40be      	lsls	r6, r7
 80195d4:	464f      	mov	r7, r9
 80195d6:	4337      	orrs	r7, r6
 80195d8:	46b9      	mov	r9, r7
 80195da:	e766      	b.n	80194aa <HAL_GPIO_Init+0xb6>
 80195dc:	4666      	mov	r6, ip
 80195de:	2701      	movs	r7, #1
 80195e0:	40b7      	lsls	r7, r6
 80195e2:	003e      	movs	r6, r7
 80195e4:	464f      	mov	r7, r9
 80195e6:	4337      	orrs	r7, r6
 80195e8:	46b9      	mov	r9, r7
 80195ea:	e75e      	b.n	80194aa <HAL_GPIO_Init+0xb6>
 80195ec:	4667      	mov	r7, ip
 80195ee:	2602      	movs	r6, #2
 80195f0:	40be      	lsls	r6, r7
 80195f2:	464f      	mov	r7, r9
 80195f4:	4337      	orrs	r7, r6
 80195f6:	46b9      	mov	r9, r7
 80195f8:	e757      	b.n	80194aa <HAL_GPIO_Init+0xb6>
 80195fa:	46c0      	nop			; (mov r8, r8)
 80195fc:	40021800 	.word	0x40021800
 8019600:	50000400 	.word	0x50000400
 8019604:	50000800 	.word	0x50000800
 8019608:	50000c00 	.word	0x50000c00

0801960c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801960c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801960e:	46de      	mov	lr, fp
 8019610:	4657      	mov	r7, sl
 8019612:	464e      	mov	r6, r9
 8019614:	4645      	mov	r5, r8
 8019616:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t position = 0x00u;
 8019618:	2300      	movs	r3, #0
{
 801961a:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 801961c:	2900      	cmp	r1, #0
 801961e:	d065      	beq.n	80196ec <HAL_GPIO_DeInit+0xe0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8019620:	2201      	movs	r2, #1
 8019622:	4691      	mov	r9, r2
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8019624:	3202      	adds	r2, #2
 8019626:	4693      	mov	fp, r2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8019628:	4a3a      	ldr	r2, [pc, #232]	; (8019714 <HAL_GPIO_DeInit+0x108>)
 801962a:	4694      	mov	ip, r2
 801962c:	e044      	b.n	80196b8 <HAL_GPIO_DeInit+0xac>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 801962e:	4c3a      	ldr	r4, [pc, #232]	; (8019718 <HAL_GPIO_DeInit+0x10c>)
 8019630:	42a0      	cmp	r0, r4
 8019632:	d062      	beq.n	80196fa <HAL_GPIO_DeInit+0xee>
 8019634:	4c39      	ldr	r4, [pc, #228]	; (801971c <HAL_GPIO_DeInit+0x110>)
 8019636:	42a0      	cmp	r0, r4
 8019638:	d063      	beq.n	8019702 <HAL_GPIO_DeInit+0xf6>
 801963a:	4c39      	ldr	r4, [pc, #228]	; (8019720 <HAL_GPIO_DeInit+0x114>)
 801963c:	42a0      	cmp	r0, r4
 801963e:	d064      	beq.n	801970a <HAL_GPIO_DeInit+0xfe>
 8019640:	2405      	movs	r4, #5
 8019642:	40ac      	lsls	r4, r5
 8019644:	0025      	movs	r5, r4
 8019646:	42ae      	cmp	r6, r5
 8019648:	d114      	bne.n	8019674 <HAL_GPIO_DeInit+0x68>
        EXTI->IMR1 &= ~(iocurrent);
 801964a:	2480      	movs	r4, #128	; 0x80
 801964c:	4665      	mov	r5, ip
 801964e:	4666      	mov	r6, ip
 8019650:	592d      	ldr	r5, [r5, r4]
 8019652:	43bd      	bics	r5, r7
 8019654:	5135      	str	r5, [r6, r4]
        EXTI->EMR1 &= ~(iocurrent);
 8019656:	3404      	adds	r4, #4
 8019658:	5935      	ldr	r5, [r6, r4]
 801965a:	43bd      	bics	r5, r7
 801965c:	5135      	str	r5, [r6, r4]
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
        EXTI->FTSR1 &= ~(iocurrent);

        tmp = 0x0FuL << (8u * (position & 0x03u));
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 801965e:	4644      	mov	r4, r8
        EXTI->RTSR1 &= ~(iocurrent);
 8019660:	6835      	ldr	r5, [r6, #0]
 8019662:	43bd      	bics	r5, r7
 8019664:	6035      	str	r5, [r6, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8019666:	6875      	ldr	r5, [r6, #4]
 8019668:	43bd      	bics	r5, r7
 801966a:	6075      	str	r5, [r6, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 801966c:	9e01      	ldr	r6, [sp, #4]
 801966e:	6e35      	ldr	r5, [r6, #96]	; 0x60
 8019670:	43a5      	bics	r5, r4
 8019672:	6635      	str	r5, [r6, #96]	; 0x60
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8019674:	465e      	mov	r6, fp
 8019676:	005d      	lsls	r5, r3, #1
 8019678:	40ae      	lsls	r6, r5
 801967a:	6804      	ldr	r4, [r0, #0]
 801967c:	0035      	movs	r5, r6
 801967e:	4334      	orrs	r4, r6
 8019680:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8019682:	08dc      	lsrs	r4, r3, #3
 8019684:	00a4      	lsls	r4, r4, #2
 8019686:	1904      	adds	r4, r0, r4
 8019688:	6a26      	ldr	r6, [r4, #32]
 801968a:	2707      	movs	r7, #7
 801968c:	46b0      	mov	r8, r6
 801968e:	260f      	movs	r6, #15
 8019690:	401f      	ands	r7, r3
 8019692:	00bf      	lsls	r7, r7, #2
 8019694:	40be      	lsls	r6, r7
 8019696:	0037      	movs	r7, r6
 8019698:	4646      	mov	r6, r8
 801969a:	43be      	bics	r6, r7
 801969c:	6226      	str	r6, [r4, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801969e:	6884      	ldr	r4, [r0, #8]
 80196a0:	43ac      	bics	r4, r5
 80196a2:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80196a4:	6844      	ldr	r4, [r0, #4]
 80196a6:	4394      	bics	r4, r2
 80196a8:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80196aa:	68c2      	ldr	r2, [r0, #12]
 80196ac:	43aa      	bics	r2, r5
 80196ae:	60c2      	str	r2, [r0, #12]
  while ((GPIO_Pin >> position) != 0x00u)
 80196b0:	000a      	movs	r2, r1
    }

    position++;
 80196b2:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80196b4:	40da      	lsrs	r2, r3
 80196b6:	d019      	beq.n	80196ec <HAL_GPIO_DeInit+0xe0>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80196b8:	464a      	mov	r2, r9
 80196ba:	000f      	movs	r7, r1
 80196bc:	409a      	lsls	r2, r3
 80196be:	4017      	ands	r7, r2
    if (iocurrent != 0x00u)
 80196c0:	4211      	tst	r1, r2
 80196c2:	d0f5      	beq.n	80196b0 <HAL_GPIO_DeInit+0xa4>
      tmp = EXTI->EXTICR[position >> 2u];
 80196c4:	4d13      	ldr	r5, [pc, #76]	; (8019714 <HAL_GPIO_DeInit+0x108>)
 80196c6:	089c      	lsrs	r4, r3, #2
 80196c8:	46a8      	mov	r8, r5
 80196ca:	00a4      	lsls	r4, r4, #2
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80196cc:	465d      	mov	r5, fp
 80196ce:	4444      	add	r4, r8
      tmp = EXTI->EXTICR[position >> 2u];
 80196d0:	6e26      	ldr	r6, [r4, #96]	; 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80196d2:	9401      	str	r4, [sp, #4]
 80196d4:	240f      	movs	r4, #15
 80196d6:	401d      	ands	r5, r3
 80196d8:	00ed      	lsls	r5, r5, #3
 80196da:	40ac      	lsls	r4, r5
 80196dc:	46a0      	mov	r8, r4
 80196de:	4026      	ands	r6, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80196e0:	24a0      	movs	r4, #160	; 0xa0
 80196e2:	05e4      	lsls	r4, r4, #23
 80196e4:	42a0      	cmp	r0, r4
 80196e6:	d1a2      	bne.n	801962e <HAL_GPIO_DeInit+0x22>
 80196e8:	2500      	movs	r5, #0
 80196ea:	e7ac      	b.n	8019646 <HAL_GPIO_DeInit+0x3a>
  }
}
 80196ec:	b003      	add	sp, #12
 80196ee:	bcf0      	pop	{r4, r5, r6, r7}
 80196f0:	46bb      	mov	fp, r7
 80196f2:	46b2      	mov	sl, r6
 80196f4:	46a9      	mov	r9, r5
 80196f6:	46a0      	mov	r8, r4
 80196f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80196fa:	464c      	mov	r4, r9
 80196fc:	40ac      	lsls	r4, r5
 80196fe:	0025      	movs	r5, r4
 8019700:	e7a1      	b.n	8019646 <HAL_GPIO_DeInit+0x3a>
 8019702:	2402      	movs	r4, #2
 8019704:	40ac      	lsls	r4, r5
 8019706:	0025      	movs	r5, r4
 8019708:	e79d      	b.n	8019646 <HAL_GPIO_DeInit+0x3a>
 801970a:	465c      	mov	r4, fp
 801970c:	40ac      	lsls	r4, r5
 801970e:	0025      	movs	r5, r4
 8019710:	e799      	b.n	8019646 <HAL_GPIO_DeInit+0x3a>
 8019712:	46c0      	nop			; (mov r8, r8)
 8019714:	40021800 	.word	0x40021800
 8019718:	50000400 	.word	0x50000400
 801971c:	50000800 	.word	0x50000800
 8019720:	50000c00 	.word	0x50000c00

08019724 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8019724:	6900      	ldr	r0, [r0, #16]
 8019726:	4008      	ands	r0, r1
 8019728:	1e43      	subs	r3, r0, #1
 801972a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 801972c:	b2c0      	uxtb	r0, r0
}
 801972e:	4770      	bx	lr

08019730 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8019730:	2a00      	cmp	r2, #0
 8019732:	d001      	beq.n	8019738 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8019734:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8019736:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8019738:	6281      	str	r1, [r0, #40]	; 0x28
}
 801973a:	e7fc      	b.n	8019736 <HAL_GPIO_WritePin+0x6>

0801973c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801973c:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 801973e:	4c13      	ldr	r4, [pc, #76]	; (801978c <HAL_PWREx_ControlVoltageScaling+0x50>)
 8019740:	4a13      	ldr	r2, [pc, #76]	; (8019790 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8019742:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8019744:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8019746:	4013      	ands	r3, r2
 8019748:	4303      	orrs	r3, r0
 801974a:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801974c:	2380      	movs	r3, #128	; 0x80
 801974e:	009b      	lsls	r3, r3, #2
 8019750:	4298      	cmp	r0, r3
 8019752:	d001      	beq.n	8019758 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8019754:	0028      	movs	r0, r5
 8019756:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8019758:	4b0e      	ldr	r3, [pc, #56]	; (8019794 <HAL_PWREx_ControlVoltageScaling+0x58>)
 801975a:	490f      	ldr	r1, [pc, #60]	; (8019798 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	0058      	lsls	r0, r3, #1
 8019760:	18c0      	adds	r0, r0, r3
 8019762:	0040      	lsls	r0, r0, #1
 8019764:	f7e6 fce0 	bl	8000128 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8019768:	2280      	movs	r2, #128	; 0x80
 801976a:	6963      	ldr	r3, [r4, #20]
 801976c:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 801976e:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8019770:	4213      	tst	r3, r2
 8019772:	d102      	bne.n	801977a <HAL_PWREx_ControlVoltageScaling+0x3e>
 8019774:	e7ee      	b.n	8019754 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8019776:	2800      	cmp	r0, #0
 8019778:	d005      	beq.n	8019786 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801977a:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 801977c:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801977e:	4213      	tst	r3, r2
 8019780:	d1f9      	bne.n	8019776 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8019782:	2500      	movs	r5, #0
 8019784:	e7e6      	b.n	8019754 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8019786:	2503      	movs	r5, #3
 8019788:	e7e4      	b.n	8019754 <HAL_PWREx_ControlVoltageScaling+0x18>
 801978a:	46c0      	nop			; (mov r8, r8)
 801978c:	40007000 	.word	0x40007000
 8019790:	fffff9ff 	.word	0xfffff9ff
 8019794:	20000088 	.word	0x20000088
 8019798:	000f4240 	.word	0x000f4240

0801979c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801979c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801979e:	46ce      	mov	lr, r9
 80197a0:	4647      	mov	r7, r8
 80197a2:	b580      	push	{r7, lr}
 80197a4:	0004      	movs	r4, r0
 80197a6:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80197a8:	2800      	cmp	r0, #0
 80197aa:	d100      	bne.n	80197ae <HAL_RCC_OscConfig+0x12>
 80197ac:	e0f9      	b.n	80199a2 <HAL_RCC_OscConfig+0x206>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80197ae:	6803      	ldr	r3, [r0, #0]
 80197b0:	07da      	lsls	r2, r3, #31
 80197b2:	d531      	bpl.n	8019818 <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80197b4:	2238      	movs	r2, #56	; 0x38
 80197b6:	49c5      	ldr	r1, [pc, #788]	; (8019acc <HAL_RCC_OscConfig+0x330>)
 80197b8:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80197ba:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80197bc:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80197be:	2a10      	cmp	r2, #16
 80197c0:	d100      	bne.n	80197c4 <HAL_RCC_OscConfig+0x28>
 80197c2:	e0f4      	b.n	80199ae <HAL_RCC_OscConfig+0x212>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80197c4:	2a08      	cmp	r2, #8
 80197c6:	d100      	bne.n	80197ca <HAL_RCC_OscConfig+0x2e>
 80197c8:	e0f5      	b.n	80199b6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80197ca:	2280      	movs	r2, #128	; 0x80
 80197cc:	6863      	ldr	r3, [r4, #4]
 80197ce:	0252      	lsls	r2, r2, #9
 80197d0:	4293      	cmp	r3, r2
 80197d2:	d100      	bne.n	80197d6 <HAL_RCC_OscConfig+0x3a>
 80197d4:	e102      	b.n	80199dc <HAL_RCC_OscConfig+0x240>
 80197d6:	21a0      	movs	r1, #160	; 0xa0
 80197d8:	02c9      	lsls	r1, r1, #11
 80197da:	428b      	cmp	r3, r1
 80197dc:	d100      	bne.n	80197e0 <HAL_RCC_OscConfig+0x44>
 80197de:	e1dd      	b.n	8019b9c <HAL_RCC_OscConfig+0x400>
 80197e0:	4dba      	ldr	r5, [pc, #744]	; (8019acc <HAL_RCC_OscConfig+0x330>)
 80197e2:	49bb      	ldr	r1, [pc, #748]	; (8019ad0 <HAL_RCC_OscConfig+0x334>)
 80197e4:	682a      	ldr	r2, [r5, #0]
 80197e6:	400a      	ands	r2, r1
 80197e8:	602a      	str	r2, [r5, #0]
 80197ea:	682a      	ldr	r2, [r5, #0]
 80197ec:	49b9      	ldr	r1, [pc, #740]	; (8019ad4 <HAL_RCC_OscConfig+0x338>)
 80197ee:	400a      	ands	r2, r1
 80197f0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d000      	beq.n	80197f8 <HAL_RCC_OscConfig+0x5c>
 80197f6:	e0f5      	b.n	80199e4 <HAL_RCC_OscConfig+0x248>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80197f8:	f7ff face 	bl	8018d98 <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80197fc:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80197fe:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8019800:	02bf      	lsls	r7, r7, #10
 8019802:	e005      	b.n	8019810 <HAL_RCC_OscConfig+0x74>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8019804:	f7ff fac8 	bl	8018d98 <HAL_GetTick>
 8019808:	1b80      	subs	r0, r0, r6
 801980a:	2864      	cmp	r0, #100	; 0x64
 801980c:	d900      	bls.n	8019810 <HAL_RCC_OscConfig+0x74>
 801980e:	e13d      	b.n	8019a8c <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8019810:	682b      	ldr	r3, [r5, #0]
 8019812:	423b      	tst	r3, r7
 8019814:	d1f6      	bne.n	8019804 <HAL_RCC_OscConfig+0x68>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019816:	6823      	ldr	r3, [r4, #0]
 8019818:	079a      	lsls	r2, r3, #30
 801981a:	d52c      	bpl.n	8019876 <HAL_RCC_OscConfig+0xda>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801981c:	2338      	movs	r3, #56	; 0x38
 801981e:	4aab      	ldr	r2, [pc, #684]	; (8019acc <HAL_RCC_OscConfig+0x330>)
 8019820:	6891      	ldr	r1, [r2, #8]
 8019822:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8019824:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8019826:	2b10      	cmp	r3, #16
 8019828:	d100      	bne.n	801982c <HAL_RCC_OscConfig+0x90>
 801982a:	e0ec      	b.n	8019a06 <HAL_RCC_OscConfig+0x26a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 801982c:	2b00      	cmp	r3, #0
 801982e:	d000      	beq.n	8019832 <HAL_RCC_OscConfig+0x96>
 8019830:	e0ee      	b.n	8019a10 <HAL_RCC_OscConfig+0x274>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8019832:	6813      	ldr	r3, [r2, #0]
 8019834:	055b      	lsls	r3, r3, #21
 8019836:	d500      	bpl.n	801983a <HAL_RCC_OscConfig+0x9e>
 8019838:	e0af      	b.n	801999a <HAL_RCC_OscConfig+0x1fe>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801983a:	6851      	ldr	r1, [r2, #4]
 801983c:	6963      	ldr	r3, [r4, #20]
 801983e:	48a6      	ldr	r0, [pc, #664]	; (8019ad8 <HAL_RCC_OscConfig+0x33c>)
 8019840:	021b      	lsls	r3, r3, #8
 8019842:	4001      	ands	r1, r0
 8019844:	430b      	orrs	r3, r1
 8019846:	6053      	str	r3, [r2, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8019848:	4aa0      	ldr	r2, [pc, #640]	; (8019acc <HAL_RCC_OscConfig+0x330>)
 801984a:	49a4      	ldr	r1, [pc, #656]	; (8019adc <HAL_RCC_OscConfig+0x340>)
 801984c:	6813      	ldr	r3, [r2, #0]
 801984e:	400b      	ands	r3, r1
 8019850:	6921      	ldr	r1, [r4, #16]
 8019852:	430b      	orrs	r3, r1
 8019854:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8019856:	6813      	ldr	r3, [r2, #0]
 8019858:	4aa1      	ldr	r2, [pc, #644]	; (8019ae0 <HAL_RCC_OscConfig+0x344>)
 801985a:	049b      	lsls	r3, r3, #18
 801985c:	0f5b      	lsrs	r3, r3, #29
 801985e:	40da      	lsrs	r2, r3
 8019860:	0013      	movs	r3, r2
 8019862:	4aa0      	ldr	r2, [pc, #640]	; (8019ae4 <HAL_RCC_OscConfig+0x348>)
 8019864:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8019866:	4ba0      	ldr	r3, [pc, #640]	; (8019ae8 <HAL_RCC_OscConfig+0x34c>)
 8019868:	6818      	ldr	r0, [r3, #0]
 801986a:	f7ff fa4f 	bl	8018d0c <HAL_InitTick>
 801986e:	2800      	cmp	r0, #0
 8019870:	d000      	beq.n	8019874 <HAL_RCC_OscConfig+0xd8>
 8019872:	e096      	b.n	80199a2 <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019874:	6823      	ldr	r3, [r4, #0]
 8019876:	071a      	lsls	r2, r3, #28
 8019878:	d471      	bmi.n	801995e <HAL_RCC_OscConfig+0x1c2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801987a:	075b      	lsls	r3, r3, #29
 801987c:	d545      	bpl.n	801990a <HAL_RCC_OscConfig+0x16e>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 801987e:	2338      	movs	r3, #56	; 0x38
 8019880:	4a92      	ldr	r2, [pc, #584]	; (8019acc <HAL_RCC_OscConfig+0x330>)
 8019882:	6891      	ldr	r1, [r2, #8]
 8019884:	400b      	ands	r3, r1
 8019886:	2b20      	cmp	r3, #32
 8019888:	d100      	bne.n	801988c <HAL_RCC_OscConfig+0xf0>
 801988a:	e0e7      	b.n	8019a5c <HAL_RCC_OscConfig+0x2c0>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801988c:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 801988e:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8019890:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8019892:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8019894:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8019896:	4219      	tst	r1, r3
 8019898:	d108      	bne.n	80198ac <HAL_RCC_OscConfig+0x110>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 801989a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 801989c:	4319      	orrs	r1, r3
 801989e:	63d1      	str	r1, [r2, #60]	; 0x3c
 80198a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80198a2:	4013      	ands	r3, r2
 80198a4:	9301      	str	r3, [sp, #4]
 80198a6:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 80198a8:	2301      	movs	r3, #1
 80198aa:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80198ac:	2780      	movs	r7, #128	; 0x80
 80198ae:	4e8f      	ldr	r6, [pc, #572]	; (8019aec <HAL_RCC_OscConfig+0x350>)
 80198b0:	007f      	lsls	r7, r7, #1
 80198b2:	6833      	ldr	r3, [r6, #0]
 80198b4:	423b      	tst	r3, r7
 80198b6:	d100      	bne.n	80198ba <HAL_RCC_OscConfig+0x11e>
 80198b8:	e0d9      	b.n	8019a6e <HAL_RCC_OscConfig+0x2d2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80198ba:	68a3      	ldr	r3, [r4, #8]
 80198bc:	2b01      	cmp	r3, #1
 80198be:	d100      	bne.n	80198c2 <HAL_RCC_OscConfig+0x126>
 80198c0:	e128      	b.n	8019b14 <HAL_RCC_OscConfig+0x378>
 80198c2:	2b05      	cmp	r3, #5
 80198c4:	d100      	bne.n	80198c8 <HAL_RCC_OscConfig+0x12c>
 80198c6:	e1c8      	b.n	8019c5a <HAL_RCC_OscConfig+0x4be>
 80198c8:	2101      	movs	r1, #1
 80198ca:	4e80      	ldr	r6, [pc, #512]	; (8019acc <HAL_RCC_OscConfig+0x330>)
 80198cc:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 80198ce:	438a      	bics	r2, r1
 80198d0:	65f2      	str	r2, [r6, #92]	; 0x5c
 80198d2:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 80198d4:	3103      	adds	r1, #3
 80198d6:	438a      	bics	r2, r1
 80198d8:	65f2      	str	r2, [r6, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d000      	beq.n	80198e0 <HAL_RCC_OscConfig+0x144>
 80198de:	e11d      	b.n	8019b1c <HAL_RCC_OscConfig+0x380>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80198e0:	f7ff fa5a 	bl	8018d98 <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80198e4:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 80198e6:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80198e8:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80198ea:	4d81      	ldr	r5, [pc, #516]	; (8019af0 <HAL_RCC_OscConfig+0x354>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80198ec:	e005      	b.n	80198fa <HAL_RCC_OscConfig+0x15e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80198ee:	f7ff fa53 	bl	8018d98 <HAL_GetTick>
 80198f2:	1bc0      	subs	r0, r0, r7
 80198f4:	42a8      	cmp	r0, r5
 80198f6:	d900      	bls.n	80198fa <HAL_RCC_OscConfig+0x15e>
 80198f8:	e0c8      	b.n	8019a8c <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80198fa:	4642      	mov	r2, r8
 80198fc:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80198fe:	421a      	tst	r2, r3
 8019900:	d1f5      	bne.n	80198ee <HAL_RCC_OscConfig+0x152>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8019902:	464b      	mov	r3, r9
 8019904:	2b01      	cmp	r3, #1
 8019906:	d100      	bne.n	801990a <HAL_RCC_OscConfig+0x16e>
 8019908:	e161      	b.n	8019bce <HAL_RCC_OscConfig+0x432>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801990a:	69e3      	ldr	r3, [r4, #28]
 801990c:	2b00      	cmp	r3, #0
 801990e:	d024      	beq.n	801995a <HAL_RCC_OscConfig+0x1be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8019910:	2238      	movs	r2, #56	; 0x38
 8019912:	4d6e      	ldr	r5, [pc, #440]	; (8019acc <HAL_RCC_OscConfig+0x330>)
 8019914:	68a9      	ldr	r1, [r5, #8]
 8019916:	400a      	ands	r2, r1
 8019918:	2a10      	cmp	r2, #16
 801991a:	d100      	bne.n	801991e <HAL_RCC_OscConfig+0x182>
 801991c:	e110      	b.n	8019b40 <HAL_RCC_OscConfig+0x3a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801991e:	2b02      	cmp	r3, #2
 8019920:	d100      	bne.n	8019924 <HAL_RCC_OscConfig+0x188>
 8019922:	e15a      	b.n	8019bda <HAL_RCC_OscConfig+0x43e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019924:	682b      	ldr	r3, [r5, #0]
 8019926:	4a73      	ldr	r2, [pc, #460]	; (8019af4 <HAL_RCC_OscConfig+0x358>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8019928:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 801992a:	4013      	ands	r3, r2
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 801992c:	2203      	movs	r2, #3
        __HAL_RCC_PLL_DISABLE();
 801992e:	602b      	str	r3, [r5, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8019930:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8019932:	04b6      	lsls	r6, r6, #18
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8019934:	4393      	bics	r3, r2
 8019936:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8019938:	68eb      	ldr	r3, [r5, #12]
 801993a:	4a6f      	ldr	r2, [pc, #444]	; (8019af8 <HAL_RCC_OscConfig+0x35c>)
 801993c:	4013      	ands	r3, r2
 801993e:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8019940:	f7ff fa2a 	bl	8018d98 <HAL_GetTick>
 8019944:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8019946:	e005      	b.n	8019954 <HAL_RCC_OscConfig+0x1b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8019948:	f7ff fa26 	bl	8018d98 <HAL_GetTick>
 801994c:	1b00      	subs	r0, r0, r4
 801994e:	2802      	cmp	r0, #2
 8019950:	d900      	bls.n	8019954 <HAL_RCC_OscConfig+0x1b8>
 8019952:	e09b      	b.n	8019a8c <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8019954:	682b      	ldr	r3, [r5, #0]
 8019956:	4233      	tst	r3, r6
 8019958:	d1f6      	bne.n	8019948 <HAL_RCC_OscConfig+0x1ac>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 801995a:	2000      	movs	r0, #0
 801995c:	e022      	b.n	80199a4 <HAL_RCC_OscConfig+0x208>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 801995e:	2238      	movs	r2, #56	; 0x38
 8019960:	4d5a      	ldr	r5, [pc, #360]	; (8019acc <HAL_RCC_OscConfig+0x330>)
 8019962:	68a9      	ldr	r1, [r5, #8]
 8019964:	400a      	ands	r2, r1
 8019966:	2a18      	cmp	r2, #24
 8019968:	d02f      	beq.n	80199ca <HAL_RCC_OscConfig+0x22e>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801996a:	69a3      	ldr	r3, [r4, #24]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d100      	bne.n	8019972 <HAL_RCC_OscConfig+0x1d6>
 8019970:	e08e      	b.n	8019a90 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_LSI_ENABLE();
 8019972:	2201      	movs	r2, #1
 8019974:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8019976:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8019978:	4313      	orrs	r3, r2
 801997a:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 801997c:	f7ff fa0c 	bl	8018d98 <HAL_GetTick>
 8019980:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8019982:	e005      	b.n	8019990 <HAL_RCC_OscConfig+0x1f4>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8019984:	f7ff fa08 	bl	8018d98 <HAL_GetTick>
 8019988:	1b80      	subs	r0, r0, r6
 801998a:	2802      	cmp	r0, #2
 801998c:	d900      	bls.n	8019990 <HAL_RCC_OscConfig+0x1f4>
 801998e:	e07d      	b.n	8019a8c <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8019990:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8019992:	421f      	tst	r7, r3
 8019994:	d0f6      	beq.n	8019984 <HAL_RCC_OscConfig+0x1e8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8019996:	6823      	ldr	r3, [r4, #0]
 8019998:	e76f      	b.n	801987a <HAL_RCC_OscConfig+0xde>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801999a:	68e3      	ldr	r3, [r4, #12]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d000      	beq.n	80199a2 <HAL_RCC_OscConfig+0x206>
 80199a0:	e74b      	b.n	801983a <HAL_RCC_OscConfig+0x9e>
    return HAL_ERROR;
 80199a2:	2001      	movs	r0, #1
}
 80199a4:	b003      	add	sp, #12
 80199a6:	bcc0      	pop	{r6, r7}
 80199a8:	46b9      	mov	r9, r7
 80199aa:	46b0      	mov	r8, r6
 80199ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80199ae:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80199b0:	078a      	lsls	r2, r1, #30
 80199b2:	d000      	beq.n	80199b6 <HAL_RCC_OscConfig+0x21a>
 80199b4:	e709      	b.n	80197ca <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80199b6:	4a45      	ldr	r2, [pc, #276]	; (8019acc <HAL_RCC_OscConfig+0x330>)
 80199b8:	6812      	ldr	r2, [r2, #0]
 80199ba:	0392      	lsls	r2, r2, #14
 80199bc:	d400      	bmi.n	80199c0 <HAL_RCC_OscConfig+0x224>
 80199be:	e72b      	b.n	8019818 <HAL_RCC_OscConfig+0x7c>
 80199c0:	6862      	ldr	r2, [r4, #4]
 80199c2:	2a00      	cmp	r2, #0
 80199c4:	d000      	beq.n	80199c8 <HAL_RCC_OscConfig+0x22c>
 80199c6:	e727      	b.n	8019818 <HAL_RCC_OscConfig+0x7c>
 80199c8:	e7eb      	b.n	80199a2 <HAL_RCC_OscConfig+0x206>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80199ca:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80199cc:	0792      	lsls	r2, r2, #30
 80199ce:	d400      	bmi.n	80199d2 <HAL_RCC_OscConfig+0x236>
 80199d0:	e753      	b.n	801987a <HAL_RCC_OscConfig+0xde>
 80199d2:	69a2      	ldr	r2, [r4, #24]
 80199d4:	2a00      	cmp	r2, #0
 80199d6:	d000      	beq.n	80199da <HAL_RCC_OscConfig+0x23e>
 80199d8:	e74f      	b.n	801987a <HAL_RCC_OscConfig+0xde>
 80199da:	e7e2      	b.n	80199a2 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80199dc:	4a3b      	ldr	r2, [pc, #236]	; (8019acc <HAL_RCC_OscConfig+0x330>)
 80199de:	6811      	ldr	r1, [r2, #0]
 80199e0:	430b      	orrs	r3, r1
 80199e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80199e4:	f7ff f9d8 	bl	8018d98 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80199e8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80199ea:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80199ec:	4f37      	ldr	r7, [pc, #220]	; (8019acc <HAL_RCC_OscConfig+0x330>)
 80199ee:	02b6      	lsls	r6, r6, #10
 80199f0:	e004      	b.n	80199fc <HAL_RCC_OscConfig+0x260>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80199f2:	f7ff f9d1 	bl	8018d98 <HAL_GetTick>
 80199f6:	1b40      	subs	r0, r0, r5
 80199f8:	2864      	cmp	r0, #100	; 0x64
 80199fa:	d847      	bhi.n	8019a8c <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80199fc:	683b      	ldr	r3, [r7, #0]
 80199fe:	4233      	tst	r3, r6
 8019a00:	d0f7      	beq.n	80199f2 <HAL_RCC_OscConfig+0x256>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019a02:	6823      	ldr	r3, [r4, #0]
 8019a04:	e708      	b.n	8019818 <HAL_RCC_OscConfig+0x7c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8019a06:	3b0d      	subs	r3, #13
 8019a08:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8019a0a:	2b02      	cmp	r3, #2
 8019a0c:	d100      	bne.n	8019a10 <HAL_RCC_OscConfig+0x274>
 8019a0e:	e0cf      	b.n	8019bb0 <HAL_RCC_OscConfig+0x414>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8019a10:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8019a12:	4d2e      	ldr	r5, [pc, #184]	; (8019acc <HAL_RCC_OscConfig+0x330>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d04e      	beq.n	8019ab6 <HAL_RCC_OscConfig+0x31a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8019a18:	682b      	ldr	r3, [r5, #0]
 8019a1a:	4a30      	ldr	r2, [pc, #192]	; (8019adc <HAL_RCC_OscConfig+0x340>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8019a1c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8019a1e:	4013      	ands	r3, r2
 8019a20:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8019a22:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8019a24:	4313      	orrs	r3, r2
 8019a26:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8019a28:	2380      	movs	r3, #128	; 0x80
 8019a2a:	682a      	ldr	r2, [r5, #0]
 8019a2c:	005b      	lsls	r3, r3, #1
 8019a2e:	4313      	orrs	r3, r2
 8019a30:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8019a32:	f7ff f9b1 	bl	8018d98 <HAL_GetTick>
 8019a36:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8019a38:	e004      	b.n	8019a44 <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8019a3a:	f7ff f9ad 	bl	8018d98 <HAL_GetTick>
 8019a3e:	1b80      	subs	r0, r0, r6
 8019a40:	2802      	cmp	r0, #2
 8019a42:	d823      	bhi.n	8019a8c <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8019a44:	682b      	ldr	r3, [r5, #0]
 8019a46:	423b      	tst	r3, r7
 8019a48:	d0f7      	beq.n	8019a3a <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019a4a:	686a      	ldr	r2, [r5, #4]
 8019a4c:	6963      	ldr	r3, [r4, #20]
 8019a4e:	4922      	ldr	r1, [pc, #136]	; (8019ad8 <HAL_RCC_OscConfig+0x33c>)
 8019a50:	021b      	lsls	r3, r3, #8
 8019a52:	400a      	ands	r2, r1
 8019a54:	4313      	orrs	r3, r2
 8019a56:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019a58:	6823      	ldr	r3, [r4, #0]
 8019a5a:	e70c      	b.n	8019876 <HAL_RCC_OscConfig+0xda>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8019a5c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8019a5e:	079b      	lsls	r3, r3, #30
 8019a60:	d400      	bmi.n	8019a64 <HAL_RCC_OscConfig+0x2c8>
 8019a62:	e752      	b.n	801990a <HAL_RCC_OscConfig+0x16e>
 8019a64:	68a3      	ldr	r3, [r4, #8]
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d000      	beq.n	8019a6c <HAL_RCC_OscConfig+0x2d0>
 8019a6a:	e74e      	b.n	801990a <HAL_RCC_OscConfig+0x16e>
 8019a6c:	e799      	b.n	80199a2 <HAL_RCC_OscConfig+0x206>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8019a6e:	6833      	ldr	r3, [r6, #0]
 8019a70:	433b      	orrs	r3, r7
 8019a72:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8019a74:	f7ff f990 	bl	8018d98 <HAL_GetTick>
 8019a78:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8019a7a:	6833      	ldr	r3, [r6, #0]
 8019a7c:	423b      	tst	r3, r7
 8019a7e:	d000      	beq.n	8019a82 <HAL_RCC_OscConfig+0x2e6>
 8019a80:	e71b      	b.n	80198ba <HAL_RCC_OscConfig+0x11e>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019a82:	f7ff f989 	bl	8018d98 <HAL_GetTick>
 8019a86:	1b40      	subs	r0, r0, r5
 8019a88:	2802      	cmp	r0, #2
 8019a8a:	d9f6      	bls.n	8019a7a <HAL_RCC_OscConfig+0x2de>
            return HAL_TIMEOUT;
 8019a8c:	2003      	movs	r0, #3
 8019a8e:	e789      	b.n	80199a4 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_LSI_DISABLE();
 8019a90:	2201      	movs	r2, #1
 8019a92:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8019a94:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8019a96:	4393      	bics	r3, r2
 8019a98:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8019a9a:	f7ff f97d 	bl	8018d98 <HAL_GetTick>
 8019a9e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8019aa0:	e004      	b.n	8019aac <HAL_RCC_OscConfig+0x310>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8019aa2:	f7ff f979 	bl	8018d98 <HAL_GetTick>
 8019aa6:	1b80      	subs	r0, r0, r6
 8019aa8:	2802      	cmp	r0, #2
 8019aaa:	d8ef      	bhi.n	8019a8c <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8019aac:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8019aae:	421f      	tst	r7, r3
 8019ab0:	d1f7      	bne.n	8019aa2 <HAL_RCC_OscConfig+0x306>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8019ab2:	6823      	ldr	r3, [r4, #0]
 8019ab4:	e6e1      	b.n	801987a <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 8019ab6:	682b      	ldr	r3, [r5, #0]
 8019ab8:	4a10      	ldr	r2, [pc, #64]	; (8019afc <HAL_RCC_OscConfig+0x360>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8019aba:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8019abc:	4013      	ands	r3, r2
 8019abe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8019ac0:	f7ff f96a 	bl	8018d98 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8019ac4:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8019ac6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8019ac8:	e01f      	b.n	8019b0a <HAL_RCC_OscConfig+0x36e>
 8019aca:	46c0      	nop			; (mov r8, r8)
 8019acc:	40021000 	.word	0x40021000
 8019ad0:	fffeffff 	.word	0xfffeffff
 8019ad4:	fffbffff 	.word	0xfffbffff
 8019ad8:	ffff80ff 	.word	0xffff80ff
 8019adc:	ffffc7ff 	.word	0xffffc7ff
 8019ae0:	00f42400 	.word	0x00f42400
 8019ae4:	20000088 	.word	0x20000088
 8019ae8:	20000090 	.word	0x20000090
 8019aec:	40007000 	.word	0x40007000
 8019af0:	00001388 	.word	0x00001388
 8019af4:	feffffff 	.word	0xfeffffff
 8019af8:	eefeffff 	.word	0xeefeffff
 8019afc:	fffffeff 	.word	0xfffffeff
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8019b00:	f7ff f94a 	bl	8018d98 <HAL_GetTick>
 8019b04:	1b80      	subs	r0, r0, r6
 8019b06:	2802      	cmp	r0, #2
 8019b08:	d8c0      	bhi.n	8019a8c <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8019b0a:	682b      	ldr	r3, [r5, #0]
 8019b0c:	423b      	tst	r3, r7
 8019b0e:	d1f7      	bne.n	8019b00 <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019b10:	6823      	ldr	r3, [r4, #0]
 8019b12:	e6b0      	b.n	8019876 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8019b14:	4956      	ldr	r1, [pc, #344]	; (8019c70 <HAL_RCC_OscConfig+0x4d4>)
 8019b16:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8019b18:	4313      	orrs	r3, r2
 8019b1a:	65cb      	str	r3, [r1, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8019b1c:	f7ff f93c 	bl	8018d98 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8019b20:	4b53      	ldr	r3, [pc, #332]	; (8019c70 <HAL_RCC_OscConfig+0x4d4>)
        tickstart = HAL_GetTick();
 8019b22:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8019b24:	4698      	mov	r8, r3
 8019b26:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8019b28:	4d52      	ldr	r5, [pc, #328]	; (8019c74 <HAL_RCC_OscConfig+0x4d8>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8019b2a:	e004      	b.n	8019b36 <HAL_RCC_OscConfig+0x39a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8019b2c:	f7ff f934 	bl	8018d98 <HAL_GetTick>
 8019b30:	1b80      	subs	r0, r0, r6
 8019b32:	42a8      	cmp	r0, r5
 8019b34:	d8aa      	bhi.n	8019a8c <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8019b36:	4643      	mov	r3, r8
 8019b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b3a:	421f      	tst	r7, r3
 8019b3c:	d0f6      	beq.n	8019b2c <HAL_RCC_OscConfig+0x390>
 8019b3e:	e6e0      	b.n	8019902 <HAL_RCC_OscConfig+0x166>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8019b40:	2b01      	cmp	r3, #1
 8019b42:	d100      	bne.n	8019b46 <HAL_RCC_OscConfig+0x3aa>
 8019b44:	e72d      	b.n	80199a2 <HAL_RCC_OscConfig+0x206>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019b46:	2303      	movs	r3, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8019b48:	68ea      	ldr	r2, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019b4a:	6a21      	ldr	r1, [r4, #32]
 8019b4c:	4013      	ands	r3, r2
 8019b4e:	428b      	cmp	r3, r1
 8019b50:	d000      	beq.n	8019b54 <HAL_RCC_OscConfig+0x3b8>
 8019b52:	e726      	b.n	80199a2 <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8019b54:	2370      	movs	r3, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019b56:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8019b58:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019b5a:	428b      	cmp	r3, r1
 8019b5c:	d000      	beq.n	8019b60 <HAL_RCC_OscConfig+0x3c4>
 8019b5e:	e720      	b.n	80199a2 <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8019b60:	21fe      	movs	r1, #254	; 0xfe
 8019b62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019b64:	01c9      	lsls	r1, r1, #7
 8019b66:	4011      	ands	r1, r2
 8019b68:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8019b6a:	4299      	cmp	r1, r3
 8019b6c:	d000      	beq.n	8019b70 <HAL_RCC_OscConfig+0x3d4>
 8019b6e:	e718      	b.n	80199a2 <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8019b70:	23f8      	movs	r3, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8019b72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8019b74:	039b      	lsls	r3, r3, #14
 8019b76:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8019b78:	428b      	cmp	r3, r1
 8019b7a:	d000      	beq.n	8019b7e <HAL_RCC_OscConfig+0x3e2>
 8019b7c:	e711      	b.n	80199a2 <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8019b7e:	23e0      	movs	r3, #224	; 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8019b80:	6b21      	ldr	r1, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8019b82:	051b      	lsls	r3, r3, #20
 8019b84:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8019b86:	428b      	cmp	r3, r1
 8019b88:	d000      	beq.n	8019b8c <HAL_RCC_OscConfig+0x3f0>
 8019b8a:	e70a      	b.n	80199a2 <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8019b8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8019b8e:	0f52      	lsrs	r2, r2, #29
 8019b90:	0752      	lsls	r2, r2, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8019b92:	429a      	cmp	r2, r3
 8019b94:	d000      	beq.n	8019b98 <HAL_RCC_OscConfig+0x3fc>
 8019b96:	e704      	b.n	80199a2 <HAL_RCC_OscConfig+0x206>
  return HAL_OK;
 8019b98:	2000      	movs	r0, #0
 8019b9a:	e703      	b.n	80199a4 <HAL_RCC_OscConfig+0x208>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019b9c:	2180      	movs	r1, #128	; 0x80
 8019b9e:	4b34      	ldr	r3, [pc, #208]	; (8019c70 <HAL_RCC_OscConfig+0x4d4>)
 8019ba0:	02c9      	lsls	r1, r1, #11
 8019ba2:	6818      	ldr	r0, [r3, #0]
 8019ba4:	4301      	orrs	r1, r0
 8019ba6:	6019      	str	r1, [r3, #0]
 8019ba8:	6819      	ldr	r1, [r3, #0]
 8019baa:	430a      	orrs	r2, r1
 8019bac:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8019bae:	e719      	b.n	80199e4 <HAL_RCC_OscConfig+0x248>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8019bb0:	6813      	ldr	r3, [r2, #0]
 8019bb2:	055b      	lsls	r3, r3, #21
 8019bb4:	d503      	bpl.n	8019bbe <HAL_RCC_OscConfig+0x422>
 8019bb6:	68e3      	ldr	r3, [r4, #12]
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d100      	bne.n	8019bbe <HAL_RCC_OscConfig+0x422>
 8019bbc:	e6f1      	b.n	80199a2 <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019bbe:	6851      	ldr	r1, [r2, #4]
 8019bc0:	6963      	ldr	r3, [r4, #20]
 8019bc2:	482d      	ldr	r0, [pc, #180]	; (8019c78 <HAL_RCC_OscConfig+0x4dc>)
 8019bc4:	021b      	lsls	r3, r3, #8
 8019bc6:	4001      	ands	r1, r0
 8019bc8:	430b      	orrs	r3, r1
 8019bca:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8019bcc:	e64b      	b.n	8019866 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PWR_CLK_DISABLE();
 8019bce:	4a28      	ldr	r2, [pc, #160]	; (8019c70 <HAL_RCC_OscConfig+0x4d4>)
 8019bd0:	492a      	ldr	r1, [pc, #168]	; (8019c7c <HAL_RCC_OscConfig+0x4e0>)
 8019bd2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8019bd4:	400b      	ands	r3, r1
 8019bd6:	63d3      	str	r3, [r2, #60]	; 0x3c
 8019bd8:	e697      	b.n	801990a <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_PLL_DISABLE();
 8019bda:	682b      	ldr	r3, [r5, #0]
 8019bdc:	4a28      	ldr	r2, [pc, #160]	; (8019c80 <HAL_RCC_OscConfig+0x4e4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8019bde:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8019be0:	4013      	ands	r3, r2
 8019be2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8019be4:	f7ff f8d8 	bl	8018d98 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8019be8:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8019bea:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8019bec:	e005      	b.n	8019bfa <HAL_RCC_OscConfig+0x45e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8019bee:	f7ff f8d3 	bl	8018d98 <HAL_GetTick>
 8019bf2:	1b80      	subs	r0, r0, r6
 8019bf4:	2802      	cmp	r0, #2
 8019bf6:	d900      	bls.n	8019bfa <HAL_RCC_OscConfig+0x45e>
 8019bf8:	e748      	b.n	8019a8c <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8019bfa:	682b      	ldr	r3, [r5, #0]
 8019bfc:	423b      	tst	r3, r7
 8019bfe:	d1f6      	bne.n	8019bee <HAL_RCC_OscConfig+0x452>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8019c00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019c02:	6a23      	ldr	r3, [r4, #32]
 8019c04:	68ea      	ldr	r2, [r5, #12]
 8019c06:	430b      	orrs	r3, r1
 8019c08:	491e      	ldr	r1, [pc, #120]	; (8019c84 <HAL_RCC_OscConfig+0x4e8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8019c0a:	4e19      	ldr	r6, [pc, #100]	; (8019c70 <HAL_RCC_OscConfig+0x4d4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8019c0c:	400a      	ands	r2, r1
 8019c0e:	4313      	orrs	r3, r2
 8019c10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019c12:	4313      	orrs	r3, r2
 8019c14:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8019c16:	4313      	orrs	r3, r2
 8019c18:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8019c1a:	4313      	orrs	r3, r2
 8019c1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8019c1e:	0212      	lsls	r2, r2, #8
 8019c20:	4313      	orrs	r3, r2
 8019c22:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8019c24:	2380      	movs	r3, #128	; 0x80
 8019c26:	682a      	ldr	r2, [r5, #0]
 8019c28:	045b      	lsls	r3, r3, #17
 8019c2a:	4313      	orrs	r3, r2
 8019c2c:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8019c2e:	2380      	movs	r3, #128	; 0x80
 8019c30:	68ea      	ldr	r2, [r5, #12]
 8019c32:	055b      	lsls	r3, r3, #21
 8019c34:	4313      	orrs	r3, r2
 8019c36:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8019c38:	f7ff f8ae 	bl	8018d98 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8019c3c:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8019c3e:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8019c40:	04ad      	lsls	r5, r5, #18
 8019c42:	e005      	b.n	8019c50 <HAL_RCC_OscConfig+0x4b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8019c44:	f7ff f8a8 	bl	8018d98 <HAL_GetTick>
 8019c48:	1b00      	subs	r0, r0, r4
 8019c4a:	2802      	cmp	r0, #2
 8019c4c:	d900      	bls.n	8019c50 <HAL_RCC_OscConfig+0x4b4>
 8019c4e:	e71d      	b.n	8019a8c <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8019c50:	6833      	ldr	r3, [r6, #0]
 8019c52:	422b      	tst	r3, r5
 8019c54:	d0f6      	beq.n	8019c44 <HAL_RCC_OscConfig+0x4a8>
  return HAL_OK;
 8019c56:	2000      	movs	r0, #0
 8019c58:	e6a4      	b.n	80199a4 <HAL_RCC_OscConfig+0x208>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8019c5a:	2104      	movs	r1, #4
 8019c5c:	4b04      	ldr	r3, [pc, #16]	; (8019c70 <HAL_RCC_OscConfig+0x4d4>)
 8019c5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019c60:	430a      	orrs	r2, r1
 8019c62:	65da      	str	r2, [r3, #92]	; 0x5c
 8019c64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019c66:	3903      	subs	r1, #3
 8019c68:	430a      	orrs	r2, r1
 8019c6a:	65da      	str	r2, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8019c6c:	e756      	b.n	8019b1c <HAL_RCC_OscConfig+0x380>
 8019c6e:	46c0      	nop			; (mov r8, r8)
 8019c70:	40021000 	.word	0x40021000
 8019c74:	00001388 	.word	0x00001388
 8019c78:	ffff80ff 	.word	0xffff80ff
 8019c7c:	efffffff 	.word	0xefffffff
 8019c80:	feffffff 	.word	0xfeffffff
 8019c84:	11c1808c 	.word	0x11c1808c

08019c88 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8019c88:	2338      	movs	r3, #56	; 0x38
 8019c8a:	4a20      	ldr	r2, [pc, #128]	; (8019d0c <HAL_RCC_GetSysClockFreq+0x84>)
{
 8019c8c:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8019c8e:	6891      	ldr	r1, [r2, #8]
 8019c90:	420b      	tst	r3, r1
 8019c92:	d105      	bne.n	8019ca0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8019c94:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8019c96:	481e      	ldr	r0, [pc, #120]	; (8019d10 <HAL_RCC_GetSysClockFreq+0x88>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8019c98:	049b      	lsls	r3, r3, #18
 8019c9a:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8019c9c:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8019c9e:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8019ca0:	6891      	ldr	r1, [r2, #8]
 8019ca2:	4019      	ands	r1, r3
 8019ca4:	2908      	cmp	r1, #8
 8019ca6:	d011      	beq.n	8019ccc <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8019ca8:	6891      	ldr	r1, [r2, #8]
 8019caa:	4019      	ands	r1, r3
 8019cac:	2910      	cmp	r1, #16
 8019cae:	d00f      	beq.n	8019cd0 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8019cb0:	6891      	ldr	r1, [r2, #8]
 8019cb2:	4019      	ands	r1, r3
 8019cb4:	2920      	cmp	r1, #32
 8019cb6:	d021      	beq.n	8019cfc <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8019cb8:	6890      	ldr	r0, [r2, #8]
 8019cba:	4018      	ands	r0, r3
    sysclockfreq = 0U;
 8019cbc:	3818      	subs	r0, #24
 8019cbe:	4243      	negs	r3, r0
 8019cc0:	4158      	adcs	r0, r3
 8019cc2:	23fa      	movs	r3, #250	; 0xfa
 8019cc4:	4240      	negs	r0, r0
 8019cc6:	01db      	lsls	r3, r3, #7
 8019cc8:	4018      	ands	r0, r3
 8019cca:	e7e8      	b.n	8019c9e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8019ccc:	4811      	ldr	r0, [pc, #68]	; (8019d14 <HAL_RCC_GetSysClockFreq+0x8c>)
 8019cce:	e7e6      	b.n	8019c9e <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8019cd0:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8019cd2:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8019cd4:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8019cd6:	68d0      	ldr	r0, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8019cd8:	0649      	lsls	r1, r1, #25
 8019cda:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8019cdc:	0440      	lsls	r0, r0, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8019cde:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8019ce0:	0e44      	lsrs	r4, r0, #25
    switch (pllsource)
 8019ce2:	079b      	lsls	r3, r3, #30
 8019ce4:	d00d      	beq.n	8019d02 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8019ce6:	480a      	ldr	r0, [pc, #40]	; (8019d10 <HAL_RCC_GetSysClockFreq+0x88>)
 8019ce8:	f7e6 fa1e 	bl	8000128 <__udivsi3>
 8019cec:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8019cee:	4b07      	ldr	r3, [pc, #28]	; (8019d0c <HAL_RCC_GetSysClockFreq+0x84>)
 8019cf0:	68d9      	ldr	r1, [r3, #12]
 8019cf2:	0f49      	lsrs	r1, r1, #29
 8019cf4:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8019cf6:	f7e6 fa17 	bl	8000128 <__udivsi3>
  return sysclockfreq;
 8019cfa:	e7d0      	b.n	8019c9e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8019cfc:	2080      	movs	r0, #128	; 0x80
 8019cfe:	0200      	lsls	r0, r0, #8
 8019d00:	e7cd      	b.n	8019c9e <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8019d02:	4804      	ldr	r0, [pc, #16]	; (8019d14 <HAL_RCC_GetSysClockFreq+0x8c>)
 8019d04:	f7e6 fa10 	bl	8000128 <__udivsi3>
 8019d08:	4360      	muls	r0, r4
        break;
 8019d0a:	e7f0      	b.n	8019cee <HAL_RCC_GetSysClockFreq+0x66>
 8019d0c:	40021000 	.word	0x40021000
 8019d10:	00f42400 	.word	0x00f42400
 8019d14:	007a1200 	.word	0x007a1200

08019d18 <HAL_RCC_ClockConfig>:
{
 8019d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d1a:	46ce      	mov	lr, r9
 8019d1c:	4647      	mov	r7, r8
 8019d1e:	0005      	movs	r5, r0
 8019d20:	000c      	movs	r4, r1
 8019d22:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8019d24:	2800      	cmp	r0, #0
 8019d26:	d026      	beq.n	8019d76 <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8019d28:	2207      	movs	r2, #7
 8019d2a:	4e57      	ldr	r6, [pc, #348]	; (8019e88 <HAL_RCC_ClockConfig+0x170>)
 8019d2c:	6833      	ldr	r3, [r6, #0]
 8019d2e:	4013      	ands	r3, r2
 8019d30:	428b      	cmp	r3, r1
 8019d32:	d35e      	bcc.n	8019df2 <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8019d34:	682b      	ldr	r3, [r5, #0]
 8019d36:	079a      	lsls	r2, r3, #30
 8019d38:	d50e      	bpl.n	8019d58 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019d3a:	075a      	lsls	r2, r3, #29
 8019d3c:	d505      	bpl.n	8019d4a <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8019d3e:	22e0      	movs	r2, #224	; 0xe0
 8019d40:	4952      	ldr	r1, [pc, #328]	; (8019e8c <HAL_RCC_ClockConfig+0x174>)
 8019d42:	01d2      	lsls	r2, r2, #7
 8019d44:	6888      	ldr	r0, [r1, #8]
 8019d46:	4302      	orrs	r2, r0
 8019d48:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8019d4a:	4950      	ldr	r1, [pc, #320]	; (8019e8c <HAL_RCC_ClockConfig+0x174>)
 8019d4c:	4850      	ldr	r0, [pc, #320]	; (8019e90 <HAL_RCC_ClockConfig+0x178>)
 8019d4e:	688a      	ldr	r2, [r1, #8]
 8019d50:	4002      	ands	r2, r0
 8019d52:	68a8      	ldr	r0, [r5, #8]
 8019d54:	4302      	orrs	r2, r0
 8019d56:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8019d58:	07db      	lsls	r3, r3, #31
 8019d5a:	d52b      	bpl.n	8019db4 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8019d5c:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8019d5e:	4a4b      	ldr	r2, [pc, #300]	; (8019e8c <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8019d60:	2b01      	cmp	r3, #1
 8019d62:	d100      	bne.n	8019d66 <HAL_RCC_ClockConfig+0x4e>
 8019d64:	e07c      	b.n	8019e60 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8019d66:	2b02      	cmp	r3, #2
 8019d68:	d007      	beq.n	8019d7a <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d000      	beq.n	8019d70 <HAL_RCC_ClockConfig+0x58>
 8019d6e:	e07d      	b.n	8019e6c <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8019d70:	6812      	ldr	r2, [r2, #0]
 8019d72:	0552      	lsls	r2, r2, #21
 8019d74:	d404      	bmi.n	8019d80 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8019d76:	2001      	movs	r0, #1
 8019d78:	e037      	b.n	8019dea <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8019d7a:	6812      	ldr	r2, [r2, #0]
 8019d7c:	0192      	lsls	r2, r2, #6
 8019d7e:	d5fa      	bpl.n	8019d76 <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8019d80:	2107      	movs	r1, #7
 8019d82:	4e42      	ldr	r6, [pc, #264]	; (8019e8c <HAL_RCC_ClockConfig+0x174>)
 8019d84:	68b2      	ldr	r2, [r6, #8]
 8019d86:	438a      	bics	r2, r1
 8019d88:	4313      	orrs	r3, r2
 8019d8a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8019d8c:	f7ff f804 	bl	8018d98 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019d90:	2338      	movs	r3, #56	; 0x38
 8019d92:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019d94:	4b3f      	ldr	r3, [pc, #252]	; (8019e94 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8019d96:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019d98:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019d9a:	e004      	b.n	8019da6 <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019d9c:	f7fe fffc 	bl	8018d98 <HAL_GetTick>
 8019da0:	1bc0      	subs	r0, r0, r7
 8019da2:	4548      	cmp	r0, r9
 8019da4:	d83b      	bhi.n	8019e1e <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019da6:	4643      	mov	r3, r8
 8019da8:	68b2      	ldr	r2, [r6, #8]
 8019daa:	401a      	ands	r2, r3
 8019dac:	686b      	ldr	r3, [r5, #4]
 8019dae:	00db      	lsls	r3, r3, #3
 8019db0:	429a      	cmp	r2, r3
 8019db2:	d1f3      	bne.n	8019d9c <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8019db4:	2207      	movs	r2, #7
 8019db6:	4e34      	ldr	r6, [pc, #208]	; (8019e88 <HAL_RCC_ClockConfig+0x170>)
 8019db8:	6833      	ldr	r3, [r6, #0]
 8019dba:	4013      	ands	r3, r2
 8019dbc:	42a3      	cmp	r3, r4
 8019dbe:	d838      	bhi.n	8019e32 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019dc0:	682b      	ldr	r3, [r5, #0]
 8019dc2:	075b      	lsls	r3, r3, #29
 8019dc4:	d42d      	bmi.n	8019e22 <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8019dc6:	f7ff ff5f 	bl	8019c88 <HAL_RCC_GetSysClockFreq>
 8019dca:	4b30      	ldr	r3, [pc, #192]	; (8019e8c <HAL_RCC_ClockConfig+0x174>)
 8019dcc:	4a32      	ldr	r2, [pc, #200]	; (8019e98 <HAL_RCC_ClockConfig+0x180>)
 8019dce:	689b      	ldr	r3, [r3, #8]
 8019dd0:	051b      	lsls	r3, r3, #20
 8019dd2:	0f1b      	lsrs	r3, r3, #28
 8019dd4:	009b      	lsls	r3, r3, #2
 8019dd6:	589b      	ldr	r3, [r3, r2]
 8019dd8:	221f      	movs	r2, #31
 8019dda:	4013      	ands	r3, r2
 8019ddc:	40d8      	lsrs	r0, r3
 8019dde:	4b2f      	ldr	r3, [pc, #188]	; (8019e9c <HAL_RCC_ClockConfig+0x184>)
 8019de0:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8019de2:	4b2f      	ldr	r3, [pc, #188]	; (8019ea0 <HAL_RCC_ClockConfig+0x188>)
 8019de4:	6818      	ldr	r0, [r3, #0]
 8019de6:	f7fe ff91 	bl	8018d0c <HAL_InitTick>
}
 8019dea:	bcc0      	pop	{r6, r7}
 8019dec:	46b9      	mov	r9, r7
 8019dee:	46b0      	mov	r8, r6
 8019df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019df2:	6833      	ldr	r3, [r6, #0]
 8019df4:	4393      	bics	r3, r2
 8019df6:	430b      	orrs	r3, r1
 8019df8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8019dfa:	f7fe ffcd 	bl	8018d98 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8019dfe:	2307      	movs	r3, #7
 8019e00:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019e02:	4b24      	ldr	r3, [pc, #144]	; (8019e94 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8019e04:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019e06:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8019e08:	4642      	mov	r2, r8
 8019e0a:	6833      	ldr	r3, [r6, #0]
 8019e0c:	4013      	ands	r3, r2
 8019e0e:	42a3      	cmp	r3, r4
 8019e10:	d100      	bne.n	8019e14 <HAL_RCC_ClockConfig+0xfc>
 8019e12:	e78f      	b.n	8019d34 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019e14:	f7fe ffc0 	bl	8018d98 <HAL_GetTick>
 8019e18:	1bc0      	subs	r0, r0, r7
 8019e1a:	4548      	cmp	r0, r9
 8019e1c:	d9f4      	bls.n	8019e08 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8019e1e:	2003      	movs	r0, #3
 8019e20:	e7e3      	b.n	8019dea <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8019e22:	4a1a      	ldr	r2, [pc, #104]	; (8019e8c <HAL_RCC_ClockConfig+0x174>)
 8019e24:	491f      	ldr	r1, [pc, #124]	; (8019ea4 <HAL_RCC_ClockConfig+0x18c>)
 8019e26:	6893      	ldr	r3, [r2, #8]
 8019e28:	400b      	ands	r3, r1
 8019e2a:	68e9      	ldr	r1, [r5, #12]
 8019e2c:	430b      	orrs	r3, r1
 8019e2e:	6093      	str	r3, [r2, #8]
 8019e30:	e7c9      	b.n	8019dc6 <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019e32:	6833      	ldr	r3, [r6, #0]
 8019e34:	4393      	bics	r3, r2
 8019e36:	4323      	orrs	r3, r4
 8019e38:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8019e3a:	f7fe ffad 	bl	8018d98 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8019e3e:	2307      	movs	r3, #7
 8019e40:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019e42:	4b14      	ldr	r3, [pc, #80]	; (8019e94 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8019e44:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019e46:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8019e48:	4642      	mov	r2, r8
 8019e4a:	6833      	ldr	r3, [r6, #0]
 8019e4c:	4013      	ands	r3, r2
 8019e4e:	42a3      	cmp	r3, r4
 8019e50:	d0b6      	beq.n	8019dc0 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019e52:	f7fe ffa1 	bl	8018d98 <HAL_GetTick>
 8019e56:	1bc0      	subs	r0, r0, r7
 8019e58:	4548      	cmp	r0, r9
 8019e5a:	d9f5      	bls.n	8019e48 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8019e5c:	2003      	movs	r0, #3
 8019e5e:	e7c4      	b.n	8019dea <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8019e60:	6812      	ldr	r2, [r2, #0]
 8019e62:	0392      	lsls	r2, r2, #14
 8019e64:	d500      	bpl.n	8019e68 <HAL_RCC_ClockConfig+0x150>
 8019e66:	e78b      	b.n	8019d80 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8019e68:	2001      	movs	r0, #1
 8019e6a:	e7be      	b.n	8019dea <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8019e6c:	2b03      	cmp	r3, #3
 8019e6e:	d005      	beq.n	8019e7c <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8019e70:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8019e72:	0792      	lsls	r2, r2, #30
 8019e74:	d500      	bpl.n	8019e78 <HAL_RCC_ClockConfig+0x160>
 8019e76:	e783      	b.n	8019d80 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8019e78:	2001      	movs	r0, #1
 8019e7a:	e7b6      	b.n	8019dea <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8019e7c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8019e7e:	0792      	lsls	r2, r2, #30
 8019e80:	d500      	bpl.n	8019e84 <HAL_RCC_ClockConfig+0x16c>
 8019e82:	e77d      	b.n	8019d80 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8019e84:	2001      	movs	r0, #1
 8019e86:	e7b0      	b.n	8019dea <HAL_RCC_ClockConfig+0xd2>
 8019e88:	40022000 	.word	0x40022000
 8019e8c:	40021000 	.word	0x40021000
 8019e90:	fffff0ff 	.word	0xfffff0ff
 8019e94:	00001388 	.word	0x00001388
 8019e98:	0801f338 	.word	0x0801f338
 8019e9c:	20000088 	.word	0x20000088
 8019ea0:	20000090 	.word	0x20000090
 8019ea4:	ffff8fff 	.word	0xffff8fff

08019ea8 <HAL_SPI_MspInit>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8019ea8:	4770      	bx	lr
 8019eaa:	46c0      	nop			; (mov r8, r8)

08019eac <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8019eac:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8019eae:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
 8019eb0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8019eb2:	4798      	blx	r3
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8019eb4:	bd10      	pop	{r4, pc}
 8019eb6:	46c0      	nop			; (mov r8, r8)

08019eb8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8019eb8:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8019eba:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 8019ebc:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8019ebe:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8019ec0:	bd10      	pop	{r4, pc}
 8019ec2:	46c0      	nop			; (mov r8, r8)

08019ec4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8019ec4:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8019ec6:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 8019ec8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8019eca:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8019ecc:	bd10      	pop	{r4, pc}
 8019ece:	46c0      	nop			; (mov r8, r8)

08019ed0 <SPI_DMAError>:
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8019ed0:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8019ed2:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8019ed4:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8019ed6:	6802      	ldr	r2, [r0, #0]
 8019ed8:	6853      	ldr	r3, [r2, #4]
 8019eda:	438b      	bics	r3, r1
 8019edc:	6053      	str	r3, [r2, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8019ede:	2210      	movs	r2, #16
 8019ee0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8019ee2:	4313      	orrs	r3, r2
 8019ee4:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8019ee6:	235d      	movs	r3, #93	; 0x5d
 8019ee8:	3a0f      	subs	r2, #15
 8019eea:	54c2      	strb	r2, [r0, r3]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8019eec:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8019eee:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8019ef0:	bd10      	pop	{r4, pc}
 8019ef2:	46c0      	nop			; (mov r8, r8)

08019ef4 <SPI_DMAAbortOnError>:
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
  hspi->RxXferCount = 0U;
 8019ef4:	2300      	movs	r3, #0
 8019ef6:	2246      	movs	r2, #70	; 0x46
{
 8019ef8:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8019efa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8019efc:	5283      	strh	r3, [r0, r2]
  hspi->TxXferCount = 0U;
 8019efe:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8019f00:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8019f02:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8019f04:	bd10      	pop	{r4, pc}
 8019f06:	46c0      	nop			; (mov r8, r8)

08019f08 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8019f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f0a:	46d6      	mov	lr, sl
 8019f0c:	464f      	mov	r7, r9
 8019f0e:	4646      	mov	r6, r8
 8019f10:	b5c0      	push	{r6, r7, lr}
 8019f12:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8019f14:	466b      	mov	r3, sp
 8019f16:	1cdc      	adds	r4, r3, #3
 8019f18:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8019f1a:	0016      	movs	r6, r2
 8019f1c:	000f      	movs	r7, r1
  __IO uint8_t  tmpreg8 = 0;
 8019f1e:	7023      	strb	r3, [r4, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8019f20:	4680      	mov	r8, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8019f22:	f7fe ff39 	bl	8018d98 <HAL_GetTick>
 8019f26:	19f6      	adds	r6, r6, r7
 8019f28:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8019f2a:	f7fe ff35 	bl	8018d98 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8019f2e:	4643      	mov	r3, r8
 8019f30:	681d      	ldr	r5, [r3, #0]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8019f32:	4b37      	ldr	r3, [pc, #220]	; (801a010 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
  tmp_tickstart = HAL_GetTick();
 8019f34:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8019f36:	681a      	ldr	r2, [r3, #0]
 8019f38:	0093      	lsls	r3, r2, #2
 8019f3a:	189a      	adds	r2, r3, r2
 8019f3c:	00d3      	lsls	r3, r2, #3
 8019f3e:	1a9b      	subs	r3, r3, r2
 8019f40:	0d1b      	lsrs	r3, r3, #20
 8019f42:	4373      	muls	r3, r6
 8019f44:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8019f46:	23c0      	movs	r3, #192	; 0xc0
 8019f48:	00db      	lsls	r3, r3, #3
 8019f4a:	002a      	movs	r2, r5
 8019f4c:	469a      	mov	sl, r3
 8019f4e:	1c7b      	adds	r3, r7, #1
 8019f50:	d112      	bne.n	8019f78 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x70>
 8019f52:	21c0      	movs	r1, #192	; 0xc0
 8019f54:	6893      	ldr	r3, [r2, #8]
 8019f56:	00c9      	lsls	r1, r1, #3
 8019f58:	420b      	tst	r3, r1
 8019f5a:	d006      	beq.n	8019f6a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8019f5c:	7b2b      	ldrb	r3, [r5, #12]
 8019f5e:	b2db      	uxtb	r3, r3
 8019f60:	7023      	strb	r3, [r4, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8019f62:	7823      	ldrb	r3, [r4, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8019f64:	6893      	ldr	r3, [r2, #8]
 8019f66:	420b      	tst	r3, r1
 8019f68:	d1f8      	bne.n	8019f5c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      }      
      count--;
    }
  }

  return HAL_OK;
 8019f6a:	2000      	movs	r0, #0
}
 8019f6c:	b002      	add	sp, #8
 8019f6e:	bce0      	pop	{r5, r6, r7}
 8019f70:	46ba      	mov	sl, r7
 8019f72:	46b1      	mov	r9, r6
 8019f74:	46a8      	mov	r8, r5
 8019f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8019f78:	6893      	ldr	r3, [r2, #8]
 8019f7a:	4652      	mov	r2, sl
 8019f7c:	4213      	tst	r3, r2
 8019f7e:	d0f4      	beq.n	8019f6a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
      tmpreg8 = *ptmpreg8;
 8019f80:	7b2b      	ldrb	r3, [r5, #12]
 8019f82:	b2db      	uxtb	r3, r3
 8019f84:	7023      	strb	r3, [r4, #0]
      UNUSED(tmpreg8);
 8019f86:	7823      	ldrb	r3, [r4, #0]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8019f88:	f7fe ff06 	bl	8018d98 <HAL_GetTick>
 8019f8c:	464b      	mov	r3, r9
 8019f8e:	1ac0      	subs	r0, r0, r3
 8019f90:	42b0      	cmp	r0, r6
 8019f92:	d20a      	bcs.n	8019faa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa2>
      if(count == 0U)
 8019f94:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8019f96:	1e5a      	subs	r2, r3, #1
 8019f98:	4193      	sbcs	r3, r2
 8019f9a:	425b      	negs	r3, r3
 8019f9c:	401e      	ands	r6, r3
      count--;
 8019f9e:	9b01      	ldr	r3, [sp, #4]
 8019fa0:	3b01      	subs	r3, #1
 8019fa2:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8019fa4:	4643      	mov	r3, r8
 8019fa6:	681a      	ldr	r2, [r3, #0]
 8019fa8:	e7d1      	b.n	8019f4e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8019faa:	4643      	mov	r3, r8
 8019fac:	21e0      	movs	r1, #224	; 0xe0
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	685a      	ldr	r2, [r3, #4]
 8019fb2:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019fb4:	4641      	mov	r1, r8
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8019fb6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019fb8:	2282      	movs	r2, #130	; 0x82
 8019fba:	6849      	ldr	r1, [r1, #4]
 8019fbc:	0052      	lsls	r2, r2, #1
 8019fbe:	4291      	cmp	r1, r2
 8019fc0:	d016      	beq.n	8019ff0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8019fc2:	4642      	mov	r2, r8
 8019fc4:	2180      	movs	r1, #128	; 0x80
 8019fc6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8019fc8:	0189      	lsls	r1, r1, #6
 8019fca:	428a      	cmp	r2, r1
 8019fcc:	d008      	beq.n	8019fe0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
        hspi->State = HAL_SPI_STATE_READY;
 8019fce:	235d      	movs	r3, #93	; 0x5d
 8019fd0:	2201      	movs	r2, #1
 8019fd2:	4641      	mov	r1, r8
 8019fd4:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8019fd6:	2200      	movs	r2, #0
 8019fd8:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8019fda:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8019fdc:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8019fde:	e7c5      	b.n	8019f6c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x64>
          SPI_RESET_CRC(hspi);
 8019fe0:	6819      	ldr	r1, [r3, #0]
 8019fe2:	480c      	ldr	r0, [pc, #48]	; (801a014 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10c>)
 8019fe4:	4001      	ands	r1, r0
 8019fe6:	6019      	str	r1, [r3, #0]
 8019fe8:	6819      	ldr	r1, [r3, #0]
 8019fea:	430a      	orrs	r2, r1
 8019fec:	601a      	str	r2, [r3, #0]
 8019fee:	e7ee      	b.n	8019fce <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc6>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019ff0:	4642      	mov	r2, r8
 8019ff2:	2180      	movs	r1, #128	; 0x80
 8019ff4:	6892      	ldr	r2, [r2, #8]
 8019ff6:	0209      	lsls	r1, r1, #8
 8019ff8:	428a      	cmp	r2, r1
 8019ffa:	d003      	beq.n	801a004 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8019ffc:	2180      	movs	r1, #128	; 0x80
 8019ffe:	00c9      	lsls	r1, r1, #3
 801a000:	428a      	cmp	r2, r1
 801a002:	d1de      	bne.n	8019fc2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
          __HAL_SPI_DISABLE(hspi);
 801a004:	2140      	movs	r1, #64	; 0x40
 801a006:	681a      	ldr	r2, [r3, #0]
 801a008:	438a      	bics	r2, r1
 801a00a:	601a      	str	r2, [r3, #0]
 801a00c:	e7d9      	b.n	8019fc2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
 801a00e:	46c0      	nop			; (mov r8, r8)
 801a010:	20000088 	.word	0x20000088
 801a014:	ffffdfff 	.word	0xffffdfff

0801a018 <HAL_SPI_AbortCpltCallback>:
 801a018:	4770      	bx	lr
 801a01a:	46c0      	nop			; (mov r8, r8)

0801a01c <HAL_SPI_MspDeInit>:
 801a01c:	4770      	bx	lr
 801a01e:	46c0      	nop			; (mov r8, r8)

0801a020 <HAL_SPI_TxCpltCallback>:
 801a020:	4770      	bx	lr
 801a022:	46c0      	nop			; (mov r8, r8)

0801a024 <HAL_SPI_RxCpltCallback>:
 801a024:	4770      	bx	lr
 801a026:	46c0      	nop			; (mov r8, r8)

0801a028 <HAL_SPI_TxRxCpltCallback>:
 801a028:	4770      	bx	lr
 801a02a:	46c0      	nop			; (mov r8, r8)

0801a02c <HAL_SPI_TxHalfCpltCallback>:
 801a02c:	4770      	bx	lr
 801a02e:	46c0      	nop			; (mov r8, r8)

0801a030 <HAL_SPI_RxHalfCpltCallback>:
 801a030:	4770      	bx	lr
 801a032:	46c0      	nop			; (mov r8, r8)

0801a034 <HAL_SPI_TxRxHalfCpltCallback>:
 801a034:	4770      	bx	lr
 801a036:	46c0      	nop			; (mov r8, r8)

0801a038 <HAL_SPI_ErrorCallback>:
 801a038:	4770      	bx	lr
 801a03a:	46c0      	nop			; (mov r8, r8)

0801a03c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801a03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a03e:	46de      	mov	lr, fp
 801a040:	4657      	mov	r7, sl
 801a042:	464e      	mov	r6, r9
 801a044:	4645      	mov	r5, r8
 801a046:	b5e0      	push	{r5, r6, r7, lr}
 801a048:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 801a04a:	466b      	mov	r3, sp
{
 801a04c:	0017      	movs	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 801a04e:	2200      	movs	r2, #0
{
 801a050:	000d      	movs	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 801a052:	71da      	strb	r2, [r3, #7]
{
 801a054:	0004      	movs	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801a056:	f7fe fe9f 	bl	8018d98 <HAL_GetTick>
 801a05a:	19eb      	adds	r3, r5, r7
 801a05c:	1a1e      	subs	r6, r3, r0
 801a05e:	469a      	mov	sl, r3
  tmp_tickstart = HAL_GetTick();
 801a060:	f7fe fe9a 	bl	8018d98 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801a064:	4b47      	ldr	r3, [pc, #284]	; (801a184 <SPI_EndRxTxTransaction+0x148>)
  tmp_tickstart = HAL_GetTick();
 801a066:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801a068:	681a      	ldr	r2, [r3, #0]
 801a06a:	4699      	mov	r9, r3
 801a06c:	0093      	lsls	r3, r2, #2
 801a06e:	189a      	adds	r2, r3, r2
 801a070:	00d3      	lsls	r3, r2, #3
 801a072:	1a9b      	subs	r3, r3, r2
 801a074:	0d1b      	lsrs	r3, r3, #20
 801a076:	4373      	muls	r3, r6
 801a078:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 801a07a:	23c0      	movs	r3, #192	; 0xc0
 801a07c:	015b      	lsls	r3, r3, #5
 801a07e:	469b      	mov	fp, r3
 801a080:	6822      	ldr	r2, [r4, #0]
 801a082:	1c6b      	adds	r3, r5, #1
 801a084:	d14a      	bne.n	801a11c <SPI_EndRxTxTransaction+0xe0>
 801a086:	21c0      	movs	r1, #192	; 0xc0
 801a088:	0149      	lsls	r1, r1, #5
 801a08a:	6893      	ldr	r3, [r2, #8]
 801a08c:	420b      	tst	r3, r1
 801a08e:	d1fc      	bne.n	801a08a <SPI_EndRxTxTransaction+0x4e>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801a090:	f7fe fe82 	bl	8018d98 <HAL_GetTick>
 801a094:	4653      	mov	r3, sl
 801a096:	1a1e      	subs	r6, r3, r0
  tmp_tickstart = HAL_GetTick();
 801a098:	f7fe fe7e 	bl	8018d98 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801a09c:	464b      	mov	r3, r9
 801a09e:	681b      	ldr	r3, [r3, #0]
  tmp_tickstart = HAL_GetTick();
 801a0a0:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801a0a2:	015b      	lsls	r3, r3, #5
 801a0a4:	0d1b      	lsrs	r3, r3, #20
 801a0a6:	4373      	muls	r3, r6
 801a0a8:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801a0aa:	2380      	movs	r3, #128	; 0x80
 801a0ac:	4699      	mov	r9, r3
 801a0ae:	6822      	ldr	r2, [r4, #0]
 801a0b0:	1c6b      	adds	r3, r5, #1
 801a0b2:	d146      	bne.n	801a142 <SPI_EndRxTxTransaction+0x106>
 801a0b4:	2180      	movs	r1, #128	; 0x80
 801a0b6:	6893      	ldr	r3, [r2, #8]
 801a0b8:	4219      	tst	r1, r3
 801a0ba:	d1fc      	bne.n	801a0b6 <SPI_EndRxTxTransaction+0x7a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801a0bc:	003a      	movs	r2, r7
 801a0be:	0029      	movs	r1, r5
 801a0c0:	0020      	movs	r0, r4
 801a0c2:	f7ff ff21 	bl	8019f08 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 801a0c6:	2800      	cmp	r0, #0
 801a0c8:	d122      	bne.n	801a110 <SPI_EndRxTxTransaction+0xd4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 801a0ca:	b005      	add	sp, #20
 801a0cc:	bcf0      	pop	{r4, r5, r6, r7}
 801a0ce:	46bb      	mov	fp, r7
 801a0d0:	46b2      	mov	sl, r6
 801a0d2:	46a9      	mov	r9, r5
 801a0d4:	46a0      	mov	r8, r4
 801a0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801a0d8:	21e0      	movs	r1, #224	; 0xe0
 801a0da:	6823      	ldr	r3, [r4, #0]
 801a0dc:	685a      	ldr	r2, [r3, #4]
 801a0de:	438a      	bics	r2, r1
 801a0e0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a0e2:	2282      	movs	r2, #130	; 0x82
 801a0e4:	6861      	ldr	r1, [r4, #4]
 801a0e6:	0052      	lsls	r2, r2, #1
 801a0e8:	4291      	cmp	r1, r2
 801a0ea:	d03d      	beq.n	801a168 <SPI_EndRxTxTransaction+0x12c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801a0ec:	2180      	movs	r1, #128	; 0x80
 801a0ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a0f0:	0189      	lsls	r1, r1, #6
 801a0f2:	428a      	cmp	r2, r1
 801a0f4:	d106      	bne.n	801a104 <SPI_EndRxTxTransaction+0xc8>
          SPI_RESET_CRC(hspi);
 801a0f6:	6819      	ldr	r1, [r3, #0]
 801a0f8:	4823      	ldr	r0, [pc, #140]	; (801a188 <SPI_EndRxTxTransaction+0x14c>)
 801a0fa:	4001      	ands	r1, r0
 801a0fc:	6019      	str	r1, [r3, #0]
 801a0fe:	6819      	ldr	r1, [r3, #0]
 801a100:	430a      	orrs	r2, r1
 801a102:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 801a104:	235d      	movs	r3, #93	; 0x5d
 801a106:	2201      	movs	r2, #1
 801a108:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hspi);
 801a10a:	2200      	movs	r2, #0
 801a10c:	3b01      	subs	r3, #1
 801a10e:	54e2      	strb	r2, [r4, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a110:	2220      	movs	r2, #32
 801a112:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 801a114:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a116:	4313      	orrs	r3, r2
 801a118:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 801a11a:	e7d6      	b.n	801a0ca <SPI_EndRxTxTransaction+0x8e>
  while ((hspi->Instance->SR & Fifo) != State)
 801a11c:	6893      	ldr	r3, [r2, #8]
 801a11e:	465a      	mov	r2, fp
 801a120:	4213      	tst	r3, r2
 801a122:	d0b5      	beq.n	801a090 <SPI_EndRxTxTransaction+0x54>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801a124:	f7fe fe38 	bl	8018d98 <HAL_GetTick>
 801a128:	4643      	mov	r3, r8
 801a12a:	1ac0      	subs	r0, r0, r3
 801a12c:	42b0      	cmp	r0, r6
 801a12e:	d2d3      	bcs.n	801a0d8 <SPI_EndRxTxTransaction+0x9c>
      if(count == 0U)
 801a130:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 801a132:	1e5a      	subs	r2, r3, #1
 801a134:	4193      	sbcs	r3, r2
 801a136:	425b      	negs	r3, r3
 801a138:	401e      	ands	r6, r3
      count--;
 801a13a:	9b02      	ldr	r3, [sp, #8]
 801a13c:	3b01      	subs	r3, #1
 801a13e:	9302      	str	r3, [sp, #8]
 801a140:	e79e      	b.n	801a080 <SPI_EndRxTxTransaction+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801a142:	6893      	ldr	r3, [r2, #8]
 801a144:	464a      	mov	r2, r9
 801a146:	421a      	tst	r2, r3
 801a148:	d0b8      	beq.n	801a0bc <SPI_EndRxTxTransaction+0x80>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801a14a:	f7fe fe25 	bl	8018d98 <HAL_GetTick>
 801a14e:	4643      	mov	r3, r8
 801a150:	1ac0      	subs	r0, r0, r3
 801a152:	42b0      	cmp	r0, r6
 801a154:	d2c0      	bcs.n	801a0d8 <SPI_EndRxTxTransaction+0x9c>
      if(count == 0U)
 801a156:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 801a158:	1e5a      	subs	r2, r3, #1
 801a15a:	4193      	sbcs	r3, r2
 801a15c:	425b      	negs	r3, r3
 801a15e:	401e      	ands	r6, r3
      count--;
 801a160:	9b03      	ldr	r3, [sp, #12]
 801a162:	3b01      	subs	r3, #1
 801a164:	9303      	str	r3, [sp, #12]
 801a166:	e7a2      	b.n	801a0ae <SPI_EndRxTxTransaction+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a168:	2180      	movs	r1, #128	; 0x80
 801a16a:	68a2      	ldr	r2, [r4, #8]
 801a16c:	0209      	lsls	r1, r1, #8
 801a16e:	428a      	cmp	r2, r1
 801a170:	d003      	beq.n	801a17a <SPI_EndRxTxTransaction+0x13e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a172:	2180      	movs	r1, #128	; 0x80
 801a174:	00c9      	lsls	r1, r1, #3
 801a176:	428a      	cmp	r2, r1
 801a178:	d1b8      	bne.n	801a0ec <SPI_EndRxTxTransaction+0xb0>
          __HAL_SPI_DISABLE(hspi);
 801a17a:	2140      	movs	r1, #64	; 0x40
 801a17c:	681a      	ldr	r2, [r3, #0]
 801a17e:	438a      	bics	r2, r1
 801a180:	601a      	str	r2, [r3, #0]
 801a182:	e7b3      	b.n	801a0ec <SPI_EndRxTxTransaction+0xb0>
 801a184:	20000088 	.word	0x20000088
 801a188:	ffffdfff 	.word	0xffffdfff

0801a18c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 801a18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a18e:	000c      	movs	r4, r1
 801a190:	b083      	sub	sp, #12
 801a192:	0005      	movs	r5, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801a194:	f7fe fe00 	bl	8018d98 <HAL_GetTick>
 801a198:	3464      	adds	r4, #100	; 0x64
 801a19a:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 801a19c:	f7fe fdfc 	bl	8018d98 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801a1a0:	4b29      	ldr	r3, [pc, #164]	; (801a248 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
  tmp_tickstart = HAL_GetTick();
 801a1a2:	0006      	movs	r6, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	015b      	lsls	r3, r3, #5
 801a1a8:	0d1b      	lsrs	r3, r3, #20
 801a1aa:	4363      	muls	r3, r4
 801a1ac:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801a1ae:	682b      	ldr	r3, [r5, #0]
 801a1b0:	689b      	ldr	r3, [r3, #8]
 801a1b2:	061b      	lsls	r3, r3, #24
 801a1b4:	d52a      	bpl.n	801a20c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>
 801a1b6:	2780      	movs	r7, #128	; 0x80
 801a1b8:	e00b      	b.n	801a1d2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x46>
      if(count == 0U)
 801a1ba:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 801a1bc:	1e5a      	subs	r2, r3, #1
 801a1be:	4193      	sbcs	r3, r2
 801a1c0:	425b      	negs	r3, r3
 801a1c2:	401c      	ands	r4, r3
      count--;
 801a1c4:	9b01      	ldr	r3, [sp, #4]
 801a1c6:	3b01      	subs	r3, #1
 801a1c8:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801a1ca:	682b      	ldr	r3, [r5, #0]
 801a1cc:	689b      	ldr	r3, [r3, #8]
 801a1ce:	421f      	tst	r7, r3
 801a1d0:	d01c      	beq.n	801a20c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801a1d2:	f7fe fde1 	bl	8018d98 <HAL_GetTick>
 801a1d6:	1b80      	subs	r0, r0, r6
 801a1d8:	42a0      	cmp	r0, r4
 801a1da:	d3ee      	bcc.n	801a1ba <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801a1dc:	21e0      	movs	r1, #224	; 0xe0
 801a1de:	682b      	ldr	r3, [r5, #0]
 801a1e0:	685a      	ldr	r2, [r3, #4]
 801a1e2:	438a      	bics	r2, r1
 801a1e4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a1e6:	2282      	movs	r2, #130	; 0x82
 801a1e8:	6869      	ldr	r1, [r5, #4]
 801a1ea:	0052      	lsls	r2, r2, #1
 801a1ec:	4291      	cmp	r1, r2
 801a1ee:	d017      	beq.n	801a220 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801a1f0:	2180      	movs	r1, #128	; 0x80
 801a1f2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801a1f4:	0189      	lsls	r1, r1, #6
 801a1f6:	428a      	cmp	r2, r1
 801a1f8:	d00a      	beq.n	801a210 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 801a1fa:	235d      	movs	r3, #93	; 0x5d
 801a1fc:	2201      	movs	r2, #1
 801a1fe:	54ea      	strb	r2, [r5, r3]
        __HAL_UNLOCK(hspi);
 801a200:	2200      	movs	r2, #0
 801a202:	2003      	movs	r0, #3
 801a204:	3b01      	subs	r3, #1
 801a206:	54ea      	strb	r2, [r5, r3]
}
 801a208:	b003      	add	sp, #12
 801a20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 801a20c:	2000      	movs	r0, #0
 801a20e:	e7fb      	b.n	801a208 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7c>
          SPI_RESET_CRC(hspi);
 801a210:	6819      	ldr	r1, [r3, #0]
 801a212:	480e      	ldr	r0, [pc, #56]	; (801a24c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc0>)
 801a214:	4001      	ands	r1, r0
 801a216:	6019      	str	r1, [r3, #0]
 801a218:	6819      	ldr	r1, [r3, #0]
 801a21a:	430a      	orrs	r2, r1
 801a21c:	601a      	str	r2, [r3, #0]
 801a21e:	e7ec      	b.n	801a1fa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a220:	2180      	movs	r1, #128	; 0x80
 801a222:	68aa      	ldr	r2, [r5, #8]
 801a224:	0209      	lsls	r1, r1, #8
 801a226:	428a      	cmp	r2, r1
 801a228:	d003      	beq.n	801a232 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a22a:	2180      	movs	r1, #128	; 0x80
 801a22c:	00c9      	lsls	r1, r1, #3
 801a22e:	428a      	cmp	r2, r1
 801a230:	d1de      	bne.n	801a1f0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
          __HAL_SPI_DISABLE(hspi);
 801a232:	2140      	movs	r1, #64	; 0x40
 801a234:	681a      	ldr	r2, [r3, #0]
 801a236:	438a      	bics	r2, r1
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801a238:	2180      	movs	r1, #128	; 0x80
          __HAL_SPI_DISABLE(hspi);
 801a23a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801a23c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801a23e:	0189      	lsls	r1, r1, #6
 801a240:	428a      	cmp	r2, r1
 801a242:	d1da      	bne.n	801a1fa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6e>
 801a244:	e7e4      	b.n	801a210 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
 801a246:	46c0      	nop			; (mov r8, r8)
 801a248:	20000088 	.word	0x20000088
 801a24c:	ffffdfff 	.word	0xffffdfff

0801a250 <SPI_EndRxTxTransaction.constprop.0>:
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 801a250:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a252:	46c6      	mov	lr, r8
 801a254:	b500      	push	{lr}
 801a256:	4688      	mov	r8, r1
 801a258:	b082      	sub	sp, #8
  __IO uint8_t  tmpreg8 = 0;
 801a25a:	466b      	mov	r3, sp
 801a25c:	2200      	movs	r2, #0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801a25e:	4644      	mov	r4, r8
  __IO uint8_t  tmpreg8 = 0;
 801a260:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 801a262:	0005      	movs	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801a264:	f7fe fd98 	bl	8018d98 <HAL_GetTick>
  while ((hspi->Instance->SR & Fifo) != State)
 801a268:	27c0      	movs	r7, #192	; 0xc0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801a26a:	3464      	adds	r4, #100	; 0x64
 801a26c:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 801a26e:	f7fe fd93 	bl	8018d98 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801a272:	4b34      	ldr	r3, [pc, #208]	; (801a344 <SPI_EndRxTxTransaction.constprop.0+0xf4>)
  while ((hspi->Instance->SR & Fifo) != State)
 801a274:	017f      	lsls	r7, r7, #5
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801a276:	681a      	ldr	r2, [r3, #0]
  tmp_tickstart = HAL_GetTick();
 801a278:	0006      	movs	r6, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801a27a:	0093      	lsls	r3, r2, #2
 801a27c:	189a      	adds	r2, r3, r2
 801a27e:	00d3      	lsls	r3, r2, #3
 801a280:	1a9b      	subs	r3, r3, r2
 801a282:	0d1b      	lsrs	r3, r3, #20
 801a284:	4363      	muls	r3, r4
 801a286:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 801a288:	682b      	ldr	r3, [r5, #0]
 801a28a:	689b      	ldr	r3, [r3, #8]
 801a28c:	423b      	tst	r3, r7
 801a28e:	d10c      	bne.n	801a2aa <SPI_EndRxTxTransaction.constprop.0+0x5a>
 801a290:	e02e      	b.n	801a2f0 <SPI_EndRxTxTransaction.constprop.0+0xa0>
      if(count == 0U)
 801a292:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 801a294:	1e5a      	subs	r2, r3, #1
 801a296:	4193      	sbcs	r3, r2
 801a298:	425b      	negs	r3, r3
 801a29a:	401c      	ands	r4, r3
      count--;
 801a29c:	9b01      	ldr	r3, [sp, #4]
 801a29e:	3b01      	subs	r3, #1
 801a2a0:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 801a2a2:	682b      	ldr	r3, [r5, #0]
 801a2a4:	689b      	ldr	r3, [r3, #8]
 801a2a6:	423b      	tst	r3, r7
 801a2a8:	d022      	beq.n	801a2f0 <SPI_EndRxTxTransaction.constprop.0+0xa0>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801a2aa:	f7fe fd75 	bl	8018d98 <HAL_GetTick>
 801a2ae:	1b80      	subs	r0, r0, r6
 801a2b0:	4284      	cmp	r4, r0
 801a2b2:	d8ee      	bhi.n	801a292 <SPI_EndRxTxTransaction.constprop.0+0x42>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801a2b4:	21e0      	movs	r1, #224	; 0xe0
 801a2b6:	682b      	ldr	r3, [r5, #0]
 801a2b8:	685a      	ldr	r2, [r3, #4]
 801a2ba:	438a      	bics	r2, r1
 801a2bc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a2be:	2282      	movs	r2, #130	; 0x82
 801a2c0:	6869      	ldr	r1, [r5, #4]
 801a2c2:	0052      	lsls	r2, r2, #1
 801a2c4:	4291      	cmp	r1, r2
 801a2c6:	d029      	beq.n	801a31c <SPI_EndRxTxTransaction.constprop.0+0xcc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801a2c8:	2180      	movs	r1, #128	; 0x80
 801a2ca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801a2cc:	0189      	lsls	r1, r1, #6
 801a2ce:	428a      	cmp	r2, r1
 801a2d0:	d01c      	beq.n	801a30c <SPI_EndRxTxTransaction.constprop.0+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 801a2d2:	235d      	movs	r3, #93	; 0x5d
 801a2d4:	2201      	movs	r2, #1
 801a2d6:	54ea      	strb	r2, [r5, r3]
        __HAL_UNLOCK(hspi);
 801a2d8:	2200      	movs	r2, #0
 801a2da:	3b01      	subs	r3, #1
 801a2dc:	54ea      	strb	r2, [r5, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a2de:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 801a2e0:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a2e2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 801a2e4:	4313      	orrs	r3, r2
 801a2e6:	662b      	str	r3, [r5, #96]	; 0x60
}
 801a2e8:	b002      	add	sp, #8
 801a2ea:	bc80      	pop	{r7}
 801a2ec:	46b8      	mov	r8, r7
 801a2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801a2f0:	4641      	mov	r1, r8
 801a2f2:	0028      	movs	r0, r5
 801a2f4:	f7ff ff4a 	bl	801a18c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 801a2f8:	2800      	cmp	r0, #0
 801a2fa:	d1f0      	bne.n	801a2de <SPI_EndRxTxTransaction.constprop.0+0x8e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801a2fc:	4642      	mov	r2, r8
 801a2fe:	2164      	movs	r1, #100	; 0x64
 801a300:	0028      	movs	r0, r5
 801a302:	f7ff fe01 	bl	8019f08 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 801a306:	2800      	cmp	r0, #0
 801a308:	d0ee      	beq.n	801a2e8 <SPI_EndRxTxTransaction.constprop.0+0x98>
 801a30a:	e7e8      	b.n	801a2de <SPI_EndRxTxTransaction.constprop.0+0x8e>
          SPI_RESET_CRC(hspi);
 801a30c:	6819      	ldr	r1, [r3, #0]
 801a30e:	480e      	ldr	r0, [pc, #56]	; (801a348 <SPI_EndRxTxTransaction.constprop.0+0xf8>)
 801a310:	4001      	ands	r1, r0
 801a312:	6019      	str	r1, [r3, #0]
 801a314:	6819      	ldr	r1, [r3, #0]
 801a316:	430a      	orrs	r2, r1
 801a318:	601a      	str	r2, [r3, #0]
 801a31a:	e7da      	b.n	801a2d2 <SPI_EndRxTxTransaction.constprop.0+0x82>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a31c:	2180      	movs	r1, #128	; 0x80
 801a31e:	68aa      	ldr	r2, [r5, #8]
 801a320:	0209      	lsls	r1, r1, #8
 801a322:	428a      	cmp	r2, r1
 801a324:	d003      	beq.n	801a32e <SPI_EndRxTxTransaction.constprop.0+0xde>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a326:	2180      	movs	r1, #128	; 0x80
 801a328:	00c9      	lsls	r1, r1, #3
 801a32a:	428a      	cmp	r2, r1
 801a32c:	d1cc      	bne.n	801a2c8 <SPI_EndRxTxTransaction.constprop.0+0x78>
          __HAL_SPI_DISABLE(hspi);
 801a32e:	2140      	movs	r1, #64	; 0x40
 801a330:	681a      	ldr	r2, [r3, #0]
 801a332:	438a      	bics	r2, r1
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801a334:	2180      	movs	r1, #128	; 0x80
          __HAL_SPI_DISABLE(hspi);
 801a336:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801a338:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801a33a:	0189      	lsls	r1, r1, #6
 801a33c:	428a      	cmp	r2, r1
 801a33e:	d1c8      	bne.n	801a2d2 <SPI_EndRxTxTransaction.constprop.0+0x82>
 801a340:	e7e4      	b.n	801a30c <SPI_EndRxTxTransaction.constprop.0+0xbc>
 801a342:	46c0      	nop			; (mov r8, r8)
 801a344:	20000088 	.word	0x20000088
 801a348:	ffffdfff 	.word	0xffffdfff

0801a34c <SPI_DMATransmitCplt>:
{
 801a34c:	b530      	push	{r4, r5, lr}
 801a34e:	0005      	movs	r5, r0
 801a350:	b083      	sub	sp, #12
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801a352:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 801a354:	f7fe fd20 	bl	8018d98 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 801a358:	682b      	ldr	r3, [r5, #0]
 801a35a:	2520      	movs	r5, #32
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	421d      	tst	r5, r3
 801a360:	d004      	beq.n	801a36c <SPI_DMATransmitCplt+0x20>
  hspi->TxCpltCallback(hspi);
 801a362:	0020      	movs	r0, r4
 801a364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a366:	4798      	blx	r3
}
 801a368:	b003      	add	sp, #12
 801a36a:	bd30      	pop	{r4, r5, pc}
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 801a36c:	2102      	movs	r1, #2
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801a36e:	6823      	ldr	r3, [r4, #0]
 801a370:	685a      	ldr	r2, [r3, #4]
 801a372:	43aa      	bics	r2, r5
 801a374:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 801a376:	685a      	ldr	r2, [r3, #4]
 801a378:	438a      	bics	r2, r1
 801a37a:	605a      	str	r2, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801a37c:	0001      	movs	r1, r0
 801a37e:	0020      	movs	r0, r4
 801a380:	f7ff ff66 	bl	801a250 <SPI_EndRxTxTransaction.constprop.0>
 801a384:	2800      	cmp	r0, #0
 801a386:	d002      	beq.n	801a38e <SPI_DMATransmitCplt+0x42>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a388:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801a38a:	431d      	orrs	r5, r3
 801a38c:	6625      	str	r5, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801a38e:	68a3      	ldr	r3, [r4, #8]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d106      	bne.n	801a3a2 <SPI_DMATransmitCplt+0x56>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801a394:	9301      	str	r3, [sp, #4]
 801a396:	6823      	ldr	r3, [r4, #0]
 801a398:	68da      	ldr	r2, [r3, #12]
 801a39a:	9201      	str	r2, [sp, #4]
 801a39c:	689b      	ldr	r3, [r3, #8]
 801a39e:	9301      	str	r3, [sp, #4]
 801a3a0:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 801a3a2:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 801a3a4:	2201      	movs	r2, #1
    hspi->TxXferCount = 0U;
 801a3a6:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 801a3a8:	335d      	adds	r3, #93	; 0x5d
 801a3aa:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a3ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d0d7      	beq.n	801a362 <SPI_DMATransmitCplt+0x16>
      hspi->ErrorCallback(hspi);
 801a3b2:	0020      	movs	r0, r4
 801a3b4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801a3b6:	4798      	blx	r3
      return;
 801a3b8:	e7d6      	b.n	801a368 <SPI_DMATransmitCplt+0x1c>
 801a3ba:	46c0      	nop			; (mov r8, r8)

0801a3bc <SPI_DMATransmitReceiveCplt>:
{
 801a3bc:	b570      	push	{r4, r5, r6, lr}
 801a3be:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801a3c0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 801a3c2:	f7fe fce9 	bl	8018d98 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 801a3c6:	682b      	ldr	r3, [r5, #0]
 801a3c8:	2520      	movs	r5, #32
 801a3ca:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 801a3cc:	0001      	movs	r1, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 801a3ce:	421d      	tst	r5, r3
 801a3d0:	d003      	beq.n	801a3da <SPI_DMATransmitReceiveCplt+0x1e>
  hspi->TxRxCpltCallback(hspi);
 801a3d2:	0020      	movs	r0, r4
 801a3d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a3d6:	4798      	blx	r3
}
 801a3d8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801a3da:	6822      	ldr	r2, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801a3dc:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801a3de:	6853      	ldr	r3, [r2, #4]
 801a3e0:	43ab      	bics	r3, r5
 801a3e2:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801a3e4:	f7ff ff34 	bl	801a250 <SPI_EndRxTxTransaction.constprop.0>
 801a3e8:	2800      	cmp	r0, #0
 801a3ea:	d002      	beq.n	801a3f2 <SPI_DMATransmitReceiveCplt+0x36>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a3ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801a3ee:	431d      	orrs	r5, r3
 801a3f0:	6625      	str	r5, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801a3f2:	2103      	movs	r1, #3
 801a3f4:	6822      	ldr	r2, [r4, #0]
 801a3f6:	6853      	ldr	r3, [r2, #4]
 801a3f8:	438b      	bics	r3, r1
 801a3fa:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 801a3fc:	2300      	movs	r3, #0
    hspi->RxXferCount = 0U;
 801a3fe:	2246      	movs	r2, #70	; 0x46
    hspi->TxXferCount = 0U;
 801a400:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 801a402:	52a3      	strh	r3, [r4, r2]
    hspi->State = HAL_SPI_STATE_READY;
 801a404:	335d      	adds	r3, #93	; 0x5d
 801a406:	3a45      	subs	r2, #69	; 0x45
 801a408:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a40a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	d0e0      	beq.n	801a3d2 <SPI_DMATransmitReceiveCplt+0x16>
      hspi->ErrorCallback(hspi);
 801a410:	0020      	movs	r0, r4
 801a412:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801a414:	4798      	blx	r3
      return;
 801a416:	e7df      	b.n	801a3d8 <SPI_DMATransmitReceiveCplt+0x1c>

0801a418 <SPI_EndRxTransaction.constprop.0>:
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a418:	2382      	movs	r3, #130	; 0x82
 801a41a:	6842      	ldr	r2, [r0, #4]
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
 801a41c:	b570      	push	{r4, r5, r6, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a41e:	005b      	lsls	r3, r3, #1
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
 801a420:	0004      	movs	r4, r0
 801a422:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a424:	429a      	cmp	r2, r3
 801a426:	d00c      	beq.n	801a442 <SPI_EndRxTransaction.constprop.0+0x2a>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801a428:	0031      	movs	r1, r6
 801a42a:	0020      	movs	r0, r4
 801a42c:	f7ff feae 	bl	801a18c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 801a430:	1e05      	subs	r5, r0, #0
 801a432:	d11a      	bne.n	801a46a <SPI_EndRxTransaction.constprop.0+0x52>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a434:	2382      	movs	r3, #130	; 0x82
 801a436:	6862      	ldr	r2, [r4, #4]
 801a438:	005b      	lsls	r3, r3, #1
 801a43a:	429a      	cmp	r2, r3
 801a43c:	d01b      	beq.n	801a476 <SPI_EndRxTransaction.constprop.0+0x5e>
}
 801a43e:	0028      	movs	r0, r5
 801a440:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a442:	2280      	movs	r2, #128	; 0x80
 801a444:	6883      	ldr	r3, [r0, #8]
 801a446:	0212      	lsls	r2, r2, #8
 801a448:	4293      	cmp	r3, r2
 801a44a:	d003      	beq.n	801a454 <SPI_EndRxTransaction.constprop.0+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a44c:	2280      	movs	r2, #128	; 0x80
 801a44e:	00d2      	lsls	r2, r2, #3
 801a450:	4293      	cmp	r3, r2
 801a452:	d1e9      	bne.n	801a428 <SPI_EndRxTransaction.constprop.0+0x10>
    __HAL_SPI_DISABLE(hspi);
 801a454:	2140      	movs	r1, #64	; 0x40
 801a456:	6822      	ldr	r2, [r4, #0]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801a458:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE(hspi);
 801a45a:	6813      	ldr	r3, [r2, #0]
 801a45c:	438b      	bics	r3, r1
 801a45e:	6013      	str	r3, [r2, #0]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801a460:	0031      	movs	r1, r6
 801a462:	f7ff fe93 	bl	801a18c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 801a466:	1e05      	subs	r5, r0, #0
 801a468:	d0e4      	beq.n	801a434 <SPI_EndRxTransaction.constprop.0+0x1c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a46a:	2220      	movs	r2, #32
 801a46c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 801a46e:	2503      	movs	r5, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a470:	4313      	orrs	r3, r2
 801a472:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 801a474:	e7e3      	b.n	801a43e <SPI_EndRxTransaction.constprop.0+0x26>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a476:	2280      	movs	r2, #128	; 0x80
 801a478:	68a3      	ldr	r3, [r4, #8]
 801a47a:	0212      	lsls	r2, r2, #8
 801a47c:	4293      	cmp	r3, r2
 801a47e:	d003      	beq.n	801a488 <SPI_EndRxTransaction.constprop.0+0x70>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a480:	2280      	movs	r2, #128	; 0x80
 801a482:	00d2      	lsls	r2, r2, #3
 801a484:	4293      	cmp	r3, r2
 801a486:	d1da      	bne.n	801a43e <SPI_EndRxTransaction.constprop.0+0x26>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801a488:	0032      	movs	r2, r6
 801a48a:	2164      	movs	r1, #100	; 0x64
 801a48c:	0020      	movs	r0, r4
 801a48e:	f7ff fd3b 	bl	8019f08 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 801a492:	2800      	cmp	r0, #0
 801a494:	d0d3      	beq.n	801a43e <SPI_EndRxTransaction.constprop.0+0x26>
 801a496:	e7e8      	b.n	801a46a <SPI_EndRxTransaction.constprop.0+0x52>

0801a498 <SPI_DMAReceiveCplt>:
{
 801a498:	b570      	push	{r4, r5, r6, lr}
 801a49a:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801a49c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 801a49e:	f7fe fc7b 	bl	8018d98 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 801a4a2:	2220      	movs	r2, #32
 801a4a4:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 801a4a6:	0001      	movs	r1, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	421a      	tst	r2, r3
 801a4ac:	d11a      	bne.n	801a4e4 <SPI_DMAReceiveCplt+0x4c>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801a4ae:	6823      	ldr	r3, [r4, #0]
 801a4b0:	685d      	ldr	r5, [r3, #4]
 801a4b2:	4395      	bics	r5, r2
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801a4b4:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801a4b6:	605d      	str	r5, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801a4b8:	2a00      	cmp	r2, #0
 801a4ba:	d017      	beq.n	801a4ec <SPI_DMAReceiveCplt+0x54>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 801a4bc:	2001      	movs	r0, #1
 801a4be:	685a      	ldr	r2, [r3, #4]
 801a4c0:	4382      	bics	r2, r0
 801a4c2:	605a      	str	r2, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801a4c4:	0020      	movs	r0, r4
 801a4c6:	f7ff ffa7 	bl	801a418 <SPI_EndRxTransaction.constprop.0>
 801a4ca:	2800      	cmp	r0, #0
 801a4cc:	d001      	beq.n	801a4d2 <SPI_DMAReceiveCplt+0x3a>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a4ce:	2320      	movs	r3, #32
 801a4d0:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 801a4d2:	2346      	movs	r3, #70	; 0x46
 801a4d4:	2200      	movs	r2, #0
 801a4d6:	52e2      	strh	r2, [r4, r3]
    hspi->State = HAL_SPI_STATE_READY;
 801a4d8:	3317      	adds	r3, #23
 801a4da:	3201      	adds	r2, #1
 801a4dc:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a4de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d10d      	bne.n	801a500 <SPI_DMAReceiveCplt+0x68>
  hspi->RxCpltCallback(hspi);
 801a4e4:	0020      	movs	r0, r4
 801a4e6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801a4e8:	4798      	blx	r3
}
 801a4ea:	bd70      	pop	{r4, r5, r6, pc}
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801a4ec:	3205      	adds	r2, #5
 801a4ee:	6860      	ldr	r0, [r4, #4]
 801a4f0:	32ff      	adds	r2, #255	; 0xff
 801a4f2:	4290      	cmp	r0, r2
 801a4f4:	d1e2      	bne.n	801a4bc <SPI_DMAReceiveCplt+0x24>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801a4f6:	2003      	movs	r0, #3
 801a4f8:	685a      	ldr	r2, [r3, #4]
 801a4fa:	4382      	bics	r2, r0
 801a4fc:	605a      	str	r2, [r3, #4]
 801a4fe:	e7e1      	b.n	801a4c4 <SPI_DMAReceiveCplt+0x2c>
      hspi->ErrorCallback(hspi);
 801a500:	0020      	movs	r0, r4
 801a502:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801a504:	4798      	blx	r3
      return;
 801a506:	e7f0      	b.n	801a4ea <SPI_DMAReceiveCplt+0x52>

0801a508 <HAL_SPI_Init>:
{
 801a508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a50a:	46d6      	mov	lr, sl
 801a50c:	464f      	mov	r7, r9
 801a50e:	4646      	mov	r6, r8
 801a510:	0004      	movs	r4, r0
 801a512:	b5c0      	push	{r6, r7, lr}
  if (hspi == NULL)
 801a514:	2800      	cmp	r0, #0
 801a516:	d100      	bne.n	801a51a <HAL_SPI_Init+0x12>
 801a518:	e09d      	b.n	801a656 <HAL_SPI_Init+0x14e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801a51a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a51c:	2d00      	cmp	r5, #0
 801a51e:	d100      	bne.n	801a522 <HAL_SPI_Init+0x1a>
 801a520:	e07f      	b.n	801a622 <HAL_SPI_Init+0x11a>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801a522:	2300      	movs	r3, #0
 801a524:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801a526:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801a528:	2300      	movs	r3, #0
 801a52a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 801a52c:	335d      	adds	r3, #93	; 0x5d
 801a52e:	5ce3      	ldrb	r3, [r4, r3]
 801a530:	b2da      	uxtb	r2, r3
 801a532:	2b00      	cmp	r3, #0
 801a534:	d11a      	bne.n	801a56c <HAL_SPI_Init+0x64>
    hspi->Lock = HAL_UNLOCKED;
 801a536:	335c      	adds	r3, #92	; 0x5c
 801a538:	54e2      	strb	r2, [r4, r3]
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 801a53a:	4b4b      	ldr	r3, [pc, #300]	; (801a668 <HAL_SPI_Init+0x160>)
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 801a53c:	4a4b      	ldr	r2, [pc, #300]	; (801a66c <HAL_SPI_Init+0x164>)
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 801a53e:	6663      	str	r3, [r4, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 801a540:	4b4b      	ldr	r3, [pc, #300]	; (801a670 <HAL_SPI_Init+0x168>)
 801a542:	66a3      	str	r3, [r4, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 801a544:	4b4b      	ldr	r3, [pc, #300]	; (801a674 <HAL_SPI_Init+0x16c>)
 801a546:	66e3      	str	r3, [r4, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 801a548:	4b4b      	ldr	r3, [pc, #300]	; (801a678 <HAL_SPI_Init+0x170>)
 801a54a:	6723      	str	r3, [r4, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 801a54c:	4b4b      	ldr	r3, [pc, #300]	; (801a67c <HAL_SPI_Init+0x174>)
 801a54e:	6763      	str	r3, [r4, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 801a550:	4b4b      	ldr	r3, [pc, #300]	; (801a680 <HAL_SPI_Init+0x178>)
 801a552:	67a3      	str	r3, [r4, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 801a554:	4b4b      	ldr	r3, [pc, #300]	; (801a684 <HAL_SPI_Init+0x17c>)
 801a556:	67e3      	str	r3, [r4, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 801a558:	2380      	movs	r3, #128	; 0x80
 801a55a:	50e2      	str	r2, [r4, r3]
    if (hspi->MspInitCallback == NULL)
 801a55c:	2284      	movs	r2, #132	; 0x84
 801a55e:	58a3      	ldr	r3, [r4, r2]
 801a560:	2b00      	cmp	r3, #0
 801a562:	d100      	bne.n	801a566 <HAL_SPI_Init+0x5e>
 801a564:	e07c      	b.n	801a660 <HAL_SPI_Init+0x158>
    hspi->MspInitCallback(hspi);
 801a566:	0020      	movs	r0, r4
 801a568:	4798      	blx	r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801a56a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hspi->State = HAL_SPI_STATE_BUSY;
 801a56c:	235d      	movs	r3, #93	; 0x5d
 801a56e:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 801a570:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 801a572:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 801a574:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a576:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 801a578:	6813      	ldr	r3, [r2, #0]
 801a57a:	438b      	bics	r3, r1
 801a57c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a57e:	23e0      	movs	r3, #224	; 0xe0
 801a580:	00db      	lsls	r3, r3, #3
 801a582:	4298      	cmp	r0, r3
 801a584:	d955      	bls.n	801a632 <HAL_SPI_Init+0x12a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801a586:	23f0      	movs	r3, #240	; 0xf0
 801a588:	011b      	lsls	r3, r3, #4
 801a58a:	4298      	cmp	r0, r3
 801a58c:	d165      	bne.n	801a65a <HAL_SPI_Init+0x152>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801a58e:	2380      	movs	r3, #128	; 0x80
 801a590:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a592:	019b      	lsls	r3, r3, #6
 801a594:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801a596:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801a598:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801a59a:	469a      	mov	sl, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801a59c:	2382      	movs	r3, #130	; 0x82
 801a59e:	6866      	ldr	r6, [r4, #4]
 801a5a0:	005b      	lsls	r3, r3, #1
 801a5a2:	4033      	ands	r3, r6
 801a5a4:	2684      	movs	r6, #132	; 0x84
 801a5a6:	68a7      	ldr	r7, [r4, #8]
 801a5a8:	0236      	lsls	r6, r6, #8
 801a5aa:	403e      	ands	r6, r7
 801a5ac:	4333      	orrs	r3, r6
 801a5ae:	2602      	movs	r6, #2
 801a5b0:	6927      	ldr	r7, [r4, #16]
 801a5b2:	69a1      	ldr	r1, [r4, #24]
 801a5b4:	403e      	ands	r6, r7
 801a5b6:	4333      	orrs	r3, r6
 801a5b8:	2601      	movs	r6, #1
 801a5ba:	6967      	ldr	r7, [r4, #20]
 801a5bc:	46b1      	mov	r9, r6
 801a5be:	4037      	ands	r7, r6
 801a5c0:	433b      	orrs	r3, r7
 801a5c2:	2780      	movs	r7, #128	; 0x80
 801a5c4:	00bf      	lsls	r7, r7, #2
 801a5c6:	400f      	ands	r7, r1
 801a5c8:	433b      	orrs	r3, r7
 801a5ca:	2738      	movs	r7, #56	; 0x38
 801a5cc:	69e6      	ldr	r6, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801a5ce:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801a5d0:	4037      	ands	r7, r6
 801a5d2:	2680      	movs	r6, #128	; 0x80
 801a5d4:	433b      	orrs	r3, r7
 801a5d6:	0037      	movs	r7, r6
 801a5d8:	6a26      	ldr	r6, [r4, #32]
 801a5da:	4037      	ands	r7, r6
 801a5dc:	4666      	mov	r6, ip
 801a5de:	433b      	orrs	r3, r7
 801a5e0:	4333      	orrs	r3, r6
 801a5e2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801a5e4:	2308      	movs	r3, #8
 801a5e6:	6b66      	ldr	r6, [r4, #52]	; 0x34
 801a5e8:	4657      	mov	r7, sl
 801a5ea:	4033      	ands	r3, r6
 801a5ec:	26f0      	movs	r6, #240	; 0xf0
 801a5ee:	0136      	lsls	r6, r6, #4
 801a5f0:	4030      	ands	r0, r6
 801a5f2:	4318      	orrs	r0, r3
 801a5f4:	2304      	movs	r3, #4
 801a5f6:	4019      	ands	r1, r3
 801a5f8:	4308      	orrs	r0, r1
 801a5fa:	2110      	movs	r1, #16
 801a5fc:	400d      	ands	r5, r1
 801a5fe:	4305      	orrs	r5, r0
 801a600:	432f      	orrs	r7, r5
 801a602:	6057      	str	r7, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801a604:	69d3      	ldr	r3, [r2, #28]
 801a606:	4920      	ldr	r1, [pc, #128]	; (801a688 <HAL_SPI_Init+0x180>)
  return HAL_OK;
 801a608:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801a60a:	400b      	ands	r3, r1
 801a60c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801a60e:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 801a610:	464a      	mov	r2, r9
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801a612:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801a614:	335d      	adds	r3, #93	; 0x5d
 801a616:	54e2      	strb	r2, [r4, r3]
}
 801a618:	bce0      	pop	{r5, r6, r7}
 801a61a:	46ba      	mov	sl, r7
 801a61c:	46b1      	mov	r9, r6
 801a61e:	46a8      	mov	r8, r5
 801a620:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801a622:	2382      	movs	r3, #130	; 0x82
 801a624:	6842      	ldr	r2, [r0, #4]
 801a626:	005b      	lsls	r3, r3, #1
 801a628:	429a      	cmp	r2, r3
 801a62a:	d100      	bne.n	801a62e <HAL_SPI_Init+0x126>
 801a62c:	e77c      	b.n	801a528 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801a62e:	61c5      	str	r5, [r0, #28]
 801a630:	e77a      	b.n	801a528 <HAL_SPI_Init+0x20>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801a632:	4298      	cmp	r0, r3
 801a634:	d006      	beq.n	801a644 <HAL_SPI_Init+0x13c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801a636:	2380      	movs	r3, #128	; 0x80
 801a638:	015b      	lsls	r3, r3, #5
 801a63a:	469a      	mov	sl, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801a63c:	2300      	movs	r3, #0
 801a63e:	469c      	mov	ip, r3
 801a640:	62a3      	str	r3, [r4, #40]	; 0x28
 801a642:	e7ab      	b.n	801a59c <HAL_SPI_Init+0x94>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801a644:	2380      	movs	r3, #128	; 0x80
 801a646:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a648:	019b      	lsls	r3, r3, #6
 801a64a:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801a64c:	2380      	movs	r3, #128	; 0x80
 801a64e:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801a650:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801a652:	469a      	mov	sl, r3
 801a654:	e7a2      	b.n	801a59c <HAL_SPI_Init+0x94>
    return HAL_ERROR;
 801a656:	2001      	movs	r0, #1
 801a658:	e7de      	b.n	801a618 <HAL_SPI_Init+0x110>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801a65a:	2300      	movs	r3, #0
 801a65c:	469a      	mov	sl, r3
 801a65e:	e7ed      	b.n	801a63c <HAL_SPI_Init+0x134>
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 801a660:	4b0a      	ldr	r3, [pc, #40]	; (801a68c <HAL_SPI_Init+0x184>)
 801a662:	50a3      	str	r3, [r4, r2]
 801a664:	e77f      	b.n	801a566 <HAL_SPI_Init+0x5e>
 801a666:	46c0      	nop			; (mov r8, r8)
 801a668:	0801a021 	.word	0x0801a021
 801a66c:	0801a019 	.word	0x0801a019
 801a670:	0801a025 	.word	0x0801a025
 801a674:	0801a029 	.word	0x0801a029
 801a678:	0801a02d 	.word	0x0801a02d
 801a67c:	0801a031 	.word	0x0801a031
 801a680:	0801a035 	.word	0x0801a035
 801a684:	0801a039 	.word	0x0801a039
 801a688:	fffff7ff 	.word	0xfffff7ff
 801a68c:	08019ea9 	.word	0x08019ea9

0801a690 <HAL_SPI_DeInit>:
{
 801a690:	b510      	push	{r4, lr}
 801a692:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 801a694:	d018      	beq.n	801a6c8 <HAL_SPI_DeInit+0x38>
  hspi->State = HAL_SPI_STATE_BUSY;
 801a696:	235d      	movs	r3, #93	; 0x5d
 801a698:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 801a69a:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 801a69c:	54c2      	strb	r2, [r0, r3]
  __HAL_SPI_DISABLE(hspi);
 801a69e:	6802      	ldr	r2, [r0, #0]
 801a6a0:	6813      	ldr	r3, [r2, #0]
 801a6a2:	438b      	bics	r3, r1
 801a6a4:	6013      	str	r3, [r2, #0]
  if (hspi->MspDeInitCallback == NULL)
 801a6a6:	2288      	movs	r2, #136	; 0x88
 801a6a8:	5883      	ldr	r3, [r0, r2]
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d009      	beq.n	801a6c2 <HAL_SPI_DeInit+0x32>
  hspi->MspDeInitCallback(hspi);
 801a6ae:	0020      	movs	r0, r4
 801a6b0:	4798      	blx	r3
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801a6b2:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_RESET;
 801a6b4:	225d      	movs	r2, #93	; 0x5d
  return HAL_OK;
 801a6b6:	2000      	movs	r0, #0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801a6b8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 801a6ba:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hspi);
 801a6bc:	3a01      	subs	r2, #1
 801a6be:	54a3      	strb	r3, [r4, r2]
}
 801a6c0:	bd10      	pop	{r4, pc}
    hspi->MspDeInitCallback = HAL_SPI_MspDeInit; /* Legacy weak MspDeInit  */
 801a6c2:	4b02      	ldr	r3, [pc, #8]	; (801a6cc <HAL_SPI_DeInit+0x3c>)
 801a6c4:	5083      	str	r3, [r0, r2]
 801a6c6:	e7f2      	b.n	801a6ae <HAL_SPI_DeInit+0x1e>
    return HAL_ERROR;
 801a6c8:	2001      	movs	r0, #1
 801a6ca:	e7f9      	b.n	801a6c0 <HAL_SPI_DeInit+0x30>
 801a6cc:	0801a01d 	.word	0x0801a01d

0801a6d0 <HAL_SPI_RegisterCallback>:
{
 801a6d0:	0003      	movs	r3, r0
 801a6d2:	b530      	push	{r4, r5, lr}
  if (pCallback == NULL)
 801a6d4:	2a00      	cmp	r2, #0
 801a6d6:	d02e      	beq.n	801a736 <HAL_SPI_RegisterCallback+0x66>
  __HAL_LOCK(hspi);
 801a6d8:	205c      	movs	r0, #92	; 0x5c
 801a6da:	5c1c      	ldrb	r4, [r3, r0]
 801a6dc:	2c01      	cmp	r4, #1
 801a6de:	d030      	beq.n	801a742 <HAL_SPI_RegisterCallback+0x72>
 801a6e0:	2401      	movs	r4, #1
  if (HAL_SPI_STATE_READY == hspi->State)
 801a6e2:	255d      	movs	r5, #93	; 0x5d
  __HAL_LOCK(hspi);
 801a6e4:	541c      	strb	r4, [r3, r0]
  if (HAL_SPI_STATE_READY == hspi->State)
 801a6e6:	5d5c      	ldrb	r4, [r3, r5]
 801a6e8:	b2e0      	uxtb	r0, r4
 801a6ea:	2c01      	cmp	r4, #1
 801a6ec:	d00c      	beq.n	801a708 <HAL_SPI_RegisterCallback+0x38>
  else if (HAL_SPI_STATE_RESET == hspi->State)
 801a6ee:	5d58      	ldrb	r0, [r3, r5]
 801a6f0:	2800      	cmp	r0, #0
 801a6f2:	d10f      	bne.n	801a714 <HAL_SPI_RegisterCallback+0x44>
    switch (CallbackID)
 801a6f4:	2908      	cmp	r1, #8
 801a6f6:	d01a      	beq.n	801a72e <HAL_SPI_RegisterCallback+0x5e>
 801a6f8:	2909      	cmp	r1, #9
 801a6fa:	d014      	beq.n	801a726 <HAL_SPI_RegisterCallback+0x56>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 801a6fc:	2180      	movs	r1, #128	; 0x80
 801a6fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        status =  HAL_ERROR;
 801a700:	3001      	adds	r0, #1
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 801a702:	430a      	orrs	r2, r1
 801a704:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 801a706:	e00a      	b.n	801a71e <HAL_SPI_RegisterCallback+0x4e>
    switch (CallbackID)
 801a708:	2909      	cmp	r1, #9
 801a70a:	d835      	bhi.n	801a778 <HAL_SPI_RegisterCallback+0xa8>
 801a70c:	4c1d      	ldr	r4, [pc, #116]	; (801a784 <HAL_SPI_RegisterCallback+0xb4>)
 801a70e:	0088      	lsls	r0, r1, #2
 801a710:	5820      	ldr	r0, [r4, r0]
 801a712:	4687      	mov	pc, r0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 801a714:	2180      	movs	r1, #128	; 0x80
    status =  HAL_ERROR;
 801a716:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 801a718:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801a71a:	430a      	orrs	r2, r1
 801a71c:	661a      	str	r2, [r3, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 801a71e:	225c      	movs	r2, #92	; 0x5c
 801a720:	2100      	movs	r1, #0
 801a722:	5499      	strb	r1, [r3, r2]
}
 801a724:	bd30      	pop	{r4, r5, pc}
        hspi->MspDeInitCallback = pCallback;
 801a726:	2188      	movs	r1, #136	; 0x88
  HAL_StatusTypeDef status = HAL_OK;
 801a728:	2000      	movs	r0, #0
        hspi->MspDeInitCallback = pCallback;
 801a72a:	505a      	str	r2, [r3, r1]
        break;
 801a72c:	e7f7      	b.n	801a71e <HAL_SPI_RegisterCallback+0x4e>
        hspi->MspInitCallback = pCallback;
 801a72e:	2184      	movs	r1, #132	; 0x84
  HAL_StatusTypeDef status = HAL_OK;
 801a730:	2000      	movs	r0, #0
        hspi->MspInitCallback = pCallback;
 801a732:	505a      	str	r2, [r3, r1]
        break;
 801a734:	e7f3      	b.n	801a71e <HAL_SPI_RegisterCallback+0x4e>
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 801a736:	2180      	movs	r1, #128	; 0x80
 801a738:	6e02      	ldr	r2, [r0, #96]	; 0x60
 801a73a:	430a      	orrs	r2, r1
 801a73c:	6602      	str	r2, [r0, #96]	; 0x60
    return HAL_ERROR;
 801a73e:	2001      	movs	r0, #1
 801a740:	e7f0      	b.n	801a724 <HAL_SPI_RegisterCallback+0x54>
  __HAL_LOCK(hspi);
 801a742:	2002      	movs	r0, #2
 801a744:	e7ee      	b.n	801a724 <HAL_SPI_RegisterCallback+0x54>
        hspi->AbortCpltCallback = pCallback;
 801a746:	2180      	movs	r1, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 801a748:	2000      	movs	r0, #0
        hspi->AbortCpltCallback = pCallback;
 801a74a:	505a      	str	r2, [r3, r1]
        break;
 801a74c:	e7e7      	b.n	801a71e <HAL_SPI_RegisterCallback+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 801a74e:	0008      	movs	r0, r1
        hspi->TxCpltCallback = pCallback;
 801a750:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 801a752:	e7e4      	b.n	801a71e <HAL_SPI_RegisterCallback+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 801a754:	2000      	movs	r0, #0
        hspi->RxCpltCallback = pCallback;
 801a756:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 801a758:	e7e1      	b.n	801a71e <HAL_SPI_RegisterCallback+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 801a75a:	2000      	movs	r0, #0
        hspi->TxRxCpltCallback = pCallback;
 801a75c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 801a75e:	e7de      	b.n	801a71e <HAL_SPI_RegisterCallback+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 801a760:	2000      	movs	r0, #0
        hspi->TxHalfCpltCallback = pCallback;
 801a762:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 801a764:	e7db      	b.n	801a71e <HAL_SPI_RegisterCallback+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 801a766:	2000      	movs	r0, #0
        hspi->RxHalfCpltCallback = pCallback;
 801a768:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 801a76a:	e7d8      	b.n	801a71e <HAL_SPI_RegisterCallback+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 801a76c:	2000      	movs	r0, #0
        hspi->TxRxHalfCpltCallback = pCallback;
 801a76e:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 801a770:	e7d5      	b.n	801a71e <HAL_SPI_RegisterCallback+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 801a772:	2000      	movs	r0, #0
        hspi->ErrorCallback = pCallback;
 801a774:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 801a776:	e7d2      	b.n	801a71e <HAL_SPI_RegisterCallback+0x4e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 801a778:	2180      	movs	r1, #128	; 0x80
 801a77a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801a77c:	430a      	orrs	r2, r1
 801a77e:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 801a780:	e7cd      	b.n	801a71e <HAL_SPI_RegisterCallback+0x4e>
 801a782:	46c0      	nop			; (mov r8, r8)
 801a784:	0801f378 	.word	0x0801f378

0801a788 <HAL_SPI_Transmit>:
{
 801a788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a78a:	46c6      	mov	lr, r8
 801a78c:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 801a78e:	235c      	movs	r3, #92	; 0x5c
{
 801a790:	b500      	push	{lr}
 801a792:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 801a794:	5cc2      	ldrb	r2, [r0, r3]
{
 801a796:	0004      	movs	r4, r0
 801a798:	000d      	movs	r5, r1
 801a79a:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 801a79c:	2a01      	cmp	r2, #1
 801a79e:	d100      	bne.n	801a7a2 <HAL_SPI_Transmit+0x1a>
 801a7a0:	e07a      	b.n	801a898 <HAL_SPI_Transmit+0x110>
 801a7a2:	2201      	movs	r2, #1
 801a7a4:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 801a7a6:	f7fe faf7 	bl	8018d98 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 801a7aa:	225d      	movs	r2, #93	; 0x5d
 801a7ac:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 801a7ae:	0007      	movs	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 801a7b0:	b2d8      	uxtb	r0, r3
 801a7b2:	2b01      	cmp	r3, #1
 801a7b4:	d00a      	beq.n	801a7cc <HAL_SPI_Transmit+0x44>
    errorcode = HAL_BUSY;
 801a7b6:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 801a7b8:	235d      	movs	r3, #93	; 0x5d
 801a7ba:	2201      	movs	r2, #1
 801a7bc:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 801a7be:	2200      	movs	r2, #0
 801a7c0:	3b01      	subs	r3, #1
 801a7c2:	54e2      	strb	r2, [r4, r3]
}
 801a7c4:	b002      	add	sp, #8
 801a7c6:	bc80      	pop	{r7}
 801a7c8:	46b8      	mov	r8, r7
 801a7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 801a7cc:	2d00      	cmp	r5, #0
 801a7ce:	d0f3      	beq.n	801a7b8 <HAL_SPI_Transmit+0x30>
 801a7d0:	4643      	mov	r3, r8
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d0f0      	beq.n	801a7b8 <HAL_SPI_Transmit+0x30>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801a7d6:	2303      	movs	r3, #3
 801a7d8:	54a3      	strb	r3, [r4, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a7da:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 801a7dc:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a7de:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferSize  = Size;
 801a7e0:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801a7e2:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 801a7e4:	2244      	movs	r2, #68	; 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801a7e6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801a7e8:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801a7ea:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 801a7ec:	3202      	adds	r2, #2
 801a7ee:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 801a7f0:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 801a7f2:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a7f4:	2380      	movs	r3, #128	; 0x80
    __HAL_SPI_DISABLE(hspi);
 801a7f6:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a7f8:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 801a7fa:	0001      	movs	r1, r0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a7fc:	021b      	lsls	r3, r3, #8
 801a7fe:	429a      	cmp	r2, r3
 801a800:	d100      	bne.n	801a804 <HAL_SPI_Transmit+0x7c>
 801a802:	e07a      	b.n	801a8fa <HAL_SPI_Transmit+0x172>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a804:	2340      	movs	r3, #64	; 0x40
 801a806:	6802      	ldr	r2, [r0, #0]
 801a808:	4213      	tst	r3, r2
 801a80a:	d102      	bne.n	801a812 <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 801a80c:	6802      	ldr	r2, [r0, #0]
 801a80e:	4313      	orrs	r3, r2
 801a810:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a812:	23e0      	movs	r3, #224	; 0xe0
 801a814:	68e2      	ldr	r2, [r4, #12]
 801a816:	00db      	lsls	r3, r3, #3
 801a818:	429a      	cmp	r2, r3
 801a81a:	d93f      	bls.n	801a89c <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a81c:	6863      	ldr	r3, [r4, #4]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d100      	bne.n	801a824 <HAL_SPI_Transmit+0x9c>
 801a822:	e0ae      	b.n	801a982 <HAL_SPI_Transmit+0x1fa>
 801a824:	4643      	mov	r3, r8
 801a826:	2b01      	cmp	r3, #1
 801a828:	d100      	bne.n	801a82c <HAL_SPI_Transmit+0xa4>
 801a82a:	e0aa      	b.n	801a982 <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 801a82c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d01a      	beq.n	801a868 <HAL_SPI_Transmit+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a832:	2202      	movs	r2, #2
 801a834:	2e00      	cmp	r6, #0
 801a836:	d100      	bne.n	801a83a <HAL_SPI_Transmit+0xb2>
 801a838:	e0c1      	b.n	801a9be <HAL_SPI_Transmit+0x236>
 801a83a:	2502      	movs	r5, #2
 801a83c:	1c73      	adds	r3, r6, #1
 801a83e:	d000      	beq.n	801a842 <HAL_SPI_Transmit+0xba>
 801a840:	e08b      	b.n	801a95a <HAL_SPI_Transmit+0x1d2>
 801a842:	2302      	movs	r3, #2
 801a844:	4698      	mov	r8, r3
 801a846:	4642      	mov	r2, r8
 801a848:	6883      	ldr	r3, [r0, #8]
 801a84a:	421a      	tst	r2, r3
 801a84c:	d100      	bne.n	801a850 <HAL_SPI_Transmit+0xc8>
 801a84e:	e0a1      	b.n	801a994 <HAL_SPI_Transmit+0x20c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a852:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a854:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a856:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 801a858:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a85a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 801a85c:	3d01      	subs	r5, #1
 801a85e:	b2ad      	uxth	r5, r5
 801a860:	87e5      	strh	r5, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 801a862:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a864:	2b00      	cmp	r3, #0
 801a866:	d1ee      	bne.n	801a846 <HAL_SPI_Transmit+0xbe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a868:	003a      	movs	r2, r7
 801a86a:	0031      	movs	r1, r6
 801a86c:	0020      	movs	r0, r4
 801a86e:	f7ff fbe5 	bl	801a03c <SPI_EndRxTxTransaction>
 801a872:	2800      	cmp	r0, #0
 801a874:	d001      	beq.n	801a87a <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a876:	2320      	movs	r3, #32
 801a878:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801a87a:	68a3      	ldr	r3, [r4, #8]
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d106      	bne.n	801a88e <HAL_SPI_Transmit+0x106>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801a880:	9301      	str	r3, [sp, #4]
 801a882:	6823      	ldr	r3, [r4, #0]
 801a884:	68da      	ldr	r2, [r3, #12]
 801a886:	9201      	str	r2, [sp, #4]
 801a888:	689b      	ldr	r3, [r3, #8]
 801a88a:	9301      	str	r3, [sp, #4]
 801a88c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a88e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 801a890:	1e43      	subs	r3, r0, #1
 801a892:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 801a894:	b2c0      	uxtb	r0, r0
error:
 801a896:	e78f      	b.n	801a7b8 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 801a898:	2002      	movs	r0, #2
 801a89a:	e793      	b.n	801a7c4 <HAL_SPI_Transmit+0x3c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a89c:	6863      	ldr	r3, [r4, #4]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d065      	beq.n	801a96e <HAL_SPI_Transmit+0x1e6>
 801a8a2:	4643      	mov	r3, r8
 801a8a4:	2b01      	cmp	r3, #1
 801a8a6:	d062      	beq.n	801a96e <HAL_SPI_Transmit+0x1e6>
    while (hspi->TxXferCount > 0U)
 801a8a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d0dc      	beq.n	801a868 <HAL_SPI_Transmit+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a8ae:	2202      	movs	r2, #2
 801a8b0:	2e00      	cmp	r6, #0
 801a8b2:	d100      	bne.n	801a8b6 <HAL_SPI_Transmit+0x12e>
 801a8b4:	e098      	b.n	801a9e8 <HAL_SPI_Transmit+0x260>
 801a8b6:	2502      	movs	r5, #2
 801a8b8:	1c73      	adds	r3, r6, #1
 801a8ba:	d135      	bne.n	801a928 <HAL_SPI_Transmit+0x1a0>
 801a8bc:	2302      	movs	r3, #2
 801a8be:	4698      	mov	r8, r3
 801a8c0:	4641      	mov	r1, r8
 801a8c2:	6823      	ldr	r3, [r4, #0]
 801a8c4:	689a      	ldr	r2, [r3, #8]
 801a8c6:	4211      	tst	r1, r2
 801a8c8:	d011      	beq.n	801a8ee <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801a8ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801a8cc:	7812      	ldrb	r2, [r2, #0]
 801a8ce:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 801a8d0:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801a8d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 801a8d4:	3d01      	subs	r5, #1
 801a8d6:	b2ad      	uxth	r5, r5
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801a8d8:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 801a8da:	87e5      	strh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801a8dc:	63a3      	str	r3, [r4, #56]	; 0x38
    while (hspi->TxXferCount > 0U)
 801a8de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d0c1      	beq.n	801a868 <HAL_SPI_Transmit+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a8e4:	4641      	mov	r1, r8
 801a8e6:	6823      	ldr	r3, [r4, #0]
 801a8e8:	689a      	ldr	r2, [r3, #8]
 801a8ea:	4211      	tst	r1, r2
 801a8ec:	d1ed      	bne.n	801a8ca <HAL_SPI_Transmit+0x142>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a8ee:	f7fe fa53 	bl	8018d98 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 801a8f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d1e3      	bne.n	801a8c0 <HAL_SPI_Transmit+0x138>
 801a8f8:	e7b6      	b.n	801a868 <HAL_SPI_Transmit+0xe0>
    __HAL_SPI_DISABLE(hspi);
 801a8fa:	2240      	movs	r2, #64	; 0x40
 801a8fc:	6803      	ldr	r3, [r0, #0]
 801a8fe:	4393      	bics	r3, r2
 801a900:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 801a902:	2380      	movs	r3, #128	; 0x80
 801a904:	6802      	ldr	r2, [r0, #0]
 801a906:	01db      	lsls	r3, r3, #7
 801a908:	4313      	orrs	r3, r2
 801a90a:	6003      	str	r3, [r0, #0]
 801a90c:	e77a      	b.n	801a804 <HAL_SPI_Transmit+0x7c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801a90e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801a910:	7812      	ldrb	r2, [r2, #0]
 801a912:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801a914:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a916:	3301      	adds	r3, #1
 801a918:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 801a91a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a91c:	3b01      	subs	r3, #1
 801a91e:	b29b      	uxth	r3, r3
 801a920:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 801a922:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a924:	2b00      	cmp	r3, #0
 801a926:	d09f      	beq.n	801a868 <HAL_SPI_Transmit+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a928:	6823      	ldr	r3, [r4, #0]
 801a92a:	689a      	ldr	r2, [r3, #8]
 801a92c:	4215      	tst	r5, r2
 801a92e:	d1ee      	bne.n	801a90e <HAL_SPI_Transmit+0x186>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a930:	f7fe fa32 	bl	8018d98 <HAL_GetTick>
 801a934:	1bc0      	subs	r0, r0, r7
 801a936:	4286      	cmp	r6, r0
 801a938:	d8f3      	bhi.n	801a922 <HAL_SPI_Transmit+0x19a>
          errorcode = HAL_TIMEOUT;
 801a93a:	2003      	movs	r0, #3
 801a93c:	e73c      	b.n	801a7b8 <HAL_SPI_Transmit+0x30>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a93e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a940:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a942:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a944:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a946:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 801a948:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a94a:	3b01      	subs	r3, #1
 801a94c:	b29b      	uxth	r3, r3
 801a94e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 801a950:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a952:	2b00      	cmp	r3, #0
 801a954:	d100      	bne.n	801a958 <HAL_SPI_Transmit+0x1d0>
 801a956:	e787      	b.n	801a868 <HAL_SPI_Transmit+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a958:	6821      	ldr	r1, [r4, #0]
 801a95a:	688b      	ldr	r3, [r1, #8]
 801a95c:	421d      	tst	r5, r3
 801a95e:	d1ee      	bne.n	801a93e <HAL_SPI_Transmit+0x1b6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a960:	f7fe fa1a 	bl	8018d98 <HAL_GetTick>
 801a964:	1bc0      	subs	r0, r0, r7
 801a966:	4286      	cmp	r6, r0
 801a968:	d8f2      	bhi.n	801a950 <HAL_SPI_Transmit+0x1c8>
          errorcode = HAL_TIMEOUT;
 801a96a:	2003      	movs	r0, #3
 801a96c:	e724      	b.n	801a7b8 <HAL_SPI_Transmit+0x30>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801a96e:	782b      	ldrb	r3, [r5, #0]
 801a970:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801a972:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a974:	3301      	adds	r3, #1
 801a976:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 801a978:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a97a:	3b01      	subs	r3, #1
 801a97c:	b29b      	uxth	r3, r3
 801a97e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801a980:	e792      	b.n	801a8a8 <HAL_SPI_Transmit+0x120>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a982:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801a984:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a986:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 801a988:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801a98a:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 801a98c:	3b01      	subs	r3, #1
 801a98e:	b29b      	uxth	r3, r3
 801a990:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801a992:	e74b      	b.n	801a82c <HAL_SPI_Transmit+0xa4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a994:	f7fe fa00 	bl	8018d98 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 801a998:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d100      	bne.n	801a9a0 <HAL_SPI_Transmit+0x218>
 801a99e:	e763      	b.n	801a868 <HAL_SPI_Transmit+0xe0>
 801a9a0:	6820      	ldr	r0, [r4, #0]
 801a9a2:	e750      	b.n	801a846 <HAL_SPI_Transmit+0xbe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a9a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a9a6:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a9a8:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a9aa:	60c1      	str	r1, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a9ac:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 801a9ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a9b0:	3b01      	subs	r3, #1
 801a9b2:	b29b      	uxth	r3, r3
 801a9b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 801a9b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d100      	bne.n	801a9be <HAL_SPI_Transmit+0x236>
 801a9bc:	e754      	b.n	801a868 <HAL_SPI_Transmit+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a9be:	6883      	ldr	r3, [r0, #8]
 801a9c0:	421a      	tst	r2, r3
 801a9c2:	d1ef      	bne.n	801a9a4 <HAL_SPI_Transmit+0x21c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a9c4:	f7fe f9e8 	bl	8018d98 <HAL_GetTick>
          errorcode = HAL_TIMEOUT;
 801a9c8:	2003      	movs	r0, #3
 801a9ca:	e6f5      	b.n	801a7b8 <HAL_SPI_Transmit+0x30>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801a9cc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a9ce:	7809      	ldrb	r1, [r1, #0]
 801a9d0:	7319      	strb	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801a9d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a9d4:	3301      	adds	r3, #1
 801a9d6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 801a9d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a9da:	3b01      	subs	r3, #1
 801a9dc:	b29b      	uxth	r3, r3
 801a9de:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 801a9e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d100      	bne.n	801a9e8 <HAL_SPI_Transmit+0x260>
 801a9e6:	e73f      	b.n	801a868 <HAL_SPI_Transmit+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a9e8:	6823      	ldr	r3, [r4, #0]
 801a9ea:	6899      	ldr	r1, [r3, #8]
 801a9ec:	420a      	tst	r2, r1
 801a9ee:	d1ed      	bne.n	801a9cc <HAL_SPI_Transmit+0x244>
 801a9f0:	e7e8      	b.n	801a9c4 <HAL_SPI_Transmit+0x23c>
 801a9f2:	46c0      	nop			; (mov r8, r8)

0801a9f4 <HAL_SPI_TransmitReceive>:
{
 801a9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9f6:	46ce      	mov	lr, r9
 801a9f8:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 801a9fa:	235c      	movs	r3, #92	; 0x5c
{
 801a9fc:	b500      	push	{lr}
 801a9fe:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 801aa00:	5cc2      	ldrb	r2, [r0, r3]
{
 801aa02:	0004      	movs	r4, r0
 801aa04:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 801aa06:	2a01      	cmp	r2, #1
 801aa08:	d100      	bne.n	801aa0c <HAL_SPI_TransmitReceive+0x18>
 801aa0a:	e09a      	b.n	801ab42 <HAL_SPI_TransmitReceive+0x14e>
 801aa0c:	2201      	movs	r2, #1
 801aa0e:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 801aa10:	f7fe f9c2 	bl	8018d98 <HAL_GetTick>
  tmp_state           = hspi->State;
 801aa14:	235d      	movs	r3, #93	; 0x5d
 801aa16:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 801aa18:	0007      	movs	r7, r0
  tmp_mode            = hspi->Init.Mode;
 801aa1a:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 801aa1c:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801aa1e:	2b01      	cmp	r3, #1
 801aa20:	d012      	beq.n	801aa48 <HAL_SPI_TransmitReceive+0x54>
 801aa22:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 801aa24:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801aa26:	005b      	lsls	r3, r3, #1
 801aa28:	429a      	cmp	r2, r3
 801aa2a:	d008      	beq.n	801aa3e <HAL_SPI_TransmitReceive+0x4a>
  hspi->State = HAL_SPI_STATE_READY;
 801aa2c:	235d      	movs	r3, #93	; 0x5d
 801aa2e:	2201      	movs	r2, #1
 801aa30:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 801aa32:	2200      	movs	r2, #0
 801aa34:	3b01      	subs	r3, #1
 801aa36:	54e2      	strb	r2, [r4, r3]
}
 801aa38:	bc80      	pop	{r7}
 801aa3a:	46b9      	mov	r9, r7
 801aa3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801aa3e:	68a3      	ldr	r3, [r4, #8]
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d1f3      	bne.n	801aa2c <HAL_SPI_TransmitReceive+0x38>
 801aa44:	2904      	cmp	r1, #4
 801aa46:	d1f1      	bne.n	801aa2c <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801aa48:	2d00      	cmp	r5, #0
 801aa4a:	d100      	bne.n	801aa4e <HAL_SPI_TransmitReceive+0x5a>
 801aa4c:	e07b      	b.n	801ab46 <HAL_SPI_TransmitReceive+0x152>
 801aa4e:	464b      	mov	r3, r9
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d100      	bne.n	801aa56 <HAL_SPI_TransmitReceive+0x62>
 801aa54:	e077      	b.n	801ab46 <HAL_SPI_TransmitReceive+0x152>
 801aa56:	2e00      	cmp	r6, #0
 801aa58:	d075      	beq.n	801ab46 <HAL_SPI_TransmitReceive+0x152>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801aa5a:	235d      	movs	r3, #93	; 0x5d
 801aa5c:	5ce1      	ldrb	r1, [r4, r3]
 801aa5e:	2904      	cmp	r1, #4
 801aa60:	d001      	beq.n	801aa66 <HAL_SPI_TransmitReceive+0x72>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801aa62:	2105      	movs	r1, #5
 801aa64:	54e1      	strb	r1, [r4, r3]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801aa66:	4649      	mov	r1, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801aa68:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801aa6a:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 801aa6c:	2146      	movs	r1, #70	; 0x46
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801aa6e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 801aa70:	5266      	strh	r6, [r4, r1]
  hspi->RxXferSize  = Size;
 801aa72:	3902      	subs	r1, #2
 801aa74:	5266      	strh	r6, [r4, r1]
  hspi->RxISR       = NULL;
 801aa76:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801aa78:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801aa7a:	23e0      	movs	r3, #224	; 0xe0
 801aa7c:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801aa7e:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 801aa80:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801aa82:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801aa84:	00db      	lsls	r3, r3, #3
 801aa86:	4299      	cmp	r1, r3
 801aa88:	d95f      	bls.n	801ab4a <HAL_SPI_TransmitReceive+0x156>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801aa8a:	6823      	ldr	r3, [r4, #0]
 801aa8c:	487d      	ldr	r0, [pc, #500]	; (801ac84 <HAL_SPI_TransmitReceive+0x290>)
 801aa8e:	6859      	ldr	r1, [r3, #4]
 801aa90:	4001      	ands	r1, r0
 801aa92:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801aa94:	2140      	movs	r1, #64	; 0x40
 801aa96:	6818      	ldr	r0, [r3, #0]
 801aa98:	4201      	tst	r1, r0
 801aa9a:	d102      	bne.n	801aaa2 <HAL_SPI_TransmitReceive+0xae>
    __HAL_SPI_ENABLE(hspi);
 801aa9c:	6818      	ldr	r0, [r3, #0]
 801aa9e:	4301      	orrs	r1, r0
 801aaa0:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801aaa2:	2a00      	cmp	r2, #0
 801aaa4:	d000      	beq.n	801aaa8 <HAL_SPI_TransmitReceive+0xb4>
 801aaa6:	e0ae      	b.n	801ac06 <HAL_SPI_TransmitReceive+0x212>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801aaa8:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801aaaa:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801aaac:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 801aaae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801aab0:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 801aab2:	3b01      	subs	r3, #1
 801aab4:	b29b      	uxth	r3, r3
 801aab6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801aab8:	9b06      	ldr	r3, [sp, #24]
 801aaba:	3301      	adds	r3, #1
 801aabc:	d000      	beq.n	801aac0 <HAL_SPI_TransmitReceive+0xcc>
 801aabe:	e0a6      	b.n	801ac0e <HAL_SPI_TransmitReceive+0x21a>
{
 801aac0:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801aac2:	2646      	movs	r6, #70	; 0x46
{
 801aac4:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801aac6:	2502      	movs	r5, #2
 801aac8:	e029      	b.n	801ab1e <HAL_SPI_TransmitReceive+0x12a>
 801aaca:	6823      	ldr	r3, [r4, #0]
 801aacc:	689a      	ldr	r2, [r3, #8]
 801aace:	4215      	tst	r5, r2
 801aad0:	d010      	beq.n	801aaf4 <HAL_SPI_TransmitReceive+0x100>
 801aad2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801aad4:	2a00      	cmp	r2, #0
 801aad6:	d00d      	beq.n	801aaf4 <HAL_SPI_TransmitReceive+0x100>
 801aad8:	464a      	mov	r2, r9
 801aada:	2a01      	cmp	r2, #1
 801aadc:	d10a      	bne.n	801aaf4 <HAL_SPI_TransmitReceive+0x100>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801aade:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801aae0:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801aae2:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801aae4:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801aae6:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 801aae8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801aaea:	3a01      	subs	r2, #1
 801aaec:	b292      	uxth	r2, r2
 801aaee:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 801aaf0:	2200      	movs	r2, #0
 801aaf2:	4691      	mov	r9, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801aaf4:	2201      	movs	r2, #1
 801aaf6:	0010      	movs	r0, r2
 801aaf8:	6899      	ldr	r1, [r3, #8]
 801aafa:	4008      	ands	r0, r1
 801aafc:	420a      	tst	r2, r1
 801aafe:	d00c      	beq.n	801ab1a <HAL_SPI_TransmitReceive+0x126>
 801ab00:	5ba2      	ldrh	r2, [r4, r6]
 801ab02:	2a00      	cmp	r2, #0
 801ab04:	d009      	beq.n	801ab1a <HAL_SPI_TransmitReceive+0x126>
        txallowed = 1U;
 801ab06:	4681      	mov	r9, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801ab08:	68da      	ldr	r2, [r3, #12]
 801ab0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ab0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801ab0e:	3302      	adds	r3, #2
 801ab10:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 801ab12:	5ba3      	ldrh	r3, [r4, r6]
 801ab14:	3b01      	subs	r3, #1
 801ab16:	b29b      	uxth	r3, r3
 801ab18:	53a3      	strh	r3, [r4, r6]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801ab1a:	f7fe f93d 	bl	8018d98 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ab1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	d1d2      	bne.n	801aaca <HAL_SPI_TransmitReceive+0xd6>
 801ab24:	5ba3      	ldrh	r3, [r4, r6]
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d1cf      	bne.n	801aaca <HAL_SPI_TransmitReceive+0xd6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801ab2a:	003a      	movs	r2, r7
 801ab2c:	0020      	movs	r0, r4
 801ab2e:	9906      	ldr	r1, [sp, #24]
 801ab30:	f7ff fa84 	bl	801a03c <SPI_EndRxTxTransaction>
 801ab34:	2800      	cmp	r0, #0
 801ab36:	d100      	bne.n	801ab3a <HAL_SPI_TransmitReceive+0x146>
 801ab38:	e778      	b.n	801aa2c <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801ab3a:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 801ab3c:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801ab3e:	6623      	str	r3, [r4, #96]	; 0x60
 801ab40:	e774      	b.n	801aa2c <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 801ab42:	2002      	movs	r0, #2
 801ab44:	e778      	b.n	801aa38 <HAL_SPI_TransmitReceive+0x44>
    errorcode = HAL_ERROR;
 801ab46:	2001      	movs	r0, #1
 801ab48:	e770      	b.n	801aa2c <HAL_SPI_TransmitReceive+0x38>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ab4a:	2180      	movs	r1, #128	; 0x80
 801ab4c:	6823      	ldr	r3, [r4, #0]
 801ab4e:	0149      	lsls	r1, r1, #5
 801ab50:	6858      	ldr	r0, [r3, #4]
 801ab52:	4301      	orrs	r1, r0
 801ab54:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801ab56:	2140      	movs	r1, #64	; 0x40
 801ab58:	6818      	ldr	r0, [r3, #0]
 801ab5a:	4201      	tst	r1, r0
 801ab5c:	d102      	bne.n	801ab64 <HAL_SPI_TransmitReceive+0x170>
    __HAL_SPI_ENABLE(hspi);
 801ab5e:	6818      	ldr	r0, [r3, #0]
 801ab60:	4301      	orrs	r1, r0
 801ab62:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ab64:	2a00      	cmp	r2, #0
 801ab66:	d14b      	bne.n	801ac00 <HAL_SPI_TransmitReceive+0x20c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801ab68:	782a      	ldrb	r2, [r5, #0]
 801ab6a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801ab6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ab6e:	3301      	adds	r3, #1
 801ab70:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 801ab72:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801ab74:	3b01      	subs	r3, #1
 801ab76:	b29b      	uxth	r3, r3
 801ab78:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 801ab7a:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ab7c:	2646      	movs	r6, #70	; 0x46
        txallowed = 1U;
 801ab7e:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801ab80:	2502      	movs	r5, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ab82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d102      	bne.n	801ab8e <HAL_SPI_TransmitReceive+0x19a>
 801ab88:	5ba3      	ldrh	r3, [r4, r6]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d0cd      	beq.n	801ab2a <HAL_SPI_TransmitReceive+0x136>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801ab8e:	6823      	ldr	r3, [r4, #0]
 801ab90:	689a      	ldr	r2, [r3, #8]
 801ab92:	4215      	tst	r5, r2
 801ab94:	d012      	beq.n	801abbc <HAL_SPI_TransmitReceive+0x1c8>
 801ab96:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801ab98:	2a00      	cmp	r2, #0
 801ab9a:	d00f      	beq.n	801abbc <HAL_SPI_TransmitReceive+0x1c8>
 801ab9c:	464a      	mov	r2, r9
 801ab9e:	2a01      	cmp	r2, #1
 801aba0:	d10c      	bne.n	801abbc <HAL_SPI_TransmitReceive+0x1c8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801aba2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801aba4:	7812      	ldrb	r2, [r2, #0]
 801aba6:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 801aba8:	2200      	movs	r2, #0
 801abaa:	4691      	mov	r9, r2
        hspi->pTxBuffPtr++;
 801abac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801abae:	3301      	adds	r3, #1
 801abb0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 801abb2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801abb4:	3b01      	subs	r3, #1
 801abb6:	b29b      	uxth	r3, r3
 801abb8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801abba:	6823      	ldr	r3, [r4, #0]
 801abbc:	2101      	movs	r1, #1
 801abbe:	0008      	movs	r0, r1
 801abc0:	689a      	ldr	r2, [r3, #8]
 801abc2:	4010      	ands	r0, r2
 801abc4:	4211      	tst	r1, r2
 801abc6:	d00d      	beq.n	801abe4 <HAL_SPI_TransmitReceive+0x1f0>
 801abc8:	5ba2      	ldrh	r2, [r4, r6]
 801abca:	2a00      	cmp	r2, #0
 801abcc:	d00a      	beq.n	801abe4 <HAL_SPI_TransmitReceive+0x1f0>
        txallowed = 1U;
 801abce:	4681      	mov	r9, r0
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801abd0:	7b1b      	ldrb	r3, [r3, #12]
 801abd2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801abd4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 801abd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801abd8:	3301      	adds	r3, #1
 801abda:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 801abdc:	5ba3      	ldrh	r3, [r4, r6]
 801abde:	3b01      	subs	r3, #1
 801abe0:	b29b      	uxth	r3, r3
 801abe2:	53a3      	strh	r3, [r4, r6]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801abe4:	f7fe f8d8 	bl	8018d98 <HAL_GetTick>
 801abe8:	9b06      	ldr	r3, [sp, #24]
 801abea:	1bc0      	subs	r0, r0, r7
 801abec:	4298      	cmp	r0, r3
 801abee:	d303      	bcc.n	801abf8 <HAL_SPI_TransmitReceive+0x204>
 801abf0:	3301      	adds	r3, #1
 801abf2:	d0c6      	beq.n	801ab82 <HAL_SPI_TransmitReceive+0x18e>
        errorcode = HAL_TIMEOUT;
 801abf4:	2003      	movs	r0, #3
 801abf6:	e719      	b.n	801aa2c <HAL_SPI_TransmitReceive+0x38>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d1c2      	bne.n	801ab82 <HAL_SPI_TransmitReceive+0x18e>
        errorcode = HAL_TIMEOUT;
 801abfc:	2003      	movs	r0, #3
 801abfe:	e715      	b.n	801aa2c <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ac00:	2e01      	cmp	r6, #1
 801ac02:	d1ba      	bne.n	801ab7a <HAL_SPI_TransmitReceive+0x186>
 801ac04:	e7b0      	b.n	801ab68 <HAL_SPI_TransmitReceive+0x174>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ac06:	2e01      	cmp	r6, #1
 801ac08:	d000      	beq.n	801ac0c <HAL_SPI_TransmitReceive+0x218>
 801ac0a:	e755      	b.n	801aab8 <HAL_SPI_TransmitReceive+0xc4>
 801ac0c:	e74c      	b.n	801aaa8 <HAL_SPI_TransmitReceive+0xb4>
        txallowed = 1U;
 801ac0e:	2301      	movs	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ac10:	2646      	movs	r6, #70	; 0x46
        txallowed = 1U;
 801ac12:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801ac14:	2502      	movs	r5, #2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ac16:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d103      	bne.n	801ac24 <HAL_SPI_TransmitReceive+0x230>
 801ac1c:	5ba3      	ldrh	r3, [r4, r6]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d100      	bne.n	801ac24 <HAL_SPI_TransmitReceive+0x230>
 801ac22:	e782      	b.n	801ab2a <HAL_SPI_TransmitReceive+0x136>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801ac24:	6823      	ldr	r3, [r4, #0]
 801ac26:	689a      	ldr	r2, [r3, #8]
 801ac28:	4215      	tst	r5, r2
 801ac2a:	d010      	beq.n	801ac4e <HAL_SPI_TransmitReceive+0x25a>
 801ac2c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801ac2e:	2a00      	cmp	r2, #0
 801ac30:	d00d      	beq.n	801ac4e <HAL_SPI_TransmitReceive+0x25a>
 801ac32:	464a      	mov	r2, r9
 801ac34:	2a01      	cmp	r2, #1
 801ac36:	d10a      	bne.n	801ac4e <HAL_SPI_TransmitReceive+0x25a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ac38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801ac3a:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801ac3c:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ac3e:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801ac40:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 801ac42:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801ac44:	3a01      	subs	r2, #1
 801ac46:	b292      	uxth	r2, r2
 801ac48:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 801ac4a:	2200      	movs	r2, #0
 801ac4c:	4691      	mov	r9, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801ac4e:	2101      	movs	r1, #1
 801ac50:	0008      	movs	r0, r1
 801ac52:	689a      	ldr	r2, [r3, #8]
 801ac54:	4010      	ands	r0, r2
 801ac56:	4211      	tst	r1, r2
 801ac58:	d00c      	beq.n	801ac74 <HAL_SPI_TransmitReceive+0x280>
 801ac5a:	5ba2      	ldrh	r2, [r4, r6]
 801ac5c:	2a00      	cmp	r2, #0
 801ac5e:	d009      	beq.n	801ac74 <HAL_SPI_TransmitReceive+0x280>
        txallowed = 1U;
 801ac60:	4681      	mov	r9, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801ac62:	68da      	ldr	r2, [r3, #12]
 801ac64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ac66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801ac68:	3302      	adds	r3, #2
 801ac6a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 801ac6c:	5ba3      	ldrh	r3, [r4, r6]
 801ac6e:	3b01      	subs	r3, #1
 801ac70:	b29b      	uxth	r3, r3
 801ac72:	53a3      	strh	r3, [r4, r6]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801ac74:	f7fe f890 	bl	8018d98 <HAL_GetTick>
 801ac78:	9b06      	ldr	r3, [sp, #24]
 801ac7a:	1bc0      	subs	r0, r0, r7
 801ac7c:	4298      	cmp	r0, r3
 801ac7e:	d3ca      	bcc.n	801ac16 <HAL_SPI_TransmitReceive+0x222>
        errorcode = HAL_TIMEOUT;
 801ac80:	2003      	movs	r0, #3
 801ac82:	e6d3      	b.n	801aa2c <HAL_SPI_TransmitReceive+0x38>
 801ac84:	ffffefff 	.word	0xffffefff

0801ac88 <HAL_SPI_Receive>:
{
 801ac88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac8a:	4647      	mov	r7, r8
 801ac8c:	46ce      	mov	lr, r9
 801ac8e:	001d      	movs	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801ac90:	2382      	movs	r3, #130	; 0x82
{
 801ac92:	b580      	push	{r7, lr}
 801ac94:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801ac96:	6842      	ldr	r2, [r0, #4]
{
 801ac98:	0004      	movs	r4, r0
 801ac9a:	4688      	mov	r8, r1
 801ac9c:	b085      	sub	sp, #20
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801ac9e:	005b      	lsls	r3, r3, #1
 801aca0:	429a      	cmp	r2, r3
 801aca2:	d100      	bne.n	801aca6 <HAL_SPI_Receive+0x1e>
 801aca4:	e098      	b.n	801add8 <HAL_SPI_Receive+0x150>
  __HAL_LOCK(hspi);
 801aca6:	235c      	movs	r3, #92	; 0x5c
 801aca8:	5ce2      	ldrb	r2, [r4, r3]
 801acaa:	2a01      	cmp	r2, #1
 801acac:	d100      	bne.n	801acb0 <HAL_SPI_Receive+0x28>
 801acae:	e0a0      	b.n	801adf2 <HAL_SPI_Receive+0x16a>
 801acb0:	2201      	movs	r2, #1
 801acb2:	54e2      	strb	r2, [r4, r3]
  tickstart = HAL_GetTick();
 801acb4:	f7fe f870 	bl	8018d98 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 801acb8:	225d      	movs	r2, #93	; 0x5d
 801acba:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 801acbc:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 801acbe:	b2d8      	uxtb	r0, r3
 801acc0:	2b01      	cmp	r3, #1
 801acc2:	d00b      	beq.n	801acdc <HAL_SPI_Receive+0x54>
    errorcode = HAL_BUSY;
 801acc4:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 801acc6:	235d      	movs	r3, #93	; 0x5d
 801acc8:	2201      	movs	r2, #1
 801acca:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 801accc:	2200      	movs	r2, #0
 801acce:	3b01      	subs	r3, #1
 801acd0:	54e2      	strb	r2, [r4, r3]
}
 801acd2:	b005      	add	sp, #20
 801acd4:	bcc0      	pop	{r6, r7}
 801acd6:	46b9      	mov	r9, r7
 801acd8:	46b0      	mov	r8, r6
 801acda:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 801acdc:	4643      	mov	r3, r8
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d0f1      	beq.n	801acc6 <HAL_SPI_Receive+0x3e>
 801ace2:	2f00      	cmp	r7, #0
 801ace4:	d0ef      	beq.n	801acc6 <HAL_SPI_Receive+0x3e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801ace6:	2304      	movs	r3, #4
 801ace8:	54a3      	strb	r3, [r4, r2]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801acea:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801acec:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801acee:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801acf0:	2244      	movs	r2, #68	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801acf2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferSize  = Size;
 801acf4:	52a7      	strh	r7, [r4, r2]
  hspi->RxXferCount = Size;
 801acf6:	3202      	adds	r2, #2
 801acf8:	52a7      	strh	r7, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801acfa:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801acfc:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801acfe:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801ad00:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801ad02:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801ad04:	23e0      	movs	r3, #224	; 0xe0
 801ad06:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ad08:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801ad0a:	00db      	lsls	r3, r3, #3
 801ad0c:	4299      	cmp	r1, r3
 801ad0e:	d800      	bhi.n	801ad12 <HAL_SPI_Receive+0x8a>
 801ad10:	e08c      	b.n	801ae2c <HAL_SPI_Receive+0x1a4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ad12:	0013      	movs	r3, r2
 801ad14:	6850      	ldr	r0, [r2, #4]
 801ad16:	4fb8      	ldr	r7, [pc, #736]	; (801aff8 <HAL_SPI_Receive+0x370>)
 801ad18:	4038      	ands	r0, r7
 801ad1a:	6050      	str	r0, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ad1c:	2080      	movs	r0, #128	; 0x80
 801ad1e:	68a7      	ldr	r7, [r4, #8]
 801ad20:	0200      	lsls	r0, r0, #8
 801ad22:	4287      	cmp	r7, r0
 801ad24:	d107      	bne.n	801ad36 <HAL_SPI_Receive+0xae>
    __HAL_SPI_DISABLE(hspi);
 801ad26:	2740      	movs	r7, #64	; 0x40
 801ad28:	6810      	ldr	r0, [r2, #0]
 801ad2a:	43b8      	bics	r0, r7
 801ad2c:	6010      	str	r0, [r2, #0]
    SPI_1LINE_RX(hspi);
 801ad2e:	6810      	ldr	r0, [r2, #0]
 801ad30:	4fb2      	ldr	r7, [pc, #712]	; (801affc <HAL_SPI_Receive+0x374>)
 801ad32:	4038      	ands	r0, r7
 801ad34:	6010      	str	r0, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801ad36:	2040      	movs	r0, #64	; 0x40
 801ad38:	6817      	ldr	r7, [r2, #0]
 801ad3a:	4238      	tst	r0, r7
 801ad3c:	d102      	bne.n	801ad44 <HAL_SPI_Receive+0xbc>
    __HAL_SPI_ENABLE(hspi);
 801ad3e:	6817      	ldr	r7, [r2, #0]
 801ad40:	4338      	orrs	r0, r7
 801ad42:	6010      	str	r0, [r2, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801ad44:	20e0      	movs	r0, #224	; 0xe0
 801ad46:	00c0      	lsls	r0, r0, #3
 801ad48:	4281      	cmp	r1, r0
 801ad4a:	d976      	bls.n	801ae3a <HAL_SPI_Receive+0x1b2>
    while (hspi->RxXferCount > 0U)
 801ad4c:	2146      	movs	r1, #70	; 0x46
 801ad4e:	5a61      	ldrh	r1, [r4, r1]
 801ad50:	2900      	cmp	r1, #0
 801ad52:	d01a      	beq.n	801ad8a <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801ad54:	2001      	movs	r0, #1
        hspi->RxXferCount--;
 801ad56:	2146      	movs	r1, #70	; 0x46
 801ad58:	2d00      	cmp	r5, #0
 801ad5a:	d100      	bne.n	801ad5e <HAL_SPI_Receive+0xd6>
 801ad5c:	e0d5      	b.n	801af0a <HAL_SPI_Receive+0x282>
 801ad5e:	1c69      	adds	r1, r5, #1
 801ad60:	d000      	beq.n	801ad64 <HAL_SPI_Receive+0xdc>
 801ad62:	e11d      	b.n	801afa0 <HAL_SPI_Receive+0x318>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801ad64:	2301      	movs	r3, #1
    while (hspi->RxXferCount > 0U)
 801ad66:	2746      	movs	r7, #70	; 0x46
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801ad68:	4698      	mov	r8, r3
 801ad6a:	4641      	mov	r1, r8
 801ad6c:	6893      	ldr	r3, [r2, #8]
 801ad6e:	4219      	tst	r1, r3
 801ad70:	d041      	beq.n	801adf6 <HAL_SPI_Receive+0x16e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801ad72:	68d1      	ldr	r1, [r2, #12]
 801ad74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ad76:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801ad78:	3302      	adds	r3, #2
 801ad7a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 801ad7c:	5be1      	ldrh	r1, [r4, r7]
 801ad7e:	3901      	subs	r1, #1
 801ad80:	b289      	uxth	r1, r1
 801ad82:	53e1      	strh	r1, [r4, r7]
    while (hspi->RxXferCount > 0U)
 801ad84:	5be3      	ldrh	r3, [r4, r7]
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d1ef      	bne.n	801ad6a <HAL_SPI_Receive+0xe2>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ad8a:	2382      	movs	r3, #130	; 0x82
 801ad8c:	6862      	ldr	r2, [r4, #4]
 801ad8e:	005b      	lsls	r3, r3, #1
 801ad90:	429a      	cmp	r2, r3
 801ad92:	d100      	bne.n	801ad96 <HAL_SPI_Receive+0x10e>
 801ad94:	e0bd      	b.n	801af12 <HAL_SPI_Receive+0x28a>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801ad96:	f7fd ffff 	bl	8018d98 <HAL_GetTick>
 801ad9a:	19af      	adds	r7, r5, r6
 801ad9c:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 801ad9e:	f7fd fffb 	bl	8018d98 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801ada2:	4b97      	ldr	r3, [pc, #604]	; (801b000 <HAL_SPI_Receive+0x378>)
  tmp_tickstart = HAL_GetTick();
 801ada4:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	015b      	lsls	r3, r3, #5
 801adaa:	0d1b      	lsrs	r3, r3, #20
 801adac:	437b      	muls	r3, r7
 801adae:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801adb0:	2380      	movs	r3, #128	; 0x80
 801adb2:	4699      	mov	r9, r3
 801adb4:	6822      	ldr	r2, [r4, #0]
 801adb6:	1c6b      	adds	r3, r5, #1
 801adb8:	d124      	bne.n	801ae04 <HAL_SPI_Receive+0x17c>
 801adba:	2180      	movs	r1, #128	; 0x80
 801adbc:	6893      	ldr	r3, [r2, #8]
 801adbe:	4219      	tst	r1, r3
 801adc0:	d1fc      	bne.n	801adbc <HAL_SPI_Receive+0x134>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801adc2:	2382      	movs	r3, #130	; 0x82
 801adc4:	6862      	ldr	r2, [r4, #4]
 801adc6:	005b      	lsls	r3, r3, #1
 801adc8:	429a      	cmp	r2, r3
 801adca:	d100      	bne.n	801adce <HAL_SPI_Receive+0x146>
 801adcc:	e0b1      	b.n	801af32 <HAL_SPI_Receive+0x2aa>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801adce:	6e20      	ldr	r0, [r4, #96]	; 0x60
 801add0:	1e43      	subs	r3, r0, #1
 801add2:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 801add4:	b2c0      	uxtb	r0, r0
error :
 801add6:	e776      	b.n	801acc6 <HAL_SPI_Receive+0x3e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801add8:	6883      	ldr	r3, [r0, #8]
 801adda:	2b00      	cmp	r3, #0
 801addc:	d000      	beq.n	801ade0 <HAL_SPI_Receive+0x158>
 801adde:	e762      	b.n	801aca6 <HAL_SPI_Receive+0x1e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801ade0:	2204      	movs	r2, #4
 801ade2:	335d      	adds	r3, #93	; 0x5d
 801ade4:	54c2      	strb	r2, [r0, r3]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801ade6:	003b      	movs	r3, r7
 801ade8:	000a      	movs	r2, r1
 801adea:	9500      	str	r5, [sp, #0]
 801adec:	f7ff fe02 	bl	801a9f4 <HAL_SPI_TransmitReceive>
 801adf0:	e76f      	b.n	801acd2 <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 801adf2:	2002      	movs	r0, #2
 801adf4:	e76d      	b.n	801acd2 <HAL_SPI_Receive+0x4a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801adf6:	f7fd ffcf 	bl	8018d98 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 801adfa:	5be3      	ldrh	r3, [r4, r7]
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	d0c4      	beq.n	801ad8a <HAL_SPI_Receive+0x102>
 801ae00:	6822      	ldr	r2, [r4, #0]
 801ae02:	e7b2      	b.n	801ad6a <HAL_SPI_Receive+0xe2>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801ae04:	6893      	ldr	r3, [r2, #8]
 801ae06:	464a      	mov	r2, r9
 801ae08:	421a      	tst	r2, r3
 801ae0a:	d0da      	beq.n	801adc2 <HAL_SPI_Receive+0x13a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801ae0c:	f7fd ffc4 	bl	8018d98 <HAL_GetTick>
 801ae10:	4643      	mov	r3, r8
 801ae12:	1ac0      	subs	r0, r0, r3
 801ae14:	42b8      	cmp	r0, r7
 801ae16:	d300      	bcc.n	801ae1a <HAL_SPI_Receive+0x192>
 801ae18:	e0a4      	b.n	801af64 <HAL_SPI_Receive+0x2dc>
      if(count == 0U)
 801ae1a:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 801ae1c:	1e5a      	subs	r2, r3, #1
 801ae1e:	4193      	sbcs	r3, r2
 801ae20:	425b      	negs	r3, r3
 801ae22:	401f      	ands	r7, r3
      count--;
 801ae24:	9b03      	ldr	r3, [sp, #12]
 801ae26:	3b01      	subs	r3, #1
 801ae28:	9303      	str	r3, [sp, #12]
 801ae2a:	e7c3      	b.n	801adb4 <HAL_SPI_Receive+0x12c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ae2c:	2080      	movs	r0, #128	; 0x80
 801ae2e:	6857      	ldr	r7, [r2, #4]
 801ae30:	0140      	lsls	r0, r0, #5
 801ae32:	4338      	orrs	r0, r7
 801ae34:	0013      	movs	r3, r2
 801ae36:	6050      	str	r0, [r2, #4]
 801ae38:	e770      	b.n	801ad1c <HAL_SPI_Receive+0x94>
    while (hspi->RxXferCount > 0U)
 801ae3a:	2246      	movs	r2, #70	; 0x46
 801ae3c:	5aa2      	ldrh	r2, [r4, r2]
 801ae3e:	2a00      	cmp	r2, #0
 801ae40:	d0a3      	beq.n	801ad8a <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801ae42:	2101      	movs	r1, #1
        hspi->RxXferCount--;
 801ae44:	2246      	movs	r2, #70	; 0x46
 801ae46:	2d00      	cmp	r5, #0
 801ae48:	d04b      	beq.n	801aee2 <HAL_SPI_Receive+0x25a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801ae4a:	2201      	movs	r2, #1
    while (hspi->RxXferCount > 0U)
 801ae4c:	2746      	movs	r7, #70	; 0x46
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801ae4e:	4690      	mov	r8, r2
 801ae50:	1c6a      	adds	r2, r5, #1
 801ae52:	d12c      	bne.n	801aeae <HAL_SPI_Receive+0x226>
 801ae54:	4641      	mov	r1, r8
 801ae56:	689a      	ldr	r2, [r3, #8]
 801ae58:	4211      	tst	r1, r2
 801ae5a:	d011      	beq.n	801ae80 <HAL_SPI_Receive+0x1f8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801ae5c:	7b1b      	ldrb	r3, [r3, #12]
 801ae5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801ae60:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801ae62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ae64:	3301      	adds	r3, #1
 801ae66:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 801ae68:	5be1      	ldrh	r1, [r4, r7]
 801ae6a:	3901      	subs	r1, #1
 801ae6c:	b289      	uxth	r1, r1
 801ae6e:	53e1      	strh	r1, [r4, r7]
    while (hspi->RxXferCount > 0U)
 801ae70:	5be3      	ldrh	r3, [r4, r7]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d089      	beq.n	801ad8a <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801ae76:	6823      	ldr	r3, [r4, #0]
 801ae78:	4641      	mov	r1, r8
 801ae7a:	689a      	ldr	r2, [r3, #8]
 801ae7c:	4211      	tst	r1, r2
 801ae7e:	d1ed      	bne.n	801ae5c <HAL_SPI_Receive+0x1d4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801ae80:	f7fd ff8a 	bl	8018d98 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 801ae84:	5be3      	ldrh	r3, [r4, r7]
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d100      	bne.n	801ae8c <HAL_SPI_Receive+0x204>
 801ae8a:	e77e      	b.n	801ad8a <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801ae8c:	6823      	ldr	r3, [r4, #0]
 801ae8e:	e7f3      	b.n	801ae78 <HAL_SPI_Receive+0x1f0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801ae90:	7b1b      	ldrb	r3, [r3, #12]
 801ae92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801ae94:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801ae96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ae98:	3301      	adds	r3, #1
 801ae9a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 801ae9c:	5be3      	ldrh	r3, [r4, r7]
 801ae9e:	3b01      	subs	r3, #1
 801aea0:	b29b      	uxth	r3, r3
 801aea2:	53e3      	strh	r3, [r4, r7]
    while (hspi->RxXferCount > 0U)
 801aea4:	5be3      	ldrh	r3, [r4, r7]
 801aea6:	2b00      	cmp	r3, #0
 801aea8:	d100      	bne.n	801aeac <HAL_SPI_Receive+0x224>
 801aeaa:	e76e      	b.n	801ad8a <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801aeac:	6823      	ldr	r3, [r4, #0]
 801aeae:	4641      	mov	r1, r8
 801aeb0:	689a      	ldr	r2, [r3, #8]
 801aeb2:	4211      	tst	r1, r2
 801aeb4:	d1ec      	bne.n	801ae90 <HAL_SPI_Receive+0x208>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801aeb6:	f7fd ff6f 	bl	8018d98 <HAL_GetTick>
 801aeba:	1b80      	subs	r0, r0, r6
 801aebc:	4285      	cmp	r5, r0
 801aebe:	d8f1      	bhi.n	801aea4 <HAL_SPI_Receive+0x21c>
          errorcode = HAL_TIMEOUT;
 801aec0:	2003      	movs	r0, #3
 801aec2:	e700      	b.n	801acc6 <HAL_SPI_Receive+0x3e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801aec4:	7b1b      	ldrb	r3, [r3, #12]
 801aec6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801aec8:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801aeca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aecc:	3301      	adds	r3, #1
 801aece:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 801aed0:	5aa3      	ldrh	r3, [r4, r2]
 801aed2:	3b01      	subs	r3, #1
 801aed4:	b29b      	uxth	r3, r3
 801aed6:	52a3      	strh	r3, [r4, r2]
    while (hspi->RxXferCount > 0U)
 801aed8:	5aa3      	ldrh	r3, [r4, r2]
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d100      	bne.n	801aee0 <HAL_SPI_Receive+0x258>
 801aede:	e754      	b.n	801ad8a <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801aee0:	6823      	ldr	r3, [r4, #0]
 801aee2:	6898      	ldr	r0, [r3, #8]
 801aee4:	4201      	tst	r1, r0
 801aee6:	d1ed      	bne.n	801aec4 <HAL_SPI_Receive+0x23c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801aee8:	f7fd ff56 	bl	8018d98 <HAL_GetTick>
          errorcode = HAL_TIMEOUT;
 801aeec:	2003      	movs	r0, #3
 801aeee:	e6ea      	b.n	801acc6 <HAL_SPI_Receive+0x3e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801aef0:	68d7      	ldr	r7, [r2, #12]
 801aef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aef4:	801f      	strh	r7, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801aef6:	3302      	adds	r3, #2
 801aef8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 801aefa:	5a63      	ldrh	r3, [r4, r1]
 801aefc:	3b01      	subs	r3, #1
 801aefe:	b29b      	uxth	r3, r3
 801af00:	5263      	strh	r3, [r4, r1]
    while (hspi->RxXferCount > 0U)
 801af02:	5a63      	ldrh	r3, [r4, r1]
 801af04:	2b00      	cmp	r3, #0
 801af06:	d100      	bne.n	801af0a <HAL_SPI_Receive+0x282>
 801af08:	e73f      	b.n	801ad8a <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801af0a:	6893      	ldr	r3, [r2, #8]
 801af0c:	4218      	tst	r0, r3
 801af0e:	d1ef      	bne.n	801aef0 <HAL_SPI_Receive+0x268>
 801af10:	e7ea      	b.n	801aee8 <HAL_SPI_Receive+0x260>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801af12:	2280      	movs	r2, #128	; 0x80
 801af14:	68a3      	ldr	r3, [r4, #8]
 801af16:	0212      	lsls	r2, r2, #8
 801af18:	4293      	cmp	r3, r2
 801af1a:	d004      	beq.n	801af26 <HAL_SPI_Receive+0x29e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801af1c:	2280      	movs	r2, #128	; 0x80
 801af1e:	00d2      	lsls	r2, r2, #3
 801af20:	4293      	cmp	r3, r2
 801af22:	d000      	beq.n	801af26 <HAL_SPI_Receive+0x29e>
 801af24:	e737      	b.n	801ad96 <HAL_SPI_Receive+0x10e>
    __HAL_SPI_DISABLE(hspi);
 801af26:	2140      	movs	r1, #64	; 0x40
 801af28:	6822      	ldr	r2, [r4, #0]
 801af2a:	6813      	ldr	r3, [r2, #0]
 801af2c:	438b      	bics	r3, r1
 801af2e:	6013      	str	r3, [r2, #0]
 801af30:	e731      	b.n	801ad96 <HAL_SPI_Receive+0x10e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801af32:	2280      	movs	r2, #128	; 0x80
 801af34:	68a3      	ldr	r3, [r4, #8]
 801af36:	0212      	lsls	r2, r2, #8
 801af38:	4293      	cmp	r3, r2
 801af3a:	d004      	beq.n	801af46 <HAL_SPI_Receive+0x2be>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801af3c:	2280      	movs	r2, #128	; 0x80
 801af3e:	00d2      	lsls	r2, r2, #3
 801af40:	4293      	cmp	r3, r2
 801af42:	d000      	beq.n	801af46 <HAL_SPI_Receive+0x2be>
 801af44:	e743      	b.n	801adce <HAL_SPI_Receive+0x146>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801af46:	0032      	movs	r2, r6
 801af48:	0029      	movs	r1, r5
 801af4a:	0020      	movs	r0, r4
 801af4c:	f7fe ffdc 	bl	8019f08 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 801af50:	2800      	cmp	r0, #0
 801af52:	d100      	bne.n	801af56 <HAL_SPI_Receive+0x2ce>
 801af54:	e73b      	b.n	801adce <HAL_SPI_Receive+0x146>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801af56:	2220      	movs	r2, #32
 801af58:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801af5a:	4313      	orrs	r3, r2
 801af5c:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801af5e:	2320      	movs	r3, #32
 801af60:	6623      	str	r3, [r4, #96]	; 0x60
 801af62:	e734      	b.n	801adce <HAL_SPI_Receive+0x146>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801af64:	21e0      	movs	r1, #224	; 0xe0
 801af66:	6823      	ldr	r3, [r4, #0]
 801af68:	685a      	ldr	r2, [r3, #4]
 801af6a:	438a      	bics	r2, r1
 801af6c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801af6e:	2282      	movs	r2, #130	; 0x82
 801af70:	6861      	ldr	r1, [r4, #4]
 801af72:	0052      	lsls	r2, r2, #1
 801af74:	4291      	cmp	r1, r2
 801af76:	d030      	beq.n	801afda <HAL_SPI_Receive+0x352>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801af78:	2180      	movs	r1, #128	; 0x80
 801af7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801af7c:	0189      	lsls	r1, r1, #6
 801af7e:	428a      	cmp	r2, r1
 801af80:	d106      	bne.n	801af90 <HAL_SPI_Receive+0x308>
          SPI_RESET_CRC(hspi);
 801af82:	6819      	ldr	r1, [r3, #0]
 801af84:	481f      	ldr	r0, [pc, #124]	; (801b004 <HAL_SPI_Receive+0x37c>)
 801af86:	4001      	ands	r1, r0
 801af88:	6019      	str	r1, [r3, #0]
 801af8a:	6819      	ldr	r1, [r3, #0]
 801af8c:	430a      	orrs	r2, r1
 801af8e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 801af90:	235d      	movs	r3, #93	; 0x5d
 801af92:	2201      	movs	r2, #1
 801af94:	54e2      	strb	r2, [r4, r3]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801af96:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801af98:	321f      	adds	r2, #31
 801af9a:	4313      	orrs	r3, r2
 801af9c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 801af9e:	e7de      	b.n	801af5e <HAL_SPI_Receive+0x2d6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801afa0:	2201      	movs	r2, #1
        hspi->RxXferCount--;
 801afa2:	2746      	movs	r7, #70	; 0x46
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801afa4:	4690      	mov	r8, r2
 801afa6:	e00d      	b.n	801afc4 <HAL_SPI_Receive+0x33c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801afa8:	68da      	ldr	r2, [r3, #12]
 801afaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801afac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801afae:	3302      	adds	r3, #2
 801afb0:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 801afb2:	5be3      	ldrh	r3, [r4, r7]
 801afb4:	3b01      	subs	r3, #1
 801afb6:	b29b      	uxth	r3, r3
 801afb8:	53e3      	strh	r3, [r4, r7]
    while (hspi->RxXferCount > 0U)
 801afba:	5be3      	ldrh	r3, [r4, r7]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d100      	bne.n	801afc2 <HAL_SPI_Receive+0x33a>
 801afc0:	e6e3      	b.n	801ad8a <HAL_SPI_Receive+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801afc2:	6823      	ldr	r3, [r4, #0]
 801afc4:	4641      	mov	r1, r8
 801afc6:	689a      	ldr	r2, [r3, #8]
 801afc8:	4211      	tst	r1, r2
 801afca:	d1ed      	bne.n	801afa8 <HAL_SPI_Receive+0x320>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801afcc:	f7fd fee4 	bl	8018d98 <HAL_GetTick>
 801afd0:	1b80      	subs	r0, r0, r6
 801afd2:	4285      	cmp	r5, r0
 801afd4:	d8f1      	bhi.n	801afba <HAL_SPI_Receive+0x332>
          errorcode = HAL_TIMEOUT;
 801afd6:	2003      	movs	r0, #3
 801afd8:	e675      	b.n	801acc6 <HAL_SPI_Receive+0x3e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801afda:	2180      	movs	r1, #128	; 0x80
 801afdc:	68a2      	ldr	r2, [r4, #8]
 801afde:	0209      	lsls	r1, r1, #8
 801afe0:	428a      	cmp	r2, r1
 801afe2:	d003      	beq.n	801afec <HAL_SPI_Receive+0x364>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801afe4:	2180      	movs	r1, #128	; 0x80
 801afe6:	00c9      	lsls	r1, r1, #3
 801afe8:	428a      	cmp	r2, r1
 801afea:	d1c5      	bne.n	801af78 <HAL_SPI_Receive+0x2f0>
          __HAL_SPI_DISABLE(hspi);
 801afec:	2140      	movs	r1, #64	; 0x40
 801afee:	681a      	ldr	r2, [r3, #0]
 801aff0:	438a      	bics	r2, r1
 801aff2:	601a      	str	r2, [r3, #0]
 801aff4:	e7c0      	b.n	801af78 <HAL_SPI_Receive+0x2f0>
 801aff6:	46c0      	nop			; (mov r8, r8)
 801aff8:	ffffefff 	.word	0xffffefff
 801affc:	ffffbfff 	.word	0xffffbfff
 801b000:	20000088 	.word	0x20000088
 801b004:	ffffdfff 	.word	0xffffdfff

0801b008 <HAL_SPI_Transmit_DMA>:
{
 801b008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 801b00a:	235c      	movs	r3, #92	; 0x5c
{
 801b00c:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 801b00e:	5cc0      	ldrb	r0, [r0, r3]
 801b010:	2801      	cmp	r0, #1
 801b012:	d05f      	beq.n	801b0d4 <HAL_SPI_Transmit_DMA+0xcc>
 801b014:	2001      	movs	r0, #1
 801b016:	54e0      	strb	r0, [r4, r3]
  if (hspi->State != HAL_SPI_STATE_READY)
 801b018:	305c      	adds	r0, #92	; 0x5c
 801b01a:	5c23      	ldrb	r3, [r4, r0]
 801b01c:	b2dd      	uxtb	r5, r3
 801b01e:	2b01      	cmp	r3, #1
 801b020:	d005      	beq.n	801b02e <HAL_SPI_Transmit_DMA+0x26>
    errorcode = HAL_BUSY;
 801b022:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 801b024:	235c      	movs	r3, #92	; 0x5c
 801b026:	2200      	movs	r2, #0
 801b028:	54e2      	strb	r2, [r4, r3]
}
 801b02a:	0028      	movs	r0, r5
 801b02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 801b02e:	2900      	cmp	r1, #0
 801b030:	d0f8      	beq.n	801b024 <HAL_SPI_Transmit_DMA+0x1c>
 801b032:	2a00      	cmp	r2, #0
 801b034:	d0f6      	beq.n	801b024 <HAL_SPI_Transmit_DMA+0x1c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801b036:	3302      	adds	r3, #2
 801b038:	5423      	strb	r3, [r4, r0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801b03a:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 801b03c:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801b03e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 801b040:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 801b042:	2244      	movs	r2, #68	; 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801b044:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 801b046:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 801b048:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801b04a:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801b04c:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 801b04e:	3202      	adds	r2, #2
 801b050:	52a3      	strh	r3, [r4, r2]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801b052:	2380      	movs	r3, #128	; 0x80
 801b054:	68a2      	ldr	r2, [r4, #8]
 801b056:	021b      	lsls	r3, r3, #8
 801b058:	429a      	cmp	r2, r3
 801b05a:	d030      	beq.n	801b0be <HAL_SPI_Transmit_DMA+0xb6>
    __HAL_SPI_DISABLE(hspi);
 801b05c:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 801b05e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b060:	4b2b      	ldr	r3, [pc, #172]	; (801b110 <HAL_SPI_Transmit_DMA+0x108>)
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 801b062:	4e2c      	ldr	r6, [pc, #176]	; (801b114 <HAL_SPI_Transmit_DMA+0x10c>)
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 801b064:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 801b066:	4b2c      	ldr	r3, [pc, #176]	; (801b118 <HAL_SPI_Transmit_DMA+0x110>)
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 801b068:	68e7      	ldr	r7, [r4, #12]
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 801b06a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 801b06c:	4b2b      	ldr	r3, [pc, #172]	; (801b11c <HAL_SPI_Transmit_DMA+0x114>)
 801b06e:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 801b070:	2300      	movs	r3, #0
 801b072:	6383      	str	r3, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 801b074:	6853      	ldr	r3, [r2, #4]
 801b076:	4033      	ands	r3, r6
 801b078:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 801b07a:	23e0      	movs	r3, #224	; 0xe0
 801b07c:	00db      	lsls	r3, r3, #3
 801b07e:	429f      	cmp	r7, r3
 801b080:	d804      	bhi.n	801b08c <HAL_SPI_Transmit_DMA+0x84>
 801b082:	2380      	movs	r3, #128	; 0x80
 801b084:	6987      	ldr	r7, [r0, #24]
 801b086:	00db      	lsls	r3, r3, #3
 801b088:	429f      	cmp	r7, r3
 801b08a:	d02d      	beq.n	801b0e8 <HAL_SPI_Transmit_DMA+0xe0>
                                 hspi->TxXferCount))
 801b08c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 801b08e:	320c      	adds	r2, #12
                                 hspi->TxXferCount))
 801b090:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 801b092:	f7fe f853 	bl	801913c <HAL_DMA_Start_IT>
 801b096:	2800      	cmp	r0, #0
 801b098:	d11e      	bne.n	801b0d8 <HAL_SPI_Transmit_DMA+0xd0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801b09a:	2240      	movs	r2, #64	; 0x40
 801b09c:	6823      	ldr	r3, [r4, #0]
 801b09e:	6819      	ldr	r1, [r3, #0]
 801b0a0:	420a      	tst	r2, r1
 801b0a2:	d102      	bne.n	801b0aa <HAL_SPI_Transmit_DMA+0xa2>
    __HAL_SPI_ENABLE(hspi);
 801b0a4:	6819      	ldr	r1, [r3, #0]
 801b0a6:	430a      	orrs	r2, r1
 801b0a8:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 801b0aa:	2120      	movs	r1, #32
 801b0ac:	685a      	ldr	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801b0ae:	2500      	movs	r5, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 801b0b0:	430a      	orrs	r2, r1
 801b0b2:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 801b0b4:	685a      	ldr	r2, [r3, #4]
 801b0b6:	391e      	subs	r1, #30
 801b0b8:	430a      	orrs	r2, r1
 801b0ba:	605a      	str	r2, [r3, #4]
 801b0bc:	e7b2      	b.n	801b024 <HAL_SPI_Transmit_DMA+0x1c>
    __HAL_SPI_DISABLE(hspi);
 801b0be:	2040      	movs	r0, #64	; 0x40
 801b0c0:	6822      	ldr	r2, [r4, #0]
 801b0c2:	6813      	ldr	r3, [r2, #0]
 801b0c4:	4383      	bics	r3, r0
 801b0c6:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 801b0c8:	2380      	movs	r3, #128	; 0x80
 801b0ca:	6810      	ldr	r0, [r2, #0]
 801b0cc:	01db      	lsls	r3, r3, #7
 801b0ce:	4303      	orrs	r3, r0
 801b0d0:	6013      	str	r3, [r2, #0]
 801b0d2:	e7c4      	b.n	801b05e <HAL_SPI_Transmit_DMA+0x56>
  __HAL_LOCK(hspi);
 801b0d4:	2502      	movs	r5, #2
 801b0d6:	e7a8      	b.n	801b02a <HAL_SPI_Transmit_DMA+0x22>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801b0d8:	2210      	movs	r2, #16
 801b0da:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801b0dc:	4313      	orrs	r3, r2
 801b0de:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 801b0e0:	235d      	movs	r3, #93	; 0x5d
 801b0e2:	3a0f      	subs	r2, #15
 801b0e4:	54e2      	strb	r2, [r4, r3]
    goto error;
 801b0e6:	e79d      	b.n	801b024 <HAL_SPI_Transmit_DMA+0x1c>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 801b0e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801b0ea:	07db      	lsls	r3, r3, #31
 801b0ec:	d406      	bmi.n	801b0fc <HAL_SPI_Transmit_DMA+0xf4>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 801b0ee:	6853      	ldr	r3, [r2, #4]
 801b0f0:	401e      	ands	r6, r3
 801b0f2:	6056      	str	r6, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 801b0f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801b0f6:	085b      	lsrs	r3, r3, #1
 801b0f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801b0fa:	e7c7      	b.n	801b08c <HAL_SPI_Transmit_DMA+0x84>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 801b0fc:	2380      	movs	r3, #128	; 0x80
 801b0fe:	6856      	ldr	r6, [r2, #4]
 801b100:	01db      	lsls	r3, r3, #7
 801b102:	4333      	orrs	r3, r6
 801b104:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 801b106:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801b108:	085b      	lsrs	r3, r3, #1
 801b10a:	3301      	adds	r3, #1
 801b10c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801b10e:	e7bd      	b.n	801b08c <HAL_SPI_Transmit_DMA+0x84>
 801b110:	08019ead 	.word	0x08019ead
 801b114:	ffffbfff 	.word	0xffffbfff
 801b118:	0801a34d 	.word	0x0801a34d
 801b11c:	08019ed1 	.word	0x08019ed1

0801b120 <HAL_SPI_TransmitReceive_DMA>:
{
 801b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b122:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 801b124:	205c      	movs	r0, #92	; 0x5c
 801b126:	5c25      	ldrb	r5, [r4, r0]
 801b128:	2d01      	cmp	r5, #1
 801b12a:	d05b      	beq.n	801b1e4 <HAL_SPI_TransmitReceive_DMA+0xc4>
 801b12c:	2501      	movs	r5, #1
 801b12e:	5425      	strb	r5, [r4, r0]
  tmp_state           = hspi->State;
 801b130:	3001      	adds	r0, #1
 801b132:	5c20      	ldrb	r0, [r4, r0]
 801b134:	b2c6      	uxtb	r6, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 801b136:	2801      	cmp	r0, #1
 801b138:	d00e      	beq.n	801b158 <HAL_SPI_TransmitReceive_DMA+0x38>
 801b13a:	3504      	adds	r5, #4
 801b13c:	6867      	ldr	r7, [r4, #4]
 801b13e:	35ff      	adds	r5, #255	; 0xff
    errorcode = HAL_BUSY;
 801b140:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 801b142:	42af      	cmp	r7, r5
 801b144:	d003      	beq.n	801b14e <HAL_SPI_TransmitReceive_DMA+0x2e>
  __HAL_UNLOCK(hspi);
 801b146:	235c      	movs	r3, #92	; 0x5c
 801b148:	2200      	movs	r2, #0
 801b14a:	54e2      	strb	r2, [r4, r3]
}
 801b14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801b14e:	68a5      	ldr	r5, [r4, #8]
 801b150:	2d00      	cmp	r5, #0
 801b152:	d1f8      	bne.n	801b146 <HAL_SPI_TransmitReceive_DMA+0x26>
 801b154:	2e04      	cmp	r6, #4
 801b156:	d1f6      	bne.n	801b146 <HAL_SPI_TransmitReceive_DMA+0x26>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801b158:	2900      	cmp	r1, #0
 801b15a:	d041      	beq.n	801b1e0 <HAL_SPI_TransmitReceive_DMA+0xc0>
 801b15c:	2a00      	cmp	r2, #0
 801b15e:	d03f      	beq.n	801b1e0 <HAL_SPI_TransmitReceive_DMA+0xc0>
 801b160:	2b00      	cmp	r3, #0
 801b162:	d03d      	beq.n	801b1e0 <HAL_SPI_TransmitReceive_DMA+0xc0>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801b164:	205d      	movs	r0, #93	; 0x5d
 801b166:	5c25      	ldrb	r5, [r4, r0]
 801b168:	2d04      	cmp	r5, #4
 801b16a:	d001      	beq.n	801b170 <HAL_SPI_TransmitReceive_DMA+0x50>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801b16c:	2505      	movs	r5, #5
 801b16e:	5425      	strb	r5, [r4, r0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801b170:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801b172:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801b174:	2144      	movs	r1, #68	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801b176:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->TxXferSize  = Size;
 801b178:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801b17a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801b17c:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801b17e:	5263      	strh	r3, [r4, r1]
  hspi->RxXferCount = Size;
 801b180:	3102      	adds	r1, #2
 801b182:	5263      	strh	r3, [r4, r1]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 801b184:	6821      	ldr	r1, [r4, #0]
 801b186:	4d50      	ldr	r5, [pc, #320]	; (801b2c8 <HAL_SPI_TransmitReceive_DMA+0x1a8>)
  hspi->RxISR       = NULL;
 801b188:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801b18a:	6520      	str	r0, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 801b18c:	6848      	ldr	r0, [r1, #4]
 801b18e:	4028      	ands	r0, r5
 801b190:	6048      	str	r0, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801b192:	20e0      	movs	r0, #224	; 0xe0
 801b194:	68e5      	ldr	r5, [r4, #12]
 801b196:	00c0      	lsls	r0, r0, #3
 801b198:	4285      	cmp	r5, r0
 801b19a:	d925      	bls.n	801b1e8 <HAL_SPI_TransmitReceive_DMA+0xc8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801b19c:	684b      	ldr	r3, [r1, #4]
 801b19e:	484b      	ldr	r0, [pc, #300]	; (801b2cc <HAL_SPI_TransmitReceive_DMA+0x1ac>)
 801b1a0:	4003      	ands	r3, r0
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801b1a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801b1a4:	604b      	str	r3, [r1, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 801b1a6:	235d      	movs	r3, #93	; 0x5d
 801b1a8:	5ce3      	ldrb	r3, [r4, r3]
 801b1aa:	2b04      	cmp	r3, #4
 801b1ac:	d060      	beq.n	801b270 <HAL_SPI_TransmitReceive_DMA+0x150>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 801b1ae:	4b48      	ldr	r3, [pc, #288]	; (801b2d0 <HAL_SPI_TransmitReceive_DMA+0x1b0>)
 801b1b0:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 801b1b2:	4b48      	ldr	r3, [pc, #288]	; (801b2d4 <HAL_SPI_TransmitReceive_DMA+0x1b4>)
 801b1b4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 801b1b6:	4b48      	ldr	r3, [pc, #288]	; (801b2d8 <HAL_SPI_TransmitReceive_DMA+0x1b8>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 801b1b8:	310c      	adds	r1, #12
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 801b1ba:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 801b1bc:	2300      	movs	r3, #0
 801b1be:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->RxXferCount))
 801b1c0:	3346      	adds	r3, #70	; 0x46
 801b1c2:	5ae3      	ldrh	r3, [r4, r3]
 801b1c4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 801b1c6:	f7fd ffb9 	bl	801913c <HAL_DMA_Start_IT>
 801b1ca:	1e03      	subs	r3, r0, #0
 801b1cc:	d02d      	beq.n	801b22a <HAL_SPI_TransmitReceive_DMA+0x10a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801b1ce:	2210      	movs	r2, #16
 801b1d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 801b1d2:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801b1d4:	4313      	orrs	r3, r2
 801b1d6:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 801b1d8:	235d      	movs	r3, #93	; 0x5d
 801b1da:	3a0f      	subs	r2, #15
 801b1dc:	54e2      	strb	r2, [r4, r3]
    goto error;
 801b1de:	e7b2      	b.n	801b146 <HAL_SPI_TransmitReceive_DMA+0x26>
    errorcode = HAL_ERROR;
 801b1e0:	2001      	movs	r0, #1
 801b1e2:	e7b0      	b.n	801b146 <HAL_SPI_TransmitReceive_DMA+0x26>
  __HAL_LOCK(hspi);
 801b1e4:	2002      	movs	r0, #2
 801b1e6:	e7b1      	b.n	801b14c <HAL_SPI_TransmitReceive_DMA+0x2c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801b1e8:	2080      	movs	r0, #128	; 0x80
 801b1ea:	684d      	ldr	r5, [r1, #4]
 801b1ec:	0140      	lsls	r0, r0, #5
 801b1ee:	4328      	orrs	r0, r5
 801b1f0:	6048      	str	r0, [r1, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801b1f2:	2080      	movs	r0, #128	; 0x80
 801b1f4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801b1f6:	00c0      	lsls	r0, r0, #3
 801b1f8:	69ad      	ldr	r5, [r5, #24]
 801b1fa:	4285      	cmp	r5, r0
 801b1fc:	d03d      	beq.n	801b27a <HAL_SPI_TransmitReceive_DMA+0x15a>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801b1fe:	2380      	movs	r3, #128	; 0x80
 801b200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b202:	00db      	lsls	r3, r3, #3
 801b204:	6985      	ldr	r5, [r0, #24]
 801b206:	429d      	cmp	r5, r3
 801b208:	d1cd      	bne.n	801b1a6 <HAL_SPI_TransmitReceive_DMA+0x86>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801b20a:	684b      	ldr	r3, [r1, #4]
 801b20c:	4d2f      	ldr	r5, [pc, #188]	; (801b2cc <HAL_SPI_TransmitReceive_DMA+0x1ac>)
 801b20e:	402b      	ands	r3, r5
 801b210:	604b      	str	r3, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 801b212:	2346      	movs	r3, #70	; 0x46
 801b214:	5ae5      	ldrh	r5, [r4, r3]
 801b216:	07ed      	lsls	r5, r5, #31
 801b218:	d441      	bmi.n	801b29e <HAL_SPI_TransmitReceive_DMA+0x17e>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 801b21a:	684d      	ldr	r5, [r1, #4]
 801b21c:	4e2f      	ldr	r6, [pc, #188]	; (801b2dc <HAL_SPI_TransmitReceive_DMA+0x1bc>)
 801b21e:	4035      	ands	r5, r6
 801b220:	604d      	str	r5, [r1, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 801b222:	5ae5      	ldrh	r5, [r4, r3]
 801b224:	086d      	lsrs	r5, r5, #1
 801b226:	52e5      	strh	r5, [r4, r3]
 801b228:	e7bd      	b.n	801b1a6 <HAL_SPI_TransmitReceive_DMA+0x86>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 801b22a:	2501      	movs	r5, #1
 801b22c:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 801b22e:	6d60      	ldr	r0, [r4, #84]	; 0x54
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 801b230:	6851      	ldr	r1, [r2, #4]
 801b232:	4329      	orrs	r1, r5
 801b234:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 801b236:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 801b238:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 801b23a:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 801b23c:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->TxXferCount))
 801b23e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 801b240:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                                 hspi->TxXferCount))
 801b242:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 801b244:	320c      	adds	r2, #12
 801b246:	f7fd ff79 	bl	801913c <HAL_DMA_Start_IT>
 801b24a:	2800      	cmp	r0, #0
 801b24c:	d11f      	bne.n	801b28e <HAL_SPI_TransmitReceive_DMA+0x16e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801b24e:	2240      	movs	r2, #64	; 0x40
 801b250:	6823      	ldr	r3, [r4, #0]
 801b252:	6819      	ldr	r1, [r3, #0]
 801b254:	420a      	tst	r2, r1
 801b256:	d102      	bne.n	801b25e <HAL_SPI_TransmitReceive_DMA+0x13e>
    __HAL_SPI_ENABLE(hspi);
 801b258:	6819      	ldr	r1, [r3, #0]
 801b25a:	430a      	orrs	r2, r1
 801b25c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 801b25e:	2120      	movs	r1, #32
 801b260:	685a      	ldr	r2, [r3, #4]
 801b262:	430a      	orrs	r2, r1
 801b264:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 801b266:	685a      	ldr	r2, [r3, #4]
 801b268:	391e      	subs	r1, #30
 801b26a:	430a      	orrs	r2, r1
 801b26c:	605a      	str	r2, [r3, #4]
 801b26e:	e76a      	b.n	801b146 <HAL_SPI_TransmitReceive_DMA+0x26>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 801b270:	4b1b      	ldr	r3, [pc, #108]	; (801b2e0 <HAL_SPI_TransmitReceive_DMA+0x1c0>)
 801b272:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 801b274:	4b1b      	ldr	r3, [pc, #108]	; (801b2e4 <HAL_SPI_TransmitReceive_DMA+0x1c4>)
 801b276:	62c3      	str	r3, [r0, #44]	; 0x2c
 801b278:	e79d      	b.n	801b1b6 <HAL_SPI_TransmitReceive_DMA+0x96>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 801b27a:	07db      	lsls	r3, r3, #31
 801b27c:	d419      	bmi.n	801b2b2 <HAL_SPI_TransmitReceive_DMA+0x192>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 801b27e:	684b      	ldr	r3, [r1, #4]
 801b280:	4819      	ldr	r0, [pc, #100]	; (801b2e8 <HAL_SPI_TransmitReceive_DMA+0x1c8>)
 801b282:	4003      	ands	r3, r0
 801b284:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 801b286:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801b288:	085b      	lsrs	r3, r3, #1
 801b28a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801b28c:	e7b7      	b.n	801b1fe <HAL_SPI_TransmitReceive_DMA+0xde>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801b28e:	2210      	movs	r2, #16
 801b290:	6e23      	ldr	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 801b292:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801b294:	4313      	orrs	r3, r2
 801b296:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 801b298:	235d      	movs	r3, #93	; 0x5d
 801b29a:	54e5      	strb	r5, [r4, r3]
    goto error;
 801b29c:	e753      	b.n	801b146 <HAL_SPI_TransmitReceive_DMA+0x26>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 801b29e:	2580      	movs	r5, #128	; 0x80
 801b2a0:	684e      	ldr	r6, [r1, #4]
 801b2a2:	01ad      	lsls	r5, r5, #6
 801b2a4:	4335      	orrs	r5, r6
 801b2a6:	604d      	str	r5, [r1, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 801b2a8:	5ae5      	ldrh	r5, [r4, r3]
 801b2aa:	086d      	lsrs	r5, r5, #1
 801b2ac:	3501      	adds	r5, #1
 801b2ae:	52e5      	strh	r5, [r4, r3]
 801b2b0:	e779      	b.n	801b1a6 <HAL_SPI_TransmitReceive_DMA+0x86>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 801b2b2:	2380      	movs	r3, #128	; 0x80
 801b2b4:	6848      	ldr	r0, [r1, #4]
 801b2b6:	01db      	lsls	r3, r3, #7
 801b2b8:	4303      	orrs	r3, r0
 801b2ba:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 801b2bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801b2be:	085b      	lsrs	r3, r3, #1
 801b2c0:	3301      	adds	r3, #1
 801b2c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801b2c4:	e79b      	b.n	801b1fe <HAL_SPI_TransmitReceive_DMA+0xde>
 801b2c6:	46c0      	nop			; (mov r8, r8)
 801b2c8:	ffff9fff 	.word	0xffff9fff
 801b2cc:	ffffefff 	.word	0xffffefff
 801b2d0:	08019ec5 	.word	0x08019ec5
 801b2d4:	0801a3bd 	.word	0x0801a3bd
 801b2d8:	08019ed1 	.word	0x08019ed1
 801b2dc:	ffffdfff 	.word	0xffffdfff
 801b2e0:	08019eb9 	.word	0x08019eb9
 801b2e4:	0801a499 	.word	0x0801a499
 801b2e8:	ffffbfff 	.word	0xffffbfff

0801b2ec <HAL_SPI_Receive_DMA>:
{
 801b2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801b2ee:	6883      	ldr	r3, [r0, #8]
{
 801b2f0:	0004      	movs	r4, r0
 801b2f2:	000f      	movs	r7, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d105      	bne.n	801b304 <HAL_SPI_Receive_DMA+0x18>
 801b2f8:	2182      	movs	r1, #130	; 0x82
 801b2fa:	6840      	ldr	r0, [r0, #4]
 801b2fc:	0049      	lsls	r1, r1, #1
 801b2fe:	4288      	cmp	r0, r1
 801b300:	d100      	bne.n	801b304 <HAL_SPI_Receive_DMA+0x18>
 801b302:	e06e      	b.n	801b3e2 <HAL_SPI_Receive_DMA+0xf6>
  __HAL_LOCK(hspi);
 801b304:	205c      	movs	r0, #92	; 0x5c
 801b306:	5c21      	ldrb	r1, [r4, r0]
 801b308:	2901      	cmp	r1, #1
 801b30a:	d100      	bne.n	801b30e <HAL_SPI_Receive_DMA+0x22>
 801b30c:	e075      	b.n	801b3fa <HAL_SPI_Receive_DMA+0x10e>
 801b30e:	2101      	movs	r1, #1
 801b310:	5421      	strb	r1, [r4, r0]
  if (hspi->State != HAL_SPI_STATE_READY)
 801b312:	315c      	adds	r1, #92	; 0x5c
 801b314:	5c65      	ldrb	r5, [r4, r1]
 801b316:	b2ee      	uxtb	r6, r5
 801b318:	2d01      	cmp	r5, #1
 801b31a:	d005      	beq.n	801b328 <HAL_SPI_Receive_DMA+0x3c>
    errorcode = HAL_BUSY;
 801b31c:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 801b31e:	235c      	movs	r3, #92	; 0x5c
 801b320:	2200      	movs	r2, #0
 801b322:	54e2      	strb	r2, [r4, r3]
}
 801b324:	0030      	movs	r0, r6
 801b326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 801b328:	2f00      	cmp	r7, #0
 801b32a:	d0f8      	beq.n	801b31e <HAL_SPI_Receive_DMA+0x32>
 801b32c:	2a00      	cmp	r2, #0
 801b32e:	d0f6      	beq.n	801b31e <HAL_SPI_Receive_DMA+0x32>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801b330:	3858      	subs	r0, #88	; 0x58
 801b332:	5460      	strb	r0, [r4, r1]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801b334:	2100      	movs	r1, #0
  hspi->RxXferSize  = Size;
 801b336:	3040      	adds	r0, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801b338:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801b33a:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801b33c:	5222      	strh	r2, [r4, r0]
  hspi->RxXferCount = Size;
 801b33e:	3002      	adds	r0, #2
 801b340:	5222      	strh	r2, [r4, r0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801b342:	2280      	movs	r2, #128	; 0x80
    __HAL_SPI_DISABLE(hspi);
 801b344:	6825      	ldr	r5, [r4, #0]
  hspi->RxISR       = NULL;
 801b346:	64e1      	str	r1, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801b348:	6521      	str	r1, [r4, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 801b34a:	87a1      	strh	r1, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801b34c:	87e1      	strh	r1, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801b34e:	0212      	lsls	r2, r2, #8
 801b350:	4293      	cmp	r3, r2
 801b352:	d03d      	beq.n	801b3d0 <HAL_SPI_Receive_DMA+0xe4>
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 801b354:	686b      	ldr	r3, [r5, #4]
 801b356:	4a3a      	ldr	r2, [pc, #232]	; (801b440 <HAL_SPI_Receive_DMA+0x154>)
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801b358:	68e1      	ldr	r1, [r4, #12]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 801b35a:	4013      	ands	r3, r2
 801b35c:	606b      	str	r3, [r5, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801b35e:	23e0      	movs	r3, #224	; 0xe0
 801b360:	00db      	lsls	r3, r3, #3
 801b362:	4299      	cmp	r1, r3
 801b364:	d82e      	bhi.n	801b3c4 <HAL_SPI_Receive_DMA+0xd8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801b366:	2380      	movs	r3, #128	; 0x80
 801b368:	6869      	ldr	r1, [r5, #4]
 801b36a:	015b      	lsls	r3, r3, #5
 801b36c:	430b      	orrs	r3, r1
 801b36e:	606b      	str	r3, [r5, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801b370:	2380      	movs	r3, #128	; 0x80
 801b372:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b374:	00db      	lsls	r3, r3, #3
 801b376:	6981      	ldr	r1, [r0, #24]
 801b378:	4299      	cmp	r1, r3
 801b37a:	d048      	beq.n	801b40e <HAL_SPI_Receive_DMA+0x122>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 801b37c:	4b31      	ldr	r3, [pc, #196]	; (801b444 <HAL_SPI_Receive_DMA+0x158>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 801b37e:	0029      	movs	r1, r5
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 801b380:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 801b382:	4b31      	ldr	r3, [pc, #196]	; (801b448 <HAL_SPI_Receive_DMA+0x15c>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 801b384:	003a      	movs	r2, r7
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 801b386:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 801b388:	4b30      	ldr	r3, [pc, #192]	; (801b44c <HAL_SPI_Receive_DMA+0x160>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 801b38a:	310c      	adds	r1, #12
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 801b38c:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 801b38e:	2300      	movs	r3, #0
 801b390:	6383      	str	r3, [r0, #56]	; 0x38
                                 hspi->RxXferCount))
 801b392:	3346      	adds	r3, #70	; 0x46
 801b394:	5ae3      	ldrh	r3, [r4, r3]
 801b396:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 801b398:	f7fd fed0 	bl	801913c <HAL_DMA_Start_IT>
 801b39c:	2800      	cmp	r0, #0
 801b39e:	d12e      	bne.n	801b3fe <HAL_SPI_Receive_DMA+0x112>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801b3a0:	2240      	movs	r2, #64	; 0x40
 801b3a2:	6823      	ldr	r3, [r4, #0]
 801b3a4:	6819      	ldr	r1, [r3, #0]
 801b3a6:	420a      	tst	r2, r1
 801b3a8:	d102      	bne.n	801b3b0 <HAL_SPI_Receive_DMA+0xc4>
    __HAL_SPI_ENABLE(hspi);
 801b3aa:	6819      	ldr	r1, [r3, #0]
 801b3ac:	430a      	orrs	r2, r1
 801b3ae:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 801b3b0:	2120      	movs	r1, #32
 801b3b2:	685a      	ldr	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801b3b4:	2600      	movs	r6, #0
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 801b3b6:	430a      	orrs	r2, r1
 801b3b8:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 801b3ba:	685a      	ldr	r2, [r3, #4]
 801b3bc:	391f      	subs	r1, #31
 801b3be:	430a      	orrs	r2, r1
 801b3c0:	605a      	str	r2, [r3, #4]
 801b3c2:	e7ac      	b.n	801b31e <HAL_SPI_Receive_DMA+0x32>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801b3c4:	686b      	ldr	r3, [r5, #4]
 801b3c6:	4a22      	ldr	r2, [pc, #136]	; (801b450 <HAL_SPI_Receive_DMA+0x164>)
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801b3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801b3ca:	4013      	ands	r3, r2
 801b3cc:	606b      	str	r3, [r5, #4]
 801b3ce:	e7d5      	b.n	801b37c <HAL_SPI_Receive_DMA+0x90>
    __HAL_SPI_DISABLE(hspi);
 801b3d0:	2240      	movs	r2, #64	; 0x40
 801b3d2:	682b      	ldr	r3, [r5, #0]
 801b3d4:	4393      	bics	r3, r2
 801b3d6:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 801b3d8:	682b      	ldr	r3, [r5, #0]
 801b3da:	4a1e      	ldr	r2, [pc, #120]	; (801b454 <HAL_SPI_Receive_DMA+0x168>)
 801b3dc:	4013      	ands	r3, r2
 801b3de:	602b      	str	r3, [r5, #0]
 801b3e0:	e7b8      	b.n	801b354 <HAL_SPI_Receive_DMA+0x68>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801b3e2:	3901      	subs	r1, #1
 801b3e4:	335d      	adds	r3, #93	; 0x5d
 801b3e6:	39ff      	subs	r1, #255	; 0xff
 801b3e8:	54e1      	strb	r1, [r4, r3]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 801b3ea:	0020      	movs	r0, r4
 801b3ec:	0013      	movs	r3, r2
 801b3ee:	0039      	movs	r1, r7
 801b3f0:	003a      	movs	r2, r7
 801b3f2:	f7ff fe95 	bl	801b120 <HAL_SPI_TransmitReceive_DMA>
 801b3f6:	0006      	movs	r6, r0
 801b3f8:	e794      	b.n	801b324 <HAL_SPI_Receive_DMA+0x38>
  __HAL_LOCK(hspi);
 801b3fa:	2602      	movs	r6, #2
 801b3fc:	e792      	b.n	801b324 <HAL_SPI_Receive_DMA+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801b3fe:	2210      	movs	r2, #16
 801b400:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801b402:	4313      	orrs	r3, r2
 801b404:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 801b406:	235d      	movs	r3, #93	; 0x5d
 801b408:	3a0f      	subs	r2, #15
 801b40a:	54e2      	strb	r2, [r4, r3]
    goto error;
 801b40c:	e787      	b.n	801b31e <HAL_SPI_Receive_DMA+0x32>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801b40e:	686b      	ldr	r3, [r5, #4]
 801b410:	490f      	ldr	r1, [pc, #60]	; (801b450 <HAL_SPI_Receive_DMA+0x164>)
 801b412:	400b      	ands	r3, r1
 801b414:	606b      	str	r3, [r5, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 801b416:	2346      	movs	r3, #70	; 0x46
 801b418:	5ae1      	ldrh	r1, [r4, r3]
 801b41a:	07c9      	lsls	r1, r1, #31
 801b41c:	d406      	bmi.n	801b42c <HAL_SPI_Receive_DMA+0x140>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 801b41e:	6869      	ldr	r1, [r5, #4]
 801b420:	400a      	ands	r2, r1
 801b422:	606a      	str	r2, [r5, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 801b424:	5ae2      	ldrh	r2, [r4, r3]
 801b426:	0852      	lsrs	r2, r2, #1
 801b428:	52e2      	strh	r2, [r4, r3]
 801b42a:	e7a7      	b.n	801b37c <HAL_SPI_Receive_DMA+0x90>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 801b42c:	2280      	movs	r2, #128	; 0x80
 801b42e:	6869      	ldr	r1, [r5, #4]
 801b430:	0192      	lsls	r2, r2, #6
 801b432:	430a      	orrs	r2, r1
 801b434:	606a      	str	r2, [r5, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 801b436:	5ae2      	ldrh	r2, [r4, r3]
 801b438:	0852      	lsrs	r2, r2, #1
 801b43a:	3201      	adds	r2, #1
 801b43c:	52e2      	strh	r2, [r4, r3]
 801b43e:	e79d      	b.n	801b37c <HAL_SPI_Receive_DMA+0x90>
 801b440:	ffffdfff 	.word	0xffffdfff
 801b444:	08019eb9 	.word	0x08019eb9
 801b448:	0801a499 	.word	0x0801a499
 801b44c:	08019ed1 	.word	0x08019ed1
 801b450:	ffffefff 	.word	0xffffefff
 801b454:	ffffbfff 	.word	0xffffbfff

0801b458 <HAL_SPI_IRQHandler>:
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801b458:	2101      	movs	r1, #1
{
 801b45a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801b45c:	000e      	movs	r6, r1
  uint32_t itsource = hspi->Instance->CR2;
 801b45e:	6802      	ldr	r2, [r0, #0]
{
 801b460:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 801b462:	6855      	ldr	r5, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 801b464:	6893      	ldr	r3, [r2, #8]
{
 801b466:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801b468:	0998      	lsrs	r0, r3, #6
 801b46a:	4006      	ands	r6, r0
 801b46c:	4201      	tst	r1, r0
 801b46e:	d105      	bne.n	801b47c <HAL_SPI_IRQHandler+0x24>
 801b470:	4219      	tst	r1, r3
 801b472:	d003      	beq.n	801b47c <HAL_SPI_IRQHandler+0x24>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801b474:	09a8      	lsrs	r0, r5, #6
 801b476:	4201      	tst	r1, r0
 801b478:	d000      	beq.n	801b47c <HAL_SPI_IRQHandler+0x24>
 801b47a:	e088      	b.n	801b58e <HAL_SPI_IRQHandler+0x136>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801b47c:	2101      	movs	r1, #1
 801b47e:	0798      	lsls	r0, r3, #30
 801b480:	d503      	bpl.n	801b48a <HAL_SPI_IRQHandler+0x32>
 801b482:	09e8      	lsrs	r0, r5, #7
 801b484:	4201      	tst	r1, r0
 801b486:	d000      	beq.n	801b48a <HAL_SPI_IRQHandler+0x32>
 801b488:	e07d      	b.n	801b586 <HAL_SPI_IRQHandler+0x12e>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801b48a:	2001      	movs	r0, #1
 801b48c:	0007      	movs	r7, r0
 801b48e:	0959      	lsrs	r1, r3, #5
 801b490:	400f      	ands	r7, r1
 801b492:	4208      	tst	r0, r1
 801b494:	d051      	beq.n	801b53a <HAL_SPI_IRQHandler+0xe2>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801b496:	0969      	lsrs	r1, r5, #5
 801b498:	4208      	tst	r0, r1
 801b49a:	d04c      	beq.n	801b536 <HAL_SPI_IRQHandler+0xde>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801b49c:	2e00      	cmp	r6, #0
 801b49e:	d00f      	beq.n	801b4c0 <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801b4a0:	215d      	movs	r1, #93	; 0x5d
 801b4a2:	5c61      	ldrb	r1, [r4, r1]
 801b4a4:	2903      	cmp	r1, #3
 801b4a6:	d100      	bne.n	801b4aa <HAL_SPI_IRQHandler+0x52>
 801b4a8:	e075      	b.n	801b596 <HAL_SPI_IRQHandler+0x13e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801b4aa:	2004      	movs	r0, #4
 801b4ac:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801b4ae:	4301      	orrs	r1, r0
 801b4b0:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801b4b2:	2100      	movs	r1, #0
 801b4b4:	9100      	str	r1, [sp, #0]
 801b4b6:	68d1      	ldr	r1, [r2, #12]
 801b4b8:	9100      	str	r1, [sp, #0]
 801b4ba:	6891      	ldr	r1, [r2, #8]
 801b4bc:	9100      	str	r1, [sp, #0]
 801b4be:	9900      	ldr	r1, [sp, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801b4c0:	2001      	movs	r0, #1
 801b4c2:	6e21      	ldr	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801b4c4:	2640      	movs	r6, #64	; 0x40
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801b4c6:	4301      	orrs	r1, r0
 801b4c8:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801b4ca:	2100      	movs	r1, #0
 801b4cc:	9102      	str	r1, [sp, #8]
 801b4ce:	6891      	ldr	r1, [r2, #8]
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801b4d0:	0a1b      	lsrs	r3, r3, #8
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801b4d2:	9102      	str	r1, [sp, #8]
 801b4d4:	6811      	ldr	r1, [r2, #0]
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801b4d6:	4018      	ands	r0, r3
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801b4d8:	43b1      	bics	r1, r6
 801b4da:	6011      	str	r1, [r2, #0]
 801b4dc:	9902      	ldr	r1, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801b4de:	2800      	cmp	r0, #0
 801b4e0:	d147      	bne.n	801b572 <HAL_SPI_IRQHandler+0x11a>
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801b4e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d026      	beq.n	801b536 <HAL_SPI_IRQHandler+0xde>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801b4e8:	21e0      	movs	r1, #224	; 0xe0
 801b4ea:	6853      	ldr	r3, [r2, #4]
 801b4ec:	438b      	bics	r3, r1
 801b4ee:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 801b4f0:	235d      	movs	r3, #93	; 0x5d
 801b4f2:	39df      	subs	r1, #223	; 0xdf
 801b4f4:	54e1      	strb	r1, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801b4f6:	3b5a      	subs	r3, #90	; 0x5a
 801b4f8:	422b      	tst	r3, r5
 801b4fa:	d054      	beq.n	801b5a6 <HAL_SPI_IRQHandler+0x14e>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801b4fc:	6851      	ldr	r1, [r2, #4]
        if (hspi->hdmarx != NULL)
 801b4fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801b500:	4399      	bics	r1, r3
 801b502:	6051      	str	r1, [r2, #4]
        if (hspi->hdmarx != NULL)
 801b504:	2800      	cmp	r0, #0
 801b506:	d009      	beq.n	801b51c <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801b508:	4b29      	ldr	r3, [pc, #164]	; (801b5b0 <HAL_SPI_IRQHandler+0x158>)
 801b50a:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801b50c:	f7fd fe7e 	bl	801920c <HAL_DMA_Abort_IT>
 801b510:	2800      	cmp	r0, #0
 801b512:	d003      	beq.n	801b51c <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801b514:	2240      	movs	r2, #64	; 0x40
 801b516:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801b518:	4313      	orrs	r3, r2
 801b51a:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 801b51c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b51e:	2800      	cmp	r0, #0
 801b520:	d009      	beq.n	801b536 <HAL_SPI_IRQHandler+0xde>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801b522:	4b23      	ldr	r3, [pc, #140]	; (801b5b0 <HAL_SPI_IRQHandler+0x158>)
 801b524:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801b526:	f7fd fe71 	bl	801920c <HAL_DMA_Abort_IT>
 801b52a:	2800      	cmp	r0, #0
 801b52c:	d003      	beq.n	801b536 <HAL_SPI_IRQHandler+0xde>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801b52e:	2240      	movs	r2, #64	; 0x40
 801b530:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801b532:	4313      	orrs	r3, r2
 801b534:	6623      	str	r3, [r4, #96]	; 0x60
}
 801b536:	b005      	add	sp, #20
 801b538:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801b53a:	2e00      	cmp	r6, #0
 801b53c:	d013      	beq.n	801b566 <HAL_SPI_IRQHandler+0x10e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801b53e:	0969      	lsrs	r1, r5, #5
 801b540:	4208      	tst	r0, r1
 801b542:	d0f8      	beq.n	801b536 <HAL_SPI_IRQHandler+0xde>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801b544:	215d      	movs	r1, #93	; 0x5d
 801b546:	5c61      	ldrb	r1, [r4, r1]
 801b548:	2903      	cmp	r1, #3
 801b54a:	d024      	beq.n	801b596 <HAL_SPI_IRQHandler+0x13e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801b54c:	2604      	movs	r6, #4
 801b54e:	6e21      	ldr	r1, [r4, #96]	; 0x60
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801b550:	0a1b      	lsrs	r3, r3, #8
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801b552:	4331      	orrs	r1, r6
 801b554:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801b556:	9700      	str	r7, [sp, #0]
 801b558:	68d1      	ldr	r1, [r2, #12]
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801b55a:	4018      	ands	r0, r3
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801b55c:	9100      	str	r1, [sp, #0]
 801b55e:	6891      	ldr	r1, [r2, #8]
 801b560:	9100      	str	r1, [sp, #0]
 801b562:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801b564:	e7bb      	b.n	801b4de <HAL_SPI_IRQHandler+0x86>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801b566:	0a1b      	lsrs	r3, r3, #8
 801b568:	4218      	tst	r0, r3
 801b56a:	d0e4      	beq.n	801b536 <HAL_SPI_IRQHandler+0xde>
 801b56c:	096b      	lsrs	r3, r5, #5
 801b56e:	4218      	tst	r0, r3
 801b570:	d0e1      	beq.n	801b536 <HAL_SPI_IRQHandler+0xde>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801b572:	2108      	movs	r1, #8
 801b574:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801b576:	430b      	orrs	r3, r1
 801b578:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801b57a:	2300      	movs	r3, #0
 801b57c:	9303      	str	r3, [sp, #12]
 801b57e:	6893      	ldr	r3, [r2, #8]
 801b580:	9303      	str	r3, [sp, #12]
 801b582:	9b03      	ldr	r3, [sp, #12]
 801b584:	e7ad      	b.n	801b4e2 <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 801b586:	0020      	movs	r0, r4
 801b588:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801b58a:	4798      	blx	r3
    return;
 801b58c:	e7d3      	b.n	801b536 <HAL_SPI_IRQHandler+0xde>
    hspi->RxISR(hspi);
 801b58e:	0020      	movs	r0, r4
 801b590:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801b592:	4798      	blx	r3
    return;
 801b594:	e7cf      	b.n	801b536 <HAL_SPI_IRQHandler+0xde>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801b596:	2300      	movs	r3, #0
 801b598:	9301      	str	r3, [sp, #4]
 801b59a:	68d3      	ldr	r3, [r2, #12]
 801b59c:	9301      	str	r3, [sp, #4]
 801b59e:	6893      	ldr	r3, [r2, #8]
 801b5a0:	9301      	str	r3, [sp, #4]
 801b5a2:	9b01      	ldr	r3, [sp, #4]
        return;
 801b5a4:	e7c7      	b.n	801b536 <HAL_SPI_IRQHandler+0xde>
        hspi->ErrorCallback(hspi);
 801b5a6:	0020      	movs	r0, r4
 801b5a8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801b5aa:	4798      	blx	r3
 801b5ac:	e7c3      	b.n	801b536 <HAL_SPI_IRQHandler+0xde>
 801b5ae:	46c0      	nop			; (mov r8, r8)
 801b5b0:	08019ef5 	.word	0x08019ef5

0801b5b4 <HAL_SPI_GetState>:
  return hspi->State;
 801b5b4:	235d      	movs	r3, #93	; 0x5d
 801b5b6:	5cc0      	ldrb	r0, [r0, r3]
 801b5b8:	b2c0      	uxtb	r0, r0
}
 801b5ba:	4770      	bx	lr

0801b5bc <__libc_init_array>:
 801b5bc:	b570      	push	{r4, r5, r6, lr}
 801b5be:	2600      	movs	r6, #0
 801b5c0:	4d0c      	ldr	r5, [pc, #48]	; (801b5f4 <__libc_init_array+0x38>)
 801b5c2:	4c0d      	ldr	r4, [pc, #52]	; (801b5f8 <__libc_init_array+0x3c>)
 801b5c4:	1b64      	subs	r4, r4, r5
 801b5c6:	10a4      	asrs	r4, r4, #2
 801b5c8:	42a6      	cmp	r6, r4
 801b5ca:	d109      	bne.n	801b5e0 <__libc_init_array+0x24>
 801b5cc:	2600      	movs	r6, #0
 801b5ce:	f000 f845 	bl	801b65c <_init>
 801b5d2:	4d0a      	ldr	r5, [pc, #40]	; (801b5fc <__libc_init_array+0x40>)
 801b5d4:	4c0a      	ldr	r4, [pc, #40]	; (801b600 <__libc_init_array+0x44>)
 801b5d6:	1b64      	subs	r4, r4, r5
 801b5d8:	10a4      	asrs	r4, r4, #2
 801b5da:	42a6      	cmp	r6, r4
 801b5dc:	d105      	bne.n	801b5ea <__libc_init_array+0x2e>
 801b5de:	bd70      	pop	{r4, r5, r6, pc}
 801b5e0:	00b3      	lsls	r3, r6, #2
 801b5e2:	58eb      	ldr	r3, [r5, r3]
 801b5e4:	4798      	blx	r3
 801b5e6:	3601      	adds	r6, #1
 801b5e8:	e7ee      	b.n	801b5c8 <__libc_init_array+0xc>
 801b5ea:	00b3      	lsls	r3, r6, #2
 801b5ec:	58eb      	ldr	r3, [r5, r3]
 801b5ee:	4798      	blx	r3
 801b5f0:	3601      	adds	r6, #1
 801b5f2:	e7f2      	b.n	801b5da <__libc_init_array+0x1e>
 801b5f4:	0801f3a0 	.word	0x0801f3a0
 801b5f8:	0801f3a0 	.word	0x0801f3a0
 801b5fc:	0801f3a0 	.word	0x0801f3a0
 801b600:	0801f3a4 	.word	0x0801f3a4

0801b604 <memcpy>:
 801b604:	2300      	movs	r3, #0
 801b606:	b510      	push	{r4, lr}
 801b608:	429a      	cmp	r2, r3
 801b60a:	d100      	bne.n	801b60e <memcpy+0xa>
 801b60c:	bd10      	pop	{r4, pc}
 801b60e:	5ccc      	ldrb	r4, [r1, r3]
 801b610:	54c4      	strb	r4, [r0, r3]
 801b612:	3301      	adds	r3, #1
 801b614:	e7f8      	b.n	801b608 <memcpy+0x4>

0801b616 <memmove>:
 801b616:	b510      	push	{r4, lr}
 801b618:	4288      	cmp	r0, r1
 801b61a:	d902      	bls.n	801b622 <memmove+0xc>
 801b61c:	188b      	adds	r3, r1, r2
 801b61e:	4298      	cmp	r0, r3
 801b620:	d303      	bcc.n	801b62a <memmove+0x14>
 801b622:	2300      	movs	r3, #0
 801b624:	e007      	b.n	801b636 <memmove+0x20>
 801b626:	5c8b      	ldrb	r3, [r1, r2]
 801b628:	5483      	strb	r3, [r0, r2]
 801b62a:	3a01      	subs	r2, #1
 801b62c:	d2fb      	bcs.n	801b626 <memmove+0x10>
 801b62e:	bd10      	pop	{r4, pc}
 801b630:	5ccc      	ldrb	r4, [r1, r3]
 801b632:	54c4      	strb	r4, [r0, r3]
 801b634:	3301      	adds	r3, #1
 801b636:	429a      	cmp	r2, r3
 801b638:	d1fa      	bne.n	801b630 <memmove+0x1a>
 801b63a:	e7f8      	b.n	801b62e <memmove+0x18>

0801b63c <memset>:
 801b63c:	0003      	movs	r3, r0
 801b63e:	1882      	adds	r2, r0, r2
 801b640:	4293      	cmp	r3, r2
 801b642:	d100      	bne.n	801b646 <memset+0xa>
 801b644:	4770      	bx	lr
 801b646:	7019      	strb	r1, [r3, #0]
 801b648:	3301      	adds	r3, #1
 801b64a:	e7f9      	b.n	801b640 <memset+0x4>

0801b64c <strcpy>:
 801b64c:	0003      	movs	r3, r0
 801b64e:	780a      	ldrb	r2, [r1, #0]
 801b650:	3101      	adds	r1, #1
 801b652:	701a      	strb	r2, [r3, #0]
 801b654:	3301      	adds	r3, #1
 801b656:	2a00      	cmp	r2, #0
 801b658:	d1f9      	bne.n	801b64e <strcpy+0x2>
 801b65a:	4770      	bx	lr

0801b65c <_init>:
 801b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b65e:	46c0      	nop			; (mov r8, r8)
 801b660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b662:	bc08      	pop	{r3}
 801b664:	469e      	mov	lr, r3
 801b666:	4770      	bx	lr

0801b668 <_fini>:
 801b668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b66a:	46c0      	nop			; (mov r8, r8)
 801b66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b66e:	bc08      	pop	{r3}
 801b670:	469e      	mov	lr, r3
 801b672:	4770      	bx	lr
